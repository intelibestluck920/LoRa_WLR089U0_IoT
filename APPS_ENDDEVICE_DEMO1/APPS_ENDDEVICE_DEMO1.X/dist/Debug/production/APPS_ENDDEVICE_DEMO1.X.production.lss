
dist/Debug/production/APPS_ENDDEVICE_DEMO1.X.production.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001b2d4  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0001b2d4  0001b2d4  0002b2d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a10  20000000  0001b2dc  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .lpram        00000000  30000000  30000000  00030a10  2**0
                  CONTENTS
  4 .bss          000011e8  20000a10  0001bcf0  00030a10  2**3
                  ALLOC
  5 .stack        00002000  20001bf8  0001ced8  00030a10  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  00030a10  2**0
                  CONTENTS, READONLY
  7 .comment      0000008c  00000000  00000000  00030a38  2**0
                  CONTENTS, READONLY
  8 .debug_info   00088c9a  00000000  00000000  00030ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000c7d5  00000000  00000000  000b975e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001638  00000000  00000000  000c5f33  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001c80  00000000  00000000  000c756b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00031a9b  00000000  00000000  000c91eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0003242c  00000000  00000000  000fac86  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000b05b7  00000000  00000000  0012d0b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00004d18  00000000  00000000  001dd66c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    000172c1  00000000  00000000  001e2384  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f8 3b 00 20 95 33 00 00 2d 34 00 00 2d 34 00 00     .;. .3..-4..-4..
	...
      2c:	2d 34 00 00 00 00 00 00 00 00 00 00 2d 34 00 00     -4..........-4..
      3c:	2d 34 00 00 2d 34 00 00 2d 34 00 00 0d 0e 00 00     -4..-4..-4......
      4c:	ad 0a 00 00 2d 34 00 00 2d 34 00 00 2d 34 00 00     ....-4..-4..-4..
      5c:	2d 34 00 00 b5 25 00 00 c5 25 00 00 d5 25 00 00     -4...%...%...%..
      6c:	e5 25 00 00 f5 25 00 00 05 26 00 00 2d 34 00 00     .%...%...&..-4..
      7c:	2d 34 00 00 2d 34 00 00 45 33 00 00 55 33 00 00     -4..-4..E3..U3..
      8c:	65 33 00 00 75 33 00 00 85 33 00 00 b9 06 00 00     e3..u3...3......
      9c:	2d 34 00 00 2d 34 00 00 2d 34 00 00 2d 34 00 00     -4..-4..-4..-4..
      ac:	2d 34 00 00 00 00 00 00                             -4......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000a10 	.word	0x20000a10
      d4:	00000000 	.word	0x00000000
      d8:	0001b2dc 	.word	0x0001b2dc

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000a14 	.word	0x20000a14
     108:	0001b2dc 	.word	0x0001b2dc
     10c:	0001b2dc 	.word	0x0001b2dc
     110:	00000000 	.word	0x00000000

00000114 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     114:	4b0c      	ldr	r3, [pc, #48]	; (148 <cpu_irq_enter_critical+0x34>)
     116:	681b      	ldr	r3, [r3, #0]
     118:	2b00      	cmp	r3, #0
     11a:	d106      	bne.n	12a <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     11c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     120:	2b00      	cmp	r3, #0
     122:	d007      	beq.n	134 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     124:	2200      	movs	r2, #0
     126:	4b09      	ldr	r3, [pc, #36]	; (14c <cpu_irq_enter_critical+0x38>)
     128:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     12a:	4a07      	ldr	r2, [pc, #28]	; (148 <cpu_irq_enter_critical+0x34>)
     12c:	6813      	ldr	r3, [r2, #0]
     12e:	3301      	adds	r3, #1
     130:	6013      	str	r3, [r2, #0]
}
     132:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     134:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     136:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     13a:	2200      	movs	r2, #0
     13c:	4b04      	ldr	r3, [pc, #16]	; (150 <cpu_irq_enter_critical+0x3c>)
     13e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     140:	3201      	adds	r2, #1
     142:	4b02      	ldr	r3, [pc, #8]	; (14c <cpu_irq_enter_critical+0x38>)
     144:	701a      	strb	r2, [r3, #0]
     146:	e7f0      	b.n	12a <cpu_irq_enter_critical+0x16>
     148:	20000a2c 	.word	0x20000a2c
     14c:	20000a30 	.word	0x20000a30
     150:	20000000 	.word	0x20000000

00000154 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     154:	4b08      	ldr	r3, [pc, #32]	; (178 <cpu_irq_leave_critical+0x24>)
     156:	681a      	ldr	r2, [r3, #0]
     158:	3a01      	subs	r2, #1
     15a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     15c:	681b      	ldr	r3, [r3, #0]
     15e:	2b00      	cmp	r3, #0
     160:	d109      	bne.n	176 <cpu_irq_leave_critical+0x22>
     162:	4b06      	ldr	r3, [pc, #24]	; (17c <cpu_irq_leave_critical+0x28>)
     164:	781b      	ldrb	r3, [r3, #0]
     166:	2b00      	cmp	r3, #0
     168:	d005      	beq.n	176 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     16a:	2201      	movs	r2, #1
     16c:	4b04      	ldr	r3, [pc, #16]	; (180 <cpu_irq_leave_critical+0x2c>)
     16e:	701a      	strb	r2, [r3, #0]
     170:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     174:	b662      	cpsie	i
	}
}
     176:	4770      	bx	lr
     178:	20000a2c 	.word	0x20000a2c
     17c:	20000a30 	.word	0x20000a30
     180:	20000000 	.word	0x20000000

00000184 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     184:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     186:	2000      	movs	r0, #0
     188:	4b08      	ldr	r3, [pc, #32]	; (1ac <delay_init+0x28>)
     18a:	4798      	blx	r3
     18c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     18e:	4c08      	ldr	r4, [pc, #32]	; (1b0 <delay_init+0x2c>)
     190:	21fa      	movs	r1, #250	; 0xfa
     192:	0089      	lsls	r1, r1, #2
     194:	47a0      	blx	r4
     196:	4b07      	ldr	r3, [pc, #28]	; (1b4 <delay_init+0x30>)
     198:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     19a:	4907      	ldr	r1, [pc, #28]	; (1b8 <delay_init+0x34>)
     19c:	0028      	movs	r0, r5
     19e:	47a0      	blx	r4
     1a0:	4b06      	ldr	r3, [pc, #24]	; (1bc <delay_init+0x38>)
     1a2:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     1a4:	2205      	movs	r2, #5
     1a6:	4b06      	ldr	r3, [pc, #24]	; (1c0 <delay_init+0x3c>)
     1a8:	601a      	str	r2, [r3, #0]
}
     1aa:	bd70      	pop	{r4, r5, r6, pc}
     1ac:	00002c81 	.word	0x00002c81
     1b0:	00011769 	.word	0x00011769
     1b4:	20000004 	.word	0x20000004
     1b8:	000f4240 	.word	0x000f4240
     1bc:	20000008 	.word	0x20000008
     1c0:	e000e010 	.word	0xe000e010

000001c4 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     1c4:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     1c6:	4b08      	ldr	r3, [pc, #32]	; (1e8 <delay_cycles_us+0x24>)
     1c8:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     1ca:	4a08      	ldr	r2, [pc, #32]	; (1ec <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     1cc:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     1ce:	2180      	movs	r1, #128	; 0x80
     1d0:	0249      	lsls	r1, r1, #9
	while (n--) {
     1d2:	3801      	subs	r0, #1
     1d4:	d307      	bcc.n	1e6 <delay_cycles_us+0x22>
	if (n > 0) {
     1d6:	2c00      	cmp	r4, #0
     1d8:	d0fb      	beq.n	1d2 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
     1da:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     1dc:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     1de:	6813      	ldr	r3, [r2, #0]
     1e0:	420b      	tst	r3, r1
     1e2:	d0fc      	beq.n	1de <delay_cycles_us+0x1a>
     1e4:	e7f5      	b.n	1d2 <delay_cycles_us+0xe>
	}
}
     1e6:	bd30      	pop	{r4, r5, pc}
     1e8:	20000008 	.word	0x20000008
     1ec:	e000e010 	.word	0xe000e010

000001f0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     1f0:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     1f2:	4b08      	ldr	r3, [pc, #32]	; (214 <delay_cycles_ms+0x24>)
     1f4:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
     1f6:	4a08      	ldr	r2, [pc, #32]	; (218 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     1f8:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     1fa:	2180      	movs	r1, #128	; 0x80
     1fc:	0249      	lsls	r1, r1, #9
	while (n--) {
     1fe:	3801      	subs	r0, #1
     200:	d307      	bcc.n	212 <delay_cycles_ms+0x22>
	if (n > 0) {
     202:	2c00      	cmp	r4, #0
     204:	d0fb      	beq.n	1fe <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     206:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     208:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     20a:	6813      	ldr	r3, [r2, #0]
     20c:	420b      	tst	r3, r1
     20e:	d0fc      	beq.n	20a <delay_cycles_ms+0x1a>
     210:	e7f5      	b.n	1fe <delay_cycles_ms+0xe>
	}
}
     212:	bd30      	pop	{r4, r5, pc}
     214:	20000004 	.word	0x20000004
     218:	e000e010 	.word	0xe000e010

0000021c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     21c:	b5f0      	push	{r4, r5, r6, r7, lr}
     21e:	46c6      	mov	lr, r8
     220:	b500      	push	{lr}
     222:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     224:	ac01      	add	r4, sp, #4
     226:	2501      	movs	r5, #1
     228:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     22a:	2300      	movs	r3, #0
     22c:	4698      	mov	r8, r3
     22e:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     230:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     232:	0021      	movs	r1, r4
     234:	2013      	movs	r0, #19
     236:	4e12      	ldr	r6, [pc, #72]	; (280 <system_board_init+0x64>)
     238:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     23a:	4f12      	ldr	r7, [pc, #72]	; (284 <system_board_init+0x68>)
     23c:	2380      	movs	r3, #128	; 0x80
     23e:	031b      	lsls	r3, r3, #12
     240:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     242:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_1_PIN, &pin_conf);
     244:	0021      	movs	r1, r4
     246:	2012      	movs	r0, #18
     248:	47b0      	blx	r6
     24a:	2380      	movs	r3, #128	; 0x80
     24c:	02db      	lsls	r3, r3, #11
     24e:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);
#ifdef RFSWITCH_ENABLE
	/* Configure RFSWITCH as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     250:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(RF_SWITCH_PIN, &pin_conf);
     252:	0021      	movs	r1, r4
     254:	200d      	movs	r0, #13
     256:	47b0      	blx	r6
	} else {
		port_base->OUTCLR.reg = pin_mask;
     258:	2380      	movs	r3, #128	; 0x80
     25a:	019b      	lsls	r3, r3, #6
     25c:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
#endif

#ifdef TCXO_ENABLE
	/* Configure TXPO PWR as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     25e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(TCXO_PWR_PIN, &pin_conf);
     260:	0021      	movs	r1, r4
     262:	2009      	movs	r0, #9
     264:	47b0      	blx	r6
     266:	2380      	movs	r3, #128	; 0x80
     268:	009b      	lsls	r3, r3, #2
     26a:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     26c:	4643      	mov	r3, r8
     26e:	7023      	strb	r3, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     270:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     272:	0021      	movs	r1, r4
     274:	201c      	movs	r0, #28
     276:	47b0      	blx	r6
		
}
     278:	b002      	add	sp, #8
     27a:	bc04      	pop	{r2}
     27c:	4690      	mov	r8, r2
     27e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     280:	00000b01 	.word	0x00000b01
     284:	40002800 	.word	0x40002800

00000288 <_adc_get_inst_index>:
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
     288:	2000      	movs	r0, #0
     28a:	4770      	bx	lr

0000028c <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     28c:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     28e:	2300      	movs	r3, #0
     290:	2200      	movs	r2, #0
     292:	7003      	strb	r3, [r0, #0]
	config->reference                     = ADC_REFERENCE_INTREF;
     294:	7043      	strb	r3, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV2;
     296:	7083      	strb	r3, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     298:	70c3      	strb	r3, [r0, #3]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     29a:	2100      	movs	r1, #0
     29c:	8303      	strh	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     29e:	6203      	str	r3, [r0, #32]
	config->window.window_lower_value     = 0;
     2a0:	61c3      	str	r3, [r0, #28]
#if SAMR30 || SAMR34 || SAMR35
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6;
     2a2:	2406      	movs	r4, #6
     2a4:	7104      	strb	r4, [r0, #4]
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN1;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND;
     2a6:	24c0      	movs	r4, #192	; 0xc0
     2a8:	0164      	lsls	r4, r4, #5
     2aa:	80c4      	strh	r4, [r0, #6]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     2ac:	7201      	strb	r1, [r0, #8]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     2ae:	7242      	strb	r2, [r0, #9]
	config->left_adjust                   = false;
     2b0:	7282      	strb	r2, [r0, #10]
	config->differential_mode             = false;
     2b2:	72c2      	strb	r2, [r0, #11]
	config->freerunning                   = false;
     2b4:	7302      	strb	r2, [r0, #12]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     2b6:	242a      	movs	r4, #42	; 0x2a
     2b8:	5502      	strb	r2, [r0, r4]
	config->run_in_standby                = false;
     2ba:	7342      	strb	r2, [r0, #13]
	config->on_demand                     = false;
     2bc:	7382      	strb	r2, [r0, #14]
	config->sampling_time_compensation_enable  = false;
     2be:	73c2      	strb	r2, [r0, #15]
	config->positive_input_sequence_mask_enable = 0;
     2c0:	6103      	str	r3, [r0, #16]
	config->reference_compensation_enable = false;
     2c2:	7502      	strb	r2, [r0, #20]
	config->correction.correction_enable  = false;
     2c4:	3c06      	subs	r4, #6
     2c6:	5502      	strb	r2, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     2c8:	84c3      	strh	r3, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     2ca:	8503      	strh	r3, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     2cc:	7541      	strb	r1, [r0, #21]
}
     2ce:	bd10      	pop	{r4, pc}

000002d0 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
     2d2:	46ce      	mov	lr, r9
     2d4:	b500      	push	{lr}
     2d6:	b098      	sub	sp, #96	; 0x60
     2d8:	0005      	movs	r5, r0
     2da:	000c      	movs	r4, r1
     2dc:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Temporary variable to hold ADC instance number */
	uint8_t instance = _adc_get_inst_index(hw);
     2de:	0008      	movs	r0, r1
     2e0:	4bb2      	ldr	r3, [pc, #712]	; (5ac <adc_init+0x2dc>)
     2e2:	4798      	blx	r3

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     2e4:	602c      	str	r4, [r5, #0]

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     2e6:	4ab2      	ldr	r2, [pc, #712]	; (5b0 <adc_init+0x2e0>)
     2e8:	6a13      	ldr	r3, [r2, #32]
     2ea:	2108      	movs	r1, #8
     2ec:	430b      	orrs	r3, r1
     2ee:	6213      	str	r3, [r2, #32]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     2f0:	7822      	ldrb	r2, [r4, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     2f2:	2305      	movs	r3, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     2f4:	07d2      	lsls	r2, r2, #31
     2f6:	d504      	bpl.n	302 <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(instance, module_inst, config);
}
     2f8:	0018      	movs	r0, r3
     2fa:	b018      	add	sp, #96	; 0x60
     2fc:	bc04      	pop	{r2}
     2fe:	4691      	mov	r9, r2
     300:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     302:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
     304:	8c13      	ldrh	r3, [r2, #32]
     306:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     308:	2b00      	cmp	r3, #0
     30a:	d1fb      	bne.n	304 <adc_init+0x34>
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     30c:	7822      	ldrb	r2, [r4, #0]
		return STATUS_ERR_DENIED;
     30e:	331c      	adds	r3, #28
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     310:	0792      	lsls	r2, r2, #30
     312:	d4f1      	bmi.n	2f8 <adc_init+0x28>
	module_inst->reference = config->reference;
     314:	7873      	ldrb	r3, [r6, #1]
     316:	712b      	strb	r3, [r5, #4]
	if (module_inst->reference == ADC_REFERENCE_INTREF) {
     318:	2b00      	cmp	r3, #0
     31a:	d104      	bne.n	326 <adc_init+0x56>
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SUPC->VREF.reg |= SUPC_VREF_TSEN;
			break;
		case SYSTEM_VOLTAGE_REFERENCE_OUTPUT:
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
     31c:	4aa5      	ldr	r2, [pc, #660]	; (5b4 <adc_init+0x2e4>)
     31e:	69d3      	ldr	r3, [r2, #28]
     320:	2104      	movs	r1, #4
     322:	430b      	orrs	r3, r1
     324:	61d3      	str	r3, [r2, #28]
		module_inst->callback[i] = NULL;
     326:	2300      	movs	r3, #0
     328:	60ab      	str	r3, [r5, #8]
     32a:	60eb      	str	r3, [r5, #12]
     32c:	612b      	str	r3, [r5, #16]
	module_inst->registered_callback_mask = 0;
     32e:	76ab      	strb	r3, [r5, #26]
	module_inst->enabled_callback_mask = 0;
     330:	76eb      	strb	r3, [r5, #27]
	module_inst->remaining_conversions = 0;
     332:	832b      	strh	r3, [r5, #24]
	module_inst->job_status = STATUS_OK;
     334:	772b      	strb	r3, [r5, #28]
	_adc_instances[instance] = module_inst;
     336:	0080      	lsls	r0, r0, #2
     338:	4b9f      	ldr	r3, [pc, #636]	; (5b8 <adc_init+0x2e8>)
     33a:	50c5      	str	r5, [r0, r3]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     33c:	232a      	movs	r3, #42	; 0x2a
     33e:	5cf3      	ldrb	r3, [r6, r3]
     340:	2b00      	cmp	r3, #0
     342:	d105      	bne.n	350 <adc_init+0x80>
     344:	7b33      	ldrb	r3, [r6, #12]
     346:	2b00      	cmp	r3, #0
     348:	d102      	bne.n	350 <adc_init+0x80>
		module_inst->software_trigger = true;
     34a:	3301      	adds	r3, #1
     34c:	776b      	strb	r3, [r5, #29]
     34e:	e001      	b.n	354 <adc_init+0x84>
		module_inst->software_trigger = false;
     350:	2300      	movs	r3, #0
     352:	776b      	strb	r3, [r5, #29]
	Adc *const adc_module = module_inst->hw;
     354:	682f      	ldr	r7, [r5, #0]
	gclk_chan_conf.source_generator = config->clock_source;
     356:	7833      	ldrb	r3, [r6, #0]
     358:	466a      	mov	r2, sp
     35a:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
     35c:	4669      	mov	r1, sp
     35e:	201e      	movs	r0, #30
     360:	4b96      	ldr	r3, [pc, #600]	; (5bc <adc_init+0x2ec>)
     362:	4798      	blx	r3
	system_gclk_chan_enable(_adc_gclk_ids[index]);
     364:	201e      	movs	r0, #30
     366:	4b96      	ldr	r3, [pc, #600]	; (5c0 <adc_init+0x2f0>)
     368:	4798      	blx	r3
	_adc_configure_ain_pin(index, config->positive_input);
     36a:	7934      	ldrb	r4, [r6, #4]
	const uint32_t pinmapping[] = {
     36c:	2258      	movs	r2, #88	; 0x58
     36e:	4995      	ldr	r1, [pc, #596]	; (5c4 <adc_init+0x2f4>)
     370:	a802      	add	r0, sp, #8
     372:	4b95      	ldr	r3, [pc, #596]	; (5c8 <adc_init+0x2f8>)
     374:	4798      	blx	r3
	if (pin <= _adc_extchannel_msb[index]) {
     376:	2c13      	cmp	r4, #19
     378:	d90b      	bls.n	392 <adc_init+0xc2>
	_adc_configure_ain_pin(index, config->negative_input);
     37a:	88f4      	ldrh	r4, [r6, #6]
	const uint32_t pinmapping[] = {
     37c:	2258      	movs	r2, #88	; 0x58
     37e:	4991      	ldr	r1, [pc, #580]	; (5c4 <adc_init+0x2f4>)
     380:	a802      	add	r0, sp, #8
     382:	4b91      	ldr	r3, [pc, #580]	; (5c8 <adc_init+0x2f8>)
     384:	4798      	blx	r3
	if (pin <= _adc_extchannel_msb[index]) {
     386:	2c13      	cmp	r4, #19
     388:	d911      	bls.n	3ae <adc_init+0xde>
     38a:	2400      	movs	r4, #0
	const uint32_t pinmapping[] = {
     38c:	4b8e      	ldr	r3, [pc, #568]	; (5c8 <adc_init+0x2f8>)
     38e:	4699      	mov	r9, r3
     390:	e01e      	b.n	3d0 <adc_init+0x100>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     392:	00a4      	lsls	r4, r4, #2
     394:	ab02      	add	r3, sp, #8
     396:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     398:	a901      	add	r1, sp, #4
     39a:	2300      	movs	r3, #0
     39c:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     39e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     3a0:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     3a2:	3301      	adds	r3, #1
     3a4:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     3a6:	b2c0      	uxtb	r0, r0
     3a8:	4b88      	ldr	r3, [pc, #544]	; (5cc <adc_init+0x2fc>)
     3aa:	4798      	blx	r3
     3ac:	e7e5      	b.n	37a <adc_init+0xaa>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     3ae:	00a4      	lsls	r4, r4, #2
     3b0:	ab02      	add	r3, sp, #8
     3b2:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     3b4:	a901      	add	r1, sp, #4
     3b6:	2300      	movs	r3, #0
     3b8:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     3ba:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     3bc:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     3be:	3301      	adds	r3, #1
     3c0:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     3c2:	b2c0      	uxtb	r0, r0
     3c4:	4b81      	ldr	r3, [pc, #516]	; (5cc <adc_init+0x2fc>)
     3c6:	4798      	blx	r3
     3c8:	e7df      	b.n	38a <adc_init+0xba>
     3ca:	3401      	adds	r4, #1
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
     3cc:	2c14      	cmp	r4, #20
     3ce:	d018      	beq.n	402 <adc_init+0x132>
		if(config->positive_input_sequence_mask_enable & (1 << i)){
     3d0:	2301      	movs	r3, #1
     3d2:	40a3      	lsls	r3, r4
     3d4:	6932      	ldr	r2, [r6, #16]
     3d6:	421a      	tst	r2, r3
     3d8:	d0f7      	beq.n	3ca <adc_init+0xfa>
	const uint32_t pinmapping[] = {
     3da:	2258      	movs	r2, #88	; 0x58
     3dc:	4979      	ldr	r1, [pc, #484]	; (5c4 <adc_init+0x2f4>)
     3de:	a802      	add	r0, sp, #8
     3e0:	47c8      	blx	r9
	if (pin <= _adc_extchannel_msb[index]) {
     3e2:	2c13      	cmp	r4, #19
     3e4:	d8f1      	bhi.n	3ca <adc_init+0xfa>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     3e6:	00a3      	lsls	r3, r4, #2
     3e8:	aa02      	add	r2, sp, #8
     3ea:	5898      	ldr	r0, [r3, r2]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     3ec:	a901      	add	r1, sp, #4
     3ee:	2300      	movs	r3, #0
     3f0:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     3f2:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     3f4:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     3f6:	3301      	adds	r3, #1
     3f8:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     3fa:	b2c0      	uxtb	r0, r0
     3fc:	4b73      	ldr	r3, [pc, #460]	; (5cc <adc_init+0x2fc>)
     3fe:	4798      	blx	r3
     400:	e7e3      	b.n	3ca <adc_init+0xfa>
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     402:	7b73      	ldrb	r3, [r6, #13]
     404:	019b      	lsls	r3, r3, #6
						    | (config->on_demand << ADC_CTRLA_ONDEMAND_Pos)) ;
     406:	7bb2      	ldrb	r2, [r6, #14]
     408:	01d2      	lsls	r2, r2, #7
     40a:	4313      	orrs	r3, r2
     40c:	b2db      	uxtb	r3, r3
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     40e:	703b      	strb	r3, [r7, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos)
     410:	7d33      	ldrb	r3, [r6, #20]
     412:	01db      	lsls	r3, r3, #7
			| (config->reference);
     414:	7872      	ldrb	r2, [r6, #1]
     416:	4313      	orrs	r3, r2
     418:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     41a:	70bb      	strb	r3, [r7, #2]
	switch (config->resolution) {
     41c:	78f3      	ldrb	r3, [r6, #3]
     41e:	2b34      	cmp	r3, #52	; 0x34
     420:	d900      	bls.n	424 <adc_init+0x154>
     422:	e140      	b.n	6a6 <adc_init+0x3d6>
     424:	009b      	lsls	r3, r3, #2
     426:	4a6a      	ldr	r2, [pc, #424]	; (5d0 <adc_init+0x300>)
     428:	58d3      	ldr	r3, [r2, r3]
     42a:	469f      	mov	pc, r3
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     42c:	2204      	movs	r2, #4
		resolution = ADC_RESOLUTION_16BIT;
     42e:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_4;
     430:	2102      	movs	r1, #2
     432:	e01a      	b.n	46a <adc_init+0x19a>
		adjres = config->divide_result;
     434:	7a71      	ldrb	r1, [r6, #9]
		accumulate = config->accumulate_samples;
     436:	7a32      	ldrb	r2, [r6, #8]
		resolution = ADC_RESOLUTION_16BIT;
     438:	2010      	movs	r0, #16
     43a:	e016      	b.n	46a <adc_init+0x19a>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     43c:	2206      	movs	r2, #6
		resolution = ADC_RESOLUTION_16BIT;
     43e:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_2;
     440:	2101      	movs	r1, #1
     442:	e012      	b.n	46a <adc_init+0x19a>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     444:	2208      	movs	r2, #8
		resolution = ADC_RESOLUTION_16BIT;
     446:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     448:	2100      	movs	r1, #0
     44a:	e00e      	b.n	46a <adc_init+0x19a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     44c:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_8BIT;
     44e:	2030      	movs	r0, #48	; 0x30
	uint8_t adjres = 0;
     450:	2100      	movs	r1, #0
     452:	e00a      	b.n	46a <adc_init+0x19a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     454:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_10BIT;
     456:	2020      	movs	r0, #32
	uint8_t adjres = 0;
     458:	2100      	movs	r1, #0
     45a:	e006      	b.n	46a <adc_init+0x19a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     45c:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_12BIT;
     45e:	2000      	movs	r0, #0
	uint8_t adjres = 0;
     460:	2100      	movs	r1, #0
     462:	e002      	b.n	46a <adc_init+0x19a>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     464:	2202      	movs	r2, #2
		resolution = ADC_RESOLUTION_16BIT;
     466:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_2;
     468:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     46a:	0109      	lsls	r1, r1, #4
     46c:	2370      	movs	r3, #112	; 0x70
     46e:	400b      	ands	r3, r1
     470:	4313      	orrs	r3, r2
     472:	733b      	strb	r3, [r7, #12]
	Adc *const adc_module = module_inst->hw;
     474:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     476:	8c13      	ldrh	r3, [r2, #32]
     478:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     47a:	2b00      	cmp	r3, #0
     47c:	d1fb      	bne.n	476 <adc_init+0x1a6>
	if (config->sample_length > 63) {
     47e:	7d72      	ldrb	r2, [r6, #21]
		return STATUS_ERR_INVALID_ARG;
     480:	3317      	adds	r3, #23
	if (config->sample_length > 63) {
     482:	2a3f      	cmp	r2, #63	; 0x3f
     484:	d900      	bls.n	488 <adc_init+0x1b8>
     486:	e737      	b.n	2f8 <adc_init+0x28>
				| (config->sampling_time_compensation_enable << ADC_SAMPCTRL_OFFCOMP_Pos);
     488:	7bf3      	ldrb	r3, [r6, #15]
     48a:	01db      	lsls	r3, r3, #7
     48c:	431a      	orrs	r2, r3
     48e:	b2d2      	uxtb	r2, r2
		adc_module->SAMPCTRL.reg =
     490:	737a      	strb	r2, [r7, #13]
	Adc *const adc_module = module_inst->hw;
     492:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     494:	8c13      	ldrh	r3, [r2, #32]
     496:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     498:	2b00      	cmp	r3, #0
     49a:	d1fb      	bne.n	494 <adc_init+0x1c4>
			config->clock_prescaler;
     49c:	78b3      	ldrb	r3, [r6, #2]
	adc_module->CTRLB.reg =
     49e:	707b      	strb	r3, [r7, #1]
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
     4a0:	2324      	movs	r3, #36	; 0x24
     4a2:	5cf3      	ldrb	r3, [r6, r3]
     4a4:	00db      	lsls	r3, r3, #3
			(config->freerunning << ADC_CTRLC_FREERUN_Pos) |
     4a6:	7b32      	ldrb	r2, [r6, #12]
     4a8:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     4aa:	431a      	orrs	r2, r3
			(config->differential_mode << ADC_CTRLC_DIFFMODE_Pos);
     4ac:	7af3      	ldrb	r3, [r6, #11]
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     4ae:	4313      	orrs	r3, r2
     4b0:	7ab2      	ldrb	r2, [r6, #10]
     4b2:	0052      	lsls	r2, r2, #1
     4b4:	4313      	orrs	r3, r2
     4b6:	4303      	orrs	r3, r0
	adc_module->CTRLC.reg =
     4b8:	817b      	strh	r3, [r7, #10]
	Adc *const adc_module = module_inst->hw;
     4ba:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     4bc:	8c13      	ldrh	r3, [r2, #32]
     4be:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     4c0:	2b00      	cmp	r3, #0
     4c2:	d1fb      	bne.n	4bc <adc_init+0x1ec>
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     4c4:	8b32      	ldrh	r2, [r6, #24]
     4c6:	2a00      	cmp	r2, #0
     4c8:	d020      	beq.n	50c <adc_init+0x23c>
		switch (resolution) {
     4ca:	2810      	cmp	r0, #16
     4cc:	d100      	bne.n	4d0 <adc_init+0x200>
     4ce:	e0c9      	b.n	664 <adc_init+0x394>
     4d0:	d800      	bhi.n	4d4 <adc_init+0x204>
     4d2:	e083      	b.n	5dc <adc_init+0x30c>
     4d4:	2820      	cmp	r0, #32
     4d6:	d100      	bne.n	4da <adc_init+0x20a>
     4d8:	e0a3      	b.n	622 <adc_init+0x352>
     4da:	2830      	cmp	r0, #48	; 0x30
     4dc:	d116      	bne.n	50c <adc_init+0x23c>
			if (config->differential_mode &&
     4de:	7af3      	ldrb	r3, [r6, #11]
     4e0:	2b00      	cmp	r3, #0
     4e2:	d00a      	beq.n	4fa <adc_init+0x22a>
					(config->window.window_lower_value > 127 ||
     4e4:	69f1      	ldr	r1, [r6, #28]
     4e6:	3180      	adds	r1, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     4e8:	2317      	movs	r3, #23
			if (config->differential_mode &&
     4ea:	29ff      	cmp	r1, #255	; 0xff
     4ec:	d900      	bls.n	4f0 <adc_init+0x220>
     4ee:	e703      	b.n	2f8 <adc_init+0x28>
					config->window.window_lower_value < -128 ||
     4f0:	6a31      	ldr	r1, [r6, #32]
     4f2:	3180      	adds	r1, #128	; 0x80
     4f4:	29ff      	cmp	r1, #255	; 0xff
     4f6:	d900      	bls.n	4fa <adc_init+0x22a>
     4f8:	e6fe      	b.n	2f8 <adc_init+0x28>
				return STATUS_ERR_INVALID_ARG;
     4fa:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 255 ||
     4fc:	69f1      	ldr	r1, [r6, #28]
     4fe:	29ff      	cmp	r1, #255	; 0xff
     500:	dd00      	ble.n	504 <adc_init+0x234>
     502:	e6f9      	b.n	2f8 <adc_init+0x28>
     504:	6a31      	ldr	r1, [r6, #32]
     506:	29ff      	cmp	r1, #255	; 0xff
     508:	dd00      	ble.n	50c <adc_init+0x23c>
     50a:	e6f5      	b.n	2f8 <adc_init+0x28>
	adc_module->CTRLC.reg |= config->window.window_mode;
     50c:	897b      	ldrh	r3, [r7, #10]
     50e:	431a      	orrs	r2, r3
     510:	817a      	strh	r2, [r7, #10]
	Adc *const adc_module = module_inst->hw;
     512:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     514:	8c13      	ldrh	r3, [r2, #32]
     516:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     518:	2b00      	cmp	r3, #0
     51a:	d1fb      	bne.n	514 <adc_init+0x244>
	adc_module->WINLT.reg =
     51c:	8bb3      	ldrh	r3, [r6, #28]
     51e:	81fb      	strh	r3, [r7, #14]
	Adc *const adc_module = module_inst->hw;
     520:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     522:	8c13      	ldrh	r3, [r2, #32]
     524:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     526:	2b00      	cmp	r3, #0
     528:	d1fb      	bne.n	522 <adc_init+0x252>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     52a:	8c33      	ldrh	r3, [r6, #32]
     52c:	823b      	strh	r3, [r7, #16]
	Adc *const adc_module = module_inst->hw;
     52e:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     530:	8c13      	ldrh	r3, [r2, #32]
     532:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     534:	2b00      	cmp	r3, #0
     536:	d1fb      	bne.n	530 <adc_init+0x260>
			config->positive_input;
     538:	7933      	ldrb	r3, [r6, #4]
			config->negative_input |
     53a:	88f2      	ldrh	r2, [r6, #6]
     53c:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     53e:	813b      	strh	r3, [r7, #8]
	Adc *const adc_module = module_inst->hw;
     540:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     542:	8c13      	ldrh	r3, [r2, #32]
     544:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     546:	2b00      	cmp	r3, #0
     548:	d1fb      	bne.n	542 <adc_init+0x272>
	adc_module->EVCTRL.reg = config->event_action;
     54a:	332a      	adds	r3, #42	; 0x2a
     54c:	5cf3      	ldrb	r3, [r6, r3]
     54e:	70fb      	strb	r3, [r7, #3]
	adc_module->INTENCLR.reg =
     550:	2307      	movs	r3, #7
     552:	713b      	strb	r3, [r7, #4]
	if (config->correction.correction_enable){
     554:	331d      	adds	r3, #29
     556:	5cf3      	ldrb	r3, [r6, r3]
     558:	2b00      	cmp	r3, #0
     55a:	d01b      	beq.n	594 <adc_init+0x2c4>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     55c:	8cf2      	ldrh	r2, [r6, #38]	; 0x26
     55e:	491d      	ldr	r1, [pc, #116]	; (5d4 <adc_init+0x304>)
			return STATUS_ERR_INVALID_ARG;
     560:	2317      	movs	r3, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     562:	428a      	cmp	r2, r1
     564:	d900      	bls.n	568 <adc_init+0x298>
     566:	e6c7      	b.n	2f8 <adc_init+0x28>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     568:	827a      	strh	r2, [r7, #18]
	Adc *const adc_module = module_inst->hw;
     56a:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     56c:	8c13      	ldrh	r3, [r2, #32]
     56e:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
     570:	2b00      	cmp	r3, #0
     572:	d1fb      	bne.n	56c <adc_init+0x29c>
		if (config->correction.offset_correction > 2047 ||
     574:	8d31      	ldrh	r1, [r6, #40]	; 0x28
     576:	2380      	movs	r3, #128	; 0x80
     578:	011b      	lsls	r3, r3, #4
     57a:	18ca      	adds	r2, r1, r3
     57c:	4815      	ldr	r0, [pc, #84]	; (5d4 <adc_init+0x304>)
     57e:	b292      	uxth	r2, r2
			return STATUS_ERR_INVALID_ARG;
     580:	2317      	movs	r3, #23
		if (config->correction.offset_correction > 2047 ||
     582:	4282      	cmp	r2, r0
     584:	d900      	bls.n	588 <adc_init+0x2b8>
     586:	e6b7      	b.n	2f8 <adc_init+0x28>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     588:	82b9      	strh	r1, [r7, #20]
	Adc *const adc_module = module_inst->hw;
     58a:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     58c:	8c13      	ldrh	r3, [r2, #32]
     58e:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
     590:	2b00      	cmp	r3, #0
     592:	d1fb      	bne.n	58c <adc_init+0x2bc>
			ADC_CALIB_BIASREFBUF(
     594:	4b10      	ldr	r3, [pc, #64]	; (5d8 <adc_init+0x308>)
     596:	681b      	ldr	r3, [r3, #0]
     598:	021a      	lsls	r2, r3, #8
     59a:	21e0      	movs	r1, #224	; 0xe0
     59c:	00c9      	lsls	r1, r1, #3
     59e:	400a      	ands	r2, r1
			ADC_CALIB_BIASCOMP(
     5a0:	069b      	lsls	r3, r3, #26
     5a2:	0f5b      	lsrs	r3, r3, #29
			) |
     5a4:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     5a6:	85bb      	strh	r3, [r7, #44]	; 0x2c
	return STATUS_OK;
     5a8:	2300      	movs	r3, #0
     5aa:	e6a5      	b.n	2f8 <adc_init+0x28>
     5ac:	00000289 	.word	0x00000289
     5b0:	40000400 	.word	0x40000400
     5b4:	40001400 	.word	0x40001400
     5b8:	20000efc 	.word	0x20000efc
     5bc:	00002d5d 	.word	0x00002d5d
     5c0:	00002ced 	.word	0x00002ced
     5c4:	000198f8 	.word	0x000198f8
     5c8:	00014ecd 	.word	0x00014ecd
     5cc:	00002e59 	.word	0x00002e59
     5d0:	00019824 	.word	0x00019824
     5d4:	00000fff 	.word	0x00000fff
     5d8:	00806020 	.word	0x00806020
		switch (resolution) {
     5dc:	2800      	cmp	r0, #0
     5de:	d195      	bne.n	50c <adc_init+0x23c>
			if (config->differential_mode &&
     5e0:	7af3      	ldrb	r3, [r6, #11]
     5e2:	2b00      	cmp	r3, #0
     5e4:	d012      	beq.n	60c <adc_init+0x33c>
					(config->window.window_lower_value > 2047 ||
     5e6:	69f3      	ldr	r3, [r6, #28]
     5e8:	2080      	movs	r0, #128	; 0x80
     5ea:	0100      	lsls	r0, r0, #4
     5ec:	4684      	mov	ip, r0
     5ee:	4463      	add	r3, ip
     5f0:	0019      	movs	r1, r3
			if (config->differential_mode &&
     5f2:	482e      	ldr	r0, [pc, #184]	; (6ac <adc_init+0x3dc>)
				return STATUS_ERR_INVALID_ARG;
     5f4:	2317      	movs	r3, #23
			if (config->differential_mode &&
     5f6:	4281      	cmp	r1, r0
     5f8:	d900      	bls.n	5fc <adc_init+0x32c>
     5fa:	e67d      	b.n	2f8 <adc_init+0x28>
					config->window.window_lower_value < -2048 ||
     5fc:	6a33      	ldr	r3, [r6, #32]
     5fe:	4463      	add	r3, ip
     600:	0019      	movs	r1, r3
     602:	482a      	ldr	r0, [pc, #168]	; (6ac <adc_init+0x3dc>)
				return STATUS_ERR_INVALID_ARG;
     604:	2317      	movs	r3, #23
					config->window.window_lower_value < -2048 ||
     606:	4281      	cmp	r1, r0
     608:	d900      	bls.n	60c <adc_init+0x33c>
     60a:	e675      	b.n	2f8 <adc_init+0x28>
			} else if (config->window.window_lower_value > 4095 ||
     60c:	4927      	ldr	r1, [pc, #156]	; (6ac <adc_init+0x3dc>)
				return STATUS_ERR_INVALID_ARG;
     60e:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 4095 ||
     610:	69f0      	ldr	r0, [r6, #28]
     612:	4288      	cmp	r0, r1
     614:	dd00      	ble.n	618 <adc_init+0x348>
     616:	e66f      	b.n	2f8 <adc_init+0x28>
     618:	6a30      	ldr	r0, [r6, #32]
     61a:	4288      	cmp	r0, r1
     61c:	dd00      	ble.n	620 <adc_init+0x350>
     61e:	e66b      	b.n	2f8 <adc_init+0x28>
     620:	e774      	b.n	50c <adc_init+0x23c>
			if (config->differential_mode &&
     622:	7af3      	ldrb	r3, [r6, #11]
     624:	2b00      	cmp	r3, #0
     626:	d012      	beq.n	64e <adc_init+0x37e>
					(config->window.window_lower_value > 511 ||
     628:	69f3      	ldr	r3, [r6, #28]
     62a:	2080      	movs	r0, #128	; 0x80
     62c:	0080      	lsls	r0, r0, #2
     62e:	4684      	mov	ip, r0
     630:	4463      	add	r3, ip
     632:	0019      	movs	r1, r3
			if (config->differential_mode &&
     634:	481e      	ldr	r0, [pc, #120]	; (6b0 <adc_init+0x3e0>)
				return STATUS_ERR_INVALID_ARG;
     636:	2317      	movs	r3, #23
			if (config->differential_mode &&
     638:	4281      	cmp	r1, r0
     63a:	d900      	bls.n	63e <adc_init+0x36e>
     63c:	e65c      	b.n	2f8 <adc_init+0x28>
					config->window.window_lower_value < -512 ||
     63e:	6a33      	ldr	r3, [r6, #32]
     640:	4463      	add	r3, ip
     642:	0019      	movs	r1, r3
     644:	481a      	ldr	r0, [pc, #104]	; (6b0 <adc_init+0x3e0>)
				return STATUS_ERR_INVALID_ARG;
     646:	2317      	movs	r3, #23
					config->window.window_lower_value < -512 ||
     648:	4281      	cmp	r1, r0
     64a:	d900      	bls.n	64e <adc_init+0x37e>
     64c:	e654      	b.n	2f8 <adc_init+0x28>
			} else if (config->window.window_lower_value > 1023 ||
     64e:	4918      	ldr	r1, [pc, #96]	; (6b0 <adc_init+0x3e0>)
				return STATUS_ERR_INVALID_ARG;
     650:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 1023 ||
     652:	69f0      	ldr	r0, [r6, #28]
     654:	4288      	cmp	r0, r1
     656:	dd00      	ble.n	65a <adc_init+0x38a>
     658:	e64e      	b.n	2f8 <adc_init+0x28>
     65a:	6a30      	ldr	r0, [r6, #32]
     65c:	4288      	cmp	r0, r1
     65e:	dd00      	ble.n	662 <adc_init+0x392>
     660:	e64a      	b.n	2f8 <adc_init+0x28>
     662:	e753      	b.n	50c <adc_init+0x23c>
			if (config->differential_mode &&
     664:	7af3      	ldrb	r3, [r6, #11]
     666:	2b00      	cmp	r3, #0
     668:	d012      	beq.n	690 <adc_init+0x3c0>
					(config->window.window_lower_value > 32767 ||
     66a:	69f3      	ldr	r3, [r6, #28]
     66c:	2080      	movs	r0, #128	; 0x80
     66e:	0200      	lsls	r0, r0, #8
     670:	4684      	mov	ip, r0
     672:	4463      	add	r3, ip
     674:	0019      	movs	r1, r3
			if (config->differential_mode &&
     676:	480f      	ldr	r0, [pc, #60]	; (6b4 <adc_init+0x3e4>)
				return STATUS_ERR_INVALID_ARG;
     678:	2317      	movs	r3, #23
			if (config->differential_mode &&
     67a:	4281      	cmp	r1, r0
     67c:	d900      	bls.n	680 <adc_init+0x3b0>
     67e:	e63b      	b.n	2f8 <adc_init+0x28>
					config->window.window_lower_value < -32768 ||
     680:	6a33      	ldr	r3, [r6, #32]
     682:	4463      	add	r3, ip
     684:	0019      	movs	r1, r3
     686:	480b      	ldr	r0, [pc, #44]	; (6b4 <adc_init+0x3e4>)
				return STATUS_ERR_INVALID_ARG;
     688:	2317      	movs	r3, #23
					config->window.window_lower_value < -32768 ||
     68a:	4281      	cmp	r1, r0
     68c:	d900      	bls.n	690 <adc_init+0x3c0>
     68e:	e633      	b.n	2f8 <adc_init+0x28>
			} else if (config->window.window_lower_value > 65535 ||
     690:	4908      	ldr	r1, [pc, #32]	; (6b4 <adc_init+0x3e4>)
				return STATUS_ERR_INVALID_ARG;
     692:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 65535 ||
     694:	69f0      	ldr	r0, [r6, #28]
     696:	4288      	cmp	r0, r1
     698:	dd00      	ble.n	69c <adc_init+0x3cc>
     69a:	e62d      	b.n	2f8 <adc_init+0x28>
     69c:	6a30      	ldr	r0, [r6, #32]
     69e:	4288      	cmp	r0, r1
     6a0:	dd00      	ble.n	6a4 <adc_init+0x3d4>
     6a2:	e629      	b.n	2f8 <adc_init+0x28>
     6a4:	e732      	b.n	50c <adc_init+0x23c>
		return STATUS_ERR_INVALID_ARG;
     6a6:	2317      	movs	r3, #23
     6a8:	e626      	b.n	2f8 <adc_init+0x28>
     6aa:	46c0      	nop			; (mov r8, r8)
     6ac:	00000fff 	.word	0x00000fff
     6b0:	000003ff 	.word	0x000003ff
     6b4:	0000ffff 	.word	0x0000ffff

000006b8 <ADC_Handler>:
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
#else
void ADC_Handler(void)
{
     6b8:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     6ba:	4b2f      	ldr	r3, [pc, #188]	; (778 <ADC_Handler+0xc0>)
     6bc:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     6be:	6823      	ldr	r3, [r4, #0]
     6c0:	799a      	ldrb	r2, [r3, #6]
     6c2:	795d      	ldrb	r5, [r3, #5]
     6c4:	4015      	ands	r5, r2
	if (flags & ADC_INTFLAG_RESRDY) {
     6c6:	07ea      	lsls	r2, r5, #31
     6c8:	d52a      	bpl.n	720 <ADC_Handler+0x68>
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     6ca:	2201      	movs	r2, #1
     6cc:	719a      	strb	r2, [r3, #6]
		*(module->job_buffer++) = module->hw->RESULT.reg;
     6ce:	6962      	ldr	r2, [r4, #20]
     6d0:	1c93      	adds	r3, r2, #2
     6d2:	6163      	str	r3, [r4, #20]
     6d4:	6823      	ldr	r3, [r4, #0]
     6d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
     6d8:	b29b      	uxth	r3, r3
     6da:	8013      	strh	r3, [r2, #0]
		if (--module->remaining_conversions > 0) {
     6dc:	8b23      	ldrh	r3, [r4, #24]
     6de:	3b01      	subs	r3, #1
     6e0:	b29b      	uxth	r3, r3
     6e2:	8323      	strh	r3, [r4, #24]
     6e4:	2b00      	cmp	r3, #0
     6e6:	d015      	beq.n	714 <ADC_Handler+0x5c>
			if (module->software_trigger == true
     6e8:	7f63      	ldrb	r3, [r4, #29]
     6ea:	2b00      	cmp	r3, #0
     6ec:	d018      	beq.n	720 <ADC_Handler+0x68>
				&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
     6ee:	6822      	ldr	r2, [r4, #0]
     6f0:	79d3      	ldrb	r3, [r2, #7]
     6f2:	b25b      	sxtb	r3, r3
     6f4:	2b00      	cmp	r3, #0
     6f6:	db13      	blt.n	720 <ADC_Handler+0x68>
     6f8:	8c13      	ldrh	r3, [r2, #32]
     6fa:	b29b      	uxth	r3, r3
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
     6fc:	2b00      	cmp	r3, #0
     6fe:	d1fb      	bne.n	6f8 <ADC_Handler+0x40>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     700:	7e13      	ldrb	r3, [r2, #24]
     702:	2102      	movs	r1, #2
     704:	430b      	orrs	r3, r1
     706:	7613      	strb	r3, [r2, #24]
	Adc *const adc_module = module_inst->hw;
     708:	6822      	ldr	r2, [r4, #0]
	if (adc_module->SYNCBUSY.reg) {
     70a:	8c13      	ldrh	r3, [r2, #32]
     70c:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
     70e:	2b00      	cmp	r3, #0
     710:	d1fb      	bne.n	70a <ADC_Handler+0x52>
     712:	e005      	b.n	720 <ADC_Handler+0x68>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     714:	2301      	movs	r3, #1
     716:	6822      	ldr	r2, [r4, #0]
     718:	7113      	strb	r3, [r2, #4]
			if (module->job_status == STATUS_BUSY) {
     71a:	7f23      	ldrb	r3, [r4, #28]
     71c:	2b05      	cmp	r3, #5
     71e:	d016      	beq.n	74e <ADC_Handler+0x96>
	if (flags & ADC_INTFLAG_WINMON) {
     720:	076b      	lsls	r3, r5, #29
     722:	d508      	bpl.n	736 <ADC_Handler+0x7e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     724:	2304      	movs	r3, #4
     726:	6822      	ldr	r2, [r4, #0]
     728:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     72a:	7ee3      	ldrb	r3, [r4, #27]
     72c:	079b      	lsls	r3, r3, #30
     72e:	d502      	bpl.n	736 <ADC_Handler+0x7e>
     730:	7ea3      	ldrb	r3, [r4, #26]
     732:	079b      	lsls	r3, r3, #30
     734:	d417      	bmi.n	766 <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
     736:	07ab      	lsls	r3, r5, #30
     738:	d508      	bpl.n	74c <ADC_Handler+0x94>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     73a:	2302      	movs	r3, #2
     73c:	6822      	ldr	r2, [r4, #0]
     73e:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     740:	7ee3      	ldrb	r3, [r4, #27]
     742:	075b      	lsls	r3, r3, #29
     744:	d502      	bpl.n	74c <ADC_Handler+0x94>
     746:	7ea3      	ldrb	r3, [r4, #26]
     748:	075b      	lsls	r3, r3, #29
     74a:	d410      	bmi.n	76e <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
     74c:	bd70      	pop	{r4, r5, r6, pc}
				module->job_status = STATUS_OK;
     74e:	2300      	movs	r3, #0
     750:	7723      	strb	r3, [r4, #28]
				if ((module->enabled_callback_mask &
     752:	7ee3      	ldrb	r3, [r4, #27]
     754:	07db      	lsls	r3, r3, #31
     756:	d5e3      	bpl.n	720 <ADC_Handler+0x68>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     758:	7ea3      	ldrb	r3, [r4, #26]
     75a:	07db      	lsls	r3, r3, #31
     75c:	d5e0      	bpl.n	720 <ADC_Handler+0x68>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     75e:	0020      	movs	r0, r4
     760:	68a3      	ldr	r3, [r4, #8]
     762:	4798      	blx	r3
     764:	e7dc      	b.n	720 <ADC_Handler+0x68>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     766:	0020      	movs	r0, r4
     768:	68e3      	ldr	r3, [r4, #12]
     76a:	4798      	blx	r3
     76c:	e7e3      	b.n	736 <ADC_Handler+0x7e>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     76e:	6923      	ldr	r3, [r4, #16]
     770:	0020      	movs	r0, r4
     772:	4798      	blx	r3
}
     774:	e7ea      	b.n	74c <ADC_Handler+0x94>
     776:	46c0      	nop			; (mov r8, r8)
     778:	20000efc 	.word	0x20000efc

0000077c <aes_get_config_defaults>:
		struct aes_config *const config)
{

	/* Sanity check arguments */
	Assert(config);
	config->encrypt_mode = AES_ENCRYPTION;
     77c:	2301      	movs	r3, #1
     77e:	7003      	strb	r3, [r0, #0]
	config->key_size = AES_KEY_SIZE_128;
     780:	2300      	movs	r3, #0
     782:	7043      	strb	r3, [r0, #1]
	config->start_mode = AES_MANUAL_START;
     784:	7083      	strb	r3, [r0, #2]
	config->opmode= AES_ECB_MODE;
     786:	70c3      	strb	r3, [r0, #3]
	config->cfb_size = AES_CFB_SIZE_128;
     788:	7103      	strb	r3, [r0, #4]
	config->ctype = AES_COUNTERMEASURE_TYPE_ALL;
     78a:	220f      	movs	r2, #15
     78c:	7142      	strb	r2, [r0, #5]
	config->enable_xor_key = false;
     78e:	7183      	strb	r3, [r0, #6]
	config->enable_key_gen = false;
     790:	71c3      	strb	r3, [r0, #7]
	config->lod = false;
     792:	7203      	strb	r3, [r0, #8]
}
     794:	4770      	bx	lr

00000796 <aes_enable>:
 */
void aes_enable(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLA.reg |= AES_CTRLA_ENABLE;
     796:	6802      	ldr	r2, [r0, #0]
     798:	6813      	ldr	r3, [r2, #0]
     79a:	2102      	movs	r1, #2
     79c:	430b      	orrs	r3, r1
     79e:	6013      	str	r3, [r2, #0]

}
     7a0:	4770      	bx	lr

000007a2 <aes_disable>:
{
	Assert(module);
	Assert(module->hw);

	/* Disbale interrupt */
	module->hw->INTENCLR.reg = AES_INTENCLR_MASK;
     7a2:	2303      	movs	r3, #3
     7a4:	6802      	ldr	r2, [r0, #0]
     7a6:	7153      	strb	r3, [r2, #5]
	/* Clear interrupt flag */
	module->hw->INTFLAG.reg = AES_INTFLAG_MASK;
     7a8:	6802      	ldr	r2, [r0, #0]
     7aa:	71d3      	strb	r3, [r2, #7]

	module->hw->CTRLA.reg &= (~AES_CTRLA_ENABLE);
     7ac:	6802      	ldr	r2, [r0, #0]
     7ae:	6813      	ldr	r3, [r2, #0]
     7b0:	2102      	movs	r1, #2
     7b2:	438b      	bics	r3, r1
     7b4:	6013      	str	r3, [r2, #0]
}
     7b6:	4770      	bx	lr

000007b8 <aes_set_config>:
 */
void aes_set_config(
		struct aes_module *const module,
		Aes *const hw,
		struct aes_config *const config)
{
     7b8:	b570      	push	{r4, r5, r6, lr}
     7ba:	0004      	movs	r4, r0
     7bc:	000d      	movs	r5, r1
	/* Validate arguments. */
	Assert(hw);
	Assert(config);
	Assert(module);

	module->opmode = config->opmode;
     7be:	78d3      	ldrb	r3, [r2, #3]
     7c0:	7103      	strb	r3, [r0, #4]
	module->hw = hw;
     7c2:	6021      	str	r1, [r4, #0]
	module->key_size = config->key_size;
     7c4:	7853      	ldrb	r3, [r2, #1]
     7c6:	7143      	strb	r3, [r0, #5]
	module->cfb_size = config->cfb_size;
     7c8:	7913      	ldrb	r3, [r2, #4]
     7ca:	7183      	strb	r3, [r0, #6]

	ul_mode |= (config->encrypt_mode << AES_CTRLA_CIPHER_Pos)
     7cc:	7813      	ldrb	r3, [r2, #0]
     7ce:	029b      	lsls	r3, r3, #10
			 | (config->start_mode << AES_CTRLA_STARTMODE_Pos)
     7d0:	7891      	ldrb	r1, [r2, #2]
     7d2:	02c9      	lsls	r1, r1, #11
     7d4:	430b      	orrs	r3, r1
			 | (config->key_size << AES_CTRLA_KEYSIZE_Pos)
     7d6:	7851      	ldrb	r1, [r2, #1]
     7d8:	0209      	lsls	r1, r1, #8
     7da:	430b      	orrs	r3, r1
			 | (config->opmode << AES_CTRLA_AESMODE_Pos)
     7dc:	78d1      	ldrb	r1, [r2, #3]
     7de:	0089      	lsls	r1, r1, #2
     7e0:	430b      	orrs	r3, r1
			 | (config->cfb_size << AES_CTRLA_CFBS_Pos)
     7e2:	7911      	ldrb	r1, [r2, #4]
     7e4:	0149      	lsls	r1, r1, #5
     7e6:	430b      	orrs	r3, r1
			 | (AES_CTRLA_CTYPE(config->ctype))
			 | (config->enable_xor_key << AES_CTRLA_XORKEY_Pos)
     7e8:	7991      	ldrb	r1, [r2, #6]
     7ea:	0389      	lsls	r1, r1, #14
			 | (config->enable_key_gen << AES_CTRLA_KEYGEN_Pos)
     7ec:	79d0      	ldrb	r0, [r2, #7]
     7ee:	0340      	lsls	r0, r0, #13
			 | (config->lod << AES_CTRLA_LOD_Pos);
     7f0:	4301      	orrs	r1, r0
     7f2:	7a10      	ldrb	r0, [r2, #8]
     7f4:	0300      	lsls	r0, r0, #12
     7f6:	4301      	orrs	r1, r0
			 | (AES_CTRLA_CTYPE(config->ctype))
     7f8:	7952      	ldrb	r2, [r2, #5]
     7fa:	0412      	lsls	r2, r2, #16
     7fc:	20f0      	movs	r0, #240	; 0xf0
     7fe:	0300      	lsls	r0, r0, #12
     800:	4002      	ands	r2, r0
			 | (config->lod << AES_CTRLA_LOD_Pos);
     802:	430a      	orrs	r2, r1
     804:	4313      	orrs	r3, r2
     806:	001e      	movs	r6, r3
	if (hw->CTRLA.reg & AES_CTRLA_ENABLE) {
     808:	682b      	ldr	r3, [r5, #0]
     80a:	079b      	lsls	r3, r3, #30
     80c:	d401      	bmi.n	812 <aes_set_config+0x5a>
		aes_disable(module);
		hw->CTRLA.reg = ul_mode;
		aes_enable(module);
	} else {
		hw->CTRLA.reg = ul_mode;
     80e:	602e      	str	r6, [r5, #0]
	}
}
     810:	bd70      	pop	{r4, r5, r6, pc}
		aes_disable(module);
     812:	0020      	movs	r0, r4
     814:	4b03      	ldr	r3, [pc, #12]	; (824 <aes_set_config+0x6c>)
     816:	4798      	blx	r3
		hw->CTRLA.reg = ul_mode;
     818:	602e      	str	r6, [r5, #0]
		aes_enable(module);
     81a:	0020      	movs	r0, r4
     81c:	4b02      	ldr	r3, [pc, #8]	; (828 <aes_set_config+0x70>)
     81e:	4798      	blx	r3
     820:	e7f6      	b.n	810 <aes_set_config+0x58>
     822:	46c0      	nop			; (mov r8, r8)
     824:	000007a3 	.word	0x000007a3
     828:	00000797 	.word	0x00000797

0000082c <aes_init>:
{
     82c:	b570      	push	{r4, r5, r6, lr}
			MCLK->APBCMASK.reg |= mask;
     82e:	4c05      	ldr	r4, [pc, #20]	; (844 <aes_init+0x18>)
     830:	69e5      	ldr	r5, [r4, #28]
     832:	2380      	movs	r3, #128	; 0x80
     834:	019b      	lsls	r3, r3, #6
     836:	432b      	orrs	r3, r5
     838:	61e3      	str	r3, [r4, #28]
	hw->CTRLA.reg = AES_CTRLA_SWRST;
     83a:	2301      	movs	r3, #1
     83c:	600b      	str	r3, [r1, #0]
	aes_set_config(module,hw, config);
     83e:	4b02      	ldr	r3, [pc, #8]	; (848 <aes_init+0x1c>)
     840:	4798      	blx	r3
}
     842:	bd70      	pop	{r4, r5, r6, pc}
     844:	40000400 	.word	0x40000400
     848:	000007b9 	.word	0x000007b9

0000084c <aes_write_key>:
 * \note The key size depends on the current AES configuration.
 */
void aes_write_key(
		struct aes_module *const module,
		const uint32_t *key)
{
     84c:	b570      	push	{r4, r5, r6, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(key);

	switch (module->key_size) {
     84e:	7943      	ldrb	r3, [r0, #5]
     850:	2b01      	cmp	r3, #1
     852:	d005      	beq.n	860 <aes_write_key+0x14>
     854:	2b00      	cmp	r3, #0
     856:	d010      	beq.n	87a <aes_write_key+0x2e>
     858:	2b02      	cmp	r3, #2
     85a:	d10d      	bne.n	878 <aes_write_key+0x2c>
	case AES_KEY_SIZE_192:
		key_length = 6;
		break;

	case AES_KEY_SIZE_256:
		key_length = 8;
     85c:	2508      	movs	r5, #8
     85e:	e000      	b.n	862 <aes_write_key+0x16>
		key_length = 6;
     860:	2506      	movs	r5, #6
{
     862:	2300      	movs	r3, #0
	default:
		break;
	}

	for (i = 0; i < key_length; i++) {
		module->hw->KEYWORD[i].reg = *key;
     864:	c910      	ldmia	r1!, {r4}
     866:	1c9a      	adds	r2, r3, #2
     868:	0092      	lsls	r2, r2, #2
     86a:	6806      	ldr	r6, [r0, #0]
     86c:	46b4      	mov	ip, r6
     86e:	4462      	add	r2, ip
     870:	6054      	str	r4, [r2, #4]
	for (i = 0; i < key_length; i++) {
     872:	3301      	adds	r3, #1
     874:	42ab      	cmp	r3, r5
     876:	d3f5      	bcc.n	864 <aes_write_key+0x18>
		key++;
	}
}
     878:	bd70      	pop	{r4, r5, r6, pc}
		key_length = 4;
     87a:	2504      	movs	r5, #4
     87c:	e7f1      	b.n	862 <aes_write_key+0x16>
	...

00000880 <aes_write_input_data>:
 * \param[in] input_data_buffer Pointer to an input data buffer
 */
void aes_write_input_data(
		struct aes_module *const module,
		const uint32_t *input_data_buffer)
{
     880:	b510      	push	{r4, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);;
	Assert(input_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
     882:	2300      	movs	r3, #0
     884:	6802      	ldr	r2, [r0, #0]
     886:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
     888:	4b0f      	ldr	r3, [pc, #60]	; (8c8 <aes_write_input_data+0x48>)
     88a:	6842      	ldr	r2, [r0, #4]
     88c:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
     88e:	4a0f      	ldr	r2, [pc, #60]	; (8cc <aes_write_input_data+0x4c>)
     890:	4293      	cmp	r3, r2
     892:	d00a      	beq.n	8aa <aes_write_input_data+0x2a>
		for (i = 0; i < 2; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
			input_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
     894:	7903      	ldrb	r3, [r0, #4]
     896:	2b03      	cmp	r3, #3
     898:	d00e      	beq.n	8b8 <aes_write_input_data+0x38>
     89a:	000c      	movs	r4, r1
     89c:	3410      	adds	r4, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		module->hw->INDATA.reg = *input_data_buffer;
	} else {
		for (i = 0; i < 4; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
     89e:	6803      	ldr	r3, [r0, #0]
     8a0:	c904      	ldmia	r1!, {r2}
     8a2:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < 4; i++) {
     8a4:	428c      	cmp	r4, r1
     8a6:	d1fa      	bne.n	89e <aes_write_input_data+0x1e>
			input_data_buffer++;
		}
	}
}
     8a8:	bd10      	pop	{r4, pc}
			module->hw->INDATA.reg = *input_data_buffer;
     8aa:	6803      	ldr	r3, [r0, #0]
     8ac:	680a      	ldr	r2, [r1, #0]
     8ae:	639a      	str	r2, [r3, #56]	; 0x38
     8b0:	6803      	ldr	r3, [r0, #0]
     8b2:	684a      	ldr	r2, [r1, #4]
     8b4:	639a      	str	r2, [r3, #56]	; 0x38
     8b6:	e7f7      	b.n	8a8 <aes_write_input_data+0x28>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
     8b8:	7983      	ldrb	r3, [r0, #6]
     8ba:	3b02      	subs	r3, #2
     8bc:	2b01      	cmp	r3, #1
     8be:	d8ec      	bhi.n	89a <aes_write_input_data+0x1a>
		module->hw->INDATA.reg = *input_data_buffer;
     8c0:	6803      	ldr	r3, [r0, #0]
     8c2:	680a      	ldr	r2, [r1, #0]
     8c4:	639a      	str	r2, [r3, #56]	; 0x38
     8c6:	e7ef      	b.n	8a8 <aes_write_input_data+0x28>
     8c8:	00ff00ff 	.word	0x00ff00ff
     8cc:	00010003 	.word	0x00010003

000008d0 <aes_read_output_data>:
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(output_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
     8d0:	2300      	movs	r3, #0
     8d2:	6802      	ldr	r2, [r0, #0]
     8d4:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
     8d6:	4b10      	ldr	r3, [pc, #64]	; (918 <aes_read_output_data+0x48>)
     8d8:	6842      	ldr	r2, [r0, #4]
     8da:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
     8dc:	4a0f      	ldr	r2, [pc, #60]	; (91c <aes_read_output_data+0x4c>)
     8de:	4293      	cmp	r3, r2
     8e0:	d00a      	beq.n	8f8 <aes_read_output_data+0x28>
		for (i = 0; i < 2; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
			output_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
     8e2:	7903      	ldrb	r3, [r0, #4]
     8e4:	2b03      	cmp	r3, #3
     8e6:	d00e      	beq.n	906 <aes_read_output_data+0x36>
     8e8:	000a      	movs	r2, r1
     8ea:	3210      	adds	r2, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		*output_data_buffer = module->hw->INDATA.reg;
	} else {
		for (i = 0; i < 4; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
     8ec:	6803      	ldr	r3, [r0, #0]
     8ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     8f0:	c108      	stmia	r1!, {r3}
		for (i = 0; i < 4; i++) {
     8f2:	428a      	cmp	r2, r1
     8f4:	d1fa      	bne.n	8ec <aes_read_output_data+0x1c>
			output_data_buffer++;
		}
	}
}
     8f6:	4770      	bx	lr
			*output_data_buffer = module->hw->INDATA.reg;
     8f8:	6803      	ldr	r3, [r0, #0]
     8fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     8fc:	600b      	str	r3, [r1, #0]
     8fe:	6803      	ldr	r3, [r0, #0]
     900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     902:	604b      	str	r3, [r1, #4]
     904:	e7f7      	b.n	8f6 <aes_read_output_data+0x26>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
     906:	7983      	ldrb	r3, [r0, #6]
     908:	3b02      	subs	r3, #2
     90a:	2b01      	cmp	r3, #1
     90c:	d8ec      	bhi.n	8e8 <aes_read_output_data+0x18>
		*output_data_buffer = module->hw->INDATA.reg;
     90e:	6803      	ldr	r3, [r0, #0]
     910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     912:	600b      	str	r3, [r1, #0]
     914:	e7ef      	b.n	8f6 <aes_read_output_data+0x26>
     916:	46c0      	nop			; (mov r8, r8)
     918:	00ff00ff 	.word	0x00ff00ff
     91c:	00010003 	.word	0x00010003

00000920 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
     920:	4a06      	ldr	r2, [pc, #24]	; (93c <_extint_enable+0x1c>)
     922:	7813      	ldrb	r3, [r2, #0]
     924:	2102      	movs	r1, #2
     926:	430b      	orrs	r3, r1
     928:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     92a:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     92c:	6853      	ldr	r3, [r2, #4]
     92e:	4219      	tst	r1, r3
     930:	d1fc      	bne.n	92c <_extint_enable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     932:	6853      	ldr	r3, [r2, #4]
     934:	4218      	tst	r0, r3
     936:	d1f9      	bne.n	92c <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     938:	4770      	bx	lr
     93a:	46c0      	nop			; (mov r8, r8)
     93c:	40002400 	.word	0x40002400

00000940 <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
     940:	4a06      	ldr	r2, [pc, #24]	; (95c <_extint_disable+0x1c>)
     942:	7813      	ldrb	r3, [r2, #0]
     944:	2102      	movs	r1, #2
     946:	438b      	bics	r3, r1
     948:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     94a:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     94c:	6853      	ldr	r3, [r2, #4]
     94e:	4219      	tst	r1, r3
     950:	d1fc      	bne.n	94c <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     952:	6853      	ldr	r3, [r2, #4]
     954:	4218      	tst	r0, r3
     956:	d1f9      	bne.n	94c <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     958:	4770      	bx	lr
     95a:	46c0      	nop			; (mov r8, r8)
     95c:	40002400 	.word	0x40002400

00000960 <_system_extint_init>:
{
     960:	b510      	push	{r4, lr}
			MCLK->APBAMASK.reg |= mask;
     962:	4a12      	ldr	r2, [pc, #72]	; (9ac <_system_extint_init+0x4c>)
     964:	6951      	ldr	r1, [r2, #20]
     966:	2380      	movs	r3, #128	; 0x80
     968:	009b      	lsls	r3, r3, #2
     96a:	430b      	orrs	r3, r1
     96c:	6153      	str	r3, [r2, #20]
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
     96e:	4a10      	ldr	r2, [pc, #64]	; (9b0 <_system_extint_init+0x50>)
     970:	7813      	ldrb	r3, [r2, #0]
     972:	2101      	movs	r1, #1
     974:	430b      	orrs	r3, r1
     976:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     978:	3101      	adds	r1, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     97a:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     97c:	6853      	ldr	r3, [r2, #4]
     97e:	4219      	tst	r1, r3
     980:	d1fc      	bne.n	97c <_system_extint_init+0x1c>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     982:	6853      	ldr	r3, [r2, #4]
     984:	4218      	tst	r0, r3
     986:	d1f9      	bne.n	97c <_system_extint_init+0x1c>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_ULP32K;
     988:	4a09      	ldr	r2, [pc, #36]	; (9b0 <_system_extint_init+0x50>)
     98a:	7813      	ldrb	r3, [r2, #0]
     98c:	2110      	movs	r1, #16
     98e:	430b      	orrs	r3, r1
     990:	7013      	strb	r3, [r2, #0]
     992:	4b08      	ldr	r3, [pc, #32]	; (9b4 <_system_extint_init+0x54>)
     994:	0019      	movs	r1, r3
     996:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     998:	2200      	movs	r2, #0
     99a:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     99c:	428b      	cmp	r3, r1
     99e:	d1fc      	bne.n	99a <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     9a0:	2208      	movs	r2, #8
     9a2:	4b05      	ldr	r3, [pc, #20]	; (9b8 <_system_extint_init+0x58>)
     9a4:	601a      	str	r2, [r3, #0]
	_extint_enable();
     9a6:	4b05      	ldr	r3, [pc, #20]	; (9bc <_system_extint_init+0x5c>)
     9a8:	4798      	blx	r3
}
     9aa:	bd10      	pop	{r4, pc}
     9ac:	40000400 	.word	0x40000400
     9b0:	40002400 	.word	0x40002400
     9b4:	20000f00 	.word	0x20000f00
     9b8:	e000e100 	.word	0xe000e100
     9bc:	00000921 	.word	0x00000921

000009c0 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     9c0:	2300      	movs	r3, #0
     9c2:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     9c4:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     9c6:	2201      	movs	r2, #1
     9c8:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
     9ca:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     9cc:	3201      	adds	r2, #1
     9ce:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
     9d0:	7243      	strb	r3, [r0, #9]
}
     9d2:	4770      	bx	lr

000009d4 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     9d4:	b5f0      	push	{r4, r5, r6, r7, lr}
     9d6:	b083      	sub	sp, #12
     9d8:	0005      	movs	r5, r0
     9da:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
     9dc:	4b1c      	ldr	r3, [pc, #112]	; (a50 <extint_chan_set_config+0x7c>)
     9de:	4798      	blx	r3
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     9e0:	a901      	add	r1, sp, #4
     9e2:	2300      	movs	r3, #0
     9e4:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     9e6:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     9e8:	7923      	ldrb	r3, [r4, #4]
     9ea:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     9ec:	7a23      	ldrb	r3, [r4, #8]
     9ee:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     9f0:	7820      	ldrb	r0, [r4, #0]
     9f2:	4b18      	ldr	r3, [pc, #96]	; (a54 <extint_chan_set_config+0x80>)
     9f4:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     9f6:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     9f8:	2d1f      	cmp	r5, #31
     9fa:	d800      	bhi.n	9fe <extint_chan_set_config+0x2a>
		return eics[eic_index];
     9fc:	4916      	ldr	r1, [pc, #88]	; (a58 <extint_chan_set_config+0x84>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     9fe:	2207      	movs	r2, #7
     a00:	402a      	ands	r2, r5
     a02:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     a04:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     a06:	7aa3      	ldrb	r3, [r4, #10]
     a08:	2b00      	cmp	r3, #0
     a0a:	d001      	beq.n	a10 <extint_chan_set_config+0x3c>
     a0c:	2308      	movs	r3, #8
     a0e:	431f      	orrs	r7, r3
     a10:	08eb      	lsrs	r3, r5, #3
     a12:	009b      	lsls	r3, r3, #2
     a14:	18cb      	adds	r3, r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     a16:	69d8      	ldr	r0, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     a18:	260f      	movs	r6, #15
     a1a:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     a1c:	43b0      	bics	r0, r6
			(new_config << config_pos);
     a1e:	4097      	lsls	r7, r2
     a20:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     a22:	4302      	orrs	r2, r0
		= (EIC_module->CONFIG[channel / 8].reg &
     a24:	61da      	str	r2, [r3, #28]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30) || (SAMR34) || (SAMR35)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
     a26:	7a63      	ldrb	r3, [r4, #9]
     a28:	2b00      	cmp	r3, #0
     a2a:	d10b      	bne.n	a44 <extint_chan_set_config+0x70>
		EIC_module->ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
     a2c:	698a      	ldr	r2, [r1, #24]
     a2e:	2301      	movs	r3, #1
     a30:	40ab      	lsls	r3, r5
     a32:	43db      	mvns	r3, r3
     a34:	041b      	lsls	r3, r3, #16
     a36:	0c1b      	lsrs	r3, r3, #16
     a38:	4013      	ands	r3, r2
     a3a:	618b      	str	r3, [r1, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
     a3c:	4b07      	ldr	r3, [pc, #28]	; (a5c <extint_chan_set_config+0x88>)
     a3e:	4798      	blx	r3
}
     a40:	b003      	add	sp, #12
     a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->ASYNCH.reg |= (1UL << channel);
     a44:	698a      	ldr	r2, [r1, #24]
     a46:	2301      	movs	r3, #1
     a48:	40ab      	lsls	r3, r5
     a4a:	4313      	orrs	r3, r2
     a4c:	618b      	str	r3, [r1, #24]
     a4e:	e7f5      	b.n	a3c <extint_chan_set_config+0x68>
     a50:	00000941 	.word	0x00000941
     a54:	00002e59 	.word	0x00002e59
     a58:	40002400 	.word	0x40002400
     a5c:	00000921 	.word	0x00000921

00000a60 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     a60:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     a62:	2a00      	cmp	r2, #0
     a64:	d001      	beq.n	a6a <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     a66:	0018      	movs	r0, r3
     a68:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     a6a:	008b      	lsls	r3, r1, #2
     a6c:	4a06      	ldr	r2, [pc, #24]	; (a88 <extint_register_callback+0x28>)
     a6e:	589b      	ldr	r3, [r3, r2]
     a70:	2b00      	cmp	r3, #0
     a72:	d003      	beq.n	a7c <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     a74:	4283      	cmp	r3, r0
     a76:	d005      	beq.n	a84 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     a78:	231d      	movs	r3, #29
     a7a:	e7f4      	b.n	a66 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     a7c:	0089      	lsls	r1, r1, #2
     a7e:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     a80:	2300      	movs	r3, #0
     a82:	e7f0      	b.n	a66 <extint_register_callback+0x6>
		return STATUS_OK;
     a84:	2300      	movs	r3, #0
     a86:	e7ee      	b.n	a66 <extint_register_callback+0x6>
     a88:	20000f00 	.word	0x20000f00

00000a8c <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     a8c:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     a8e:	2900      	cmp	r1, #0
     a90:	d001      	beq.n	a96 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
     a92:	0018      	movs	r0, r3
     a94:	4770      	bx	lr
		return NULL;
     a96:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     a98:	281f      	cmp	r0, #31
     a9a:	d800      	bhi.n	a9e <extint_chan_enable_callback+0x12>
		return eics[eic_index];
     a9c:	4a02      	ldr	r2, [pc, #8]	; (aa8 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
     a9e:	2301      	movs	r3, #1
     aa0:	4083      	lsls	r3, r0
     aa2:	6113      	str	r3, [r2, #16]
	return STATUS_OK;
     aa4:	2300      	movs	r3, #0
     aa6:	e7f4      	b.n	a92 <extint_chan_enable_callback+0x6>
     aa8:	40002400 	.word	0x40002400

00000aac <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     aac:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     aae:	2200      	movs	r2, #0
     ab0:	4b10      	ldr	r3, [pc, #64]	; (af4 <EIC_Handler+0x48>)
     ab2:	701a      	strb	r2, [r3, #0]
     ab4:	2300      	movs	r3, #0
     ab6:	4910      	ldr	r1, [pc, #64]	; (af8 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     ab8:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     aba:	4e10      	ldr	r6, [pc, #64]	; (afc <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     abc:	4c0d      	ldr	r4, [pc, #52]	; (af4 <EIC_Handler+0x48>)
     abe:	e00a      	b.n	ad6 <EIC_Handler+0x2a>
		return eics[eic_index];
     ac0:	490d      	ldr	r1, [pc, #52]	; (af8 <EIC_Handler+0x4c>)
     ac2:	e008      	b.n	ad6 <EIC_Handler+0x2a>
     ac4:	7823      	ldrb	r3, [r4, #0]
     ac6:	3301      	adds	r3, #1
     ac8:	b2db      	uxtb	r3, r3
     aca:	7023      	strb	r3, [r4, #0]
     acc:	2b0f      	cmp	r3, #15
     ace:	d810      	bhi.n	af2 <EIC_Handler+0x46>
		return NULL;
     ad0:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     ad2:	2b1f      	cmp	r3, #31
     ad4:	d9f4      	bls.n	ac0 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     ad6:	0028      	movs	r0, r5
     ad8:	4018      	ands	r0, r3
     ada:	2201      	movs	r2, #1
     adc:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     ade:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
     ae0:	4210      	tst	r0, r2
     ae2:	d0ef      	beq.n	ac4 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     ae4:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     ae6:	009b      	lsls	r3, r3, #2
     ae8:	599b      	ldr	r3, [r3, r6]
     aea:	2b00      	cmp	r3, #0
     aec:	d0ea      	beq.n	ac4 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     aee:	4798      	blx	r3
     af0:	e7e8      	b.n	ac4 <EIC_Handler+0x18>
			}
		}
	}
}
     af2:	bd70      	pop	{r4, r5, r6, pc}
     af4:	20000f40 	.word	0x20000f40
     af8:	40002400 	.word	0x40002400
     afc:	20000f00 	.word	0x20000f00

00000b00 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     b00:	b500      	push	{lr}
     b02:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     b04:	ab01      	add	r3, sp, #4
     b06:	2280      	movs	r2, #128	; 0x80
     b08:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     b0a:	780a      	ldrb	r2, [r1, #0]
     b0c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     b0e:	784a      	ldrb	r2, [r1, #1]
     b10:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     b12:	788a      	ldrb	r2, [r1, #2]
     b14:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     b16:	0019      	movs	r1, r3
     b18:	4b01      	ldr	r3, [pc, #4]	; (b20 <port_pin_set_config+0x20>)
     b1a:	4798      	blx	r3
}
     b1c:	b003      	add	sp, #12
     b1e:	bd00      	pop	{pc}
     b20:	00002e59 	.word	0x00002e59

00000b24 <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     b24:	6803      	ldr	r3, [r0, #0]

	if (rtc_module->MODE0.SYNCBUSY.reg) {
     b26:	6918      	ldr	r0, [r3, #16]
     b28:	1e43      	subs	r3, r0, #1
     b2a:	4198      	sbcs	r0, r3
     b2c:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
     b2e:	4770      	bx	lr

00000b30 <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
     b30:	b570      	push	{r4, r5, r6, lr}
     b32:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     b34:	6806      	ldr	r6, [r0, #0]
     b36:	2204      	movs	r2, #4
     b38:	4b08      	ldr	r3, [pc, #32]	; (b5c <rtc_count_enable+0x2c>)
     b3a:	601a      	str	r2, [r3, #0]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     b3c:	4d08      	ldr	r5, [pc, #32]	; (b60 <rtc_count_enable+0x30>)
     b3e:	0020      	movs	r0, r4
     b40:	47a8      	blx	r5
     b42:	2800      	cmp	r0, #0
     b44:	d1fb      	bne.n	b3e <rtc_count_enable+0xe>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
     b46:	8833      	ldrh	r3, [r6, #0]
     b48:	2202      	movs	r2, #2
     b4a:	4313      	orrs	r3, r2
     b4c:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
     b4e:	4d04      	ldr	r5, [pc, #16]	; (b60 <rtc_count_enable+0x30>)
     b50:	0020      	movs	r0, r4
     b52:	47a8      	blx	r5
     b54:	2800      	cmp	r0, #0
     b56:	d1fb      	bne.n	b50 <rtc_count_enable+0x20>
		/* Wait for synchronization */
	}
}
     b58:	bd70      	pop	{r4, r5, r6, pc}
     b5a:	46c0      	nop			; (mov r8, r8)
     b5c:	e000e100 	.word	0xe000e100
     b60:	00000b25 	.word	0x00000b25

00000b64 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
     b64:	b570      	push	{r4, r5, r6, lr}
     b66:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     b68:	6806      	ldr	r6, [r0, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     b6a:	2104      	movs	r1, #4
     b6c:	2380      	movs	r3, #128	; 0x80
     b6e:	4a0a      	ldr	r2, [pc, #40]	; (b98 <rtc_count_disable+0x34>)
     b70:	50d1      	str	r1, [r2, r3]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     b72:	4d0a      	ldr	r5, [pc, #40]	; (b9c <rtc_count_disable+0x38>)
     b74:	0020      	movs	r0, r4
     b76:	47a8      	blx	r5
     b78:	2800      	cmp	r0, #0
     b7a:	d1fb      	bne.n	b74 <rtc_count_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
     b7c:	4b08      	ldr	r3, [pc, #32]	; (ba0 <rtc_count_disable+0x3c>)
     b7e:	8133      	strh	r3, [r6, #8]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
     b80:	81b3      	strh	r3, [r6, #12]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
     b82:	8833      	ldrh	r3, [r6, #0]
     b84:	2202      	movs	r2, #2
     b86:	4393      	bics	r3, r2
     b88:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
     b8a:	4d04      	ldr	r5, [pc, #16]	; (b9c <rtc_count_disable+0x38>)
     b8c:	0020      	movs	r0, r4
     b8e:	47a8      	blx	r5
     b90:	2800      	cmp	r0, #0
     b92:	d1fb      	bne.n	b8c <rtc_count_disable+0x28>
		/* Wait for synchronization */
	}
}
     b94:	bd70      	pop	{r4, r5, r6, pc}
     b96:	46c0      	nop			; (mov r8, r8)
     b98:	e000e100 	.word	0xe000e100
     b9c:	00000b25 	.word	0x00000b25
     ba0:	ffff81ff 	.word	0xffff81ff

00000ba4 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
     ba4:	b570      	push	{r4, r5, r6, lr}
     ba6:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     ba8:	6806      	ldr	r6, [r0, #0]

	/* Disable module before reset. */
	rtc_count_disable(module);
     baa:	4b0a      	ldr	r3, [pc, #40]	; (bd4 <rtc_count_reset+0x30>)
     bac:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
     bae:	2300      	movs	r3, #0
     bb0:	86a3      	strh	r3, [r4, #52]	; 0x34
	module->enabled_callback    = 0;
     bb2:	86e3      	strh	r3, [r4, #54]	; 0x36
#endif

	while (rtc_count_is_syncing(module)) {
     bb4:	4d08      	ldr	r5, [pc, #32]	; (bd8 <rtc_count_reset+0x34>)
     bb6:	0020      	movs	r0, r4
     bb8:	47a8      	blx	r5
     bba:	2800      	cmp	r0, #0
     bbc:	d1fb      	bne.n	bb6 <rtc_count_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
     bbe:	8833      	ldrh	r3, [r6, #0]
     bc0:	2201      	movs	r2, #1
     bc2:	4313      	orrs	r3, r2
     bc4:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
     bc6:	4d04      	ldr	r5, [pc, #16]	; (bd8 <rtc_count_reset+0x34>)
     bc8:	0020      	movs	r0, r4
     bca:	47a8      	blx	r5
     bcc:	2800      	cmp	r0, #0
     bce:	d1fb      	bne.n	bc8 <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}
}
     bd0:	bd70      	pop	{r4, r5, r6, pc}
     bd2:	46c0      	nop			; (mov r8, r8)
     bd4:	00000b65 	.word	0x00000b65
     bd8:	00000b25 	.word	0x00000b25

00000bdc <rtc_count_set_count>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were provided
 */
enum status_code rtc_count_set_count(
		struct rtc_module *const module,
		const uint32_t count_value)
{
     bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bde:	0004      	movs	r4, r0
     be0:	000e      	movs	r6, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     be2:	6807      	ldr	r7, [r0, #0]

	while (rtc_count_is_syncing(module)) {
     be4:	4d0c      	ldr	r5, [pc, #48]	; (c18 <rtc_count_set_count+0x3c>)
     be6:	0020      	movs	r0, r4
     be8:	47a8      	blx	r5
     bea:	2800      	cmp	r0, #0
     bec:	d1fb      	bne.n	be6 <rtc_count_set_count+0xa>
		/* Wait for synchronization */
	}

	/* Set count according to mode */
	switch(module->mode){
     bee:	7923      	ldrb	r3, [r4, #4]
     bf0:	2b00      	cmp	r3, #0
     bf2:	d009      	beq.n	c08 <rtc_count_set_count+0x2c>

			break;

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     bf4:	2017      	movs	r0, #23
	switch(module->mode){
     bf6:	2b01      	cmp	r3, #1
     bf8:	d105      	bne.n	c06 <rtc_count_set_count+0x2a>
			rtc_module->MODE0.COUNT.reg = count_value;
     bfa:	61be      	str	r6, [r7, #24]
	}

	while (rtc_count_is_syncing(module)) {
     bfc:	4d06      	ldr	r5, [pc, #24]	; (c18 <rtc_count_set_count+0x3c>)
     bfe:	0020      	movs	r0, r4
     c00:	47a8      	blx	r5
     c02:	2800      	cmp	r0, #0
     c04:	d1fb      	bne.n	bfe <rtc_count_set_count+0x22>
		/* Wait for synchronization */
	}
	return STATUS_OK;
}
     c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(count_value > 0xffff){
     c08:	4b04      	ldr	r3, [pc, #16]	; (c1c <rtc_count_set_count+0x40>)
				return STATUS_ERR_INVALID_ARG;
     c0a:	2017      	movs	r0, #23
			if(count_value > 0xffff){
     c0c:	429e      	cmp	r6, r3
     c0e:	d8fa      	bhi.n	c06 <rtc_count_set_count+0x2a>
			rtc_module->MODE1.COUNT.reg = (uint32_t)count_value;
     c10:	b2b6      	uxth	r6, r6
     c12:	833e      	strh	r6, [r7, #24]
			break;
     c14:	e7f2      	b.n	bfc <rtc_count_set_count+0x20>
     c16:	46c0      	nop			; (mov r8, r8)
     c18:	00000b25 	.word	0x00000b25
     c1c:	0000ffff 	.word	0x0000ffff

00000c20 <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
     c20:	b570      	push	{r4, r5, r6, lr}
     c22:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     c24:	6806      	ldr	r6, [r0, #0]

	/* Initialize return value. */
	uint32_t ret_val;

	while (rtc_count_is_syncing(module)) {
     c26:	4d08      	ldr	r5, [pc, #32]	; (c48 <rtc_count_get_count+0x28>)
     c28:	0020      	movs	r0, r4
     c2a:	47a8      	blx	r5
     c2c:	2800      	cmp	r0, #0
     c2e:	d1fb      	bne.n	c28 <rtc_count_get_count+0x8>
		/* Wait for synchronization */
	}

	/* Read value based on mode. */
	switch (module->mode) {
     c30:	7923      	ldrb	r3, [r4, #4]
     c32:	2b00      	cmp	r3, #0
     c34:	d004      	beq.n	c40 <rtc_count_get_count+0x20>
			break;

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
     c36:	2000      	movs	r0, #0
	switch (module->mode) {
     c38:	2b01      	cmp	r3, #1
     c3a:	d100      	bne.n	c3e <rtc_count_get_count+0x1e>
			ret_val = rtc_module->MODE0.COUNT.reg;
     c3c:	69b0      	ldr	r0, [r6, #24]
			break;
	}

	return ret_val;
}
     c3e:	bd70      	pop	{r4, r5, r6, pc}
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
     c40:	8b30      	ldrh	r0, [r6, #24]
     c42:	b280      	uxth	r0, r0
			break;
     c44:	e7fb      	b.n	c3e <rtc_count_get_count+0x1e>
     c46:	46c0      	nop			; (mov r8, r8)
     c48:	00000b25 	.word	0x00000b25

00000c4c <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
     c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
     c4e:	b083      	sub	sp, #12
     c50:	0004      	movs	r4, r0
     c52:	9101      	str	r1, [sp, #4]
     c54:	0015      	movs	r5, r2
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     c56:	6806      	ldr	r6, [r0, #0]

	while (rtc_count_is_syncing(module)) {
     c58:	4f13      	ldr	r7, [pc, #76]	; (ca8 <rtc_count_set_compare+0x5c>)
     c5a:	0020      	movs	r0, r4
     c5c:	47b8      	blx	r7
     c5e:	2800      	cmp	r0, #0
     c60:	d1fb      	bne.n	c5a <rtc_count_set_compare+0xe>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     c62:	7923      	ldrb	r3, [r4, #4]
     c64:	2b00      	cmp	r3, #0
     c66:	d00e      	beq.n	c86 <rtc_count_set_compare+0x3a>
     c68:	2b01      	cmp	r3, #1
     c6a:	d119      	bne.n	ca0 <rtc_count_set_compare+0x54>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
				return STATUS_ERR_INVALID_ARG;
     c6c:	3017      	adds	r0, #23
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
     c6e:	2d01      	cmp	r5, #1
     c70:	d817      	bhi.n	ca2 <rtc_count_set_compare+0x56>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
     c72:	3508      	adds	r5, #8
     c74:	00ad      	lsls	r5, r5, #2
     c76:	9b01      	ldr	r3, [sp, #4]
     c78:	51ab      	str	r3, [r5, r6]
		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	while (rtc_count_is_syncing(module)) {
     c7a:	4d0b      	ldr	r5, [pc, #44]	; (ca8 <rtc_count_set_compare+0x5c>)
     c7c:	0020      	movs	r0, r4
     c7e:	47a8      	blx	r5
     c80:	2800      	cmp	r0, #0
     c82:	d1fb      	bne.n	c7c <rtc_count_set_compare+0x30>
     c84:	e00d      	b.n	ca2 <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
     c86:	2017      	movs	r0, #23
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
     c88:	2d02      	cmp	r5, #2
     c8a:	d80a      	bhi.n	ca2 <rtc_count_set_compare+0x56>
			if (comp_value > 0xffff) {
     c8c:	4b07      	ldr	r3, [pc, #28]	; (cac <rtc_count_set_compare+0x60>)
     c8e:	9a01      	ldr	r2, [sp, #4]
     c90:	429a      	cmp	r2, r3
     c92:	d806      	bhi.n	ca2 <rtc_count_set_compare+0x56>
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
     c94:	466b      	mov	r3, sp
     c96:	889b      	ldrh	r3, [r3, #4]
     c98:	3510      	adds	r5, #16
     c9a:	006d      	lsls	r5, r5, #1
     c9c:	53ab      	strh	r3, [r5, r6]
			break;
     c9e:	e7ec      	b.n	c7a <rtc_count_set_compare+0x2e>
			return STATUS_ERR_BAD_FORMAT;
     ca0:	201a      	movs	r0, #26
		/* Wait for synchronization */
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
}
     ca2:	b003      	add	sp, #12
     ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ca6:	46c0      	nop			; (mov r8, r8)
     ca8:	00000b25 	.word	0x00000b25
     cac:	0000ffff 	.word	0x0000ffff

00000cb0 <rtc_count_init>:
{
     cb0:	b570      	push	{r4, r5, r6, lr}
     cb2:	0004      	movs	r4, r0
     cb4:	0015      	movs	r5, r2
	module->hw = hw;
     cb6:	6001      	str	r1, [r0, #0]
     cb8:	4a1f      	ldr	r2, [pc, #124]	; (d38 <rtc_count_init+0x88>)
     cba:	6951      	ldr	r1, [r2, #20]
     cbc:	2380      	movs	r3, #128	; 0x80
     cbe:	005b      	lsls	r3, r3, #1
     cc0:	430b      	orrs	r3, r1
     cc2:	6153      	str	r3, [r2, #20]
	OSC32KCTRL->RTCCTRL.reg = RTC_CLOCK_SOURCE;
     cc4:	2205      	movs	r2, #5
     cc6:	4b1d      	ldr	r3, [pc, #116]	; (d3c <rtc_count_init+0x8c>)
     cc8:	611a      	str	r2, [r3, #16]
	rtc_count_reset(module);
     cca:	4b1d      	ldr	r3, [pc, #116]	; (d40 <rtc_count_init+0x90>)
     ccc:	4798      	blx	r3
	module->mode                = config->mode;
     cce:	78ab      	ldrb	r3, [r5, #2]
     cd0:	7123      	strb	r3, [r4, #4]
	_rtc_instance[0] = module;
     cd2:	4b1c      	ldr	r3, [pc, #112]	; (d44 <rtc_count_init+0x94>)
     cd4:	601c      	str	r4, [r3, #0]
	Rtc *const rtc_module = module->hw;
     cd6:	6822      	ldr	r2, [r4, #0]
				    | (config->enable_read_sync << RTC_MODE0_CTRLA_COUNTSYNC_Pos)
     cd8:	792b      	ldrb	r3, [r5, #4]
     cda:	03db      	lsls	r3, r3, #15
				    | config->prescaler;
     cdc:	8829      	ldrh	r1, [r5, #0]
     cde:	430b      	orrs	r3, r1
     ce0:	b29b      	uxth	r3, r3
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0)
     ce2:	8013      	strh	r3, [r2, #0]
	switch (config->mode) {
     ce4:	78ab      	ldrb	r3, [r5, #2]
     ce6:	2b00      	cmp	r3, #0
     ce8:	d013      	beq.n	d12 <rtc_count_init+0x62>
			return STATUS_ERR_INVALID_ARG;
     cea:	2017      	movs	r0, #23
	switch (config->mode) {
     cec:	2b01      	cmp	r3, #1
     cee:	d10f      	bne.n	d10 <rtc_count_init+0x60>
			rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MODE(0);
     cf0:	8813      	ldrh	r3, [r2, #0]
     cf2:	b29b      	uxth	r3, r3
     cf4:	8013      	strh	r3, [r2, #0]
			if (config->clear_on_match) {
     cf6:	78eb      	ldrb	r3, [r5, #3]
     cf8:	2b00      	cmp	r3, #0
     cfa:	d003      	beq.n	d04 <rtc_count_init+0x54>
				rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MATCHCLR;
     cfc:	8813      	ldrh	r3, [r2, #0]
     cfe:	2180      	movs	r1, #128	; 0x80
     d00:	430b      	orrs	r3, r1
     d02:	8013      	strh	r3, [r2, #0]
				rtc_count_set_compare(module, config->compare_values[i],
     d04:	68a9      	ldr	r1, [r5, #8]
     d06:	2200      	movs	r2, #0
     d08:	0020      	movs	r0, r4
     d0a:	4b0f      	ldr	r3, [pc, #60]	; (d48 <rtc_count_init+0x98>)
     d0c:	4798      	blx	r3
	return STATUS_OK;
     d0e:	2000      	movs	r0, #0
}
     d10:	bd70      	pop	{r4, r5, r6, pc}
			rtc_module->MODE1.CTRLA.reg |= RTC_MODE1_CTRLA_MODE(1);
     d12:	8813      	ldrh	r3, [r2, #0]
     d14:	2104      	movs	r1, #4
     d16:	430b      	orrs	r3, r1
     d18:	8013      	strh	r3, [r2, #0]
			if (config->clear_on_match) {
     d1a:	78eb      	ldrb	r3, [r5, #3]
				return STATUS_ERR_INVALID_ARG;
     d1c:	2017      	movs	r0, #23
			if (config->clear_on_match) {
     d1e:	2b00      	cmp	r3, #0
     d20:	d1f6      	bne.n	d10 <rtc_count_init+0x60>
				rtc_count_set_compare(module, config->compare_values[i],
     d22:	2200      	movs	r2, #0
     d24:	68a9      	ldr	r1, [r5, #8]
     d26:	0020      	movs	r0, r4
     d28:	4e07      	ldr	r6, [pc, #28]	; (d48 <rtc_count_init+0x98>)
     d2a:	47b0      	blx	r6
     d2c:	68e9      	ldr	r1, [r5, #12]
     d2e:	2201      	movs	r2, #1
     d30:	0020      	movs	r0, r4
     d32:	47b0      	blx	r6
	return STATUS_OK;
     d34:	2000      	movs	r0, #0
     d36:	e7eb      	b.n	d10 <rtc_count_init+0x60>
     d38:	40000400 	.word	0x40000400
     d3c:	40001000 	.word	0x40001000
     d40:	00000ba5 	.word	0x00000ba5
     d44:	20000f44 	.word	0x20000f44
     d48:	00000c4d 	.word	0x00000c4d

00000d4c <rtc_count_register_callback>:
{

	enum status_code status = STATUS_OK;

	/* Overflow callback */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW
     d4c:	2a0a      	cmp	r2, #10
     d4e:	d009      	beq.n	d64 <rtc_count_register_callback+0x18>
#ifdef FEATURE_RTC_TAMPER_DETECTION
		|| callback_type == RTC_COUNT_CALLBACK_TAMPER
#endif
		|| (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
     d50:	2a07      	cmp	r2, #7
     d52:	d907      	bls.n	d64 <rtc_count_register_callback+0x18>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7)) {
		status = STATUS_OK;
	} else {
		/* Make sure callback type can be registered */
		switch (module->mode) {
     d54:	7903      	ldrb	r3, [r0, #4]
     d56:	2b00      	cmp	r3, #0
     d58:	d010      	beq.n	d7c <rtc_count_register_callback+0x30>
     d5a:	2b01      	cmp	r3, #1
     d5c:	d112      	bne.n	d84 <rtc_count_register_callback+0x38>
     d5e:	3316      	adds	r3, #22
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (callback_type > (RTC_COMP32_NUM + RTC_PER_NUM)) {
     d60:	2a09      	cmp	r2, #9
     d62:	d809      	bhi.n	d78 <rtc_count_register_callback+0x2c>
		}
	}

	if (status == STATUS_OK) {
		/* Register callback */
		module->callbacks[callback_type] = callback;
     d64:	1c93      	adds	r3, r2, #2
     d66:	009b      	lsls	r3, r3, #2
     d68:	5019      	str	r1, [r3, r0]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
     d6a:	8e83      	ldrh	r3, [r0, #52]	; 0x34
     d6c:	2101      	movs	r1, #1
     d6e:	4091      	lsls	r1, r2
     d70:	430b      	orrs	r3, r1
     d72:	b29b      	uxth	r3, r3
     d74:	8683      	strh	r3, [r0, #52]	; 0x34
     d76:	2300      	movs	r3, #0
	}

	return status;
}
     d78:	0018      	movs	r0, r3
     d7a:	4770      	bx	lr
     d7c:	2317      	movs	r3, #23
			if (callback_type > (RTC_NUM_OF_COMP16 + RTC_PER_NUM)) {
     d7e:	2a0a      	cmp	r2, #10
     d80:	d8fa      	bhi.n	d78 <rtc_count_register_callback+0x2c>
     d82:	e7ef      	b.n	d64 <rtc_count_register_callback+0x18>
			status = STATUS_ERR_INVALID_ARG;
     d84:	2317      	movs	r3, #23
     d86:	e7f7      	b.n	d78 <rtc_count_register_callback+0x2c>

00000d88 <rtc_count_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_count_enable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
     d88:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     d8a:	6802      	ldr	r2, [r0, #0]

	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
     d8c:	290a      	cmp	r1, #10
     d8e:	d011      	beq.n	db4 <rtc_count_enable_callback+0x2c>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
     d90:	2907      	cmp	r1, #7
     d92:	d912      	bls.n	dba <rtc_count_enable_callback+0x32>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);
	}else {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
     d94:	2380      	movs	r3, #128	; 0x80
     d96:	005b      	lsls	r3, r3, #1
     d98:	000c      	movs	r4, r1
     d9a:	3c08      	subs	r4, #8
     d9c:	40a3      	lsls	r3, r4
     d9e:	24c0      	movs	r4, #192	; 0xc0
     da0:	00a4      	lsls	r4, r4, #2
     da2:	4023      	ands	r3, r4
     da4:	8153      	strh	r3, [r2, #10]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
     da6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
     da8:	2201      	movs	r2, #1
     daa:	408a      	lsls	r2, r1
     dac:	4313      	orrs	r3, r2
     dae:	b29b      	uxth	r3, r3
     db0:	86c3      	strh	r3, [r0, #54]	; 0x36
}
     db2:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
     db4:	4b04      	ldr	r3, [pc, #16]	; (dc8 <rtc_count_enable_callback+0x40>)
     db6:	8153      	strh	r3, [r2, #10]
     db8:	e7f5      	b.n	da6 <rtc_count_enable_callback+0x1e>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);
     dba:	2401      	movs	r4, #1
     dbc:	408c      	lsls	r4, r1
     dbe:	23ff      	movs	r3, #255	; 0xff
     dc0:	4023      	ands	r3, r4
     dc2:	8153      	strh	r3, [r2, #10]
     dc4:	e7ef      	b.n	da6 <rtc_count_enable_callback+0x1e>
     dc6:	46c0      	nop			; (mov r8, r8)
     dc8:	ffff8000 	.word	0xffff8000

00000dcc <rtc_count_disable_callback>:
 * \param[in]     callback_type Callback type to disable
 */
void rtc_count_disable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
     dcc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     dce:	6802      	ldr	r2, [r0, #0]

	/* Disable interrupt */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
     dd0:	290a      	cmp	r1, #10
     dd2:	d010      	beq.n	df6 <rtc_count_disable_callback+0x2a>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if(callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
     dd4:	2907      	cmp	r1, #7
     dd6:	d911      	bls.n	dfc <rtc_count_disable_callback+0x30>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7){
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
	}else {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
     dd8:	2380      	movs	r3, #128	; 0x80
     dda:	005b      	lsls	r3, r3, #1
     ddc:	000c      	movs	r4, r1
     dde:	3c08      	subs	r4, #8
     de0:	40a3      	lsls	r3, r4
     de2:	24c0      	movs	r4, #192	; 0xc0
     de4:	00a4      	lsls	r4, r4, #2
     de6:	4023      	ands	r3, r4
     de8:	8113      	strh	r3, [r2, #8]
	}

	/* Mark callback as disabled. */
	module->enabled_callback &= ~(1 << callback_type);
     dea:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
     dec:	2201      	movs	r2, #1
     dee:	408a      	lsls	r2, r1
     df0:	4393      	bics	r3, r2
     df2:	86c3      	strh	r3, [r0, #54]	; 0x36
}
     df4:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
     df6:	4b04      	ldr	r3, [pc, #16]	; (e08 <rtc_count_disable_callback+0x3c>)
     df8:	8113      	strh	r3, [r2, #8]
     dfa:	e7f6      	b.n	dea <rtc_count_disable_callback+0x1e>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
     dfc:	2401      	movs	r4, #1
     dfe:	408c      	lsls	r4, r1
     e00:	23ff      	movs	r3, #255	; 0xff
     e02:	4023      	ands	r3, r4
     e04:	8113      	strh	r3, [r2, #8]
     e06:	e7f0      	b.n	dea <rtc_count_disable_callback+0x1e>
     e08:	ffff8000 	.word	0xffff8000

00000e0c <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e0e:	46de      	mov	lr, fp
     e10:	4657      	mov	r7, sl
     e12:	464e      	mov	r6, r9
     e14:	4645      	mov	r5, r8
     e16:	b5e0      	push	{r5, r6, r7, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
     e18:	4b2b      	ldr	r3, [pc, #172]	; (ec8 <RTC_Handler+0xbc>)
     e1a:	681b      	ldr	r3, [r3, #0]
     e1c:	469a      	mov	sl, r3
	Rtc *const rtc_module = module->hw;
     e1e:	681e      	ldr	r6, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
     e20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
	callback_mask &= module->registered_callback;
     e22:	4652      	mov	r2, sl
     e24:	8e92      	ldrh	r2, [r2, #52]	; 0x34
     e26:	401a      	ands	r2, r3
     e28:	4690      	mov	r8, r2
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
     e2a:	89b2      	ldrh	r2, [r6, #12]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
     e2c:	8973      	ldrh	r3, [r6, #10]
     e2e:	4013      	ands	r3, r2
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
     e30:	b21a      	sxth	r2, r3
     e32:	2a00      	cmp	r2, #0
     e34:	db08      	blt.n	e48 <RTC_Handler+0x3c>
     e36:	27ff      	movs	r7, #255	; 0xff
     e38:	401f      	ands	r7, r3
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
     e3a:	d02a      	beq.n	e92 <RTC_Handler+0x86>
     e3c:	2400      	movs	r4, #0
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
     e3e:	2301      	movs	r3, #1
     e40:	4699      	mov	r9, r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
     e42:	33fe      	adds	r3, #254	; 0xfe
     e44:	469b      	mov	fp, r3
     e46:	e014      	b.n	e72 <RTC_Handler+0x66>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
     e48:	4643      	mov	r3, r8
     e4a:	055b      	lsls	r3, r3, #21
     e4c:	d407      	bmi.n	e5e <RTC_Handler+0x52>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
     e4e:	4b1f      	ldr	r3, [pc, #124]	; (ecc <RTC_Handler+0xc0>)
     e50:	81b3      	strh	r3, [r6, #12]
	_rtc_interrupt_handler(0);
}
     e52:	bc3c      	pop	{r2, r3, r4, r5}
     e54:	4690      	mov	r8, r2
     e56:	4699      	mov	r9, r3
     e58:	46a2      	mov	sl, r4
     e5a:	46ab      	mov	fp, r5
     e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
     e5e:	4653      	mov	r3, sl
     e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     e62:	4798      	blx	r3
     e64:	e7f3      	b.n	e4e <RTC_Handler+0x42>
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
     e66:	465b      	mov	r3, fp
     e68:	401d      	ands	r5, r3
     e6a:	81b5      	strh	r5, [r6, #12]
     e6c:	3401      	adds	r4, #1
		for ( i = 0;i < RTC_PER_NUM;i++) {
     e6e:	2c08      	cmp	r4, #8
     e70:	d0ef      	beq.n	e52 <RTC_Handler+0x46>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
     e72:	0023      	movs	r3, r4
     e74:	464d      	mov	r5, r9
     e76:	40a5      	lsls	r5, r4
     e78:	422f      	tst	r7, r5
     e7a:	d0f4      	beq.n	e66 <RTC_Handler+0x5a>
			  && (callback_mask & (1 << i))) {
     e7c:	4642      	mov	r2, r8
     e7e:	4122      	asrs	r2, r4
     e80:	4649      	mov	r1, r9
     e82:	4211      	tst	r1, r2
     e84:	d0ef      	beq.n	e66 <RTC_Handler+0x5a>
				module->callbacks[i]();
     e86:	3302      	adds	r3, #2
     e88:	009b      	lsls	r3, r3, #2
     e8a:	4652      	mov	r2, sl
     e8c:	589b      	ldr	r3, [r3, r2]
     e8e:	4798      	blx	r3
     e90:	e7e9      	b.n	e66 <RTC_Handler+0x5a>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
     e92:	05da      	lsls	r2, r3, #23
     e94:	d50a      	bpl.n	eac <RTC_Handler+0xa0>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
     e96:	4643      	mov	r3, r8
     e98:	05db      	lsls	r3, r3, #23
     e9a:	d403      	bmi.n	ea4 <RTC_Handler+0x98>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
     e9c:	2380      	movs	r3, #128	; 0x80
     e9e:	005b      	lsls	r3, r3, #1
     ea0:	81b3      	strh	r3, [r6, #12]
     ea2:	e7d6      	b.n	e52 <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
     ea4:	4653      	mov	r3, sl
     ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     ea8:	4798      	blx	r3
     eaa:	e7f7      	b.n	e9c <RTC_Handler+0x90>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
     eac:	059b      	lsls	r3, r3, #22
     eae:	d5d0      	bpl.n	e52 <RTC_Handler+0x46>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
     eb0:	4643      	mov	r3, r8
     eb2:	059b      	lsls	r3, r3, #22
     eb4:	d403      	bmi.n	ebe <RTC_Handler+0xb2>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
     eb6:	2380      	movs	r3, #128	; 0x80
     eb8:	009b      	lsls	r3, r3, #2
     eba:	81b3      	strh	r3, [r6, #12]
}
     ebc:	e7c9      	b.n	e52 <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
     ebe:	4653      	mov	r3, sl
     ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     ec2:	4798      	blx	r3
     ec4:	e7f7      	b.n	eb6 <RTC_Handler+0xaa>
     ec6:	46c0      	nop			; (mov r8, r8)
     ec8:	20000f44 	.word	0x20000f44
     ecc:	ffff8000 	.word	0xffff8000

00000ed0 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     ed0:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     ed2:	2207      	movs	r2, #7
     ed4:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     ed6:	421a      	tst	r2, r3
     ed8:	d1fc      	bne.n	ed4 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     eda:	4770      	bx	lr

00000edc <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     edc:	b5f0      	push	{r4, r5, r6, r7, lr}
     ede:	46d6      	mov	lr, sl
     ee0:	464f      	mov	r7, r9
     ee2:	4646      	mov	r6, r8
     ee4:	b5c0      	push	{r6, r7, lr}
     ee6:	b08a      	sub	sp, #40	; 0x28
     ee8:	0007      	movs	r7, r0
     eea:	000e      	movs	r6, r1
     eec:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     eee:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     ef0:	0008      	movs	r0, r1
     ef2:	4ba5      	ldr	r3, [pc, #660]	; (1188 <i2c_master_init+0x2ac>)
     ef4:	4798      	blx	r3

#if (SAML22) || (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	if (sercom_index == 5) {
     ef6:	2805      	cmp	r0, #5
     ef8:	d100      	bne.n	efc <i2c_master_init+0x20>
     efa:	e13d      	b.n	1178 <i2c_master_init+0x29c>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     efc:	0005      	movs	r5, r0
     efe:	3512      	adds	r5, #18
			MCLK->APBCMASK.reg |= mask;
     f00:	4aa2      	ldr	r2, [pc, #648]	; (118c <i2c_master_init+0x2b0>)
     f02:	69d1      	ldr	r1, [r2, #28]
	/* Turn on module in PM */
#if (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	if (sercom_index == 5) {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     f04:	2301      	movs	r3, #1
     f06:	4083      	lsls	r3, r0
     f08:	430b      	orrs	r3, r1
     f0a:	61d3      	str	r3, [r2, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     f0c:	a909      	add	r1, sp, #36	; 0x24
     f0e:	7b23      	ldrb	r3, [r4, #12]
     f10:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     f12:	b2ed      	uxtb	r5, r5
     f14:	0028      	movs	r0, r5
     f16:	4b9e      	ldr	r3, [pc, #632]	; (1190 <i2c_master_init+0x2b4>)
     f18:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     f1a:	0028      	movs	r0, r5
     f1c:	4b9d      	ldr	r3, [pc, #628]	; (1194 <i2c_master_init+0x2b8>)
     f1e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     f20:	7b20      	ldrb	r0, [r4, #12]
     f22:	2100      	movs	r1, #0
     f24:	4b9c      	ldr	r3, [pc, #624]	; (1198 <i2c_master_init+0x2bc>)
     f26:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     f28:	6833      	ldr	r3, [r6, #0]
		return STATUS_ERR_DENIED;
     f2a:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     f2c:	079b      	lsls	r3, r3, #30
     f2e:	d505      	bpl.n	f3c <i2c_master_init+0x60>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     f30:	b00a      	add	sp, #40	; 0x28
     f32:	bc1c      	pop	{r2, r3, r4}
     f34:	4690      	mov	r8, r2
     f36:	4699      	mov	r9, r3
     f38:	46a2      	mov	sl, r4
     f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     f3c:	6833      	ldr	r3, [r6, #0]
		return STATUS_BUSY;
     f3e:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     f40:	07db      	lsls	r3, r3, #31
     f42:	d4f5      	bmi.n	f30 <i2c_master_init+0x54>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     f44:	6838      	ldr	r0, [r7, #0]
     f46:	4b90      	ldr	r3, [pc, #576]	; (1188 <i2c_master_init+0x2ac>)
     f48:	4699      	mov	r9, r3
     f4a:	4798      	blx	r3
     f4c:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     f4e:	4993      	ldr	r1, [pc, #588]	; (119c <i2c_master_init+0x2c0>)
     f50:	4b93      	ldr	r3, [pc, #588]	; (11a0 <i2c_master_init+0x2c4>)
     f52:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     f54:	00ad      	lsls	r5, r5, #2
     f56:	4b93      	ldr	r3, [pc, #588]	; (11a4 <i2c_master_init+0x2c8>)
     f58:	50ef      	str	r7, [r5, r3]
	module->registered_callback = 0;
     f5a:	2300      	movs	r3, #0
     f5c:	763b      	strb	r3, [r7, #24]
	module->enabled_callback = 0;
     f5e:	767b      	strb	r3, [r7, #25]
	module->buffer_length = 0;
     f60:	2500      	movs	r5, #0
     f62:	837b      	strh	r3, [r7, #26]
	module->buffer_remaining = 0;
     f64:	83bb      	strh	r3, [r7, #28]
	module->status = STATUS_OK;
     f66:	2225      	movs	r2, #37	; 0x25
     f68:	54bd      	strb	r5, [r7, r2]
	module->buffer = NULL;
     f6a:	623b      	str	r3, [r7, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     f6c:	3314      	adds	r3, #20
     f6e:	6033      	str	r3, [r6, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     f70:	683b      	ldr	r3, [r7, #0]
     f72:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     f74:	0018      	movs	r0, r3
     f76:	47c8      	blx	r9
     f78:	4681      	mov	r9, r0
     f7a:	2380      	movs	r3, #128	; 0x80
     f7c:	aa08      	add	r2, sp, #32
     f7e:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     f80:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     f82:	2301      	movs	r3, #1
     f84:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     f86:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     f88:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     f8a:	6a26      	ldr	r6, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     f8c:	2800      	cmp	r0, #0
     f8e:	d100      	bne.n	f92 <i2c_master_init+0xb6>
     f90:	e0af      	b.n	10f2 <i2c_master_init+0x216>
	pin_conf.mux_position = pad0 & 0xFFFF;
     f92:	ab08      	add	r3, sp, #32
     f94:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     f96:	2302      	movs	r3, #2
     f98:	aa08      	add	r2, sp, #32
     f9a:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     f9c:	0c00      	lsrs	r0, r0, #16
     f9e:	b2c0      	uxtb	r0, r0
     fa0:	0011      	movs	r1, r2
     fa2:	4b81      	ldr	r3, [pc, #516]	; (11a8 <i2c_master_init+0x2cc>)
     fa4:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     fa6:	2e00      	cmp	r6, #0
     fa8:	d100      	bne.n	fac <i2c_master_init+0xd0>
     faa:	e0a7      	b.n	10fc <i2c_master_init+0x220>
	pin_conf.mux_position = pad1 & 0xFFFF;
     fac:	ab08      	add	r3, sp, #32
     fae:	701e      	strb	r6, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     fb0:	2302      	movs	r3, #2
     fb2:	aa08      	add	r2, sp, #32
     fb4:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     fb6:	0c36      	lsrs	r6, r6, #16
     fb8:	b2f0      	uxtb	r0, r6
     fba:	0011      	movs	r1, r2
     fbc:	4b7a      	ldr	r3, [pc, #488]	; (11a8 <i2c_master_init+0x2cc>)
     fbe:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     fc0:	8aa3      	ldrh	r3, [r4, #20]
     fc2:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
     fc4:	8ae3      	ldrh	r3, [r4, #22]
     fc6:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     fc8:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     fca:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     fcc:	2b00      	cmp	r3, #0
     fce:	d104      	bne.n	fda <i2c_master_init+0xfe>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     fd0:	4b76      	ldr	r3, [pc, #472]	; (11ac <i2c_master_init+0x2d0>)
     fd2:	789b      	ldrb	r3, [r3, #2]
     fd4:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     fd6:	0fdb      	lsrs	r3, r3, #31
     fd8:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     fda:	68a1      	ldr	r1, [r4, #8]
     fdc:	6923      	ldr	r3, [r4, #16]
     fde:	430b      	orrs	r3, r1
     fe0:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     fe2:	2224      	movs	r2, #36	; 0x24
     fe4:	5ca2      	ldrb	r2, [r4, r2]
     fe6:	2a00      	cmp	r2, #0
     fe8:	d002      	beq.n	ff0 <i2c_master_init+0x114>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     fea:	2280      	movs	r2, #128	; 0x80
     fec:	05d2      	lsls	r2, r2, #23
     fee:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     ff0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     ff2:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     ff4:	222c      	movs	r2, #44	; 0x2c
     ff6:	5ca2      	ldrb	r2, [r4, r2]
     ff8:	2a00      	cmp	r2, #0
     ffa:	d103      	bne.n	1004 <i2c_master_init+0x128>
     ffc:	2280      	movs	r2, #128	; 0x80
     ffe:	0492      	lsls	r2, r2, #18
    1000:	4291      	cmp	r1, r2
    1002:	d102      	bne.n	100a <i2c_master_init+0x12e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    1004:	2280      	movs	r2, #128	; 0x80
    1006:	0512      	lsls	r2, r2, #20
    1008:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    100a:	222d      	movs	r2, #45	; 0x2d
    100c:	5ca2      	ldrb	r2, [r4, r2]
    100e:	2a00      	cmp	r2, #0
    1010:	d002      	beq.n	1018 <i2c_master_init+0x13c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    1012:	2280      	movs	r2, #128	; 0x80
    1014:	0412      	lsls	r2, r2, #16
    1016:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    1018:	222e      	movs	r2, #46	; 0x2e
    101a:	5ca2      	ldrb	r2, [r4, r2]
    101c:	2a00      	cmp	r2, #0
    101e:	d002      	beq.n	1026 <i2c_master_init+0x14a>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    1020:	2280      	movs	r2, #128	; 0x80
    1022:	03d2      	lsls	r2, r2, #15
    1024:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    1026:	4642      	mov	r2, r8
    1028:	6812      	ldr	r2, [r2, #0]
    102a:	4313      	orrs	r3, r2
    102c:	4642      	mov	r2, r8
    102e:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    1030:	2380      	movs	r3, #128	; 0x80
    1032:	005b      	lsls	r3, r3, #1
    1034:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    1036:	464d      	mov	r5, r9
    1038:	3512      	adds	r5, #18
    103a:	b2e8      	uxtb	r0, r5
    103c:	4b5c      	ldr	r3, [pc, #368]	; (11b0 <i2c_master_init+0x2d4>)
    103e:	4798      	blx	r3
    1040:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    1042:	23fa      	movs	r3, #250	; 0xfa
    1044:	009b      	lsls	r3, r3, #2
    1046:	6822      	ldr	r2, [r4, #0]
    1048:	435a      	muls	r2, r3
    104a:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    104c:	6863      	ldr	r3, [r4, #4]
    104e:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    1050:	4d58      	ldr	r5, [pc, #352]	; (11b4 <i2c_master_init+0x2d8>)
    1052:	47a8      	blx	r5
    1054:	9000      	str	r0, [sp, #0]
    1056:	9101      	str	r1, [sp, #4]
    1058:	464b      	mov	r3, r9
    105a:	0058      	lsls	r0, r3, #1
    105c:	47a8      	blx	r5
    105e:	9002      	str	r0, [sp, #8]
    1060:	9103      	str	r1, [sp, #12]
    1062:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    1064:	47a8      	blx	r5
    1066:	9004      	str	r0, [sp, #16]
    1068:	9105      	str	r1, [sp, #20]
    106a:	4f53      	ldr	r7, [pc, #332]	; (11b8 <i2c_master_init+0x2dc>)
    106c:	4a53      	ldr	r2, [pc, #332]	; (11bc <i2c_master_init+0x2e0>)
    106e:	4b54      	ldr	r3, [pc, #336]	; (11c0 <i2c_master_init+0x2e4>)
    1070:	9800      	ldr	r0, [sp, #0]
    1072:	9901      	ldr	r1, [sp, #4]
    1074:	47b8      	blx	r7
    1076:	0002      	movs	r2, r0
    1078:	000b      	movs	r3, r1
    107a:	9804      	ldr	r0, [sp, #16]
    107c:	9905      	ldr	r1, [sp, #20]
    107e:	47b8      	blx	r7
    1080:	4e50      	ldr	r6, [pc, #320]	; (11c4 <i2c_master_init+0x2e8>)
    1082:	2200      	movs	r2, #0
    1084:	4b50      	ldr	r3, [pc, #320]	; (11c8 <i2c_master_init+0x2ec>)
    1086:	47b0      	blx	r6
    1088:	9004      	str	r0, [sp, #16]
    108a:	9105      	str	r1, [sp, #20]
    108c:	4648      	mov	r0, r9
    108e:	47a8      	blx	r5
    1090:	0002      	movs	r2, r0
    1092:	000b      	movs	r3, r1
    1094:	9804      	ldr	r0, [sp, #16]
    1096:	9905      	ldr	r1, [sp, #20]
    1098:	47b8      	blx	r7
    109a:	0002      	movs	r2, r0
    109c:	000b      	movs	r3, r1
    109e:	4d4b      	ldr	r5, [pc, #300]	; (11cc <i2c_master_init+0x2f0>)
    10a0:	9800      	ldr	r0, [sp, #0]
    10a2:	9901      	ldr	r1, [sp, #4]
    10a4:	47a8      	blx	r5
    10a6:	9a02      	ldr	r2, [sp, #8]
    10a8:	9b03      	ldr	r3, [sp, #12]
    10aa:	47b0      	blx	r6
    10ac:	2200      	movs	r2, #0
    10ae:	4b48      	ldr	r3, [pc, #288]	; (11d0 <i2c_master_init+0x2f4>)
    10b0:	47a8      	blx	r5
    10b2:	9a02      	ldr	r2, [sp, #8]
    10b4:	9b03      	ldr	r3, [sp, #12]
    10b6:	4d47      	ldr	r5, [pc, #284]	; (11d4 <i2c_master_init+0x2f8>)
    10b8:	47a8      	blx	r5
    10ba:	4b47      	ldr	r3, [pc, #284]	; (11d8 <i2c_master_init+0x2fc>)
    10bc:	4798      	blx	r3
    10be:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    10c0:	2380      	movs	r3, #128	; 0x80
    10c2:	049b      	lsls	r3, r3, #18
    10c4:	68a2      	ldr	r2, [r4, #8]
    10c6:	429a      	cmp	r2, r3
    10c8:	d01e      	beq.n	1108 <i2c_master_init+0x22c>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    10ca:	0003      	movs	r3, r0
    10cc:	2040      	movs	r0, #64	; 0x40
    10ce:	2dff      	cmp	r5, #255	; 0xff
    10d0:	d900      	bls.n	10d4 <i2c_master_init+0x1f8>
    10d2:	e72d      	b.n	f30 <i2c_master_init+0x54>
	int32_t tmp_baudlow_hs = 0;
    10d4:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    10d6:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    10d8:	25ff      	movs	r5, #255	; 0xff
    10da:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    10dc:	0624      	lsls	r4, r4, #24
    10de:	4325      	orrs	r5, r4
    10e0:	0400      	lsls	r0, r0, #16
    10e2:	23ff      	movs	r3, #255	; 0xff
    10e4:	041b      	lsls	r3, r3, #16
    10e6:	4018      	ands	r0, r3
    10e8:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    10ea:	4643      	mov	r3, r8
    10ec:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    10ee:	2000      	movs	r0, #0
    10f0:	e71e      	b.n	f30 <i2c_master_init+0x54>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    10f2:	2100      	movs	r1, #0
    10f4:	4640      	mov	r0, r8
    10f6:	4b39      	ldr	r3, [pc, #228]	; (11dc <i2c_master_init+0x300>)
    10f8:	4798      	blx	r3
    10fa:	e74a      	b.n	f92 <i2c_master_init+0xb6>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    10fc:	2101      	movs	r1, #1
    10fe:	4640      	mov	r0, r8
    1100:	4b36      	ldr	r3, [pc, #216]	; (11dc <i2c_master_init+0x300>)
    1102:	4798      	blx	r3
    1104:	0006      	movs	r6, r0
    1106:	e751      	b.n	fac <i2c_master_init+0xd0>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    1108:	26fa      	movs	r6, #250	; 0xfa
    110a:	00b6      	lsls	r6, r6, #2
    110c:	4653      	mov	r3, sl
    110e:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    1110:	9800      	ldr	r0, [sp, #0]
    1112:	9901      	ldr	r1, [sp, #4]
    1114:	0002      	movs	r2, r0
    1116:	000b      	movs	r3, r1
    1118:	4c2a      	ldr	r4, [pc, #168]	; (11c4 <i2c_master_init+0x2e8>)
    111a:	47a0      	blx	r4
    111c:	9000      	str	r0, [sp, #0]
    111e:	9101      	str	r1, [sp, #4]
    1120:	0030      	movs	r0, r6
    1122:	4b24      	ldr	r3, [pc, #144]	; (11b4 <i2c_master_init+0x2d8>)
    1124:	4798      	blx	r3
    1126:	2200      	movs	r2, #0
    1128:	4b2d      	ldr	r3, [pc, #180]	; (11e0 <i2c_master_init+0x304>)
    112a:	47b8      	blx	r7
    112c:	0002      	movs	r2, r0
    112e:	000b      	movs	r3, r1
    1130:	9800      	ldr	r0, [sp, #0]
    1132:	9901      	ldr	r1, [sp, #4]
    1134:	4c27      	ldr	r4, [pc, #156]	; (11d4 <i2c_master_init+0x2f8>)
    1136:	47a0      	blx	r4
    1138:	2200      	movs	r2, #0
    113a:	4b25      	ldr	r3, [pc, #148]	; (11d0 <i2c_master_init+0x2f4>)
    113c:	4c23      	ldr	r4, [pc, #140]	; (11cc <i2c_master_init+0x2f0>)
    113e:	47a0      	blx	r4
    1140:	4b25      	ldr	r3, [pc, #148]	; (11d8 <i2c_master_init+0x2fc>)
    1142:	4798      	blx	r3
    1144:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    1146:	d00c      	beq.n	1162 <i2c_master_init+0x286>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    1148:	0031      	movs	r1, r6
    114a:	9807      	ldr	r0, [sp, #28]
    114c:	4b25      	ldr	r3, [pc, #148]	; (11e4 <i2c_master_init+0x308>)
    114e:	4798      	blx	r3
    1150:	3802      	subs	r0, #2
    1152:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    1154:	002b      	movs	r3, r5
    1156:	2dff      	cmp	r5, #255	; 0xff
    1158:	d80c      	bhi.n	1174 <i2c_master_init+0x298>
    115a:	28ff      	cmp	r0, #255	; 0xff
    115c:	d9bc      	bls.n	10d8 <i2c_master_init+0x1fc>
    115e:	2040      	movs	r0, #64	; 0x40
    1160:	e6e6      	b.n	f30 <i2c_master_init+0x54>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    1162:	0071      	lsls	r1, r6, #1
    1164:	1e48      	subs	r0, r1, #1
    1166:	9b07      	ldr	r3, [sp, #28]
    1168:	469c      	mov	ip, r3
    116a:	4460      	add	r0, ip
    116c:	4b1d      	ldr	r3, [pc, #116]	; (11e4 <i2c_master_init+0x308>)
    116e:	4798      	blx	r3
    1170:	3801      	subs	r0, #1
    1172:	e7ef      	b.n	1154 <i2c_master_init+0x278>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    1174:	2040      	movs	r0, #64	; 0x40
    1176:	e6db      	b.n	f30 <i2c_master_init+0x54>
			MCLK->APBDMASK.reg |= mask;
    1178:	4a04      	ldr	r2, [pc, #16]	; (118c <i2c_master_init+0x2b0>)
    117a:	6a13      	ldr	r3, [r2, #32]
    117c:	2102      	movs	r1, #2
    117e:	430b      	orrs	r3, r1
    1180:	6213      	str	r3, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    1182:	2518      	movs	r5, #24
    1184:	e6c2      	b.n	f0c <i2c_master_init+0x30>
    1186:	46c0      	nop			; (mov r8, r8)
    1188:	0000250d 	.word	0x0000250d
    118c:	40000400 	.word	0x40000400
    1190:	00002d5d 	.word	0x00002d5d
    1194:	00002ced 	.word	0x00002ced
    1198:	00002365 	.word	0x00002365
    119c:	00001611 	.word	0x00001611
    11a0:	00002549 	.word	0x00002549
    11a4:	20000f48 	.word	0x20000f48
    11a8:	00002e59 	.word	0x00002e59
    11ac:	41002000 	.word	0x41002000
    11b0:	00002d81 	.word	0x00002d81
    11b4:	000143d5 	.word	0x000143d5
    11b8:	000137bd 	.word	0x000137bd
    11bc:	e826d695 	.word	0xe826d695
    11c0:	3e112e0b 	.word	0x3e112e0b
    11c4:	00012b35 	.word	0x00012b35
    11c8:	40240000 	.word	0x40240000
    11cc:	00013cbd 	.word	0x00013cbd
    11d0:	3ff00000 	.word	0x3ff00000
    11d4:	00013155 	.word	0x00013155
    11d8:	000142e9 	.word	0x000142e9
    11dc:	000023b1 	.word	0x000023b1
    11e0:	40080000 	.word	0x40080000
    11e4:	00011769 	.word	0x00011769

000011e8 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    11e8:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    11ea:	7e1a      	ldrb	r2, [r3, #24]
    11ec:	0792      	lsls	r2, r2, #30
    11ee:	d507      	bpl.n	1200 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    11f0:	2202      	movs	r2, #2
    11f2:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    11f4:	8b5b      	ldrh	r3, [r3, #26]
    11f6:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    11f8:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    11fa:	17db      	asrs	r3, r3, #31
    11fc:	4018      	ands	r0, r3
}
    11fe:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1200:	8b5a      	ldrh	r2, [r3, #26]
    1202:	0752      	lsls	r2, r2, #29
    1204:	d506      	bpl.n	1214 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1206:	6859      	ldr	r1, [r3, #4]
    1208:	22c0      	movs	r2, #192	; 0xc0
    120a:	0292      	lsls	r2, r2, #10
    120c:	430a      	orrs	r2, r1
    120e:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    1210:	2018      	movs	r0, #24
    1212:	e7f4      	b.n	11fe <_i2c_master_address_response+0x16>
	return STATUS_OK;
    1214:	2000      	movs	r0, #0
    1216:	e7f2      	b.n	11fe <_i2c_master_address_response+0x16>

00001218 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    1218:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    121a:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    121c:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    121e:	2401      	movs	r4, #1
    1220:	2502      	movs	r5, #2
    1222:	7e11      	ldrb	r1, [r2, #24]
    1224:	4221      	tst	r1, r4
    1226:	d10b      	bne.n	1240 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    1228:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    122a:	4229      	tst	r1, r5
    122c:	d106      	bne.n	123c <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    122e:	3301      	adds	r3, #1
    1230:	b29b      	uxth	r3, r3
    1232:	8901      	ldrh	r1, [r0, #8]
    1234:	4299      	cmp	r1, r3
    1236:	d8f4      	bhi.n	1222 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    1238:	2012      	movs	r0, #18
    123a:	e002      	b.n	1242 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    123c:	2000      	movs	r0, #0
    123e:	e000      	b.n	1242 <_i2c_master_wait_for_bus+0x2a>
    1240:	2000      	movs	r0, #0
}
    1242:	bd30      	pop	{r4, r5, pc}

00001244 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    1244:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1246:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1248:	6862      	ldr	r2, [r4, #4]
    124a:	2380      	movs	r3, #128	; 0x80
    124c:	02db      	lsls	r3, r3, #11
    124e:	4313      	orrs	r3, r2
    1250:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    1252:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1254:	4b02      	ldr	r3, [pc, #8]	; (1260 <_i2c_master_send_hs_master_code+0x1c>)
    1256:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    1258:	2301      	movs	r3, #1
    125a:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    125c:	bd10      	pop	{r4, pc}
    125e:	46c0      	nop			; (mov r8, r8)
    1260:	00001219 	.word	0x00001219

00001264 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1264:	b5f0      	push	{r4, r5, r6, r7, lr}
    1266:	46de      	mov	lr, fp
    1268:	4657      	mov	r7, sl
    126a:	464e      	mov	r6, r9
    126c:	4645      	mov	r5, r8
    126e:	b5e0      	push	{r5, r6, r7, lr}
    1270:	b083      	sub	sp, #12
    1272:	0006      	movs	r6, r0
    1274:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1276:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    1278:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    127a:	682b      	ldr	r3, [r5, #0]
    127c:	011b      	lsls	r3, r3, #4
    127e:	0fdb      	lsrs	r3, r3, #31
    1280:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    1282:	7a4b      	ldrb	r3, [r1, #9]
    1284:	2b00      	cmp	r3, #0
    1286:	d12b      	bne.n	12e0 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1288:	686b      	ldr	r3, [r5, #4]
    128a:	4a58      	ldr	r2, [pc, #352]	; (13ec <_i2c_master_read_packet+0x188>)
    128c:	4013      	ands	r3, r2
    128e:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    1290:	464b      	mov	r3, r9
    1292:	7a1b      	ldrb	r3, [r3, #8]
    1294:	2b00      	cmp	r3, #0
    1296:	d127      	bne.n	12e8 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1298:	464b      	mov	r3, r9
    129a:	881b      	ldrh	r3, [r3, #0]
    129c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    129e:	464a      	mov	r2, r9
    12a0:	7a52      	ldrb	r2, [r2, #9]
    12a2:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    12a4:	4313      	orrs	r3, r2
    12a6:	2201      	movs	r2, #1
    12a8:	4313      	orrs	r3, r2
    12aa:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    12ac:	0030      	movs	r0, r6
    12ae:	4b50      	ldr	r3, [pc, #320]	; (13f0 <_i2c_master_read_packet+0x18c>)
    12b0:	4798      	blx	r3
    12b2:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    12b4:	4653      	mov	r3, sl
    12b6:	2b00      	cmp	r3, #0
    12b8:	d003      	beq.n	12c2 <_i2c_master_read_packet+0x5e>
    12ba:	464b      	mov	r3, r9
    12bc:	885b      	ldrh	r3, [r3, #2]
    12be:	2b01      	cmp	r3, #1
    12c0:	d03b      	beq.n	133a <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    12c2:	686b      	ldr	r3, [r5, #4]
    12c4:	4a49      	ldr	r2, [pc, #292]	; (13ec <_i2c_master_read_packet+0x188>)
    12c6:	4013      	ands	r3, r2
    12c8:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    12ca:	9b01      	ldr	r3, [sp, #4]
    12cc:	2b00      	cmp	r3, #0
    12ce:	d03a      	beq.n	1346 <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
    12d0:	9801      	ldr	r0, [sp, #4]
    12d2:	b003      	add	sp, #12
    12d4:	bc3c      	pop	{r2, r3, r4, r5}
    12d6:	4690      	mov	r8, r2
    12d8:	4699      	mov	r9, r3
    12da:	46a2      	mov	sl, r4
    12dc:	46ab      	mov	fp, r5
    12de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    12e0:	7a89      	ldrb	r1, [r1, #10]
    12e2:	4b44      	ldr	r3, [pc, #272]	; (13f4 <_i2c_master_read_packet+0x190>)
    12e4:	4798      	blx	r3
    12e6:	e7cf      	b.n	1288 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
    12e8:	464b      	mov	r3, r9
    12ea:	881b      	ldrh	r3, [r3, #0]
    12ec:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    12ee:	464a      	mov	r2, r9
    12f0:	7a52      	ldrb	r2, [r2, #9]
    12f2:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    12f4:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    12f6:	2280      	movs	r2, #128	; 0x80
    12f8:	0212      	lsls	r2, r2, #8
    12fa:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    12fc:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    12fe:	0030      	movs	r0, r6
    1300:	4b3b      	ldr	r3, [pc, #236]	; (13f0 <_i2c_master_read_packet+0x18c>)
    1302:	4798      	blx	r3
    1304:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1306:	686b      	ldr	r3, [r5, #4]
    1308:	4a38      	ldr	r2, [pc, #224]	; (13ec <_i2c_master_read_packet+0x188>)
    130a:	4013      	ands	r3, r2
    130c:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
    130e:	2800      	cmp	r0, #0
    1310:	d1de      	bne.n	12d0 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
    1312:	0030      	movs	r0, r6
    1314:	4b38      	ldr	r3, [pc, #224]	; (13f8 <_i2c_master_read_packet+0x194>)
    1316:	4798      	blx	r3
    1318:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
    131a:	2800      	cmp	r0, #0
    131c:	d1d8      	bne.n	12d0 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    131e:	464b      	mov	r3, r9
    1320:	881b      	ldrh	r3, [r3, #0]
    1322:	0a1b      	lsrs	r3, r3, #8
    1324:	2278      	movs	r2, #120	; 0x78
    1326:	4313      	orrs	r3, r2
    1328:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    132a:	464a      	mov	r2, r9
    132c:	7a52      	ldrb	r2, [r2, #9]
    132e:	0392      	lsls	r2, r2, #14
    1330:	2101      	movs	r1, #1
    1332:	430a      	orrs	r2, r1
    1334:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    1336:	626b      	str	r3, [r5, #36]	; 0x24
    1338:	e7b8      	b.n	12ac <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    133a:	686a      	ldr	r2, [r5, #4]
    133c:	2380      	movs	r3, #128	; 0x80
    133e:	02db      	lsls	r3, r3, #11
    1340:	4313      	orrs	r3, r2
    1342:	606b      	str	r3, [r5, #4]
    1344:	e7c1      	b.n	12ca <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
    1346:	0030      	movs	r0, r6
    1348:	4b2b      	ldr	r3, [pc, #172]	; (13f8 <_i2c_master_read_packet+0x194>)
    134a:	4798      	blx	r3
    134c:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    134e:	2800      	cmp	r0, #0
    1350:	d1be      	bne.n	12d0 <_i2c_master_read_packet+0x6c>
    1352:	3c01      	subs	r4, #1
    1354:	b2a4      	uxth	r4, r4
    1356:	4680      	mov	r8, r0
		while (tmp_data_length--) {
    1358:	4b28      	ldr	r3, [pc, #160]	; (13fc <_i2c_master_read_packet+0x198>)
    135a:	469b      	mov	fp, r3
    135c:	e015      	b.n	138a <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    135e:	2c01      	cmp	r4, #1
    1360:	d020      	beq.n	13a4 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
    1362:	0030      	movs	r0, r6
    1364:	4b26      	ldr	r3, [pc, #152]	; (1400 <_i2c_master_read_packet+0x19c>)
    1366:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    1368:	4643      	mov	r3, r8
    136a:	1c5f      	adds	r7, r3, #1
    136c:	b2bf      	uxth	r7, r7
    136e:	2328      	movs	r3, #40	; 0x28
    1370:	5ceb      	ldrb	r3, [r5, r3]
    1372:	464a      	mov	r2, r9
    1374:	6852      	ldr	r2, [r2, #4]
    1376:	4641      	mov	r1, r8
    1378:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
    137a:	0030      	movs	r0, r6
    137c:	4b1c      	ldr	r3, [pc, #112]	; (13f0 <_i2c_master_read_packet+0x18c>)
    137e:	4798      	blx	r3
    1380:	3c01      	subs	r4, #1
    1382:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
    1384:	2800      	cmp	r0, #0
    1386:	d115      	bne.n	13b4 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
    1388:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
    138a:	455c      	cmp	r4, fp
    138c:	d014      	beq.n	13b8 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    138e:	8b6b      	ldrh	r3, [r5, #26]
    1390:	069b      	lsls	r3, r3, #26
    1392:	d527      	bpl.n	13e4 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    1394:	7af3      	ldrb	r3, [r6, #11]
    1396:	2b00      	cmp	r3, #0
    1398:	d0e3      	beq.n	1362 <_i2c_master_read_packet+0xfe>
    139a:	4653      	mov	r3, sl
    139c:	2b00      	cmp	r3, #0
    139e:	d1de      	bne.n	135e <_i2c_master_read_packet+0xfa>
    13a0:	2c00      	cmp	r4, #0
    13a2:	d1de      	bne.n	1362 <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    13a4:	686a      	ldr	r2, [r5, #4]
    13a6:	2380      	movs	r3, #128	; 0x80
    13a8:	02db      	lsls	r3, r3, #11
    13aa:	4313      	orrs	r3, r2
    13ac:	606b      	str	r3, [r5, #4]
    13ae:	3c01      	subs	r4, #1
    13b0:	b2a4      	uxth	r4, r4
    13b2:	e7ea      	b.n	138a <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
    13b4:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
    13b6:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    13b8:	7ab3      	ldrb	r3, [r6, #10]
    13ba:	2b00      	cmp	r3, #0
    13bc:	d109      	bne.n	13d2 <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
    13be:	0030      	movs	r0, r6
    13c0:	4b0f      	ldr	r3, [pc, #60]	; (1400 <_i2c_master_read_packet+0x19c>)
    13c2:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    13c4:	2328      	movs	r3, #40	; 0x28
    13c6:	5cea      	ldrb	r2, [r5, r3]
    13c8:	464b      	mov	r3, r9
    13ca:	685b      	ldr	r3, [r3, #4]
    13cc:	4641      	mov	r1, r8
    13ce:	545a      	strb	r2, [r3, r1]
    13d0:	e77e      	b.n	12d0 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
    13d2:	0030      	movs	r0, r6
    13d4:	4b0a      	ldr	r3, [pc, #40]	; (1400 <_i2c_master_read_packet+0x19c>)
    13d6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    13d8:	686a      	ldr	r2, [r5, #4]
    13da:	23c0      	movs	r3, #192	; 0xc0
    13dc:	029b      	lsls	r3, r3, #10
    13de:	4313      	orrs	r3, r2
    13e0:	606b      	str	r3, [r5, #4]
    13e2:	e7ec      	b.n	13be <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
    13e4:	2341      	movs	r3, #65	; 0x41
    13e6:	9301      	str	r3, [sp, #4]
    13e8:	e772      	b.n	12d0 <_i2c_master_read_packet+0x6c>
    13ea:	46c0      	nop			; (mov r8, r8)
    13ec:	fffbffff 	.word	0xfffbffff
    13f0:	00001219 	.word	0x00001219
    13f4:	00001245 	.word	0x00001245
    13f8:	000011e9 	.word	0x000011e9
    13fc:	0000ffff 	.word	0x0000ffff
    1400:	00000ed1 	.word	0x00000ed1

00001404 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1404:	b5f0      	push	{r4, r5, r6, r7, lr}
    1406:	46de      	mov	lr, fp
    1408:	4657      	mov	r7, sl
    140a:	464e      	mov	r6, r9
    140c:	4645      	mov	r5, r8
    140e:	b5e0      	push	{r5, r6, r7, lr}
    1410:	b083      	sub	sp, #12
    1412:	0006      	movs	r6, r0
    1414:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1416:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    1418:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    141a:	4b32      	ldr	r3, [pc, #200]	; (14e4 <_i2c_master_write_packet+0xe0>)
    141c:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    141e:	7a7b      	ldrb	r3, [r7, #9]
    1420:	2b00      	cmp	r3, #0
    1422:	d11d      	bne.n	1460 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1424:	686b      	ldr	r3, [r5, #4]
    1426:	4a30      	ldr	r2, [pc, #192]	; (14e8 <_i2c_master_write_packet+0xe4>)
    1428:	4013      	ands	r3, r2
    142a:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    142c:	7a3b      	ldrb	r3, [r7, #8]
    142e:	2b00      	cmp	r3, #0
    1430:	d01b      	beq.n	146a <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1432:	883b      	ldrh	r3, [r7, #0]
    1434:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1436:	7a7a      	ldrb	r2, [r7, #9]
    1438:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    143a:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    143c:	2280      	movs	r2, #128	; 0x80
    143e:	0212      	lsls	r2, r2, #8
    1440:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1442:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1444:	0030      	movs	r0, r6
    1446:	4b29      	ldr	r3, [pc, #164]	; (14ec <_i2c_master_write_packet+0xe8>)
    1448:	4798      	blx	r3
    144a:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    144c:	2800      	cmp	r0, #0
    144e:	d013      	beq.n	1478 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    1450:	9801      	ldr	r0, [sp, #4]
    1452:	b003      	add	sp, #12
    1454:	bc3c      	pop	{r2, r3, r4, r5}
    1456:	4690      	mov	r8, r2
    1458:	4699      	mov	r9, r3
    145a:	46a2      	mov	sl, r4
    145c:	46ab      	mov	fp, r5
    145e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    1460:	7ab9      	ldrb	r1, [r7, #10]
    1462:	0030      	movs	r0, r6
    1464:	4b22      	ldr	r3, [pc, #136]	; (14f0 <_i2c_master_write_packet+0xec>)
    1466:	4798      	blx	r3
    1468:	e7dc      	b.n	1424 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    146a:	883b      	ldrh	r3, [r7, #0]
    146c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    146e:	7a7a      	ldrb	r2, [r7, #9]
    1470:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1472:	4313      	orrs	r3, r2
    1474:	626b      	str	r3, [r5, #36]	; 0x24
    1476:	e7e5      	b.n	1444 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
    1478:	0030      	movs	r0, r6
    147a:	4b1e      	ldr	r3, [pc, #120]	; (14f4 <_i2c_master_write_packet+0xf0>)
    147c:	4798      	blx	r3
    147e:	1e03      	subs	r3, r0, #0
    1480:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    1482:	d1e5      	bne.n	1450 <_i2c_master_write_packet+0x4c>
    1484:	46a0      	mov	r8, r4
    1486:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    1488:	3320      	adds	r3, #32
    148a:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
    148c:	4b15      	ldr	r3, [pc, #84]	; (14e4 <_i2c_master_write_packet+0xe0>)
    148e:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
    1490:	4b16      	ldr	r3, [pc, #88]	; (14ec <_i2c_master_write_packet+0xe8>)
    1492:	469a      	mov	sl, r3
		while (tmp_data_length--) {
    1494:	4544      	cmp	r4, r8
    1496:	d015      	beq.n	14c4 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    1498:	8b6b      	ldrh	r3, [r5, #26]
    149a:	464a      	mov	r2, r9
    149c:	4213      	tst	r3, r2
    149e:	d01d      	beq.n	14dc <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
    14a0:	0030      	movs	r0, r6
    14a2:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    14a4:	687b      	ldr	r3, [r7, #4]
    14a6:	5d1a      	ldrb	r2, [r3, r4]
    14a8:	2328      	movs	r3, #40	; 0x28
    14aa:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
    14ac:	0030      	movs	r0, r6
    14ae:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
    14b0:	2800      	cmp	r0, #0
    14b2:	d106      	bne.n	14c2 <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    14b4:	8b6b      	ldrh	r3, [r5, #26]
    14b6:	3401      	adds	r4, #1
    14b8:	075b      	lsls	r3, r3, #29
    14ba:	d5eb      	bpl.n	1494 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
    14bc:	231e      	movs	r3, #30
    14be:	9301      	str	r3, [sp, #4]
    14c0:	e000      	b.n	14c4 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
    14c2:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    14c4:	7ab3      	ldrb	r3, [r6, #10]
    14c6:	2b00      	cmp	r3, #0
    14c8:	d0c2      	beq.n	1450 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
    14ca:	0030      	movs	r0, r6
    14cc:	4b05      	ldr	r3, [pc, #20]	; (14e4 <_i2c_master_write_packet+0xe0>)
    14ce:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    14d0:	686a      	ldr	r2, [r5, #4]
    14d2:	23c0      	movs	r3, #192	; 0xc0
    14d4:	029b      	lsls	r3, r3, #10
    14d6:	4313      	orrs	r3, r2
    14d8:	606b      	str	r3, [r5, #4]
    14da:	e7b9      	b.n	1450 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
    14dc:	2341      	movs	r3, #65	; 0x41
    14de:	9301      	str	r3, [sp, #4]
    14e0:	e7b6      	b.n	1450 <_i2c_master_write_packet+0x4c>
    14e2:	46c0      	nop			; (mov r8, r8)
    14e4:	00000ed1 	.word	0x00000ed1
    14e8:	fffbffff 	.word	0xfffbffff
    14ec:	00001219 	.word	0x00001219
    14f0:	00001245 	.word	0x00001245
    14f4:	000011e9 	.word	0x000011e9

000014f8 <i2c_master_read_packet_wait>:
{
    14f8:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
    14fa:	8b83      	ldrh	r3, [r0, #28]
    14fc:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    14fe:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    1500:	2b00      	cmp	r3, #0
    1502:	d001      	beq.n	1508 <i2c_master_read_packet_wait+0x10>
}
    1504:	0010      	movs	r0, r2
    1506:	bd10      	pop	{r4, pc}
	module->send_stop = true;
    1508:	3301      	adds	r3, #1
    150a:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    150c:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    150e:	4b02      	ldr	r3, [pc, #8]	; (1518 <i2c_master_read_packet_wait+0x20>)
    1510:	4798      	blx	r3
    1512:	0002      	movs	r2, r0
    1514:	e7f6      	b.n	1504 <i2c_master_read_packet_wait+0xc>
    1516:	46c0      	nop			; (mov r8, r8)
    1518:	00001265 	.word	0x00001265

0000151c <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    151c:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    151e:	8b83      	ldrh	r3, [r0, #28]
    1520:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    1522:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    1524:	2b00      	cmp	r3, #0
    1526:	d001      	beq.n	152c <i2c_master_write_packet_wait_no_stop+0x10>

	module->send_stop = false;
	module->send_nack = true;

	return _i2c_master_write_packet(module, packet);
}
    1528:	0010      	movs	r0, r2
    152a:	bd10      	pop	{r4, pc}
	module->send_stop = false;
    152c:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    152e:	3301      	adds	r3, #1
    1530:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
    1532:	4b02      	ldr	r3, [pc, #8]	; (153c <i2c_master_write_packet_wait_no_stop+0x20>)
    1534:	4798      	blx	r3
    1536:	0002      	movs	r2, r0
    1538:	e7f6      	b.n	1528 <i2c_master_write_packet_wait_no_stop+0xc>
    153a:	46c0      	nop			; (mov r8, r8)
    153c:	00001405 	.word	0x00001405

00001540 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    1540:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1542:	2207      	movs	r2, #7
    1544:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    1546:	421a      	tst	r2, r3
    1548:	d1fc      	bne.n	1544 <_i2c_master_wait_for_sync+0x4>
}
    154a:	4770      	bx	lr

0000154c <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    154c:	b570      	push	{r4, r5, r6, lr}
    154e:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1550:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1552:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    1554:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
    1556:	8b83      	ldrh	r3, [r0, #28]
    1558:	1aed      	subs	r5, r5, r3
    155a:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
    155c:	8b83      	ldrh	r3, [r0, #28]
    155e:	3b01      	subs	r3, #1
    1560:	b29b      	uxth	r3, r3
    1562:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
    1564:	0113      	lsls	r3, r2, #4
    1566:	d51d      	bpl.n	15a4 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
    1568:	7ac3      	ldrb	r3, [r0, #11]
    156a:	2b00      	cmp	r3, #0
    156c:	d003      	beq.n	1576 <_i2c_master_read+0x2a>
    156e:	8b83      	ldrh	r3, [r0, #28]
    1570:	b29b      	uxth	r3, r3
    1572:	2b01      	cmp	r3, #1
    1574:	d010      	beq.n	1598 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
    1576:	8ba3      	ldrh	r3, [r4, #28]
    1578:	b29b      	uxth	r3, r3
    157a:	2b00      	cmp	r3, #0
    157c:	d102      	bne.n	1584 <_i2c_master_read+0x38>
		if (module->send_stop) {
    157e:	7aa3      	ldrb	r3, [r4, #10]
    1580:	2b00      	cmp	r3, #0
    1582:	d11c      	bne.n	15be <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    1584:	0020      	movs	r0, r4
    1586:	4b12      	ldr	r3, [pc, #72]	; (15d0 <_i2c_master_read+0x84>)
    1588:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    158a:	6a23      	ldr	r3, [r4, #32]
    158c:	195d      	adds	r5, r3, r5
    158e:	2328      	movs	r3, #40	; 0x28
    1590:	5cf3      	ldrb	r3, [r6, r3]
    1592:	b2db      	uxtb	r3, r3
    1594:	702b      	strb	r3, [r5, #0]
}
    1596:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1598:	6872      	ldr	r2, [r6, #4]
    159a:	2380      	movs	r3, #128	; 0x80
    159c:	02db      	lsls	r3, r3, #11
    159e:	4313      	orrs	r3, r2
    15a0:	6073      	str	r3, [r6, #4]
    15a2:	e7e8      	b.n	1576 <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
    15a4:	7ac3      	ldrb	r3, [r0, #11]
    15a6:	2b00      	cmp	r3, #0
    15a8:	d0e5      	beq.n	1576 <_i2c_master_read+0x2a>
    15aa:	8b83      	ldrh	r3, [r0, #28]
    15ac:	b29b      	uxth	r3, r3
    15ae:	2b00      	cmp	r3, #0
    15b0:	d1e1      	bne.n	1576 <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    15b2:	6872      	ldr	r2, [r6, #4]
    15b4:	2380      	movs	r3, #128	; 0x80
    15b6:	02db      	lsls	r3, r3, #11
    15b8:	4313      	orrs	r3, r2
    15ba:	6073      	str	r3, [r6, #4]
    15bc:	e7db      	b.n	1576 <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
    15be:	0020      	movs	r0, r4
    15c0:	4b03      	ldr	r3, [pc, #12]	; (15d0 <_i2c_master_read+0x84>)
    15c2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    15c4:	6872      	ldr	r2, [r6, #4]
    15c6:	23c0      	movs	r3, #192	; 0xc0
    15c8:	029b      	lsls	r3, r3, #10
    15ca:	4313      	orrs	r3, r2
    15cc:	6073      	str	r3, [r6, #4]
    15ce:	e7d9      	b.n	1584 <_i2c_master_read+0x38>
    15d0:	00001541 	.word	0x00001541

000015d4 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    15d4:	b570      	push	{r4, r5, r6, lr}
    15d6:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    15d8:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    15da:	8b6b      	ldrh	r3, [r5, #26]
    15dc:	075b      	lsls	r3, r3, #29
    15de:	d503      	bpl.n	15e8 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    15e0:	221e      	movs	r2, #30
    15e2:	2325      	movs	r3, #37	; 0x25
    15e4:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
    15e6:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
    15e8:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
    15ea:	8b83      	ldrh	r3, [r0, #28]
    15ec:	1af6      	subs	r6, r6, r3
    15ee:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
    15f0:	8b83      	ldrh	r3, [r0, #28]
    15f2:	3b01      	subs	r3, #1
    15f4:	b29b      	uxth	r3, r3
    15f6:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
    15f8:	4b04      	ldr	r3, [pc, #16]	; (160c <_i2c_master_write+0x38>)
    15fa:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    15fc:	6a23      	ldr	r3, [r4, #32]
    15fe:	199e      	adds	r6, r3, r6
    1600:	7833      	ldrb	r3, [r6, #0]
    1602:	b2db      	uxtb	r3, r3
    1604:	2228      	movs	r2, #40	; 0x28
    1606:	54ab      	strb	r3, [r5, r2]
    1608:	e7ed      	b.n	15e6 <_i2c_master_write+0x12>
    160a:	46c0      	nop			; (mov r8, r8)
    160c:	00001541 	.word	0x00001541

00001610 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    1610:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
    1612:	0080      	lsls	r0, r0, #2
    1614:	4b75      	ldr	r3, [pc, #468]	; (17ec <_i2c_master_interrupt_handler+0x1dc>)
    1616:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1618:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    161a:	682b      	ldr	r3, [r5, #0]
    161c:	011b      	lsls	r3, r3, #4
    161e:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    1620:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
    1622:	7e26      	ldrb	r6, [r4, #24]
    1624:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    1626:	8b63      	ldrh	r3, [r4, #26]
    1628:	b29b      	uxth	r3, r3
    162a:	2b00      	cmp	r3, #0
    162c:	d103      	bne.n	1636 <_i2c_master_interrupt_handler+0x26>
    162e:	8ba3      	ldrh	r3, [r4, #28]
    1630:	b29b      	uxth	r3, r3
    1632:	2b00      	cmp	r3, #0
    1634:	d123      	bne.n	167e <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1636:	8b63      	ldrh	r3, [r4, #26]
    1638:	b29b      	uxth	r3, r3
    163a:	2b00      	cmp	r3, #0
    163c:	d008      	beq.n	1650 <_i2c_master_interrupt_handler+0x40>
    163e:	8ba3      	ldrh	r3, [r4, #28]
    1640:	b29b      	uxth	r3, r3
    1642:	2b00      	cmp	r3, #0
    1644:	d104      	bne.n	1650 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
    1646:	3325      	adds	r3, #37	; 0x25
    1648:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    164a:	2b05      	cmp	r3, #5
    164c:	d100      	bne.n	1650 <_i2c_master_interrupt_handler+0x40>
    164e:	e06d      	b.n	172c <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    1650:	8b63      	ldrh	r3, [r4, #26]
    1652:	b29b      	uxth	r3, r3
    1654:	2b00      	cmp	r3, #0
    1656:	d024      	beq.n	16a2 <_i2c_master_interrupt_handler+0x92>
    1658:	8ba3      	ldrh	r3, [r4, #28]
    165a:	b29b      	uxth	r3, r3
    165c:	2b00      	cmp	r3, #0
    165e:	d020      	beq.n	16a2 <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    1660:	8b6b      	ldrh	r3, [r5, #26]
    1662:	069b      	lsls	r3, r3, #26
    1664:	d500      	bpl.n	1668 <_i2c_master_interrupt_handler+0x58>
    1666:	e081      	b.n	176c <_i2c_master_interrupt_handler+0x15c>
    1668:	2a00      	cmp	r2, #0
    166a:	d004      	beq.n	1676 <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    166c:	8ba3      	ldrh	r3, [r4, #28]
    166e:	b29b      	uxth	r3, r3
    1670:	2b01      	cmp	r3, #1
    1672:	d100      	bne.n	1676 <_i2c_master_interrupt_handler+0x66>
    1674:	e07a      	b.n	176c <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
    1676:	2241      	movs	r2, #65	; 0x41
    1678:	2325      	movs	r3, #37	; 0x25
    167a:	54e2      	strb	r2, [r4, r3]
    167c:	e011      	b.n	16a2 <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    167e:	7e2b      	ldrb	r3, [r5, #24]
    1680:	07db      	lsls	r3, r3, #31
    1682:	d507      	bpl.n	1694 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    1684:	2301      	movs	r3, #1
    1686:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1688:	8b6b      	ldrh	r3, [r5, #26]
    168a:	079b      	lsls	r3, r3, #30
    168c:	d52e      	bpl.n	16ec <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
    168e:	2241      	movs	r2, #65	; 0x41
    1690:	2325      	movs	r3, #37	; 0x25
    1692:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
    1694:	8ba3      	ldrh	r3, [r4, #28]
    1696:	b29b      	uxth	r3, r3
    1698:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
    169a:	2325      	movs	r3, #37	; 0x25
    169c:	5ce3      	ldrb	r3, [r4, r3]
    169e:	2b05      	cmp	r3, #5
    16a0:	d038      	beq.n	1714 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    16a2:	8b63      	ldrh	r3, [r4, #26]
    16a4:	b29b      	uxth	r3, r3
    16a6:	2b00      	cmp	r3, #0
    16a8:	d007      	beq.n	16ba <_i2c_master_interrupt_handler+0xaa>
    16aa:	8ba3      	ldrh	r3, [r4, #28]
    16ac:	b29b      	uxth	r3, r3
    16ae:	2b00      	cmp	r3, #0
    16b0:	d103      	bne.n	16ba <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
    16b2:	3325      	adds	r3, #37	; 0x25
    16b4:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    16b6:	2b05      	cmp	r3, #5
    16b8:	d064      	beq.n	1784 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    16ba:	2325      	movs	r3, #37	; 0x25
    16bc:	5ce3      	ldrb	r3, [r4, r3]
    16be:	2b05      	cmp	r3, #5
    16c0:	d013      	beq.n	16ea <_i2c_master_interrupt_handler+0xda>
    16c2:	2325      	movs	r3, #37	; 0x25
    16c4:	5ce3      	ldrb	r3, [r4, r3]
    16c6:	2b00      	cmp	r3, #0
    16c8:	d00f      	beq.n	16ea <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    16ca:	2303      	movs	r3, #3
    16cc:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    16ce:	2300      	movs	r3, #0
    16d0:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
    16d2:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    16d4:	3325      	adds	r3, #37	; 0x25
    16d6:	5ce3      	ldrb	r3, [r4, r3]
    16d8:	2b41      	cmp	r3, #65	; 0x41
    16da:	d003      	beq.n	16e4 <_i2c_master_interrupt_handler+0xd4>
    16dc:	7aa3      	ldrb	r3, [r4, #10]
    16de:	2b00      	cmp	r3, #0
    16e0:	d000      	beq.n	16e4 <_i2c_master_interrupt_handler+0xd4>
    16e2:	e075      	b.n	17d0 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    16e4:	0773      	lsls	r3, r6, #29
    16e6:	d500      	bpl.n	16ea <_i2c_master_interrupt_handler+0xda>
    16e8:	e07b      	b.n	17e2 <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
    16ea:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    16ec:	8b6b      	ldrh	r3, [r5, #26]
    16ee:	075b      	lsls	r3, r3, #29
    16f0:	d5d0      	bpl.n	1694 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    16f2:	2218      	movs	r2, #24
    16f4:	2325      	movs	r3, #37	; 0x25
    16f6:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
    16f8:	2300      	movs	r3, #0
    16fa:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
    16fc:	7aa3      	ldrb	r3, [r4, #10]
    16fe:	2b00      	cmp	r3, #0
    1700:	d0c8      	beq.n	1694 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
    1702:	0020      	movs	r0, r4
    1704:	4b3a      	ldr	r3, [pc, #232]	; (17f0 <_i2c_master_interrupt_handler+0x1e0>)
    1706:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1708:	686a      	ldr	r2, [r5, #4]
    170a:	23c0      	movs	r3, #192	; 0xc0
    170c:	029b      	lsls	r3, r3, #10
    170e:	4313      	orrs	r3, r2
    1710:	606b      	str	r3, [r5, #4]
    1712:	e7bf      	b.n	1694 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1714:	331f      	adds	r3, #31
    1716:	5ce3      	ldrb	r3, [r4, r3]
    1718:	2b00      	cmp	r3, #0
    171a:	d003      	beq.n	1724 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
    171c:	0020      	movs	r0, r4
    171e:	4b35      	ldr	r3, [pc, #212]	; (17f4 <_i2c_master_interrupt_handler+0x1e4>)
    1720:	4798      	blx	r3
    1722:	e7be      	b.n	16a2 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
    1724:	0020      	movs	r0, r4
    1726:	4b34      	ldr	r3, [pc, #208]	; (17f8 <_i2c_master_interrupt_handler+0x1e8>)
    1728:	4798      	blx	r3
    172a:	e7ba      	b.n	16a2 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    172c:	331f      	adds	r3, #31
    172e:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    1730:	2b00      	cmp	r3, #0
    1732:	d000      	beq.n	1736 <_i2c_master_interrupt_handler+0x126>
    1734:	e78c      	b.n	1650 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
    1736:	3303      	adds	r3, #3
    1738:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    173a:	2300      	movs	r3, #0
    173c:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    173e:	3325      	adds	r3, #37	; 0x25
    1740:	2200      	movs	r2, #0
    1742:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
    1744:	7aa3      	ldrb	r3, [r4, #10]
    1746:	2b00      	cmp	r3, #0
    1748:	d107      	bne.n	175a <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    174a:	2301      	movs	r3, #1
    174c:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    174e:	07f3      	lsls	r3, r6, #31
    1750:	d5a7      	bpl.n	16a2 <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1752:	68e3      	ldr	r3, [r4, #12]
    1754:	0020      	movs	r0, r4
    1756:	4798      	blx	r3
    1758:	e7a3      	b.n	16a2 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
    175a:	0020      	movs	r0, r4
    175c:	4b24      	ldr	r3, [pc, #144]	; (17f0 <_i2c_master_interrupt_handler+0x1e0>)
    175e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1760:	686a      	ldr	r2, [r5, #4]
    1762:	23c0      	movs	r3, #192	; 0xc0
    1764:	029b      	lsls	r3, r3, #10
    1766:	4313      	orrs	r3, r2
    1768:	606b      	str	r3, [r5, #4]
    176a:	e7f0      	b.n	174e <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    176c:	2324      	movs	r3, #36	; 0x24
    176e:	5ce3      	ldrb	r3, [r4, r3]
    1770:	2b00      	cmp	r3, #0
    1772:	d103      	bne.n	177c <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
    1774:	0020      	movs	r0, r4
    1776:	4b20      	ldr	r3, [pc, #128]	; (17f8 <_i2c_master_interrupt_handler+0x1e8>)
    1778:	4798      	blx	r3
    177a:	e792      	b.n	16a2 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
    177c:	0020      	movs	r0, r4
    177e:	4b1d      	ldr	r3, [pc, #116]	; (17f4 <_i2c_master_interrupt_handler+0x1e4>)
    1780:	4798      	blx	r3
    1782:	e78e      	b.n	16a2 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    1784:	331f      	adds	r3, #31
    1786:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    1788:	2b01      	cmp	r3, #1
    178a:	d196      	bne.n	16ba <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    178c:	7e2b      	ldrb	r3, [r5, #24]
    178e:	079b      	lsls	r3, r3, #30
    1790:	d501      	bpl.n	1796 <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1792:	2302      	movs	r3, #2
    1794:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
    1796:	2303      	movs	r3, #3
    1798:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    179a:	2300      	movs	r3, #0
    179c:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    179e:	3325      	adds	r3, #37	; 0x25
    17a0:	2200      	movs	r2, #0
    17a2:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    17a4:	07b3      	lsls	r3, r6, #30
    17a6:	d503      	bpl.n	17b0 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    17a8:	2324      	movs	r3, #36	; 0x24
    17aa:	5ce3      	ldrb	r3, [r4, r3]
    17ac:	2b01      	cmp	r3, #1
    17ae:	d00b      	beq.n	17c8 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    17b0:	07f3      	lsls	r3, r6, #31
    17b2:	d400      	bmi.n	17b6 <_i2c_master_interrupt_handler+0x1a6>
    17b4:	e781      	b.n	16ba <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    17b6:	2324      	movs	r3, #36	; 0x24
    17b8:	5ce3      	ldrb	r3, [r4, r3]
    17ba:	2b00      	cmp	r3, #0
    17bc:	d000      	beq.n	17c0 <_i2c_master_interrupt_handler+0x1b0>
    17be:	e77c      	b.n	16ba <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    17c0:	68e3      	ldr	r3, [r4, #12]
    17c2:	0020      	movs	r0, r4
    17c4:	4798      	blx	r3
    17c6:	e778      	b.n	16ba <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    17c8:	6923      	ldr	r3, [r4, #16]
    17ca:	0020      	movs	r0, r4
    17cc:	4798      	blx	r3
    17ce:	e774      	b.n	16ba <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
    17d0:	0020      	movs	r0, r4
    17d2:	4b07      	ldr	r3, [pc, #28]	; (17f0 <_i2c_master_interrupt_handler+0x1e0>)
    17d4:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    17d6:	686a      	ldr	r2, [r5, #4]
    17d8:	23e0      	movs	r3, #224	; 0xe0
    17da:	02db      	lsls	r3, r3, #11
    17dc:	4313      	orrs	r3, r2
    17de:	606b      	str	r3, [r5, #4]
    17e0:	e780      	b.n	16e4 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    17e2:	6963      	ldr	r3, [r4, #20]
    17e4:	0020      	movs	r0, r4
    17e6:	4798      	blx	r3
}
    17e8:	e77f      	b.n	16ea <_i2c_master_interrupt_handler+0xda>
    17ea:	46c0      	nop			; (mov r8, r8)
    17ec:	20000f48 	.word	0x20000f48
    17f0:	00001541 	.word	0x00001541
    17f4:	0000154d 	.word	0x0000154d
    17f8:	000015d5 	.word	0x000015d5

000017fc <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    17fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    17fe:	46d6      	mov	lr, sl
    1800:	464f      	mov	r7, r9
    1802:	4646      	mov	r6, r8
    1804:	b5c0      	push	{r6, r7, lr}
    1806:	b08a      	sub	sp, #40	; 0x28
    1808:	0006      	movs	r6, r0
    180a:	000f      	movs	r7, r1
    180c:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    180e:	6031      	str	r1, [r6, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1810:	680b      	ldr	r3, [r1, #0]
    1812:	079b      	lsls	r3, r3, #30
    1814:	d40a      	bmi.n	182c <spi_init+0x30>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1816:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    1818:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    181a:	07db      	lsls	r3, r3, #31
    181c:	d400      	bmi.n	1820 <spi_init+0x24>
    181e:	e097      	b.n	1950 <spi_init+0x154>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    1820:	b00a      	add	sp, #40	; 0x28
    1822:	bc1c      	pop	{r2, r3, r4}
    1824:	4690      	mov	r8, r2
    1826:	4699      	mov	r9, r3
    1828:	46a2      	mov	sl, r4
    182a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    182c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    182e:	9305      	str	r3, [sp, #20]
    1830:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1832:	9306      	str	r3, [sp, #24]
    1834:	6b13      	ldr	r3, [r2, #48]	; 0x30
    1836:	9307      	str	r3, [sp, #28]
    1838:	6b53      	ldr	r3, [r2, #52]	; 0x34
    183a:	9308      	str	r3, [sp, #32]
    183c:	2500      	movs	r5, #0
    183e:	e00a      	b.n	1856 <spi_init+0x5a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1840:	0038      	movs	r0, r7
    1842:	4b9a      	ldr	r3, [pc, #616]	; (1aac <spi_init+0x2b0>)
    1844:	4798      	blx	r3
    1846:	e00e      	b.n	1866 <spi_init+0x6a>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    1848:	230f      	movs	r3, #15
    184a:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    184c:	4581      	cmp	r9, r0
    184e:	d130      	bne.n	18b2 <spi_init+0xb6>
    1850:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1852:	2d04      	cmp	r5, #4
    1854:	d031      	beq.n	18ba <spi_init+0xbe>
    1856:	b2e9      	uxtb	r1, r5
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1858:	00ab      	lsls	r3, r5, #2
    185a:	aa02      	add	r2, sp, #8
    185c:	200c      	movs	r0, #12
    185e:	1812      	adds	r2, r2, r0
    1860:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    1862:	2800      	cmp	r0, #0
    1864:	d0ec      	beq.n	1840 <spi_init+0x44>
		if (current_pinmux == PINMUX_UNUSED) {
    1866:	1c43      	adds	r3, r0, #1
    1868:	d0f2      	beq.n	1850 <spi_init+0x54>
		if ((current_pinmux & 0xFFFF) !=
    186a:	0401      	lsls	r1, r0, #16
    186c:	0c0b      	lsrs	r3, r1, #16
    186e:	4699      	mov	r9, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    1870:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    1872:	b2c3      	uxtb	r3, r0
    1874:	469c      	mov	ip, r3
		return NULL;
    1876:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1878:	0602      	lsls	r2, r0, #24
    187a:	d405      	bmi.n	1888 <spi_init+0x8c>
		return &(ports[port_index]->Group[group_index]);
    187c:	4663      	mov	r3, ip
    187e:	095b      	lsrs	r3, r3, #5
    1880:	01db      	lsls	r3, r3, #7
    1882:	4a8b      	ldr	r2, [pc, #556]	; (1ab0 <spi_init+0x2b4>)
    1884:	4690      	mov	r8, r2
    1886:	4443      	add	r3, r8
	uint32_t pin_index = (gpio_pin % 32);
    1888:	221f      	movs	r2, #31
    188a:	4660      	mov	r0, ip
    188c:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    188e:	1898      	adds	r0, r3, r2
    1890:	3040      	adds	r0, #64	; 0x40
    1892:	7800      	ldrb	r0, [r0, #0]
    1894:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    1896:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    1898:	4651      	mov	r1, sl
    189a:	07c9      	lsls	r1, r1, #31
    189c:	d5d6      	bpl.n	184c <spi_init+0x50>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    189e:	0852      	lsrs	r2, r2, #1
    18a0:	189b      	adds	r3, r3, r2
    18a2:	3330      	adds	r3, #48	; 0x30
    18a4:	7818      	ldrb	r0, [r3, #0]
    18a6:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    18a8:	4663      	mov	r3, ip
    18aa:	07db      	lsls	r3, r3, #31
    18ac:	d5cc      	bpl.n	1848 <spi_init+0x4c>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    18ae:	0900      	lsrs	r0, r0, #4
    18b0:	e7cc      	b.n	184c <spi_init+0x50>
			module->hw = NULL;
    18b2:	2300      	movs	r3, #0
    18b4:	6033      	str	r3, [r6, #0]
			return STATUS_ERR_DENIED;
    18b6:	201c      	movs	r0, #28
    18b8:	e7b2      	b.n	1820 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    18ba:	2011      	movs	r0, #17
    18bc:	4b7d      	ldr	r3, [pc, #500]	; (1ab4 <spi_init+0x2b8>)
    18be:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    18c0:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    18c2:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    18c4:	2a01      	cmp	r2, #1
    18c6:	d026      	beq.n	1916 <spi_init+0x11a>
	ctrla |= config->mux_setting;
    18c8:	6863      	ldr	r3, [r4, #4]
    18ca:	68a2      	ldr	r2, [r4, #8]
    18cc:	4313      	orrs	r3, r2
    18ce:	68e2      	ldr	r2, [r4, #12]
    18d0:	4313      	orrs	r3, r2
    18d2:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    18d4:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
    18d6:	7c61      	ldrb	r1, [r4, #17]
    18d8:	2900      	cmp	r1, #0
    18da:	d001      	beq.n	18e0 <spi_init+0xe4>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    18dc:	2180      	movs	r1, #128	; 0x80
    18de:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    18e0:	7ca1      	ldrb	r1, [r4, #18]
    18e2:	2900      	cmp	r1, #0
    18e4:	d002      	beq.n	18ec <spi_init+0xf0>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    18e6:	2180      	movs	r1, #128	; 0x80
    18e8:	0289      	lsls	r1, r1, #10
    18ea:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    18ec:	7ce1      	ldrb	r1, [r4, #19]
    18ee:	2900      	cmp	r1, #0
    18f0:	d002      	beq.n	18f8 <spi_init+0xfc>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    18f2:	2180      	movs	r1, #128	; 0x80
    18f4:	0089      	lsls	r1, r1, #2
    18f6:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    18f8:	7d21      	ldrb	r1, [r4, #20]
    18fa:	2900      	cmp	r1, #0
    18fc:	d002      	beq.n	1904 <spi_init+0x108>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    18fe:	2180      	movs	r1, #128	; 0x80
    1900:	0189      	lsls	r1, r1, #6
    1902:	430a      	orrs	r2, r1
	if (spi_module->CTRLA.reg == ctrla &&
    1904:	6839      	ldr	r1, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    1906:	2002      	movs	r0, #2
    1908:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
    190a:	428b      	cmp	r3, r1
    190c:	d017      	beq.n	193e <spi_init+0x142>
	module->hw = NULL;
    190e:	2300      	movs	r3, #0
    1910:	6033      	str	r3, [r6, #0]
	return STATUS_ERR_DENIED;
    1912:	201c      	movs	r0, #28
    1914:	e784      	b.n	1820 <spi_init+0x24>
		enum status_code error_code = _sercom_get_sync_baud_val(
    1916:	aa04      	add	r2, sp, #16
    1918:	0001      	movs	r1, r0
    191a:	69a0      	ldr	r0, [r4, #24]
    191c:	4b66      	ldr	r3, [pc, #408]	; (1ab8 <spi_init+0x2bc>)
    191e:	4798      	blx	r3
    1920:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    1922:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    1924:	2b00      	cmp	r3, #0
    1926:	d000      	beq.n	192a <spi_init+0x12e>
    1928:	e77a      	b.n	1820 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    192a:	7b3b      	ldrb	r3, [r7, #12]
    192c:	b2db      	uxtb	r3, r3
    192e:	aa04      	add	r2, sp, #16
    1930:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    1932:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    1934:	429a      	cmp	r2, r3
    1936:	d000      	beq.n	193a <spi_init+0x13e>
    1938:	e772      	b.n	1820 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    193a:	350c      	adds	r5, #12
    193c:	e7c4      	b.n	18c8 <spi_init+0xcc>
			spi_module->CTRLB.reg == ctrlb) {
    193e:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    1940:	4293      	cmp	r3, r2
    1942:	d1e4      	bne.n	190e <spi_init+0x112>
		module->mode           = config->mode;
    1944:	7823      	ldrb	r3, [r4, #0]
    1946:	7173      	strb	r3, [r6, #5]
		module->character_size = config->character_size;
    1948:	7c23      	ldrb	r3, [r4, #16]
    194a:	71b3      	strb	r3, [r6, #6]
		return STATUS_OK;
    194c:	2000      	movs	r0, #0
    194e:	e767      	b.n	1820 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1950:	0008      	movs	r0, r1
    1952:	4b5a      	ldr	r3, [pc, #360]	; (1abc <spi_init+0x2c0>)
    1954:	4798      	blx	r3
	if (sercom_index == 5) {
    1956:	2805      	cmp	r0, #5
    1958:	d100      	bne.n	195c <spi_init+0x160>
    195a:	e09f      	b.n	1a9c <spi_init+0x2a0>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    195c:	0003      	movs	r3, r0
    195e:	3312      	adds	r3, #18
			MCLK->APBCMASK.reg |= mask;
    1960:	4957      	ldr	r1, [pc, #348]	; (1ac0 <spi_init+0x2c4>)
    1962:	69cd      	ldr	r5, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1964:	2201      	movs	r2, #1
    1966:	4082      	lsls	r2, r0
    1968:	432a      	orrs	r2, r5
    196a:	61ca      	str	r2, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    196c:	a909      	add	r1, sp, #36	; 0x24
    196e:	2524      	movs	r5, #36	; 0x24
    1970:	5d62      	ldrb	r2, [r4, r5]
    1972:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1974:	b2db      	uxtb	r3, r3
    1976:	9301      	str	r3, [sp, #4]
    1978:	0018      	movs	r0, r3
    197a:	4b52      	ldr	r3, [pc, #328]	; (1ac4 <spi_init+0x2c8>)
    197c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    197e:	9801      	ldr	r0, [sp, #4]
    1980:	4b51      	ldr	r3, [pc, #324]	; (1ac8 <spi_init+0x2cc>)
    1982:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1984:	5d60      	ldrb	r0, [r4, r5]
    1986:	2100      	movs	r1, #0
    1988:	4b50      	ldr	r3, [pc, #320]	; (1acc <spi_init+0x2d0>)
    198a:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    198c:	7823      	ldrb	r3, [r4, #0]
    198e:	2b01      	cmp	r3, #1
    1990:	d019      	beq.n	19c6 <spi_init+0x1ca>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1992:	6833      	ldr	r3, [r6, #0]
    1994:	4698      	mov	r8, r3
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1996:	ab04      	add	r3, sp, #16
    1998:	2280      	movs	r2, #128	; 0x80
    199a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    199c:	2200      	movs	r2, #0
    199e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    19a0:	2101      	movs	r1, #1
    19a2:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    19a4:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    19a6:	7823      	ldrb	r3, [r4, #0]
    19a8:	2b00      	cmp	r3, #0
    19aa:	d101      	bne.n	19b0 <spi_init+0x1b4>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    19ac:	ab04      	add	r3, sp, #16
    19ae:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    19b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    19b2:	9305      	str	r3, [sp, #20]
    19b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    19b6:	9306      	str	r3, [sp, #24]
    19b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    19ba:	9307      	str	r3, [sp, #28]
    19bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    19be:	9308      	str	r3, [sp, #32]
    19c0:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    19c2:	ad05      	add	r5, sp, #20
    19c4:	e011      	b.n	19ea <spi_init+0x1ee>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    19c6:	683b      	ldr	r3, [r7, #0]
    19c8:	220c      	movs	r2, #12
    19ca:	4313      	orrs	r3, r2
    19cc:	603b      	str	r3, [r7, #0]
    19ce:	e7e0      	b.n	1992 <spi_init+0x196>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    19d0:	4640      	mov	r0, r8
    19d2:	4b36      	ldr	r3, [pc, #216]	; (1aac <spi_init+0x2b0>)
    19d4:	4798      	blx	r3
    19d6:	e00d      	b.n	19f4 <spi_init+0x1f8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    19d8:	a904      	add	r1, sp, #16
    19da:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    19dc:	0c00      	lsrs	r0, r0, #16
    19de:	b2c0      	uxtb	r0, r0
    19e0:	4b3b      	ldr	r3, [pc, #236]	; (1ad0 <spi_init+0x2d4>)
    19e2:	4798      	blx	r3
    19e4:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    19e6:	2f04      	cmp	r7, #4
    19e8:	d007      	beq.n	19fa <spi_init+0x1fe>
    19ea:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    19ec:	00bb      	lsls	r3, r7, #2
    19ee:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    19f0:	2800      	cmp	r0, #0
    19f2:	d0ed      	beq.n	19d0 <spi_init+0x1d4>
		if (current_pinmux != PINMUX_UNUSED) {
    19f4:	1c43      	adds	r3, r0, #1
    19f6:	d1ef      	bne.n	19d8 <spi_init+0x1dc>
    19f8:	e7f4      	b.n	19e4 <spi_init+0x1e8>
	module->mode             = config->mode;
    19fa:	7823      	ldrb	r3, [r4, #0]
    19fc:	7173      	strb	r3, [r6, #5]
	module->character_size   = config->character_size;
    19fe:	7c23      	ldrb	r3, [r4, #16]
    1a00:	71b3      	strb	r3, [r6, #6]
	module->receiver_enabled = config->receiver_enable;
    1a02:	7ca3      	ldrb	r3, [r4, #18]
    1a04:	71f3      	strb	r3, [r6, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    1a06:	7d23      	ldrb	r3, [r4, #20]
    1a08:	7233      	strb	r3, [r6, #8]
	uint16_t baud = 0;
    1a0a:	2200      	movs	r2, #0
    1a0c:	ab02      	add	r3, sp, #8
    1a0e:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    1a10:	7823      	ldrb	r3, [r4, #0]
    1a12:	2b01      	cmp	r3, #1
    1a14:	d02a      	beq.n	1a6c <spi_init+0x270>
	ctrla |= config->transfer_mode;
    1a16:	6863      	ldr	r3, [r4, #4]
    1a18:	68a2      	ldr	r2, [r4, #8]
    1a1a:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    1a1c:	68e2      	ldr	r2, [r4, #12]
    1a1e:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    1a20:	7c21      	ldrb	r1, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    1a22:	7c62      	ldrb	r2, [r4, #17]
    1a24:	2a00      	cmp	r2, #0
    1a26:	d103      	bne.n	1a30 <spi_init+0x234>
    1a28:	4a2a      	ldr	r2, [pc, #168]	; (1ad4 <spi_init+0x2d8>)
    1a2a:	7892      	ldrb	r2, [r2, #2]
    1a2c:	0792      	lsls	r2, r2, #30
    1a2e:	d501      	bpl.n	1a34 <spi_init+0x238>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1a30:	2280      	movs	r2, #128	; 0x80
    1a32:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    1a34:	7ca2      	ldrb	r2, [r4, #18]
    1a36:	2a00      	cmp	r2, #0
    1a38:	d002      	beq.n	1a40 <spi_init+0x244>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1a3a:	2280      	movs	r2, #128	; 0x80
    1a3c:	0292      	lsls	r2, r2, #10
    1a3e:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    1a40:	7ce2      	ldrb	r2, [r4, #19]
    1a42:	2a00      	cmp	r2, #0
    1a44:	d002      	beq.n	1a4c <spi_init+0x250>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1a46:	2280      	movs	r2, #128	; 0x80
    1a48:	0092      	lsls	r2, r2, #2
    1a4a:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    1a4c:	7d22      	ldrb	r2, [r4, #20]
    1a4e:	2a00      	cmp	r2, #0
    1a50:	d002      	beq.n	1a58 <spi_init+0x25c>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1a52:	2280      	movs	r2, #128	; 0x80
    1a54:	0192      	lsls	r2, r2, #6
    1a56:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    1a58:	4642      	mov	r2, r8
    1a5a:	6812      	ldr	r2, [r2, #0]
    1a5c:	4313      	orrs	r3, r2
    1a5e:	4642      	mov	r2, r8
    1a60:	6013      	str	r3, [r2, #0]
	spi_module->CTRLB.reg |= ctrlb;
    1a62:	6853      	ldr	r3, [r2, #4]
    1a64:	430b      	orrs	r3, r1
    1a66:	6053      	str	r3, [r2, #4]
	return STATUS_OK;
    1a68:	2000      	movs	r0, #0
    1a6a:	e6d9      	b.n	1820 <spi_init+0x24>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1a6c:	6830      	ldr	r0, [r6, #0]
    1a6e:	4b13      	ldr	r3, [pc, #76]	; (1abc <spi_init+0x2c0>)
    1a70:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1a72:	3012      	adds	r0, #18
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    1a74:	b2c0      	uxtb	r0, r0
    1a76:	4b0f      	ldr	r3, [pc, #60]	; (1ab4 <spi_init+0x2b8>)
    1a78:	4798      	blx	r3
    1a7a:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    1a7c:	ab02      	add	r3, sp, #8
    1a7e:	1d9a      	adds	r2, r3, #6
    1a80:	69a0      	ldr	r0, [r4, #24]
    1a82:	4b0d      	ldr	r3, [pc, #52]	; (1ab8 <spi_init+0x2bc>)
    1a84:	4798      	blx	r3
    1a86:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    1a88:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    1a8a:	2b00      	cmp	r3, #0
    1a8c:	d000      	beq.n	1a90 <spi_init+0x294>
    1a8e:	e6c7      	b.n	1820 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    1a90:	ab02      	add	r3, sp, #8
    1a92:	3306      	adds	r3, #6
    1a94:	781b      	ldrb	r3, [r3, #0]
    1a96:	4642      	mov	r2, r8
    1a98:	7313      	strb	r3, [r2, #12]
    1a9a:	e7bc      	b.n	1a16 <spi_init+0x21a>
			MCLK->APBDMASK.reg |= mask;
    1a9c:	4a08      	ldr	r2, [pc, #32]	; (1ac0 <spi_init+0x2c4>)
    1a9e:	6a13      	ldr	r3, [r2, #32]
    1aa0:	2102      	movs	r1, #2
    1aa2:	430b      	orrs	r3, r1
    1aa4:	6213      	str	r3, [r2, #32]
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
    1aa6:	2318      	movs	r3, #24
    1aa8:	e760      	b.n	196c <spi_init+0x170>
    1aaa:	46c0      	nop			; (mov r8, r8)
    1aac:	000023b1 	.word	0x000023b1
    1ab0:	40002800 	.word	0x40002800
    1ab4:	00002d81 	.word	0x00002d81
    1ab8:	000022a7 	.word	0x000022a7
    1abc:	0000250d 	.word	0x0000250d
    1ac0:	40000400 	.word	0x40000400
    1ac4:	00002d5d 	.word	0x00002d5d
    1ac8:	00002ced 	.word	0x00002ced
    1acc:	00002365 	.word	0x00002365
    1ad0:	00002e59 	.word	0x00002e59
    1ad4:	41002000 	.word	0x41002000

00001ad8 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    1ad8:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    1ada:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    1adc:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    1ade:	2c01      	cmp	r4, #1
    1ae0:	d001      	beq.n	1ae6 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    1ae2:	0018      	movs	r0, r3
    1ae4:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    1ae6:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    1ae8:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    1aea:	2c00      	cmp	r4, #0
    1aec:	d1f9      	bne.n	1ae2 <spi_select_slave+0xa>
		if (select) {
    1aee:	2a00      	cmp	r2, #0
    1af0:	d058      	beq.n	1ba4 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    1af2:	784b      	ldrb	r3, [r1, #1]
    1af4:	2b00      	cmp	r3, #0
    1af6:	d044      	beq.n	1b82 <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1af8:	6803      	ldr	r3, [r0, #0]
    1afa:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    1afc:	07db      	lsls	r3, r3, #31
    1afe:	d410      	bmi.n	1b22 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    1b00:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1b02:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1b04:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1b06:	2900      	cmp	r1, #0
    1b08:	d104      	bne.n	1b14 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    1b0a:	0953      	lsrs	r3, r2, #5
    1b0c:	01db      	lsls	r3, r3, #7
    1b0e:	492e      	ldr	r1, [pc, #184]	; (1bc8 <spi_select_slave+0xf0>)
    1b10:	468c      	mov	ip, r1
    1b12:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1b14:	211f      	movs	r1, #31
    1b16:	4011      	ands	r1, r2
    1b18:	2201      	movs	r2, #1
    1b1a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1b1c:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    1b1e:	2305      	movs	r3, #5
    1b20:	e7df      	b.n	1ae2 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    1b22:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1b24:	09d4      	lsrs	r4, r2, #7
		return NULL;
    1b26:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1b28:	2c00      	cmp	r4, #0
    1b2a:	d104      	bne.n	1b36 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    1b2c:	0953      	lsrs	r3, r2, #5
    1b2e:	01db      	lsls	r3, r3, #7
    1b30:	4c25      	ldr	r4, [pc, #148]	; (1bc8 <spi_select_slave+0xf0>)
    1b32:	46a4      	mov	ip, r4
    1b34:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1b36:	241f      	movs	r4, #31
    1b38:	4014      	ands	r4, r2
    1b3a:	2201      	movs	r2, #1
    1b3c:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    1b3e:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1b40:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1b42:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    1b44:	07d2      	lsls	r2, r2, #31
    1b46:	d501      	bpl.n	1b4c <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1b48:	788a      	ldrb	r2, [r1, #2]
    1b4a:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    1b4c:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    1b4e:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    1b50:	2a00      	cmp	r2, #0
    1b52:	d1c6      	bne.n	1ae2 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1b54:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    1b56:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1b58:	7e13      	ldrb	r3, [r2, #24]
    1b5a:	420b      	tst	r3, r1
    1b5c:	d0fc      	beq.n	1b58 <spi_select_slave+0x80>
    1b5e:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    1b60:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    1b62:	0749      	lsls	r1, r1, #29
    1b64:	d5bd      	bpl.n	1ae2 <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1b66:	8b53      	ldrh	r3, [r2, #26]
    1b68:	075b      	lsls	r3, r3, #29
    1b6a:	d501      	bpl.n	1b70 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1b6c:	2304      	movs	r3, #4
    1b6e:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1b70:	7983      	ldrb	r3, [r0, #6]
    1b72:	2b01      	cmp	r3, #1
    1b74:	d002      	beq.n	1b7c <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1b76:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1b78:	2300      	movs	r3, #0
    1b7a:	e7b2      	b.n	1ae2 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1b7c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1b7e:	2300      	movs	r3, #0
    1b80:	e7af      	b.n	1ae2 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    1b82:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1b84:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1b86:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1b88:	2900      	cmp	r1, #0
    1b8a:	d104      	bne.n	1b96 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    1b8c:	0953      	lsrs	r3, r2, #5
    1b8e:	01db      	lsls	r3, r3, #7
    1b90:	490d      	ldr	r1, [pc, #52]	; (1bc8 <spi_select_slave+0xf0>)
    1b92:	468c      	mov	ip, r1
    1b94:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1b96:	211f      	movs	r1, #31
    1b98:	4011      	ands	r1, r2
    1b9a:	2201      	movs	r2, #1
    1b9c:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    1b9e:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    1ba0:	2300      	movs	r3, #0
    1ba2:	e79e      	b.n	1ae2 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    1ba4:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1ba6:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1ba8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1baa:	2900      	cmp	r1, #0
    1bac:	d104      	bne.n	1bb8 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    1bae:	0953      	lsrs	r3, r2, #5
    1bb0:	01db      	lsls	r3, r3, #7
    1bb2:	4905      	ldr	r1, [pc, #20]	; (1bc8 <spi_select_slave+0xf0>)
    1bb4:	468c      	mov	ip, r1
    1bb6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1bb8:	211f      	movs	r1, #31
    1bba:	4011      	ands	r1, r2
    1bbc:	2201      	movs	r2, #1
    1bbe:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1bc0:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    1bc2:	2300      	movs	r3, #0
    1bc4:	e78d      	b.n	1ae2 <spi_select_slave+0xa>
    1bc6:	46c0      	nop			; (mov r8, r8)
    1bc8:	40002800 	.word	0x40002800

00001bcc <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bce:	46de      	mov	lr, fp
    1bd0:	4657      	mov	r7, sl
    1bd2:	464e      	mov	r6, r9
    1bd4:	4645      	mov	r5, r8
    1bd6:	b5e0      	push	{r5, r6, r7, lr}
    1bd8:	b091      	sub	sp, #68	; 0x44
    1bda:	0005      	movs	r5, r0
    1bdc:	000c      	movs	r4, r1
    1bde:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1be0:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1be2:	0008      	movs	r0, r1
    1be4:	4bc4      	ldr	r3, [pc, #784]	; (1ef8 <usart_init+0x32c>)
    1be6:	4798      	blx	r3
    1be8:	0002      	movs	r2, r0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	if (sercom_index == 5) {
    1bea:	2805      	cmp	r0, #5
    1bec:	d00d      	beq.n	1c0a <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1bee:	0007      	movs	r7, r0
    1bf0:	3712      	adds	r7, #18
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    1bf2:	0003      	movs	r3, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1bf4:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1bf6:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1bf8:	07c9      	lsls	r1, r1, #31
    1bfa:	d509      	bpl.n	1c10 <usart_init+0x44>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1bfc:	b011      	add	sp, #68	; 0x44
    1bfe:	bc3c      	pop	{r2, r3, r4, r5}
    1c00:	4690      	mov	r8, r2
    1c02:	4699      	mov	r9, r3
    1c04:	46a2      	mov	sl, r4
    1c06:	46ab      	mov	fp, r5
    1c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    1c0a:	2718      	movs	r7, #24
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    1c0c:	2301      	movs	r3, #1
    1c0e:	e7f1      	b.n	1bf4 <usart_init+0x28>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1c10:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
    1c12:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1c14:	0789      	lsls	r1, r1, #30
    1c16:	d4f1      	bmi.n	1bfc <usart_init+0x30>
	if (sercom_index == 5) {
    1c18:	2a05      	cmp	r2, #5
    1c1a:	d049      	beq.n	1cb0 <usart_init+0xe4>
			MCLK->APBCMASK.reg |= mask;
    1c1c:	49b7      	ldr	r1, [pc, #732]	; (1efc <usart_init+0x330>)
    1c1e:	69c8      	ldr	r0, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    1c20:	2201      	movs	r2, #1
    1c22:	409a      	lsls	r2, r3
    1c24:	0013      	movs	r3, r2
    1c26:	4303      	orrs	r3, r0
    1c28:	61cb      	str	r3, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    1c2a:	a90f      	add	r1, sp, #60	; 0x3c
    1c2c:	232d      	movs	r3, #45	; 0x2d
    1c2e:	4698      	mov	r8, r3
    1c30:	5cf3      	ldrb	r3, [r6, r3]
    1c32:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1c34:	b2ff      	uxtb	r7, r7
    1c36:	0038      	movs	r0, r7
    1c38:	4bb1      	ldr	r3, [pc, #708]	; (1f00 <usart_init+0x334>)
    1c3a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1c3c:	0038      	movs	r0, r7
    1c3e:	4bb1      	ldr	r3, [pc, #708]	; (1f04 <usart_init+0x338>)
    1c40:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1c42:	4643      	mov	r3, r8
    1c44:	5cf0      	ldrb	r0, [r6, r3]
    1c46:	2100      	movs	r1, #0
    1c48:	4baf      	ldr	r3, [pc, #700]	; (1f08 <usart_init+0x33c>)
    1c4a:	4798      	blx	r3
	module->character_size = config->character_size;
    1c4c:	7af3      	ldrb	r3, [r6, #11]
    1c4e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1c50:	2324      	movs	r3, #36	; 0x24
    1c52:	5cf3      	ldrb	r3, [r6, r3]
    1c54:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1c56:	2325      	movs	r3, #37	; 0x25
    1c58:	5cf3      	ldrb	r3, [r6, r3]
    1c5a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1c5c:	7ef3      	ldrb	r3, [r6, #27]
    1c5e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1c60:	7f33      	ldrb	r3, [r6, #28]
    1c62:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1c64:	682b      	ldr	r3, [r5, #0]
    1c66:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1c68:	0018      	movs	r0, r3
    1c6a:	4ba3      	ldr	r3, [pc, #652]	; (1ef8 <usart_init+0x32c>)
    1c6c:	4798      	blx	r3
	if (sercom_index == 5) {
    1c6e:	2805      	cmp	r0, #5
    1c70:	d026      	beq.n	1cc0 <usart_init+0xf4>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1c72:	3012      	adds	r0, #18
	uint16_t baud  = 0;
    1c74:	2200      	movs	r2, #0
    1c76:	230e      	movs	r3, #14
    1c78:	a906      	add	r1, sp, #24
    1c7a:	468c      	mov	ip, r1
    1c7c:	4463      	add	r3, ip
    1c7e:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1c80:	8a32      	ldrh	r2, [r6, #16]
    1c82:	9202      	str	r2, [sp, #8]
    1c84:	2380      	movs	r3, #128	; 0x80
    1c86:	01db      	lsls	r3, r3, #7
    1c88:	429a      	cmp	r2, r3
    1c8a:	d100      	bne.n	1c8e <usart_init+0xc2>
    1c8c:	e0a7      	b.n	1dde <usart_init+0x212>
    1c8e:	d919      	bls.n	1cc4 <usart_init+0xf8>
    1c90:	23c0      	movs	r3, #192	; 0xc0
    1c92:	01db      	lsls	r3, r3, #7
    1c94:	9a02      	ldr	r2, [sp, #8]
    1c96:	429a      	cmp	r2, r3
    1c98:	d100      	bne.n	1c9c <usart_init+0xd0>
    1c9a:	e09b      	b.n	1dd4 <usart_init+0x208>
    1c9c:	2380      	movs	r3, #128	; 0x80
    1c9e:	021b      	lsls	r3, r3, #8
    1ca0:	429a      	cmp	r2, r3
    1ca2:	d000      	beq.n	1ca6 <usart_init+0xda>
    1ca4:	e123      	b.n	1eee <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1ca6:	2303      	movs	r3, #3
    1ca8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1caa:	2300      	movs	r3, #0
    1cac:	9307      	str	r3, [sp, #28]
    1cae:	e012      	b.n	1cd6 <usart_init+0x10a>
			MCLK->APBDMASK.reg |= mask;
    1cb0:	4992      	ldr	r1, [pc, #584]	; (1efc <usart_init+0x330>)
    1cb2:	6a08      	ldr	r0, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    1cb4:	3a04      	subs	r2, #4
    1cb6:	409a      	lsls	r2, r3
    1cb8:	0013      	movs	r3, r2
    1cba:	4303      	orrs	r3, r0
    1cbc:	620b      	str	r3, [r1, #32]
    1cbe:	e7b4      	b.n	1c2a <usart_init+0x5e>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    1cc0:	2018      	movs	r0, #24
    1cc2:	e7d7      	b.n	1c74 <usart_init+0xa8>
	switch (config->sample_rate) {
    1cc4:	2380      	movs	r3, #128	; 0x80
    1cc6:	019b      	lsls	r3, r3, #6
    1cc8:	429a      	cmp	r2, r3
    1cca:	d000      	beq.n	1cce <usart_init+0x102>
    1ccc:	e10f      	b.n	1eee <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1cce:	2310      	movs	r3, #16
    1cd0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1cd2:	3b0f      	subs	r3, #15
    1cd4:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    1cd6:	6833      	ldr	r3, [r6, #0]
    1cd8:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1cda:	68f3      	ldr	r3, [r6, #12]
    1cdc:	469b      	mov	fp, r3
		config->sample_adjustment |
    1cde:	6973      	ldr	r3, [r6, #20]
    1ce0:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1ce2:	7e33      	ldrb	r3, [r6, #24]
    1ce4:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1ce6:	2326      	movs	r3, #38	; 0x26
    1ce8:	5cf3      	ldrb	r3, [r6, r3]
    1cea:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1cec:	6873      	ldr	r3, [r6, #4]
    1cee:	4699      	mov	r9, r3
	switch (transfer_mode)
    1cf0:	2b00      	cmp	r3, #0
    1cf2:	d100      	bne.n	1cf6 <usart_init+0x12a>
    1cf4:	e09b      	b.n	1e2e <usart_init+0x262>
    1cf6:	2380      	movs	r3, #128	; 0x80
    1cf8:	055b      	lsls	r3, r3, #21
    1cfa:	4599      	cmp	r9, r3
    1cfc:	d104      	bne.n	1d08 <usart_init+0x13c>
			if (!config->use_external_clock) {
    1cfe:	2327      	movs	r3, #39	; 0x27
    1d00:	5cf3      	ldrb	r3, [r6, r3]
    1d02:	2b00      	cmp	r3, #0
    1d04:	d100      	bne.n	1d08 <usart_init+0x13c>
    1d06:	e080      	b.n	1e0a <usart_init+0x23e>
	if(config->encoding_format_enable) {
    1d08:	7e73      	ldrb	r3, [r6, #25]
    1d0a:	2b00      	cmp	r3, #0
    1d0c:	d002      	beq.n	1d14 <usart_init+0x148>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1d0e:	7eb3      	ldrb	r3, [r6, #26]
    1d10:	4642      	mov	r2, r8
    1d12:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    1d14:	230e      	movs	r3, #14
    1d16:	aa06      	add	r2, sp, #24
    1d18:	4694      	mov	ip, r2
    1d1a:	4463      	add	r3, ip
    1d1c:	881b      	ldrh	r3, [r3, #0]
    1d1e:	4642      	mov	r2, r8
    1d20:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    1d22:	9b05      	ldr	r3, [sp, #20]
    1d24:	465a      	mov	r2, fp
    1d26:	4313      	orrs	r3, r2
    1d28:	9a03      	ldr	r2, [sp, #12]
    1d2a:	4313      	orrs	r3, r2
    1d2c:	464a      	mov	r2, r9
    1d2e:	4313      	orrs	r3, r2
    1d30:	9f02      	ldr	r7, [sp, #8]
    1d32:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1d34:	9b04      	ldr	r3, [sp, #16]
    1d36:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    1d38:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1d3a:	4653      	mov	r3, sl
    1d3c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    1d3e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    1d40:	2327      	movs	r3, #39	; 0x27
    1d42:	5cf3      	ldrb	r3, [r6, r3]
    1d44:	2b00      	cmp	r3, #0
    1d46:	d101      	bne.n	1d4c <usart_init+0x180>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1d48:	3304      	adds	r3, #4
    1d4a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1d4c:	7e73      	ldrb	r3, [r6, #25]
    1d4e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1d50:	7f32      	ldrb	r2, [r6, #28]
    1d52:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1d54:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1d56:	7f72      	ldrb	r2, [r6, #29]
    1d58:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1d5a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1d5c:	2224      	movs	r2, #36	; 0x24
    1d5e:	5cb2      	ldrb	r2, [r6, r2]
    1d60:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1d62:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1d64:	2225      	movs	r2, #37	; 0x25
    1d66:	5cb2      	ldrb	r2, [r6, r2]
    1d68:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1d6a:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    1d6c:	7ab1      	ldrb	r1, [r6, #10]
    1d6e:	7af2      	ldrb	r2, [r6, #11]
    1d70:	4311      	orrs	r1, r2
    1d72:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    1d74:	8933      	ldrh	r3, [r6, #8]
    1d76:	2bff      	cmp	r3, #255	; 0xff
    1d78:	d07d      	beq.n	1e76 <usart_init+0x2aa>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1d7a:	2280      	movs	r2, #128	; 0x80
    1d7c:	0452      	lsls	r2, r2, #17
    1d7e:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1d80:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1d82:	232c      	movs	r3, #44	; 0x2c
    1d84:	5cf3      	ldrb	r3, [r6, r3]
    1d86:	2b00      	cmp	r3, #0
    1d88:	d103      	bne.n	1d92 <usart_init+0x1c6>
    1d8a:	4b60      	ldr	r3, [pc, #384]	; (1f0c <usart_init+0x340>)
    1d8c:	789b      	ldrb	r3, [r3, #2]
    1d8e:	079b      	lsls	r3, r3, #30
    1d90:	d501      	bpl.n	1d96 <usart_init+0x1ca>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1d92:	2380      	movs	r3, #128	; 0x80
    1d94:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1d96:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1d98:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1d9a:	2b00      	cmp	r3, #0
    1d9c:	d1fc      	bne.n	1d98 <usart_init+0x1cc>
	usart_hw->CTRLB.reg = ctrlb;
    1d9e:	4643      	mov	r3, r8
    1da0:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1da2:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1da4:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1da6:	2b00      	cmp	r3, #0
    1da8:	d1fc      	bne.n	1da4 <usart_init+0x1d8>
	usart_hw->CTRLA.reg = ctrla;
    1daa:	4643      	mov	r3, r8
    1dac:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1dae:	ab0e      	add	r3, sp, #56	; 0x38
    1db0:	2280      	movs	r2, #128	; 0x80
    1db2:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1db4:	2200      	movs	r2, #0
    1db6:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    1db8:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1dba:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1dbc:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1dbe:	930a      	str	r3, [sp, #40]	; 0x28
    1dc0:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1dc2:	930b      	str	r3, [sp, #44]	; 0x2c
    1dc4:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1dc6:	930c      	str	r3, [sp, #48]	; 0x30
    1dc8:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1dca:	9302      	str	r3, [sp, #8]
    1dcc:	930d      	str	r3, [sp, #52]	; 0x34
    1dce:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1dd0:	ae0a      	add	r6, sp, #40	; 0x28
    1dd2:	e05e      	b.n	1e92 <usart_init+0x2c6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1dd4:	2308      	movs	r3, #8
    1dd6:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1dd8:	3b07      	subs	r3, #7
    1dda:	9307      	str	r3, [sp, #28]
    1ddc:	e77b      	b.n	1cd6 <usart_init+0x10a>
	ctrla = (uint32_t)config->data_order |
    1dde:	6833      	ldr	r3, [r6, #0]
    1de0:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1de2:	68f3      	ldr	r3, [r6, #12]
    1de4:	469b      	mov	fp, r3
		config->sample_adjustment |
    1de6:	6973      	ldr	r3, [r6, #20]
    1de8:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1dea:	7e33      	ldrb	r3, [r6, #24]
    1dec:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1dee:	2326      	movs	r3, #38	; 0x26
    1df0:	5cf3      	ldrb	r3, [r6, r3]
    1df2:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1df4:	6873      	ldr	r3, [r6, #4]
    1df6:	4699      	mov	r9, r3
	switch (transfer_mode)
    1df8:	2b00      	cmp	r3, #0
    1dfa:	d014      	beq.n	1e26 <usart_init+0x25a>
    1dfc:	2380      	movs	r3, #128	; 0x80
    1dfe:	055b      	lsls	r3, r3, #21
    1e00:	4599      	cmp	r9, r3
    1e02:	d100      	bne.n	1e06 <usart_init+0x23a>
    1e04:	e77b      	b.n	1cfe <usart_init+0x132>
	enum status_code status_code = STATUS_OK;
    1e06:	2000      	movs	r0, #0
    1e08:	e020      	b.n	1e4c <usart_init+0x280>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1e0a:	6a33      	ldr	r3, [r6, #32]
    1e0c:	001f      	movs	r7, r3
    1e0e:	b2c0      	uxtb	r0, r0
    1e10:	4b3f      	ldr	r3, [pc, #252]	; (1f10 <usart_init+0x344>)
    1e12:	4798      	blx	r3
    1e14:	0001      	movs	r1, r0
    1e16:	220e      	movs	r2, #14
    1e18:	ab06      	add	r3, sp, #24
    1e1a:	469c      	mov	ip, r3
    1e1c:	4462      	add	r2, ip
    1e1e:	0038      	movs	r0, r7
    1e20:	4b3c      	ldr	r3, [pc, #240]	; (1f14 <usart_init+0x348>)
    1e22:	4798      	blx	r3
    1e24:	e012      	b.n	1e4c <usart_init+0x280>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1e26:	2308      	movs	r3, #8
    1e28:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1e2a:	2300      	movs	r3, #0
    1e2c:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    1e2e:	2327      	movs	r3, #39	; 0x27
    1e30:	5cf3      	ldrb	r3, [r6, r3]
    1e32:	2b00      	cmp	r3, #0
    1e34:	d00e      	beq.n	1e54 <usart_init+0x288>
				status_code =
    1e36:	9b06      	ldr	r3, [sp, #24]
    1e38:	9300      	str	r3, [sp, #0]
    1e3a:	9b07      	ldr	r3, [sp, #28]
    1e3c:	220e      	movs	r2, #14
    1e3e:	a906      	add	r1, sp, #24
    1e40:	468c      	mov	ip, r1
    1e42:	4462      	add	r2, ip
    1e44:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    1e46:	6a30      	ldr	r0, [r6, #32]
    1e48:	4f33      	ldr	r7, [pc, #204]	; (1f18 <usart_init+0x34c>)
    1e4a:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    1e4c:	2800      	cmp	r0, #0
    1e4e:	d000      	beq.n	1e52 <usart_init+0x286>
    1e50:	e6d4      	b.n	1bfc <usart_init+0x30>
    1e52:	e759      	b.n	1d08 <usart_init+0x13c>
						_sercom_get_async_baud_val(config->baudrate,
    1e54:	6a33      	ldr	r3, [r6, #32]
    1e56:	001f      	movs	r7, r3
    1e58:	b2c0      	uxtb	r0, r0
    1e5a:	4b2d      	ldr	r3, [pc, #180]	; (1f10 <usart_init+0x344>)
    1e5c:	4798      	blx	r3
    1e5e:	0001      	movs	r1, r0
				status_code =
    1e60:	9b06      	ldr	r3, [sp, #24]
    1e62:	9300      	str	r3, [sp, #0]
    1e64:	9b07      	ldr	r3, [sp, #28]
    1e66:	220e      	movs	r2, #14
    1e68:	a806      	add	r0, sp, #24
    1e6a:	4684      	mov	ip, r0
    1e6c:	4462      	add	r2, ip
    1e6e:	0038      	movs	r0, r7
    1e70:	4f29      	ldr	r7, [pc, #164]	; (1f18 <usart_init+0x34c>)
    1e72:	47b8      	blx	r7
    1e74:	e7ea      	b.n	1e4c <usart_init+0x280>
		if(config->lin_slave_enable) {
    1e76:	7ef3      	ldrb	r3, [r6, #27]
    1e78:	2b00      	cmp	r3, #0
    1e7a:	d082      	beq.n	1d82 <usart_init+0x1b6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1e7c:	2380      	movs	r3, #128	; 0x80
    1e7e:	04db      	lsls	r3, r3, #19
    1e80:	431f      	orrs	r7, r3
    1e82:	e77e      	b.n	1d82 <usart_init+0x1b6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1e84:	0020      	movs	r0, r4
    1e86:	4b25      	ldr	r3, [pc, #148]	; (1f1c <usart_init+0x350>)
    1e88:	4798      	blx	r3
    1e8a:	e007      	b.n	1e9c <usart_init+0x2d0>
    1e8c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1e8e:	2f04      	cmp	r7, #4
    1e90:	d00d      	beq.n	1eae <usart_init+0x2e2>
    1e92:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1e94:	00bb      	lsls	r3, r7, #2
    1e96:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1e98:	2800      	cmp	r0, #0
    1e9a:	d0f3      	beq.n	1e84 <usart_init+0x2b8>
		if (current_pinmux != PINMUX_UNUSED) {
    1e9c:	1c43      	adds	r3, r0, #1
    1e9e:	d0f5      	beq.n	1e8c <usart_init+0x2c0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1ea0:	a90e      	add	r1, sp, #56	; 0x38
    1ea2:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1ea4:	0c00      	lsrs	r0, r0, #16
    1ea6:	b2c0      	uxtb	r0, r0
    1ea8:	4b1d      	ldr	r3, [pc, #116]	; (1f20 <usart_init+0x354>)
    1eaa:	4798      	blx	r3
    1eac:	e7ee      	b.n	1e8c <usart_init+0x2c0>
		module->callback[i]            = NULL;
    1eae:	2300      	movs	r3, #0
    1eb0:	60eb      	str	r3, [r5, #12]
    1eb2:	612b      	str	r3, [r5, #16]
    1eb4:	616b      	str	r3, [r5, #20]
    1eb6:	61ab      	str	r3, [r5, #24]
    1eb8:	61eb      	str	r3, [r5, #28]
    1eba:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    1ebc:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1ebe:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1ec0:	2200      	movs	r2, #0
    1ec2:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1ec4:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1ec6:	3330      	adds	r3, #48	; 0x30
    1ec8:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1eca:	3301      	adds	r3, #1
    1ecc:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    1ece:	3301      	adds	r3, #1
    1ed0:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    1ed2:	3301      	adds	r3, #1
    1ed4:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1ed6:	6828      	ldr	r0, [r5, #0]
    1ed8:	4b07      	ldr	r3, [pc, #28]	; (1ef8 <usart_init+0x32c>)
    1eda:	4798      	blx	r3
    1edc:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1ede:	4911      	ldr	r1, [pc, #68]	; (1f24 <usart_init+0x358>)
    1ee0:	4b11      	ldr	r3, [pc, #68]	; (1f28 <usart_init+0x35c>)
    1ee2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1ee4:	00a4      	lsls	r4, r4, #2
    1ee6:	4b11      	ldr	r3, [pc, #68]	; (1f2c <usart_init+0x360>)
    1ee8:	50e5      	str	r5, [r4, r3]
	return status_code;
    1eea:	2000      	movs	r0, #0
    1eec:	e686      	b.n	1bfc <usart_init+0x30>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1eee:	2310      	movs	r3, #16
    1ef0:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1ef2:	2300      	movs	r3, #0
    1ef4:	9307      	str	r3, [sp, #28]
    1ef6:	e6ee      	b.n	1cd6 <usart_init+0x10a>
    1ef8:	0000250d 	.word	0x0000250d
    1efc:	40000400 	.word	0x40000400
    1f00:	00002d5d 	.word	0x00002d5d
    1f04:	00002ced 	.word	0x00002ced
    1f08:	00002365 	.word	0x00002365
    1f0c:	41002000 	.word	0x41002000
    1f10:	00002d81 	.word	0x00002d81
    1f14:	000022a7 	.word	0x000022a7
    1f18:	000022d1 	.word	0x000022d1
    1f1c:	000023b1 	.word	0x000023b1
    1f20:	00002e59 	.word	0x00002e59
    1f24:	00002059 	.word	0x00002059
    1f28:	00002549 	.word	0x00002549
    1f2c:	20000f48 	.word	0x20000f48

00001f30 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1f30:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    1f32:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    1f34:	2a00      	cmp	r2, #0
    1f36:	d101      	bne.n	1f3c <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1f38:	0018      	movs	r0, r3
    1f3a:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    1f3c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    1f3e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1f40:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    1f42:	2a00      	cmp	r2, #0
    1f44:	d1f8      	bne.n	1f38 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1f46:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    1f48:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1f4a:	2102      	movs	r1, #2
    1f4c:	7e13      	ldrb	r3, [r2, #24]
    1f4e:	420b      	tst	r3, r1
    1f50:	d0fc      	beq.n	1f4c <usart_write_wait+0x1c>
	return STATUS_OK;
    1f52:	2300      	movs	r3, #0
    1f54:	e7f0      	b.n	1f38 <usart_write_wait+0x8>

00001f56 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1f56:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1f58:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    1f5a:	2a00      	cmp	r2, #0
    1f5c:	d101      	bne.n	1f62 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    1f5e:	0018      	movs	r0, r3
    1f60:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    1f62:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1f64:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1f66:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    1f68:	2a00      	cmp	r2, #0
    1f6a:	d1f8      	bne.n	1f5e <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1f6c:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1f6e:	7e10      	ldrb	r0, [r2, #24]
    1f70:	0740      	lsls	r0, r0, #29
    1f72:	d5f4      	bpl.n	1f5e <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1f74:	8b53      	ldrh	r3, [r2, #26]
    1f76:	b2db      	uxtb	r3, r3
	if (error_code) {
    1f78:	0698      	lsls	r0, r3, #26
    1f7a:	d01d      	beq.n	1fb8 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1f7c:	0798      	lsls	r0, r3, #30
    1f7e:	d503      	bpl.n	1f88 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1f80:	2302      	movs	r3, #2
    1f82:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    1f84:	3318      	adds	r3, #24
    1f86:	e7ea      	b.n	1f5e <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1f88:	0758      	lsls	r0, r3, #29
    1f8a:	d503      	bpl.n	1f94 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1f8c:	2304      	movs	r3, #4
    1f8e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1f90:	331a      	adds	r3, #26
    1f92:	e7e4      	b.n	1f5e <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1f94:	07d8      	lsls	r0, r3, #31
    1f96:	d503      	bpl.n	1fa0 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1f98:	2301      	movs	r3, #1
    1f9a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    1f9c:	3312      	adds	r3, #18
    1f9e:	e7de      	b.n	1f5e <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1fa0:	06d8      	lsls	r0, r3, #27
    1fa2:	d503      	bpl.n	1fac <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1fa4:	2310      	movs	r3, #16
    1fa6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    1fa8:	3332      	adds	r3, #50	; 0x32
    1faa:	e7d8      	b.n	1f5e <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1fac:	069b      	lsls	r3, r3, #26
    1fae:	d503      	bpl.n	1fb8 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1fb0:	2320      	movs	r3, #32
    1fb2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    1fb4:	3321      	adds	r3, #33	; 0x21
    1fb6:	e7d2      	b.n	1f5e <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    1fb8:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    1fba:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    1fbc:	2300      	movs	r3, #0
    1fbe:	e7ce      	b.n	1f5e <usart_read_wait+0x8>

00001fc0 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fc2:	46d6      	mov	lr, sl
    1fc4:	b500      	push	{lr}
    1fc6:	b084      	sub	sp, #16
    1fc8:	0004      	movs	r4, r0
    1fca:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1fcc:	2017      	movs	r0, #23
	if (length == 0) {
    1fce:	2a00      	cmp	r2, #0
    1fd0:	d103      	bne.n	1fda <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    1fd2:	b004      	add	sp, #16
    1fd4:	bc04      	pop	{r2}
    1fd6:	4692      	mov	sl, r2
    1fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    1fda:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    1fdc:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    1fde:	2b00      	cmp	r3, #0
    1fe0:	d0f7      	beq.n	1fd2 <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1fe2:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    1fe4:	3a01      	subs	r2, #1
    1fe6:	b293      	uxth	r3, r2
    1fe8:	469a      	mov	sl, r3
    1fea:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    1fec:	2704      	movs	r7, #4
    1fee:	e019      	b.n	2024 <STACK_SIZE+0x24>
		uint16_t received_data = 0;
    1ff0:	2300      	movs	r3, #0
    1ff2:	aa02      	add	r2, sp, #8
    1ff4:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    1ff6:	1d91      	adds	r1, r2, #6
    1ff8:	0020      	movs	r0, r4
    1ffa:	4b15      	ldr	r3, [pc, #84]	; (2050 <STACK_SIZE+0x50>)
    1ffc:	4798      	blx	r3
		if (retval != STATUS_OK) {
    1ffe:	2800      	cmp	r0, #0
    2000:	d1e7      	bne.n	1fd2 <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    2002:	1c69      	adds	r1, r5, #1
    2004:	b289      	uxth	r1, r1
    2006:	ab02      	add	r3, sp, #8
    2008:	88db      	ldrh	r3, [r3, #6]
    200a:	9a01      	ldr	r2, [sp, #4]
    200c:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    200e:	7962      	ldrb	r2, [r4, #5]
    2010:	2a01      	cmp	r2, #1
    2012:	d014      	beq.n	203e <STACK_SIZE+0x3e>
		rx_data[rx_pos++] = received_data;
    2014:	000d      	movs	r5, r1
	while (length--) {
    2016:	4653      	mov	r3, sl
    2018:	3b01      	subs	r3, #1
    201a:	b29b      	uxth	r3, r3
    201c:	469a      	mov	sl, r3
    201e:	4b0d      	ldr	r3, [pc, #52]	; (2054 <STACK_SIZE+0x54>)
    2020:	459a      	cmp	sl, r3
    2022:	d0d6      	beq.n	1fd2 <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    2024:	7e33      	ldrb	r3, [r6, #24]
    2026:	423b      	tst	r3, r7
    2028:	d1e2      	bne.n	1ff0 <usart_read_buffer_wait+0x30>
    202a:	4b0a      	ldr	r3, [pc, #40]	; (2054 <STACK_SIZE+0x54>)
    202c:	7e32      	ldrb	r2, [r6, #24]
    202e:	423a      	tst	r2, r7
    2030:	d1de      	bne.n	1ff0 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    2032:	2b01      	cmp	r3, #1
    2034:	d009      	beq.n	204a <STACK_SIZE+0x4a>
    2036:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    2038:	2b00      	cmp	r3, #0
    203a:	d1f7      	bne.n	202c <STACK_SIZE+0x2c>
    203c:	e7d8      	b.n	1ff0 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    203e:	3502      	adds	r5, #2
    2040:	b2ad      	uxth	r5, r5
    2042:	0a1b      	lsrs	r3, r3, #8
    2044:	9a01      	ldr	r2, [sp, #4]
    2046:	5453      	strb	r3, [r2, r1]
    2048:	e7e5      	b.n	2016 <STACK_SIZE+0x16>
				return STATUS_ERR_TIMEOUT;
    204a:	2012      	movs	r0, #18
    204c:	e7c1      	b.n	1fd2 <usart_read_buffer_wait+0x12>
    204e:	46c0      	nop			; (mov r8, r8)
    2050:	00001f57 	.word	0x00001f57
    2054:	0000ffff 	.word	0x0000ffff

00002058 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    205a:	0080      	lsls	r0, r0, #2
    205c:	4b62      	ldr	r3, [pc, #392]	; (21e8 <_usart_interrupt_handler+0x190>)
    205e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2060:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2062:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2064:	2b00      	cmp	r3, #0
    2066:	d1fc      	bne.n	2062 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2068:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    206a:	7da6      	ldrb	r6, [r4, #22]
    206c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    206e:	2330      	movs	r3, #48	; 0x30
    2070:	5ceb      	ldrb	r3, [r5, r3]
    2072:	2231      	movs	r2, #49	; 0x31
    2074:	5caf      	ldrb	r7, [r5, r2]
    2076:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2078:	07f3      	lsls	r3, r6, #31
    207a:	d522      	bpl.n	20c2 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    207c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    207e:	b29b      	uxth	r3, r3
    2080:	2b00      	cmp	r3, #0
    2082:	d01c      	beq.n	20be <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2084:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2086:	7813      	ldrb	r3, [r2, #0]
    2088:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    208a:	1c51      	adds	r1, r2, #1
    208c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    208e:	7969      	ldrb	r1, [r5, #5]
    2090:	2901      	cmp	r1, #1
    2092:	d00e      	beq.n	20b2 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2094:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2096:	05db      	lsls	r3, r3, #23
    2098:	0ddb      	lsrs	r3, r3, #23
    209a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    209c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    209e:	3b01      	subs	r3, #1
    20a0:	b29b      	uxth	r3, r3
    20a2:	85eb      	strh	r3, [r5, #46]	; 0x2e
    20a4:	2b00      	cmp	r3, #0
    20a6:	d10c      	bne.n	20c2 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    20a8:	3301      	adds	r3, #1
    20aa:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    20ac:	3301      	adds	r3, #1
    20ae:	75a3      	strb	r3, [r4, #22]
    20b0:	e007      	b.n	20c2 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    20b2:	7851      	ldrb	r1, [r2, #1]
    20b4:	0209      	lsls	r1, r1, #8
    20b6:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    20b8:	3202      	adds	r2, #2
    20ba:	62aa      	str	r2, [r5, #40]	; 0x28
    20bc:	e7eb      	b.n	2096 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    20be:	2301      	movs	r3, #1
    20c0:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    20c2:	07b3      	lsls	r3, r6, #30
    20c4:	d506      	bpl.n	20d4 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    20c6:	2302      	movs	r3, #2
    20c8:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    20ca:	2200      	movs	r2, #0
    20cc:	3331      	adds	r3, #49	; 0x31
    20ce:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    20d0:	07fb      	lsls	r3, r7, #31
    20d2:	d41a      	bmi.n	210a <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    20d4:	0773      	lsls	r3, r6, #29
    20d6:	d565      	bpl.n	21a4 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    20d8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    20da:	b29b      	uxth	r3, r3
    20dc:	2b00      	cmp	r3, #0
    20de:	d05f      	beq.n	21a0 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    20e0:	8b63      	ldrh	r3, [r4, #26]
    20e2:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    20e4:	071a      	lsls	r2, r3, #28
    20e6:	d414      	bmi.n	2112 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    20e8:	223f      	movs	r2, #63	; 0x3f
    20ea:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    20ec:	2b00      	cmp	r3, #0
    20ee:	d034      	beq.n	215a <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    20f0:	079a      	lsls	r2, r3, #30
    20f2:	d511      	bpl.n	2118 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    20f4:	221a      	movs	r2, #26
    20f6:	2332      	movs	r3, #50	; 0x32
    20f8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    20fa:	3b30      	subs	r3, #48	; 0x30
    20fc:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    20fe:	077b      	lsls	r3, r7, #29
    2100:	d550      	bpl.n	21a4 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2102:	0028      	movs	r0, r5
    2104:	696b      	ldr	r3, [r5, #20]
    2106:	4798      	blx	r3
    2108:	e04c      	b.n	21a4 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    210a:	0028      	movs	r0, r5
    210c:	68eb      	ldr	r3, [r5, #12]
    210e:	4798      	blx	r3
    2110:	e7e0      	b.n	20d4 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2112:	2237      	movs	r2, #55	; 0x37
    2114:	4013      	ands	r3, r2
    2116:	e7e9      	b.n	20ec <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2118:	075a      	lsls	r2, r3, #29
    211a:	d505      	bpl.n	2128 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    211c:	221e      	movs	r2, #30
    211e:	2332      	movs	r3, #50	; 0x32
    2120:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2122:	3b2e      	subs	r3, #46	; 0x2e
    2124:	8363      	strh	r3, [r4, #26]
    2126:	e7ea      	b.n	20fe <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2128:	07da      	lsls	r2, r3, #31
    212a:	d505      	bpl.n	2138 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    212c:	2213      	movs	r2, #19
    212e:	2332      	movs	r3, #50	; 0x32
    2130:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2132:	3b31      	subs	r3, #49	; 0x31
    2134:	8363      	strh	r3, [r4, #26]
    2136:	e7e2      	b.n	20fe <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2138:	06da      	lsls	r2, r3, #27
    213a:	d505      	bpl.n	2148 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    213c:	2242      	movs	r2, #66	; 0x42
    213e:	2332      	movs	r3, #50	; 0x32
    2140:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2142:	3b22      	subs	r3, #34	; 0x22
    2144:	8363      	strh	r3, [r4, #26]
    2146:	e7da      	b.n	20fe <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2148:	2220      	movs	r2, #32
    214a:	421a      	tst	r2, r3
    214c:	d0d7      	beq.n	20fe <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    214e:	3221      	adds	r2, #33	; 0x21
    2150:	2332      	movs	r3, #50	; 0x32
    2152:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2154:	3b12      	subs	r3, #18
    2156:	8363      	strh	r3, [r4, #26]
    2158:	e7d1      	b.n	20fe <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    215a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    215c:	05db      	lsls	r3, r3, #23
    215e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2160:	b2da      	uxtb	r2, r3
    2162:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2164:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2166:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2168:	1c51      	adds	r1, r2, #1
    216a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    216c:	7969      	ldrb	r1, [r5, #5]
    216e:	2901      	cmp	r1, #1
    2170:	d010      	beq.n	2194 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2172:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2174:	3b01      	subs	r3, #1
    2176:	b29b      	uxth	r3, r3
    2178:	85ab      	strh	r3, [r5, #44]	; 0x2c
    217a:	2b00      	cmp	r3, #0
    217c:	d112      	bne.n	21a4 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    217e:	3304      	adds	r3, #4
    2180:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2182:	2200      	movs	r2, #0
    2184:	332e      	adds	r3, #46	; 0x2e
    2186:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2188:	07bb      	lsls	r3, r7, #30
    218a:	d50b      	bpl.n	21a4 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    218c:	0028      	movs	r0, r5
    218e:	692b      	ldr	r3, [r5, #16]
    2190:	4798      	blx	r3
    2192:	e007      	b.n	21a4 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2194:	0a1b      	lsrs	r3, r3, #8
    2196:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2198:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    219a:	3301      	adds	r3, #1
    219c:	626b      	str	r3, [r5, #36]	; 0x24
    219e:	e7e8      	b.n	2172 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    21a0:	2304      	movs	r3, #4
    21a2:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    21a4:	06f3      	lsls	r3, r6, #27
    21a6:	d504      	bpl.n	21b2 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    21a8:	2310      	movs	r3, #16
    21aa:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    21ac:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    21ae:	06fb      	lsls	r3, r7, #27
    21b0:	d40e      	bmi.n	21d0 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    21b2:	06b3      	lsls	r3, r6, #26
    21b4:	d504      	bpl.n	21c0 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    21b6:	2320      	movs	r3, #32
    21b8:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    21ba:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    21bc:	073b      	lsls	r3, r7, #28
    21be:	d40b      	bmi.n	21d8 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    21c0:	0733      	lsls	r3, r6, #28
    21c2:	d504      	bpl.n	21ce <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    21c4:	2308      	movs	r3, #8
    21c6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    21c8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    21ca:	06bb      	lsls	r3, r7, #26
    21cc:	d408      	bmi.n	21e0 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    21ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    21d0:	0028      	movs	r0, r5
    21d2:	69eb      	ldr	r3, [r5, #28]
    21d4:	4798      	blx	r3
    21d6:	e7ec      	b.n	21b2 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    21d8:	0028      	movs	r0, r5
    21da:	69ab      	ldr	r3, [r5, #24]
    21dc:	4798      	blx	r3
    21de:	e7ef      	b.n	21c0 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    21e0:	6a2b      	ldr	r3, [r5, #32]
    21e2:	0028      	movs	r0, r5
    21e4:	4798      	blx	r3
}
    21e6:	e7f2      	b.n	21ce <_usart_interrupt_handler+0x176>
    21e8:	20000f48 	.word	0x20000f48

000021ec <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    21ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    21ee:	46de      	mov	lr, fp
    21f0:	4657      	mov	r7, sl
    21f2:	464e      	mov	r6, r9
    21f4:	4645      	mov	r5, r8
    21f6:	b5e0      	push	{r5, r6, r7, lr}
    21f8:	b087      	sub	sp, #28
    21fa:	4680      	mov	r8, r0
    21fc:	9104      	str	r1, [sp, #16]
    21fe:	0016      	movs	r6, r2
    2200:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    2202:	2200      	movs	r2, #0
    2204:	2300      	movs	r3, #0
    2206:	2100      	movs	r1, #0
    2208:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    220a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    220c:	2001      	movs	r0, #1
    220e:	0021      	movs	r1, r4
    2210:	9600      	str	r6, [sp, #0]
    2212:	9701      	str	r7, [sp, #4]
    2214:	465c      	mov	r4, fp
    2216:	9403      	str	r4, [sp, #12]
    2218:	4644      	mov	r4, r8
    221a:	9405      	str	r4, [sp, #20]
    221c:	e013      	b.n	2246 <long_division+0x5a>
    221e:	2420      	movs	r4, #32
    2220:	1a64      	subs	r4, r4, r1
    2222:	0005      	movs	r5, r0
    2224:	40e5      	lsrs	r5, r4
    2226:	46a8      	mov	r8, r5
    2228:	e014      	b.n	2254 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    222a:	9c00      	ldr	r4, [sp, #0]
    222c:	9d01      	ldr	r5, [sp, #4]
    222e:	1b12      	subs	r2, r2, r4
    2230:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    2232:	465c      	mov	r4, fp
    2234:	464d      	mov	r5, r9
    2236:	432c      	orrs	r4, r5
    2238:	46a3      	mov	fp, r4
    223a:	9c03      	ldr	r4, [sp, #12]
    223c:	4645      	mov	r5, r8
    223e:	432c      	orrs	r4, r5
    2240:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    2242:	3901      	subs	r1, #1
    2244:	d325      	bcc.n	2292 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    2246:	2420      	movs	r4, #32
    2248:	4264      	negs	r4, r4
    224a:	190c      	adds	r4, r1, r4
    224c:	d4e7      	bmi.n	221e <long_division+0x32>
    224e:	0005      	movs	r5, r0
    2250:	40a5      	lsls	r5, r4
    2252:	46a8      	mov	r8, r5
    2254:	0004      	movs	r4, r0
    2256:	408c      	lsls	r4, r1
    2258:	46a1      	mov	r9, r4
		r = r << 1;
    225a:	1892      	adds	r2, r2, r2
    225c:	415b      	adcs	r3, r3
    225e:	0014      	movs	r4, r2
    2260:	001d      	movs	r5, r3
		if (n & bit_shift) {
    2262:	9e05      	ldr	r6, [sp, #20]
    2264:	464f      	mov	r7, r9
    2266:	403e      	ands	r6, r7
    2268:	46b4      	mov	ip, r6
    226a:	9e04      	ldr	r6, [sp, #16]
    226c:	4647      	mov	r7, r8
    226e:	403e      	ands	r6, r7
    2270:	46b2      	mov	sl, r6
    2272:	4666      	mov	r6, ip
    2274:	4657      	mov	r7, sl
    2276:	433e      	orrs	r6, r7
    2278:	d003      	beq.n	2282 <long_division+0x96>
			r |= 0x01;
    227a:	0006      	movs	r6, r0
    227c:	4326      	orrs	r6, r4
    227e:	0032      	movs	r2, r6
    2280:	002b      	movs	r3, r5
		if (r >= d) {
    2282:	9c00      	ldr	r4, [sp, #0]
    2284:	9d01      	ldr	r5, [sp, #4]
    2286:	429d      	cmp	r5, r3
    2288:	d8db      	bhi.n	2242 <long_division+0x56>
    228a:	d1ce      	bne.n	222a <long_division+0x3e>
    228c:	4294      	cmp	r4, r2
    228e:	d8d8      	bhi.n	2242 <long_division+0x56>
    2290:	e7cb      	b.n	222a <long_division+0x3e>
    2292:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    2294:	4658      	mov	r0, fp
    2296:	0019      	movs	r1, r3
    2298:	b007      	add	sp, #28
    229a:	bc3c      	pop	{r2, r3, r4, r5}
    229c:	4690      	mov	r8, r2
    229e:	4699      	mov	r9, r3
    22a0:	46a2      	mov	sl, r4
    22a2:	46ab      	mov	fp, r5
    22a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000022a6 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    22a6:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    22a8:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    22aa:	2340      	movs	r3, #64	; 0x40
    22ac:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    22ae:	4281      	cmp	r1, r0
    22b0:	d202      	bcs.n	22b8 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    22b2:	0018      	movs	r0, r3
    22b4:	bd10      	pop	{r4, pc}
		baud_calculated++;
    22b6:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    22b8:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    22ba:	1c63      	adds	r3, r4, #1
    22bc:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    22be:	4288      	cmp	r0, r1
    22c0:	d9f9      	bls.n	22b6 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    22c2:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    22c4:	2cff      	cmp	r4, #255	; 0xff
    22c6:	d8f4      	bhi.n	22b2 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    22c8:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    22ca:	2300      	movs	r3, #0
    22cc:	e7f1      	b.n	22b2 <_sercom_get_sync_baud_val+0xc>
	...

000022d0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    22d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    22d2:	b083      	sub	sp, #12
    22d4:	000f      	movs	r7, r1
    22d6:	0016      	movs	r6, r2
    22d8:	aa08      	add	r2, sp, #32
    22da:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    22dc:	0004      	movs	r4, r0
    22de:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    22e0:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    22e2:	42bc      	cmp	r4, r7
    22e4:	d902      	bls.n	22ec <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    22e6:	0010      	movs	r0, r2
    22e8:	b003      	add	sp, #12
    22ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    22ec:	2b00      	cmp	r3, #0
    22ee:	d114      	bne.n	231a <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    22f0:	0002      	movs	r2, r0
    22f2:	0008      	movs	r0, r1
    22f4:	2100      	movs	r1, #0
    22f6:	4c19      	ldr	r4, [pc, #100]	; (235c <_sercom_get_async_baud_val+0x8c>)
    22f8:	47a0      	blx	r4
    22fa:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    22fc:	003a      	movs	r2, r7
    22fe:	2300      	movs	r3, #0
    2300:	2000      	movs	r0, #0
    2302:	4c17      	ldr	r4, [pc, #92]	; (2360 <_sercom_get_async_baud_val+0x90>)
    2304:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    2306:	2200      	movs	r2, #0
    2308:	2301      	movs	r3, #1
    230a:	1a12      	subs	r2, r2, r0
    230c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    230e:	0c12      	lsrs	r2, r2, #16
    2310:	041b      	lsls	r3, r3, #16
    2312:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    2314:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    2316:	2200      	movs	r2, #0
    2318:	e7e5      	b.n	22e6 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    231a:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    231c:	2b01      	cmp	r3, #1
    231e:	d1f9      	bne.n	2314 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    2320:	000a      	movs	r2, r1
    2322:	2300      	movs	r3, #0
    2324:	2100      	movs	r1, #0
    2326:	4c0d      	ldr	r4, [pc, #52]	; (235c <_sercom_get_async_baud_val+0x8c>)
    2328:	47a0      	blx	r4
    232a:	0002      	movs	r2, r0
    232c:	000b      	movs	r3, r1
    232e:	9200      	str	r2, [sp, #0]
    2330:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    2332:	0038      	movs	r0, r7
    2334:	2100      	movs	r1, #0
    2336:	4c0a      	ldr	r4, [pc, #40]	; (2360 <_sercom_get_async_baud_val+0x90>)
    2338:	47a0      	blx	r4
    233a:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    233c:	2380      	movs	r3, #128	; 0x80
    233e:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2340:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    2342:	4298      	cmp	r0, r3
    2344:	d8cf      	bhi.n	22e6 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    2346:	0f79      	lsrs	r1, r7, #29
    2348:	00f8      	lsls	r0, r7, #3
    234a:	9a00      	ldr	r2, [sp, #0]
    234c:	9b01      	ldr	r3, [sp, #4]
    234e:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    2350:	00ea      	lsls	r2, r5, #3
    2352:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    2354:	b2d2      	uxtb	r2, r2
    2356:	0352      	lsls	r2, r2, #13
    2358:	432a      	orrs	r2, r5
    235a:	e7db      	b.n	2314 <_sercom_get_async_baud_val+0x44>
    235c:	00011b09 	.word	0x00011b09
    2360:	000021ed 	.word	0x000021ed

00002364 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    2364:	b510      	push	{r4, lr}
    2366:	b082      	sub	sp, #8
    2368:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    236a:	4b0e      	ldr	r3, [pc, #56]	; (23a4 <sercom_set_gclk_generator+0x40>)
    236c:	781b      	ldrb	r3, [r3, #0]
    236e:	2b00      	cmp	r3, #0
    2370:	d007      	beq.n	2382 <sercom_set_gclk_generator+0x1e>
    2372:	2900      	cmp	r1, #0
    2374:	d105      	bne.n	2382 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    2376:	4b0b      	ldr	r3, [pc, #44]	; (23a4 <sercom_set_gclk_generator+0x40>)
    2378:	785b      	ldrb	r3, [r3, #1]
    237a:	4283      	cmp	r3, r0
    237c:	d010      	beq.n	23a0 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    237e:	201d      	movs	r0, #29
    2380:	e00c      	b.n	239c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    2382:	a901      	add	r1, sp, #4
    2384:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    2386:	2011      	movs	r0, #17
    2388:	4b07      	ldr	r3, [pc, #28]	; (23a8 <sercom_set_gclk_generator+0x44>)
    238a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    238c:	2011      	movs	r0, #17
    238e:	4b07      	ldr	r3, [pc, #28]	; (23ac <sercom_set_gclk_generator+0x48>)
    2390:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    2392:	4b04      	ldr	r3, [pc, #16]	; (23a4 <sercom_set_gclk_generator+0x40>)
    2394:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    2396:	2201      	movs	r2, #1
    2398:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    239a:	2000      	movs	r0, #0
}
    239c:	b002      	add	sp, #8
    239e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    23a0:	2000      	movs	r0, #0
    23a2:	e7fb      	b.n	239c <sercom_set_gclk_generator+0x38>
    23a4:	20000a34 	.word	0x20000a34
    23a8:	00002d5d 	.word	0x00002d5d
    23ac:	00002ced 	.word	0x00002ced

000023b0 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    23b0:	4b3c      	ldr	r3, [pc, #240]	; (24a4 <_sercom_get_default_pad+0xf4>)
    23b2:	4298      	cmp	r0, r3
    23b4:	d032      	beq.n	241c <_sercom_get_default_pad+0x6c>
    23b6:	d90a      	bls.n	23ce <_sercom_get_default_pad+0x1e>
    23b8:	4b3b      	ldr	r3, [pc, #236]	; (24a8 <_sercom_get_default_pad+0xf8>)
    23ba:	4298      	cmp	r0, r3
    23bc:	d04e      	beq.n	245c <_sercom_get_default_pad+0xac>
    23be:	4b3b      	ldr	r3, [pc, #236]	; (24ac <_sercom_get_default_pad+0xfc>)
    23c0:	4298      	cmp	r0, r3
    23c2:	d055      	beq.n	2470 <_sercom_get_default_pad+0xc0>
    23c4:	4b3a      	ldr	r3, [pc, #232]	; (24b0 <_sercom_get_default_pad+0x100>)
    23c6:	4298      	cmp	r0, r3
    23c8:	d038      	beq.n	243c <_sercom_get_default_pad+0x8c>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    23ca:	2000      	movs	r0, #0
}
    23cc:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    23ce:	2384      	movs	r3, #132	; 0x84
    23d0:	05db      	lsls	r3, r3, #23
    23d2:	4298      	cmp	r0, r3
    23d4:	d00c      	beq.n	23f0 <_sercom_get_default_pad+0x40>
    23d6:	4b37      	ldr	r3, [pc, #220]	; (24b4 <_sercom_get_default_pad+0x104>)
    23d8:	4298      	cmp	r0, r3
    23da:	d1f6      	bne.n	23ca <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    23dc:	2901      	cmp	r1, #1
    23de:	d017      	beq.n	2410 <_sercom_get_default_pad+0x60>
    23e0:	2900      	cmp	r1, #0
    23e2:	d057      	beq.n	2494 <_sercom_get_default_pad+0xe4>
    23e4:	2902      	cmp	r1, #2
    23e6:	d015      	beq.n	2414 <_sercom_get_default_pad+0x64>
    23e8:	2903      	cmp	r1, #3
    23ea:	d015      	beq.n	2418 <_sercom_get_default_pad+0x68>
	return 0;
    23ec:	2000      	movs	r0, #0
    23ee:	e7ed      	b.n	23cc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    23f0:	2901      	cmp	r1, #1
    23f2:	d007      	beq.n	2404 <_sercom_get_default_pad+0x54>
    23f4:	2900      	cmp	r1, #0
    23f6:	d04b      	beq.n	2490 <_sercom_get_default_pad+0xe0>
    23f8:	2902      	cmp	r1, #2
    23fa:	d005      	beq.n	2408 <_sercom_get_default_pad+0x58>
    23fc:	2903      	cmp	r1, #3
    23fe:	d005      	beq.n	240c <_sercom_get_default_pad+0x5c>
	return 0;
    2400:	2000      	movs	r0, #0
    2402:	e7e3      	b.n	23cc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2404:	482c      	ldr	r0, [pc, #176]	; (24b8 <_sercom_get_default_pad+0x108>)
    2406:	e7e1      	b.n	23cc <_sercom_get_default_pad+0x1c>
    2408:	482c      	ldr	r0, [pc, #176]	; (24bc <_sercom_get_default_pad+0x10c>)
    240a:	e7df      	b.n	23cc <_sercom_get_default_pad+0x1c>
    240c:	482c      	ldr	r0, [pc, #176]	; (24c0 <_sercom_get_default_pad+0x110>)
    240e:	e7dd      	b.n	23cc <_sercom_get_default_pad+0x1c>
    2410:	482c      	ldr	r0, [pc, #176]	; (24c4 <_sercom_get_default_pad+0x114>)
    2412:	e7db      	b.n	23cc <_sercom_get_default_pad+0x1c>
    2414:	482c      	ldr	r0, [pc, #176]	; (24c8 <_sercom_get_default_pad+0x118>)
    2416:	e7d9      	b.n	23cc <_sercom_get_default_pad+0x1c>
    2418:	482c      	ldr	r0, [pc, #176]	; (24cc <_sercom_get_default_pad+0x11c>)
    241a:	e7d7      	b.n	23cc <_sercom_get_default_pad+0x1c>
    241c:	2901      	cmp	r1, #1
    241e:	d007      	beq.n	2430 <_sercom_get_default_pad+0x80>
    2420:	2900      	cmp	r1, #0
    2422:	d039      	beq.n	2498 <_sercom_get_default_pad+0xe8>
    2424:	2902      	cmp	r1, #2
    2426:	d005      	beq.n	2434 <_sercom_get_default_pad+0x84>
    2428:	2903      	cmp	r1, #3
    242a:	d005      	beq.n	2438 <_sercom_get_default_pad+0x88>
	return 0;
    242c:	2000      	movs	r0, #0
    242e:	e7cd      	b.n	23cc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2430:	4827      	ldr	r0, [pc, #156]	; (24d0 <_sercom_get_default_pad+0x120>)
    2432:	e7cb      	b.n	23cc <_sercom_get_default_pad+0x1c>
    2434:	4827      	ldr	r0, [pc, #156]	; (24d4 <_sercom_get_default_pad+0x124>)
    2436:	e7c9      	b.n	23cc <_sercom_get_default_pad+0x1c>
    2438:	4827      	ldr	r0, [pc, #156]	; (24d8 <_sercom_get_default_pad+0x128>)
    243a:	e7c7      	b.n	23cc <_sercom_get_default_pad+0x1c>
    243c:	2901      	cmp	r1, #1
    243e:	d007      	beq.n	2450 <_sercom_get_default_pad+0xa0>
    2440:	2900      	cmp	r1, #0
    2442:	d02b      	beq.n	249c <_sercom_get_default_pad+0xec>
    2444:	2902      	cmp	r1, #2
    2446:	d005      	beq.n	2454 <_sercom_get_default_pad+0xa4>
    2448:	2903      	cmp	r1, #3
    244a:	d005      	beq.n	2458 <_sercom_get_default_pad+0xa8>
	return 0;
    244c:	2000      	movs	r0, #0
    244e:	e7bd      	b.n	23cc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2450:	4822      	ldr	r0, [pc, #136]	; (24dc <_sercom_get_default_pad+0x12c>)
    2452:	e7bb      	b.n	23cc <_sercom_get_default_pad+0x1c>
    2454:	4822      	ldr	r0, [pc, #136]	; (24e0 <_sercom_get_default_pad+0x130>)
    2456:	e7b9      	b.n	23cc <_sercom_get_default_pad+0x1c>
    2458:	4822      	ldr	r0, [pc, #136]	; (24e4 <_sercom_get_default_pad+0x134>)
    245a:	e7b7      	b.n	23cc <_sercom_get_default_pad+0x1c>
    245c:	2902      	cmp	r1, #2
    245e:	d003      	beq.n	2468 <_sercom_get_default_pad+0xb8>
    2460:	2903      	cmp	r1, #3
    2462:	d003      	beq.n	246c <_sercom_get_default_pad+0xbc>
    2464:	2000      	movs	r0, #0
    2466:	e7b1      	b.n	23cc <_sercom_get_default_pad+0x1c>
    2468:	481f      	ldr	r0, [pc, #124]	; (24e8 <_sercom_get_default_pad+0x138>)
    246a:	e7af      	b.n	23cc <_sercom_get_default_pad+0x1c>
    246c:	481f      	ldr	r0, [pc, #124]	; (24ec <_sercom_get_default_pad+0x13c>)
    246e:	e7ad      	b.n	23cc <_sercom_get_default_pad+0x1c>
    2470:	2901      	cmp	r1, #1
    2472:	d007      	beq.n	2484 <_sercom_get_default_pad+0xd4>
    2474:	2900      	cmp	r1, #0
    2476:	d013      	beq.n	24a0 <_sercom_get_default_pad+0xf0>
    2478:	2902      	cmp	r1, #2
    247a:	d005      	beq.n	2488 <_sercom_get_default_pad+0xd8>
    247c:	2903      	cmp	r1, #3
    247e:	d005      	beq.n	248c <_sercom_get_default_pad+0xdc>
	return 0;
    2480:	2000      	movs	r0, #0
    2482:	e7a3      	b.n	23cc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2484:	481a      	ldr	r0, [pc, #104]	; (24f0 <_sercom_get_default_pad+0x140>)
    2486:	e7a1      	b.n	23cc <_sercom_get_default_pad+0x1c>
    2488:	481a      	ldr	r0, [pc, #104]	; (24f4 <_sercom_get_default_pad+0x144>)
    248a:	e79f      	b.n	23cc <_sercom_get_default_pad+0x1c>
    248c:	481a      	ldr	r0, [pc, #104]	; (24f8 <_sercom_get_default_pad+0x148>)
    248e:	e79d      	b.n	23cc <_sercom_get_default_pad+0x1c>
    2490:	481a      	ldr	r0, [pc, #104]	; (24fc <_sercom_get_default_pad+0x14c>)
    2492:	e79b      	b.n	23cc <_sercom_get_default_pad+0x1c>
    2494:	2003      	movs	r0, #3
    2496:	e799      	b.n	23cc <_sercom_get_default_pad+0x1c>
    2498:	4819      	ldr	r0, [pc, #100]	; (2500 <_sercom_get_default_pad+0x150>)
    249a:	e797      	b.n	23cc <_sercom_get_default_pad+0x1c>
    249c:	4819      	ldr	r0, [pc, #100]	; (2504 <_sercom_get_default_pad+0x154>)
    249e:	e795      	b.n	23cc <_sercom_get_default_pad+0x1c>
    24a0:	4819      	ldr	r0, [pc, #100]	; (2508 <_sercom_get_default_pad+0x158>)
    24a2:	e793      	b.n	23cc <_sercom_get_default_pad+0x1c>
    24a4:	42000800 	.word	0x42000800
    24a8:	42001000 	.word	0x42001000
    24ac:	43000400 	.word	0x43000400
    24b0:	42000c00 	.word	0x42000c00
    24b4:	42000400 	.word	0x42000400
    24b8:	00050003 	.word	0x00050003
    24bc:	00060003 	.word	0x00060003
    24c0:	00070003 	.word	0x00070003
    24c4:	00010003 	.word	0x00010003
    24c8:	001e0003 	.word	0x001e0003
    24cc:	001f0003 	.word	0x001f0003
    24d0:	00090003 	.word	0x00090003
    24d4:	000a0003 	.word	0x000a0003
    24d8:	000b0003 	.word	0x000b0003
    24dc:	00110003 	.word	0x00110003
    24e0:	00120003 	.word	0x00120003
    24e4:	00130003 	.word	0x00130003
    24e8:	000e0003 	.word	0x000e0003
    24ec:	000f0003 	.word	0x000f0003
    24f0:	00170003 	.word	0x00170003
    24f4:	00180003 	.word	0x00180003
    24f8:	00190003 	.word	0x00190003
    24fc:	00040003 	.word	0x00040003
    2500:	00080003 	.word	0x00080003
    2504:	00100003 	.word	0x00100003
    2508:	00160003 	.word	0x00160003

0000250c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    250c:	b530      	push	{r4, r5, lr}
    250e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    2510:	4b0b      	ldr	r3, [pc, #44]	; (2540 <_sercom_get_sercom_inst_index+0x34>)
    2512:	466a      	mov	r2, sp
    2514:	cb32      	ldmia	r3!, {r1, r4, r5}
    2516:	c232      	stmia	r2!, {r1, r4, r5}
    2518:	cb32      	ldmia	r3!, {r1, r4, r5}
    251a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    251c:	9b00      	ldr	r3, [sp, #0]
    251e:	4283      	cmp	r3, r0
    2520:	d00b      	beq.n	253a <_sercom_get_sercom_inst_index+0x2e>
    2522:	2301      	movs	r3, #1
    2524:	009a      	lsls	r2, r3, #2
    2526:	4669      	mov	r1, sp
    2528:	5852      	ldr	r2, [r2, r1]
    252a:	4282      	cmp	r2, r0
    252c:	d006      	beq.n	253c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    252e:	3301      	adds	r3, #1
    2530:	2b06      	cmp	r3, #6
    2532:	d1f7      	bne.n	2524 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    2534:	2000      	movs	r0, #0
}
    2536:	b007      	add	sp, #28
    2538:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    253a:	2300      	movs	r3, #0
			return i;
    253c:	b2d8      	uxtb	r0, r3
    253e:	e7fa      	b.n	2536 <_sercom_get_sercom_inst_index+0x2a>
    2540:	00019950 	.word	0x00019950

00002544 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2544:	4770      	bx	lr
	...

00002548 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    2548:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    254a:	4b0a      	ldr	r3, [pc, #40]	; (2574 <_sercom_set_handler+0x2c>)
    254c:	781b      	ldrb	r3, [r3, #0]
    254e:	2b00      	cmp	r3, #0
    2550:	d10c      	bne.n	256c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2552:	4f09      	ldr	r7, [pc, #36]	; (2578 <_sercom_set_handler+0x30>)
    2554:	4e09      	ldr	r6, [pc, #36]	; (257c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    2556:	4d0a      	ldr	r5, [pc, #40]	; (2580 <_sercom_set_handler+0x38>)
    2558:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    255a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    255c:	195a      	adds	r2, r3, r5
    255e:	6014      	str	r4, [r2, #0]
    2560:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2562:	2b18      	cmp	r3, #24
    2564:	d1f9      	bne.n	255a <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    2566:	2201      	movs	r2, #1
    2568:	4b02      	ldr	r3, [pc, #8]	; (2574 <_sercom_set_handler+0x2c>)
    256a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    256c:	0080      	lsls	r0, r0, #2
    256e:	4b02      	ldr	r3, [pc, #8]	; (2578 <_sercom_set_handler+0x30>)
    2570:	50c1      	str	r1, [r0, r3]
}
    2572:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2574:	20000a36 	.word	0x20000a36
    2578:	20000a38 	.word	0x20000a38
    257c:	00002545 	.word	0x00002545
    2580:	20000f48 	.word	0x20000f48

00002584 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2584:	b500      	push	{lr}
    2586:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    2588:	2308      	movs	r3, #8
    258a:	466a      	mov	r2, sp
    258c:	7013      	strb	r3, [r2, #0]
    258e:	3301      	adds	r3, #1
    2590:	7053      	strb	r3, [r2, #1]
    2592:	3301      	adds	r3, #1
    2594:	7093      	strb	r3, [r2, #2]
    2596:	3301      	adds	r3, #1
    2598:	70d3      	strb	r3, [r2, #3]
    259a:	3301      	adds	r3, #1
    259c:	7113      	strb	r3, [r2, #4]
    259e:	3301      	adds	r3, #1
    25a0:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    25a2:	4b03      	ldr	r3, [pc, #12]	; (25b0 <_sercom_get_interrupt_vector+0x2c>)
    25a4:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    25a6:	466b      	mov	r3, sp
    25a8:	5618      	ldrsb	r0, [r3, r0]
}
    25aa:	b003      	add	sp, #12
    25ac:	bd00      	pop	{pc}
    25ae:	46c0      	nop			; (mov r8, r8)
    25b0:	0000250d 	.word	0x0000250d

000025b4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    25b4:	b510      	push	{r4, lr}
    25b6:	4b02      	ldr	r3, [pc, #8]	; (25c0 <SERCOM0_Handler+0xc>)
    25b8:	681b      	ldr	r3, [r3, #0]
    25ba:	2000      	movs	r0, #0
    25bc:	4798      	blx	r3
    25be:	bd10      	pop	{r4, pc}
    25c0:	20000a38 	.word	0x20000a38

000025c4 <SERCOM1_Handler>:
    25c4:	b510      	push	{r4, lr}
    25c6:	4b02      	ldr	r3, [pc, #8]	; (25d0 <SERCOM1_Handler+0xc>)
    25c8:	685b      	ldr	r3, [r3, #4]
    25ca:	2001      	movs	r0, #1
    25cc:	4798      	blx	r3
    25ce:	bd10      	pop	{r4, pc}
    25d0:	20000a38 	.word	0x20000a38

000025d4 <SERCOM2_Handler>:
    25d4:	b510      	push	{r4, lr}
    25d6:	4b02      	ldr	r3, [pc, #8]	; (25e0 <SERCOM2_Handler+0xc>)
    25d8:	689b      	ldr	r3, [r3, #8]
    25da:	2002      	movs	r0, #2
    25dc:	4798      	blx	r3
    25de:	bd10      	pop	{r4, pc}
    25e0:	20000a38 	.word	0x20000a38

000025e4 <SERCOM3_Handler>:
    25e4:	b510      	push	{r4, lr}
    25e6:	4b02      	ldr	r3, [pc, #8]	; (25f0 <SERCOM3_Handler+0xc>)
    25e8:	68db      	ldr	r3, [r3, #12]
    25ea:	2003      	movs	r0, #3
    25ec:	4798      	blx	r3
    25ee:	bd10      	pop	{r4, pc}
    25f0:	20000a38 	.word	0x20000a38

000025f4 <SERCOM4_Handler>:
    25f4:	b510      	push	{r4, lr}
    25f6:	4b02      	ldr	r3, [pc, #8]	; (2600 <SERCOM4_Handler+0xc>)
    25f8:	691b      	ldr	r3, [r3, #16]
    25fa:	2004      	movs	r0, #4
    25fc:	4798      	blx	r3
    25fe:	bd10      	pop	{r4, pc}
    2600:	20000a38 	.word	0x20000a38

00002604 <SERCOM5_Handler>:
    2604:	b510      	push	{r4, lr}
    2606:	4b02      	ldr	r3, [pc, #8]	; (2610 <SERCOM5_Handler+0xc>)
    2608:	695b      	ldr	r3, [r3, #20]
    260a:	2005      	movs	r0, #5
    260c:	4798      	blx	r3
    260e:	bd10      	pop	{r4, pc}
    2610:	20000a38 	.word	0x20000a38

00002614 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2614:	b510      	push	{r4, lr}
	switch (clock_source) {
    2616:	2808      	cmp	r0, #8
    2618:	d803      	bhi.n	2622 <system_clock_source_get_hz+0xe>
    261a:	0080      	lsls	r0, r0, #2
    261c:	4b1c      	ldr	r3, [pc, #112]	; (2690 <system_clock_source_get_hz+0x7c>)
    261e:	581b      	ldr	r3, [r3, r0]
    2620:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    2622:	2000      	movs	r0, #0
    2624:	e032      	b.n	268c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    2626:	4b1b      	ldr	r3, [pc, #108]	; (2694 <system_clock_source_get_hz+0x80>)
    2628:	6918      	ldr	r0, [r3, #16]
    262a:	e02f      	b.n	268c <system_clock_source_get_hz+0x78>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    262c:	4b1a      	ldr	r3, [pc, #104]	; (2698 <system_clock_source_get_hz+0x84>)
    262e:	7d18      	ldrb	r0, [r3, #20]
    2630:	0700      	lsls	r0, r0, #28
    2632:	0f80      	lsrs	r0, r0, #30
    2634:	1c43      	adds	r3, r0, #1
    2636:	4819      	ldr	r0, [pc, #100]	; (269c <system_clock_source_get_hz+0x88>)
    2638:	4358      	muls	r0, r3
    263a:	e027      	b.n	268c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    263c:	4b15      	ldr	r3, [pc, #84]	; (2694 <system_clock_source_get_hz+0x80>)
    263e:	6958      	ldr	r0, [r3, #20]
    2640:	e024      	b.n	268c <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    2642:	4b14      	ldr	r3, [pc, #80]	; (2694 <system_clock_source_get_hz+0x80>)
    2644:	681b      	ldr	r3, [r3, #0]
			return 0;
    2646:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    2648:	079b      	lsls	r3, r3, #30
    264a:	d51f      	bpl.n	268c <system_clock_source_get_hz+0x78>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    264c:	4912      	ldr	r1, [pc, #72]	; (2698 <system_clock_source_get_hz+0x84>)
    264e:	2280      	movs	r2, #128	; 0x80
    2650:	0052      	lsls	r2, r2, #1
    2652:	68cb      	ldr	r3, [r1, #12]
    2654:	4213      	tst	r3, r2
    2656:	d0fc      	beq.n	2652 <system_clock_source_get_hz+0x3e>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    2658:	4b0e      	ldr	r3, [pc, #56]	; (2694 <system_clock_source_get_hz+0x80>)
    265a:	681b      	ldr	r3, [r3, #0]
    265c:	075b      	lsls	r3, r3, #29
    265e:	d401      	bmi.n	2664 <system_clock_source_get_hz+0x50>
		return 48000000UL;
    2660:	480f      	ldr	r0, [pc, #60]	; (26a0 <system_clock_source_get_hz+0x8c>)
    2662:	e013      	b.n	268c <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    2664:	2000      	movs	r0, #0
    2666:	4b0f      	ldr	r3, [pc, #60]	; (26a4 <system_clock_source_get_hz+0x90>)
    2668:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    266a:	4b0a      	ldr	r3, [pc, #40]	; (2694 <system_clock_source_get_hz+0x80>)
    266c:	689b      	ldr	r3, [r3, #8]
    266e:	041b      	lsls	r3, r3, #16
    2670:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    2672:	4358      	muls	r0, r3
    2674:	e00a      	b.n	268c <system_clock_source_get_hz+0x78>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    2676:	2328      	movs	r3, #40	; 0x28
    2678:	4a07      	ldr	r2, [pc, #28]	; (2698 <system_clock_source_get_hz+0x84>)
    267a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    267c:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    267e:	079b      	lsls	r3, r3, #30
    2680:	d504      	bpl.n	268c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    2682:	4b04      	ldr	r3, [pc, #16]	; (2694 <system_clock_source_get_hz+0x80>)
    2684:	68d8      	ldr	r0, [r3, #12]
    2686:	e001      	b.n	268c <system_clock_source_get_hz+0x78>
		return 32768UL;
    2688:	2080      	movs	r0, #128	; 0x80
    268a:	0200      	lsls	r0, r0, #8
	}
}
    268c:	bd10      	pop	{r4, pc}
    268e:	46c0      	nop			; (mov r8, r8)
    2690:	00019968 	.word	0x00019968
    2694:	20000a50 	.word	0x20000a50
    2698:	40000c00 	.word	0x40000c00
    269c:	003d0900 	.word	0x003d0900
    26a0:	02dc6c00 	.word	0x02dc6c00
    26a4:	00002d81 	.word	0x00002d81

000026a8 <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
    26a8:	b570      	push	{r4, r5, r6, lr}
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
    26aa:	4c0b      	ldr	r4, [pc, #44]	; (26d8 <system_clock_source_osc16m_set_config+0x30>)
    26ac:	7d23      	ldrb	r3, [r4, #20]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
	temp.bit.ONDEMAND = config->on_demand;
    26ae:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;
    26b0:	7846      	ldrb	r6, [r0, #1]

	OSCCTRL->OSC16MCTRL = temp;
    26b2:	7802      	ldrb	r2, [r0, #0]
    26b4:	2103      	movs	r1, #3
    26b6:	4011      	ands	r1, r2
    26b8:	0089      	lsls	r1, r1, #2
    26ba:	220c      	movs	r2, #12
    26bc:	4393      	bics	r3, r2
    26be:	430b      	orrs	r3, r1
    26c0:	3a0b      	subs	r2, #11
    26c2:	4032      	ands	r2, r6
    26c4:	0192      	lsls	r2, r2, #6
    26c6:	2140      	movs	r1, #64	; 0x40
    26c8:	438b      	bics	r3, r1
    26ca:	4313      	orrs	r3, r2
    26cc:	01ed      	lsls	r5, r5, #7
    26ce:	227f      	movs	r2, #127	; 0x7f
    26d0:	4013      	ands	r3, r2
    26d2:	432b      	orrs	r3, r5
    26d4:	7523      	strb	r3, [r4, #20]
}
    26d6:	bd70      	pop	{r4, r5, r6, pc}
    26d8:	40000c00 	.word	0x40000c00

000026dc <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    26dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    26de:	46d6      	mov	lr, sl
    26e0:	464f      	mov	r7, r9
    26e2:	4646      	mov	r6, r8
    26e4:	b5c0      	push	{r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    26e6:	4b20      	ldr	r3, [pc, #128]	; (2768 <system_clock_source_xosc32k_set_config+0x8c>)
    26e8:	469a      	mov	sl, r3
    26ea:	695b      	ldr	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    26ec:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    26ee:	7801      	ldrb	r1, [r0, #0]
    26f0:	424c      	negs	r4, r1
    26f2:	414c      	adcs	r4, r1
    26f4:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    26f6:	7881      	ldrb	r1, [r0, #2]
    26f8:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
    26fa:	78c1      	ldrb	r1, [r0, #3]
    26fc:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
    26fe:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2700:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
    2702:	7a84      	ldrb	r4, [r0, #10]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    2704:	6840      	ldr	r0, [r0, #4]
    2706:	4919      	ldr	r1, [pc, #100]	; (276c <system_clock_source_xosc32k_set_config+0x90>)
    2708:	6148      	str	r0, [r1, #20]

	OSC32KCTRL->XOSC32K = temp;
    270a:	2101      	movs	r1, #1
    270c:	4648      	mov	r0, r9
    270e:	0080      	lsls	r0, r0, #2
    2710:	2204      	movs	r2, #4
    2712:	4393      	bics	r3, r2
    2714:	4303      	orrs	r3, r0
    2716:	4640      	mov	r0, r8
    2718:	4008      	ands	r0, r1
    271a:	00c0      	lsls	r0, r0, #3
    271c:	3204      	adds	r2, #4
    271e:	4393      	bics	r3, r2
    2720:	4303      	orrs	r3, r0
    2722:	4660      	mov	r0, ip
    2724:	4008      	ands	r0, r1
    2726:	0100      	lsls	r0, r0, #4
    2728:	3208      	adds	r2, #8
    272a:	4393      	bics	r3, r2
    272c:	4303      	orrs	r3, r0
    272e:	400f      	ands	r7, r1
    2730:	01bf      	lsls	r7, r7, #6
    2732:	2040      	movs	r0, #64	; 0x40
    2734:	4383      	bics	r3, r0
    2736:	433b      	orrs	r3, r7
    2738:	400e      	ands	r6, r1
    273a:	01f6      	lsls	r6, r6, #7
    273c:	3040      	adds	r0, #64	; 0x40
    273e:	4383      	bics	r3, r0
    2740:	4333      	orrs	r3, r6
    2742:	3879      	subs	r0, #121	; 0x79
    2744:	4005      	ands	r5, r0
    2746:	022d      	lsls	r5, r5, #8
    2748:	4809      	ldr	r0, [pc, #36]	; (2770 <system_clock_source_xosc32k_set_config+0x94>)
    274a:	4003      	ands	r3, r0
    274c:	432b      	orrs	r3, r5
    274e:	4021      	ands	r1, r4
    2750:	0309      	lsls	r1, r1, #12
    2752:	4808      	ldr	r0, [pc, #32]	; (2774 <system_clock_source_xosc32k_set_config+0x98>)
    2754:	4003      	ands	r3, r0
    2756:	430b      	orrs	r3, r1
    2758:	4652      	mov	r2, sl
    275a:	6153      	str	r3, [r2, #20]
}
    275c:	bc1c      	pop	{r2, r3, r4}
    275e:	4690      	mov	r8, r2
    2760:	4699      	mov	r9, r3
    2762:	46a2      	mov	sl, r4
    2764:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2766:	46c0      	nop			; (mov r8, r8)
    2768:	40001000 	.word	0x40001000
    276c:	20000a50 	.word	0x20000a50
    2770:	fffff8ff 	.word	0xfffff8ff
    2774:	ffffefff 	.word	0xffffefff

00002778 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2778:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    277a:	7a83      	ldrb	r3, [r0, #10]
    277c:	069b      	lsls	r3, r3, #26
    277e:	0c1b      	lsrs	r3, r3, #16
			OSCCTRL_DFLLVAL_FINE(config->fine_value);
    2780:	8982      	ldrh	r2, [r0, #12]
    2782:	0592      	lsls	r2, r2, #22
    2784:	0d92      	lsrs	r2, r2, #22
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2786:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2788:	491a      	ldr	r1, [pc, #104]	; (27f4 <system_clock_source_dfll_set_config+0x7c>)
    278a:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    278c:	7a03      	ldrb	r3, [r0, #8]
    278e:	7a42      	ldrb	r2, [r0, #9]
    2790:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    2792:	8882      	ldrh	r2, [r0, #4]
    2794:	88c4      	ldrh	r4, [r0, #6]
    2796:	4322      	orrs	r2, r4
    2798:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    279a:	7842      	ldrb	r2, [r0, #1]
    279c:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    279e:	4313      	orrs	r3, r2
			((uint32_t)config->run_in_stanby << OSCCTRL_DFLLCTRL_RUNSTDBY_Pos);
    27a0:	7882      	ldrb	r2, [r0, #2]
    27a2:	0192      	lsls	r2, r2, #6
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    27a4:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    27a6:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    27a8:	7803      	ldrb	r3, [r0, #0]
    27aa:	2b04      	cmp	r3, #4
    27ac:	d011      	beq.n	27d2 <system_clock_source_dfll_set_config+0x5a>
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    27ae:	2b20      	cmp	r3, #32
    27b0:	d10e      	bne.n	27d0 <system_clock_source_dfll_set_config+0x58>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    27b2:	7b83      	ldrb	r3, [r0, #14]
    27b4:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    27b6:	8a42      	ldrh	r2, [r0, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    27b8:	4313      	orrs	r3, r2
    27ba:	8a02      	ldrh	r2, [r0, #16]
    27bc:	0412      	lsls	r2, r2, #16
    27be:	490e      	ldr	r1, [pc, #56]	; (27f8 <system_clock_source_dfll_set_config+0x80>)
    27c0:	400a      	ands	r2, r1
    27c2:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    27c4:	4a0b      	ldr	r2, [pc, #44]	; (27f4 <system_clock_source_dfll_set_config+0x7c>)
    27c6:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    27c8:	6811      	ldr	r1, [r2, #0]
    27ca:	4b0c      	ldr	r3, [pc, #48]	; (27fc <system_clock_source_dfll_set_config+0x84>)
    27cc:	430b      	orrs	r3, r1
    27ce:	6013      	str	r3, [r2, #0]
				OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_BPLCKC;
	}
}
    27d0:	bd10      	pop	{r4, pc}
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    27d2:	7b83      	ldrb	r3, [r0, #14]
    27d4:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    27d6:	8a42      	ldrh	r2, [r0, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    27d8:	4313      	orrs	r3, r2
    27da:	8a02      	ldrh	r2, [r0, #16]
    27dc:	0412      	lsls	r2, r2, #16
    27de:	4906      	ldr	r1, [pc, #24]	; (27f8 <system_clock_source_dfll_set_config+0x80>)
    27e0:	400a      	ands	r2, r1
    27e2:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    27e4:	4a03      	ldr	r2, [pc, #12]	; (27f4 <system_clock_source_dfll_set_config+0x7c>)
    27e6:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    27e8:	6813      	ldr	r3, [r2, #0]
    27ea:	2104      	movs	r1, #4
    27ec:	430b      	orrs	r3, r1
    27ee:	6013      	str	r3, [r2, #0]
    27f0:	e7ee      	b.n	27d0 <system_clock_source_dfll_set_config+0x58>
    27f2:	46c0      	nop			; (mov r8, r8)
    27f4:	20000a50 	.word	0x20000a50
    27f8:	03ff0000 	.word	0x03ff0000
    27fc:	00000424 	.word	0x00000424

00002800 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2800:	2808      	cmp	r0, #8
    2802:	d803      	bhi.n	280c <system_clock_source_enable+0xc>
    2804:	0080      	lsls	r0, r0, #2
    2806:	4b29      	ldr	r3, [pc, #164]	; (28ac <system_clock_source_enable+0xac>)
    2808:	581b      	ldr	r3, [r3, r0]
    280a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    280c:	2017      	movs	r0, #23
    280e:	e04b      	b.n	28a8 <system_clock_source_enable+0xa8>
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    2810:	4a27      	ldr	r2, [pc, #156]	; (28b0 <system_clock_source_enable+0xb0>)
    2812:	7d13      	ldrb	r3, [r2, #20]
    2814:	2102      	movs	r1, #2
    2816:	430b      	orrs	r3, r1
    2818:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    281a:	2000      	movs	r0, #0
    281c:	e044      	b.n	28a8 <system_clock_source_enable+0xa8>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    281e:	4a25      	ldr	r2, [pc, #148]	; (28b4 <system_clock_source_enable+0xb4>)
    2820:	6993      	ldr	r3, [r2, #24]
    2822:	2102      	movs	r1, #2
    2824:	430b      	orrs	r3, r1
    2826:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2828:	2000      	movs	r0, #0
		break;
    282a:	e03d      	b.n	28a8 <system_clock_source_enable+0xa8>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    282c:	4a20      	ldr	r2, [pc, #128]	; (28b0 <system_clock_source_enable+0xb0>)
    282e:	8a13      	ldrh	r3, [r2, #16]
    2830:	2102      	movs	r1, #2
    2832:	430b      	orrs	r3, r1
    2834:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2836:	2000      	movs	r0, #0
		break;
    2838:	e036      	b.n	28a8 <system_clock_source_enable+0xa8>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    283a:	4a1e      	ldr	r2, [pc, #120]	; (28b4 <system_clock_source_enable+0xb4>)
    283c:	6953      	ldr	r3, [r2, #20]
    283e:	2102      	movs	r1, #2
    2840:	430b      	orrs	r3, r1
    2842:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    2844:	2000      	movs	r0, #0
		break;
    2846:	e02f      	b.n	28a8 <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    2848:	491b      	ldr	r1, [pc, #108]	; (28b8 <system_clock_source_enable+0xb8>)
    284a:	680b      	ldr	r3, [r1, #0]
    284c:	2202      	movs	r2, #2
    284e:	4313      	orrs	r3, r2
    2850:	600b      	str	r3, [r1, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    2852:	4b17      	ldr	r3, [pc, #92]	; (28b0 <system_clock_source_enable+0xb0>)
    2854:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    2856:	0019      	movs	r1, r3
    2858:	32fe      	adds	r2, #254	; 0xfe
    285a:	68cb      	ldr	r3, [r1, #12]
    285c:	4213      	tst	r3, r2
    285e:	d0fc      	beq.n	285a <system_clock_source_enable+0x5a>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2860:	4a15      	ldr	r2, [pc, #84]	; (28b8 <system_clock_source_enable+0xb8>)
    2862:	6891      	ldr	r1, [r2, #8]
    2864:	4b12      	ldr	r3, [pc, #72]	; (28b0 <system_clock_source_enable+0xb0>)
    2866:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2868:	6852      	ldr	r2, [r2, #4]
    286a:	61da      	str	r2, [r3, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
    286c:	2200      	movs	r2, #0
    286e:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    2870:	0019      	movs	r1, r3
    2872:	3201      	adds	r2, #1
    2874:	32ff      	adds	r2, #255	; 0xff
    2876:	68cb      	ldr	r3, [r1, #12]
    2878:	4213      	tst	r3, r2
    287a:	d0fc      	beq.n	2876 <system_clock_source_enable+0x76>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    287c:	4b0e      	ldr	r3, [pc, #56]	; (28b8 <system_clock_source_enable+0xb8>)
    287e:	681b      	ldr	r3, [r3, #0]
    2880:	b29b      	uxth	r3, r3
    2882:	4a0b      	ldr	r2, [pc, #44]	; (28b0 <system_clock_source_enable+0xb0>)
    2884:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    2886:	2000      	movs	r0, #0
    2888:	e00e      	b.n	28a8 <system_clock_source_enable+0xa8>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    288a:	4909      	ldr	r1, [pc, #36]	; (28b0 <system_clock_source_enable+0xb0>)
    288c:	2228      	movs	r2, #40	; 0x28
    288e:	5c8b      	ldrb	r3, [r1, r2]
    2890:	2002      	movs	r0, #2
    2892:	4303      	orrs	r3, r0
    2894:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    2896:	0008      	movs	r0, r1
    2898:	2138      	movs	r1, #56	; 0x38
    289a:	3a26      	subs	r2, #38	; 0x26
    289c:	5c43      	ldrb	r3, [r0, r1]
    289e:	4213      	tst	r3, r2
    28a0:	d1fc      	bne.n	289c <system_clock_source_enable+0x9c>
	return STATUS_OK;
    28a2:	2000      	movs	r0, #0
    28a4:	e000      	b.n	28a8 <system_clock_source_enable+0xa8>
		return STATUS_OK;
    28a6:	2000      	movs	r0, #0
}
    28a8:	4770      	bx	lr
    28aa:	46c0      	nop			; (mov r8, r8)
    28ac:	0001998c 	.word	0x0001998c
    28b0:	40000c00 	.word	0x40000c00
    28b4:	40001000 	.word	0x40001000
    28b8:	20000a50 	.word	0x20000a50

000028bc <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    28bc:	2808      	cmp	r0, #8
    28be:	d832      	bhi.n	2926 <system_clock_source_disable+0x6a>
    28c0:	0080      	lsls	r0, r0, #2
    28c2:	4b1a      	ldr	r3, [pc, #104]	; (292c <system_clock_source_disable+0x70>)
    28c4:	581b      	ldr	r3, [r3, r0]
    28c6:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    28c8:	4a19      	ldr	r2, [pc, #100]	; (2930 <system_clock_source_disable+0x74>)
    28ca:	7d13      	ldrb	r3, [r2, #20]
    28cc:	2102      	movs	r1, #2
    28ce:	438b      	bics	r3, r1
    28d0:	7513      	strb	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    28d2:	2000      	movs	r0, #0
}
    28d4:	4770      	bx	lr
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    28d6:	4a17      	ldr	r2, [pc, #92]	; (2934 <system_clock_source_disable+0x78>)
    28d8:	6993      	ldr	r3, [r2, #24]
    28da:	2102      	movs	r1, #2
    28dc:	438b      	bics	r3, r1
    28de:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    28e0:	2000      	movs	r0, #0
		break;
    28e2:	e7f7      	b.n	28d4 <system_clock_source_disable+0x18>
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    28e4:	4a12      	ldr	r2, [pc, #72]	; (2930 <system_clock_source_disable+0x74>)
    28e6:	8a13      	ldrh	r3, [r2, #16]
    28e8:	2102      	movs	r1, #2
    28ea:	438b      	bics	r3, r1
    28ec:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    28ee:	2000      	movs	r0, #0
		break;
    28f0:	e7f0      	b.n	28d4 <system_clock_source_disable+0x18>
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    28f2:	4a10      	ldr	r2, [pc, #64]	; (2934 <system_clock_source_disable+0x78>)
    28f4:	6953      	ldr	r3, [r2, #20]
    28f6:	2102      	movs	r1, #2
    28f8:	438b      	bics	r3, r1
    28fa:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    28fc:	2000      	movs	r0, #0
		break;
    28fe:	e7e9      	b.n	28d4 <system_clock_source_disable+0x18>
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    2900:	4b0d      	ldr	r3, [pc, #52]	; (2938 <system_clock_source_disable+0x7c>)
    2902:	681a      	ldr	r2, [r3, #0]
    2904:	2102      	movs	r1, #2
    2906:	438a      	bics	r2, r1
    2908:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    290a:	681b      	ldr	r3, [r3, #0]
    290c:	b29b      	uxth	r3, r3
    290e:	4a08      	ldr	r2, [pc, #32]	; (2930 <system_clock_source_disable+0x74>)
    2910:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    2912:	2000      	movs	r0, #0
		break;
    2914:	e7de      	b.n	28d4 <system_clock_source_disable+0x18>
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    2916:	4906      	ldr	r1, [pc, #24]	; (2930 <system_clock_source_disable+0x74>)
    2918:	2228      	movs	r2, #40	; 0x28
    291a:	5c8b      	ldrb	r3, [r1, r2]
    291c:	2002      	movs	r0, #2
    291e:	4383      	bics	r3, r0
    2920:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2922:	2000      	movs	r0, #0
		break;
    2924:	e7d6      	b.n	28d4 <system_clock_source_disable+0x18>
		return STATUS_ERR_INVALID_ARG;
    2926:	2017      	movs	r0, #23
    2928:	e7d4      	b.n	28d4 <system_clock_source_disable+0x18>
    292a:	46c0      	nop			; (mov r8, r8)
    292c:	000199b0 	.word	0x000199b0
    2930:	40000c00 	.word	0x40000c00
    2934:	40001000 	.word	0x40001000
    2938:	20000a50 	.word	0x20000a50

0000293c <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    293c:	b5f0      	push	{r4, r5, r6, r7, lr}
    293e:	46ce      	mov	lr, r9
    2940:	4647      	mov	r7, r8
    2942:	b580      	push	{r7, lr}
    2944:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    2946:	2280      	movs	r2, #128	; 0x80
    2948:	0052      	lsls	r2, r2, #1
    294a:	4b76      	ldr	r3, [pc, #472]	; (2b24 <system_clock_init+0x1e8>)
    294c:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    294e:	3afd      	subs	r2, #253	; 0xfd
    2950:	4b75      	ldr	r3, [pc, #468]	; (2b28 <system_clock_init+0x1ec>)
    2952:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2954:	4a75      	ldr	r2, [pc, #468]	; (2b2c <system_clock_init+0x1f0>)
    2956:	6853      	ldr	r3, [r2, #4]
    2958:	211e      	movs	r1, #30
    295a:	438b      	bics	r3, r1
    295c:	391a      	subs	r1, #26
    295e:	430b      	orrs	r3, r1
    2960:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    2962:	2380      	movs	r3, #128	; 0x80
    2964:	05db      	lsls	r3, r3, #23
    2966:	789b      	ldrb	r3, [r3, #2]
    2968:	2b02      	cmp	r3, #2
    296a:	d00f      	beq.n	298c <system_clock_init+0x50>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB || SAMR34J || SAMR35J
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    296c:	2380      	movs	r3, #128	; 0x80
    296e:	05db      	lsls	r3, r3, #23
    2970:	789b      	ldrb	r3, [r3, #2]
    2972:	b25b      	sxtb	r3, r3
    2974:	2b00      	cmp	r3, #0
    2976:	db09      	blt.n	298c <system_clock_init+0x50>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    2978:	2380      	movs	r3, #128	; 0x80
    297a:	05db      	lsls	r3, r3, #23
    297c:	2201      	movs	r2, #1
    297e:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    2980:	3201      	adds	r2, #1
    2982:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    2984:	001a      	movs	r2, r3
    2986:	7993      	ldrb	r3, [r2, #6]
    2988:	2b00      	cmp	r3, #0
    298a:	d0fc      	beq.n	2986 <system_clock_init+0x4a>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    298c:	a809      	add	r0, sp, #36	; 0x24
    298e:	2300      	movs	r3, #0
    2990:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    2992:	2280      	movs	r2, #128	; 0x80
    2994:	0212      	lsls	r2, r2, #8
    2996:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    2998:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    299a:	2201      	movs	r2, #1
    299c:	70c2      	strb	r2, [r0, #3]
	config->run_in_standby      = false;
    299e:	7203      	strb	r3, [r0, #8]
	config->write_once          = false;
    29a0:	7283      	strb	r3, [r0, #10]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    29a2:	3203      	adds	r2, #3
    29a4:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    29a6:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    29a8:	4b61      	ldr	r3, [pc, #388]	; (2b30 <system_clock_init+0x1f4>)
    29aa:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    29ac:	2005      	movs	r0, #5
    29ae:	4b61      	ldr	r3, [pc, #388]	; (2b34 <system_clock_init+0x1f8>)
    29b0:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    29b2:	4961      	ldr	r1, [pc, #388]	; (2b38 <system_clock_init+0x1fc>)
    29b4:	2201      	movs	r2, #1
    29b6:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    29b8:	421a      	tst	r2, r3
    29ba:	d0fc      	beq.n	29b6 <system_clock_init+0x7a>
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    29bc:	a901      	add	r1, sp, #4
    29be:	2501      	movs	r5, #1
    29c0:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    29c2:	2400      	movs	r4, #0
    29c4:	704c      	strb	r4, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    29c6:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    29c8:	724c      	strb	r4, [r1, #9]
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    29ca:	2303      	movs	r3, #3
    29cc:	700b      	strb	r3, [r1, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    29ce:	2000      	movs	r0, #0
    29d0:	4b5a      	ldr	r3, [pc, #360]	; (2b3c <system_clock_init+0x200>)
    29d2:	4798      	blx	r3
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    29d4:	2006      	movs	r0, #6
    29d6:	4b5a      	ldr	r3, [pc, #360]	; (2b40 <system_clock_init+0x204>)
    29d8:	4798      	blx	r3
	config->run_in_standby  = false;
    29da:	466b      	mov	r3, sp
    29dc:	705c      	strb	r4, [r3, #1]
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    29de:	701d      	strb	r5, [r3, #0]
	osc16m_conf.on_demand       = 0;
    29e0:	709c      	strb	r4, [r3, #2]
	system_clock_source_osc16m_set_config(&osc16m_conf);
    29e2:	4668      	mov	r0, sp
    29e4:	4b57      	ldr	r3, [pc, #348]	; (2b44 <system_clock_init+0x208>)
    29e6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    29e8:	2006      	movs	r0, #6
    29ea:	4b52      	ldr	r3, [pc, #328]	; (2b34 <system_clock_init+0x1f8>)
    29ec:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    29ee:	494d      	ldr	r1, [pc, #308]	; (2b24 <system_clock_init+0x1e8>)
    29f0:	2210      	movs	r2, #16
    29f2:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    29f4:	421a      	tst	r2, r3
    29f6:	d0fc      	beq.n	29f2 <system_clock_init+0xb6>
	config->division_factor    = 1;
    29f8:	a901      	add	r1, sp, #4
    29fa:	2301      	movs	r3, #1
    29fc:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    29fe:	2400      	movs	r4, #0
    2a00:	704c      	strb	r4, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    2a02:	3305      	adds	r3, #5
    2a04:	700b      	strb	r3, [r1, #0]
	config->run_in_standby     = false;
    2a06:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    2a08:	724c      	strb	r4, [r1, #9]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    2a0a:	2000      	movs	r0, #0
    2a0c:	4b4b      	ldr	r3, [pc, #300]	; (2b3c <system_clock_init+0x200>)
    2a0e:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    2a10:	ab04      	add	r3, sp, #16
    2a12:	2200      	movs	r2, #0
    2a14:	809c      	strh	r4, [r3, #4]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    2a16:	80dc      	strh	r4, [r3, #6]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2a18:	721a      	strb	r2, [r3, #8]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    2a1a:	725a      	strb	r2, [r3, #9]
	config->run_in_stanby   = false;
    2a1c:	709a      	strb	r2, [r3, #2]
	config->fine_value      = 0xff / 4; /* Midpoint */
    2a1e:	213f      	movs	r1, #63	; 0x3f
    2a20:	8199      	strh	r1, [r3, #12]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    2a22:	393b      	subs	r1, #59	; 0x3b
    2a24:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    2a26:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    26 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP5)
    2a28:	4b47      	ldr	r3, [pc, #284]	; (2b48 <system_clock_init+0x20c>)
    2a2a:	681b      	ldr	r3, [r3, #0]
    2a2c:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the Calibration value is not correct */
	if (coarse == 0x3f) {
    2a2e:	2b3f      	cmp	r3, #63	; 0x3f
    2a30:	d100      	bne.n	2a34 <system_clock_init+0xf8>
    2a32:	e074      	b.n	2b1e <system_clock_init+0x1e2>
		coarse = 0x1f;
	}

	dfll_conf.coarse_value = coarse;
    2a34:	a804      	add	r0, sp, #16
    2a36:	7283      	strb	r3, [r0, #10]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    2a38:	23b7      	movs	r3, #183	; 0xb7
    2a3a:	00db      	lsls	r3, r3, #3
    2a3c:	8243      	strh	r3, [r0, #18]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    2a3e:	2307      	movs	r3, #7
    2a40:	7383      	strb	r3, [r0, #14]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    2a42:	3338      	adds	r3, #56	; 0x38
    2a44:	8203      	strh	r3, [r0, #16]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    2a46:	4b41      	ldr	r3, [pc, #260]	; (2b4c <system_clock_init+0x210>)
    2a48:	4798      	blx	r3
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2a4a:	4b41      	ldr	r3, [pc, #260]	; (2b50 <system_clock_init+0x214>)
    2a4c:	4798      	blx	r3
	config->division_factor    = 1;
    2a4e:	ac01      	add	r4, sp, #4
    2a50:	2601      	movs	r6, #1
    2a52:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    2a54:	2500      	movs	r5, #0
    2a56:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    2a58:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    2a5a:	2305      	movs	r3, #5
    2a5c:	4699      	mov	r9, r3
    2a5e:	7023      	strb	r3, [r4, #0]
    2a60:	7226      	strb	r6, [r4, #8]
    2a62:	0021      	movs	r1, r4
    2a64:	2001      	movs	r0, #1
    2a66:	4b35      	ldr	r3, [pc, #212]	; (2b3c <system_clock_init+0x200>)
    2a68:	4698      	mov	r8, r3
    2a6a:	4798      	blx	r3
    2a6c:	2001      	movs	r0, #1
    2a6e:	4f39      	ldr	r7, [pc, #228]	; (2b54 <system_clock_init+0x218>)
    2a70:	47b8      	blx	r7
	config->high_when_disabled = false;
    2a72:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    2a74:	2306      	movs	r3, #6
    2a76:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    2a78:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    2a7a:	7265      	strb	r5, [r4, #9]
    2a7c:	464b      	mov	r3, r9
    2a7e:	6063      	str	r3, [r4, #4]
    2a80:	0021      	movs	r1, r4
    2a82:	2002      	movs	r0, #2
    2a84:	47c0      	blx	r8
    2a86:	2002      	movs	r0, #2
    2a88:	47b8      	blx	r7
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    2a8a:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(OSCCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    2a8c:	0021      	movs	r1, r4
    2a8e:	2000      	movs	r0, #0
    2a90:	4b31      	ldr	r3, [pc, #196]	; (2b58 <system_clock_init+0x21c>)
    2a92:	4798      	blx	r3
		system_gclk_chan_enable(OSCCTRL_GCLK_ID_DFLL48);
    2a94:	2000      	movs	r0, #0
    2a96:	4b31      	ldr	r3, [pc, #196]	; (2b5c <system_clock_init+0x220>)
    2a98:	4798      	blx	r3
#  endif
#endif

	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    2a9a:	2007      	movs	r0, #7
    2a9c:	4b25      	ldr	r3, [pc, #148]	; (2b34 <system_clock_init+0x1f8>)
    2a9e:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    2aa0:	4920      	ldr	r1, [pc, #128]	; (2b24 <system_clock_init+0x1e8>)
    2aa2:	22d0      	movs	r2, #208	; 0xd0
    2aa4:	0112      	lsls	r2, r2, #4
    2aa6:	68cb      	ldr	r3, [r1, #12]
    2aa8:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    2aaa:	4293      	cmp	r3, r2
    2aac:	d1fb      	bne.n	2aa6 <system_clock_init+0x16a>
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    2aae:	4c2c      	ldr	r4, [pc, #176]	; (2b60 <system_clock_init+0x224>)
    2ab0:	2301      	movs	r3, #1
    2ab2:	71a3      	strb	r3, [r4, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    2ab4:	7163      	strb	r3, [r4, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    2ab6:	7123      	strb	r3, [r4, #4]
	config->high_when_disabled = false;
    2ab8:	a901      	add	r1, sp, #4
    2aba:	2300      	movs	r3, #0
    2abc:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    2abe:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    2ac0:	724b      	strb	r3, [r1, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2ac2:	3307      	adds	r3, #7
    2ac4:	700b      	strb	r3, [r1, #0]
    2ac6:	3b01      	subs	r3, #1
    2ac8:	604b      	str	r3, [r1, #4]
    2aca:	2000      	movs	r0, #0
    2acc:	4b1b      	ldr	r3, [pc, #108]	; (2b3c <system_clock_init+0x200>)
    2ace:	4798      	blx	r3
    2ad0:	2000      	movs	r0, #0
    2ad2:	4b20      	ldr	r3, [pc, #128]	; (2b54 <system_clock_init+0x218>)
    2ad4:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    2ad6:	2000      	movs	r0, #0
    2ad8:	4b22      	ldr	r3, [pc, #136]	; (2b64 <system_clock_init+0x228>)
    2ada:	4798      	blx	r3
    2adc:	7921      	ldrb	r1, [r4, #4]
    2ade:	b2c9      	uxtb	r1, r1
    2ae0:	4b21      	ldr	r3, [pc, #132]	; (2b68 <system_clock_init+0x22c>)
    2ae2:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    2ae4:	4b21      	ldr	r3, [pc, #132]	; (2b6c <system_clock_init+0x230>)
    2ae6:	4298      	cmp	r0, r3
    2ae8:	d814      	bhi.n	2b14 <system_clock_init+0x1d8>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    2aea:	2380      	movs	r3, #128	; 0x80
    2aec:	05db      	lsls	r3, r3, #23
    2aee:	789b      	ldrb	r3, [r3, #2]
    2af0:	2b00      	cmp	r3, #0
    2af2:	d00f      	beq.n	2b14 <system_clock_init+0x1d8>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    2af4:	2380      	movs	r3, #128	; 0x80
    2af6:	05db      	lsls	r3, r3, #23
    2af8:	789b      	ldrb	r3, [r3, #2]
    2afa:	b25b      	sxtb	r3, r3
    2afc:	2b00      	cmp	r3, #0
    2afe:	db09      	blt.n	2b14 <system_clock_init+0x1d8>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    2b00:	2380      	movs	r3, #128	; 0x80
    2b02:	05db      	lsls	r3, r3, #23
    2b04:	2201      	movs	r2, #1
    2b06:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    2b08:	2200      	movs	r2, #0
    2b0a:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    2b0c:	001a      	movs	r2, r3
    2b0e:	7993      	ldrb	r3, [r2, #6]
    2b10:	2b00      	cmp	r3, #0
    2b12:	d0fc      	beq.n	2b0e <system_clock_init+0x1d2>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    2b14:	b00d      	add	sp, #52	; 0x34
    2b16:	bc0c      	pop	{r2, r3}
    2b18:	4690      	mov	r8, r2
    2b1a:	4699      	mov	r9, r3
    2b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    2b1e:	3b20      	subs	r3, #32
    2b20:	e788      	b.n	2a34 <system_clock_init+0xf8>
    2b22:	46c0      	nop			; (mov r8, r8)
    2b24:	40000c00 	.word	0x40000c00
    2b28:	40001400 	.word	0x40001400
    2b2c:	41004000 	.word	0x41004000
    2b30:	000026dd 	.word	0x000026dd
    2b34:	00002801 	.word	0x00002801
    2b38:	40001000 	.word	0x40001000
    2b3c:	00002b95 	.word	0x00002b95
    2b40:	000028bd 	.word	0x000028bd
    2b44:	000026a9 	.word	0x000026a9
    2b48:	00806020 	.word	0x00806020
    2b4c:	00002779 	.word	0x00002779
    2b50:	00002b71 	.word	0x00002b71
    2b54:	00002c41 	.word	0x00002c41
    2b58:	00002d5d 	.word	0x00002d5d
    2b5c:	00002ced 	.word	0x00002ced
    2b60:	40000400 	.word	0x40000400
    2b64:	00002c81 	.word	0x00002c81
    2b68:	00011769 	.word	0x00011769
    2b6c:	00b71b00 	.word	0x00b71b00

00002b70 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    2b70:	4a06      	ldr	r2, [pc, #24]	; (2b8c <system_gclk_init+0x1c>)
    2b72:	6953      	ldr	r3, [r2, #20]
    2b74:	2140      	movs	r1, #64	; 0x40
    2b76:	430b      	orrs	r3, r1
    2b78:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    2b7a:	2201      	movs	r2, #1
    2b7c:	4b04      	ldr	r3, [pc, #16]	; (2b90 <system_gclk_init+0x20>)
    2b7e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    2b80:	0019      	movs	r1, r3
    2b82:	780b      	ldrb	r3, [r1, #0]
    2b84:	4213      	tst	r3, r2
    2b86:	d1fc      	bne.n	2b82 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2b88:	4770      	bx	lr
    2b8a:	46c0      	nop			; (mov r8, r8)
    2b8c:	40000400 	.word	0x40000400
    2b90:	40001800 	.word	0x40001800

00002b94 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2b94:	b570      	push	{r4, r5, r6, lr}
    2b96:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2b98:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2b9a:	784b      	ldrb	r3, [r1, #1]
    2b9c:	2b00      	cmp	r3, #0
    2b9e:	d002      	beq.n	2ba6 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2ba0:	2380      	movs	r3, #128	; 0x80
    2ba2:	00db      	lsls	r3, r3, #3
    2ba4:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2ba6:	7a4b      	ldrb	r3, [r1, #9]
    2ba8:	2b00      	cmp	r3, #0
    2baa:	d002      	beq.n	2bb2 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2bac:	2380      	movs	r3, #128	; 0x80
    2bae:	011b      	lsls	r3, r3, #4
    2bb0:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2bb2:	6848      	ldr	r0, [r1, #4]
    2bb4:	2801      	cmp	r0, #1
    2bb6:	d90f      	bls.n	2bd8 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2bb8:	1e43      	subs	r3, r0, #1
    2bba:	4218      	tst	r0, r3
    2bbc:	d131      	bne.n	2c22 <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2bbe:	2802      	cmp	r0, #2
    2bc0:	d92d      	bls.n	2c1e <system_gclk_gen_set_config+0x8a>
    2bc2:	2302      	movs	r3, #2
    2bc4:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2bc6:	3201      	adds	r2, #1
						mask <<= 1) {
    2bc8:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2bca:	4298      	cmp	r0, r3
    2bcc:	d8fb      	bhi.n	2bc6 <system_gclk_gen_set_config+0x32>
    2bce:	2380      	movs	r3, #128	; 0x80
    2bd0:	015b      	lsls	r3, r3, #5
    2bd2:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    2bd4:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2bd6:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2bd8:	7a0b      	ldrb	r3, [r1, #8]
    2bda:	2b00      	cmp	r3, #0
    2bdc:	d002      	beq.n	2be4 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2bde:	2380      	movs	r3, #128	; 0x80
    2be0:	019b      	lsls	r3, r3, #6
    2be2:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    2be4:	2604      	movs	r6, #4
    2be6:	40a6      	lsls	r6, r4
    2be8:	4911      	ldr	r1, [pc, #68]	; (2c30 <system_gclk_gen_set_config+0x9c>)
    2bea:	4a12      	ldr	r2, [pc, #72]	; (2c34 <system_gclk_gen_set_config+0xa0>)
    2bec:	684b      	ldr	r3, [r1, #4]
    2bee:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    2bf0:	421e      	tst	r6, r3
    2bf2:	d1fb      	bne.n	2bec <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    2bf4:	4b10      	ldr	r3, [pc, #64]	; (2c38 <system_gclk_gen_set_config+0xa4>)
    2bf6:	4798      	blx	r3
    2bf8:	00a4      	lsls	r4, r4, #2
    2bfa:	4b0d      	ldr	r3, [pc, #52]	; (2c30 <system_gclk_gen_set_config+0x9c>)
    2bfc:	469c      	mov	ip, r3
    2bfe:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    2c00:	6a22      	ldr	r2, [r4, #32]
    2c02:	2380      	movs	r3, #128	; 0x80
    2c04:	005b      	lsls	r3, r3, #1
    2c06:	401a      	ands	r2, r3
    2c08:	432a      	orrs	r2, r5
    2c0a:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    2c0c:	4661      	mov	r1, ip
    2c0e:	4a09      	ldr	r2, [pc, #36]	; (2c34 <system_gclk_gen_set_config+0xa0>)
    2c10:	684b      	ldr	r3, [r1, #4]
    2c12:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    2c14:	421e      	tst	r6, r3
    2c16:	d1fb      	bne.n	2c10 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    2c18:	4b08      	ldr	r3, [pc, #32]	; (2c3c <system_gclk_gen_set_config+0xa8>)
    2c1a:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    2c1c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    2c1e:	2200      	movs	r2, #0
    2c20:	e7d5      	b.n	2bce <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    2c22:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2c24:	2380      	movs	r3, #128	; 0x80
    2c26:	009b      	lsls	r3, r3, #2
    2c28:	4318      	orrs	r0, r3
    2c2a:	4305      	orrs	r5, r0
    2c2c:	e7d4      	b.n	2bd8 <system_gclk_gen_set_config+0x44>
    2c2e:	46c0      	nop			; (mov r8, r8)
    2c30:	40001800 	.word	0x40001800
    2c34:	000007fc 	.word	0x000007fc
    2c38:	00000115 	.word	0x00000115
    2c3c:	00000155 	.word	0x00000155

00002c40 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2c40:	b510      	push	{r4, lr}
    2c42:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    2c44:	2204      	movs	r2, #4
    2c46:	4082      	lsls	r2, r0
    2c48:	4809      	ldr	r0, [pc, #36]	; (2c70 <system_gclk_gen_enable+0x30>)
    2c4a:	490a      	ldr	r1, [pc, #40]	; (2c74 <system_gclk_gen_enable+0x34>)
    2c4c:	6843      	ldr	r3, [r0, #4]
    2c4e:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    2c50:	421a      	tst	r2, r3
    2c52:	d1fb      	bne.n	2c4c <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    2c54:	4b08      	ldr	r3, [pc, #32]	; (2c78 <system_gclk_gen_enable+0x38>)
    2c56:	4798      	blx	r3
    2c58:	00a4      	lsls	r4, r4, #2
    2c5a:	4b05      	ldr	r3, [pc, #20]	; (2c70 <system_gclk_gen_enable+0x30>)
    2c5c:	469c      	mov	ip, r3
    2c5e:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    2c60:	6a22      	ldr	r2, [r4, #32]
    2c62:	2380      	movs	r3, #128	; 0x80
    2c64:	005b      	lsls	r3, r3, #1
    2c66:	4313      	orrs	r3, r2
    2c68:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    2c6a:	4b04      	ldr	r3, [pc, #16]	; (2c7c <system_gclk_gen_enable+0x3c>)
    2c6c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2c6e:	bd10      	pop	{r4, pc}
    2c70:	40001800 	.word	0x40001800
    2c74:	000007fc 	.word	0x000007fc
    2c78:	00000115 	.word	0x00000115
    2c7c:	00000155 	.word	0x00000155

00002c80 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c82:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    2c84:	2204      	movs	r2, #4
    2c86:	4082      	lsls	r2, r0
    2c88:	4812      	ldr	r0, [pc, #72]	; (2cd4 <system_gclk_gen_get_hz+0x54>)
    2c8a:	4913      	ldr	r1, [pc, #76]	; (2cd8 <system_gclk_gen_get_hz+0x58>)
    2c8c:	6843      	ldr	r3, [r0, #4]
    2c8e:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    2c90:	421a      	tst	r2, r3
    2c92:	d1fb      	bne.n	2c8c <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    2c94:	4b11      	ldr	r3, [pc, #68]	; (2cdc <system_gclk_gen_get_hz+0x5c>)
    2c96:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    2c98:	4f0e      	ldr	r7, [pc, #56]	; (2cd4 <system_gclk_gen_get_hz+0x54>)
    2c9a:	3408      	adds	r4, #8
    2c9c:	00a4      	lsls	r4, r4, #2
    2c9e:	59e0      	ldr	r0, [r4, r7]
    2ca0:	0700      	lsls	r0, r0, #28
    2ca2:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2ca4:	4b0e      	ldr	r3, [pc, #56]	; (2ce0 <system_gclk_gen_get_hz+0x60>)
    2ca6:	4798      	blx	r3
    2ca8:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    2caa:	59e5      	ldr	r5, [r4, r7]
    2cac:	04ed      	lsls	r5, r5, #19
    2cae:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    2cb0:	59e4      	ldr	r4, [r4, r7]
    2cb2:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    2cb4:	4b0b      	ldr	r3, [pc, #44]	; (2ce4 <system_gclk_gen_get_hz+0x64>)
    2cb6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2cb8:	2d00      	cmp	r5, #0
    2cba:	d107      	bne.n	2ccc <system_gclk_gen_get_hz+0x4c>
    2cbc:	2c01      	cmp	r4, #1
    2cbe:	d907      	bls.n	2cd0 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    2cc0:	0021      	movs	r1, r4
    2cc2:	0030      	movs	r0, r6
    2cc4:	4b08      	ldr	r3, [pc, #32]	; (2ce8 <system_gclk_gen_get_hz+0x68>)
    2cc6:	4798      	blx	r3
    2cc8:	0006      	movs	r6, r0
    2cca:	e001      	b.n	2cd0 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    2ccc:	3401      	adds	r4, #1
    2cce:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    2cd0:	0030      	movs	r0, r6
    2cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2cd4:	40001800 	.word	0x40001800
    2cd8:	000007fc 	.word	0x000007fc
    2cdc:	00000115 	.word	0x00000115
    2ce0:	00002615 	.word	0x00002615
    2ce4:	00000155 	.word	0x00000155
    2ce8:	00011769 	.word	0x00011769

00002cec <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2cec:	b510      	push	{r4, lr}
    2cee:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2cf0:	4b09      	ldr	r3, [pc, #36]	; (2d18 <system_gclk_chan_enable+0x2c>)
    2cf2:	4798      	blx	r3
    2cf4:	00a0      	lsls	r0, r4, #2
    2cf6:	4b09      	ldr	r3, [pc, #36]	; (2d1c <system_gclk_chan_enable+0x30>)
    2cf8:	469c      	mov	ip, r3
    2cfa:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    2cfc:	2280      	movs	r2, #128	; 0x80
    2cfe:	5883      	ldr	r3, [r0, r2]
    2d00:	2140      	movs	r1, #64	; 0x40
    2d02:	430b      	orrs	r3, r1
    2d04:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    2d06:	3140      	adds	r1, #64	; 0x40
    2d08:	3a40      	subs	r2, #64	; 0x40
    2d0a:	5843      	ldr	r3, [r0, r1]
    2d0c:	421a      	tst	r2, r3
    2d0e:	d0fc      	beq.n	2d0a <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    2d10:	4b03      	ldr	r3, [pc, #12]	; (2d20 <system_gclk_chan_enable+0x34>)
    2d12:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    2d14:	bd10      	pop	{r4, pc}
    2d16:	46c0      	nop			; (mov r8, r8)
    2d18:	00000115 	.word	0x00000115
    2d1c:	40001800 	.word	0x40001800
    2d20:	00000155 	.word	0x00000155

00002d24 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2d24:	b510      	push	{r4, lr}
    2d26:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2d28:	4b09      	ldr	r3, [pc, #36]	; (2d50 <system_gclk_chan_disable+0x2c>)
    2d2a:	4798      	blx	r3
    2d2c:	00a0      	lsls	r0, r4, #2
    2d2e:	4b09      	ldr	r3, [pc, #36]	; (2d54 <system_gclk_chan_disable+0x30>)
    2d30:	469c      	mov	ip, r3
    2d32:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    2d34:	2280      	movs	r2, #128	; 0x80
    2d36:	5883      	ldr	r3, [r0, r2]
    2d38:	2140      	movs	r1, #64	; 0x40
    2d3a:	438b      	bics	r3, r1
    2d3c:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    2d3e:	3140      	adds	r1, #64	; 0x40
    2d40:	3a40      	subs	r2, #64	; 0x40
    2d42:	5843      	ldr	r3, [r0, r1]
    2d44:	421a      	tst	r2, r3
    2d46:	d1fc      	bne.n	2d42 <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    2d48:	4b03      	ldr	r3, [pc, #12]	; (2d58 <system_gclk_chan_disable+0x34>)
    2d4a:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    2d4c:	bd10      	pop	{r4, pc}
    2d4e:	46c0      	nop			; (mov r8, r8)
    2d50:	00000115 	.word	0x00000115
    2d54:	40001800 	.word	0x40001800
    2d58:	00000155 	.word	0x00000155

00002d5c <system_gclk_chan_set_config>:
{
    2d5c:	b570      	push	{r4, r5, r6, lr}
    2d5e:	0004      	movs	r4, r0
    2d60:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    2d62:	4b05      	ldr	r3, [pc, #20]	; (2d78 <system_gclk_chan_set_config+0x1c>)
    2d64:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    2d66:	782a      	ldrb	r2, [r5, #0]
    2d68:	230f      	movs	r3, #15
    2d6a:	4013      	ands	r3, r2
    2d6c:	3420      	adds	r4, #32
    2d6e:	00a4      	lsls	r4, r4, #2
    2d70:	4a02      	ldr	r2, [pc, #8]	; (2d7c <system_gclk_chan_set_config+0x20>)
    2d72:	50a3      	str	r3, [r4, r2]
}
    2d74:	bd70      	pop	{r4, r5, r6, pc}
    2d76:	46c0      	nop			; (mov r8, r8)
    2d78:	00002d25 	.word	0x00002d25
    2d7c:	40001800 	.word	0x40001800

00002d80 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2d80:	b510      	push	{r4, lr}
    2d82:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2d84:	4b06      	ldr	r3, [pc, #24]	; (2da0 <system_gclk_chan_get_hz+0x20>)
    2d86:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    2d88:	3420      	adds	r4, #32
    2d8a:	00a4      	lsls	r4, r4, #2
    2d8c:	4b05      	ldr	r3, [pc, #20]	; (2da4 <system_gclk_chan_get_hz+0x24>)
    2d8e:	58e4      	ldr	r4, [r4, r3]
    2d90:	0724      	lsls	r4, r4, #28
    2d92:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2d94:	4b04      	ldr	r3, [pc, #16]	; (2da8 <system_gclk_chan_get_hz+0x28>)
    2d96:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2d98:	0020      	movs	r0, r4
    2d9a:	4b04      	ldr	r3, [pc, #16]	; (2dac <system_gclk_chan_get_hz+0x2c>)
    2d9c:	4798      	blx	r3
}
    2d9e:	bd10      	pop	{r4, pc}
    2da0:	00000115 	.word	0x00000115
    2da4:	40001800 	.word	0x40001800
    2da8:	00000155 	.word	0x00000155
    2dac:	00002c81 	.word	0x00002c81

00002db0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2db0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2db2:	78d3      	ldrb	r3, [r2, #3]
    2db4:	2b00      	cmp	r3, #0
    2db6:	d135      	bne.n	2e24 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2db8:	7813      	ldrb	r3, [r2, #0]
    2dba:	2b80      	cmp	r3, #128	; 0x80
    2dbc:	d029      	beq.n	2e12 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2dbe:	061b      	lsls	r3, r3, #24
    2dc0:	2480      	movs	r4, #128	; 0x80
    2dc2:	0264      	lsls	r4, r4, #9
    2dc4:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2dc6:	7854      	ldrb	r4, [r2, #1]
    2dc8:	2502      	movs	r5, #2
    2dca:	43ac      	bics	r4, r5
    2dcc:	d106      	bne.n	2ddc <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2dce:	7894      	ldrb	r4, [r2, #2]
    2dd0:	2c00      	cmp	r4, #0
    2dd2:	d120      	bne.n	2e16 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2dd4:	2480      	movs	r4, #128	; 0x80
    2dd6:	02a4      	lsls	r4, r4, #10
    2dd8:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2dda:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2ddc:	7854      	ldrb	r4, [r2, #1]
    2dde:	3c01      	subs	r4, #1
    2de0:	2c01      	cmp	r4, #1
    2de2:	d91c      	bls.n	2e1e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2de4:	040d      	lsls	r5, r1, #16
    2de6:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2de8:	24a0      	movs	r4, #160	; 0xa0
    2dea:	05e4      	lsls	r4, r4, #23
    2dec:	432c      	orrs	r4, r5
    2dee:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2df0:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2df2:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2df4:	24d0      	movs	r4, #208	; 0xd0
    2df6:	0624      	lsls	r4, r4, #24
    2df8:	432c      	orrs	r4, r5
    2dfa:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2dfc:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2dfe:	78d4      	ldrb	r4, [r2, #3]
    2e00:	2c00      	cmp	r4, #0
    2e02:	d122      	bne.n	2e4a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2e04:	035b      	lsls	r3, r3, #13
    2e06:	d51c      	bpl.n	2e42 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2e08:	7893      	ldrb	r3, [r2, #2]
    2e0a:	2b01      	cmp	r3, #1
    2e0c:	d01e      	beq.n	2e4c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    2e0e:	6141      	str	r1, [r0, #20]
    2e10:	e017      	b.n	2e42 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    2e12:	2300      	movs	r3, #0
    2e14:	e7d7      	b.n	2dc6 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2e16:	24c0      	movs	r4, #192	; 0xc0
    2e18:	02e4      	lsls	r4, r4, #11
    2e1a:	4323      	orrs	r3, r4
    2e1c:	e7dd      	b.n	2dda <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2e1e:	4c0d      	ldr	r4, [pc, #52]	; (2e54 <_system_pinmux_config+0xa4>)
    2e20:	4023      	ands	r3, r4
    2e22:	e7df      	b.n	2de4 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2e24:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2e26:	040c      	lsls	r4, r1, #16
    2e28:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2e2a:	23a0      	movs	r3, #160	; 0xa0
    2e2c:	05db      	lsls	r3, r3, #23
    2e2e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2e30:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2e32:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2e34:	23d0      	movs	r3, #208	; 0xd0
    2e36:	061b      	lsls	r3, r3, #24
    2e38:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2e3a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2e3c:	78d3      	ldrb	r3, [r2, #3]
    2e3e:	2b00      	cmp	r3, #0
    2e40:	d103      	bne.n	2e4a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2e42:	7853      	ldrb	r3, [r2, #1]
    2e44:	3b01      	subs	r3, #1
    2e46:	2b01      	cmp	r3, #1
    2e48:	d902      	bls.n	2e50 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    2e4a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2e4c:	6181      	str	r1, [r0, #24]
    2e4e:	e7f8      	b.n	2e42 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2e50:	6081      	str	r1, [r0, #8]
}
    2e52:	e7fa      	b.n	2e4a <_system_pinmux_config+0x9a>
    2e54:	fffbffff 	.word	0xfffbffff

00002e58 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2e58:	b510      	push	{r4, lr}
    2e5a:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    2e5c:	09c1      	lsrs	r1, r0, #7
		return NULL;
    2e5e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2e60:	2900      	cmp	r1, #0
    2e62:	d104      	bne.n	2e6e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    2e64:	0943      	lsrs	r3, r0, #5
    2e66:	01db      	lsls	r3, r3, #7
    2e68:	4905      	ldr	r1, [pc, #20]	; (2e80 <system_pinmux_pin_set_config+0x28>)
    2e6a:	468c      	mov	ip, r1
    2e6c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2e6e:	241f      	movs	r4, #31
    2e70:	4020      	ands	r0, r4
    2e72:	2101      	movs	r1, #1
    2e74:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2e76:	0018      	movs	r0, r3
    2e78:	4b02      	ldr	r3, [pc, #8]	; (2e84 <system_pinmux_pin_set_config+0x2c>)
    2e7a:	4798      	blx	r3
}
    2e7c:	bd10      	pop	{r4, pc}
    2e7e:	46c0      	nop			; (mov r8, r8)
    2e80:	40002800 	.word	0x40002800
    2e84:	00002db1 	.word	0x00002db1

00002e88 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2e88:	4770      	bx	lr
	...

00002e8c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2e8c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2e8e:	4b05      	ldr	r3, [pc, #20]	; (2ea4 <system_init+0x18>)
    2e90:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2e92:	4b05      	ldr	r3, [pc, #20]	; (2ea8 <system_init+0x1c>)
    2e94:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2e96:	4b05      	ldr	r3, [pc, #20]	; (2eac <system_init+0x20>)
    2e98:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2e9a:	4b05      	ldr	r3, [pc, #20]	; (2eb0 <system_init+0x24>)
    2e9c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2e9e:	4b05      	ldr	r3, [pc, #20]	; (2eb4 <system_init+0x28>)
    2ea0:	4798      	blx	r3
}
    2ea2:	bd10      	pop	{r4, pc}
    2ea4:	0000293d 	.word	0x0000293d
    2ea8:	0000021d 	.word	0x0000021d
    2eac:	00002e89 	.word	0x00002e89
    2eb0:	00000961 	.word	0x00000961
    2eb4:	00002e89 	.word	0x00002e89

00002eb8 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    2eb8:	b530      	push	{r4, r5, lr}
    2eba:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2ebc:	a901      	add	r1, sp, #4
    2ebe:	4b0c      	ldr	r3, [pc, #48]	; (2ef0 <_tc_get_inst_index+0x38>)
    2ec0:	000a      	movs	r2, r1
    2ec2:	cb32      	ldmia	r3!, {r1, r4, r5}
    2ec4:	c232      	stmia	r2!, {r1, r4, r5}
    2ec6:	cb12      	ldmia	r3!, {r1, r4}
    2ec8:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    2eca:	9b01      	ldr	r3, [sp, #4]
    2ecc:	4298      	cmp	r0, r3
    2ece:	d00b      	beq.n	2ee8 <_tc_get_inst_index+0x30>
    2ed0:	2301      	movs	r3, #1
    2ed2:	a901      	add	r1, sp, #4
    2ed4:	009a      	lsls	r2, r3, #2
    2ed6:	5852      	ldr	r2, [r2, r1]
    2ed8:	4282      	cmp	r2, r0
    2eda:	d006      	beq.n	2eea <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2edc:	3301      	adds	r3, #1
    2ede:	2b05      	cmp	r3, #5
    2ee0:	d1f8      	bne.n	2ed4 <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    2ee2:	2000      	movs	r0, #0
}
    2ee4:	b007      	add	sp, #28
    2ee6:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2ee8:	2300      	movs	r3, #0
			return i;
    2eea:	b2d8      	uxtb	r0, r3
    2eec:	e7fa      	b.n	2ee4 <_tc_get_inst_index+0x2c>
    2eee:	46c0      	nop			; (mov r8, r8)
    2ef0:	000199fc 	.word	0x000199fc

00002ef4 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    2ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ef6:	46c6      	mov	lr, r8
    2ef8:	b500      	push	{lr}
    2efa:	b08e      	sub	sp, #56	; 0x38
    2efc:	0004      	movs	r4, r0
    2efe:	000d      	movs	r5, r1
    2f00:	0016      	movs	r6, r2
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    2f02:	0008      	movs	r0, r1
    2f04:	4bae      	ldr	r3, [pc, #696]	; (31c0 <tc_init+0x2cc>)
    2f06:	4798      	blx	r3
    2f08:	4680      	mov	r8, r0
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC4};
#elif (SAML21J) || (SAMR34J) || (SAMR35J)
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC2_GCLK_ID, TC3_GCLK_ID, TC4_GCLK_ID};
    2f0a:	ab0c      	add	r3, sp, #48	; 0x30
    2f0c:	221b      	movs	r2, #27
    2f0e:	701a      	strb	r2, [r3, #0]
    2f10:	705a      	strb	r2, [r3, #1]
    2f12:	3201      	adds	r2, #1
    2f14:	709a      	strb	r2, [r3, #2]
    2f16:	70da      	strb	r2, [r3, #3]
    2f18:	3201      	adds	r2, #1
    2f1a:	711a      	strb	r2, [r3, #4]
	/* Array of MCLK APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    2f1c:	a902      	add	r1, sp, #8
    2f1e:	4ba9      	ldr	r3, [pc, #676]	; (31c4 <tc_init+0x2d0>)
    2f20:	3314      	adds	r3, #20
    2f22:	000a      	movs	r2, r1
    2f24:	cb83      	ldmia	r3!, {r0, r1, r7}
    2f26:	c283      	stmia	r2!, {r0, r1, r7}
    2f28:	cb83      	ldmia	r3!, {r0, r1, r7}
    2f2a:	c283      	stmia	r2!, {r0, r1, r7}
    2f2c:	cb83      	ldmia	r3!, {r0, r1, r7}
    2f2e:	c283      	stmia	r2!, {r0, r1, r7}
    2f30:	681b      	ldr	r3, [r3, #0]
    2f32:	6013      	str	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    2f34:	2300      	movs	r3, #0
    2f36:	60a3      	str	r3, [r4, #8]
    2f38:	60e3      	str	r3, [r4, #12]
    2f3a:	6123      	str	r3, [r4, #16]
    2f3c:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    2f3e:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    2f40:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    2f42:	4643      	mov	r3, r8
    2f44:	009a      	lsls	r2, r3, #2
    2f46:	4ba0      	ldr	r3, [pc, #640]	; (31c8 <tc_init+0x2d4>)
    2f48:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    2f4a:	6025      	str	r5, [r4, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    2f4c:	2334      	movs	r3, #52	; 0x34
    2f4e:	5cf3      	ldrb	r3, [r6, r3]
    2f50:	76a3      	strb	r3, [r4, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    2f52:	78f3      	ldrb	r3, [r6, #3]
    2f54:	2b08      	cmp	r3, #8
    2f56:	d008      	beq.n	2f6a <tc_init+0x76>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    2f58:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    2f5a:	682b      	ldr	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    2f5c:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    2f5e:	07db      	lsls	r3, r3, #31
    2f60:	d508      	bpl.n	2f74 <tc_init+0x80>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    2f62:	b00e      	add	sp, #56	; 0x38
    2f64:	bc04      	pop	{r2}
    2f66:	4690      	mov	r8, r2
    2f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    2f6a:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    2f6c:	4642      	mov	r2, r8
    2f6e:	07d2      	lsls	r2, r2, #31
    2f70:	d4f7      	bmi.n	2f62 <tc_init+0x6e>
    2f72:	e7f1      	b.n	2f58 <tc_init+0x64>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    2f74:	7aeb      	ldrb	r3, [r5, #11]
		return STATUS_ERR_DENIED;
    2f76:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    2f78:	079b      	lsls	r3, r3, #30
    2f7a:	d4f2      	bmi.n	2f62 <tc_init+0x6e>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    2f7c:	682b      	ldr	r3, [r5, #0]
    2f7e:	079b      	lsls	r3, r3, #30
    2f80:	d4ef      	bmi.n	2f62 <tc_init+0x6e>
	if (config->pwm_channel[0].enabled) {
    2f82:	7c33      	ldrb	r3, [r6, #16]
    2f84:	2b00      	cmp	r3, #0
    2f86:	d112      	bne.n	2fae <tc_init+0xba>
	if (config->pwm_channel[1].enabled) {
    2f88:	7f33      	ldrb	r3, [r6, #28]
    2f8a:	2b00      	cmp	r3, #0
    2f8c:	d11b      	bne.n	2fc6 <tc_init+0xd2>
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    2f8e:	4643      	mov	r3, r8
    2f90:	005a      	lsls	r2, r3, #1
    2f92:	a902      	add	r1, sp, #8
    2f94:	1c53      	adds	r3, r2, #1
    2f96:	009b      	lsls	r3, r3, #2
    2f98:	5858      	ldr	r0, [r3, r1]
    2f9a:	4643      	mov	r3, r8
    2f9c:	00db      	lsls	r3, r3, #3
    2f9e:	585b      	ldr	r3, [r3, r1]
	switch (bus) {
    2fa0:	b2d9      	uxtb	r1, r3
    2fa2:	2904      	cmp	r1, #4
    2fa4:	d823      	bhi.n	2fee <tc_init+0xfa>
    2fa6:	008b      	lsls	r3, r1, #2
    2fa8:	4988      	ldr	r1, [pc, #544]	; (31cc <tc_init+0x2d8>)
    2faa:	58cb      	ldr	r3, [r1, r3]
    2fac:	469f      	mov	pc, r3
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2fae:	a901      	add	r1, sp, #4
    2fb0:	2301      	movs	r3, #1
    2fb2:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    2fb4:	2200      	movs	r2, #0
    2fb6:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    2fb8:	7e32      	ldrb	r2, [r6, #24]
    2fba:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2fbc:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    2fbe:	7d30      	ldrb	r0, [r6, #20]
    2fc0:	4b83      	ldr	r3, [pc, #524]	; (31d0 <tc_init+0x2dc>)
    2fc2:	4798      	blx	r3
    2fc4:	e7e0      	b.n	2f88 <tc_init+0x94>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2fc6:	a901      	add	r1, sp, #4
    2fc8:	2301      	movs	r3, #1
    2fca:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    2fcc:	2200      	movs	r2, #0
    2fce:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    2fd0:	3224      	adds	r2, #36	; 0x24
    2fd2:	18b2      	adds	r2, r6, r2
    2fd4:	7812      	ldrb	r2, [r2, #0]
    2fd6:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2fd8:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    2fda:	331f      	adds	r3, #31
    2fdc:	18f3      	adds	r3, r6, r3
    2fde:	7818      	ldrb	r0, [r3, #0]
    2fe0:	4b7b      	ldr	r3, [pc, #492]	; (31d0 <tc_init+0x2dc>)
    2fe2:	4798      	blx	r3
    2fe4:	e7d3      	b.n	2f8e <tc_init+0x9a>
			MCLK->APBAMASK.reg |= mask;
    2fe6:	497b      	ldr	r1, [pc, #492]	; (31d4 <tc_init+0x2e0>)
    2fe8:	694b      	ldr	r3, [r1, #20]
    2fea:	4318      	orrs	r0, r3
    2fec:	6148      	str	r0, [r1, #20]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    2fee:	78f3      	ldrb	r3, [r6, #3]
    2ff0:	2b08      	cmp	r3, #8
    2ff2:	d100      	bne.n	2ff6 <tc_init+0x102>
    2ff4:	e086      	b.n	3104 <tc_init+0x210>
	gclk_chan_config.source_generator = config->clock_source;
    2ff6:	7833      	ldrb	r3, [r6, #0]
    2ff8:	466a      	mov	r2, sp
    2ffa:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    2ffc:	ab0c      	add	r3, sp, #48	; 0x30
    2ffe:	4642      	mov	r2, r8
    3000:	5c9f      	ldrb	r7, [r3, r2]
    3002:	4669      	mov	r1, sp
    3004:	0038      	movs	r0, r7
    3006:	4b74      	ldr	r3, [pc, #464]	; (31d8 <tc_init+0x2e4>)
    3008:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    300a:	0038      	movs	r0, r7
    300c:	4b73      	ldr	r3, [pc, #460]	; (31dc <tc_init+0x2e8>)
    300e:	4798      	blx	r3
			(uint32_t)config->counter_size |
    3010:	78f3      	ldrb	r3, [r6, #3]
    3012:	79f2      	ldrb	r2, [r6, #7]
    3014:	4313      	orrs	r3, r2
			(uint32_t)config->clock_prescaler;
    3016:	88b2      	ldrh	r2, [r6, #4]
	ctrla_tmp =
    3018:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    301a:	7a72      	ldrb	r2, [r6, #9]
    301c:	2a00      	cmp	r2, #0
    301e:	d002      	beq.n	3026 <tc_init+0x132>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    3020:	2280      	movs	r2, #128	; 0x80
    3022:	0252      	lsls	r2, r2, #9
    3024:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    3026:	7ab2      	ldrb	r2, [r6, #10]
    3028:	2a00      	cmp	r2, #0
    302a:	d002      	beq.n	3032 <tc_init+0x13e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    302c:	2280      	movs	r2, #128	; 0x80
    302e:	0292      	lsls	r2, r2, #10
    3030:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    3032:	7af2      	ldrb	r2, [r6, #11]
    3034:	2a00      	cmp	r2, #0
    3036:	d002      	beq.n	303e <tc_init+0x14a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    3038:	2280      	movs	r2, #128	; 0x80
    303a:	0352      	lsls	r2, r2, #13
    303c:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    303e:	7b32      	ldrb	r2, [r6, #12]
    3040:	2a00      	cmp	r2, #0
    3042:	d002      	beq.n	304a <tc_init+0x156>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    3044:	2280      	movs	r2, #128	; 0x80
    3046:	0392      	lsls	r2, r2, #14
    3048:	4313      	orrs	r3, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    304a:	7871      	ldrb	r1, [r6, #1]
    304c:	0189      	lsls	r1, r1, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    304e:	78b2      	ldrb	r2, [r6, #2]
    3050:	01d2      	lsls	r2, r2, #7
    3052:	4311      	orrs	r1, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    3054:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3056:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	return (tc_module->SYNCBUSY.reg);
    3058:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    305a:	2b00      	cmp	r3, #0
    305c:	d1fc      	bne.n	3058 <tc_init+0x164>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    305e:	6029      	str	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3060:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    3062:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    3064:	2b00      	cmp	r3, #0
    3066:	d1fc      	bne.n	3062 <tc_init+0x16e>
	hw->COUNT8.WAVE.reg = config->wave_generation;
    3068:	79b3      	ldrb	r3, [r6, #6]
    306a:	732b      	strb	r3, [r5, #12]
	if (config->oneshot) {
    306c:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    306e:	1e4b      	subs	r3, r1, #1
    3070:	4199      	sbcs	r1, r3
    3072:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    3074:	7bb3      	ldrb	r3, [r6, #14]
    3076:	2b00      	cmp	r3, #0
    3078:	d001      	beq.n	307e <tc_init+0x18a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    307a:	2301      	movs	r3, #1
    307c:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    307e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    3080:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    3082:	2b00      	cmp	r3, #0
    3084:	d1fc      	bne.n	3080 <tc_init+0x18c>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    3086:	33ff      	adds	r3, #255	; 0xff
    3088:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    308a:	2900      	cmp	r1, #0
    308c:	d004      	beq.n	3098 <tc_init+0x1a4>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    308e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    3090:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
    3092:	2b00      	cmp	r3, #0
    3094:	d1fc      	bne.n	3090 <tc_init+0x19c>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    3096:	7169      	strb	r1, [r5, #5]
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    3098:	7a33      	ldrb	r3, [r6, #8]
    309a:	736b      	strb	r3, [r5, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    309c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    309e:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    30a0:	2b00      	cmp	r3, #0
    30a2:	d1fc      	bne.n	309e <tc_init+0x1aa>
	switch (module_inst->counter_size) {
    30a4:	7923      	ldrb	r3, [r4, #4]
    30a6:	2b04      	cmp	r3, #4
    30a8:	d059      	beq.n	315e <tc_init+0x26a>
    30aa:	2b08      	cmp	r3, #8
    30ac:	d074      	beq.n	3198 <tc_init+0x2a4>
	return STATUS_ERR_INVALID_ARG;
    30ae:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    30b0:	2b00      	cmp	r3, #0
    30b2:	d000      	beq.n	30b6 <tc_init+0x1c2>
    30b4:	e755      	b.n	2f62 <tc_init+0x6e>
    30b6:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    30b8:	2b00      	cmp	r3, #0
    30ba:	d1fc      	bne.n	30b6 <tc_init+0x1c2>
				= config->counter_16_bit.value;
    30bc:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    30be:	82ab      	strh	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    30c0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    30c2:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    30c4:	2b00      	cmp	r3, #0
    30c6:	d1fc      	bne.n	30c2 <tc_init+0x1ce>
					config->counter_16_bit.compare_capture_channel[0];
    30c8:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    30ca:	83ab      	strh	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    30cc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    30ce:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    30d0:	2b00      	cmp	r3, #0
    30d2:	d1fc      	bne.n	30ce <tc_init+0x1da>
					config->counter_16_bit.compare_capture_channel[1];
    30d4:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    30d6:	83eb      	strh	r3, [r5, #30]
			return STATUS_OK;
    30d8:	2000      	movs	r0, #0
    30da:	e742      	b.n	2f62 <tc_init+0x6e>
			MCLK->APBBMASK.reg |= mask;
    30dc:	493d      	ldr	r1, [pc, #244]	; (31d4 <tc_init+0x2e0>)
    30de:	698b      	ldr	r3, [r1, #24]
    30e0:	4318      	orrs	r0, r3
    30e2:	6188      	str	r0, [r1, #24]
    30e4:	e783      	b.n	2fee <tc_init+0xfa>
			MCLK->APBCMASK.reg |= mask;
    30e6:	493b      	ldr	r1, [pc, #236]	; (31d4 <tc_init+0x2e0>)
    30e8:	69cb      	ldr	r3, [r1, #28]
    30ea:	4318      	orrs	r0, r3
    30ec:	61c8      	str	r0, [r1, #28]
    30ee:	e77e      	b.n	2fee <tc_init+0xfa>
			MCLK->APBDMASK.reg |= mask;
    30f0:	4938      	ldr	r1, [pc, #224]	; (31d4 <tc_init+0x2e0>)
    30f2:	6a0b      	ldr	r3, [r1, #32]
    30f4:	4318      	orrs	r0, r3
    30f6:	6208      	str	r0, [r1, #32]
    30f8:	e779      	b.n	2fee <tc_init+0xfa>
			MCLK->APBEMASK.reg |= mask;
    30fa:	4b36      	ldr	r3, [pc, #216]	; (31d4 <tc_init+0x2e0>)
    30fc:	6a59      	ldr	r1, [r3, #36]	; 0x24
    30fe:	4308      	orrs	r0, r1
    3100:	6258      	str	r0, [r3, #36]	; 0x24
    3102:	e774      	b.n	2fee <tc_init+0xfa>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    3104:	4643      	mov	r3, r8
    3106:	3301      	adds	r3, #1
    3108:	2b04      	cmp	r3, #4
    310a:	dd00      	ble.n	310e <tc_init+0x21a>
    310c:	e773      	b.n	2ff6 <tc_init+0x102>
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    310e:	ab02      	add	r3, sp, #8
    3110:	1cd1      	adds	r1, r2, #3
    3112:	0089      	lsls	r1, r1, #2
    3114:	58c9      	ldr	r1, [r1, r3]
    3116:	3202      	adds	r2, #2
    3118:	0092      	lsls	r2, r2, #2
    311a:	58d3      	ldr	r3, [r2, r3]
	switch (bus) {
    311c:	b2da      	uxtb	r2, r3
    311e:	2a04      	cmp	r2, #4
    3120:	d900      	bls.n	3124 <tc_init+0x230>
    3122:	e768      	b.n	2ff6 <tc_init+0x102>
    3124:	0093      	lsls	r3, r2, #2
    3126:	4a2e      	ldr	r2, [pc, #184]	; (31e0 <tc_init+0x2ec>)
    3128:	58d3      	ldr	r3, [r2, r3]
    312a:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    312c:	4a29      	ldr	r2, [pc, #164]	; (31d4 <tc_init+0x2e0>)
    312e:	6953      	ldr	r3, [r2, #20]
    3130:	4319      	orrs	r1, r3
    3132:	6151      	str	r1, [r2, #20]
    3134:	e75f      	b.n	2ff6 <tc_init+0x102>
			MCLK->APBBMASK.reg |= mask;
    3136:	4a27      	ldr	r2, [pc, #156]	; (31d4 <tc_init+0x2e0>)
    3138:	6993      	ldr	r3, [r2, #24]
    313a:	4319      	orrs	r1, r3
    313c:	6191      	str	r1, [r2, #24]
    313e:	e75a      	b.n	2ff6 <tc_init+0x102>
			MCLK->APBCMASK.reg |= mask;
    3140:	4a24      	ldr	r2, [pc, #144]	; (31d4 <tc_init+0x2e0>)
    3142:	69d3      	ldr	r3, [r2, #28]
    3144:	4319      	orrs	r1, r3
    3146:	61d1      	str	r1, [r2, #28]
    3148:	e755      	b.n	2ff6 <tc_init+0x102>
			MCLK->APBDMASK.reg |= mask;
    314a:	4a22      	ldr	r2, [pc, #136]	; (31d4 <tc_init+0x2e0>)
    314c:	6a13      	ldr	r3, [r2, #32]
    314e:	4319      	orrs	r1, r3
    3150:	6211      	str	r1, [r2, #32]
    3152:	e750      	b.n	2ff6 <tc_init+0x102>
			MCLK->APBEMASK.reg |= mask;
    3154:	4b1f      	ldr	r3, [pc, #124]	; (31d4 <tc_init+0x2e0>)
    3156:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    3158:	4311      	orrs	r1, r2
    315a:	6259      	str	r1, [r3, #36]	; 0x24
    315c:	e74b      	b.n	2ff6 <tc_init+0x102>
    315e:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    3160:	2b00      	cmp	r3, #0
    3162:	d1fc      	bne.n	315e <tc_init+0x26a>
					config->counter_8_bit.value;
    3164:	3328      	adds	r3, #40	; 0x28
    3166:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    3168:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    316a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    316c:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    316e:	2b00      	cmp	r3, #0
    3170:	d1fc      	bne.n	316c <tc_init+0x278>
					config->counter_8_bit.period;
    3172:	3329      	adds	r3, #41	; 0x29
    3174:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    3176:	76eb      	strb	r3, [r5, #27]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3178:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    317a:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    317c:	2b00      	cmp	r3, #0
    317e:	d1fc      	bne.n	317a <tc_init+0x286>
					config->counter_8_bit.compare_capture_channel[0];
    3180:	332a      	adds	r3, #42	; 0x2a
    3182:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    3184:	772b      	strb	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3186:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    3188:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    318a:	2b00      	cmp	r3, #0
    318c:	d1fc      	bne.n	3188 <tc_init+0x294>
					config->counter_8_bit.compare_capture_channel[1];
    318e:	332b      	adds	r3, #43	; 0x2b
    3190:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    3192:	776b      	strb	r3, [r5, #29]
			return STATUS_OK;
    3194:	2000      	movs	r0, #0
    3196:	e6e4      	b.n	2f62 <tc_init+0x6e>
    3198:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    319a:	2b00      	cmp	r3, #0
    319c:	d1fc      	bne.n	3198 <tc_init+0x2a4>
				= config->counter_32_bit.value;
    319e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    31a0:	616b      	str	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    31a2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    31a4:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    31a6:	2b00      	cmp	r3, #0
    31a8:	d1fc      	bne.n	31a4 <tc_init+0x2b0>
			hw->COUNT32.CC[0].reg =
    31aa:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    31ac:	61eb      	str	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    31ae:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    31b0:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    31b2:	2b00      	cmp	r3, #0
    31b4:	d1fc      	bne.n	31b0 <tc_init+0x2bc>
					config->counter_32_bit.compare_capture_channel[1];
    31b6:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    31b8:	622b      	str	r3, [r5, #32]
			return STATUS_OK;
    31ba:	2000      	movs	r0, #0
    31bc:	e6d1      	b.n	2f62 <tc_init+0x6e>
    31be:	46c0      	nop			; (mov r8, r8)
    31c0:	00002eb9 	.word	0x00002eb9
    31c4:	000199fc 	.word	0x000199fc
    31c8:	20000f60 	.word	0x20000f60
    31cc:	000199d4 	.word	0x000199d4
    31d0:	00002e59 	.word	0x00002e59
    31d4:	40000400 	.word	0x40000400
    31d8:	00002d5d 	.word	0x00002d5d
    31dc:	00002ced 	.word	0x00002ced
    31e0:	000199e8 	.word	0x000199e8

000031e4 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    31e4:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    31e6:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    31e8:	2b00      	cmp	r3, #0
    31ea:	d1fc      	bne.n	31e6 <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    31ec:	7113      	strb	r3, [r2, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    31ee:	6801      	ldr	r1, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    31f0:	690b      	ldr	r3, [r1, #16]

	while (tc_is_syncing(module_inst)) {
    31f2:	2b00      	cmp	r3, #0
    31f4:	d1fc      	bne.n	31f0 <tc_get_count_value+0xc>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_READSYNC_Val);
    31f6:	3380      	adds	r3, #128	; 0x80
    31f8:	7153      	strb	r3, [r2, #5]

	/* Read synchronization */
	tc_sync_read_count(module_inst);
	
	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    31fa:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    31fc:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    31fe:	2b00      	cmp	r3, #0
    3200:	d1fc      	bne.n	31fc <tc_get_count_value+0x18>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    3202:	7903      	ldrb	r3, [r0, #4]
    3204:	2b04      	cmp	r3, #4
    3206:	d005      	beq.n	3214 <tc_get_count_value+0x30>
    3208:	2b08      	cmp	r3, #8
    320a:	d009      	beq.n	3220 <tc_get_count_value+0x3c>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    320c:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    320e:	2b00      	cmp	r3, #0
    3210:	d003      	beq.n	321a <tc_get_count_value+0x36>
}
    3212:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    3214:	7d10      	ldrb	r0, [r2, #20]
    3216:	b2c0      	uxtb	r0, r0
    3218:	e7fb      	b.n	3212 <tc_get_count_value+0x2e>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    321a:	8a90      	ldrh	r0, [r2, #20]
    321c:	b280      	uxth	r0, r0
    321e:	e7f8      	b.n	3212 <tc_get_count_value+0x2e>
			return tc_module->COUNT32.COUNT.reg;
    3220:	6950      	ldr	r0, [r2, #20]
    3222:	e7f6      	b.n	3212 <tc_get_count_value+0x2e>

00003224 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    3224:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(compare);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    3226:	6804      	ldr	r4, [r0, #0]
    3228:	6923      	ldr	r3, [r4, #16]

	while (tc_is_syncing(module_inst)) {
    322a:	2b00      	cmp	r3, #0
    322c:	d1fc      	bne.n	3228 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    322e:	7903      	ldrb	r3, [r0, #4]
    3230:	2b04      	cmp	r3, #4
    3232:	d006      	beq.n	3242 <tc_set_compare_value+0x1e>
    3234:	2b08      	cmp	r3, #8
    3236:	d028      	beq.n	328a <tc_set_compare_value+0x66>
    3238:	2b00      	cmp	r3, #0
    323a:	d013      	beq.n	3264 <tc_set_compare_value+0x40>
				}
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    323c:	2317      	movs	r3, #23
}
    323e:	0018      	movs	r0, r3
    3240:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    3242:	2317      	movs	r3, #23
			if (channel_index <
    3244:	2901      	cmp	r1, #1
    3246:	d8fa      	bhi.n	323e <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    3248:	7e83      	ldrb	r3, [r0, #26]
    324a:	2b00      	cmp	r3, #0
    324c:	d005      	beq.n	325a <tc_set_compare_value+0x36>
							(uint8_t)compare;
    324e:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CCBUF[channel_index].reg =
    3250:	1861      	adds	r1, r4, r1
    3252:	3130      	adds	r1, #48	; 0x30
    3254:	700a      	strb	r2, [r1, #0]
				return STATUS_OK;
    3256:	2300      	movs	r3, #0
    3258:	e7f1      	b.n	323e <tc_set_compare_value+0x1a>
							(uint8_t)compare;
    325a:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CC[channel_index].reg  =
    325c:	1864      	adds	r4, r4, r1
    325e:	7722      	strb	r2, [r4, #28]
				return STATUS_OK;
    3260:	2300      	movs	r3, #0
    3262:	e7ec      	b.n	323e <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    3264:	2317      	movs	r3, #23
			if (channel_index <
    3266:	2901      	cmp	r1, #1
    3268:	d8e9      	bhi.n	323e <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    326a:	7e83      	ldrb	r3, [r0, #26]
    326c:	2b00      	cmp	r3, #0
    326e:	d005      	beq.n	327c <tc_set_compare_value+0x58>
							(uint16_t)compare;
    3270:	b292      	uxth	r2, r2
					tc_module->COUNT16.CCBUF[channel_index].reg =
    3272:	3118      	adds	r1, #24
    3274:	0049      	lsls	r1, r1, #1
    3276:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    3278:	2300      	movs	r3, #0
    327a:	e7e0      	b.n	323e <tc_set_compare_value+0x1a>
							(uint16_t)compare;
    327c:	b292      	uxth	r2, r2
					tc_module->COUNT16.CC[channel_index].reg =
    327e:	310c      	adds	r1, #12
    3280:	0049      	lsls	r1, r1, #1
    3282:	1864      	adds	r4, r4, r1
    3284:	80a2      	strh	r2, [r4, #4]
				return STATUS_OK;
    3286:	2300      	movs	r3, #0
    3288:	e7d9      	b.n	323e <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    328a:	2317      	movs	r3, #23
			if (channel_index <
    328c:	2901      	cmp	r1, #1
    328e:	d8d6      	bhi.n	323e <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    3290:	7e83      	ldrb	r3, [r0, #26]
    3292:	2b00      	cmp	r3, #0
    3294:	d105      	bne.n	32a2 <tc_set_compare_value+0x7e>
					tc_module->COUNT32.CC[channel_index].reg =
    3296:	3106      	adds	r1, #6
    3298:	0089      	lsls	r1, r1, #2
    329a:	1864      	adds	r4, r4, r1
    329c:	6062      	str	r2, [r4, #4]
				return STATUS_OK;
    329e:	2300      	movs	r3, #0
    32a0:	e7cd      	b.n	323e <tc_set_compare_value+0x1a>
					tc_module->COUNT32.CCBUF[channel_index].reg =
    32a2:	310c      	adds	r1, #12
    32a4:	0089      	lsls	r1, r1, #2
    32a6:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    32a8:	2300      	movs	r3, #0
    32aa:	e7c8      	b.n	323e <tc_set_compare_value+0x1a>

000032ac <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    32ac:	1c93      	adds	r3, r2, #2
    32ae:	009b      	lsls	r3, r3, #2
    32b0:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    32b2:	2a02      	cmp	r2, #2
    32b4:	d009      	beq.n	32ca <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    32b6:	2a03      	cmp	r2, #3
    32b8:	d00c      	beq.n	32d4 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    32ba:	2301      	movs	r3, #1
    32bc:	4093      	lsls	r3, r2
    32be:	001a      	movs	r2, r3
    32c0:	7e03      	ldrb	r3, [r0, #24]
    32c2:	4313      	orrs	r3, r2
    32c4:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    32c6:	2000      	movs	r0, #0
    32c8:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    32ca:	7e03      	ldrb	r3, [r0, #24]
    32cc:	2210      	movs	r2, #16
    32ce:	4313      	orrs	r3, r2
    32d0:	7603      	strb	r3, [r0, #24]
    32d2:	e7f8      	b.n	32c6 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    32d4:	7e03      	ldrb	r3, [r0, #24]
    32d6:	2220      	movs	r2, #32
    32d8:	4313      	orrs	r3, r2
    32da:	7603      	strb	r3, [r0, #24]
    32dc:	e7f3      	b.n	32c6 <tc_register_callback+0x1a>
	...

000032e0 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    32e0:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    32e2:	0080      	lsls	r0, r0, #2
    32e4:	4b16      	ldr	r3, [pc, #88]	; (3340 <_tc_interrupt_handler+0x60>)
    32e6:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    32e8:	6823      	ldr	r3, [r4, #0]
    32ea:	7a9d      	ldrb	r5, [r3, #10]
    32ec:	7e22      	ldrb	r2, [r4, #24]
    32ee:	7e63      	ldrb	r3, [r4, #25]
    32f0:	4013      	ands	r3, r2
    32f2:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    32f4:	07eb      	lsls	r3, r5, #31
    32f6:	d406      	bmi.n	3306 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    32f8:	07ab      	lsls	r3, r5, #30
    32fa:	d40b      	bmi.n	3314 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    32fc:	06eb      	lsls	r3, r5, #27
    32fe:	d410      	bmi.n	3322 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    3300:	06ab      	lsls	r3, r5, #26
    3302:	d415      	bmi.n	3330 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    3304:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    3306:	0020      	movs	r0, r4
    3308:	68a3      	ldr	r3, [r4, #8]
    330a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    330c:	2301      	movs	r3, #1
    330e:	6822      	ldr	r2, [r4, #0]
    3310:	7293      	strb	r3, [r2, #10]
    3312:	e7f1      	b.n	32f8 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    3314:	0020      	movs	r0, r4
    3316:	68e3      	ldr	r3, [r4, #12]
    3318:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    331a:	2302      	movs	r3, #2
    331c:	6822      	ldr	r2, [r4, #0]
    331e:	7293      	strb	r3, [r2, #10]
    3320:	e7ec      	b.n	32fc <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    3322:	0020      	movs	r0, r4
    3324:	6923      	ldr	r3, [r4, #16]
    3326:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    3328:	2310      	movs	r3, #16
    332a:	6822      	ldr	r2, [r4, #0]
    332c:	7293      	strb	r3, [r2, #10]
    332e:	e7e7      	b.n	3300 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    3330:	0020      	movs	r0, r4
    3332:	6963      	ldr	r3, [r4, #20]
    3334:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    3336:	6823      	ldr	r3, [r4, #0]
    3338:	2220      	movs	r2, #32
    333a:	729a      	strb	r2, [r3, #10]
}
    333c:	e7e2      	b.n	3304 <_tc_interrupt_handler+0x24>
    333e:	46c0      	nop			; (mov r8, r8)
    3340:	20000f60 	.word	0x20000f60

00003344 <TC0_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    3344:	b510      	push	{r4, lr}
    3346:	2000      	movs	r0, #0
    3348:	4b01      	ldr	r3, [pc, #4]	; (3350 <TC0_Handler+0xc>)
    334a:	4798      	blx	r3
    334c:	bd10      	pop	{r4, pc}
    334e:	46c0      	nop			; (mov r8, r8)
    3350:	000032e1 	.word	0x000032e1

00003354 <TC1_Handler>:
    3354:	b510      	push	{r4, lr}
    3356:	2001      	movs	r0, #1
    3358:	4b01      	ldr	r3, [pc, #4]	; (3360 <TC1_Handler+0xc>)
    335a:	4798      	blx	r3
    335c:	bd10      	pop	{r4, pc}
    335e:	46c0      	nop			; (mov r8, r8)
    3360:	000032e1 	.word	0x000032e1

00003364 <TC2_Handler>:
    3364:	b510      	push	{r4, lr}
    3366:	2002      	movs	r0, #2
    3368:	4b01      	ldr	r3, [pc, #4]	; (3370 <TC2_Handler+0xc>)
    336a:	4798      	blx	r3
    336c:	bd10      	pop	{r4, pc}
    336e:	46c0      	nop			; (mov r8, r8)
    3370:	000032e1 	.word	0x000032e1

00003374 <TC3_Handler>:
    3374:	b510      	push	{r4, lr}
    3376:	2003      	movs	r0, #3
    3378:	4b01      	ldr	r3, [pc, #4]	; (3380 <TC3_Handler+0xc>)
    337a:	4798      	blx	r3
    337c:	bd10      	pop	{r4, pc}
    337e:	46c0      	nop			; (mov r8, r8)
    3380:	000032e1 	.word	0x000032e1

00003384 <TC4_Handler>:
    3384:	b510      	push	{r4, lr}
    3386:	2004      	movs	r0, #4
    3388:	4b01      	ldr	r3, [pc, #4]	; (3390 <TC4_Handler+0xc>)
    338a:	4798      	blx	r3
    338c:	bd10      	pop	{r4, pc}
    338e:	46c0      	nop			; (mov r8, r8)
    3390:	000032e1 	.word	0x000032e1

00003394 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    3394:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    3396:	4a1a      	ldr	r2, [pc, #104]	; (3400 <Reset_Handler+0x6c>)
    3398:	4b1a      	ldr	r3, [pc, #104]	; (3404 <Reset_Handler+0x70>)
    339a:	429a      	cmp	r2, r3
    339c:	d011      	beq.n	33c2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    339e:	001a      	movs	r2, r3
    33a0:	4b19      	ldr	r3, [pc, #100]	; (3408 <Reset_Handler+0x74>)
    33a2:	429a      	cmp	r2, r3
    33a4:	d20d      	bcs.n	33c2 <Reset_Handler+0x2e>
    33a6:	4a19      	ldr	r2, [pc, #100]	; (340c <Reset_Handler+0x78>)
    33a8:	3303      	adds	r3, #3
    33aa:	1a9b      	subs	r3, r3, r2
    33ac:	089b      	lsrs	r3, r3, #2
    33ae:	3301      	adds	r3, #1
    33b0:	009b      	lsls	r3, r3, #2
    33b2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    33b4:	4813      	ldr	r0, [pc, #76]	; (3404 <Reset_Handler+0x70>)
    33b6:	4912      	ldr	r1, [pc, #72]	; (3400 <Reset_Handler+0x6c>)
    33b8:	588c      	ldr	r4, [r1, r2]
    33ba:	5084      	str	r4, [r0, r2]
    33bc:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    33be:	429a      	cmp	r2, r3
    33c0:	d1fa      	bne.n	33b8 <Reset_Handler+0x24>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    33c2:	4a13      	ldr	r2, [pc, #76]	; (3410 <Reset_Handler+0x7c>)
    33c4:	4b13      	ldr	r3, [pc, #76]	; (3414 <Reset_Handler+0x80>)
    33c6:	429a      	cmp	r2, r3
    33c8:	d20a      	bcs.n	33e0 <Reset_Handler+0x4c>
    33ca:	43d3      	mvns	r3, r2
    33cc:	4911      	ldr	r1, [pc, #68]	; (3414 <Reset_Handler+0x80>)
    33ce:	185b      	adds	r3, r3, r1
    33d0:	2103      	movs	r1, #3
    33d2:	438b      	bics	r3, r1
    33d4:	3304      	adds	r3, #4
    33d6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    33d8:	2100      	movs	r1, #0
    33da:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    33dc:	4293      	cmp	r3, r2
    33de:	d1fc      	bne.n	33da <Reset_Handler+0x46>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    33e0:	4a0d      	ldr	r2, [pc, #52]	; (3418 <Reset_Handler+0x84>)
    33e2:	21ff      	movs	r1, #255	; 0xff
    33e4:	4b0d      	ldr	r3, [pc, #52]	; (341c <Reset_Handler+0x88>)
    33e6:	438b      	bics	r3, r1
    33e8:	6093      	str	r3, [r2, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    33ea:	4a0d      	ldr	r2, [pc, #52]	; (3420 <Reset_Handler+0x8c>)
    33ec:	6853      	ldr	r3, [r2, #4]
    33ee:	397f      	subs	r1, #127	; 0x7f
    33f0:	430b      	orrs	r3, r1
    33f2:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    33f4:	4b0b      	ldr	r3, [pc, #44]	; (3424 <Reset_Handler+0x90>)
    33f6:	4798      	blx	r3

        /* Branch to main function */
        main();
    33f8:	4b0b      	ldr	r3, [pc, #44]	; (3428 <Reset_Handler+0x94>)
    33fa:	4798      	blx	r3
    33fc:	e7fe      	b.n	33fc <Reset_Handler+0x68>
    33fe:	46c0      	nop			; (mov r8, r8)
    3400:	0001b2dc 	.word	0x0001b2dc
    3404:	20000000 	.word	0x20000000
    3408:	20000a10 	.word	0x20000a10
    340c:	20000004 	.word	0x20000004
    3410:	20000a10 	.word	0x20000a10
    3414:	20001bf8 	.word	0x20001bf8
    3418:	e000ed00 	.word	0xe000ed00
    341c:	00000000 	.word	0x00000000
    3420:	41004000 	.word	0x41004000
    3424:	00014909 	.word	0x00014909
    3428:	0000b1d9 	.word	0x0000b1d9

0000342c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    342c:	b570      	push	{r4, r5, r6, lr}
        while (1) {
			printf("\r\ndummy handler()");
    342e:	4d02      	ldr	r5, [pc, #8]	; (3438 <Dummy_Handler+0xc>)
    3430:	4c02      	ldr	r4, [pc, #8]	; (343c <Dummy_Handler+0x10>)
    3432:	0028      	movs	r0, r5
    3434:	47a0      	blx	r4
    3436:	e7fc      	b.n	3432 <Dummy_Handler+0x6>
    3438:	00019a38 	.word	0x00019a38
    343c:	00015005 	.word	0x00015005

00003440 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    3440:	b5f0      	push	{r4, r5, r6, r7, lr}
    3442:	46c6      	mov	lr, r8
    3444:	b500      	push	{lr}
    3446:	000c      	movs	r4, r1
    3448:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    344a:	2800      	cmp	r0, #0
    344c:	d10f      	bne.n	346e <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    344e:	2a00      	cmp	r2, #0
    3450:	dd11      	ble.n	3476 <_read+0x36>
    3452:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    3454:	4e09      	ldr	r6, [pc, #36]	; (347c <_read+0x3c>)
    3456:	4d0a      	ldr	r5, [pc, #40]	; (3480 <_read+0x40>)
    3458:	6830      	ldr	r0, [r6, #0]
    345a:	0021      	movs	r1, r4
    345c:	682b      	ldr	r3, [r5, #0]
    345e:	4798      	blx	r3
		ptr++;
    3460:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    3462:	42bc      	cmp	r4, r7
    3464:	d1f8      	bne.n	3458 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    3466:	4640      	mov	r0, r8
    3468:	bc04      	pop	{r2}
    346a:	4690      	mov	r8, r2
    346c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    346e:	2301      	movs	r3, #1
    3470:	425b      	negs	r3, r3
    3472:	4698      	mov	r8, r3
    3474:	e7f7      	b.n	3466 <_read+0x26>
	for (; len > 0; --len) {
    3476:	4680      	mov	r8, r0
    3478:	e7f5      	b.n	3466 <_read+0x26>
    347a:	46c0      	nop			; (mov r8, r8)
    347c:	20000f7c 	.word	0x20000f7c
    3480:	20000f74 	.word	0x20000f74

00003484 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    3484:	b5f0      	push	{r4, r5, r6, r7, lr}
    3486:	46c6      	mov	lr, r8
    3488:	b500      	push	{lr}
    348a:	000e      	movs	r6, r1
    348c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    348e:	3801      	subs	r0, #1
    3490:	2802      	cmp	r0, #2
    3492:	d810      	bhi.n	34b6 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    3494:	2a00      	cmp	r2, #0
    3496:	d011      	beq.n	34bc <_write+0x38>
    3498:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    349a:	4b0c      	ldr	r3, [pc, #48]	; (34cc <_write+0x48>)
    349c:	4698      	mov	r8, r3
    349e:	4f0c      	ldr	r7, [pc, #48]	; (34d0 <_write+0x4c>)
    34a0:	4643      	mov	r3, r8
    34a2:	6818      	ldr	r0, [r3, #0]
    34a4:	5d31      	ldrb	r1, [r6, r4]
    34a6:	683b      	ldr	r3, [r7, #0]
    34a8:	4798      	blx	r3
    34aa:	2800      	cmp	r0, #0
    34ac:	db08      	blt.n	34c0 <_write+0x3c>
			return -1;
		}
		++nChars;
    34ae:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    34b0:	42a5      	cmp	r5, r4
    34b2:	d1f5      	bne.n	34a0 <_write+0x1c>
    34b4:	e006      	b.n	34c4 <_write+0x40>
		return -1;
    34b6:	2401      	movs	r4, #1
    34b8:	4264      	negs	r4, r4
    34ba:	e003      	b.n	34c4 <_write+0x40>
	for (; len != 0; --len) {
    34bc:	0014      	movs	r4, r2
    34be:	e001      	b.n	34c4 <_write+0x40>
			return -1;
    34c0:	2401      	movs	r4, #1
    34c2:	4264      	negs	r4, r4
	}
	return nChars;
}
    34c4:	0020      	movs	r0, r4
    34c6:	bc04      	pop	{r2}
    34c8:	4690      	mov	r8, r2
    34ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34cc:	20000f7c 	.word	0x20000f7c
    34d0:	20000f78 	.word	0x20000f78

000034d4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    34d4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    34d6:	4a06      	ldr	r2, [pc, #24]	; (34f0 <_sbrk+0x1c>)
    34d8:	6812      	ldr	r2, [r2, #0]
    34da:	2a00      	cmp	r2, #0
    34dc:	d004      	beq.n	34e8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    34de:	4a04      	ldr	r2, [pc, #16]	; (34f0 <_sbrk+0x1c>)
    34e0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    34e2:	18c3      	adds	r3, r0, r3
    34e4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    34e6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    34e8:	4902      	ldr	r1, [pc, #8]	; (34f4 <_sbrk+0x20>)
    34ea:	4a01      	ldr	r2, [pc, #4]	; (34f0 <_sbrk+0x1c>)
    34ec:	6011      	str	r1, [r2, #0]
    34ee:	e7f6      	b.n	34de <_sbrk+0xa>
    34f0:	20000a68 	.word	0x20000a68
    34f4:	20003bf8 	.word	0x20003bf8

000034f8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    34f8:	2001      	movs	r0, #1
    34fa:	4240      	negs	r0, r0
    34fc:	4770      	bx	lr

000034fe <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    34fe:	2380      	movs	r3, #128	; 0x80
    3500:	019b      	lsls	r3, r3, #6
    3502:	604b      	str	r3, [r1, #4]

	return 0;
}
    3504:	2000      	movs	r0, #0
    3506:	4770      	bx	lr

00003508 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    3508:	2001      	movs	r0, #1
    350a:	4770      	bx	lr

0000350c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    350c:	2000      	movs	r0, #0
    350e:	4770      	bx	lr

00003510 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    3510:	b570      	push	{r4, r5, r6, lr}
    3512:	b082      	sub	sp, #8
    3514:	0005      	movs	r5, r0
    3516:	000e      	movs	r6, r1
	uint16_t temp = 0;
    3518:	2200      	movs	r2, #0
    351a:	466b      	mov	r3, sp
    351c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    351e:	4c06      	ldr	r4, [pc, #24]	; (3538 <usart_serial_getchar+0x28>)
    3520:	466b      	mov	r3, sp
    3522:	1d99      	adds	r1, r3, #6
    3524:	0028      	movs	r0, r5
    3526:	47a0      	blx	r4
    3528:	2800      	cmp	r0, #0
    352a:	d1f9      	bne.n	3520 <usart_serial_getchar+0x10>

	*c = temp;
    352c:	466b      	mov	r3, sp
    352e:	3306      	adds	r3, #6
    3530:	881b      	ldrh	r3, [r3, #0]
    3532:	7033      	strb	r3, [r6, #0]
}
    3534:	b002      	add	sp, #8
    3536:	bd70      	pop	{r4, r5, r6, pc}
    3538:	00001f57 	.word	0x00001f57

0000353c <usart_serial_putchar>:
{
    353c:	b570      	push	{r4, r5, r6, lr}
    353e:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    3540:	b28c      	uxth	r4, r1
    3542:	4e03      	ldr	r6, [pc, #12]	; (3550 <usart_serial_putchar+0x14>)
    3544:	0021      	movs	r1, r4
    3546:	0028      	movs	r0, r5
    3548:	47b0      	blx	r6
    354a:	2800      	cmp	r0, #0
    354c:	d1fa      	bne.n	3544 <usart_serial_putchar+0x8>
}
    354e:	bd70      	pop	{r4, r5, r6, pc}
    3550:	00001f31 	.word	0x00001f31

00003554 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    3554:	b510      	push	{r4, lr}
    3556:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    3558:	466b      	mov	r3, sp
    355a:	1ddc      	adds	r4, r3, #7
    355c:	2201      	movs	r2, #1
    355e:	0021      	movs	r1, r4
    3560:	480f      	ldr	r0, [pc, #60]	; (35a0 <USART_HOST_ISR_VECT+0x4c>)
    3562:	4b10      	ldr	r3, [pc, #64]	; (35a4 <USART_HOST_ISR_VECT+0x50>)
    3564:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    3566:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    3568:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    356c:	2200      	movs	r2, #0
    356e:	4b0e      	ldr	r3, [pc, #56]	; (35a8 <USART_HOST_ISR_VECT+0x54>)
    3570:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    3572:	4b0e      	ldr	r3, [pc, #56]	; (35ac <USART_HOST_ISR_VECT+0x58>)
    3574:	781b      	ldrb	r3, [r3, #0]
    3576:	7821      	ldrb	r1, [r4, #0]
    3578:	4a0d      	ldr	r2, [pc, #52]	; (35b0 <USART_HOST_ISR_VECT+0x5c>)
    357a:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    357c:	2b7f      	cmp	r3, #127	; 0x7f
    357e:	d00a      	beq.n	3596 <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    3580:	3301      	adds	r3, #1
    3582:	4a0a      	ldr	r2, [pc, #40]	; (35ac <USART_HOST_ISR_VECT+0x58>)
    3584:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    3586:	2201      	movs	r2, #1
    3588:	4b07      	ldr	r3, [pc, #28]	; (35a8 <USART_HOST_ISR_VECT+0x54>)
    358a:	701a      	strb	r2, [r3, #0]
    358c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3590:	b662      	cpsie	i
}
    3592:	b002      	add	sp, #8
    3594:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    3596:	2200      	movs	r2, #0
    3598:	4b04      	ldr	r3, [pc, #16]	; (35ac <USART_HOST_ISR_VECT+0x58>)
    359a:	701a      	strb	r2, [r3, #0]
    359c:	e7f3      	b.n	3586 <USART_HOST_ISR_VECT+0x32>
    359e:	46c0      	nop			; (mov r8, r8)
    35a0:	20000a6c 	.word	0x20000a6c
    35a4:	00001fc1 	.word	0x00001fc1
    35a8:	20000000 	.word	0x20000000
    35ac:	20000b20 	.word	0x20000b20
    35b0:	20000aa0 	.word	0x20000aa0

000035b4 <sio2host_init>:
{
    35b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    35b6:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    35b8:	2380      	movs	r3, #128	; 0x80
    35ba:	05db      	lsls	r3, r3, #23
    35bc:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    35be:	2300      	movs	r3, #0
    35c0:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    35c2:	22ff      	movs	r2, #255	; 0xff
    35c4:	4669      	mov	r1, sp
    35c6:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    35c8:	2200      	movs	r2, #0
    35ca:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    35cc:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    35ce:	2196      	movs	r1, #150	; 0x96
    35d0:	0189      	lsls	r1, r1, #6
    35d2:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    35d4:	2401      	movs	r4, #1
    35d6:	2124      	movs	r1, #36	; 0x24
    35d8:	4668      	mov	r0, sp
    35da:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    35dc:	3101      	adds	r1, #1
    35de:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    35e0:	3101      	adds	r1, #1
    35e2:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    35e4:	3101      	adds	r1, #1
    35e6:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    35e8:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    35ea:	3105      	adds	r1, #5
    35ec:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    35ee:	3101      	adds	r1, #1
    35f0:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    35f2:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    35f4:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    35f6:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    35f8:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    35fa:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    35fc:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    35fe:	2313      	movs	r3, #19
    3600:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    3602:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    3604:	2380      	movs	r3, #128	; 0x80
    3606:	035b      	lsls	r3, r3, #13
    3608:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    360a:	4b2e      	ldr	r3, [pc, #184]	; (36c4 <sio2host_init+0x110>)
    360c:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    360e:	4b2e      	ldr	r3, [pc, #184]	; (36c8 <sio2host_init+0x114>)
    3610:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    3612:	2301      	movs	r3, #1
    3614:	425b      	negs	r3, r3
    3616:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    3618:	930f      	str	r3, [sp, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    361a:	4d2c      	ldr	r5, [pc, #176]	; (36cc <sio2host_init+0x118>)
    361c:	4b2c      	ldr	r3, [pc, #176]	; (36d0 <sio2host_init+0x11c>)
    361e:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    3620:	4a2c      	ldr	r2, [pc, #176]	; (36d4 <sio2host_init+0x120>)
    3622:	4b2d      	ldr	r3, [pc, #180]	; (36d8 <sio2host_init+0x124>)
    3624:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    3626:	4a2d      	ldr	r2, [pc, #180]	; (36dc <sio2host_init+0x128>)
    3628:	4b2d      	ldr	r3, [pc, #180]	; (36e0 <sio2host_init+0x12c>)
    362a:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    362c:	466a      	mov	r2, sp
    362e:	2184      	movs	r1, #132	; 0x84
    3630:	05c9      	lsls	r1, r1, #23
    3632:	0028      	movs	r0, r5
    3634:	4b2b      	ldr	r3, [pc, #172]	; (36e4 <sio2host_init+0x130>)
    3636:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    3638:	4f2b      	ldr	r7, [pc, #172]	; (36e8 <sio2host_init+0x134>)
    363a:	683b      	ldr	r3, [r7, #0]
    363c:	6898      	ldr	r0, [r3, #8]
    363e:	2100      	movs	r1, #0
    3640:	4e2a      	ldr	r6, [pc, #168]	; (36ec <sio2host_init+0x138>)
    3642:	47b0      	blx	r6
	setbuf(stdin, NULL);
    3644:	683b      	ldr	r3, [r7, #0]
    3646:	6858      	ldr	r0, [r3, #4]
    3648:	2100      	movs	r1, #0
    364a:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    364c:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    364e:	0030      	movs	r0, r6
    3650:	4b27      	ldr	r3, [pc, #156]	; (36f0 <sio2host_init+0x13c>)
    3652:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3654:	231f      	movs	r3, #31
    3656:	4018      	ands	r0, r3
    3658:	4084      	lsls	r4, r0
    365a:	4b26      	ldr	r3, [pc, #152]	; (36f4 <sio2host_init+0x140>)
    365c:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    365e:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    3660:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    3662:	2b00      	cmp	r3, #0
    3664:	d1fc      	bne.n	3660 <sio2host_init+0xac>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3666:	6833      	ldr	r3, [r6, #0]
    3668:	2202      	movs	r2, #2
    366a:	4313      	orrs	r3, r2
    366c:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    366e:	4b17      	ldr	r3, [pc, #92]	; (36cc <sio2host_init+0x118>)
    3670:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    3672:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3674:	2a00      	cmp	r2, #0
    3676:	d1fc      	bne.n	3672 <sio2host_init+0xbe>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    3678:	6859      	ldr	r1, [r3, #4]
    367a:	2280      	movs	r2, #128	; 0x80
    367c:	0252      	lsls	r2, r2, #9
    367e:	430a      	orrs	r2, r1
    3680:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    3682:	2101      	movs	r1, #1
    3684:	4a11      	ldr	r2, [pc, #68]	; (36cc <sio2host_init+0x118>)
    3686:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    3688:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    368a:	2a00      	cmp	r2, #0
    368c:	d1fc      	bne.n	3688 <sio2host_init+0xd4>
	return (usart_hw->SYNCBUSY.reg);
    368e:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3690:	2a00      	cmp	r2, #0
    3692:	d1fc      	bne.n	368e <sio2host_init+0xda>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    3694:	6859      	ldr	r1, [r3, #4]
    3696:	2280      	movs	r2, #128	; 0x80
    3698:	0292      	lsls	r2, r2, #10
    369a:	430a      	orrs	r2, r1
    369c:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    369e:	2101      	movs	r1, #1
    36a0:	4a0a      	ldr	r2, [pc, #40]	; (36cc <sio2host_init+0x118>)
    36a2:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    36a4:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    36a6:	2a00      	cmp	r2, #0
    36a8:	d1fc      	bne.n	36a4 <sio2host_init+0xf0>
	USART_HOST_RX_ISR_ENABLE();
    36aa:	4913      	ldr	r1, [pc, #76]	; (36f8 <sio2host_init+0x144>)
    36ac:	2000      	movs	r0, #0
    36ae:	4b13      	ldr	r3, [pc, #76]	; (36fc <sio2host_init+0x148>)
    36b0:	4798      	blx	r3
    36b2:	2204      	movs	r2, #4
    36b4:	2384      	movs	r3, #132	; 0x84
    36b6:	05db      	lsls	r3, r3, #23
    36b8:	759a      	strb	r2, [r3, #22]
    36ba:	32fc      	adds	r2, #252	; 0xfc
    36bc:	4b0d      	ldr	r3, [pc, #52]	; (36f4 <sio2host_init+0x140>)
    36be:	601a      	str	r2, [r3, #0]
}
    36c0:	b011      	add	sp, #68	; 0x44
    36c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36c4:	00040003 	.word	0x00040003
    36c8:	00050003 	.word	0x00050003
    36cc:	20000a6c 	.word	0x20000a6c
    36d0:	20000f7c 	.word	0x20000f7c
    36d4:	0000353d 	.word	0x0000353d
    36d8:	20000f78 	.word	0x20000f78
    36dc:	00003511 	.word	0x00003511
    36e0:	20000f74 	.word	0x20000f74
    36e4:	00001bcd 	.word	0x00001bcd
    36e8:	20000064 	.word	0x20000064
    36ec:	00015149 	.word	0x00015149
    36f0:	00002585 	.word	0x00002585
    36f4:	e000e100 	.word	0xe000e100
    36f8:	00003555 	.word	0x00003555
    36fc:	00002549 	.word	0x00002549

00003700 <sio2host_deinit>:
{
    3700:	b570      	push	{r4, r5, r6, lr}
	SercomUsart *const usart_hw = &(module->hw->USART);
    3702:	4d15      	ldr	r5, [pc, #84]	; (3758 <sio2host_deinit+0x58>)
    3704:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    3706:	0020      	movs	r0, r4
    3708:	4b14      	ldr	r3, [pc, #80]	; (375c <sio2host_deinit+0x5c>)
    370a:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    370c:	231f      	movs	r3, #31
    370e:	4018      	ands	r0, r3
    3710:	3b1e      	subs	r3, #30
    3712:	4083      	lsls	r3, r0
    3714:	2280      	movs	r2, #128	; 0x80
    3716:	4912      	ldr	r1, [pc, #72]	; (3760 <sio2host_deinit+0x60>)
    3718:	508b      	str	r3, [r1, r2]
	SercomUsart *const usart_hw = &(module->hw->USART);
    371a:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    371c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    371e:	2b00      	cmp	r3, #0
    3720:	d1fc      	bne.n	371c <sio2host_deinit+0x1c>
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    3722:	6823      	ldr	r3, [r4, #0]
    3724:	2202      	movs	r2, #2
    3726:	4393      	bics	r3, r2
    3728:	6023      	str	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    372a:	4b0b      	ldr	r3, [pc, #44]	; (3758 <sio2host_deinit+0x58>)
    372c:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    372e:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3730:	2a00      	cmp	r2, #0
    3732:	d1fc      	bne.n	372e <sio2host_deinit+0x2e>
			module->receiver_enabled = false;
			break;

		case USART_TRANSCEIVER_TX:
			/* Disable TX */
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_TXEN;
    3734:	685a      	ldr	r2, [r3, #4]
    3736:	490b      	ldr	r1, [pc, #44]	; (3764 <sio2host_deinit+0x64>)
    3738:	400a      	ands	r2, r1
    373a:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = false;
    373c:	2100      	movs	r1, #0
    373e:	4a06      	ldr	r2, [pc, #24]	; (3758 <sio2host_deinit+0x58>)
    3740:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    3742:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3744:	2a00      	cmp	r2, #0
    3746:	d1fc      	bne.n	3742 <sio2host_deinit+0x42>
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_RXEN;
    3748:	685a      	ldr	r2, [r3, #4]
    374a:	4907      	ldr	r1, [pc, #28]	; (3768 <sio2host_deinit+0x68>)
    374c:	400a      	ands	r2, r1
    374e:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = false;
    3750:	2200      	movs	r2, #0
    3752:	4b01      	ldr	r3, [pc, #4]	; (3758 <sio2host_deinit+0x58>)
    3754:	719a      	strb	r2, [r3, #6]
}
    3756:	bd70      	pop	{r4, r5, r6, pc}
    3758:	20000a6c 	.word	0x20000a6c
    375c:	00002585 	.word	0x00002585
    3760:	e000e100 	.word	0xe000e100
    3764:	fffeffff 	.word	0xfffeffff
    3768:	fffdffff 	.word	0xfffdffff

0000376c <HAL_Sleep>:
 *
 * \param[in] mode - sleep mode
 */
void HAL_Sleep(HAL_SleepMode_t mode)
{
	switch (mode)
    376c:	2801      	cmp	r0, #1
    376e:	d002      	beq.n	3776 <HAL_Sleep+0xa>
    3770:	2802      	cmp	r0, #2
    3772:	d00c      	beq.n	378e <HAL_Sleep+0x22>
		{
			/* other sleep modes are not implemented currently */
			break;
		}
	}
}
    3774:	4770      	bx	lr
	PM->SLEEPCFG.reg = sleep_mode;
    3776:	2204      	movs	r2, #4
    3778:	2380      	movs	r3, #128	; 0x80
    377a:	05db      	lsls	r3, r3, #23
    377c:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    377e:	001a      	movs	r2, r3
    3780:	7853      	ldrb	r3, [r2, #1]
    3782:	2b04      	cmp	r3, #4
    3784:	d1fc      	bne.n	3780 <HAL_Sleep+0x14>
  __ASM volatile ("dsb 0xF":::"memory");
    3786:	f3bf 8f4f 	dsb	sy
	__WFI();
    378a:	bf30      	wfi
    378c:	e7f2      	b.n	3774 <HAL_Sleep+0x8>
	PM->SLEEPCFG.reg = sleep_mode;
    378e:	2205      	movs	r2, #5
    3790:	2380      	movs	r3, #128	; 0x80
    3792:	05db      	lsls	r3, r3, #23
    3794:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    3796:	001a      	movs	r2, r3
    3798:	7853      	ldrb	r3, [r2, #1]
    379a:	2b05      	cmp	r3, #5
    379c:	d1fc      	bne.n	3798 <HAL_Sleep+0x2c>
    379e:	f3bf 8f4f 	dsb	sy
	__WFI();
    37a2:	bf30      	wfi
    37a4:	e7e6      	b.n	3774 <HAL_Sleep+0x8>
	...

000037a8 <SleepTimerInit>:
/************************************** IMPLEMENTATION************************/
/**
* \brief Initializes the sleep timer module
*/
void SleepTimerInit(void)
{
    37a8:	b510      	push	{r4, lr}
    37aa:	b084      	sub	sp, #16
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
	config->mode                = RTC_COUNT_MODE_32BIT;
    37ac:	2201      	movs	r2, #1
    37ae:	466b      	mov	r3, sp
    37b0:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
    37b2:	2300      	movs	r3, #0
    37b4:	4669      	mov	r1, sp
    37b6:	70cb      	strb	r3, [r1, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	config->enable_read_sync    = true;
    37b8:	710a      	strb	r2, [r1, #4]
	struct rtc_count_config rtc_config;
	rtc_count_get_config_defaults(&rtc_config);
	
	rtc_config.prescaler = RTC_COUNT_PRESCALER_OFF;
    37ba:	466a      	mov	r2, sp
    37bc:	800b      	strh	r3, [r1, #0]
	rtc_config.enable_read_sync = true;
	rtc_config.compare_values[0] = COMPARE_COUNT_MAX_VALUE;
    37be:	3b01      	subs	r3, #1
    37c0:	9302      	str	r3, [sp, #8]
	rtc_config.compare_values[1] = COMPARE_COUNT_MAX_VALUE;
    37c2:	9303      	str	r3, [sp, #12]
	rtc_count_init(&rtc, RTC, &rtc_config);
    37c4:	4c04      	ldr	r4, [pc, #16]	; (37d8 <SleepTimerInit+0x30>)
    37c6:	4905      	ldr	r1, [pc, #20]	; (37dc <SleepTimerInit+0x34>)
    37c8:	0020      	movs	r0, r4
    37ca:	4b05      	ldr	r3, [pc, #20]	; (37e0 <SleepTimerInit+0x38>)
    37cc:	4798      	blx	r3
	rtc_count_enable(&rtc);
    37ce:	0020      	movs	r0, r4
    37d0:	4b04      	ldr	r3, [pc, #16]	; (37e4 <SleepTimerInit+0x3c>)
    37d2:	4798      	blx	r3
}
    37d4:	b004      	add	sp, #16
    37d6:	bd10      	pop	{r4, pc}
    37d8:	20000f80 	.word	0x20000f80
    37dc:	40002000 	.word	0x40002000
    37e0:	00000cb1 	.word	0x00000cb1
    37e4:	00000b31 	.word	0x00000b31

000037e8 <SleepTimerGetElapsedTime>:
/**
* \brief Calculate the Elapsed Time from the previous call of this function
* \retval Elapsed time in ticks
*/
uint32_t SleepTimerGetElapsedTime(void)
{
    37e8:	b510      	push	{r4, lr}
	return rtc_count_get_count(&rtc);
    37ea:	4802      	ldr	r0, [pc, #8]	; (37f4 <SleepTimerGetElapsedTime+0xc>)
    37ec:	4b02      	ldr	r3, [pc, #8]	; (37f8 <SleepTimerGetElapsedTime+0x10>)
    37ee:	4798      	blx	r3
}
    37f0:	bd10      	pop	{r4, pc}
    37f2:	46c0      	nop			; (mov r8, r8)
    37f4:	20000f80 	.word	0x20000f80
    37f8:	00000c21 	.word	0x00000c21

000037fc <SleepTimerStart>:

/**
* \brief Initializes the sleep timer
*/
void SleepTimerStart(uint32_t sleepTicks, void (*cb)(void))
{
    37fc:	b570      	push	{r4, r5, r6, lr}
    37fe:	0005      	movs	r5, r0
    3800:	000e      	movs	r6, r1
	rtc_count_set_count(&rtc, 0);
    3802:	4c0a      	ldr	r4, [pc, #40]	; (382c <SleepTimerStart+0x30>)
    3804:	2100      	movs	r1, #0
    3806:	0020      	movs	r0, r4
    3808:	4b09      	ldr	r3, [pc, #36]	; (3830 <SleepTimerStart+0x34>)
    380a:	4798      	blx	r3
	rtc_count_register_callback(&rtc, cb, RTC_COUNT_CALLBACK_COMPARE_0);
    380c:	2208      	movs	r2, #8
    380e:	0031      	movs	r1, r6
    3810:	0020      	movs	r0, r4
    3812:	4b08      	ldr	r3, [pc, #32]	; (3834 <SleepTimerStart+0x38>)
    3814:	4798      	blx	r3
	rtc_count_set_compare(&rtc, sleepTicks, RTC_COUNT_COMPARE_0);
    3816:	2200      	movs	r2, #0
    3818:	0029      	movs	r1, r5
    381a:	0020      	movs	r0, r4
    381c:	4b06      	ldr	r3, [pc, #24]	; (3838 <SleepTimerStart+0x3c>)
    381e:	4798      	blx	r3
	rtc_count_enable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    3820:	2108      	movs	r1, #8
    3822:	0020      	movs	r0, r4
    3824:	4b05      	ldr	r3, [pc, #20]	; (383c <SleepTimerStart+0x40>)
    3826:	4798      	blx	r3
}
    3828:	bd70      	pop	{r4, r5, r6, pc}
    382a:	46c0      	nop			; (mov r8, r8)
    382c:	20000f80 	.word	0x20000f80
    3830:	00000bdd 	.word	0x00000bdd
    3834:	00000d4d 	.word	0x00000d4d
    3838:	00000c4d 	.word	0x00000c4d
    383c:	00000d89 	.word	0x00000d89

00003840 <SleepTimerStop>:

/**
* \brief Stop the sleep timer
*/
void SleepTimerStop(void)
{
    3840:	b510      	push	{r4, lr}
	rtc_count_disable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    3842:	2108      	movs	r1, #8
    3844:	4801      	ldr	r0, [pc, #4]	; (384c <SleepTimerStop+0xc>)
    3846:	4b02      	ldr	r3, [pc, #8]	; (3850 <SleepTimerStop+0x10>)
    3848:	4798      	blx	r3
}
    384a:	bd10      	pop	{r4, pc}
    384c:	20000f80 	.word	0x20000f80
    3850:	00000dcd 	.word	0x00000dcd

00003854 <HAL_SPISend>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    3854:	4b13      	ldr	r3, [pc, #76]	; (38a4 <HAL_SPISend+0x50>)
    3856:	681b      	ldr	r3, [r3, #0]
static uint8_t HAL_SPISend(uint8_t data)
{
	uint16_t read_val = 0;
	
	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master));
    3858:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    385a:	7e1a      	ldrb	r2, [r3, #24]
    385c:	420a      	tst	r2, r1
    385e:	d0fc      	beq.n	385a <HAL_SPISend+0x6>
    3860:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3862:	07d2      	lsls	r2, r2, #31
    3864:	d500      	bpl.n	3868 <HAL_SPISend+0x14>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3866:	6298      	str	r0, [r3, #40]	; 0x28
	spi_write(&master, data);
	while (!spi_is_write_complete(&master));
    3868:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    386a:	7e1a      	ldrb	r2, [r3, #24]
    386c:	420a      	tst	r2, r1
    386e:	d0fc      	beq.n	386a <HAL_SPISend+0x16>
	
	while (!spi_is_ready_to_read(&master));
    3870:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3872:	7e1a      	ldrb	r2, [r3, #24]
    3874:	420a      	tst	r2, r1
    3876:	d0fc      	beq.n	3872 <HAL_SPISend+0x1e>
    3878:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t read_val = 0;
    387a:	2000      	movs	r0, #0
	if (!spi_is_ready_to_read(module)) {
    387c:	0752      	lsls	r2, r2, #29
    387e:	d50a      	bpl.n	3896 <HAL_SPISend+0x42>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3880:	8b5a      	ldrh	r2, [r3, #26]
    3882:	0752      	lsls	r2, r2, #29
    3884:	d501      	bpl.n	388a <HAL_SPISend+0x36>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3886:	2204      	movs	r2, #4
    3888:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    388a:	4a06      	ldr	r2, [pc, #24]	; (38a4 <HAL_SPISend+0x50>)
    388c:	7992      	ldrb	r2, [r2, #6]
    388e:	2a01      	cmp	r2, #1
    3890:	d003      	beq.n	389a <HAL_SPISend+0x46>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3892:	6a98      	ldr	r0, [r3, #40]	; 0x28
    3894:	b2c0      	uxtb	r0, r0
	spi_read(&master, &read_val);
	
	return ((uint8_t)read_val);
    3896:	b2c0      	uxtb	r0, r0
}
    3898:	4770      	bx	lr
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    389a:	6a98      	ldr	r0, [r3, #40]	; 0x28
    389c:	05c0      	lsls	r0, r0, #23
    389e:	0dc0      	lsrs	r0, r0, #23
    38a0:	e7f9      	b.n	3896 <HAL_SPISend+0x42>
    38a2:	46c0      	nop			; (mov r8, r8)
    38a4:	20000b30 	.word	0x20000b30

000038a8 <HAL_ResetPinMakeOutput>:
{
    38a8:	b500      	push	{lr}
    38aa:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    38ac:	a901      	add	r1, sp, #4
    38ae:	2301      	movs	r3, #1
    38b0:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    38b2:	2200      	movs	r2, #0
    38b4:	708a      	strb	r2, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    38b6:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    38b8:	202f      	movs	r0, #47	; 0x2f
    38ba:	4b02      	ldr	r3, [pc, #8]	; (38c4 <HAL_ResetPinMakeOutput+0x1c>)
    38bc:	4798      	blx	r3
}
    38be:	b003      	add	sp, #12
    38c0:	bd00      	pop	{pc}
    38c2:	46c0      	nop			; (mov r8, r8)
    38c4:	00000b01 	.word	0x00000b01

000038c8 <HAL_RadioDIO2Callback>:
{
    38c8:	b510      	push	{r4, lr}
  if (interruptHandlerDio2)
    38ca:	4b05      	ldr	r3, [pc, #20]	; (38e0 <HAL_RadioDIO2Callback+0x18>)
    38cc:	681b      	ldr	r3, [r3, #0]
    38ce:	2b00      	cmp	r3, #0
    38d0:	d004      	beq.n	38dc <HAL_RadioDIO2Callback+0x14>
	PMM_Wakeup();
    38d2:	4b04      	ldr	r3, [pc, #16]	; (38e4 <HAL_RadioDIO2Callback+0x1c>)
    38d4:	4798      	blx	r3
    interruptHandlerDio2();
    38d6:	4b02      	ldr	r3, [pc, #8]	; (38e0 <HAL_RadioDIO2Callback+0x18>)
    38d8:	681b      	ldr	r3, [r3, #0]
    38da:	4798      	blx	r3
}
    38dc:	bd10      	pop	{r4, pc}
    38de:	46c0      	nop			; (mov r8, r8)
    38e0:	20000b2c 	.word	0x20000b2c
    38e4:	00003d45 	.word	0x00003d45

000038e8 <HAL_RadioDIO1Callback>:
{
    38e8:	b510      	push	{r4, lr}
  if (interruptHandlerDio1)
    38ea:	4b05      	ldr	r3, [pc, #20]	; (3900 <HAL_RadioDIO1Callback+0x18>)
    38ec:	681b      	ldr	r3, [r3, #0]
    38ee:	2b00      	cmp	r3, #0
    38f0:	d004      	beq.n	38fc <HAL_RadioDIO1Callback+0x14>
	PMM_Wakeup();
    38f2:	4b04      	ldr	r3, [pc, #16]	; (3904 <HAL_RadioDIO1Callback+0x1c>)
    38f4:	4798      	blx	r3
    interruptHandlerDio1();
    38f6:	4b02      	ldr	r3, [pc, #8]	; (3900 <HAL_RadioDIO1Callback+0x18>)
    38f8:	681b      	ldr	r3, [r3, #0]
    38fa:	4798      	blx	r3
}
    38fc:	bd10      	pop	{r4, pc}
    38fe:	46c0      	nop			; (mov r8, r8)
    3900:	20000b28 	.word	0x20000b28
    3904:	00003d45 	.word	0x00003d45

00003908 <HAL_RadioDIO0Callback>:
{
    3908:	b510      	push	{r4, lr}
  if (interruptHandlerDio0)
    390a:	4b05      	ldr	r3, [pc, #20]	; (3920 <HAL_RadioDIO0Callback+0x18>)
    390c:	681b      	ldr	r3, [r3, #0]
    390e:	2b00      	cmp	r3, #0
    3910:	d004      	beq.n	391c <HAL_RadioDIO0Callback+0x14>
	PMM_Wakeup();
    3912:	4b04      	ldr	r3, [pc, #16]	; (3924 <HAL_RadioDIO0Callback+0x1c>)
    3914:	4798      	blx	r3
    interruptHandlerDio0();
    3916:	4b02      	ldr	r3, [pc, #8]	; (3920 <HAL_RadioDIO0Callback+0x18>)
    3918:	681b      	ldr	r3, [r3, #0]
    391a:	4798      	blx	r3
}
    391c:	bd10      	pop	{r4, pc}
    391e:	46c0      	nop			; (mov r8, r8)
    3920:	20000b24 	.word	0x20000b24
    3924:	00003d45 	.word	0x00003d45

00003928 <HAL_SPICSAssert>:
{
    3928:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, true);
    392a:	2201      	movs	r2, #1
    392c:	4902      	ldr	r1, [pc, #8]	; (3938 <HAL_SPICSAssert+0x10>)
    392e:	4803      	ldr	r0, [pc, #12]	; (393c <HAL_SPICSAssert+0x14>)
    3930:	4b03      	ldr	r3, [pc, #12]	; (3940 <HAL_SPICSAssert+0x18>)
    3932:	4798      	blx	r3
}
    3934:	bd10      	pop	{r4, pc}
    3936:	46c0      	nop			; (mov r8, r8)
    3938:	20000fb8 	.word	0x20000fb8
    393c:	20000b30 	.word	0x20000b30
    3940:	00001ad9 	.word	0x00001ad9

00003944 <HAL_SPICSDeassert>:
{
    3944:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, false);
    3946:	2200      	movs	r2, #0
    3948:	4902      	ldr	r1, [pc, #8]	; (3954 <HAL_SPICSDeassert+0x10>)
    394a:	4803      	ldr	r0, [pc, #12]	; (3958 <HAL_SPICSDeassert+0x14>)
    394c:	4b03      	ldr	r3, [pc, #12]	; (395c <HAL_SPICSDeassert+0x18>)
    394e:	4798      	blx	r3
}
    3950:	bd10      	pop	{r4, pc}
    3952:	46c0      	nop			; (mov r8, r8)
    3954:	20000fb8 	.word	0x20000fb8
    3958:	20000b30 	.word	0x20000b30
    395c:	00001ad9 	.word	0x00001ad9

00003960 <HAL_RadioInit>:
{
    3960:	b5f0      	push	{r4, r5, r6, r7, lr}
    3962:	46d6      	mov	lr, sl
    3964:	464f      	mov	r7, r9
    3966:	4646      	mov	r6, r8
    3968:	b5c0      	push	{r6, r7, lr}
    396a:	b090      	sub	sp, #64	; 0x40
	config->input_pull = PORT_PIN_PULL_UP;
    396c:	ac01      	add	r4, sp, #4
    396e:	2601      	movs	r6, #1
    3970:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    3972:	2500      	movs	r5, #0
    3974:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    3976:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(SX_RF_SPI_SCK, &pin_conf);
    3978:	0021      	movs	r1, r4
    397a:	2052      	movs	r0, #82	; 0x52
    397c:	4f52      	ldr	r7, [pc, #328]	; (3ac8 <HAL_RadioInit+0x168>)
    397e:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_MOSI, &pin_conf);
    3980:	0021      	movs	r1, r4
    3982:	203e      	movs	r0, #62	; 0x3e
    3984:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_CS, &pin_conf);
    3986:	0021      	movs	r1, r4
    3988:	203f      	movs	r0, #63	; 0x3f
    398a:	47b8      	blx	r7
	port_pin_set_config(SX_RF_RESET_PIN, &pin_conf);
    398c:	0021      	movs	r1, r4
    398e:	202f      	movs	r0, #47	; 0x2f
    3990:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    3992:	2280      	movs	r2, #128	; 0x80
    3994:	02d2      	lsls	r2, r2, #11
    3996:	4b4d      	ldr	r3, [pc, #308]	; (3acc <HAL_RadioInit+0x16c>)
    3998:	619a      	str	r2, [r3, #24]
    399a:	4b4d      	ldr	r3, [pc, #308]	; (3ad0 <HAL_RadioInit+0x170>)
    399c:	2280      	movs	r2, #128	; 0x80
    399e:	05d2      	lsls	r2, r2, #23
    39a0:	619a      	str	r2, [r3, #24]
    39a2:	2280      	movs	r2, #128	; 0x80
    39a4:	0612      	lsls	r2, r2, #24
    39a6:	619a      	str	r2, [r3, #24]
    39a8:	2280      	movs	r2, #128	; 0x80
    39aa:	0212      	lsls	r2, r2, #8
    39ac:	619a      	str	r2, [r3, #24]
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    39ae:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(SX_RF_SPI_MISO, &pin_conf);
    39b0:	0021      	movs	r1, r4
    39b2:	2053      	movs	r0, #83	; 0x53
    39b4:	47b8      	blx	r7
	extint_chan_get_config_defaults(&config_extint_chan);
    39b6:	ac02      	add	r4, sp, #8
    39b8:	0020      	movs	r0, r4
    39ba:	4b46      	ldr	r3, [pc, #280]	; (3ad4 <HAL_RadioInit+0x174>)
    39bc:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO0_EIC_PIN;
    39be:	2330      	movs	r3, #48	; 0x30
    39c0:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO0_EIC_MUX;
    39c2:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    39c4:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    39c6:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO0_EIC_LINE, &config_extint_chan);
    39c8:	0021      	movs	r1, r4
    39ca:	2000      	movs	r0, #0
    39cc:	4b42      	ldr	r3, [pc, #264]	; (3ad8 <HAL_RadioInit+0x178>)
    39ce:	469a      	mov	sl, r3
    39d0:	4798      	blx	r3
	extint_register_callback(HAL_RadioDIO0Callback,DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    39d2:	2200      	movs	r2, #0
    39d4:	2100      	movs	r1, #0
    39d6:	4841      	ldr	r0, [pc, #260]	; (3adc <HAL_RadioInit+0x17c>)
    39d8:	4b41      	ldr	r3, [pc, #260]	; (3ae0 <HAL_RadioInit+0x180>)
    39da:	4699      	mov	r9, r3
    39dc:	4798      	blx	r3
	extint_chan_enable_callback(DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    39de:	2100      	movs	r1, #0
    39e0:	2000      	movs	r0, #0
    39e2:	4b40      	ldr	r3, [pc, #256]	; (3ae4 <HAL_RadioInit+0x184>)
    39e4:	4698      	mov	r8, r3
    39e6:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO1_EIC_PIN;
    39e8:	230b      	movs	r3, #11
    39ea:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO1_EIC_MUX;
    39ec:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    39ee:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    39f0:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO1_EIC_LINE, &config_extint_chan);
    39f2:	0021      	movs	r1, r4
    39f4:	200b      	movs	r0, #11
    39f6:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO1Callback,DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    39f8:	2200      	movs	r2, #0
    39fa:	210b      	movs	r1, #11
    39fc:	483a      	ldr	r0, [pc, #232]	; (3ae8 <HAL_RadioInit+0x188>)
    39fe:	47c8      	blx	r9
	extint_chan_enable_callback(DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    3a00:	2100      	movs	r1, #0
    3a02:	200b      	movs	r0, #11
    3a04:	47c0      	blx	r8
	config_extint_chan.gpio_pin           = DIO2_EIC_PIN;
    3a06:	230c      	movs	r3, #12
    3a08:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO2_EIC_MUX;
    3a0a:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    3a0c:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    3a0e:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO2_EIC_LINE, &config_extint_chan);
    3a10:	0021      	movs	r1, r4
    3a12:	200c      	movs	r0, #12
    3a14:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO2Callback,DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    3a16:	2200      	movs	r2, #0
    3a18:	210c      	movs	r1, #12
    3a1a:	4834      	ldr	r0, [pc, #208]	; (3aec <HAL_RadioInit+0x18c>)
    3a1c:	47c8      	blx	r9
	extint_chan_enable_callback(DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    3a1e:	2100      	movs	r1, #0
    3a20:	200c      	movs	r0, #12
    3a22:	47c0      	blx	r8
	slave->ss_pin          = config->ss_pin;
    3a24:	4b32      	ldr	r3, [pc, #200]	; (3af0 <HAL_RadioInit+0x190>)
    3a26:	4698      	mov	r8, r3
    3a28:	233f      	movs	r3, #63	; 0x3f
    3a2a:	4642      	mov	r2, r8
    3a2c:	7013      	strb	r3, [r2, #0]
	slave->address_enabled = config->address_enabled;
    3a2e:	7055      	strb	r5, [r2, #1]
	slave->address         = config->address;
    3a30:	7095      	strb	r5, [r2, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    3a32:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    3a34:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    3a36:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    3a38:	0021      	movs	r1, r4
    3a3a:	203f      	movs	r0, #63	; 0x3f
    3a3c:	47b8      	blx	r7
	port_pin_set_output_level(slave->ss_pin, true);
    3a3e:	4643      	mov	r3, r8
    3a40:	781a      	ldrb	r2, [r3, #0]
	if (port_index < PORT_INST_NUM) {
    3a42:	09d1      	lsrs	r1, r2, #7
		return NULL;
    3a44:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3a46:	2900      	cmp	r1, #0
    3a48:	d104      	bne.n	3a54 <HAL_RadioInit+0xf4>
		return &(ports[port_index]->Group[group_index]);
    3a4a:	0953      	lsrs	r3, r2, #5
    3a4c:	01db      	lsls	r3, r3, #7
    3a4e:	4929      	ldr	r1, [pc, #164]	; (3af4 <HAL_RadioInit+0x194>)
    3a50:	468c      	mov	ip, r1
    3a52:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3a54:	211f      	movs	r1, #31
    3a56:	4011      	ands	r1, r2
    3a58:	2201      	movs	r2, #1
    3a5a:	0010      	movs	r0, r2
    3a5c:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    3a5e:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    3a60:	ac02      	add	r4, sp, #8
    3a62:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    3a64:	2300      	movs	r3, #0
    3a66:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    3a68:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    3a6a:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    3a6c:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    3a6e:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    3a70:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    3a72:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    3a74:	3223      	adds	r2, #35	; 0x23
    3a76:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    3a78:	3a18      	subs	r2, #24
    3a7a:	2100      	movs	r1, #0
    3a7c:	a808      	add	r0, sp, #32
    3a7e:	4b1e      	ldr	r3, [pc, #120]	; (3af8 <HAL_RadioInit+0x198>)
    3a80:	4798      	blx	r3
	config_spi_master.mode_specific.master.baudrate = SX_RF_SPI_BAUDRATE;
    3a82:	4b1e      	ldr	r3, [pc, #120]	; (3afc <HAL_RadioInit+0x19c>)
    3a84:	61a3      	str	r3, [r4, #24]
	config_spi_master.mux_setting = SX_RF_SPI_SERCOM_MUX_SETTING;
    3a86:	2380      	movs	r3, #128	; 0x80
    3a88:	025b      	lsls	r3, r3, #9
    3a8a:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = SX_RF_SPI_SERCOM_PINMUX_PAD0;
    3a8c:	4b1c      	ldr	r3, [pc, #112]	; (3b00 <HAL_RadioInit+0x1a0>)
    3a8e:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    3a90:	2301      	movs	r3, #1
    3a92:	425b      	negs	r3, r3
    3a94:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = SX_RF_SPI_SERCOM_PINMUX_PAD2;
    3a96:	4b1b      	ldr	r3, [pc, #108]	; (3b04 <HAL_RadioInit+0x1a4>)
    3a98:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = SX_RF_SPI_SERCOM_PINMUX_PAD3;
    3a9a:	4b1b      	ldr	r3, [pc, #108]	; (3b08 <HAL_RadioInit+0x1a8>)
    3a9c:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, SX_RF_SPI, &config_spi_master);	
    3a9e:	4d1b      	ldr	r5, [pc, #108]	; (3b0c <HAL_RadioInit+0x1ac>)
    3aa0:	0022      	movs	r2, r4
    3aa2:	491b      	ldr	r1, [pc, #108]	; (3b10 <HAL_RadioInit+0x1b0>)
    3aa4:	0028      	movs	r0, r5
    3aa6:	4b1b      	ldr	r3, [pc, #108]	; (3b14 <HAL_RadioInit+0x1b4>)
    3aa8:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3aaa:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    3aac:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    3aae:	2b00      	cmp	r3, #0
    3ab0:	d1fc      	bne.n	3aac <HAL_RadioInit+0x14c>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3ab2:	6813      	ldr	r3, [r2, #0]
    3ab4:	2102      	movs	r1, #2
    3ab6:	430b      	orrs	r3, r1
    3ab8:	6013      	str	r3, [r2, #0]
}
    3aba:	b010      	add	sp, #64	; 0x40
    3abc:	bc1c      	pop	{r2, r3, r4}
    3abe:	4690      	mov	r8, r2
    3ac0:	4699      	mov	r9, r3
    3ac2:	46a2      	mov	sl, r4
    3ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ac6:	46c0      	nop			; (mov r8, r8)
    3ac8:	00000b01 	.word	0x00000b01
    3acc:	40002900 	.word	0x40002900
    3ad0:	40002880 	.word	0x40002880
    3ad4:	000009c1 	.word	0x000009c1
    3ad8:	000009d5 	.word	0x000009d5
    3adc:	00003909 	.word	0x00003909
    3ae0:	00000a61 	.word	0x00000a61
    3ae4:	00000a8d 	.word	0x00000a8d
    3ae8:	000038e9 	.word	0x000038e9
    3aec:	000038c9 	.word	0x000038c9
    3af0:	20000fb8 	.word	0x20000fb8
    3af4:	40002800 	.word	0x40002800
    3af8:	00014f51 	.word	0x00014f51
    3afc:	001e8480 	.word	0x001e8480
    3b00:	00530005 	.word	0x00530005
    3b04:	003e0005 	.word	0x003e0005
    3b08:	00520005 	.word	0x00520005
    3b0c:	20000b30 	.word	0x20000b30
    3b10:	42001000 	.word	0x42001000
    3b14:	000017fd 	.word	0x000017fd

00003b18 <HAL_Radio_resources_init>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    3b18:	4b07      	ldr	r3, [pc, #28]	; (3b38 <HAL_Radio_resources_init+0x20>)
    3b1a:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    3b1c:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    3b1e:	2b00      	cmp	r3, #0
    3b20:	d1fc      	bne.n	3b1c <HAL_Radio_resources_init+0x4>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3b22:	6813      	ldr	r3, [r2, #0]
    3b24:	2102      	movs	r1, #2
    3b26:	430b      	orrs	r3, r1
    3b28:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3b2a:	4b03      	ldr	r3, [pc, #12]	; (3b38 <HAL_Radio_resources_init+0x20>)
    3b2c:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    3b2e:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(&master)) {
    3b30:	2b00      	cmp	r3, #0
    3b32:	d1fc      	bne.n	3b2e <HAL_Radio_resources_init+0x16>
}
    3b34:	4770      	bx	lr
    3b36:	46c0      	nop			; (mov r8, r8)
    3b38:	20000b30 	.word	0x20000b30

00003b3c <HAL_RadioDeInit>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    3b3c:	4b06      	ldr	r3, [pc, #24]	; (3b58 <HAL_RadioDeInit+0x1c>)
    3b3e:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    3b40:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    3b42:	2b00      	cmp	r3, #0
    3b44:	d1fc      	bne.n	3b40 <HAL_RadioDeInit+0x4>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    3b46:	338f      	adds	r3, #143	; 0x8f
    3b48:	7513      	strb	r3, [r2, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    3b4a:	7613      	strb	r3, [r2, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    3b4c:	6813      	ldr	r3, [r2, #0]
    3b4e:	2102      	movs	r1, #2
    3b50:	438b      	bics	r3, r1
    3b52:	6013      	str	r3, [r2, #0]
}
    3b54:	4770      	bx	lr
    3b56:	46c0      	nop			; (mov r8, r8)
    3b58:	20000b30 	.word	0x20000b30

00003b5c <RADIO_Reset>:
{
    3b5c:	b570      	push	{r4, r5, r6, lr}
    3b5e:	b082      	sub	sp, #8
	HAL_ResetPinMakeOutput();
    3b60:	4c0a      	ldr	r4, [pc, #40]	; (3b8c <RADIO_Reset+0x30>)
    3b62:	47a0      	blx	r4
		port_base->OUTCLR.reg = pin_mask;
    3b64:	4d0a      	ldr	r5, [pc, #40]	; (3b90 <RADIO_Reset+0x34>)
    3b66:	2680      	movs	r6, #128	; 0x80
    3b68:	0236      	lsls	r6, r6, #8
    3b6a:	616e      	str	r6, [r5, #20]
	SystemBlockingWaitMs(1);
    3b6c:	2001      	movs	r0, #1
    3b6e:	4b09      	ldr	r3, [pc, #36]	; (3b94 <RADIO_Reset+0x38>)
    3b70:	4798      	blx	r3
	config->direction  = PORT_PIN_DIR_INPUT;
    3b72:	a901      	add	r1, sp, #4
    3b74:	2300      	movs	r3, #0
    3b76:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    3b78:	2201      	movs	r2, #1
    3b7a:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    3b7c:	708b      	strb	r3, [r1, #2]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    3b7e:	202f      	movs	r0, #47	; 0x2f
    3b80:	4b05      	ldr	r3, [pc, #20]	; (3b98 <RADIO_Reset+0x3c>)
    3b82:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    3b84:	61ae      	str	r6, [r5, #24]
	HAL_ResetPinMakeOutput();
    3b86:	47a0      	blx	r4
}
    3b88:	b002      	add	sp, #8
    3b8a:	bd70      	pop	{r4, r5, r6, pc}
    3b8c:	000038a9 	.word	0x000038a9
    3b90:	40002880 	.word	0x40002880
    3b94:	00003d11 	.word	0x00003d11
    3b98:	00000b01 	.word	0x00000b01

00003b9c <RADIO_RegisterWrite>:
{
    3b9c:	b570      	push	{r4, r5, r6, lr}
    3b9e:	0004      	movs	r4, r0
    3ba0:	000d      	movs	r5, r1
	HAL_SPICSAssert();
    3ba2:	4b05      	ldr	r3, [pc, #20]	; (3bb8 <RADIO_RegisterWrite+0x1c>)
    3ba4:	4798      	blx	r3
	HAL_SPISend(REG_WRITE_CMD | reg);
    3ba6:	2080      	movs	r0, #128	; 0x80
    3ba8:	4320      	orrs	r0, r4
    3baa:	4c04      	ldr	r4, [pc, #16]	; (3bbc <RADIO_RegisterWrite+0x20>)
    3bac:	47a0      	blx	r4
	HAL_SPISend(value);
    3bae:	0028      	movs	r0, r5
    3bb0:	47a0      	blx	r4
	HAL_SPICSDeassert();
    3bb2:	4b03      	ldr	r3, [pc, #12]	; (3bc0 <RADIO_RegisterWrite+0x24>)
    3bb4:	4798      	blx	r3
}
    3bb6:	bd70      	pop	{r4, r5, r6, pc}
    3bb8:	00003929 	.word	0x00003929
    3bbc:	00003855 	.word	0x00003855
    3bc0:	00003945 	.word	0x00003945

00003bc4 <RADIO_RegisterRead>:
{
    3bc4:	b510      	push	{r4, lr}
    3bc6:	0004      	movs	r4, r0
	HAL_SPICSAssert();
    3bc8:	4b06      	ldr	r3, [pc, #24]	; (3be4 <RADIO_RegisterRead+0x20>)
    3bca:	4798      	blx	r3
	HAL_SPISend(reg);
    3bcc:	207f      	movs	r0, #127	; 0x7f
    3bce:	4020      	ands	r0, r4
    3bd0:	4c05      	ldr	r4, [pc, #20]	; (3be8 <RADIO_RegisterRead+0x24>)
    3bd2:	47a0      	blx	r4
	readValue = HAL_SPISend(0xFF);
    3bd4:	20ff      	movs	r0, #255	; 0xff
    3bd6:	47a0      	blx	r4
    3bd8:	0004      	movs	r4, r0
	HAL_SPICSDeassert();
    3bda:	4b04      	ldr	r3, [pc, #16]	; (3bec <RADIO_RegisterRead+0x28>)
    3bdc:	4798      	blx	r3
}
    3bde:	0020      	movs	r0, r4
    3be0:	bd10      	pop	{r4, pc}
    3be2:	46c0      	nop			; (mov r8, r8)
    3be4:	00003929 	.word	0x00003929
    3be8:	00003855 	.word	0x00003855
    3bec:	00003945 	.word	0x00003945

00003bf0 <RADIO_FrameWrite>:
{
    3bf0:	b570      	push	{r4, r5, r6, lr}
    3bf2:	0004      	movs	r4, r0
    3bf4:	000e      	movs	r6, r1
    3bf6:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    3bf8:	4b0a      	ldr	r3, [pc, #40]	; (3c24 <RADIO_FrameWrite+0x34>)
    3bfa:	4798      	blx	r3
    HAL_SPISend(REG_WRITE_CMD | offset);
    3bfc:	2080      	movs	r0, #128	; 0x80
    3bfe:	4320      	orrs	r0, r4
    3c00:	4b09      	ldr	r3, [pc, #36]	; (3c28 <RADIO_FrameWrite+0x38>)
    3c02:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    3c04:	2d00      	cmp	r5, #0
    3c06:	d00a      	beq.n	3c1e <RADIO_FrameWrite+0x2e>
    3c08:	0034      	movs	r4, r6
    3c0a:	3d01      	subs	r5, #1
    3c0c:	b2ed      	uxtb	r5, r5
    3c0e:	3501      	adds	r5, #1
    3c10:	1975      	adds	r5, r6, r5
	    HAL_SPISend(buffer[i]);
    3c12:	4e05      	ldr	r6, [pc, #20]	; (3c28 <RADIO_FrameWrite+0x38>)
    3c14:	7820      	ldrb	r0, [r4, #0]
    3c16:	47b0      	blx	r6
    3c18:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    3c1a:	42ac      	cmp	r4, r5
    3c1c:	d1fa      	bne.n	3c14 <RADIO_FrameWrite+0x24>
    HAL_SPICSDeassert();
    3c1e:	4b03      	ldr	r3, [pc, #12]	; (3c2c <RADIO_FrameWrite+0x3c>)
    3c20:	4798      	blx	r3
}
    3c22:	bd70      	pop	{r4, r5, r6, pc}
    3c24:	00003929 	.word	0x00003929
    3c28:	00003855 	.word	0x00003855
    3c2c:	00003945 	.word	0x00003945

00003c30 <RADIO_FrameRead>:
{
    3c30:	b570      	push	{r4, r5, r6, lr}
    3c32:	0004      	movs	r4, r0
    3c34:	000e      	movs	r6, r1
    3c36:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    3c38:	4b0a      	ldr	r3, [pc, #40]	; (3c64 <RADIO_FrameRead+0x34>)
    3c3a:	4798      	blx	r3
    HAL_SPISend(offset);
    3c3c:	0020      	movs	r0, r4
    3c3e:	4b0a      	ldr	r3, [pc, #40]	; (3c68 <RADIO_FrameRead+0x38>)
    3c40:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    3c42:	2d00      	cmp	r5, #0
    3c44:	d00b      	beq.n	3c5e <RADIO_FrameRead+0x2e>
    3c46:	0034      	movs	r4, r6
    3c48:	3d01      	subs	r5, #1
    3c4a:	b2ed      	uxtb	r5, r5
    3c4c:	3501      	adds	r5, #1
    3c4e:	1975      	adds	r5, r6, r5
	    buffer[i] = HAL_SPISend(0xFF);
    3c50:	4e05      	ldr	r6, [pc, #20]	; (3c68 <RADIO_FrameRead+0x38>)
    3c52:	20ff      	movs	r0, #255	; 0xff
    3c54:	47b0      	blx	r6
    3c56:	7020      	strb	r0, [r4, #0]
    3c58:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    3c5a:	42ac      	cmp	r4, r5
    3c5c:	d1f9      	bne.n	3c52 <RADIO_FrameRead+0x22>
    HAL_SPICSDeassert();
    3c5e:	4b03      	ldr	r3, [pc, #12]	; (3c6c <RADIO_FrameRead+0x3c>)
    3c60:	4798      	blx	r3
}
    3c62:	bd70      	pop	{r4, r5, r6, pc}
    3c64:	00003929 	.word	0x00003929
    3c68:	00003855 	.word	0x00003855
    3c6c:	00003945 	.word	0x00003945

00003c70 <HAL_RegisterDioInterruptHandler>:
 * \param[in] dioPin  - DIO pin
 * \param[in] handler - function to be called upon given DIO interrupt
 */
void HAL_RegisterDioInterruptHandler(uint8_t dioPin, DioInterruptHandler_t handler)
{
  switch (dioPin)
    3c70:	2802      	cmp	r0, #2
    3c72:	d007      	beq.n	3c84 <HAL_RegisterDioInterruptHandler+0x14>
    3c74:	2804      	cmp	r0, #4
    3c76:	d008      	beq.n	3c8a <HAL_RegisterDioInterruptHandler+0x1a>
    3c78:	2801      	cmp	r0, #1
    3c7a:	d000      	beq.n	3c7e <HAL_RegisterDioInterruptHandler+0xe>
#endif

    default:
      break;
  }
}
    3c7c:	4770      	bx	lr
      interruptHandlerDio0 = handler;
    3c7e:	4b04      	ldr	r3, [pc, #16]	; (3c90 <HAL_RegisterDioInterruptHandler+0x20>)
    3c80:	6019      	str	r1, [r3, #0]
      break;
    3c82:	e7fb      	b.n	3c7c <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio1 = handler;
    3c84:	4b03      	ldr	r3, [pc, #12]	; (3c94 <HAL_RegisterDioInterruptHandler+0x24>)
    3c86:	6019      	str	r1, [r3, #0]
      break;
    3c88:	e7f8      	b.n	3c7c <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio2 = handler;
    3c8a:	4b03      	ldr	r3, [pc, #12]	; (3c98 <HAL_RegisterDioInterruptHandler+0x28>)
    3c8c:	6019      	str	r1, [r3, #0]
}
    3c8e:	e7f5      	b.n	3c7c <HAL_RegisterDioInterruptHandler+0xc>
    3c90:	20000b24 	.word	0x20000b24
    3c94:	20000b28 	.word	0x20000b28
    3c98:	20000b2c 	.word	0x20000b2c

00003c9c <HAL_EnableRFCtrl>:

void HAL_EnableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
   if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    3c9c:	2801      	cmp	r0, #1
    3c9e:	d00a      	beq.n	3cb6 <HAL_EnableRFCtrl+0x1a>
    3ca0:	2900      	cmp	r1, #0
    3ca2:	d008      	beq.n	3cb6 <HAL_EnableRFCtrl+0x1a>
   {
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_ACTIVE);		
   }
   else if ((RFCtrl1 == PA_BOOST) && (RFCtrl2 == TX))
    3ca4:	2802      	cmp	r0, #2
    3ca6:	d10a      	bne.n	3cbe <HAL_EnableRFCtrl+0x22>
    3ca8:	2901      	cmp	r1, #1
    3caa:	d108      	bne.n	3cbe <HAL_EnableRFCtrl+0x22>
		port_base->OUTCLR.reg = pin_mask;
    3cac:	2280      	movs	r2, #128	; 0x80
    3cae:	0192      	lsls	r2, r2, #6
    3cb0:	4b03      	ldr	r3, [pc, #12]	; (3cc0 <HAL_EnableRFCtrl+0x24>)
    3cb2:	615a      	str	r2, [r3, #20]
   {
	   port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);
   }
#endif	
}
    3cb4:	e003      	b.n	3cbe <HAL_EnableRFCtrl+0x22>
		port_base->OUTSET.reg = pin_mask;
    3cb6:	2280      	movs	r2, #128	; 0x80
    3cb8:	0192      	lsls	r2, r2, #6
    3cba:	4b01      	ldr	r3, [pc, #4]	; (3cc0 <HAL_EnableRFCtrl+0x24>)
    3cbc:	619a      	str	r2, [r3, #24]
    3cbe:	4770      	bx	lr
    3cc0:	40002800 	.word	0x40002800

00003cc4 <HAL_DisableRFCtrl>:

void HAL_DisableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
	if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    3cc4:	2801      	cmp	r0, #1
    3cc6:	d001      	beq.n	3ccc <HAL_DisableRFCtrl+0x8>
    3cc8:	2900      	cmp	r1, #0
    3cca:	d103      	bne.n	3cd4 <HAL_DisableRFCtrl+0x10>
		port_base->OUTCLR.reg = pin_mask;
    3ccc:	2280      	movs	r2, #128	; 0x80
    3cce:	0192      	lsls	r2, r2, #6
    3cd0:	4b01      	ldr	r3, [pc, #4]	; (3cd8 <HAL_DisableRFCtrl+0x14>)
    3cd2:	615a      	str	r2, [r3, #20]
	{
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
	}
#endif	
}
    3cd4:	4770      	bx	lr
    3cd6:	46c0      	nop			; (mov r8, r8)
    3cd8:	40002800 	.word	0x40002800

00003cdc <HAL_GetRadioClkStabilizationDelay>:
 * \param[out] Time value in ms
 */
uint8_t HAL_GetRadioClkStabilizationDelay(void)
{
	return RADIO_CLK_STABILITATION_DELAY;
}
    3cdc:	2002      	movs	r0, #2
    3cde:	4770      	bx	lr

00003ce0 <HAL_GetRadioClkSrc>:
 * \param[out] Type of clock source TCXO or XTAL
 */
RadioClockSources_t HAL_GetRadioClkSrc(void)
{
	return RADIO_CLK_SRC;
}
    3ce0:	2000      	movs	r0, #0
    3ce2:	4770      	bx	lr

00003ce4 <HAL_TCXOPowerOn>:
 *
 * \param[in] None
 * \param[out] None
 */
void HAL_TCXOPowerOn(void)
{
    3ce4:	b510      	push	{r4, lr}
		port_base->OUTSET.reg = pin_mask;
    3ce6:	2280      	movs	r2, #128	; 0x80
    3ce8:	0092      	lsls	r2, r2, #2
    3cea:	4b03      	ldr	r3, [pc, #12]	; (3cf8 <HAL_TCXOPowerOn+0x14>)
    3cec:	619a      	str	r2, [r3, #24]
#ifdef TCXO_ENABLE
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_ACTIVE);
	delay_ms(RADIO_CLK_STABILITATION_DELAY);
    3cee:	2002      	movs	r0, #2
    3cf0:	4b02      	ldr	r3, [pc, #8]	; (3cfc <HAL_TCXOPowerOn+0x18>)
    3cf2:	4798      	blx	r3
#endif
}
    3cf4:	bd10      	pop	{r4, pc}
    3cf6:	46c0      	nop			; (mov r8, r8)
    3cf8:	40002800 	.word	0x40002800
    3cfc:	000001f1 	.word	0x000001f1

00003d00 <HAL_TCXOPowerOff>:
		port_base->OUTCLR.reg = pin_mask;
    3d00:	2280      	movs	r2, #128	; 0x80
    3d02:	0092      	lsls	r2, r2, #2
    3d04:	4b01      	ldr	r3, [pc, #4]	; (3d0c <HAL_TCXOPowerOff+0xc>)
    3d06:	615a      	str	r2, [r3, #20]
#ifdef TCXO_ENABLE
#ifndef TCXO_ALWAYS_ON
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
#endif
}
    3d08:	4770      	bx	lr
    3d0a:	46c0      	nop			; (mov r8, r8)
    3d0c:	40002800 	.word	0x40002800

00003d10 <SystemBlockingWaitMs>:
 * waiting with the MCU in sleep.
 * Find out how long it takes the MCU to go to and wake up from sleep to see if
 * it makes sense to go to sleep at all 
 */
void SystemBlockingWaitMs(uint32_t ms)
{
    3d10:	b510      	push	{r4, lr}
#ifndef UT
    delay_ms(ms);
    3d12:	2800      	cmp	r0, #0
    3d14:	d103      	bne.n	3d1e <SystemBlockingWaitMs+0xe>
    3d16:	2001      	movs	r0, #1
    3d18:	4b02      	ldr	r3, [pc, #8]	; (3d24 <SystemBlockingWaitMs+0x14>)
    3d1a:	4798      	blx	r3
#endif
}
    3d1c:	bd10      	pop	{r4, pc}
    delay_ms(ms);
    3d1e:	4b02      	ldr	r3, [pc, #8]	; (3d28 <SystemBlockingWaitMs+0x18>)
    3d20:	4798      	blx	r3
    3d22:	e7fb      	b.n	3d1c <SystemBlockingWaitMs+0xc>
    3d24:	000001c5 	.word	0x000001c5
    3d28:	000001f1 	.word	0x000001f1

00003d2c <system_enter_critical_section>:
{

}

void system_enter_critical_section(void)
{
    3d2c:	b510      	push	{r4, lr}
	cpu_irq_enter_critical();
    3d2e:	4b01      	ldr	r3, [pc, #4]	; (3d34 <system_enter_critical_section+0x8>)
    3d30:	4798      	blx	r3
#ifndef UT
	system_interrupt_enter_critical_section();
#endif
}
    3d32:	bd10      	pop	{r4, pc}
    3d34:	00000115 	.word	0x00000115

00003d38 <system_leave_critical_section>:

void system_leave_critical_section(void)
{
    3d38:	b510      	push	{r4, lr}
	cpu_irq_leave_critical();
    3d3a:	4b01      	ldr	r3, [pc, #4]	; (3d40 <system_leave_critical_section+0x8>)
    3d3c:	4798      	blx	r3
#ifndef UT
	system_interrupt_leave_critical_section();
#endif
}
    3d3e:	bd10      	pop	{r4, pc}
    3d40:	00000155 	.word	0x00000155

00003d44 <PMM_Wakeup>:

/**
* \brief Wakeup from sleep
*/
void PMM_Wakeup(void)
{
    3d44:	b570      	push	{r4, r5, r6, lr}
    uint64_t sleptTimeUs = 0;

    if (PMM_STATE_SLEEP == pmmState)
    3d46:	4b16      	ldr	r3, [pc, #88]	; (3da0 <PMM_Wakeup+0x5c>)
    3d48:	781b      	ldrb	r3, [r3, #0]
    3d4a:	2b01      	cmp	r3, #1
    3d4c:	d000      	beq.n	3d50 <PMM_Wakeup+0xc>
        {
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
            sleepReq = NULL;
        }
    }
}
    3d4e:	bd70      	pop	{r4, r5, r6, pc}
		pmmState = PMM_STATE_ACTIVE;
    3d50:	2200      	movs	r2, #0
    3d52:	4b13      	ldr	r3, [pc, #76]	; (3da0 <PMM_Wakeup+0x5c>)
    3d54:	701a      	strb	r2, [r3, #0]
        sleptTimeUs = SLEEP_TICKS_TO_US(SleepTimerGetElapsedTime());
    3d56:	4b13      	ldr	r3, [pc, #76]	; (3da4 <PMM_Wakeup+0x60>)
    3d58:	4798      	blx	r3
    3d5a:	4b13      	ldr	r3, [pc, #76]	; (3da8 <PMM_Wakeup+0x64>)
    3d5c:	4798      	blx	r3
    3d5e:	4913      	ldr	r1, [pc, #76]	; (3dac <PMM_Wakeup+0x68>)
    3d60:	4b13      	ldr	r3, [pc, #76]	; (3db0 <PMM_Wakeup+0x6c>)
    3d62:	4798      	blx	r3
    3d64:	4b13      	ldr	r3, [pc, #76]	; (3db4 <PMM_Wakeup+0x70>)
    3d66:	4798      	blx	r3
    3d68:	0004      	movs	r4, r0
    3d6a:	000d      	movs	r5, r1
        SleepTimerStop();
    3d6c:	4b12      	ldr	r3, [pc, #72]	; (3db8 <PMM_Wakeup+0x74>)
    3d6e:	4798      	blx	r3
        SystemTimerSync(sleptTimeUs);
    3d70:	0020      	movs	r0, r4
    3d72:	0029      	movs	r1, r5
    3d74:	4b11      	ldr	r3, [pc, #68]	; (3dbc <PMM_Wakeup+0x78>)
    3d76:	4798      	blx	r3
        if (sleepReq && sleepReq->pmmWakeupCallback)
    3d78:	4b11      	ldr	r3, [pc, #68]	; (3dc0 <PMM_Wakeup+0x7c>)
    3d7a:	681b      	ldr	r3, [r3, #0]
    3d7c:	2b00      	cmp	r3, #0
    3d7e:	d0e6      	beq.n	3d4e <PMM_Wakeup+0xa>
    3d80:	689e      	ldr	r6, [r3, #8]
    3d82:	2e00      	cmp	r6, #0
    3d84:	d0e3      	beq.n	3d4e <PMM_Wakeup+0xa>
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
    3d86:	22fa      	movs	r2, #250	; 0xfa
    3d88:	0092      	lsls	r2, r2, #2
    3d8a:	2300      	movs	r3, #0
    3d8c:	0020      	movs	r0, r4
    3d8e:	0029      	movs	r1, r5
    3d90:	4c0c      	ldr	r4, [pc, #48]	; (3dc4 <PMM_Wakeup+0x80>)
    3d92:	47a0      	blx	r4
    3d94:	47b0      	blx	r6
            sleepReq = NULL;
    3d96:	2200      	movs	r2, #0
    3d98:	4b09      	ldr	r3, [pc, #36]	; (3dc0 <PMM_Wakeup+0x7c>)
    3d9a:	601a      	str	r2, [r3, #0]
}
    3d9c:	e7d7      	b.n	3d4e <PMM_Wakeup+0xa>
    3d9e:	46c0      	nop			; (mov r8, r8)
    3da0:	20000b3c 	.word	0x20000b3c
    3da4:	000037e9 	.word	0x000037e9
    3da8:	00012aa9 	.word	0x00012aa9
    3dac:	41f423d7 	.word	0x41f423d7
    3db0:	00012451 	.word	0x00012451
    3db4:	00011b8d 	.word	0x00011b8d
    3db8:	00003841 	.word	0x00003841
    3dbc:	00009af1 	.word	0x00009af1
    3dc0:	20000b40 	.word	0x20000b40
    3dc4:	00011ac9 	.word	0x00011ac9

00003dc8 <PMM_Sleep>:
{
    3dc8:	b570      	push	{r4, r5, r6, lr}
    3dca:	1e05      	subs	r5, r0, #0
    if ( req && (PMM_STATE_ACTIVE == pmmState) )
    3dcc:	d059      	beq.n	3e82 <PMM_Sleep+0xba>
    3dce:	4b33      	ldr	r3, [pc, #204]	; (3e9c <PMM_Sleep+0xd4>)
    3dd0:	781b      	ldrb	r3, [r3, #0]
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    3dd2:	2000      	movs	r0, #0
    if ( req && (PMM_STATE_ACTIVE == pmmState) )
    3dd4:	2b00      	cmp	r3, #0
    3dd6:	d000      	beq.n	3dda <PMM_Sleep+0x12>
}
    3dd8:	bd70      	pop	{r4, r5, r6, pc}
        canSleep = SYSTEM_ReadyToSleep();
    3dda:	4b31      	ldr	r3, [pc, #196]	; (3ea0 <PMM_Sleep+0xd8>)
    3ddc:	4798      	blx	r3
    3dde:	1e04      	subs	r4, r0, #0
        canSleep = canSleep && validateSleepDuration( req->sleepTimeMs );
    3de0:	d051      	beq.n	3e86 <PMM_Sleep+0xbe>
        (PMM_SLEEPTIME_MAX_MS >= durationMs) && \
    3de2:	682b      	ldr	r3, [r5, #0]
    3de4:	4a2f      	ldr	r2, [pc, #188]	; (3ea4 <PMM_Sleep+0xdc>)
    3de6:	4694      	mov	ip, r2
    3de8:	4463      	add	r3, ip
        canSleep = canSleep && validateSleepDuration( req->sleepTimeMs );
    3dea:	2400      	movs	r4, #0
    3dec:	4a2e      	ldr	r2, [pc, #184]	; (3ea8 <PMM_Sleep+0xe0>)
    3dee:	429a      	cmp	r2, r3
    3df0:	4164      	adcs	r4, r4
    3df2:	b2e4      	uxtb	r4, r4
        if ( SLEEP_MODE_BACKUP == req->sleep_mode )
    3df4:	792a      	ldrb	r2, [r5, #4]
    3df6:	2a02      	cmp	r2, #2
    3df8:	d01e      	beq.n	3e38 <PMM_Sleep+0x70>
        else if ( SLEEP_MODE_STANDBY == req->sleep_mode )
    3dfa:	2a01      	cmp	r2, #1
    3dfc:	d029      	beq.n	3e52 <PMM_Sleep+0x8a>
    uint32_t sysSleepTime = ~0u; /* 0xffFFffFF is invalid */
    3dfe:	2601      	movs	r6, #1
    3e00:	4276      	negs	r6, r6
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    3e02:	2000      	movs	r0, #0
        if ( canSleep )
    3e04:	2c00      	cmp	r4, #0
    3e06:	d0e7      	beq.n	3dd8 <PMM_Sleep+0x10>
            SystemTimerSuspend();
    3e08:	4b28      	ldr	r3, [pc, #160]	; (3eac <PMM_Sleep+0xe4>)
    3e0a:	4798      	blx	r3
            SleepTimerStart( MS_TO_SLEEP_TICKS( sysSleepTime - PMM_WAKEUPTIME_MS ), PMM_Wakeup );
    3e0c:	0030      	movs	r0, r6
    3e0e:	380a      	subs	r0, #10
    3e10:	4b27      	ldr	r3, [pc, #156]	; (3eb0 <PMM_Sleep+0xe8>)
    3e12:	4798      	blx	r3
    3e14:	4927      	ldr	r1, [pc, #156]	; (3eb4 <PMM_Sleep+0xec>)
    3e16:	4b28      	ldr	r3, [pc, #160]	; (3eb8 <PMM_Sleep+0xf0>)
    3e18:	4798      	blx	r3
    3e1a:	4b28      	ldr	r3, [pc, #160]	; (3ebc <PMM_Sleep+0xf4>)
    3e1c:	4798      	blx	r3
    3e1e:	4928      	ldr	r1, [pc, #160]	; (3ec0 <PMM_Sleep+0xf8>)
    3e20:	4b28      	ldr	r3, [pc, #160]	; (3ec4 <PMM_Sleep+0xfc>)
    3e22:	4798      	blx	r3
            pmmState = PMM_STATE_SLEEP;
    3e24:	2201      	movs	r2, #1
    3e26:	4b1d      	ldr	r3, [pc, #116]	; (3e9c <PMM_Sleep+0xd4>)
    3e28:	701a      	strb	r2, [r3, #0]
            sleepReq = req;
    3e2a:	4b27      	ldr	r3, [pc, #156]	; (3ec8 <PMM_Sleep+0x100>)
    3e2c:	601d      	str	r5, [r3, #0]
            HAL_Sleep(req->sleep_mode);
    3e2e:	7928      	ldrb	r0, [r5, #4]
    3e30:	4b26      	ldr	r3, [pc, #152]	; (3ecc <PMM_Sleep+0x104>)
    3e32:	4798      	blx	r3
            status = PMM_SLEEP_REQ_PROCESSED;
    3e34:	2001      	movs	r0, #1
    3e36:	e7cf      	b.n	3dd8 <PMM_Sleep+0x10>
            canSleep = canSleep && ( SWTIMER_INVALID_TIMEOUT == SwTimerNextExpiryDuration() );
    3e38:	4a1b      	ldr	r2, [pc, #108]	; (3ea8 <PMM_Sleep+0xe0>)
    3e3a:	2400      	movs	r4, #0
    3e3c:	4293      	cmp	r3, r2
    3e3e:	d806      	bhi.n	3e4e <PMM_Sleep+0x86>
    3e40:	4b23      	ldr	r3, [pc, #140]	; (3ed0 <PMM_Sleep+0x108>)
    3e42:	4798      	blx	r3
    3e44:	3001      	adds	r0, #1
    3e46:	4244      	negs	r4, r0
    3e48:	4144      	adcs	r4, r0
    3e4a:	e000      	b.n	3e4e <PMM_Sleep+0x86>
    3e4c:	2400      	movs	r4, #0
            sysSleepTime = req->sleepTimeMs;
    3e4e:	682e      	ldr	r6, [r5, #0]
    3e50:	e7d7      	b.n	3e02 <PMM_Sleep+0x3a>
            sysSleepTime = SwTimerNextExpiryDuration();
    3e52:	4b1f      	ldr	r3, [pc, #124]	; (3ed0 <PMM_Sleep+0x108>)
    3e54:	4798      	blx	r3
            sysSleepTime = (SWTIMER_INVALID_TIMEOUT == sysSleepTime) ? PMM_SLEEPTIME_MAX_MS : US_TO_MS( sysSleepTime );
    3e56:	1c43      	adds	r3, r0, #1
    3e58:	d01c      	beq.n	3e94 <PMM_Sleep+0xcc>
    3e5a:	21fa      	movs	r1, #250	; 0xfa
    3e5c:	0089      	lsls	r1, r1, #2
    3e5e:	4b1d      	ldr	r3, [pc, #116]	; (3ed4 <PMM_Sleep+0x10c>)
    3e60:	4798      	blx	r3
    3e62:	0003      	movs	r3, r0
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    3e64:	2000      	movs	r0, #0
            canSleep = canSleep && validateSleepDuration( sysSleepTime );
    3e66:	2c00      	cmp	r4, #0
    3e68:	d0b6      	beq.n	3dd8 <PMM_Sleep+0x10>
            if ( canSleep && (req->sleepTimeMs < sysSleepTime) )
    3e6a:	490f      	ldr	r1, [pc, #60]	; (3ea8 <PMM_Sleep+0xe0>)
    3e6c:	4a0d      	ldr	r2, [pc, #52]	; (3ea4 <PMM_Sleep+0xdc>)
    3e6e:	189a      	adds	r2, r3, r2
    3e70:	428a      	cmp	r2, r1
    3e72:	d8b1      	bhi.n	3dd8 <PMM_Sleep+0x10>
    3e74:	682e      	ldr	r6, [r5, #0]
    3e76:	429e      	cmp	r6, r3
    3e78:	d9c6      	bls.n	3e08 <PMM_Sleep+0x40>
    3e7a:	001e      	movs	r6, r3
    3e7c:	e7c4      	b.n	3e08 <PMM_Sleep+0x40>
            sysSleepTime = (SWTIMER_INVALID_TIMEOUT == sysSleepTime) ? PMM_SLEEPTIME_MAX_MS : US_TO_MS( sysSleepTime );
    3e7e:	4b16      	ldr	r3, [pc, #88]	; (3ed8 <PMM_Sleep+0x110>)
    3e80:	e7f8      	b.n	3e74 <PMM_Sleep+0xac>
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    3e82:	2000      	movs	r0, #0
    3e84:	e7a8      	b.n	3dd8 <PMM_Sleep+0x10>
        if ( SLEEP_MODE_BACKUP == req->sleep_mode )
    3e86:	792b      	ldrb	r3, [r5, #4]
    3e88:	2b02      	cmp	r3, #2
    3e8a:	d0df      	beq.n	3e4c <PMM_Sleep+0x84>
        else if ( SLEEP_MODE_STANDBY == req->sleep_mode )
    3e8c:	2b01      	cmp	r3, #1
    3e8e:	d0e0      	beq.n	3e52 <PMM_Sleep+0x8a>
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    3e90:	2000      	movs	r0, #0
    return status;
    3e92:	e7a1      	b.n	3dd8 <PMM_Sleep+0x10>
            canSleep = canSleep && validateSleepDuration( sysSleepTime );
    3e94:	2c00      	cmp	r4, #0
    3e96:	d1f2      	bne.n	3e7e <PMM_Sleep+0xb6>
            sysSleepTime = (SWTIMER_INVALID_TIMEOUT == sysSleepTime) ? PMM_SLEEPTIME_MAX_MS : US_TO_MS( sysSleepTime );
    3e98:	4e0f      	ldr	r6, [pc, #60]	; (3ed8 <PMM_Sleep+0x110>)
    3e9a:	e7b2      	b.n	3e02 <PMM_Sleep+0x3a>
    3e9c:	20000b3c 	.word	0x20000b3c
    3ea0:	00009c59 	.word	0x00009c59
    3ea4:	fffffc18 	.word	0xfffffc18
    3ea8:	07cebbc8 	.word	0x07cebbc8
    3eac:	00009abd 	.word	0x00009abd
    3eb0:	00012aa9 	.word	0x00012aa9
    3eb4:	42031375 	.word	0x42031375
    3eb8:	00012451 	.word	0x00012451
    3ebc:	00011b5d 	.word	0x00011b5d
    3ec0:	00003d45 	.word	0x00003d45
    3ec4:	000037fd 	.word	0x000037fd
    3ec8:	20000b40 	.word	0x20000b40
    3ecc:	0000376d 	.word	0x0000376d
    3ed0:	000097f9 	.word	0x000097f9
    3ed4:	00011769 	.word	0x00011769
    3ed8:	07cebfb0 	.word	0x07cebfb0

00003edc <LORAReg_InitAS>:
#endif
#endif
/****************************** FUNCTIONS *************************************/

StackRetStatus_t LORAReg_InitAS(IsmBand_t ismBand)
{
    3edc:	b570      	push	{r4, r5, r6, lr}
	StackRetStatus_t result = LORAWAN_SUCCESS;
#if(AS_BAND == 1)
	static bool initialized = false;
	
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_AS;
    3ede:	4b75      	ldr	r3, [pc, #468]	; (40b4 <LORAReg_InitAS+0x1d8>)
    3ee0:	2103      	movs	r1, #3
    3ee2:	2226      	movs	r2, #38	; 0x26
    3ee4:	5499      	strb	r1, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_AS;
    3ee6:	2410      	movs	r4, #16
    3ee8:	3204      	adds	r2, #4
    3eea:	549c      	strb	r4, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_AS;
    3eec:	3a29      	subs	r2, #41	; 0x29
    3eee:	3126      	adds	r1, #38	; 0x26
    3ef0:	545a      	strb	r2, [r3, r1]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_AS;
    3ef2:	3902      	subs	r1, #2
    3ef4:	545a      	strb	r2, [r3, r1]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    3ef6:	001a      	movs	r2, r3
    3ef8:	3283      	adds	r2, #131	; 0x83
    3efa:	2100      	movs	r1, #0
    3efc:	711a      	strb	r2, [r3, #4]
    3efe:	0a15      	lsrs	r5, r2, #8
    3f00:	715d      	strb	r5, [r3, #5]
    3f02:	0c15      	lsrs	r5, r2, #16
    3f04:	719d      	strb	r5, [r3, #6]
    3f06:	0e12      	lsrs	r2, r2, #24
    3f08:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    3f0a:	001a      	movs	r2, r3
    3f0c:	3243      	adds	r2, #67	; 0x43
    3f0e:	701a      	strb	r2, [r3, #0]
    3f10:	0a15      	lsrs	r5, r2, #8
    3f12:	705d      	strb	r5, [r3, #1]
    3f14:	0c15      	lsrs	r5, r2, #16
    3f16:	709d      	strb	r5, [r3, #2]
    3f18:	0e12      	lsrs	r2, r2, #24
    3f1a:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    3f1c:	001a      	movs	r2, r3
    3f1e:	32a3      	adds	r2, #163	; 0xa3
    3f20:	721a      	strb	r2, [r3, #8]
    3f22:	0a15      	lsrs	r5, r2, #8
    3f24:	725d      	strb	r5, [r3, #9]
    3f26:	0c15      	lsrs	r5, r2, #16
    3f28:	729d      	strb	r5, [r3, #10]
    3f2a:	0e12      	lsrs	r2, r2, #24
    3f2c:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    3f2e:	001a      	movs	r2, r3
    3f30:	3264      	adds	r2, #100	; 0x64
    3f32:	32ff      	adds	r2, #255	; 0xff
    3f34:	741a      	strb	r2, [r3, #16]
    3f36:	0a15      	lsrs	r5, r2, #8
    3f38:	745d      	strb	r5, [r3, #17]
    3f3a:	0c15      	lsrs	r5, r2, #16
    3f3c:	749d      	strb	r5, [r3, #18]
    3f3e:	0e12      	lsrs	r2, r2, #24
    3f40:	74da      	strb	r2, [r3, #19]
	RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    3f42:	001a      	movs	r2, r3
    3f44:	3234      	adds	r2, #52	; 0x34
    3f46:	751a      	strb	r2, [r3, #20]
    3f48:	0a15      	lsrs	r5, r2, #8
    3f4a:	755d      	strb	r5, [r3, #21]
    3f4c:	0c15      	lsrs	r5, r2, #16
    3f4e:	759d      	strb	r5, [r3, #22]
    3f50:	0e12      	lsrs	r2, r2, #24
    3f52:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    3f54:	001a      	movs	r2, r3
    3f56:	323d      	adds	r2, #61	; 0x3d
    3f58:	761a      	strb	r2, [r3, #24]
    3f5a:	0a15      	lsrs	r5, r2, #8
    3f5c:	765d      	strb	r5, [r3, #25]
    3f5e:	0c15      	lsrs	r5, r2, #16
    3f60:	769d      	strb	r5, [r3, #26]
    3f62:	0e12      	lsrs	r2, r2, #24
    3f64:	76da      	strb	r2, [r3, #27]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    3f66:	001a      	movs	r2, r3
    3f68:	32c4      	adds	r2, #196	; 0xc4
    3f6a:	32ff      	adds	r2, #255	; 0xff
    3f6c:	731a      	strb	r2, [r3, #12]
    3f6e:	0a15      	lsrs	r5, r2, #8
    3f70:	735d      	strb	r5, [r3, #13]
    3f72:	0c15      	lsrs	r5, r2, #16
    3f74:	739d      	strb	r5, [r3, #14]
    3f76:	0e12      	lsrs	r2, r2, #24
    3f78:	73da      	strb	r2, [r3, #15]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_AS;
    3f7a:	2202      	movs	r2, #2
    3f7c:	2522      	movs	r5, #34	; 0x22
    3f7e:	555a      	strb	r2, [r3, r5]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_AS;
    3f80:	3501      	adds	r5, #1
    3f82:	555a      	strb	r2, [r3, r5]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_AS;	
    3f84:	2500      	movs	r5, #0
    3f86:	771d      	strb	r5, [r3, #28]
    3f88:	3d16      	subs	r5, #22
    3f8a:	775d      	strb	r5, [r3, #29]
    3f8c:	351c      	adds	r5, #28
    3f8e:	779d      	strb	r5, [r3, #30]
    3f90:	3531      	adds	r5, #49	; 0x31
    3f92:	77dd      	strb	r5, [r3, #31]
	RegParams.MinNewChIndex = NEW_CHANNEL_INDEX_AS;
    3f94:	3d16      	subs	r5, #22
    3f96:	555a      	strb	r2, [r3, r5]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_AS;
    3f98:	2632      	movs	r6, #50	; 0x32
    3f9a:	3d01      	subs	r5, #1
    3f9c:	555e      	strb	r6, [r3, r5]
	RegParams.minDataRate = MAC_DATARATE_MIN_AS;
    3f9e:	3d19      	subs	r5, #25
    3fa0:	3e0e      	subs	r6, #14
    3fa2:	559d      	strb	r5, [r3, r6]
	RegParams.maxDataRate = MAC_DATARATE_MAX_AS;
    3fa4:	3601      	adds	r6, #1
    3fa6:	5599      	strb	r1, [r3, r6]
	RegParams.Rx1DrOffset = 7;
    3fa8:	3607      	adds	r6, #7
    3faa:	559d      	strb	r5, [r3, r6]
	RegParams.maxTxPwrIndx = MAX_TX_PWR_INDEX_AS;
    3fac:	3601      	adds	r6, #1
    3fae:	559d      	strb	r5, [r3, r6]
	RegParams.maxTxPwr = DEFAULT_EIRP_AS;
    3fb0:	3521      	adds	r5, #33	; 0x21
    3fb2:	555c      	strb	r4, [r3, r5]
	RegParams.cmnParams.paramsType2.minNonDefChId = 2;
    3fb4:	34b1      	adds	r4, #177	; 0xb1
    3fb6:	34ff      	adds	r4, #255	; 0xff
    3fb8:	551a      	strb	r2, [r3, r4]
	RegParams.pDutyCycleTimer->timerId = regTimerId[0];
    3fba:	4a3f      	ldr	r2, [pc, #252]	; (40b8 <LORAReg_InitAS+0x1dc>)
    3fbc:	7815      	ldrb	r5, [r2, #0]
    3fbe:	2468      	movs	r4, #104	; 0x68
    3fc0:	34ff      	adds	r4, #255	; 0xff
    3fc2:	551d      	strb	r5, [r3, r4]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    3fc4:	7855      	ldrb	r5, [r2, #1]
    3fc6:	3c2b      	subs	r4, #43	; 0x2b
    3fc8:	3cff      	subs	r4, #255	; 0xff
    3fca:	551d      	strb	r5, [r3, r4]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[2];
    3fcc:	7894      	ldrb	r4, [r2, #2]
    3fce:	223c      	movs	r2, #60	; 0x3c
    3fd0:	549c      	strb	r4, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime = 0;
    3fd2:	2400      	movs	r4, #0
    3fd4:	3a04      	subs	r2, #4
    3fd6:	549c      	strb	r4, [r3, r2]
    3fd8:	3201      	adds	r2, #1
    3fda:	549c      	strb	r4, [r3, r2]
    3fdc:	3201      	adds	r2, #1
    3fde:	549c      	strb	r4, [r3, r2]
    3fe0:	3201      	adds	r2, #1
    3fe2:	549c      	strb	r4, [r3, r2]
	RegParams.joinbccount =0;
    3fe4:	3207      	adds	r2, #7
    3fe6:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    3fe8:	001a      	movs	r2, r3
    3fea:	323e      	adds	r2, #62	; 0x3e
    3fec:	7011      	strb	r1, [r2, #0]
    3fee:	7051      	strb	r1, [r2, #1]
    3ff0:	7091      	strb	r1, [r2, #2]
    3ff2:	70d1      	strb	r1, [r2, #3]
	RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime = 1;
    3ff4:	31c3      	adds	r1, #195	; 0xc3
    3ff6:	31ff      	adds	r1, #255	; 0xff
    3ff8:	5c5a      	ldrb	r2, [r3, r1]
    3ffa:	2401      	movs	r4, #1
    3ffc:	4322      	orrs	r2, r4
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime = 1;
    3ffe:	2402      	movs	r4, #2
    4000:	4322      	orrs	r2, r4
    4002:	545a      	strb	r2, [r3, r1]
	
	RegParams.band = ismBand;
    4004:	222e      	movs	r2, #46	; 0x2e
    4006:	5498      	strb	r0, [r3, r2]
	
	if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    4008:	3806      	subs	r0, #6
		PDS_RegFile(PDS_FILE_REG_AS_05_IDX,filemarks);
#endif		
	}
	else
	{
		result =  LORAWAN_INVALID_PARAMETER;
    400a:	240a      	movs	r4, #10
	if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    400c:	2808      	cmp	r0, #8
    400e:	d90e      	bls.n	402e <LORAReg_InitAS+0x152>
	}
	
	if(!initialized)
    4010:	4b2a      	ldr	r3, [pc, #168]	; (40bc <LORAReg_InitAS+0x1e0>)
    4012:	781b      	ldrb	r3, [r3, #0]
    4014:	2b00      	cmp	r3, #0
    4016:	d102      	bne.n	401e <LORAReg_InitAS+0x142>
	{
		initialized = true;
    4018:	2201      	movs	r2, #1
    401a:	4b28      	ldr	r3, [pc, #160]	; (40bc <LORAReg_InitAS+0x1e0>)
    401c:	701a      	strb	r2, [r3, #0]
	}

    LORAREG_InitGetAttrFnPtrsAS();	
    401e:	4b28      	ldr	r3, [pc, #160]	; (40c0 <LORAReg_InitAS+0x1e4>)
    4020:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsAS();
    4022:	4b28      	ldr	r3, [pc, #160]	; (40c4 <LORAReg_InitAS+0x1e8>)
    4024:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsAS();
    4026:	4b28      	ldr	r3, [pc, #160]	; (40c8 <LORAReg_InitAS+0x1ec>)
    4028:	4798      	blx	r3
	
#else
	result = UNSUPPORTED_BAND;
#endif
	return result;
}
    402a:	0020      	movs	r0, r4
    402c:	bd70      	pop	{r4, r5, r6, pc}
{
	uint8_t i;

	memset (RegParams.pChParams, 0, sizeof(DefaultChannels923) );
	memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels923) );
	memcpy (RegParams.pChParams, DefaultChannels923, sizeof(DefaultChannels923));
    402e:	001c      	movs	r4, r3
    4030:	0018      	movs	r0, r3
    4032:	3083      	adds	r0, #131	; 0x83
    4034:	3a2a      	subs	r2, #42	; 0x2a
    4036:	4925      	ldr	r1, [pc, #148]	; (40cc <LORAReg_InitAS+0x1f0>)
    4038:	4d25      	ldr	r5, [pc, #148]	; (40d0 <LORAReg_InitAS+0x1f4>)
    403a:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels923, sizeof(AdvChannels923));
    403c:	0020      	movs	r0, r4
    403e:	30a3      	adds	r0, #163	; 0xa3
    4040:	2218      	movs	r2, #24
    4042:	4924      	ldr	r1, [pc, #144]	; (40d4 <LORAReg_InitAS+0x1f8>)
    4044:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParams923) );
	memcpy (RegParams.pSubBandParams, SubBandParams923, sizeof(SubBandParams923) );
    4046:	0020      	movs	r0, r4
    4048:	30c4      	adds	r0, #196	; 0xc4
    404a:	30ff      	adds	r0, #255	; 0xff
    404c:	220c      	movs	r2, #12
    404e:	4922      	ldr	r1, [pc, #136]	; (40d8 <LORAReg_InitAS+0x1fc>)
    4050:	47a8      	blx	r5
	memset(RegParams.cmnParams.paramsType2.subBandDutyCycle,0,sizeof(SubBandDutyCycle923));
	memcpy(RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycle923,sizeof(SubBandDutyCycle923));
    4052:	0020      	movs	r0, r4
    4054:	30ae      	adds	r0, #174	; 0xae
    4056:	30ff      	adds	r0, #255	; 0xff
    4058:	2202      	movs	r2, #2
    405a:	4920      	ldr	r1, [pc, #128]	; (40dc <LORAReg_InitAS+0x200>)
    405c:	47a8      	blx	r5
    405e:	2302      	movs	r3, #2
	for (i = 2; i < RegParams.maxChannels; i++)
	{
		RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    4060:	4814      	ldr	r0, [pc, #80]	; (40b4 <LORAReg_InitAS+0x1d8>)
    4062:	25ff      	movs	r5, #255	; 0xff
	for (i = 2; i < RegParams.maxChannels; i++)
    4064:	242a      	movs	r4, #42	; 0x2a
		RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    4066:	7902      	ldrb	r2, [r0, #4]
    4068:	7941      	ldrb	r1, [r0, #5]
    406a:	0209      	lsls	r1, r1, #8
    406c:	4311      	orrs	r1, r2
    406e:	7982      	ldrb	r2, [r0, #6]
    4070:	0412      	lsls	r2, r2, #16
    4072:	4311      	orrs	r1, r2
    4074:	79c2      	ldrb	r2, [r0, #7]
    4076:	0612      	lsls	r2, r2, #24
    4078:	430a      	orrs	r2, r1
    407a:	0059      	lsls	r1, r3, #1
    407c:	188a      	adds	r2, r1, r2
    407e:	7055      	strb	r5, [r2, #1]
	for (i = 2; i < RegParams.maxChannels; i++)
    4080:	3301      	adds	r3, #1
    4082:	b2db      	uxtb	r3, r3
    4084:	5702      	ldrsb	r2, [r0, r4]
    4086:	4293      	cmp	r3, r2
    4088:	dbed      	blt.n	4066 <LORAReg_InitAS+0x18a>
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = DEFAULT_EIRP_AS;
    408a:	4a0a      	ldr	r2, [pc, #40]	; (40b4 <LORAReg_InitAS+0x1d8>)
    408c:	2110      	movs	r1, #16
    408e:	23c2      	movs	r3, #194	; 0xc2
    4090:	33ff      	adds	r3, #255	; 0xff
    4092:	54d1      	strb	r1, [r2, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsAS, sizeof(DefaultDrParamsAS) );
    4094:	7810      	ldrb	r0, [r2, #0]
    4096:	7853      	ldrb	r3, [r2, #1]
    4098:	021b      	lsls	r3, r3, #8
    409a:	4303      	orrs	r3, r0
    409c:	7890      	ldrb	r0, [r2, #2]
    409e:	0400      	lsls	r0, r0, #16
    40a0:	4303      	orrs	r3, r0
    40a2:	78d0      	ldrb	r0, [r2, #3]
    40a4:	0600      	lsls	r0, r0, #24
    40a6:	4318      	orrs	r0, r3
    40a8:	2240      	movs	r2, #64	; 0x40
    40aa:	490d      	ldr	r1, [pc, #52]	; (40e0 <LORAReg_InitAS+0x204>)
    40ac:	4b08      	ldr	r3, [pc, #32]	; (40d0 <LORAReg_InitAS+0x1f4>)
    40ae:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    40b0:	2408      	movs	r4, #8
    40b2:	e7ad      	b.n	4010 <LORAReg_InitAS+0x134>
    40b4:	20000fc0 	.word	0x20000fc0
    40b8:	20000fbc 	.word	0x20000fbc
    40bc:	20000b44 	.word	0x20000b44
    40c0:	00007fd9 	.word	0x00007fd9
    40c4:	00008709 	.word	0x00008709
    40c8:	000089dd 	.word	0x000089dd
    40cc:	00019a64 	.word	0x00019a64
    40d0:	00014ecd 	.word	0x00014ecd
    40d4:	00019a4c 	.word	0x00019a4c
    40d8:	00019aac 	.word	0x00019aac
    40dc:	00019aa8 	.word	0x00019aa8
    40e0:	00019a68 	.word	0x00019a68

000040e4 <LORAReg_InitAU>:


/****************************** FUNCTIONS *************************************/

StackRetStatus_t LORAReg_InitAU(IsmBand_t ismBand)
{
    40e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40e6:	46de      	mov	lr, fp
    40e8:	4657      	mov	r7, sl
    40ea:	464e      	mov	r6, r9
    40ec:	4645      	mov	r5, r8
    40ee:	b5e0      	push	{r5, r6, r7, lr}
    40f0:	4683      	mov	fp, r0
    StackRetStatus_t result = LORAWAN_SUCCESS;
#if(AU_BAND == 1)
    RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_AU;
    40f2:	4c6a      	ldr	r4, [pc, #424]	; (429c <LORAReg_InitAU+0x1b8>)
    40f4:	2103      	movs	r1, #3
    40f6:	2326      	movs	r3, #38	; 0x26
    40f8:	54e1      	strb	r1, [r4, r3]
	RegParams.maxChannels = MAX_CHANNELS_AU_NA;
    40fa:	3145      	adds	r1, #69	; 0x45
    40fc:	3304      	adds	r3, #4
    40fe:	54e1      	strb	r1, [r4, r3]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_AU;
    4100:	3941      	subs	r1, #65	; 0x41
    4102:	3b03      	subs	r3, #3
    4104:	54e1      	strb	r1, [r4, r3]
	RegParams.pChParams = &RegParams.cmnParams.paramsType1.chParams[0];
    4106:	0020      	movs	r0, r4
    4108:	30b3      	adds	r0, #179	; 0xb3
    410a:	2500      	movs	r5, #0
    410c:	7120      	strb	r0, [r4, #4]
    410e:	0a03      	lsrs	r3, r0, #8
    4110:	7163      	strb	r3, [r4, #5]
    4112:	0c03      	lsrs	r3, r0, #16
    4114:	71a3      	strb	r3, [r4, #6]
    4116:	0e03      	lsrs	r3, r0, #24
    4118:	71e3      	strb	r3, [r4, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType1.DRParams[0];
    411a:	0026      	movs	r6, r4
    411c:	3643      	adds	r6, #67	; 0x43
    411e:	7026      	strb	r6, [r4, #0]
    4120:	0a33      	lsrs	r3, r6, #8
    4122:	7063      	strb	r3, [r4, #1]
    4124:	0c33      	lsrs	r3, r6, #16
    4126:	70a3      	strb	r3, [r4, #2]
    4128:	0e33      	lsrs	r3, r6, #24
    412a:	70e3      	strb	r3, [r4, #3]
	RegParams.MinNewChIndex = 0xFF;
    412c:	2321      	movs	r3, #33	; 0x21
    412e:	31f8      	adds	r1, #248	; 0xf8
    4130:	54e1      	strb	r1, [r4, r3]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_AU;
    4132:	3b19      	subs	r3, #25
    4134:	2708      	movs	r7, #8
    4136:	39dd      	subs	r1, #221	; 0xdd
    4138:	5463      	strb	r3, [r4, r1]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_AU;
    413a:	3101      	adds	r1, #1
    413c:	5463      	strb	r3, [r4, r1]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_AU;
    413e:	2260      	movs	r2, #96	; 0x60
    4140:	4252      	negs	r2, r2
    4142:	4694      	mov	ip, r2
    4144:	7722      	strb	r2, [r4, #28]
    4146:	314d      	adds	r1, #77	; 0x4d
    4148:	7761      	strb	r1, [r4, #29]
    414a:	77a7      	strb	r7, [r4, #30]
    414c:	3939      	subs	r1, #57	; 0x39
    414e:	77e1      	strb	r1, [r4, #31]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_AU;
    4150:	2220      	movs	r2, #32
    4152:	3101      	adds	r1, #1
    4154:	54a1      	strb	r1, [r4, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_AU;
    4156:	3a1a      	subs	r2, #26
    4158:	4690      	mov	r8, r2
    415a:	321e      	adds	r2, #30
    415c:	4641      	mov	r1, r8
    415e:	54a1      	strb	r1, [r4, r2]
	RegParams.maxDataRate = MAC_DATARATE_MAX_AU;
    4160:	3201      	adds	r2, #1
    4162:	54a5      	strb	r5, [r4, r2]
	RegParams.cmnParams.paramsType1.Max_125khzChan = MAX_CHANNELS_BANDWIDTH_125_AU_NA;
    4164:	321b      	adds	r2, #27
    4166:	4692      	mov	sl, r2
    4168:	2254      	movs	r2, #84	; 0x54
    416a:	32ff      	adds	r2, #255	; 0xff
    416c:	4651      	mov	r1, sl
    416e:	54a1      	strb	r1, [r4, r2]
	RegParams.cmnParams.paramsType1.Max_500khzChan = MAX_CHANNELS_BANDWIDTH_500_AU_NA;
    4170:	3201      	adds	r2, #1
    4172:	54a3      	strb	r3, [r4, r2]
	RegParams.cmnParams.paramsType1.minTxDR = DR0;
    4174:	2250      	movs	r2, #80	; 0x50
    4176:	32ff      	adds	r2, #255	; 0xff
    4178:	54a5      	strb	r5, [r4, r2]
	RegParams.cmnParams.paramsType1.maxTxDR = DR6;
    417a:	3201      	adds	r2, #1
    417c:	4641      	mov	r1, r8
    417e:	54a1      	strb	r1, [r4, r2]
	RegParams.cmnParams.paramsType1.minRxDR = DR8;
    4180:	2252      	movs	r2, #82	; 0x52
    4182:	32ff      	adds	r2, #255	; 0xff
    4184:	54a3      	strb	r3, [r4, r2]
	RegParams.cmnParams.paramsType1.maxRxDR = DR13;
    4186:	3a45      	subs	r2, #69	; 0x45
    4188:	3aff      	subs	r2, #255	; 0xff
    418a:	4691      	mov	r9, r2
    418c:	3246      	adds	r2, #70	; 0x46
    418e:	32ff      	adds	r2, #255	; 0xff
    4190:	4649      	mov	r1, r9
    4192:	54a1      	strb	r1, [r4, r2]
	RegParams.cmnParams.paramsType1.RxParamWindowOffset1 = 8;
    4194:	2256      	movs	r2, #86	; 0x56
    4196:	32ff      	adds	r2, #255	; 0xff
    4198:	54a3      	strb	r3, [r4, r2]
	RegParams.cmnParams.paramsType1.UpStreamCh0Freq = UPSTREAM_CH0_AU;
    419a:	2300      	movs	r3, #0
    419c:	4698      	mov	r8, r3
    419e:	2344      	movs	r3, #68	; 0x44
    41a0:	33ff      	adds	r3, #255	; 0xff
    41a2:	4642      	mov	r2, r8
    41a4:	54e2      	strb	r2, [r4, r3]
    41a6:	0023      	movs	r3, r4
    41a8:	3344      	adds	r3, #68	; 0x44
    41aa:	33ff      	adds	r3, #255	; 0xff
    41ac:	2228      	movs	r2, #40	; 0x28
    41ae:	4252      	negs	r2, r2
    41b0:	705a      	strb	r2, [r3, #1]
    41b2:	2274      	movs	r2, #116	; 0x74
    41b4:	4252      	negs	r2, r2
    41b6:	709a      	strb	r2, [r3, #2]
    41b8:	2236      	movs	r2, #54	; 0x36
    41ba:	70da      	strb	r2, [r3, #3]
	RegParams.cmnParams.paramsType1.UpStreamCh64Freq = UPSTREAM_CH64_AU;
    41bc:	2360      	movs	r3, #96	; 0x60
    41be:	4698      	mov	r8, r3
    41c0:	2348      	movs	r3, #72	; 0x48
    41c2:	33ff      	adds	r3, #255	; 0xff
    41c4:	4642      	mov	r2, r8
    41c6:	54e2      	strb	r2, [r4, r3]
    41c8:	0023      	movs	r3, r4
    41ca:	3348      	adds	r3, #72	; 0x48
    41cc:	33ff      	adds	r3, #255	; 0xff
    41ce:	227a      	movs	r2, #122	; 0x7a
    41d0:	4252      	negs	r2, r2
    41d2:	705a      	strb	r2, [r3, #1]
    41d4:	2269      	movs	r2, #105	; 0x69
    41d6:	4252      	negs	r2, r2
    41d8:	709a      	strb	r2, [r3, #2]
    41da:	2236      	movs	r2, #54	; 0x36
    41dc:	70da      	strb	r2, [r3, #3]
	RegParams.cmnParams.paramsType1.DownStreamCh0Freq = DOWNSTREAM_CH0_AU;
    41de:	234c      	movs	r3, #76	; 0x4c
    41e0:	33ff      	adds	r3, #255	; 0xff
    41e2:	4662      	mov	r2, ip
    41e4:	54e2      	strb	r2, [r4, r3]
    41e6:	0023      	movs	r3, r4
    41e8:	334c      	adds	r3, #76	; 0x4c
    41ea:	33ff      	adds	r3, #255	; 0xff
    41ec:	2270      	movs	r2, #112	; 0x70
    41ee:	705a      	strb	r2, [r3, #1]
    41f0:	709f      	strb	r7, [r3, #2]
    41f2:	2737      	movs	r7, #55	; 0x37
    41f4:	70df      	strb	r7, [r3, #3]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    41f6:	0023      	movs	r3, r4
    41f8:	3334      	adds	r3, #52	; 0x34
    41fa:	7523      	strb	r3, [r4, #20]
    41fc:	0a1f      	lsrs	r7, r3, #8
    41fe:	7567      	strb	r7, [r4, #21]
    4200:	0c1f      	lsrs	r7, r3, #16
    4202:	75a7      	strb	r7, [r4, #22]
    4204:	0e1b      	lsrs	r3, r3, #24
    4206:	75e3      	strb	r3, [r4, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    4208:	0023      	movs	r3, r4
    420a:	333d      	adds	r3, #61	; 0x3d
    420c:	7623      	strb	r3, [r4, #24]
    420e:	0a1f      	lsrs	r7, r3, #8
    4210:	7667      	strb	r7, [r4, #25]
    4212:	0c1f      	lsrs	r7, r3, #16
    4214:	76a7      	strb	r7, [r4, #26]
    4216:	0e1b      	lsrs	r3, r3, #24
    4218:	76e3      	strb	r3, [r4, #27]
    RegParams.Rx1DrOffset = 5;
    421a:	2705      	movs	r7, #5
    421c:	232c      	movs	r3, #44	; 0x2c
    421e:	54e7      	strb	r7, [r4, r3]
	RegParams.maxTxPwrIndx = 10;
    4220:	3705      	adds	r7, #5
    4222:	3301      	adds	r3, #1
    4224:	54e7      	strb	r7, [r4, r3]
	RegParams.maxTxPwr = DEFAULT_EIRP_AU;
    4226:	3714      	adds	r7, #20
    4228:	3b05      	subs	r3, #5
    422a:	54e7      	strb	r7, [r4, r3]
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    422c:	2358      	movs	r3, #88	; 0x58
    422e:	33ff      	adds	r3, #255	; 0xff
    4230:	54e5      	strb	r5, [r4, r3]

	RegParams.pJoinBackoffTimer->timerId = regTimerId[0];	
    4232:	4b1b      	ldr	r3, [pc, #108]	; (42a0 <LORAReg_InitAU+0x1bc>)
    4234:	781a      	ldrb	r2, [r3, #0]
    4236:	371f      	adds	r7, #31
    4238:	55e2      	strb	r2, [r4, r7]
	RegParams.pJoinDutyCycleTimer->timerId = regTimerId[1];
    423a:	785f      	ldrb	r7, [r3, #1]
    423c:	233c      	movs	r3, #60	; 0x3c
    423e:	54e7      	strb	r7, [r4, r3]
	RegParams.pJoinDutyCycleTimer->remainingtime = 0;
    4240:	2300      	movs	r3, #0
    4242:	2238      	movs	r2, #56	; 0x38
    4244:	54a3      	strb	r3, [r4, r2]
    4246:	2100      	movs	r1, #0
    4248:	3339      	adds	r3, #57	; 0x39
    424a:	54e1      	strb	r1, [r4, r3]
    424c:	3301      	adds	r3, #1
    424e:	54e1      	strb	r1, [r4, r3]
    4250:	3301      	adds	r3, #1
    4252:	54e1      	strb	r1, [r4, r3]
	RegParams.joinbccount =0;
    4254:	3307      	adds	r3, #7
    4256:	54e5      	strb	r5, [r4, r3]
	RegParams.joinDutyCycleTimeout =0;
    4258:	0023      	movs	r3, r4
    425a:	333e      	adds	r3, #62	; 0x3e
    425c:	7019      	strb	r1, [r3, #0]
    425e:	7059      	strb	r1, [r3, #1]
    4260:	7099      	strb	r1, [r3, #2]
    4262:	70d9      	strb	r1, [r3, #3]
	
	RegParams.band = ismBand;
    4264:	232e      	movs	r3, #46	; 0x2e
    4266:	465a      	mov	r2, fp
    4268:	54e2      	strb	r2, [r4, r3]
 */
#if(AU_BAND == 1)
static void InitDefault915ChannelsAU (void)
{
	memset (RegParams.pChParams, 0, sizeof(DefaultChannels915AU) );
	memcpy (RegParams.pChParams, DefaultChannels915AU, sizeof(DefaultChannels915AU) );
    426a:	2290      	movs	r2, #144	; 0x90
    426c:	490d      	ldr	r1, [pc, #52]	; (42a4 <LORAReg_InitAU+0x1c0>)
    426e:	4f0e      	ldr	r7, [pc, #56]	; (42a8 <LORAReg_InitAU+0x1c4>)
    4270:	47b8      	blx	r7
	memcpy (RegParams.pDrParams, DefaultDrParamsAU, sizeof(DefaultDrParamsAU) );
    4272:	2270      	movs	r2, #112	; 0x70
    4274:	490d      	ldr	r1, [pc, #52]	; (42ac <LORAReg_InitAU+0x1c8>)
    4276:	0030      	movs	r0, r6
    4278:	47b8      	blx	r7
	RegParams.cmnParams.paramsType1.alternativeChannel = 0;
    427a:	23ab      	movs	r3, #171	; 0xab
    427c:	005b      	lsls	r3, r3, #1
    427e:	54e5      	strb	r5, [r4, r3]
    LORAREG_InitGetAttrFnPtrsAU();
    4280:	4b0b      	ldr	r3, [pc, #44]	; (42b0 <LORAReg_InitAU+0x1cc>)
    4282:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsAU();
    4284:	4b0b      	ldr	r3, [pc, #44]	; (42b4 <LORAReg_InitAU+0x1d0>)
    4286:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsAU();
    4288:	4b0b      	ldr	r3, [pc, #44]	; (42b8 <LORAReg_InitAU+0x1d4>)
    428a:	4798      	blx	r3
}
    428c:	2008      	movs	r0, #8
    428e:	bc3c      	pop	{r2, r3, r4, r5}
    4290:	4690      	mov	r8, r2
    4292:	4699      	mov	r9, r3
    4294:	46a2      	mov	sl, r4
    4296:	46ab      	mov	fp, r5
    4298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    429a:	46c0      	nop			; (mov r8, r8)
    429c:	20000fc0 	.word	0x20000fc0
    42a0:	20000fbc 	.word	0x20000fbc
    42a4:	00019ab8 	.word	0x00019ab8
    42a8:	00014ecd 	.word	0x00014ecd
    42ac:	00019b48 	.word	0x00019b48
    42b0:	00008121 	.word	0x00008121
    42b4:	00008775 	.word	0x00008775
    42b8:	00008a51 	.word	0x00008a51

000042bc <LORAReg_InitEU>:
#endif

/****************************** FUNCTIONS *************************************/

StackRetStatus_t LORAReg_InitEU(IsmBand_t ismBand)
{
    42bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	StackRetStatus_t status = LORAWAN_SUCCESS;
#if (EU_BAND == 1)
	
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_EU;
    42be:	4b8a      	ldr	r3, [pc, #552]	; (44e8 <LORAReg_InitEU+0x22c>)
    42c0:	2103      	movs	r1, #3
    42c2:	2226      	movs	r2, #38	; 0x26
    42c4:	5499      	strb	r1, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_T2;
    42c6:	2510      	movs	r5, #16
    42c8:	3204      	adds	r2, #4
    42ca:	549d      	strb	r5, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_EU;
    42cc:	2406      	movs	r4, #6
    42ce:	3a01      	subs	r2, #1
    42d0:	549c      	strb	r4, [r3, r2]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_EU;
    42d2:	3c05      	subs	r4, #5
    42d4:	3a02      	subs	r2, #2
    42d6:	549c      	strb	r4, [r3, r2]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    42d8:	001a      	movs	r2, r3
    42da:	3283      	adds	r2, #131	; 0x83
    42dc:	2400      	movs	r4, #0
    42de:	711a      	strb	r2, [r3, #4]
    42e0:	0a16      	lsrs	r6, r2, #8
    42e2:	715e      	strb	r6, [r3, #5]
    42e4:	0c16      	lsrs	r6, r2, #16
    42e6:	719e      	strb	r6, [r3, #6]
    42e8:	0e12      	lsrs	r2, r2, #24
    42ea:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    42ec:	001a      	movs	r2, r3
    42ee:	3243      	adds	r2, #67	; 0x43
    42f0:	701a      	strb	r2, [r3, #0]
    42f2:	0a16      	lsrs	r6, r2, #8
    42f4:	705e      	strb	r6, [r3, #1]
    42f6:	0c16      	lsrs	r6, r2, #16
    42f8:	709e      	strb	r6, [r3, #2]
    42fa:	0e12      	lsrs	r2, r2, #24
    42fc:	70da      	strb	r2, [r3, #3]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    42fe:	001a      	movs	r2, r3
    4300:	32c4      	adds	r2, #196	; 0xc4
    4302:	32ff      	adds	r2, #255	; 0xff
    4304:	731a      	strb	r2, [r3, #12]
    4306:	0a16      	lsrs	r6, r2, #8
    4308:	735e      	strb	r6, [r3, #13]
    430a:	0c16      	lsrs	r6, r2, #16
    430c:	739e      	strb	r6, [r3, #14]
    430e:	0e12      	lsrs	r2, r2, #24
    4310:	73da      	strb	r2, [r3, #15]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    4312:	001a      	movs	r2, r3
    4314:	32a3      	adds	r2, #163	; 0xa3
    4316:	721a      	strb	r2, [r3, #8]
    4318:	0a16      	lsrs	r6, r2, #8
    431a:	725e      	strb	r6, [r3, #9]
    431c:	0c16      	lsrs	r6, r2, #16
    431e:	729e      	strb	r6, [r3, #10]
    4320:	0e12      	lsrs	r2, r2, #24
    4322:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    4324:	001a      	movs	r2, r3
    4326:	3264      	adds	r2, #100	; 0x64
    4328:	32ff      	adds	r2, #255	; 0xff
    432a:	741a      	strb	r2, [r3, #16]
    432c:	0a16      	lsrs	r6, r2, #8
    432e:	745e      	strb	r6, [r3, #17]
    4330:	0c16      	lsrs	r6, r2, #16
    4332:	749e      	strb	r6, [r3, #18]
    4334:	0e12      	lsrs	r2, r2, #24
    4336:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    4338:	001a      	movs	r2, r3
    433a:	3234      	adds	r2, #52	; 0x34
    433c:	751a      	strb	r2, [r3, #20]
    433e:	0a16      	lsrs	r6, r2, #8
    4340:	755e      	strb	r6, [r3, #21]
    4342:	0c16      	lsrs	r6, r2, #16
    4344:	759e      	strb	r6, [r3, #22]
    4346:	0e12      	lsrs	r2, r2, #24
    4348:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    434a:	001a      	movs	r2, r3
    434c:	323d      	adds	r2, #61	; 0x3d
    434e:	761a      	strb	r2, [r3, #24]
    4350:	0a16      	lsrs	r6, r2, #8
    4352:	765e      	strb	r6, [r3, #25]
    4354:	0c16      	lsrs	r6, r2, #16
    4356:	769e      	strb	r6, [r3, #26]
    4358:	0e12      	lsrs	r2, r2, #24
    435a:	76da      	strb	r2, [r3, #27]
	RegParams.MinNewChIndex = 3;
    435c:	2221      	movs	r2, #33	; 0x21
    435e:	5499      	strb	r1, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_EU;
    4360:	2622      	movs	r6, #34	; 0x22
    4362:	3a01      	subs	r2, #1
    4364:	549e      	strb	r6, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_EU;
    4366:	3a19      	subs	r2, #25
    4368:	3602      	adds	r6, #2
    436a:	559a      	strb	r2, [r3, r6]
	RegParams.maxDataRate = MAC_DATARATE_MAX_EU;
    436c:	3601      	adds	r6, #1
    436e:	559c      	strb	r4, [r3, r6]
	RegParams.Rx1DrOffset = 5;
    4370:	2705      	movs	r7, #5
    4372:	3607      	adds	r6, #7
    4374:	559f      	strb	r7, [r3, r6]
	RegParams.maxTxPwrIndx = 7;
    4376:	3601      	adds	r6, #1
    4378:	559a      	strb	r2, [r3, r6]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    437a:	32ba      	adds	r2, #186	; 0xba
    437c:	32ff      	adds	r2, #255	; 0xff
    437e:	5499      	strb	r1, [r3, r2]
	RegParams.maxTxPwr = DEFAULT_EIRP_EU;
    4380:	3a99      	subs	r2, #153	; 0x99
    4382:	3aff      	subs	r2, #255	; 0xff
    4384:	549d      	strb	r5, [r3, r2]
	RegParams.pDutyCycleTimer->timerId = regTimerId[0];
    4386:	4a59      	ldr	r2, [pc, #356]	; (44ec <LORAReg_InitEU+0x230>)
    4388:	7815      	ldrb	r5, [r2, #0]
    438a:	2168      	movs	r1, #104	; 0x68
    438c:	31ff      	adds	r1, #255	; 0xff
    438e:	545d      	strb	r5, [r3, r1]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    4390:	7855      	ldrb	r5, [r2, #1]
    4392:	392b      	subs	r1, #43	; 0x2b
    4394:	39ff      	subs	r1, #255	; 0xff
    4396:	545d      	strb	r5, [r3, r1]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[2];
    4398:	7891      	ldrb	r1, [r2, #2]
    439a:	223c      	movs	r2, #60	; 0x3c
    439c:	5499      	strb	r1, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    439e:	2100      	movs	r1, #0
    43a0:	3a04      	subs	r2, #4
    43a2:	5499      	strb	r1, [r3, r2]
    43a4:	3201      	adds	r2, #1
    43a6:	5499      	strb	r1, [r3, r2]
    43a8:	3201      	adds	r2, #1
    43aa:	5499      	strb	r1, [r3, r2]
    43ac:	3201      	adds	r2, #1
    43ae:	5499      	strb	r1, [r3, r2]
	RegParams.joinbccount =0;
    43b0:	3207      	adds	r2, #7
    43b2:	549c      	strb	r4, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    43b4:	001a      	movs	r2, r3
    43b6:	323e      	adds	r2, #62	; 0x3e
    43b8:	7011      	strb	r1, [r2, #0]
    43ba:	7051      	strb	r1, [r2, #1]
    43bc:	7091      	strb	r1, [r2, #2]
    43be:	70d1      	strb	r1, [r2, #3]
	
	RegParams.band = ismBand;
    43c0:	222e      	movs	r2, #46	; 0x2e
    43c2:	5498      	strb	r0, [r3, r2]
	
	if(ismBand == ISM_EU868)
    43c4:	2800      	cmp	r0, #0
    43c6:	d004      	beq.n	43d2 <LORAReg_InitEU+0x116>
		RegParams.DefRx2Freq = MAC_433_RX2_WINDOW_FREQ;

	}
	else
	{
		return UNSUPPORTED_BAND;
    43c8:	23c6      	movs	r3, #198	; 0xc6
	else if(ismBand == ISM_EU433)
    43ca:	2801      	cmp	r0, #1
    43cc:	d054      	beq.n	4478 <LORAReg_InitEU+0x1bc>
	LORAREG_InitSetAttrFnPtrsEU();
#else
    status = UNSUPPORTED_BAND;
#endif
	return status;
}
    43ce:	0018      	movs	r0, r3
    43d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
static void InitDefault868Channels (void)
{
    uint8_t i;

    memset (RegParams.pChParams, 0, sizeof(DefaultChannels868) );
    memcpy (RegParams.pChParams, DefaultChannels868, sizeof(DefaultChannels868) );
    43d2:	001c      	movs	r4, r3
    43d4:	0018      	movs	r0, r3
    43d6:	3083      	adds	r0, #131	; 0x83
    43d8:	3a28      	subs	r2, #40	; 0x28
    43da:	4945      	ldr	r1, [pc, #276]	; (44f0 <LORAReg_InitEU+0x234>)
    43dc:	4d45      	ldr	r5, [pc, #276]	; (44f4 <LORAReg_InitEU+0x238>)
    43de:	47a8      	blx	r5
    memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels868) );
    memcpy (RegParams.pOtherChParams, AdvChannels868, sizeof(AdvChannels868) );	
    43e0:	0020      	movs	r0, r4
    43e2:	30a3      	adds	r0, #163	; 0xa3
    43e4:	2224      	movs	r2, #36	; 0x24
    43e6:	4944      	ldr	r1, [pc, #272]	; (44f8 <LORAReg_InitEU+0x23c>)
    43e8:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParams868) );
	memcpy (RegParams.pSubBandParams, SubBandParams868, sizeof(SubBandParams868) );
    43ea:	0020      	movs	r0, r4
    43ec:	30c4      	adds	r0, #196	; 0xc4
    43ee:	30ff      	adds	r0, #255	; 0xff
    43f0:	2248      	movs	r2, #72	; 0x48
    43f2:	4942      	ldr	r1, [pc, #264]	; (44fc <LORAReg_InitEU+0x240>)
    43f4:	47a8      	blx	r5
	memset(RegParams.cmnParams.paramsType2.subBandDutyCycle,0,sizeof(SubBandDutyCycle868));
	memcpy(RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycle868,sizeof(SubBandDutyCycle868));
    43f6:	0020      	movs	r0, r4
    43f8:	30ae      	adds	r0, #174	; 0xae
    43fa:	30ff      	adds	r0, #255	; 0xff
    43fc:	220c      	movs	r2, #12
    43fe:	4940      	ldr	r1, [pc, #256]	; (4500 <LORAReg_InitEU+0x244>)
    4400:	47a8      	blx	r5
    4402:	2303      	movs	r3, #3
    for (i = 3; i < RegParams.maxChannels; i++)
    {
        // for undefined channels the duty cycle should be a very big value, and the data range a not-valid value
        //duty cycle 0 means no duty cycle limitation, the bigger the duty cycle value, the greater the limitation
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    4404:	4838      	ldr	r0, [pc, #224]	; (44e8 <LORAReg_InitEU+0x22c>)
    4406:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    4408:	242a      	movs	r4, #42	; 0x2a
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    440a:	7902      	ldrb	r2, [r0, #4]
    440c:	7941      	ldrb	r1, [r0, #5]
    440e:	0209      	lsls	r1, r1, #8
    4410:	4311      	orrs	r1, r2
    4412:	7982      	ldrb	r2, [r0, #6]
    4414:	0412      	lsls	r2, r2, #16
    4416:	4311      	orrs	r1, r2
    4418:	79c2      	ldrb	r2, [r0, #7]
    441a:	0612      	lsls	r2, r2, #24
    441c:	430a      	orrs	r2, r1
    441e:	0059      	lsls	r1, r3, #1
    4420:	188a      	adds	r2, r1, r2
    4422:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    4424:	3301      	adds	r3, #1
    4426:	b2db      	uxtb	r3, r3
    4428:	5702      	ldrsb	r2, [r0, r4]
    442a:	4293      	cmp	r3, r2
    442c:	dbed      	blt.n	440a <LORAReg_InitEU+0x14e>
		RegParams.DefRx1DataRate = MAC_868_RX1_WINDOW_DATARATE;
    442e:	4b2e      	ldr	r3, [pc, #184]	; (44e8 <LORAReg_InitEU+0x22c>)
    4430:	2200      	movs	r2, #0
    4432:	2122      	movs	r1, #34	; 0x22
    4434:	545a      	strb	r2, [r3, r1]
		RegParams.DefRx2DataRate = MAC_868_RX2_WINDOW_DATARATE;
    4436:	3101      	adds	r1, #1
    4438:	545a      	strb	r2, [r3, r1]
		RegParams.DefRx2Freq = MAC_868_RX2_WINDOW_FREQ;
    443a:	3208      	adds	r2, #8
    443c:	771a      	strb	r2, [r3, #28]
    443e:	3a22      	subs	r2, #34	; 0x22
    4440:	775a      	strb	r2, [r3, #29]
    4442:	3a13      	subs	r2, #19
    4444:	779a      	strb	r2, [r3, #30]
    4446:	3260      	adds	r2, #96	; 0x60
    4448:	77da      	strb	r2, [r3, #31]
	memcpy (RegParams.pDrParams, DefaultDrparamsEU, sizeof(DefaultDrparamsEU) );
    444a:	4a27      	ldr	r2, [pc, #156]	; (44e8 <LORAReg_InitEU+0x22c>)
    444c:	7810      	ldrb	r0, [r2, #0]
    444e:	7853      	ldrb	r3, [r2, #1]
    4450:	021b      	lsls	r3, r3, #8
    4452:	4303      	orrs	r3, r0
    4454:	7890      	ldrb	r0, [r2, #2]
    4456:	0400      	lsls	r0, r0, #16
    4458:	4303      	orrs	r3, r0
    445a:	78d0      	ldrb	r0, [r2, #3]
    445c:	0600      	lsls	r0, r0, #24
    445e:	4318      	orrs	r0, r3
    4460:	2240      	movs	r2, #64	; 0x40
    4462:	4928      	ldr	r1, [pc, #160]	; (4504 <LORAReg_InitEU+0x248>)
    4464:	4b23      	ldr	r3, [pc, #140]	; (44f4 <LORAReg_InitEU+0x238>)
    4466:	4798      	blx	r3
    LORAREG_InitGetAttrFnPtrsEU();
    4468:	4b27      	ldr	r3, [pc, #156]	; (4508 <LORAReg_InitEU+0x24c>)
    446a:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsEU();
    446c:	4b27      	ldr	r3, [pc, #156]	; (450c <LORAReg_InitEU+0x250>)
    446e:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsEU();
    4470:	4b27      	ldr	r3, [pc, #156]	; (4510 <LORAReg_InitEU+0x254>)
    4472:	4798      	blx	r3
	return status;
    4474:	2308      	movs	r3, #8
    4476:	e7aa      	b.n	43ce <LORAReg_InitEU+0x112>
static void InitDefault433Channels (void)
{
    uint8_t i;

    memset (RegParams.pChParams, 0, sizeof(DefaultChannels433) );
    memcpy (RegParams.pChParams, DefaultChannels433, sizeof(DefaultChannels433) );
    4478:	4c1b      	ldr	r4, [pc, #108]	; (44e8 <LORAReg_InitEU+0x22c>)
    447a:	0020      	movs	r0, r4
    447c:	3083      	adds	r0, #131	; 0x83
    447e:	2206      	movs	r2, #6
    4480:	4924      	ldr	r1, [pc, #144]	; (4514 <LORAReg_InitEU+0x258>)
    4482:	4d1c      	ldr	r5, [pc, #112]	; (44f4 <LORAReg_InitEU+0x238>)
    4484:	47a8      	blx	r5
    memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels433) );
    memcpy (RegParams.pOtherChParams, AdvChannels433, sizeof(AdvChannels433) );
    4486:	0020      	movs	r0, r4
    4488:	30a3      	adds	r0, #163	; 0xa3
    448a:	2224      	movs	r2, #36	; 0x24
    448c:	4922      	ldr	r1, [pc, #136]	; (4518 <LORAReg_InitEU+0x25c>)
    448e:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParams433) );
	memcpy (RegParams.pSubBandParams, SubBandParams433, sizeof(SubBandParams433) );	
    4490:	0020      	movs	r0, r4
    4492:	30c4      	adds	r0, #196	; 0xc4
    4494:	30ff      	adds	r0, #255	; 0xff
    4496:	220c      	movs	r2, #12
    4498:	4920      	ldr	r1, [pc, #128]	; (451c <LORAReg_InitEU+0x260>)
    449a:	47a8      	blx	r5
    449c:	2303      	movs	r3, #3
	
    for (i = 3; i < RegParams.maxChannels; i++)
    {
        // for undefined channels the duty cycle should be a very big value, and the data range a not-valid value
        //duty cycle 0 means no duty cycle limitation, the bigger the duty cycle value, the greater the limitation
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    449e:	4812      	ldr	r0, [pc, #72]	; (44e8 <LORAReg_InitEU+0x22c>)
    44a0:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    44a2:	242a      	movs	r4, #42	; 0x2a
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    44a4:	7902      	ldrb	r2, [r0, #4]
    44a6:	7941      	ldrb	r1, [r0, #5]
    44a8:	0209      	lsls	r1, r1, #8
    44aa:	4311      	orrs	r1, r2
    44ac:	7982      	ldrb	r2, [r0, #6]
    44ae:	0412      	lsls	r2, r2, #16
    44b0:	4311      	orrs	r1, r2
    44b2:	79c2      	ldrb	r2, [r0, #7]
    44b4:	0612      	lsls	r2, r2, #24
    44b6:	430a      	orrs	r2, r1
    44b8:	0059      	lsls	r1, r3, #1
    44ba:	188a      	adds	r2, r1, r2
    44bc:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    44be:	3301      	adds	r3, #1
    44c0:	b2db      	uxtb	r3, r3
    44c2:	5702      	ldrsb	r2, [r0, r4]
    44c4:	4293      	cmp	r3, r2
    44c6:	dbed      	blt.n	44a4 <LORAReg_InitEU+0x1e8>
		RegParams.DefRx1DataRate = MAC_433_RX1_WINDOW_DATARATE;
    44c8:	4b07      	ldr	r3, [pc, #28]	; (44e8 <LORAReg_InitEU+0x22c>)
    44ca:	2105      	movs	r1, #5
    44cc:	2222      	movs	r2, #34	; 0x22
    44ce:	5499      	strb	r1, [r3, r2]
		RegParams.DefRx2DataRate = MAC_433_RX2_WINDOW_DATARATE;
    44d0:	2100      	movs	r1, #0
    44d2:	3201      	adds	r2, #1
    44d4:	5499      	strb	r1, [r3, r2]
		RegParams.DefRx2Freq = MAC_433_RX2_WINDOW_FREQ;
    44d6:	3a93      	subs	r2, #147	; 0x93
    44d8:	771a      	strb	r2, [r3, #28]
    44da:	3241      	adds	r2, #65	; 0x41
    44dc:	775a      	strb	r2, [r3, #29]
    44de:	3a02      	subs	r2, #2
    44e0:	779a      	strb	r2, [r3, #30]
    44e2:	324a      	adds	r2, #74	; 0x4a
    44e4:	77da      	strb	r2, [r3, #31]
    44e6:	e7b0      	b.n	444a <LORAReg_InitEU+0x18e>
    44e8:	20000fc0 	.word	0x20000fc0
    44ec:	20000fbc 	.word	0x20000fbc
    44f0:	00019c08 	.word	0x00019c08
    44f4:	00014ecd 	.word	0x00014ecd
    44f8:	00019bdc 	.word	0x00019bdc
    44fc:	00019c68 	.word	0x00019c68
    4500:	00019c50 	.word	0x00019c50
    4504:	00019c10 	.word	0x00019c10
    4508:	00007e91 	.word	0x00007e91
    450c:	000086a1 	.word	0x000086a1
    4510:	00008971 	.word	0x00008971
    4514:	00019c00 	.word	0x00019c00
    4518:	00019bb8 	.word	0x00019bb8
    451c:	00019c5c 	.word	0x00019c5c

00004520 <LORAReg_InitIN>:
#endif

/****************************** FUNCTIONS *************************************/

StackRetStatus_t LORAReg_InitIN(IsmBand_t ismBand)
{
    4520:	b570      	push	{r4, r5, r6, lr}
	StackRetStatus_t result = LORAWAN_SUCCESS;
#if(IND_BAND == 1)
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_IN;
    4522:	4b5f      	ldr	r3, [pc, #380]	; (46a0 <LORAReg_InitIN+0x180>)
    4524:	2403      	movs	r4, #3
    4526:	2226      	movs	r2, #38	; 0x26
    4528:	549c      	strb	r4, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_IN;
    452a:	2110      	movs	r1, #16
    452c:	3204      	adds	r2, #4
    452e:	5499      	strb	r1, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_IN;
    4530:	3a29      	subs	r2, #41	; 0x29
    4532:	3119      	adds	r1, #25
    4534:	545a      	strb	r2, [r3, r1]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_IN;
    4536:	3902      	subs	r1, #2
    4538:	545a      	strb	r2, [r3, r1]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    453a:	001a      	movs	r2, r3
    453c:	3283      	adds	r2, #131	; 0x83
    453e:	2100      	movs	r1, #0
    4540:	711a      	strb	r2, [r3, #4]
    4542:	0a15      	lsrs	r5, r2, #8
    4544:	715d      	strb	r5, [r3, #5]
    4546:	0c15      	lsrs	r5, r2, #16
    4548:	719d      	strb	r5, [r3, #6]
    454a:	0e12      	lsrs	r2, r2, #24
    454c:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    454e:	001a      	movs	r2, r3
    4550:	3243      	adds	r2, #67	; 0x43
    4552:	701a      	strb	r2, [r3, #0]
    4554:	0a15      	lsrs	r5, r2, #8
    4556:	705d      	strb	r5, [r3, #1]
    4558:	0c15      	lsrs	r5, r2, #16
    455a:	709d      	strb	r5, [r3, #2]
    455c:	0e12      	lsrs	r2, r2, #24
    455e:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    4560:	001a      	movs	r2, r3
    4562:	32a3      	adds	r2, #163	; 0xa3
    4564:	721a      	strb	r2, [r3, #8]
    4566:	0a15      	lsrs	r5, r2, #8
    4568:	725d      	strb	r5, [r3, #9]
    456a:	0c15      	lsrs	r5, r2, #16
    456c:	729d      	strb	r5, [r3, #10]
    456e:	0e12      	lsrs	r2, r2, #24
    4570:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    4572:	001a      	movs	r2, r3
    4574:	3264      	adds	r2, #100	; 0x64
    4576:	32ff      	adds	r2, #255	; 0xff
    4578:	741a      	strb	r2, [r3, #16]
    457a:	0a15      	lsrs	r5, r2, #8
    457c:	745d      	strb	r5, [r3, #17]
    457e:	0c15      	lsrs	r5, r2, #16
    4580:	749d      	strb	r5, [r3, #18]
    4582:	0e12      	lsrs	r2, r2, #24
    4584:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    4586:	001a      	movs	r2, r3
    4588:	3234      	adds	r2, #52	; 0x34
    458a:	751a      	strb	r2, [r3, #20]
    458c:	0a15      	lsrs	r5, r2, #8
    458e:	755d      	strb	r5, [r3, #21]
    4590:	0c15      	lsrs	r5, r2, #16
    4592:	759d      	strb	r5, [r3, #22]
    4594:	0e12      	lsrs	r2, r2, #24
    4596:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    4598:	001a      	movs	r2, r3
    459a:	323d      	adds	r2, #61	; 0x3d
    459c:	761a      	strb	r2, [r3, #24]
    459e:	0a15      	lsrs	r5, r2, #8
    45a0:	765d      	strb	r5, [r3, #25]
    45a2:	0c15      	lsrs	r5, r2, #16
    45a4:	769d      	strb	r5, [r3, #26]
    45a6:	0e12      	lsrs	r2, r2, #24
    45a8:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_IN;
    45aa:	2222      	movs	r2, #34	; 0x22
    45ac:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_IN;
    45ae:	2502      	movs	r5, #2
    45b0:	3201      	adds	r2, #1
    45b2:	549d      	strb	r5, [r3, r2]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_IN;	
    45b4:	3a33      	subs	r2, #51	; 0x33
    45b6:	771a      	strb	r2, [r3, #28]
    45b8:	3a70      	subs	r2, #112	; 0x70
    45ba:	775a      	strb	r2, [r3, #29]
    45bc:	3226      	adds	r2, #38	; 0x26
    45be:	779a      	strb	r2, [r3, #30]
    45c0:	328d      	adds	r2, #141	; 0x8d
    45c2:	77da      	strb	r2, [r3, #31]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_IN;
    45c4:	3a12      	subs	r2, #18
    45c6:	549c      	strb	r4, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_IN;
    45c8:	352e      	adds	r5, #46	; 0x2e
    45ca:	3a01      	subs	r2, #1
    45cc:	549d      	strb	r5, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_IN;
    45ce:	3a19      	subs	r2, #25
    45d0:	3d0c      	subs	r5, #12
    45d2:	555a      	strb	r2, [r3, r5]
	RegParams.maxDataRate = MAC_DATARATE_MAX_IN;
    45d4:	3501      	adds	r5, #1
    45d6:	5559      	strb	r1, [r3, r5]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    45d8:	359c      	adds	r5, #156	; 0x9c
    45da:	35ff      	adds	r5, #255	; 0xff
    45dc:	555c      	strb	r4, [r3, r5]
	RegParams.Rx1DrOffset = 7;
    45de:	3429      	adds	r4, #41	; 0x29
    45e0:	551a      	strb	r2, [r3, r4]
	RegParams.maxTxPwrIndx = 10;
    45e2:	3c22      	subs	r4, #34	; 0x22
    45e4:	3226      	adds	r2, #38	; 0x26
    45e6:	549c      	strb	r4, [r3, r2]
	RegParams.maxTxPwr = DEFAULT_EIRP_IN;
    45e8:	3414      	adds	r4, #20
    45ea:	3a05      	subs	r2, #5
    45ec:	549c      	strb	r4, [r3, r2]
	RegParams.pJoinDutyCycleTimer->timerId = regTimerId[0];
    45ee:	4a2d      	ldr	r2, [pc, #180]	; (46a4 <LORAReg_InitIN+0x184>)
    45f0:	7815      	ldrb	r5, [r2, #0]
    45f2:	341e      	adds	r4, #30
    45f4:	551d      	strb	r5, [r3, r4]
	RegParams.pJoinDutyCycleTimer->remainingtime = 0;
    45f6:	2500      	movs	r5, #0
    45f8:	3c04      	subs	r4, #4
    45fa:	551d      	strb	r5, [r3, r4]
    45fc:	3401      	adds	r4, #1
    45fe:	551d      	strb	r5, [r3, r4]
    4600:	3401      	adds	r4, #1
    4602:	551d      	strb	r5, [r3, r4]
    4604:	3401      	adds	r4, #1
    4606:	551d      	strb	r5, [r3, r4]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    4608:	7854      	ldrb	r4, [r2, #1]
    460a:	223d      	movs	r2, #61	; 0x3d
    460c:	549c      	strb	r4, [r3, r2]
	RegParams.joinbccount =0;
    460e:	3205      	adds	r2, #5
    4610:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    4612:	001a      	movs	r2, r3
    4614:	323e      	adds	r2, #62	; 0x3e
    4616:	7011      	strb	r1, [r2, #0]
    4618:	7051      	strb	r1, [r2, #1]
    461a:	7091      	strb	r1, [r2, #2]
    461c:	70d1      	strb	r1, [r2, #3]
	
	RegParams.band = ismBand;
    461e:	222e      	movs	r2, #46	; 0x2e
    4620:	5498      	strb	r0, [r3, r2]
		PDS_RegFile(PDS_FILE_REG_IND_07_IDX,filemarks);
#endif		
	}
	else
	{
		result = LORAWAN_INVALID_PARAMETER;
    4622:	240a      	movs	r4, #10
	if(ismBand == ISM_IND865)
    4624:	280f      	cmp	r0, #15
    4626:	d007      	beq.n	4638 <LORAReg_InitIN+0x118>
	}
	
    LORAREG_InitGetAttrFnPtrsIN();
    4628:	4b1f      	ldr	r3, [pc, #124]	; (46a8 <LORAReg_InitIN+0x188>)
    462a:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsIN();
    462c:	4b1f      	ldr	r3, [pc, #124]	; (46ac <LORAReg_InitIN+0x18c>)
    462e:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsIN();
    4630:	4b1f      	ldr	r3, [pc, #124]	; (46b0 <LORAReg_InitIN+0x190>)
    4632:	4798      	blx	r3
#else
    result = UNSUPPORTED_BAND;
#endif
	return result;
}
    4634:	0020      	movs	r0, r4
    4636:	bd70      	pop	{r4, r5, r6, pc}
static void InitDefault865Channels (void)
{
    uint8_t i;
    memset (RegParams.pChParams, 0, sizeof(DefaultChannels865) );
	memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels865) );
    memcpy (RegParams.pChParams, DefaultChannels865, sizeof(DefaultChannels865) );
    4638:	001c      	movs	r4, r3
    463a:	0018      	movs	r0, r3
    463c:	3083      	adds	r0, #131	; 0x83
    463e:	3a28      	subs	r2, #40	; 0x28
    4640:	491c      	ldr	r1, [pc, #112]	; (46b4 <LORAReg_InitIN+0x194>)
    4642:	4d1d      	ldr	r5, [pc, #116]	; (46b8 <LORAReg_InitIN+0x198>)
    4644:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels865, sizeof(AdvChannels865) );
    4646:	0020      	movs	r0, r4
    4648:	30a3      	adds	r0, #163	; 0xa3
    464a:	2224      	movs	r2, #36	; 0x24
    464c:	491b      	ldr	r1, [pc, #108]	; (46bc <LORAReg_InitIN+0x19c>)
    464e:	47a8      	blx	r5
    4650:	2006      	movs	r0, #6
    for (i = MIN_CHANNEL_INDEX_IN; i < MAX_CHANNELS_IN; i++)
    {
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    4652:	4913      	ldr	r1, [pc, #76]	; (46a0 <LORAReg_InitIN+0x180>)
    4654:	24ff      	movs	r4, #255	; 0xff
    4656:	790b      	ldrb	r3, [r1, #4]
    4658:	794a      	ldrb	r2, [r1, #5]
    465a:	0212      	lsls	r2, r2, #8
    465c:	431a      	orrs	r2, r3
    465e:	798b      	ldrb	r3, [r1, #6]
    4660:	041b      	lsls	r3, r3, #16
    4662:	431a      	orrs	r2, r3
    4664:	79cb      	ldrb	r3, [r1, #7]
    4666:	061b      	lsls	r3, r3, #24
    4668:	4313      	orrs	r3, r2
    466a:	181b      	adds	r3, r3, r0
    466c:	705c      	strb	r4, [r3, #1]
    466e:	3002      	adds	r0, #2
    for (i = MIN_CHANNEL_INDEX_IN; i < MAX_CHANNELS_IN; i++)
    4670:	2820      	cmp	r0, #32
    4672:	d1f0      	bne.n	4656 <LORAReg_InitIN+0x136>
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = DEFAULT_EIRP_IN;
    4674:	4a0a      	ldr	r2, [pc, #40]	; (46a0 <LORAReg_InitIN+0x180>)
    4676:	211e      	movs	r1, #30
    4678:	23c2      	movs	r3, #194	; 0xc2
    467a:	33ff      	adds	r3, #255	; 0xff
    467c:	54d1      	strb	r1, [r2, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsIN, sizeof(DefaultDrParamsIN) );
    467e:	7810      	ldrb	r0, [r2, #0]
    4680:	7853      	ldrb	r3, [r2, #1]
    4682:	021b      	lsls	r3, r3, #8
    4684:	4303      	orrs	r3, r0
    4686:	7890      	ldrb	r0, [r2, #2]
    4688:	0400      	lsls	r0, r0, #16
    468a:	4303      	orrs	r3, r0
    468c:	78d0      	ldrb	r0, [r2, #3]
    468e:	0600      	lsls	r0, r0, #24
    4690:	4318      	orrs	r0, r3
    4692:	2240      	movs	r2, #64	; 0x40
    4694:	490a      	ldr	r1, [pc, #40]	; (46c0 <LORAReg_InitIN+0x1a0>)
    4696:	4b08      	ldr	r3, [pc, #32]	; (46b8 <LORAReg_InitIN+0x198>)
    4698:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    469a:	2408      	movs	r4, #8
    469c:	e7c4      	b.n	4628 <LORAReg_InitIN+0x108>
    469e:	46c0      	nop			; (mov r8, r8)
    46a0:	20000fc0 	.word	0x20000fc0
    46a4:	20000fbc 	.word	0x20000fbc
    46a8:	0000825d 	.word	0x0000825d
    46ac:	000087e1 	.word	0x000087e1
    46b0:	00008aa5 	.word	0x00008aa5
    46b4:	00019cd4 	.word	0x00019cd4
    46b8:	00014ecd 	.word	0x00014ecd
    46bc:	00019cb0 	.word	0x00019cb0
    46c0:	00019cdc 	.word	0x00019cdc

000046c4 <LORAReg_InitJP>:
#endif

/****************************** FUNCTIONS *************************************/

StackRetStatus_t LORAReg_InitJP(IsmBand_t ismBand)
{
    46c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    46c6:	46c6      	mov	lr, r8
    46c8:	b500      	push	{lr}
	StackRetStatus_t result = LORAWAN_SUCCESS;

#if (JPN_BAND == 1)

	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_JP;
    46ca:	4b84      	ldr	r3, [pc, #528]	; (48dc <LORAReg_InitJP+0x218>)
    46cc:	2103      	movs	r1, #3
    46ce:	2226      	movs	r2, #38	; 0x26
    46d0:	5499      	strb	r1, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_JP;
    46d2:	2510      	movs	r5, #16
    46d4:	3204      	adds	r2, #4
    46d6:	549d      	strb	r5, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_JP;
    46d8:	3901      	subs	r1, #1
    46da:	3a01      	subs	r2, #1
    46dc:	5499      	strb	r1, [r3, r2]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_JP;
    46de:	2401      	movs	r4, #1
    46e0:	3a02      	subs	r2, #2
    46e2:	549c      	strb	r4, [r3, r2]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    46e4:	001a      	movs	r2, r3
    46e6:	3283      	adds	r2, #131	; 0x83
    46e8:	2400      	movs	r4, #0
    46ea:	46a0      	mov	r8, r4
    46ec:	711a      	strb	r2, [r3, #4]
    46ee:	0a16      	lsrs	r6, r2, #8
    46f0:	715e      	strb	r6, [r3, #5]
    46f2:	0c16      	lsrs	r6, r2, #16
    46f4:	719e      	strb	r6, [r3, #6]
    46f6:	0e12      	lsrs	r2, r2, #24
    46f8:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    46fa:	001a      	movs	r2, r3
    46fc:	3243      	adds	r2, #67	; 0x43
    46fe:	701a      	strb	r2, [r3, #0]
    4700:	0a16      	lsrs	r6, r2, #8
    4702:	705e      	strb	r6, [r3, #1]
    4704:	0c16      	lsrs	r6, r2, #16
    4706:	709e      	strb	r6, [r3, #2]
    4708:	0e12      	lsrs	r2, r2, #24
    470a:	70da      	strb	r2, [r3, #3]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    470c:	001a      	movs	r2, r3
    470e:	32c4      	adds	r2, #196	; 0xc4
    4710:	32ff      	adds	r2, #255	; 0xff
    4712:	731a      	strb	r2, [r3, #12]
    4714:	0a16      	lsrs	r6, r2, #8
    4716:	735e      	strb	r6, [r3, #13]
    4718:	0c16      	lsrs	r6, r2, #16
    471a:	739e      	strb	r6, [r3, #14]
    471c:	0e12      	lsrs	r2, r2, #24
    471e:	73da      	strb	r2, [r3, #15]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    4720:	001a      	movs	r2, r3
    4722:	32a3      	adds	r2, #163	; 0xa3
    4724:	721a      	strb	r2, [r3, #8]
    4726:	0a16      	lsrs	r6, r2, #8
    4728:	725e      	strb	r6, [r3, #9]
    472a:	0c16      	lsrs	r6, r2, #16
    472c:	729e      	strb	r6, [r3, #10]
    472e:	0e12      	lsrs	r2, r2, #24
    4730:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    4732:	001a      	movs	r2, r3
    4734:	3264      	adds	r2, #100	; 0x64
    4736:	32ff      	adds	r2, #255	; 0xff
    4738:	741a      	strb	r2, [r3, #16]
    473a:	0a16      	lsrs	r6, r2, #8
    473c:	745e      	strb	r6, [r3, #17]
    473e:	0c16      	lsrs	r6, r2, #16
    4740:	749e      	strb	r6, [r3, #18]
    4742:	0e12      	lsrs	r2, r2, #24
    4744:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    4746:	001a      	movs	r2, r3
    4748:	3234      	adds	r2, #52	; 0x34
    474a:	751a      	strb	r2, [r3, #20]
    474c:	0a16      	lsrs	r6, r2, #8
    474e:	755e      	strb	r6, [r3, #21]
    4750:	0c16      	lsrs	r6, r2, #16
    4752:	759e      	strb	r6, [r3, #22]
    4754:	0e12      	lsrs	r2, r2, #24
    4756:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    4758:	001a      	movs	r2, r3
    475a:	323d      	adds	r2, #61	; 0x3d
    475c:	761a      	strb	r2, [r3, #24]
    475e:	0a16      	lsrs	r6, r2, #8
    4760:	765e      	strb	r6, [r3, #25]
    4762:	0c16      	lsrs	r6, r2, #16
    4764:	769e      	strb	r6, [r3, #26]
    4766:	0e12      	lsrs	r2, r2, #24
    4768:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_JP;
    476a:	2222      	movs	r2, #34	; 0x22
    476c:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_JP;
    476e:	3201      	adds	r2, #1
    4770:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_JP;	
    4772:	2200      	movs	r2, #0
    4774:	771a      	strb	r2, [r3, #28]
    4776:	3a16      	subs	r2, #22
    4778:	775a      	strb	r2, [r3, #29]
    477a:	321c      	adds	r2, #28
    477c:	779a      	strb	r2, [r3, #30]
    477e:	3231      	adds	r2, #49	; 0x31
    4780:	77da      	strb	r2, [r3, #31]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_JP;
    4782:	3a16      	subs	r2, #22
    4784:	5499      	strb	r1, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_JP;
    4786:	2636      	movs	r6, #54	; 0x36
    4788:	3a01      	subs	r2, #1
    478a:	549e      	strb	r6, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_JP;
    478c:	3a19      	subs	r2, #25
    478e:	3e12      	subs	r6, #18
    4790:	559a      	strb	r2, [r3, r6]
	RegParams.maxDataRate = MAC_DATARATE_MAX_JP;
    4792:	3601      	adds	r6, #1
    4794:	559c      	strb	r4, [r3, r6]
	RegParams.cmnParams.paramsType2.LBTScanPeriod = LBT_SCAN_PERIOD_JP;
    4796:	3e20      	subs	r6, #32
    4798:	27be      	movs	r7, #190	; 0xbe
    479a:	37ff      	adds	r7, #255	; 0xff
    479c:	55de      	strb	r6, [r3, r7]
	RegParams.cmnParams.paramsType2.LBTSignalThreshold = LBT_SIGNAL_THRESHOLD_JP;
    479e:	3f0e      	subs	r7, #14
    47a0:	3fff      	subs	r7, #255	; 0xff
    47a2:	46bc      	mov	ip, r7
    47a4:	370f      	adds	r7, #15
    47a6:	37ff      	adds	r7, #255	; 0xff
    47a8:	4664      	mov	r4, ip
    47aa:	55dc      	strb	r4, [r3, r7]
	RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount = LBT_RSSI_SAMPLES_COUNT_JP;
    47ac:	27c0      	movs	r7, #192	; 0xc0
    47ae:	37ff      	adds	r7, #255	; 0xff
    47b0:	55de      	strb	r6, [r3, r7]
	RegParams.cmnParams.paramsType2.minNonDefChId = 2;
    47b2:	36bc      	adds	r6, #188	; 0xbc
    47b4:	36ff      	adds	r6, #255	; 0xff
    47b6:	5599      	strb	r1, [r3, r6]
	RegParams.Rx1DrOffset = 7;
    47b8:	312a      	adds	r1, #42	; 0x2a
    47ba:	545a      	strb	r2, [r3, r1]
	RegParams.maxTxPwrIndx = 7;
    47bc:	3101      	adds	r1, #1
    47be:	545a      	strb	r2, [r3, r1]
	RegParams.maxTxPwr = DEFAULT_EIRP_JP;
    47c0:	3221      	adds	r2, #33	; 0x21
    47c2:	549d      	strb	r5, [r3, r2]
	RegParams.cmnParams.paramsType2.LBTTimer.timerId = regTimerId[0];
    47c4:	4a46      	ldr	r2, [pc, #280]	; (48e0 <LORAReg_InitJP+0x21c>)
    47c6:	7815      	ldrb	r5, [r2, #0]
    47c8:	3180      	adds	r1, #128	; 0x80
    47ca:	31ff      	adds	r1, #255	; 0xff
    47cc:	545d      	strb	r5, [r3, r1]
	RegParams.pDutyCycleTimer->timerId = regTimerId[1];
    47ce:	7855      	ldrb	r5, [r2, #1]
    47d0:	2168      	movs	r1, #104	; 0x68
    47d2:	31ff      	adds	r1, #255	; 0xff
    47d4:	545d      	strb	r5, [r3, r1]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[2];
    47d6:	7895      	ldrb	r5, [r2, #2]
    47d8:	392b      	subs	r1, #43	; 0x2b
    47da:	39ff      	subs	r1, #255	; 0xff
    47dc:	545d      	strb	r5, [r3, r1]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[3];
    47de:	78d1      	ldrb	r1, [r2, #3]
    47e0:	223c      	movs	r2, #60	; 0x3c
    47e2:	5499      	strb	r1, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    47e4:	2100      	movs	r1, #0
    47e6:	3a04      	subs	r2, #4
    47e8:	5499      	strb	r1, [r3, r2]
    47ea:	3201      	adds	r2, #1
    47ec:	5499      	strb	r1, [r3, r2]
    47ee:	3201      	adds	r2, #1
    47f0:	5499      	strb	r1, [r3, r2]
    47f2:	3201      	adds	r2, #1
    47f4:	5499      	strb	r1, [r3, r2]
	RegParams.joinbccount =0;
    47f6:	3207      	adds	r2, #7
    47f8:	4641      	mov	r1, r8
    47fa:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    47fc:	001a      	movs	r2, r3
    47fe:	323e      	adds	r2, #62	; 0x3e
    4800:	2100      	movs	r1, #0
    4802:	7011      	strb	r1, [r2, #0]
    4804:	7051      	strb	r1, [r2, #1]
    4806:	7091      	strb	r1, [r2, #2]
    4808:	70d1      	strb	r1, [r2, #3]
	RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime = 1;
    480a:	31c3      	adds	r1, #195	; 0xc3
    480c:	31ff      	adds	r1, #255	; 0xff
    480e:	5c5a      	ldrb	r2, [r3, r1]
    4810:	2401      	movs	r4, #1
    4812:	4322      	orrs	r2, r4
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime = 1;
    4814:	2402      	movs	r4, #2
    4816:	4322      	orrs	r2, r4
    4818:	545a      	strb	r2, [r3, r1]
	RegParams.band = ismBand;
    481a:	222e      	movs	r2, #46	; 0x2e
    481c:	5498      	strb	r0, [r3, r2]

#endif		
	}
	else
	{
		result = LORAWAN_INVALID_PARAMETER;
    481e:	240a      	movs	r4, #10
	if(ismBand == ISM_JPN923)
    4820:	2805      	cmp	r0, #5
    4822:	d009      	beq.n	4838 <LORAReg_InitJP+0x174>
	}
	
	
    LORAREG_InitGetAttrFnPtrsJP();
    4824:	4b2f      	ldr	r3, [pc, #188]	; (48e4 <LORAReg_InitJP+0x220>)
    4826:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsJP();
    4828:	4b2f      	ldr	r3, [pc, #188]	; (48e8 <LORAReg_InitJP+0x224>)
    482a:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsJP();
    482c:	4b2f      	ldr	r3, [pc, #188]	; (48ec <LORAReg_InitJP+0x228>)
    482e:	4798      	blx	r3
#else
    result = UNSUPPORTED_BAND;
#endif
	return result;
}
    4830:	0020      	movs	r0, r4
    4832:	bc04      	pop	{r2}
    4834:	4690      	mov	r8, r2
    4836:	bdf0      	pop	{r4, r5, r6, r7, pc}
static void InitDefault920Channels (void)
{
    uint8_t i;
    memset (RegParams.pChParams, 0, sizeof(DefaultChannels923JP) );
	memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels923JP) );
    memcpy (RegParams.pChParams, DefaultChannels923JP, sizeof(DefaultChannels923JP) );
    4838:	001c      	movs	r4, r3
    483a:	0018      	movs	r0, r3
    483c:	3083      	adds	r0, #131	; 0x83
    483e:	3a2a      	subs	r2, #42	; 0x2a
    4840:	492b      	ldr	r1, [pc, #172]	; (48f0 <LORAReg_InitJP+0x22c>)
    4842:	4d2c      	ldr	r5, [pc, #176]	; (48f4 <LORAReg_InitJP+0x230>)
    4844:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels923JP, sizeof(AdvChannels923JP) );
    4846:	0020      	movs	r0, r4
    4848:	30a3      	adds	r0, #163	; 0xa3
    484a:	2218      	movs	r2, #24
    484c:	492a      	ldr	r1, [pc, #168]	; (48f8 <LORAReg_InitJP+0x234>)
    484e:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParamsJP923) );
	memcpy (RegParams.pSubBandParams, SubBandParamsJP923, sizeof(SubBandParamsJP923) );
    4850:	0020      	movs	r0, r4
    4852:	30c4      	adds	r0, #196	; 0xc4
    4854:	30ff      	adds	r0, #255	; 0xff
    4856:	2218      	movs	r2, #24
    4858:	4928      	ldr	r1, [pc, #160]	; (48fc <LORAReg_InitJP+0x238>)
    485a:	47a8      	blx	r5
	memset (RegParams.cmnParams.paramsType2.subBandDutyCycle,0,sizeof(SubBandDutyCycleJP923));
	memcpy (RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycleJP923,sizeof(SubBandDutyCycleJP923));
    485c:	0020      	movs	r0, r4
    485e:	30ae      	adds	r0, #174	; 0xae
    4860:	30ff      	adds	r0, #255	; 0xff
    4862:	2204      	movs	r2, #4
    4864:	4926      	ldr	r1, [pc, #152]	; (4900 <LORAReg_InitJP+0x23c>)
    4866:	47a8      	blx	r5
    4868:	2302      	movs	r3, #2
    486a:	2202      	movs	r2, #2
    for (i = 2; i < RegParams.maxChannels; i++)
    {
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    486c:	491b      	ldr	r1, [pc, #108]	; (48dc <LORAReg_InitJP+0x218>)
    486e:	3fc0      	subs	r7, #192	; 0xc0
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    4870:	2500      	movs	r5, #0
    for (i = 2; i < RegParams.maxChannels; i++)
    4872:	3e97      	subs	r6, #151	; 0x97
    4874:	3eff      	subs	r6, #255	; 0xff
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    4876:	7908      	ldrb	r0, [r1, #4]
    4878:	794c      	ldrb	r4, [r1, #5]
    487a:	0224      	lsls	r4, r4, #8
    487c:	4304      	orrs	r4, r0
    487e:	7988      	ldrb	r0, [r1, #6]
    4880:	0400      	lsls	r0, r0, #16
    4882:	4304      	orrs	r4, r0
    4884:	79c8      	ldrb	r0, [r1, #7]
    4886:	0600      	lsls	r0, r0, #24
    4888:	4320      	orrs	r0, r4
    488a:	0054      	lsls	r4, r2, #1
    488c:	1820      	adds	r0, r4, r0
    488e:	7047      	strb	r7, [r0, #1]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    4890:	3358      	adds	r3, #88	; 0x58
    4892:	009b      	lsls	r3, r3, #2
    4894:	18cb      	adds	r3, r1, r3
    4896:	721d      	strb	r5, [r3, #8]
    4898:	725d      	strb	r5, [r3, #9]
    489a:	729d      	strb	r5, [r3, #10]
    489c:	72dd      	strb	r5, [r3, #11]
    for (i = 2; i < RegParams.maxChannels; i++)
    489e:	3201      	adds	r2, #1
    48a0:	b2d2      	uxtb	r2, r2
    48a2:	0013      	movs	r3, r2
    48a4:	5788      	ldrsb	r0, [r1, r6]
    48a6:	4282      	cmp	r2, r0
    48a8:	dbe5      	blt.n	4876 <LORAReg_InitJP+0x1b2>
    }
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    48aa:	4b0c      	ldr	r3, [pc, #48]	; (48dc <LORAReg_InitJP+0x218>)
    48ac:	21ff      	movs	r1, #255	; 0xff
    48ae:	222f      	movs	r2, #47	; 0x2f
    48b0:	5499      	strb	r1, [r3, r2]
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = DEFAULT_EIRP_JP;//MAX_EIRP_JP;
    48b2:	39ef      	subs	r1, #239	; 0xef
    48b4:	22c2      	movs	r2, #194	; 0xc2
    48b6:	32ff      	adds	r2, #255	; 0xff
    48b8:	5499      	strb	r1, [r3, r2]
		memcpy (RegParams.pDrParams, DefaultDrParamsJP, sizeof(DefaultDrParamsJP) );
    48ba:	7818      	ldrb	r0, [r3, #0]
    48bc:	785a      	ldrb	r2, [r3, #1]
    48be:	0212      	lsls	r2, r2, #8
    48c0:	4302      	orrs	r2, r0
    48c2:	7898      	ldrb	r0, [r3, #2]
    48c4:	0400      	lsls	r0, r0, #16
    48c6:	4302      	orrs	r2, r0
    48c8:	78d8      	ldrb	r0, [r3, #3]
    48ca:	0600      	lsls	r0, r0, #24
    48cc:	4310      	orrs	r0, r2
    48ce:	2240      	movs	r2, #64	; 0x40
    48d0:	490c      	ldr	r1, [pc, #48]	; (4904 <LORAReg_InitJP+0x240>)
    48d2:	4b08      	ldr	r3, [pc, #32]	; (48f4 <LORAReg_InitJP+0x230>)
    48d4:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    48d6:	2408      	movs	r4, #8
    48d8:	e7a4      	b.n	4824 <LORAReg_InitJP+0x160>
    48da:	46c0      	nop			; (mov r8, r8)
    48dc:	20000fc0 	.word	0x20000fc0
    48e0:	20000fbc 	.word	0x20000fbc
    48e4:	00008391 	.word	0x00008391
    48e8:	00008849 	.word	0x00008849
    48ec:	00008b09 	.word	0x00008b09
    48f0:	00019d34 	.word	0x00019d34
    48f4:	00014ecd 	.word	0x00014ecd
    48f8:	00019d1c 	.word	0x00019d1c
    48fc:	00019d7c 	.word	0x00019d7c
    4900:	00019d78 	.word	0x00019d78
    4904:	00019d38 	.word	0x00019d38

00004908 <LORAReg_InitKR>:
#endif

/****************************** FUNCTIONS *************************************/

StackRetStatus_t LORAReg_InitKR(IsmBand_t ismBand)
{
    4908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    490a:	46de      	mov	lr, fp
    490c:	4657      	mov	r7, sl
    490e:	464e      	mov	r6, r9
    4910:	4645      	mov	r5, r8
    4912:	b5e0      	push	{r5, r6, r7, lr}
	StackRetStatus_t result = LORAWAN_SUCCESS;

#if (KR_BAND == 1)
	
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_KR;
    4914:	4b96      	ldr	r3, [pc, #600]	; (4b70 <LORAReg_InitKR+0x268>)
    4916:	2403      	movs	r4, #3
    4918:	2226      	movs	r2, #38	; 0x26
    491a:	549c      	strb	r4, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_KR;
    491c:	2110      	movs	r1, #16
    491e:	3204      	adds	r2, #4
    4920:	5499      	strb	r1, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_KR;
    4922:	3a29      	subs	r2, #41	; 0x29
    4924:	3119      	adds	r1, #25
    4926:	545a      	strb	r2, [r3, r1]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_KR;
    4928:	3902      	subs	r1, #2
    492a:	545a      	strb	r2, [r3, r1]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    492c:	001a      	movs	r2, r3
    492e:	3283      	adds	r2, #131	; 0x83
    4930:	2100      	movs	r1, #0
    4932:	711a      	strb	r2, [r3, #4]
    4934:	0a15      	lsrs	r5, r2, #8
    4936:	715d      	strb	r5, [r3, #5]
    4938:	0c15      	lsrs	r5, r2, #16
    493a:	719d      	strb	r5, [r3, #6]
    493c:	0e12      	lsrs	r2, r2, #24
    493e:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    4940:	001a      	movs	r2, r3
    4942:	3243      	adds	r2, #67	; 0x43
    4944:	701a      	strb	r2, [r3, #0]
    4946:	0a15      	lsrs	r5, r2, #8
    4948:	705d      	strb	r5, [r3, #1]
    494a:	0c15      	lsrs	r5, r2, #16
    494c:	709d      	strb	r5, [r3, #2]
    494e:	0e12      	lsrs	r2, r2, #24
    4950:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    4952:	001a      	movs	r2, r3
    4954:	32a3      	adds	r2, #163	; 0xa3
    4956:	721a      	strb	r2, [r3, #8]
    4958:	0a15      	lsrs	r5, r2, #8
    495a:	725d      	strb	r5, [r3, #9]
    495c:	0c15      	lsrs	r5, r2, #16
    495e:	729d      	strb	r5, [r3, #10]
    4960:	0e12      	lsrs	r2, r2, #24
    4962:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    4964:	001a      	movs	r2, r3
    4966:	3264      	adds	r2, #100	; 0x64
    4968:	32ff      	adds	r2, #255	; 0xff
    496a:	741a      	strb	r2, [r3, #16]
    496c:	0a15      	lsrs	r5, r2, #8
    496e:	745d      	strb	r5, [r3, #17]
    4970:	0c15      	lsrs	r5, r2, #16
    4972:	749d      	strb	r5, [r3, #18]
    4974:	0e12      	lsrs	r2, r2, #24
    4976:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    4978:	001a      	movs	r2, r3
    497a:	3234      	adds	r2, #52	; 0x34
    497c:	751a      	strb	r2, [r3, #20]
    497e:	0a15      	lsrs	r5, r2, #8
    4980:	755d      	strb	r5, [r3, #21]
    4982:	0c15      	lsrs	r5, r2, #16
    4984:	759d      	strb	r5, [r3, #22]
    4986:	0e12      	lsrs	r2, r2, #24
    4988:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    498a:	001a      	movs	r2, r3
    498c:	323d      	adds	r2, #61	; 0x3d
    498e:	761a      	strb	r2, [r3, #24]
    4990:	0a15      	lsrs	r5, r2, #8
    4992:	765d      	strb	r5, [r3, #25]
    4994:	0c15      	lsrs	r5, r2, #16
    4996:	769d      	strb	r5, [r3, #26]
    4998:	0e12      	lsrs	r2, r2, #24
    499a:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_KR;
    499c:	2222      	movs	r2, #34	; 0x22
    499e:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_KR;
    49a0:	3201      	adds	r2, #1
    49a2:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_KR;	
    49a4:	3a43      	subs	r2, #67	; 0x43
    49a6:	771a      	strb	r2, [r3, #28]
    49a8:	3233      	adds	r2, #51	; 0x33
    49aa:	775a      	strb	r2, [r3, #29]
    49ac:	3a20      	subs	r2, #32
    49ae:	779a      	strb	r2, [r3, #30]
    49b0:	3243      	adds	r2, #67	; 0x43
    49b2:	77da      	strb	r2, [r3, #31]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_KR;
    49b4:	3a15      	subs	r2, #21
    49b6:	549c      	strb	r4, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_KR;
    49b8:	2534      	movs	r5, #52	; 0x34
    49ba:	3a01      	subs	r2, #1
    49bc:	549d      	strb	r5, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_KR;
    49be:	3a1b      	subs	r2, #27
    49c0:	3d10      	subs	r5, #16
    49c2:	555a      	strb	r2, [r3, r5]
	RegParams.maxDataRate = MAC_DATARATE_MAX_KR;
    49c4:	3501      	adds	r5, #1
    49c6:	5559      	strb	r1, [r3, r5]
	RegParams.cmnParams.paramsType2.LBTScanPeriod = LBT_SCAN_PERIOD_KR;
    49c8:	3d1b      	subs	r5, #27
    49ca:	26be      	movs	r6, #190	; 0xbe
    49cc:	36ff      	adds	r6, #255	; 0xff
    49ce:	559d      	strb	r5, [r3, r6]
	RegParams.cmnParams.paramsType2.LBTSignalThreshold = LBT_SIGNAL_THRESHOLD_KR;
    49d0:	27bf      	movs	r7, #191	; 0xbf
    49d2:	3601      	adds	r6, #1
    49d4:	559f      	strb	r7, [r3, r6]
	RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount = LBT_RSSI_SAMPLES_COUNT_KR;
    49d6:	26c0      	movs	r6, #192	; 0xc0
    49d8:	36ff      	adds	r6, #255	; 0xff
    49da:	559d      	strb	r5, [r3, r6]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    49dc:	35b7      	adds	r5, #183	; 0xb7
    49de:	35ff      	adds	r5, #255	; 0xff
    49e0:	555c      	strb	r4, [r3, r5]
	RegParams.Rx1DrOffset = 5;
    49e2:	3429      	adds	r4, #41	; 0x29
    49e4:	551a      	strb	r2, [r3, r4]
	RegParams.maxTxPwrIndx = 7;
    49e6:	3c25      	subs	r4, #37	; 0x25
    49e8:	3228      	adds	r2, #40	; 0x28
    49ea:	549c      	strb	r4, [r3, r2]
	RegParams.maxTxPwr = DEFAULT_EIRP_KR_HF;
    49ec:	3407      	adds	r4, #7
    49ee:	3a05      	subs	r2, #5
    49f0:	549c      	strb	r4, [r3, r2]
	RegParams.cmnParams.paramsType2.LBTTimer.timerId = regTimerId[0];
    49f2:	4a60      	ldr	r2, [pc, #384]	; (4b74 <LORAReg_InitKR+0x26c>)
    49f4:	7815      	ldrb	r5, [r2, #0]
    49f6:	349f      	adds	r4, #159	; 0x9f
    49f8:	34ff      	adds	r4, #255	; 0xff
    49fa:	551d      	strb	r5, [r3, r4]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    49fc:	7855      	ldrb	r5, [r2, #1]
    49fe:	3c70      	subs	r4, #112	; 0x70
    4a00:	3cff      	subs	r4, #255	; 0xff
    4a02:	551d      	strb	r5, [r3, r4]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[2];
    4a04:	7894      	ldrb	r4, [r2, #2]
    4a06:	223c      	movs	r2, #60	; 0x3c
    4a08:	549c      	strb	r4, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    4a0a:	2400      	movs	r4, #0
    4a0c:	3a04      	subs	r2, #4
    4a0e:	549c      	strb	r4, [r3, r2]
    4a10:	3201      	adds	r2, #1
    4a12:	549c      	strb	r4, [r3, r2]
    4a14:	3201      	adds	r2, #1
    4a16:	549c      	strb	r4, [r3, r2]
    4a18:	3201      	adds	r2, #1
    4a1a:	549c      	strb	r4, [r3, r2]
	RegParams.joinbccount =0;
    4a1c:	3207      	adds	r2, #7
    4a1e:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    4a20:	001a      	movs	r2, r3
    4a22:	323e      	adds	r2, #62	; 0x3e
    4a24:	7011      	strb	r1, [r2, #0]
    4a26:	7051      	strb	r1, [r2, #1]
    4a28:	7091      	strb	r1, [r2, #2]
    4a2a:	70d1      	strb	r1, [r2, #3]
		
	RegParams.band = ismBand;
    4a2c:	222e      	movs	r2, #46	; 0x2e
    4a2e:	5498      	strb	r0, [r3, r2]
		
#endif
	}
	else
	{
		result = UNSUPPORTED_BAND;
    4a30:	34c6      	adds	r4, #198	; 0xc6
	if(ismBand == ISM_KR920)
    4a32:	2804      	cmp	r0, #4
    4a34:	d00c      	beq.n	4a50 <LORAReg_InitKR+0x148>
	}
	
    LORAREG_InitGetAttrFnPtrsKR();
    4a36:	4b50      	ldr	r3, [pc, #320]	; (4b78 <LORAReg_InitKR+0x270>)
    4a38:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsKR();
    4a3a:	4b50      	ldr	r3, [pc, #320]	; (4b7c <LORAReg_InitKR+0x274>)
    4a3c:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsKR();
    4a3e:	4b50      	ldr	r3, [pc, #320]	; (4b80 <LORAReg_InitKR+0x278>)
    4a40:	4798      	blx	r3
#else
    result = UNSUPPORTED_BAND;
#endif
	return result;
}
    4a42:	0020      	movs	r0, r4
    4a44:	bc3c      	pop	{r2, r3, r4, r5}
    4a46:	4690      	mov	r8, r2
    4a48:	4699      	mov	r9, r3
    4a4a:	46a2      	mov	sl, r4
    4a4c:	46ab      	mov	fp, r5
    4a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
static void InitDefault920Channels (void)
{
    uint8_t i;
    memset (RegParams.pChParams, 0, sizeof(DefaultChannels920KR) );
	memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels920KR) );
    memcpy (RegParams.pChParams, DefaultChannels920KR, sizeof(DefaultChannels920KR) );
    4a50:	001c      	movs	r4, r3
    4a52:	0018      	movs	r0, r3
    4a54:	3083      	adds	r0, #131	; 0x83
    4a56:	3a28      	subs	r2, #40	; 0x28
    4a58:	494a      	ldr	r1, [pc, #296]	; (4b84 <LORAReg_InitKR+0x27c>)
    4a5a:	4d4b      	ldr	r5, [pc, #300]	; (4b88 <LORAReg_InitKR+0x280>)
    4a5c:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels920KR, sizeof(AdvChannels920KR) );
    4a5e:	0020      	movs	r0, r4
    4a60:	30a3      	adds	r0, #163	; 0xa3
    4a62:	2224      	movs	r2, #36	; 0x24
    4a64:	4949      	ldr	r1, [pc, #292]	; (4b8c <LORAReg_InitKR+0x284>)
    4a66:	47a8      	blx	r5
    4a68:	2103      	movs	r1, #3
    4a6a:	2003      	movs	r0, #3
    for (i = 3; i < RegParams.maxChannels; i++)
    {
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    4a6c:	4b40      	ldr	r3, [pc, #256]	; (4b70 <LORAReg_InitKR+0x268>)
    4a6e:	22ff      	movs	r2, #255	; 0xff
    4a70:	4692      	mov	sl, r2
		RegParams.pChParams[i].status = DISABLED;
    4a72:	2400      	movs	r4, #0
		RegParams.pOtherChParams[i].joinRequestChannel = DISABLED;
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    4a74:	22c2      	movs	r2, #194	; 0xc2
    4a76:	32ff      	adds	r2, #255	; 0xff
    4a78:	4694      	mov	ip, r2
    4a7a:	4657      	mov	r7, sl
    for (i = 3; i < RegParams.maxChannels; i++)
    4a7c:	3a98      	subs	r2, #152	; 0x98
    4a7e:	3aff      	subs	r2, #255	; 0xff
    4a80:	4693      	mov	fp, r2
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    4a82:	0042      	lsls	r2, r0, #1
    4a84:	791e      	ldrb	r6, [r3, #4]
    4a86:	46b0      	mov	r8, r6
    4a88:	795e      	ldrb	r6, [r3, #5]
    4a8a:	0236      	lsls	r6, r6, #8
    4a8c:	46b1      	mov	r9, r6
    4a8e:	4646      	mov	r6, r8
    4a90:	464d      	mov	r5, r9
    4a92:	432e      	orrs	r6, r5
    4a94:	799d      	ldrb	r5, [r3, #6]
    4a96:	042d      	lsls	r5, r5, #16
    4a98:	432e      	orrs	r6, r5
    4a9a:	79dd      	ldrb	r5, [r3, #7]
    4a9c:	062d      	lsls	r5, r5, #24
    4a9e:	432e      	orrs	r6, r5
    4aa0:	46b0      	mov	r8, r6
    4aa2:	4490      	add	r8, r2
    4aa4:	4645      	mov	r5, r8
    4aa6:	4656      	mov	r6, sl
    4aa8:	706e      	strb	r6, [r5, #1]
		RegParams.pChParams[i].status = DISABLED;
    4aaa:	791d      	ldrb	r5, [r3, #4]
    4aac:	46a8      	mov	r8, r5
    4aae:	795d      	ldrb	r5, [r3, #5]
    4ab0:	022d      	lsls	r5, r5, #8
    4ab2:	4646      	mov	r6, r8
    4ab4:	432e      	orrs	r6, r5
    4ab6:	799d      	ldrb	r5, [r3, #6]
    4ab8:	042d      	lsls	r5, r5, #16
    4aba:	432e      	orrs	r6, r5
    4abc:	79dd      	ldrb	r5, [r3, #7]
    4abe:	062d      	lsls	r5, r5, #24
    4ac0:	432e      	orrs	r6, r5
    4ac2:	54b4      	strb	r4, [r6, r2]
		RegParams.pOtherChParams[i].joinRequestChannel = DISABLED;
    4ac4:	7a1d      	ldrb	r5, [r3, #8]
    4ac6:	46a8      	mov	r8, r5
    4ac8:	7a5d      	ldrb	r5, [r3, #9]
    4aca:	022d      	lsls	r5, r5, #8
    4acc:	4646      	mov	r6, r8
    4ace:	432e      	orrs	r6, r5
    4ad0:	7a9d      	ldrb	r5, [r3, #10]
    4ad2:	042d      	lsls	r5, r5, #16
    4ad4:	432e      	orrs	r6, r5
    4ad6:	7add      	ldrb	r5, [r3, #11]
    4ad8:	062d      	lsls	r5, r5, #24
    4ada:	432e      	orrs	r6, r5
    4adc:	46b0      	mov	r8, r6
    4ade:	1812      	adds	r2, r2, r0
    4ae0:	0092      	lsls	r2, r2, #2
    4ae2:	4442      	add	r2, r8
    4ae4:	7254      	strb	r4, [r2, #9]
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    4ae6:	4662      	mov	r2, ip
    4ae8:	549f      	strb	r7, [r3, r2]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    4aea:	000a      	movs	r2, r1
    4aec:	3258      	adds	r2, #88	; 0x58
    4aee:	0092      	lsls	r2, r2, #2
    4af0:	189a      	adds	r2, r3, r2
    4af2:	7214      	strb	r4, [r2, #8]
    4af4:	7254      	strb	r4, [r2, #9]
    4af6:	7294      	strb	r4, [r2, #10]
    4af8:	72d4      	strb	r4, [r2, #11]
    for (i = 3; i < RegParams.maxChannels; i++)
    4afa:	3001      	adds	r0, #1
    4afc:	b2c0      	uxtb	r0, r0
    4afe:	0001      	movs	r1, r0
    4b00:	465a      	mov	r2, fp
    4b02:	569a      	ldrsb	r2, [r3, r2]
    4b04:	4290      	cmp	r0, r2
    4b06:	dbbc      	blt.n	4a82 <LORAReg_InitKR+0x17a>
    }
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    4b08:	4c19      	ldr	r4, [pc, #100]	; (4b70 <LORAReg_InitKR+0x268>)
    4b0a:	22ff      	movs	r2, #255	; 0xff
    4b0c:	232f      	movs	r3, #47	; 0x2f
    4b0e:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsKR, sizeof(DefaultDrParamsKR) );
    4b10:	7820      	ldrb	r0, [r4, #0]
    4b12:	7863      	ldrb	r3, [r4, #1]
    4b14:	021b      	lsls	r3, r3, #8
    4b16:	4303      	orrs	r3, r0
    4b18:	78a0      	ldrb	r0, [r4, #2]
    4b1a:	0400      	lsls	r0, r0, #16
    4b1c:	4303      	orrs	r3, r0
    4b1e:	78e0      	ldrb	r0, [r4, #3]
    4b20:	0600      	lsls	r0, r0, #24
    4b22:	4318      	orrs	r0, r3
    4b24:	3acf      	subs	r2, #207	; 0xcf
    4b26:	491a      	ldr	r1, [pc, #104]	; (4b90 <LORAReg_InitKR+0x288>)
    4b28:	4b17      	ldr	r3, [pc, #92]	; (4b88 <LORAReg_InitKR+0x280>)
    4b2a:	4798      	blx	r3
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    4b2c:	2325      	movs	r3, #37	; 0x25
    4b2e:	5ce3      	ldrb	r3, [r4, r3]
    4b30:	2b00      	cmp	r3, #0
    4b32:	dd1a      	ble.n	4b6a <LORAReg_InitKR+0x262>
			RegParams.pDrParams[dataRate].modulation = MODULATION_LORA;
    4b34:	4a0e      	ldr	r2, [pc, #56]	; (4b70 <LORAReg_InitKR+0x268>)
    4b36:	7811      	ldrb	r1, [r2, #0]
    4b38:	7853      	ldrb	r3, [r2, #1]
    4b3a:	021b      	lsls	r3, r3, #8
    4b3c:	430b      	orrs	r3, r1
    4b3e:	7891      	ldrb	r1, [r2, #2]
    4b40:	0409      	lsls	r1, r1, #16
    4b42:	430b      	orrs	r3, r1
    4b44:	78d1      	ldrb	r1, [r2, #3]
    4b46:	0609      	lsls	r1, r1, #24
    4b48:	4319      	orrs	r1, r3
    4b4a:	2300      	movs	r3, #0
    4b4c:	2601      	movs	r6, #1
			RegParams.pDrParams[dataRate].bandwidth = BW_125KHZ;
    4b4e:	2507      	movs	r5, #7
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    4b50:	0014      	movs	r4, r2
    4b52:	2025      	movs	r0, #37	; 0x25
			RegParams.pDrParams[dataRate].modulation = MODULATION_LORA;
    4b54:	00da      	lsls	r2, r3, #3
    4b56:	188a      	adds	r2, r1, r2
    4b58:	71d6      	strb	r6, [r2, #7]
			RegParams.pDrParams[dataRate].bandwidth = BW_125KHZ;
    4b5a:	7195      	strb	r5, [r2, #6]
    4b5c:	3301      	adds	r3, #1
    4b5e:	b25b      	sxtb	r3, r3
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    4b60:	5c22      	ldrb	r2, [r4, r0]
    4b62:	4293      	cmp	r3, r2
    4b64:	dbf6      	blt.n	4b54 <LORAReg_InitKR+0x24c>
	StackRetStatus_t result = LORAWAN_SUCCESS;
    4b66:	2408      	movs	r4, #8
    4b68:	e765      	b.n	4a36 <LORAReg_InitKR+0x12e>
    4b6a:	2408      	movs	r4, #8
    4b6c:	e763      	b.n	4a36 <LORAReg_InitKR+0x12e>
    4b6e:	46c0      	nop			; (mov r8, r8)
    4b70:	20000fc0 	.word	0x20000fc0
    4b74:	20000fbc 	.word	0x20000fbc
    4b78:	000084ed 	.word	0x000084ed
    4b7c:	000088b5 	.word	0x000088b5
    4b80:	00008b89 	.word	0x00008b89
    4b84:	00019db8 	.word	0x00019db8
    4b88:	00014ecd 	.word	0x00014ecd
    4b8c:	00019d94 	.word	0x00019d94
    4b90:	00019dc0 	.word	0x00019dc0

00004b94 <LORAReg_InitNA>:
#endif

/****************************** FUNCTIONS *************************************/

StackRetStatus_t LORAReg_InitNA(IsmBand_t ismBand)
{
    4b94:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b96:	46de      	mov	lr, fp
    4b98:	4657      	mov	r7, sl
    4b9a:	464e      	mov	r6, r9
    4b9c:	4645      	mov	r5, r8
    4b9e:	b5e0      	push	{r5, r6, r7, lr}
    4ba0:	b083      	sub	sp, #12
    4ba2:	9001      	str	r0, [sp, #4]
	StackRetStatus_t result = LORAWAN_SUCCESS;
#if(NA_BAND == 1)
    RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_NA;
    4ba4:	4c6a      	ldr	r4, [pc, #424]	; (4d50 <LORAReg_InitNA+0x1bc>)
    4ba6:	2326      	movs	r3, #38	; 0x26
    4ba8:	2203      	movs	r2, #3
    4baa:	54e2      	strb	r2, [r4, r3]
	RegParams.maxChannels = MAX_CHANNELS_T1;
    4bac:	2248      	movs	r2, #72	; 0x48
    4bae:	3304      	adds	r3, #4
    4bb0:	54e2      	strb	r2, [r4, r3]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_NA;
    4bb2:	3a43      	subs	r2, #67	; 0x43
    4bb4:	3b03      	subs	r3, #3
    4bb6:	54e2      	strb	r2, [r4, r3]
	RegParams.maxTxPwr = DEFAULT_EIRP_NA;
    4bb8:	3219      	adds	r2, #25
    4bba:	3301      	adds	r3, #1
    4bbc:	54e2      	strb	r2, [r4, r3]
	RegParams.pChParams = &RegParams.cmnParams.paramsType1.chParams[0];
    4bbe:	0023      	movs	r3, r4
    4bc0:	33b3      	adds	r3, #179	; 0xb3
    4bc2:	2600      	movs	r6, #0
    4bc4:	7123      	strb	r3, [r4, #4]
    4bc6:	0a1a      	lsrs	r2, r3, #8
    4bc8:	7162      	strb	r2, [r4, #5]
    4bca:	0c1a      	lsrs	r2, r3, #16
    4bcc:	71a2      	strb	r2, [r4, #6]
    4bce:	0e1a      	lsrs	r2, r3, #24
    4bd0:	71e2      	strb	r2, [r4, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType1.DRParams[0];
    4bd2:	0025      	movs	r5, r4
    4bd4:	3543      	adds	r5, #67	; 0x43
    4bd6:	7025      	strb	r5, [r4, #0]
    4bd8:	0a2a      	lsrs	r2, r5, #8
    4bda:	7062      	strb	r2, [r4, #1]
    4bdc:	0c2a      	lsrs	r2, r5, #16
    4bde:	70a2      	strb	r2, [r4, #2]
    4be0:	0e2a      	lsrs	r2, r5, #24
    4be2:	70e2      	strb	r2, [r4, #3]
	RegParams.MinNewChIndex = 0xFF;
    4be4:	2221      	movs	r2, #33	; 0x21
    4be6:	20ff      	movs	r0, #255	; 0xff
    4be8:	54a0      	strb	r0, [r4, r2]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_NA;
    4bea:	38dd      	subs	r0, #221	; 0xdd
    4bec:	3a17      	subs	r2, #23
    4bee:	5422      	strb	r2, [r4, r0]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_NA;
    4bf0:	2708      	movs	r7, #8
    4bf2:	2008      	movs	r0, #8
    4bf4:	4684      	mov	ip, r0
    4bf6:	2023      	movs	r0, #35	; 0x23
    4bf8:	5427      	strb	r7, [r4, r0]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_NA;
    4bfa:	3883      	subs	r0, #131	; 0x83
    4bfc:	4680      	mov	r8, r0
    4bfe:	7720      	strb	r0, [r4, #28]
    4c00:	2070      	movs	r0, #112	; 0x70
    4c02:	7760      	strb	r0, [r4, #29]
    4c04:	4660      	mov	r0, ip
    4c06:	77a0      	strb	r0, [r4, #30]
    4c08:	2037      	movs	r0, #55	; 0x37
    4c0a:	77e0      	strb	r0, [r4, #31]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_NA;
    4c0c:	3001      	adds	r0, #1
    4c0e:	2220      	movs	r2, #32
    4c10:	54a0      	strb	r0, [r4, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_NA;
    4c12:	3a1c      	subs	r2, #28
    4c14:	4691      	mov	r9, r2
    4c16:	3220      	adds	r2, #32
    4c18:	4649      	mov	r1, r9
    4c1a:	54a1      	strb	r1, [r4, r2]
	RegParams.maxDataRate = MAC_DATARATE_MAX_NA;
    4c1c:	3201      	adds	r2, #1
    4c1e:	2103      	movs	r1, #3
    4c20:	54a1      	strb	r1, [r4, r2]
	RegParams.cmnParams.paramsType1.Max_125khzChan = MAX_CHANNELS_BANDWIDTH_125_AU_NA;
    4c22:	321b      	adds	r2, #27
    4c24:	4692      	mov	sl, r2
    4c26:	2254      	movs	r2, #84	; 0x54
    4c28:	32ff      	adds	r2, #255	; 0xff
    4c2a:	4651      	mov	r1, sl
    4c2c:	54a1      	strb	r1, [r4, r2]
	RegParams.cmnParams.paramsType1.Max_500khzChan = MAX_CHANNELS_BANDWIDTH_500_AU_NA;
    4c2e:	3201      	adds	r2, #1
    4c30:	54a7      	strb	r7, [r4, r2]
	RegParams.cmnParams.paramsType1.minTxDR = DR0;
    4c32:	2250      	movs	r2, #80	; 0x50
    4c34:	32ff      	adds	r2, #255	; 0xff
    4c36:	54a6      	strb	r6, [r4, r2]
	RegParams.cmnParams.paramsType1.maxTxDR = DR4;
    4c38:	3201      	adds	r2, #1
    4c3a:	4649      	mov	r1, r9
    4c3c:	54a1      	strb	r1, [r4, r2]
	RegParams.cmnParams.paramsType1.minRxDR = DR8;
    4c3e:	2252      	movs	r2, #82	; 0x52
    4c40:	32ff      	adds	r2, #255	; 0xff
    4c42:	54a7      	strb	r7, [r4, r2]
	RegParams.cmnParams.paramsType1.maxRxDR = DR13;
    4c44:	3a45      	subs	r2, #69	; 0x45
    4c46:	3aff      	subs	r2, #255	; 0xff
    4c48:	374b      	adds	r7, #75	; 0x4b
    4c4a:	37ff      	adds	r7, #255	; 0xff
    4c4c:	55e2      	strb	r2, [r4, r7]
	RegParams.cmnParams.paramsType1.RxParamWindowOffset1 = 10;
    4c4e:	2756      	movs	r7, #86	; 0x56
    4c50:	37ff      	adds	r7, #255	; 0xff
    4c52:	220a      	movs	r2, #10
    4c54:	55e2      	strb	r2, [r4, r7]
	RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    4c56:	0027      	movs	r7, r4
    4c58:	3734      	adds	r7, #52	; 0x34
    4c5a:	7527      	strb	r7, [r4, #20]
    4c5c:	0a3a      	lsrs	r2, r7, #8
    4c5e:	7562      	strb	r2, [r4, #21]
    4c60:	0c3a      	lsrs	r2, r7, #16
    4c62:	75a2      	strb	r2, [r4, #22]
    4c64:	0e3f      	lsrs	r7, r7, #24
    4c66:	75e7      	strb	r7, [r4, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    4c68:	0027      	movs	r7, r4
    4c6a:	373d      	adds	r7, #61	; 0x3d
    4c6c:	7627      	strb	r7, [r4, #24]
    4c6e:	0a3a      	lsrs	r2, r7, #8
    4c70:	7662      	strb	r2, [r4, #25]
    4c72:	0c3a      	lsrs	r2, r7, #16
    4c74:	76a2      	strb	r2, [r4, #26]
    4c76:	0e3f      	lsrs	r7, r7, #24
    4c78:	76e7      	strb	r7, [r4, #27]
	RegParams.cmnParams.paramsType1.UpStreamCh0Freq = UPSTREAM_CH0_NA;
    4c7a:	2260      	movs	r2, #96	; 0x60
    4c7c:	2744      	movs	r7, #68	; 0x44
    4c7e:	37ff      	adds	r7, #255	; 0xff
    4c80:	55e2      	strb	r2, [r4, r7]
    4c82:	0027      	movs	r7, r4
    4c84:	3744      	adds	r7, #68	; 0x44
    4c86:	37ff      	adds	r7, #255	; 0xff
    4c88:	2201      	movs	r2, #1
    4c8a:	707a      	strb	r2, [r7, #1]
    4c8c:	2238      	movs	r2, #56	; 0x38
    4c8e:	4252      	negs	r2, r2
    4c90:	70ba      	strb	r2, [r7, #2]
    4c92:	2235      	movs	r2, #53	; 0x35
    4c94:	70fa      	strb	r2, [r7, #3]
	RegParams.cmnParams.paramsType1.UpStreamCh64Freq = UPSTREAM_CH64_NA;
    4c96:	2240      	movs	r2, #64	; 0x40
    4c98:	4252      	negs	r2, r2
    4c9a:	2748      	movs	r7, #72	; 0x48
    4c9c:	37ff      	adds	r7, #255	; 0xff
    4c9e:	55e2      	strb	r2, [r4, r7]
    4ca0:	0027      	movs	r7, r4
    4ca2:	3748      	adds	r7, #72	; 0x48
    4ca4:	37ff      	adds	r7, #255	; 0xff
    4ca6:	2251      	movs	r2, #81	; 0x51
    4ca8:	4252      	negs	r2, r2
    4caa:	707a      	strb	r2, [r7, #1]
    4cac:	222e      	movs	r2, #46	; 0x2e
    4cae:	4252      	negs	r2, r2
    4cb0:	70ba      	strb	r2, [r7, #2]
    4cb2:	2235      	movs	r2, #53	; 0x35
    4cb4:	70fa      	strb	r2, [r7, #3]
	RegParams.cmnParams.paramsType1.DownStreamCh0Freq = DOWNSTREAM_CH0_NA;
    4cb6:	274c      	movs	r7, #76	; 0x4c
    4cb8:	37ff      	adds	r7, #255	; 0xff
    4cba:	4642      	mov	r2, r8
    4cbc:	55e2      	strb	r2, [r4, r7]
    4cbe:	0027      	movs	r7, r4
    4cc0:	374c      	adds	r7, #76	; 0x4c
    4cc2:	37ff      	adds	r7, #255	; 0xff
    4cc4:	2270      	movs	r2, #112	; 0x70
    4cc6:	707a      	strb	r2, [r7, #1]
    4cc8:	4662      	mov	r2, ip
    4cca:	70ba      	strb	r2, [r7, #2]
    4ccc:	2237      	movs	r2, #55	; 0x37
    4cce:	70fa      	strb	r2, [r7, #3]
	RegParams.Rx1DrOffset = 3;
    4cd0:	272c      	movs	r7, #44	; 0x2c
    4cd2:	2203      	movs	r2, #3
    4cd4:	55e2      	strb	r2, [r4, r7]
	RegParams.maxTxPwrIndx = 10;
    4cd6:	212d      	movs	r1, #45	; 0x2d
    4cd8:	220a      	movs	r2, #10
    4cda:	5462      	strb	r2, [r4, r1]
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    4cdc:	2258      	movs	r2, #88	; 0x58
    4cde:	32ff      	adds	r2, #255	; 0xff
    4ce0:	54a6      	strb	r6, [r4, r2]

	RegParams.pJoinBackoffTimer->timerId = regTimerId[0];
    4ce2:	4a1c      	ldr	r2, [pc, #112]	; (4d54 <LORAReg_InitNA+0x1c0>)
    4ce4:	7817      	ldrb	r7, [r2, #0]
    4ce6:	3110      	adds	r1, #16
    4ce8:	5467      	strb	r7, [r4, r1]
	RegParams.pJoinDutyCycleTimer->timerId = regTimerId[1];
    4cea:	7851      	ldrb	r1, [r2, #1]
    4cec:	223c      	movs	r2, #60	; 0x3c
    4cee:	54a1      	strb	r1, [r4, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    4cf0:	2200      	movs	r2, #0
    4cf2:	5422      	strb	r2, [r4, r0]
    4cf4:	2100      	movs	r1, #0
    4cf6:	3239      	adds	r2, #57	; 0x39
    4cf8:	54a1      	strb	r1, [r4, r2]
    4cfa:	3201      	adds	r2, #1
    4cfc:	54a1      	strb	r1, [r4, r2]
    4cfe:	3201      	adds	r2, #1
    4d00:	54a1      	strb	r1, [r4, r2]
	RegParams.joinbccount =0;
    4d02:	3207      	adds	r2, #7
    4d04:	54a6      	strb	r6, [r4, r2]
	RegParams.joinDutyCycleTimeout =0;
    4d06:	0022      	movs	r2, r4
    4d08:	323e      	adds	r2, #62	; 0x3e
    4d0a:	7011      	strb	r1, [r2, #0]
    4d0c:	7051      	strb	r1, [r2, #1]
    4d0e:	7091      	strb	r1, [r2, #2]
    4d10:	70d1      	strb	r1, [r2, #3]
	RegParams.band = ismBand;
    4d12:	222e      	movs	r2, #46	; 0x2e
    4d14:	4669      	mov	r1, sp
    4d16:	7909      	ldrb	r1, [r1, #4]
    4d18:	54a1      	strb	r1, [r4, r2]
 */
#if(NA_BAND == 1)
static void InitDefault915Channels (void)
{
	memset (RegParams.pChParams, 0, sizeof(DefaultChannels915) );
	memcpy (RegParams.pChParams, DefaultChannels915, sizeof(DefaultChannels915) );
    4d1a:	3262      	adds	r2, #98	; 0x62
    4d1c:	490e      	ldr	r1, [pc, #56]	; (4d58 <LORAReg_InitNA+0x1c4>)
    4d1e:	0018      	movs	r0, r3
    4d20:	4f0e      	ldr	r7, [pc, #56]	; (4d5c <LORAReg_InitNA+0x1c8>)
    4d22:	47b8      	blx	r7
	memcpy (RegParams.pDrParams, DefaultDrParamsNA, sizeof(DefaultDrParamsNA) );
    4d24:	2270      	movs	r2, #112	; 0x70
    4d26:	490e      	ldr	r1, [pc, #56]	; (4d60 <LORAReg_InitNA+0x1cc>)
    4d28:	0028      	movs	r0, r5
    4d2a:	47b8      	blx	r7
	RegParams.cmnParams.paramsType1.alternativeChannel = 0;
    4d2c:	23ab      	movs	r3, #171	; 0xab
    4d2e:	005b      	lsls	r3, r3, #1
    4d30:	54e6      	strb	r6, [r4, r3]
    LORAREG_InitGetAttrFnPtrsNA();
    4d32:	4b0c      	ldr	r3, [pc, #48]	; (4d64 <LORAReg_InitNA+0x1d0>)
    4d34:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsNA();
    4d36:	4b0c      	ldr	r3, [pc, #48]	; (4d68 <LORAReg_InitNA+0x1d4>)
    4d38:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsNA();
    4d3a:	4b0c      	ldr	r3, [pc, #48]	; (4d6c <LORAReg_InitNA+0x1d8>)
    4d3c:	4798      	blx	r3
}
    4d3e:	2008      	movs	r0, #8
    4d40:	b003      	add	sp, #12
    4d42:	bc3c      	pop	{r2, r3, r4, r5}
    4d44:	4690      	mov	r8, r2
    4d46:	4699      	mov	r9, r3
    4d48:	46a2      	mov	sl, r4
    4d4a:	46ab      	mov	fp, r5
    4d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d4e:	46c0      	nop			; (mov r8, r8)
    4d50:	20000fc0 	.word	0x20000fc0
    4d54:	20000fbc 	.word	0x20000fbc
    4d58:	00019df0 	.word	0x00019df0
    4d5c:	00014ecd 	.word	0x00014ecd
    4d60:	00019e80 	.word	0x00019e80
    4d64:	00007d55 	.word	0x00007d55
    4d68:	00008635 	.word	0x00008635
    4d6c:	0000891d 	.word	0x0000891d

00004d70 <InValidGetAttr>:
/****************************** FUNCTIONS *************************************/

StackRetStatus_t InValidGetAttr(LorawanRegionalAttributes_t attr, void * attrInput, void * attrOutput)
{
	return LORAWAN_INVALID_REQUEST;
}
    4d70:	2015      	movs	r0, #21
    4d72:	4770      	bx	lr

00004d74 <InValidAttr>:

StackRetStatus_t InValidAttr(LorawanRegionalAttributes_t attr, void * attrInput)
{
	return LORAWAN_INVALID_REQUEST;
}
    4d74:	2015      	movs	r0, #21
    4d76:	4770      	bx	lr

00004d78 <LORAREG_GetAttr_MaxChannel>:
#endif


static StackRetStatus_t LORAREG_GetAttr_MaxChannel(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.maxChannels;
    4d78:	232a      	movs	r3, #42	; 0x2a
    4d7a:	4902      	ldr	r1, [pc, #8]	; (4d84 <LORAREG_GetAttr_MaxChannel+0xc>)
    4d7c:	5ccb      	ldrb	r3, [r1, r3]
    4d7e:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    4d80:	2008      	movs	r0, #8
    4d82:	4770      	bx	lr
    4d84:	20000fc0 	.word	0x20000fc0

00004d88 <LORAREG_GetAttr_MinNewChIndex>:


static StackRetStatus_t LORAREG_GetAttr_MinNewChIndex(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	*(uint8_t *)attrOutput = (uint8_t)RegParams.MinNewChIndex;
    4d88:	4905      	ldr	r1, [pc, #20]	; (4da0 <LORAREG_GetAttr_MinNewChIndex+0x18>)
    4d8a:	2321      	movs	r3, #33	; 0x21
    4d8c:	5cc8      	ldrb	r0, [r1, r3]
    4d8e:	7010      	strb	r0, [r2, #0]
	if(RegParams.MinNewChIndex == 0xFF)
    4d90:	5ccb      	ldrb	r3, [r1, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    4d92:	2008      	movs	r0, #8
	if(RegParams.MinNewChIndex == 0xFF)
    4d94:	2bff      	cmp	r3, #255	; 0xff
    4d96:	d000      	beq.n	4d9a <LORAREG_GetAttr_MinNewChIndex+0x12>
	{
		result = LORAWAN_INVALID_PARAMETER;
	}
	
	return result;
}
    4d98:	4770      	bx	lr
		result = LORAWAN_INVALID_PARAMETER;
    4d9a:	3002      	adds	r0, #2
    4d9c:	e7fc      	b.n	4d98 <LORAREG_GetAttr_MinNewChIndex+0x10>
    4d9e:	46c0      	nop			; (mov r8, r8)
    4da0:	20000fc0 	.word	0x20000fc0

00004da4 <LORAREG_GetAttr_DefRx1DataRate>:
}
#endif

static StackRetStatus_t LORAREG_GetAttr_DefRx1DataRate(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.DefRx1DataRate;
    4da4:	2322      	movs	r3, #34	; 0x22
    4da6:	4902      	ldr	r1, [pc, #8]	; (4db0 <LORAREG_GetAttr_DefRx1DataRate+0xc>)
    4da8:	5ccb      	ldrb	r3, [r1, r3]
    4daa:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    4dac:	2008      	movs	r0, #8
    4dae:	4770      	bx	lr
    4db0:	20000fc0 	.word	0x20000fc0

00004db4 <LORAREG_GetAttr_DefRx2DataRate>:

static StackRetStatus_t LORAREG_GetAttr_DefRx2DataRate(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.DefRx2DataRate;
    4db4:	2323      	movs	r3, #35	; 0x23
    4db6:	4902      	ldr	r1, [pc, #8]	; (4dc0 <LORAREG_GetAttr_DefRx2DataRate+0xc>)
    4db8:	5ccb      	ldrb	r3, [r1, r3]
    4dba:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    4dbc:	2008      	movs	r0, #8
    4dbe:	4770      	bx	lr
    4dc0:	20000fc0 	.word	0x20000fc0

00004dc4 <LORAREG_GetAttr_RegFeatures>:
	return LORAWAN_SUCCESS;
}

static StackRetStatus_t LORAREG_GetAttr_RegFeatures(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint32_t *)attrOutput = RegParams.FeaturesSupport;
    4dc4:	2320      	movs	r3, #32
    4dc6:	4902      	ldr	r1, [pc, #8]	; (4dd0 <LORAREG_GetAttr_RegFeatures+0xc>)
    4dc8:	5ccb      	ldrb	r3, [r1, r3]
    4dca:	6013      	str	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    4dcc:	2008      	movs	r0, #8
    4dce:	4770      	bx	lr
    4dd0:	20000fc0 	.word	0x20000fc0

00004dd4 <LORAREG_GetAttr_DataRange>:

static StackRetStatus_t LORAREG_GetAttr_DataRange(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    4dd4:	b530      	push	{r4, r5, lr}
    4dd6:	b083      	sub	sp, #12
    4dd8:	0015      	movs	r5, r2
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint8_t  channelId;
	ValChId_t valChid;
	valChid.channelIndex = *(uint8_t *)attrInput;
    4dda:	780c      	ldrb	r4, [r1, #0]
    4ddc:	a901      	add	r1, sp, #4
    4dde:	700c      	strb	r4, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    4de0:	2301      	movs	r3, #1
    4de2:	704b      	strb	r3, [r1, #1]
	channelId = *(uint8_t *)attrInput;
	if (pValidateAttr[CHANNEL_ID](CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    4de4:	4b0d      	ldr	r3, [pc, #52]	; (4e1c <LORAREG_GetAttr_DataRange+0x48>)
    4de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    4de8:	2015      	movs	r0, #21
    4dea:	4798      	blx	r3
    4dec:	2808      	cmp	r0, #8
    4dee:	d004      	beq.n	4dfa <LORAREG_GetAttr_DataRange+0x26>
	{
	    *(uint8_t *)attrOutput = RegParams.pChParams[channelId].dataRange.value;
	}
	else
	{
		*(uint8_t *)attrOutput = 0xFF;
    4df0:	23ff      	movs	r3, #255	; 0xff
    4df2:	702b      	strb	r3, [r5, #0]
	    result = LORAWAN_INVALID_PARAMETER;
    4df4:	200a      	movs	r0, #10
	}
	return result;
}
    4df6:	b003      	add	sp, #12
    4df8:	bd30      	pop	{r4, r5, pc}
	    *(uint8_t *)attrOutput = RegParams.pChParams[channelId].dataRange.value;
    4dfa:	4909      	ldr	r1, [pc, #36]	; (4e20 <LORAREG_GetAttr_DataRange+0x4c>)
    4dfc:	790b      	ldrb	r3, [r1, #4]
    4dfe:	794a      	ldrb	r2, [r1, #5]
    4e00:	0212      	lsls	r2, r2, #8
    4e02:	4313      	orrs	r3, r2
    4e04:	798a      	ldrb	r2, [r1, #6]
    4e06:	0412      	lsls	r2, r2, #16
    4e08:	431a      	orrs	r2, r3
    4e0a:	79cb      	ldrb	r3, [r1, #7]
    4e0c:	061b      	lsls	r3, r3, #24
    4e0e:	431a      	orrs	r2, r3
    4e10:	0063      	lsls	r3, r4, #1
    4e12:	189b      	adds	r3, r3, r2
    4e14:	785b      	ldrb	r3, [r3, #1]
    4e16:	702b      	strb	r3, [r5, #0]
    4e18:	e7ed      	b.n	4df6 <LORAREG_GetAttr_DataRange+0x22>
    4e1a:	46c0      	nop			; (mov r8, r8)
    4e1c:	20000d30 	.word	0x20000d30
    4e20:	20000fc0 	.word	0x20000fc0

00004e24 <LORAREG_GetAttr_ChIdStatus>:
}
#endif


static StackRetStatus_t LORAREG_GetAttr_ChIdStatus(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    4e24:	b530      	push	{r4, r5, lr}
    4e26:	b083      	sub	sp, #12
    4e28:	0015      	movs	r5, r2
	StackRetStatus_t result = LORAWAN_SUCCESS;
	ValChId_t val_chid;
	uint8_t  channelId;
	channelId = *(uint8_t *)attrInput;
    4e2a:	780c      	ldrb	r4, [r1, #0]
	val_chid.channelIndex = *(uint8_t *)attrInput;
    4e2c:	a901      	add	r1, sp, #4
    4e2e:	700c      	strb	r4, [r1, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    4e30:	2301      	movs	r3, #1
    4e32:	704b      	strb	r3, [r1, #1]
	
	if (pValidateAttr[CHANNEL_ID](CHANNEL_ID, &val_chid) == LORAWAN_SUCCESS)
    4e34:	4b0c      	ldr	r3, [pc, #48]	; (4e68 <LORAREG_GetAttr_ChIdStatus+0x44>)
    4e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    4e38:	2015      	movs	r0, #21
    4e3a:	4798      	blx	r3
    4e3c:	2808      	cmp	r0, #8
    4e3e:	d004      	beq.n	4e4a <LORAREG_GetAttr_ChIdStatus+0x26>
	{
		*(uint8_t *)attrOutput = RegParams.pChParams[channelId].status;
	}
	else
	{
		*(uint8_t *)attrOutput = DISABLED;
    4e40:	2300      	movs	r3, #0
    4e42:	702b      	strb	r3, [r5, #0]
		result = LORAWAN_INVALID_PARAMETER;
    4e44:	200a      	movs	r0, #10
	}
	return result;
}
    4e46:	b003      	add	sp, #12
    4e48:	bd30      	pop	{r4, r5, pc}
		*(uint8_t *)attrOutput = RegParams.pChParams[channelId].status;
    4e4a:	4908      	ldr	r1, [pc, #32]	; (4e6c <LORAREG_GetAttr_ChIdStatus+0x48>)
    4e4c:	790a      	ldrb	r2, [r1, #4]
    4e4e:	794b      	ldrb	r3, [r1, #5]
    4e50:	021b      	lsls	r3, r3, #8
    4e52:	4313      	orrs	r3, r2
    4e54:	798a      	ldrb	r2, [r1, #6]
    4e56:	0412      	lsls	r2, r2, #16
    4e58:	4313      	orrs	r3, r2
    4e5a:	79ca      	ldrb	r2, [r1, #7]
    4e5c:	0612      	lsls	r2, r2, #24
    4e5e:	431a      	orrs	r2, r3
    4e60:	0064      	lsls	r4, r4, #1
    4e62:	5ca3      	ldrb	r3, [r4, r2]
    4e64:	702b      	strb	r3, [r5, #0]
    4e66:	e7ee      	b.n	4e46 <LORAREG_GetAttr_ChIdStatus+0x22>
    4e68:	20000d30 	.word	0x20000d30
    4e6c:	20000fc0 	.word	0x20000fc0

00004e70 <LORAREG_GetAttr_DutyCycleT1>:

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_DutyCycleT1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = UINT16_MAX;
    4e70:	2301      	movs	r3, #1
    4e72:	425b      	negs	r3, r3
    4e74:	8013      	strh	r3, [r2, #0]
	return LORAWAN_INVALID_PARAMETER;
}
    4e76:	200a      	movs	r0, #10
    4e78:	4770      	bx	lr

00004e7a <LORAREG_GetAttr_MinDutyCycleTimer>:
#endif

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_MinDutyCycleTimer(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint32_t *)attrOutput = UINT32_MAX;
    4e7a:	2301      	movs	r3, #1
    4e7c:	425b      	negs	r3, r3
    4e7e:	6013      	str	r3, [r2, #0]
	return LORAWAN_INVALID_PARAMETER;
}
    4e80:	200a      	movs	r0, #10
    4e82:	4770      	bx	lr

00004e84 <LORAREG_GetAttr_MacRecvDelay1>:
#endif

static StackRetStatus_t LORAREG_GetAttr_MacRecvDelay1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = RECEIVE_DELAY1;
    4e84:	23fa      	movs	r3, #250	; 0xfa
    4e86:	009b      	lsls	r3, r3, #2
    4e88:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    4e8a:	2008      	movs	r0, #8
    4e8c:	4770      	bx	lr

00004e8e <LORAREG_GetAttr_MacRecvDelay2>:

static StackRetStatus_t LORAREG_GetAttr_MacRecvDelay2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = RECEIVE_DELAY2;
    4e8e:	23fa      	movs	r3, #250	; 0xfa
    4e90:	00db      	lsls	r3, r3, #3
    4e92:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    4e94:	2008      	movs	r0, #8
    4e96:	4770      	bx	lr

00004e98 <LORAREG_GetAttr_MacJoinAcptDelay1>:

static StackRetStatus_t LORAREG_GetAttr_MacJoinAcptDelay1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = JOIN_ACCEPT_DELAY1;
    4e98:	4b01      	ldr	r3, [pc, #4]	; (4ea0 <LORAREG_GetAttr_MacJoinAcptDelay1+0x8>)
    4e9a:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    4e9c:	2008      	movs	r0, #8
    4e9e:	4770      	bx	lr
    4ea0:	00001388 	.word	0x00001388

00004ea4 <LORAREG_GetAttr_MacJoinAcptDelay2>:

static StackRetStatus_t LORAREG_GetAttr_MacJoinAcptDelay2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = JOIN_ACCEPT_DELAY2;
    4ea4:	4b01      	ldr	r3, [pc, #4]	; (4eac <LORAREG_GetAttr_MacJoinAcptDelay2+0x8>)
    4ea6:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    4ea8:	2008      	movs	r0, #8
    4eaa:	4770      	bx	lr
    4eac:	00001770 	.word	0x00001770

00004eb0 <LORAREG_GetAttr_MacAckTimeout>:

static StackRetStatus_t LORAREG_GetAttr_MacAckTimeout(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = ACK_TIMEOUT;
    4eb0:	23fa      	movs	r3, #250	; 0xfa
    4eb2:	00db      	lsls	r3, r3, #3
    4eb4:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    4eb6:	2008      	movs	r0, #8
    4eb8:	4770      	bx	lr

00004eba <LORAREG_GetAttr_MacAdrAckDelay>:

static StackRetStatus_t LORAREG_GetAttr_MacAdrAckDelay(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = ADR_ACK_DELAY;
    4eba:	2320      	movs	r3, #32
    4ebc:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    4ebe:	2008      	movs	r0, #8
    4ec0:	4770      	bx	lr

00004ec2 <LORAREG_GetAttr_MacAdrAckLimit>:

static StackRetStatus_t LORAREG_GetAttr_MacAdrAckLimit(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = ADR_ACK_LIMIT;
    4ec2:	2340      	movs	r3, #64	; 0x40
    4ec4:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    4ec6:	2008      	movs	r0, #8
    4ec8:	4770      	bx	lr

00004eca <LORAREG_GetAttr_MacMaxFcntGap>:

static StackRetStatus_t LORAREG_GetAttr_MacMaxFcntGap(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = MAX_FCNT_GAP;
    4eca:	2380      	movs	r3, #128	; 0x80
    4ecc:	01db      	lsls	r3, r3, #7
    4ece:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    4ed0:	2008      	movs	r0, #8
    4ed2:	4770      	bx	lr

00004ed4 <LORAREG_GetAttr_RegDefTxPwr>:

static StackRetStatus_t LORAREG_GetAttr_RegDefTxPwr(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.MacTxPower;
    4ed4:	2327      	movs	r3, #39	; 0x27
    4ed6:	4902      	ldr	r1, [pc, #8]	; (4ee0 <LORAREG_GetAttr_RegDefTxPwr+0xc>)
    4ed8:	5ccb      	ldrb	r3, [r1, r3]
    4eda:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    4edc:	2008      	movs	r0, #8
    4ede:	4770      	bx	lr
    4ee0:	20000fc0 	.word	0x20000fc0

00004ee4 <LORAREG_GetAttr_RegDefTxDR>:

static StackRetStatus_t LORAREG_GetAttr_RegDefTxDR(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.TxCurDataRate;
    4ee4:	2326      	movs	r3, #38	; 0x26
    4ee6:	4902      	ldr	r1, [pc, #8]	; (4ef0 <LORAREG_GetAttr_RegDefTxDR+0xc>)
    4ee8:	5ccb      	ldrb	r3, [r1, r3]
    4eea:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    4eec:	2008      	movs	r0, #8
    4eee:	4770      	bx	lr
    4ef0:	20000fc0 	.word	0x20000fc0

00004ef4 <LORAREG_GetAttr_CurChIndx>:

static StackRetStatus_t LORAREG_GetAttr_CurChIndx(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.lastUsedChannelIndex;
    4ef4:	232f      	movs	r3, #47	; 0x2f
    4ef6:	4902      	ldr	r1, [pc, #8]	; (4f00 <LORAREG_GetAttr_CurChIndx+0xc>)
    4ef8:	5ccb      	ldrb	r3, [r1, r3]
    4efa:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    4efc:	2008      	movs	r0, #8
    4efe:	4770      	bx	lr
    4f00:	20000fc0 	.word	0x20000fc0

00004f04 <LORAREG_GetAttr_DefLBTParams>:
static StackRetStatus_t LORAREG_GetAttr_DefLBTParams(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	LorawanLBTParams_t* lorawanLBTParams;
	lorawanLBTParams = (LorawanLBTParams_t *)attrOutput;
			
	lorawanLBTParams->lbtNumOfSamples	= RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount;
    4f04:	4b09      	ldr	r3, [pc, #36]	; (4f2c <LORAREG_GetAttr_DefLBTParams+0x28>)
    4f06:	21c0      	movs	r1, #192	; 0xc0
    4f08:	31ff      	adds	r1, #255	; 0xff
    4f0a:	5c59      	ldrb	r1, [r3, r1]
    4f0c:	7191      	strb	r1, [r2, #6]
	lorawanLBTParams->lbtScanPeriod		= RegParams.cmnParams.paramsType2.LBTScanPeriod;
    4f0e:	21be      	movs	r1, #190	; 0xbe
    4f10:	31ff      	adds	r1, #255	; 0xff
    4f12:	5c59      	ldrb	r1, [r3, r1]
    4f14:	8011      	strh	r1, [r2, #0]
	lorawanLBTParams->lbtThreshold		= RegParams.cmnParams.paramsType2.LBTSignalThreshold;
    4f16:	21df      	movs	r1, #223	; 0xdf
    4f18:	0049      	lsls	r1, r1, #1
    4f1a:	565b      	ldrsb	r3, [r3, r1]
    4f1c:	8053      	strh	r3, [r2, #2]
	lorawanLBTParams->lbtTransmitOn		= LBT_ENABLE;
    4f1e:	2301      	movs	r3, #1
    4f20:	71d3      	strb	r3, [r2, #7]
	lorawanLBTParams->maxRetryChannels	= LBT_MAX_RETRY_CHANNELS;
    4f22:	3304      	adds	r3, #4
    4f24:	8093      	strh	r3, [r2, #4]
	return 0;
}
    4f26:	2000      	movs	r0, #0
    4f28:	4770      	bx	lr
    4f2a:	46c0      	nop			; (mov r8, r8)
    4f2c:	20000fc0 	.word	0x20000fc0

00004f30 <LORAREG_GetAttr_FreqT1>:
{
    4f30:	b530      	push	{r4, r5, lr}
	channelId = *(uint8_t *)attrInput;
    4f32:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels)
    4f34:	212a      	movs	r1, #42	; 0x2a
    4f36:	4820      	ldr	r0, [pc, #128]	; (4fb8 <LORAREG_GetAttr_FreqT1+0x88>)
    4f38:	5641      	ldrsb	r1, [r0, r1]
		return LORAWAN_INVALID_PARAMETER;
    4f3a:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels)
    4f3c:	428b      	cmp	r3, r1
    4f3e:	dc39      	bgt.n	4fb4 <LORAREG_GetAttr_FreqT1+0x84>
	if (channelId < RegParams.cmnParams.paramsType1.Max_125khzChan)
    4f40:	2054      	movs	r0, #84	; 0x54
    4f42:	30ff      	adds	r0, #255	; 0xff
    4f44:	4c1c      	ldr	r4, [pc, #112]	; (4fb8 <LORAREG_GetAttr_FreqT1+0x88>)
    4f46:	5c24      	ldrb	r4, [r4, r0]
    4f48:	42a3      	cmp	r3, r4
    4f4a:	d31c      	bcc.n	4f86 <LORAREG_GetAttr_FreqT1+0x56>
		result = LORAWAN_INVALID_PARAMETER;
    4f4c:	200a      	movs	r0, #10
	else if ( (channelId < RegParams.maxChannels) && (channelId >= RegParams.cmnParams.paramsType1.Max_125khzChan) )
    4f4e:	428b      	cmp	r3, r1
    4f50:	da30      	bge.n	4fb4 <LORAREG_GetAttr_FreqT1+0x84>
static uint32_t GenerateFrequency2 (uint8_t channelIndex)
{
    uint32_t channelFrequency;

    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    4f52:	1b1b      	subs	r3, r3, r4
    4f54:	4919      	ldr	r1, [pc, #100]	; (4fbc <LORAREG_GetAttr_FreqT1+0x8c>)
    4f56:	434b      	muls	r3, r1
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    4f58:	4c17      	ldr	r4, [pc, #92]	; (4fb8 <LORAREG_GetAttr_FreqT1+0x88>)
    4f5a:	2148      	movs	r1, #72	; 0x48
    4f5c:	31ff      	adds	r1, #255	; 0xff
    4f5e:	5c61      	ldrb	r1, [r4, r1]
    4f60:	303f      	adds	r0, #63	; 0x3f
    4f62:	30ff      	adds	r0, #255	; 0xff
    4f64:	5c20      	ldrb	r0, [r4, r0]
    4f66:	0200      	lsls	r0, r0, #8
    4f68:	4301      	orrs	r1, r0
    4f6a:	204a      	movs	r0, #74	; 0x4a
    4f6c:	30ff      	adds	r0, #255	; 0xff
    4f6e:	5c20      	ldrb	r0, [r4, r0]
    4f70:	0400      	lsls	r0, r0, #16
    4f72:	4308      	orrs	r0, r1
    4f74:	21a5      	movs	r1, #165	; 0xa5
    4f76:	0049      	lsls	r1, r1, #1
    4f78:	5c61      	ldrb	r1, [r4, r1]
    4f7a:	0609      	lsls	r1, r1, #24
    4f7c:	4301      	orrs	r1, r0
    4f7e:	1859      	adds	r1, r3, r1
		*(uint32_t *)attrOutput = GenerateFrequency2 (channelId);
    4f80:	6011      	str	r1, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    4f82:	2008      	movs	r0, #8
		*(uint32_t *)attrOutput = GenerateFrequency2 (channelId);
    4f84:	e016      	b.n	4fb4 <LORAREG_GetAttr_FreqT1+0x84>
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    4f86:	4c0c      	ldr	r4, [pc, #48]	; (4fb8 <LORAREG_GetAttr_FreqT1+0x88>)
    4f88:	2144      	movs	r1, #68	; 0x44
    4f8a:	31ff      	adds	r1, #255	; 0xff
    4f8c:	5c61      	ldrb	r1, [r4, r1]
    4f8e:	380f      	subs	r0, #15
    4f90:	5c20      	ldrb	r0, [r4, r0]
    4f92:	0200      	lsls	r0, r0, #8
    4f94:	4308      	orrs	r0, r1
    4f96:	2146      	movs	r1, #70	; 0x46
    4f98:	31ff      	adds	r1, #255	; 0xff
    4f9a:	5c61      	ldrb	r1, [r4, r1]
    4f9c:	0409      	lsls	r1, r1, #16
    4f9e:	4308      	orrs	r0, r1
    4fa0:	21a3      	movs	r1, #163	; 0xa3
    4fa2:	0049      	lsls	r1, r1, #1
    4fa4:	5c61      	ldrb	r1, [r4, r1]
    4fa6:	0609      	lsls	r1, r1, #24
    4fa8:	4301      	orrs	r1, r0
    4faa:	4805      	ldr	r0, [pc, #20]	; (4fc0 <LORAREG_GetAttr_FreqT1+0x90>)
    4fac:	4343      	muls	r3, r0
    4fae:	18cb      	adds	r3, r1, r3
		*(uint32_t *)attrOutput = GenerateFrequency1 (channelId);
    4fb0:	6013      	str	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    4fb2:	2008      	movs	r0, #8
}
    4fb4:	bd30      	pop	{r4, r5, pc}
    4fb6:	46c0      	nop			; (mov r8, r8)
    4fb8:	20000fc0 	.word	0x20000fc0
    4fbc:	00186a00 	.word	0x00186a00
    4fc0:	00030d40 	.word	0x00030d40

00004fc4 <ValidateDataRateTxT1>:
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;

	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    4fc4:	780a      	ldrb	r2, [r1, #0]
    4fc6:	23a8      	movs	r3, #168	; 0xa8
    4fc8:	005b      	lsls	r3, r3, #1
    4fca:	4903      	ldr	r1, [pc, #12]	; (4fd8 <ValidateDataRateTxT1+0x14>)
    4fcc:	5ccb      	ldrb	r3, [r1, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    4fce:	2008      	movs	r0, #8
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    4fd0:	429a      	cmp	r2, r3
    4fd2:	d900      	bls.n	4fd6 <ValidateDataRateTxT1+0x12>
	{
		result = LORAWAN_INVALID_PARAMETER;
    4fd4:	3002      	adds	r0, #2
	}
	
	return result;
}
    4fd6:	4770      	bx	lr
    4fd8:	20000fc0 	.word	0x20000fc0

00004fdc <ValidateDataRateTxT2>:
#if (AS_BAND == 1 || JPN_BAND == 1)
static StackRetStatus_t ValidateDataRateTxT2(LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    4fdc:	780b      	ldrb	r3, [r1, #0]
	
	if(dataRate > RegParams.minDataRate ||
    4fde:	2224      	movs	r2, #36	; 0x24
    4fe0:	4908      	ldr	r1, [pc, #32]	; (5004 <ValidateDataRateTxT2+0x28>)
    4fe2:	5c8a      	ldrb	r2, [r1, r2]
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
	{
		result = LORAWAN_INVALID_PARAMETER;
    4fe4:	200a      	movs	r0, #10
	if(dataRate > RegParams.minDataRate ||
    4fe6:	429a      	cmp	r2, r3
    4fe8:	d30a      	bcc.n	5000 <ValidateDataRateTxT2+0x24>
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    4fea:	22e1      	movs	r2, #225	; 0xe1
    4fec:	0052      	lsls	r2, r2, #1
    4fee:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    4ff0:	3802      	subs	r0, #2
	if(dataRate > RegParams.minDataRate ||
    4ff2:	07d2      	lsls	r2, r2, #31
    4ff4:	d504      	bpl.n	5000 <ValidateDataRateTxT2+0x24>
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    4ff6:	2222      	movs	r2, #34	; 0x22
    4ff8:	5c8a      	ldrb	r2, [r1, r2]
    4ffa:	429a      	cmp	r2, r3
    4ffc:	d900      	bls.n	5000 <ValidateDataRateTxT2+0x24>
		result = LORAWAN_INVALID_PARAMETER;
    4ffe:	3002      	adds	r0, #2
	}
	
	return result;
}
    5000:	4770      	bx	lr
    5002:	46c0      	nop			; (mov r8, r8)
    5004:	20000fc0 	.word	0x20000fc0

00005008 <ValidateDataRateRxT1>:
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateDataRateRxT1 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    5008:	780b      	ldrb	r3, [r1, #0]

	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    500a:	22a9      	movs	r2, #169	; 0xa9
    500c:	0052      	lsls	r2, r2, #1
    500e:	4906      	ldr	r1, [pc, #24]	; (5028 <ValidateDataRateRxT1+0x20>)
    5010:	5c8a      	ldrb	r2, [r1, r2]
	{
		result = LORAWAN_INVALID_PARAMETER;
    5012:	200a      	movs	r0, #10
	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    5014:	429a      	cmp	r2, r3
    5016:	d306      	bcc.n	5026 <ValidateDataRateRxT1+0x1e>
    5018:	2252      	movs	r2, #82	; 0x52
    501a:	32ff      	adds	r2, #255	; 0xff
    501c:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    501e:	3802      	subs	r0, #2
	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    5020:	429a      	cmp	r2, r3
    5022:	d900      	bls.n	5026 <ValidateDataRateRxT1+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    5024:	3002      	adds	r0, #2
	}
	return result;
}
    5026:	4770      	bx	lr
    5028:	20000fc0 	.word	0x20000fc0

0000502c <ValidateDataRateRxT2>:
#if (AS_BAND == 1 || JPN_BAND == 1)
static StackRetStatus_t ValidateDataRateRxT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    502c:	780b      	ldrb	r3, [r1, #0]

    if(dataRate > RegParams.minDataRate || (
    502e:	2224      	movs	r2, #36	; 0x24
    5030:	4908      	ldr	r1, [pc, #32]	; (5054 <ValidateDataRateRxT2+0x28>)
    5032:	5c8a      	ldrb	r2, [r1, r2]
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
	{
		result = LORAWAN_INVALID_PARAMETER;
    5034:	200a      	movs	r0, #10
    if(dataRate > RegParams.minDataRate || (
    5036:	429a      	cmp	r2, r3
    5038:	d30a      	bcc.n	5050 <ValidateDataRateRxT2+0x24>
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    503a:	22e1      	movs	r2, #225	; 0xe1
    503c:	0052      	lsls	r2, r2, #1
    503e:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5040:	3802      	subs	r0, #2
    if(dataRate > RegParams.minDataRate || (
    5042:	0792      	lsls	r2, r2, #30
    5044:	d504      	bpl.n	5050 <ValidateDataRateRxT2+0x24>
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    5046:	2222      	movs	r2, #34	; 0x22
    5048:	5c8a      	ldrb	r2, [r1, r2]
    504a:	429a      	cmp	r2, r3
    504c:	d900      	bls.n	5050 <ValidateDataRateRxT2+0x24>
		result = LORAWAN_INVALID_PARAMETER;
    504e:	3002      	adds	r0, #2
	}

	return result;
}
    5050:	4770      	bx	lr
    5052:	46c0      	nop			; (mov r8, r8)
    5054:	20000fc0 	.word	0x20000fc0

00005058 <ValidateChannelId>:
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
    uint8_t channelId = *(uint8_t *)attrInput;
	
    if (channelId >= RegParams.maxChannels)
    5058:	780a      	ldrb	r2, [r1, #0]
    505a:	232a      	movs	r3, #42	; 0x2a
    505c:	4903      	ldr	r1, [pc, #12]	; (506c <ValidateChannelId+0x14>)
    505e:	56cb      	ldrsb	r3, [r1, r3]
    StackRetStatus_t result = LORAWAN_SUCCESS;
    5060:	2008      	movs	r0, #8
    if (channelId >= RegParams.maxChannels)
    5062:	429a      	cmp	r2, r3
    5064:	db00      	blt.n	5068 <ValidateChannelId+0x10>
    {
        result = LORAWAN_INVALID_PARAMETER ;
    5066:	3002      	adds	r0, #2
    }
	
    return result;
}
    5068:	4770      	bx	lr
    506a:	46c0      	nop			; (mov r8, r8)
    506c:	20000fc0 	.word	0x20000fc0

00005070 <ValidateChannelIdT2>:
static StackRetStatus_t ValidateChannelIdT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
	ValChId_t val_chid;
	
	memcpy(&val_chid,attrInput,sizeof(ValChId_t));
    5070:	780b      	ldrb	r3, [r1, #0]
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    5072:	222a      	movs	r2, #42	; 0x2a
    5074:	4808      	ldr	r0, [pc, #32]	; (5098 <ValidateChannelIdT2+0x28>)
    5076:	5682      	ldrsb	r2, [r0, r2]
	 val_chid.channelIndex < RegParams.cmnParams.paramsType2.minNonDefChId))
	 {
		 retVal = LORAWAN_INVALID_PARAMETER;
    5078:	200a      	movs	r0, #10
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    507a:	4293      	cmp	r3, r2
    507c:	da0a      	bge.n	5094 <ValidateChannelIdT2+0x24>
    507e:	784a      	ldrb	r2, [r1, #1]
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    5080:	3802      	subs	r0, #2
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    5082:	2a00      	cmp	r2, #0
    5084:	d106      	bne.n	5094 <ValidateChannelIdT2+0x24>
	 val_chid.channelIndex < RegParams.cmnParams.paramsType2.minNonDefChId))
    5086:	32c1      	adds	r2, #193	; 0xc1
    5088:	32ff      	adds	r2, #255	; 0xff
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    508a:	4903      	ldr	r1, [pc, #12]	; (5098 <ValidateChannelIdT2+0x28>)
    508c:	5c8a      	ldrb	r2, [r1, r2]
    508e:	429a      	cmp	r2, r3
    5090:	d900      	bls.n	5094 <ValidateChannelIdT2+0x24>
		 retVal = LORAWAN_INVALID_PARAMETER;
    5092:	3002      	adds	r0, #2
	 }
	 return retVal;
}
    5094:	4770      	bx	lr
    5096:	46c0      	nop			; (mov r8, r8)
    5098:	20000fc0 	.word	0x20000fc0

0000509c <LORAREG_GetAttr_DutyCycleT2>:
{
    509c:	b530      	push	{r4, r5, lr}
    509e:	b083      	sub	sp, #12
    50a0:	0014      	movs	r4, r2
	valChid.channelIndex = *(uint8_t *)attrInput;
    50a2:	780d      	ldrb	r5, [r1, #0]
    50a4:	a901      	add	r1, sp, #4
    50a6:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    50a8:	2301      	movs	r3, #1
    50aa:	704b      	strb	r3, [r1, #1]
    if (ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    50ac:	2015      	movs	r0, #21
    50ae:	4b0b      	ldr	r3, [pc, #44]	; (50dc <LORAREG_GetAttr_DutyCycleT2+0x40>)
    50b0:	4798      	blx	r3
    50b2:	2808      	cmp	r0, #8
    50b4:	d002      	beq.n	50bc <LORAREG_GetAttr_DutyCycleT2+0x20>
	    result = LORAWAN_INVALID_PARAMETER;
    50b6:	200a      	movs	r0, #10
}
    50b8:	b003      	add	sp, #12
    50ba:	bd30      	pop	{r4, r5, pc}
	    *(uint16_t *)attrOutput = RegParams.cmnParams.paramsType2.subBandDutyCycle[subBandId];
    50bc:	4a08      	ldr	r2, [pc, #32]	; (50e0 <LORAREG_GetAttr_DutyCycleT2+0x44>)
	    subBandId = RegParams.cmnParams.paramsType2.othChParams[channelId].subBandId;
    50be:	006b      	lsls	r3, r5, #1
    50c0:	195b      	adds	r3, r3, r5
    50c2:	009b      	lsls	r3, r3, #2
    50c4:	18d3      	adds	r3, r2, r3
    50c6:	33ab      	adds	r3, #171	; 0xab
	    *(uint16_t *)attrOutput = RegParams.cmnParams.paramsType2.subBandDutyCycle[subBandId];
    50c8:	781b      	ldrb	r3, [r3, #0]
    50ca:	33d4      	adds	r3, #212	; 0xd4
    50cc:	005b      	lsls	r3, r3, #1
    50ce:	18d2      	adds	r2, r2, r3
    50d0:	7951      	ldrb	r1, [r2, #5]
    50d2:	7993      	ldrb	r3, [r2, #6]
    50d4:	021b      	lsls	r3, r3, #8
    50d6:	430b      	orrs	r3, r1
    50d8:	8023      	strh	r3, [r4, #0]
    50da:	e7ed      	b.n	50b8 <LORAREG_GetAttr_DutyCycleT2+0x1c>
    50dc:	00005071 	.word	0x00005071
    50e0:	20000fc0 	.word	0x20000fc0

000050e4 <LORAREG_GetAttr_MinMaxDr>:
{
    50e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    50e6:	4694      	mov	ip, r2
{
	uint8_t i;
	
	// after updating the data range of a channel we need to check if the minimum dataRange has changed or not.
	// The user cannot set the current data rate outside the range of the data range
	uint8_t minDataRate = RegParams.minDataRate;
    50e8:	4b1b      	ldr	r3, [pc, #108]	; (5158 <LORAREG_GetAttr_MinMaxDr+0x74>)
    50ea:	2124      	movs	r1, #36	; 0x24
    50ec:	5c5c      	ldrb	r4, [r3, r1]
	uint8_t maxDataRate = RegParams.maxDataRate;
    50ee:	3101      	adds	r1, #1
    50f0:	5c5f      	ldrb	r7, [r3, r1]

	for (i = 0; i < RegParams.maxChannels; i++)
    50f2:	3105      	adds	r1, #5
    50f4:	565e      	ldrsb	r6, [r3, r1]
    50f6:	2e00      	cmp	r6, #0
    50f8:	dd28      	ble.n	514c <LORAREG_GetAttr_MinMaxDr+0x68>
	{
		if ( (RegParams.pChParams[i].dataRange.min < minDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    50fa:	0019      	movs	r1, r3
    50fc:	791d      	ldrb	r5, [r3, #4]
    50fe:	795b      	ldrb	r3, [r3, #5]
    5100:	021b      	lsls	r3, r3, #8
    5102:	432b      	orrs	r3, r5
    5104:	798d      	ldrb	r5, [r1, #6]
    5106:	042d      	lsls	r5, r5, #16
    5108:	432b      	orrs	r3, r5
    510a:	79cd      	ldrb	r5, [r1, #7]
    510c:	062d      	lsls	r5, r5, #24
    510e:	431d      	orrs	r5, r3
    5110:	2100      	movs	r1, #0
    5112:	e00b      	b.n	512c <LORAREG_GetAttr_MinMaxDr+0x48>
		{
			minDataRate = RegParams.pChParams[i].dataRange.min;
		}
		if ( (RegParams.pChParams[i].dataRange.max > maxDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    5114:	7843      	ldrb	r3, [r0, #1]
    5116:	091b      	lsrs	r3, r3, #4
    5118:	42bb      	cmp	r3, r7
    511a:	dd03      	ble.n	5124 <LORAREG_GetAttr_MinMaxDr+0x40>
    511c:	7800      	ldrb	r0, [r0, #0]
    511e:	2800      	cmp	r0, #0
    5120:	d000      	beq.n	5124 <LORAREG_GetAttr_MinMaxDr+0x40>
		{
			maxDataRate = RegParams.pChParams[i].dataRange.max;
    5122:	001f      	movs	r7, r3
	for (i = 0; i < RegParams.maxChannels; i++)
    5124:	3101      	adds	r1, #1
    5126:	b2c9      	uxtb	r1, r1
    5128:	42b1      	cmp	r1, r6
    512a:	da0f      	bge.n	514c <LORAREG_GetAttr_MinMaxDr+0x68>
		if ( (RegParams.pChParams[i].dataRange.min < minDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    512c:	0048      	lsls	r0, r1, #1
    512e:	1828      	adds	r0, r5, r0
    5130:	7843      	ldrb	r3, [r0, #1]
    5132:	071b      	lsls	r3, r3, #28
    5134:	0f1b      	lsrs	r3, r3, #28
    5136:	42a3      	cmp	r3, r4
    5138:	daec      	bge.n	5114 <LORAREG_GetAttr_MinMaxDr+0x30>
    513a:	7802      	ldrb	r2, [r0, #0]
    513c:	2a00      	cmp	r2, #0
    513e:	d0f1      	beq.n	5124 <LORAREG_GetAttr_MinMaxDr+0x40>
			minDataRate = RegParams.pChParams[i].dataRange.min;
    5140:	001c      	movs	r4, r3
		if ( (RegParams.pChParams[i].dataRange.max > maxDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    5142:	7843      	ldrb	r3, [r0, #1]
    5144:	091b      	lsrs	r3, r3, #4
    5146:	42bb      	cmp	r3, r7
    5148:	dceb      	bgt.n	5122 <LORAREG_GetAttr_MinMaxDr+0x3e>
    514a:	e7eb      	b.n	5124 <LORAREG_GetAttr_MinMaxDr+0x40>
	memcpy(attrOutput,&minmaxDr,sizeof(MinMaxDr_t));
    514c:	4663      	mov	r3, ip
    514e:	701c      	strb	r4, [r3, #0]
    5150:	705f      	strb	r7, [r3, #1]
}
    5152:	2008      	movs	r0, #8
    5154:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5156:	46c0      	nop			; (mov r8, r8)
    5158:	20000fc0 	.word	0x20000fc0

0000515c <ValidateChannelMaskCntl>:
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateChannelMaskCntl (LorawanRegionalAttributes_t attr, void *attrInput)
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t channelMaskCntl = *(uint8_t *)attrInput;
    515c:	780b      	ldrb	r3, [r1, #0]

    // 5 is RFU for channel mask for US
    if ((channelMaskCntl == 5) || (channelMaskCntl > 7))
    515e:	2b05      	cmp	r3, #5
    5160:	d004      	beq.n	516c <ValidateChannelMaskCntl+0x10>
    StackRetStatus_t result = LORAWAN_SUCCESS;
    5162:	2008      	movs	r0, #8
    if ((channelMaskCntl == 5) || (channelMaskCntl > 7))
    5164:	2b07      	cmp	r3, #7
    5166:	d900      	bls.n	516a <ValidateChannelMaskCntl+0xe>
    {
        result = LORAWAN_INVALID_PARAMETER;
    5168:	3002      	adds	r0, #2
    }

    return result;
}
    516a:	4770      	bx	lr
        result = LORAWAN_INVALID_PARAMETER;
    516c:	200a      	movs	r0, #10
    516e:	e7fc      	b.n	516a <ValidateChannelMaskCntl+0xe>

00005170 <ValidateTxPower>:
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint8_t txPowerNew = *(uint8_t *)attrInput;
	
	//if ((txPowerNew < 5) || (txPowerNew > 10) || (txPowerNew == 6))
	if (txPowerNew > RegParams.maxTxPwrIndx)
    5170:	780a      	ldrb	r2, [r1, #0]
    5172:	232d      	movs	r3, #45	; 0x2d
    5174:	4903      	ldr	r1, [pc, #12]	; (5184 <ValidateTxPower+0x14>)
    5176:	56cb      	ldrsb	r3, [r1, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5178:	2008      	movs	r0, #8
	if (txPowerNew > RegParams.maxTxPwrIndx)
    517a:	429a      	cmp	r2, r3
    517c:	dd00      	ble.n	5180 <ValidateTxPower+0x10>
	{
		result = LORAWAN_INVALID_PARAMETER;
    517e:	3002      	adds	r0, #2
	}

	return result;
}
    5180:	4770      	bx	lr
    5182:	46c0      	nop			; (mov r8, r8)
    5184:	20000fc0 	.word	0x20000fc0

00005188 <ValidateChannelMask>:
 */
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateChannelMask (LorawanRegionalAttributes_t attr, void *attrInput)
{
	return LORAWAN_SUCCESS;	
}
    5188:	2008      	movs	r0, #8
    518a:	4770      	bx	lr

0000518c <ValidateChannelMaskT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t ValidateChannelMaskT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
    518c:	b530      	push	{r4, r5, lr}
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
	
	uint16_t channelMask = * (uint16_t *)attrInput;
    518e:	8809      	ldrh	r1, [r1, #0]
	
	if(channelMask != 0x0000U)
    5190:	2900      	cmp	r1, #0
    5192:	d020      	beq.n	51d6 <ValidateChannelMaskT2+0x4a>
	{
		for(uint8_t i = 0; i< RegParams.maxChannels;i++)
    5194:	232a      	movs	r3, #42	; 0x2a
    5196:	4a11      	ldr	r2, [pc, #68]	; (51dc <ValidateChannelMaskT2+0x50>)
    5198:	56d0      	ldrsb	r0, [r2, r3]
    519a:	2800      	cmp	r0, #0
    519c:	dd1b      	ble.n	51d6 <ValidateChannelMaskT2+0x4a>
		{
			if(((channelMask && BIT0) == BIT0) && ((RegParams.pOtherChParams[i].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) != (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)))
    519e:	7a14      	ldrb	r4, [r2, #8]
    51a0:	7a53      	ldrb	r3, [r2, #9]
    51a2:	021b      	lsls	r3, r3, #8
    51a4:	4323      	orrs	r3, r4
    51a6:	7a94      	ldrb	r4, [r2, #10]
    51a8:	0424      	lsls	r4, r4, #16
    51aa:	4323      	orrs	r3, r4
    51ac:	7ad4      	ldrb	r4, [r2, #11]
    51ae:	0624      	lsls	r4, r4, #24
    51b0:	431c      	orrs	r4, r3
    51b2:	2300      	movs	r3, #0
    51b4:	2503      	movs	r5, #3
    51b6:	e004      	b.n	51c2 <ValidateChannelMaskT2+0x36>
				retVal = LORAWAN_INVALID_PARAMETER;
				break;
			}
			else
			{
				channelMask = channelMask >> SHIFT1;
    51b8:	0849      	lsrs	r1, r1, #1
		for(uint8_t i = 0; i< RegParams.maxChannels;i++)
    51ba:	3301      	adds	r3, #1
    51bc:	b2db      	uxtb	r3, r3
    51be:	4283      	cmp	r3, r0
    51c0:	da09      	bge.n	51d6 <ValidateChannelMaskT2+0x4a>
			if(((channelMask && BIT0) == BIT0) && ((RegParams.pOtherChParams[i].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) != (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)))
    51c2:	2900      	cmp	r1, #0
    51c4:	d0f8      	beq.n	51b8 <ValidateChannelMaskT2+0x2c>
    51c6:	005a      	lsls	r2, r3, #1
    51c8:	18d2      	adds	r2, r2, r3
    51ca:	0092      	lsls	r2, r2, #2
    51cc:	18a2      	adds	r2, r4, r2
    51ce:	7ad2      	ldrb	r2, [r2, #11]
    51d0:	402a      	ands	r2, r5
    51d2:	2a03      	cmp	r2, #3
    51d4:	d0f0      	beq.n	51b8 <ValidateChannelMaskT2+0x2c>
		////ChMask can be set to 0 if ChMaskCtrl is set to 6
		return retVal = LORAWAN_SUCCESS;
	}
	
	return retVal;
}
    51d6:	2008      	movs	r0, #8
    51d8:	bd30      	pop	{r4, r5, pc}
    51da:	46c0      	nop			; (mov r8, r8)
    51dc:	20000fc0 	.word	0x20000fc0

000051e0 <ValidateChannelMaskCntlT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t ValidateChannelMaskCntlT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	uint8_t channelMaskCntl = * (uint16_t *)attrInput;
    51e0:	780b      	ldrb	r3, [r1, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    51e2:	2008      	movs	r0, #8
	
    if ( (channelMaskCntl != 0) && (channelMaskCntl != 6) )
    51e4:	2b00      	cmp	r3, #0
    51e6:	d002      	beq.n	51ee <ValidateChannelMaskCntlT2+0xe>
    51e8:	2b06      	cmp	r3, #6
    51ea:	d001      	beq.n	51f0 <ValidateChannelMaskCntlT2+0x10>
    {
	    result = LORAWAN_INVALID_PARAMETER;
    51ec:	3002      	adds	r0, #2
    }
	return result;
}
    51ee:	4770      	bx	lr
	StackRetStatus_t result = LORAWAN_SUCCESS;
    51f0:	2008      	movs	r0, #8
    51f2:	e7fc      	b.n	51ee <ValidateChannelMaskCntlT2+0xe>

000051f4 <ValidateChMaskChCntlT2>:
{
    51f4:	b510      	push	{r4, lr}
    51f6:	b082      	sub	sp, #8
	ValChMaskCntl_t chMaskchCntl = * (ValChMaskCntl_t *)attrInput;
    51f8:	ac01      	add	r4, sp, #4
    51fa:	2204      	movs	r2, #4
    51fc:	0020      	movs	r0, r4
    51fe:	4b0f      	ldr	r3, [pc, #60]	; (523c <ValidateChMaskChCntlT2+0x48>)
    5200:	4798      	blx	r3
    if ( chMaskchCntl.chnlMask || chMaskchCntl.chnlMaskCntl )
    5202:	8863      	ldrh	r3, [r4, #2]
    5204:	2b00      	cmp	r3, #0
    5206:	d104      	bne.n	5212 <ValidateChMaskChCntlT2+0x1e>
    5208:	ab01      	add	r3, sp, #4
    520a:	781a      	ldrb	r2, [r3, #0]
		return LORAWAN_INVALID_PARAMETER;
    520c:	230a      	movs	r3, #10
    if ( chMaskchCntl.chnlMask || chMaskchCntl.chnlMaskCntl )
    520e:	2a00      	cmp	r2, #0
    5210:	d007      	beq.n	5222 <ValidateChMaskChCntlT2+0x2e>
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    5212:	466b      	mov	r3, sp
    5214:	1d99      	adds	r1, r3, #6
    5216:	201a      	movs	r0, #26
    5218:	4b09      	ldr	r3, [pc, #36]	; (5240 <ValidateChMaskChCntlT2+0x4c>)
    521a:	4798      	blx	r3
			return LORAWAN_INVALID_PARAMETER;
    521c:	230a      	movs	r3, #10
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    521e:	2808      	cmp	r0, #8
    5220:	d002      	beq.n	5228 <ValidateChMaskChCntlT2+0x34>
}
    5222:	0018      	movs	r0, r3
    5224:	b002      	add	sp, #8
    5226:	bd10      	pop	{r4, pc}
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    5228:	a901      	add	r1, sp, #4
    522a:	3013      	adds	r0, #19
    522c:	4b05      	ldr	r3, [pc, #20]	; (5244 <ValidateChMaskChCntlT2+0x50>)
    522e:	4798      	blx	r3
    5230:	0003      	movs	r3, r0
    5232:	2808      	cmp	r0, #8
    5234:	d0f5      	beq.n	5222 <ValidateChMaskChCntlT2+0x2e>
			return LORAWAN_INVALID_PARAMETER;
    5236:	230a      	movs	r3, #10
    5238:	e7f3      	b.n	5222 <ValidateChMaskChCntlT2+0x2e>
    523a:	46c0      	nop			; (mov r8, r8)
    523c:	00014ecd 	.word	0x00014ecd
    5240:	0000518d 	.word	0x0000518d
    5244:	000051e1 	.word	0x000051e1

00005248 <ValidateDataRate>:
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;

    if ( dataRate > RegParams.minDataRate )
    5248:	780a      	ldrb	r2, [r1, #0]
    524a:	2324      	movs	r3, #36	; 0x24
    524c:	4903      	ldr	r1, [pc, #12]	; (525c <ValidateDataRate+0x14>)
    524e:	5ccb      	ldrb	r3, [r1, r3]
    StackRetStatus_t result = LORAWAN_SUCCESS;
    5250:	2008      	movs	r0, #8
    if ( dataRate > RegParams.minDataRate )
    5252:	429a      	cmp	r2, r3
    5254:	d900      	bls.n	5258 <ValidateDataRate+0x10>
    {
        result = LORAWAN_INVALID_PARAMETER;
    5256:	3002      	adds	r0, #2
    }

    return result;
}
    5258:	4770      	bx	lr
    525a:	46c0      	nop			; (mov r8, r8)
    525c:	20000fc0 	.word	0x20000fc0

00005260 <ValidateSupportedDr>:
#endif

static StackRetStatus_t ValidateSupportedDr (LorawanRegionalAttributes_t attr, void *attrInput)
{
    5260:	b570      	push	{r4, r5, r6, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
	uint8_t  dataRate;
	dataRate = *(uint8_t *)attrInput;
    5262:	780d      	ldrb	r5, [r1, #0]
	
	for(uint8_t i = 0; i <RegParams.maxChannels; i++)
    5264:	232a      	movs	r3, #42	; 0x2a
    5266:	4a14      	ldr	r2, [pc, #80]	; (52b8 <ValidateSupportedDr+0x58>)
    5268:	56d4      	ldrsb	r4, [r2, r3]
    526a:	2c00      	cmp	r4, #0
    526c:	dd22      	ble.n	52b4 <ValidateSupportedDr+0x54>
	{
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    526e:	7910      	ldrb	r0, [r2, #4]
    5270:	7953      	ldrb	r3, [r2, #5]
    5272:	021b      	lsls	r3, r3, #8
    5274:	4303      	orrs	r3, r0
    5276:	7990      	ldrb	r0, [r2, #6]
    5278:	0400      	lsls	r0, r0, #16
    527a:	4303      	orrs	r3, r0
    527c:	79d0      	ldrb	r0, [r2, #7]
    527e:	0600      	lsls	r0, r0, #24
    5280:	4318      	orrs	r0, r3
    5282:	2300      	movs	r3, #0
    5284:	002e      	movs	r6, r5
    5286:	e003      	b.n	5290 <ValidateSupportedDr+0x30>
	for(uint8_t i = 0; i <RegParams.maxChannels; i++)
    5288:	3301      	adds	r3, #1
    528a:	b2db      	uxtb	r3, r3
    528c:	42a3      	cmp	r3, r4
    528e:	da0f      	bge.n	52b0 <ValidateSupportedDr+0x50>
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    5290:	005a      	lsls	r2, r3, #1
    5292:	1882      	adds	r2, r0, r2
    5294:	7811      	ldrb	r1, [r2, #0]
    5296:	2900      	cmp	r1, #0
    5298:	d0f6      	beq.n	5288 <ValidateSupportedDr+0x28>
    529a:	7851      	ldrb	r1, [r2, #1]
    529c:	0709      	lsls	r1, r1, #28
    529e:	0f09      	lsrs	r1, r1, #28
    52a0:	428d      	cmp	r5, r1
    52a2:	dbf1      	blt.n	5288 <ValidateSupportedDr+0x28>
		   dataRate <= RegParams.pChParams[i].dataRange.max)
    52a4:	7852      	ldrb	r2, [r2, #1]
    52a6:	0912      	lsrs	r2, r2, #4
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    52a8:	4296      	cmp	r6, r2
    52aa:	dced      	bgt.n	5288 <ValidateSupportedDr+0x28>
		{
			result = LORAWAN_SUCCESS;
    52ac:	2008      	movs	r0, #8
    52ae:	e000      	b.n	52b2 <ValidateSupportedDr+0x52>
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    52b0:	200a      	movs	r0, #10
			break;
		}
	}
	return result;	
}
    52b2:	bd70      	pop	{r4, r5, r6, pc}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    52b4:	200a      	movs	r0, #10
    52b6:	e7fc      	b.n	52b2 <ValidateSupportedDr+0x52>
    52b8:	20000fc0 	.word	0x20000fc0

000052bc <ValidateRxFreqT1>:

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateRxFreqT1 (LorawanRegionalAttributes_t attr, void *attrInput)
{
    52bc:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint32_t FreqNew = *(uint32_t *)attrInput;
	
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    52be:	6808      	ldr	r0, [r1, #0]
    52c0:	4b07      	ldr	r3, [pc, #28]	; (52e0 <ValidateRxFreqT1+0x24>)
    52c2:	469c      	mov	ip, r3
    52c4:	4460      	add	r0, ip
    52c6:	4a07      	ldr	r2, [pc, #28]	; (52e4 <ValidateRxFreqT1+0x28>)
	{
		result = LORAWAN_INVALID_PARAMETER;
    52c8:	230a      	movs	r3, #10
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    52ca:	4290      	cmp	r0, r2
    52cc:	d806      	bhi.n	52dc <ValidateRxFreqT1+0x20>
    52ce:	4906      	ldr	r1, [pc, #24]	; (52e8 <ValidateRxFreqT1+0x2c>)
    52d0:	4b06      	ldr	r3, [pc, #24]	; (52ec <ValidateRxFreqT1+0x30>)
    52d2:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    52d4:	2308      	movs	r3, #8
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    52d6:	2900      	cmp	r1, #0
    52d8:	d000      	beq.n	52dc <ValidateRxFreqT1+0x20>
		result = LORAWAN_INVALID_PARAMETER;
    52da:	3302      	adds	r3, #2
	}
	return result;
}
    52dc:	0018      	movs	r0, r3
    52de:	bd10      	pop	{r4, pc}
    52e0:	c8f78f60 	.word	0xc8f78f60
    52e4:	00401640 	.word	0x00401640
    52e8:	000927c0 	.word	0x000927c0
    52ec:	00011875 	.word	0x00011875

000052f0 <ValidateRx1DataRateOffset>:
{
	StackRetStatus_t retVal = LORAWAN_INVALID_PARAMETER;
	
	uint8_t rx1DrOffset = *(uint8_t *)attrInput;
	
	if(rx1DrOffset <= RegParams.Rx1DrOffset)
    52f0:	780a      	ldrb	r2, [r1, #0]
    52f2:	232c      	movs	r3, #44	; 0x2c
    52f4:	4903      	ldr	r1, [pc, #12]	; (5304 <ValidateRx1DataRateOffset+0x14>)
    52f6:	56cb      	ldrsb	r3, [r1, r3]
	StackRetStatus_t retVal = LORAWAN_INVALID_PARAMETER;
    52f8:	200a      	movs	r0, #10
	if(rx1DrOffset <= RegParams.Rx1DrOffset)
    52fa:	429a      	cmp	r2, r3
    52fc:	dc00      	bgt.n	5300 <ValidateRx1DataRateOffset+0x10>
	{
		retVal = LORAWAN_SUCCESS;
    52fe:	3802      	subs	r0, #2
	}
	
	return retVal;
}
    5300:	4770      	bx	lr
    5302:	46c0      	nop			; (mov r8, r8)
    5304:	20000fc0 	.word	0x20000fc0

00005308 <getSubBandId>:
}
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static uint8_t getSubBandId(uint32_t frequency)
{
    5308:	b530      	push	{r4, r5, lr}
    530a:	0004      	movs	r4, r0
	uint8_t subBandId = 0xFF;
#if (EU_BAND == 1)	|| (JPN_BAND == 1)
	for(uint8_t i = 0; i < RegParams.maxSubBands; i++)
    530c:	2329      	movs	r3, #41	; 0x29
    530e:	4a19      	ldr	r2, [pc, #100]	; (5374 <getSubBandId+0x6c>)
    5310:	5cd5      	ldrb	r5, [r2, r3]
    5312:	2d00      	cmp	r5, #0
    5314:	d02c      	beq.n	5370 <getSubBandId+0x68>
	{
		if(frequency >= RegParams.pSubBandParams[i].freqMin && frequency <= RegParams.pSubBandParams[i].freqMax)
    5316:	0011      	movs	r1, r2
    5318:	7b13      	ldrb	r3, [r2, #12]
    531a:	7b52      	ldrb	r2, [r2, #13]
    531c:	0212      	lsls	r2, r2, #8
    531e:	431a      	orrs	r2, r3
    5320:	7b8b      	ldrb	r3, [r1, #14]
    5322:	041b      	lsls	r3, r3, #16
    5324:	431a      	orrs	r2, r3
    5326:	7bcb      	ldrb	r3, [r1, #15]
    5328:	061b      	lsls	r3, r3, #24
    532a:	4313      	orrs	r3, r2
    532c:	2000      	movs	r0, #0
    532e:	e004      	b.n	533a <getSubBandId+0x32>
	for(uint8_t i = 0; i < RegParams.maxSubBands; i++)
    5330:	3001      	adds	r0, #1
    5332:	b2c0      	uxtb	r0, r0
    5334:	330c      	adds	r3, #12
    5336:	42a8      	cmp	r0, r5
    5338:	d018      	beq.n	536c <getSubBandId+0x64>
		if(frequency >= RegParams.pSubBandParams[i].freqMin && frequency <= RegParams.pSubBandParams[i].freqMax)
    533a:	781a      	ldrb	r2, [r3, #0]
    533c:	7859      	ldrb	r1, [r3, #1]
    533e:	0209      	lsls	r1, r1, #8
    5340:	4311      	orrs	r1, r2
    5342:	789a      	ldrb	r2, [r3, #2]
    5344:	0412      	lsls	r2, r2, #16
    5346:	4311      	orrs	r1, r2
    5348:	78da      	ldrb	r2, [r3, #3]
    534a:	0612      	lsls	r2, r2, #24
    534c:	430a      	orrs	r2, r1
    534e:	42a2      	cmp	r2, r4
    5350:	d8ee      	bhi.n	5330 <getSubBandId+0x28>
    5352:	791a      	ldrb	r2, [r3, #4]
    5354:	7959      	ldrb	r1, [r3, #5]
    5356:	0209      	lsls	r1, r1, #8
    5358:	4311      	orrs	r1, r2
    535a:	799a      	ldrb	r2, [r3, #6]
    535c:	0412      	lsls	r2, r2, #16
    535e:	4311      	orrs	r1, r2
    5360:	79da      	ldrb	r2, [r3, #7]
    5362:	0612      	lsls	r2, r2, #24
    5364:	430a      	orrs	r2, r1
    5366:	4294      	cmp	r4, r2
    5368:	d8e2      	bhi.n	5330 <getSubBandId+0x28>
    536a:	e000      	b.n	536e <getSubBandId+0x66>
	uint8_t subBandId = 0xFF;
    536c:	20ff      	movs	r0, #255	; 0xff
#elif (AS_BAND == 1)
	// whole ASIA 923 spectrum is one band
	subBandId = 0;
#endif
	return subBandId;
}
    536e:	bd30      	pop	{r4, r5, pc}
	uint8_t subBandId = 0xFF;
    5370:	20ff      	movs	r0, #255	; 0xff
    5372:	e7fc      	b.n	536e <getSubBandId+0x66>
    5374:	20000fc0 	.word	0x20000fc0

00005378 <ValidateFreq>:
{
    5378:	b510      	push	{r4, lr}
    if(getSubBandId(frequencyNew) == 0xFF)
    537a:	6808      	ldr	r0, [r1, #0]
    537c:	4b04      	ldr	r3, [pc, #16]	; (5390 <ValidateFreq+0x18>)
    537e:	4798      	blx	r3
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    5380:	2308      	movs	r3, #8
    if(getSubBandId(frequencyNew) == 0xFF)
    5382:	28ff      	cmp	r0, #255	; 0xff
    5384:	d001      	beq.n	538a <ValidateFreq+0x12>
}
    5386:	0018      	movs	r0, r3
    5388:	bd10      	pop	{r4, pc}
		retVal = LORAWAN_INVALID_PARAMETER;
    538a:	3302      	adds	r3, #2
    538c:	e7fb      	b.n	5386 <ValidateFreq+0xe>
    538e:	46c0      	nop			; (mov r8, r8)
    5390:	00005309 	.word	0x00005309

00005394 <UpdateChannelIdStatus>:
}
#endif

#if (NA_BAND == 1 || AU_BAND == 1 || IND_BAND == 1)
static void UpdateChannelIdStatus(uint8_t chid, bool statusNew)
{
    5394:	b510      	push	{r4, lr}
	if(chid < RegParams.maxChannels || ((((1 << RegParams.band) & (ISM_NAAUBAND)) == 0) && chid >= RegParams.cmnParams.paramsType2.minNonDefChId))
    5396:	232a      	movs	r3, #42	; 0x2a
    5398:	4a0e      	ldr	r2, [pc, #56]	; (53d4 <UpdateChannelIdStatus+0x40>)
    539a:	56d3      	ldrsb	r3, [r2, r3]
    539c:	4298      	cmp	r0, r3
    539e:	db0b      	blt.n	53b8 <UpdateChannelIdStatus+0x24>
    53a0:	232e      	movs	r3, #46	; 0x2e
    53a2:	5cd2      	ldrb	r2, [r2, r3]
    53a4:	3b22      	subs	r3, #34	; 0x22
    53a6:	4113      	asrs	r3, r2
    53a8:	07db      	lsls	r3, r3, #31
    53aa:	d412      	bmi.n	53d2 <UpdateChannelIdStatus+0x3e>
    53ac:	23e0      	movs	r3, #224	; 0xe0
    53ae:	005b      	lsls	r3, r3, #1
    53b0:	4a08      	ldr	r2, [pc, #32]	; (53d4 <UpdateChannelIdStatus+0x40>)
    53b2:	5cd3      	ldrb	r3, [r2, r3]
    53b4:	4283      	cmp	r3, r0
    53b6:	d80c      	bhi.n	53d2 <UpdateChannelIdStatus+0x3e>
	{
		RegParams.pChParams[chid].status = statusNew;
    53b8:	4c06      	ldr	r4, [pc, #24]	; (53d4 <UpdateChannelIdStatus+0x40>)
    53ba:	7923      	ldrb	r3, [r4, #4]
    53bc:	7962      	ldrb	r2, [r4, #5]
    53be:	0212      	lsls	r2, r2, #8
    53c0:	431a      	orrs	r2, r3
    53c2:	79a3      	ldrb	r3, [r4, #6]
    53c4:	041b      	lsls	r3, r3, #16
    53c6:	431a      	orrs	r2, r3
    53c8:	79e3      	ldrb	r3, [r4, #7]
    53ca:	061b      	lsls	r3, r3, #24
    53cc:	4313      	orrs	r3, r2
    53ce:	0040      	lsls	r0, r0, #1
    53d0:	54c1      	strb	r1, [r0, r3]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
#endif

		
	}
}
    53d2:	bd10      	pop	{r4, pc}
    53d4:	20000fc0 	.word	0x20000fc0

000053d8 <UpdateChannelIdStatusT2>:
#endif

#if ((EU_BAND) == 1)
static void UpdateChannelIdStatusT2(uint8_t chid, bool statusNew)
{
    53d8:	b530      	push	{r4, r5, lr}
	if(chid < RegParams.maxChannels && chid >= RegParams.cmnParams.paramsType2.minNonDefChId &&
    53da:	232a      	movs	r3, #42	; 0x2a
    53dc:	4a3a      	ldr	r2, [pc, #232]	; (54c8 <UpdateChannelIdStatusT2+0xf0>)
    53de:	56d3      	ldrsb	r3, [r2, r3]
    53e0:	4298      	cmp	r0, r3
    53e2:	da17      	bge.n	5414 <UpdateChannelIdStatusT2+0x3c>
    53e4:	23e0      	movs	r3, #224	; 0xe0
    53e6:	005b      	lsls	r3, r3, #1
    53e8:	5cd3      	ldrb	r3, [r2, r3]
    53ea:	4283      	cmp	r3, r0
    53ec:	d812      	bhi.n	5414 <UpdateChannelIdStatusT2+0x3c>
	   (RegParams.pOtherChParams[chid].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) == (FREQUENCY_DEFINED | DATA_RANGE_DEFINED))
    53ee:	0042      	lsls	r2, r0, #1
    53f0:	1812      	adds	r2, r2, r0
    53f2:	0092      	lsls	r2, r2, #2
    53f4:	4d34      	ldr	r5, [pc, #208]	; (54c8 <UpdateChannelIdStatusT2+0xf0>)
    53f6:	7a2b      	ldrb	r3, [r5, #8]
    53f8:	7a6c      	ldrb	r4, [r5, #9]
    53fa:	0224      	lsls	r4, r4, #8
    53fc:	431c      	orrs	r4, r3
    53fe:	7aab      	ldrb	r3, [r5, #10]
    5400:	041b      	lsls	r3, r3, #16
    5402:	431c      	orrs	r4, r3
    5404:	7aeb      	ldrb	r3, [r5, #11]
    5406:	061b      	lsls	r3, r3, #24
    5408:	4323      	orrs	r3, r4
    540a:	189b      	adds	r3, r3, r2
	if(chid < RegParams.maxChannels && chid >= RegParams.cmnParams.paramsType2.minNonDefChId &&
    540c:	7adb      	ldrb	r3, [r3, #11]
    540e:	43db      	mvns	r3, r3
    5410:	079b      	lsls	r3, r3, #30
    5412:	d000      	beq.n	5416 <UpdateChannelIdStatusT2+0x3e>
				 }
			}
			RegParams.pSubBandParams[subBandId].subBandTimeout = 0;
		}
	}
}
    5414:	bd30      	pop	{r4, r5, pc}
		RegParams.pChParams[chid].status = statusNew;
    5416:	002b      	movs	r3, r5
    5418:	792c      	ldrb	r4, [r5, #4]
    541a:	796d      	ldrb	r5, [r5, #5]
    541c:	022d      	lsls	r5, r5, #8
    541e:	4325      	orrs	r5, r4
    5420:	799c      	ldrb	r4, [r3, #6]
    5422:	0424      	lsls	r4, r4, #16
    5424:	4325      	orrs	r5, r4
    5426:	79dc      	ldrb	r4, [r3, #7]
    5428:	0624      	lsls	r4, r4, #24
    542a:	432c      	orrs	r4, r5
    542c:	0040      	lsls	r0, r0, #1
    542e:	5501      	strb	r1, [r0, r4]
		if(((1 << RegParams.band) & (ISM_EUBAND)) != 0 && statusNew == DISABLED)
    5430:	202e      	movs	r0, #46	; 0x2e
    5432:	5c18      	ldrb	r0, [r3, r0]
    5434:	2303      	movs	r3, #3
    5436:	4103      	asrs	r3, r0
    5438:	07db      	lsls	r3, r3, #31
    543a:	d5eb      	bpl.n	5414 <UpdateChannelIdStatusT2+0x3c>
    543c:	2900      	cmp	r1, #0
    543e:	d1e9      	bne.n	5414 <UpdateChannelIdStatusT2+0x3c>
			subBandId = RegParams.pOtherChParams[chid].subBandId;
    5440:	4b21      	ldr	r3, [pc, #132]	; (54c8 <UpdateChannelIdStatusT2+0xf0>)
    5442:	7a1c      	ldrb	r4, [r3, #8]
    5444:	7a59      	ldrb	r1, [r3, #9]
    5446:	0209      	lsls	r1, r1, #8
    5448:	4321      	orrs	r1, r4
    544a:	7a9c      	ldrb	r4, [r3, #10]
    544c:	0424      	lsls	r4, r4, #16
    544e:	4321      	orrs	r1, r4
    5450:	7adc      	ldrb	r4, [r3, #11]
    5452:	0624      	lsls	r4, r4, #24
    5454:	430c      	orrs	r4, r1
    5456:	18a2      	adds	r2, r4, r2
    5458:	7a15      	ldrb	r5, [r2, #8]
			for(uint8_t i = 0; i < RegParams.maxChannels; i++)
    545a:	222a      	movs	r2, #42	; 0x2a
    545c:	5698      	ldrsb	r0, [r3, r2]
    545e:	2800      	cmp	r0, #0
    5460:	dd1c      	ble.n	549c <UpdateChannelIdStatusT2+0xc4>
				if(RegParams.pChParams[i].status == ENABLED &&
    5462:	001a      	movs	r2, r3
    5464:	7919      	ldrb	r1, [r3, #4]
    5466:	795b      	ldrb	r3, [r3, #5]
    5468:	021b      	lsls	r3, r3, #8
    546a:	430b      	orrs	r3, r1
    546c:	7991      	ldrb	r1, [r2, #6]
    546e:	0409      	lsls	r1, r1, #16
    5470:	430b      	orrs	r3, r1
    5472:	79d1      	ldrb	r1, [r2, #7]
    5474:	0609      	lsls	r1, r1, #24
    5476:	4319      	orrs	r1, r3
    5478:	2300      	movs	r3, #0
    547a:	e003      	b.n	5484 <UpdateChannelIdStatusT2+0xac>
			for(uint8_t i = 0; i < RegParams.maxChannels; i++)
    547c:	3301      	adds	r3, #1
    547e:	b2db      	uxtb	r3, r3
    5480:	4283      	cmp	r3, r0
    5482:	da0b      	bge.n	549c <UpdateChannelIdStatusT2+0xc4>
				if(RegParams.pChParams[i].status == ENABLED &&
    5484:	005a      	lsls	r2, r3, #1
    5486:	5c52      	ldrb	r2, [r2, r1]
    5488:	2a00      	cmp	r2, #0
    548a:	d0f7      	beq.n	547c <UpdateChannelIdStatusT2+0xa4>
				 subBandId == RegParams.pOtherChParams[i].subBandId)
    548c:	005a      	lsls	r2, r3, #1
    548e:	18d2      	adds	r2, r2, r3
    5490:	0092      	lsls	r2, r2, #2
    5492:	18a2      	adds	r2, r4, r2
				if(RegParams.pChParams[i].status == ENABLED &&
    5494:	7a12      	ldrb	r2, [r2, #8]
    5496:	42aa      	cmp	r2, r5
    5498:	d1f0      	bne.n	547c <UpdateChannelIdStatusT2+0xa4>
    549a:	e7bb      	b.n	5414 <UpdateChannelIdStatusT2+0x3c>
			RegParams.pSubBandParams[subBandId].subBandTimeout = 0;
    549c:	490a      	ldr	r1, [pc, #40]	; (54c8 <UpdateChannelIdStatusT2+0xf0>)
    549e:	7b0a      	ldrb	r2, [r1, #12]
    54a0:	7b4b      	ldrb	r3, [r1, #13]
    54a2:	021b      	lsls	r3, r3, #8
    54a4:	4313      	orrs	r3, r2
    54a6:	7b8a      	ldrb	r2, [r1, #14]
    54a8:	0412      	lsls	r2, r2, #16
    54aa:	4313      	orrs	r3, r2
    54ac:	7bca      	ldrb	r2, [r1, #15]
    54ae:	0612      	lsls	r2, r2, #24
    54b0:	431a      	orrs	r2, r3
    54b2:	006b      	lsls	r3, r5, #1
    54b4:	195d      	adds	r5, r3, r5
    54b6:	00ad      	lsls	r5, r5, #2
    54b8:	18ad      	adds	r5, r5, r2
    54ba:	2300      	movs	r3, #0
    54bc:	722b      	strb	r3, [r5, #8]
    54be:	726b      	strb	r3, [r5, #9]
    54c0:	72ab      	strb	r3, [r5, #10]
    54c2:	72eb      	strb	r3, [r5, #11]
    54c4:	e7a6      	b.n	5414 <UpdateChannelIdStatusT2+0x3c>
    54c6:	46c0      	nop			; (mov r8, r8)
    54c8:	20000fc0 	.word	0x20000fc0

000054cc <setChannelIdStatusT2>:
{
    54cc:	b570      	push	{r4, r5, r6, lr}
    54ce:	b082      	sub	sp, #8
	memcpy(&updateChid,attrInput,sizeof(UpdateChId_t));
    54d0:	780d      	ldrb	r5, [r1, #0]
    54d2:	784e      	ldrb	r6, [r1, #1]
	valChid.channelIndex = updateChid.channelIndex;
    54d4:	a901      	add	r1, sp, #4
    54d6:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = /*WITHOUT_DEFAULT_CHANNELS*/ALL_CHANNELS;
    54d8:	2301      	movs	r3, #1
    54da:	704b      	strb	r3, [r1, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    54dc:	2015      	movs	r0, #21
    54de:	4b0c      	ldr	r3, [pc, #48]	; (5510 <setChannelIdStatusT2+0x44>)
    54e0:	4798      	blx	r3
    54e2:	0004      	movs	r4, r0
    54e4:	2808      	cmp	r0, #8
    54e6:	d003      	beq.n	54f0 <setChannelIdStatusT2+0x24>
		retVal = LORAWAN_INVALID_PARAMETER;
    54e8:	240a      	movs	r4, #10
}
    54ea:	0020      	movs	r0, r4
    54ec:	b002      	add	sp, #8
    54ee:	bd70      	pop	{r4, r5, r6, pc}
		if(RegParams.band ==  ISM_IND865)
    54f0:	232e      	movs	r3, #46	; 0x2e
    54f2:	4a08      	ldr	r2, [pc, #32]	; (5514 <setChannelIdStatusT2+0x48>)
    54f4:	5cd3      	ldrb	r3, [r2, r3]
    54f6:	2b0f      	cmp	r3, #15
    54f8:	d004      	beq.n	5504 <setChannelIdStatusT2+0x38>
		    UpdateChannelIdStatusT2(updateChid.channelIndex,updateChid.statusNew);
    54fa:	0031      	movs	r1, r6
    54fc:	0028      	movs	r0, r5
    54fe:	4b06      	ldr	r3, [pc, #24]	; (5518 <setChannelIdStatusT2+0x4c>)
    5500:	4798      	blx	r3
    5502:	e7f2      	b.n	54ea <setChannelIdStatusT2+0x1e>
			UpdateChannelIdStatus(updateChid.channelIndex,updateChid.statusNew);
    5504:	0031      	movs	r1, r6
    5506:	0028      	movs	r0, r5
    5508:	4b04      	ldr	r3, [pc, #16]	; (551c <setChannelIdStatusT2+0x50>)
    550a:	4798      	blx	r3
    550c:	e7ed      	b.n	54ea <setChannelIdStatusT2+0x1e>
    550e:	46c0      	nop			; (mov r8, r8)
    5510:	00005071 	.word	0x00005071
    5514:	20000fc0 	.word	0x20000fc0
    5518:	000053d9 	.word	0x000053d9
    551c:	00005395 	.word	0x00005395

00005520 <UpdateChannelIdStatusT3>:
#endif

#if (AS_BAND == 1 || JPN_BAND == 1)
static void UpdateChannelIdStatusT3(uint8_t chid, bool statusNew)
{
    5520:	b510      	push	{r4, lr}
	RegParams.pChParams[chid].status = statusNew;
    5522:	4b0e      	ldr	r3, [pc, #56]	; (555c <UpdateChannelIdStatusT3+0x3c>)
    5524:	791a      	ldrb	r2, [r3, #4]
    5526:	795c      	ldrb	r4, [r3, #5]
    5528:	0224      	lsls	r4, r4, #8
    552a:	4314      	orrs	r4, r2
    552c:	799a      	ldrb	r2, [r3, #6]
    552e:	0412      	lsls	r2, r2, #16
    5530:	4314      	orrs	r4, r2
    5532:	79da      	ldrb	r2, [r3, #7]
    5534:	0612      	lsls	r2, r2, #24
    5536:	4322      	orrs	r2, r4
    5538:	0044      	lsls	r4, r0, #1
    553a:	54a1      	strb	r1, [r4, r2]
#endif
	
#if (ENABLE_PDS == 1)
	PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
#endif
	if( RegParams.band == ISM_JPN923)
    553c:	222e      	movs	r2, #46	; 0x2e
    553e:	5c9b      	ldrb	r3, [r3, r2]
    5540:	2b05      	cmp	r3, #5
    5542:	d000      	beq.n	5546 <UpdateChannelIdStatusT3+0x26>
	{
		RegParams.cmnParams.paramsType2.channelTimer[chid] = 0;
	}

}
    5544:	bd10      	pop	{r4, pc}
		RegParams.cmnParams.paramsType2.channelTimer[chid] = 0;
    5546:	3058      	adds	r0, #88	; 0x58
    5548:	0080      	lsls	r0, r0, #2
    554a:	4b04      	ldr	r3, [pc, #16]	; (555c <UpdateChannelIdStatusT3+0x3c>)
    554c:	1818      	adds	r0, r3, r0
    554e:	2300      	movs	r3, #0
    5550:	7203      	strb	r3, [r0, #8]
    5552:	7243      	strb	r3, [r0, #9]
    5554:	7283      	strb	r3, [r0, #10]
    5556:	72c3      	strb	r3, [r0, #11]
}
    5558:	e7f4      	b.n	5544 <UpdateChannelIdStatusT3+0x24>
    555a:	46c0      	nop			; (mov r8, r8)
    555c:	20000fc0 	.word	0x20000fc0

00005560 <UpdateChannelIdStatusT4>:
#endif

#if (KR_BAND == 1)
static void UpdateChannelIdStatusT4(uint8_t chid, bool statusNew)
{
    5560:	b510      	push	{r4, lr}
	RegParams.pChParams[chid].status = statusNew;
    5562:	4c18      	ldr	r4, [pc, #96]	; (55c4 <UpdateChannelIdStatusT4+0x64>)
    5564:	7923      	ldrb	r3, [r4, #4]
    5566:	7962      	ldrb	r2, [r4, #5]
    5568:	0212      	lsls	r2, r2, #8
    556a:	431a      	orrs	r2, r3
    556c:	79a3      	ldrb	r3, [r4, #6]
    556e:	041b      	lsls	r3, r3, #16
    5570:	431a      	orrs	r2, r3
    5572:	79e3      	ldrb	r3, [r4, #7]
    5574:	061b      	lsls	r3, r3, #24
    5576:	4313      	orrs	r3, r2
    5578:	0042      	lsls	r2, r0, #1
    557a:	54d1      	strb	r1, [r2, r3]
	
#if (ENABLE_PDS == 1)
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
#endif
	
	if(statusNew == ENABLED)
    557c:	2900      	cmp	r1, #0
    557e:	d01c      	beq.n	55ba <UpdateChannelIdStatusT4+0x5a>
	{
		if(RegParams.pOtherChParams[chid].ulfrequency < FREQ_922100KHZ)
    5580:	7a22      	ldrb	r2, [r4, #8]
    5582:	7a63      	ldrb	r3, [r4, #9]
    5584:	021b      	lsls	r3, r3, #8
    5586:	4313      	orrs	r3, r2
    5588:	7aa2      	ldrb	r2, [r4, #10]
    558a:	0412      	lsls	r2, r2, #16
    558c:	4313      	orrs	r3, r2
    558e:	7ae2      	ldrb	r2, [r4, #11]
    5590:	0612      	lsls	r2, r2, #24
    5592:	431a      	orrs	r2, r3
    5594:	0043      	lsls	r3, r0, #1
    5596:	1818      	adds	r0, r3, r0
    5598:	0080      	lsls	r0, r0, #2
    559a:	1810      	adds	r0, r2, r0
    559c:	7803      	ldrb	r3, [r0, #0]
    559e:	7842      	ldrb	r2, [r0, #1]
    55a0:	0212      	lsls	r2, r2, #8
    55a2:	431a      	orrs	r2, r3
    55a4:	7883      	ldrb	r3, [r0, #2]
    55a6:	041b      	lsls	r3, r3, #16
    55a8:	431a      	orrs	r2, r3
    55aa:	78c3      	ldrb	r3, [r0, #3]
    55ac:	061b      	lsls	r3, r3, #24
    55ae:	4313      	orrs	r3, r2
    55b0:	4a05      	ldr	r2, [pc, #20]	; (55c8 <UpdateChannelIdStatusT4+0x68>)
    55b2:	4293      	cmp	r3, r2
    55b4:	d902      	bls.n	55bc <UpdateChannelIdStatusT4+0x5c>
		{
			RegParams.pOtherChParams[chid].maxEIRP = DEFAULT_EIRP_KR_LF;
		}
		else
		{
			RegParams.pOtherChParams[chid].maxEIRP = DEFAULT_EIRP_KR_HF;
    55b6:	230e      	movs	r3, #14
    55b8:	7283      	strb	r3, [r0, #10]
#if (ENABLE_PDS == 1)
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
#endif

	}
}
    55ba:	bd10      	pop	{r4, pc}
			RegParams.pOtherChParams[chid].maxEIRP = DEFAULT_EIRP_KR_LF;
    55bc:	230a      	movs	r3, #10
    55be:	7283      	strb	r3, [r0, #10]
    55c0:	e7fb      	b.n	55ba <UpdateChannelIdStatusT4+0x5a>
    55c2:	46c0      	nop			; (mov r8, r8)
    55c4:	20000fc0 	.word	0x20000fc0
    55c8:	36f6211f 	.word	0x36f6211f

000055cc <setChannelIdStatusT3>:
{
    55cc:	b570      	push	{r4, r5, r6, lr}
    55ce:	b082      	sub	sp, #8
	memcpy(&updateChid,attrInput,sizeof(UpdateChId_t));
    55d0:	780d      	ldrb	r5, [r1, #0]
    55d2:	784e      	ldrb	r6, [r1, #1]
	valChid.channelIndex = updateChid.channelIndex;
    55d4:	a901      	add	r1, sp, #4
    55d6:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    55d8:	2301      	movs	r3, #1
    55da:	704b      	strb	r3, [r1, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    55dc:	2015      	movs	r0, #21
    55de:	4b0c      	ldr	r3, [pc, #48]	; (5610 <setChannelIdStatusT3+0x44>)
    55e0:	4798      	blx	r3
    55e2:	0004      	movs	r4, r0
    55e4:	2808      	cmp	r0, #8
    55e6:	d003      	beq.n	55f0 <setChannelIdStatusT3+0x24>
		retVal = LORAWAN_INVALID_PARAMETER;
    55e8:	240a      	movs	r4, #10
}
    55ea:	0020      	movs	r0, r4
    55ec:	b002      	add	sp, #8
    55ee:	bd70      	pop	{r4, r5, r6, pc}
		if( RegParams.band == ISM_KR920)
    55f0:	232e      	movs	r3, #46	; 0x2e
    55f2:	4a08      	ldr	r2, [pc, #32]	; (5614 <setChannelIdStatusT3+0x48>)
    55f4:	5cd3      	ldrb	r3, [r2, r3]
    55f6:	2b04      	cmp	r3, #4
    55f8:	d004      	beq.n	5604 <setChannelIdStatusT3+0x38>
		    UpdateChannelIdStatusT3(updateChid.channelIndex,updateChid.statusNew);
    55fa:	0031      	movs	r1, r6
    55fc:	0028      	movs	r0, r5
    55fe:	4b06      	ldr	r3, [pc, #24]	; (5618 <setChannelIdStatusT3+0x4c>)
    5600:	4798      	blx	r3
    5602:	e7f2      	b.n	55ea <setChannelIdStatusT3+0x1e>
			UpdateChannelIdStatusT4(updateChid.channelIndex,updateChid.statusNew);
    5604:	0031      	movs	r1, r6
    5606:	0028      	movs	r0, r5
    5608:	4b04      	ldr	r3, [pc, #16]	; (561c <setChannelIdStatusT3+0x50>)
    560a:	4798      	blx	r3
    560c:	e7ed      	b.n	55ea <setChannelIdStatusT3+0x1e>
    560e:	46c0      	nop			; (mov r8, r8)
    5610:	00005071 	.word	0x00005071
    5614:	20000fc0 	.word	0x20000fc0
    5618:	00005521 	.word	0x00005521
    561c:	00005561 	.word	0x00005561

00005620 <EnableChannels2>:
#endif

#if ((NA_BAND) == 1 || (AU_BAND) == 1)
static void EnableChannels2(uint8_t startIndx, uint8_t endIndx, uint16_t chMask)
{
    5620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5622:	46ce      	mov	lr, r9
    5624:	4647      	mov	r7, r8
    5626:	b580      	push	{r7, lr}
    5628:	0004      	movs	r4, r0
    562a:	000f      	movs	r7, r1
    562c:	0015      	movs	r5, r2
	uint8_t i = 0;
	
	for(i = startIndx; i <= endIndx; i++)
    562e:	4288      	cmp	r0, r1
    5630:	d812      	bhi.n	5658 <EnableChannels2+0x38>
	{
		if((chMask & (0x0001)) == 0x0001)
    5632:	2601      	movs	r6, #1
		{
			UpdateChannelIdStatus(i, ENABLED);
    5634:	4b0a      	ldr	r3, [pc, #40]	; (5660 <EnableChannels2+0x40>)
    5636:	4699      	mov	r9, r3
		}
		else
		{
			UpdateChannelIdStatus(i, DISABLED);
    5638:	4698      	mov	r8, r3
    563a:	e007      	b.n	564c <EnableChannels2+0x2c>
    563c:	2100      	movs	r1, #0
    563e:	0020      	movs	r0, r4
    5640:	47c0      	blx	r8
		}
		chMask = chMask >> SHIFT1;
    5642:	086d      	lsrs	r5, r5, #1
	for(i = startIndx; i <= endIndx; i++)
    5644:	3401      	adds	r4, #1
    5646:	b2e4      	uxtb	r4, r4
    5648:	42a7      	cmp	r7, r4
    564a:	d305      	bcc.n	5658 <EnableChannels2+0x38>
		if((chMask & (0x0001)) == 0x0001)
    564c:	422e      	tst	r6, r5
    564e:	d0f5      	beq.n	563c <EnableChannels2+0x1c>
			UpdateChannelIdStatus(i, ENABLED);
    5650:	0031      	movs	r1, r6
    5652:	0020      	movs	r0, r4
    5654:	47c8      	blx	r9
    5656:	e7f4      	b.n	5642 <EnableChannels2+0x22>
	}
}
    5658:	bc0c      	pop	{r2, r3}
    565a:	4690      	mov	r8, r2
    565c:	4699      	mov	r9, r3
    565e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5660:	00005395 	.word	0x00005395

00005664 <ValidateFrequencyAS>:
 */
#if (AS_BAND == 1)
static StackRetStatus_t ValidateFrequencyAS (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint32_t frequencyNew = * (uint32_t *)attrInput;
    5664:	680b      	ldr	r3, [r1, #0]

    /*Bands Supporting Freq 923-925MHz*/
    if(RegParams.band == ISM_BRN923 || RegParams.band == ISM_CMB923 || RegParams.band == ISM_INS923 || RegParams.band == ISM_LAOS923)
    5666:	222e      	movs	r2, #46	; 0x2e
    5668:	4919      	ldr	r1, [pc, #100]	; (56d0 <ValidateFrequencyAS+0x6c>)
    566a:	5c8a      	ldrb	r2, [r1, r2]
    566c:	1f91      	subs	r1, r2, #6
    566e:	2903      	cmp	r1, #3
    5670:	d808      	bhi.n	5684 <ValidateFrequencyAS+0x20>
	{
		if ( (frequencyNew < FREQ_923000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    5672:	4a18      	ldr	r2, [pc, #96]	; (56d4 <ValidateFrequencyAS+0x70>)
    5674:	4694      	mov	ip, r2
    5676:	4463      	add	r3, ip
    5678:	4a17      	ldr	r2, [pc, #92]	; (56d8 <ValidateFrequencyAS+0x74>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    567a:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_923000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    567c:	4293      	cmp	r3, r2
    567e:	d900      	bls.n	5682 <ValidateFrequencyAS+0x1e>
		{
			result = LORAWAN_INVALID_PARAMETER;
    5680:	3002      	adds	r0, #2
	else
	{
		result = LORAWAN_INVALID_PARAMETER;
	}
	return result;
}
    5682:	4770      	bx	lr
	else if(RegParams.band == ISM_NZ923)
    5684:	2a0a      	cmp	r2, #10
    5686:	d011      	beq.n	56ac <ValidateFrequencyAS+0x48>
	else if(RegParams.band == ISM_SP923 || RegParams.band == ISM_THAI923 || RegParams.band == ISM_VTM923)
    5688:	2a0b      	cmp	r2, #11
    568a:	d018      	beq.n	56be <ValidateFrequencyAS+0x5a>
    568c:	0011      	movs	r1, r2
    568e:	390d      	subs	r1, #13
    5690:	2901      	cmp	r1, #1
    5692:	d914      	bls.n	56be <ValidateFrequencyAS+0x5a>
		result = LORAWAN_INVALID_PARAMETER;
    5694:	200a      	movs	r0, #10
	else if(RegParams.band == ISM_TWN923)
    5696:	2a0c      	cmp	r2, #12
    5698:	d1f3      	bne.n	5682 <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_922000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    569a:	4a10      	ldr	r2, [pc, #64]	; (56dc <ValidateFrequencyAS+0x78>)
    569c:	4694      	mov	ip, r2
    569e:	4463      	add	r3, ip
    56a0:	4a0f      	ldr	r2, [pc, #60]	; (56e0 <ValidateFrequencyAS+0x7c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    56a2:	3802      	subs	r0, #2
		if ( (frequencyNew < FREQ_922000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    56a4:	4293      	cmp	r3, r2
    56a6:	d9ec      	bls.n	5682 <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    56a8:	3002      	adds	r0, #2
    56aa:	e7ea      	b.n	5682 <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_915000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    56ac:	4a0d      	ldr	r2, [pc, #52]	; (56e4 <ValidateFrequencyAS+0x80>)
    56ae:	4694      	mov	ip, r2
    56b0:	4463      	add	r3, ip
    56b2:	4a0d      	ldr	r2, [pc, #52]	; (56e8 <ValidateFrequencyAS+0x84>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    56b4:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_915000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    56b6:	4293      	cmp	r3, r2
    56b8:	d9e3      	bls.n	5682 <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    56ba:	3002      	adds	r0, #2
    56bc:	e7e1      	b.n	5682 <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_920000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    56be:	4a0b      	ldr	r2, [pc, #44]	; (56ec <ValidateFrequencyAS+0x88>)
    56c0:	4694      	mov	ip, r2
    56c2:	4463      	add	r3, ip
    56c4:	4a0a      	ldr	r2, [pc, #40]	; (56f0 <ValidateFrequencyAS+0x8c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    56c6:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_920000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    56c8:	4293      	cmp	r3, r2
    56ca:	d9da      	bls.n	5682 <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    56cc:	3002      	adds	r0, #2
    56ce:	e7d8      	b.n	5682 <ValidateFrequencyAS+0x1e>
    56d0:	20000fc0 	.word	0x20000fc0
    56d4:	c8fc2340 	.word	0xc8fc2340
    56d8:	001e8480 	.word	0x001e8480
    56dc:	c90b6580 	.word	0xc90b6580
    56e0:	005b8d80 	.word	0x005b8d80
    56e4:	c9763540 	.word	0xc9763540
    56e8:	00c65d40 	.word	0x00c65d40
    56ec:	c929ea00 	.word	0xc929ea00
    56f0:	004c4b40 	.word	0x004c4b40

000056f4 <setTxParams>:
}
#endif

#if ( AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t setTxParams(LorawanRegionalAttributes_t attr, void *attrInput)
{
    56f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	TxParams_t updateTxParams;

	memcpy(&updateTxParams,attrInput,sizeof(TxParams_t));
    56f6:	780d      	ldrb	r5, [r1, #0]
    56f8:	7849      	ldrb	r1, [r1, #1]
    56fa:	084a      	lsrs	r2, r1, #1
	
	RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime = updateTxParams.uplinkDwellTime;
    56fc:	4809      	ldr	r0, [pc, #36]	; (5724 <setTxParams+0x30>)
    56fe:	24e1      	movs	r4, #225	; 0xe1
    5700:	0064      	lsls	r4, r4, #1
    5702:	2601      	movs	r6, #1
    5704:	4031      	ands	r1, r6
    5706:	5d03      	ldrb	r3, [r0, r4]
    5708:	2701      	movs	r7, #1
    570a:	43bb      	bics	r3, r7
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime = updateTxParams.downlinkDwellTime;
    570c:	4032      	ands	r2, r6
    570e:	0052      	lsls	r2, r2, #1
    5710:	430b      	orrs	r3, r1
    5712:	2102      	movs	r1, #2
    5714:	438b      	bics	r3, r1
    5716:	4313      	orrs	r3, r2
    5718:	5503      	strb	r3, [r0, r4]
	RegParams.maxTxPwr = updateTxParams.maxEIRP;
    571a:	2328      	movs	r3, #40	; 0x28
    571c:	54c5      	strb	r5, [r0, r3]
	
	return LORAWAN_SUCCESS;
}
    571e:	2008      	movs	r0, #8
    5720:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5722:	46c0      	nop			; (mov r8, r8)
    5724:	20000fc0 	.word	0x20000fc0

00005728 <setJoinSuccess>:
#if (ENABLE_PDS == 1)
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
#endif
#endif
	return status;
}
    5728:	2008      	movs	r0, #8
    572a:	4770      	bx	lr

0000572c <setEnableAllChs>:
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
	PDS_STORE(RegParams.regParamItems.lastUsedSB);
#endif
#endif	
	return status;
}
    572c:	2008      	movs	r0, #8
    572e:	4770      	bx	lr

00005730 <setChlistDefaultState>:
#endif
#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t setChlistDefaultState(LorawanRegionalAttributes_t attr, void *attrInput)
{
    5730:	b5f0      	push	{r4, r5, r6, r7, lr}
	StackRetStatus_t status = LORAWAN_SUCCESS;
	/* Traverse the entire channel list and disable the all the Channel status except Default channels */
	for (uint8_t i = 0; i <= RegParams.maxChannels; i++)
    5732:	232a      	movs	r3, #42	; 0x2a
    5734:	4a17      	ldr	r2, [pc, #92]	; (5794 <setChlistDefaultState+0x64>)
    5736:	5cd3      	ldrb	r3, [r2, r3]
    5738:	2b7f      	cmp	r3, #127	; 0x7f
    573a:	d829      	bhi.n	5790 <setChlistDefaultState+0x60>
    573c:	2200      	movs	r2, #0
	{
		if(RegParams.pOtherChParams[i].joinRequestChannel != true)
    573e:	4815      	ldr	r0, [pc, #84]	; (5794 <setChlistDefaultState+0x64>)
		{
			RegParams.pChParams[i].status = DISABLED;
    5740:	0004      	movs	r4, r0
    5742:	2700      	movs	r7, #0
	for (uint8_t i = 0; i <= RegParams.maxChannels; i++)
    5744:	0006      	movs	r6, r0
    5746:	252a      	movs	r5, #42	; 0x2a
    5748:	e004      	b.n	5754 <setChlistDefaultState+0x24>
    574a:	3201      	adds	r2, #1
    574c:	b2d2      	uxtb	r2, r2
    574e:	5773      	ldrsb	r3, [r6, r5]
    5750:	429a      	cmp	r2, r3
    5752:	dc1d      	bgt.n	5790 <setChlistDefaultState+0x60>
		if(RegParams.pOtherChParams[i].joinRequestChannel != true)
    5754:	7a03      	ldrb	r3, [r0, #8]
    5756:	7a41      	ldrb	r1, [r0, #9]
    5758:	0209      	lsls	r1, r1, #8
    575a:	430b      	orrs	r3, r1
    575c:	7a81      	ldrb	r1, [r0, #10]
    575e:	0409      	lsls	r1, r1, #16
    5760:	4319      	orrs	r1, r3
    5762:	7ac3      	ldrb	r3, [r0, #11]
    5764:	061b      	lsls	r3, r3, #24
    5766:	4319      	orrs	r1, r3
    5768:	0053      	lsls	r3, r2, #1
    576a:	189b      	adds	r3, r3, r2
    576c:	009b      	lsls	r3, r3, #2
    576e:	185b      	adds	r3, r3, r1
    5770:	7a5b      	ldrb	r3, [r3, #9]
    5772:	2b00      	cmp	r3, #0
    5774:	d1e9      	bne.n	574a <setChlistDefaultState+0x1a>
			RegParams.pChParams[i].status = DISABLED;
    5776:	7923      	ldrb	r3, [r4, #4]
    5778:	7961      	ldrb	r1, [r4, #5]
    577a:	0209      	lsls	r1, r1, #8
    577c:	4319      	orrs	r1, r3
    577e:	79a3      	ldrb	r3, [r4, #6]
    5780:	041b      	lsls	r3, r3, #16
    5782:	4319      	orrs	r1, r3
    5784:	79e3      	ldrb	r3, [r4, #7]
    5786:	061b      	lsls	r3, r3, #24
    5788:	430b      	orrs	r3, r1
    578a:	0051      	lsls	r1, r2, #1
    578c:	54cf      	strb	r7, [r1, r3]
    578e:	e7dc      	b.n	574a <setChlistDefaultState+0x1a>
		}
	}
	return status;
}
    5790:	2008      	movs	r0, #8
    5792:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5794:	20000fc0 	.word	0x20000fc0

00005798 <SearchAvailableChannel1>:
{
    5798:	b5f0      	push	{r4, r5, r6, r7, lr}
    579a:	46de      	mov	lr, fp
    579c:	4657      	mov	r7, sl
    579e:	464e      	mov	r6, r9
    57a0:	4645      	mov	r5, r8
    57a2:	b5e0      	push	{r5, r6, r7, lr}
    57a4:	b0af      	sub	sp, #188	; 0xbc
    57a6:	000e      	movs	r6, r1
    57a8:	9206      	str	r2, [sp, #24]
    57aa:	9309      	str	r3, [sp, #36]	; 0x24
	memset(ChList, 0, (MAX_CHANNELS_BANDWIDTH_125_AU_NA + MAX_CHANNELS_BANDWIDTH_500_AU_NA) * 2);  
    57ac:	2290      	movs	r2, #144	; 0x90
    57ae:	2100      	movs	r1, #0
    57b0:	a80a      	add	r0, sp, #40	; 0x28
    57b2:	4b59      	ldr	r3, [pc, #356]	; (5918 <SearchAvailableChannel1+0x180>)
    57b4:	4798      	blx	r3
	if(transmissionType == false)
    57b6:	2e00      	cmp	r6, #0
    57b8:	d01d      	beq.n	57f6 <SearchAvailableChannel1+0x5e>
				if (((transmissionType) && (currDr >= RegParams.pChParams[i + j].dataRange.min) && (currDr <= RegParams.pChParams[i + j].dataRange.max) 
    57ba:	4b58      	ldr	r3, [pc, #352]	; (591c <SearchAvailableChannel1+0x184>)
    57bc:	7919      	ldrb	r1, [r3, #4]
    57be:	795a      	ldrb	r2, [r3, #5]
    57c0:	0212      	lsls	r2, r2, #8
    57c2:	4311      	orrs	r1, r2
    57c4:	799a      	ldrb	r2, [r3, #6]
    57c6:	0412      	lsls	r2, r2, #16
    57c8:	430a      	orrs	r2, r1
    57ca:	79d9      	ldrb	r1, [r3, #7]
    57cc:	0609      	lsls	r1, r1, #24
    57ce:	4311      	orrs	r1, r2
    57d0:	9107      	str	r1, [sp, #28]
					&& ((RegParams.pChParams[i + j].status == ENABLED) && ((i+j) != RegParams.lastUsedChannelIndex))) 
    57d2:	222f      	movs	r2, #47	; 0x2f
    57d4:	5c9b      	ldrb	r3, [r3, r2]
    57d6:	9308      	str	r3, [sp, #32]
    57d8:	469b      	mov	fp, r3
    57da:	9103      	str	r1, [sp, #12]
    57dc:	9104      	str	r1, [sp, #16]
    57de:	2300      	movs	r3, #0
    57e0:	469c      	mov	ip, r3
    57e2:	27c9      	movs	r7, #201	; 0xc9
    57e4:	3301      	adds	r3, #1
    57e6:	4698      	mov	r8, r3
    57e8:	2500      	movs	r5, #0
				if (((transmissionType) && (currDr >= RegParams.pChParams[i + j].dataRange.min) && (currDr <= RegParams.pChParams[i + j].dataRange.max) 
    57ea:	9a06      	ldr	r2, [sp, #24]
    57ec:	4663      	mov	r3, ip
    57ee:	9305      	str	r3, [sp, #20]
    57f0:	4691      	mov	r9, r2
    57f2:	4694      	mov	ip, r2
    57f4:	e05a      	b.n	58ac <SearchAvailableChannel1+0x114>
		if(RegParams.FeaturesSupport & JOIN_BACKOFF_SUPPORT)
    57f6:	2320      	movs	r3, #32
    57f8:	4a48      	ldr	r2, [pc, #288]	; (591c <SearchAvailableChannel1+0x184>)
    57fa:	5cd3      	ldrb	r3, [r2, r3]
    57fc:	069b      	lsls	r3, r3, #26
    57fe:	d5dc      	bpl.n	57ba <SearchAvailableChannel1+0x22>
			if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) 
    5800:	0011      	movs	r1, r2
    5802:	7d13      	ldrb	r3, [r2, #20]
    5804:	7d52      	ldrb	r2, [r2, #21]
    5806:	0212      	lsls	r2, r2, #8
    5808:	431a      	orrs	r2, r3
    580a:	7d8b      	ldrb	r3, [r1, #22]
    580c:	041b      	lsls	r3, r3, #16
    580e:	431a      	orrs	r2, r3
    5810:	7dcb      	ldrb	r3, [r1, #23]
    5812:	061b      	lsls	r3, r3, #24
    5814:	4313      	orrs	r3, r2
    5816:	7a18      	ldrb	r0, [r3, #8]
    5818:	4b41      	ldr	r3, [pc, #260]	; (5920 <SearchAvailableChannel1+0x188>)
    581a:	4798      	blx	r3
    581c:	0003      	movs	r3, r0
					return LORAWAN_NO_CHANNELS_FOUND;
    581e:	2010      	movs	r0, #16
			if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) 
    5820:	2b00      	cmp	r3, #0
    5822:	d0ca      	beq.n	57ba <SearchAvailableChannel1+0x22>
    5824:	e070      	b.n	5908 <SearchAvailableChannel1+0x170>
								ChList[num][1] = k + 1;    
    5826:	9c01      	ldr	r4, [sp, #4]
    5828:	0064      	lsls	r4, r4, #1
    582a:	ad0a      	add	r5, sp, #40	; 0x28
    582c:	46aa      	mov	sl, r5
    582e:	4454      	add	r4, sl
    5830:	4645      	mov	r5, r8
    5832:	7065      	strb	r5, [r4, #1]
						num++;
    5834:	9d01      	ldr	r5, [sp, #4]
    5836:	3501      	adds	r5, #1
    5838:	b2ec      	uxtb	r4, r5
    583a:	9401      	str	r4, [sp, #4]
    583c:	3102      	adds	r1, #2
    583e:	3002      	adds	r0, #2
    5840:	3201      	adds	r2, #1
    5842:	3301      	adds	r3, #1
    5844:	b2db      	uxtb	r3, r3
			for (j = 0; j < NO_OF_CH_IN_SUBBAND; j++)
    5846:	42bb      	cmp	r3, r7
    5848:	d01e      	beq.n	5888 <SearchAvailableChannel1+0xf0>
				if (((transmissionType) && (currDr >= RegParams.pChParams[i + j].dataRange.min) && (currDr <= RegParams.pChParams[i + j].dataRange.max) 
    584a:	2e00      	cmp	r6, #0
    584c:	d008      	beq.n	5860 <SearchAvailableChannel1+0xc8>
    584e:	784c      	ldrb	r4, [r1, #1]
    5850:	0724      	lsls	r4, r4, #28
    5852:	0f24      	lsrs	r4, r4, #28
    5854:	45a1      	cmp	r9, r4
    5856:	dbf1      	blt.n	583c <SearchAvailableChannel1+0xa4>
    5858:	784c      	ldrb	r4, [r1, #1]
    585a:	0924      	lsrs	r4, r4, #4
    585c:	45a4      	cmp	ip, r4
    585e:	dced      	bgt.n	583c <SearchAvailableChannel1+0xa4>
					||
    5860:	7804      	ldrb	r4, [r0, #0]
    5862:	2c00      	cmp	r4, #0
    5864:	d0ea      	beq.n	583c <SearchAvailableChannel1+0xa4>
    5866:	9202      	str	r2, [sp, #8]
					&& ((RegParams.pChParams[i + j].status == ENABLED) && ((i+j) != RegParams.lastUsedChannelIndex))) 
    5868:	4593      	cmp	fp, r2
    586a:	d0e7      	beq.n	583c <SearchAvailableChannel1+0xa4>
						ChList[num][0] = i+j;
    586c:	9c01      	ldr	r4, [sp, #4]
    586e:	0064      	lsls	r4, r4, #1
    5870:	46a2      	mov	sl, r4
    5872:	ac0a      	add	r4, sp, #40	; 0x28
    5874:	4655      	mov	r5, sl
    5876:	552a      	strb	r2, [r5, r4]
						if((i+j) >= MAX_CHANNELS_BANDWIDTH_125_AU_NA)
    5878:	2a3f      	cmp	r2, #63	; 0x3f
    587a:	ddd4      	ble.n	5826 <SearchAvailableChannel1+0x8e>
								ChList[num][1] = ((i + j) - MAX_CHANNELS_BANDWIDTH_125_AU_NA + 1);
    587c:	4654      	mov	r4, sl
    587e:	ad0a      	add	r5, sp, #40	; 0x28
    5880:	46aa      	mov	sl, r5
    5882:	4454      	add	r4, sl
    5884:	7063      	strb	r3, [r4, #1]
    5886:	e7d5      	b.n	5834 <SearchAvailableChannel1+0x9c>
    5888:	9d01      	ldr	r5, [sp, #4]
    588a:	4643      	mov	r3, r8
    588c:	3301      	adds	r3, #1
    588e:	b2db      	uxtb	r3, r3
    5890:	4698      	mov	r8, r3
    5892:	3708      	adds	r7, #8
    5894:	b2ff      	uxtb	r7, r7
    5896:	9b03      	ldr	r3, [sp, #12]
    5898:	3310      	adds	r3, #16
    589a:	9303      	str	r3, [sp, #12]
    589c:	9b04      	ldr	r3, [sp, #16]
    589e:	3310      	adds	r3, #16
    58a0:	9304      	str	r3, [sp, #16]
    58a2:	9b05      	ldr	r3, [sp, #20]
    58a4:	3308      	adds	r3, #8
    58a6:	9305      	str	r3, [sp, #20]
	for (i = 0, k = 0; i < (MAX_CHANNELS_BANDWIDTH_125_AU_NA + MAX_CHANNELS_BANDWIDTH_500_AU_NA); i += 8, k++)
    58a8:	2f11      	cmp	r7, #17
    58aa:	d007      	beq.n	58bc <SearchAvailableChannel1+0x124>
    58ac:	003b      	movs	r3, r7
    58ae:	3b08      	subs	r3, #8
    58b0:	b2db      	uxtb	r3, r3
{
    58b2:	9a05      	ldr	r2, [sp, #20]
    58b4:	9804      	ldr	r0, [sp, #16]
    58b6:	9903      	ldr	r1, [sp, #12]
    58b8:	9501      	str	r5, [sp, #4]
    58ba:	e7c6      	b.n	584a <SearchAvailableChannel1+0xb2>
	if(0 != num)
    58bc:	2d00      	cmp	r5, #0
    58be:	d116      	bne.n	58ee <SearchAvailableChannel1+0x156>
		if ((RegParams.pChParams[RegParams.lastUsedChannelIndex].status == ENABLED) &&
    58c0:	9908      	ldr	r1, [sp, #32]
    58c2:	004b      	lsls	r3, r1, #1
    58c4:	9a07      	ldr	r2, [sp, #28]
    58c6:	4694      	mov	ip, r2
    58c8:	4463      	add	r3, ip
    58ca:	781a      	ldrb	r2, [r3, #0]
			result = LORAWAN_NO_CHANNELS_FOUND;
    58cc:	2010      	movs	r0, #16
		if ((RegParams.pChParams[RegParams.lastUsedChannelIndex].status == ENABLED) &&
    58ce:	2a00      	cmp	r2, #0
    58d0:	d01a      	beq.n	5908 <SearchAvailableChannel1+0x170>
		(currDr >= RegParams.pChParams[RegParams.lastUsedChannelIndex].dataRange.min) &&
    58d2:	9f06      	ldr	r7, [sp, #24]
    58d4:	785a      	ldrb	r2, [r3, #1]
    58d6:	0712      	lsls	r2, r2, #28
    58d8:	0f12      	lsrs	r2, r2, #28
		if ((RegParams.pChParams[RegParams.lastUsedChannelIndex].status == ENABLED) &&
    58da:	4297      	cmp	r7, r2
    58dc:	db14      	blt.n	5908 <SearchAvailableChannel1+0x170>
		(currDr <= RegParams.pChParams[RegParams.lastUsedChannelIndex].dataRange.max))
    58de:	785b      	ldrb	r3, [r3, #1]
    58e0:	091b      	lsrs	r3, r3, #4
		(currDr >= RegParams.pChParams[RegParams.lastUsedChannelIndex].dataRange.min) &&
    58e2:	429f      	cmp	r7, r3
    58e4:	dc10      	bgt.n	5908 <SearchAvailableChannel1+0x170>
			*channelIndex = RegParams.lastUsedChannelIndex;
    58e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    58e8:	7019      	strb	r1, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    58ea:	3808      	subs	r0, #8
			*channelIndex = RegParams.lastUsedChannelIndex;
    58ec:	e00c      	b.n	5908 <SearchAvailableChannel1+0x170>
		randomNumber = rand() % num;
    58ee:	4b0d      	ldr	r3, [pc, #52]	; (5924 <SearchAvailableChannel1+0x18c>)
    58f0:	4798      	blx	r3
    58f2:	0029      	movs	r1, r5
    58f4:	4b0c      	ldr	r3, [pc, #48]	; (5928 <SearchAvailableChannel1+0x190>)
    58f6:	4798      	blx	r3
		*channelIndex = ChList[randomNumber][0];
    58f8:	23ff      	movs	r3, #255	; 0xff
    58fa:	400b      	ands	r3, r1
    58fc:	005b      	lsls	r3, r3, #1
    58fe:	aa0a      	add	r2, sp, #40	; 0x28
    5900:	5c9b      	ldrb	r3, [r3, r2]
    5902:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5904:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5906:	2008      	movs	r0, #8
}
    5908:	b02f      	add	sp, #188	; 0xbc
    590a:	bc3c      	pop	{r2, r3, r4, r5}
    590c:	4690      	mov	r8, r2
    590e:	4699      	mov	r9, r3
    5910:	46a2      	mov	sl, r4
    5912:	46ab      	mov	fp, r5
    5914:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5916:	46c0      	nop			; (mov r8, r8)
    5918:	00014f51 	.word	0x00014f51
    591c:	20000fc0 	.word	0x20000fc0
    5920:	000097a1 	.word	0x000097a1
    5924:	000150f1 	.word	0x000150f1
    5928:	00011a49 	.word	0x00011a49

0000592c <LORAREG_GetAttr_FreeChannel1>:
{
    592c:	b570      	push	{r4, r5, r6, lr}
	memcpy(&newFreeChannelReq,(NewFreeChannelReq_t *)attrInput,sizeof(NewFreeChannelReq_t));
    592e:	784c      	ldrb	r4, [r1, #1]
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    5930:	202a      	movs	r0, #42	; 0x2a
    5932:	4d07      	ldr	r5, [pc, #28]	; (5950 <LORAREG_GetAttr_FreeChannel1+0x24>)
    5934:	562d      	ldrsb	r5, [r5, r0]
		return LORAWAN_INVALID_PARAMETER;
    5936:	3820      	subs	r0, #32
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    5938:	42ac      	cmp	r4, r5
    593a:	dd00      	ble.n	593e <LORAREG_GetAttr_FreeChannel1+0x12>
}
    593c:	bd70      	pop	{r4, r5, r6, pc}
		result = SearchAvailableChannel1(newFreeChannelReq.maxChannels,newFreeChannelReq.transmissionType,newFreeChannelReq.currDr,(uint8_t*)attrOutput);
    593e:	7888      	ldrb	r0, [r1, #2]
    5940:	7809      	ldrb	r1, [r1, #0]
    5942:	0013      	movs	r3, r2
    5944:	0002      	movs	r2, r0
    5946:	0020      	movs	r0, r4
    5948:	4c02      	ldr	r4, [pc, #8]	; (5954 <LORAREG_GetAttr_FreeChannel1+0x28>)
    594a:	47a0      	blx	r4
	return result;
    594c:	e7f6      	b.n	593c <LORAREG_GetAttr_FreeChannel1+0x10>
    594e:	46c0      	nop			; (mov r8, r8)
    5950:	20000fc0 	.word	0x20000fc0
    5954:	00005799 	.word	0x00005799

00005958 <LORAREG_GetAttr_JoinDutyCycleRemainingTime>:
{
    5958:	b530      	push	{r4, r5, lr}
    595a:	b083      	sub	sp, #12
    595c:	0014      	movs	r4, r2
	uint32_t timeremaining =0;
    595e:	2300      	movs	r3, #0
    5960:	9301      	str	r3, [sp, #4]
	if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    5962:	4920      	ldr	r1, [pc, #128]	; (59e4 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x8c>)
    5964:	7d0b      	ldrb	r3, [r1, #20]
    5966:	7d4a      	ldrb	r2, [r1, #21]
    5968:	0212      	lsls	r2, r2, #8
    596a:	431a      	orrs	r2, r3
    596c:	7d8b      	ldrb	r3, [r1, #22]
    596e:	041b      	lsls	r3, r3, #16
    5970:	431a      	orrs	r2, r3
    5972:	7dcb      	ldrb	r3, [r1, #23]
    5974:	061b      	lsls	r3, r3, #24
    5976:	4313      	orrs	r3, r2
    5978:	7a18      	ldrb	r0, [r3, #8]
    597a:	4b1b      	ldr	r3, [pc, #108]	; (59e8 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x90>)
    597c:	4798      	blx	r3
    597e:	2800      	cmp	r0, #0
    5980:	d107      	bne.n	5992 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x3a>
	memcpy(attrOutput,&timeremaining,sizeof(uint32_t));
    5982:	2204      	movs	r2, #4
    5984:	a901      	add	r1, sp, #4
    5986:	0020      	movs	r0, r4
    5988:	4b18      	ldr	r3, [pc, #96]	; (59ec <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x94>)
    598a:	4798      	blx	r3
}
    598c:	2008      	movs	r0, #8
    598e:	b003      	add	sp, #12
    5990:	bd30      	pop	{r4, r5, pc}
		timeremaining = US_TO_MS(SwTimerReadValue (RegParams.pJoinDutyCycleTimer->timerId));
    5992:	4d14      	ldr	r5, [pc, #80]	; (59e4 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x8c>)
    5994:	7d2b      	ldrb	r3, [r5, #20]
    5996:	7d6a      	ldrb	r2, [r5, #21]
    5998:	0212      	lsls	r2, r2, #8
    599a:	431a      	orrs	r2, r3
    599c:	7dab      	ldrb	r3, [r5, #22]
    599e:	041b      	lsls	r3, r3, #16
    59a0:	431a      	orrs	r2, r3
    59a2:	7deb      	ldrb	r3, [r5, #23]
    59a4:	061b      	lsls	r3, r3, #24
    59a6:	4313      	orrs	r3, r2
    59a8:	7a18      	ldrb	r0, [r3, #8]
    59aa:	4b11      	ldr	r3, [pc, #68]	; (59f0 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x98>)
    59ac:	4798      	blx	r3
		timeremaining = timeremaining + RegParams.pJoinDutyCycleTimer->remainingtime;
    59ae:	7d2b      	ldrb	r3, [r5, #20]
    59b0:	7d6a      	ldrb	r2, [r5, #21]
    59b2:	0212      	lsls	r2, r2, #8
    59b4:	431a      	orrs	r2, r3
    59b6:	7dab      	ldrb	r3, [r5, #22]
    59b8:	041b      	lsls	r3, r3, #16
    59ba:	431a      	orrs	r2, r3
    59bc:	7deb      	ldrb	r3, [r5, #23]
    59be:	061b      	lsls	r3, r3, #24
    59c0:	4313      	orrs	r3, r2
    59c2:	791d      	ldrb	r5, [r3, #4]
    59c4:	795a      	ldrb	r2, [r3, #5]
    59c6:	0212      	lsls	r2, r2, #8
    59c8:	432a      	orrs	r2, r5
    59ca:	799d      	ldrb	r5, [r3, #6]
    59cc:	042d      	lsls	r5, r5, #16
    59ce:	432a      	orrs	r2, r5
    59d0:	79dd      	ldrb	r5, [r3, #7]
    59d2:	062d      	lsls	r5, r5, #24
    59d4:	4315      	orrs	r5, r2
		timeremaining = US_TO_MS(SwTimerReadValue (RegParams.pJoinDutyCycleTimer->timerId));
    59d6:	21fa      	movs	r1, #250	; 0xfa
    59d8:	0089      	lsls	r1, r1, #2
    59da:	4b06      	ldr	r3, [pc, #24]	; (59f4 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x9c>)
    59dc:	4798      	blx	r3
		timeremaining = timeremaining + RegParams.pJoinDutyCycleTimer->remainingtime;
    59de:	182d      	adds	r5, r5, r0
    59e0:	9501      	str	r5, [sp, #4]
    59e2:	e7ce      	b.n	5982 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x2a>
    59e4:	20000fc0 	.word	0x20000fc0
    59e8:	000097a1 	.word	0x000097a1
    59ec:	00014ecd 	.word	0x00014ecd
    59f0:	000097b5 	.word	0x000097b5
    59f4:	00011769 	.word	0x00011769

000059f8 <LORAREG_GetAttr_Rx1WindowparamsType1>:
{
    59f8:	b510      	push	{r4, lr}
    59fa:	b082      	sub	sp, #8
    59fc:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    59fe:	784c      	ldrb	r4, [r1, #1]
    5a00:	788b      	ldrb	r3, [r1, #2]
	if(rx1WindowParamReq->joining)
    5a02:	780a      	ldrb	r2, [r1, #0]
    5a04:	2a00      	cmp	r2, #0
    5a06:	d007      	beq.n	5a18 <LORAREG_GetAttr_Rx1WindowparamsType1+0x20>
		if (RegParams.lastUsedChannelIndex <= MAX_CHANNELS_BANDWIDTH_125_AU_NA) 
    5a08:	232f      	movs	r3, #47	; 0x2f
    5a0a:	4a23      	ldr	r2, [pc, #140]	; (5a98 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    5a0c:	5cd3      	ldrb	r3, [r2, r3]
    5a0e:	2b40      	cmp	r3, #64	; 0x40
    5a10:	d819      	bhi.n	5a46 <LORAREG_GetAttr_Rx1WindowparamsType1+0x4e>
			rx1WindowParamReq->currDr = RegParams.cmnParams.paramsType1.minTxDR;
    5a12:	2350      	movs	r3, #80	; 0x50
    5a14:	33ff      	adds	r3, #255	; 0xff
    5a16:	5cd3      	ldrb	r3, [r2, r3]
		            RegParams.cmnParams.paramsType1.RxParamWindowOffset1 - rx1WindowParamReq->drOffset;
    5a18:	491f      	ldr	r1, [pc, #124]	; (5a98 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    5a1a:	2256      	movs	r2, #86	; 0x56
    5a1c:	32ff      	adds	r2, #255	; 0xff
    5a1e:	5c8a      	ldrb	r2, [r1, r2]
    5a20:	1b12      	subs	r2, r2, r4
    5a22:	189b      	adds	r3, r3, r2
    5a24:	b2db      	uxtb	r3, r3
	rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr + 
    5a26:	466a      	mov	r2, sp
    5a28:	7113      	strb	r3, [r2, #4]
	if(rx1WindowParams->rx1Dr > RegParams.cmnParams.paramsType1.maxRxDR)
    5a2a:	22a9      	movs	r2, #169	; 0xa9
    5a2c:	0052      	lsls	r2, r2, #1
    5a2e:	5c8a      	ldrb	r2, [r1, r2]
    5a30:	4293      	cmp	r3, r2
    5a32:	d80d      	bhi.n	5a50 <LORAREG_GetAttr_Rx1WindowparamsType1+0x58>
	else if(rx1WindowParams->rx1Dr < RegParams.cmnParams.paramsType1.minRxDR)
    5a34:	2252      	movs	r2, #82	; 0x52
    5a36:	32ff      	adds	r2, #255	; 0xff
    5a38:	4917      	ldr	r1, [pc, #92]	; (5a98 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    5a3a:	5c8a      	ldrb	r2, [r1, r2]
    5a3c:	4293      	cmp	r3, r2
    5a3e:	d209      	bcs.n	5a54 <LORAREG_GetAttr_Rx1WindowparamsType1+0x5c>
		rx1WindowParams->rx1Dr = RegParams.cmnParams.paramsType1.minRxDR;
    5a40:	466b      	mov	r3, sp
    5a42:	711a      	strb	r2, [r3, #4]
    5a44:	e006      	b.n	5a54 <LORAREG_GetAttr_Rx1WindowparamsType1+0x5c>
			rx1WindowParamReq->currDr = RegParams.cmnParams.paramsType1.maxTxDR;
    5a46:	23a8      	movs	r3, #168	; 0xa8
    5a48:	005b      	lsls	r3, r3, #1
    5a4a:	4a13      	ldr	r2, [pc, #76]	; (5a98 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    5a4c:	5cd3      	ldrb	r3, [r2, r3]
    5a4e:	e7e3      	b.n	5a18 <LORAREG_GetAttr_Rx1WindowparamsType1+0x20>
		rx1WindowParams->rx1Dr = RegParams.cmnParams.paramsType1.maxRxDR;
    5a50:	466b      	mov	r3, sp
    5a52:	711a      	strb	r2, [r3, #4]
	rx1WindowParams->rx1Freq = GenerateFrequencyReception(RegParams.lastUsedChannelIndex % 8);
    5a54:	4910      	ldr	r1, [pc, #64]	; (5a98 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    5a56:	232f      	movs	r3, #47	; 0x2f
    5a58:	5ccc      	ldrb	r4, [r1, r3]
	channelFrequency = RegParams.cmnParams.paramsType1.DownStreamCh0Freq + FREQ_600KHZ * channelIndex;
    5a5a:	3b28      	subs	r3, #40	; 0x28
    5a5c:	4023      	ands	r3, r4
    5a5e:	4c0f      	ldr	r4, [pc, #60]	; (5a9c <LORAREG_GetAttr_Rx1WindowparamsType1+0xa4>)
    5a60:	435c      	muls	r4, r3
    5a62:	234c      	movs	r3, #76	; 0x4c
    5a64:	33ff      	adds	r3, #255	; 0xff
    5a66:	5ccb      	ldrb	r3, [r1, r3]
    5a68:	22a6      	movs	r2, #166	; 0xa6
    5a6a:	0052      	lsls	r2, r2, #1
    5a6c:	5c8a      	ldrb	r2, [r1, r2]
    5a6e:	0212      	lsls	r2, r2, #8
    5a70:	4313      	orrs	r3, r2
    5a72:	224e      	movs	r2, #78	; 0x4e
    5a74:	32ff      	adds	r2, #255	; 0xff
    5a76:	5c8a      	ldrb	r2, [r1, r2]
    5a78:	0412      	lsls	r2, r2, #16
    5a7a:	431a      	orrs	r2, r3
    5a7c:	23a7      	movs	r3, #167	; 0xa7
    5a7e:	005b      	lsls	r3, r3, #1
    5a80:	5ccb      	ldrb	r3, [r1, r3]
    5a82:	061b      	lsls	r3, r3, #24
    5a84:	4313      	orrs	r3, r2
    5a86:	18e3      	adds	r3, r4, r3
	rx1WindowParams->rx1Freq = GenerateFrequencyReception(RegParams.lastUsedChannelIndex % 8);
    5a88:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    5a8a:	2208      	movs	r2, #8
    5a8c:	4669      	mov	r1, sp
    5a8e:	4b04      	ldr	r3, [pc, #16]	; (5aa0 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa8>)
    5a90:	4798      	blx	r3
}
    5a92:	2008      	movs	r0, #8
    5a94:	b002      	add	sp, #8
    5a96:	bd10      	pop	{r4, pc}
    5a98:	20000fc0 	.word	0x20000fc0
    5a9c:	000927c0 	.word	0x000927c0
    5aa0:	00014ecd 	.word	0x00014ecd

00005aa4 <LORAREG_GetAttr_DRangeChBandT1>:
{
    5aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5aa6:	46c6      	mov	lr, r8
    5aa8:	b500      	push	{lr}
    5aaa:	b084      	sub	sp, #16
    5aac:	9201      	str	r2, [sp, #4]
	memcpy(&bandDrReq,(BandDrReq_t *)attrInput,sizeof(BandDrReq_t));
    5aae:	2204      	movs	r2, #4
    5ab0:	a803      	add	r0, sp, #12
    5ab2:	4b43      	ldr	r3, [pc, #268]	; (5bc0 <LORAREG_GetAttr_DRangeChBandT1+0x11c>)
    5ab4:	4798      	blx	r3
	if(ValidateChannelMaskCntl(CHANNEL_MASK_CNTL, (void *)&bandDrReq.chnlMaskCntl)	!= LORAWAN_SUCCESS)
    5ab6:	a903      	add	r1, sp, #12
    5ab8:	201b      	movs	r0, #27
    5aba:	4b42      	ldr	r3, [pc, #264]	; (5bc4 <LORAREG_GetAttr_DRangeChBandT1+0x120>)
    5abc:	4798      	blx	r3
    5abe:	2808      	cmp	r0, #8
    5ac0:	d004      	beq.n	5acc <LORAREG_GetAttr_DRangeChBandT1+0x28>
		result = LORAWAN_INVALID_PARAMETER;
    5ac2:	200a      	movs	r0, #10
}
    5ac4:	b004      	add	sp, #16
    5ac6:	bc04      	pop	{r2}
    5ac8:	4690      	mov	r8, r2
    5aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		chBandDr = getChBandDrT1(bandDrReq.chnlMaskCntl,bandDrReq.chnlMask);
    5acc:	aa03      	add	r2, sp, #12
    5ace:	7813      	ldrb	r3, [r2, #0]
    5ad0:	8857      	ldrh	r7, [r2, #2]
	if( RegParams.band == ISM_AU915)
    5ad2:	222e      	movs	r2, #46	; 0x2e
    5ad4:	493c      	ldr	r1, [pc, #240]	; (5bc8 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    5ad6:	5c89      	ldrb	r1, [r1, r2]
		auxMinDataRate = DR6;
    5ad8:	3903      	subs	r1, #3
    5ada:	1e4a      	subs	r2, r1, #1
    5adc:	4191      	sbcs	r1, r2
    5ade:	3106      	adds	r1, #6
	switch (chMaskCntl)
    5ae0:	2b07      	cmp	r3, #7
    5ae2:	d869      	bhi.n	5bb8 <LORAREG_GetAttr_DRangeChBandT1+0x114>
    5ae4:	009a      	lsls	r2, r3, #2
    5ae6:	4d39      	ldr	r5, [pc, #228]	; (5bcc <LORAREG_GetAttr_DRangeChBandT1+0x128>)
    5ae8:	58aa      	ldr	r2, [r5, r2]
    5aea:	4697      	mov	pc, r2
			startingIndex = chMaskCntl << SHIFT4;
    5aec:	011b      	lsls	r3, r3, #4
    5aee:	b2db      	uxtb	r3, r3
			endingIndex = startingIndex + 16;
    5af0:	001a      	movs	r2, r3
    5af2:	3210      	adds	r2, #16
    5af4:	b2d2      	uxtb	r2, r2
    5af6:	4690      	mov	r8, r2
			for (i = startingIndex; i < endingIndex; i++)
    5af8:	4293      	cmp	r3, r2
    5afa:	d25f      	bcs.n	5bbc <LORAREG_GetAttr_DRangeChBandT1+0x118>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    5afc:	4e32      	ldr	r6, [pc, #200]	; (5bc8 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    5afe:	7935      	ldrb	r5, [r6, #4]
    5b00:	7972      	ldrb	r2, [r6, #5]
    5b02:	0212      	lsls	r2, r2, #8
    5b04:	4315      	orrs	r5, r2
    5b06:	79b2      	ldrb	r2, [r6, #6]
    5b08:	0412      	lsls	r2, r2, #16
    5b0a:	432a      	orrs	r2, r5
    5b0c:	79f5      	ldrb	r5, [r6, #7]
    5b0e:	062d      	lsls	r5, r5, #24
    5b10:	4315      	orrs	r5, r2
    5b12:	46ac      	mov	ip, r5
    5b14:	2500      	movs	r5, #0
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    5b16:	2401      	movs	r4, #1
    5b18:	e00c      	b.n	5b34 <LORAREG_GetAttr_DRangeChBandT1+0x90>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    5b1a:	0011      	movs	r1, r2
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    5b1c:	7872      	ldrb	r2, [r6, #1]
    5b1e:	0912      	lsrs	r2, r2, #4
    5b20:	42aa      	cmp	r2, r5
    5b22:	dd02      	ble.n	5b2a <LORAREG_GetAttr_DRangeChBandT1+0x86>
    5b24:	423c      	tst	r4, r7
    5b26:	d011      	beq.n	5b4c <LORAREG_GetAttr_DRangeChBandT1+0xa8>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    5b28:	0015      	movs	r5, r2
				auxChannelMask = auxChannelMask >> SHIFT1;
    5b2a:	087f      	lsrs	r7, r7, #1
			for (i = startingIndex; i < endingIndex; i++)
    5b2c:	3301      	adds	r3, #1
    5b2e:	b2db      	uxtb	r3, r3
    5b30:	4598      	cmp	r8, r3
    5b32:	d013      	beq.n	5b5c <LORAREG_GetAttr_DRangeChBandT1+0xb8>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    5b34:	005e      	lsls	r6, r3, #1
    5b36:	4466      	add	r6, ip
    5b38:	7872      	ldrb	r2, [r6, #1]
    5b3a:	0712      	lsls	r2, r2, #28
    5b3c:	0f12      	lsrs	r2, r2, #28
    5b3e:	428a      	cmp	r2, r1
    5b40:	daec      	bge.n	5b1c <LORAREG_GetAttr_DRangeChBandT1+0x78>
    5b42:	423c      	tst	r4, r7
    5b44:	d1e9      	bne.n	5b1a <LORAREG_GetAttr_DRangeChBandT1+0x76>
    5b46:	2f00      	cmp	r7, #0
    5b48:	d1ef      	bne.n	5b2a <LORAREG_GetAttr_DRangeChBandT1+0x86>
    5b4a:	e7e6      	b.n	5b1a <LORAREG_GetAttr_DRangeChBandT1+0x76>
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    5b4c:	2f00      	cmp	r7, #0
    5b4e:	d0eb      	beq.n	5b28 <LORAREG_GetAttr_DRangeChBandT1+0x84>
    5b50:	e7eb      	b.n	5b2a <LORAREG_GetAttr_DRangeChBandT1+0x86>
			auxMinDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    5b52:	23a8      	movs	r3, #168	; 0xa8
    5b54:	005b      	lsls	r3, r3, #1
    5b56:	4a1c      	ldr	r2, [pc, #112]	; (5bc8 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    5b58:	5cd1      	ldrb	r1, [r2, r3]
			auxMaxDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    5b5a:	000d      	movs	r5, r1
    5b5c:	012d      	lsls	r5, r5, #4
    5b5e:	230f      	movs	r3, #15
    5b60:	4019      	ands	r1, r3
    5b62:	430d      	orrs	r5, r1
		memcpy(attrOutput,&chBandDr,sizeof(DataRange_t));
    5b64:	9b01      	ldr	r3, [sp, #4]
    5b66:	701d      	strb	r5, [r3, #0]
    5b68:	e7ac      	b.n	5ac4 <LORAREG_GetAttr_DRangeChBandT1+0x20>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    5b6a:	4d17      	ldr	r5, [pc, #92]	; (5bc8 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    5b6c:	792b      	ldrb	r3, [r5, #4]
    5b6e:	796a      	ldrb	r2, [r5, #5]
    5b70:	0212      	lsls	r2, r2, #8
    5b72:	431a      	orrs	r2, r3
    5b74:	79ab      	ldrb	r3, [r5, #6]
    5b76:	041b      	lsls	r3, r3, #16
    5b78:	431a      	orrs	r2, r3
    5b7a:	79eb      	ldrb	r3, [r5, #7]
    5b7c:	061b      	lsls	r3, r3, #24
    5b7e:	4313      	orrs	r3, r2
    5b80:	001a      	movs	r2, r3
    5b82:	3380      	adds	r3, #128	; 0x80
    5b84:	001c      	movs	r4, r3
    5b86:	2500      	movs	r5, #0
    5b88:	e002      	b.n	5b90 <LORAREG_GetAttr_DRangeChBandT1+0xec>
    5b8a:	3202      	adds	r2, #2
			for (i = 0; i < 64; i++)
    5b8c:	42a2      	cmp	r2, r4
    5b8e:	d00c      	beq.n	5baa <LORAREG_GetAttr_DRangeChBandT1+0x106>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    5b90:	0016      	movs	r6, r2
    5b92:	7853      	ldrb	r3, [r2, #1]
    5b94:	071b      	lsls	r3, r3, #28
    5b96:	0f1b      	lsrs	r3, r3, #28
    5b98:	428b      	cmp	r3, r1
    5b9a:	da00      	bge.n	5b9e <LORAREG_GetAttr_DRangeChBandT1+0xfa>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    5b9c:	0019      	movs	r1, r3
				if (RegParams.pChParams[i].dataRange.max > auxMaxDataRate)
    5b9e:	7873      	ldrb	r3, [r6, #1]
    5ba0:	091b      	lsrs	r3, r3, #4
    5ba2:	42ab      	cmp	r3, r5
    5ba4:	ddf1      	ble.n	5b8a <LORAREG_GetAttr_DRangeChBandT1+0xe6>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    5ba6:	001d      	movs	r5, r3
    5ba8:	e7ef      	b.n	5b8a <LORAREG_GetAttr_DRangeChBandT1+0xe6>
			if (channelMask != 0)    // if there is at least one channel enabled with DR4
    5baa:	2f00      	cmp	r7, #0
    5bac:	d0d6      	beq.n	5b5c <LORAREG_GetAttr_DRangeChBandT1+0xb8>
				auxMaxDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    5bae:	23a8      	movs	r3, #168	; 0xa8
    5bb0:	005b      	lsls	r3, r3, #1
    5bb2:	4a05      	ldr	r2, [pc, #20]	; (5bc8 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    5bb4:	5cd5      	ldrb	r5, [r2, r3]
    5bb6:	e7d1      	b.n	5b5c <LORAREG_GetAttr_DRangeChBandT1+0xb8>
	uint8_t auxMinDataRate = DR7, auxMaxDataRate = DR0, i;
    5bb8:	2500      	movs	r5, #0
    5bba:	e7cf      	b.n	5b5c <LORAREG_GetAttr_DRangeChBandT1+0xb8>
    5bbc:	2500      	movs	r5, #0
    5bbe:	e7cd      	b.n	5b5c <LORAREG_GetAttr_DRangeChBandT1+0xb8>
    5bc0:	00014ecd 	.word	0x00014ecd
    5bc4:	0000515d 	.word	0x0000515d
    5bc8:	20000fc0 	.word	0x20000fc0
    5bcc:	00019ef0 	.word	0x00019ef0

00005bd0 <LORAREG_GetAttr_DefRx2Freq>:
{
    5bd0:	b510      	push	{r4, lr}
    5bd2:	0010      	movs	r0, r2
	memcpy(attrOutput,&RegParams.DefRx2Freq,sizeof(uint32_t));
    5bd4:	2204      	movs	r2, #4
    5bd6:	4902      	ldr	r1, [pc, #8]	; (5be0 <LORAREG_GetAttr_DefRx2Freq+0x10>)
    5bd8:	4b02      	ldr	r3, [pc, #8]	; (5be4 <LORAREG_GetAttr_DefRx2Freq+0x14>)
    5bda:	4798      	blx	r3
}
    5bdc:	2008      	movs	r0, #8
    5bde:	bd10      	pop	{r4, pc}
    5be0:	20000fdc 	.word	0x20000fdc
    5be4:	00014ecd 	.word	0x00014ecd

00005be8 <LORAREG_GetAttr_DlFrequency>:
{
    5be8:	b510      	push	{r4, lr}
    5bea:	0013      	movs	r3, r2
	channelId = *(uint8_t *)attrInput;
    5bec:	780a      	ldrb	r2, [r1, #0]
	if (channelId > RegParams.maxChannels)
    5bee:	212a      	movs	r1, #42	; 0x2a
    5bf0:	480d      	ldr	r0, [pc, #52]	; (5c28 <LORAREG_GetAttr_DlFrequency+0x40>)
    5bf2:	5641      	ldrsb	r1, [r0, r1]
		result = LORAWAN_INVALID_PARAMETER;
    5bf4:	200a      	movs	r0, #10
	if (channelId > RegParams.maxChannels)
    5bf6:	428a      	cmp	r2, r1
    5bf8:	dd00      	ble.n	5bfc <LORAREG_GetAttr_DlFrequency+0x14>
}
    5bfa:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,&(RegParams.pOtherChParams[channelId].rx1Frequency),sizeof(uint32_t));
    5bfc:	4c0a      	ldr	r4, [pc, #40]	; (5c28 <LORAREG_GetAttr_DlFrequency+0x40>)
    5bfe:	7a21      	ldrb	r1, [r4, #8]
    5c00:	7a60      	ldrb	r0, [r4, #9]
    5c02:	0200      	lsls	r0, r0, #8
    5c04:	4308      	orrs	r0, r1
    5c06:	7aa1      	ldrb	r1, [r4, #10]
    5c08:	0409      	lsls	r1, r1, #16
    5c0a:	4308      	orrs	r0, r1
    5c0c:	7ae1      	ldrb	r1, [r4, #11]
    5c0e:	0609      	lsls	r1, r1, #24
    5c10:	4301      	orrs	r1, r0
    5c12:	0050      	lsls	r0, r2, #1
    5c14:	1882      	adds	r2, r0, r2
    5c16:	0092      	lsls	r2, r2, #2
    5c18:	1889      	adds	r1, r1, r2
    5c1a:	3104      	adds	r1, #4
    5c1c:	2204      	movs	r2, #4
    5c1e:	0018      	movs	r0, r3
    5c20:	4b02      	ldr	r3, [pc, #8]	; (5c2c <LORAREG_GetAttr_DlFrequency+0x44>)
    5c22:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5c24:	2008      	movs	r0, #8
    5c26:	e7e8      	b.n	5bfa <LORAREG_GetAttr_DlFrequency+0x12>
    5c28:	20000fc0 	.word	0x20000fc0
    5c2c:	00014ecd 	.word	0x00014ecd

00005c30 <LORAREG_GetAttr_DutyCycleTimer>:
{
    5c30:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c32:	46d6      	mov	lr, sl
    5c34:	464f      	mov	r7, r9
    5c36:	4646      	mov	r6, r8
    5c38:	b5c0      	push	{r6, r7, lr}
    5c3a:	b084      	sub	sp, #16
    5c3c:	9200      	str	r2, [sp, #0]
    currentDataRate = *(uint8_t *)attrInput;
    5c3e:	780b      	ldrb	r3, [r1, #0]
    5c40:	469c      	mov	ip, r3
    for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    5c42:	232a      	movs	r3, #42	; 0x2a
    5c44:	4a5b      	ldr	r2, [pc, #364]	; (5db4 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    5c46:	56d6      	ldrsb	r6, [r2, r3]
    5c48:	2e00      	cmp	r6, #0
    5c4a:	dd66      	ble.n	5d1a <LORAREG_GetAttr_DutyCycleTimer+0xea>
	    if ( (RegParams.pChParams[i].status == ENABLED) )
    5c4c:	0013      	movs	r3, r2
    5c4e:	7910      	ldrb	r0, [r2, #4]
    5c50:	7952      	ldrb	r2, [r2, #5]
    5c52:	0212      	lsls	r2, r2, #8
    5c54:	4302      	orrs	r2, r0
    5c56:	7998      	ldrb	r0, [r3, #6]
    5c58:	0400      	lsls	r0, r0, #16
    5c5a:	4302      	orrs	r2, r0
    5c5c:	79d8      	ldrb	r0, [r3, #7]
    5c5e:	0600      	lsls	r0, r0, #24
    5c60:	4310      	orrs	r0, r2
		    if((RegParams.pSubBandParams[bandId].subBandTimeout != 0) && 
    5c62:	7b1f      	ldrb	r7, [r3, #12]
    5c64:	7b5a      	ldrb	r2, [r3, #13]
    5c66:	0212      	lsls	r2, r2, #8
    5c68:	433a      	orrs	r2, r7
    5c6a:	7b9f      	ldrb	r7, [r3, #14]
    5c6c:	043f      	lsls	r7, r7, #16
    5c6e:	433a      	orrs	r2, r7
    5c70:	7bdf      	ldrb	r7, [r3, #15]
    5c72:	063f      	lsls	r7, r7, #24
    5c74:	4317      	orrs	r7, r2
    5c76:	2500      	movs	r5, #0
    5c78:	2300      	movs	r3, #0
    5c7a:	2201      	movs	r2, #1
    5c7c:	4252      	negs	r2, r2
    5c7e:	4691      	mov	r9, r2
		    bandId = RegParams.cmnParams.paramsType2.othChParams[i].subBandId;
    5c80:	4a4c      	ldr	r2, [pc, #304]	; (5db4 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    5c82:	4690      	mov	r8, r2
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    5c84:	4662      	mov	r2, ip
    5c86:	9201      	str	r2, [sp, #4]
    5c88:	e004      	b.n	5c94 <LORAREG_GetAttr_DutyCycleTimer+0x64>
    for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    5c8a:	3301      	adds	r3, #1
    5c8c:	b2db      	uxtb	r3, r3
    5c8e:	001d      	movs	r5, r3
    5c90:	42b3      	cmp	r3, r6
    5c92:	da27      	bge.n	5ce4 <LORAREG_GetAttr_DutyCycleTimer+0xb4>
	    if ( (RegParams.pChParams[i].status == ENABLED) )
    5c94:	0059      	lsls	r1, r3, #1
    5c96:	1841      	adds	r1, r0, r1
    5c98:	780a      	ldrb	r2, [r1, #0]
    5c9a:	2a00      	cmp	r2, #0
    5c9c:	d0f5      	beq.n	5c8a <LORAREG_GetAttr_DutyCycleTimer+0x5a>
		    bandId = RegParams.cmnParams.paramsType2.othChParams[i].subBandId;
    5c9e:	006a      	lsls	r2, r5, #1
    5ca0:	1952      	adds	r2, r2, r5
    5ca2:	0092      	lsls	r2, r2, #2
    5ca4:	4442      	add	r2, r8
    5ca6:	32ab      	adds	r2, #171	; 0xab
		    if((RegParams.pSubBandParams[bandId].subBandTimeout != 0) && 
    5ca8:	7815      	ldrb	r5, [r2, #0]
    5caa:	006a      	lsls	r2, r5, #1
    5cac:	1952      	adds	r2, r2, r5
    5cae:	0092      	lsls	r2, r2, #2
    5cb0:	18ba      	adds	r2, r7, r2
    5cb2:	7a15      	ldrb	r5, [r2, #8]
    5cb4:	7a54      	ldrb	r4, [r2, #9]
    5cb6:	0224      	lsls	r4, r4, #8
    5cb8:	4325      	orrs	r5, r4
    5cba:	7a94      	ldrb	r4, [r2, #10]
    5cbc:	0424      	lsls	r4, r4, #16
    5cbe:	4325      	orrs	r5, r4
    5cc0:	7ad2      	ldrb	r2, [r2, #11]
    5cc2:	0612      	lsls	r2, r2, #24
    5cc4:	432a      	orrs	r2, r5
    5cc6:	d0e0      	beq.n	5c8a <LORAREG_GetAttr_DutyCycleTimer+0x5a>
    5cc8:	454a      	cmp	r2, r9
    5cca:	d8de      	bhi.n	5c8a <LORAREG_GetAttr_DutyCycleTimer+0x5a>
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    5ccc:	784d      	ldrb	r5, [r1, #1]
    5cce:	072d      	lsls	r5, r5, #28
    5cd0:	0f2d      	lsrs	r5, r5, #28
			   (RegParams.pSubBandParams[bandId].subBandTimeout <= minimSubBandTimer) && 
    5cd2:	45ac      	cmp	ip, r5
    5cd4:	dbd9      	blt.n	5c8a <LORAREG_GetAttr_DutyCycleTimer+0x5a>
			   (currentDataRate <= RegParams.pChParams[i].dataRange.max) )
    5cd6:	7849      	ldrb	r1, [r1, #1]
    5cd8:	0909      	lsrs	r1, r1, #4
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    5cda:	9c01      	ldr	r4, [sp, #4]
    5cdc:	428c      	cmp	r4, r1
    5cde:	dcd4      	bgt.n	5c8a <LORAREG_GetAttr_DutyCycleTimer+0x5a>
			    minimSubBandTimer = RegParams.pSubBandParams[bandId].subBandTimeout;
    5ce0:	4691      	mov	r9, r2
    5ce2:	e7d2      	b.n	5c8a <LORAREG_GetAttr_DutyCycleTimer+0x5a>
    if((UINT32_MAX != minimSubBandTimer) && (minimSubBandTimer >= RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout))
    5ce4:	464b      	mov	r3, r9
    5ce6:	3301      	adds	r3, #1
    5ce8:	d017      	beq.n	5d1a <LORAREG_GetAttr_DutyCycleTimer+0xea>
    5cea:	4932      	ldr	r1, [pc, #200]	; (5db4 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    5cec:	23ba      	movs	r3, #186	; 0xba
    5cee:	33ff      	adds	r3, #255	; 0xff
    5cf0:	5ccb      	ldrb	r3, [r1, r3]
    5cf2:	22dd      	movs	r2, #221	; 0xdd
    5cf4:	0052      	lsls	r2, r2, #1
    5cf6:	5c8a      	ldrb	r2, [r1, r2]
    5cf8:	0212      	lsls	r2, r2, #8
    5cfa:	431a      	orrs	r2, r3
    5cfc:	23bc      	movs	r3, #188	; 0xbc
    5cfe:	33ff      	adds	r3, #255	; 0xff
    5d00:	5ccb      	ldrb	r3, [r1, r3]
    5d02:	041b      	lsls	r3, r3, #16
    5d04:	431a      	orrs	r2, r3
    5d06:	23de      	movs	r3, #222	; 0xde
    5d08:	005b      	lsls	r3, r3, #1
    5d0a:	5ccb      	ldrb	r3, [r1, r3]
    5d0c:	061b      	lsls	r3, r3, #24
    5d0e:	4313      	orrs	r3, r2
    5d10:	4599      	cmp	r9, r3
    5d12:	d302      	bcc.n	5d1a <LORAREG_GetAttr_DutyCycleTimer+0xea>
	    minDutyCycleTimer = minimSubBandTimer;
    5d14:	464b      	mov	r3, r9
    5d16:	9303      	str	r3, [sp, #12]
    5d18:	e013      	b.n	5d42 <LORAREG_GetAttr_DutyCycleTimer+0x112>
	    minDutyCycleTimer = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout;
    5d1a:	4926      	ldr	r1, [pc, #152]	; (5db4 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    5d1c:	23ba      	movs	r3, #186	; 0xba
    5d1e:	33ff      	adds	r3, #255	; 0xff
    5d20:	5ccb      	ldrb	r3, [r1, r3]
    5d22:	22dd      	movs	r2, #221	; 0xdd
    5d24:	0052      	lsls	r2, r2, #1
    5d26:	5c8a      	ldrb	r2, [r1, r2]
    5d28:	0212      	lsls	r2, r2, #8
    5d2a:	431a      	orrs	r2, r3
    5d2c:	23bc      	movs	r3, #188	; 0xbc
    5d2e:	33ff      	adds	r3, #255	; 0xff
    5d30:	5ccb      	ldrb	r3, [r1, r3]
    5d32:	041b      	lsls	r3, r3, #16
    5d34:	431a      	orrs	r2, r3
    5d36:	23de      	movs	r3, #222	; 0xde
    5d38:	005b      	lsls	r3, r3, #1
    5d3a:	5ccb      	ldrb	r3, [r1, r3]
    5d3c:	061b      	lsls	r3, r3, #24
    5d3e:	4313      	orrs	r3, r2
    5d40:	9303      	str	r3, [sp, #12]
    ticks = SwTimerReadValue (RegParams.pDutyCycleTimer->timerId);
    5d42:	491c      	ldr	r1, [pc, #112]	; (5db4 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    5d44:	7c0b      	ldrb	r3, [r1, #16]
    5d46:	7c4a      	ldrb	r2, [r1, #17]
    5d48:	0212      	lsls	r2, r2, #8
    5d4a:	431a      	orrs	r2, r3
    5d4c:	7c8b      	ldrb	r3, [r1, #18]
    5d4e:	041b      	lsls	r3, r3, #16
    5d50:	431a      	orrs	r2, r3
    5d52:	7ccb      	ldrb	r3, [r1, #19]
    5d54:	061b      	lsls	r3, r3, #24
    5d56:	4313      	orrs	r3, r2
    5d58:	7918      	ldrb	r0, [r3, #4]
    5d5a:	4b17      	ldr	r3, [pc, #92]	; (5db8 <LORAREG_GetAttr_DutyCycleTimer+0x188>)
    5d5c:	4798      	blx	r3
	if( minDutyCycleTimer != 0)
    5d5e:	9e03      	ldr	r6, [sp, #12]
    5d60:	2e00      	cmp	r6, #0
    5d62:	d01b      	beq.n	5d9c <LORAREG_GetAttr_DutyCycleTimer+0x16c>
    delta = RegParams.pDutyCycleTimer->lastTimerValue - US_TO_MS(ticks);
    5d64:	4913      	ldr	r1, [pc, #76]	; (5db4 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    5d66:	7c0b      	ldrb	r3, [r1, #16]
    5d68:	7c4a      	ldrb	r2, [r1, #17]
    5d6a:	0212      	lsls	r2, r2, #8
    5d6c:	431a      	orrs	r2, r3
    5d6e:	7c8b      	ldrb	r3, [r1, #18]
    5d70:	041b      	lsls	r3, r3, #16
    5d72:	431a      	orrs	r2, r3
    5d74:	7ccb      	ldrb	r3, [r1, #19]
    5d76:	061b      	lsls	r3, r3, #24
    5d78:	4313      	orrs	r3, r2
    5d7a:	781d      	ldrb	r5, [r3, #0]
    5d7c:	785a      	ldrb	r2, [r3, #1]
    5d7e:	0212      	lsls	r2, r2, #8
    5d80:	432a      	orrs	r2, r5
    5d82:	789d      	ldrb	r5, [r3, #2]
    5d84:	042d      	lsls	r5, r5, #16
    5d86:	432a      	orrs	r2, r5
    5d88:	78dd      	ldrb	r5, [r3, #3]
    5d8a:	062d      	lsls	r5, r5, #24
    5d8c:	4315      	orrs	r5, r2
    5d8e:	21fa      	movs	r1, #250	; 0xfa
    5d90:	0089      	lsls	r1, r1, #2
    5d92:	4b0a      	ldr	r3, [pc, #40]	; (5dbc <LORAREG_GetAttr_DutyCycleTimer+0x18c>)
    5d94:	4798      	blx	r3
    5d96:	1a2d      	subs	r5, r5, r0
		minDutyCycleTimer = minDutyCycleTimer - delta; //Logically delta will not be greater than minDcTimer
    5d98:	1b75      	subs	r5, r6, r5
    5d9a:	9503      	str	r5, [sp, #12]
    memcpy(attrOutput,&minDutyCycleTimer,sizeof(uint32_t));
    5d9c:	2204      	movs	r2, #4
    5d9e:	a903      	add	r1, sp, #12
    5da0:	9800      	ldr	r0, [sp, #0]
    5da2:	4b07      	ldr	r3, [pc, #28]	; (5dc0 <LORAREG_GetAttr_DutyCycleTimer+0x190>)
    5da4:	4798      	blx	r3
}
    5da6:	2008      	movs	r0, #8
    5da8:	b004      	add	sp, #16
    5daa:	bc1c      	pop	{r2, r3, r4}
    5dac:	4690      	mov	r8, r2
    5dae:	4699      	mov	r9, r3
    5db0:	46a2      	mov	sl, r4
    5db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5db4:	20000fc0 	.word	0x20000fc0
    5db8:	000097b5 	.word	0x000097b5
    5dbc:	00011769 	.word	0x00011769
    5dc0:	00014ecd 	.word	0x00014ecd

00005dc4 <LORAREG_GetAttr_Rx1WindowparamsType2>:
{
    5dc4:	b500      	push	{lr}
    5dc6:	b083      	sub	sp, #12
    5dc8:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    5dca:	784a      	ldrb	r2, [r1, #1]
    5dcc:	788b      	ldrb	r3, [r1, #2]
    if (rx1WindowParamReq->currDr >= rx1WindowParamReq->drOffset)
    5dce:	429a      	cmp	r2, r3
    5dd0:	d925      	bls.n	5e1e <LORAREG_GetAttr_Rx1WindowparamsType2+0x5a>
        rx1WindowParams->rx1Dr = DR0;
    5dd2:	2300      	movs	r3, #0
    5dd4:	466a      	mov	r2, sp
    5dd6:	7113      	strb	r3, [r2, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;			
    5dd8:	4913      	ldr	r1, [pc, #76]	; (5e28 <LORAREG_GetAttr_Rx1WindowparamsType2+0x64>)
    5dda:	7a0b      	ldrb	r3, [r1, #8]
    5ddc:	7a4a      	ldrb	r2, [r1, #9]
    5dde:	0212      	lsls	r2, r2, #8
    5de0:	4313      	orrs	r3, r2
    5de2:	7a8a      	ldrb	r2, [r1, #10]
    5de4:	0412      	lsls	r2, r2, #16
    5de6:	431a      	orrs	r2, r3
    5de8:	7acb      	ldrb	r3, [r1, #11]
    5dea:	061b      	lsls	r3, r3, #24
    5dec:	431a      	orrs	r2, r3
    5dee:	232f      	movs	r3, #47	; 0x2f
    5df0:	5cc9      	ldrb	r1, [r1, r3]
    5df2:	004b      	lsls	r3, r1, #1
    5df4:	185b      	adds	r3, r3, r1
    5df6:	009b      	lsls	r3, r3, #2
    5df8:	189b      	adds	r3, r3, r2
    5dfa:	7919      	ldrb	r1, [r3, #4]
    5dfc:	795a      	ldrb	r2, [r3, #5]
    5dfe:	0212      	lsls	r2, r2, #8
    5e00:	4311      	orrs	r1, r2
    5e02:	799a      	ldrb	r2, [r3, #6]
    5e04:	0412      	lsls	r2, r2, #16
    5e06:	430a      	orrs	r2, r1
    5e08:	79db      	ldrb	r3, [r3, #7]
    5e0a:	061b      	lsls	r3, r3, #24
    5e0c:	4313      	orrs	r3, r2
    5e0e:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    5e10:	2208      	movs	r2, #8
    5e12:	4669      	mov	r1, sp
    5e14:	4b05      	ldr	r3, [pc, #20]	; (5e2c <LORAREG_GetAttr_Rx1WindowparamsType2+0x68>)
    5e16:	4798      	blx	r3
}
    5e18:	2008      	movs	r0, #8
    5e1a:	b003      	add	sp, #12
    5e1c:	bd00      	pop	{pc}
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - rx1WindowParamReq->drOffset;
    5e1e:	1a9b      	subs	r3, r3, r2
    5e20:	466a      	mov	r2, sp
    5e22:	7113      	strb	r3, [r2, #4]
    5e24:	e7d8      	b.n	5dd8 <LORAREG_GetAttr_Rx1WindowparamsType2+0x14>
    5e26:	46c0      	nop			; (mov r8, r8)
    5e28:	20000fc0 	.word	0x20000fc0
    5e2c:	00014ecd 	.word	0x00014ecd

00005e30 <LORAREG_GetAttr_DRangeChBandT2>:
{
    5e30:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e32:	46c6      	mov	lr, r8
    5e34:	b500      	push	{lr}
    5e36:	b082      	sub	sp, #8
    5e38:	4690      	mov	r8, r2
	memcpy(&bandDrReq,(BandDrReq_t *)attrInput,sizeof(BandDrReq_t));
    5e3a:	ad01      	add	r5, sp, #4
    5e3c:	2204      	movs	r2, #4
    5e3e:	0028      	movs	r0, r5
    5e40:	4b38      	ldr	r3, [pc, #224]	; (5f24 <LORAREG_GetAttr_DRangeChBandT2+0xf4>)
    5e42:	4798      	blx	r3
	switch (chMaskCntl)
    5e44:	782b      	ldrb	r3, [r5, #0]
    5e46:	2b00      	cmp	r3, #0
    5e48:	d017      	beq.n	5e7a <LORAREG_GetAttr_DRangeChBandT2+0x4a>
    5e4a:	2b06      	cmp	r3, #6
    5e4c:	d159      	bne.n	5f02 <LORAREG_GetAttr_DRangeChBandT2+0xd2>
			for (i = 0; i < RegParams.maxChannels; i++)
    5e4e:	3324      	adds	r3, #36	; 0x24
    5e50:	4a35      	ldr	r2, [pc, #212]	; (5f28 <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    5e52:	56d7      	ldrsb	r7, [r2, r3]
    5e54:	2000      	movs	r0, #0
    5e56:	2507      	movs	r5, #7
    5e58:	2f00      	cmp	r7, #0
    5e5a:	dd54      	ble.n	5f06 <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    5e5c:	4a32      	ldr	r2, [pc, #200]	; (5f28 <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    5e5e:	7916      	ldrb	r6, [r2, #4]
    5e60:	7953      	ldrb	r3, [r2, #5]
    5e62:	021b      	lsls	r3, r3, #8
    5e64:	4333      	orrs	r3, r6
    5e66:	7996      	ldrb	r6, [r2, #6]
    5e68:	0436      	lsls	r6, r6, #16
    5e6a:	4333      	orrs	r3, r6
    5e6c:	79d6      	ldrb	r6, [r2, #7]
    5e6e:	0636      	lsls	r6, r6, #24
    5e70:	431e      	orrs	r6, r3
    5e72:	2000      	movs	r0, #0
    5e74:	2507      	movs	r5, #7
    5e76:	2200      	movs	r2, #0
    5e78:	e035      	b.n	5ee6 <LORAREG_GetAttr_DRangeChBandT2+0xb6>
			for (i = 0; i < RegParams.maxChannels; i++)
    5e7a:	232a      	movs	r3, #42	; 0x2a
    5e7c:	4a2a      	ldr	r2, [pc, #168]	; (5f28 <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    5e7e:	56d3      	ldrsb	r3, [r2, r3]
    5e80:	469c      	mov	ip, r3
    5e82:	2b00      	cmp	r3, #0
    5e84:	dd4a      	ble.n	5f1c <LORAREG_GetAttr_DRangeChBandT2+0xec>
		chBandDr = getChBandDrT2(bandDrReq.chnlMaskCntl,bandDrReq.chnlMask);
    5e86:	ab01      	add	r3, sp, #4
    5e88:	885e      	ldrh	r6, [r3, #2]
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    5e8a:	7917      	ldrb	r7, [r2, #4]
    5e8c:	7953      	ldrb	r3, [r2, #5]
    5e8e:	021b      	lsls	r3, r3, #8
    5e90:	433b      	orrs	r3, r7
    5e92:	7997      	ldrb	r7, [r2, #6]
    5e94:	043f      	lsls	r7, r7, #16
    5e96:	433b      	orrs	r3, r7
    5e98:	79d7      	ldrb	r7, [r2, #7]
    5e9a:	063f      	lsls	r7, r7, #24
    5e9c:	431f      	orrs	r7, r3
    5e9e:	2000      	movs	r0, #0
    5ea0:	2507      	movs	r5, #7
    5ea2:	2200      	movs	r2, #0
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    5ea4:	2401      	movs	r4, #1
    5ea6:	e00b      	b.n	5ec0 <LORAREG_GetAttr_DRangeChBandT2+0x90>
    5ea8:	784b      	ldrb	r3, [r1, #1]
    5eaa:	091b      	lsrs	r3, r3, #4
    5eac:	4283      	cmp	r3, r0
    5eae:	dd02      	ble.n	5eb6 <LORAREG_GetAttr_DRangeChBandT2+0x86>
    5eb0:	4234      	tst	r4, r6
    5eb2:	d000      	beq.n	5eb6 <LORAREG_GetAttr_DRangeChBandT2+0x86>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    5eb4:	0018      	movs	r0, r3
				auxChannelMask = auxChannelMask >> SHIFT1;
    5eb6:	0876      	lsrs	r6, r6, #1
			for (i = 0; i < RegParams.maxChannels; i++)
    5eb8:	3201      	adds	r2, #1
    5eba:	b2d2      	uxtb	r2, r2
    5ebc:	4562      	cmp	r2, ip
    5ebe:	da22      	bge.n	5f06 <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    5ec0:	0051      	lsls	r1, r2, #1
    5ec2:	1879      	adds	r1, r7, r1
    5ec4:	784b      	ldrb	r3, [r1, #1]
    5ec6:	071b      	lsls	r3, r3, #28
    5ec8:	0f1b      	lsrs	r3, r3, #28
    5eca:	42ab      	cmp	r3, r5
    5ecc:	daec      	bge.n	5ea8 <LORAREG_GetAttr_DRangeChBandT2+0x78>
    5ece:	4234      	tst	r4, r6
    5ed0:	d0f1      	beq.n	5eb6 <LORAREG_GetAttr_DRangeChBandT2+0x86>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    5ed2:	001d      	movs	r5, r3
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    5ed4:	784b      	ldrb	r3, [r1, #1]
    5ed6:	091b      	lsrs	r3, r3, #4
    5ed8:	4298      	cmp	r0, r3
    5eda:	dbeb      	blt.n	5eb4 <LORAREG_GetAttr_DRangeChBandT2+0x84>
    5edc:	e7eb      	b.n	5eb6 <LORAREG_GetAttr_DRangeChBandT2+0x86>
			for (i = 0; i < RegParams.maxChannels; i++)
    5ede:	3201      	adds	r2, #1
    5ee0:	b2d2      	uxtb	r2, r2
    5ee2:	42ba      	cmp	r2, r7
    5ee4:	da0f      	bge.n	5f06 <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    5ee6:	0051      	lsls	r1, r2, #1
    5ee8:	1871      	adds	r1, r6, r1
    5eea:	784b      	ldrb	r3, [r1, #1]
    5eec:	071b      	lsls	r3, r3, #28
    5eee:	0f1b      	lsrs	r3, r3, #28
    5ef0:	42ab      	cmp	r3, r5
    5ef2:	da00      	bge.n	5ef6 <LORAREG_GetAttr_DRangeChBandT2+0xc6>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    5ef4:	001d      	movs	r5, r3
				if (RegParams.pChParams[i].dataRange.max > auxMaxDataRate)
    5ef6:	784b      	ldrb	r3, [r1, #1]
    5ef8:	091b      	lsrs	r3, r3, #4
    5efa:	4283      	cmp	r3, r0
    5efc:	ddef      	ble.n	5ede <LORAREG_GetAttr_DRangeChBandT2+0xae>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    5efe:	0018      	movs	r0, r3
    5f00:	e7ed      	b.n	5ede <LORAREG_GetAttr_DRangeChBandT2+0xae>
			auxMaxDataRate = 0xFF;
    5f02:	20ff      	movs	r0, #255	; 0xff
			auxMinDataRate = 0xFF;
    5f04:	25ff      	movs	r5, #255	; 0xff
    5f06:	0100      	lsls	r0, r0, #4
    5f08:	230f      	movs	r3, #15
    5f0a:	401d      	ands	r5, r3
    5f0c:	4328      	orrs	r0, r5
		memcpy(attrOutput,&chBandDr,sizeof(DataRange_t));
    5f0e:	4643      	mov	r3, r8
    5f10:	7018      	strb	r0, [r3, #0]
}
    5f12:	2008      	movs	r0, #8
    5f14:	b002      	add	sp, #8
    5f16:	bc04      	pop	{r2}
    5f18:	4690      	mov	r8, r2
    5f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			for (i = 0; i < RegParams.maxChannels; i++)
    5f1c:	2000      	movs	r0, #0
    5f1e:	2507      	movs	r5, #7
    5f20:	e7f1      	b.n	5f06 <LORAREG_GetAttr_DRangeChBandT2+0xd6>
    5f22:	46c0      	nop			; (mov r8, r8)
    5f24:	00014ecd 	.word	0x00014ecd
    5f28:	20000fc0 	.word	0x20000fc0

00005f2c <LORAREG_GetAttr_FreqT2>:
{
    5f2c:	b510      	push	{r4, lr}
    5f2e:	0014      	movs	r4, r2
	channelId = *(uint8_t *)attrInput;
    5f30:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels)
    5f32:	222a      	movs	r2, #42	; 0x2a
    5f34:	490d      	ldr	r1, [pc, #52]	; (5f6c <LORAREG_GetAttr_FreqT2+0x40>)
    5f36:	568a      	ldrsb	r2, [r1, r2]
		return LORAWAN_INVALID_PARAMETER;
    5f38:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels)
    5f3a:	4293      	cmp	r3, r2
    5f3c:	dd00      	ble.n	5f40 <LORAREG_GetAttr_FreqT2+0x14>
}
    5f3e:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,(&RegParams.pOtherChParams[channelId].ulfrequency),sizeof(uint32_t));
    5f40:	0008      	movs	r0, r1
    5f42:	7a09      	ldrb	r1, [r1, #8]
    5f44:	7a42      	ldrb	r2, [r0, #9]
    5f46:	0212      	lsls	r2, r2, #8
    5f48:	430a      	orrs	r2, r1
    5f4a:	7a81      	ldrb	r1, [r0, #10]
    5f4c:	0409      	lsls	r1, r1, #16
    5f4e:	430a      	orrs	r2, r1
    5f50:	7ac1      	ldrb	r1, [r0, #11]
    5f52:	0609      	lsls	r1, r1, #24
    5f54:	4311      	orrs	r1, r2
    5f56:	005a      	lsls	r2, r3, #1
    5f58:	18d3      	adds	r3, r2, r3
    5f5a:	009b      	lsls	r3, r3, #2
    5f5c:	18c9      	adds	r1, r1, r3
    5f5e:	2204      	movs	r2, #4
    5f60:	0020      	movs	r0, r4
    5f62:	4b03      	ldr	r3, [pc, #12]	; (5f70 <LORAREG_GetAttr_FreqT2+0x44>)
    5f64:	4798      	blx	r3
	return result;
    5f66:	2008      	movs	r0, #8
    5f68:	e7e9      	b.n	5f3e <LORAREG_GetAttr_FreqT2+0x12>
    5f6a:	46c0      	nop			; (mov r8, r8)
    5f6c:	20000fc0 	.word	0x20000fc0
    5f70:	00014ecd 	.word	0x00014ecd

00005f74 <LORAREG_GetAttr_Rx1WindowparamsType4>:
{
    5f74:	b510      	push	{r4, lr}
    5f76:	b082      	sub	sp, #8
    5f78:	0010      	movs	r0, r2
	if((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923)) != 0) &&  rx1WindowParamReq->joining)
    5f7a:	232e      	movs	r3, #46	; 0x2e
    5f7c:	4a37      	ldr	r2, [pc, #220]	; (605c <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    5f7e:	5cd2      	ldrb	r2, [r2, r3]
    5f80:	4b37      	ldr	r3, [pc, #220]	; (6060 <LORAREG_GetAttr_Rx1WindowparamsType4+0xec>)
    5f82:	4113      	asrs	r3, r2
    5f84:	07db      	lsls	r3, r3, #31
    5f86:	d502      	bpl.n	5f8e <LORAREG_GetAttr_Rx1WindowparamsType4+0x1a>
    5f88:	780b      	ldrb	r3, [r1, #0]
    5f8a:	2b00      	cmp	r3, #0
    5f8c:	d116      	bne.n	5fbc <LORAREG_GetAttr_Rx1WindowparamsType4+0x48>
	if(RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1)
    5f8e:	23e1      	movs	r3, #225	; 0xe1
    5f90:	005b      	lsls	r3, r3, #1
    5f92:	4a32      	ldr	r2, [pc, #200]	; (605c <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    5f94:	5cd4      	ldrb	r4, [r2, r3]
		minDR = DR2;
    5f96:	3bc1      	subs	r3, #193	; 0xc1
    5f98:	3bff      	subs	r3, #255	; 0xff
    5f9a:	401c      	ands	r4, r3
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    5f9c:	784b      	ldrb	r3, [r1, #1]
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    5f9e:	2b05      	cmp	r3, #5
    5fa0:	d92c      	bls.n	5ffc <LORAREG_GetAttr_Rx1WindowparamsType4+0x88>
    5fa2:	2205      	movs	r2, #5
    5fa4:	1ad3      	subs	r3, r2, r3
    5fa6:	b25b      	sxtb	r3, r3
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    5fa8:	788a      	ldrb	r2, [r1, #2]
	if (rx1WindowParamReq->currDr >= effectiveDROffset)
    5faa:	429a      	cmp	r2, r3
    5fac:	db31      	blt.n	6012 <LORAREG_GetAttr_Rx1WindowparamsType4+0x9e>
		rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    5fae:	1ad3      	subs	r3, r2, r3
    5fb0:	b2db      	uxtb	r3, r3
		if(rx1WindowParams->rx1Dr < minDR)
    5fb2:	42a3      	cmp	r3, r4
    5fb4:	d224      	bcs.n	6000 <LORAREG_GetAttr_Rx1WindowparamsType4+0x8c>
			rx1WindowParams->rx1Dr = minDR;
    5fb6:	466b      	mov	r3, sp
    5fb8:	711c      	strb	r4, [r3, #4]
    5fba:	e02c      	b.n	6016 <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
		rx1WindowParams->rx1Dr = DR2;
    5fbc:	2302      	movs	r3, #2
    5fbe:	466a      	mov	r2, sp
    5fc0:	7113      	strb	r3, [r2, #4]
		rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;
    5fc2:	4926      	ldr	r1, [pc, #152]	; (605c <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    5fc4:	7a0b      	ldrb	r3, [r1, #8]
    5fc6:	7a4a      	ldrb	r2, [r1, #9]
    5fc8:	0212      	lsls	r2, r2, #8
    5fca:	4313      	orrs	r3, r2
    5fcc:	7a8a      	ldrb	r2, [r1, #10]
    5fce:	0412      	lsls	r2, r2, #16
    5fd0:	431a      	orrs	r2, r3
    5fd2:	7acb      	ldrb	r3, [r1, #11]
    5fd4:	061b      	lsls	r3, r3, #24
    5fd6:	431a      	orrs	r2, r3
    5fd8:	232f      	movs	r3, #47	; 0x2f
    5fda:	5cc9      	ldrb	r1, [r1, r3]
    5fdc:	004b      	lsls	r3, r1, #1
    5fde:	185b      	adds	r3, r3, r1
    5fe0:	009b      	lsls	r3, r3, #2
    5fe2:	189b      	adds	r3, r3, r2
    5fe4:	7919      	ldrb	r1, [r3, #4]
    5fe6:	795a      	ldrb	r2, [r3, #5]
    5fe8:	0212      	lsls	r2, r2, #8
    5fea:	4311      	orrs	r1, r2
    5fec:	799a      	ldrb	r2, [r3, #6]
    5fee:	0412      	lsls	r2, r2, #16
    5ff0:	430a      	orrs	r2, r1
    5ff2:	79db      	ldrb	r3, [r3, #7]
    5ff4:	061b      	lsls	r3, r3, #24
    5ff6:	4313      	orrs	r3, r2
    5ff8:	9300      	str	r3, [sp, #0]
    5ffa:	e028      	b.n	604e <LORAREG_GetAttr_Rx1WindowparamsType4+0xda>
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    5ffc:	b25b      	sxtb	r3, r3
    5ffe:	e7d3      	b.n	5fa8 <LORAREG_GetAttr_Rx1WindowparamsType4+0x34>
		else if(rx1WindowParams->rx1Dr > maxDR)
    6000:	2b05      	cmp	r3, #5
    6002:	d802      	bhi.n	600a <LORAREG_GetAttr_Rx1WindowparamsType4+0x96>
		rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    6004:	466a      	mov	r2, sp
    6006:	7113      	strb	r3, [r2, #4]
    6008:	e005      	b.n	6016 <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
			rx1WindowParams->rx1Dr = maxDR;
    600a:	2305      	movs	r3, #5
    600c:	466a      	mov	r2, sp
    600e:	7113      	strb	r3, [r2, #4]
    6010:	e001      	b.n	6016 <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
		rx1WindowParams->rx1Dr = minDR;
    6012:	466b      	mov	r3, sp
    6014:	711c      	strb	r4, [r3, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;
    6016:	4911      	ldr	r1, [pc, #68]	; (605c <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    6018:	7a0b      	ldrb	r3, [r1, #8]
    601a:	7a4a      	ldrb	r2, [r1, #9]
    601c:	0212      	lsls	r2, r2, #8
    601e:	4313      	orrs	r3, r2
    6020:	7a8a      	ldrb	r2, [r1, #10]
    6022:	0412      	lsls	r2, r2, #16
    6024:	431a      	orrs	r2, r3
    6026:	7acb      	ldrb	r3, [r1, #11]
    6028:	061b      	lsls	r3, r3, #24
    602a:	431a      	orrs	r2, r3
    602c:	232f      	movs	r3, #47	; 0x2f
    602e:	5cc9      	ldrb	r1, [r1, r3]
    6030:	004b      	lsls	r3, r1, #1
    6032:	185b      	adds	r3, r3, r1
    6034:	009b      	lsls	r3, r3, #2
    6036:	189b      	adds	r3, r3, r2
    6038:	7919      	ldrb	r1, [r3, #4]
    603a:	795a      	ldrb	r2, [r3, #5]
    603c:	0212      	lsls	r2, r2, #8
    603e:	4311      	orrs	r1, r2
    6040:	799a      	ldrb	r2, [r3, #6]
    6042:	0412      	lsls	r2, r2, #16
    6044:	430a      	orrs	r2, r1
    6046:	79db      	ldrb	r3, [r3, #7]
    6048:	061b      	lsls	r3, r3, #24
    604a:	4313      	orrs	r3, r2
    604c:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    604e:	2208      	movs	r2, #8
    6050:	4669      	mov	r1, sp
    6052:	4b04      	ldr	r3, [pc, #16]	; (6064 <LORAREG_GetAttr_Rx1WindowparamsType4+0xf0>)
    6054:	4798      	blx	r3
}
    6056:	2008      	movs	r0, #8
    6058:	b002      	add	sp, #8
    605a:	bd10      	pop	{r4, pc}
    605c:	20000fc0 	.word	0x20000fc0
    6060:	00007fe0 	.word	0x00007fe0
    6064:	00014ecd 	.word	0x00014ecd

00006068 <LORAREG_GetAttr_FreqT3>:
{
    6068:	b510      	push	{r4, lr}
    606a:	0014      	movs	r4, r2
	channelId = *(uint8_t *)attrInput;
    606c:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels) 
    606e:	222a      	movs	r2, #42	; 0x2a
    6070:	490d      	ldr	r1, [pc, #52]	; (60a8 <LORAREG_GetAttr_FreqT3+0x40>)
    6072:	568a      	ldrsb	r2, [r1, r2]
		result = LORAWAN_INVALID_PARAMETER;
    6074:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels) 
    6076:	4293      	cmp	r3, r2
    6078:	dd00      	ble.n	607c <LORAREG_GetAttr_FreqT3+0x14>
}
    607a:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,(&RegParams.pOtherChParams[channelId].ulfrequency),sizeof(uint32_t));
    607c:	0008      	movs	r0, r1
    607e:	7a09      	ldrb	r1, [r1, #8]
    6080:	7a42      	ldrb	r2, [r0, #9]
    6082:	0212      	lsls	r2, r2, #8
    6084:	430a      	orrs	r2, r1
    6086:	7a81      	ldrb	r1, [r0, #10]
    6088:	0409      	lsls	r1, r1, #16
    608a:	430a      	orrs	r2, r1
    608c:	7ac1      	ldrb	r1, [r0, #11]
    608e:	0609      	lsls	r1, r1, #24
    6090:	4311      	orrs	r1, r2
    6092:	005a      	lsls	r2, r3, #1
    6094:	18d3      	adds	r3, r2, r3
    6096:	009b      	lsls	r3, r3, #2
    6098:	18c9      	adds	r1, r1, r3
    609a:	2204      	movs	r2, #4
    609c:	0020      	movs	r0, r4
    609e:	4b03      	ldr	r3, [pc, #12]	; (60ac <LORAREG_GetAttr_FreqT3+0x44>)
    60a0:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    60a2:	2008      	movs	r0, #8
    60a4:	e7e9      	b.n	607a <LORAREG_GetAttr_FreqT3+0x12>
    60a6:	46c0      	nop			; (mov r8, r8)
    60a8:	20000fc0 	.word	0x20000fc0
    60ac:	00014ecd 	.word	0x00014ecd

000060b0 <LORAREG_GetAttr_Rx1WindowparamsType3>:
{
    60b0:	b500      	push	{lr}
    60b2:	b083      	sub	sp, #12
    60b4:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    60b6:	784b      	ldrb	r3, [r1, #1]
    60b8:	788a      	ldrb	r2, [r1, #2]
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    60ba:	2b05      	cmp	r3, #5
    60bc:	d90b      	bls.n	60d6 <LORAREG_GetAttr_Rx1WindowparamsType3+0x26>
    60be:	2105      	movs	r1, #5
    60c0:	1acb      	subs	r3, r1, r3
    60c2:	b25b      	sxtb	r3, r3
    if (rx1WindowParamReq->currDr >= effectiveDROffset)
    60c4:	429a      	cmp	r2, r3
    60c6:	db0c      	blt.n	60e2 <LORAREG_GetAttr_Rx1WindowparamsType3+0x32>
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    60c8:	1ad3      	subs	r3, r2, r3
    60ca:	b2db      	uxtb	r3, r3
		else if(rx1WindowParams->rx1Dr > maxDR)
    60cc:	2b05      	cmp	r3, #5
    60ce:	d804      	bhi.n	60da <LORAREG_GetAttr_Rx1WindowparamsType3+0x2a>
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    60d0:	466a      	mov	r2, sp
    60d2:	7113      	strb	r3, [r2, #4]
    60d4:	e008      	b.n	60e8 <LORAREG_GetAttr_Rx1WindowparamsType3+0x38>
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    60d6:	b25b      	sxtb	r3, r3
    60d8:	e7f4      	b.n	60c4 <LORAREG_GetAttr_Rx1WindowparamsType3+0x14>
			rx1WindowParams->rx1Dr = maxDR;
    60da:	2305      	movs	r3, #5
    60dc:	466a      	mov	r2, sp
    60de:	7113      	strb	r3, [r2, #4]
    60e0:	e002      	b.n	60e8 <LORAREG_GetAttr_Rx1WindowparamsType3+0x38>
        rx1WindowParams->rx1Dr = minDR;
    60e2:	2300      	movs	r3, #0
    60e4:	466a      	mov	r2, sp
    60e6:	7113      	strb	r3, [r2, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;			
    60e8:	4911      	ldr	r1, [pc, #68]	; (6130 <LORAREG_GetAttr_Rx1WindowparamsType3+0x80>)
    60ea:	7a0b      	ldrb	r3, [r1, #8]
    60ec:	7a4a      	ldrb	r2, [r1, #9]
    60ee:	0212      	lsls	r2, r2, #8
    60f0:	4313      	orrs	r3, r2
    60f2:	7a8a      	ldrb	r2, [r1, #10]
    60f4:	0412      	lsls	r2, r2, #16
    60f6:	431a      	orrs	r2, r3
    60f8:	7acb      	ldrb	r3, [r1, #11]
    60fa:	061b      	lsls	r3, r3, #24
    60fc:	431a      	orrs	r2, r3
    60fe:	232f      	movs	r3, #47	; 0x2f
    6100:	5cc9      	ldrb	r1, [r1, r3]
    6102:	004b      	lsls	r3, r1, #1
    6104:	185b      	adds	r3, r3, r1
    6106:	009b      	lsls	r3, r3, #2
    6108:	189b      	adds	r3, r3, r2
    610a:	7919      	ldrb	r1, [r3, #4]
    610c:	795a      	ldrb	r2, [r3, #5]
    610e:	0212      	lsls	r2, r2, #8
    6110:	4311      	orrs	r1, r2
    6112:	799a      	ldrb	r2, [r3, #6]
    6114:	0412      	lsls	r2, r2, #16
    6116:	430a      	orrs	r2, r1
    6118:	79db      	ldrb	r3, [r3, #7]
    611a:	061b      	lsls	r3, r3, #24
    611c:	4313      	orrs	r3, r2
    611e:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    6120:	2208      	movs	r2, #8
    6122:	4669      	mov	r1, sp
    6124:	4b03      	ldr	r3, [pc, #12]	; (6134 <LORAREG_GetAttr_Rx1WindowparamsType3+0x84>)
    6126:	4798      	blx	r3
}
    6128:	2008      	movs	r0, #8
    612a:	b003      	add	sp, #12
    612c:	bd00      	pop	{pc}
    612e:	46c0      	nop			; (mov r8, r8)
    6130:	20000fc0 	.word	0x20000fc0
    6134:	00014ecd 	.word	0x00014ecd

00006138 <LORAREG_GetAttr_minLBTChPauseTimer>:
{
    6138:	b5f0      	push	{r4, r5, r6, r7, lr}
    613a:	46de      	mov	lr, fp
    613c:	4657      	mov	r7, sl
    613e:	464e      	mov	r6, r9
    6140:	4645      	mov	r5, r8
    6142:	b5e0      	push	{r5, r6, r7, lr}
    6144:	b085      	sub	sp, #20
    6146:	9200      	str	r2, [sp, #0]
	uint32_t minim = UINT32_MAX;
    6148:	2301      	movs	r3, #1
    614a:	425b      	negs	r3, r3
    614c:	9303      	str	r3, [sp, #12]
	currentDataRate = *(uint8_t *)attrInput;
    614e:	780b      	ldrb	r3, [r1, #0]
    6150:	4699      	mov	r9, r3
	for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    6152:	232a      	movs	r3, #42	; 0x2a
    6154:	4a2a      	ldr	r2, [pc, #168]	; (6200 <LORAREG_GetAttr_minLBTChPauseTimer+0xc8>)
    6156:	56d7      	ldrsb	r7, [r2, r3]
    6158:	2f00      	cmp	r7, #0
    615a:	dd40      	ble.n	61de <LORAREG_GetAttr_minLBTChPauseTimer+0xa6>
		if ( (RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) 
    615c:	7916      	ldrb	r6, [r2, #4]
    615e:	7953      	ldrb	r3, [r2, #5]
    6160:	021b      	lsls	r3, r3, #8
    6162:	4333      	orrs	r3, r6
    6164:	7996      	ldrb	r6, [r2, #6]
    6166:	0436      	lsls	r6, r6, #16
    6168:	4333      	orrs	r3, r6
    616a:	79d6      	ldrb	r6, [r2, #7]
    616c:	0636      	lsls	r6, r6, #24
    616e:	431e      	orrs	r6, r3
    6170:	2300      	movs	r3, #0
    6172:	469a      	mov	sl, r3
    6174:	3b01      	subs	r3, #1
    6176:	4698      	mov	r8, r3
    6178:	2300      	movs	r3, #0
    617a:	2100      	movs	r1, #0
    617c:	4694      	mov	ip, r2
			 && (currentDataRate >= RegParams.pChParams[i].dataRange.min) 
    617e:	464a      	mov	r2, r9
    6180:	9201      	str	r2, [sp, #4]
    6182:	46c3      	mov	fp, r8
    6184:	e004      	b.n	6190 <LORAREG_GetAttr_minLBTChPauseTimer+0x58>
	for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    6186:	3101      	adds	r1, #1
    6188:	b2c9      	uxtb	r1, r1
    618a:	000b      	movs	r3, r1
    618c:	42b9      	cmp	r1, r7
    618e:	da23      	bge.n	61d8 <LORAREG_GetAttr_minLBTChPauseTimer+0xa0>
		if ( (RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) 
    6190:	004a      	lsls	r2, r1, #1
    6192:	18b2      	adds	r2, r6, r2
    6194:	7814      	ldrb	r4, [r2, #0]
    6196:	2c00      	cmp	r4, #0
    6198:	d0f5      	beq.n	6186 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    619a:	3358      	adds	r3, #88	; 0x58
    619c:	009b      	lsls	r3, r3, #2
    619e:	4463      	add	r3, ip
    61a0:	7a18      	ldrb	r0, [r3, #8]
    61a2:	4680      	mov	r8, r0
    61a4:	7a58      	ldrb	r0, [r3, #9]
    61a6:	0200      	lsls	r0, r0, #8
    61a8:	4645      	mov	r5, r8
    61aa:	4305      	orrs	r5, r0
    61ac:	7a98      	ldrb	r0, [r3, #10]
    61ae:	0400      	lsls	r0, r0, #16
    61b0:	4328      	orrs	r0, r5
    61b2:	7adb      	ldrb	r3, [r3, #11]
    61b4:	061b      	lsls	r3, r3, #24
    61b6:	4303      	orrs	r3, r0
    61b8:	d0e5      	beq.n	6186 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
		     && (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) 
    61ba:	459b      	cmp	fp, r3
    61bc:	d3e3      	bcc.n	6186 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
			 && (currentDataRate >= RegParams.pChParams[i].dataRange.min) 
    61be:	7850      	ldrb	r0, [r2, #1]
    61c0:	0700      	lsls	r0, r0, #28
    61c2:	0f00      	lsrs	r0, r0, #28
    61c4:	4581      	cmp	r9, r0
    61c6:	dbde      	blt.n	6186 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
			 && (currentDataRate <= RegParams.pChParams[i].dataRange.max) )
    61c8:	7852      	ldrb	r2, [r2, #1]
    61ca:	0912      	lsrs	r2, r2, #4
    61cc:	9801      	ldr	r0, [sp, #4]
    61ce:	4290      	cmp	r0, r2
    61d0:	dcd9      	bgt.n	6186 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    61d2:	46a2      	mov	sl, r4
			minim = RegParams.cmnParams.paramsType2.channelTimer[i];
    61d4:	469b      	mov	fp, r3
    61d6:	e7d6      	b.n	6186 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    61d8:	4653      	mov	r3, sl
    61da:	2b00      	cmp	r3, #0
    61dc:	d10c      	bne.n	61f8 <LORAREG_GetAttr_minLBTChPauseTimer+0xc0>
	memcpy(attrOutput,&minim,sizeof(uint32_t));
    61de:	2204      	movs	r2, #4
    61e0:	a903      	add	r1, sp, #12
    61e2:	9800      	ldr	r0, [sp, #0]
    61e4:	4b07      	ldr	r3, [pc, #28]	; (6204 <LORAREG_GetAttr_minLBTChPauseTimer+0xcc>)
    61e6:	4798      	blx	r3
}
    61e8:	2008      	movs	r0, #8
    61ea:	b005      	add	sp, #20
    61ec:	bc3c      	pop	{r2, r3, r4, r5}
    61ee:	4690      	mov	r8, r2
    61f0:	4699      	mov	r9, r3
    61f2:	46a2      	mov	sl, r4
    61f4:	46ab      	mov	fp, r5
    61f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    61f8:	465b      	mov	r3, fp
    61fa:	9303      	str	r3, [sp, #12]
    61fc:	e7ef      	b.n	61de <LORAREG_GetAttr_minLBTChPauseTimer+0xa6>
    61fe:	46c0      	nop			; (mov r8, r8)
    6200:	20000fc0 	.word	0x20000fc0
    6204:	00014ecd 	.word	0x00014ecd

00006208 <ValidateTxFreqT2>:
{
    6208:	b500      	push	{lr}
    620a:	b083      	sub	sp, #12
	memcpy(&val_freqTx,attrInput,sizeof(ValUpdateFreqTx_t));
    620c:	2208      	movs	r2, #8
    620e:	4668      	mov	r0, sp
    6210:	4b04      	ldr	r3, [pc, #16]	; (6224 <ValidateTxFreqT2+0x1c>)
    6212:	4798      	blx	r3
	retVal = pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,(void *)&val_freqTx.frequencyNew);
    6214:	4b04      	ldr	r3, [pc, #16]	; (6228 <ValidateTxFreqT2+0x20>)
    6216:	685b      	ldr	r3, [r3, #4]
    6218:	4669      	mov	r1, sp
    621a:	2001      	movs	r0, #1
    621c:	4798      	blx	r3
}
    621e:	b003      	add	sp, #12
    6220:	bd00      	pop	{pc}
    6222:	46c0      	nop			; (mov r8, r8)
    6224:	00014ecd 	.word	0x00014ecd
    6228:	20000d30 	.word	0x20000d30

0000622c <ValidateFreqIN>:
{
    622c:	b500      	push	{lr}
    622e:	b083      	sub	sp, #12
	memcpy(&newFreq,attrInput,sizeof(uint32_t));
    6230:	2204      	movs	r2, #4
    6232:	a801      	add	r0, sp, #4
    6234:	4b06      	ldr	r3, [pc, #24]	; (6250 <ValidateFreqIN+0x24>)
    6236:	4798      	blx	r3
	if(newFreq > FREQ_867000KHZ || newFreq < FREQ_865000KHZ)
    6238:	9b01      	ldr	r3, [sp, #4]
    623a:	4a06      	ldr	r2, [pc, #24]	; (6254 <ValidateFreqIN+0x28>)
    623c:	4694      	mov	ip, r2
    623e:	4463      	add	r3, ip
    6240:	4a05      	ldr	r2, [pc, #20]	; (6258 <ValidateFreqIN+0x2c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    6242:	2008      	movs	r0, #8
	if(newFreq > FREQ_867000KHZ || newFreq < FREQ_865000KHZ)
    6244:	4293      	cmp	r3, r2
    6246:	d900      	bls.n	624a <ValidateFreqIN+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    6248:	3002      	adds	r0, #2
}
    624a:	b003      	add	sp, #12
    624c:	bd00      	pop	{pc}
    624e:	46c0      	nop			; (mov r8, r8)
    6250:	00014ecd 	.word	0x00014ecd
    6254:	cc7125c0 	.word	0xcc7125c0
    6258:	001e8480 	.word	0x001e8480

0000625c <ValidateFreqJP>:
{
    625c:	b500      	push	{lr}
    625e:	b083      	sub	sp, #12
	memcpy(&newFreq,attrInput,sizeof(uint32_t));
    6260:	2204      	movs	r2, #4
    6262:	a801      	add	r0, sp, #4
    6264:	4b06      	ldr	r3, [pc, #24]	; (6280 <ValidateFreqJP+0x24>)
    6266:	4798      	blx	r3
	if(newFreq > FREQ_928000KHZ || newFreq < FREQ_920000KHZ)
    6268:	9b01      	ldr	r3, [sp, #4]
    626a:	4a06      	ldr	r2, [pc, #24]	; (6284 <ValidateFreqJP+0x28>)
    626c:	4694      	mov	ip, r2
    626e:	4463      	add	r3, ip
    6270:	4a05      	ldr	r2, [pc, #20]	; (6288 <ValidateFreqJP+0x2c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    6272:	2008      	movs	r0, #8
	if(newFreq > FREQ_928000KHZ || newFreq < FREQ_920000KHZ)
    6274:	4293      	cmp	r3, r2
    6276:	d900      	bls.n	627a <ValidateFreqJP+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    6278:	3002      	adds	r0, #2
}
    627a:	b003      	add	sp, #12
    627c:	bd00      	pop	{pc}
    627e:	46c0      	nop			; (mov r8, r8)
    6280:	00014ecd 	.word	0x00014ecd
    6284:	c929ea00 	.word	0xc929ea00
    6288:	007a1200 	.word	0x007a1200

0000628c <ValidateFreqKR>:
{
    628c:	b500      	push	{lr}
    628e:	b083      	sub	sp, #12
	memcpy(&freqNew,attrInput,sizeof(uint32_t));
    6290:	2204      	movs	r2, #4
    6292:	a801      	add	r0, sp, #4
    6294:	4b0a      	ldr	r3, [pc, #40]	; (62c0 <ValidateFreqKR+0x34>)
    6296:	4798      	blx	r3
		if(freq == freqNew)
    6298:	9a01      	ldr	r2, [sp, #4]
    629a:	4b0a      	ldr	r3, [pc, #40]	; (62c4 <ValidateFreqKR+0x38>)
    629c:	429a      	cmp	r2, r3
    629e:	d00b      	beq.n	62b8 <ValidateFreqKR+0x2c>
    62a0:	4b09      	ldr	r3, [pc, #36]	; (62c8 <ValidateFreqKR+0x3c>)
	for(freq = FREQ_920900KHZ; freq <= FREQ_923300KHZ; freq += freqwidth)
    62a2:	490a      	ldr	r1, [pc, #40]	; (62cc <ValidateFreqKR+0x40>)
		if(freq == freqNew)
    62a4:	429a      	cmp	r2, r3
    62a6:	d009      	beq.n	62bc <ValidateFreqKR+0x30>
	for(freq = FREQ_920900KHZ; freq <= FREQ_923300KHZ; freq += freqwidth)
    62a8:	4809      	ldr	r0, [pc, #36]	; (62d0 <ValidateFreqKR+0x44>)
    62aa:	4684      	mov	ip, r0
    62ac:	4463      	add	r3, ip
    62ae:	428b      	cmp	r3, r1
    62b0:	d1f8      	bne.n	62a4 <ValidateFreqKR+0x18>
    StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    62b2:	200a      	movs	r0, #10
}
    62b4:	b003      	add	sp, #12
    62b6:	bd00      	pop	{pc}
			result = LORAWAN_SUCCESS;
    62b8:	2008      	movs	r0, #8
    62ba:	e7fb      	b.n	62b4 <ValidateFreqKR+0x28>
    62bc:	2008      	movs	r0, #8
    62be:	e7f9      	b.n	62b4 <ValidateFreqKR+0x28>
    62c0:	00014ecd 	.word	0x00014ecd
    62c4:	36e3d1a0 	.word	0x36e3d1a0
    62c8:	36e6dee0 	.word	0x36e6dee0
    62cc:	370b7de0 	.word	0x370b7de0
    62d0:	00030d40 	.word	0x00030d40

000062d4 <setNewChannelsT1>:
{
    62d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    62d6:	b083      	sub	sp, #12
	memcpy(&updateNewCh,attrInput,sizeof(UpdateNewCh_t));
    62d8:	ac01      	add	r4, sp, #4
    62da:	2204      	movs	r2, #4
    62dc:	0020      	movs	r0, r4
    62de:	4b1f      	ldr	r3, [pc, #124]	; (635c <setNewChannelsT1+0x88>)
    62e0:	4798      	blx	r3
	chMask = updateNewCh.channelMask;
    62e2:	8827      	ldrh	r7, [r4, #0]
	chMaskCtrl = updateNewCh.channelMaskCntl;
    62e4:	78a6      	ldrb	r6, [r4, #2]
    62e6:	466b      	mov	r3, sp
    62e8:	1cd9      	adds	r1, r3, #3
    62ea:	700e      	strb	r6, [r1, #0]
	if(ValidateChannelMaskCntl(CHANNEL_MASK_CNTL, &chMaskCtrl) == LORAWAN_SUCCESS)
    62ec:	201b      	movs	r0, #27
    62ee:	4b1c      	ldr	r3, [pc, #112]	; (6360 <setNewChannelsT1+0x8c>)
    62f0:	4798      	blx	r3
    62f2:	0005      	movs	r5, r0
    62f4:	2808      	cmp	r0, #8
    62f6:	d003      	beq.n	6300 <setNewChannelsT1+0x2c>
		retVal = LORAWAN_INVALID_PARAMETER;
    62f8:	250a      	movs	r5, #10
}
    62fa:	0028      	movs	r0, r5
    62fc:	b003      	add	sp, #12
    62fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch(chMaskCtrl)
    6300:	2e06      	cmp	r6, #6
    6302:	d01c      	beq.n	633e <setNewChannelsT1+0x6a>
    6304:	d80a      	bhi.n	631c <setNewChannelsT1+0x48>
    6306:	2e04      	cmp	r6, #4
    6308:	d8f7      	bhi.n	62fa <setNewChannelsT1+0x26>
		channel = chMaskCtrl << SHIFT4;
    630a:	0136      	lsls	r6, r6, #4
    630c:	b2f0      	uxtb	r0, r6
				EnableChannels2(channel, channel + 15, chMask);
    630e:	0001      	movs	r1, r0
    6310:	310f      	adds	r1, #15
    6312:	b2c9      	uxtb	r1, r1
    6314:	003a      	movs	r2, r7
    6316:	4b13      	ldr	r3, [pc, #76]	; (6364 <setNewChannelsT1+0x90>)
    6318:	4798      	blx	r3
				break;
    631a:	e7ee      	b.n	62fa <setNewChannelsT1+0x26>
		switch(chMaskCtrl)
    631c:	2400      	movs	r4, #0
    631e:	2e07      	cmp	r6, #7
    6320:	d1eb      	bne.n	62fa <setNewChannelsT1+0x26>
					UpdateChannelIdStatus(i, DISABLED);
    6322:	4e11      	ldr	r6, [pc, #68]	; (6368 <setNewChannelsT1+0x94>)
    6324:	2100      	movs	r1, #0
    6326:	0020      	movs	r0, r4
    6328:	47b0      	blx	r6
				for(i = 0; i< 63; i++)
    632a:	3401      	adds	r4, #1
    632c:	b2e4      	uxtb	r4, r4
    632e:	2c3f      	cmp	r4, #63	; 0x3f
    6330:	d1f8      	bne.n	6324 <setNewChannelsT1+0x50>
				EnableChannels2(64, 71, chMask);
    6332:	003a      	movs	r2, r7
    6334:	2147      	movs	r1, #71	; 0x47
    6336:	2040      	movs	r0, #64	; 0x40
    6338:	4b0a      	ldr	r3, [pc, #40]	; (6364 <setNewChannelsT1+0x90>)
    633a:	4798      	blx	r3
				break;
    633c:	e7dd      	b.n	62fa <setNewChannelsT1+0x26>
		switch(chMaskCtrl)
    633e:	2400      	movs	r4, #0
					UpdateChannelIdStatus(i, ENABLED);
    6340:	4e09      	ldr	r6, [pc, #36]	; (6368 <setNewChannelsT1+0x94>)
    6342:	2101      	movs	r1, #1
    6344:	0020      	movs	r0, r4
    6346:	47b0      	blx	r6
				for(i = 0; i < 63; i++)
    6348:	3401      	adds	r4, #1
    634a:	b2e4      	uxtb	r4, r4
    634c:	2c3f      	cmp	r4, #63	; 0x3f
    634e:	d1f8      	bne.n	6342 <setNewChannelsT1+0x6e>
				EnableChannels2(64, 71, chMask);
    6350:	003a      	movs	r2, r7
    6352:	2147      	movs	r1, #71	; 0x47
    6354:	2040      	movs	r0, #64	; 0x40
    6356:	4b03      	ldr	r3, [pc, #12]	; (6364 <setNewChannelsT1+0x90>)
    6358:	4798      	blx	r3
			    break;
    635a:	e7ce      	b.n	62fa <setNewChannelsT1+0x26>
    635c:	00014ecd 	.word	0x00014ecd
    6360:	0000515d 	.word	0x0000515d
    6364:	00005621 	.word	0x00005621
    6368:	00005395 	.word	0x00005395

0000636c <setDlFrequency>:
{
    636c:	b510      	push	{r4, lr}
    636e:	b084      	sub	sp, #16
	memcpy(&updateDlFreq,attrInput,sizeof(ValUpdateFreqTx_t));
    6370:	ac02      	add	r4, sp, #8
    6372:	2208      	movs	r2, #8
    6374:	0020      	movs	r0, r4
    6376:	4b1a      	ldr	r3, [pc, #104]	; (63e0 <setDlFrequency+0x74>)
    6378:	4798      	blx	r3
	Chid.channelIndex = updateDlFreq.channelIndex;
    637a:	ab01      	add	r3, sp, #4
    637c:	7922      	ldrb	r2, [r4, #4]
    637e:	701a      	strb	r2, [r3, #0]
		Chid.allowedForDefaultChannels = ALL_CHANNELS;
    6380:	2201      	movs	r2, #1
    6382:	705a      	strb	r2, [r3, #1]
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    6384:	4b17      	ldr	r3, [pc, #92]	; (63e4 <setDlFrequency+0x78>)
    6386:	685b      	ldr	r3, [r3, #4]
    6388:	0021      	movs	r1, r4
    638a:	2001      	movs	r0, #1
    638c:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    638e:	230a      	movs	r3, #10
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    6390:	2808      	cmp	r0, #8
    6392:	d002      	beq.n	639a <setDlFrequency+0x2e>
}
    6394:	0018      	movs	r0, r3
    6396:	b004      	add	sp, #16
    6398:	bd10      	pop	{r4, pc}
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    639a:	a901      	add	r1, sp, #4
    639c:	300d      	adds	r0, #13
    639e:	4b12      	ldr	r3, [pc, #72]	; (63e8 <setDlFrequency+0x7c>)
    63a0:	4798      	blx	r3
    63a2:	0003      	movs	r3, r0
    63a4:	2808      	cmp	r0, #8
    63a6:	d001      	beq.n	63ac <setDlFrequency+0x40>
		result = LORAWAN_INVALID_PARAMETER;
    63a8:	230a      	movs	r3, #10
    63aa:	e7f3      	b.n	6394 <setDlFrequency+0x28>
		RegParams.pOtherChParams[updateDlFreq.channelIndex].rx1Frequency = updateDlFreq.frequencyNew;
    63ac:	490f      	ldr	r1, [pc, #60]	; (63ec <setDlFrequency+0x80>)
    63ae:	7a0a      	ldrb	r2, [r1, #8]
    63b0:	7a48      	ldrb	r0, [r1, #9]
    63b2:	0200      	lsls	r0, r0, #8
    63b4:	4302      	orrs	r2, r0
    63b6:	7a88      	ldrb	r0, [r1, #10]
    63b8:	0400      	lsls	r0, r0, #16
    63ba:	4310      	orrs	r0, r2
    63bc:	7aca      	ldrb	r2, [r1, #11]
    63be:	0612      	lsls	r2, r2, #24
    63c0:	4310      	orrs	r0, r2
    63c2:	a902      	add	r1, sp, #8
    63c4:	790c      	ldrb	r4, [r1, #4]
    63c6:	0062      	lsls	r2, r4, #1
    63c8:	1912      	adds	r2, r2, r4
    63ca:	0092      	lsls	r2, r2, #2
    63cc:	1812      	adds	r2, r2, r0
    63ce:	7808      	ldrb	r0, [r1, #0]
    63d0:	7110      	strb	r0, [r2, #4]
    63d2:	7848      	ldrb	r0, [r1, #1]
    63d4:	7150      	strb	r0, [r2, #5]
    63d6:	7888      	ldrb	r0, [r1, #2]
    63d8:	7190      	strb	r0, [r2, #6]
    63da:	78c9      	ldrb	r1, [r1, #3]
    63dc:	71d1      	strb	r1, [r2, #7]
    63de:	e7d9      	b.n	6394 <setDlFrequency+0x28>
    63e0:	00014ecd 	.word	0x00014ecd
    63e4:	20000d30 	.word	0x20000d30
    63e8:	00005071 	.word	0x00005071
    63ec:	20000fc0 	.word	0x20000fc0

000063f0 <setFrequency>:
{
    63f0:	b570      	push	{r4, r5, r6, lr}
    63f2:	b084      	sub	sp, #16
	memcpy(&updateTxFreq,attrInput,sizeof(ValUpdateFreqTx_t));
    63f4:	ac02      	add	r4, sp, #8
    63f6:	2208      	movs	r2, #8
    63f8:	0020      	movs	r0, r4
    63fa:	4b39      	ldr	r3, [pc, #228]	; (64e0 <setFrequency+0xf0>)
    63fc:	4798      	blx	r3
	valChid.channelIndex = updateTxFreq.channelIndex;
    63fe:	ab01      	add	r3, sp, #4
    6400:	7922      	ldrb	r2, [r4, #4]
    6402:	701a      	strb	r2, [r3, #0]
	valChid.allowedForDefaultChannels = WITHOUT_DEFAULT_CHANNELS;
    6404:	2200      	movs	r2, #0
    6406:	705a      	strb	r2, [r3, #1]
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    6408:	4b36      	ldr	r3, [pc, #216]	; (64e4 <setFrequency+0xf4>)
    640a:	685b      	ldr	r3, [r3, #4]
    640c:	0021      	movs	r1, r4
    640e:	2001      	movs	r0, #1
    6410:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    6412:	240a      	movs	r4, #10
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    6414:	2808      	cmp	r0, #8
    6416:	d002      	beq.n	641e <setFrequency+0x2e>
}
    6418:	0020      	movs	r0, r4
    641a:	b004      	add	sp, #16
    641c:	bd70      	pop	{r4, r5, r6, pc}
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    641e:	a901      	add	r1, sp, #4
    6420:	300d      	adds	r0, #13
    6422:	4b31      	ldr	r3, [pc, #196]	; (64e8 <setFrequency+0xf8>)
    6424:	4798      	blx	r3
    6426:	0004      	movs	r4, r0
    6428:	2808      	cmp	r0, #8
    642a:	d001      	beq.n	6430 <setFrequency+0x40>
		result = LORAWAN_INVALID_PARAMETER;
    642c:	240a      	movs	r4, #10
    642e:	e7f3      	b.n	6418 <setFrequency+0x28>
		uint8_t chIndx = updateTxFreq.channelIndex;
    6430:	ab02      	add	r3, sp, #8
    6432:	791d      	ldrb	r5, [r3, #4]
		if((((1 << RegParams.band) & ((ISM_EUBAND) | (1 << ISM_JPN923))) != 0))
    6434:	232e      	movs	r3, #46	; 0x2e
    6436:	4a2d      	ldr	r2, [pc, #180]	; (64ec <setFrequency+0xfc>)
    6438:	5cd2      	ldrb	r2, [r2, r3]
    643a:	3b0b      	subs	r3, #11
    643c:	4113      	asrs	r3, r2
    643e:	07db      	lsls	r3, r3, #31
    6440:	d43a      	bmi.n	64b8 <setFrequency+0xc8>
		RegParams.pOtherChParams[chIndx].ulfrequency = updateTxFreq.frequencyNew;
    6442:	006b      	lsls	r3, r5, #1
    6444:	195b      	adds	r3, r3, r5
    6446:	0098      	lsls	r0, r3, #2
    6448:	a902      	add	r1, sp, #8
    644a:	9d02      	ldr	r5, [sp, #8]
    644c:	4b27      	ldr	r3, [pc, #156]	; (64ec <setFrequency+0xfc>)
    644e:	7a1a      	ldrb	r2, [r3, #8]
    6450:	7a5e      	ldrb	r6, [r3, #9]
    6452:	0236      	lsls	r6, r6, #8
    6454:	4316      	orrs	r6, r2
    6456:	7a9a      	ldrb	r2, [r3, #10]
    6458:	0412      	lsls	r2, r2, #16
    645a:	4316      	orrs	r6, r2
    645c:	7ada      	ldrb	r2, [r3, #11]
    645e:	0612      	lsls	r2, r2, #24
    6460:	4332      	orrs	r2, r6
    6462:	5415      	strb	r5, [r2, r0]
    6464:	0a2e      	lsrs	r6, r5, #8
    6466:	1812      	adds	r2, r2, r0
    6468:	7056      	strb	r6, [r2, #1]
    646a:	0c2e      	lsrs	r6, r5, #16
    646c:	7096      	strb	r6, [r2, #2]
    646e:	0e2d      	lsrs	r5, r5, #24
    6470:	70d5      	strb	r5, [r2, #3]
		RegParams.pOtherChParams[chIndx].rx1Frequency = updateTxFreq.frequencyNew;
    6472:	7a1a      	ldrb	r2, [r3, #8]
    6474:	7a5d      	ldrb	r5, [r3, #9]
    6476:	022d      	lsls	r5, r5, #8
    6478:	4315      	orrs	r5, r2
    647a:	7a9a      	ldrb	r2, [r3, #10]
    647c:	0412      	lsls	r2, r2, #16
    647e:	4315      	orrs	r5, r2
    6480:	7ada      	ldrb	r2, [r3, #11]
    6482:	0612      	lsls	r2, r2, #24
    6484:	432a      	orrs	r2, r5
    6486:	1812      	adds	r2, r2, r0
    6488:	780d      	ldrb	r5, [r1, #0]
    648a:	7115      	strb	r5, [r2, #4]
    648c:	784d      	ldrb	r5, [r1, #1]
    648e:	7155      	strb	r5, [r2, #5]
    6490:	788d      	ldrb	r5, [r1, #2]
    6492:	7195      	strb	r5, [r2, #6]
    6494:	78c9      	ldrb	r1, [r1, #3]
    6496:	71d1      	strb	r1, [r2, #7]
		RegParams.pOtherChParams[chIndx].parametersDefined |= FREQUENCY_DEFINED;
    6498:	7a19      	ldrb	r1, [r3, #8]
    649a:	7a5a      	ldrb	r2, [r3, #9]
    649c:	0212      	lsls	r2, r2, #8
    649e:	4311      	orrs	r1, r2
    64a0:	7a9a      	ldrb	r2, [r3, #10]
    64a2:	0412      	lsls	r2, r2, #16
    64a4:	430a      	orrs	r2, r1
    64a6:	7adb      	ldrb	r3, [r3, #11]
    64a8:	061b      	lsls	r3, r3, #24
    64aa:	4313      	orrs	r3, r2
    64ac:	181b      	adds	r3, r3, r0
    64ae:	7ada      	ldrb	r2, [r3, #11]
    64b0:	2101      	movs	r1, #1
    64b2:	430a      	orrs	r2, r1
    64b4:	72da      	strb	r2, [r3, #11]
    64b6:	e7af      	b.n	6418 <setFrequency+0x28>
		    RegParams.pOtherChParams[chIndx].subBandId = getSubBandId(updateTxFreq.frequencyNew);
    64b8:	4a0c      	ldr	r2, [pc, #48]	; (64ec <setFrequency+0xfc>)
    64ba:	7a16      	ldrb	r6, [r2, #8]
    64bc:	7a53      	ldrb	r3, [r2, #9]
    64be:	021b      	lsls	r3, r3, #8
    64c0:	4333      	orrs	r3, r6
    64c2:	7a96      	ldrb	r6, [r2, #10]
    64c4:	0436      	lsls	r6, r6, #16
    64c6:	4333      	orrs	r3, r6
    64c8:	7ad6      	ldrb	r6, [r2, #11]
    64ca:	0636      	lsls	r6, r6, #24
    64cc:	431e      	orrs	r6, r3
    64ce:	006b      	lsls	r3, r5, #1
    64d0:	195b      	adds	r3, r3, r5
    64d2:	009b      	lsls	r3, r3, #2
    64d4:	18f6      	adds	r6, r6, r3
    64d6:	9802      	ldr	r0, [sp, #8]
    64d8:	4b05      	ldr	r3, [pc, #20]	; (64f0 <setFrequency+0x100>)
    64da:	4798      	blx	r3
    64dc:	7230      	strb	r0, [r6, #8]
    64de:	e7b0      	b.n	6442 <setFrequency+0x52>
    64e0:	00014ecd 	.word	0x00014ecd
    64e4:	20000d30 	.word	0x20000d30
    64e8:	00005071 	.word	0x00005071
    64ec:	20000fc0 	.word	0x20000fc0
    64f0:	00005309 	.word	0x00005309

000064f4 <setDutyCycle>:
{
    64f4:	b570      	push	{r4, r5, r6, lr}
    64f6:	b082      	sub	sp, #8
    memcpy(&updateDCycle,attrInput,sizeof(UpdateDutyCycle_t));
    64f8:	ac01      	add	r4, sp, #4
    64fa:	2204      	movs	r2, #4
    64fc:	0020      	movs	r0, r4
    64fe:	4b26      	ldr	r3, [pc, #152]	; (6598 <setDutyCycle+0xa4>)
    6500:	4798      	blx	r3
	val_chid.channelIndex = updateDCycle.channelIndex;
    6502:	78a4      	ldrb	r4, [r4, #2]
    6504:	466b      	mov	r3, sp
    6506:	701c      	strb	r4, [r3, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    6508:	2301      	movs	r3, #1
    650a:	466a      	mov	r2, sp
    650c:	7053      	strb	r3, [r2, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &val_chid) == LORAWAN_SUCCESS)
    650e:	4669      	mov	r1, sp
    6510:	2015      	movs	r0, #21
    6512:	4b22      	ldr	r3, [pc, #136]	; (659c <setDutyCycle+0xa8>)
    6514:	4798      	blx	r3
    6516:	2808      	cmp	r0, #8
    6518:	d002      	beq.n	6520 <setDutyCycle+0x2c>
		result = LORAWAN_INVALID_PARAMETER;
    651a:	200a      	movs	r0, #10
}
    651c:	b002      	add	sp, #8
    651e:	bd70      	pop	{r4, r5, r6, pc}
		bandId = RegParams.pOtherChParams[updateDCycle.channelIndex].subBandId;
    6520:	0063      	lsls	r3, r4, #1
    6522:	191b      	adds	r3, r3, r4
    6524:	0099      	lsls	r1, r3, #2
    6526:	4b1e      	ldr	r3, [pc, #120]	; (65a0 <setDutyCycle+0xac>)
    6528:	7a1a      	ldrb	r2, [r3, #8]
    652a:	7a5c      	ldrb	r4, [r3, #9]
    652c:	0224      	lsls	r4, r4, #8
    652e:	4314      	orrs	r4, r2
    6530:	7a9a      	ldrb	r2, [r3, #10]
    6532:	0412      	lsls	r2, r2, #16
    6534:	4314      	orrs	r4, r2
    6536:	7ada      	ldrb	r2, [r3, #11]
    6538:	0612      	lsls	r2, r2, #24
    653a:	4322      	orrs	r2, r4
    653c:	1852      	adds	r2, r2, r1
    653e:	7a15      	ldrb	r5, [r2, #8]
		RegParams.cmnParams.paramsType2.subBandDutyCycle[bandId] = updateDCycle.dutyCycleNew;
    6540:	002c      	movs	r4, r5
    6542:	34d4      	adds	r4, #212	; 0xd4
    6544:	0064      	lsls	r4, r4, #1
    6546:	aa01      	add	r2, sp, #4
    6548:	191c      	adds	r4, r3, r4
    654a:	7816      	ldrb	r6, [r2, #0]
    654c:	7166      	strb	r6, [r4, #5]
    654e:	7852      	ldrb	r2, [r2, #1]
    6550:	71a2      	strb	r2, [r4, #6]
		RegParams.pSubBandParams[bandId].subBandTimeout = 0;
    6552:	7b1c      	ldrb	r4, [r3, #12]
    6554:	7b5a      	ldrb	r2, [r3, #13]
    6556:	0212      	lsls	r2, r2, #8
    6558:	4322      	orrs	r2, r4
    655a:	7b9c      	ldrb	r4, [r3, #14]
    655c:	0424      	lsls	r4, r4, #16
    655e:	4322      	orrs	r2, r4
    6560:	7bdc      	ldrb	r4, [r3, #15]
    6562:	0624      	lsls	r4, r4, #24
    6564:	4314      	orrs	r4, r2
    6566:	006a      	lsls	r2, r5, #1
    6568:	1952      	adds	r2, r2, r5
    656a:	0092      	lsls	r2, r2, #2
    656c:	1912      	adds	r2, r2, r4
    656e:	2400      	movs	r4, #0
    6570:	7214      	strb	r4, [r2, #8]
    6572:	7254      	strb	r4, [r2, #9]
    6574:	7294      	strb	r4, [r2, #10]
    6576:	72d4      	strb	r4, [r2, #11]
		RegParams.pOtherChParams[updateDCycle.channelIndex].parametersDefined |= DUTY_CYCLE_DEFINED;
    6578:	7a1c      	ldrb	r4, [r3, #8]
    657a:	7a5a      	ldrb	r2, [r3, #9]
    657c:	0212      	lsls	r2, r2, #8
    657e:	4314      	orrs	r4, r2
    6580:	7a9a      	ldrb	r2, [r3, #10]
    6582:	0412      	lsls	r2, r2, #16
    6584:	4322      	orrs	r2, r4
    6586:	7adb      	ldrb	r3, [r3, #11]
    6588:	061b      	lsls	r3, r3, #24
    658a:	4313      	orrs	r3, r2
    658c:	185b      	adds	r3, r3, r1
    658e:	7ada      	ldrb	r2, [r3, #11]
    6590:	2104      	movs	r1, #4
    6592:	430a      	orrs	r2, r1
    6594:	72da      	strb	r2, [r3, #11]
    6596:	e7c1      	b.n	651c <setDutyCycle+0x28>
    6598:	00014ecd 	.word	0x00014ecd
    659c:	00005071 	.word	0x00005071
    65a0:	20000fc0 	.word	0x20000fc0

000065a4 <SearchAvailableChannel2>:
{
    65a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    65a6:	46de      	mov	lr, fp
    65a8:	4657      	mov	r7, sl
    65aa:	464e      	mov	r6, r9
    65ac:	4645      	mov	r5, r8
    65ae:	b5e0      	push	{r5, r6, r7, lr}
    65b0:	b087      	sub	sp, #28
    65b2:	af00      	add	r7, sp, #0
    65b4:	0004      	movs	r4, r0
    65b6:	4688      	mov	r8, r1
    65b8:	60f9      	str	r1, [r7, #12]
    65ba:	0015      	movs	r5, r2
    65bc:	607b      	str	r3, [r7, #4]
	uint8_t ChList[maxChannels];
    65be:	1dc3      	adds	r3, r0, #7
    65c0:	08db      	lsrs	r3, r3, #3
    65c2:	00db      	lsls	r3, r3, #3
    65c4:	466a      	mov	r2, sp
    65c6:	1ad3      	subs	r3, r2, r3
    65c8:	469d      	mov	sp, r3
    65ca:	613b      	str	r3, [r7, #16]
	memset(ChList, 0, sizeof(ChList));
    65cc:	0002      	movs	r2, r0
    65ce:	2100      	movs	r1, #0
    65d0:	4668      	mov	r0, sp
    65d2:	4b5c      	ldr	r3, [pc, #368]	; (6744 <SearchAvailableChannel2+0x1a0>)
    65d4:	4798      	blx	r3
	bool bandWithoutDutyCycle = (((1 << RegParams.band) & (ISM_EUBAND | ISM_ASBAND | (1 << ISM_JPN923))) == 0);
    65d6:	232e      	movs	r3, #46	; 0x2e
    65d8:	4a5b      	ldr	r2, [pc, #364]	; (6748 <SearchAvailableChannel2+0x1a4>)
    65da:	5cd6      	ldrb	r6, [r2, r3]
    if(transmissionType == false)
    65dc:	4643      	mov	r3, r8
    65de:	2b00      	cmp	r3, #0
    65e0:	d148      	bne.n	6674 <SearchAvailableChannel2+0xd0>
	    if(RegParams.FeaturesSupport & JOIN_BACKOFF_SUPPORT)
    65e2:	3320      	adds	r3, #32
    65e4:	5cd3      	ldrb	r3, [r2, r3]
    65e6:	069b      	lsls	r3, r3, #26
    65e8:	d431      	bmi.n	664e <SearchAvailableChannel2+0xaa>
		result = LORAWAN_NO_CHANNELS_FOUND;
    65ea:	2010      	movs	r0, #16
	for (i = 0; i < maxChannels; i++)
    65ec:	2c00      	cmp	r4, #0
    65ee:	d100      	bne.n	65f2 <SearchAvailableChannel2+0x4e>
    65f0:	e093      	b.n	671a <SearchAvailableChannel2+0x176>
	bool bandWithoutDutyCycle = (((1 << RegParams.band) & (ISM_EUBAND | ISM_ASBAND | (1 << ISM_JPN923))) == 0);
    65f2:	4b56      	ldr	r3, [pc, #344]	; (674c <SearchAvailableChannel2+0x1a8>)
    65f4:	4133      	asrs	r3, r6
    65f6:	2201      	movs	r2, #1
    65f8:	401a      	ands	r2, r3
    65fa:	4690      	mov	r8, r2
				(bandWithoutDutyCycle || RegParams.pSubBandParams[RegParams.pOtherChParams[i].subBandId].subBandTimeout == 0))
    65fc:	4b52      	ldr	r3, [pc, #328]	; (6748 <SearchAvailableChannel2+0x1a4>)
    65fe:	7b19      	ldrb	r1, [r3, #12]
    6600:	7b5a      	ldrb	r2, [r3, #13]
    6602:	0212      	lsls	r2, r2, #8
    6604:	4311      	orrs	r1, r2
    6606:	7b9a      	ldrb	r2, [r3, #14]
    6608:	0412      	lsls	r2, r2, #16
    660a:	430a      	orrs	r2, r1
    660c:	7bd9      	ldrb	r1, [r3, #15]
    660e:	0609      	lsls	r1, r1, #24
    6610:	4311      	orrs	r1, r2
    6612:	468c      	mov	ip, r1
    6614:	7a18      	ldrb	r0, [r3, #8]
    6616:	7a5a      	ldrb	r2, [r3, #9]
    6618:	0212      	lsls	r2, r2, #8
    661a:	4302      	orrs	r2, r0
    661c:	7a98      	ldrb	r0, [r3, #10]
    661e:	0400      	lsls	r0, r0, #16
    6620:	4302      	orrs	r2, r0
    6622:	7ad8      	ldrb	r0, [r3, #11]
    6624:	0600      	lsls	r0, r0, #24
    6626:	4310      	orrs	r0, r2
			if ((RegParams.pChParams[i].status == ENABLED) &&
    6628:	791a      	ldrb	r2, [r3, #4]
    662a:	7959      	ldrb	r1, [r3, #5]
    662c:	0209      	lsls	r1, r1, #8
    662e:	4311      	orrs	r1, r2
    6630:	799a      	ldrb	r2, [r3, #6]
    6632:	0412      	lsls	r2, r2, #16
    6634:	4311      	orrs	r1, r2
    6636:	79da      	ldrb	r2, [r3, #7]
    6638:	0612      	lsls	r2, r2, #24
    663a:	430a      	orrs	r2, r1
    663c:	0006      	movs	r6, r0
    663e:	3608      	adds	r6, #8
    6640:	3009      	adds	r0, #9
				(bandWithoutDutyCycle || RegParams.pSubBandParams[RegParams.pOtherChParams[i].subBandId].subBandTimeout == 0))
    6642:	2300      	movs	r3, #0
    6644:	617b      	str	r3, [r7, #20]
				(currDr >= RegParams.pChParams[i].dataRange.min) &&
    6646:	46aa      	mov	sl, r5
    6648:	46a9      	mov	r9, r5
    664a:	0025      	movs	r5, r4
    664c:	e036      	b.n	66bc <SearchAvailableChannel2+0x118>
		    if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) //check timerrunning
    664e:	0011      	movs	r1, r2
    6650:	7d13      	ldrb	r3, [r2, #20]
    6652:	7d52      	ldrb	r2, [r2, #21]
    6654:	0212      	lsls	r2, r2, #8
    6656:	431a      	orrs	r2, r3
    6658:	7d8b      	ldrb	r3, [r1, #22]
    665a:	041b      	lsls	r3, r3, #16
    665c:	431a      	orrs	r2, r3
    665e:	7dcb      	ldrb	r3, [r1, #23]
    6660:	061b      	lsls	r3, r3, #24
    6662:	4313      	orrs	r3, r2
    6664:	7a18      	ldrb	r0, [r3, #8]
    6666:	4b3a      	ldr	r3, [pc, #232]	; (6750 <SearchAvailableChannel2+0x1ac>)
    6668:	4798      	blx	r3
    666a:	0003      	movs	r3, r0
			    return LORAWAN_NO_CHANNELS_FOUND;
    666c:	2010      	movs	r0, #16
		    if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) //check timerrunning
    666e:	2b00      	cmp	r3, #0
    6670:	d0bb      	beq.n	65ea <SearchAvailableChannel2+0x46>
    6672:	e052      	b.n	671a <SearchAvailableChannel2+0x176>
	    if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout)
    6674:	4934      	ldr	r1, [pc, #208]	; (6748 <SearchAvailableChannel2+0x1a4>)
    6676:	23ba      	movs	r3, #186	; 0xba
    6678:	33ff      	adds	r3, #255	; 0xff
    667a:	5ccb      	ldrb	r3, [r1, r3]
    667c:	22dd      	movs	r2, #221	; 0xdd
    667e:	0052      	lsls	r2, r2, #1
    6680:	5c8a      	ldrb	r2, [r1, r2]
    6682:	0212      	lsls	r2, r2, #8
    6684:	431a      	orrs	r2, r3
    6686:	23bc      	movs	r3, #188	; 0xbc
    6688:	33ff      	adds	r3, #255	; 0xff
    668a:	5ccb      	ldrb	r3, [r1, r3]
    668c:	041b      	lsls	r3, r3, #16
    668e:	431a      	orrs	r2, r3
    6690:	23de      	movs	r3, #222	; 0xde
    6692:	005b      	lsls	r3, r3, #1
    6694:	5ccb      	ldrb	r3, [r1, r3]
    6696:	061b      	lsls	r3, r3, #24
    6698:	4313      	orrs	r3, r2
		    return LORAWAN_NO_CHANNELS_FOUND;
    669a:	2010      	movs	r0, #16
	    if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout)
    669c:	2b00      	cmp	r3, #0
    669e:	d0a4      	beq.n	65ea <SearchAvailableChannel2+0x46>
    66a0:	e03b      	b.n	671a <SearchAvailableChannel2+0x176>
					ChList[num] = i;
    66a2:	693c      	ldr	r4, [r7, #16]
    66a4:	6979      	ldr	r1, [r7, #20]
    66a6:	5463      	strb	r3, [r4, r1]
					num++;
    66a8:	3101      	adds	r1, #1
    66aa:	b2c9      	uxtb	r1, r1
    66ac:	6179      	str	r1, [r7, #20]
	for (i = 0; i < maxChannels; i++)
    66ae:	3301      	adds	r3, #1
    66b0:	b2db      	uxtb	r3, r3
    66b2:	3202      	adds	r2, #2
    66b4:	360c      	adds	r6, #12
    66b6:	300c      	adds	r0, #12
    66b8:	429d      	cmp	r5, r3
    66ba:	d02a      	beq.n	6712 <SearchAvailableChannel2+0x16e>
			if ((RegParams.pChParams[i].status == ENABLED) &&
    66bc:	7811      	ldrb	r1, [r2, #0]
    66be:	2900      	cmp	r1, #0
    66c0:	d0f5      	beq.n	66ae <SearchAvailableChannel2+0x10a>
				(currDr >= RegParams.pChParams[i].dataRange.min) &&
    66c2:	7851      	ldrb	r1, [r2, #1]
    66c4:	0709      	lsls	r1, r1, #28
    66c6:	0f09      	lsrs	r1, r1, #28
			if ((RegParams.pChParams[i].status == ENABLED) &&
    66c8:	4589      	cmp	r9, r1
    66ca:	dbf0      	blt.n	66ae <SearchAvailableChannel2+0x10a>
				(currDr <= RegParams.pChParams[i].dataRange.max)&&
    66cc:	7851      	ldrb	r1, [r2, #1]
    66ce:	0909      	lsrs	r1, r1, #4
				(currDr >= RegParams.pChParams[i].dataRange.min) &&
    66d0:	458a      	cmp	sl, r1
    66d2:	dcec      	bgt.n	66ae <SearchAvailableChannel2+0x10a>
				(currDr <= RegParams.pChParams[i].dataRange.max)&&
    66d4:	4641      	mov	r1, r8
    66d6:	2900      	cmp	r1, #0
    66d8:	d014      	beq.n	6704 <SearchAvailableChannel2+0x160>
				(bandWithoutDutyCycle || RegParams.pSubBandParams[RegParams.pOtherChParams[i].subBandId].subBandTimeout == 0))
    66da:	7834      	ldrb	r4, [r6, #0]
    66dc:	0061      	lsls	r1, r4, #1
    66de:	1909      	adds	r1, r1, r4
    66e0:	0089      	lsls	r1, r1, #2
    66e2:	4461      	add	r1, ip
    66e4:	7a0c      	ldrb	r4, [r1, #8]
    66e6:	46a3      	mov	fp, r4
    66e8:	60b9      	str	r1, [r7, #8]
    66ea:	7a4c      	ldrb	r4, [r1, #9]
    66ec:	0224      	lsls	r4, r4, #8
    66ee:	4659      	mov	r1, fp
    66f0:	430c      	orrs	r4, r1
    66f2:	68b9      	ldr	r1, [r7, #8]
    66f4:	7a89      	ldrb	r1, [r1, #10]
    66f6:	0409      	lsls	r1, r1, #16
    66f8:	430c      	orrs	r4, r1
    66fa:	68b9      	ldr	r1, [r7, #8]
    66fc:	7ac9      	ldrb	r1, [r1, #11]
    66fe:	0609      	lsls	r1, r1, #24
    6700:	4321      	orrs	r1, r4
    6702:	d1d4      	bne.n	66ae <SearchAvailableChannel2+0x10a>
				if(((transmissionType == 0)  && (RegParams.pOtherChParams[i].joinRequestChannel == 1)) || (transmissionType != 0)) 
    6704:	68f9      	ldr	r1, [r7, #12]
    6706:	2900      	cmp	r1, #0
    6708:	d1cb      	bne.n	66a2 <SearchAvailableChannel2+0xfe>
    670a:	7801      	ldrb	r1, [r0, #0]
    670c:	2900      	cmp	r1, #0
    670e:	d0ce      	beq.n	66ae <SearchAvailableChannel2+0x10a>
    6710:	e7c7      	b.n	66a2 <SearchAvailableChannel2+0xfe>
		result = LORAWAN_NO_CHANNELS_FOUND;
    6712:	2010      	movs	r0, #16
	if(0 != num)
    6714:	697c      	ldr	r4, [r7, #20]
    6716:	2c00      	cmp	r4, #0
    6718:	d107      	bne.n	672a <SearchAvailableChannel2+0x186>
}
    671a:	46bd      	mov	sp, r7
    671c:	b007      	add	sp, #28
    671e:	bc3c      	pop	{r2, r3, r4, r5}
    6720:	4690      	mov	r8, r2
    6722:	4699      	mov	r9, r3
    6724:	46a2      	mov	sl, r4
    6726:	46ab      	mov	fp, r5
    6728:	bdf0      	pop	{r4, r5, r6, r7, pc}
		randomNumber = rand() % num;
    672a:	4b0a      	ldr	r3, [pc, #40]	; (6754 <SearchAvailableChannel2+0x1b0>)
    672c:	4798      	blx	r3
    672e:	0021      	movs	r1, r4
    6730:	4b09      	ldr	r3, [pc, #36]	; (6758 <SearchAvailableChannel2+0x1b4>)
    6732:	4798      	blx	r3
		*channelIndex = ChList[randomNumber];
    6734:	23ff      	movs	r3, #255	; 0xff
    6736:	4019      	ands	r1, r3
    6738:	693b      	ldr	r3, [r7, #16]
    673a:	5c5b      	ldrb	r3, [r3, r1]
    673c:	687a      	ldr	r2, [r7, #4]
    673e:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    6740:	2008      	movs	r0, #8
    6742:	e7ea      	b.n	671a <SearchAvailableChannel2+0x176>
    6744:	00014f51 	.word	0x00014f51
    6748:	20000fc0 	.word	0x20000fc0
    674c:	00007fe3 	.word	0x00007fe3
    6750:	000097a1 	.word	0x000097a1
    6754:	000150f1 	.word	0x000150f1
    6758:	00011a49 	.word	0x00011a49

0000675c <LORAREG_GetAttr_FreeChannel2>:
{
    675c:	b570      	push	{r4, r5, r6, lr}
	memcpy(&newFreeChannelReq,(NewFreeChannelReq_t *)attrInput,sizeof(NewFreeChannelReq_t));
    675e:	784c      	ldrb	r4, [r1, #1]
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    6760:	202a      	movs	r0, #42	; 0x2a
    6762:	4d07      	ldr	r5, [pc, #28]	; (6780 <LORAREG_GetAttr_FreeChannel2+0x24>)
    6764:	562d      	ldrsb	r5, [r5, r0]
		return LORAWAN_INVALID_PARAMETER;
    6766:	3820      	subs	r0, #32
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    6768:	42ac      	cmp	r4, r5
    676a:	dd00      	ble.n	676e <LORAREG_GetAttr_FreeChannel2+0x12>
}
    676c:	bd70      	pop	{r4, r5, r6, pc}
		result = SearchAvailableChannel2(newFreeChannelReq.maxChannels,newFreeChannelReq.transmissionType,newFreeChannelReq.currDr,(uint8_t*)attrOutput);
    676e:	7888      	ldrb	r0, [r1, #2]
    6770:	7809      	ldrb	r1, [r1, #0]
    6772:	0013      	movs	r3, r2
    6774:	0002      	movs	r2, r0
    6776:	0020      	movs	r0, r4
    6778:	4c02      	ldr	r4, [pc, #8]	; (6784 <LORAREG_GetAttr_FreeChannel2+0x28>)
    677a:	47a0      	blx	r4
	return result;
    677c:	e7f6      	b.n	676c <LORAREG_GetAttr_FreeChannel2+0x10>
    677e:	46c0      	nop			; (mov r8, r8)
    6780:	20000fc0 	.word	0x20000fc0
    6784:	000065a5 	.word	0x000065a5

00006788 <setJoinBackoffCntl>:
{   
    6788:	b500      	push	{lr}
    678a:	b083      	sub	sp, #12
	memcpy(&joinbackoffcntl,attrInput,sizeof(bool));
    678c:	780b      	ldrb	r3, [r1, #0]
    678e:	466a      	mov	r2, sp
    6790:	71d3      	strb	r3, [r2, #7]
	if(joinbackoffcntl == false)
    6792:	2b00      	cmp	r3, #0
    6794:	d145      	bne.n	6822 <setJoinBackoffCntl+0x9a>
		if(RegParams.FeaturesSupport & JOIN_BACKOFF_SUPPORT)
    6796:	3320      	adds	r3, #32
    6798:	4a26      	ldr	r2, [pc, #152]	; (6834 <setJoinBackoffCntl+0xac>)
    679a:	5cd3      	ldrb	r3, [r2, r3]
    679c:	069a      	lsls	r2, r3, #26
    679e:	d546      	bpl.n	682e <setJoinBackoffCntl+0xa6>
			RegParams.FeaturesSupport &= ~JOIN_BACKOFF_SUPPORT;
    67a0:	4924      	ldr	r1, [pc, #144]	; (6834 <setJoinBackoffCntl+0xac>)
    67a2:	2220      	movs	r2, #32
    67a4:	4393      	bics	r3, r2
    67a6:	548b      	strb	r3, [r1, r2]
			if (SwTimerIsRunning(RegParams.pJoinBackoffTimer->timerId))
    67a8:	7e0b      	ldrb	r3, [r1, #24]
    67aa:	7e4a      	ldrb	r2, [r1, #25]
    67ac:	0212      	lsls	r2, r2, #8
    67ae:	431a      	orrs	r2, r3
    67b0:	7e8b      	ldrb	r3, [r1, #26]
    67b2:	041b      	lsls	r3, r3, #16
    67b4:	431a      	orrs	r2, r3
    67b6:	7ecb      	ldrb	r3, [r1, #27]
    67b8:	061b      	lsls	r3, r3, #24
    67ba:	4313      	orrs	r3, r2
    67bc:	7818      	ldrb	r0, [r3, #0]
    67be:	4b1e      	ldr	r3, [pc, #120]	; (6838 <setJoinBackoffCntl+0xb0>)
    67c0:	4798      	blx	r3
    67c2:	2800      	cmp	r0, #0
    67c4:	d11e      	bne.n	6804 <setJoinBackoffCntl+0x7c>
			if (SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    67c6:	491b      	ldr	r1, [pc, #108]	; (6834 <setJoinBackoffCntl+0xac>)
    67c8:	7d0b      	ldrb	r3, [r1, #20]
    67ca:	7d4a      	ldrb	r2, [r1, #21]
    67cc:	0212      	lsls	r2, r2, #8
    67ce:	431a      	orrs	r2, r3
    67d0:	7d8b      	ldrb	r3, [r1, #22]
    67d2:	041b      	lsls	r3, r3, #16
    67d4:	431a      	orrs	r2, r3
    67d6:	7dcb      	ldrb	r3, [r1, #23]
    67d8:	061b      	lsls	r3, r3, #24
    67da:	4313      	orrs	r3, r2
    67dc:	7a18      	ldrb	r0, [r3, #8]
    67de:	4b16      	ldr	r3, [pc, #88]	; (6838 <setJoinBackoffCntl+0xb0>)
    67e0:	4798      	blx	r3
    67e2:	2800      	cmp	r0, #0
    67e4:	d023      	beq.n	682e <setJoinBackoffCntl+0xa6>
				SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    67e6:	4913      	ldr	r1, [pc, #76]	; (6834 <setJoinBackoffCntl+0xac>)
    67e8:	7d0b      	ldrb	r3, [r1, #20]
    67ea:	7d4a      	ldrb	r2, [r1, #21]
    67ec:	0212      	lsls	r2, r2, #8
    67ee:	431a      	orrs	r2, r3
    67f0:	7d8b      	ldrb	r3, [r1, #22]
    67f2:	041b      	lsls	r3, r3, #16
    67f4:	431a      	orrs	r2, r3
    67f6:	7dcb      	ldrb	r3, [r1, #23]
    67f8:	061b      	lsls	r3, r3, #24
    67fa:	4313      	orrs	r3, r2
    67fc:	7a18      	ldrb	r0, [r3, #8]
    67fe:	4b0f      	ldr	r3, [pc, #60]	; (683c <setJoinBackoffCntl+0xb4>)
    6800:	4798      	blx	r3
    6802:	e014      	b.n	682e <setJoinBackoffCntl+0xa6>
				SwTimerStop(RegParams.pJoinBackoffTimer->timerId);
    6804:	490b      	ldr	r1, [pc, #44]	; (6834 <setJoinBackoffCntl+0xac>)
    6806:	7e0b      	ldrb	r3, [r1, #24]
    6808:	7e4a      	ldrb	r2, [r1, #25]
    680a:	0212      	lsls	r2, r2, #8
    680c:	431a      	orrs	r2, r3
    680e:	7e8b      	ldrb	r3, [r1, #26]
    6810:	041b      	lsls	r3, r3, #16
    6812:	431a      	orrs	r2, r3
    6814:	7ecb      	ldrb	r3, [r1, #27]
    6816:	061b      	lsls	r3, r3, #24
    6818:	4313      	orrs	r3, r2
    681a:	7818      	ldrb	r0, [r3, #0]
    681c:	4b07      	ldr	r3, [pc, #28]	; (683c <setJoinBackoffCntl+0xb4>)
    681e:	4798      	blx	r3
    6820:	e7d1      	b.n	67c6 <setJoinBackoffCntl+0x3e>
		RegParams.FeaturesSupport |= JOIN_BACKOFF_SUPPORT;
    6822:	4904      	ldr	r1, [pc, #16]	; (6834 <setJoinBackoffCntl+0xac>)
    6824:	2220      	movs	r2, #32
    6826:	5c8b      	ldrb	r3, [r1, r2]
    6828:	2020      	movs	r0, #32
    682a:	4303      	orrs	r3, r0
    682c:	548b      	strb	r3, [r1, r2]
}
    682e:	2008      	movs	r0, #8
    6830:	b003      	add	sp, #12
    6832:	bd00      	pop	{pc}
    6834:	20000fc0 	.word	0x20000fc0
    6838:	000097a1 	.word	0x000097a1
    683c:	00009915 	.word	0x00009915

00006840 <setJoinBackOffTimer>:
{
    6840:	b510      	push	{r4, lr}
    6842:	b084      	sub	sp, #16
	memcpy(&startJoinBackOffTimer,attrInput,sizeof(bool));
    6844:	780b      	ldrb	r3, [r1, #0]
    6846:	220f      	movs	r2, #15
    6848:	446a      	add	r2, sp
    684a:	7013      	strb	r3, [r2, #0]
	if(startJoinBackOffTimer == true)
    684c:	2b00      	cmp	r3, #0
    684e:	d113      	bne.n	6878 <setJoinBackOffTimer+0x38>
		SwTimerStop(RegParams.pJoinBackoffTimer->timerId);
    6850:	4c13      	ldr	r4, [pc, #76]	; (68a0 <setJoinBackOffTimer+0x60>)
    6852:	7e23      	ldrb	r3, [r4, #24]
    6854:	7e62      	ldrb	r2, [r4, #25]
    6856:	0212      	lsls	r2, r2, #8
    6858:	431a      	orrs	r2, r3
    685a:	7ea3      	ldrb	r3, [r4, #26]
    685c:	041b      	lsls	r3, r3, #16
    685e:	431a      	orrs	r2, r3
    6860:	7ee3      	ldrb	r3, [r4, #27]
    6862:	061b      	lsls	r3, r3, #24
    6864:	4313      	orrs	r3, r2
    6866:	7818      	ldrb	r0, [r3, #0]
    6868:	4b0e      	ldr	r3, [pc, #56]	; (68a4 <setJoinBackOffTimer+0x64>)
    686a:	4798      	blx	r3
		RegParams.joinbccount = 0;
    686c:	2200      	movs	r2, #0
    686e:	2342      	movs	r3, #66	; 0x42
    6870:	54e2      	strb	r2, [r4, r3]
}
    6872:	2008      	movs	r0, #8
    6874:	b004      	add	sp, #16
    6876:	bd10      	pop	{r4, pc}
		SwTimerStart (RegParams.pJoinBackoffTimer->timerId, MS_TO_US(BACKOFF_BASE_TIME_IN_MS), SW_TIMEOUT_RELATIVE, (void *)JoinBackoffCallback, NULL);
    6878:	4909      	ldr	r1, [pc, #36]	; (68a0 <setJoinBackOffTimer+0x60>)
    687a:	7e0b      	ldrb	r3, [r1, #24]
    687c:	7e4a      	ldrb	r2, [r1, #25]
    687e:	0212      	lsls	r2, r2, #8
    6880:	431a      	orrs	r2, r3
    6882:	7e8b      	ldrb	r3, [r1, #26]
    6884:	041b      	lsls	r3, r3, #16
    6886:	431a      	orrs	r2, r3
    6888:	7ecb      	ldrb	r3, [r1, #27]
    688a:	061b      	lsls	r3, r3, #24
    688c:	4313      	orrs	r3, r2
    688e:	7818      	ldrb	r0, [r3, #0]
    6890:	2300      	movs	r3, #0
    6892:	9300      	str	r3, [sp, #0]
    6894:	4b04      	ldr	r3, [pc, #16]	; (68a8 <setJoinBackOffTimer+0x68>)
    6896:	2200      	movs	r2, #0
    6898:	4904      	ldr	r1, [pc, #16]	; (68ac <setJoinBackOffTimer+0x6c>)
    689a:	4c05      	ldr	r4, [pc, #20]	; (68b0 <setJoinBackOffTimer+0x70>)
    689c:	47a0      	blx	r4
    689e:	e7e8      	b.n	6872 <setJoinBackOffTimer+0x32>
    68a0:	20000fc0 	.word	0x20000fc0
    68a4:	00009915 	.word	0x00009915
    68a8:	000074c1 	.word	0x000074c1
    68ac:	6b49d200 	.word	0x6b49d200
    68b0:	00009609 	.word	0x00009609

000068b4 <setJoinDutyCycleTimer>:
{
    68b4:	b530      	push	{r4, r5, lr}
    68b6:	b085      	sub	sp, #20
	memcpy(&UpdateJoinDutyCycleTimer,attrInput,sizeof(UpdateJoinDutyCycleTimer_t));
    68b8:	ac02      	add	r4, sp, #8
    68ba:	2208      	movs	r2, #8
    68bc:	0020      	movs	r0, r4
    68be:	4b93      	ldr	r3, [pc, #588]	; (6b0c <setJoinDutyCycleTimer+0x258>)
    68c0:	4798      	blx	r3
	if(UpdateJoinDutyCycleTimer.startJoinDutyCycleTimer == true)
    68c2:	7923      	ldrb	r3, [r4, #4]
    68c4:	2b00      	cmp	r3, #0
    68c6:	d100      	bne.n	68ca <setJoinDutyCycleTimer+0x16>
    68c8:	e0f8      	b.n	6abc <setJoinDutyCycleTimer+0x208>
			if(RegParams.joinbccount < AGGREGATEDTIME_1HR)
    68ca:	2342      	movs	r3, #66	; 0x42
    68cc:	4a90      	ldr	r2, [pc, #576]	; (6b10 <setJoinDutyCycleTimer+0x25c>)
    68ce:	5cd3      	ldrb	r3, [r2, r3]
    68d0:	2b01      	cmp	r3, #1
    68d2:	d800      	bhi.n	68d6 <setJoinDutyCycleTimer+0x22>
    68d4:	e081      	b.n	69da <setJoinDutyCycleTimer+0x126>
			else if (RegParams.joinbccount < AGGREGATEDTIME_10HR)
    68d6:	2b13      	cmp	r3, #19
    68d8:	d900      	bls.n	68dc <setJoinDutyCycleTimer+0x28>
    68da:	e08d      	b.n	69f8 <setJoinDutyCycleTimer+0x144>
				RegParams.joinDutyCycleTimeout = (uint32_t)UpdateJoinDutyCycleTimer.joinreqTimeonAir * (JOIN_BACKOFF_PRESCALAR_10HR - 1);
    68dc:	4b8d      	ldr	r3, [pc, #564]	; (6b14 <setJoinDutyCycleTimer+0x260>)
    68de:	9a02      	ldr	r2, [sp, #8]
    68e0:	4353      	muls	r3, r2
    68e2:	4a8b      	ldr	r2, [pc, #556]	; (6b10 <setJoinDutyCycleTimer+0x25c>)
    68e4:	323e      	adds	r2, #62	; 0x3e
    68e6:	7013      	strb	r3, [r2, #0]
    68e8:	0a19      	lsrs	r1, r3, #8
    68ea:	7051      	strb	r1, [r2, #1]
    68ec:	0c19      	lsrs	r1, r3, #16
    68ee:	7091      	strb	r1, [r2, #2]
    68f0:	0e1b      	lsrs	r3, r3, #24
    68f2:	70d3      	strb	r3, [r2, #3]
		if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    68f4:	4986      	ldr	r1, [pc, #536]	; (6b10 <setJoinDutyCycleTimer+0x25c>)
    68f6:	7d0b      	ldrb	r3, [r1, #20]
    68f8:	7d4a      	ldrb	r2, [r1, #21]
    68fa:	0212      	lsls	r2, r2, #8
    68fc:	431a      	orrs	r2, r3
    68fe:	7d8b      	ldrb	r3, [r1, #22]
    6900:	041b      	lsls	r3, r3, #16
    6902:	431a      	orrs	r2, r3
    6904:	7dcb      	ldrb	r3, [r1, #23]
    6906:	061b      	lsls	r3, r3, #24
    6908:	4313      	orrs	r3, r2
    690a:	7a18      	ldrb	r0, [r3, #8]
    690c:	4b82      	ldr	r3, [pc, #520]	; (6b18 <setJoinDutyCycleTimer+0x264>)
    690e:	4798      	blx	r3
	uint32_t delta = 0,ticks;
    6910:	2400      	movs	r4, #0
		if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    6912:	2800      	cmp	r0, #0
    6914:	d17d      	bne.n	6a12 <setJoinDutyCycleTimer+0x15e>
		if(RegParams.joinDutyCycleTimeout != 0)
    6916:	4b7e      	ldr	r3, [pc, #504]	; (6b10 <setJoinDutyCycleTimer+0x25c>)
    6918:	213e      	movs	r1, #62	; 0x3e
    691a:	5c59      	ldrb	r1, [r3, r1]
    691c:	203f      	movs	r0, #63	; 0x3f
    691e:	5c18      	ldrb	r0, [r3, r0]
    6920:	0200      	lsls	r0, r0, #8
    6922:	4308      	orrs	r0, r1
    6924:	2140      	movs	r1, #64	; 0x40
    6926:	5c59      	ldrb	r1, [r3, r1]
    6928:	0409      	lsls	r1, r1, #16
    692a:	4308      	orrs	r0, r1
    692c:	2141      	movs	r1, #65	; 0x41
    692e:	5c59      	ldrb	r1, [r3, r1]
    6930:	0609      	lsls	r1, r1, #24
    6932:	4301      	orrs	r1, r0
    6934:	d100      	bne.n	6938 <setJoinDutyCycleTimer+0x84>
    6936:	e0e5      	b.n	6b04 <setJoinDutyCycleTimer+0x250>
			if(RegParams.joinDutyCycleTimeout > delta)
    6938:	428c      	cmp	r4, r1
    693a:	d300      	bcc.n	693e <setJoinDutyCycleTimer+0x8a>
    693c:	e0b6      	b.n	6aac <setJoinDutyCycleTimer+0x1f8>
				RegParams.joinDutyCycleTimeout = RegParams.joinDutyCycleTimeout - delta;
    693e:	1b09      	subs	r1, r1, r4
    6940:	333e      	adds	r3, #62	; 0x3e
    6942:	7019      	strb	r1, [r3, #0]
    6944:	0a0a      	lsrs	r2, r1, #8
    6946:	705a      	strb	r2, [r3, #1]
    6948:	0c0a      	lsrs	r2, r1, #16
    694a:	709a      	strb	r2, [r3, #2]
    694c:	0e0a      	lsrs	r2, r1, #24
    694e:	70da      	strb	r2, [r3, #3]
				if(RegParams.joinDutyCycleTimeout > US_TO_MS(SWTIMER_MAX_TIMEOUT))
    6950:	4b72      	ldr	r3, [pc, #456]	; (6b1c <setJoinDutyCycleTimer+0x268>)
    6952:	4299      	cmp	r1, r3
    6954:	d800      	bhi.n	6958 <setJoinDutyCycleTimer+0xa4>
    6956:	e093      	b.n	6a80 <setJoinDutyCycleTimer+0x1cc>
					RegParams.pJoinDutyCycleTimer->remainingtime =RegParams.joinDutyCycleTimeout - (US_TO_MS(SWTIMER_MAX_TIMEOUT)) ;
    6958:	4c6d      	ldr	r4, [pc, #436]	; (6b10 <setJoinDutyCycleTimer+0x25c>)
    695a:	7d23      	ldrb	r3, [r4, #20]
    695c:	7d62      	ldrb	r2, [r4, #21]
    695e:	0212      	lsls	r2, r2, #8
    6960:	431a      	orrs	r2, r3
    6962:	7da3      	ldrb	r3, [r4, #22]
    6964:	041b      	lsls	r3, r3, #16
    6966:	431a      	orrs	r2, r3
    6968:	7de3      	ldrb	r3, [r4, #23]
    696a:	061b      	lsls	r3, r3, #24
    696c:	4313      	orrs	r3, r2
    696e:	4a6c      	ldr	r2, [pc, #432]	; (6b20 <setJoinDutyCycleTimer+0x26c>)
    6970:	4694      	mov	ip, r2
    6972:	4461      	add	r1, ip
    6974:	7119      	strb	r1, [r3, #4]
    6976:	0a0a      	lsrs	r2, r1, #8
    6978:	715a      	strb	r2, [r3, #5]
    697a:	0c0a      	lsrs	r2, r1, #16
    697c:	719a      	strb	r2, [r3, #6]
    697e:	0e09      	lsrs	r1, r1, #24
    6980:	71d9      	strb	r1, [r3, #7]
					SwTimerStart(RegParams.pJoinDutyCycleTimer->timerId, SWTIMER_MAX_TIMEOUT, SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    6982:	7d23      	ldrb	r3, [r4, #20]
    6984:	7d62      	ldrb	r2, [r4, #21]
    6986:	0212      	lsls	r2, r2, #8
    6988:	431a      	orrs	r2, r3
    698a:	7da3      	ldrb	r3, [r4, #22]
    698c:	041b      	lsls	r3, r3, #16
    698e:	431a      	orrs	r2, r3
    6990:	7de3      	ldrb	r3, [r4, #23]
    6992:	061b      	lsls	r3, r3, #24
    6994:	4313      	orrs	r3, r2
    6996:	7a18      	ldrb	r0, [r3, #8]
    6998:	2300      	movs	r3, #0
    699a:	9300      	str	r3, [sp, #0]
    699c:	4b61      	ldr	r3, [pc, #388]	; (6b24 <setJoinDutyCycleTimer+0x270>)
    699e:	2200      	movs	r2, #0
    69a0:	4961      	ldr	r1, [pc, #388]	; (6b28 <setJoinDutyCycleTimer+0x274>)
    69a2:	4d62      	ldr	r5, [pc, #392]	; (6b2c <setJoinDutyCycleTimer+0x278>)
    69a4:	47a8      	blx	r5
					RegParams.joinDutyCycleTimeout = RegParams.joinDutyCycleTimeout - (US_TO_MS(SWTIMER_MAX_TIMEOUT));
    69a6:	233e      	movs	r3, #62	; 0x3e
    69a8:	5ce3      	ldrb	r3, [r4, r3]
    69aa:	223f      	movs	r2, #63	; 0x3f
    69ac:	5ca2      	ldrb	r2, [r4, r2]
    69ae:	0212      	lsls	r2, r2, #8
    69b0:	431a      	orrs	r2, r3
    69b2:	2340      	movs	r3, #64	; 0x40
    69b4:	5ce3      	ldrb	r3, [r4, r3]
    69b6:	041b      	lsls	r3, r3, #16
    69b8:	431a      	orrs	r2, r3
    69ba:	2341      	movs	r3, #65	; 0x41
    69bc:	5ce3      	ldrb	r3, [r4, r3]
    69be:	061b      	lsls	r3, r3, #24
    69c0:	4313      	orrs	r3, r2
    69c2:	4a57      	ldr	r2, [pc, #348]	; (6b20 <setJoinDutyCycleTimer+0x26c>)
    69c4:	4694      	mov	ip, r2
    69c6:	4463      	add	r3, ip
    69c8:	343e      	adds	r4, #62	; 0x3e
    69ca:	7023      	strb	r3, [r4, #0]
    69cc:	0a1a      	lsrs	r2, r3, #8
    69ce:	7062      	strb	r2, [r4, #1]
    69d0:	0c1a      	lsrs	r2, r3, #16
    69d2:	70a2      	strb	r2, [r4, #2]
    69d4:	0e1b      	lsrs	r3, r3, #24
    69d6:	70e3      	strb	r3, [r4, #3]
    69d8:	e094      	b.n	6b04 <setJoinDutyCycleTimer+0x250>
				RegParams.joinDutyCycleTimeout = (uint32_t)UpdateJoinDutyCycleTimer.joinreqTimeonAir * (JOIN_BACKOFF_PRESCALAR_1HR - 1);
    69da:	9a02      	ldr	r2, [sp, #8]
    69dc:	0053      	lsls	r3, r2, #1
    69de:	189b      	adds	r3, r3, r2
    69e0:	015a      	lsls	r2, r3, #5
    69e2:	189b      	adds	r3, r3, r2
    69e4:	4a4a      	ldr	r2, [pc, #296]	; (6b10 <setJoinDutyCycleTimer+0x25c>)
    69e6:	323e      	adds	r2, #62	; 0x3e
    69e8:	7013      	strb	r3, [r2, #0]
    69ea:	0a19      	lsrs	r1, r3, #8
    69ec:	7051      	strb	r1, [r2, #1]
    69ee:	0c19      	lsrs	r1, r3, #16
    69f0:	7091      	strb	r1, [r2, #2]
    69f2:	0e1b      	lsrs	r3, r3, #24
    69f4:	70d3      	strb	r3, [r2, #3]
    69f6:	e77d      	b.n	68f4 <setJoinDutyCycleTimer+0x40>
				RegParams.joinDutyCycleTimeout = (uint32_t)UpdateJoinDutyCycleTimer.joinreqTimeonAir * (JOIN_BACKOFF_PRESCALAR_24HR - 1);
    69f8:	4b4d      	ldr	r3, [pc, #308]	; (6b30 <setJoinDutyCycleTimer+0x27c>)
    69fa:	9a02      	ldr	r2, [sp, #8]
    69fc:	4353      	muls	r3, r2
    69fe:	4a44      	ldr	r2, [pc, #272]	; (6b10 <setJoinDutyCycleTimer+0x25c>)
    6a00:	323e      	adds	r2, #62	; 0x3e
    6a02:	7013      	strb	r3, [r2, #0]
    6a04:	0a19      	lsrs	r1, r3, #8
    6a06:	7051      	strb	r1, [r2, #1]
    6a08:	0c19      	lsrs	r1, r3, #16
    6a0a:	7091      	strb	r1, [r2, #2]
    6a0c:	0e1b      	lsrs	r3, r3, #24
    6a0e:	70d3      	strb	r3, [r2, #3]
    6a10:	e770      	b.n	68f4 <setJoinDutyCycleTimer+0x40>
			ticks = SwTimerReadValue(RegParams.pJoinDutyCycleTimer->timerId);
    6a12:	4c3f      	ldr	r4, [pc, #252]	; (6b10 <setJoinDutyCycleTimer+0x25c>)
    6a14:	7d23      	ldrb	r3, [r4, #20]
    6a16:	7d62      	ldrb	r2, [r4, #21]
    6a18:	0212      	lsls	r2, r2, #8
    6a1a:	431a      	orrs	r2, r3
    6a1c:	7da3      	ldrb	r3, [r4, #22]
    6a1e:	041b      	lsls	r3, r3, #16
    6a20:	431a      	orrs	r2, r3
    6a22:	7de3      	ldrb	r3, [r4, #23]
    6a24:	061b      	lsls	r3, r3, #24
    6a26:	4313      	orrs	r3, r2
    6a28:	7a18      	ldrb	r0, [r3, #8]
    6a2a:	4b42      	ldr	r3, [pc, #264]	; (6b34 <setJoinDutyCycleTimer+0x280>)
    6a2c:	4798      	blx	r3
    6a2e:	0005      	movs	r5, r0
			SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    6a30:	7d23      	ldrb	r3, [r4, #20]
    6a32:	7d62      	ldrb	r2, [r4, #21]
    6a34:	0212      	lsls	r2, r2, #8
    6a36:	431a      	orrs	r2, r3
    6a38:	7da3      	ldrb	r3, [r4, #22]
    6a3a:	041b      	lsls	r3, r3, #16
    6a3c:	431a      	orrs	r2, r3
    6a3e:	7de3      	ldrb	r3, [r4, #23]
    6a40:	061b      	lsls	r3, r3, #24
    6a42:	4313      	orrs	r3, r2
    6a44:	7a18      	ldrb	r0, [r3, #8]
    6a46:	4b3c      	ldr	r3, [pc, #240]	; (6b38 <setJoinDutyCycleTimer+0x284>)
    6a48:	4798      	blx	r3
			delta = RegParams.pJoinDutyCycleTimer->lastTimerInterval- US_TO_MS(ticks);
    6a4a:	7d23      	ldrb	r3, [r4, #20]
    6a4c:	7d62      	ldrb	r2, [r4, #21]
    6a4e:	0212      	lsls	r2, r2, #8
    6a50:	431a      	orrs	r2, r3
    6a52:	7da3      	ldrb	r3, [r4, #22]
    6a54:	041b      	lsls	r3, r3, #16
    6a56:	431a      	orrs	r2, r3
    6a58:	7de3      	ldrb	r3, [r4, #23]
    6a5a:	061b      	lsls	r3, r3, #24
    6a5c:	4313      	orrs	r3, r2
    6a5e:	781a      	ldrb	r2, [r3, #0]
    6a60:	785c      	ldrb	r4, [r3, #1]
    6a62:	0224      	lsls	r4, r4, #8
    6a64:	4322      	orrs	r2, r4
    6a66:	789c      	ldrb	r4, [r3, #2]
    6a68:	0424      	lsls	r4, r4, #16
    6a6a:	4314      	orrs	r4, r2
    6a6c:	78da      	ldrb	r2, [r3, #3]
    6a6e:	0612      	lsls	r2, r2, #24
    6a70:	4314      	orrs	r4, r2
    6a72:	21fa      	movs	r1, #250	; 0xfa
    6a74:	0089      	lsls	r1, r1, #2
    6a76:	0028      	movs	r0, r5
    6a78:	4b30      	ldr	r3, [pc, #192]	; (6b3c <setJoinDutyCycleTimer+0x288>)
    6a7a:	4798      	blx	r3
    6a7c:	1a24      	subs	r4, r4, r0
    6a7e:	e74a      	b.n	6916 <setJoinDutyCycleTimer+0x62>
				SwTimerStart (RegParams.pJoinDutyCycleTimer->timerId, MS_TO_US(RegParams.joinDutyCycleTimeout), SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    6a80:	20fa      	movs	r0, #250	; 0xfa
    6a82:	0080      	lsls	r0, r0, #2
    6a84:	4341      	muls	r1, r0
    6a86:	4c22      	ldr	r4, [pc, #136]	; (6b10 <setJoinDutyCycleTimer+0x25c>)
    6a88:	7d23      	ldrb	r3, [r4, #20]
    6a8a:	7d62      	ldrb	r2, [r4, #21]
    6a8c:	0212      	lsls	r2, r2, #8
    6a8e:	431a      	orrs	r2, r3
    6a90:	7da3      	ldrb	r3, [r4, #22]
    6a92:	041b      	lsls	r3, r3, #16
    6a94:	431a      	orrs	r2, r3
    6a96:	7de3      	ldrb	r3, [r4, #23]
    6a98:	061b      	lsls	r3, r3, #24
    6a9a:	4313      	orrs	r3, r2
    6a9c:	7a18      	ldrb	r0, [r3, #8]
    6a9e:	2300      	movs	r3, #0
    6aa0:	9300      	str	r3, [sp, #0]
    6aa2:	4b20      	ldr	r3, [pc, #128]	; (6b24 <setJoinDutyCycleTimer+0x270>)
    6aa4:	2200      	movs	r2, #0
    6aa6:	4c21      	ldr	r4, [pc, #132]	; (6b2c <setJoinDutyCycleTimer+0x278>)
    6aa8:	47a0      	blx	r4
    6aaa:	e02b      	b.n	6b04 <setJoinDutyCycleTimer+0x250>
				RegParams.joinDutyCycleTimeout = 0;
    6aac:	4b18      	ldr	r3, [pc, #96]	; (6b10 <setJoinDutyCycleTimer+0x25c>)
    6aae:	333e      	adds	r3, #62	; 0x3e
    6ab0:	2200      	movs	r2, #0
    6ab2:	701a      	strb	r2, [r3, #0]
    6ab4:	705a      	strb	r2, [r3, #1]
    6ab6:	709a      	strb	r2, [r3, #2]
    6ab8:	70da      	strb	r2, [r3, #3]
    6aba:	e023      	b.n	6b04 <setJoinDutyCycleTimer+0x250>
		SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    6abc:	4c14      	ldr	r4, [pc, #80]	; (6b10 <setJoinDutyCycleTimer+0x25c>)
    6abe:	7d23      	ldrb	r3, [r4, #20]
    6ac0:	7d62      	ldrb	r2, [r4, #21]
    6ac2:	0212      	lsls	r2, r2, #8
    6ac4:	431a      	orrs	r2, r3
    6ac6:	7da3      	ldrb	r3, [r4, #22]
    6ac8:	041b      	lsls	r3, r3, #16
    6aca:	431a      	orrs	r2, r3
    6acc:	7de3      	ldrb	r3, [r4, #23]
    6ace:	061b      	lsls	r3, r3, #24
    6ad0:	4313      	orrs	r3, r2
    6ad2:	7a18      	ldrb	r0, [r3, #8]
    6ad4:	4b18      	ldr	r3, [pc, #96]	; (6b38 <setJoinDutyCycleTimer+0x284>)
    6ad6:	4798      	blx	r3
		RegParams.joinDutyCycleTimeout = 0;
    6ad8:	0023      	movs	r3, r4
    6ada:	333e      	adds	r3, #62	; 0x3e
    6adc:	2200      	movs	r2, #0
    6ade:	701a      	strb	r2, [r3, #0]
    6ae0:	705a      	strb	r2, [r3, #1]
    6ae2:	709a      	strb	r2, [r3, #2]
    6ae4:	70da      	strb	r2, [r3, #3]
		RegParams.pJoinDutyCycleTimer->remainingtime =0;
    6ae6:	7d23      	ldrb	r3, [r4, #20]
    6ae8:	7d62      	ldrb	r2, [r4, #21]
    6aea:	0212      	lsls	r2, r2, #8
    6aec:	431a      	orrs	r2, r3
    6aee:	7da3      	ldrb	r3, [r4, #22]
    6af0:	041b      	lsls	r3, r3, #16
    6af2:	431a      	orrs	r2, r3
    6af4:	7de3      	ldrb	r3, [r4, #23]
    6af6:	061b      	lsls	r3, r3, #24
    6af8:	4313      	orrs	r3, r2
    6afa:	2200      	movs	r2, #0
    6afc:	711a      	strb	r2, [r3, #4]
    6afe:	715a      	strb	r2, [r3, #5]
    6b00:	719a      	strb	r2, [r3, #6]
    6b02:	71da      	strb	r2, [r3, #7]
}
    6b04:	2008      	movs	r0, #8
    6b06:	b005      	add	sp, #20
    6b08:	bd30      	pop	{r4, r5, pc}
    6b0a:	46c0      	nop			; (mov r8, r8)
    6b0c:	00014ecd 	.word	0x00014ecd
    6b10:	20000fc0 	.word	0x20000fc0
    6b14:	000003e7 	.word	0x000003e7
    6b18:	000097a1 	.word	0x000097a1
    6b1c:	0020c49b 	.word	0x0020c49b
    6b20:	ffdf3b65 	.word	0xffdf3b65
    6b24:	000073e5 	.word	0x000073e5
    6b28:	7fffffff 	.word	0x7fffffff
    6b2c:	00009609 	.word	0x00009609
    6b30:	0000270f 	.word	0x0000270f
    6b34:	000097b5 	.word	0x000097b5
    6b38:	00009915 	.word	0x00009915
    6b3c:	00011769 	.word	0x00011769

00006b40 <setDutyCycleTimer>:
{
    6b40:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b42:	46de      	mov	lr, fp
    6b44:	4657      	mov	r7, sl
    6b46:	464e      	mov	r6, r9
    6b48:	4645      	mov	r5, r8
    6b4a:	b5e0      	push	{r5, r6, r7, lr}
    6b4c:	b087      	sub	sp, #28
	memcpy(&updateDCTimer,attrInput,sizeof(UpdateDutyCycleTimer_t));
    6b4e:	2206      	movs	r2, #6
    6b50:	a804      	add	r0, sp, #16
    6b52:	4bc9      	ldr	r3, [pc, #804]	; (6e78 <setDutyCycleTimer+0x338>)
    6b54:	4798      	blx	r3
    bandId = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].subBandId;
    6b56:	49c9      	ldr	r1, [pc, #804]	; (6e7c <setDutyCycleTimer+0x33c>)
    6b58:	7a0b      	ldrb	r3, [r1, #8]
    6b5a:	7a4a      	ldrb	r2, [r1, #9]
    6b5c:	0212      	lsls	r2, r2, #8
    6b5e:	4313      	orrs	r3, r2
    6b60:	7a8a      	ldrb	r2, [r1, #10]
    6b62:	0412      	lsls	r2, r2, #16
    6b64:	431a      	orrs	r2, r3
    6b66:	7acb      	ldrb	r3, [r1, #11]
    6b68:	061b      	lsls	r3, r3, #24
    6b6a:	431a      	orrs	r2, r3
    6b6c:	232f      	movs	r3, #47	; 0x2f
    6b6e:	5cc9      	ldrb	r1, [r1, r3]
    6b70:	004b      	lsls	r3, r1, #1
    6b72:	185b      	adds	r3, r3, r1
    6b74:	009b      	lsls	r3, r3, #2
    6b76:	189b      	adds	r3, r3, r2
    6b78:	7a1e      	ldrb	r6, [r3, #8]
	if (bandId == 0 && RegParams.band == ISM_JPN923)
    6b7a:	2e00      	cmp	r6, #0
    6b7c:	d105      	bne.n	6b8a <setDutyCycleTimer+0x4a>
    6b7e:	232e      	movs	r3, #46	; 0x2e
    6b80:	4abe      	ldr	r2, [pc, #760]	; (6e7c <setDutyCycleTimer+0x33c>)
    6b82:	5cd3      	ldrb	r3, [r2, r3]
    6b84:	2b05      	cmp	r3, #5
    6b86:	d100      	bne.n	6b8a <setDutyCycleTimer+0x4a>
    6b88:	e162      	b.n	6e50 <setDutyCycleTimer+0x310>
	if(updateDCTimer.joining != 1)
    6b8a:	ab04      	add	r3, sp, #16
    6b8c:	791b      	ldrb	r3, [r3, #4]
    6b8e:	2b00      	cmp	r3, #0
    6b90:	d16a      	bne.n	6c68 <setDutyCycleTimer+0x128>
		RegParams.pSubBandParams[bandId].subBandTimeout = ((uint32_t)updateDCTimer.timeOnAir * ((uint32_t)RegParams.cmnParams.paramsType2.subBandDutyCycle[bandId] - 1));
    6b92:	a904      	add	r1, sp, #16
    6b94:	880a      	ldrh	r2, [r1, #0]
    6b96:	48b9      	ldr	r0, [pc, #740]	; (6e7c <setDutyCycleTimer+0x33c>)
    6b98:	7b07      	ldrb	r7, [r0, #12]
    6b9a:	7b43      	ldrb	r3, [r0, #13]
    6b9c:	021b      	lsls	r3, r3, #8
    6b9e:	433b      	orrs	r3, r7
    6ba0:	7b87      	ldrb	r7, [r0, #14]
    6ba2:	043f      	lsls	r7, r7, #16
    6ba4:	431f      	orrs	r7, r3
    6ba6:	7bc4      	ldrb	r4, [r0, #15]
    6ba8:	0624      	lsls	r4, r4, #24
    6baa:	4327      	orrs	r7, r4
    6bac:	0074      	lsls	r4, r6, #1
    6bae:	19a4      	adds	r4, r4, r6
    6bb0:	00a4      	lsls	r4, r4, #2
    6bb2:	0035      	movs	r5, r6
    6bb4:	35d4      	adds	r5, #212	; 0xd4
    6bb6:	006d      	lsls	r5, r5, #1
    6bb8:	1945      	adds	r5, r0, r5
    6bba:	796b      	ldrb	r3, [r5, #5]
    6bbc:	469c      	mov	ip, r3
    6bbe:	79ab      	ldrb	r3, [r5, #6]
    6bc0:	021b      	lsls	r3, r3, #8
    6bc2:	4665      	mov	r5, ip
    6bc4:	432b      	orrs	r3, r5
    6bc6:	3b01      	subs	r3, #1
    6bc8:	4353      	muls	r3, r2
    6bca:	19e4      	adds	r4, r4, r7
    6bcc:	7223      	strb	r3, [r4, #8]
    6bce:	0a1d      	lsrs	r5, r3, #8
    6bd0:	7265      	strb	r5, [r4, #9]
    6bd2:	0c1d      	lsrs	r5, r3, #16
    6bd4:	72a5      	strb	r5, [r4, #10]
    6bd6:	0e1b      	lsrs	r3, r3, #24
    6bd8:	72e3      	strb	r3, [r4, #11]
		RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = (uint32_t)updateDCTimer.timeOnAir * ((uint32_t) updateDCTimer.aggDutyCycle - 1);
    6bda:	884b      	ldrh	r3, [r1, #2]
    6bdc:	3b01      	subs	r3, #1
    6bde:	435a      	muls	r2, r3
    6be0:	23ba      	movs	r3, #186	; 0xba
    6be2:	33ff      	adds	r3, #255	; 0xff
    6be4:	54c2      	strb	r2, [r0, r3]
    6be6:	0a11      	lsrs	r1, r2, #8
    6be8:	18c0      	adds	r0, r0, r3
    6bea:	7041      	strb	r1, [r0, #1]
    6bec:	0c11      	lsrs	r1, r2, #16
    6bee:	7081      	strb	r1, [r0, #2]
    6bf0:	0e12      	lsrs	r2, r2, #24
    6bf2:	70c2      	strb	r2, [r0, #3]
	if(SwTimerIsRunning(RegParams.pDutyCycleTimer->timerId))
    6bf4:	49a1      	ldr	r1, [pc, #644]	; (6e7c <setDutyCycleTimer+0x33c>)
    6bf6:	7c0b      	ldrb	r3, [r1, #16]
    6bf8:	7c4a      	ldrb	r2, [r1, #17]
    6bfa:	0212      	lsls	r2, r2, #8
    6bfc:	431a      	orrs	r2, r3
    6bfe:	7c8b      	ldrb	r3, [r1, #18]
    6c00:	041b      	lsls	r3, r3, #16
    6c02:	431a      	orrs	r2, r3
    6c04:	7ccb      	ldrb	r3, [r1, #19]
    6c06:	061b      	lsls	r3, r3, #24
    6c08:	4313      	orrs	r3, r2
    6c0a:	7918      	ldrb	r0, [r3, #4]
    6c0c:	4b9c      	ldr	r3, [pc, #624]	; (6e80 <setDutyCycleTimer+0x340>)
    6c0e:	4798      	blx	r3
    uint32_t delta = 0, minimSubBandTimer = UINT32_MAX, ticks,nextTimer;
    6c10:	2300      	movs	r3, #0
    6c12:	4699      	mov	r9, r3
	if(SwTimerIsRunning(RegParams.pDutyCycleTimer->timerId))
    6c14:	2800      	cmp	r0, #0
    6c16:	d136      	bne.n	6c86 <setDutyCycleTimer+0x146>
	minimSubBandTimer = RegParams.pSubBandParams[bandId].subBandTimeout;
    6c18:	4a98      	ldr	r2, [pc, #608]	; (6e7c <setDutyCycleTimer+0x33c>)
    6c1a:	7b13      	ldrb	r3, [r2, #12]
    6c1c:	7b51      	ldrb	r1, [r2, #13]
    6c1e:	0209      	lsls	r1, r1, #8
    6c20:	430b      	orrs	r3, r1
    6c22:	7b91      	ldrb	r1, [r2, #14]
    6c24:	0409      	lsls	r1, r1, #16
    6c26:	4319      	orrs	r1, r3
    6c28:	7bd3      	ldrb	r3, [r2, #15]
    6c2a:	061b      	lsls	r3, r3, #24
    6c2c:	4319      	orrs	r1, r3
    6c2e:	0073      	lsls	r3, r6, #1
    6c30:	199b      	adds	r3, r3, r6
    6c32:	009b      	lsls	r3, r3, #2
    6c34:	185b      	adds	r3, r3, r1
    6c36:	7a18      	ldrb	r0, [r3, #8]
    6c38:	7a59      	ldrb	r1, [r3, #9]
    6c3a:	0209      	lsls	r1, r1, #8
    6c3c:	4301      	orrs	r1, r0
    6c3e:	7a98      	ldrb	r0, [r3, #10]
    6c40:	0400      	lsls	r0, r0, #16
    6c42:	4301      	orrs	r1, r0
    6c44:	7ad8      	ldrb	r0, [r3, #11]
    6c46:	0600      	lsls	r0, r0, #24
    6c48:	4308      	orrs	r0, r1
    6c4a:	9003      	str	r0, [sp, #12]
	for(i = 0; i < RegParams.maxSubBands; i++)
    6c4c:	2329      	movs	r3, #41	; 0x29
    6c4e:	5cd3      	ldrb	r3, [r2, r3]
    6c50:	2b00      	cmp	r3, #0
    6c52:	d100      	bne.n	6c56 <setDutyCycleTimer+0x116>
    6c54:	e09c      	b.n	6d90 <setDutyCycleTimer+0x250>
    6c56:	2200      	movs	r2, #0
		if((i != bandId) && (RegParams.pSubBandParams[i].subBandTimeout != 0))
    6c58:	4d88      	ldr	r5, [pc, #544]	; (6e7c <setDutyCycleTimer+0x33c>)
			if(RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer && RegParams.pSubBandParams[i].subBandTimeout != 0)
    6c5a:	002f      	movs	r7, r5
				RegParams.pSubBandParams[i].subBandTimeout = 0;
    6c5c:	2300      	movs	r3, #0
    6c5e:	469a      	mov	sl, r3
	for(i = 0; i < RegParams.maxSubBands; i++)
    6c60:	46a8      	mov	r8, r5
    6c62:	2329      	movs	r3, #41	; 0x29
    6c64:	469c      	mov	ip, r3
    6c66:	e051      	b.n	6d0c <setDutyCycleTimer+0x1cc>
		RegParams.joinDutyCycleTimeout = (uint32_t)updateDCTimer.timeOnAir * ((uint32_t) updateDCTimer.aggDutyCycle - 1);
    6c68:	a904      	add	r1, sp, #16
    6c6a:	884a      	ldrh	r2, [r1, #2]
    6c6c:	3a01      	subs	r2, #1
    6c6e:	880b      	ldrh	r3, [r1, #0]
    6c70:	4353      	muls	r3, r2
    6c72:	4a82      	ldr	r2, [pc, #520]	; (6e7c <setDutyCycleTimer+0x33c>)
    6c74:	323e      	adds	r2, #62	; 0x3e
    6c76:	7013      	strb	r3, [r2, #0]
    6c78:	0a19      	lsrs	r1, r3, #8
    6c7a:	7051      	strb	r1, [r2, #1]
    6c7c:	0c19      	lsrs	r1, r3, #16
    6c7e:	7091      	strb	r1, [r2, #2]
    6c80:	0e1b      	lsrs	r3, r3, #24
    6c82:	70d3      	strb	r3, [r2, #3]
    6c84:	e7b6      	b.n	6bf4 <setDutyCycleTimer+0xb4>
		SwTimerStop(RegParams.pDutyCycleTimer->timerId);
    6c86:	4c7d      	ldr	r4, [pc, #500]	; (6e7c <setDutyCycleTimer+0x33c>)
    6c88:	7c23      	ldrb	r3, [r4, #16]
    6c8a:	7c62      	ldrb	r2, [r4, #17]
    6c8c:	0212      	lsls	r2, r2, #8
    6c8e:	431a      	orrs	r2, r3
    6c90:	7ca3      	ldrb	r3, [r4, #18]
    6c92:	041b      	lsls	r3, r3, #16
    6c94:	431a      	orrs	r2, r3
    6c96:	7ce3      	ldrb	r3, [r4, #19]
    6c98:	061b      	lsls	r3, r3, #24
    6c9a:	4313      	orrs	r3, r2
    6c9c:	7918      	ldrb	r0, [r3, #4]
    6c9e:	4b79      	ldr	r3, [pc, #484]	; (6e84 <setDutyCycleTimer+0x344>)
    6ca0:	4798      	blx	r3
		ticks = SwTimerReadValue(RegParams.pDutyCycleTimer->timerId);
    6ca2:	7c23      	ldrb	r3, [r4, #16]
    6ca4:	7c62      	ldrb	r2, [r4, #17]
    6ca6:	0212      	lsls	r2, r2, #8
    6ca8:	431a      	orrs	r2, r3
    6caa:	7ca3      	ldrb	r3, [r4, #18]
    6cac:	041b      	lsls	r3, r3, #16
    6cae:	431a      	orrs	r2, r3
    6cb0:	7ce3      	ldrb	r3, [r4, #19]
    6cb2:	061b      	lsls	r3, r3, #24
    6cb4:	4313      	orrs	r3, r2
    6cb6:	7918      	ldrb	r0, [r3, #4]
    6cb8:	4b73      	ldr	r3, [pc, #460]	; (6e88 <setDutyCycleTimer+0x348>)
    6cba:	4798      	blx	r3
		delta = RegParams.pDutyCycleTimer->lastTimerValue - US_TO_MS(ticks);
    6cbc:	7c23      	ldrb	r3, [r4, #16]
    6cbe:	7c62      	ldrb	r2, [r4, #17]
    6cc0:	0212      	lsls	r2, r2, #8
    6cc2:	431a      	orrs	r2, r3
    6cc4:	7ca3      	ldrb	r3, [r4, #18]
    6cc6:	041b      	lsls	r3, r3, #16
    6cc8:	431a      	orrs	r2, r3
    6cca:	7ce3      	ldrb	r3, [r4, #19]
    6ccc:	061b      	lsls	r3, r3, #24
    6cce:	4313      	orrs	r3, r2
    6cd0:	781c      	ldrb	r4, [r3, #0]
    6cd2:	785a      	ldrb	r2, [r3, #1]
    6cd4:	0212      	lsls	r2, r2, #8
    6cd6:	4322      	orrs	r2, r4
    6cd8:	789c      	ldrb	r4, [r3, #2]
    6cda:	0424      	lsls	r4, r4, #16
    6cdc:	4322      	orrs	r2, r4
    6cde:	78dc      	ldrb	r4, [r3, #3]
    6ce0:	0624      	lsls	r4, r4, #24
    6ce2:	4314      	orrs	r4, r2
    6ce4:	21fa      	movs	r1, #250	; 0xfa
    6ce6:	0089      	lsls	r1, r1, #2
    6ce8:	4b68      	ldr	r3, [pc, #416]	; (6e8c <setDutyCycleTimer+0x34c>)
    6cea:	4798      	blx	r3
    6cec:	1a23      	subs	r3, r4, r0
    6cee:	4699      	mov	r9, r3
    6cf0:	e792      	b.n	6c18 <setDutyCycleTimer+0xd8>
				RegParams.pSubBandParams[i].subBandTimeout = 0;
    6cf2:	4651      	mov	r1, sl
    6cf4:	7219      	strb	r1, [r3, #8]
    6cf6:	7259      	strb	r1, [r3, #9]
    6cf8:	7299      	strb	r1, [r3, #10]
    6cfa:	72d9      	strb	r1, [r3, #11]
    6cfc:	e02c      	b.n	6d58 <setDutyCycleTimer+0x218>
	for(i = 0; i < RegParams.maxSubBands; i++)
    6cfe:	3201      	adds	r2, #1
    6d00:	b2d2      	uxtb	r2, r2
    6d02:	4643      	mov	r3, r8
    6d04:	4661      	mov	r1, ip
    6d06:	5c5b      	ldrb	r3, [r3, r1]
    6d08:	4293      	cmp	r3, r2
    6d0a:	d941      	bls.n	6d90 <setDutyCycleTimer+0x250>
		if((i != bandId) && (RegParams.pSubBandParams[i].subBandTimeout != 0))
    6d0c:	4296      	cmp	r6, r2
    6d0e:	d0f6      	beq.n	6cfe <setDutyCycleTimer+0x1be>
    6d10:	0054      	lsls	r4, r2, #1
    6d12:	18a4      	adds	r4, r4, r2
    6d14:	00a4      	lsls	r4, r4, #2
    6d16:	7b2b      	ldrb	r3, [r5, #12]
    6d18:	7b69      	ldrb	r1, [r5, #13]
    6d1a:	0209      	lsls	r1, r1, #8
    6d1c:	4319      	orrs	r1, r3
    6d1e:	7bab      	ldrb	r3, [r5, #14]
    6d20:	041b      	lsls	r3, r3, #16
    6d22:	4319      	orrs	r1, r3
    6d24:	7beb      	ldrb	r3, [r5, #15]
    6d26:	061b      	lsls	r3, r3, #24
    6d28:	430b      	orrs	r3, r1
    6d2a:	191b      	adds	r3, r3, r4
    6d2c:	7a18      	ldrb	r0, [r3, #8]
    6d2e:	7a59      	ldrb	r1, [r3, #9]
    6d30:	0209      	lsls	r1, r1, #8
    6d32:	4301      	orrs	r1, r0
    6d34:	7a98      	ldrb	r0, [r3, #10]
    6d36:	0400      	lsls	r0, r0, #16
    6d38:	4308      	orrs	r0, r1
    6d3a:	7ad9      	ldrb	r1, [r3, #11]
    6d3c:	0609      	lsls	r1, r1, #24
    6d3e:	4301      	orrs	r1, r0
    6d40:	d0dd      	beq.n	6cfe <setDutyCycleTimer+0x1be>
			if(RegParams.pSubBandParams[i].subBandTimeout > delta)
    6d42:	4589      	cmp	r9, r1
    6d44:	d2d5      	bcs.n	6cf2 <setDutyCycleTimer+0x1b2>
				          RegParams.pSubBandParams[i].subBandTimeout - delta;
    6d46:	4648      	mov	r0, r9
    6d48:	1a09      	subs	r1, r1, r0
				RegParams.pSubBandParams[i].subBandTimeout = 
    6d4a:	7219      	strb	r1, [r3, #8]
    6d4c:	0a08      	lsrs	r0, r1, #8
    6d4e:	7258      	strb	r0, [r3, #9]
    6d50:	0c08      	lsrs	r0, r1, #16
    6d52:	7298      	strb	r0, [r3, #10]
    6d54:	0e09      	lsrs	r1, r1, #24
    6d56:	72d9      	strb	r1, [r3, #11]
			if(RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer && RegParams.pSubBandParams[i].subBandTimeout != 0)
    6d58:	7b3b      	ldrb	r3, [r7, #12]
    6d5a:	7b79      	ldrb	r1, [r7, #13]
    6d5c:	0209      	lsls	r1, r1, #8
    6d5e:	4319      	orrs	r1, r3
    6d60:	7bbb      	ldrb	r3, [r7, #14]
    6d62:	041b      	lsls	r3, r3, #16
    6d64:	4319      	orrs	r1, r3
    6d66:	7bfb      	ldrb	r3, [r7, #15]
    6d68:	061b      	lsls	r3, r3, #24
    6d6a:	430b      	orrs	r3, r1
    6d6c:	191c      	adds	r4, r3, r4
    6d6e:	7a23      	ldrb	r3, [r4, #8]
    6d70:	7a61      	ldrb	r1, [r4, #9]
    6d72:	0209      	lsls	r1, r1, #8
    6d74:	4319      	orrs	r1, r3
    6d76:	7aa3      	ldrb	r3, [r4, #10]
    6d78:	041b      	lsls	r3, r3, #16
    6d7a:	4319      	orrs	r1, r3
    6d7c:	7ae3      	ldrb	r3, [r4, #11]
    6d7e:	061b      	lsls	r3, r3, #24
    6d80:	430b      	orrs	r3, r1
    6d82:	9903      	ldr	r1, [sp, #12]
    6d84:	428b      	cmp	r3, r1
    6d86:	d8ba      	bhi.n	6cfe <setDutyCycleTimer+0x1be>
    6d88:	2b00      	cmp	r3, #0
    6d8a:	d0b8      	beq.n	6cfe <setDutyCycleTimer+0x1be>
				minimSubBandTimer = RegParams.pSubBandParams[i].subBandTimeout;
    6d8c:	9303      	str	r3, [sp, #12]
    6d8e:	e7b6      	b.n	6cfe <setDutyCycleTimer+0x1be>
	if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout != 0)
    6d90:	493a      	ldr	r1, [pc, #232]	; (6e7c <setDutyCycleTimer+0x33c>)
    6d92:	23ba      	movs	r3, #186	; 0xba
    6d94:	33ff      	adds	r3, #255	; 0xff
    6d96:	5ccb      	ldrb	r3, [r1, r3]
    6d98:	22dd      	movs	r2, #221	; 0xdd
    6d9a:	0052      	lsls	r2, r2, #1
    6d9c:	5c8a      	ldrb	r2, [r1, r2]
    6d9e:	0212      	lsls	r2, r2, #8
    6da0:	431a      	orrs	r2, r3
    6da2:	23bc      	movs	r3, #188	; 0xbc
    6da4:	33ff      	adds	r3, #255	; 0xff
    6da6:	5ccb      	ldrb	r3, [r1, r3]
    6da8:	041b      	lsls	r3, r3, #16
    6daa:	431a      	orrs	r2, r3
    6dac:	23de      	movs	r3, #222	; 0xde
    6dae:	005b      	lsls	r3, r3, #1
    6db0:	5ccb      	ldrb	r3, [r1, r3]
    6db2:	061b      	lsls	r3, r3, #24
    6db4:	4313      	orrs	r3, r2
    6db6:	d00f      	beq.n	6dd8 <setDutyCycleTimer+0x298>
		if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout > delta)
    6db8:	4599      	cmp	r9, r3
    6dba:	d251      	bcs.n	6e60 <setDutyCycleTimer+0x320>
			RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout - delta;
    6dbc:	000a      	movs	r2, r1
    6dbe:	4649      	mov	r1, r9
    6dc0:	1a5b      	subs	r3, r3, r1
    6dc2:	21ba      	movs	r1, #186	; 0xba
    6dc4:	31ff      	adds	r1, #255	; 0xff
    6dc6:	5453      	strb	r3, [r2, r1]
    6dc8:	0a19      	lsrs	r1, r3, #8
    6dca:	32ba      	adds	r2, #186	; 0xba
    6dcc:	32ff      	adds	r2, #255	; 0xff
    6dce:	7051      	strb	r1, [r2, #1]
    6dd0:	0c19      	lsrs	r1, r3, #16
    6dd2:	7091      	strb	r1, [r2, #2]
    6dd4:	0e1b      	lsrs	r3, r3, #24
    6dd6:	70d3      	strb	r3, [r2, #3]
		if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout >= minimSubBandTimer)
    6dd8:	4a28      	ldr	r2, [pc, #160]	; (6e7c <setDutyCycleTimer+0x33c>)
    6dda:	23ba      	movs	r3, #186	; 0xba
    6ddc:	33ff      	adds	r3, #255	; 0xff
    6dde:	5cd1      	ldrb	r1, [r2, r3]
    6de0:	3301      	adds	r3, #1
    6de2:	5cd3      	ldrb	r3, [r2, r3]
    6de4:	021b      	lsls	r3, r3, #8
    6de6:	430b      	orrs	r3, r1
    6de8:	21bc      	movs	r1, #188	; 0xbc
    6dea:	31ff      	adds	r1, #255	; 0xff
    6dec:	5c51      	ldrb	r1, [r2, r1]
    6dee:	0409      	lsls	r1, r1, #16
    6df0:	430b      	orrs	r3, r1
    6df2:	21de      	movs	r1, #222	; 0xde
    6df4:	0049      	lsls	r1, r1, #1
    6df6:	5c51      	ldrb	r1, [r2, r1]
    6df8:	0609      	lsls	r1, r1, #24
    6dfa:	4319      	orrs	r1, r3
    6dfc:	9a03      	ldr	r2, [sp, #12]
    6dfe:	4291      	cmp	r1, r2
    6e00:	d200      	bcs.n	6e04 <setDutyCycleTimer+0x2c4>
    6e02:	0011      	movs	r1, r2
		RegParams.pDutyCycleTimer->lastTimerValue = nextTimer;
    6e04:	4b1d      	ldr	r3, [pc, #116]	; (6e7c <setDutyCycleTimer+0x33c>)
    6e06:	7c1a      	ldrb	r2, [r3, #16]
    6e08:	7c58      	ldrb	r0, [r3, #17]
    6e0a:	0200      	lsls	r0, r0, #8
    6e0c:	4310      	orrs	r0, r2
    6e0e:	7c9a      	ldrb	r2, [r3, #18]
    6e10:	0412      	lsls	r2, r2, #16
    6e12:	4310      	orrs	r0, r2
    6e14:	7cda      	ldrb	r2, [r3, #19]
    6e16:	0612      	lsls	r2, r2, #24
    6e18:	4302      	orrs	r2, r0
    6e1a:	7011      	strb	r1, [r2, #0]
    6e1c:	0a08      	lsrs	r0, r1, #8
    6e1e:	7050      	strb	r0, [r2, #1]
    6e20:	0c08      	lsrs	r0, r1, #16
    6e22:	7090      	strb	r0, [r2, #2]
    6e24:	0e08      	lsrs	r0, r1, #24
    6e26:	70d0      	strb	r0, [r2, #3]
		SwTimerStart (RegParams.pDutyCycleTimer->timerId, MS_TO_US(nextTimer), SW_TIMEOUT_RELATIVE, (void *)DutyCycleCallback, NULL);
    6e28:	22fa      	movs	r2, #250	; 0xfa
    6e2a:	0092      	lsls	r2, r2, #2
    6e2c:	4351      	muls	r1, r2
    6e2e:	7c18      	ldrb	r0, [r3, #16]
    6e30:	7c5a      	ldrb	r2, [r3, #17]
    6e32:	0212      	lsls	r2, r2, #8
    6e34:	4310      	orrs	r0, r2
    6e36:	7c9a      	ldrb	r2, [r3, #18]
    6e38:	0412      	lsls	r2, r2, #16
    6e3a:	4302      	orrs	r2, r0
    6e3c:	7cdb      	ldrb	r3, [r3, #19]
    6e3e:	061b      	lsls	r3, r3, #24
    6e40:	4313      	orrs	r3, r2
    6e42:	7918      	ldrb	r0, [r3, #4]
    6e44:	2300      	movs	r3, #0
    6e46:	9300      	str	r3, [sp, #0]
    6e48:	4b11      	ldr	r3, [pc, #68]	; (6e90 <setDutyCycleTimer+0x350>)
    6e4a:	2200      	movs	r2, #0
    6e4c:	4c11      	ldr	r4, [pc, #68]	; (6e94 <setDutyCycleTimer+0x354>)
    6e4e:	47a0      	blx	r4
}
    6e50:	2008      	movs	r0, #8
    6e52:	b007      	add	sp, #28
    6e54:	bc3c      	pop	{r2, r3, r4, r5}
    6e56:	4690      	mov	r8, r2
    6e58:	4699      	mov	r9, r3
    6e5a:	46a2      	mov	sl, r4
    6e5c:	46ab      	mov	fp, r5
    6e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = 0;
    6e60:	4b06      	ldr	r3, [pc, #24]	; (6e7c <setDutyCycleTimer+0x33c>)
    6e62:	2100      	movs	r1, #0
    6e64:	22ba      	movs	r2, #186	; 0xba
    6e66:	32ff      	adds	r2, #255	; 0xff
    6e68:	5499      	strb	r1, [r3, r2]
    6e6a:	189b      	adds	r3, r3, r2
    6e6c:	2200      	movs	r2, #0
    6e6e:	705a      	strb	r2, [r3, #1]
    6e70:	709a      	strb	r2, [r3, #2]
    6e72:	70da      	strb	r2, [r3, #3]
    6e74:	e7b0      	b.n	6dd8 <setDutyCycleTimer+0x298>
    6e76:	46c0      	nop			; (mov r8, r8)
    6e78:	00014ecd 	.word	0x00014ecd
    6e7c:	20000fc0 	.word	0x20000fc0
    6e80:	000097a1 	.word	0x000097a1
    6e84:	00009915 	.word	0x00009915
    6e88:	000097b5 	.word	0x000097b5
    6e8c:	00011769 	.word	0x00011769
    6e90:	00006e99 	.word	0x00006e99
    6e94:	00009609 	.word	0x00009609

00006e98 <DutyCycleCallback>:
{
    6e98:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e9a:	46de      	mov	lr, fp
    6e9c:	4657      	mov	r7, sl
    6e9e:	464e      	mov	r6, r9
    6ea0:	4645      	mov	r5, r8
    6ea2:	b5e0      	push	{r5, r6, r7, lr}
    6ea4:	b087      	sub	sp, #28
	uint32_t DutyCycleTimeout = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout;
    6ea6:	4980      	ldr	r1, [pc, #512]	; (70a8 <DutyCycleCallback+0x210>)
    6ea8:	23ba      	movs	r3, #186	; 0xba
    6eaa:	33ff      	adds	r3, #255	; 0xff
    6eac:	5cca      	ldrb	r2, [r1, r3]
    6eae:	3301      	adds	r3, #1
    6eb0:	5ccb      	ldrb	r3, [r1, r3]
    6eb2:	021b      	lsls	r3, r3, #8
    6eb4:	431a      	orrs	r2, r3
    6eb6:	23bc      	movs	r3, #188	; 0xbc
    6eb8:	33ff      	adds	r3, #255	; 0xff
    6eba:	5ccb      	ldrb	r3, [r1, r3]
    6ebc:	041b      	lsls	r3, r3, #16
    6ebe:	4313      	orrs	r3, r2
    6ec0:	22de      	movs	r2, #222	; 0xde
    6ec2:	0052      	lsls	r2, r2, #1
    6ec4:	5c8a      	ldrb	r2, [r1, r2]
    6ec6:	0612      	lsls	r2, r2, #24
    6ec8:	431a      	orrs	r2, r3
    6eca:	9205      	str	r2, [sp, #20]
    for (i=0; i < RegParams.maxSubBands; i++)
    6ecc:	2329      	movs	r3, #41	; 0x29
    6ece:	5ccb      	ldrb	r3, [r1, r3]
    6ed0:	2b00      	cmp	r3, #0
    6ed2:	d100      	bne.n	6ed6 <DutyCycleCallback+0x3e>
    6ed4:	e0df      	b.n	7096 <DutyCycleCallback+0x1fe>
    6ed6:	2600      	movs	r6, #0
    6ed8:	2300      	movs	r3, #0
    6eda:	9304      	str	r3, [sp, #16]
    6edc:	3b01      	subs	r3, #1
    6ede:	9303      	str	r3, [sp, #12]
        if (( RegParams.pSubBandParams[i].subBandTimeout != 0 ))
    6ee0:	000f      	movs	r7, r1
            if ( RegParams.pSubBandParams[i].subBandTimeout > RegParams.pDutyCycleTimer->lastTimerValue )
    6ee2:	4688      	mov	r8, r1
            if ( (RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer) && (RegParams.pSubBandParams[i].subBandTimeout != 0) )
    6ee4:	468c      	mov	ip, r1
                RegParams.pSubBandParams[i].subBandTimeout = 0;
    6ee6:	2300      	movs	r3, #0
    6ee8:	469b      	mov	fp, r3
    for (i=0; i < RegParams.maxSubBands; i++)
    6eea:	468a      	mov	sl, r1
    6eec:	2329      	movs	r3, #41	; 0x29
    6eee:	4699      	mov	r9, r3
    6ef0:	e00c      	b.n	6f0c <DutyCycleCallback+0x74>
                RegParams.pSubBandParams[i].subBandTimeout = 0;
    6ef2:	465a      	mov	r2, fp
    6ef4:	721a      	strb	r2, [r3, #8]
    6ef6:	725a      	strb	r2, [r3, #9]
    6ef8:	729a      	strb	r2, [r3, #10]
    6efa:	72da      	strb	r2, [r3, #11]
    6efc:	e03f      	b.n	6f7e <DutyCycleCallback+0xe6>
    for (i=0; i < RegParams.maxSubBands; i++)
    6efe:	3601      	adds	r6, #1
    6f00:	b2f6      	uxtb	r6, r6
    6f02:	4653      	mov	r3, sl
    6f04:	464a      	mov	r2, r9
    6f06:	5c9b      	ldrb	r3, [r3, r2]
    6f08:	42b3      	cmp	r3, r6
    6f0a:	d95a      	bls.n	6fc2 <DutyCycleCallback+0x12a>
        if (( RegParams.pSubBandParams[i].subBandTimeout != 0 ))
    6f0c:	0071      	lsls	r1, r6, #1
    6f0e:	1989      	adds	r1, r1, r6
    6f10:	0089      	lsls	r1, r1, #2
    6f12:	7b3b      	ldrb	r3, [r7, #12]
    6f14:	7b7a      	ldrb	r2, [r7, #13]
    6f16:	0212      	lsls	r2, r2, #8
    6f18:	431a      	orrs	r2, r3
    6f1a:	7bbb      	ldrb	r3, [r7, #14]
    6f1c:	041b      	lsls	r3, r3, #16
    6f1e:	431a      	orrs	r2, r3
    6f20:	7bfb      	ldrb	r3, [r7, #15]
    6f22:	061b      	lsls	r3, r3, #24
    6f24:	4313      	orrs	r3, r2
    6f26:	185b      	adds	r3, r3, r1
    6f28:	7a1a      	ldrb	r2, [r3, #8]
    6f2a:	7a58      	ldrb	r0, [r3, #9]
    6f2c:	0200      	lsls	r0, r0, #8
    6f2e:	4310      	orrs	r0, r2
    6f30:	7a9a      	ldrb	r2, [r3, #10]
    6f32:	0412      	lsls	r2, r2, #16
    6f34:	4310      	orrs	r0, r2
    6f36:	7ada      	ldrb	r2, [r3, #11]
    6f38:	0612      	lsls	r2, r2, #24
    6f3a:	4302      	orrs	r2, r0
    6f3c:	d0df      	beq.n	6efe <DutyCycleCallback+0x66>
            if ( RegParams.pSubBandParams[i].subBandTimeout > RegParams.pDutyCycleTimer->lastTimerValue )
    6f3e:	4640      	mov	r0, r8
    6f40:	7c05      	ldrb	r5, [r0, #16]
    6f42:	7c44      	ldrb	r4, [r0, #17]
    6f44:	0224      	lsls	r4, r4, #8
    6f46:	4325      	orrs	r5, r4
    6f48:	7c80      	ldrb	r0, [r0, #18]
    6f4a:	0400      	lsls	r0, r0, #16
    6f4c:	4305      	orrs	r5, r0
    6f4e:	4640      	mov	r0, r8
    6f50:	7cc0      	ldrb	r0, [r0, #19]
    6f52:	0600      	lsls	r0, r0, #24
    6f54:	4328      	orrs	r0, r5
    6f56:	7804      	ldrb	r4, [r0, #0]
    6f58:	7845      	ldrb	r5, [r0, #1]
    6f5a:	022d      	lsls	r5, r5, #8
    6f5c:	4325      	orrs	r5, r4
    6f5e:	7884      	ldrb	r4, [r0, #2]
    6f60:	0424      	lsls	r4, r4, #16
    6f62:	4325      	orrs	r5, r4
    6f64:	78c4      	ldrb	r4, [r0, #3]
    6f66:	0624      	lsls	r4, r4, #24
    6f68:	432c      	orrs	r4, r5
    6f6a:	42a2      	cmp	r2, r4
    6f6c:	d9c1      	bls.n	6ef2 <DutyCycleCallback+0x5a>
                RegParams.pSubBandParams[i].subBandTimeout = RegParams.pSubBandParams[i].subBandTimeout - RegParams.pDutyCycleTimer->lastTimerValue;
    6f6e:	1b12      	subs	r2, r2, r4
    6f70:	721a      	strb	r2, [r3, #8]
    6f72:	0a10      	lsrs	r0, r2, #8
    6f74:	7258      	strb	r0, [r3, #9]
    6f76:	0c10      	lsrs	r0, r2, #16
    6f78:	7298      	strb	r0, [r3, #10]
    6f7a:	0e12      	lsrs	r2, r2, #24
    6f7c:	72da      	strb	r2, [r3, #11]
            if ( (RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer) && (RegParams.pSubBandParams[i].subBandTimeout != 0) )
    6f7e:	4663      	mov	r3, ip
    6f80:	7b1b      	ldrb	r3, [r3, #12]
    6f82:	4662      	mov	r2, ip
    6f84:	7b52      	ldrb	r2, [r2, #13]
    6f86:	0212      	lsls	r2, r2, #8
    6f88:	431a      	orrs	r2, r3
    6f8a:	4663      	mov	r3, ip
    6f8c:	7b9b      	ldrb	r3, [r3, #14]
    6f8e:	041b      	lsls	r3, r3, #16
    6f90:	431a      	orrs	r2, r3
    6f92:	4663      	mov	r3, ip
    6f94:	7bdb      	ldrb	r3, [r3, #15]
    6f96:	061b      	lsls	r3, r3, #24
    6f98:	4313      	orrs	r3, r2
    6f9a:	1859      	adds	r1, r3, r1
    6f9c:	7a0b      	ldrb	r3, [r1, #8]
    6f9e:	7a4a      	ldrb	r2, [r1, #9]
    6fa0:	0212      	lsls	r2, r2, #8
    6fa2:	431a      	orrs	r2, r3
    6fa4:	7a8b      	ldrb	r3, [r1, #10]
    6fa6:	041b      	lsls	r3, r3, #16
    6fa8:	431a      	orrs	r2, r3
    6faa:	7acb      	ldrb	r3, [r1, #11]
    6fac:	061b      	lsls	r3, r3, #24
    6fae:	4313      	orrs	r3, r2
    6fb0:	9a03      	ldr	r2, [sp, #12]
    6fb2:	4293      	cmp	r3, r2
    6fb4:	d8a3      	bhi.n	6efe <DutyCycleCallback+0x66>
    6fb6:	2b00      	cmp	r3, #0
    6fb8:	d0a1      	beq.n	6efe <DutyCycleCallback+0x66>
                minimSubBandTimer  = RegParams.pSubBandParams[i].subBandTimeout;
    6fba:	9303      	str	r3, [sp, #12]
                found = 1;
    6fbc:	2301      	movs	r3, #1
    6fbe:	9304      	str	r3, [sp, #16]
    6fc0:	e79d      	b.n	6efe <DutyCycleCallback+0x66>
    if (( DutyCycleTimeout != 0 ))
    6fc2:	9b05      	ldr	r3, [sp, #20]
    6fc4:	2b00      	cmp	r3, #0
    6fc6:	d031      	beq.n	702c <DutyCycleCallback+0x194>
	    if (DutyCycleTimeout > RegParams.pDutyCycleTimer->lastTimerValue)
    6fc8:	4937      	ldr	r1, [pc, #220]	; (70a8 <DutyCycleCallback+0x210>)
    6fca:	7c0b      	ldrb	r3, [r1, #16]
    6fcc:	7c4a      	ldrb	r2, [r1, #17]
    6fce:	0212      	lsls	r2, r2, #8
    6fd0:	431a      	orrs	r2, r3
    6fd2:	7c8b      	ldrb	r3, [r1, #18]
    6fd4:	041b      	lsls	r3, r3, #16
    6fd6:	431a      	orrs	r2, r3
    6fd8:	7ccb      	ldrb	r3, [r1, #19]
    6fda:	061b      	lsls	r3, r3, #24
    6fdc:	4313      	orrs	r3, r2
    6fde:	7819      	ldrb	r1, [r3, #0]
    6fe0:	785a      	ldrb	r2, [r3, #1]
    6fe2:	0212      	lsls	r2, r2, #8
    6fe4:	430a      	orrs	r2, r1
    6fe6:	7899      	ldrb	r1, [r3, #2]
    6fe8:	0409      	lsls	r1, r1, #16
    6fea:	430a      	orrs	r2, r1
    6fec:	78d9      	ldrb	r1, [r3, #3]
    6fee:	0609      	lsls	r1, r1, #24
    6ff0:	4311      	orrs	r1, r2
    6ff2:	9a05      	ldr	r2, [sp, #20]
    6ff4:	428a      	cmp	r2, r1
    6ff6:	d90f      	bls.n	7018 <DutyCycleCallback+0x180>
		    RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = DutyCycleTimeout - RegParams.pDutyCycleTimer->lastTimerValue;
    6ff8:	1a51      	subs	r1, r2, r1
    6ffa:	4b2b      	ldr	r3, [pc, #172]	; (70a8 <DutyCycleCallback+0x210>)
    6ffc:	22ba      	movs	r2, #186	; 0xba
    6ffe:	32ff      	adds	r2, #255	; 0xff
    7000:	5499      	strb	r1, [r3, r2]
    7002:	0a0a      	lsrs	r2, r1, #8
    7004:	33ba      	adds	r3, #186	; 0xba
    7006:	33ff      	adds	r3, #255	; 0xff
    7008:	705a      	strb	r2, [r3, #1]
    700a:	0c0a      	lsrs	r2, r1, #16
    700c:	709a      	strb	r2, [r3, #2]
    700e:	0e0a      	lsrs	r2, r1, #24
    7010:	70da      	strb	r2, [r3, #3]
		if(DutyCycleTimeout)
    7012:	2900      	cmp	r1, #0
    7014:	d10e      	bne.n	7034 <DutyCycleCallback+0x19c>
    7016:	e009      	b.n	702c <DutyCycleCallback+0x194>
		    RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = 0;
    7018:	4b23      	ldr	r3, [pc, #140]	; (70a8 <DutyCycleCallback+0x210>)
    701a:	2100      	movs	r1, #0
    701c:	22ba      	movs	r2, #186	; 0xba
    701e:	32ff      	adds	r2, #255	; 0xff
    7020:	5499      	strb	r1, [r3, r2]
    7022:	189b      	adds	r3, r3, r2
    7024:	2200      	movs	r2, #0
    7026:	705a      	strb	r2, [r3, #1]
    7028:	709a      	strb	r2, [r3, #2]
    702a:	70da      	strb	r2, [r3, #3]
    if ( found == 1 )
    702c:	9b04      	ldr	r3, [sp, #16]
    702e:	2b00      	cmp	r3, #0
    7030:	d02a      	beq.n	7088 <DutyCycleCallback+0x1f0>
    7032:	2100      	movs	r1, #0
    7034:	9a03      	ldr	r2, [sp, #12]
    7036:	4291      	cmp	r1, r2
    7038:	d200      	bcs.n	703c <DutyCycleCallback+0x1a4>
    703a:	0011      	movs	r1, r2
        RegParams.pDutyCycleTimer->lastTimerValue = nextTimer;
    703c:	4b1a      	ldr	r3, [pc, #104]	; (70a8 <DutyCycleCallback+0x210>)
    703e:	7c1a      	ldrb	r2, [r3, #16]
    7040:	7c58      	ldrb	r0, [r3, #17]
    7042:	0200      	lsls	r0, r0, #8
    7044:	4310      	orrs	r0, r2
    7046:	7c9a      	ldrb	r2, [r3, #18]
    7048:	0412      	lsls	r2, r2, #16
    704a:	4310      	orrs	r0, r2
    704c:	7cda      	ldrb	r2, [r3, #19]
    704e:	0612      	lsls	r2, r2, #24
    7050:	4302      	orrs	r2, r0
    7052:	7011      	strb	r1, [r2, #0]
    7054:	0a08      	lsrs	r0, r1, #8
    7056:	7050      	strb	r0, [r2, #1]
    7058:	0c08      	lsrs	r0, r1, #16
    705a:	7090      	strb	r0, [r2, #2]
    705c:	0e08      	lsrs	r0, r1, #24
    705e:	70d0      	strb	r0, [r2, #3]
		SwTimerStart (RegParams.pDutyCycleTimer->timerId, MS_TO_US(nextTimer), SW_TIMEOUT_RELATIVE, (void *)DutyCycleCallback, NULL);
    7060:	22fa      	movs	r2, #250	; 0xfa
    7062:	0092      	lsls	r2, r2, #2
    7064:	4351      	muls	r1, r2
    7066:	7c18      	ldrb	r0, [r3, #16]
    7068:	7c5a      	ldrb	r2, [r3, #17]
    706a:	0212      	lsls	r2, r2, #8
    706c:	4310      	orrs	r0, r2
    706e:	7c9a      	ldrb	r2, [r3, #18]
    7070:	0412      	lsls	r2, r2, #16
    7072:	4302      	orrs	r2, r0
    7074:	7cdb      	ldrb	r3, [r3, #19]
    7076:	061b      	lsls	r3, r3, #24
    7078:	4313      	orrs	r3, r2
    707a:	7918      	ldrb	r0, [r3, #4]
    707c:	2300      	movs	r3, #0
    707e:	9300      	str	r3, [sp, #0]
    7080:	4b0a      	ldr	r3, [pc, #40]	; (70ac <DutyCycleCallback+0x214>)
    7082:	2200      	movs	r2, #0
    7084:	4c0a      	ldr	r4, [pc, #40]	; (70b0 <DutyCycleCallback+0x218>)
    7086:	47a0      	blx	r4
}
    7088:	b007      	add	sp, #28
    708a:	bc3c      	pop	{r2, r3, r4, r5}
    708c:	4690      	mov	r8, r2
    708e:	4699      	mov	r9, r3
    7090:	46a2      	mov	sl, r4
    7092:	46ab      	mov	fp, r5
    7094:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (( DutyCycleTimeout != 0 ))
    7096:	9b05      	ldr	r3, [sp, #20]
    7098:	2b00      	cmp	r3, #0
    709a:	d0f5      	beq.n	7088 <DutyCycleCallback+0x1f0>
    bool found = 0;
    709c:	2300      	movs	r3, #0
    709e:	9304      	str	r3, [sp, #16]
    uint32_t minimSubBandTimer = UINT32_MAX;
    70a0:	3b01      	subs	r3, #1
    70a2:	9303      	str	r3, [sp, #12]
    70a4:	e790      	b.n	6fc8 <DutyCycleCallback+0x130>
    70a6:	46c0      	nop			; (mov r8, r8)
    70a8:	20000fc0 	.word	0x20000fc0
    70ac:	00006e99 	.word	0x00006e99
    70b0:	00009609 	.word	0x00009609

000070b4 <setLBTTimer>:
{
    70b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    70b6:	46de      	mov	lr, fp
    70b8:	4657      	mov	r7, sl
    70ba:	464e      	mov	r6, r9
    70bc:	4645      	mov	r5, r8
    70be:	b5e0      	push	{r5, r6, r7, lr}
    70c0:	b085      	sub	sp, #20
    i = RegParams.lastUsedChannelIndex;
    70c2:	4a70      	ldr	r2, [pc, #448]	; (7284 <setLBTTimer+0x1d0>)
    70c4:	232f      	movs	r3, #47	; 0x2f
	RegParams.cmnParams.paramsType2.channelTimer[i] = LBT_TRANSMIT_CHANNEL_PAUSE_DURATION;
    70c6:	5cd4      	ldrb	r4, [r2, r3]
    70c8:	0023      	movs	r3, r4
    70ca:	3358      	adds	r3, #88	; 0x58
    70cc:	009b      	lsls	r3, r3, #2
    70ce:	18d3      	adds	r3, r2, r3
    70d0:	2132      	movs	r1, #50	; 0x32
    70d2:	7219      	strb	r1, [r3, #8]
    70d4:	2100      	movs	r1, #0
    70d6:	7259      	strb	r1, [r3, #9]
    70d8:	7299      	strb	r1, [r3, #10]
    70da:	72d9      	strb	r1, [r3, #11]
	if(SwTimerIsRunning(pLBTTimer->timerId))
    70dc:	23d6      	movs	r3, #214	; 0xd6
    70de:	005b      	lsls	r3, r3, #1
    70e0:	5cd0      	ldrb	r0, [r2, r3]
    70e2:	4b69      	ldr	r3, [pc, #420]	; (7288 <setLBTTimer+0x1d4>)
    70e4:	4798      	blx	r3
    70e6:	2800      	cmp	r0, #0
    70e8:	d12f      	bne.n	714a <setLBTTimer+0x96>
		minim = RegParams.cmnParams.paramsType2.channelTimer[i];
    70ea:	4866      	ldr	r0, [pc, #408]	; (7284 <setLBTTimer+0x1d0>)
    70ec:	0023      	movs	r3, r4
    70ee:	3358      	adds	r3, #88	; 0x58
    70f0:	009b      	lsls	r3, r3, #2
    70f2:	18c3      	adds	r3, r0, r3
    70f4:	7a19      	ldrb	r1, [r3, #8]
    70f6:	7a5a      	ldrb	r2, [r3, #9]
    70f8:	0212      	lsls	r2, r2, #8
    70fa:	4311      	orrs	r1, r2
    70fc:	7a9a      	ldrb	r2, [r3, #10]
    70fe:	0412      	lsls	r2, r2, #16
    7100:	430a      	orrs	r2, r1
    7102:	7ad9      	ldrb	r1, [r3, #11]
    7104:	0609      	lsls	r1, r1, #24
    7106:	4311      	orrs	r1, r2
    7108:	4689      	mov	r9, r1
	for(i = 0; i < RegParams.maxChannels; i++)
    710a:	232a      	movs	r3, #42	; 0x2a
    710c:	56c3      	ldrsb	r3, [r0, r3]
    710e:	4698      	mov	r8, r3
    7110:	2b00      	cmp	r3, #0
    7112:	dc00      	bgt.n	7116 <setLBTTimer+0x62>
    7114:	e08b      	b.n	722e <setLBTTimer+0x17a>
    uint32_t delta = 0, minim = UINT32_MAX, ticks;
    7116:	2300      	movs	r3, #0
    7118:	469a      	mov	sl, r3
		found = 1;
    711a:	3301      	adds	r3, #1
    711c:	9303      	str	r3, [sp, #12]
		if(i != RegParams.lastUsedChannelIndex)
    711e:	4a59      	ldr	r2, [pc, #356]	; (7284 <setLBTTimer+0x1d0>)
    7120:	232f      	movs	r3, #47	; 0x2f
    7122:	5cd0      	ldrb	r0, [r2, r3]
			if((RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    7124:	7911      	ldrb	r1, [r2, #4]
    7126:	7953      	ldrb	r3, [r2, #5]
    7128:	021b      	lsls	r3, r3, #8
    712a:	430b      	orrs	r3, r1
    712c:	7991      	ldrb	r1, [r2, #6]
    712e:	0409      	lsls	r1, r1, #16
    7130:	430b      	orrs	r3, r1
    7132:	79d1      	ldrb	r1, [r2, #7]
    7134:	0609      	lsls	r1, r1, #24
    7136:	4319      	orrs	r1, r3
    7138:	2600      	movs	r6, #0
    713a:	2200      	movs	r2, #0
					RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    713c:	2300      	movs	r3, #0
    713e:	469c      	mov	ip, r3
					RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - delta;
    7140:	4653      	mov	r3, sl
    7142:	9302      	str	r3, [sp, #8]
    7144:	468b      	mov	fp, r1
    7146:	4645      	mov	r5, r8
    7148:	e03b      	b.n	71c2 <setLBTTimer+0x10e>
		SwTimerStop(pLBTTimer->timerId);
    714a:	4c4e      	ldr	r4, [pc, #312]	; (7284 <setLBTTimer+0x1d0>)
    714c:	25d6      	movs	r5, #214	; 0xd6
    714e:	006d      	lsls	r5, r5, #1
    7150:	5d60      	ldrb	r0, [r4, r5]
    7152:	4b4e      	ldr	r3, [pc, #312]	; (728c <setLBTTimer+0x1d8>)
    7154:	4798      	blx	r3
		ticks = SwTimerReadValue(pLBTTimer->timerId);
    7156:	5d60      	ldrb	r0, [r4, r5]
    7158:	4b4d      	ldr	r3, [pc, #308]	; (7290 <setLBTTimer+0x1dc>)
    715a:	4798      	blx	r3
	for(i = 0; i < RegParams.maxChannels; i++)
    715c:	232a      	movs	r3, #42	; 0x2a
    715e:	56e3      	ldrsb	r3, [r4, r3]
    7160:	4698      	mov	r8, r3
    7162:	2b00      	cmp	r3, #0
    7164:	dd66      	ble.n	7234 <setLBTTimer+0x180>
		delta = pLBTTimer->lastTimerValue - US_TO_MS(ticks);
    7166:	4a47      	ldr	r2, [pc, #284]	; (7284 <setLBTTimer+0x1d0>)
    7168:	23d4      	movs	r3, #212	; 0xd4
    716a:	005b      	lsls	r3, r3, #1
    716c:	5cd4      	ldrb	r4, [r2, r3]
    716e:	23aa      	movs	r3, #170	; 0xaa
    7170:	33ff      	adds	r3, #255	; 0xff
    7172:	5cd3      	ldrb	r3, [r2, r3]
    7174:	021b      	lsls	r3, r3, #8
    7176:	4323      	orrs	r3, r4
    7178:	21d5      	movs	r1, #213	; 0xd5
    717a:	0049      	lsls	r1, r1, #1
    717c:	5c54      	ldrb	r4, [r2, r1]
    717e:	0424      	lsls	r4, r4, #16
    7180:	4323      	orrs	r3, r4
    7182:	21ac      	movs	r1, #172	; 0xac
    7184:	31ff      	adds	r1, #255	; 0xff
    7186:	5c54      	ldrb	r4, [r2, r1]
    7188:	0624      	lsls	r4, r4, #24
    718a:	431c      	orrs	r4, r3
    718c:	21fa      	movs	r1, #250	; 0xfa
    718e:	0089      	lsls	r1, r1, #2
    7190:	4b40      	ldr	r3, [pc, #256]	; (7294 <setLBTTimer+0x1e0>)
    7192:	4798      	blx	r3
    7194:	1a23      	subs	r3, r4, r0
    7196:	469a      	mov	sl, r3
    uint32_t delta = 0, minim = UINT32_MAX, ticks;
    7198:	2301      	movs	r3, #1
    719a:	425b      	negs	r3, r3
    719c:	4699      	mov	r9, r3
    bool found = 0;
    719e:	2300      	movs	r3, #0
    71a0:	9303      	str	r3, [sp, #12]
    71a2:	e7bc      	b.n	711e <setLBTTimer+0x6a>
					RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    71a4:	3658      	adds	r6, #88	; 0x58
    71a6:	00b6      	lsls	r6, r6, #2
    71a8:	4b36      	ldr	r3, [pc, #216]	; (7284 <setLBTTimer+0x1d0>)
    71aa:	4698      	mov	r8, r3
    71ac:	4446      	add	r6, r8
    71ae:	4663      	mov	r3, ip
    71b0:	7233      	strb	r3, [r6, #8]
    71b2:	7273      	strb	r3, [r6, #9]
    71b4:	72b3      	strb	r3, [r6, #10]
    71b6:	72f3      	strb	r3, [r6, #11]
	for(i = 0; i < RegParams.maxChannels; i++)
    71b8:	3201      	adds	r2, #1
    71ba:	b2d2      	uxtb	r2, r2
    71bc:	0016      	movs	r6, r2
    71be:	42aa      	cmp	r2, r5
    71c0:	da32      	bge.n	7228 <setLBTTimer+0x174>
		if(i != RegParams.lastUsedChannelIndex)
    71c2:	4290      	cmp	r0, r2
    71c4:	d0f8      	beq.n	71b8 <setLBTTimer+0x104>
			if((RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    71c6:	0053      	lsls	r3, r2, #1
    71c8:	4659      	mov	r1, fp
    71ca:	5c5c      	ldrb	r4, [r3, r1]
    71cc:	2c00      	cmp	r4, #0
    71ce:	d0f3      	beq.n	71b8 <setLBTTimer+0x104>
    71d0:	0033      	movs	r3, r6
    71d2:	3358      	adds	r3, #88	; 0x58
    71d4:	009b      	lsls	r3, r3, #2
    71d6:	4f2b      	ldr	r7, [pc, #172]	; (7284 <setLBTTimer+0x1d0>)
    71d8:	46b8      	mov	r8, r7
    71da:	4443      	add	r3, r8
    71dc:	7a1f      	ldrb	r7, [r3, #8]
    71de:	46ba      	mov	sl, r7
    71e0:	7a5f      	ldrb	r7, [r3, #9]
    71e2:	023f      	lsls	r7, r7, #8
    71e4:	46b8      	mov	r8, r7
    71e6:	4657      	mov	r7, sl
    71e8:	4641      	mov	r1, r8
    71ea:	430f      	orrs	r7, r1
    71ec:	7a99      	ldrb	r1, [r3, #10]
    71ee:	0409      	lsls	r1, r1, #16
    71f0:	430f      	orrs	r7, r1
    71f2:	7adb      	ldrb	r3, [r3, #11]
    71f4:	061b      	lsls	r3, r3, #24
    71f6:	433b      	orrs	r3, r7
    71f8:	d0de      	beq.n	71b8 <setLBTTimer+0x104>
				if(RegParams.cmnParams.paramsType2.channelTimer[i] > delta)
    71fa:	9f02      	ldr	r7, [sp, #8]
    71fc:	42bb      	cmp	r3, r7
    71fe:	d9d1      	bls.n	71a4 <setLBTTimer+0xf0>
					RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - delta;
    7200:	1bdb      	subs	r3, r3, r7
    7202:	3658      	adds	r6, #88	; 0x58
    7204:	00b6      	lsls	r6, r6, #2
    7206:	491f      	ldr	r1, [pc, #124]	; (7284 <setLBTTimer+0x1d0>)
    7208:	4688      	mov	r8, r1
    720a:	4446      	add	r6, r8
    720c:	7233      	strb	r3, [r6, #8]
    720e:	0a19      	lsrs	r1, r3, #8
    7210:	7271      	strb	r1, [r6, #9]
    7212:	0c19      	lsrs	r1, r3, #16
    7214:	72b1      	strb	r1, [r6, #10]
    7216:	0e19      	lsrs	r1, r3, #24
    7218:	72f1      	strb	r1, [r6, #11]
				if((RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    721a:	454b      	cmp	r3, r9
    721c:	d8cc      	bhi.n	71b8 <setLBTTimer+0x104>
    721e:	2b00      	cmp	r3, #0
    7220:	d0ca      	beq.n	71b8 <setLBTTimer+0x104>
    7222:	4699      	mov	r9, r3
					found = 1;
    7224:	9403      	str	r4, [sp, #12]
    7226:	e7c7      	b.n	71b8 <setLBTTimer+0x104>
	if((found == 1) && minim)
    7228:	9b03      	ldr	r3, [sp, #12]
    722a:	2b00      	cmp	r3, #0
    722c:	d002      	beq.n	7234 <setLBTTimer+0x180>
    722e:	464b      	mov	r3, r9
    7230:	2b00      	cmp	r3, #0
    7232:	d107      	bne.n	7244 <setLBTTimer+0x190>
}
    7234:	2008      	movs	r0, #8
    7236:	b005      	add	sp, #20
    7238:	bc3c      	pop	{r2, r3, r4, r5}
    723a:	4690      	mov	r8, r2
    723c:	4699      	mov	r9, r3
    723e:	46a2      	mov	sl, r4
    7240:	46ab      	mov	fp, r5
    7242:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pLBTTimer->lastTimerValue = minim;
    7244:	4b0f      	ldr	r3, [pc, #60]	; (7284 <setLBTTimer+0x1d0>)
    7246:	22d4      	movs	r2, #212	; 0xd4
    7248:	0052      	lsls	r2, r2, #1
    724a:	4649      	mov	r1, r9
    724c:	5499      	strb	r1, [r3, r2]
    724e:	464a      	mov	r2, r9
    7250:	0a11      	lsrs	r1, r2, #8
    7252:	001a      	movs	r2, r3
    7254:	32a9      	adds	r2, #169	; 0xa9
    7256:	32ff      	adds	r2, #255	; 0xff
    7258:	7051      	strb	r1, [r2, #1]
    725a:	4649      	mov	r1, r9
    725c:	0c09      	lsrs	r1, r1, #16
    725e:	7091      	strb	r1, [r2, #2]
    7260:	4649      	mov	r1, r9
    7262:	0e09      	lsrs	r1, r1, #24
    7264:	70d1      	strb	r1, [r2, #3]
		SwTimerStart (pLBTTimer->timerId, MS_TO_US(minim), SW_TIMEOUT_RELATIVE, (void *)LBTChannelPauseCallback, NULL);
    7266:	21fa      	movs	r1, #250	; 0xfa
    7268:	0089      	lsls	r1, r1, #2
    726a:	464a      	mov	r2, r9
    726c:	4351      	muls	r1, r2
    726e:	22d6      	movs	r2, #214	; 0xd6
    7270:	0052      	lsls	r2, r2, #1
    7272:	5c98      	ldrb	r0, [r3, r2]
    7274:	2300      	movs	r3, #0
    7276:	9300      	str	r3, [sp, #0]
    7278:	4b07      	ldr	r3, [pc, #28]	; (7298 <setLBTTimer+0x1e4>)
    727a:	2200      	movs	r2, #0
    727c:	4c07      	ldr	r4, [pc, #28]	; (729c <setLBTTimer+0x1e8>)
    727e:	47a0      	blx	r4
    7280:	e7d8      	b.n	7234 <setLBTTimer+0x180>
    7282:	46c0      	nop			; (mov r8, r8)
    7284:	20000fc0 	.word	0x20000fc0
    7288:	000097a1 	.word	0x000097a1
    728c:	00009915 	.word	0x00009915
    7290:	000097b5 	.word	0x000097b5
    7294:	00011769 	.word	0x00011769
    7298:	000072a1 	.word	0x000072a1
    729c:	00009609 	.word	0x00009609

000072a0 <LBTChannelPauseCallback>:
{
    72a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    72a2:	46de      	mov	lr, fp
    72a4:	4657      	mov	r7, sl
    72a6:	464e      	mov	r6, r9
    72a8:	4645      	mov	r5, r8
    72aa:	b5e0      	push	{r5, r6, r7, lr}
    72ac:	b085      	sub	sp, #20
    for (i=0; i < RegParams.maxChannels; i++)
    72ae:	232a      	movs	r3, #42	; 0x2a
    72b0:	4a49      	ldr	r2, [pc, #292]	; (73d8 <LBTChannelPauseCallback+0x138>)
    72b2:	56d6      	ldrsb	r6, [r2, r3]
    72b4:	2e00      	cmp	r6, #0
    72b6:	dd68      	ble.n	738a <LBTChannelPauseCallback+0xea>
        if ((RegParams.pChParams[i].status == ENABLED) && ( RegParams.cmnParams.paramsType2.channelTimer[i] != 0 ))
    72b8:	0013      	movs	r3, r2
    72ba:	7915      	ldrb	r5, [r2, #4]
    72bc:	7952      	ldrb	r2, [r2, #5]
    72be:	0212      	lsls	r2, r2, #8
    72c0:	432a      	orrs	r2, r5
    72c2:	799d      	ldrb	r5, [r3, #6]
    72c4:	042d      	lsls	r5, r5, #16
    72c6:	432a      	orrs	r2, r5
    72c8:	79dd      	ldrb	r5, [r3, #7]
    72ca:	062d      	lsls	r5, r5, #24
    72cc:	4315      	orrs	r5, r2
            if ( RegParams.cmnParams.paramsType2.channelTimer[i] > pLBTTimer->lastTimerValue)
    72ce:	22d4      	movs	r2, #212	; 0xd4
    72d0:	0052      	lsls	r2, r2, #1
    72d2:	5c9f      	ldrb	r7, [r3, r2]
    72d4:	22aa      	movs	r2, #170	; 0xaa
    72d6:	32ff      	adds	r2, #255	; 0xff
    72d8:	5c9a      	ldrb	r2, [r3, r2]
    72da:	0212      	lsls	r2, r2, #8
    72dc:	433a      	orrs	r2, r7
    72de:	21d5      	movs	r1, #213	; 0xd5
    72e0:	0049      	lsls	r1, r1, #1
    72e2:	5c5f      	ldrb	r7, [r3, r1]
    72e4:	043f      	lsls	r7, r7, #16
    72e6:	433a      	orrs	r2, r7
    72e8:	21ac      	movs	r1, #172	; 0xac
    72ea:	31ff      	adds	r1, #255	; 0xff
    72ec:	5c5f      	ldrb	r7, [r3, r1]
    72ee:	063f      	lsls	r7, r7, #24
    72f0:	4317      	orrs	r7, r2
    72f2:	9703      	str	r7, [sp, #12]
    72f4:	2000      	movs	r0, #0
    72f6:	2300      	movs	r3, #0
    72f8:	2200      	movs	r2, #0
    72fa:	4691      	mov	r9, r2
    72fc:	3a01      	subs	r2, #1
    72fe:	4690      	mov	r8, r2
                RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    7300:	2200      	movs	r2, #0
    7302:	4694      	mov	ip, r2
    7304:	e00e      	b.n	7324 <LBTChannelPauseCallback+0x84>
    7306:	3058      	adds	r0, #88	; 0x58
    7308:	0080      	lsls	r0, r0, #2
    730a:	4a33      	ldr	r2, [pc, #204]	; (73d8 <LBTChannelPauseCallback+0x138>)
    730c:	4692      	mov	sl, r2
    730e:	4450      	add	r0, sl
    7310:	4662      	mov	r2, ip
    7312:	7202      	strb	r2, [r0, #8]
    7314:	7242      	strb	r2, [r0, #9]
    7316:	7282      	strb	r2, [r0, #10]
    7318:	72c2      	strb	r2, [r0, #11]
    for (i=0; i < RegParams.maxChannels; i++)
    731a:	3301      	adds	r3, #1
    731c:	b2db      	uxtb	r3, r3
    731e:	0018      	movs	r0, r3
    7320:	42b3      	cmp	r3, r6
    7322:	da2f      	bge.n	7384 <LBTChannelPauseCallback+0xe4>
        if ((RegParams.pChParams[i].status == ENABLED) && ( RegParams.cmnParams.paramsType2.channelTimer[i] != 0 ))
    7324:	005a      	lsls	r2, r3, #1
    7326:	5d54      	ldrb	r4, [r2, r5]
    7328:	2c00      	cmp	r4, #0
    732a:	d0f6      	beq.n	731a <LBTChannelPauseCallback+0x7a>
    732c:	0002      	movs	r2, r0
    732e:	3258      	adds	r2, #88	; 0x58
    7330:	0092      	lsls	r2, r2, #2
    7332:	4929      	ldr	r1, [pc, #164]	; (73d8 <LBTChannelPauseCallback+0x138>)
    7334:	468a      	mov	sl, r1
    7336:	4452      	add	r2, sl
    7338:	7a17      	ldrb	r7, [r2, #8]
    733a:	46bb      	mov	fp, r7
    733c:	7a57      	ldrb	r7, [r2, #9]
    733e:	023f      	lsls	r7, r7, #8
    7340:	46ba      	mov	sl, r7
    7342:	465f      	mov	r7, fp
    7344:	4651      	mov	r1, sl
    7346:	430f      	orrs	r7, r1
    7348:	7a91      	ldrb	r1, [r2, #10]
    734a:	0409      	lsls	r1, r1, #16
    734c:	430f      	orrs	r7, r1
    734e:	7ad2      	ldrb	r2, [r2, #11]
    7350:	0612      	lsls	r2, r2, #24
    7352:	433a      	orrs	r2, r7
    7354:	d0e1      	beq.n	731a <LBTChannelPauseCallback+0x7a>
            if ( RegParams.cmnParams.paramsType2.channelTimer[i] > pLBTTimer->lastTimerValue)
    7356:	9f03      	ldr	r7, [sp, #12]
    7358:	42ba      	cmp	r2, r7
    735a:	d9d4      	bls.n	7306 <LBTChannelPauseCallback+0x66>
                RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - pLBTTimer->lastTimerValue;
    735c:	1bd2      	subs	r2, r2, r7
    735e:	3058      	adds	r0, #88	; 0x58
    7360:	0080      	lsls	r0, r0, #2
    7362:	491d      	ldr	r1, [pc, #116]	; (73d8 <LBTChannelPauseCallback+0x138>)
    7364:	468a      	mov	sl, r1
    7366:	4450      	add	r0, sl
    7368:	7202      	strb	r2, [r0, #8]
    736a:	0a11      	lsrs	r1, r2, #8
    736c:	7241      	strb	r1, [r0, #9]
    736e:	0c11      	lsrs	r1, r2, #16
    7370:	7281      	strb	r1, [r0, #10]
    7372:	0e11      	lsrs	r1, r2, #24
    7374:	72c1      	strb	r1, [r0, #11]
            if ( (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) )
    7376:	4542      	cmp	r2, r8
    7378:	d8cf      	bhi.n	731a <LBTChannelPauseCallback+0x7a>
    737a:	2a00      	cmp	r2, #0
    737c:	d0cd      	beq.n	731a <LBTChannelPauseCallback+0x7a>
                found = 1;
    737e:	46a1      	mov	r9, r4
            if ( (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) )
    7380:	4690      	mov	r8, r2
    7382:	e7ca      	b.n	731a <LBTChannelPauseCallback+0x7a>
    if ( found == 1 )
    7384:	464b      	mov	r3, r9
    7386:	2b00      	cmp	r3, #0
    7388:	d106      	bne.n	7398 <LBTChannelPauseCallback+0xf8>
}
    738a:	b005      	add	sp, #20
    738c:	bc3c      	pop	{r2, r3, r4, r5}
    738e:	4690      	mov	r8, r2
    7390:	4699      	mov	r9, r3
    7392:	46a2      	mov	sl, r4
    7394:	46ab      	mov	fp, r5
    7396:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pLBTTimer->lastTimerValue = minim;
    7398:	4b0f      	ldr	r3, [pc, #60]	; (73d8 <LBTChannelPauseCallback+0x138>)
    739a:	22d4      	movs	r2, #212	; 0xd4
    739c:	0052      	lsls	r2, r2, #1
    739e:	4641      	mov	r1, r8
    73a0:	5499      	strb	r1, [r3, r2]
    73a2:	4642      	mov	r2, r8
    73a4:	0a11      	lsrs	r1, r2, #8
    73a6:	001a      	movs	r2, r3
    73a8:	32a9      	adds	r2, #169	; 0xa9
    73aa:	32ff      	adds	r2, #255	; 0xff
    73ac:	7051      	strb	r1, [r2, #1]
    73ae:	4641      	mov	r1, r8
    73b0:	0c09      	lsrs	r1, r1, #16
    73b2:	7091      	strb	r1, [r2, #2]
    73b4:	4641      	mov	r1, r8
    73b6:	0e09      	lsrs	r1, r1, #24
    73b8:	70d1      	strb	r1, [r2, #3]
        SwTimerStart (pLBTTimer->timerId, MS_TO_US(minim), SW_TIMEOUT_RELATIVE, (void *)LBTChannelPauseCallback, NULL);
    73ba:	21fa      	movs	r1, #250	; 0xfa
    73bc:	0089      	lsls	r1, r1, #2
    73be:	4642      	mov	r2, r8
    73c0:	4351      	muls	r1, r2
    73c2:	22d6      	movs	r2, #214	; 0xd6
    73c4:	0052      	lsls	r2, r2, #1
    73c6:	5c98      	ldrb	r0, [r3, r2]
    73c8:	2300      	movs	r3, #0
    73ca:	9300      	str	r3, [sp, #0]
    73cc:	4b03      	ldr	r3, [pc, #12]	; (73dc <LBTChannelPauseCallback+0x13c>)
    73ce:	2200      	movs	r2, #0
    73d0:	4c03      	ldr	r4, [pc, #12]	; (73e0 <LBTChannelPauseCallback+0x140>)
    73d2:	47a0      	blx	r4
}
    73d4:	e7d9      	b.n	738a <LBTChannelPauseCallback+0xea>
    73d6:	46c0      	nop			; (mov r8, r8)
    73d8:	20000fc0 	.word	0x20000fc0
    73dc:	000072a1 	.word	0x000072a1
    73e0:	00009609 	.word	0x00009609

000073e4 <JoinDutyCycleCallback>:
{   
    73e4:	b510      	push	{r4, lr}
    73e6:	b082      	sub	sp, #8
	if(RegParams.pJoinDutyCycleTimer->remainingtime!=0)
    73e8:	492e      	ldr	r1, [pc, #184]	; (74a4 <JoinDutyCycleCallback+0xc0>)
    73ea:	7d0b      	ldrb	r3, [r1, #20]
    73ec:	7d4a      	ldrb	r2, [r1, #21]
    73ee:	0212      	lsls	r2, r2, #8
    73f0:	431a      	orrs	r2, r3
    73f2:	7d8b      	ldrb	r3, [r1, #22]
    73f4:	041b      	lsls	r3, r3, #16
    73f6:	431a      	orrs	r2, r3
    73f8:	7dcb      	ldrb	r3, [r1, #23]
    73fa:	061b      	lsls	r3, r3, #24
    73fc:	4313      	orrs	r3, r2
    73fe:	7919      	ldrb	r1, [r3, #4]
    7400:	795a      	ldrb	r2, [r3, #5]
    7402:	0212      	lsls	r2, r2, #8
    7404:	430a      	orrs	r2, r1
    7406:	7999      	ldrb	r1, [r3, #6]
    7408:	0409      	lsls	r1, r1, #16
    740a:	430a      	orrs	r2, r1
    740c:	79d9      	ldrb	r1, [r3, #7]
    740e:	0609      	lsls	r1, r1, #24
    7410:	4311      	orrs	r1, r2
    7412:	d03c      	beq.n	748e <JoinDutyCycleCallback+0xaa>
		if(RegParams.pJoinDutyCycleTimer->remainingtime>US_TO_MS(SWTIMER_MAX_TIMEOUT))
    7414:	4a24      	ldr	r2, [pc, #144]	; (74a8 <JoinDutyCycleCallback+0xc4>)
    7416:	4291      	cmp	r1, r2
    7418:	d91e      	bls.n	7458 <JoinDutyCycleCallback+0x74>
			RegParams.pJoinDutyCycleTimer->remainingtime = RegParams.pJoinDutyCycleTimer->remainingtime-(US_TO_MS(SWTIMER_MAX_TIMEOUT));
    741a:	4a24      	ldr	r2, [pc, #144]	; (74ac <JoinDutyCycleCallback+0xc8>)
    741c:	4694      	mov	ip, r2
    741e:	4461      	add	r1, ip
    7420:	7119      	strb	r1, [r3, #4]
    7422:	0a0a      	lsrs	r2, r1, #8
    7424:	715a      	strb	r2, [r3, #5]
    7426:	0c0a      	lsrs	r2, r1, #16
    7428:	719a      	strb	r2, [r3, #6]
    742a:	0e09      	lsrs	r1, r1, #24
    742c:	71d9      	strb	r1, [r3, #7]
			SwTimerStart(RegParams.pJoinDutyCycleTimer->timerId, SWTIMER_MAX_TIMEOUT, SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    742e:	491d      	ldr	r1, [pc, #116]	; (74a4 <JoinDutyCycleCallback+0xc0>)
    7430:	7d0b      	ldrb	r3, [r1, #20]
    7432:	7d4a      	ldrb	r2, [r1, #21]
    7434:	0212      	lsls	r2, r2, #8
    7436:	431a      	orrs	r2, r3
    7438:	7d8b      	ldrb	r3, [r1, #22]
    743a:	041b      	lsls	r3, r3, #16
    743c:	431a      	orrs	r2, r3
    743e:	7dcb      	ldrb	r3, [r1, #23]
    7440:	061b      	lsls	r3, r3, #24
    7442:	4313      	orrs	r3, r2
    7444:	7a18      	ldrb	r0, [r3, #8]
    7446:	2300      	movs	r3, #0
    7448:	9300      	str	r3, [sp, #0]
    744a:	4b19      	ldr	r3, [pc, #100]	; (74b0 <JoinDutyCycleCallback+0xcc>)
    744c:	2200      	movs	r2, #0
    744e:	4919      	ldr	r1, [pc, #100]	; (74b4 <JoinDutyCycleCallback+0xd0>)
    7450:	4c19      	ldr	r4, [pc, #100]	; (74b8 <JoinDutyCycleCallback+0xd4>)
    7452:	47a0      	blx	r4
}
    7454:	b002      	add	sp, #8
    7456:	bd10      	pop	{r4, pc}
			SwTimerStart(RegParams.pJoinDutyCycleTimer->timerId, MS_TO_US(RegParams.pJoinDutyCycleTimer->remainingtime), SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    7458:	22fa      	movs	r2, #250	; 0xfa
    745a:	0092      	lsls	r2, r2, #2
    745c:	4351      	muls	r1, r2
    745e:	7a18      	ldrb	r0, [r3, #8]
    7460:	2300      	movs	r3, #0
    7462:	9300      	str	r3, [sp, #0]
    7464:	4b12      	ldr	r3, [pc, #72]	; (74b0 <JoinDutyCycleCallback+0xcc>)
    7466:	2200      	movs	r2, #0
    7468:	4c13      	ldr	r4, [pc, #76]	; (74b8 <JoinDutyCycleCallback+0xd4>)
    746a:	47a0      	blx	r4
			RegParams.pJoinDutyCycleTimer->remainingtime =0;
    746c:	490d      	ldr	r1, [pc, #52]	; (74a4 <JoinDutyCycleCallback+0xc0>)
    746e:	7d0b      	ldrb	r3, [r1, #20]
    7470:	7d4a      	ldrb	r2, [r1, #21]
    7472:	0212      	lsls	r2, r2, #8
    7474:	431a      	orrs	r2, r3
    7476:	7d8b      	ldrb	r3, [r1, #22]
    7478:	041b      	lsls	r3, r3, #16
    747a:	431a      	orrs	r2, r3
    747c:	7dcb      	ldrb	r3, [r1, #23]
    747e:	061b      	lsls	r3, r3, #24
    7480:	4313      	orrs	r3, r2
    7482:	2200      	movs	r2, #0
    7484:	711a      	strb	r2, [r3, #4]
    7486:	715a      	strb	r2, [r3, #5]
    7488:	719a      	strb	r2, [r3, #6]
    748a:	71da      	strb	r2, [r3, #7]
    748c:	e7e2      	b.n	7454 <JoinDutyCycleCallback+0x70>
	SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    748e:	7a18      	ldrb	r0, [r3, #8]
    7490:	4b0a      	ldr	r3, [pc, #40]	; (74bc <JoinDutyCycleCallback+0xd8>)
    7492:	4798      	blx	r3
	RegParams.joinDutyCycleTimeout = 0;
    7494:	4b03      	ldr	r3, [pc, #12]	; (74a4 <JoinDutyCycleCallback+0xc0>)
    7496:	333e      	adds	r3, #62	; 0x3e
    7498:	2200      	movs	r2, #0
    749a:	701a      	strb	r2, [r3, #0]
    749c:	705a      	strb	r2, [r3, #1]
    749e:	709a      	strb	r2, [r3, #2]
    74a0:	70da      	strb	r2, [r3, #3]
}
    74a2:	e7d7      	b.n	7454 <JoinDutyCycleCallback+0x70>
    74a4:	20000fc0 	.word	0x20000fc0
    74a8:	0020c49b 	.word	0x0020c49b
    74ac:	ffdf3b65 	.word	0xffdf3b65
    74b0:	000073e5 	.word	0x000073e5
    74b4:	7fffffff 	.word	0x7fffffff
    74b8:	00009609 	.word	0x00009609
    74bc:	00009915 	.word	0x00009915

000074c0 <JoinBackoffCallback>:
{
    74c0:	b510      	push	{r4, lr}
    74c2:	b082      	sub	sp, #8
	RegParams.joinbccount ++;
    74c4:	4b0c      	ldr	r3, [pc, #48]	; (74f8 <JoinBackoffCallback+0x38>)
    74c6:	2142      	movs	r1, #66	; 0x42
    74c8:	5c5a      	ldrb	r2, [r3, r1]
    74ca:	3201      	adds	r2, #1
    74cc:	545a      	strb	r2, [r3, r1]
	SwTimerStart (RegParams.pJoinBackoffTimer->timerId, MS_TO_US(BACKOFF_BASE_TIME_IN_MS), SW_TIMEOUT_RELATIVE, (void *)JoinBackoffCallback, NULL);
    74ce:	7e19      	ldrb	r1, [r3, #24]
    74d0:	7e5a      	ldrb	r2, [r3, #25]
    74d2:	0212      	lsls	r2, r2, #8
    74d4:	4311      	orrs	r1, r2
    74d6:	7e9a      	ldrb	r2, [r3, #26]
    74d8:	0412      	lsls	r2, r2, #16
    74da:	430a      	orrs	r2, r1
    74dc:	7edb      	ldrb	r3, [r3, #27]
    74de:	061b      	lsls	r3, r3, #24
    74e0:	4313      	orrs	r3, r2
    74e2:	7818      	ldrb	r0, [r3, #0]
    74e4:	2300      	movs	r3, #0
    74e6:	9300      	str	r3, [sp, #0]
    74e8:	4b04      	ldr	r3, [pc, #16]	; (74fc <JoinBackoffCallback+0x3c>)
    74ea:	2200      	movs	r2, #0
    74ec:	4904      	ldr	r1, [pc, #16]	; (7500 <JoinBackoffCallback+0x40>)
    74ee:	4c05      	ldr	r4, [pc, #20]	; (7504 <JoinBackoffCallback+0x44>)
    74f0:	47a0      	blx	r4
}
    74f2:	b002      	add	sp, #8
    74f4:	bd10      	pop	{r4, pc}
    74f6:	46c0      	nop			; (mov r8, r8)
    74f8:	20000fc0 	.word	0x20000fc0
    74fc:	000074c1 	.word	0x000074c1
    7500:	6b49d200 	.word	0x6b49d200
    7504:	00009609 	.word	0x00009609

00007508 <ValidateDataRangeT2>:
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    7508:	784a      	ldrb	r2, [r1, #1]
	dataRateMin = val_drange.dataRangeNew & LAST_NIBBLE;
    750a:	230f      	movs	r3, #15
    750c:	4013      	ands	r3, r2
    if ( dataRate > RegParams.minDataRate )
    750e:	2124      	movs	r1, #36	; 0x24
    7510:	4807      	ldr	r0, [pc, #28]	; (7530 <ValidateDataRangeT2+0x28>)
    7512:	5c41      	ldrb	r1, [r0, r1]
		retVal = LORAWAN_INVALID_PARAMETER;
    7514:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    7516:	428b      	cmp	r3, r1
    7518:	d900      	bls.n	751c <ValidateDataRangeT2+0x14>
}
    751a:	4770      	bx	lr
	dataRateMax = (val_drange.dataRangeNew & FIRST_NIBBLE) >> SHIFT4;
    751c:	0912      	lsrs	r2, r2, #4
		retVal = LORAWAN_INVALID_PARAMETER;
    751e:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    7520:	428a      	cmp	r2, r1
    7522:	d8fa      	bhi.n	751a <ValidateDataRangeT2+0x12>
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    7524:	3802      	subs	r0, #2
	   || (dataRateMax < dataRateMin) )
    7526:	4293      	cmp	r3, r2
    7528:	d9f7      	bls.n	751a <ValidateDataRangeT2+0x12>
		retVal = LORAWAN_INVALID_PARAMETER;
    752a:	3002      	adds	r0, #2
	return retVal;
    752c:	e7f5      	b.n	751a <ValidateDataRangeT2+0x12>
    752e:	46c0      	nop			; (mov r8, r8)
    7530:	20000fc0 	.word	0x20000fc0

00007534 <setDataRangeT2>:
{
    7534:	b530      	push	{r4, r5, lr}
    7536:	b083      	sub	sp, #12
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    7538:	780c      	ldrb	r4, [r1, #0]
    753a:	784d      	ldrb	r5, [r1, #1]
	val_chid.channelIndex = update_dr.channelIndex;
    753c:	ab01      	add	r3, sp, #4
    753e:	701c      	strb	r4, [r3, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    7540:	2201      	movs	r2, #1
    7542:	705a      	strb	r2, [r3, #1]
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    7544:	2012      	movs	r0, #18
    7546:	4b18      	ldr	r3, [pc, #96]	; (75a8 <setDataRangeT2+0x74>)
    7548:	4798      	blx	r3
		retVal = LORAWAN_INVALID_PARAMETER;
    754a:	230a      	movs	r3, #10
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    754c:	2808      	cmp	r0, #8
    754e:	d002      	beq.n	7556 <setDataRangeT2+0x22>
}
    7550:	0018      	movs	r0, r3
    7552:	b003      	add	sp, #12
    7554:	bd30      	pop	{r4, r5, pc}
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    7556:	a901      	add	r1, sp, #4
    7558:	300d      	adds	r0, #13
    755a:	4b14      	ldr	r3, [pc, #80]	; (75ac <setDataRangeT2+0x78>)
    755c:	4798      	blx	r3
    755e:	0003      	movs	r3, r0
    7560:	2808      	cmp	r0, #8
    7562:	d001      	beq.n	7568 <setDataRangeT2+0x34>
		retVal = LORAWAN_INVALID_PARAMETER;
    7564:	230a      	movs	r3, #10
    7566:	e7f3      	b.n	7550 <setDataRangeT2+0x1c>
		RegParams.pChParams[update_dr.channelIndex].dataRange.value = update_dr.dataRangeNew;
    7568:	4911      	ldr	r1, [pc, #68]	; (75b0 <setDataRangeT2+0x7c>)
    756a:	790a      	ldrb	r2, [r1, #4]
    756c:	7948      	ldrb	r0, [r1, #5]
    756e:	0200      	lsls	r0, r0, #8
    7570:	4310      	orrs	r0, r2
    7572:	798a      	ldrb	r2, [r1, #6]
    7574:	0412      	lsls	r2, r2, #16
    7576:	4310      	orrs	r0, r2
    7578:	79ca      	ldrb	r2, [r1, #7]
    757a:	0612      	lsls	r2, r2, #24
    757c:	4302      	orrs	r2, r0
    757e:	0060      	lsls	r0, r4, #1
    7580:	1882      	adds	r2, r0, r2
    7582:	7055      	strb	r5, [r2, #1]
		RegParams.pOtherChParams[update_dr.channelIndex].parametersDefined |= DATA_RANGE_DEFINED;
    7584:	7a0a      	ldrb	r2, [r1, #8]
    7586:	7a4d      	ldrb	r5, [r1, #9]
    7588:	022d      	lsls	r5, r5, #8
    758a:	4315      	orrs	r5, r2
    758c:	7a8a      	ldrb	r2, [r1, #10]
    758e:	0412      	lsls	r2, r2, #16
    7590:	4315      	orrs	r5, r2
    7592:	7aca      	ldrb	r2, [r1, #11]
    7594:	0612      	lsls	r2, r2, #24
    7596:	432a      	orrs	r2, r5
    7598:	1904      	adds	r4, r0, r4
    759a:	00a4      	lsls	r4, r4, #2
    759c:	1914      	adds	r4, r2, r4
    759e:	7ae2      	ldrb	r2, [r4, #11]
    75a0:	2102      	movs	r1, #2
    75a2:	430a      	orrs	r2, r1
    75a4:	72e2      	strb	r2, [r4, #11]
    75a6:	e7d3      	b.n	7550 <setDataRangeT2+0x1c>
    75a8:	00007509 	.word	0x00007509
    75ac:	00005071 	.word	0x00005071
    75b0:	20000fc0 	.word	0x20000fc0

000075b4 <LORAREG_GetAttr_MaxPayloadT3>:
{
    75b4:	b530      	push	{r4, r5, lr}
	dataRate = *(uint8_t *)attrInput;
    75b6:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    75b8:	2124      	movs	r1, #36	; 0x24
    75ba:	4816      	ldr	r0, [pc, #88]	; (7614 <LORAREG_GetAttr_MaxPayloadT3+0x60>)
    75bc:	5c41      	ldrb	r1, [r0, r1]
		result =  LORAWAN_INVALID_PARAMETER;
    75be:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    75c0:	4299      	cmp	r1, r3
    75c2:	d215      	bcs.n	75f0 <LORAREG_GetAttr_MaxPayloadT3+0x3c>
	if(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1)
    75c4:	21e1      	movs	r1, #225	; 0xe1
    75c6:	0049      	lsls	r1, r1, #1
    75c8:	4c12      	ldr	r4, [pc, #72]	; (7614 <LORAREG_GetAttr_MaxPayloadT3+0x60>)
    75ca:	5c61      	ldrb	r1, [r4, r1]
    75cc:	07c9      	lsls	r1, r1, #31
    75ce:	d411      	bmi.n	75f4 <LORAREG_GetAttr_MaxPayloadT3+0x40>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    75d0:	4d10      	ldr	r5, [pc, #64]	; (7614 <LORAREG_GetAttr_MaxPayloadT3+0x60>)
    75d2:	7829      	ldrb	r1, [r5, #0]
    75d4:	786c      	ldrb	r4, [r5, #1]
    75d6:	0224      	lsls	r4, r4, #8
    75d8:	430c      	orrs	r4, r1
    75da:	78a9      	ldrb	r1, [r5, #2]
    75dc:	0409      	lsls	r1, r1, #16
    75de:	430c      	orrs	r4, r1
    75e0:	78e9      	ldrb	r1, [r5, #3]
    75e2:	0609      	lsls	r1, r1, #24
    75e4:	4321      	orrs	r1, r4
    75e6:	00db      	lsls	r3, r3, #3
    75e8:	185b      	adds	r3, r3, r1
    75ea:	789b      	ldrb	r3, [r3, #2]
    75ec:	7013      	strb	r3, [r2, #0]
}
    75ee:	bd30      	pop	{r4, r5, pc}
	StackRetStatus_t result = LORAWAN_SUCCESS;
    75f0:	3802      	subs	r0, #2
    75f2:	e7e7      	b.n	75c4 <LORAREG_GetAttr_MaxPayloadT3+0x10>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt1;
    75f4:	0025      	movs	r5, r4
    75f6:	7821      	ldrb	r1, [r4, #0]
    75f8:	7864      	ldrb	r4, [r4, #1]
    75fa:	0224      	lsls	r4, r4, #8
    75fc:	430c      	orrs	r4, r1
    75fe:	78a9      	ldrb	r1, [r5, #2]
    7600:	0409      	lsls	r1, r1, #16
    7602:	430c      	orrs	r4, r1
    7604:	78e9      	ldrb	r1, [r5, #3]
    7606:	0609      	lsls	r1, r1, #24
    7608:	4321      	orrs	r1, r4
    760a:	00db      	lsls	r3, r3, #3
    760c:	1859      	adds	r1, r3, r1
    760e:	78cb      	ldrb	r3, [r1, #3]
    7610:	7013      	strb	r3, [r2, #0]
    7612:	e7ec      	b.n	75ee <LORAREG_GetAttr_MaxPayloadT3+0x3a>
    7614:	20000fc0 	.word	0x20000fc0

00007618 <LORAREG_GetAttr_RxWindowSizeT2>:
{
    7618:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    761a:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    761c:	2124      	movs	r1, #36	; 0x24
    761e:	480d      	ldr	r0, [pc, #52]	; (7654 <LORAREG_GetAttr_RxWindowSizeT2+0x3c>)
    7620:	5c41      	ldrb	r1, [r0, r1]
		return LORAWAN_INVALID_PARAMETER;
    7622:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    7624:	4299      	cmp	r1, r3
    7626:	d200      	bcs.n	762a <LORAREG_GetAttr_RxWindowSizeT2+0x12>
}
    7628:	bd10      	pop	{r4, pc}
		*(uint16_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowSize;
    762a:	4c0a      	ldr	r4, [pc, #40]	; (7654 <LORAREG_GetAttr_RxWindowSizeT2+0x3c>)
    762c:	7821      	ldrb	r1, [r4, #0]
    762e:	7860      	ldrb	r0, [r4, #1]
    7630:	0200      	lsls	r0, r0, #8
    7632:	4308      	orrs	r0, r1
    7634:	78a1      	ldrb	r1, [r4, #2]
    7636:	0409      	lsls	r1, r1, #16
    7638:	4308      	orrs	r0, r1
    763a:	78e1      	ldrb	r1, [r4, #3]
    763c:	0609      	lsls	r1, r1, #24
    763e:	4301      	orrs	r1, r0
    7640:	00db      	lsls	r3, r3, #3
    7642:	5c58      	ldrb	r0, [r3, r1]
    7644:	185b      	adds	r3, r3, r1
    7646:	785b      	ldrb	r3, [r3, #1]
    7648:	021b      	lsls	r3, r3, #8
    764a:	4303      	orrs	r3, r0
    764c:	8013      	strh	r3, [r2, #0]
	return result;
    764e:	2008      	movs	r0, #8
    7650:	e7ea      	b.n	7628 <LORAREG_GetAttr_RxWindowSizeT2+0x10>
    7652:	46c0      	nop			; (mov r8, r8)
    7654:	20000fc0 	.word	0x20000fc0

00007658 <LORAREG_GetAttr_RxWindowOffsetT2>:
{
    7658:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    765a:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    765c:	2124      	movs	r1, #36	; 0x24
    765e:	480c      	ldr	r0, [pc, #48]	; (7690 <LORAREG_GetAttr_RxWindowOffsetT2+0x38>)
    7660:	5c41      	ldrb	r1, [r0, r1]
		return LORAWAN_INVALID_PARAMETER;
    7662:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    7664:	4299      	cmp	r1, r3
    7666:	d200      	bcs.n	766a <LORAREG_GetAttr_RxWindowOffsetT2+0x12>
}
    7668:	bd10      	pop	{r4, pc}
		*(int8_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowOffset;
    766a:	4c09      	ldr	r4, [pc, #36]	; (7690 <LORAREG_GetAttr_RxWindowOffsetT2+0x38>)
    766c:	7821      	ldrb	r1, [r4, #0]
    766e:	7860      	ldrb	r0, [r4, #1]
    7670:	0200      	lsls	r0, r0, #8
    7672:	4308      	orrs	r0, r1
    7674:	78a1      	ldrb	r1, [r4, #2]
    7676:	0409      	lsls	r1, r1, #16
    7678:	4308      	orrs	r0, r1
    767a:	78e1      	ldrb	r1, [r4, #3]
    767c:	0609      	lsls	r1, r1, #24
    767e:	4301      	orrs	r1, r0
    7680:	00db      	lsls	r3, r3, #3
    7682:	185b      	adds	r3, r3, r1
    7684:	791b      	ldrb	r3, [r3, #4]
    7686:	b25b      	sxtb	r3, r3
    7688:	7013      	strb	r3, [r2, #0]
	return result;
    768a:	2008      	movs	r0, #8
    768c:	e7ec      	b.n	7668 <LORAREG_GetAttr_RxWindowOffsetT2+0x10>
    768e:	46c0      	nop			; (mov r8, r8)
    7690:	20000fc0 	.word	0x20000fc0

00007694 <LORAREG_GetAttr_MaxPayloadT2>:
{
    7694:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    7696:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    7698:	2124      	movs	r1, #36	; 0x24
    769a:	480b      	ldr	r0, [pc, #44]	; (76c8 <LORAREG_GetAttr_MaxPayloadT2+0x34>)
    769c:	5c41      	ldrb	r1, [r0, r1]
		result =  LORAWAN_INVALID_PARAMETER;
    769e:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    76a0:	4299      	cmp	r1, r3
    76a2:	d200      	bcs.n	76a6 <LORAREG_GetAttr_MaxPayloadT2+0x12>
}
    76a4:	bd10      	pop	{r4, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    76a6:	4c08      	ldr	r4, [pc, #32]	; (76c8 <LORAREG_GetAttr_MaxPayloadT2+0x34>)
    76a8:	7821      	ldrb	r1, [r4, #0]
    76aa:	7860      	ldrb	r0, [r4, #1]
    76ac:	0200      	lsls	r0, r0, #8
    76ae:	4308      	orrs	r0, r1
    76b0:	78a1      	ldrb	r1, [r4, #2]
    76b2:	0409      	lsls	r1, r1, #16
    76b4:	4308      	orrs	r0, r1
    76b6:	78e1      	ldrb	r1, [r4, #3]
    76b8:	0609      	lsls	r1, r1, #24
    76ba:	4301      	orrs	r1, r0
    76bc:	00db      	lsls	r3, r3, #3
    76be:	185b      	adds	r3, r3, r1
    76c0:	789b      	ldrb	r3, [r3, #2]
    76c2:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    76c4:	2008      	movs	r0, #8
	return result;
    76c6:	e7ed      	b.n	76a4 <LORAREG_GetAttr_MaxPayloadT2+0x10>
    76c8:	20000fc0 	.word	0x20000fc0

000076cc <LORAREG_GetAttr_ModulationAttrT2>:
{
    76cc:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    76ce:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    76d0:	2124      	movs	r1, #36	; 0x24
    76d2:	480b      	ldr	r0, [pc, #44]	; (7700 <LORAREG_GetAttr_ModulationAttrT2+0x34>)
    76d4:	5c41      	ldrb	r1, [r0, r1]
		result = LORAWAN_INVALID_PARAMETER;
    76d6:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    76d8:	4299      	cmp	r1, r3
    76da:	d200      	bcs.n	76de <LORAREG_GetAttr_ModulationAttrT2+0x12>
}
    76dc:	bd10      	pop	{r4, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].modulation;
    76de:	4c08      	ldr	r4, [pc, #32]	; (7700 <LORAREG_GetAttr_ModulationAttrT2+0x34>)
    76e0:	7821      	ldrb	r1, [r4, #0]
    76e2:	7860      	ldrb	r0, [r4, #1]
    76e4:	0200      	lsls	r0, r0, #8
    76e6:	4308      	orrs	r0, r1
    76e8:	78a1      	ldrb	r1, [r4, #2]
    76ea:	0409      	lsls	r1, r1, #16
    76ec:	4308      	orrs	r0, r1
    76ee:	78e1      	ldrb	r1, [r4, #3]
    76f0:	0609      	lsls	r1, r1, #24
    76f2:	4301      	orrs	r1, r0
    76f4:	00db      	lsls	r3, r3, #3
    76f6:	185b      	adds	r3, r3, r1
    76f8:	79db      	ldrb	r3, [r3, #7]
    76fa:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    76fc:	2008      	movs	r0, #8
	return result;
    76fe:	e7ed      	b.n	76dc <LORAREG_GetAttr_ModulationAttrT2+0x10>
    7700:	20000fc0 	.word	0x20000fc0

00007704 <LORAREG_GetAttr_BandwidthAttrT2>:
{
    7704:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    7706:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    7708:	2124      	movs	r1, #36	; 0x24
    770a:	480b      	ldr	r0, [pc, #44]	; (7738 <LORAREG_GetAttr_BandwidthAttrT2+0x34>)
    770c:	5c41      	ldrb	r1, [r0, r1]
		result = LORAWAN_INVALID_PARAMETER;
    770e:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    7710:	4299      	cmp	r1, r3
    7712:	d200      	bcs.n	7716 <LORAREG_GetAttr_BandwidthAttrT2+0x12>
}
    7714:	bd10      	pop	{r4, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].bandwidth;
    7716:	4c08      	ldr	r4, [pc, #32]	; (7738 <LORAREG_GetAttr_BandwidthAttrT2+0x34>)
    7718:	7821      	ldrb	r1, [r4, #0]
    771a:	7860      	ldrb	r0, [r4, #1]
    771c:	0200      	lsls	r0, r0, #8
    771e:	4308      	orrs	r0, r1
    7720:	78a1      	ldrb	r1, [r4, #2]
    7722:	0409      	lsls	r1, r1, #16
    7724:	4308      	orrs	r0, r1
    7726:	78e1      	ldrb	r1, [r4, #3]
    7728:	0609      	lsls	r1, r1, #24
    772a:	4301      	orrs	r1, r0
    772c:	00db      	lsls	r3, r3, #3
    772e:	185b      	adds	r3, r3, r1
    7730:	799b      	ldrb	r3, [r3, #6]
    7732:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7734:	2008      	movs	r0, #8
	return result;
    7736:	e7ed      	b.n	7714 <LORAREG_GetAttr_BandwidthAttrT2+0x10>
    7738:	20000fc0 	.word	0x20000fc0

0000773c <LORAREG_GetAttr_SpreadFactorT2>:
{
    773c:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    773e:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    7740:	2124      	movs	r1, #36	; 0x24
    7742:	480b      	ldr	r0, [pc, #44]	; (7770 <LORAREG_GetAttr_SpreadFactorT2+0x34>)
    7744:	5c41      	ldrb	r1, [r0, r1]
		result =  LORAWAN_INVALID_PARAMETER;
    7746:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    7748:	4299      	cmp	r1, r3
    774a:	d200      	bcs.n	774e <LORAREG_GetAttr_SpreadFactorT2+0x12>
}
    774c:	bd10      	pop	{r4, pc}
		*(RadioDataRate_t *)attrOutput = RegParams.pDrParams[dataRate].spreadingFactor;
    774e:	4c08      	ldr	r4, [pc, #32]	; (7770 <LORAREG_GetAttr_SpreadFactorT2+0x34>)
    7750:	7821      	ldrb	r1, [r4, #0]
    7752:	7860      	ldrb	r0, [r4, #1]
    7754:	0200      	lsls	r0, r0, #8
    7756:	4308      	orrs	r0, r1
    7758:	78a1      	ldrb	r1, [r4, #2]
    775a:	0409      	lsls	r1, r1, #16
    775c:	4308      	orrs	r0, r1
    775e:	78e1      	ldrb	r1, [r4, #3]
    7760:	0609      	lsls	r1, r1, #24
    7762:	4301      	orrs	r1, r0
    7764:	00db      	lsls	r3, r3, #3
    7766:	185b      	adds	r3, r3, r1
    7768:	795b      	ldrb	r3, [r3, #5]
    776a:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    776c:	2008      	movs	r0, #8
	return result;
    776e:	e7ed      	b.n	774c <LORAREG_GetAttr_SpreadFactorT2+0x10>
    7770:	20000fc0 	.word	0x20000fc0

00007774 <ValidateChMaskChCntl>:
{
    7774:	b510      	push	{r4, lr}
    7776:	b082      	sub	sp, #8
	ValChMaskCntl_t chMaskchCntl = * (ValChMaskCntl_t *)attrInput;
    7778:	ac01      	add	r4, sp, #4
    777a:	2204      	movs	r2, #4
    777c:	0020      	movs	r0, r4
    777e:	4b09      	ldr	r3, [pc, #36]	; (77a4 <ValidateChMaskChCntl+0x30>)
    7780:	4798      	blx	r3
    if(chMaskchCntl.chnlMask == 0 && chMaskchCntl.chnlMaskCntl == 7)
    7782:	8863      	ldrh	r3, [r4, #2]
    7784:	2b00      	cmp	r3, #0
    7786:	d104      	bne.n	7792 <ValidateChMaskChCntl+0x1e>
    7788:	ab01      	add	r3, sp, #4
    778a:	781b      	ldrb	r3, [r3, #0]
        result = LORAWAN_INVALID_PARAMETER;
    778c:	200a      	movs	r0, #10
    if(chMaskchCntl.chnlMask == 0 && chMaskchCntl.chnlMaskCntl == 7)
    778e:	2b07      	cmp	r3, #7
    7790:	d006      	beq.n	77a0 <ValidateChMaskChCntl+0x2c>
		result = ((ValidateChannelMask(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) | (ValidateChannelMaskCntl(CHANNEL_MASK_CNTL,  (void *)&chMaskchCntl.chnlMaskCntl)));
    7792:	a901      	add	r1, sp, #4
    7794:	201b      	movs	r0, #27
    7796:	4b04      	ldr	r3, [pc, #16]	; (77a8 <ValidateChMaskChCntl+0x34>)
    7798:	4798      	blx	r3
    779a:	2308      	movs	r3, #8
    779c:	4318      	orrs	r0, r3
    779e:	b2c0      	uxtb	r0, r0
}
    77a0:	b002      	add	sp, #8
    77a2:	bd10      	pop	{r4, pc}
    77a4:	00014ecd 	.word	0x00014ecd
    77a8:	0000515d 	.word	0x0000515d

000077ac <LORAREG_GetAttr_NewTxChConfigT2>:
{
    77ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    77ae:	b083      	sub	sp, #12
    77b0:	0015      	movs	r5, r2
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    77b2:	788c      	ldrb	r4, [r1, #2]
    if ( dataRate > RegParams.minDataRate )
    77b4:	2324      	movs	r3, #36	; 0x24
    77b6:	4a2e      	ldr	r2, [pc, #184]	; (7870 <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    77b8:	5cd3      	ldrb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    77ba:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    77bc:	42a3      	cmp	r3, r4
    77be:	d205      	bcs.n	77cc <LORAREG_GetAttr_NewTxChConfigT2+0x20>
}
    77c0:	b003      	add	sp, #12
    77c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923))) != 0) && (transmissionType == 0))
    77c4:	2900      	cmp	r1, #0
    77c6:	d10f      	bne.n	77e8 <LORAREG_GetAttr_NewTxChConfigT2+0x3c>
		currDr = DR2;
    77c8:	2402      	movs	r4, #2
    77ca:	e00d      	b.n	77e8 <LORAREG_GetAttr_NewTxChConfigT2+0x3c>
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    77cc:	784e      	ldrb	r6, [r1, #1]
	if (txPowerNew > RegParams.maxTxPwrIndx)
    77ce:	232d      	movs	r3, #45	; 0x2d
    77d0:	4a27      	ldr	r2, [pc, #156]	; (7870 <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    77d2:	56d3      	ldrsb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    77d4:	200a      	movs	r0, #10
	if (txPowerNew > RegParams.maxTxPwrIndx)
    77d6:	429e      	cmp	r6, r3
    77d8:	dcf2      	bgt.n	77c0 <LORAREG_GetAttr_NewTxChConfigT2+0x14>
		result = GetTxChannelConfig2(newTxChannelReq.transmissionType,newTxChannelReq.txPwr,newTxChannelReq.currDr,(radioConfig_t*)attrOutput);
    77da:	7809      	ldrb	r1, [r1, #0]
	if(((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923))) != 0) && (transmissionType == 0))
    77dc:	232e      	movs	r3, #46	; 0x2e
    77de:	5cd2      	ldrb	r2, [r2, r3]
    77e0:	4b24      	ldr	r3, [pc, #144]	; (7874 <LORAREG_GetAttr_NewTxChConfigT2+0xc8>)
    77e2:	4113      	asrs	r3, r2
    77e4:	07db      	lsls	r3, r3, #31
    77e6:	d4ed      	bmi.n	77c4 <LORAREG_GetAttr_NewTxChConfigT2+0x18>
	result = SearchAvailableChannel2 (RegParams.maxChannels, transmissionType,currDr, &channelIndex);
    77e8:	232a      	movs	r3, #42	; 0x2a
    77ea:	4a21      	ldr	r2, [pc, #132]	; (7870 <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    77ec:	5cd0      	ldrb	r0, [r2, r3]
    77ee:	466b      	mov	r3, sp
    77f0:	3307      	adds	r3, #7
    77f2:	0022      	movs	r2, r4
    77f4:	4f20      	ldr	r7, [pc, #128]	; (7878 <LORAREG_GetAttr_NewTxChConfigT2+0xcc>)
    77f6:	47b8      	blx	r7
	if (result == LORAWAN_SUCCESS)
    77f8:	2808      	cmp	r0, #8
    77fa:	d1e1      	bne.n	77c0 <LORAREG_GetAttr_NewTxChConfigT2+0x14>
		RegParams.lastUsedChannelIndex = channelIndex;
    77fc:	466b      	mov	r3, sp
    77fe:	79df      	ldrb	r7, [r3, #7]
    7800:	4b1b      	ldr	r3, [pc, #108]	; (7870 <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    7802:	222f      	movs	r2, #47	; 0x2f
    7804:	549f      	strb	r7, [r3, r2]
		radioConfig->frequency = RegParams.pOtherChParams[channelIndex].ulfrequency;
    7806:	7a19      	ldrb	r1, [r3, #8]
    7808:	7a5a      	ldrb	r2, [r3, #9]
    780a:	0212      	lsls	r2, r2, #8
    780c:	430a      	orrs	r2, r1
    780e:	7a99      	ldrb	r1, [r3, #10]
    7810:	0409      	lsls	r1, r1, #16
    7812:	430a      	orrs	r2, r1
    7814:	7ad9      	ldrb	r1, [r3, #11]
    7816:	0609      	lsls	r1, r1, #24
    7818:	4311      	orrs	r1, r2
    781a:	007a      	lsls	r2, r7, #1
    781c:	19d2      	adds	r2, r2, r7
    781e:	0092      	lsls	r2, r2, #2
    7820:	5c57      	ldrb	r7, [r2, r1]
    7822:	1852      	adds	r2, r2, r1
    7824:	7851      	ldrb	r1, [r2, #1]
    7826:	0209      	lsls	r1, r1, #8
    7828:	430f      	orrs	r7, r1
    782a:	7891      	ldrb	r1, [r2, #2]
    782c:	0409      	lsls	r1, r1, #16
    782e:	4339      	orrs	r1, r7
    7830:	78d2      	ldrb	r2, [r2, #3]
    7832:	0612      	lsls	r2, r2, #24
    7834:	430a      	orrs	r2, r1
    7836:	602a      	str	r2, [r5, #0]
		radioConfig->txPower = RegParams.maxTxPwr - 2 *txPwrIndx;
    7838:	0076      	lsls	r6, r6, #1
    783a:	2228      	movs	r2, #40	; 0x28
    783c:	5c9a      	ldrb	r2, [r3, r2]
    783e:	1b96      	subs	r6, r2, r6
    7840:	722e      	strb	r6, [r5, #8]
		radioConfig->freq_hop_period = DISABLED ;
    7842:	2200      	movs	r2, #0
    7844:	80aa      	strh	r2, [r5, #4]
		radioConfig->modulation = RegParams.pDrParams[currDr].modulation;
    7846:	7819      	ldrb	r1, [r3, #0]
    7848:	785a      	ldrb	r2, [r3, #1]
    784a:	0212      	lsls	r2, r2, #8
    784c:	4311      	orrs	r1, r2
    784e:	789a      	ldrb	r2, [r3, #2]
    7850:	0412      	lsls	r2, r2, #16
    7852:	430a      	orrs	r2, r1
    7854:	78db      	ldrb	r3, [r3, #3]
    7856:	061b      	lsls	r3, r3, #24
    7858:	4313      	orrs	r3, r2
    785a:	00e4      	lsls	r4, r4, #3
    785c:	191c      	adds	r4, r3, r4
    785e:	79e3      	ldrb	r3, [r4, #7]
    7860:	726b      	strb	r3, [r5, #9]
		radioConfig->bandwidth = RegParams.pDrParams[currDr].bandwidth;
    7862:	79a3      	ldrb	r3, [r4, #6]
    7864:	72ab      	strb	r3, [r5, #10]
		radioConfig->sf = RegParams.pDrParams[currDr].spreadingFactor;
    7866:	7963      	ldrb	r3, [r4, #5]
    7868:	72eb      	strb	r3, [r5, #11]
		radioConfig->ecrConfig.override = false;
    786a:	2300      	movs	r3, #0
    786c:	71eb      	strb	r3, [r5, #7]
    786e:	e7a7      	b.n	77c0 <LORAREG_GetAttr_NewTxChConfigT2+0x14>
    7870:	20000fc0 	.word	0x20000fc0
    7874:	00007fe0 	.word	0x00007fe0
    7878:	000065a5 	.word	0x000065a5

0000787c <setChannelIdStatus>:
{
    787c:	b510      	push	{r4, lr}
    uint8_t channelId = *(uint8_t *)attrInput;
    787e:	7808      	ldrb	r0, [r1, #0]
    if (channelId >= RegParams.maxChannels)
    7880:	232a      	movs	r3, #42	; 0x2a
    7882:	4a05      	ldr	r2, [pc, #20]	; (7898 <setChannelIdStatus+0x1c>)
    7884:	56d3      	ldrsb	r3, [r2, r3]
    7886:	4298      	cmp	r0, r3
    7888:	db01      	blt.n	788e <setChannelIdStatus+0x12>
		retVal = LORAWAN_INVALID_PARAMETER;
    788a:	200a      	movs	r0, #10
}
    788c:	bd10      	pop	{r4, pc}
		UpdateChannelIdStatus(updateChid.channelIndex,updateChid.statusNew);
    788e:	7849      	ldrb	r1, [r1, #1]
    7890:	4b02      	ldr	r3, [pc, #8]	; (789c <setChannelIdStatus+0x20>)
    7892:	4798      	blx	r3
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    7894:	2008      	movs	r0, #8
	return retVal;
    7896:	e7f9      	b.n	788c <setChannelIdStatus+0x10>
    7898:	20000fc0 	.word	0x20000fc0
    789c:	00005395 	.word	0x00005395

000078a0 <ValidateDataRange>:
{
    78a0:	b530      	push	{r4, r5, lr}
	uint8_t maxTxDR = RegParams.cmnParams.paramsType1.maxTxDR;
    78a2:	23a8      	movs	r3, #168	; 0xa8
    78a4:	005b      	lsls	r3, r3, #1
    78a6:	4a17      	ldr	r2, [pc, #92]	; (7904 <ValidateDataRange+0x64>)
    78a8:	5cd3      	ldrb	r3, [r2, r3]
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    78aa:	784a      	ldrb	r2, [r1, #1]
	dataRateMax = (val_drange.dataRangeNew & FIRST_NIBBLE) >> SHIFT4;
    78ac:	0914      	lsrs	r4, r2, #4
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    78ae:	200a      	movs	r0, #10
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    78b0:	42a3      	cmp	r3, r4
    78b2:	d213      	bcs.n	78dc <ValidateDataRange+0x3c>
}
    78b4:	bd30      	pop	{r4, r5, pc}
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    78b6:	202a      	movs	r0, #42	; 0x2a
    78b8:	4d12      	ldr	r5, [pc, #72]	; (7904 <ValidateDataRange+0x64>)
    78ba:	562d      	ldrsb	r5, [r5, r0]
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    78bc:	3822      	subs	r0, #34	; 0x22
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    78be:	42a9      	cmp	r1, r5
    78c0:	daf8      	bge.n	78b4 <ValidateDataRange+0x14>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    78c2:	3002      	adds	r0, #2
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    78c4:	4293      	cmp	r3, r2
    78c6:	d1f5      	bne.n	78b4 <ValidateDataRange+0x14>
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMax != maxTxDR)))
    78c8:	42a3      	cmp	r3, r4
    78ca:	d005      	beq.n	78d8 <ValidateDataRange+0x38>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    78cc:	200a      	movs	r0, #10
	return retVal;
    78ce:	e7f1      	b.n	78b4 <ValidateDataRange+0x14>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    78d0:	200a      	movs	r0, #10
    78d2:	e7ef      	b.n	78b4 <ValidateDataRange+0x14>
    78d4:	200a      	movs	r0, #10
    78d6:	e7ed      	b.n	78b4 <ValidateDataRange+0x14>
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    78d8:	2008      	movs	r0, #8
    78da:	e7eb      	b.n	78b4 <ValidateDataRange+0x14>
	dataRateMin = val_drange.dataRangeNew & LAST_NIBBLE;
    78dc:	200f      	movs	r0, #15
    78de:	4002      	ands	r2, r0
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    78e0:	3805      	subs	r0, #5
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    78e2:	4293      	cmp	r3, r2
    78e4:	d3e6      	bcc.n	78b4 <ValidateDataRange+0x14>
	if((ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMax) != LORAWAN_SUCCESS ) || (ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMin) != LORAWAN_SUCCESS ) || dataRateMax < dataRateMin || 
    78e6:	42a2      	cmp	r2, r4
    78e8:	d8e4      	bhi.n	78b4 <ValidateDataRange+0x14>
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    78ea:	7809      	ldrb	r1, [r1, #0]
	   ((chId < RegParams.cmnParams.paramsType1.Max_125khzChan) && ((dataRateMin == maxTxDR) || (dataRateMax == maxTxDR))) || 
    78ec:	2054      	movs	r0, #84	; 0x54
    78ee:	30ff      	adds	r0, #255	; 0xff
	if((ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMax) != LORAWAN_SUCCESS ) || (ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMin) != LORAWAN_SUCCESS ) || dataRateMax < dataRateMin || 
    78f0:	4d04      	ldr	r5, [pc, #16]	; (7904 <ValidateDataRange+0x64>)
    78f2:	5c28      	ldrb	r0, [r5, r0]
    78f4:	4288      	cmp	r0, r1
    78f6:	d9de      	bls.n	78b6 <ValidateDataRange+0x16>
	   ((chId < RegParams.cmnParams.paramsType1.Max_125khzChan) && ((dataRateMin == maxTxDR) || (dataRateMax == maxTxDR))) || 
    78f8:	4293      	cmp	r3, r2
    78fa:	d0e9      	beq.n	78d0 <ValidateDataRange+0x30>
    78fc:	42a3      	cmp	r3, r4
    78fe:	d0e9      	beq.n	78d4 <ValidateDataRange+0x34>
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    7900:	2008      	movs	r0, #8
    7902:	e7d7      	b.n	78b4 <ValidateDataRange+0x14>
    7904:	20000fc0 	.word	0x20000fc0

00007908 <setDataRange>:
{
    7908:	b570      	push	{r4, r5, r6, lr}
    790a:	000c      	movs	r4, r1
	if((ValidateDataRange(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelId(CHANNEL_ID, &update_dr.channelIndex) != LORAWAN_SUCCESS))
    790c:	2012      	movs	r0, #18
    790e:	4b0f      	ldr	r3, [pc, #60]	; (794c <setDataRange+0x44>)
    7910:	4798      	blx	r3
    7912:	2808      	cmp	r0, #8
    7914:	d001      	beq.n	791a <setDataRange+0x12>
		retVal = LORAWAN_INVALID_PARAMETER;
    7916:	200a      	movs	r0, #10
}
    7918:	bd70      	pop	{r4, r5, r6, pc}
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    791a:	7823      	ldrb	r3, [r4, #0]
    if (channelId >= RegParams.maxChannels)
    791c:	222a      	movs	r2, #42	; 0x2a
    791e:	490c      	ldr	r1, [pc, #48]	; (7950 <setDataRange+0x48>)
    7920:	568a      	ldrsb	r2, [r1, r2]
    7922:	4293      	cmp	r3, r2
    7924:	db01      	blt.n	792a <setDataRange+0x22>
		retVal = LORAWAN_INVALID_PARAMETER;
    7926:	3002      	adds	r0, #2
    7928:	e7f6      	b.n	7918 <setDataRange+0x10>
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    792a:	7864      	ldrb	r4, [r4, #1]
		RegParams.pChParams[update_dr.channelIndex].dataRange.value = update_dr.dataRangeNew;
    792c:	4d08      	ldr	r5, [pc, #32]	; (7950 <setDataRange+0x48>)
    792e:	792a      	ldrb	r2, [r5, #4]
    7930:	7969      	ldrb	r1, [r5, #5]
    7932:	0209      	lsls	r1, r1, #8
    7934:	4311      	orrs	r1, r2
    7936:	79aa      	ldrb	r2, [r5, #6]
    7938:	0412      	lsls	r2, r2, #16
    793a:	4311      	orrs	r1, r2
    793c:	79ea      	ldrb	r2, [r5, #7]
    793e:	0612      	lsls	r2, r2, #24
    7940:	430a      	orrs	r2, r1
    7942:	005b      	lsls	r3, r3, #1
    7944:	189b      	adds	r3, r3, r2
    7946:	705c      	strb	r4, [r3, #1]
	return retVal;
    7948:	e7e6      	b.n	7918 <setDataRange+0x10>
    794a:	46c0      	nop			; (mov r8, r8)
    794c:	000078a1 	.word	0x000078a1
    7950:	20000fc0 	.word	0x20000fc0

00007954 <LORAREG_GetAttr_RxWindowSizeT1>:
{
    7954:	b570      	push	{r4, r5, r6, lr}
    7956:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    7958:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    795a:	23a8      	movs	r3, #168	; 0xa8
    795c:	005b      	lsls	r3, r3, #1
    795e:	4a0f      	ldr	r2, [pc, #60]	; (799c <LORAREG_GetAttr_RxWindowSizeT1+0x48>)
    7960:	5cd3      	ldrb	r3, [r2, r3]
    7962:	42a3      	cmp	r3, r4
    7964:	d205      	bcs.n	7972 <LORAREG_GetAttr_RxWindowSizeT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7966:	200f      	movs	r0, #15
    7968:	4b0d      	ldr	r3, [pc, #52]	; (79a0 <LORAREG_GetAttr_RxWindowSizeT1+0x4c>)
    796a:	4798      	blx	r3
		return LORAWAN_INVALID_PARAMETER;
    796c:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    796e:	2808      	cmp	r0, #8
    7970:	d112      	bne.n	7998 <LORAREG_GetAttr_RxWindowSizeT1+0x44>
	    *(uint16_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowSize;	
    7972:	490a      	ldr	r1, [pc, #40]	; (799c <LORAREG_GetAttr_RxWindowSizeT1+0x48>)
    7974:	780b      	ldrb	r3, [r1, #0]
    7976:	784a      	ldrb	r2, [r1, #1]
    7978:	0212      	lsls	r2, r2, #8
    797a:	431a      	orrs	r2, r3
    797c:	788b      	ldrb	r3, [r1, #2]
    797e:	041b      	lsls	r3, r3, #16
    7980:	431a      	orrs	r2, r3
    7982:	78cb      	ldrb	r3, [r1, #3]
    7984:	061b      	lsls	r3, r3, #24
    7986:	4313      	orrs	r3, r2
    7988:	00e4      	lsls	r4, r4, #3
    798a:	5ce2      	ldrb	r2, [r4, r3]
    798c:	18e4      	adds	r4, r4, r3
    798e:	7863      	ldrb	r3, [r4, #1]
    7990:	021b      	lsls	r3, r3, #8
    7992:	4313      	orrs	r3, r2
    7994:	802b      	strh	r3, [r5, #0]
	return result;
    7996:	2308      	movs	r3, #8
}
    7998:	0018      	movs	r0, r3
    799a:	bd70      	pop	{r4, r5, r6, pc}
    799c:	20000fc0 	.word	0x20000fc0
    79a0:	00005009 	.word	0x00005009

000079a4 <LORAREG_GetAttr_RxWindowOffsetT1>:
{
    79a4:	b570      	push	{r4, r5, r6, lr}
    79a6:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    79a8:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    79aa:	23a8      	movs	r3, #168	; 0xa8
    79ac:	005b      	lsls	r3, r3, #1
    79ae:	4a0e      	ldr	r2, [pc, #56]	; (79e8 <LORAREG_GetAttr_RxWindowOffsetT1+0x44>)
    79b0:	5cd3      	ldrb	r3, [r2, r3]
    79b2:	42a3      	cmp	r3, r4
    79b4:	d205      	bcs.n	79c2 <LORAREG_GetAttr_RxWindowOffsetT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    79b6:	200f      	movs	r0, #15
    79b8:	4b0c      	ldr	r3, [pc, #48]	; (79ec <LORAREG_GetAttr_RxWindowOffsetT1+0x48>)
    79ba:	4798      	blx	r3
		return LORAWAN_INVALID_PARAMETER;
    79bc:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    79be:	2808      	cmp	r0, #8
    79c0:	d110      	bne.n	79e4 <LORAREG_GetAttr_RxWindowOffsetT1+0x40>
		*(int8_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowOffset;
    79c2:	4909      	ldr	r1, [pc, #36]	; (79e8 <LORAREG_GetAttr_RxWindowOffsetT1+0x44>)
    79c4:	780b      	ldrb	r3, [r1, #0]
    79c6:	784a      	ldrb	r2, [r1, #1]
    79c8:	0212      	lsls	r2, r2, #8
    79ca:	431a      	orrs	r2, r3
    79cc:	788b      	ldrb	r3, [r1, #2]
    79ce:	041b      	lsls	r3, r3, #16
    79d0:	431a      	orrs	r2, r3
    79d2:	78cb      	ldrb	r3, [r1, #3]
    79d4:	061b      	lsls	r3, r3, #24
    79d6:	4313      	orrs	r3, r2
    79d8:	00e4      	lsls	r4, r4, #3
    79da:	18e3      	adds	r3, r4, r3
    79dc:	791b      	ldrb	r3, [r3, #4]
    79de:	b25b      	sxtb	r3, r3
    79e0:	702b      	strb	r3, [r5, #0]
	return result;
    79e2:	2308      	movs	r3, #8
}
    79e4:	0018      	movs	r0, r3
    79e6:	bd70      	pop	{r4, r5, r6, pc}
    79e8:	20000fc0 	.word	0x20000fc0
    79ec:	00005009 	.word	0x00005009

000079f0 <LORAREG_GetAttr_MaxPayloadT1>:
{
    79f0:	b570      	push	{r4, r5, r6, lr}
    79f2:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    79f4:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    79f6:	23a8      	movs	r3, #168	; 0xa8
    79f8:	005b      	lsls	r3, r3, #1
    79fa:	4a0e      	ldr	r2, [pc, #56]	; (7a34 <LORAREG_GetAttr_MaxPayloadT1+0x44>)
    79fc:	5cd3      	ldrb	r3, [r2, r3]
    79fe:	42a3      	cmp	r3, r4
    7a00:	d205      	bcs.n	7a0e <LORAREG_GetAttr_MaxPayloadT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7a02:	200f      	movs	r0, #15
    7a04:	4b0c      	ldr	r3, [pc, #48]	; (7a38 <LORAREG_GetAttr_MaxPayloadT1+0x48>)
    7a06:	4798      	blx	r3
		result =  LORAWAN_INVALID_PARAMETER;
    7a08:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7a0a:	2808      	cmp	r0, #8
    7a0c:	d10f      	bne.n	7a2e <LORAREG_GetAttr_MaxPayloadT1+0x3e>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    7a0e:	4909      	ldr	r1, [pc, #36]	; (7a34 <LORAREG_GetAttr_MaxPayloadT1+0x44>)
    7a10:	780b      	ldrb	r3, [r1, #0]
    7a12:	784a      	ldrb	r2, [r1, #1]
    7a14:	0212      	lsls	r2, r2, #8
    7a16:	431a      	orrs	r2, r3
    7a18:	788b      	ldrb	r3, [r1, #2]
    7a1a:	041b      	lsls	r3, r3, #16
    7a1c:	431a      	orrs	r2, r3
    7a1e:	78cb      	ldrb	r3, [r1, #3]
    7a20:	061b      	lsls	r3, r3, #24
    7a22:	4313      	orrs	r3, r2
    7a24:	00e4      	lsls	r4, r4, #3
    7a26:	18e3      	adds	r3, r4, r3
    7a28:	789b      	ldrb	r3, [r3, #2]
    7a2a:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7a2c:	2308      	movs	r3, #8
}
    7a2e:	0018      	movs	r0, r3
    7a30:	bd70      	pop	{r4, r5, r6, pc}
    7a32:	46c0      	nop			; (mov r8, r8)
    7a34:	20000fc0 	.word	0x20000fc0
    7a38:	00005009 	.word	0x00005009

00007a3c <LORAREG_GetAttr_ModulationAttrT1>:
{
    7a3c:	b570      	push	{r4, r5, r6, lr}
    7a3e:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    7a40:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    7a42:	23a8      	movs	r3, #168	; 0xa8
    7a44:	005b      	lsls	r3, r3, #1
    7a46:	4a0e      	ldr	r2, [pc, #56]	; (7a80 <LORAREG_GetAttr_ModulationAttrT1+0x44>)
    7a48:	5cd3      	ldrb	r3, [r2, r3]
    7a4a:	42a3      	cmp	r3, r4
    7a4c:	d205      	bcs.n	7a5a <LORAREG_GetAttr_ModulationAttrT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7a4e:	200f      	movs	r0, #15
    7a50:	4b0c      	ldr	r3, [pc, #48]	; (7a84 <LORAREG_GetAttr_ModulationAttrT1+0x48>)
    7a52:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    7a54:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7a56:	2808      	cmp	r0, #8
    7a58:	d10f      	bne.n	7a7a <LORAREG_GetAttr_ModulationAttrT1+0x3e>
	    *(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].modulation;
    7a5a:	4909      	ldr	r1, [pc, #36]	; (7a80 <LORAREG_GetAttr_ModulationAttrT1+0x44>)
    7a5c:	780b      	ldrb	r3, [r1, #0]
    7a5e:	784a      	ldrb	r2, [r1, #1]
    7a60:	0212      	lsls	r2, r2, #8
    7a62:	431a      	orrs	r2, r3
    7a64:	788b      	ldrb	r3, [r1, #2]
    7a66:	041b      	lsls	r3, r3, #16
    7a68:	431a      	orrs	r2, r3
    7a6a:	78cb      	ldrb	r3, [r1, #3]
    7a6c:	061b      	lsls	r3, r3, #24
    7a6e:	4313      	orrs	r3, r2
    7a70:	00e4      	lsls	r4, r4, #3
    7a72:	18e3      	adds	r3, r4, r3
    7a74:	79db      	ldrb	r3, [r3, #7]
    7a76:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7a78:	2308      	movs	r3, #8
}
    7a7a:	0018      	movs	r0, r3
    7a7c:	bd70      	pop	{r4, r5, r6, pc}
    7a7e:	46c0      	nop			; (mov r8, r8)
    7a80:	20000fc0 	.word	0x20000fc0
    7a84:	00005009 	.word	0x00005009

00007a88 <LORAREG_GetAttr_BandwidthAttrT1>:
{
    7a88:	b570      	push	{r4, r5, r6, lr}
    7a8a:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    7a8c:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    7a8e:	23a8      	movs	r3, #168	; 0xa8
    7a90:	005b      	lsls	r3, r3, #1
    7a92:	4a0e      	ldr	r2, [pc, #56]	; (7acc <LORAREG_GetAttr_BandwidthAttrT1+0x44>)
    7a94:	5cd3      	ldrb	r3, [r2, r3]
    7a96:	42a3      	cmp	r3, r4
    7a98:	d205      	bcs.n	7aa6 <LORAREG_GetAttr_BandwidthAttrT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7a9a:	200f      	movs	r0, #15
    7a9c:	4b0c      	ldr	r3, [pc, #48]	; (7ad0 <LORAREG_GetAttr_BandwidthAttrT1+0x48>)
    7a9e:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    7aa0:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7aa2:	2808      	cmp	r0, #8
    7aa4:	d10f      	bne.n	7ac6 <LORAREG_GetAttr_BandwidthAttrT1+0x3e>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].bandwidth;
    7aa6:	4909      	ldr	r1, [pc, #36]	; (7acc <LORAREG_GetAttr_BandwidthAttrT1+0x44>)
    7aa8:	780b      	ldrb	r3, [r1, #0]
    7aaa:	784a      	ldrb	r2, [r1, #1]
    7aac:	0212      	lsls	r2, r2, #8
    7aae:	431a      	orrs	r2, r3
    7ab0:	788b      	ldrb	r3, [r1, #2]
    7ab2:	041b      	lsls	r3, r3, #16
    7ab4:	431a      	orrs	r2, r3
    7ab6:	78cb      	ldrb	r3, [r1, #3]
    7ab8:	061b      	lsls	r3, r3, #24
    7aba:	4313      	orrs	r3, r2
    7abc:	00e4      	lsls	r4, r4, #3
    7abe:	18e3      	adds	r3, r4, r3
    7ac0:	799b      	ldrb	r3, [r3, #6]
    7ac2:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7ac4:	2308      	movs	r3, #8
}
    7ac6:	0018      	movs	r0, r3
    7ac8:	bd70      	pop	{r4, r5, r6, pc}
    7aca:	46c0      	nop			; (mov r8, r8)
    7acc:	20000fc0 	.word	0x20000fc0
    7ad0:	00005009 	.word	0x00005009

00007ad4 <LORAREG_GetAttr_SpreadFactorT1>:
{
    7ad4:	b570      	push	{r4, r5, r6, lr}
    7ad6:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    7ad8:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    7ada:	23a8      	movs	r3, #168	; 0xa8
    7adc:	005b      	lsls	r3, r3, #1
    7ade:	4a0e      	ldr	r2, [pc, #56]	; (7b18 <LORAREG_GetAttr_SpreadFactorT1+0x44>)
    7ae0:	5cd3      	ldrb	r3, [r2, r3]
    7ae2:	42a3      	cmp	r3, r4
    7ae4:	d205      	bcs.n	7af2 <LORAREG_GetAttr_SpreadFactorT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7ae6:	200f      	movs	r0, #15
    7ae8:	4b0c      	ldr	r3, [pc, #48]	; (7b1c <LORAREG_GetAttr_SpreadFactorT1+0x48>)
    7aea:	4798      	blx	r3
		result =  LORAWAN_INVALID_PARAMETER;
    7aec:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7aee:	2808      	cmp	r0, #8
    7af0:	d10f      	bne.n	7b12 <LORAREG_GetAttr_SpreadFactorT1+0x3e>
		*(RadioDataRate_t *)attrOutput = RegParams.pDrParams[dataRate].spreadingFactor;
    7af2:	4909      	ldr	r1, [pc, #36]	; (7b18 <LORAREG_GetAttr_SpreadFactorT1+0x44>)
    7af4:	780b      	ldrb	r3, [r1, #0]
    7af6:	784a      	ldrb	r2, [r1, #1]
    7af8:	0212      	lsls	r2, r2, #8
    7afa:	431a      	orrs	r2, r3
    7afc:	788b      	ldrb	r3, [r1, #2]
    7afe:	041b      	lsls	r3, r3, #16
    7b00:	431a      	orrs	r2, r3
    7b02:	78cb      	ldrb	r3, [r1, #3]
    7b04:	061b      	lsls	r3, r3, #24
    7b06:	4313      	orrs	r3, r2
    7b08:	00e4      	lsls	r4, r4, #3
    7b0a:	18e3      	adds	r3, r4, r3
    7b0c:	795b      	ldrb	r3, [r3, #5]
    7b0e:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7b10:	2308      	movs	r3, #8
}
    7b12:	0018      	movs	r0, r3
    7b14:	bd70      	pop	{r4, r5, r6, pc}
    7b16:	46c0      	nop			; (mov r8, r8)
    7b18:	20000fc0 	.word	0x20000fc0
    7b1c:	00005009 	.word	0x00005009

00007b20 <ValidateTxFreqT1>:
{
    7b20:	b530      	push	{r4, r5, lr}
    7b22:	b083      	sub	sp, #12
	memcpy(&val_freqTx,attrInput,sizeof(ValUpdateFreqTx_t));
    7b24:	2208      	movs	r2, #8
    7b26:	4668      	mov	r0, sp
    7b28:	4b20      	ldr	r3, [pc, #128]	; (7bac <ValidateTxFreqT1+0x8c>)
    7b2a:	4798      	blx	r3
	if(ChIndex > RegParams.maxChannels)
    7b2c:	466b      	mov	r3, sp
    7b2e:	7919      	ldrb	r1, [r3, #4]
    7b30:	232a      	movs	r3, #42	; 0x2a
    7b32:	4a1f      	ldr	r2, [pc, #124]	; (7bb0 <ValidateTxFreqT1+0x90>)
    7b34:	56d3      	ldrsb	r3, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7b36:	2008      	movs	r0, #8
	if(ChIndex > RegParams.maxChannels)
    7b38:	4299      	cmp	r1, r3
    7b3a:	dd00      	ble.n	7b3e <ValidateTxFreqT1+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    7b3c:	3002      	adds	r0, #2
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    7b3e:	9c00      	ldr	r4, [sp, #0]
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    7b40:	4d1b      	ldr	r5, [pc, #108]	; (7bb0 <ValidateTxFreqT1+0x90>)
    7b42:	2344      	movs	r3, #68	; 0x44
    7b44:	33ff      	adds	r3, #255	; 0xff
    7b46:	5ceb      	ldrb	r3, [r5, r3]
    7b48:	22a2      	movs	r2, #162	; 0xa2
    7b4a:	0052      	lsls	r2, r2, #1
    7b4c:	5caa      	ldrb	r2, [r5, r2]
    7b4e:	0212      	lsls	r2, r2, #8
    7b50:	431a      	orrs	r2, r3
    7b52:	2346      	movs	r3, #70	; 0x46
    7b54:	33ff      	adds	r3, #255	; 0xff
    7b56:	5ceb      	ldrb	r3, [r5, r3]
    7b58:	041b      	lsls	r3, r3, #16
    7b5a:	431a      	orrs	r2, r3
    7b5c:	23a3      	movs	r3, #163	; 0xa3
    7b5e:	005b      	lsls	r3, r3, #1
    7b60:	5ceb      	ldrb	r3, [r5, r3]
    7b62:	061b      	lsls	r3, r3, #24
    7b64:	4313      	orrs	r3, r2
    7b66:	4a13      	ldr	r2, [pc, #76]	; (7bb4 <ValidateTxFreqT1+0x94>)
    7b68:	434a      	muls	r2, r1
    7b6a:	189b      	adds	r3, r3, r2
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    7b6c:	429c      	cmp	r4, r3
    7b6e:	d01b      	beq.n	7ba8 <ValidateTxFreqT1+0x88>
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    7b70:	2354      	movs	r3, #84	; 0x54
    7b72:	33ff      	adds	r3, #255	; 0xff
    7b74:	5ceb      	ldrb	r3, [r5, r3]
    7b76:	1ac9      	subs	r1, r1, r3
    7b78:	4b0f      	ldr	r3, [pc, #60]	; (7bb8 <ValidateTxFreqT1+0x98>)
    7b7a:	4359      	muls	r1, r3
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    7b7c:	2348      	movs	r3, #72	; 0x48
    7b7e:	33ff      	adds	r3, #255	; 0xff
    7b80:	5ceb      	ldrb	r3, [r5, r3]
    7b82:	22a4      	movs	r2, #164	; 0xa4
    7b84:	0052      	lsls	r2, r2, #1
    7b86:	5caa      	ldrb	r2, [r5, r2]
    7b88:	0212      	lsls	r2, r2, #8
    7b8a:	4313      	orrs	r3, r2
    7b8c:	224a      	movs	r2, #74	; 0x4a
    7b8e:	32ff      	adds	r2, #255	; 0xff
    7b90:	5caa      	ldrb	r2, [r5, r2]
    7b92:	0412      	lsls	r2, r2, #16
    7b94:	431a      	orrs	r2, r3
    7b96:	23a5      	movs	r3, #165	; 0xa5
    7b98:	005b      	lsls	r3, r3, #1
    7b9a:	5ceb      	ldrb	r3, [r5, r3]
    7b9c:	061b      	lsls	r3, r3, #24
    7b9e:	4313      	orrs	r3, r2
    7ba0:	18cb      	adds	r3, r1, r3
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    7ba2:	429c      	cmp	r4, r3
    7ba4:	d000      	beq.n	7ba8 <ValidateTxFreqT1+0x88>
		result = LORAWAN_INVALID_PARAMETER;
    7ba6:	200a      	movs	r0, #10
}
    7ba8:	b003      	add	sp, #12
    7baa:	bd30      	pop	{r4, r5, pc}
    7bac:	00014ecd 	.word	0x00014ecd
    7bb0:	20000fc0 	.word	0x20000fc0
    7bb4:	00030d40 	.word	0x00030d40
    7bb8:	00186a00 	.word	0x00186a00

00007bbc <LORAREG_GetAttr_NewTxChConfigT1>:
{
    7bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    7bbe:	46d6      	mov	lr, sl
    7bc0:	464f      	mov	r7, r9
    7bc2:	4646      	mov	r6, r8
    7bc4:	b5c0      	push	{r6, r7, lr}
    7bc6:	b082      	sub	sp, #8
    7bc8:	0015      	movs	r5, r2
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    7bca:	788c      	ldrb	r4, [r1, #2]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    7bcc:	23a8      	movs	r3, #168	; 0xa8
    7bce:	005b      	lsls	r3, r3, #1
    7bd0:	4a5c      	ldr	r2, [pc, #368]	; (7d44 <LORAREG_GetAttr_NewTxChConfigT1+0x188>)
    7bd2:	5cd3      	ldrb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    7bd4:	200a      	movs	r0, #10
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    7bd6:	42a3      	cmp	r3, r4
    7bd8:	d300      	bcc.n	7bdc <LORAREG_GetAttr_NewTxChConfigT1+0x20>
    7bda:	e08d      	b.n	7cf8 <LORAREG_GetAttr_NewTxChConfigT1+0x13c>
}
    7bdc:	b002      	add	sp, #8
    7bde:	bc1c      	pop	{r2, r3, r4}
    7be0:	4690      	mov	r8, r2
    7be2:	4699      	mov	r9, r3
    7be4:	46a2      	mov	sl, r4
    7be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		result = SearchAvailableChannel1 (RegParams.maxChannels, transmissionType,currDr, &channelIndex);
    7be8:	4b56      	ldr	r3, [pc, #344]	; (7d44 <LORAREG_GetAttr_NewTxChConfigT1+0x188>)
    7bea:	4698      	mov	r8, r3
    7bec:	232a      	movs	r3, #42	; 0x2a
    7bee:	4642      	mov	r2, r8
    7bf0:	5cd0      	ldrb	r0, [r2, r3]
    7bf2:	466b      	mov	r3, sp
    7bf4:	3307      	adds	r3, #7
    7bf6:	0022      	movs	r2, r4
    7bf8:	2101      	movs	r1, #1
    7bfa:	4f53      	ldr	r7, [pc, #332]	; (7d48 <LORAREG_GetAttr_NewTxChConfigT1+0x18c>)
    7bfc:	47b8      	blx	r7
		radioConfig->sf = RegParams.pDrParams[currDr].spreadingFactor;
    7bfe:	4643      	mov	r3, r8
    7c00:	781b      	ldrb	r3, [r3, #0]
    7c02:	4642      	mov	r2, r8
    7c04:	7852      	ldrb	r2, [r2, #1]
    7c06:	0212      	lsls	r2, r2, #8
    7c08:	431a      	orrs	r2, r3
    7c0a:	4643      	mov	r3, r8
    7c0c:	789b      	ldrb	r3, [r3, #2]
    7c0e:	041b      	lsls	r3, r3, #16
    7c10:	431a      	orrs	r2, r3
    7c12:	4643      	mov	r3, r8
    7c14:	78db      	ldrb	r3, [r3, #3]
    7c16:	061b      	lsls	r3, r3, #24
    7c18:	4313      	orrs	r3, r2
    7c1a:	00e4      	lsls	r4, r4, #3
    7c1c:	18e3      	adds	r3, r4, r3
    7c1e:	795b      	ldrb	r3, [r3, #5]
    7c20:	72eb      	strb	r3, [r5, #11]
	if (result == LORAWAN_SUCCESS)
    7c22:	2808      	cmp	r0, #8
    7c24:	d1da      	bne.n	7bdc <LORAREG_GetAttr_NewTxChConfigT1+0x20>
	uint8_t txPower = RegParams.maxTxPwr - 2 * txPwrIndx;
    7c26:	0076      	lsls	r6, r6, #1
    7c28:	4653      	mov	r3, sl
    7c2a:	1b9f      	subs	r7, r3, r6
    7c2c:	b2ff      	uxtb	r7, r7
		if (channelIndex < RegParams.cmnParams.paramsType1.Max_125khzChan)
    7c2e:	466b      	mov	r3, sp
    7c30:	3307      	adds	r3, #7
    7c32:	781b      	ldrb	r3, [r3, #0]
    7c34:	2254      	movs	r2, #84	; 0x54
    7c36:	32ff      	adds	r2, #255	; 0xff
    7c38:	4942      	ldr	r1, [pc, #264]	; (7d44 <LORAREG_GetAttr_NewTxChConfigT1+0x188>)
    7c3a:	5c8a      	ldrb	r2, [r1, r2]
    7c3c:	429a      	cmp	r2, r3
    7c3e:	d930      	bls.n	7ca2 <LORAREG_GetAttr_NewTxChConfigT1+0xe6>
			radioConfig->bandwidth = BW_125KHZ;
    7c40:	2207      	movs	r2, #7
    7c42:	72aa      	strb	r2, [r5, #10]
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    7c44:	2244      	movs	r2, #68	; 0x44
    7c46:	32ff      	adds	r2, #255	; 0xff
    7c48:	5c8a      	ldrb	r2, [r1, r2]
    7c4a:	24a2      	movs	r4, #162	; 0xa2
    7c4c:	0064      	lsls	r4, r4, #1
    7c4e:	5d0c      	ldrb	r4, [r1, r4]
    7c50:	0224      	lsls	r4, r4, #8
    7c52:	4314      	orrs	r4, r2
    7c54:	2246      	movs	r2, #70	; 0x46
    7c56:	32ff      	adds	r2, #255	; 0xff
    7c58:	5c8a      	ldrb	r2, [r1, r2]
    7c5a:	0412      	lsls	r2, r2, #16
    7c5c:	4314      	orrs	r4, r2
    7c5e:	22a3      	movs	r2, #163	; 0xa3
    7c60:	0052      	lsls	r2, r2, #1
    7c62:	5c8a      	ldrb	r2, [r1, r2]
    7c64:	0612      	lsls	r2, r2, #24
    7c66:	4322      	orrs	r2, r4
    7c68:	4c38      	ldr	r4, [pc, #224]	; (7d4c <LORAREG_GetAttr_NewTxChConfigT1+0x190>)
    7c6a:	4363      	muls	r3, r4
    7c6c:	18d3      	adds	r3, r2, r3
			radioConfig->frequency = GenerateFrequency1 (channelIndex);
    7c6e:	602b      	str	r3, [r5, #0]
			radioConfig->txPower = txPower;
    7c70:	722f      	strb	r7, [r5, #8]
			if(RegParams.band == ISM_NA915)
    7c72:	232e      	movs	r3, #46	; 0x2e
    7c74:	5ccb      	ldrb	r3, [r1, r3]
    7c76:	2b02      	cmp	r3, #2
    7c78:	d00f      	beq.n	7c9a <LORAREG_GetAttr_NewTxChConfigT1+0xde>
		radioConfig->freq_hop_period = DISABLED;
    7c7a:	2300      	movs	r3, #0
    7c7c:	80ab      	strh	r3, [r5, #4]
		radioConfig->modulation = MODULATION_LORA;
    7c7e:	3301      	adds	r3, #1
    7c80:	726b      	strb	r3, [r5, #9]
		RegParams.lastUsedChannelIndex = channelIndex;
    7c82:	466b      	mov	r3, sp
    7c84:	79d9      	ldrb	r1, [r3, #7]
    7c86:	232f      	movs	r3, #47	; 0x2f
    7c88:	4a2e      	ldr	r2, [pc, #184]	; (7d44 <LORAREG_GetAttr_NewTxChConfigT1+0x188>)
    7c8a:	54d1      	strb	r1, [r2, r3]
    7c8c:	e7a6      	b.n	7bdc <LORAREG_GetAttr_NewTxChConfigT1+0x20>
				radioConfig->sf = SF_10;
    7c8e:	3308      	adds	r3, #8
    7c90:	72eb      	strb	r3, [r5, #11]
    7c92:	e7c6      	b.n	7c22 <LORAREG_GetAttr_NewTxChConfigT1+0x66>
			radioConfig->sf = SF_8;
    7c94:	2308      	movs	r3, #8
    7c96:	72eb      	strb	r3, [r5, #11]
    7c98:	e7c3      	b.n	7c22 <LORAREG_GetAttr_NewTxChConfigT1+0x66>
    			radioConfig->ecrConfig.override = true;
    7c9a:	3b01      	subs	r3, #1
    7c9c:	71eb      	strb	r3, [r5, #7]
			    radioConfig->ecrConfig.ecr = CR_4_5;	 
    7c9e:	71ab      	strb	r3, [r5, #6]
    7ca0:	e7eb      	b.n	7c7a <LORAREG_GetAttr_NewTxChConfigT1+0xbe>
			radioConfig->bandwidth = BW_500KHZ;
    7ca2:	2209      	movs	r2, #9
    7ca4:	72aa      	strb	r2, [r5, #10]
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    7ca6:	4a27      	ldr	r2, [pc, #156]	; (7d44 <LORAREG_GetAttr_NewTxChConfigT1+0x188>)
    7ca8:	2154      	movs	r1, #84	; 0x54
    7caa:	31ff      	adds	r1, #255	; 0xff
    7cac:	5c51      	ldrb	r1, [r2, r1]
    7cae:	1a5b      	subs	r3, r3, r1
    7cb0:	4927      	ldr	r1, [pc, #156]	; (7d50 <LORAREG_GetAttr_NewTxChConfigT1+0x194>)
    7cb2:	434b      	muls	r3, r1
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    7cb4:	2148      	movs	r1, #72	; 0x48
    7cb6:	31ff      	adds	r1, #255	; 0xff
    7cb8:	5c51      	ldrb	r1, [r2, r1]
    7cba:	24a4      	movs	r4, #164	; 0xa4
    7cbc:	0064      	lsls	r4, r4, #1
    7cbe:	5d14      	ldrb	r4, [r2, r4]
    7cc0:	0224      	lsls	r4, r4, #8
    7cc2:	430c      	orrs	r4, r1
    7cc4:	214a      	movs	r1, #74	; 0x4a
    7cc6:	31ff      	adds	r1, #255	; 0xff
    7cc8:	5c51      	ldrb	r1, [r2, r1]
    7cca:	0409      	lsls	r1, r1, #16
    7ccc:	430c      	orrs	r4, r1
    7cce:	21a5      	movs	r1, #165	; 0xa5
    7cd0:	0049      	lsls	r1, r1, #1
    7cd2:	5c51      	ldrb	r1, [r2, r1]
    7cd4:	0609      	lsls	r1, r1, #24
    7cd6:	4321      	orrs	r1, r4
    7cd8:	185b      	adds	r3, r3, r1
			radioConfig->frequency = GenerateFrequency2 (channelIndex);
    7cda:	602b      	str	r3, [r5, #0]
			if( RegParams.band == ISM_NA915)
    7cdc:	232e      	movs	r3, #46	; 0x2e
    7cde:	5cd3      	ldrb	r3, [r2, r3]
    7ce0:	2b02      	cmp	r3, #2
    7ce2:	d003      	beq.n	7cec <LORAREG_GetAttr_NewTxChConfigT1+0x130>
			if (txPower <= 26)
    7ce4:	2f1a      	cmp	r7, #26
    7ce6:	d804      	bhi.n	7cf2 <LORAREG_GetAttr_NewTxChConfigT1+0x136>
				radioConfig->txPower = txPower;
    7ce8:	722f      	strb	r7, [r5, #8]
    7cea:	e7c6      	b.n	7c7a <LORAREG_GetAttr_NewTxChConfigT1+0xbe>
			    radioConfig->ecrConfig.override = false;
    7cec:	2300      	movs	r3, #0
    7cee:	71eb      	strb	r3, [r5, #7]
    7cf0:	e7f8      	b.n	7ce4 <LORAREG_GetAttr_NewTxChConfigT1+0x128>
				radioConfig->txPower = 26;
    7cf2:	231a      	movs	r3, #26
    7cf4:	722b      	strb	r3, [r5, #8]
    7cf6:	e7c0      	b.n	7c7a <LORAREG_GetAttr_NewTxChConfigT1+0xbe>
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    7cf8:	784e      	ldrb	r6, [r1, #1]
	if (txPowerNew > RegParams.maxTxPwrIndx)
    7cfa:	232d      	movs	r3, #45	; 0x2d
    7cfc:	4a11      	ldr	r2, [pc, #68]	; (7d44 <LORAREG_GetAttr_NewTxChConfigT1+0x188>)
    7cfe:	56d3      	ldrsb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    7d00:	200a      	movs	r0, #10
	if (txPowerNew > RegParams.maxTxPwrIndx)
    7d02:	429e      	cmp	r6, r3
    7d04:	dd00      	ble.n	7d08 <LORAREG_GetAttr_NewTxChConfigT1+0x14c>
    7d06:	e769      	b.n	7bdc <LORAREG_GetAttr_NewTxChConfigT1+0x20>
	uint8_t txPower = RegParams.maxTxPwr - 2 * txPwrIndx;
    7d08:	2328      	movs	r3, #40	; 0x28
    7d0a:	5cd3      	ldrb	r3, [r2, r3]
    7d0c:	469a      	mov	sl, r3
	if (transmissionType == 1) // data message (not join request), it should search in all
    7d0e:	780b      	ldrb	r3, [r1, #0]
    7d10:	2b00      	cmp	r3, #0
    7d12:	d000      	beq.n	7d16 <LORAREG_GetAttr_NewTxChConfigT1+0x15a>
    7d14:	e768      	b.n	7be8 <LORAREG_GetAttr_NewTxChConfigT1+0x2c>
		result = SearchAvailableChannel1 (RegParams.cmnParams.paramsType1.Max_125khzChan, transmissionType,DR0, &channelIndex);
    7d16:	466b      	mov	r3, sp
    7d18:	1ddc      	adds	r4, r3, #7
    7d1a:	2354      	movs	r3, #84	; 0x54
    7d1c:	33ff      	adds	r3, #255	; 0xff
    7d1e:	4a09      	ldr	r2, [pc, #36]	; (7d44 <LORAREG_GetAttr_NewTxChConfigT1+0x188>)
    7d20:	5cd0      	ldrb	r0, [r2, r3]
    7d22:	0023      	movs	r3, r4
    7d24:	2200      	movs	r2, #0
    7d26:	2100      	movs	r1, #0
    7d28:	4f07      	ldr	r7, [pc, #28]	; (7d48 <LORAREG_GetAttr_NewTxChConfigT1+0x18c>)
    7d2a:	47b8      	blx	r7
		if(channelIndex < MAX_CHANNELS_BANDWIDTH_125_AU_NA)
    7d2c:	7823      	ldrb	r3, [r4, #0]
    7d2e:	2b3f      	cmp	r3, #63	; 0x3f
    7d30:	d8b0      	bhi.n	7c94 <LORAREG_GetAttr_NewTxChConfigT1+0xd8>
			if( RegParams.band == ISM_NA915)
    7d32:	232e      	movs	r3, #46	; 0x2e
    7d34:	4a03      	ldr	r2, [pc, #12]	; (7d44 <LORAREG_GetAttr_NewTxChConfigT1+0x188>)
    7d36:	5cd3      	ldrb	r3, [r2, r3]
    7d38:	2b02      	cmp	r3, #2
    7d3a:	d0a8      	beq.n	7c8e <LORAREG_GetAttr_NewTxChConfigT1+0xd2>
				radioConfig->sf = SF_12;
    7d3c:	230c      	movs	r3, #12
    7d3e:	72eb      	strb	r3, [r5, #11]
    7d40:	e76f      	b.n	7c22 <LORAREG_GetAttr_NewTxChConfigT1+0x66>
    7d42:	46c0      	nop			; (mov r8, r8)
    7d44:	20000fc0 	.word	0x20000fc0
    7d48:	00005799 	.word	0x00005799
    7d4c:	00030d40 	.word	0x00030d40
    7d50:	00186a00 	.word	0x00186a00

00007d54 <LORAREG_InitGetAttrFnPtrsNA>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT1;
    7d54:	4b2b      	ldr	r3, [pc, #172]	; (7e04 <LORAREG_InitGetAttrFnPtrsNA+0xb0>)
    7d56:	4a2c      	ldr	r2, [pc, #176]	; (7e08 <LORAREG_InitGetAttrFnPtrsNA+0xb4>)
    7d58:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT1;
    7d5a:	4a2c      	ldr	r2, [pc, #176]	; (7e0c <LORAREG_InitGetAttrFnPtrsNA+0xb8>)
    7d5c:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT1;
    7d5e:	4a2c      	ldr	r2, [pc, #176]	; (7e10 <LORAREG_InitGetAttrFnPtrsNA+0xbc>)
    7d60:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT1;
    7d62:	4a2c      	ldr	r2, [pc, #176]	; (7e14 <LORAREG_InitGetAttrFnPtrsNA+0xc0>)
    7d64:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    7d66:	4a2c      	ldr	r2, [pc, #176]	; (7e18 <LORAREG_InitGetAttrFnPtrsNA+0xc4>)
    7d68:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    7d6a:	4a2c      	ldr	r2, [pc, #176]	; (7e1c <LORAREG_InitGetAttrFnPtrsNA+0xc8>)
    7d6c:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    7d6e:	4a2c      	ldr	r2, [pc, #176]	; (7e20 <LORAREG_InitGetAttrFnPtrsNA+0xcc>)
    7d70:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    7d72:	4a2c      	ldr	r2, [pc, #176]	; (7e24 <LORAREG_InitGetAttrFnPtrsNA+0xd0>)
    7d74:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    7d76:	4a2c      	ldr	r2, [pc, #176]	; (7e28 <LORAREG_InitGetAttrFnPtrsNA+0xd4>)
    7d78:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    7d7a:	4a2c      	ldr	r2, [pc, #176]	; (7e2c <LORAREG_InitGetAttrFnPtrsNA+0xd8>)
    7d7c:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    7d7e:	4a2c      	ldr	r2, [pc, #176]	; (7e30 <LORAREG_InitGetAttrFnPtrsNA+0xdc>)
    7d80:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT1;
    7d82:	4a2c      	ldr	r2, [pc, #176]	; (7e34 <LORAREG_InitGetAttrFnPtrsNA+0xe0>)
    7d84:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    7d86:	4a2c      	ldr	r2, [pc, #176]	; (7e38 <LORAREG_InitGetAttrFnPtrsNA+0xe4>)
    7d88:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    7d8a:	4a2c      	ldr	r2, [pc, #176]	; (7e3c <LORAREG_InitGetAttrFnPtrsNA+0xe8>)
    7d8c:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType1;
    7d8e:	4a2c      	ldr	r2, [pc, #176]	; (7e40 <LORAREG_InitGetAttrFnPtrsNA+0xec>)
    7d90:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    7d92:	492c      	ldr	r1, [pc, #176]	; (7e44 <LORAREG_InitGetAttrFnPtrsNA+0xf0>)
    7d94:	2280      	movs	r2, #128	; 0x80
    7d96:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT1;
    7d98:	4a2b      	ldr	r2, [pc, #172]	; (7e48 <LORAREG_InitGetAttrFnPtrsNA+0xf4>)
    7d9a:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT1;
    7d9c:	492b      	ldr	r1, [pc, #172]	; (7e4c <LORAREG_InitGetAttrFnPtrsNA+0xf8>)
    7d9e:	228c      	movs	r2, #140	; 0x8c
    7da0:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT1;
    7da2:	492b      	ldr	r1, [pc, #172]	; (7e50 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    7da4:	3204      	adds	r2, #4
    7da6:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT1;
    7da8:	492a      	ldr	r1, [pc, #168]	; (7e54 <LORAREG_InitGetAttrFnPtrsNA+0x100>)
    7daa:	3204      	adds	r2, #4
    7dac:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_MinDutyCycleTimer;
    7dae:	492a      	ldr	r1, [pc, #168]	; (7e58 <LORAREG_InitGetAttrFnPtrsNA+0x104>)
    7db0:	3204      	adds	r2, #4
    7db2:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    7db4:	4929      	ldr	r1, [pc, #164]	; (7e5c <LORAREG_InitGetAttrFnPtrsNA+0x108>)
    7db6:	3204      	adds	r2, #4
    7db8:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    7dba:	4929      	ldr	r1, [pc, #164]	; (7e60 <LORAREG_InitGetAttrFnPtrsNA+0x10c>)
    7dbc:	3204      	adds	r2, #4
    7dbe:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    7dc0:	4928      	ldr	r1, [pc, #160]	; (7e64 <LORAREG_InitGetAttrFnPtrsNA+0x110>)
    7dc2:	3204      	adds	r2, #4
    7dc4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    7dc6:	4928      	ldr	r1, [pc, #160]	; (7e68 <LORAREG_InitGetAttrFnPtrsNA+0x114>)
    7dc8:	3204      	adds	r2, #4
    7dca:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    7dcc:	4927      	ldr	r1, [pc, #156]	; (7e6c <LORAREG_InitGetAttrFnPtrsNA+0x118>)
    7dce:	3204      	adds	r2, #4
    7dd0:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    7dd2:	4927      	ldr	r1, [pc, #156]	; (7e70 <LORAREG_InitGetAttrFnPtrsNA+0x11c>)
    7dd4:	3204      	adds	r2, #4
    7dd6:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    7dd8:	4926      	ldr	r1, [pc, #152]	; (7e74 <LORAREG_InitGetAttrFnPtrsNA+0x120>)
    7dda:	3204      	adds	r2, #4
    7ddc:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    7dde:	4926      	ldr	r1, [pc, #152]	; (7e78 <LORAREG_InitGetAttrFnPtrsNA+0x124>)
    7de0:	3204      	adds	r2, #4
    7de2:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT1;
    7de4:	4925      	ldr	r1, [pc, #148]	; (7e7c <LORAREG_InitGetAttrFnPtrsNA+0x128>)
    7de6:	3204      	adds	r2, #4
    7de8:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel1;
    7dea:	4925      	ldr	r1, [pc, #148]	; (7e80 <LORAREG_InitGetAttrFnPtrsNA+0x12c>)
    7dec:	3204      	adds	r2, #4
    7dee:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    7df0:	4924      	ldr	r1, [pc, #144]	; (7e84 <LORAREG_InitGetAttrFnPtrsNA+0x130>)
    7df2:	3204      	adds	r2, #4
    7df4:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    7df6:	4924      	ldr	r1, [pc, #144]	; (7e88 <LORAREG_InitGetAttrFnPtrsNA+0x134>)
    7df8:	3214      	adds	r2, #20
    7dfa:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    7dfc:	4923      	ldr	r1, [pc, #140]	; (7e8c <LORAREG_InitGetAttrFnPtrsNA+0x138>)
    7dfe:	3204      	adds	r2, #4
    7e00:	5099      	str	r1, [r3, r2]
}
    7e02:	4770      	bx	lr
    7e04:	20000b48 	.word	0x20000b48
    7e08:	00004f31 	.word	0x00004f31
    7e0c:	00007955 	.word	0x00007955
    7e10:	000079a5 	.word	0x000079a5
    7e14:	000079f1 	.word	0x000079f1
    7e18:	00004d79 	.word	0x00004d79
    7e1c:	00004d89 	.word	0x00004d89
    7e20:	00004da5 	.word	0x00004da5
    7e24:	00004db5 	.word	0x00004db5
    7e28:	00005bd1 	.word	0x00005bd1
    7e2c:	00004dc5 	.word	0x00004dc5
    7e30:	00004dd5 	.word	0x00004dd5
    7e34:	00005aa5 	.word	0x00005aa5
    7e38:	000050e5 	.word	0x000050e5
    7e3c:	00004e25 	.word	0x00004e25
    7e40:	000059f9 	.word	0x000059f9
    7e44:	00005959 	.word	0x00005959
    7e48:	00004e71 	.word	0x00004e71
    7e4c:	00007a3d 	.word	0x00007a3d
    7e50:	00007a89 	.word	0x00007a89
    7e54:	00007ad5 	.word	0x00007ad5
    7e58:	00004e7b 	.word	0x00004e7b
    7e5c:	00004e85 	.word	0x00004e85
    7e60:	00004e8f 	.word	0x00004e8f
    7e64:	00004e99 	.word	0x00004e99
    7e68:	00004ea5 	.word	0x00004ea5
    7e6c:	00004eb1 	.word	0x00004eb1
    7e70:	00004ebb 	.word	0x00004ebb
    7e74:	00004ec3 	.word	0x00004ec3
    7e78:	00004ecb 	.word	0x00004ecb
    7e7c:	00007bbd 	.word	0x00007bbd
    7e80:	0000592d 	.word	0x0000592d
    7e84:	00004ef5 	.word	0x00004ef5
    7e88:	00004ed5 	.word	0x00004ed5
    7e8c:	00004ee5 	.word	0x00004ee5

00007e90 <LORAREG_InitGetAttrFnPtrsEU>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    7e90:	4b2d      	ldr	r3, [pc, #180]	; (7f48 <LORAREG_InitGetAttrFnPtrsEU+0xb8>)
    7e92:	4a2e      	ldr	r2, [pc, #184]	; (7f4c <LORAREG_InitGetAttrFnPtrsEU+0xbc>)
    7e94:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    7e96:	4a2e      	ldr	r2, [pc, #184]	; (7f50 <LORAREG_InitGetAttrFnPtrsEU+0xc0>)
    7e98:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    7e9a:	4a2e      	ldr	r2, [pc, #184]	; (7f54 <LORAREG_InitGetAttrFnPtrsEU+0xc4>)
    7e9c:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    7e9e:	4a2e      	ldr	r2, [pc, #184]	; (7f58 <LORAREG_InitGetAttrFnPtrsEU+0xc8>)
    7ea0:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    7ea2:	4a2e      	ldr	r2, [pc, #184]	; (7f5c <LORAREG_InitGetAttrFnPtrsEU+0xcc>)
    7ea4:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    7ea6:	4a2e      	ldr	r2, [pc, #184]	; (7f60 <LORAREG_InitGetAttrFnPtrsEU+0xd0>)
    7ea8:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    7eaa:	4a2e      	ldr	r2, [pc, #184]	; (7f64 <LORAREG_InitGetAttrFnPtrsEU+0xd4>)
    7eac:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    7eae:	4a2e      	ldr	r2, [pc, #184]	; (7f68 <LORAREG_InitGetAttrFnPtrsEU+0xd8>)
    7eb0:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    7eb2:	4a2e      	ldr	r2, [pc, #184]	; (7f6c <LORAREG_InitGetAttrFnPtrsEU+0xdc>)
    7eb4:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    7eb6:	4a2e      	ldr	r2, [pc, #184]	; (7f70 <LORAREG_InitGetAttrFnPtrsEU+0xe0>)
    7eb8:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    7eba:	4a2e      	ldr	r2, [pc, #184]	; (7f74 <LORAREG_InitGetAttrFnPtrsEU+0xe4>)
    7ebc:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    7ebe:	4a2e      	ldr	r2, [pc, #184]	; (7f78 <LORAREG_InitGetAttrFnPtrsEU+0xe8>)
    7ec0:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    7ec2:	4a2e      	ldr	r2, [pc, #184]	; (7f7c <LORAREG_InitGetAttrFnPtrsEU+0xec>)
    7ec4:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    7ec6:	4a2e      	ldr	r2, [pc, #184]	; (7f80 <LORAREG_InitGetAttrFnPtrsEU+0xf0>)
    7ec8:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType2;
    7eca:	4a2e      	ldr	r2, [pc, #184]	; (7f84 <LORAREG_InitGetAttrFnPtrsEU+0xf4>)
    7ecc:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    7ece:	492e      	ldr	r1, [pc, #184]	; (7f88 <LORAREG_InitGetAttrFnPtrsEU+0xf8>)
    7ed0:	2280      	movs	r2, #128	; 0x80
    7ed2:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT2;
    7ed4:	4a2d      	ldr	r2, [pc, #180]	; (7f8c <LORAREG_InitGetAttrFnPtrsEU+0xfc>)
    7ed6:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    7ed8:	492d      	ldr	r1, [pc, #180]	; (7f90 <LORAREG_InitGetAttrFnPtrsEU+0x100>)
    7eda:	228c      	movs	r2, #140	; 0x8c
    7edc:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    7ede:	492d      	ldr	r1, [pc, #180]	; (7f94 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    7ee0:	3204      	adds	r2, #4
    7ee2:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    7ee4:	492c      	ldr	r1, [pc, #176]	; (7f98 <LORAREG_InitGetAttrFnPtrsEU+0x108>)
    7ee6:	3204      	adds	r2, #4
    7ee8:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_DutyCycleTimer;
    7eea:	492c      	ldr	r1, [pc, #176]	; (7f9c <LORAREG_InitGetAttrFnPtrsEU+0x10c>)
    7eec:	3204      	adds	r2, #4
    7eee:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    7ef0:	492b      	ldr	r1, [pc, #172]	; (7fa0 <LORAREG_InitGetAttrFnPtrsEU+0x110>)
    7ef2:	3204      	adds	r2, #4
    7ef4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    7ef6:	492b      	ldr	r1, [pc, #172]	; (7fa4 <LORAREG_InitGetAttrFnPtrsEU+0x114>)
    7ef8:	3204      	adds	r2, #4
    7efa:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    7efc:	492a      	ldr	r1, [pc, #168]	; (7fa8 <LORAREG_InitGetAttrFnPtrsEU+0x118>)
    7efe:	3204      	adds	r2, #4
    7f00:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    7f02:	492a      	ldr	r1, [pc, #168]	; (7fac <LORAREG_InitGetAttrFnPtrsEU+0x11c>)
    7f04:	3204      	adds	r2, #4
    7f06:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    7f08:	4929      	ldr	r1, [pc, #164]	; (7fb0 <LORAREG_InitGetAttrFnPtrsEU+0x120>)
    7f0a:	3204      	adds	r2, #4
    7f0c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    7f0e:	4929      	ldr	r1, [pc, #164]	; (7fb4 <LORAREG_InitGetAttrFnPtrsEU+0x124>)
    7f10:	3204      	adds	r2, #4
    7f12:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    7f14:	4928      	ldr	r1, [pc, #160]	; (7fb8 <LORAREG_InitGetAttrFnPtrsEU+0x128>)
    7f16:	3204      	adds	r2, #4
    7f18:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    7f1a:	4928      	ldr	r1, [pc, #160]	; (7fbc <LORAREG_InitGetAttrFnPtrsEU+0x12c>)
    7f1c:	3204      	adds	r2, #4
    7f1e:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    7f20:	4927      	ldr	r1, [pc, #156]	; (7fc0 <LORAREG_InitGetAttrFnPtrsEU+0x130>)
    7f22:	3204      	adds	r2, #4
    7f24:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    7f26:	4927      	ldr	r1, [pc, #156]	; (7fc4 <LORAREG_InitGetAttrFnPtrsEU+0x134>)
    7f28:	3204      	adds	r2, #4
    7f2a:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    7f2c:	4926      	ldr	r1, [pc, #152]	; (7fc8 <LORAREG_InitGetAttrFnPtrsEU+0x138>)
    7f2e:	3204      	adds	r2, #4
    7f30:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    7f32:	4926      	ldr	r1, [pc, #152]	; (7fcc <LORAREG_InitGetAttrFnPtrsEU+0x13c>)
    7f34:	320c      	adds	r2, #12
    7f36:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    7f38:	4925      	ldr	r1, [pc, #148]	; (7fd0 <LORAREG_InitGetAttrFnPtrsEU+0x140>)
    7f3a:	3208      	adds	r2, #8
    7f3c:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    7f3e:	4925      	ldr	r1, [pc, #148]	; (7fd4 <LORAREG_InitGetAttrFnPtrsEU+0x144>)
    7f40:	3204      	adds	r2, #4
    7f42:	5099      	str	r1, [r3, r2]
}
    7f44:	4770      	bx	lr
    7f46:	46c0      	nop			; (mov r8, r8)
    7f48:	20000b48 	.word	0x20000b48
    7f4c:	00005f2d 	.word	0x00005f2d
    7f50:	00007619 	.word	0x00007619
    7f54:	00007659 	.word	0x00007659
    7f58:	00007695 	.word	0x00007695
    7f5c:	00004d79 	.word	0x00004d79
    7f60:	00004d89 	.word	0x00004d89
    7f64:	00004da5 	.word	0x00004da5
    7f68:	00004db5 	.word	0x00004db5
    7f6c:	00005bd1 	.word	0x00005bd1
    7f70:	00004dc5 	.word	0x00004dc5
    7f74:	00004dd5 	.word	0x00004dd5
    7f78:	00005e31 	.word	0x00005e31
    7f7c:	000050e5 	.word	0x000050e5
    7f80:	00004e25 	.word	0x00004e25
    7f84:	00005dc5 	.word	0x00005dc5
    7f88:	00005959 	.word	0x00005959
    7f8c:	0000509d 	.word	0x0000509d
    7f90:	000076cd 	.word	0x000076cd
    7f94:	00007705 	.word	0x00007705
    7f98:	0000773d 	.word	0x0000773d
    7f9c:	00005c31 	.word	0x00005c31
    7fa0:	00004e85 	.word	0x00004e85
    7fa4:	00004e8f 	.word	0x00004e8f
    7fa8:	00004e99 	.word	0x00004e99
    7fac:	00004ea5 	.word	0x00004ea5
    7fb0:	00004eb1 	.word	0x00004eb1
    7fb4:	00004ebb 	.word	0x00004ebb
    7fb8:	00004ec3 	.word	0x00004ec3
    7fbc:	00004ecb 	.word	0x00004ecb
    7fc0:	000077ad 	.word	0x000077ad
    7fc4:	0000675d 	.word	0x0000675d
    7fc8:	00004ef5 	.word	0x00004ef5
    7fcc:	00005be9 	.word	0x00005be9
    7fd0:	00004ed5 	.word	0x00004ed5
    7fd4:	00004ee5 	.word	0x00004ee5

00007fd8 <LORAREG_InitGetAttrFnPtrsAS>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT3;
    7fd8:	4b2d      	ldr	r3, [pc, #180]	; (8090 <LORAREG_InitGetAttrFnPtrsAS+0xb8>)
    7fda:	4a2e      	ldr	r2, [pc, #184]	; (8094 <LORAREG_InitGetAttrFnPtrsAS+0xbc>)
    7fdc:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    7fde:	4a2e      	ldr	r2, [pc, #184]	; (8098 <LORAREG_InitGetAttrFnPtrsAS+0xc0>)
    7fe0:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    7fe2:	4a2e      	ldr	r2, [pc, #184]	; (809c <LORAREG_InitGetAttrFnPtrsAS+0xc4>)
    7fe4:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT3;
    7fe6:	4a2e      	ldr	r2, [pc, #184]	; (80a0 <LORAREG_InitGetAttrFnPtrsAS+0xc8>)
    7fe8:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    7fea:	4a2e      	ldr	r2, [pc, #184]	; (80a4 <LORAREG_InitGetAttrFnPtrsAS+0xcc>)
    7fec:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    7fee:	4a2e      	ldr	r2, [pc, #184]	; (80a8 <LORAREG_InitGetAttrFnPtrsAS+0xd0>)
    7ff0:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    7ff2:	4a2e      	ldr	r2, [pc, #184]	; (80ac <LORAREG_InitGetAttrFnPtrsAS+0xd4>)
    7ff4:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    7ff6:	4a2e      	ldr	r2, [pc, #184]	; (80b0 <LORAREG_InitGetAttrFnPtrsAS+0xd8>)
    7ff8:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    7ffa:	4a2e      	ldr	r2, [pc, #184]	; (80b4 <LORAREG_InitGetAttrFnPtrsAS+0xdc>)
    7ffc:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    7ffe:	4a2e      	ldr	r2, [pc, #184]	; (80b8 <LORAREG_InitGetAttrFnPtrsAS+0xe0>)
    8000:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    8002:	4a2e      	ldr	r2, [pc, #184]	; (80bc <LORAREG_InitGetAttrFnPtrsAS+0xe4>)
    8004:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    8006:	4a2e      	ldr	r2, [pc, #184]	; (80c0 <LORAREG_InitGetAttrFnPtrsAS+0xe8>)
    8008:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    800a:	4a2e      	ldr	r2, [pc, #184]	; (80c4 <LORAREG_InitGetAttrFnPtrsAS+0xec>)
    800c:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    800e:	4a2e      	ldr	r2, [pc, #184]	; (80c8 <LORAREG_InitGetAttrFnPtrsAS+0xf0>)
    8010:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType4;
    8012:	4a2e      	ldr	r2, [pc, #184]	; (80cc <LORAREG_InitGetAttrFnPtrsAS+0xf4>)
    8014:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    8016:	492e      	ldr	r1, [pc, #184]	; (80d0 <LORAREG_InitGetAttrFnPtrsAS+0xf8>)
    8018:	2280      	movs	r2, #128	; 0x80
    801a:	5099      	str	r1, [r3, r2]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    801c:	492d      	ldr	r1, [pc, #180]	; (80d4 <LORAREG_InitGetAttrFnPtrsAS+0xfc>)
    801e:	320c      	adds	r2, #12
    8020:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    8022:	492d      	ldr	r1, [pc, #180]	; (80d8 <LORAREG_InitGetAttrFnPtrsAS+0x100>)
    8024:	3204      	adds	r2, #4
    8026:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    8028:	492c      	ldr	r1, [pc, #176]	; (80dc <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    802a:	3204      	adds	r2, #4
    802c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    802e:	492c      	ldr	r1, [pc, #176]	; (80e0 <LORAREG_InitGetAttrFnPtrsAS+0x108>)
    8030:	3208      	adds	r2, #8
    8032:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    8034:	492b      	ldr	r1, [pc, #172]	; (80e4 <LORAREG_InitGetAttrFnPtrsAS+0x10c>)
    8036:	3204      	adds	r2, #4
    8038:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    803a:	492b      	ldr	r1, [pc, #172]	; (80e8 <LORAREG_InitGetAttrFnPtrsAS+0x110>)
    803c:	3204      	adds	r2, #4
    803e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    8040:	492a      	ldr	r1, [pc, #168]	; (80ec <LORAREG_InitGetAttrFnPtrsAS+0x114>)
    8042:	3204      	adds	r2, #4
    8044:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    8046:	492a      	ldr	r1, [pc, #168]	; (80f0 <LORAREG_InitGetAttrFnPtrsAS+0x118>)
    8048:	3204      	adds	r2, #4
    804a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    804c:	4929      	ldr	r1, [pc, #164]	; (80f4 <LORAREG_InitGetAttrFnPtrsAS+0x11c>)
    804e:	3204      	adds	r2, #4
    8050:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    8052:	4929      	ldr	r1, [pc, #164]	; (80f8 <LORAREG_InitGetAttrFnPtrsAS+0x120>)
    8054:	3204      	adds	r2, #4
    8056:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    8058:	4928      	ldr	r1, [pc, #160]	; (80fc <LORAREG_InitGetAttrFnPtrsAS+0x124>)
    805a:	3204      	adds	r2, #4
    805c:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    805e:	4928      	ldr	r1, [pc, #160]	; (8100 <LORAREG_InitGetAttrFnPtrsAS+0x128>)
    8060:	3204      	adds	r2, #4
    8062:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    8064:	4927      	ldr	r1, [pc, #156]	; (8104 <LORAREG_InitGetAttrFnPtrsAS+0x12c>)
    8066:	3204      	adds	r2, #4
    8068:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    806a:	4927      	ldr	r1, [pc, #156]	; (8108 <LORAREG_InitGetAttrFnPtrsAS+0x130>)
    806c:	3204      	adds	r2, #4
    806e:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    8070:	4926      	ldr	r1, [pc, #152]	; (810c <LORAREG_InitGetAttrFnPtrsAS+0x134>)
    8072:	320c      	adds	r2, #12
    8074:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    8076:	4926      	ldr	r1, [pc, #152]	; (8110 <LORAREG_InitGetAttrFnPtrsAS+0x138>)
    8078:	3208      	adds	r2, #8
    807a:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    807c:	4925      	ldr	r1, [pc, #148]	; (8114 <LORAREG_InitGetAttrFnPtrsAS+0x13c>)
    807e:	3204      	adds	r2, #4
    8080:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT2;
    8082:	4a25      	ldr	r2, [pc, #148]	; (8118 <LORAREG_InitGetAttrFnPtrsAS+0x140>)
    8084:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_DutyCycleTimer;
    8086:	4925      	ldr	r1, [pc, #148]	; (811c <LORAREG_InitGetAttrFnPtrsAS+0x144>)
    8088:	2298      	movs	r2, #152	; 0x98
    808a:	5099      	str	r1, [r3, r2]
}
    808c:	4770      	bx	lr
    808e:	46c0      	nop			; (mov r8, r8)
    8090:	20000b48 	.word	0x20000b48
    8094:	00006069 	.word	0x00006069
    8098:	00007619 	.word	0x00007619
    809c:	00007659 	.word	0x00007659
    80a0:	000075b5 	.word	0x000075b5
    80a4:	00004d79 	.word	0x00004d79
    80a8:	00004d89 	.word	0x00004d89
    80ac:	00004da5 	.word	0x00004da5
    80b0:	00004db5 	.word	0x00004db5
    80b4:	00005bd1 	.word	0x00005bd1
    80b8:	00004dc5 	.word	0x00004dc5
    80bc:	00004dd5 	.word	0x00004dd5
    80c0:	00005e31 	.word	0x00005e31
    80c4:	000050e5 	.word	0x000050e5
    80c8:	00004e25 	.word	0x00004e25
    80cc:	00005f75 	.word	0x00005f75
    80d0:	00005959 	.word	0x00005959
    80d4:	000076cd 	.word	0x000076cd
    80d8:	00007705 	.word	0x00007705
    80dc:	0000773d 	.word	0x0000773d
    80e0:	00004e85 	.word	0x00004e85
    80e4:	00004e8f 	.word	0x00004e8f
    80e8:	00004e99 	.word	0x00004e99
    80ec:	00004ea5 	.word	0x00004ea5
    80f0:	00004eb1 	.word	0x00004eb1
    80f4:	00004ebb 	.word	0x00004ebb
    80f8:	00004ec3 	.word	0x00004ec3
    80fc:	00004ecb 	.word	0x00004ecb
    8100:	000077ad 	.word	0x000077ad
    8104:	0000675d 	.word	0x0000675d
    8108:	00004ef5 	.word	0x00004ef5
    810c:	00005be9 	.word	0x00005be9
    8110:	00004ed5 	.word	0x00004ed5
    8114:	00004ee5 	.word	0x00004ee5
    8118:	0000509d 	.word	0x0000509d
    811c:	00005c31 	.word	0x00005c31

00008120 <LORAREG_InitGetAttrFnPtrsAU>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT1;
    8120:	4b2b      	ldr	r3, [pc, #172]	; (81d0 <LORAREG_InitGetAttrFnPtrsAU+0xb0>)
    8122:	4a2c      	ldr	r2, [pc, #176]	; (81d4 <LORAREG_InitGetAttrFnPtrsAU+0xb4>)
    8124:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT1;
    8126:	4a2c      	ldr	r2, [pc, #176]	; (81d8 <LORAREG_InitGetAttrFnPtrsAU+0xb8>)
    8128:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT1;
    812a:	4a2c      	ldr	r2, [pc, #176]	; (81dc <LORAREG_InitGetAttrFnPtrsAU+0xbc>)
    812c:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT1;
    812e:	4a2c      	ldr	r2, [pc, #176]	; (81e0 <LORAREG_InitGetAttrFnPtrsAU+0xc0>)
    8130:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    8132:	4a2c      	ldr	r2, [pc, #176]	; (81e4 <LORAREG_InitGetAttrFnPtrsAU+0xc4>)
    8134:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    8136:	4a2c      	ldr	r2, [pc, #176]	; (81e8 <LORAREG_InitGetAttrFnPtrsAU+0xc8>)
    8138:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    813a:	4a2c      	ldr	r2, [pc, #176]	; (81ec <LORAREG_InitGetAttrFnPtrsAU+0xcc>)
    813c:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    813e:	4a2c      	ldr	r2, [pc, #176]	; (81f0 <LORAREG_InitGetAttrFnPtrsAU+0xd0>)
    8140:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    8142:	4a2c      	ldr	r2, [pc, #176]	; (81f4 <LORAREG_InitGetAttrFnPtrsAU+0xd4>)
    8144:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    8146:	4a2c      	ldr	r2, [pc, #176]	; (81f8 <LORAREG_InitGetAttrFnPtrsAU+0xd8>)
    8148:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    814a:	4a2c      	ldr	r2, [pc, #176]	; (81fc <LORAREG_InitGetAttrFnPtrsAU+0xdc>)
    814c:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT1;
    814e:	4a2c      	ldr	r2, [pc, #176]	; (8200 <LORAREG_InitGetAttrFnPtrsAU+0xe0>)
    8150:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    8152:	4a2c      	ldr	r2, [pc, #176]	; (8204 <LORAREG_InitGetAttrFnPtrsAU+0xe4>)
    8154:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    8156:	4a2c      	ldr	r2, [pc, #176]	; (8208 <LORAREG_InitGetAttrFnPtrsAU+0xe8>)
    8158:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType1;
    815a:	4a2c      	ldr	r2, [pc, #176]	; (820c <LORAREG_InitGetAttrFnPtrsAU+0xec>)
    815c:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    815e:	492c      	ldr	r1, [pc, #176]	; (8210 <LORAREG_InitGetAttrFnPtrsAU+0xf0>)
    8160:	2280      	movs	r2, #128	; 0x80
    8162:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT1;
    8164:	4a2b      	ldr	r2, [pc, #172]	; (8214 <LORAREG_InitGetAttrFnPtrsAU+0xf4>)
    8166:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[DUTY_CYCLE_TIMER] = LORAREG_GetAttr_MinDutyCycleTimer;	
    8168:	4a2b      	ldr	r2, [pc, #172]	; (8218 <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    816a:	67da      	str	r2, [r3, #124]	; 0x7c
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT1;
    816c:	492b      	ldr	r1, [pc, #172]	; (821c <LORAREG_InitGetAttrFnPtrsAU+0xfc>)
    816e:	228c      	movs	r2, #140	; 0x8c
    8170:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT1;
    8172:	492b      	ldr	r1, [pc, #172]	; (8220 <LORAREG_InitGetAttrFnPtrsAU+0x100>)
    8174:	3204      	adds	r2, #4
    8176:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT1;
    8178:	492a      	ldr	r1, [pc, #168]	; (8224 <LORAREG_InitGetAttrFnPtrsAU+0x104>)
    817a:	3204      	adds	r2, #4
    817c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    817e:	492a      	ldr	r1, [pc, #168]	; (8228 <LORAREG_InitGetAttrFnPtrsAU+0x108>)
    8180:	3208      	adds	r2, #8
    8182:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    8184:	4929      	ldr	r1, [pc, #164]	; (822c <LORAREG_InitGetAttrFnPtrsAU+0x10c>)
    8186:	3204      	adds	r2, #4
    8188:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    818a:	4929      	ldr	r1, [pc, #164]	; (8230 <LORAREG_InitGetAttrFnPtrsAU+0x110>)
    818c:	3204      	adds	r2, #4
    818e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    8190:	4928      	ldr	r1, [pc, #160]	; (8234 <LORAREG_InitGetAttrFnPtrsAU+0x114>)
    8192:	3204      	adds	r2, #4
    8194:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    8196:	4928      	ldr	r1, [pc, #160]	; (8238 <LORAREG_InitGetAttrFnPtrsAU+0x118>)
    8198:	3204      	adds	r2, #4
    819a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    819c:	4927      	ldr	r1, [pc, #156]	; (823c <LORAREG_InitGetAttrFnPtrsAU+0x11c>)
    819e:	3204      	adds	r2, #4
    81a0:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    81a2:	4927      	ldr	r1, [pc, #156]	; (8240 <LORAREG_InitGetAttrFnPtrsAU+0x120>)
    81a4:	3204      	adds	r2, #4
    81a6:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    81a8:	4926      	ldr	r1, [pc, #152]	; (8244 <LORAREG_InitGetAttrFnPtrsAU+0x124>)
    81aa:	3204      	adds	r2, #4
    81ac:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT1;
    81ae:	4926      	ldr	r1, [pc, #152]	; (8248 <LORAREG_InitGetAttrFnPtrsAU+0x128>)
    81b0:	3204      	adds	r2, #4
    81b2:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel1;
    81b4:	4925      	ldr	r1, [pc, #148]	; (824c <LORAREG_InitGetAttrFnPtrsAU+0x12c>)
    81b6:	3204      	adds	r2, #4
    81b8:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    81ba:	4925      	ldr	r1, [pc, #148]	; (8250 <LORAREG_InitGetAttrFnPtrsAU+0x130>)
    81bc:	3204      	adds	r2, #4
    81be:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    81c0:	4924      	ldr	r1, [pc, #144]	; (8254 <LORAREG_InitGetAttrFnPtrsAU+0x134>)
    81c2:	3214      	adds	r2, #20
    81c4:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    81c6:	4924      	ldr	r1, [pc, #144]	; (8258 <LORAREG_InitGetAttrFnPtrsAU+0x138>)
    81c8:	3204      	adds	r2, #4
    81ca:	5099      	str	r1, [r3, r2]
}
    81cc:	4770      	bx	lr
    81ce:	46c0      	nop			; (mov r8, r8)
    81d0:	20000b48 	.word	0x20000b48
    81d4:	00004f31 	.word	0x00004f31
    81d8:	00007955 	.word	0x00007955
    81dc:	000079a5 	.word	0x000079a5
    81e0:	000079f1 	.word	0x000079f1
    81e4:	00004d79 	.word	0x00004d79
    81e8:	00004d89 	.word	0x00004d89
    81ec:	00004da5 	.word	0x00004da5
    81f0:	00004db5 	.word	0x00004db5
    81f4:	00005bd1 	.word	0x00005bd1
    81f8:	00004dc5 	.word	0x00004dc5
    81fc:	00004dd5 	.word	0x00004dd5
    8200:	00005aa5 	.word	0x00005aa5
    8204:	000050e5 	.word	0x000050e5
    8208:	00004e25 	.word	0x00004e25
    820c:	000059f9 	.word	0x000059f9
    8210:	00005959 	.word	0x00005959
    8214:	00004e71 	.word	0x00004e71
    8218:	00004e7b 	.word	0x00004e7b
    821c:	00007a3d 	.word	0x00007a3d
    8220:	00007a89 	.word	0x00007a89
    8224:	00007ad5 	.word	0x00007ad5
    8228:	00004e85 	.word	0x00004e85
    822c:	00004e8f 	.word	0x00004e8f
    8230:	00004e99 	.word	0x00004e99
    8234:	00004ea5 	.word	0x00004ea5
    8238:	00004eb1 	.word	0x00004eb1
    823c:	00004ebb 	.word	0x00004ebb
    8240:	00004ec3 	.word	0x00004ec3
    8244:	00004ecb 	.word	0x00004ecb
    8248:	00007bbd 	.word	0x00007bbd
    824c:	0000592d 	.word	0x0000592d
    8250:	00004ef5 	.word	0x00004ef5
    8254:	00004ed5 	.word	0x00004ed5
    8258:	00004ee5 	.word	0x00004ee5

0000825c <LORAREG_InitGetAttrFnPtrsIN>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    825c:	4b2a      	ldr	r3, [pc, #168]	; (8308 <LORAREG_InitGetAttrFnPtrsIN+0xac>)
    825e:	4a2b      	ldr	r2, [pc, #172]	; (830c <LORAREG_InitGetAttrFnPtrsIN+0xb0>)
    8260:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    8262:	4a2b      	ldr	r2, [pc, #172]	; (8310 <LORAREG_InitGetAttrFnPtrsIN+0xb4>)
    8264:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    8266:	4a2b      	ldr	r2, [pc, #172]	; (8314 <LORAREG_InitGetAttrFnPtrsIN+0xb8>)
    8268:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    826a:	4a2b      	ldr	r2, [pc, #172]	; (8318 <LORAREG_InitGetAttrFnPtrsIN+0xbc>)
    826c:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    826e:	4a2b      	ldr	r2, [pc, #172]	; (831c <LORAREG_InitGetAttrFnPtrsIN+0xc0>)
    8270:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    8272:	4a2b      	ldr	r2, [pc, #172]	; (8320 <LORAREG_InitGetAttrFnPtrsIN+0xc4>)
    8274:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    8276:	4a2b      	ldr	r2, [pc, #172]	; (8324 <LORAREG_InitGetAttrFnPtrsIN+0xc8>)
    8278:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    827a:	4a2b      	ldr	r2, [pc, #172]	; (8328 <LORAREG_InitGetAttrFnPtrsIN+0xcc>)
    827c:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    827e:	4a2b      	ldr	r2, [pc, #172]	; (832c <LORAREG_InitGetAttrFnPtrsIN+0xd0>)
    8280:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    8282:	4a2b      	ldr	r2, [pc, #172]	; (8330 <LORAREG_InitGetAttrFnPtrsIN+0xd4>)
    8284:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    8286:	4a2b      	ldr	r2, [pc, #172]	; (8334 <LORAREG_InitGetAttrFnPtrsIN+0xd8>)
    8288:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    828a:	4a2b      	ldr	r2, [pc, #172]	; (8338 <LORAREG_InitGetAttrFnPtrsIN+0xdc>)
    828c:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    828e:	4a2b      	ldr	r2, [pc, #172]	; (833c <LORAREG_InitGetAttrFnPtrsIN+0xe0>)
    8290:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    8292:	4a2b      	ldr	r2, [pc, #172]	; (8340 <LORAREG_InitGetAttrFnPtrsIN+0xe4>)
    8294:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType3;
    8296:	4a2b      	ldr	r2, [pc, #172]	; (8344 <LORAREG_InitGetAttrFnPtrsIN+0xe8>)
    8298:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    829a:	492b      	ldr	r1, [pc, #172]	; (8348 <LORAREG_InitGetAttrFnPtrsIN+0xec>)
    829c:	2280      	movs	r2, #128	; 0x80
    829e:	5099      	str	r1, [r3, r2]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    82a0:	492a      	ldr	r1, [pc, #168]	; (834c <LORAREG_InitGetAttrFnPtrsIN+0xf0>)
    82a2:	320c      	adds	r2, #12
    82a4:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    82a6:	492a      	ldr	r1, [pc, #168]	; (8350 <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    82a8:	3204      	adds	r2, #4
    82aa:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    82ac:	4929      	ldr	r1, [pc, #164]	; (8354 <LORAREG_InitGetAttrFnPtrsIN+0xf8>)
    82ae:	3204      	adds	r2, #4
    82b0:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    82b2:	4929      	ldr	r1, [pc, #164]	; (8358 <LORAREG_InitGetAttrFnPtrsIN+0xfc>)
    82b4:	3208      	adds	r2, #8
    82b6:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    82b8:	4928      	ldr	r1, [pc, #160]	; (835c <LORAREG_InitGetAttrFnPtrsIN+0x100>)
    82ba:	3204      	adds	r2, #4
    82bc:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    82be:	4928      	ldr	r1, [pc, #160]	; (8360 <LORAREG_InitGetAttrFnPtrsIN+0x104>)
    82c0:	3204      	adds	r2, #4
    82c2:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    82c4:	4927      	ldr	r1, [pc, #156]	; (8364 <LORAREG_InitGetAttrFnPtrsIN+0x108>)
    82c6:	3204      	adds	r2, #4
    82c8:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    82ca:	4927      	ldr	r1, [pc, #156]	; (8368 <LORAREG_InitGetAttrFnPtrsIN+0x10c>)
    82cc:	3204      	adds	r2, #4
    82ce:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    82d0:	4926      	ldr	r1, [pc, #152]	; (836c <LORAREG_InitGetAttrFnPtrsIN+0x110>)
    82d2:	3204      	adds	r2, #4
    82d4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    82d6:	4926      	ldr	r1, [pc, #152]	; (8370 <LORAREG_InitGetAttrFnPtrsIN+0x114>)
    82d8:	3204      	adds	r2, #4
    82da:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    82dc:	4925      	ldr	r1, [pc, #148]	; (8374 <LORAREG_InitGetAttrFnPtrsIN+0x118>)
    82de:	3204      	adds	r2, #4
    82e0:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    82e2:	4925      	ldr	r1, [pc, #148]	; (8378 <LORAREG_InitGetAttrFnPtrsIN+0x11c>)
    82e4:	3204      	adds	r2, #4
    82e6:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    82e8:	4924      	ldr	r1, [pc, #144]	; (837c <LORAREG_InitGetAttrFnPtrsIN+0x120>)
    82ea:	3204      	adds	r2, #4
    82ec:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    82ee:	4924      	ldr	r1, [pc, #144]	; (8380 <LORAREG_InitGetAttrFnPtrsIN+0x124>)
    82f0:	3204      	adds	r2, #4
    82f2:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    82f4:	4923      	ldr	r1, [pc, #140]	; (8384 <LORAREG_InitGetAttrFnPtrsIN+0x128>)
    82f6:	320c      	adds	r2, #12
    82f8:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    82fa:	4923      	ldr	r1, [pc, #140]	; (8388 <LORAREG_InitGetAttrFnPtrsIN+0x12c>)
    82fc:	3208      	adds	r2, #8
    82fe:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    8300:	4922      	ldr	r1, [pc, #136]	; (838c <LORAREG_InitGetAttrFnPtrsIN+0x130>)
    8302:	3204      	adds	r2, #4
    8304:	5099      	str	r1, [r3, r2]
}
    8306:	4770      	bx	lr
    8308:	20000b48 	.word	0x20000b48
    830c:	00005f2d 	.word	0x00005f2d
    8310:	00007619 	.word	0x00007619
    8314:	00007659 	.word	0x00007659
    8318:	00007695 	.word	0x00007695
    831c:	00004d79 	.word	0x00004d79
    8320:	00004d89 	.word	0x00004d89
    8324:	00004da5 	.word	0x00004da5
    8328:	00004db5 	.word	0x00004db5
    832c:	00005bd1 	.word	0x00005bd1
    8330:	00004dc5 	.word	0x00004dc5
    8334:	00004dd5 	.word	0x00004dd5
    8338:	00005e31 	.word	0x00005e31
    833c:	000050e5 	.word	0x000050e5
    8340:	00004e25 	.word	0x00004e25
    8344:	000060b1 	.word	0x000060b1
    8348:	00005959 	.word	0x00005959
    834c:	000076cd 	.word	0x000076cd
    8350:	00007705 	.word	0x00007705
    8354:	0000773d 	.word	0x0000773d
    8358:	00004e85 	.word	0x00004e85
    835c:	00004e8f 	.word	0x00004e8f
    8360:	00004e99 	.word	0x00004e99
    8364:	00004ea5 	.word	0x00004ea5
    8368:	00004eb1 	.word	0x00004eb1
    836c:	00004ebb 	.word	0x00004ebb
    8370:	00004ec3 	.word	0x00004ec3
    8374:	00004ecb 	.word	0x00004ecb
    8378:	000077ad 	.word	0x000077ad
    837c:	0000675d 	.word	0x0000675d
    8380:	00004ef5 	.word	0x00004ef5
    8384:	00005be9 	.word	0x00005be9
    8388:	00004ed5 	.word	0x00004ed5
    838c:	00004ee5 	.word	0x00004ee5

00008390 <LORAREG_InitGetAttrFnPtrsJP>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT3;
    8390:	4b30      	ldr	r3, [pc, #192]	; (8454 <LORAREG_InitGetAttrFnPtrsJP+0xc4>)
    8392:	4a31      	ldr	r2, [pc, #196]	; (8458 <LORAREG_InitGetAttrFnPtrsJP+0xc8>)
    8394:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    8396:	4a31      	ldr	r2, [pc, #196]	; (845c <LORAREG_InitGetAttrFnPtrsJP+0xcc>)
    8398:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    839a:	4a31      	ldr	r2, [pc, #196]	; (8460 <LORAREG_InitGetAttrFnPtrsJP+0xd0>)
    839c:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT3;
    839e:	4a31      	ldr	r2, [pc, #196]	; (8464 <LORAREG_InitGetAttrFnPtrsJP+0xd4>)
    83a0:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    83a2:	4a31      	ldr	r2, [pc, #196]	; (8468 <LORAREG_InitGetAttrFnPtrsJP+0xd8>)
    83a4:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    83a6:	4a31      	ldr	r2, [pc, #196]	; (846c <LORAREG_InitGetAttrFnPtrsJP+0xdc>)
    83a8:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    83aa:	4a31      	ldr	r2, [pc, #196]	; (8470 <LORAREG_InitGetAttrFnPtrsJP+0xe0>)
    83ac:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    83ae:	4a31      	ldr	r2, [pc, #196]	; (8474 <LORAREG_InitGetAttrFnPtrsJP+0xe4>)
    83b0:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    83b2:	4a31      	ldr	r2, [pc, #196]	; (8478 <LORAREG_InitGetAttrFnPtrsJP+0xe8>)
    83b4:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    83b6:	4a31      	ldr	r2, [pc, #196]	; (847c <LORAREG_InitGetAttrFnPtrsJP+0xec>)
    83b8:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    83ba:	4a31      	ldr	r2, [pc, #196]	; (8480 <LORAREG_InitGetAttrFnPtrsJP+0xf0>)
    83bc:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    83be:	4a31      	ldr	r2, [pc, #196]	; (8484 <LORAREG_InitGetAttrFnPtrsJP+0xf4>)
    83c0:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    83c2:	4a31      	ldr	r2, [pc, #196]	; (8488 <LORAREG_InitGetAttrFnPtrsJP+0xf8>)
    83c4:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    83c6:	4a31      	ldr	r2, [pc, #196]	; (848c <LORAREG_InitGetAttrFnPtrsJP+0xfc>)
    83c8:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType4;
    83ca:	4a31      	ldr	r2, [pc, #196]	; (8490 <LORAREG_InitGetAttrFnPtrsJP+0x100>)
    83cc:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    83ce:	4931      	ldr	r1, [pc, #196]	; (8494 <LORAREG_InitGetAttrFnPtrsJP+0x104>)
    83d0:	2280      	movs	r2, #128	; 0x80
    83d2:	5099      	str	r1, [r3, r2]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    83d4:	4930      	ldr	r1, [pc, #192]	; (8498 <LORAREG_InitGetAttrFnPtrsJP+0x108>)
    83d6:	320c      	adds	r2, #12
    83d8:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    83da:	4930      	ldr	r1, [pc, #192]	; (849c <LORAREG_InitGetAttrFnPtrsJP+0x10c>)
    83dc:	3204      	adds	r2, #4
    83de:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    83e0:	492f      	ldr	r1, [pc, #188]	; (84a0 <LORAREG_InitGetAttrFnPtrsJP+0x110>)
    83e2:	3204      	adds	r2, #4
    83e4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    83e6:	492f      	ldr	r1, [pc, #188]	; (84a4 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    83e8:	3208      	adds	r2, #8
    83ea:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    83ec:	492e      	ldr	r1, [pc, #184]	; (84a8 <LORAREG_InitGetAttrFnPtrsJP+0x118>)
    83ee:	3204      	adds	r2, #4
    83f0:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    83f2:	492e      	ldr	r1, [pc, #184]	; (84ac <LORAREG_InitGetAttrFnPtrsJP+0x11c>)
    83f4:	3204      	adds	r2, #4
    83f6:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    83f8:	492d      	ldr	r1, [pc, #180]	; (84b0 <LORAREG_InitGetAttrFnPtrsJP+0x120>)
    83fa:	3204      	adds	r2, #4
    83fc:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    83fe:	492d      	ldr	r1, [pc, #180]	; (84b4 <LORAREG_InitGetAttrFnPtrsJP+0x124>)
    8400:	3204      	adds	r2, #4
    8402:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    8404:	492c      	ldr	r1, [pc, #176]	; (84b8 <LORAREG_InitGetAttrFnPtrsJP+0x128>)
    8406:	3204      	adds	r2, #4
    8408:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    840a:	492c      	ldr	r1, [pc, #176]	; (84bc <LORAREG_InitGetAttrFnPtrsJP+0x12c>)
    840c:	3204      	adds	r2, #4
    840e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    8410:	492b      	ldr	r1, [pc, #172]	; (84c0 <LORAREG_InitGetAttrFnPtrsJP+0x130>)
    8412:	3204      	adds	r2, #4
    8414:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    8416:	492b      	ldr	r1, [pc, #172]	; (84c4 <LORAREG_InitGetAttrFnPtrsJP+0x134>)
    8418:	3204      	adds	r2, #4
    841a:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    841c:	492a      	ldr	r1, [pc, #168]	; (84c8 <LORAREG_InitGetAttrFnPtrsJP+0x138>)
    841e:	3204      	adds	r2, #4
    8420:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    8422:	492a      	ldr	r1, [pc, #168]	; (84cc <LORAREG_InitGetAttrFnPtrsJP+0x13c>)
    8424:	3204      	adds	r2, #4
    8426:	5099      	str	r1, [r3, r2]
    pGetAttr[DEFAULT_LBT_PARAMS] = LORAREG_GetAttr_DefLBTParams;
    8428:	4929      	ldr	r1, [pc, #164]	; (84d0 <LORAREG_InitGetAttrFnPtrsJP+0x140>)
    842a:	3204      	adds	r2, #4
    842c:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_LBT_CHANNEL_PAUSE_TIMER] = LORAREG_GetAttr_minLBTChPauseTimer;
    842e:	4929      	ldr	r1, [pc, #164]	; (84d4 <LORAREG_InitGetAttrFnPtrsJP+0x144>)
    8430:	3204      	adds	r2, #4
    8432:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    8434:	4928      	ldr	r1, [pc, #160]	; (84d8 <LORAREG_InitGetAttrFnPtrsJP+0x148>)
    8436:	3204      	adds	r2, #4
    8438:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    843a:	4928      	ldr	r1, [pc, #160]	; (84dc <LORAREG_InitGetAttrFnPtrsJP+0x14c>)
    843c:	3208      	adds	r2, #8
    843e:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    8440:	4927      	ldr	r1, [pc, #156]	; (84e0 <LORAREG_InitGetAttrFnPtrsJP+0x150>)
    8442:	3204      	adds	r2, #4
    8444:	5099      	str	r1, [r3, r2]
	pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT2;
    8446:	4a27      	ldr	r2, [pc, #156]	; (84e4 <LORAREG_InitGetAttrFnPtrsJP+0x154>)
    8448:	679a      	str	r2, [r3, #120]	; 0x78
	pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_DutyCycleTimer;
    844a:	4927      	ldr	r1, [pc, #156]	; (84e8 <LORAREG_InitGetAttrFnPtrsJP+0x158>)
    844c:	2298      	movs	r2, #152	; 0x98
    844e:	5099      	str	r1, [r3, r2]
}
    8450:	4770      	bx	lr
    8452:	46c0      	nop			; (mov r8, r8)
    8454:	20000b48 	.word	0x20000b48
    8458:	00006069 	.word	0x00006069
    845c:	00007619 	.word	0x00007619
    8460:	00007659 	.word	0x00007659
    8464:	000075b5 	.word	0x000075b5
    8468:	00004d79 	.word	0x00004d79
    846c:	00004d89 	.word	0x00004d89
    8470:	00004da5 	.word	0x00004da5
    8474:	00004db5 	.word	0x00004db5
    8478:	00005bd1 	.word	0x00005bd1
    847c:	00004dc5 	.word	0x00004dc5
    8480:	00004dd5 	.word	0x00004dd5
    8484:	00005e31 	.word	0x00005e31
    8488:	000050e5 	.word	0x000050e5
    848c:	00004e25 	.word	0x00004e25
    8490:	00005f75 	.word	0x00005f75
    8494:	00005959 	.word	0x00005959
    8498:	000076cd 	.word	0x000076cd
    849c:	00007705 	.word	0x00007705
    84a0:	0000773d 	.word	0x0000773d
    84a4:	00004e85 	.word	0x00004e85
    84a8:	00004e8f 	.word	0x00004e8f
    84ac:	00004e99 	.word	0x00004e99
    84b0:	00004ea5 	.word	0x00004ea5
    84b4:	00004eb1 	.word	0x00004eb1
    84b8:	00004ebb 	.word	0x00004ebb
    84bc:	00004ec3 	.word	0x00004ec3
    84c0:	00004ecb 	.word	0x00004ecb
    84c4:	000077ad 	.word	0x000077ad
    84c8:	0000675d 	.word	0x0000675d
    84cc:	00004ef5 	.word	0x00004ef5
    84d0:	00004f05 	.word	0x00004f05
    84d4:	00006139 	.word	0x00006139
    84d8:	00005be9 	.word	0x00005be9
    84dc:	00004ed5 	.word	0x00004ed5
    84e0:	00004ee5 	.word	0x00004ee5
    84e4:	0000509d 	.word	0x0000509d
    84e8:	00005c31 	.word	0x00005c31

000084ec <LORAREG_InitGetAttrFnPtrsKR>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    84ec:	4b2d      	ldr	r3, [pc, #180]	; (85a4 <LORAREG_InitGetAttrFnPtrsKR+0xb8>)
    84ee:	4a2e      	ldr	r2, [pc, #184]	; (85a8 <LORAREG_InitGetAttrFnPtrsKR+0xbc>)
    84f0:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    84f2:	4a2e      	ldr	r2, [pc, #184]	; (85ac <LORAREG_InitGetAttrFnPtrsKR+0xc0>)
    84f4:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    84f6:	4a2e      	ldr	r2, [pc, #184]	; (85b0 <LORAREG_InitGetAttrFnPtrsKR+0xc4>)
    84f8:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    84fa:	4a2e      	ldr	r2, [pc, #184]	; (85b4 <LORAREG_InitGetAttrFnPtrsKR+0xc8>)
    84fc:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    84fe:	4a2e      	ldr	r2, [pc, #184]	; (85b8 <LORAREG_InitGetAttrFnPtrsKR+0xcc>)
    8500:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    8502:	4a2e      	ldr	r2, [pc, #184]	; (85bc <LORAREG_InitGetAttrFnPtrsKR+0xd0>)
    8504:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    8506:	4a2e      	ldr	r2, [pc, #184]	; (85c0 <LORAREG_InitGetAttrFnPtrsKR+0xd4>)
    8508:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    850a:	4a2e      	ldr	r2, [pc, #184]	; (85c4 <LORAREG_InitGetAttrFnPtrsKR+0xd8>)
    850c:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    850e:	4a2e      	ldr	r2, [pc, #184]	; (85c8 <LORAREG_InitGetAttrFnPtrsKR+0xdc>)
    8510:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    8512:	4a2e      	ldr	r2, [pc, #184]	; (85cc <LORAREG_InitGetAttrFnPtrsKR+0xe0>)
    8514:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    8516:	4a2e      	ldr	r2, [pc, #184]	; (85d0 <LORAREG_InitGetAttrFnPtrsKR+0xe4>)
    8518:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    851a:	4a2e      	ldr	r2, [pc, #184]	; (85d4 <LORAREG_InitGetAttrFnPtrsKR+0xe8>)
    851c:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    851e:	4a2e      	ldr	r2, [pc, #184]	; (85d8 <LORAREG_InitGetAttrFnPtrsKR+0xec>)
    8520:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    8522:	4a2e      	ldr	r2, [pc, #184]	; (85dc <LORAREG_InitGetAttrFnPtrsKR+0xf0>)
    8524:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType2;
    8526:	4a2e      	ldr	r2, [pc, #184]	; (85e0 <LORAREG_InitGetAttrFnPtrsKR+0xf4>)
    8528:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]=LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    852a:	492e      	ldr	r1, [pc, #184]	; (85e4 <LORAREG_InitGetAttrFnPtrsKR+0xf8>)
    852c:	2280      	movs	r2, #128	; 0x80
    852e:	5099      	str	r1, [r3, r2]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    8530:	492d      	ldr	r1, [pc, #180]	; (85e8 <LORAREG_InitGetAttrFnPtrsKR+0xfc>)
    8532:	320c      	adds	r2, #12
    8534:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    8536:	492d      	ldr	r1, [pc, #180]	; (85ec <LORAREG_InitGetAttrFnPtrsKR+0x100>)
    8538:	3204      	adds	r2, #4
    853a:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    853c:	492c      	ldr	r1, [pc, #176]	; (85f0 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    853e:	3204      	adds	r2, #4
    8540:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    8542:	492c      	ldr	r1, [pc, #176]	; (85f4 <LORAREG_InitGetAttrFnPtrsKR+0x108>)
    8544:	3208      	adds	r2, #8
    8546:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    8548:	492b      	ldr	r1, [pc, #172]	; (85f8 <LORAREG_InitGetAttrFnPtrsKR+0x10c>)
    854a:	3204      	adds	r2, #4
    854c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    854e:	492b      	ldr	r1, [pc, #172]	; (85fc <LORAREG_InitGetAttrFnPtrsKR+0x110>)
    8550:	3204      	adds	r2, #4
    8552:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    8554:	492a      	ldr	r1, [pc, #168]	; (8600 <LORAREG_InitGetAttrFnPtrsKR+0x114>)
    8556:	3204      	adds	r2, #4
    8558:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    855a:	492a      	ldr	r1, [pc, #168]	; (8604 <LORAREG_InitGetAttrFnPtrsKR+0x118>)
    855c:	3204      	adds	r2, #4
    855e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    8560:	4929      	ldr	r1, [pc, #164]	; (8608 <LORAREG_InitGetAttrFnPtrsKR+0x11c>)
    8562:	3204      	adds	r2, #4
    8564:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    8566:	4929      	ldr	r1, [pc, #164]	; (860c <LORAREG_InitGetAttrFnPtrsKR+0x120>)
    8568:	3204      	adds	r2, #4
    856a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    856c:	4928      	ldr	r1, [pc, #160]	; (8610 <LORAREG_InitGetAttrFnPtrsKR+0x124>)
    856e:	3204      	adds	r2, #4
    8570:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    8572:	4928      	ldr	r1, [pc, #160]	; (8614 <LORAREG_InitGetAttrFnPtrsKR+0x128>)
    8574:	3204      	adds	r2, #4
    8576:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    8578:	4927      	ldr	r1, [pc, #156]	; (8618 <LORAREG_InitGetAttrFnPtrsKR+0x12c>)
    857a:	3204      	adds	r2, #4
    857c:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    857e:	4927      	ldr	r1, [pc, #156]	; (861c <LORAREG_InitGetAttrFnPtrsKR+0x130>)
    8580:	3204      	adds	r2, #4
    8582:	5099      	str	r1, [r3, r2]
    pGetAttr[DEFAULT_LBT_PARAMS] = LORAREG_GetAttr_DefLBTParams;
    8584:	4926      	ldr	r1, [pc, #152]	; (8620 <LORAREG_InitGetAttrFnPtrsKR+0x134>)
    8586:	3204      	adds	r2, #4
    8588:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_LBT_CHANNEL_PAUSE_TIMER] = LORAREG_GetAttr_minLBTChPauseTimer;
    858a:	4926      	ldr	r1, [pc, #152]	; (8624 <LORAREG_InitGetAttrFnPtrsKR+0x138>)
    858c:	3204      	adds	r2, #4
    858e:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    8590:	4925      	ldr	r1, [pc, #148]	; (8628 <LORAREG_InitGetAttrFnPtrsKR+0x13c>)
    8592:	3204      	adds	r2, #4
    8594:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    8596:	4925      	ldr	r1, [pc, #148]	; (862c <LORAREG_InitGetAttrFnPtrsKR+0x140>)
    8598:	3208      	adds	r2, #8
    859a:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    859c:	4924      	ldr	r1, [pc, #144]	; (8630 <LORAREG_InitGetAttrFnPtrsKR+0x144>)
    859e:	3204      	adds	r2, #4
    85a0:	5099      	str	r1, [r3, r2]
}
    85a2:	4770      	bx	lr
    85a4:	20000b48 	.word	0x20000b48
    85a8:	00005f2d 	.word	0x00005f2d
    85ac:	00007619 	.word	0x00007619
    85b0:	00007659 	.word	0x00007659
    85b4:	00007695 	.word	0x00007695
    85b8:	00004d79 	.word	0x00004d79
    85bc:	00004d89 	.word	0x00004d89
    85c0:	00004da5 	.word	0x00004da5
    85c4:	00004db5 	.word	0x00004db5
    85c8:	00005bd1 	.word	0x00005bd1
    85cc:	00004dc5 	.word	0x00004dc5
    85d0:	00004dd5 	.word	0x00004dd5
    85d4:	00005e31 	.word	0x00005e31
    85d8:	000050e5 	.word	0x000050e5
    85dc:	00004e25 	.word	0x00004e25
    85e0:	00005dc5 	.word	0x00005dc5
    85e4:	00005959 	.word	0x00005959
    85e8:	000076cd 	.word	0x000076cd
    85ec:	00007705 	.word	0x00007705
    85f0:	0000773d 	.word	0x0000773d
    85f4:	00004e85 	.word	0x00004e85
    85f8:	00004e8f 	.word	0x00004e8f
    85fc:	00004e99 	.word	0x00004e99
    8600:	00004ea5 	.word	0x00004ea5
    8604:	00004eb1 	.word	0x00004eb1
    8608:	00004ebb 	.word	0x00004ebb
    860c:	00004ec3 	.word	0x00004ec3
    8610:	00004ecb 	.word	0x00004ecb
    8614:	000077ad 	.word	0x000077ad
    8618:	0000675d 	.word	0x0000675d
    861c:	00004ef5 	.word	0x00004ef5
    8620:	00004f05 	.word	0x00004f05
    8624:	00006139 	.word	0x00006139
    8628:	00005be9 	.word	0x00005be9
    862c:	00004ed5 	.word	0x00004ed5
    8630:	00004ee5 	.word	0x00004ee5

00008634 <LORAREG_InitValidateAttrFnPtrsNA>:
    pValidateAttr[RX_FREQUENCY] = ValidateRxFreqT1;
    8634:	4b0d      	ldr	r3, [pc, #52]	; (866c <LORAREG_InitValidateAttrFnPtrsNA+0x38>)
    8636:	4a0e      	ldr	r2, [pc, #56]	; (8670 <LORAREG_InitValidateAttrFnPtrsNA+0x3c>)
    8638:	605a      	str	r2, [r3, #4]
    pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT1;
    863a:	4a0e      	ldr	r2, [pc, #56]	; (8674 <LORAREG_InitValidateAttrFnPtrsNA+0x40>)
    863c:	609a      	str	r2, [r3, #8]
    pValidateAttr[RX_DATARATE] = ValidateDataRateRxT1;
    863e:	4a0e      	ldr	r2, [pc, #56]	; (8678 <LORAREG_InitValidateAttrFnPtrsNA+0x44>)
    8640:	63da      	str	r2, [r3, #60]	; 0x3c
    pValidateAttr[TX_DATARATE] = ValidateDataRateTxT1;
    8642:	490e      	ldr	r1, [pc, #56]	; (867c <LORAREG_InitValidateAttrFnPtrsNA+0x48>)
    8644:	6419      	str	r1, [r3, #64]	; 0x40
    pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    8646:	490e      	ldr	r1, [pc, #56]	; (8680 <LORAREG_InitValidateAttrFnPtrsNA+0x4c>)
    8648:	6459      	str	r1, [r3, #68]	; 0x44
    pValidateAttr[DATA_RANGE] = ValidateDataRange;
    864a:	490e      	ldr	r1, [pc, #56]	; (8684 <LORAREG_InitValidateAttrFnPtrsNA+0x50>)
    864c:	6499      	str	r1, [r3, #72]	; 0x48
    pValidateAttr[CHANNEL_ID] = ValidateChannelId;
    864e:	490e      	ldr	r1, [pc, #56]	; (8688 <LORAREG_InitValidateAttrFnPtrsNA+0x54>)
    8650:	6559      	str	r1, [r3, #84]	; 0x54
    pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT1;
    8652:	65da      	str	r2, [r3, #92]	; 0x5c
    pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    8654:	4a0d      	ldr	r2, [pc, #52]	; (868c <LORAREG_InitValidateAttrFnPtrsNA+0x58>)
    8656:	661a      	str	r2, [r3, #96]	; 0x60
    pValidateAttr[CHANNEL_MASK] = ValidateChannelMask;
    8658:	4a0d      	ldr	r2, [pc, #52]	; (8690 <LORAREG_InitValidateAttrFnPtrsNA+0x5c>)
    865a:	669a      	str	r2, [r3, #104]	; 0x68
    pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntl;
    865c:	4a0d      	ldr	r2, [pc, #52]	; (8694 <LORAREG_InitValidateAttrFnPtrsNA+0x60>)
    865e:	66da      	str	r2, [r3, #108]	; 0x6c
    pValidateAttr[TX_PWR] = ValidateTxPower;
    8660:	4a0d      	ldr	r2, [pc, #52]	; (8698 <LORAREG_InitValidateAttrFnPtrsNA+0x64>)
    8662:	675a      	str	r2, [r3, #116]	; 0x74
    pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntl;
    8664:	490d      	ldr	r1, [pc, #52]	; (869c <LORAREG_InitValidateAttrFnPtrsNA+0x68>)
    8666:	22e0      	movs	r2, #224	; 0xe0
    8668:	5099      	str	r1, [r3, r2]
}
    866a:	4770      	bx	lr
    866c:	20000d30 	.word	0x20000d30
    8670:	000052bd 	.word	0x000052bd
    8674:	00007b21 	.word	0x00007b21
    8678:	00005009 	.word	0x00005009
    867c:	00004fc5 	.word	0x00004fc5
    8680:	00005261 	.word	0x00005261
    8684:	000078a1 	.word	0x000078a1
    8688:	00005059 	.word	0x00005059
    868c:	000052f1 	.word	0x000052f1
    8690:	00005189 	.word	0x00005189
    8694:	0000515d 	.word	0x0000515d
    8698:	00005171 	.word	0x00005171
    869c:	00007775 	.word	0x00007775

000086a0 <LORAREG_InitValidateAttrFnPtrsEU>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreq;
    86a0:	4b0d      	ldr	r3, [pc, #52]	; (86d8 <LORAREG_InitValidateAttrFnPtrsEU+0x38>)
    86a2:	4a0e      	ldr	r2, [pc, #56]	; (86dc <LORAREG_InitValidateAttrFnPtrsEU+0x3c>)
    86a4:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    86a6:	4a0e      	ldr	r2, [pc, #56]	; (86e0 <LORAREG_InitValidateAttrFnPtrsEU+0x40>)
    86a8:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    86aa:	4a0e      	ldr	r2, [pc, #56]	; (86e4 <LORAREG_InitValidateAttrFnPtrsEU+0x44>)
    86ac:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    86ae:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    86b0:	490d      	ldr	r1, [pc, #52]	; (86e8 <LORAREG_InitValidateAttrFnPtrsEU+0x48>)
    86b2:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    86b4:	490d      	ldr	r1, [pc, #52]	; (86ec <LORAREG_InitValidateAttrFnPtrsEU+0x4c>)
    86b6:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    86b8:	490d      	ldr	r1, [pc, #52]	; (86f0 <LORAREG_InitValidateAttrFnPtrsEU+0x50>)
    86ba:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    86bc:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    86be:	4a0d      	ldr	r2, [pc, #52]	; (86f4 <LORAREG_InitValidateAttrFnPtrsEU+0x54>)
    86c0:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    86c2:	4a0d      	ldr	r2, [pc, #52]	; (86f8 <LORAREG_InitValidateAttrFnPtrsEU+0x58>)
    86c4:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    86c6:	4a0d      	ldr	r2, [pc, #52]	; (86fc <LORAREG_InitValidateAttrFnPtrsEU+0x5c>)
    86c8:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    86ca:	4a0d      	ldr	r2, [pc, #52]	; (8700 <LORAREG_InitValidateAttrFnPtrsEU+0x60>)
    86cc:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    86ce:	490d      	ldr	r1, [pc, #52]	; (8704 <LORAREG_InitValidateAttrFnPtrsEU+0x64>)
    86d0:	22e0      	movs	r2, #224	; 0xe0
    86d2:	5099      	str	r1, [r3, r2]
}
    86d4:	4770      	bx	lr
    86d6:	46c0      	nop			; (mov r8, r8)
    86d8:	20000d30 	.word	0x20000d30
    86dc:	00005379 	.word	0x00005379
    86e0:	00006209 	.word	0x00006209
    86e4:	00005249 	.word	0x00005249
    86e8:	00005261 	.word	0x00005261
    86ec:	00007509 	.word	0x00007509
    86f0:	00005071 	.word	0x00005071
    86f4:	000052f1 	.word	0x000052f1
    86f8:	0000518d 	.word	0x0000518d
    86fc:	000051e1 	.word	0x000051e1
    8700:	00005171 	.word	0x00005171
    8704:	000051f5 	.word	0x000051f5

00008708 <LORAREG_InitValidateAttrFnPtrsAS>:
	pValidateAttr[RX_FREQUENCY] = ValidateFrequencyAS;
    8708:	4b0d      	ldr	r3, [pc, #52]	; (8740 <LORAREG_InitValidateAttrFnPtrsAS+0x38>)
    870a:	4a0e      	ldr	r2, [pc, #56]	; (8744 <LORAREG_InitValidateAttrFnPtrsAS+0x3c>)
    870c:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    870e:	4a0e      	ldr	r2, [pc, #56]	; (8748 <LORAREG_InitValidateAttrFnPtrsAS+0x40>)
    8710:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT2;
    8712:	4a0e      	ldr	r2, [pc, #56]	; (874c <LORAREG_InitValidateAttrFnPtrsAS+0x44>)
    8714:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT2;
    8716:	490e      	ldr	r1, [pc, #56]	; (8750 <LORAREG_InitValidateAttrFnPtrsAS+0x48>)
    8718:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    871a:	490e      	ldr	r1, [pc, #56]	; (8754 <LORAREG_InitValidateAttrFnPtrsAS+0x4c>)
    871c:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    871e:	490e      	ldr	r1, [pc, #56]	; (8758 <LORAREG_InitValidateAttrFnPtrsAS+0x50>)
    8720:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    8722:	490e      	ldr	r1, [pc, #56]	; (875c <LORAREG_InitValidateAttrFnPtrsAS+0x54>)
    8724:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT2;
    8726:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    8728:	4a0d      	ldr	r2, [pc, #52]	; (8760 <LORAREG_InitValidateAttrFnPtrsAS+0x58>)
    872a:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    872c:	4a0d      	ldr	r2, [pc, #52]	; (8764 <LORAREG_InitValidateAttrFnPtrsAS+0x5c>)
    872e:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    8730:	4a0d      	ldr	r2, [pc, #52]	; (8768 <LORAREG_InitValidateAttrFnPtrsAS+0x60>)
    8732:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    8734:	4a0d      	ldr	r2, [pc, #52]	; (876c <LORAREG_InitValidateAttrFnPtrsAS+0x64>)
    8736:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    8738:	490d      	ldr	r1, [pc, #52]	; (8770 <LORAREG_InitValidateAttrFnPtrsAS+0x68>)
    873a:	22e0      	movs	r2, #224	; 0xe0
    873c:	5099      	str	r1, [r3, r2]
}
    873e:	4770      	bx	lr
    8740:	20000d30 	.word	0x20000d30
    8744:	00005665 	.word	0x00005665
    8748:	00006209 	.word	0x00006209
    874c:	0000502d 	.word	0x0000502d
    8750:	00004fdd 	.word	0x00004fdd
    8754:	00005261 	.word	0x00005261
    8758:	00007509 	.word	0x00007509
    875c:	00005071 	.word	0x00005071
    8760:	000052f1 	.word	0x000052f1
    8764:	0000518d 	.word	0x0000518d
    8768:	000051e1 	.word	0x000051e1
    876c:	00005171 	.word	0x00005171
    8770:	000051f5 	.word	0x000051f5

00008774 <LORAREG_InitValidateAttrFnPtrsAU>:
	pValidateAttr[RX_FREQUENCY] = ValidateRxFreqT1;
    8774:	4b0d      	ldr	r3, [pc, #52]	; (87ac <LORAREG_InitValidateAttrFnPtrsAU+0x38>)
    8776:	4a0e      	ldr	r2, [pc, #56]	; (87b0 <LORAREG_InitValidateAttrFnPtrsAU+0x3c>)
    8778:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT1;
    877a:	4a0e      	ldr	r2, [pc, #56]	; (87b4 <LORAREG_InitValidateAttrFnPtrsAU+0x40>)
    877c:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT1;
    877e:	4a0e      	ldr	r2, [pc, #56]	; (87b8 <LORAREG_InitValidateAttrFnPtrsAU+0x44>)
    8780:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT1;
    8782:	490e      	ldr	r1, [pc, #56]	; (87bc <LORAREG_InitValidateAttrFnPtrsAU+0x48>)
    8784:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    8786:	490e      	ldr	r1, [pc, #56]	; (87c0 <LORAREG_InitValidateAttrFnPtrsAU+0x4c>)
    8788:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRange;
    878a:	490e      	ldr	r1, [pc, #56]	; (87c4 <LORAREG_InitValidateAttrFnPtrsAU+0x50>)
    878c:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelId;
    878e:	490e      	ldr	r1, [pc, #56]	; (87c8 <LORAREG_InitValidateAttrFnPtrsAU+0x54>)
    8790:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT1;
    8792:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    8794:	4a0d      	ldr	r2, [pc, #52]	; (87cc <LORAREG_InitValidateAttrFnPtrsAU+0x58>)
    8796:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMask;
    8798:	4a0d      	ldr	r2, [pc, #52]	; (87d0 <LORAREG_InitValidateAttrFnPtrsAU+0x5c>)
    879a:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntl;
    879c:	4a0d      	ldr	r2, [pc, #52]	; (87d4 <LORAREG_InitValidateAttrFnPtrsAU+0x60>)
    879e:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    87a0:	4a0d      	ldr	r2, [pc, #52]	; (87d8 <LORAREG_InitValidateAttrFnPtrsAU+0x64>)
    87a2:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntl;
    87a4:	490d      	ldr	r1, [pc, #52]	; (87dc <LORAREG_InitValidateAttrFnPtrsAU+0x68>)
    87a6:	22e0      	movs	r2, #224	; 0xe0
    87a8:	5099      	str	r1, [r3, r2]
}
    87aa:	4770      	bx	lr
    87ac:	20000d30 	.word	0x20000d30
    87b0:	000052bd 	.word	0x000052bd
    87b4:	00007b21 	.word	0x00007b21
    87b8:	00005009 	.word	0x00005009
    87bc:	00004fc5 	.word	0x00004fc5
    87c0:	00005261 	.word	0x00005261
    87c4:	000078a1 	.word	0x000078a1
    87c8:	00005059 	.word	0x00005059
    87cc:	000052f1 	.word	0x000052f1
    87d0:	00005189 	.word	0x00005189
    87d4:	0000515d 	.word	0x0000515d
    87d8:	00005171 	.word	0x00005171
    87dc:	00007775 	.word	0x00007775

000087e0 <LORAREG_InitValidateAttrFnPtrsIN>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqIN;
    87e0:	4b0d      	ldr	r3, [pc, #52]	; (8818 <LORAREG_InitValidateAttrFnPtrsIN+0x38>)
    87e2:	4a0e      	ldr	r2, [pc, #56]	; (881c <LORAREG_InitValidateAttrFnPtrsIN+0x3c>)
    87e4:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    87e6:	4a0e      	ldr	r2, [pc, #56]	; (8820 <LORAREG_InitValidateAttrFnPtrsIN+0x40>)
    87e8:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    87ea:	4a0e      	ldr	r2, [pc, #56]	; (8824 <LORAREG_InitValidateAttrFnPtrsIN+0x44>)
    87ec:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    87ee:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    87f0:	490d      	ldr	r1, [pc, #52]	; (8828 <LORAREG_InitValidateAttrFnPtrsIN+0x48>)
    87f2:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    87f4:	490d      	ldr	r1, [pc, #52]	; (882c <LORAREG_InitValidateAttrFnPtrsIN+0x4c>)
    87f6:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    87f8:	490d      	ldr	r1, [pc, #52]	; (8830 <LORAREG_InitValidateAttrFnPtrsIN+0x50>)
    87fa:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    87fc:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    87fe:	4a0d      	ldr	r2, [pc, #52]	; (8834 <LORAREG_InitValidateAttrFnPtrsIN+0x54>)
    8800:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    8802:	4a0d      	ldr	r2, [pc, #52]	; (8838 <LORAREG_InitValidateAttrFnPtrsIN+0x58>)
    8804:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    8806:	4a0d      	ldr	r2, [pc, #52]	; (883c <LORAREG_InitValidateAttrFnPtrsIN+0x5c>)
    8808:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    880a:	4a0d      	ldr	r2, [pc, #52]	; (8840 <LORAREG_InitValidateAttrFnPtrsIN+0x60>)
    880c:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    880e:	490d      	ldr	r1, [pc, #52]	; (8844 <LORAREG_InitValidateAttrFnPtrsIN+0x64>)
    8810:	22e0      	movs	r2, #224	; 0xe0
    8812:	5099      	str	r1, [r3, r2]
}
    8814:	4770      	bx	lr
    8816:	46c0      	nop			; (mov r8, r8)
    8818:	20000d30 	.word	0x20000d30
    881c:	0000622d 	.word	0x0000622d
    8820:	00006209 	.word	0x00006209
    8824:	00005249 	.word	0x00005249
    8828:	00005261 	.word	0x00005261
    882c:	00007509 	.word	0x00007509
    8830:	00005071 	.word	0x00005071
    8834:	000052f1 	.word	0x000052f1
    8838:	0000518d 	.word	0x0000518d
    883c:	000051e1 	.word	0x000051e1
    8840:	00005171 	.word	0x00005171
    8844:	000051f5 	.word	0x000051f5

00008848 <LORAREG_InitValidateAttrFnPtrsJP>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqJP;
    8848:	4b0d      	ldr	r3, [pc, #52]	; (8880 <LORAREG_InitValidateAttrFnPtrsJP+0x38>)
    884a:	4a0e      	ldr	r2, [pc, #56]	; (8884 <LORAREG_InitValidateAttrFnPtrsJP+0x3c>)
    884c:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    884e:	4a0e      	ldr	r2, [pc, #56]	; (8888 <LORAREG_InitValidateAttrFnPtrsJP+0x40>)
    8850:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT2;
    8852:	4a0e      	ldr	r2, [pc, #56]	; (888c <LORAREG_InitValidateAttrFnPtrsJP+0x44>)
    8854:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT2;
    8856:	490e      	ldr	r1, [pc, #56]	; (8890 <LORAREG_InitValidateAttrFnPtrsJP+0x48>)
    8858:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    885a:	490e      	ldr	r1, [pc, #56]	; (8894 <LORAREG_InitValidateAttrFnPtrsJP+0x4c>)
    885c:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    885e:	490e      	ldr	r1, [pc, #56]	; (8898 <LORAREG_InitValidateAttrFnPtrsJP+0x50>)
    8860:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    8862:	490e      	ldr	r1, [pc, #56]	; (889c <LORAREG_InitValidateAttrFnPtrsJP+0x54>)
    8864:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT2;
    8866:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    8868:	4a0d      	ldr	r2, [pc, #52]	; (88a0 <LORAREG_InitValidateAttrFnPtrsJP+0x58>)
    886a:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    886c:	4a0d      	ldr	r2, [pc, #52]	; (88a4 <LORAREG_InitValidateAttrFnPtrsJP+0x5c>)
    886e:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    8870:	4a0d      	ldr	r2, [pc, #52]	; (88a8 <LORAREG_InitValidateAttrFnPtrsJP+0x60>)
    8872:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    8874:	4a0d      	ldr	r2, [pc, #52]	; (88ac <LORAREG_InitValidateAttrFnPtrsJP+0x64>)
    8876:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    8878:	490d      	ldr	r1, [pc, #52]	; (88b0 <LORAREG_InitValidateAttrFnPtrsJP+0x68>)
    887a:	22e0      	movs	r2, #224	; 0xe0
    887c:	5099      	str	r1, [r3, r2]
}
    887e:	4770      	bx	lr
    8880:	20000d30 	.word	0x20000d30
    8884:	0000625d 	.word	0x0000625d
    8888:	00006209 	.word	0x00006209
    888c:	0000502d 	.word	0x0000502d
    8890:	00004fdd 	.word	0x00004fdd
    8894:	00005261 	.word	0x00005261
    8898:	00007509 	.word	0x00007509
    889c:	00005071 	.word	0x00005071
    88a0:	000052f1 	.word	0x000052f1
    88a4:	0000518d 	.word	0x0000518d
    88a8:	000051e1 	.word	0x000051e1
    88ac:	00005171 	.word	0x00005171
    88b0:	000051f5 	.word	0x000051f5

000088b4 <LORAREG_InitValidateAttrFnPtrsKR>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqKR;
    88b4:	4b0d      	ldr	r3, [pc, #52]	; (88ec <LORAREG_InitValidateAttrFnPtrsKR+0x38>)
    88b6:	4a0e      	ldr	r2, [pc, #56]	; (88f0 <LORAREG_InitValidateAttrFnPtrsKR+0x3c>)
    88b8:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    88ba:	4a0e      	ldr	r2, [pc, #56]	; (88f4 <LORAREG_InitValidateAttrFnPtrsKR+0x40>)
    88bc:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    88be:	4a0e      	ldr	r2, [pc, #56]	; (88f8 <LORAREG_InitValidateAttrFnPtrsKR+0x44>)
    88c0:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    88c2:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    88c4:	490d      	ldr	r1, [pc, #52]	; (88fc <LORAREG_InitValidateAttrFnPtrsKR+0x48>)
    88c6:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    88c8:	490d      	ldr	r1, [pc, #52]	; (8900 <LORAREG_InitValidateAttrFnPtrsKR+0x4c>)
    88ca:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    88cc:	490d      	ldr	r1, [pc, #52]	; (8904 <LORAREG_InitValidateAttrFnPtrsKR+0x50>)
    88ce:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    88d0:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    88d2:	4a0d      	ldr	r2, [pc, #52]	; (8908 <LORAREG_InitValidateAttrFnPtrsKR+0x54>)
    88d4:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    88d6:	4a0d      	ldr	r2, [pc, #52]	; (890c <LORAREG_InitValidateAttrFnPtrsKR+0x58>)
    88d8:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    88da:	4a0d      	ldr	r2, [pc, #52]	; (8910 <LORAREG_InitValidateAttrFnPtrsKR+0x5c>)
    88dc:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    88de:	4a0d      	ldr	r2, [pc, #52]	; (8914 <LORAREG_InitValidateAttrFnPtrsKR+0x60>)
    88e0:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    88e2:	490d      	ldr	r1, [pc, #52]	; (8918 <LORAREG_InitValidateAttrFnPtrsKR+0x64>)
    88e4:	22e0      	movs	r2, #224	; 0xe0
    88e6:	5099      	str	r1, [r3, r2]
}
    88e8:	4770      	bx	lr
    88ea:	46c0      	nop			; (mov r8, r8)
    88ec:	20000d30 	.word	0x20000d30
    88f0:	0000628d 	.word	0x0000628d
    88f4:	00006209 	.word	0x00006209
    88f8:	00005249 	.word	0x00005249
    88fc:	00005261 	.word	0x00005261
    8900:	00007509 	.word	0x00007509
    8904:	00005071 	.word	0x00005071
    8908:	000052f1 	.word	0x000052f1
    890c:	0000518d 	.word	0x0000518d
    8910:	000051e1 	.word	0x000051e1
    8914:	00005171 	.word	0x00005171
    8918:	000051f5 	.word	0x000051f5

0000891c <LORAREG_InitSetAttrFnPtrsNA>:
	pSetAttr[DATA_RANGE] = setDataRange;
    891c:	4b0b      	ldr	r3, [pc, #44]	; (894c <LORAREG_InitSetAttrFnPtrsNA+0x30>)
    891e:	4a0c      	ldr	r2, [pc, #48]	; (8950 <LORAREG_InitSetAttrFnPtrsNA+0x34>)
    8920:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatus;
    8922:	4a0c      	ldr	r2, [pc, #48]	; (8954 <LORAREG_InitSetAttrFnPtrsNA+0x38>)
    8924:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[NEW_CHANNELS] = setNewChannelsT1;
    8926:	4a0c      	ldr	r2, [pc, #48]	; (8958 <LORAREG_InitSetAttrFnPtrsNA+0x3c>)
    8928:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[REG_JOIN_SUCCESS] = setJoinSuccess;
    892a:	490c      	ldr	r1, [pc, #48]	; (895c <LORAREG_InitSetAttrFnPtrsNA+0x40>)
    892c:	22e8      	movs	r2, #232	; 0xe8
    892e:	5099      	str	r1, [r3, r2]
	pSetAttr[REG_JOIN_ENABLE_ALL] = setEnableAllChs;
    8930:	490b      	ldr	r1, [pc, #44]	; (8960 <LORAREG_InitSetAttrFnPtrsNA+0x44>)
    8932:	3204      	adds	r2, #4
    8934:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_DUTY_CYCLE_TIMER] = setJoinDutyCycleTimer;
    8936:	490b      	ldr	r1, [pc, #44]	; (8964 <LORAREG_InitSetAttrFnPtrsNA+0x48>)
    8938:	3a6c      	subs	r2, #108	; 0x6c
    893a:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    893c:	490a      	ldr	r1, [pc, #40]	; (8968 <LORAREG_InitSetAttrFnPtrsNA+0x4c>)
    893e:	3204      	adds	r2, #4
    8940:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    8942:	490a      	ldr	r1, [pc, #40]	; (896c <LORAREG_InitSetAttrFnPtrsNA+0x50>)
    8944:	3260      	adds	r2, #96	; 0x60
    8946:	5099      	str	r1, [r3, r2]
}
    8948:	4770      	bx	lr
    894a:	46c0      	nop			; (mov r8, r8)
    894c:	20000c3c 	.word	0x20000c3c
    8950:	00007909 	.word	0x00007909
    8954:	0000787d 	.word	0x0000787d
    8958:	000062d5 	.word	0x000062d5
    895c:	00005729 	.word	0x00005729
    8960:	0000572d 	.word	0x0000572d
    8964:	000068b5 	.word	0x000068b5
    8968:	00006841 	.word	0x00006841
    896c:	00006789 	.word	0x00006789

00008970 <LORAREG_InitSetAttrFnPtrsEU>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    8970:	4b0e      	ldr	r3, [pc, #56]	; (89ac <LORAREG_InitSetAttrFnPtrsEU+0x3c>)
    8972:	4a0f      	ldr	r2, [pc, #60]	; (89b0 <LORAREG_InitSetAttrFnPtrsEU+0x40>)
    8974:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT2;
    8976:	4a0f      	ldr	r2, [pc, #60]	; (89b4 <LORAREG_InitSetAttrFnPtrsEU+0x44>)
    8978:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[DUTY_CYCLE] = setDutyCycle;
    897a:	4a0f      	ldr	r2, [pc, #60]	; (89b8 <LORAREG_InitSetAttrFnPtrsEU+0x48>)
    897c:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = setDutyCycleTimer;
    897e:	4a0f      	ldr	r2, [pc, #60]	; (89bc <LORAREG_InitSetAttrFnPtrsEU+0x4c>)
    8980:	67da      	str	r2, [r3, #124]	; 0x7c
	pSetAttr[FREQUENCY] = setFrequency;
    8982:	4a0f      	ldr	r2, [pc, #60]	; (89c0 <LORAREG_InitSetAttrFnPtrsEU+0x50>)
    8984:	601a      	str	r2, [r3, #0]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    8986:	4a0f      	ldr	r2, [pc, #60]	; (89c4 <LORAREG_InitSetAttrFnPtrsEU+0x54>)
    8988:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    898a:	490f      	ldr	r1, [pc, #60]	; (89c8 <LORAREG_InitSetAttrFnPtrsEU+0x58>)
    898c:	2280      	movs	r2, #128	; 0x80
    898e:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    8990:	490e      	ldr	r1, [pc, #56]	; (89cc <LORAREG_InitSetAttrFnPtrsEU+0x5c>)
    8992:	3204      	adds	r2, #4
    8994:	5099      	str	r1, [r3, r2]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    8996:	490e      	ldr	r1, [pc, #56]	; (89d0 <LORAREG_InitSetAttrFnPtrsEU+0x60>)
    8998:	324c      	adds	r2, #76	; 0x4c
    899a:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    899c:	490d      	ldr	r1, [pc, #52]	; (89d4 <LORAREG_InitSetAttrFnPtrsEU+0x64>)
    899e:	3214      	adds	r2, #20
    89a0:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    89a2:	490d      	ldr	r1, [pc, #52]	; (89d8 <LORAREG_InitSetAttrFnPtrsEU+0x68>)
    89a4:	320c      	adds	r2, #12
    89a6:	5099      	str	r1, [r3, r2]
}
    89a8:	4770      	bx	lr
    89aa:	46c0      	nop			; (mov r8, r8)
    89ac:	20000c3c 	.word	0x20000c3c
    89b0:	00007535 	.word	0x00007535
    89b4:	000054cd 	.word	0x000054cd
    89b8:	000064f5 	.word	0x000064f5
    89bc:	00006b41 	.word	0x00006b41
    89c0:	000063f1 	.word	0x000063f1
    89c4:	00008c31 	.word	0x00008c31
    89c8:	000068b5 	.word	0x000068b5
    89cc:	00006841 	.word	0x00006841
    89d0:	0000636d 	.word	0x0000636d
    89d4:	00006789 	.word	0x00006789
    89d8:	00005731 	.word	0x00005731

000089dc <LORAREG_InitSetAttrFnPtrsAS>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    89dc:	4b0f      	ldr	r3, [pc, #60]	; (8a1c <LORAREG_InitSetAttrFnPtrsAS+0x40>)
    89de:	4a10      	ldr	r2, [pc, #64]	; (8a20 <LORAREG_InitSetAttrFnPtrsAS+0x44>)
    89e0:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    89e2:	4a10      	ldr	r2, [pc, #64]	; (8a24 <LORAREG_InitSetAttrFnPtrsAS+0x48>)
    89e4:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[FREQUENCY] = setFrequency;
    89e6:	4a10      	ldr	r2, [pc, #64]	; (8a28 <LORAREG_InitSetAttrFnPtrsAS+0x4c>)
    89e8:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    89ea:	4910      	ldr	r1, [pc, #64]	; (8a2c <LORAREG_InitSetAttrFnPtrsAS+0x50>)
    89ec:	22d0      	movs	r2, #208	; 0xd0
    89ee:	5099      	str	r1, [r3, r2]
    pSetAttr[NEW_CHANNELS] = setNewChannel;
    89f0:	4a0f      	ldr	r2, [pc, #60]	; (8a30 <LORAREG_InitSetAttrFnPtrsAS+0x54>)
    89f2:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER] = setJoinDutyCycleTimer;
    89f4:	490f      	ldr	r1, [pc, #60]	; (8a34 <LORAREG_InitSetAttrFnPtrsAS+0x58>)
    89f6:	2280      	movs	r2, #128	; 0x80
    89f8:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    89fa:	490f      	ldr	r1, [pc, #60]	; (8a38 <LORAREG_InitSetAttrFnPtrsAS+0x5c>)
    89fc:	3204      	adds	r2, #4
    89fe:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    8a00:	490e      	ldr	r1, [pc, #56]	; (8a3c <LORAREG_InitSetAttrFnPtrsAS+0x60>)
    8a02:	3250      	adds	r2, #80	; 0x50
    8a04:	5099      	str	r1, [r3, r2]
	pSetAttr[DUTY_CYCLE] = setDutyCycle;
    8a06:	4a0e      	ldr	r2, [pc, #56]	; (8a40 <LORAREG_InitSetAttrFnPtrsAS+0x64>)
    8a08:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = setDutyCycleTimer;
    8a0a:	4a0e      	ldr	r2, [pc, #56]	; (8a44 <LORAREG_InitSetAttrFnPtrsAS+0x68>)
    8a0c:	67da      	str	r2, [r3, #124]	; 0x7c
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    8a0e:	490e      	ldr	r1, [pc, #56]	; (8a48 <LORAREG_InitSetAttrFnPtrsAS+0x6c>)
    8a10:	22e4      	movs	r2, #228	; 0xe4
    8a12:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    8a14:	490d      	ldr	r1, [pc, #52]	; (8a4c <LORAREG_InitSetAttrFnPtrsAS+0x70>)
    8a16:	320c      	adds	r2, #12
    8a18:	5099      	str	r1, [r3, r2]
}
    8a1a:	4770      	bx	lr
    8a1c:	20000c3c 	.word	0x20000c3c
    8a20:	00007535 	.word	0x00007535
    8a24:	000055cd 	.word	0x000055cd
    8a28:	000063f1 	.word	0x000063f1
    8a2c:	0000636d 	.word	0x0000636d
    8a30:	00008c31 	.word	0x00008c31
    8a34:	000068b5 	.word	0x000068b5
    8a38:	00006841 	.word	0x00006841
    8a3c:	000056f5 	.word	0x000056f5
    8a40:	000064f5 	.word	0x000064f5
    8a44:	00006b41 	.word	0x00006b41
    8a48:	00006789 	.word	0x00006789
    8a4c:	00005731 	.word	0x00005731

00008a50 <LORAREG_InitSetAttrFnPtrsAU>:
	pSetAttr[DATA_RANGE] = setDataRange;
    8a50:	4b0b      	ldr	r3, [pc, #44]	; (8a80 <LORAREG_InitSetAttrFnPtrsAU+0x30>)
    8a52:	4a0c      	ldr	r2, [pc, #48]	; (8a84 <LORAREG_InitSetAttrFnPtrsAU+0x34>)
    8a54:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatus;
    8a56:	4a0c      	ldr	r2, [pc, #48]	; (8a88 <LORAREG_InitSetAttrFnPtrsAU+0x38>)
    8a58:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[NEW_CHANNELS] = setNewChannelsT1;
    8a5a:	4a0c      	ldr	r2, [pc, #48]	; (8a8c <LORAREG_InitSetAttrFnPtrsAU+0x3c>)
    8a5c:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[REG_JOIN_SUCCESS] = setJoinSuccess;
    8a5e:	490c      	ldr	r1, [pc, #48]	; (8a90 <LORAREG_InitSetAttrFnPtrsAU+0x40>)
    8a60:	22e8      	movs	r2, #232	; 0xe8
    8a62:	5099      	str	r1, [r3, r2]
	pSetAttr[REG_JOIN_ENABLE_ALL] = setEnableAllChs;
    8a64:	490b      	ldr	r1, [pc, #44]	; (8a94 <LORAREG_InitSetAttrFnPtrsAU+0x44>)
    8a66:	3204      	adds	r2, #4
    8a68:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    8a6a:	490b      	ldr	r1, [pc, #44]	; (8a98 <LORAREG_InitSetAttrFnPtrsAU+0x48>)
    8a6c:	3a6c      	subs	r2, #108	; 0x6c
    8a6e:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    8a70:	490a      	ldr	r1, [pc, #40]	; (8a9c <LORAREG_InitSetAttrFnPtrsAU+0x4c>)
    8a72:	3204      	adds	r2, #4
    8a74:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    8a76:	490a      	ldr	r1, [pc, #40]	; (8aa0 <LORAREG_InitSetAttrFnPtrsAU+0x50>)
    8a78:	3260      	adds	r2, #96	; 0x60
    8a7a:	5099      	str	r1, [r3, r2]
}
    8a7c:	4770      	bx	lr
    8a7e:	46c0      	nop			; (mov r8, r8)
    8a80:	20000c3c 	.word	0x20000c3c
    8a84:	00007909 	.word	0x00007909
    8a88:	0000787d 	.word	0x0000787d
    8a8c:	000062d5 	.word	0x000062d5
    8a90:	00005729 	.word	0x00005729
    8a94:	0000572d 	.word	0x0000572d
    8a98:	000068b5 	.word	0x000068b5
    8a9c:	00006841 	.word	0x00006841
    8aa0:	00006789 	.word	0x00006789

00008aa4 <LORAREG_InitSetAttrFnPtrsIN>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    8aa4:	4b0d      	ldr	r3, [pc, #52]	; (8adc <LORAREG_InitSetAttrFnPtrsIN+0x38>)
    8aa6:	4a0e      	ldr	r2, [pc, #56]	; (8ae0 <LORAREG_InitSetAttrFnPtrsIN+0x3c>)
    8aa8:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT2;
    8aaa:	4a0e      	ldr	r2, [pc, #56]	; (8ae4 <LORAREG_InitSetAttrFnPtrsIN+0x40>)
    8aac:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[FREQUENCY] = setFrequency;
    8aae:	4a0e      	ldr	r2, [pc, #56]	; (8ae8 <LORAREG_InitSetAttrFnPtrsIN+0x44>)
    8ab0:	601a      	str	r2, [r3, #0]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    8ab2:	4a0e      	ldr	r2, [pc, #56]	; (8aec <LORAREG_InitSetAttrFnPtrsIN+0x48>)
    8ab4:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    8ab6:	490e      	ldr	r1, [pc, #56]	; (8af0 <LORAREG_InitSetAttrFnPtrsIN+0x4c>)
    8ab8:	2280      	movs	r2, #128	; 0x80
    8aba:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    8abc:	490d      	ldr	r1, [pc, #52]	; (8af4 <LORAREG_InitSetAttrFnPtrsIN+0x50>)
    8abe:	3204      	adds	r2, #4
    8ac0:	5099      	str	r1, [r3, r2]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    8ac2:	490d      	ldr	r1, [pc, #52]	; (8af8 <LORAREG_InitSetAttrFnPtrsIN+0x54>)
    8ac4:	324c      	adds	r2, #76	; 0x4c
    8ac6:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    8ac8:	490c      	ldr	r1, [pc, #48]	; (8afc <LORAREG_InitSetAttrFnPtrsIN+0x58>)
    8aca:	3204      	adds	r2, #4
    8acc:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    8ace:	490c      	ldr	r1, [pc, #48]	; (8b00 <LORAREG_InitSetAttrFnPtrsIN+0x5c>)
    8ad0:	3210      	adds	r2, #16
    8ad2:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    8ad4:	490b      	ldr	r1, [pc, #44]	; (8b04 <LORAREG_InitSetAttrFnPtrsIN+0x60>)
    8ad6:	320c      	adds	r2, #12
    8ad8:	5099      	str	r1, [r3, r2]
}
    8ada:	4770      	bx	lr
    8adc:	20000c3c 	.word	0x20000c3c
    8ae0:	00007535 	.word	0x00007535
    8ae4:	000054cd 	.word	0x000054cd
    8ae8:	000063f1 	.word	0x000063f1
    8aec:	00008c31 	.word	0x00008c31
    8af0:	000068b5 	.word	0x000068b5
    8af4:	00006841 	.word	0x00006841
    8af8:	0000636d 	.word	0x0000636d
    8afc:	000056f5 	.word	0x000056f5
    8b00:	00006789 	.word	0x00006789
    8b04:	00005731 	.word	0x00005731

00008b08 <LORAREG_InitSetAttrFnPtrsJP>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    8b08:	4b11      	ldr	r3, [pc, #68]	; (8b50 <LORAREG_InitSetAttrFnPtrsJP+0x48>)
    8b0a:	4a12      	ldr	r2, [pc, #72]	; (8b54 <LORAREG_InitSetAttrFnPtrsJP+0x4c>)
    8b0c:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    8b0e:	4a12      	ldr	r2, [pc, #72]	; (8b58 <LORAREG_InitSetAttrFnPtrsJP+0x50>)
    8b10:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[LBT_TIMER] = setLBTTimer;
    8b12:	4912      	ldr	r1, [pc, #72]	; (8b5c <LORAREG_InitSetAttrFnPtrsJP+0x54>)
    8b14:	2288      	movs	r2, #136	; 0x88
    8b16:	5099      	str	r1, [r3, r2]
	pSetAttr[FREQUENCY] = setFrequency;
    8b18:	4a11      	ldr	r2, [pc, #68]	; (8b60 <LORAREG_InitSetAttrFnPtrsJP+0x58>)
    8b1a:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    8b1c:	4911      	ldr	r1, [pc, #68]	; (8b64 <LORAREG_InitSetAttrFnPtrsJP+0x5c>)
    8b1e:	22d0      	movs	r2, #208	; 0xd0
    8b20:	5099      	str	r1, [r3, r2]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    8b22:	4a11      	ldr	r2, [pc, #68]	; (8b68 <LORAREG_InitSetAttrFnPtrsJP+0x60>)
    8b24:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    8b26:	4911      	ldr	r1, [pc, #68]	; (8b6c <LORAREG_InitSetAttrFnPtrsJP+0x64>)
    8b28:	2280      	movs	r2, #128	; 0x80
    8b2a:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    8b2c:	4910      	ldr	r1, [pc, #64]	; (8b70 <LORAREG_InitSetAttrFnPtrsJP+0x68>)
    8b2e:	3204      	adds	r2, #4
    8b30:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    8b32:	4910      	ldr	r1, [pc, #64]	; (8b74 <LORAREG_InitSetAttrFnPtrsJP+0x6c>)
    8b34:	3250      	adds	r2, #80	; 0x50
    8b36:	5099      	str	r1, [r3, r2]
	pSetAttr[DUTY_CYCLE] = setDutyCycle;
    8b38:	4a0f      	ldr	r2, [pc, #60]	; (8b78 <LORAREG_InitSetAttrFnPtrsJP+0x70>)
    8b3a:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = setDutyCycleTimer;
    8b3c:	4a0f      	ldr	r2, [pc, #60]	; (8b7c <LORAREG_InitSetAttrFnPtrsJP+0x74>)
    8b3e:	67da      	str	r2, [r3, #124]	; 0x7c
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    8b40:	490f      	ldr	r1, [pc, #60]	; (8b80 <LORAREG_InitSetAttrFnPtrsJP+0x78>)
    8b42:	22e4      	movs	r2, #228	; 0xe4
    8b44:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    8b46:	490f      	ldr	r1, [pc, #60]	; (8b84 <LORAREG_InitSetAttrFnPtrsJP+0x7c>)
    8b48:	320c      	adds	r2, #12
    8b4a:	5099      	str	r1, [r3, r2]
}
    8b4c:	4770      	bx	lr
    8b4e:	46c0      	nop			; (mov r8, r8)
    8b50:	20000c3c 	.word	0x20000c3c
    8b54:	00007535 	.word	0x00007535
    8b58:	000055cd 	.word	0x000055cd
    8b5c:	000070b5 	.word	0x000070b5
    8b60:	000063f1 	.word	0x000063f1
    8b64:	0000636d 	.word	0x0000636d
    8b68:	00008c31 	.word	0x00008c31
    8b6c:	000068b5 	.word	0x000068b5
    8b70:	00006841 	.word	0x00006841
    8b74:	000056f5 	.word	0x000056f5
    8b78:	000064f5 	.word	0x000064f5
    8b7c:	00006b41 	.word	0x00006b41
    8b80:	00006789 	.word	0x00006789
    8b84:	00005731 	.word	0x00005731

00008b88 <LORAREG_InitSetAttrFnPtrsKR>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    8b88:	4b0f      	ldr	r3, [pc, #60]	; (8bc8 <LORAREG_InitSetAttrFnPtrsKR+0x40>)
    8b8a:	4a10      	ldr	r2, [pc, #64]	; (8bcc <LORAREG_InitSetAttrFnPtrsKR+0x44>)
    8b8c:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    8b8e:	4a10      	ldr	r2, [pc, #64]	; (8bd0 <LORAREG_InitSetAttrFnPtrsKR+0x48>)
    8b90:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[LBT_TIMER] = setLBTTimer;
    8b92:	4910      	ldr	r1, [pc, #64]	; (8bd4 <LORAREG_InitSetAttrFnPtrsKR+0x4c>)
    8b94:	2288      	movs	r2, #136	; 0x88
    8b96:	5099      	str	r1, [r3, r2]
	pSetAttr[FREQUENCY] = setFrequency;
    8b98:	4a0f      	ldr	r2, [pc, #60]	; (8bd8 <LORAREG_InitSetAttrFnPtrsKR+0x50>)
    8b9a:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    8b9c:	490f      	ldr	r1, [pc, #60]	; (8bdc <LORAREG_InitSetAttrFnPtrsKR+0x54>)
    8b9e:	22d0      	movs	r2, #208	; 0xd0
    8ba0:	5099      	str	r1, [r3, r2]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    8ba2:	4a0f      	ldr	r2, [pc, #60]	; (8be0 <LORAREG_InitSetAttrFnPtrsKR+0x58>)
    8ba4:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    8ba6:	490f      	ldr	r1, [pc, #60]	; (8be4 <LORAREG_InitSetAttrFnPtrsKR+0x5c>)
    8ba8:	2280      	movs	r2, #128	; 0x80
    8baa:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    8bac:	490e      	ldr	r1, [pc, #56]	; (8be8 <LORAREG_InitSetAttrFnPtrsKR+0x60>)
    8bae:	3204      	adds	r2, #4
    8bb0:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    8bb2:	490e      	ldr	r1, [pc, #56]	; (8bec <LORAREG_InitSetAttrFnPtrsKR+0x64>)
    8bb4:	3250      	adds	r2, #80	; 0x50
    8bb6:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    8bb8:	490d      	ldr	r1, [pc, #52]	; (8bf0 <LORAREG_InitSetAttrFnPtrsKR+0x68>)
    8bba:	3210      	adds	r2, #16
    8bbc:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    8bbe:	490d      	ldr	r1, [pc, #52]	; (8bf4 <LORAREG_InitSetAttrFnPtrsKR+0x6c>)
    8bc0:	320c      	adds	r2, #12
    8bc2:	5099      	str	r1, [r3, r2]
}
    8bc4:	4770      	bx	lr
    8bc6:	46c0      	nop			; (mov r8, r8)
    8bc8:	20000c3c 	.word	0x20000c3c
    8bcc:	00007535 	.word	0x00007535
    8bd0:	000055cd 	.word	0x000055cd
    8bd4:	000070b5 	.word	0x000070b5
    8bd8:	000063f1 	.word	0x000063f1
    8bdc:	0000636d 	.word	0x0000636d
    8be0:	00008c31 	.word	0x00008c31
    8be4:	000068b5 	.word	0x000068b5
    8be8:	00006841 	.word	0x00006841
    8bec:	000056f5 	.word	0x000056f5
    8bf0:	00006789 	.word	0x00006789
    8bf4:	00005731 	.word	0x00005731

00008bf8 <LORAREG_GetAttr>:
{
    8bf8:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    8bfa:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    8bfc:	283c      	cmp	r0, #60	; 0x3c
    8bfe:	d901      	bls.n	8c04 <LORAREG_GetAttr+0xc>
}
    8c00:	0018      	movs	r0, r3
    8c02:	bd10      	pop	{r4, pc}
	    result = pGetAttr[attrType](attrType, attrInput,attrOutput);	
    8c04:	0084      	lsls	r4, r0, #2
    8c06:	4b02      	ldr	r3, [pc, #8]	; (8c10 <LORAREG_GetAttr+0x18>)
    8c08:	58e3      	ldr	r3, [r4, r3]
    8c0a:	4798      	blx	r3
    8c0c:	0003      	movs	r3, r0
    8c0e:	e7f7      	b.n	8c00 <LORAREG_GetAttr+0x8>
    8c10:	20000b48 	.word	0x20000b48

00008c14 <LORAREG_ValidateAttr>:
{
    8c14:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    8c16:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    8c18:	283c      	cmp	r0, #60	; 0x3c
    8c1a:	d901      	bls.n	8c20 <LORAREG_ValidateAttr+0xc>
}
    8c1c:	0018      	movs	r0, r3
    8c1e:	bd10      	pop	{r4, pc}
	    result = pValidateAttr[attrType](attrType, attrInput);		
    8c20:	0082      	lsls	r2, r0, #2
    8c22:	4b02      	ldr	r3, [pc, #8]	; (8c2c <LORAREG_ValidateAttr+0x18>)
    8c24:	58d3      	ldr	r3, [r2, r3]
    8c26:	4798      	blx	r3
    8c28:	0003      	movs	r3, r0
    8c2a:	e7f7      	b.n	8c1c <LORAREG_ValidateAttr+0x8>
    8c2c:	20000d30 	.word	0x20000d30

00008c30 <setNewChannel>:
{
    8c30:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c32:	46d6      	mov	lr, sl
    8c34:	464f      	mov	r7, r9
    8c36:	b580      	push	{r7, lr}
    8c38:	b085      	sub	sp, #20
	if(((ISM_ASBAND) & (1 << RegParams.band)) != 0 || ((ISM_JPN923) == RegParams.band))
    8c3a:	232e      	movs	r3, #46	; 0x2e
    8c3c:	4a30      	ldr	r2, [pc, #192]	; (8d00 <setNewChannel+0xd0>)
    8c3e:	5cd2      	ldrb	r2, [r2, r3]
    8c40:	4b30      	ldr	r3, [pc, #192]	; (8d04 <setNewChannel+0xd4>)
    8c42:	4113      	asrs	r3, r2
    8c44:	07db      	lsls	r3, r3, #31
    8c46:	d407      	bmi.n	8c58 <setNewChannel+0x28>
    8c48:	2a05      	cmp	r2, #5
    8c4a:	d020      	beq.n	8c8e <setNewChannel+0x5e>
	else if( ISM_KR920 == RegParams.band)
    8c4c:	2a04      	cmp	r2, #4
    8c4e:	d020      	beq.n	8c92 <setNewChannel+0x62>
	else if( ISM_IND865 == RegParams.band)
    8c50:	2a0f      	cmp	r2, #15
    8c52:	d020      	beq.n	8c96 <setNewChannel+0x66>
		pUpdateChidStatus = UpdateChannelIdStatusT2;
    8c54:	4e2c      	ldr	r6, [pc, #176]	; (8d08 <setNewChannel+0xd8>)
    8c56:	e000      	b.n	8c5a <setNewChannel+0x2a>
		pUpdateChidStatus = UpdateChannelIdStatusT3;
    8c58:	4e2c      	ldr	r6, [pc, #176]	; (8d0c <setNewChannel+0xdc>)
	memcpy(&newCh, attrInput,sizeof(UpdateNewCh_t));
    8c5a:	ac03      	add	r4, sp, #12
    8c5c:	2204      	movs	r2, #4
    8c5e:	0020      	movs	r0, r4
    8c60:	4b2b      	ldr	r3, [pc, #172]	; (8d10 <setNewChannel+0xe0>)
    8c62:	4798      	blx	r3
	valchMaskCntl.chnlMask = newCh.channelMask;
    8c64:	8823      	ldrh	r3, [r4, #0]
    8c66:	aa02      	add	r2, sp, #8
    8c68:	8053      	strh	r3, [r2, #2]
	valchMaskCntl.chnlMaskCntl = newCh.channelMaskCntl;
    8c6a:	78a4      	ldrb	r4, [r4, #2]
    8c6c:	7014      	strb	r4, [r2, #0]
	if(LORAREG_ValidateAttr(CHMASK_CHCNTL,&valchMaskCntl) != LORAWAN_SUCCESS)
    8c6e:	0011      	movs	r1, r2
    8c70:	2038      	movs	r0, #56	; 0x38
    8c72:	4b28      	ldr	r3, [pc, #160]	; (8d14 <setNewChannel+0xe4>)
    8c74:	4798      	blx	r3
    8c76:	0003      	movs	r3, r0
    8c78:	9001      	str	r0, [sp, #4]
    8c7a:	2808      	cmp	r0, #8
    8c7c:	d00d      	beq.n	8c9a <setNewChannel+0x6a>
		result = LORAWAN_INVALID_PARAMETER;
    8c7e:	230a      	movs	r3, #10
    8c80:	9301      	str	r3, [sp, #4]
}
    8c82:	9801      	ldr	r0, [sp, #4]
    8c84:	b005      	add	sp, #20
    8c86:	bc0c      	pop	{r2, r3}
    8c88:	4691      	mov	r9, r2
    8c8a:	469a      	mov	sl, r3
    8c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pUpdateChidStatus = UpdateChannelIdStatusT3;
    8c8e:	4e1f      	ldr	r6, [pc, #124]	; (8d0c <setNewChannel+0xdc>)
    8c90:	e7e3      	b.n	8c5a <setNewChannel+0x2a>
		pUpdateChidStatus = UpdateChannelIdStatusT4;
    8c92:	4e21      	ldr	r6, [pc, #132]	; (8d18 <setNewChannel+0xe8>)
    8c94:	e7e1      	b.n	8c5a <setNewChannel+0x2a>
		pUpdateChidStatus = UpdateChannelIdStatus;
    8c96:	4e21      	ldr	r6, [pc, #132]	; (8d1c <setNewChannel+0xec>)
    8c98:	e7df      	b.n	8c5a <setNewChannel+0x2a>
		if(newCh.channelMaskCntl == 6)
    8c9a:	2c06      	cmp	r4, #6
    8c9c:	d00b      	beq.n	8cb6 <setNewChannel+0x86>
		else if(newCh.channelMaskCntl == 0)
    8c9e:	2c00      	cmp	r4, #0
    8ca0:	d1ef      	bne.n	8c82 <setNewChannel+0x52>
			for(i = 0; i < RegParams.maxChannels; i++)
    8ca2:	232a      	movs	r3, #42	; 0x2a
    8ca4:	4a16      	ldr	r2, [pc, #88]	; (8d00 <setNewChannel+0xd0>)
    8ca6:	56d3      	ldrsb	r3, [r2, r3]
    8ca8:	2b00      	cmp	r3, #0
    8caa:	ddea      	ble.n	8c82 <setNewChannel+0x52>
				if((newCh.channelMask & BIT0) == BIT0)
    8cac:	af03      	add	r7, sp, #12
    8cae:	2301      	movs	r3, #1
    8cb0:	4699      	mov	r9, r3
			for(i = 0; i < RegParams.maxChannels; i++)
    8cb2:	4692      	mov	sl, r2
    8cb4:	e01c      	b.n	8cf0 <setNewChannel+0xc0>
			for(i = 0; i < RegParams.maxChannels; i++)
    8cb6:	3322      	adds	r3, #34	; 0x22
    8cb8:	4a11      	ldr	r2, [pc, #68]	; (8d00 <setNewChannel+0xd0>)
    8cba:	56d3      	ldrsb	r3, [r2, r3]
    8cbc:	2b00      	cmp	r3, #0
    8cbe:	dde0      	ble.n	8c82 <setNewChannel+0x52>
    8cc0:	2400      	movs	r4, #0
    8cc2:	0017      	movs	r7, r2
    8cc4:	252a      	movs	r5, #42	; 0x2a
				pUpdateChidStatus(i,ENABLED);
    8cc6:	2101      	movs	r1, #1
    8cc8:	0020      	movs	r0, r4
    8cca:	47b0      	blx	r6
			for(i = 0; i < RegParams.maxChannels; i++)
    8ccc:	3401      	adds	r4, #1
    8cce:	b2e4      	uxtb	r4, r4
    8cd0:	577b      	ldrsb	r3, [r7, r5]
    8cd2:	429c      	cmp	r4, r3
    8cd4:	dbf7      	blt.n	8cc6 <setNewChannel+0x96>
    8cd6:	e7d4      	b.n	8c82 <setNewChannel+0x52>
					pUpdateChidStatus(i,DISABLED);
    8cd8:	2100      	movs	r1, #0
    8cda:	0020      	movs	r0, r4
    8cdc:	47b0      	blx	r6
				newCh.channelMask = newCh.channelMask >> SHIFT1;
    8cde:	086d      	lsrs	r5, r5, #1
    8ce0:	803d      	strh	r5, [r7, #0]
			for(i = 0; i < RegParams.maxChannels; i++)
    8ce2:	3401      	adds	r4, #1
    8ce4:	b2e4      	uxtb	r4, r4
    8ce6:	232a      	movs	r3, #42	; 0x2a
    8ce8:	4652      	mov	r2, sl
    8cea:	56d3      	ldrsb	r3, [r2, r3]
    8cec:	429c      	cmp	r4, r3
    8cee:	dac8      	bge.n	8c82 <setNewChannel+0x52>
				if((newCh.channelMask & BIT0) == BIT0)
    8cf0:	883d      	ldrh	r5, [r7, #0]
    8cf2:	464b      	mov	r3, r9
    8cf4:	422b      	tst	r3, r5
    8cf6:	d0ef      	beq.n	8cd8 <setNewChannel+0xa8>
					pUpdateChidStatus(i, ENABLED);
    8cf8:	4649      	mov	r1, r9
    8cfa:	0020      	movs	r0, r4
    8cfc:	47b0      	blx	r6
    8cfe:	e7ee      	b.n	8cde <setNewChannel+0xae>
    8d00:	20000fc0 	.word	0x20000fc0
    8d04:	00007fc0 	.word	0x00007fc0
    8d08:	000053d9 	.word	0x000053d9
    8d0c:	00005521 	.word	0x00005521
    8d10:	00014ecd 	.word	0x00014ecd
    8d14:	00008c15 	.word	0x00008c15
    8d18:	00005561 	.word	0x00005561
    8d1c:	00005395 	.word	0x00005395

00008d20 <LORAREG_SetAttr>:
{
    8d20:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    8d22:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    8d24:	283c      	cmp	r0, #60	; 0x3c
    8d26:	d901      	bls.n	8d2c <LORAREG_SetAttr+0xc>
}
    8d28:	0018      	movs	r0, r3
    8d2a:	bd10      	pop	{r4, pc}
	    result = pSetAttr[attrType](attrType, attrInput);		
    8d2c:	0082      	lsls	r2, r0, #2
    8d2e:	4b02      	ldr	r3, [pc, #8]	; (8d38 <LORAREG_SetAttr+0x18>)
    8d30:	58d3      	ldr	r3, [r2, r3]
    8d32:	4798      	blx	r3
    8d34:	0003      	movs	r3, r0
    8d36:	e7f7      	b.n	8d28 <LORAREG_SetAttr+0x8>
    8d38:	20000c3c 	.word	0x20000c3c

00008d3c <CreateAllRegSoftwareTimers>:
{
    8d3c:	b510      	push	{r4, lr}
			status = SwTimerCreate(&regTimerId[i]);
    8d3e:	4809      	ldr	r0, [pc, #36]	; (8d64 <CreateAllRegSoftwareTimers+0x28>)
    8d40:	4b09      	ldr	r3, [pc, #36]	; (8d68 <CreateAllRegSoftwareTimers+0x2c>)
    8d42:	4798      	blx	r3
		if(LORAWAN_SUCCESS == status)
    8d44:	2808      	cmp	r0, #8
    8d46:	d10c      	bne.n	8d62 <CreateAllRegSoftwareTimers+0x26>
			status = SwTimerCreate(&regTimerId[i]);
    8d48:	4808      	ldr	r0, [pc, #32]	; (8d6c <CreateAllRegSoftwareTimers+0x30>)
    8d4a:	4b07      	ldr	r3, [pc, #28]	; (8d68 <CreateAllRegSoftwareTimers+0x2c>)
    8d4c:	4798      	blx	r3
		if(LORAWAN_SUCCESS == status)
    8d4e:	2808      	cmp	r0, #8
    8d50:	d107      	bne.n	8d62 <CreateAllRegSoftwareTimers+0x26>
			status = SwTimerCreate(&regTimerId[i]);
    8d52:	4807      	ldr	r0, [pc, #28]	; (8d70 <CreateAllRegSoftwareTimers+0x34>)
    8d54:	4b04      	ldr	r3, [pc, #16]	; (8d68 <CreateAllRegSoftwareTimers+0x2c>)
    8d56:	4798      	blx	r3
		if(LORAWAN_SUCCESS == status)
    8d58:	2808      	cmp	r0, #8
    8d5a:	d102      	bne.n	8d62 <CreateAllRegSoftwareTimers+0x26>
			status = SwTimerCreate(&regTimerId[i]);
    8d5c:	4805      	ldr	r0, [pc, #20]	; (8d74 <CreateAllRegSoftwareTimers+0x38>)
    8d5e:	4b02      	ldr	r3, [pc, #8]	; (8d68 <CreateAllRegSoftwareTimers+0x2c>)
    8d60:	4798      	blx	r3
}
    8d62:	bd10      	pop	{r4, pc}
    8d64:	20000fbc 	.word	0x20000fbc
    8d68:	000095d5 	.word	0x000095d5
    8d6c:	20000fbd 	.word	0x20000fbd
    8d70:	20000fbe 	.word	0x20000fbe
    8d74:	20000fbf 	.word	0x20000fbf

00008d78 <StopAllRegSoftwareTimers>:
{
    8d78:	b570      	push	{r4, r5, r6, lr}
    8d7a:	2400      	movs	r4, #0
		SwTimerStop(regTimerId[i]);
    8d7c:	4e03      	ldr	r6, [pc, #12]	; (8d8c <StopAllRegSoftwareTimers+0x14>)
    8d7e:	4d04      	ldr	r5, [pc, #16]	; (8d90 <StopAllRegSoftwareTimers+0x18>)
    8d80:	5d30      	ldrb	r0, [r6, r4]
    8d82:	47a8      	blx	r5
    8d84:	3401      	adds	r4, #1
	for (uint8_t i=0; i< REG_PARAMS_TIMERS_COUNT; i++)
    8d86:	2c04      	cmp	r4, #4
    8d88:	d1fa      	bne.n	8d80 <StopAllRegSoftwareTimers+0x8>
}
    8d8a:	bd70      	pop	{r4, r5, r6, pc}
    8d8c:	20000fbc 	.word	0x20000fbc
    8d90:	00009915 	.word	0x00009915

00008d94 <LORAREG_Init>:
{	
    8d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8d96:	0007      	movs	r7, r0
	if(!initialized)
    8d98:	4b24      	ldr	r3, [pc, #144]	; (8e2c <LORAREG_Init+0x98>)
    8d9a:	781b      	ldrb	r3, [r3, #0]
    8d9c:	2b00      	cmp	r3, #0
    8d9e:	d109      	bne.n	8db4 <LORAREG_Init+0x20>
		if (LORAWAN_SUCCESS == CreateAllRegSoftwareTimers())
    8da0:	4b23      	ldr	r3, [pc, #140]	; (8e30 <LORAREG_Init+0x9c>)
    8da2:	4798      	blx	r3
    8da4:	2808      	cmp	r0, #8
    8da6:	d001      	beq.n	8dac <LORAREG_Init+0x18>
			result = LORAWAN_RESOURCE_UNAVAILABLE;
    8da8:	2014      	movs	r0, #20
    8daa:	e006      	b.n	8dba <LORAREG_Init+0x26>
			initialized = true;
    8dac:	2201      	movs	r2, #1
    8dae:	4b1f      	ldr	r3, [pc, #124]	; (8e2c <LORAREG_Init+0x98>)
    8db0:	701a      	strb	r2, [r3, #0]
    8db2:	e002      	b.n	8dba <LORAREG_Init+0x26>
		StopAllRegSoftwareTimers();	
    8db4:	4b1f      	ldr	r3, [pc, #124]	; (8e34 <LORAREG_Init+0xa0>)
    8db6:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    8db8:	2008      	movs	r0, #8
    8dba:	2300      	movs	r3, #0
		pGetAttr[i] = InValidGetAttr;
    8dbc:	4e1e      	ldr	r6, [pc, #120]	; (8e38 <LORAREG_Init+0xa4>)
    8dbe:	4d1f      	ldr	r5, [pc, #124]	; (8e3c <LORAREG_Init+0xa8>)
		pValidateAttr[i] = InValidAttr;
    8dc0:	4c1f      	ldr	r4, [pc, #124]	; (8e40 <LORAREG_Init+0xac>)
    8dc2:	4a20      	ldr	r2, [pc, #128]	; (8e44 <LORAREG_Init+0xb0>)
		pSetAttr[i] = InValidAttr;
    8dc4:	4920      	ldr	r1, [pc, #128]	; (8e48 <LORAREG_Init+0xb4>)
		pGetAttr[i] = InValidGetAttr;
    8dc6:	519d      	str	r5, [r3, r6]
		pValidateAttr[i] = InValidAttr;
    8dc8:	511a      	str	r2, [r3, r4]
		pSetAttr[i] = InValidAttr;
    8dca:	505a      	str	r2, [r3, r1]
    8dcc:	3304      	adds	r3, #4
	for(int i = 0; i < REG_NUM_ATTRIBUTES; i++)
    8dce:	2bf4      	cmp	r3, #244	; 0xf4
    8dd0:	d1f9      	bne.n	8dc6 <LORAREG_Init+0x32>
	if(ismBand == ISM_NA915)
    8dd2:	2f02      	cmp	r7, #2
    8dd4:	d00d      	beq.n	8df2 <LORAREG_Init+0x5e>
	else if(ismBand == ISM_EU868 || ismBand == ISM_EU433)
    8dd6:	2f01      	cmp	r7, #1
    8dd8:	d90f      	bls.n	8dfa <LORAREG_Init+0x66>
	else if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    8dda:	1fbb      	subs	r3, r7, #6
    8ddc:	2b08      	cmp	r3, #8
    8dde:	d910      	bls.n	8e02 <LORAREG_Init+0x6e>
	else if(ismBand == ISM_AU915)
    8de0:	2f03      	cmp	r7, #3
    8de2:	d012      	beq.n	8e0a <LORAREG_Init+0x76>
	else if(ismBand == ISM_IND865)
    8de4:	2f0f      	cmp	r7, #15
    8de6:	d014      	beq.n	8e12 <LORAREG_Init+0x7e>
	else if(ismBand == ISM_JPN923)
    8de8:	2f05      	cmp	r7, #5
    8dea:	d016      	beq.n	8e1a <LORAREG_Init+0x86>
	else if(ismBand == ISM_KR920)
    8dec:	2f04      	cmp	r7, #4
    8dee:	d018      	beq.n	8e22 <LORAREG_Init+0x8e>
}
    8df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    result = LORAReg_InitNA(ismBand);
    8df2:	2002      	movs	r0, #2
    8df4:	4b15      	ldr	r3, [pc, #84]	; (8e4c <LORAREG_Init+0xb8>)
    8df6:	4798      	blx	r3
    8df8:	e7fa      	b.n	8df0 <LORAREG_Init+0x5c>
	    result = LORAReg_InitEU(ismBand);		
    8dfa:	0038      	movs	r0, r7
    8dfc:	4b14      	ldr	r3, [pc, #80]	; (8e50 <LORAREG_Init+0xbc>)
    8dfe:	4798      	blx	r3
    8e00:	e7f6      	b.n	8df0 <LORAREG_Init+0x5c>
		result = LORAReg_InitAS(ismBand);
    8e02:	0038      	movs	r0, r7
    8e04:	4b13      	ldr	r3, [pc, #76]	; (8e54 <LORAREG_Init+0xc0>)
    8e06:	4798      	blx	r3
    8e08:	e7f2      	b.n	8df0 <LORAREG_Init+0x5c>
		result = LORAReg_InitAU(ismBand);
    8e0a:	2003      	movs	r0, #3
    8e0c:	4b12      	ldr	r3, [pc, #72]	; (8e58 <LORAREG_Init+0xc4>)
    8e0e:	4798      	blx	r3
    8e10:	e7ee      	b.n	8df0 <LORAREG_Init+0x5c>
		result = LORAReg_InitIN(ismBand);
    8e12:	200f      	movs	r0, #15
    8e14:	4b11      	ldr	r3, [pc, #68]	; (8e5c <LORAREG_Init+0xc8>)
    8e16:	4798      	blx	r3
    8e18:	e7ea      	b.n	8df0 <LORAREG_Init+0x5c>
		result = LORAReg_InitJP(ismBand);
    8e1a:	2005      	movs	r0, #5
    8e1c:	4b10      	ldr	r3, [pc, #64]	; (8e60 <LORAREG_Init+0xcc>)
    8e1e:	4798      	blx	r3
    8e20:	e7e6      	b.n	8df0 <LORAREG_Init+0x5c>
		result = LORAReg_InitKR(ismBand);
    8e22:	2004      	movs	r0, #4
    8e24:	4b0f      	ldr	r3, [pc, #60]	; (8e64 <LORAREG_Init+0xd0>)
    8e26:	4798      	blx	r3
    8e28:	e7e2      	b.n	8df0 <LORAREG_Init+0x5c>
    8e2a:	46c0      	nop			; (mov r8, r8)
    8e2c:	20000b45 	.word	0x20000b45
    8e30:	00008d3d 	.word	0x00008d3d
    8e34:	00008d79 	.word	0x00008d79
    8e38:	20000b48 	.word	0x20000b48
    8e3c:	00004d71 	.word	0x00004d71
    8e40:	20000d30 	.word	0x20000d30
    8e44:	00004d75 	.word	0x00004d75
    8e48:	20000c3c 	.word	0x20000c3c
    8e4c:	00004b95 	.word	0x00004b95
    8e50:	000042bd 	.word	0x000042bd
    8e54:	00003edd 	.word	0x00003edd
    8e58:	000040e5 	.word	0x000040e5
    8e5c:	00004521 	.word	0x00004521
    8e60:	000046c5 	.word	0x000046c5
    8e64:	00004909 	.word	0x00004909

00008e68 <LORAREG_SupportedBands>:
	*bands = value;
    8e68:	2301      	movs	r3, #1
    8e6a:	425b      	negs	r3, r3
    8e6c:	8003      	strh	r3, [r0, #0]
}
    8e6e:	2008      	movs	r0, #8
    8e70:	4770      	bx	lr
	...

00008e74 <LORAREG_UnInit>:
{
    8e74:	b510      	push	{r4, lr}
	StopAllRegSoftwareTimers();
    8e76:	4b04      	ldr	r3, [pc, #16]	; (8e88 <LORAREG_UnInit+0x14>)
    8e78:	4798      	blx	r3
	memset(&RegParams,0,sizeof(RegParams_t));
    8e7a:	4a04      	ldr	r2, [pc, #16]	; (8e8c <LORAREG_UnInit+0x18>)
    8e7c:	2100      	movs	r1, #0
    8e7e:	4804      	ldr	r0, [pc, #16]	; (8e90 <LORAREG_UnInit+0x1c>)
    8e80:	4b04      	ldr	r3, [pc, #16]	; (8e94 <LORAREG_UnInit+0x20>)
    8e82:	4798      	blx	r3
}
    8e84:	200a      	movs	r0, #10
    8e86:	bd10      	pop	{r4, pc}
    8e88:	00008d79 	.word	0x00008d79
    8e8c:	0000020b 	.word	0x0000020b
    8e90:	20000fc0 	.word	0x20000fc0
    8e94:	00014f51 	.word	0x00014f51

00008e98 <sal_FillSubKey>:
		}
	}
}

static void sal_FillSubKey( uint8_t *source, uint8_t *key, uint8_t size)
{
    8e98:	b530      	push	{r4, r5, lr}
	uint8_t i = 0;
	uint8_t carry = 0;

	i=size;

	while(i--)
    8e9a:	1e53      	subs	r3, r2, #1
    8e9c:	b2db      	uxtb	r3, r3
    8e9e:	2a00      	cmp	r2, #0
    8ea0:	d00b      	beq.n	8eba <sal_FillSubKey+0x22>
    8ea2:	2400      	movs	r4, #0
	{
		key[i] = (source[i] << 1) | carry;
    8ea4:	18c5      	adds	r5, r0, r3
    8ea6:	782a      	ldrb	r2, [r5, #0]
    8ea8:	0052      	lsls	r2, r2, #1
    8eaa:	4322      	orrs	r2, r4
    8eac:	54ca      	strb	r2, [r1, r3]
		carry = !!(source[i] & 0x80);
    8eae:	782c      	ldrb	r4, [r5, #0]
    8eb0:	09e4      	lsrs	r4, r4, #7
	while(i--)
    8eb2:	3b01      	subs	r3, #1
    8eb4:	b2db      	uxtb	r3, r3
    8eb6:	2bff      	cmp	r3, #255	; 0xff
    8eb8:	d1f4      	bne.n	8ea4 <sal_FillSubKey+0xc>
	}
}
    8eba:	bd30      	pop	{r4, r5, pc}

00008ebc <SAL_Init>:
{
    8ebc:	b510      	push	{r4, lr}
	AESInit();
    8ebe:	4b02      	ldr	r3, [pc, #8]	; (8ec8 <SAL_Init+0xc>)
    8ec0:	4798      	blx	r3
}
    8ec2:	2000      	movs	r0, #0
    8ec4:	bd10      	pop	{r4, pc}
    8ec6:	46c0      	nop			; (mov r8, r8)
    8ec8:	000091a9 	.word	0x000091a9

00008ecc <SAL_AESEncode>:
{
    8ecc:	b510      	push	{r4, lr}
    8ece:	b084      	sub	sp, #16
    8ed0:	0004      	movs	r4, r0
    8ed2:	0011      	movs	r1, r2
	memcpy(useKey, key, sizeof(useKey));
    8ed4:	2210      	movs	r2, #16
    8ed6:	4668      	mov	r0, sp
    8ed8:	4b04      	ldr	r3, [pc, #16]	; (8eec <SAL_AESEncode+0x20>)
    8eda:	4798      	blx	r3
	AESEncode(buffer, useKey);
    8edc:	4669      	mov	r1, sp
    8ede:	0020      	movs	r0, r4
    8ee0:	4b03      	ldr	r3, [pc, #12]	; (8ef0 <SAL_AESEncode+0x24>)
    8ee2:	4798      	blx	r3
}
    8ee4:	2000      	movs	r0, #0
    8ee6:	b004      	add	sp, #16
    8ee8:	bd10      	pop	{r4, pc}
    8eea:	46c0      	nop			; (mov r8, r8)
    8eec:	00014ecd 	.word	0x00014ecd
    8ef0:	000090cd 	.word	0x000090cd

00008ef4 <SAL_DeriveSessionKey>:
{
    8ef4:	b510      	push	{r4, lr}
	sal_status = SAL_AESEncode(block, src_key, key);
    8ef6:	4b01      	ldr	r3, [pc, #4]	; (8efc <SAL_DeriveSessionKey+0x8>)
    8ef8:	4798      	blx	r3
}
    8efa:	bd10      	pop	{r4, pc}
    8efc:	00008ecd 	.word	0x00008ecd

00008f00 <SAL_Read>:
}
    8f00:	2000      	movs	r0, #0
    8f02:	4770      	bx	lr

00008f04 <SAL_AESCmac>:
{
    8f04:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f06:	46d6      	mov	lr, sl
    8f08:	464f      	mov	r7, r9
    8f0a:	4646      	mov	r6, r8
    8f0c:	b5c0      	push	{r6, r7, lr}
    8f0e:	b0a4      	sub	sp, #144	; 0x90
    8f10:	9001      	str	r0, [sp, #4]
    8f12:	000f      	movs	r7, r1
    8f14:	9102      	str	r1, [sp, #8]
    8f16:	9203      	str	r2, [sp, #12]
    8f18:	469a      	mov	sl, r3
    8f1a:	ab2c      	add	r3, sp, #176	; 0xb0
    8f1c:	781c      	ldrb	r4, [r3, #0]
	uint8_t const_Rb[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    8f1e:	ae08      	add	r6, sp, #32
    8f20:	2210      	movs	r2, #16
    8f22:	2100      	movs	r1, #0
    8f24:	0030      	movs	r0, r6
    8f26:	4d65      	ldr	r5, [pc, #404]	; (90bc <SAL_AESCmac+0x1b8>)
    8f28:	47a8      	blx	r5
    8f2a:	2387      	movs	r3, #135	; 0x87
    8f2c:	73f3      	strb	r3, [r6, #15]
	memset(l, 0, sizeof(l));
    8f2e:	2210      	movs	r2, #16
    8f30:	2100      	movs	r1, #0
    8f32:	a804      	add	r0, sp, #16
    8f34:	47a8      	blx	r5
	SAL_AESEncode(l, key_type, key);
    8f36:	9a01      	ldr	r2, [sp, #4]
    8f38:	0039      	movs	r1, r7
    8f3a:	a804      	add	r0, sp, #16
    8f3c:	4b60      	ldr	r3, [pc, #384]	; (90c0 <SAL_AESCmac+0x1bc>)
    8f3e:	4798      	blx	r3
	if ( (l[0] & 0x80) == 0x00 )  // MSB( bufferLocal[0] ) is '0'
    8f40:	ab04      	add	r3, sp, #16
    8f42:	781b      	ldrb	r3, [r3, #0]
    8f44:	2b7f      	cmp	r3, #127	; 0x7f
    8f46:	d82e      	bhi.n	8fa6 <SAL_AESCmac+0xa2>
		sal_FillSubKey( l, k1, (sizeof(l) ) );
    8f48:	2210      	movs	r2, #16
    8f4a:	a920      	add	r1, sp, #128	; 0x80
    8f4c:	a804      	add	r0, sp, #16
    8f4e:	4b5d      	ldr	r3, [pc, #372]	; (90c4 <SAL_AESCmac+0x1c0>)
    8f50:	4798      	blx	r3
	if ( (k1[0] & 0x80) == 0x00 )   // MSB( k1[0] ) is '0'
    8f52:	ab20      	add	r3, sp, #128	; 0x80
    8f54:	781b      	ldrb	r3, [r3, #0]
    8f56:	2b7f      	cmp	r3, #127	; 0x7f
    8f58:	d835      	bhi.n	8fc6 <SAL_AESCmac+0xc2>
		sal_FillSubKey( k1, k2, (sizeof(l)) );
    8f5a:	2210      	movs	r2, #16
    8f5c:	a91c      	add	r1, sp, #112	; 0x70
    8f5e:	a820      	add	r0, sp, #128	; 0x80
    8f60:	4b58      	ldr	r3, [pc, #352]	; (90c4 <SAL_AESCmac+0x1c0>)
    8f62:	4798      	blx	r3
	n = (size + 15) >> 4;
    8f64:	0023      	movs	r3, r4
    8f66:	330f      	adds	r3, #15
    8f68:	111d      	asrs	r5, r3, #4
    8f6a:	b2ea      	uxtb	r2, r5
    8f6c:	4690      	mov	r8, r2
	if (n == 0)
    8f6e:	2a00      	cmp	r2, #0
    8f70:	d039      	beq.n	8fe6 <SAL_AESCmac+0xe2>
	if ( flag == 1 )
    8f72:	0722      	lsls	r2, r4, #28
    8f74:	d139      	bne.n	8fea <SAL_AESCmac+0xe6>
		for (i=((n-1) << 4); i<(n << 4); i++)
    8f76:	4642      	mov	r2, r8
    8f78:	3a01      	subs	r2, #1
    8f7a:	0112      	lsls	r2, r2, #4
    8f7c:	b2d6      	uxtb	r6, r2
    8f7e:	27ff      	movs	r7, #255	; 0xff
    8f80:	013f      	lsls	r7, r7, #4
    8f82:	401f      	ands	r7, r3
    8f84:	42be      	cmp	r6, r7
    8f86:	da54      	bge.n	9032 <SAL_AESCmac+0x12e>
    8f88:	0033      	movs	r3, r6
			mLast[j] = input[i] ^ k1[j];
    8f8a:	a910      	add	r1, sp, #64	; 0x40
    8f8c:	aa20      	add	r2, sp, #128	; 0x80
    8f8e:	1b98      	subs	r0, r3, r6
    8f90:	b2c0      	uxtb	r0, r0
    8f92:	4654      	mov	r4, sl
    8f94:	5ce4      	ldrb	r4, [r4, r3]
    8f96:	5c15      	ldrb	r5, [r2, r0]
    8f98:	406c      	eors	r4, r5
    8f9a:	540c      	strb	r4, [r1, r0]
		for (i=((n-1) << 4); i<(n << 4); i++)
    8f9c:	3301      	adds	r3, #1
    8f9e:	b2db      	uxtb	r3, r3
    8fa0:	42bb      	cmp	r3, r7
    8fa2:	dbf4      	blt.n	8f8e <SAL_AESCmac+0x8a>
    8fa4:	e045      	b.n	9032 <SAL_AESCmac+0x12e>
		sal_FillSubKey( l, k1, (sizeof(l) ) );
    8fa6:	2210      	movs	r2, #16
    8fa8:	a920      	add	r1, sp, #128	; 0x80
    8faa:	a804      	add	r0, sp, #16
    8fac:	4b45      	ldr	r3, [pc, #276]	; (90c4 <SAL_AESCmac+0x1c0>)
    8fae:	4798      	blx	r3
    8fb0:	2300      	movs	r3, #0
			k1[i] ^= const_Rb[i];
    8fb2:	aa20      	add	r2, sp, #128	; 0x80
    8fb4:	a908      	add	r1, sp, #32
    8fb6:	5c98      	ldrb	r0, [r3, r2]
    8fb8:	5c5d      	ldrb	r5, [r3, r1]
    8fba:	4068      	eors	r0, r5
    8fbc:	5498      	strb	r0, [r3, r2]
    8fbe:	3301      	adds	r3, #1
		for (i=0; i<sizeof(l); i++)
    8fc0:	2b10      	cmp	r3, #16
    8fc2:	d1f8      	bne.n	8fb6 <SAL_AESCmac+0xb2>
    8fc4:	e7c5      	b.n	8f52 <SAL_AESCmac+0x4e>
		sal_FillSubKey( k1, k2, (sizeof(l) ) );
    8fc6:	2210      	movs	r2, #16
    8fc8:	a91c      	add	r1, sp, #112	; 0x70
    8fca:	a820      	add	r0, sp, #128	; 0x80
    8fcc:	4b3d      	ldr	r3, [pc, #244]	; (90c4 <SAL_AESCmac+0x1c0>)
    8fce:	4798      	blx	r3
    8fd0:	2300      	movs	r3, #0
			k2[i] = k2[i] ^ const_Rb[i];
    8fd2:	aa1c      	add	r2, sp, #112	; 0x70
    8fd4:	a908      	add	r1, sp, #32
    8fd6:	5c98      	ldrb	r0, [r3, r2]
    8fd8:	5c5d      	ldrb	r5, [r3, r1]
    8fda:	4068      	eors	r0, r5
    8fdc:	5498      	strb	r0, [r3, r2]
    8fde:	3301      	adds	r3, #1
		for (i=0; i<sizeof(l); i++)
    8fe0:	2b10      	cmp	r3, #16
    8fe2:	d1f8      	bne.n	8fd6 <SAL_AESCmac+0xd2>
    8fe4:	e7be      	b.n	8f64 <SAL_AESCmac+0x60>
		n = 1;
    8fe6:	2301      	movs	r3, #1
    8fe8:	4698      	mov	r8, r3
		ptr = &input[size - (size%16)];
    8fea:	230f      	movs	r3, #15
    8fec:	0020      	movs	r0, r4
    8fee:	4398      	bics	r0, r3
    8ff0:	2300      	movs	r3, #0
			if ( i < (size%16) )
    8ff2:	220f      	movs	r2, #15
    8ff4:	4014      	ands	r4, r2
					padded[i] = 0x00;
    8ff6:	a90c      	add	r1, sp, #48	; 0x30
    8ff8:	2700      	movs	r7, #0
					padded[i] = 0x80;
    8ffa:	2680      	movs	r6, #128	; 0x80
				padded[i] = ptr[i];
    8ffc:	4450      	add	r0, sl
    8ffe:	e005      	b.n	900c <SAL_AESCmac+0x108>
				if ( i == (size%16) )
    9000:	4294      	cmp	r4, r2
    9002:	d009      	beq.n	9018 <SAL_AESCmac+0x114>
					padded[i] = 0x00;
    9004:	545f      	strb	r7, [r3, r1]
    9006:	3301      	adds	r3, #1
		for (i=0; i<16; i++)
    9008:	2b10      	cmp	r3, #16
    900a:	d007      	beq.n	901c <SAL_AESCmac+0x118>
    900c:	b2da      	uxtb	r2, r3
			if ( i < (size%16) )
    900e:	4294      	cmp	r4, r2
    9010:	d9f6      	bls.n	9000 <SAL_AESCmac+0xfc>
				padded[i] = ptr[i];
    9012:	5cc2      	ldrb	r2, [r0, r3]
    9014:	545a      	strb	r2, [r3, r1]
    9016:	e7f6      	b.n	9006 <SAL_AESCmac+0x102>
					padded[i] = 0x80;
    9018:	545e      	strb	r6, [r3, r1]
    901a:	e7f4      	b.n	9006 <SAL_AESCmac+0x102>
    901c:	2300      	movs	r3, #0
			mLast[i] = padded[i] ^ k2[i];
    901e:	a810      	add	r0, sp, #64	; 0x40
    9020:	a90c      	add	r1, sp, #48	; 0x30
    9022:	aa1c      	add	r2, sp, #112	; 0x70
    9024:	5c5c      	ldrb	r4, [r3, r1]
    9026:	5c9d      	ldrb	r5, [r3, r2]
    9028:	406c      	eors	r4, r5
    902a:	541c      	strb	r4, [r3, r0]
    902c:	3301      	adds	r3, #1
		for (i=0; i<sizeof(mLast); i++)
    902e:	2b10      	cmp	r3, #16
    9030:	d1f8      	bne.n	9024 <SAL_AESCmac+0x120>
	memset(x, 0, sizeof(x));
    9032:	2210      	movs	r2, #16
    9034:	2100      	movs	r1, #0
    9036:	a818      	add	r0, sp, #96	; 0x60
    9038:	4b20      	ldr	r3, [pc, #128]	; (90bc <SAL_AESCmac+0x1b8>)
    903a:	4798      	blx	r3
	for (i=0; i<(n-1); i++)
    903c:	2301      	movs	r3, #1
    903e:	425b      	negs	r3, r3
    9040:	4443      	add	r3, r8
    9042:	4699      	mov	r9, r3
    9044:	2000      	movs	r0, #0
    9046:	2700      	movs	r7, #0
    9048:	2b00      	cmp	r3, #0
    904a:	dd1a      	ble.n	9082 <SAL_AESCmac+0x17e>
			y[j] = x[j] ^ input[(i << 4)+j];
    904c:	ad14      	add	r5, sp, #80	; 0x50
    904e:	ac18      	add	r4, sp, #96	; 0x60
		memcpy(x, y, sizeof(y));
    9050:	4e1d      	ldr	r6, [pc, #116]	; (90c8 <SAL_AESCmac+0x1c4>)
			y[j] = x[j] ^ input[(i << 4)+j];
    9052:	0100      	lsls	r0, r0, #4
    9054:	2300      	movs	r3, #0
    9056:	4450      	add	r0, sl
    9058:	5cc2      	ldrb	r2, [r0, r3]
    905a:	5d19      	ldrb	r1, [r3, r4]
    905c:	404a      	eors	r2, r1
    905e:	555a      	strb	r2, [r3, r5]
    9060:	3301      	adds	r3, #1
		for (j=0; j<16; j++)
    9062:	2b10      	cmp	r3, #16
    9064:	d1f8      	bne.n	9058 <SAL_AESCmac+0x154>
		memcpy(x, y, sizeof(y));
    9066:	2210      	movs	r2, #16
    9068:	0029      	movs	r1, r5
    906a:	0020      	movs	r0, r4
    906c:	47b0      	blx	r6
		SAL_AESEncode(x, key_type, key);
    906e:	9a01      	ldr	r2, [sp, #4]
    9070:	9902      	ldr	r1, [sp, #8]
    9072:	0020      	movs	r0, r4
    9074:	4b12      	ldr	r3, [pc, #72]	; (90c0 <SAL_AESCmac+0x1bc>)
    9076:	4798      	blx	r3
	for (i=0; i<(n-1); i++)
    9078:	3701      	adds	r7, #1
    907a:	b2ff      	uxtb	r7, r7
    907c:	0038      	movs	r0, r7
    907e:	454f      	cmp	r7, r9
    9080:	dbe7      	blt.n	9052 <SAL_AESCmac+0x14e>
    9082:	2300      	movs	r3, #0
		y[i] = x[i] ^ mLast[i];
    9084:	ac14      	add	r4, sp, #80	; 0x50
    9086:	a818      	add	r0, sp, #96	; 0x60
    9088:	a910      	add	r1, sp, #64	; 0x40
    908a:	5c1a      	ldrb	r2, [r3, r0]
    908c:	5c5d      	ldrb	r5, [r3, r1]
    908e:	406a      	eors	r2, r5
    9090:	551a      	strb	r2, [r3, r4]
    9092:	3301      	adds	r3, #1
	for (i=0; i<sizeof(x); i++)
    9094:	2b10      	cmp	r3, #16
    9096:	d1f8      	bne.n	908a <SAL_AESCmac+0x186>
	SAL_AESEncode(y, key_type, key);
    9098:	9a01      	ldr	r2, [sp, #4]
    909a:	9902      	ldr	r1, [sp, #8]
    909c:	a814      	add	r0, sp, #80	; 0x50
    909e:	4b08      	ldr	r3, [pc, #32]	; (90c0 <SAL_AESCmac+0x1bc>)
    90a0:	4798      	blx	r3
	memcpy(output, y, sizeof(y));
    90a2:	2210      	movs	r2, #16
    90a4:	a914      	add	r1, sp, #80	; 0x50
    90a6:	9803      	ldr	r0, [sp, #12]
    90a8:	4b07      	ldr	r3, [pc, #28]	; (90c8 <SAL_AESCmac+0x1c4>)
    90aa:	4798      	blx	r3
}
    90ac:	2000      	movs	r0, #0
    90ae:	b024      	add	sp, #144	; 0x90
    90b0:	bc1c      	pop	{r2, r3, r4}
    90b2:	4690      	mov	r8, r2
    90b4:	4699      	mov	r9, r3
    90b6:	46a2      	mov	sl, r4
    90b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    90ba:	46c0      	nop			; (mov r8, r8)
    90bc:	00014f51 	.word	0x00014f51
    90c0:	00008ecd 	.word	0x00008ecd
    90c4:	00008e99 	.word	0x00008e99
    90c8:	00014ecd 	.word	0x00014ecd

000090cc <AESEncode>:
 * \brief Encrypts the given block of data
 * \param[in,out] block Block of input data to be encrypted
 * \param[in] key Cryptographic key to be used in AES encryption
 */
void AESEncode(unsigned char* block, unsigned char* masterKey)
{
    90cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    90ce:	b083      	sub	sp, #12
    90d0:	0004      	movs	r4, r0
    90d2:	000e      	movs	r6, r1
#ifndef UT	
	
	/* Configure the AES. */
	g_aes_cfg.encrypt_mode = AES_ENCRYPTION;
    90d4:	4a2b      	ldr	r2, [pc, #172]	; (9184 <AESEncode+0xb8>)
    90d6:	2101      	movs	r1, #1
    90d8:	7011      	strb	r1, [r2, #0]
	g_aes_cfg.key_size = AES_KEY_SIZE_128;
    90da:	2300      	movs	r3, #0
    90dc:	7053      	strb	r3, [r2, #1]
	g_aes_cfg.start_mode = AES_AUTO_START;
    90de:	7091      	strb	r1, [r2, #2]
	g_aes_cfg.opmode = AES_ECB_MODE;
    90e0:	70d3      	strb	r3, [r2, #3]
	g_aes_cfg.cfb_size = AES_CFB_SIZE_128;
    90e2:	7113      	strb	r3, [r2, #4]
	g_aes_cfg.lod = false;
    90e4:	7213      	strb	r3, [r2, #8]
	aes_set_config(&aes_instance,AES, &g_aes_cfg);
    90e6:	4928      	ldr	r1, [pc, #160]	; (9188 <AESEncode+0xbc>)
    90e8:	4828      	ldr	r0, [pc, #160]	; (918c <AESEncode+0xc0>)
    90ea:	4b29      	ldr	r3, [pc, #164]	; (9190 <AESEncode+0xc4>)
    90ec:	4798      	blx	r3
    90ee:	2100      	movs	r1, #0
		uint8_t u8[4];
	}long_addr;
	uint8_t index;
	for (index = 0; index < 4; index++)
	{
		long_addr.u8[index] = *data++;
    90f0:	ad01      	add	r5, sp, #4
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(masterKey+(i*(sizeof(uint32_t))));
    90f2:	4f28      	ldr	r7, [pc, #160]	; (9194 <AESEncode+0xc8>)
    90f4:	1870      	adds	r0, r6, r1
    90f6:	2300      	movs	r3, #0
    90f8:	5cc2      	ldrb	r2, [r0, r3]
    90fa:	555a      	strb	r2, [r3, r5]
    90fc:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    90fe:	2b04      	cmp	r3, #4
    9100:	d1fa      	bne.n	90f8 <AESEncode+0x2c>
    9102:	9b01      	ldr	r3, [sp, #4]
    9104:	51cb      	str	r3, [r1, r7]
    9106:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    9108:	2910      	cmp	r1, #16
    910a:	d1f3      	bne.n	90f4 <AESEncode+0x28>
	}
	
	/* Set the cryptographic key. */
	aes_write_key(&aes_instance, io_data);
    910c:	4d1f      	ldr	r5, [pc, #124]	; (918c <AESEncode+0xc0>)
    910e:	4921      	ldr	r1, [pc, #132]	; (9194 <AESEncode+0xc8>)
    9110:	0028      	movs	r0, r5
    9112:	4b21      	ldr	r3, [pc, #132]	; (9198 <AESEncode+0xcc>)
    9114:	4798      	blx	r3
 */
static inline void aes_set_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg |= AES_CTRLB_NEWMSG;
    9116:	682a      	ldr	r2, [r5, #0]
    9118:	7913      	ldrb	r3, [r2, #4]
    911a:	2102      	movs	r1, #2
    911c:	430b      	orrs	r3, r1
    911e:	7113      	strb	r3, [r2, #4]
    9120:	2100      	movs	r1, #0
		long_addr.u8[index] = *data++;
    9122:	ad01      	add	r5, sp, #4
	
	aes_set_new_message(&aes_instance);
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(block+(i*(sizeof(uint32_t))));			
    9124:	4e1b      	ldr	r6, [pc, #108]	; (9194 <AESEncode+0xc8>)
    9126:	1860      	adds	r0, r4, r1
    9128:	2300      	movs	r3, #0
    912a:	5cc2      	ldrb	r2, [r0, r3]
    912c:	555a      	strb	r2, [r3, r5]
    912e:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    9130:	2b04      	cmp	r3, #4
    9132:	d1fa      	bne.n	912a <AESEncode+0x5e>
    9134:	9b01      	ldr	r3, [sp, #4]
    9136:	518b      	str	r3, [r1, r6]
    9138:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    913a:	2910      	cmp	r1, #16
    913c:	d1f3      	bne.n	9126 <AESEncode+0x5a>
	}
		
	/* Write the data to be ciphered to the input data registers. */
	aes_write_input_data(&aes_instance, io_data);
    913e:	4d13      	ldr	r5, [pc, #76]	; (918c <AESEncode+0xc0>)
    9140:	4914      	ldr	r1, [pc, #80]	; (9194 <AESEncode+0xc8>)
    9142:	0028      	movs	r0, r5
    9144:	4b15      	ldr	r3, [pc, #84]	; (919c <AESEncode+0xd0>)
    9146:	4798      	blx	r3
 */
static inline void aes_clear_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg &= ~AES_CTRLB_NEWMSG;
    9148:	682d      	ldr	r5, [r5, #0]
    914a:	792b      	ldrb	r3, [r5, #4]
    914c:	2202      	movs	r2, #2
    914e:	4393      	bics	r3, r2
    9150:	712b      	strb	r3, [r5, #4]
	Assert(module->hw);

	uint32_t int_flags = module->hw->INTFLAG.reg;
	uint32_t status_flags = 0;

	if (int_flags & AES_INTFLAG_ENCCMP) {
    9152:	2101      	movs	r1, #1
		status_flags |= AES_ENCRYPTION_COMPLETE;
	}

	if (int_flags & AES_INTFLAG_GFMCMP) {
    9154:	2002      	movs	r0, #2
    9156:	e001      	b.n	915c <AESEncode+0x90>
	aes_clear_new_message(&aes_instance);
	/* Wait for the end of the encryption process. */
	while (!(aes_get_status(&aes_instance) & AES_ENCRYPTION_COMPLETE)) {
    9158:	4211      	tst	r1, r2
    915a:	d107      	bne.n	916c <AESEncode+0xa0>
	uint32_t int_flags = module->hw->INTFLAG.reg;
    915c:	79eb      	ldrb	r3, [r5, #7]
    915e:	b2db      	uxtb	r3, r3
	if (int_flags & AES_INTFLAG_ENCCMP) {
    9160:	000a      	movs	r2, r1
    9162:	401a      	ands	r2, r3
	if (int_flags & AES_INTFLAG_GFMCMP) {
    9164:	4218      	tst	r0, r3
    9166:	d0f7      	beq.n	9158 <AESEncode+0x8c>
		status_flags |= AES_GF_MULTI_COMPLETE;
    9168:	4302      	orrs	r2, r0
    916a:	e7f5      	b.n	9158 <AESEncode+0x8c>
	}
	aes_read_output_data(&aes_instance,io_data);
    916c:	4d09      	ldr	r5, [pc, #36]	; (9194 <AESEncode+0xc8>)
    916e:	0029      	movs	r1, r5
    9170:	4806      	ldr	r0, [pc, #24]	; (918c <AESEncode+0xc0>)
    9172:	4b0b      	ldr	r3, [pc, #44]	; (91a0 <AESEncode+0xd4>)
    9174:	4798      	blx	r3
	
	memcpy(block,io_data,BLOCKSIZE);
    9176:	2210      	movs	r2, #16
    9178:	0029      	movs	r1, r5
    917a:	0020      	movs	r0, r4
    917c:	4b09      	ldr	r3, [pc, #36]	; (91a4 <AESEncode+0xd8>)
    917e:	4798      	blx	r3
#endif	
}
    9180:	b003      	add	sp, #12
    9182:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9184:	200011cc 	.word	0x200011cc
    9188:	42003400 	.word	0x42003400
    918c:	200011d8 	.word	0x200011d8
    9190:	000007b9 	.word	0x000007b9
    9194:	20000e24 	.word	0x20000e24
    9198:	0000084d 	.word	0x0000084d
    919c:	00000881 	.word	0x00000881
    91a0:	000008d1 	.word	0x000008d1
    91a4:	00014ecd 	.word	0x00014ecd

000091a8 <AESInit>:

/**
 * \brief Initializes the AES Engine.
 */
void AESInit(void)
{
    91a8:	b570      	push	{r4, r5, r6, lr}
#ifndef UT	
	//! [setup_config]
	aes_get_config_defaults(&g_aes_cfg);
    91aa:	4d07      	ldr	r5, [pc, #28]	; (91c8 <AESInit+0x20>)
    91ac:	0028      	movs	r0, r5
    91ae:	4b07      	ldr	r3, [pc, #28]	; (91cc <AESInit+0x24>)
    91b0:	4798      	blx	r3
	//! [setup_config]

	//! [setup_config_defaults]
	aes_init(&aes_instance,AES, &g_aes_cfg);
    91b2:	4c07      	ldr	r4, [pc, #28]	; (91d0 <AESInit+0x28>)
    91b4:	002a      	movs	r2, r5
    91b6:	4907      	ldr	r1, [pc, #28]	; (91d4 <AESInit+0x2c>)
    91b8:	0020      	movs	r0, r4
    91ba:	4b07      	ldr	r3, [pc, #28]	; (91d8 <AESInit+0x30>)
    91bc:	4798      	blx	r3
	//! [setup_config_defaults]
	//! [module_enable]
	aes_enable(&aes_instance);
    91be:	0020      	movs	r0, r4
    91c0:	4b06      	ldr	r3, [pc, #24]	; (91dc <AESInit+0x34>)
    91c2:	4798      	blx	r3
#endif	
}
    91c4:	bd70      	pop	{r4, r5, r6, pc}
    91c6:	46c0      	nop			; (mov r8, r8)
    91c8:	200011cc 	.word	0x200011cc
    91cc:	0000077d 	.word	0x0000077d
    91d0:	200011d8 	.word	0x200011d8
    91d4:	42003400 	.word	0x42003400
    91d8:	0000082d 	.word	0x0000082d
    91dc:	00000797 	.word	0x00000797

000091e0 <PDS_Store>:
			status = PDS_INVLIAD_FILE_IDX;
		}
	}
#endif	
	return status; 
}
    91e0:	2000      	movs	r0, #0
    91e2:	4770      	bx	lr

000091e4 <PDS_RestoreAll>:
			}
		}
	}
#endif	
	return status;
}
    91e4:	2000      	movs	r0, #0
    91e6:	4770      	bx	lr

000091e8 <PDS_StoreAll>:
		}
		pdsPostTask(PDS_STORE_DELETE_TASK_ID);
	}
#endif	
	return PDS_OK;
}
    91e8:	2000      	movs	r0, #0
    91ea:	4770      	bx	lr

000091ec <PDS_RegFile>:

\param[in] argFileId - The file id to register file to PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_RegFile(PdsFileItemIdx_t argFileId, PdsFileMarks_t argFileMarks)
{
    91ec:	b084      	sub	sp, #16
    91ee:	9101      	str	r1, [sp, #4]
    91f0:	9202      	str	r2, [sp, #8]
    91f2:	9303      	str	r3, [sp, #12]
			status = PDS_INVLIAD_FILE_IDX;
		}
	}
#endif	
	return status;
}
    91f4:	2000      	movs	r0, #0
    91f6:	b004      	add	sp, #16
    91f8:	4770      	bx	lr

000091fa <PDS_TaskHandler>:
            }
        }
    }
#endif
    return SYSTEM_TASK_SUCCESS;
}
    91fa:	2000      	movs	r0, #0
    91fc:	4770      	bx	lr
	...

00009200 <set_LED_data>:

int32_t set_LED_data(const uint8_t resrc,const uint8_t * data)
{
    int8_t status = 0;
    int8_t ledPin = -1;
    uint8_t value = *data;
    9200:	780b      	ldrb	r3, [r1, #0]

#if (AMBER_LED == 1)
    if(resrc == LED_AMBER)
    9202:	2802      	cmp	r0, #2
    9204:	d020      	beq.n	9248 <set_LED_data+0x48>
        ledPin = LED_0_PIN;
    }
    else
#endif
#if (GREEN_LED == 1)
    if(resrc == LED_GREEN)
    9206:	2803      	cmp	r0, #3
    9208:	d010      	beq.n	922c <set_LED_data+0x2c>
            LED_Toggle(ledPin);
            break;
        }
        default:
        {
            status = UNSUPPORTED_RESOURCE;
    920a:	2001      	movs	r0, #1
    920c:	4240      	negs	r0, r0
            break;
        }
    }

    return status;
}
    920e:	4770      	bx	lr
            LED_Off(ledPin);
    9210:	2212      	movs	r2, #18
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9212:	2301      	movs	r3, #1
    9214:	4093      	lsls	r3, r2
		port_base->OUTSET.reg = pin_mask;
    9216:	4a15      	ldr	r2, [pc, #84]	; (926c <set_LED_data+0x6c>)
    9218:	6193      	str	r3, [r2, #24]
    int8_t status = 0;
    921a:	2000      	movs	r0, #0
    921c:	e7f7      	b.n	920e <set_LED_data+0xe>
            LED_Off(ledPin);
    921e:	2213      	movs	r2, #19
    9220:	e7f7      	b.n	9212 <set_LED_data+0x12>
            LED_On(ledPin);
    9222:	2212      	movs	r2, #18
    9224:	e013      	b.n	924e <set_LED_data+0x4e>
            status = UNSUPPORTED_RESOURCE;
    9226:	2001      	movs	r0, #1
    9228:	4240      	negs	r0, r0
    922a:	e7f0      	b.n	920e <set_LED_data+0xe>
    switch(value)
    922c:	2b01      	cmp	r3, #1
    922e:	d0f8      	beq.n	9222 <set_LED_data+0x22>
    9230:	2b00      	cmp	r3, #0
    9232:	d0ed      	beq.n	9210 <set_LED_data+0x10>
        ledPin = LED_1_PIN;
    9234:	2112      	movs	r1, #18
    switch(value)
    9236:	2b02      	cmp	r3, #2
    9238:	d1f5      	bne.n	9226 <set_LED_data+0x26>
            LED_Toggle(ledPin);
    923a:	b2c9      	uxtb	r1, r1
    923c:	4b0b      	ldr	r3, [pc, #44]	; (926c <set_LED_data+0x6c>)
 */
static inline void port_pin_toggle_output_level(
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    923e:	2201      	movs	r2, #1
    9240:	408a      	lsls	r2, r1

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    9242:	61da      	str	r2, [r3, #28]
    int8_t status = 0;
    9244:	2000      	movs	r0, #0
    9246:	e7e2      	b.n	920e <set_LED_data+0xe>
            LED_On(ledPin);
    9248:	2213      	movs	r2, #19
    switch(value)
    924a:	2b01      	cmp	r3, #1
    924c:	d105      	bne.n	925a <set_LED_data+0x5a>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    924e:	2301      	movs	r3, #1
    9250:	4093      	lsls	r3, r2
		port_base->OUTCLR.reg = pin_mask;
    9252:	4a06      	ldr	r2, [pc, #24]	; (926c <set_LED_data+0x6c>)
    9254:	6153      	str	r3, [r2, #20]
    int8_t status = 0;
    9256:	2000      	movs	r0, #0
    9258:	e7d9      	b.n	920e <set_LED_data+0xe>
    switch(value)
    925a:	2b00      	cmp	r3, #0
    925c:	d0df      	beq.n	921e <set_LED_data+0x1e>
        ledPin = LED_0_PIN;
    925e:	2113      	movs	r1, #19
    switch(value)
    9260:	2b02      	cmp	r3, #2
    9262:	d0ea      	beq.n	923a <set_LED_data+0x3a>
            status = UNSUPPORTED_RESOURCE;
    9264:	2001      	movs	r0, #1
    9266:	4240      	negs	r0, r0
    return status;
    9268:	e7d1      	b.n	920e <set_LED_data+0xe>
    926a:	46c0      	nop			; (mov r8, r8)
    926c:	40002800 	.word	0x40002800

00009270 <resource_init>:
}
/*********************************************************************//**
 \brief      Function to initialize different resources
*************************************************************************/
void resource_init(void)
{
    9270:	b510      	push	{r4, lr}
    temp_sensor_init();
    9272:	4b01      	ldr	r3, [pc, #4]	; (9278 <resource_init+0x8>)
    9274:	4798      	blx	r3
    //LED_init();
}
    9276:	bd10      	pop	{r4, pc}
    9278:	0000927d 	.word	0x0000927d

0000927c <temp_sensor_init>:
* NEGATIVE INPUT	-> GND
* SAMPLES			-> 4
* SAMPLE_LENGTH		-> 4
*/
void temp_sensor_init(void)
{
    927c:	b5f0      	push	{r4, r5, r6, r7, lr}
    927e:	b08d      	sub	sp, #52	; 0x34
	struct adc_config conf_adc;
	
	adc_get_config_defaults(&conf_adc);
    9280:	ac01      	add	r4, sp, #4
    9282:	0020      	movs	r0, r4
    9284:	4b1b      	ldr	r3, [pc, #108]	; (92f4 <temp_sensor_init+0x78>)
    9286:	4798      	blx	r3
	
	conf_adc.clock_source = GCLK_GENERATOR_2;
    9288:	2602      	movs	r6, #2
    928a:	7026      	strb	r6, [r4, #0]
	conf_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV2;
    928c:	2300      	movs	r3, #0
    928e:	70a3      	strb	r3, [r4, #2]
	conf_adc.reference = ADC_REFCTRL_REFSEL_INTREF;
    9290:	7063      	strb	r3, [r4, #1]
	conf_adc.positive_input = ADC_POSITIVE_INPUT_TEMP;
    9292:	3318      	adds	r3, #24
    9294:	7123      	strb	r3, [r4, #4]
	conf_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
    9296:	23c0      	movs	r3, #192	; 0xc0
    9298:	015b      	lsls	r3, r3, #5
    929a:	80e3      	strh	r3, [r4, #6]
	conf_adc.sample_length = ADC_TEMP_SAMPLE_LENGTH;
    929c:	233f      	movs	r3, #63	; 0x3f
    929e:	7563      	strb	r3, [r4, #21]
	
	adc_init(&adc_instance, ADC, &conf_adc);
    92a0:	4f15      	ldr	r7, [pc, #84]	; (92f8 <temp_sensor_init+0x7c>)
    92a2:	4d16      	ldr	r5, [pc, #88]	; (92fc <temp_sensor_init+0x80>)
    92a4:	0022      	movs	r2, r4
    92a6:	0039      	movs	r1, r7
    92a8:	0028      	movs	r0, r5
    92aa:	4b15      	ldr	r3, [pc, #84]	; (9300 <temp_sensor_init+0x84>)
    92ac:	4798      	blx	r3
	
	ADC->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(2) | ADC_AVGCTRL_SAMPLENUM_4;
    92ae:	2322      	movs	r3, #34	; 0x22
    92b0:	733b      	strb	r3, [r7, #12]
			SUPC->VREF.reg |= SUPC_VREF_TSEN;
    92b2:	4b14      	ldr	r3, [pc, #80]	; (9304 <temp_sensor_init+0x88>)
    92b4:	69da      	ldr	r2, [r3, #28]
    92b6:	4332      	orrs	r2, r6
    92b8:	61da      	str	r2, [r3, #28]
			SUPC->VREF.reg &= ~SUPC_VREF_VREFOE;
    92ba:	69da      	ldr	r2, [r3, #28]
    92bc:	2104      	movs	r1, #4
    92be:	438a      	bics	r2, r1
    92c0:	61da      	str	r2, [r3, #28]
	Adc *const adc_module = module_inst->hw;
    92c2:	682a      	ldr	r2, [r5, #0]
    92c4:	8c13      	ldrh	r3, [r2, #32]
    92c6:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    92c8:	2b00      	cmp	r3, #0
    92ca:	d1fb      	bne.n	92c4 <temp_sensor_init+0x48>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    92cc:	2180      	movs	r1, #128	; 0x80
    92ce:	03c9      	lsls	r1, r1, #15
    92d0:	4b0d      	ldr	r3, [pc, #52]	; (9308 <temp_sensor_init+0x8c>)
    92d2:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    92d4:	2307      	movs	r3, #7
    92d6:	7113      	strb	r3, [r2, #4]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    92d8:	7193      	strb	r3, [r2, #6]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    92da:	7813      	ldrb	r3, [r2, #0]
    92dc:	2102      	movs	r1, #2
    92de:	430b      	orrs	r3, r1
    92e0:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    92e2:	4b06      	ldr	r3, [pc, #24]	; (92fc <temp_sensor_init+0x80>)
    92e4:	681a      	ldr	r2, [r3, #0]
	if (adc_module->SYNCBUSY.reg) {
    92e6:	8c13      	ldrh	r3, [r2, #32]
    92e8:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    92ea:	2b00      	cmp	r3, #0
    92ec:	d1fb      	bne.n	92e6 <temp_sensor_init+0x6a>
	
	system_voltage_reference_disable(SYSTEM_VOLTAGE_REFERENCE_OUTPUT);
	
	adc_enable(&adc_instance);
	
}
    92ee:	b00d      	add	sp, #52	; 0x34
    92f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    92f2:	46c0      	nop			; (mov r8, r8)
    92f4:	0000028d 	.word	0x0000028d
    92f8:	43000c00 	.word	0x43000c00
    92fc:	200011e0 	.word	0x200011e0
    9300:	000002d1 	.word	0x000002d1
    9304:	40001400 	.word	0x40001400
    9308:	e000e100 	.word	0xe000e100

0000930c <hwTimerExpiryCallback>:
    swtimerProcessOverflow();
}

/* ISR to handle CC0 interrupt from TC0 */
static void hwTimerExpiryCallback(void)
{
    930c:	b510      	push	{r4, lr}
    if (0 < runningTimers)
    930e:	4b06      	ldr	r3, [pc, #24]	; (9328 <hwTimerExpiryCallback+0x1c>)
    9310:	781b      	ldrb	r3, [r3, #0]
    9312:	2b00      	cmp	r3, #0
    9314:	d100      	bne.n	9318 <hwTimerExpiryCallback+0xc>
    {
        isTimerTriggered = true;
        SYSTEM_PostTask(TIMER_TASK_ID);
    }
}
    9316:	bd10      	pop	{r4, pc}
        isTimerTriggered = true;
    9318:	2201      	movs	r2, #1
    931a:	4b04      	ldr	r3, [pc, #16]	; (932c <hwTimerExpiryCallback+0x20>)
    931c:	701a      	strb	r2, [r3, #0]
        SYSTEM_PostTask(TIMER_TASK_ID);
    931e:	2001      	movs	r0, #1
    9320:	4b03      	ldr	r3, [pc, #12]	; (9330 <hwTimerExpiryCallback+0x24>)
    9322:	4798      	blx	r3
}
    9324:	e7f7      	b.n	9316 <hwTimerExpiryCallback+0xa>
    9326:	46c0      	nop			; (mov r8, r8)
    9328:	20000e44 	.word	0x20000e44
    932c:	20001392 	.word	0x20001392
    9330:	00009c35 	.word	0x00009c35

00009334 <hwTimerOverflowCallback>:
{
    9334:	b510      	push	{r4, lr}
    9336:	b082      	sub	sp, #8
    uint16_t temp = sysTime;
    9338:	4924      	ldr	r1, [pc, #144]	; (93cc <hwTimerOverflowCallback+0x98>)
    933a:	880a      	ldrh	r2, [r1, #0]
    933c:	b292      	uxth	r2, r2
    if (++sysTime < temp)
    933e:	880b      	ldrh	r3, [r1, #0]
    9340:	3301      	adds	r3, #1
    9342:	b29b      	uxth	r3, r3
    9344:	800b      	strh	r3, [r1, #0]
    9346:	429a      	cmp	r2, r3
    9348:	d903      	bls.n	9352 <hwTimerOverflowCallback+0x1e>
        sysTimeOvf++;
    934a:	4a21      	ldr	r2, [pc, #132]	; (93d0 <hwTimerOverflowCallback+0x9c>)
    934c:	6813      	ldr	r3, [r2, #0]
    934e:	3301      	adds	r3, #1
    9350:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    9352:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    9356:	425a      	negs	r2, r3
    9358:	4153      	adcs	r3, r2
    935a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    935c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    935e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    9362:	2200      	movs	r2, #0
    9364:	4b1b      	ldr	r3, [pc, #108]	; (93d4 <hwTimerOverflowCallback+0xa0>)
    9366:	701a      	strb	r2, [r3, #0]
	return flags;
    9368:	9c01      	ldr	r4, [sp, #4]
{
    uint32_t tmo32;
    uint16_t tmoHigh16, tmoLow16;
    uint8_t flags = cpu_irq_save();

    if (SWTIMER_INVALID != runningTimerQueueHead && !swTimers[runningTimerQueueHead].loaded)
    936a:	4b1b      	ldr	r3, [pc, #108]	; (93d8 <hwTimerOverflowCallback+0xa4>)
    936c:	681b      	ldr	r3, [r3, #0]
    936e:	2bff      	cmp	r3, #255	; 0xff
    9370:	d00d      	beq.n	938e <hwTimerOverflowCallback+0x5a>
    9372:	0119      	lsls	r1, r3, #4
    9374:	4a19      	ldr	r2, [pc, #100]	; (93dc <hwTimerOverflowCallback+0xa8>)
    9376:	1852      	adds	r2, r2, r1
    9378:	7b52      	ldrb	r2, [r2, #13]
    937a:	2a00      	cmp	r2, #0
    937c:	d107      	bne.n	938e <hwTimerOverflowCallback+0x5a>
    {
        tmo32 = swTimers[runningTimerQueueHead].absoluteExpiryTime;
    937e:	4a17      	ldr	r2, [pc, #92]	; (93dc <hwTimerOverflowCallback+0xa8>)
    9380:	5888      	ldr	r0, [r1, r2]
        tmoHigh16 = (uint16_t)(tmo32 >> SWTIMER_SYSTIME_SHIFTMASK);

        if (tmoHigh16 == sysTime)
    9382:	4b12      	ldr	r3, [pc, #72]	; (93cc <hwTimerOverflowCallback+0x98>)
    9384:	881b      	ldrh	r3, [r3, #0]
    9386:	b29b      	uxth	r3, r3
    9388:	0c02      	lsrs	r2, r0, #16
    938a:	429a      	cmp	r2, r3
    938c:	d00a      	beq.n	93a4 <hwTimerOverflowCallback+0x70>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    938e:	23ff      	movs	r3, #255	; 0xff
    9390:	4223      	tst	r3, r4
    9392:	d005      	beq.n	93a0 <hwTimerOverflowCallback+0x6c>
		cpu_irq_enable();
    9394:	2201      	movs	r2, #1
    9396:	4b0f      	ldr	r3, [pc, #60]	; (93d4 <hwTimerOverflowCallback+0xa0>)
    9398:	701a      	strb	r2, [r3, #0]
    939a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    939e:	b662      	cpsie	i
}
    93a0:	b002      	add	sp, #8
    93a2:	bd10      	pop	{r4, pc}
        {
            tmoLow16 = (uint16_t)(tmo32 & SWTIMER_HWTIME_MASK);
    93a4:	b280      	uxth	r0, r0
            if (SWTIMER_MIN_TIMEOUT < tmoLow16)
    93a6:	28ff      	cmp	r0, #255	; 0xff
    93a8:	d909      	bls.n	93be <hwTimerOverflowCallback+0x8a>
            {
                common_tc_delay(tmoLow16);
    93aa:	4b0d      	ldr	r3, [pc, #52]	; (93e0 <hwTimerOverflowCallback+0xac>)
    93ac:	4798      	blx	r3
                swTimers[runningTimerQueueHead].loaded = true;
    93ae:	4b0a      	ldr	r3, [pc, #40]	; (93d8 <hwTimerOverflowCallback+0xa4>)
    93b0:	681a      	ldr	r2, [r3, #0]
    93b2:	0112      	lsls	r2, r2, #4
    93b4:	4b09      	ldr	r3, [pc, #36]	; (93dc <hwTimerOverflowCallback+0xa8>)
    93b6:	189b      	adds	r3, r3, r2
    93b8:	2201      	movs	r2, #1
    93ba:	735a      	strb	r2, [r3, #13]
    93bc:	e7e7      	b.n	938e <hwTimerOverflowCallback+0x5a>
            }
            else
            {
                isTimerTriggered = true;
    93be:	2201      	movs	r2, #1
    93c0:	4b08      	ldr	r3, [pc, #32]	; (93e4 <hwTimerOverflowCallback+0xb0>)
    93c2:	701a      	strb	r2, [r3, #0]
                SYSTEM_PostTask(TIMER_TASK_ID);
    93c4:	2001      	movs	r0, #1
    93c6:	4b08      	ldr	r3, [pc, #32]	; (93e8 <hwTimerOverflowCallback+0xb4>)
    93c8:	4798      	blx	r3
    93ca:	e7e0      	b.n	938e <hwTimerOverflowCallback+0x5a>
    93cc:	20001390 	.word	0x20001390
    93d0:	20001394 	.word	0x20001394
    93d4:	20000000 	.word	0x20000000
    93d8:	20000e40 	.word	0x20000e40
    93dc:	20001200 	.word	0x20001200
    93e0:	0000b525 	.word	0x0000b525
    93e4:	20001392 	.word	0x20001392
    93e8:	00009c35 	.word	0x00009c35

000093ec <loadHwTimer>:
{
    93ec:	b570      	push	{r4, r5, r6, lr}
    93ee:	0004      	movs	r4, r0
    if (SWTIMER_INVALID != timerId)
    93f0:	28ff      	cmp	r0, #255	; 0xff
    93f2:	d030      	beq.n	9456 <loadHwTimer+0x6a>
    time |= ((uint64_t) sysTimeOvf) << 32;
    93f4:	4b19      	ldr	r3, [pc, #100]	; (945c <loadHwTimer+0x70>)
    93f6:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    93f8:	4b19      	ldr	r3, [pc, #100]	; (9460 <loadHwTimer+0x74>)
    93fa:	881d      	ldrh	r5, [r3, #0]
    93fc:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    93fe:	4b19      	ldr	r3, [pc, #100]	; (9464 <loadHwTimer+0x78>)
    9400:	4798      	blx	r3
        uint32_t expiryTime = swTimers[timerId].absoluteExpiryTime;
    9402:	0123      	lsls	r3, r4, #4
    time |= (uint64_t) common_tc_read_count();
    9404:	4328      	orrs	r0, r5
    return ((t2 - t1) < INT32_MAX);
    9406:	4a18      	ldr	r2, [pc, #96]	; (9468 <loadHwTimer+0x7c>)
    9408:	589b      	ldr	r3, [r3, r2]
    940a:	1a18      	subs	r0, r3, r0
        if (swtimerCompareTime(now, expiryTime))
    940c:	4b17      	ldr	r3, [pc, #92]	; (946c <loadHwTimer+0x80>)
    940e:	4298      	cmp	r0, r3
    9410:	d81a      	bhi.n	9448 <loadHwTimer+0x5c>
            if (!swTimers[timerId].loaded)
    9412:	0122      	lsls	r2, r4, #4
    9414:	4b14      	ldr	r3, [pc, #80]	; (9468 <loadHwTimer+0x7c>)
    9416:	189b      	adds	r3, r3, r2
    9418:	7b5b      	ldrb	r3, [r3, #13]
    941a:	2b00      	cmp	r3, #0
    941c:	d11d      	bne.n	945a <loadHwTimer+0x6e>
                if (SWTIMER_MIN_TIMEOUT >= timeDiff)
    941e:	28ff      	cmp	r0, #255	; 0xff
    9420:	d90b      	bls.n	943a <loadHwTimer+0x4e>
                else  if ((uint32_t)TIMER_PERIOD >= timeDiff)
    9422:	4b13      	ldr	r3, [pc, #76]	; (9470 <loadHwTimer+0x84>)
    9424:	4298      	cmp	r0, r3
    9426:	d818      	bhi.n	945a <loadHwTimer+0x6e>
                    common_tc_delay((uint16_t)timeDiff);
    9428:	b280      	uxth	r0, r0
    942a:	4b12      	ldr	r3, [pc, #72]	; (9474 <loadHwTimer+0x88>)
    942c:	4798      	blx	r3
                    swTimers[timerId].loaded = true;
    942e:	0124      	lsls	r4, r4, #4
    9430:	4b0d      	ldr	r3, [pc, #52]	; (9468 <loadHwTimer+0x7c>)
    9432:	191c      	adds	r4, r3, r4
    9434:	2301      	movs	r3, #1
    9436:	7363      	strb	r3, [r4, #13]
    9438:	e00f      	b.n	945a <loadHwTimer+0x6e>
                    isTimerTriggered = true;
    943a:	2201      	movs	r2, #1
    943c:	4b0e      	ldr	r3, [pc, #56]	; (9478 <loadHwTimer+0x8c>)
    943e:	701a      	strb	r2, [r3, #0]
                    SYSTEM_PostTask(TIMER_TASK_ID);
    9440:	2001      	movs	r0, #1
    9442:	4b0e      	ldr	r3, [pc, #56]	; (947c <loadHwTimer+0x90>)
    9444:	4798      	blx	r3
    9446:	e008      	b.n	945a <loadHwTimer+0x6e>
            isTimerTriggered = true;
    9448:	2201      	movs	r2, #1
    944a:	4b0b      	ldr	r3, [pc, #44]	; (9478 <loadHwTimer+0x8c>)
    944c:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    944e:	2001      	movs	r0, #1
    9450:	4b0a      	ldr	r3, [pc, #40]	; (947c <loadHwTimer+0x90>)
    9452:	4798      	blx	r3
    9454:	e001      	b.n	945a <loadHwTimer+0x6e>
        common_tc_compare_stop();
    9456:	4b0a      	ldr	r3, [pc, #40]	; (9480 <loadHwTimer+0x94>)
    9458:	4798      	blx	r3
}
    945a:	bd70      	pop	{r4, r5, r6, pc}
    945c:	20001394 	.word	0x20001394
    9460:	20001390 	.word	0x20001390
    9464:	0000b47d 	.word	0x0000b47d
    9468:	20001200 	.word	0x20001200
    946c:	7ffffffe 	.word	0x7ffffffe
    9470:	0000ffff 	.word	0x0000ffff
    9474:	0000b525 	.word	0x0000b525
    9478:	20001392 	.word	0x20001392
    947c:	00009c35 	.word	0x00009c35
    9480:	0000b4c9 	.word	0x0000b4c9

00009484 <swtimerInternalHandler>:

/**************************************************************************//**
\brief Internal handler for the timer trigger
******************************************************************************/
static void swtimerInternalHandler(void)
{
    9484:	b510      	push	{r4, lr}
    if (isTimerTriggered)
    9486:	4b1d      	ldr	r3, [pc, #116]	; (94fc <swtimerInternalHandler+0x78>)
    9488:	781b      	ldrb	r3, [r3, #0]
    948a:	2b00      	cmp	r3, #0
    948c:	d027      	beq.n	94de <swtimerInternalHandler+0x5a>
    {
        isTimerTriggered = false;
    948e:	2200      	movs	r2, #0
    9490:	4b1a      	ldr	r3, [pc, #104]	; (94fc <swtimerInternalHandler+0x78>)
    9492:	701a      	strb	r2, [r3, #0]

        if (0 < runningTimers)
    9494:	4b1a      	ldr	r3, [pc, #104]	; (9500 <swtimerInternalHandler+0x7c>)
    9496:	781b      	ldrb	r3, [r3, #0]
    9498:	2b00      	cmp	r3, #0
    949a:	d020      	beq.n	94de <swtimerInternalHandler+0x5a>
        { /* Holds the number of running timers */
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    949c:	4b19      	ldr	r3, [pc, #100]	; (9504 <swtimerInternalHandler+0x80>)
    949e:	681b      	ldr	r3, [r3, #0]
    94a0:	2bff      	cmp	r3, #255	; 0xff
    94a2:	d01d      	beq.n	94e0 <swtimerInternalHandler+0x5c>
                expiredTimerQueueHead = runningTimerQueueHead;
                expiredTimerQueueTail = runningTimerQueueHead;
            }
            else
            { /* there were already some timers expired before this one */
                swTimers[expiredTimerQueueTail].nextTimer = runningTimerQueueHead;
    94a4:	4b18      	ldr	r3, [pc, #96]	; (9508 <swtimerInternalHandler+0x84>)
    94a6:	6818      	ldr	r0, [r3, #0]
    94a8:	4918      	ldr	r1, [pc, #96]	; (950c <swtimerInternalHandler+0x88>)
    94aa:	680b      	ldr	r3, [r1, #0]
    94ac:	011a      	lsls	r2, r3, #4
    94ae:	4b18      	ldr	r3, [pc, #96]	; (9510 <swtimerInternalHandler+0x8c>)
    94b0:	189b      	adds	r3, r3, r2
    94b2:	7318      	strb	r0, [r3, #12]
                expiredTimerQueueTail = runningTimerQueueHead;
    94b4:	6008      	str	r0, [r1, #0]
            }

            runningTimerQueueHead = swTimers[runningTimerQueueHead].nextTimer;
    94b6:	4a16      	ldr	r2, [pc, #88]	; (9510 <swtimerInternalHandler+0x8c>)
    94b8:	4913      	ldr	r1, [pc, #76]	; (9508 <swtimerInternalHandler+0x84>)
    94ba:	680b      	ldr	r3, [r1, #0]
    94bc:	011b      	lsls	r3, r3, #4
    94be:	18d3      	adds	r3, r2, r3
    94c0:	7b18      	ldrb	r0, [r3, #12]
    94c2:	6008      	str	r0, [r1, #0]

            swTimers[expiredTimerQueueTail].nextTimer = SWTIMER_INVALID;
    94c4:	4b11      	ldr	r3, [pc, #68]	; (950c <swtimerInternalHandler+0x88>)
    94c6:	681b      	ldr	r3, [r3, #0]
    94c8:	011b      	lsls	r3, r3, #4
    94ca:	18d2      	adds	r2, r2, r3
    94cc:	23ff      	movs	r3, #255	; 0xff
    94ce:	7313      	strb	r3, [r2, #12]

            if ((--runningTimers) > 0)
    94d0:	4a0b      	ldr	r2, [pc, #44]	; (9500 <swtimerInternalHandler+0x7c>)
    94d2:	7813      	ldrb	r3, [r2, #0]
    94d4:	3b01      	subs	r3, #1
    94d6:	b2db      	uxtb	r3, r3
    94d8:	7013      	strb	r3, [r2, #0]
    94da:	2b00      	cmp	r3, #0
    94dc:	d10b      	bne.n	94f6 <swtimerInternalHandler+0x72>
            { /* keep the ball rolling! load the next head timer from the queue */
                loadHwTimer(runningTimerQueueHead);
            }
        }
    }
}
    94de:	bd10      	pop	{r4, pc}
                (expiredTimerQueueTail == SWTIMER_INVALID))
    94e0:	4b0a      	ldr	r3, [pc, #40]	; (950c <swtimerInternalHandler+0x88>)
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    94e2:	681b      	ldr	r3, [r3, #0]
    94e4:	2bff      	cmp	r3, #255	; 0xff
    94e6:	d1dd      	bne.n	94a4 <swtimerInternalHandler+0x20>
                expiredTimerQueueHead = runningTimerQueueHead;
    94e8:	4b07      	ldr	r3, [pc, #28]	; (9508 <swtimerInternalHandler+0x84>)
    94ea:	681b      	ldr	r3, [r3, #0]
    94ec:	4a05      	ldr	r2, [pc, #20]	; (9504 <swtimerInternalHandler+0x80>)
    94ee:	6013      	str	r3, [r2, #0]
                expiredTimerQueueTail = runningTimerQueueHead;
    94f0:	4a06      	ldr	r2, [pc, #24]	; (950c <swtimerInternalHandler+0x88>)
    94f2:	6013      	str	r3, [r2, #0]
    94f4:	e7df      	b.n	94b6 <swtimerInternalHandler+0x32>
                loadHwTimer(runningTimerQueueHead);
    94f6:	4b07      	ldr	r3, [pc, #28]	; (9514 <swtimerInternalHandler+0x90>)
    94f8:	4798      	blx	r3
}
    94fa:	e7f0      	b.n	94de <swtimerInternalHandler+0x5a>
    94fc:	20001392 	.word	0x20001392
    9500:	20000e44 	.word	0x20000e44
    9504:	20000e38 	.word	0x20000e38
    9508:	20000e40 	.word	0x20000e40
    950c:	20000e3c 	.word	0x20000e3c
    9510:	20001200 	.word	0x20001200
    9514:	000093ed 	.word	0x000093ed

00009518 <SwTimerReset>:
    /*
    * Initialize the timer resources like timer arrays queues, timer registers
    */
    uint8_t index;

    runningTimers = 0u;
    9518:	2300      	movs	r3, #0
    951a:	4a0d      	ldr	r2, [pc, #52]	; (9550 <SwTimerReset+0x38>)
    951c:	7013      	strb	r3, [r2, #0]
    isTimerTriggered = false;
    951e:	4a0d      	ldr	r2, [pc, #52]	; (9554 <SwTimerReset+0x3c>)
    9520:	7013      	strb	r3, [r2, #0]

    runningTimerQueueHead = SWTIMER_INVALID;
    9522:	33ff      	adds	r3, #255	; 0xff
    9524:	4a0c      	ldr	r2, [pc, #48]	; (9558 <SwTimerReset+0x40>)
    9526:	6013      	str	r3, [r2, #0]
    expiredTimerQueueHead = SWTIMER_INVALID;
    9528:	4a0c      	ldr	r2, [pc, #48]	; (955c <SwTimerReset+0x44>)
    952a:	6013      	str	r3, [r2, #0]
    expiredTimerQueueTail = SWTIMER_INVALID;
    952c:	4a0c      	ldr	r2, [pc, #48]	; (9560 <SwTimerReset+0x48>)
    952e:	6013      	str	r3, [r2, #0]
    9530:	4b0c      	ldr	r3, [pc, #48]	; (9564 <SwTimerReset+0x4c>)
    9532:	0018      	movs	r0, r3
    9534:	3091      	adds	r0, #145	; 0x91
    9536:	30ff      	adds	r0, #255	; 0xff

    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    {
        swTimers[index].nextTimer = SWTIMER_INVALID;
    9538:	21ff      	movs	r1, #255	; 0xff
        swTimers[index].timerCb = NULL;
    953a:	2200      	movs	r2, #0
        swTimers[index].nextTimer = SWTIMER_INVALID;
    953c:	7219      	strb	r1, [r3, #8]
        swTimers[index].timerCb = NULL;
    953e:	601a      	str	r2, [r3, #0]
    9540:	3310      	adds	r3, #16
    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    9542:	4283      	cmp	r3, r0
    9544:	d1fa      	bne.n	953c <SwTimerReset+0x24>
    }

    allocatedTimerId = 0u;
    9546:	2200      	movs	r2, #0
    9548:	4b07      	ldr	r3, [pc, #28]	; (9568 <SwTimerReset+0x50>)
    954a:	701a      	strb	r2, [r3, #0]
}
    954c:	4770      	bx	lr
    954e:	46c0      	nop			; (mov r8, r8)
    9550:	20000e44 	.word	0x20000e44
    9554:	20001392 	.word	0x20001392
    9558:	20000e40 	.word	0x20000e40
    955c:	20000e38 	.word	0x20000e38
    9560:	20000e3c 	.word	0x20000e3c
    9564:	20001204 	.word	0x20001204
    9568:	20000e34 	.word	0x20000e34

0000956c <SystemTimerInit>:

/**************************************************************************//**
\brief Initializes the Software Timer module
******************************************************************************/
void SystemTimerInit(void)
{
    956c:	b510      	push	{r4, lr}
    SwTimerReset();
    956e:	4b08      	ldr	r3, [pc, #32]	; (9590 <SystemTimerInit+0x24>)
    9570:	4798      	blx	r3

    /* initialize system time parameters */
    sysTimeOvf = sysTime = 0u;
    9572:	2300      	movs	r3, #0
    9574:	4a07      	ldr	r2, [pc, #28]	; (9594 <SystemTimerInit+0x28>)
    9576:	8013      	strh	r3, [r2, #0]
    9578:	4a07      	ldr	r2, [pc, #28]	; (9598 <SystemTimerInit+0x2c>)
    957a:	6013      	str	r3, [r2, #0]

    common_tc_init();
    957c:	4b07      	ldr	r3, [pc, #28]	; (959c <SystemTimerInit+0x30>)
    957e:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    9580:	4807      	ldr	r0, [pc, #28]	; (95a0 <SystemTimerInit+0x34>)
    9582:	4b08      	ldr	r3, [pc, #32]	; (95a4 <SystemTimerInit+0x38>)
    9584:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    9586:	4808      	ldr	r0, [pc, #32]	; (95a8 <SystemTimerInit+0x3c>)
    9588:	4b08      	ldr	r3, [pc, #32]	; (95ac <SystemTimerInit+0x40>)
    958a:	4798      	blx	r3
}
    958c:	bd10      	pop	{r4, pc}
    958e:	46c0      	nop			; (mov r8, r8)
    9590:	00009519 	.word	0x00009519
    9594:	20001390 	.word	0x20001390
    9598:	20001394 	.word	0x20001394
    959c:	0000b591 	.word	0x0000b591
    95a0:	00009335 	.word	0x00009335
    95a4:	0000b615 	.word	0x0000b615
    95a8:	0000930d 	.word	0x0000930d
    95ac:	0000b621 	.word	0x0000b621

000095b0 <SwTimerGetTime>:
/**************************************************************************//**
\brief Get current system time.
\return Returns current system time in microseconds
******************************************************************************/
uint64_t SwTimerGetTime(void)
{
    95b0:	b570      	push	{r4, r5, r6, lr}
    time |= ((uint64_t) sysTimeOvf) << 32;
    95b2:	4b05      	ldr	r3, [pc, #20]	; (95c8 <SwTimerGetTime+0x18>)
    95b4:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    95b6:	4b05      	ldr	r3, [pc, #20]	; (95cc <SwTimerGetTime+0x1c>)
    95b8:	881d      	ldrh	r5, [r3, #0]
    95ba:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    95bc:	4b04      	ldr	r3, [pc, #16]	; (95d0 <SwTimerGetTime+0x20>)
    95be:	4798      	blx	r3
    95c0:	4328      	orrs	r0, r5
    return gettime();
}
    95c2:	0021      	movs	r1, r4
    95c4:	bd70      	pop	{r4, r5, r6, pc}
    95c6:	46c0      	nop			; (mov r8, r8)
    95c8:	20001394 	.word	0x20001394
    95cc:	20001390 	.word	0x20001390
    95d0:	0000b47d 	.word	0x0000b47d

000095d4 <SwTimerCreate>:

\return LORAWAN_SUCCESS if new timerId is allocated
        LORAWAN_RESOURCE_UNAVAILABLE if there is no more timerId to allocate
******************************************************************************/
StackRetStatus_t SwTimerCreate(uint8_t *timerId)
{
    95d4:	b510      	push	{r4, lr}
    95d6:	0004      	movs	r4, r0
    StackRetStatus_t retVal = LORAWAN_SUCCESS;

    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    95d8:	4b08      	ldr	r3, [pc, #32]	; (95fc <SwTimerCreate+0x28>)
    95da:	781b      	ldrb	r3, [r3, #0]
        * If you reach this spot it means the TOTAL_NUMBER_OF_SW_TIMERS
        * is #defined to a lower value than the number of timers that have
        * been SwTimerCreate()
        */
        SYS_ASSERT_FATAL(ASSERT_HAL_TIMERID_EXHAUSTED);
        retVal = LORAWAN_RESOURCE_UNAVAILABLE;
    95dc:	2014      	movs	r0, #20
    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    95de:	2b18      	cmp	r3, #24
    95e0:	d900      	bls.n	95e4 <SwTimerCreate+0x10>
    }

    return retVal;
}
    95e2:	bd10      	pop	{r4, pc}
        ATOMIC_SECTION_ENTER
    95e4:	4b06      	ldr	r3, [pc, #24]	; (9600 <SwTimerCreate+0x2c>)
    95e6:	4798      	blx	r3
        *timerId = allocatedTimerId;
    95e8:	4a04      	ldr	r2, [pc, #16]	; (95fc <SwTimerCreate+0x28>)
    95ea:	7813      	ldrb	r3, [r2, #0]
    95ec:	7023      	strb	r3, [r4, #0]
        allocatedTimerId++;
    95ee:	3301      	adds	r3, #1
    95f0:	7013      	strb	r3, [r2, #0]
        ATOMIC_SECTION_EXIT
    95f2:	4b04      	ldr	r3, [pc, #16]	; (9604 <SwTimerCreate+0x30>)
    95f4:	4798      	blx	r3
    StackRetStatus_t retVal = LORAWAN_SUCCESS;
    95f6:	2008      	movs	r0, #8
    95f8:	e7f3      	b.n	95e2 <SwTimerCreate+0xe>
    95fa:	46c0      	nop			; (mov r8, r8)
    95fc:	20000e34 	.word	0x20000e34
    9600:	00003d2d 	.word	0x00003d2d
    9604:	00003d39 	.word	0x00003d39

00009608 <SwTimerStart>:
        LORAWAN_INVALID_REQUEST if \timerId is already running
        LORAWAN_SUCCESS if \timerId is successfully queued for running
******************************************************************************/
StackRetStatus_t SwTimerStart(uint8_t timerId, uint32_t timerCount,
    SwTimeoutType_t timeoutType, void *timerCb, void *paramCb)
{
    9608:	b5f0      	push	{r4, r5, r6, r7, lr}
    960a:	46d6      	mov	lr, sl
    960c:	464f      	mov	r7, r9
    960e:	4646      	mov	r6, r8
    9610:	b5c0      	push	{r6, r7, lr}
    9612:	b084      	sub	sp, #16
    9614:	0007      	movs	r7, r0
    9616:	000d      	movs	r5, r1
    9618:	0016      	movs	r6, r2
    961a:	001c      	movs	r4, r3
    uint32_t pointInTime;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    961c:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    961e:	2f18      	cmp	r7, #24
    9620:	d809      	bhi.n	9636 <SwTimerStart+0x2e>
    9622:	2b00      	cmp	r3, #0
    9624:	d100      	bne.n	9628 <SwTimerStart+0x20>
    9626:	e08c      	b.n	9742 <SwTimerStart+0x13a>
    }

    if (NULL != swTimers[timerId].timerCb)
    9628:	013a      	lsls	r2, r7, #4
    962a:	4b52      	ldr	r3, [pc, #328]	; (9774 <SwTimerStart+0x16c>)
    962c:	189b      	adds	r3, r3, r2
    962e:	685b      	ldr	r3, [r3, #4]
        /*
        * Timer is already running if the callback function of the
        * corresponding timer index in the timer array is not NULL.
        */
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_REQUEST;
    9630:	300b      	adds	r0, #11
    if (NULL != swTimers[timerId].timerCb)
    9632:	2b00      	cmp	r3, #0
    9634:	d005      	beq.n	9642 <SwTimerStart+0x3a>
        }
    }

    swtimerStartAbsoluteTimer(timerId, pointInTime, timerCb, paramCb);
    return LORAWAN_SUCCESS;
}
    9636:	b004      	add	sp, #16
    9638:	bc1c      	pop	{r2, r3, r4}
    963a:	4690      	mov	r8, r2
    963c:	4699      	mov	r9, r3
    963e:	46a2      	mov	sl, r4
    9640:	bdf0      	pop	{r4, r5, r6, r7, pc}
    time |= ((uint64_t) sysTimeOvf) << 32;
    9642:	4b4d      	ldr	r3, [pc, #308]	; (9778 <SwTimerStart+0x170>)
    9644:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    9646:	4b4d      	ldr	r3, [pc, #308]	; (977c <SwTimerStart+0x174>)
    9648:	8818      	ldrh	r0, [r3, #0]
    964a:	0403      	lsls	r3, r0, #16
    964c:	4698      	mov	r8, r3
    time |= (uint64_t) common_tc_read_count();
    964e:	4b4c      	ldr	r3, [pc, #304]	; (9780 <SwTimerStart+0x178>)
    9650:	4798      	blx	r3
    9652:	4643      	mov	r3, r8
    9654:	4303      	orrs	r3, r0
    switch (timeoutType)
    9656:	2e00      	cmp	r6, #0
    9658:	d003      	beq.n	9662 <SwTimerStart+0x5a>
    965a:	2e01      	cmp	r6, #1
    965c:	d038      	beq.n	96d0 <SwTimerStart+0xc8>
            return LORAWAN_INVALID_PARAMETER;
    965e:	200a      	movs	r0, #10
    9660:	e7e9      	b.n	9636 <SwTimerStart+0x2e>
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    9662:	4948      	ldr	r1, [pc, #288]	; (9784 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    9664:	200a      	movs	r0, #10
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    9666:	002a      	movs	r2, r5
    9668:	3aff      	subs	r2, #255	; 0xff
            pointInTime = ADD_TIME(timerCount, now);
    966a:	18ed      	adds	r5, r5, r3
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    966c:	428a      	cmp	r2, r1
    966e:	d8e2      	bhi.n	9636 <SwTimerStart+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    9670:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    9674:	425a      	negs	r2, r3
    9676:	4153      	adcs	r3, r2
    9678:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    967a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    967c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    9680:	2600      	movs	r6, #0
    9682:	4b41      	ldr	r3, [pc, #260]	; (9788 <SwTimerStart+0x180>)
    9684:	701e      	strb	r6, [r3, #0]
	return flags;
    9686:	9b03      	ldr	r3, [sp, #12]
    9688:	4699      	mov	r9, r3
    swtimerInternalHandler();
    968a:	4b40      	ldr	r3, [pc, #256]	; (978c <SwTimerStart+0x184>)
    968c:	4798      	blx	r3
    swTimers[timerId].absoluteExpiryTime = pointInTime;
    968e:	4b39      	ldr	r3, [pc, #228]	; (9774 <SwTimerStart+0x16c>)
    9690:	013a      	lsls	r2, r7, #4
    9692:	50d5      	str	r5, [r2, r3]
    swTimers[timerId].timerCb = (void (*)(void*))handlerCb;
    9694:	189b      	adds	r3, r3, r2
    9696:	605c      	str	r4, [r3, #4]
    swTimers[timerId].paramCb = parameter;
    9698:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    969a:	609a      	str	r2, [r3, #8]
    swTimers[timerId].loaded = false;
    969c:	735e      	strb	r6, [r3, #13]
    runningTimers++;
    969e:	4a3c      	ldr	r2, [pc, #240]	; (9790 <SwTimerStart+0x188>)
    96a0:	7813      	ldrb	r3, [r2, #0]
    96a2:	3301      	adds	r3, #1
    96a4:	b2db      	uxtb	r3, r3
    96a6:	7013      	strb	r3, [r2, #0]
    if (SWTIMER_INVALID == runningTimerQueueHead)
    96a8:	4b3a      	ldr	r3, [pc, #232]	; (9794 <SwTimerStart+0x18c>)
    96aa:	681b      	ldr	r3, [r3, #0]
    96ac:	469a      	mov	sl, r3
    96ae:	2bff      	cmp	r3, #255	; 0xff
    96b0:	d016      	beq.n	96e0 <SwTimerStart+0xd8>
        uint8_t currIndex = runningTimerQueueHead;
    96b2:	466a      	mov	r2, sp
    96b4:	7013      	strb	r3, [r2, #0]
    96b6:	7812      	ldrb	r2, [r2, #0]
        for (index = 0; index < runningTimers; index++)
    96b8:	4b35      	ldr	r3, [pc, #212]	; (9790 <SwTimerStart+0x188>)
    96ba:	781b      	ldrb	r3, [r3, #0]
    96bc:	2b00      	cmp	r3, #0
    96be:	d042      	beq.n	9746 <SwTimerStart+0x13e>
    96c0:	9200      	str	r2, [sp, #0]
    96c2:	2300      	movs	r3, #0
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    96c4:	492b      	ldr	r1, [pc, #172]	; (9774 <SwTimerStart+0x16c>)
    96c6:	4688      	mov	r8, r1
    96c8:	4833      	ldr	r0, [pc, #204]	; (9798 <SwTimerStart+0x190>)
                    currIndex = swTimers[currIndex].nextTimer;
    96ca:	468c      	mov	ip, r1
        for (index = 0; index < runningTimers; index++)
    96cc:	4c30      	ldr	r4, [pc, #192]	; (9790 <SwTimerStart+0x188>)
    96ce:	e02a      	b.n	9726 <SwTimerStart+0x11e>
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    96d0:	0028      	movs	r0, r5
    96d2:	38ff      	subs	r0, #255	; 0xff
    96d4:	1ac3      	subs	r3, r0, r3
    96d6:	4a2b      	ldr	r2, [pc, #172]	; (9784 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    96d8:	200a      	movs	r0, #10
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    96da:	4293      	cmp	r3, r2
    96dc:	d9c8      	bls.n	9670 <SwTimerStart+0x68>
    96de:	e7aa      	b.n	9636 <SwTimerStart+0x2e>
        runningTimerQueueHead = timerId;
    96e0:	4b2c      	ldr	r3, [pc, #176]	; (9794 <SwTimerStart+0x18c>)
    96e2:	601f      	str	r7, [r3, #0]
        loadHwTimer(runningTimerQueueHead);
    96e4:	0038      	movs	r0, r7
    96e6:	4b2d      	ldr	r3, [pc, #180]	; (979c <SwTimerStart+0x194>)
    96e8:	4798      	blx	r3
    96ea:	e036      	b.n	975a <SwTimerStart+0x152>
                    swTimers[timerId].nextTimer = currIndex;
    96ec:	4b21      	ldr	r3, [pc, #132]	; (9774 <SwTimerStart+0x16c>)
    96ee:	013c      	lsls	r4, r7, #4
    96f0:	191c      	adds	r4, r3, r4
    96f2:	7322      	strb	r2, [r4, #12]
                    swTimers[currIndex].loaded = false;
    96f4:	9901      	ldr	r1, [sp, #4]
    96f6:	0109      	lsls	r1, r1, #4
    96f8:	1859      	adds	r1, r3, r1
    96fa:	2300      	movs	r3, #0
    96fc:	734b      	strb	r3, [r1, #13]
                    if (runningTimerQueueHead == currIndex)
    96fe:	4592      	cmp	sl, r2
    9700:	d005      	beq.n	970e <SwTimerStart+0x106>
                        swTimers[prevIndex].nextTimer = timerId;
    9702:	9b00      	ldr	r3, [sp, #0]
    9704:	0118      	lsls	r0, r3, #4
    9706:	4b1b      	ldr	r3, [pc, #108]	; (9774 <SwTimerStart+0x16c>)
    9708:	1818      	adds	r0, r3, r0
    970a:	7307      	strb	r7, [r0, #12]
    970c:	e025      	b.n	975a <SwTimerStart+0x152>
                        runningTimerQueueHead = timerId;
    970e:	4b21      	ldr	r3, [pc, #132]	; (9794 <SwTimerStart+0x18c>)
    9710:	601f      	str	r7, [r3, #0]
                        loadHwTimer(runningTimerQueueHead);
    9712:	0038      	movs	r0, r7
    9714:	4b21      	ldr	r3, [pc, #132]	; (979c <SwTimerStart+0x194>)
    9716:	4798      	blx	r3
    9718:	e01f      	b.n	975a <SwTimerStart+0x152>
        for (index = 0; index < runningTimers; index++)
    971a:	3301      	adds	r3, #1
    971c:	b2db      	uxtb	r3, r3
    971e:	7821      	ldrb	r1, [r4, #0]
    9720:	b2c9      	uxtb	r1, r1
    9722:	428b      	cmp	r3, r1
    9724:	d210      	bcs.n	9748 <SwTimerStart+0x140>
            if (SWTIMER_INVALID != currIndex)
    9726:	2aff      	cmp	r2, #255	; 0xff
    9728:	d0f7      	beq.n	971a <SwTimerStart+0x112>
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    972a:	9201      	str	r2, [sp, #4]
    972c:	0111      	lsls	r1, r2, #4
    return ((t2 - t1) < INT32_MAX);
    972e:	4646      	mov	r6, r8
    9730:	5989      	ldr	r1, [r1, r6]
    9732:	1a69      	subs	r1, r5, r1
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    9734:	4281      	cmp	r1, r0
    9736:	d8d9      	bhi.n	96ec <SwTimerStart+0xe4>
                    currIndex = swTimers[currIndex].nextTimer;
    9738:	0111      	lsls	r1, r2, #4
    973a:	4461      	add	r1, ip
    973c:	9200      	str	r2, [sp, #0]
    973e:	7b0a      	ldrb	r2, [r1, #12]
    9740:	e7eb      	b.n	971a <SwTimerStart+0x112>
        return LORAWAN_INVALID_PARAMETER;
    9742:	200a      	movs	r0, #10
    9744:	e777      	b.n	9636 <SwTimerStart+0x2e>
        uint8_t prevIndex = runningTimerQueueHead;
    9746:	9200      	str	r2, [sp, #0]
            swTimers[prevIndex].nextTimer = timerId;
    9748:	4b0a      	ldr	r3, [pc, #40]	; (9774 <SwTimerStart+0x16c>)
    974a:	9a00      	ldr	r2, [sp, #0]
    974c:	0110      	lsls	r0, r2, #4
    974e:	1818      	adds	r0, r3, r0
    9750:	7307      	strb	r7, [r0, #12]
            swTimers[timerId].nextTimer = SWTIMER_INVALID;
    9752:	013f      	lsls	r7, r7, #4
    9754:	19df      	adds	r7, r3, r7
    9756:	23ff      	movs	r3, #255	; 0xff
    9758:	733b      	strb	r3, [r7, #12]
	if (cpu_irq_is_enabled_flags(flags))
    975a:	23ff      	movs	r3, #255	; 0xff
    return LORAWAN_SUCCESS;
    975c:	2008      	movs	r0, #8
    975e:	464a      	mov	r2, r9
    9760:	4213      	tst	r3, r2
    9762:	d100      	bne.n	9766 <SwTimerStart+0x15e>
    9764:	e767      	b.n	9636 <SwTimerStart+0x2e>
		cpu_irq_enable();
    9766:	2201      	movs	r2, #1
    9768:	4b07      	ldr	r3, [pc, #28]	; (9788 <SwTimerStart+0x180>)
    976a:	701a      	strb	r2, [r3, #0]
    976c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    9770:	b662      	cpsie	i
    9772:	e760      	b.n	9636 <SwTimerStart+0x2e>
    9774:	20001200 	.word	0x20001200
    9778:	20001394 	.word	0x20001394
    977c:	20001390 	.word	0x20001390
    9780:	0000b47d 	.word	0x0000b47d
    9784:	7fffff00 	.word	0x7fffff00
    9788:	20000000 	.word	0x20000000
    978c:	00009485 	.word	0x00009485
    9790:	20000e44 	.word	0x20000e44
    9794:	20000e40 	.word	0x20000e40
    9798:	7ffffffe 	.word	0x7ffffffe
    979c:	000093ed 	.word	0x000093ed

000097a0 <SwTimerIsRunning>:
\param[in] timerId Timer ID to be checked for running
\return True if the timer is running else False
******************************************************************************/
bool SwTimerIsRunning(uint8_t timerId)
{
    if (NULL == swTimers[timerId].timerCb)
    97a0:	0103      	lsls	r3, r0, #4
    97a2:	4803      	ldr	r0, [pc, #12]	; (97b0 <SwTimerIsRunning+0x10>)
    97a4:	18c0      	adds	r0, r0, r3
    97a6:	6840      	ldr	r0, [r0, #4]
    97a8:	1e43      	subs	r3, r0, #1
    97aa:	4198      	sbcs	r0, r3
    97ac:	b2c0      	uxtb	r0, r0
    {
        return false;
    }

    return true;
}
    97ae:	4770      	bx	lr
    97b0:	20001200 	.word	0x20001200

000097b4 <SwTimerReadValue>:
\brief Returns the remaining timeout for the given timerId
\param[in] timerId Timer ID to get the remaining time
\return Remaining time until expiry in microseconds
******************************************************************************/
uint32_t SwTimerReadValue(uint8_t timerId)
{
    97b4:	b570      	push	{r4, r5, r6, lr}
    uint32_t remainingTime = 0u;
    uint32_t timerExpiryTime = 0u;
    uint32_t currentSysTime = 0u;
    
    if ( NULL != swTimers[timerId].timerCb )
    97b6:	0102      	lsls	r2, r0, #4
    97b8:	4b0b      	ldr	r3, [pc, #44]	; (97e8 <SwTimerReadValue+0x34>)
    97ba:	189b      	adds	r3, r3, r2
    97bc:	685b      	ldr	r3, [r3, #4]
    97be:	2b00      	cmp	r3, #0
    97c0:	d010      	beq.n	97e4 <SwTimerReadValue+0x30>
    {
	    timerExpiryTime = swTimers[timerId].absoluteExpiryTime;
    97c2:	4b09      	ldr	r3, [pc, #36]	; (97e8 <SwTimerReadValue+0x34>)
    97c4:	58d4      	ldr	r4, [r2, r3]
    time |= ((uint64_t) sysTimeOvf) << 32;
    97c6:	4b09      	ldr	r3, [pc, #36]	; (97ec <SwTimerReadValue+0x38>)
    97c8:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    97ca:	4b09      	ldr	r3, [pc, #36]	; (97f0 <SwTimerReadValue+0x3c>)
    97cc:	881d      	ldrh	r5, [r3, #0]
    97ce:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    97d0:	4b08      	ldr	r3, [pc, #32]	; (97f4 <SwTimerReadValue+0x40>)
    97d2:	4798      	blx	r3
    97d4:	4328      	orrs	r0, r5
	    currentSysTime = (uint32_t) gettime();

	    if ( currentSysTime <= timerExpiryTime )
    97d6:	4284      	cmp	r4, r0
    97d8:	d202      	bcs.n	97e0 <SwTimerReadValue+0x2c>
	    {
		    remainingTime = timerExpiryTime - currentSysTime;
	    }
	    else if ( currentSysTime > timerExpiryTime )
	    {
		    remainingTime = (UINT32_MAX - currentSysTime) + timerExpiryTime;
    97da:	3c01      	subs	r4, #1
    97dc:	1a20      	subs	r0, r4, r0
	    }
    }
    
    return remainingTime;
}
    97de:	bd70      	pop	{r4, r5, r6, pc}
		    remainingTime = timerExpiryTime - currentSysTime;
    97e0:	1a20      	subs	r0, r4, r0
    97e2:	e7fc      	b.n	97de <SwTimerReadValue+0x2a>
    uint32_t remainingTime = 0u;
    97e4:	2000      	movs	r0, #0
    return remainingTime;
    97e6:	e7fa      	b.n	97de <SwTimerReadValue+0x2a>
    97e8:	20001200 	.word	0x20001200
    97ec:	20001394 	.word	0x20001394
    97f0:	20001390 	.word	0x20001390
    97f4:	0000b47d 	.word	0x0000b47d

000097f8 <SwTimerNextExpiryDuration>:
/**************************************************************************//**
\brief Returns the duration until the next timer expiry
\return Returns the duration until the next timeout in microseconds
******************************************************************************/
uint32_t SwTimerNextExpiryDuration(void)
{
    97f8:	b510      	push	{r4, lr}
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;

    if (SWTIMER_INVALID != runningTimerQueueHead)
    97fa:	4b05      	ldr	r3, [pc, #20]	; (9810 <SwTimerNextExpiryDuration+0x18>)
    97fc:	6818      	ldr	r0, [r3, #0]
    97fe:	28ff      	cmp	r0, #255	; 0xff
    9800:	d102      	bne.n	9808 <SwTimerNextExpiryDuration+0x10>
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;
    9802:	2001      	movs	r0, #1
    9804:	4240      	negs	r0, r0
    {
        duration = SwTimerReadValue(runningTimerQueueHead);
    }

    return duration;
}
    9806:	bd10      	pop	{r4, pc}
        duration = SwTimerReadValue(runningTimerQueueHead);
    9808:	b2c0      	uxtb	r0, r0
    980a:	4b02      	ldr	r3, [pc, #8]	; (9814 <SwTimerNextExpiryDuration+0x1c>)
    980c:	4798      	blx	r3
    980e:	e7fa      	b.n	9806 <SwTimerNextExpiryDuration+0xe>
    9810:	20000e40 	.word	0x20000e40
    9814:	000097b5 	.word	0x000097b5

00009818 <SwTimersExecute>:

/**************************************************************************//**
\brief Handles Queues and Callbacks for Expired Timers
******************************************************************************/
void SwTimersExecute(void)
{
    9818:	b5f0      	push	{r4, r5, r6, r7, lr}
    981a:	46de      	mov	lr, fp
    981c:	4657      	mov	r7, sl
    981e:	464e      	mov	r6, r9
    9820:	4645      	mov	r5, r8
    9822:	b5e0      	push	{r5, r6, r7, lr}
    9824:	b083      	sub	sp, #12
    time |= ((uint64_t) sysTimeOvf) << 32;
    9826:	4b2f      	ldr	r3, [pc, #188]	; (98e4 <SwTimersExecute+0xcc>)
    9828:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    982a:	4b2f      	ldr	r3, [pc, #188]	; (98e8 <SwTimersExecute+0xd0>)
    982c:	881b      	ldrh	r3, [r3, #0]
    time |= (uint64_t) common_tc_read_count();
    982e:	4b2f      	ldr	r3, [pc, #188]	; (98ec <SwTimersExecute+0xd4>)
    9830:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    9832:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    9836:	4253      	negs	r3, r2
    9838:	4153      	adcs	r3, r2
    983a:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    983c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    983e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    9842:	2200      	movs	r2, #0
    9844:	4b2a      	ldr	r3, [pc, #168]	; (98f0 <SwTimersExecute+0xd8>)
    9846:	701a      	strb	r2, [r3, #0]
	return flags;
    9848:	9c00      	ldr	r4, [sp, #0]
    uint64_t now = gettime();

    uint8_t flags = cpu_irq_save();
    swtimerInternalHandler();
    984a:	4b2a      	ldr	r3, [pc, #168]	; (98f4 <SwTimersExecute+0xdc>)
    984c:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    984e:	23ff      	movs	r3, #255	; 0xff
    9850:	4223      	tst	r3, r4
    9852:	d005      	beq.n	9860 <SwTimersExecute+0x48>
		cpu_irq_enable();
    9854:	2201      	movs	r2, #1
    9856:	4b26      	ldr	r3, [pc, #152]	; (98f0 <SwTimersExecute+0xd8>)
    9858:	701a      	strb	r2, [r3, #0]
    985a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    985e:	b662      	cpsie	i
	cpu_irq_disable();
    9860:	4b23      	ldr	r3, [pc, #140]	; (98f0 <SwTimersExecute+0xd8>)
    9862:	469a      	mov	sl, r3
        /* Expired timer if any will be processed here */
        while (SWTIMER_INVALID != expiredTimerQueueHead)
        {
            flags = cpu_irq_save();

            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    9864:	4c24      	ldr	r4, [pc, #144]	; (98f8 <SwTimersExecute+0xe0>)
    9866:	4b25      	ldr	r3, [pc, #148]	; (98fc <SwTimersExecute+0xe4>)
    9868:	4699      	mov	r9, r3
    986a:	2200      	movs	r2, #0

            /*
            * The expired timer's structure elements are updated
            * and the timer is taken out of expired timer queue
            */
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    986c:	20ff      	movs	r0, #255	; 0xff
            */
            expiredTimerQueueHead = nextExpiredTimer;

            if (SWTIMER_INVALID == expiredTimerQueueHead)
            {
                expiredTimerQueueTail = SWTIMER_INVALID;
    986e:	4b24      	ldr	r3, [pc, #144]	; (9900 <SwTimersExecute+0xe8>)
    9870:	4698      	mov	r8, r3
		cpu_irq_enable();
    9872:	4b1f      	ldr	r3, [pc, #124]	; (98f0 <SwTimersExecute+0xd8>)
    9874:	469c      	mov	ip, r3
    9876:	e004      	b.n	9882 <SwTimersExecute+0x6a>
    9878:	4643      	mov	r3, r8
    987a:	6018      	str	r0, [r3, #0]
    987c:	e01e      	b.n	98bc <SwTimersExecute+0xa4>
            }

            cpu_irq_restore(flags);

            if (NULL != callback)
    987e:	2e00      	cmp	r6, #0
    9880:	d125      	bne.n	98ce <SwTimersExecute+0xb6>
        while (SWTIMER_INVALID != expiredTimerQueueHead)
    9882:	4b1d      	ldr	r3, [pc, #116]	; (98f8 <SwTimersExecute+0xe0>)
    9884:	681b      	ldr	r3, [r3, #0]
    9886:	2bff      	cmp	r3, #255	; 0xff
    9888:	d024      	beq.n	98d4 <SwTimersExecute+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    988a:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    988e:	424b      	negs	r3, r1
    9890:	414b      	adcs	r3, r1
    9892:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    9894:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    9896:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    989a:	4653      	mov	r3, sl
    989c:	701a      	strb	r2, [r3, #0]
	return flags;
    989e:	9f01      	ldr	r7, [sp, #4]
            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    98a0:	6823      	ldr	r3, [r4, #0]
    98a2:	011b      	lsls	r3, r3, #4
    98a4:	444b      	add	r3, r9
    98a6:	7b19      	ldrb	r1, [r3, #12]
            callback = (SwTimerCallbackFunc_t)swTimers[expiredTimerQueueHead].timerCb;
    98a8:	685e      	ldr	r6, [r3, #4]
            cbParam = swTimers[expiredTimerQueueHead].paramCb;
    98aa:	689d      	ldr	r5, [r3, #8]
    98ac:	46ab      	mov	fp, r5
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    98ae:	7318      	strb	r0, [r3, #12]
            swTimers[expiredTimerQueueHead].timerCb = NULL;
    98b0:	605a      	str	r2, [r3, #4]
            swTimers[expiredTimerQueueHead].paramCb = NULL;
    98b2:	609a      	str	r2, [r3, #8]
            swTimers[expiredTimerQueueHead].loaded = false;
    98b4:	735a      	strb	r2, [r3, #13]
            expiredTimerQueueHead = nextExpiredTimer;
    98b6:	6021      	str	r1, [r4, #0]
            if (SWTIMER_INVALID == expiredTimerQueueHead)
    98b8:	29ff      	cmp	r1, #255	; 0xff
    98ba:	d0dd      	beq.n	9878 <SwTimersExecute+0x60>
	if (cpu_irq_is_enabled_flags(flags))
    98bc:	4238      	tst	r0, r7
    98be:	d0de      	beq.n	987e <SwTimersExecute+0x66>
		cpu_irq_enable();
    98c0:	2301      	movs	r3, #1
    98c2:	4661      	mov	r1, ip
    98c4:	700b      	strb	r3, [r1, #0]
    98c6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    98ca:	b662      	cpsie	i
    98cc:	e7d7      	b.n	987e <SwTimersExecute+0x66>
            {
                /* Callback function is called */
                callback(cbParam);
    98ce:	4658      	mov	r0, fp
    98d0:	47b0      	blx	r6
    98d2:	e7ca      	b.n	986a <SwTimersExecute+0x52>
                (void)now;
            }
        }
    }
}
    98d4:	b003      	add	sp, #12
    98d6:	bc3c      	pop	{r2, r3, r4, r5}
    98d8:	4690      	mov	r8, r2
    98da:	4699      	mov	r9, r3
    98dc:	46a2      	mov	sl, r4
    98de:	46ab      	mov	fp, r5
    98e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    98e2:	46c0      	nop			; (mov r8, r8)
    98e4:	20001394 	.word	0x20001394
    98e8:	20001390 	.word	0x20001390
    98ec:	0000b47d 	.word	0x0000b47d
    98f0:	20000000 	.word	0x20000000
    98f4:	00009485 	.word	0x00009485
    98f8:	20000e38 	.word	0x20000e38
    98fc:	20001200 	.word	0x20001200
    9900:	20000e3c 	.word	0x20000e3c

00009904 <TIMER_TaskHandler>:
{
    9904:	b510      	push	{r4, lr}
    SwTimersExecute();
    9906:	4b02      	ldr	r3, [pc, #8]	; (9910 <TIMER_TaskHandler+0xc>)
    9908:	4798      	blx	r3
}
    990a:	2000      	movs	r0, #0
    990c:	bd10      	pop	{r4, pc}
    990e:	46c0      	nop			; (mov r8, r8)
    9910:	00009819 	.word	0x00009819

00009914 <SwTimerStop>:
        LORAWAN_INVALID_PARAMETER if timerId is not valid
        LORAWAN_INVALID_REQUEST if timerId was not started before
        LORAWAN_SUCCESS if it is successfully stopped
******************************************************************************/
StackRetStatus_t SwTimerStop(uint8_t timerId)
{
    9914:	b570      	push	{r4, r5, r6, lr}
    9916:	b082      	sub	sp, #8
    9918:	0004      	movs	r4, r0
    uint8_t prevIndex;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    991a:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    991c:	2c18      	cmp	r4, #24
    991e:	d901      	bls.n	9924 <SwTimerStop+0x10>
        return LORAWAN_SUCCESS;
    }

    SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
    return LORAWAN_INVALID_REQUEST;
}
    9920:	b002      	add	sp, #8
    9922:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    9924:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    9928:	425a      	negs	r2, r3
    992a:	4153      	adcs	r3, r2
    992c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    992e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    9930:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    9934:	2200      	movs	r2, #0
    9936:	4b47      	ldr	r3, [pc, #284]	; (9a54 <SwTimerStop+0x140>)
    9938:	701a      	strb	r2, [r3, #0]
	return flags;
    993a:	9d01      	ldr	r5, [sp, #4]
    swtimerInternalHandler();
    993c:	4b46      	ldr	r3, [pc, #280]	; (9a58 <SwTimerStop+0x144>)
    993e:	4798      	blx	r3
    if (runningTimers > 0)
    9940:	4b46      	ldr	r3, [pc, #280]	; (9a5c <SwTimerStop+0x148>)
    9942:	781b      	ldrb	r3, [r3, #0]
    9944:	2b00      	cmp	r3, #0
    9946:	d040      	beq.n	99ca <SwTimerStop+0xb6>
        uint8_t timer_count = runningTimers;
    9948:	4b44      	ldr	r3, [pc, #272]	; (9a5c <SwTimerStop+0x148>)
    994a:	781b      	ldrb	r3, [r3, #0]
    994c:	b2db      	uxtb	r3, r3
        prevIndex = currIndex = runningTimerQueueHead;
    994e:	4a44      	ldr	r2, [pc, #272]	; (9a60 <SwTimerStop+0x14c>)
    9950:	6816      	ldr	r6, [r2, #0]
    9952:	b2f1      	uxtb	r1, r6
        while (timer_count > 0)
    9954:	2b00      	cmp	r3, #0
    9956:	d038      	beq.n	99ca <SwTimerStop+0xb6>
            if (timerId == currIndex)
    9958:	428c      	cmp	r4, r1
    995a:	d00b      	beq.n	9974 <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    995c:	4841      	ldr	r0, [pc, #260]	; (9a64 <SwTimerStop+0x150>)
    995e:	010a      	lsls	r2, r1, #4
    9960:	1882      	adds	r2, r0, r2
    9962:	7b12      	ldrb	r2, [r2, #12]
            timer_count--;
    9964:	3b01      	subs	r3, #1
    9966:	b2db      	uxtb	r3, r3
        while (timer_count > 0)
    9968:	2b00      	cmp	r3, #0
    996a:	d02e      	beq.n	99ca <SwTimerStop+0xb6>
            if (timerId == currIndex)
    996c:	4294      	cmp	r4, r2
    996e:	d001      	beq.n	9974 <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    9970:	0011      	movs	r1, r2
    9972:	e7f4      	b.n	995e <SwTimerStop+0x4a>
                if (timerId == runningTimerQueueHead)
    9974:	42a6      	cmp	r6, r4
    9976:	d01d      	beq.n	99b4 <SwTimerStop+0xa0>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    9978:	4b3a      	ldr	r3, [pc, #232]	; (9a64 <SwTimerStop+0x150>)
    997a:	0122      	lsls	r2, r4, #4
    997c:	189a      	adds	r2, r3, r2
    997e:	7b12      	ldrb	r2, [r2, #12]
    9980:	0109      	lsls	r1, r1, #4
    9982:	1859      	adds	r1, r3, r1
    9984:	730a      	strb	r2, [r1, #12]
                swTimers[timerId].nextTimer  = SWTIMER_INVALID;
    9986:	0122      	lsls	r2, r4, #4
    9988:	4b36      	ldr	r3, [pc, #216]	; (9a64 <SwTimerStop+0x150>)
    998a:	189b      	adds	r3, r3, r2
    998c:	22ff      	movs	r2, #255	; 0xff
    998e:	731a      	strb	r2, [r3, #12]
            runningTimers--;
    9990:	4a32      	ldr	r2, [pc, #200]	; (9a5c <SwTimerStop+0x148>)
    9992:	7813      	ldrb	r3, [r2, #0]
    9994:	3b01      	subs	r3, #1
    9996:	b2db      	uxtb	r3, r3
    9998:	7013      	strb	r3, [r2, #0]
        swTimers[timerId].timerCb = NULL;
    999a:	0124      	lsls	r4, r4, #4
    999c:	4b31      	ldr	r3, [pc, #196]	; (9a64 <SwTimerStop+0x150>)
    999e:	191c      	adds	r4, r3, r4
    99a0:	2300      	movs	r3, #0
    99a2:	6063      	str	r3, [r4, #4]
        swTimers[timerId].paramCb = NULL;
    99a4:	60a3      	str	r3, [r4, #8]
        swTimers[timerId].loaded = false;
    99a6:	7363      	strb	r3, [r4, #13]
	if (cpu_irq_is_enabled_flags(flags))
    99a8:	33ff      	adds	r3, #255	; 0xff
        return LORAWAN_SUCCESS;
    99aa:	2008      	movs	r0, #8
    99ac:	422b      	tst	r3, r5
    99ae:	d0b7      	beq.n	9920 <SwTimerStop+0xc>
    99b0:	2301      	movs	r3, #1
    99b2:	e040      	b.n	9a36 <SwTimerStop+0x122>
                    common_tc_compare_stop();
    99b4:	4b2c      	ldr	r3, [pc, #176]	; (9a68 <SwTimerStop+0x154>)
    99b6:	4798      	blx	r3
                    runningTimerQueueHead = swTimers[timerId].nextTimer;
    99b8:	0122      	lsls	r2, r4, #4
    99ba:	4b2a      	ldr	r3, [pc, #168]	; (9a64 <SwTimerStop+0x150>)
    99bc:	189b      	adds	r3, r3, r2
    99be:	7b18      	ldrb	r0, [r3, #12]
    99c0:	4b27      	ldr	r3, [pc, #156]	; (9a60 <SwTimerStop+0x14c>)
    99c2:	6018      	str	r0, [r3, #0]
                    loadHwTimer(runningTimerQueueHead);
    99c4:	4b29      	ldr	r3, [pc, #164]	; (9a6c <SwTimerStop+0x158>)
    99c6:	4798      	blx	r3
    99c8:	e7dd      	b.n	9986 <SwTimerStop+0x72>
        prevIndex = currIndex = expiredTimerQueueHead;
    99ca:	4b29      	ldr	r3, [pc, #164]	; (9a70 <SwTimerStop+0x15c>)
    99cc:	6818      	ldr	r0, [r3, #0]
    99ce:	b2c2      	uxtb	r2, r0
        while (SWTIMER_INVALID != currIndex)
    99d0:	2aff      	cmp	r2, #255	; 0xff
    99d2:	d02c      	beq.n	9a2e <SwTimerStop+0x11a>
            if (timerId == currIndex)
    99d4:	4294      	cmp	r4, r2
    99d6:	d009      	beq.n	99ec <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    99d8:	4922      	ldr	r1, [pc, #136]	; (9a64 <SwTimerStop+0x150>)
    99da:	0113      	lsls	r3, r2, #4
    99dc:	18cb      	adds	r3, r1, r3
    99de:	7b1b      	ldrb	r3, [r3, #12]
        while (SWTIMER_INVALID != currIndex)
    99e0:	2bff      	cmp	r3, #255	; 0xff
    99e2:	d024      	beq.n	9a2e <SwTimerStop+0x11a>
            if (timerId == currIndex)
    99e4:	429c      	cmp	r4, r3
    99e6:	d001      	beq.n	99ec <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    99e8:	001a      	movs	r2, r3
    99ea:	e7f6      	b.n	99da <SwTimerStop+0xc6>
                if (timerId == expiredTimerQueueHead)
    99ec:	42a0      	cmp	r0, r4
    99ee:	d00d      	beq.n	9a0c <SwTimerStop+0xf8>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    99f0:	4b1c      	ldr	r3, [pc, #112]	; (9a64 <SwTimerStop+0x150>)
    99f2:	0121      	lsls	r1, r4, #4
    99f4:	1859      	adds	r1, r3, r1
    99f6:	7b09      	ldrb	r1, [r1, #12]
    99f8:	0110      	lsls	r0, r2, #4
    99fa:	181b      	adds	r3, r3, r0
    99fc:	7319      	strb	r1, [r3, #12]
                    if (timerId == expiredTimerQueueTail)
    99fe:	4b1d      	ldr	r3, [pc, #116]	; (9a74 <SwTimerStop+0x160>)
    9a00:	681b      	ldr	r3, [r3, #0]
    9a02:	429c      	cmp	r4, r3
    9a04:	d1c9      	bne.n	999a <SwTimerStop+0x86>
                        expiredTimerQueueTail = prevIndex;
    9a06:	4b1b      	ldr	r3, [pc, #108]	; (9a74 <SwTimerStop+0x160>)
    9a08:	601a      	str	r2, [r3, #0]
    9a0a:	e7c6      	b.n	999a <SwTimerStop+0x86>
                    if (expiredTimerQueueHead == expiredTimerQueueTail)
    9a0c:	4b19      	ldr	r3, [pc, #100]	; (9a74 <SwTimerStop+0x160>)
    9a0e:	681b      	ldr	r3, [r3, #0]
    9a10:	4298      	cmp	r0, r3
    9a12:	d006      	beq.n	9a22 <SwTimerStop+0x10e>
                        expiredTimerQueueHead = swTimers[expiredTimerQueueHead].nextTimer;
    9a14:	0100      	lsls	r0, r0, #4
    9a16:	4b13      	ldr	r3, [pc, #76]	; (9a64 <SwTimerStop+0x150>)
    9a18:	1818      	adds	r0, r3, r0
    9a1a:	7b02      	ldrb	r2, [r0, #12]
    9a1c:	4b14      	ldr	r3, [pc, #80]	; (9a70 <SwTimerStop+0x15c>)
    9a1e:	601a      	str	r2, [r3, #0]
    9a20:	e7bb      	b.n	999a <SwTimerStop+0x86>
                        expiredTimerQueueHead = expiredTimerQueueTail = SWTIMER_INVALID;
    9a22:	23ff      	movs	r3, #255	; 0xff
    9a24:	4a13      	ldr	r2, [pc, #76]	; (9a74 <SwTimerStop+0x160>)
    9a26:	6013      	str	r3, [r2, #0]
    9a28:	4a11      	ldr	r2, [pc, #68]	; (9a70 <SwTimerStop+0x15c>)
    9a2a:	6013      	str	r3, [r2, #0]
    9a2c:	e7b5      	b.n	999a <SwTimerStop+0x86>
    9a2e:	23ff      	movs	r3, #255	; 0xff
    9a30:	422b      	tst	r3, r5
    9a32:	d00a      	beq.n	9a4a <SwTimerStop+0x136>
    9a34:	2300      	movs	r3, #0
		cpu_irq_enable();
    9a36:	2101      	movs	r1, #1
    9a38:	4a06      	ldr	r2, [pc, #24]	; (9a54 <SwTimerStop+0x140>)
    9a3a:	7011      	strb	r1, [r2, #0]
    9a3c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    9a40:	b662      	cpsie	i
    if (timerStopReqStatus)
    9a42:	2b00      	cmp	r3, #0
    9a44:	d103      	bne.n	9a4e <SwTimerStop+0x13a>
    return LORAWAN_INVALID_REQUEST;
    9a46:	2015      	movs	r0, #21
    9a48:	e76a      	b.n	9920 <SwTimerStop+0xc>
    9a4a:	2015      	movs	r0, #21
    9a4c:	e768      	b.n	9920 <SwTimerStop+0xc>
        return LORAWAN_SUCCESS;
    9a4e:	2008      	movs	r0, #8
    9a50:	e766      	b.n	9920 <SwTimerStop+0xc>
    9a52:	46c0      	nop			; (mov r8, r8)
    9a54:	20000000 	.word	0x20000000
    9a58:	00009485 	.word	0x00009485
    9a5c:	20000e44 	.word	0x20000e44
    9a60:	20000e40 	.word	0x20000e40
    9a64:	20001200 	.word	0x20001200
    9a68:	0000b4c9 	.word	0x0000b4c9
    9a6c:	000093ed 	.word	0x000093ed
    9a70:	20000e38 	.word	0x20000e38
    9a74:	20000e3c 	.word	0x20000e3c

00009a78 <SwTimerRunRemainingTime>:
{
    9a78:	b5f0      	push	{r4, r5, r6, r7, lr}
    9a7a:	b083      	sub	sp, #12
    9a7c:	0005      	movs	r5, r0
    void * timerCb = (void*)(swTimers[runningTimerQueueHead].timerCb);
    9a7e:	4b0b      	ldr	r3, [pc, #44]	; (9aac <SwTimerRunRemainingTime+0x34>)
    9a80:	681c      	ldr	r4, [r3, #0]
    9a82:	0122      	lsls	r2, r4, #4
    9a84:	4b0a      	ldr	r3, [pc, #40]	; (9ab0 <SwTimerRunRemainingTime+0x38>)
    9a86:	189b      	adds	r3, r3, r2
    9a88:	685e      	ldr	r6, [r3, #4]
    void *paramCb = swTimers[runningTimerQueueHead].paramCb;
    9a8a:	689f      	ldr	r7, [r3, #8]
    uint8_t timerId = runningTimerQueueHead;
    9a8c:	b2e4      	uxtb	r4, r4
    if (LORAWAN_SUCCESS == SwTimerStop(runningTimerQueueHead))
    9a8e:	0020      	movs	r0, r4
    9a90:	4b08      	ldr	r3, [pc, #32]	; (9ab4 <SwTimerRunRemainingTime+0x3c>)
    9a92:	4798      	blx	r3
    9a94:	2808      	cmp	r0, #8
    9a96:	d001      	beq.n	9a9c <SwTimerRunRemainingTime+0x24>
}
    9a98:	b003      	add	sp, #12
    9a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        SwTimerStart(timerId, offset, SW_TIMEOUT_RELATIVE, timerCb, paramCb);
    9a9c:	9700      	str	r7, [sp, #0]
    9a9e:	0033      	movs	r3, r6
    9aa0:	2200      	movs	r2, #0
    9aa2:	0029      	movs	r1, r5
    9aa4:	0020      	movs	r0, r4
    9aa6:	4c04      	ldr	r4, [pc, #16]	; (9ab8 <SwTimerRunRemainingTime+0x40>)
    9aa8:	47a0      	blx	r4
}
    9aaa:	e7f5      	b.n	9a98 <SwTimerRunRemainingTime+0x20>
    9aac:	20000e40 	.word	0x20000e40
    9ab0:	20001200 	.word	0x20001200
    9ab4:	00009915 	.word	0x00009915
    9ab8:	00009609 	.word	0x00009609

00009abc <SystemTimerSuspend>:

/**************************************************************************//**
\brief Suspends the software timer
******************************************************************************/
void SystemTimerSuspend(void)
{
    9abc:	b570      	push	{r4, r5, r6, lr}
    time |= ((uint64_t) sysTimeOvf) << 32;
    9abe:	4b07      	ldr	r3, [pc, #28]	; (9adc <SystemTimerSuspend+0x20>)
    9ac0:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    9ac2:	4b07      	ldr	r3, [pc, #28]	; (9ae0 <SystemTimerSuspend+0x24>)
    9ac4:	881d      	ldrh	r5, [r3, #0]
    9ac6:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    9ac8:	4b06      	ldr	r3, [pc, #24]	; (9ae4 <SystemTimerSuspend+0x28>)
    9aca:	4798      	blx	r3
    sysTimeLastKnown = gettime();
    9acc:	4b06      	ldr	r3, [pc, #24]	; (9ae8 <SystemTimerSuspend+0x2c>)
    time |= (uint64_t) common_tc_read_count();
    9ace:	4328      	orrs	r0, r5
    9ad0:	6018      	str	r0, [r3, #0]
    9ad2:	605c      	str	r4, [r3, #4]
    common_tc_stop();
    9ad4:	4b05      	ldr	r3, [pc, #20]	; (9aec <SystemTimerSuspend+0x30>)
    9ad6:	4798      	blx	r3
}
    9ad8:	bd70      	pop	{r4, r5, r6, pc}
    9ada:	46c0      	nop			; (mov r8, r8)
    9adc:	20001394 	.word	0x20001394
    9ae0:	20001390 	.word	0x20001390
    9ae4:	0000b47d 	.word	0x0000b47d
    9ae8:	20000e48 	.word	0x20000e48
    9aec:	0000b509 	.word	0x0000b509

00009af0 <SystemTimerSync>:
/**************************************************************************//**
\brief Resumes the software timer by offseting it with given time
\param[in] timeToSync Amount of duration to offset from known system time
******************************************************************************/
void SystemTimerSync(uint64_t timeToSync)
{
    9af0:	b570      	push	{r4, r5, r6, lr}
    uint8_t timerId;
    uint16_t adjustOffset;

    sysTimeLastKnown += timeToSync;
    9af2:	4b22      	ldr	r3, [pc, #136]	; (9b7c <SystemTimerSync+0x8c>)
    9af4:	681c      	ldr	r4, [r3, #0]
    9af6:	685d      	ldr	r5, [r3, #4]
    9af8:	1900      	adds	r0, r0, r4
    9afa:	4169      	adcs	r1, r5
    9afc:	6018      	str	r0, [r3, #0]
    9afe:	6059      	str	r1, [r3, #4]

    /* 1. Update system time */
    sysTimeOvf = (uint32_t) (sysTimeLastKnown >> 32);
    9b00:	4b1f      	ldr	r3, [pc, #124]	; (9b80 <SystemTimerSync+0x90>)
    9b02:	6019      	str	r1, [r3, #0]
    sysTime = (uint16_t) ((sysTimeLastKnown >> SWTIMER_SYSTIME_SHIFTMASK) & 0xffff);
    9b04:	0c02      	lsrs	r2, r0, #16
    9b06:	4b1f      	ldr	r3, [pc, #124]	; (9b84 <SystemTimerSync+0x94>)
    9b08:	801a      	strh	r2, [r3, #0]

    /* 2. Adjust expiration of running timers */
    adjustOffset = (uint16_t) sysTimeLastKnown;
    9b0a:	b280      	uxth	r0, r0
    timerId = runningTimerQueueHead;
    9b0c:	4b1e      	ldr	r3, [pc, #120]	; (9b88 <SystemTimerSync+0x98>)
    9b0e:	781b      	ldrb	r3, [r3, #0]
    for (uint8_t index = 0; index < runningTimers; index++)
    9b10:	4a1e      	ldr	r2, [pc, #120]	; (9b8c <SystemTimerSync+0x9c>)
    9b12:	7812      	ldrb	r2, [r2, #0]
    9b14:	2a00      	cmp	r2, #0
    9b16:	d012      	beq.n	9b3e <SystemTimerSync+0x4e>
    9b18:	2200      	movs	r2, #0
    {
        if (SWTIMER_INVALID != timerId)
        {
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    9b1a:	4c1d      	ldr	r4, [pc, #116]	; (9b90 <SystemTimerSync+0xa0>)
    for (uint8_t index = 0; index < runningTimers; index++)
    9b1c:	4d1b      	ldr	r5, [pc, #108]	; (9b8c <SystemTimerSync+0x9c>)
    9b1e:	e005      	b.n	9b2c <SystemTimerSync+0x3c>
    9b20:	3201      	adds	r2, #1
    9b22:	b2d2      	uxtb	r2, r2
    9b24:	7829      	ldrb	r1, [r5, #0]
    9b26:	b2c9      	uxtb	r1, r1
    9b28:	4291      	cmp	r1, r2
    9b2a:	d908      	bls.n	9b3e <SystemTimerSync+0x4e>
        if (SWTIMER_INVALID != timerId)
    9b2c:	2bff      	cmp	r3, #255	; 0xff
    9b2e:	d0f7      	beq.n	9b20 <SystemTimerSync+0x30>
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    9b30:	011b      	lsls	r3, r3, #4
    9b32:	5919      	ldr	r1, [r3, r4]
    9b34:	1a09      	subs	r1, r1, r0
    9b36:	5119      	str	r1, [r3, r4]
            timerId = swTimers[timerId].nextTimer;
    9b38:	18e3      	adds	r3, r4, r3
    9b3a:	7b1b      	ldrb	r3, [r3, #12]
    9b3c:	e7f0      	b.n	9b20 <SystemTimerSync+0x30>
        }
    }

    /* 3. Start hardware timer */
    common_tc_init();
    9b3e:	4b15      	ldr	r3, [pc, #84]	; (9b94 <SystemTimerSync+0xa4>)
    9b40:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    9b42:	4815      	ldr	r0, [pc, #84]	; (9b98 <SystemTimerSync+0xa8>)
    9b44:	4b15      	ldr	r3, [pc, #84]	; (9b9c <SystemTimerSync+0xac>)
    9b46:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    9b48:	4815      	ldr	r0, [pc, #84]	; (9ba0 <SystemTimerSync+0xb0>)
    9b4a:	4b16      	ldr	r3, [pc, #88]	; (9ba4 <SystemTimerSync+0xb4>)
    9b4c:	4798      	blx	r3

    /* 4. Resume timer queue operations */
    if (runningTimers && (SWTIMER_INVALID != runningTimerQueueHead))
    9b4e:	4b0f      	ldr	r3, [pc, #60]	; (9b8c <SystemTimerSync+0x9c>)
    9b50:	781b      	ldrb	r3, [r3, #0]
    9b52:	2b00      	cmp	r3, #0
    9b54:	d009      	beq.n	9b6a <SystemTimerSync+0x7a>
    9b56:	4b0c      	ldr	r3, [pc, #48]	; (9b88 <SystemTimerSync+0x98>)
    9b58:	681b      	ldr	r3, [r3, #0]
    9b5a:	2bff      	cmp	r3, #255	; 0xff
    9b5c:	d005      	beq.n	9b6a <SystemTimerSync+0x7a>
    {
        uint32_t remainingTime = SwTimerNextExpiryDuration();
    9b5e:	4b12      	ldr	r3, [pc, #72]	; (9ba8 <SystemTimerSync+0xb8>)
    9b60:	4798      	blx	r3

        if (SWTIMER_MIN_TIMEOUT > remainingTime)
    9b62:	28fe      	cmp	r0, #254	; 0xfe
    9b64:	d902      	bls.n	9b6c <SystemTimerSync+0x7c>
        else
        {
            /*
            * There is some time left in head timer, so restart it.
            */
            SwTimerRunRemainingTime(remainingTime);
    9b66:	4b11      	ldr	r3, [pc, #68]	; (9bac <SystemTimerSync+0xbc>)
    9b68:	4798      	blx	r3
        }
    }
}
    9b6a:	bd70      	pop	{r4, r5, r6, pc}
            isTimerTriggered = true;
    9b6c:	2201      	movs	r2, #1
    9b6e:	4b10      	ldr	r3, [pc, #64]	; (9bb0 <SystemTimerSync+0xc0>)
    9b70:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    9b72:	2001      	movs	r0, #1
    9b74:	4b0f      	ldr	r3, [pc, #60]	; (9bb4 <SystemTimerSync+0xc4>)
    9b76:	4798      	blx	r3
    9b78:	e7f7      	b.n	9b6a <SystemTimerSync+0x7a>
    9b7a:	46c0      	nop			; (mov r8, r8)
    9b7c:	20000e48 	.word	0x20000e48
    9b80:	20001394 	.word	0x20001394
    9b84:	20001390 	.word	0x20001390
    9b88:	20000e40 	.word	0x20000e40
    9b8c:	20000e44 	.word	0x20000e44
    9b90:	20001200 	.word	0x20001200
    9b94:	0000b591 	.word	0x0000b591
    9b98:	00009335 	.word	0x00009335
    9b9c:	0000b615 	.word	0x0000b615
    9ba0:	0000930d 	.word	0x0000930d
    9ba4:	0000b621 	.word	0x0000b621
    9ba8:	000097f9 	.word	0x000097f9
    9bac:	00009a79 	.word	0x00009a79
    9bb0:	20001392 	.word	0x20001392
    9bb4:	00009c35 	.word	0x00009c35

00009bb8 <Stack_Init>:
/**************************************************************************//**
\brief Initializes the system. This is the first stack function to be called
       by the application in the main() function.
******************************************************************************/
void Stack_Init(void)
{
    9bb8:	b510      	push	{r4, lr}
	
	/* LORAWAN_Init() should have been called form here, 
	   but parser application has a round-about way to call it now */
 
	/* Post application task to initiate the execution from there */
	SYSTEM_PostTask(APP_TASK_ID);
    9bba:	2010      	movs	r0, #16
    9bbc:	4b01      	ldr	r3, [pc, #4]	; (9bc4 <Stack_Init+0xc>)
    9bbe:	4798      	blx	r3
}
    9bc0:	bd10      	pop	{r4, pc}
    9bc2:	46c0      	nop			; (mov r8, r8)
    9bc4:	00009c35 	.word	0x00009c35

00009bc8 <SYSTEM_RunTasks>:
/************************************************************************/
/*********************************************************************//**
\brief System tasks execution entry point
*************************************************************************/
void SYSTEM_RunTasks(void)
{
    9bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((1 << SYSTEM_TASK_ID_COUNT) > sysTaskFlag)
    9bca:	4b16      	ldr	r3, [pc, #88]	; (9c24 <SYSTEM_RunTasks+0x5c>)
    9bcc:	881b      	ldrh	r3, [r3, #0]
    9bce:	b29b      	uxth	r3, r3
    9bd0:	2b1f      	cmp	r3, #31
    9bd2:	d922      	bls.n	9c1a <SYSTEM_RunTasks+0x52>
    9bd4:	e7fe      	b.n	9bd4 <SYSTEM_RunTasks+0xc>
    { /* Only valid task bits are set */
        while (sysTaskFlag)
        { /* One or more task are pending to execute */
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
            {
                if ((1 << taskId) & sysTaskFlag)
    9bd6:	2500      	movs	r5, #0
                    /*
                    * Reset the task bit since it is to be executed now.
                    * It is done inside atomic section to avoid any interrupt context
                    * corrupting the bits.
                    */
                    ATOMIC_SECTION_ENTER
    9bd8:	4b13      	ldr	r3, [pc, #76]	; (9c28 <SYSTEM_RunTasks+0x60>)
    9bda:	4798      	blx	r3
                    sysTaskFlag &= ~(1 << taskId);
    9bdc:	4911      	ldr	r1, [pc, #68]	; (9c24 <SYSTEM_RunTasks+0x5c>)
    9bde:	880b      	ldrh	r3, [r1, #0]
    9be0:	2201      	movs	r2, #1
    9be2:	40aa      	lsls	r2, r5
    9be4:	4393      	bics	r3, r2
    9be6:	800b      	strh	r3, [r1, #0]
                    ATOMIC_SECTION_EXIT
    9be8:	4b10      	ldr	r3, [pc, #64]	; (9c2c <SYSTEM_RunTasks+0x64>)
    9bea:	4798      	blx	r3

                    /* Return value is not used now, can be used later */
                    taskHandlers[taskId]();
    9bec:	00ad      	lsls	r5, r5, #2
    9bee:	4b10      	ldr	r3, [pc, #64]	; (9c30 <SYSTEM_RunTasks+0x68>)
    9bf0:	58eb      	ldr	r3, [r5, r3]
    9bf2:	4798      	blx	r3
                if ((1 << taskId) & sysTaskFlag)
    9bf4:	2101      	movs	r1, #1
        while (sysTaskFlag)
    9bf6:	883b      	ldrh	r3, [r7, #0]
    9bf8:	b29b      	uxth	r3, r3
    9bfa:	2b00      	cmp	r3, #0
    9bfc:	d011      	beq.n	9c22 <SYSTEM_RunTasks+0x5a>
                if ((1 << taskId) & sysTaskFlag)
    9bfe:	8823      	ldrh	r3, [r4, #0]
    9c00:	420b      	tst	r3, r1
    9c02:	d1e8      	bne.n	9bd6 <SYSTEM_RunTasks+0xe>
    9c04:	2201      	movs	r2, #1
    9c06:	8833      	ldrh	r3, [r6, #0]
    9c08:	b29b      	uxth	r3, r3
    9c0a:	0015      	movs	r5, r2
    9c0c:	4113      	asrs	r3, r2
    9c0e:	4219      	tst	r1, r3
    9c10:	d1e2      	bne.n	9bd8 <SYSTEM_RunTasks+0x10>
    9c12:	3201      	adds	r2, #1
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
    9c14:	2a05      	cmp	r2, #5
    9c16:	d1f6      	bne.n	9c06 <SYSTEM_RunTasks+0x3e>
    9c18:	e7ed      	b.n	9bf6 <SYSTEM_RunTasks+0x2e>
        while (sysTaskFlag)
    9c1a:	4f02      	ldr	r7, [pc, #8]	; (9c24 <SYSTEM_RunTasks+0x5c>)
                if ((1 << taskId) & sysTaskFlag)
    9c1c:	003c      	movs	r4, r7
    9c1e:	003e      	movs	r6, r7
    9c20:	e7e8      	b.n	9bf4 <SYSTEM_RunTasks+0x2c>
        * Can happen only due to corruption, so halt
        * TODO : replace this with assert implementation
        */
        while(1);
    }
}
    9c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9c24:	20000e50 	.word	0x20000e50
    9c28:	00003d2d 	.word	0x00003d2d
    9c2c:	00003d39 	.word	0x00003d39
    9c30:	00019f10 	.word	0x00019f10

00009c34 <SYSTEM_PostTask>:

\param[in] task - ID of the posted task.
*************************************************************************/

void SYSTEM_PostTask(SYSTEM_Task_t task)
{
    9c34:	b510      	push	{r4, lr}
    9c36:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    9c38:	4b04      	ldr	r3, [pc, #16]	; (9c4c <SYSTEM_PostTask+0x18>)
    9c3a:	4798      	blx	r3
    sysTaskFlag |= task;
    9c3c:	4b04      	ldr	r3, [pc, #16]	; (9c50 <SYSTEM_PostTask+0x1c>)
    9c3e:	8818      	ldrh	r0, [r3, #0]
    9c40:	4320      	orrs	r0, r4
    9c42:	8018      	strh	r0, [r3, #0]
    ATOMIC_SECTION_EXIT
    9c44:	4b03      	ldr	r3, [pc, #12]	; (9c54 <SYSTEM_PostTask+0x20>)
    9c46:	4798      	blx	r3
}
    9c48:	bd10      	pop	{r4, pc}
    9c4a:	46c0      	nop			; (mov r8, r8)
    9c4c:	00003d2d 	.word	0x00003d2d
    9c50:	20000e50 	.word	0x20000e50
    9c54:	00003d39 	.word	0x00003d39

00009c58 <SYSTEM_ReadyToSleep>:

\return 'true' if the system is ready, 'false' otherwise
*************************************************************************/
bool SYSTEM_ReadyToSleep(void)
{
    return !(sysTaskFlag & 0xffff);
    9c58:	4b03      	ldr	r3, [pc, #12]	; (9c68 <SYSTEM_ReadyToSleep+0x10>)
    9c5a:	8818      	ldrh	r0, [r3, #0]
    9c5c:	b280      	uxth	r0, r0
    9c5e:	4243      	negs	r3, r0
    9c60:	4158      	adcs	r0, r3
    9c62:	b2c0      	uxtb	r0, r0
}
    9c64:	4770      	bx	lr
    9c66:	46c0      	nop			; (mov r8, r8)
    9c68:	20000e50 	.word	0x20000e50

00009c6c <Radio_WriteMode>:
\param newModulation	- Sets the modulation.
\param blocking			- Sets if its blocking call or not.
\return					- none.
*************************************************************************/
void Radio_WriteMode(RadioMode_t newMode, RadioModulation_t newModulation, uint8_t blocking)
{
    9c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9c6e:	46d6      	mov	lr, sl
    9c70:	464f      	mov	r7, r9
    9c72:	b580      	push	{r7, lr}
    9c74:	b083      	sub	sp, #12
    9c76:	9201      	str	r2, [sp, #4]
    uint8_t opMode;
    uint8_t dioMapping;
    RadioModulation_t currentModulation;
    RadioMode_t currentMode;

    if ((MODULATION_FSK == newModulation) &&
    9c78:	2900      	cmp	r1, #0
    9c7a:	d102      	bne.n	9c82 <Radio_WriteMode+0x16>
    9c7c:	1f83      	subs	r3, r0, #6
    9c7e:	2b01      	cmp	r3, #1
    9c80:	d92a      	bls.n	9cd8 <Radio_WriteMode+0x6c>
        // Unavailable modes for FSK. Just return.
        return;
    }

    // Sanity enforcement on parameters
    newMode &= 0x07;
    9c82:	2307      	movs	r3, #7
    9c84:	4699      	mov	r9, r3
    9c86:	001c      	movs	r4, r3
    9c88:	4004      	ands	r4, r0
    newModulation &= 0x01;
    9c8a:	2601      	movs	r6, #1
    9c8c:	400e      	ands	r6, r1

    opMode = RADIO_RegisterRead(REG_OPMODE);
    9c8e:	2001      	movs	r0, #1
    9c90:	4b2b      	ldr	r3, [pc, #172]	; (9d40 <Radio_WriteMode+0xd4>)
    9c92:	4798      	blx	r3
    9c94:	0005      	movs	r5, r0
    9c96:	0007      	movs	r7, r0

    if ((opMode & 0x80) != 0)
    9c98:	b243      	sxtb	r3, r0
    9c9a:	469a      	mov	sl, r3
    else
    {
        currentModulation = MODULATION_FSK;
    }

    currentMode = opMode & 0x07;
    9c9c:	464b      	mov	r3, r9
    9c9e:	4003      	ands	r3, r0

    // If we need to change modulation, we need to do this in sleep mode.
    // Otherwise, we can go straight to changing the current mode to newMode.
    if (newModulation != currentModulation)
    9ca0:	4652      	mov	r2, sl
    9ca2:	0fd2      	lsrs	r2, r2, #31
    9ca4:	4296      	cmp	r6, r2
    9ca6:	d00a      	beq.n	9cbe <Radio_WriteMode+0x52>
    {
        // Go to sleep
        if (MODE_SLEEP != currentMode)
    9ca8:	2b00      	cmp	r3, #0
    9caa:	d11a      	bne.n	9ce2 <Radio_WriteMode+0x76>
            // Clear mode bits, effectively going to sleep
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
            currentMode = MODE_SLEEP;
        }
        // Change modulation
        if (MODULATION_FSK == newModulation)
    9cac:	2e00      	cmp	r6, #0
    9cae:	d11e      	bne.n	9cee <Radio_WriteMode+0x82>
        {
            // Clear MSB and sleep bits to make it stay in sleep
            opMode = opMode & (~0x87);
    9cb0:	2778      	movs	r7, #120	; 0x78
    9cb2:	402f      	ands	r7, r5
        else
        {
            // LoRa mode. Set MSB and clear sleep bits to make it stay in sleep
            opMode = 0x80 | (opMode & (~0x87));
        }
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    9cb4:	0039      	movs	r1, r7
    9cb6:	2001      	movs	r0, #1
    9cb8:	4b22      	ldr	r3, [pc, #136]	; (9d44 <Radio_WriteMode+0xd8>)
    9cba:	4798      	blx	r3
    9cbc:	2300      	movs	r3, #0

    // From here on currentModulation is no longer current, we will use
    // newModulation instead as it reflects the chip configuration.
    // opMode reflects the actual configuration of the chip.

    if (newMode != currentMode)
    9cbe:	42a3      	cmp	r3, r4
    9cc0:	d00a      	beq.n	9cd8 <Radio_WriteMode+0x6c>
    {
        // If we need to block until the mode switch is ready, configure the
        // DIO5 pin to relay this information.
        if ((MODE_SLEEP != newMode) && (1 == blocking))
    9cc2:	2c00      	cmp	r4, #0
    9cc4:	d030      	beq.n	9d28 <Radio_WriteMode+0xbc>
    9cc6:	9b01      	ldr	r3, [sp, #4]
    9cc8:	2b01      	cmp	r3, #1
    9cca:	d016      	beq.n	9cfa <Radio_WriteMode+0x8e>
            }
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
        }

        // Do the actual mode switch.
        opMode &= ~0x07;                // Clear old mode bits
    9ccc:	21f8      	movs	r1, #248	; 0xf8
    9cce:	4039      	ands	r1, r7
        opMode |= newMode;              // Set new mode bits
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    9cd0:	4321      	orrs	r1, r4
    9cd2:	2001      	movs	r0, #1
    9cd4:	4b1b      	ldr	r3, [pc, #108]	; (9d44 <Radio_WriteMode+0xd8>)
    9cd6:	4798      	blx	r3
                SystemBlockingWaitMs(1);
            }
        }
    }
#endif
}
    9cd8:	b003      	add	sp, #12
    9cda:	bc0c      	pop	{r2, r3}
    9cdc:	4691      	mov	r9, r2
    9cde:	469a      	mov	sl, r3
    9ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
    9ce2:	21f8      	movs	r1, #248	; 0xf8
    9ce4:	4001      	ands	r1, r0
    9ce6:	2001      	movs	r0, #1
    9ce8:	4b16      	ldr	r3, [pc, #88]	; (9d44 <Radio_WriteMode+0xd8>)
    9cea:	4798      	blx	r3
    9cec:	e7de      	b.n	9cac <Radio_WriteMode+0x40>
            opMode = 0x80 | (opMode & (~0x87));
    9cee:	2778      	movs	r7, #120	; 0x78
    9cf0:	4653      	mov	r3, sl
    9cf2:	401f      	ands	r7, r3
    9cf4:	2180      	movs	r1, #128	; 0x80
    9cf6:	430f      	orrs	r7, r1
    9cf8:	e7dc      	b.n	9cb4 <Radio_WriteMode+0x48>
            dioMapping = RADIO_RegisterRead(REG_DIOMAPPING2);
    9cfa:	2041      	movs	r0, #65	; 0x41
    9cfc:	4b10      	ldr	r3, [pc, #64]	; (9d40 <Radio_WriteMode+0xd4>)
    9cfe:	4798      	blx	r3
            if (MODULATION_FSK == newModulation)
    9d00:	2e00      	cmp	r6, #0
    9d02:	d10e      	bne.n	9d22 <Radio_WriteMode+0xb6>
                dioMapping |= 0x30;     // DIO5 = 11 means ModeReady in FSK mode
    9d04:	2130      	movs	r1, #48	; 0x30
    9d06:	4301      	orrs	r1, r0
    9d08:	b2c9      	uxtb	r1, r1
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
    9d0a:	2041      	movs	r0, #65	; 0x41
    9d0c:	4d0d      	ldr	r5, [pc, #52]	; (9d44 <Radio_WriteMode+0xd8>)
    9d0e:	47a8      	blx	r5
        opMode &= ~0x07;                // Clear old mode bits
    9d10:	21f8      	movs	r1, #248	; 0xf8
    9d12:	4039      	ands	r1, r7
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    9d14:	4321      	orrs	r1, r4
    9d16:	2001      	movs	r0, #1
    9d18:	47a8      	blx	r5
			   delay_ms(1);
    9d1a:	2001      	movs	r0, #1
    9d1c:	4b0a      	ldr	r3, [pc, #40]	; (9d48 <Radio_WriteMode+0xdc>)
    9d1e:	4798      	blx	r3
    9d20:	e7da      	b.n	9cd8 <Radio_WriteMode+0x6c>
                dioMapping &= ~0x30;    // DIO5 = 00 means ModeReady in LoRa mode
    9d22:	21cf      	movs	r1, #207	; 0xcf
    9d24:	4001      	ands	r1, r0
    9d26:	e7f0      	b.n	9d0a <Radio_WriteMode+0x9e>
        opMode &= ~0x07;                // Clear old mode bits
    9d28:	21f8      	movs	r1, #248	; 0xf8
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    9d2a:	4039      	ands	r1, r7
    9d2c:	2001      	movs	r0, #1
    9d2e:	4b05      	ldr	r3, [pc, #20]	; (9d44 <Radio_WriteMode+0xd8>)
    9d30:	4798      	blx	r3
        if (1 == blocking)
    9d32:	9b01      	ldr	r3, [sp, #4]
    9d34:	2b01      	cmp	r3, #1
    9d36:	d1cf      	bne.n	9cd8 <Radio_WriteMode+0x6c>
                SystemBlockingWaitMs(1);
    9d38:	2001      	movs	r0, #1
    9d3a:	4b04      	ldr	r3, [pc, #16]	; (9d4c <Radio_WriteMode+0xe0>)
    9d3c:	4798      	blx	r3
    9d3e:	e7cb      	b.n	9cd8 <Radio_WriteMode+0x6c>
    9d40:	00003bc5 	.word	0x00003bc5
    9d44:	00003b9d 	.word	0x00003b9d
    9d48:	000001f1 	.word	0x000001f1
    9d4c:	00003d11 	.word	0x00003d11

00009d50 <RADIO_FHSSChangeChannel>:

\param		- none	
\return		- none.
*************************************************************************/
void RADIO_FHSSChangeChannel(void)
{
    9d50:	b500      	push	{lr}
    9d52:	b083      	sub	sp, #12
    uint32_t freq;
    RADIO_RegisterRead(REG_LORA_IRQFLAGS);
    9d54:	2012      	movs	r0, #18
    9d56:	4b0d      	ldr	r3, [pc, #52]	; (9d8c <RADIO_FHSSChangeChannel+0x3c>)
    9d58:	4798      	blx	r3

    if (radioConfiguration.frequencyHopPeriod)
    9d5a:	4b0d      	ldr	r3, [pc, #52]	; (9d90 <RADIO_FHSSChangeChannel+0x40>)
    9d5c:	8adb      	ldrh	r3, [r3, #22]
    9d5e:	2b00      	cmp	r3, #0
    9d60:	d007      	beq.n	9d72 <RADIO_FHSSChangeChannel+0x22>
    {
        if ((radioConfiguration.radioCallback) &&
    9d62:	4b0b      	ldr	r3, [pc, #44]	; (9d90 <RADIO_FHSSChangeChannel+0x40>)
    9d64:	691b      	ldr	r3, [r3, #16]
    9d66:	2b00      	cmp	r3, #0
    9d68:	d003      	beq.n	9d72 <RADIO_FHSSChangeChannel+0x22>
            (1 == radioCallbackMask.BitMask.radioFhssfreqCallback))
    9d6a:	4a0a      	ldr	r2, [pc, #40]	; (9d94 <RADIO_FHSSChangeChannel+0x44>)
    9d6c:	7812      	ldrb	r2, [r2, #0]
        if ((radioConfiguration.radioCallback) &&
    9d6e:	0692      	lsls	r2, r2, #26
    9d70:	d405      	bmi.n	9d7e <RADIO_FHSSChangeChannel+0x2e>
            Radio_WriteFrequency(freq);
        }
    }

    // Clear FHSSChangeChannel interrupt
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 1 << SHIFT1);
    9d72:	2102      	movs	r1, #2
    9d74:	2012      	movs	r0, #18
    9d76:	4b08      	ldr	r3, [pc, #32]	; (9d98 <RADIO_FHSSChangeChannel+0x48>)
    9d78:	4798      	blx	r3
}
    9d7a:	b003      	add	sp, #12
    9d7c:	bd00      	pop	{pc}
            radioConfiguration.radioCallback(RADIO_FHSS_NEXT_FREQ_CALLBACK, (void *)&freq);
    9d7e:	a901      	add	r1, sp, #4
    9d80:	2020      	movs	r0, #32
    9d82:	4798      	blx	r3
            Radio_WriteFrequency(freq);
    9d84:	9801      	ldr	r0, [sp, #4]
    9d86:	4b05      	ldr	r3, [pc, #20]	; (9d9c <RADIO_FHSSChangeChannel+0x4c>)
    9d88:	4798      	blx	r3
    9d8a:	e7f2      	b.n	9d72 <RADIO_FHSSChangeChannel+0x22>
    9d8c:	00003bc5 	.word	0x00003bc5
    9d90:	20001398 	.word	0x20001398
    9d94:	20001bce 	.word	0x20001bce
    9d98:	00003b9d 	.word	0x00003b9d
    9d9c:	0000ffc1 	.word	0x0000ffc1

00009da0 <RADIO_ReadRandom>:

\param		- none	
\return		- returns the random number generated.
*************************************************************************/
uint16_t RADIO_ReadRandom(void)
{
    9da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
    uint16_t retVal;
    retVal = 0;
	
	// Turn on the RF switch.
	Radio_EnableRfControl(RADIO_RFCTRL_RX); 
    9da2:	2000      	movs	r0, #0
    9da4:	4b1a      	ldr	r3, [pc, #104]	; (9e10 <RADIO_ReadRandom+0x70>)
    9da6:	4798      	blx	r3
	// Enabling Radio Clock
	Radio_SetClockInput();
    9da8:	4b1a      	ldr	r3, [pc, #104]	; (9e14 <RADIO_ReadRandom+0x74>)
    9daa:	4798      	blx	r3
	
    // Mask all interrupts, do many measurements of RSSI
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    9dac:	2201      	movs	r2, #1
    9dae:	2101      	movs	r1, #1
    9db0:	2000      	movs	r0, #0
    9db2:	4c19      	ldr	r4, [pc, #100]	; (9e18 <RADIO_ReadRandom+0x78>)
    9db4:	47a0      	blx	r4
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0xFF);
    9db6:	21ff      	movs	r1, #255	; 0xff
    9db8:	2011      	movs	r0, #17
    9dba:	4b18      	ldr	r3, [pc, #96]	; (9e1c <RADIO_ReadRandom+0x7c>)
    9dbc:	4798      	blx	r3
    Radio_WriteMode(MODE_RXCONT, MODULATION_LORA, 1);
    9dbe:	2201      	movs	r2, #1
    9dc0:	2101      	movs	r1, #1
    9dc2:	2005      	movs	r0, #5
    9dc4:	47a0      	blx	r4
    9dc6:	2410      	movs	r4, #16
    retVal = 0;
    9dc8:	2500      	movs	r5, #0
    for (i = 0; i < 16; i++)
    {
        SystemBlockingWaitMs(1);
    9dca:	4f15      	ldr	r7, [pc, #84]	; (9e20 <RADIO_ReadRandom+0x80>)
        retVal <<= SHIFT1;
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    9dcc:	4e15      	ldr	r6, [pc, #84]	; (9e24 <RADIO_ReadRandom+0x84>)
        SystemBlockingWaitMs(1);
    9dce:	2001      	movs	r0, #1
    9dd0:	47b8      	blx	r7
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    9dd2:	202c      	movs	r0, #44	; 0x2c
    9dd4:	47b0      	blx	r6
    9dd6:	2301      	movs	r3, #1
    9dd8:	4018      	ands	r0, r3
        retVal <<= SHIFT1;
    9dda:	006d      	lsls	r5, r5, #1
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    9ddc:	4305      	orrs	r5, r0
    9dde:	b2ad      	uxth	r5, r5
    9de0:	3c01      	subs	r4, #1
    9de2:	b2e4      	uxtb	r4, r4
    for (i = 0; i < 16; i++)
    9de4:	2c00      	cmp	r4, #0
    9de6:	d1f2      	bne.n	9dce <RADIO_ReadRandom+0x2e>
    }
	
	// Turning off the RF switch now.
	Radio_DisableRfControl(RADIO_RFCTRL_RX);
    9de8:	2000      	movs	r0, #0
    9dea:	4b0f      	ldr	r3, [pc, #60]	; (9e28 <RADIO_ReadRandom+0x88>)
    9dec:	4798      	blx	r3
	
    // Return radio to sleep
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    9dee:	2201      	movs	r2, #1
    9df0:	2101      	movs	r1, #1
    9df2:	2000      	movs	r0, #0
    9df4:	4b08      	ldr	r3, [pc, #32]	; (9e18 <RADIO_ReadRandom+0x78>)
    9df6:	4798      	blx	r3
    // Clear interrupts in case any have been generated
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 0xFF);
    9df8:	21ff      	movs	r1, #255	; 0xff
    9dfa:	2012      	movs	r0, #18
    9dfc:	4c07      	ldr	r4, [pc, #28]	; (9e1c <RADIO_ReadRandom+0x7c>)
    9dfe:	47a0      	blx	r4
    // Unmask all interrupts
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0x00);
    9e00:	2100      	movs	r1, #0
    9e02:	2011      	movs	r0, #17
    9e04:	47a0      	blx	r4
	// Disabling Radio Clock save power
	Radio_ResetClockInput();
    9e06:	4b09      	ldr	r3, [pc, #36]	; (9e2c <RADIO_ReadRandom+0x8c>)
    9e08:	4798      	blx	r3
	
    return retVal;
}
    9e0a:	0028      	movs	r0, r5
    9e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9e0e:	46c0      	nop			; (mov r8, r8)
    9e10:	0001087d 	.word	0x0001087d
    9e14:	00010d2d 	.word	0x00010d2d
    9e18:	00009c6d 	.word	0x00009c6d
    9e1c:	00003b9d 	.word	0x00003b9d
    9e20:	00003d11 	.word	0x00003d11
    9e24:	00003bc5 	.word	0x00003bc5
    9e28:	000109a5 	.word	0x000109a5
    9e2c:	00010d61 	.word	0x00010d61

00009e30 <Radio_ReadFSKRssi>:

\param rssi	- The RSSI measured in the channel.
\return		- ERR_NONE. Other types are not used now.
*************************************************************************/
RadioError_t Radio_ReadFSKRssi(int16_t *rssi)
{	
    9e30:	b510      	push	{r4, lr}
    9e32:	0004      	movs	r4, r0
#ifdef UT
	*rssi = testRssi;
#else // UT
	*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
    9e34:	2011      	movs	r0, #17
    9e36:	4b04      	ldr	r3, [pc, #16]	; (9e48 <Radio_ReadFSKRssi+0x18>)
    9e38:	4798      	blx	r3
    9e3a:	0840      	lsrs	r0, r0, #1
    9e3c:	b2c0      	uxtb	r0, r0
    9e3e:	4240      	negs	r0, r0
    9e40:	8020      	strh	r0, [r4, #0]
#endif // UT
	
	return ERR_NONE;
}
    9e42:	2000      	movs	r0, #0
    9e44:	bd10      	pop	{r4, pc}
    9e46:	46c0      	nop			; (mov r8, r8)
    9e48:	00003bc5 	.word	0x00003bc5

00009e4c <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    9e4c:	b510      	push	{r4, lr}
	tmr_cca_callback();
    9e4e:	4b01      	ldr	r3, [pc, #4]	; (9e54 <tc_cca_callback+0x8>)
    9e50:	4798      	blx	r3
}
    9e52:	bd10      	pop	{r4, pc}
    9e54:	0000b5f9 	.word	0x0000b5f9

00009e58 <tc_ovf_callback>:
{
    9e58:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    9e5a:	4b01      	ldr	r3, [pc, #4]	; (9e60 <tc_ovf_callback+0x8>)
    9e5c:	4798      	blx	r3
}
    9e5e:	bd10      	pop	{r4, pc}
    9e60:	0000b5b1 	.word	0x0000b5b1

00009e64 <tmr_read_count>:
{
    9e64:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    9e66:	4802      	ldr	r0, [pc, #8]	; (9e70 <tmr_read_count+0xc>)
    9e68:	4b02      	ldr	r3, [pc, #8]	; (9e74 <tmr_read_count+0x10>)
    9e6a:	4798      	blx	r3
    9e6c:	b280      	uxth	r0, r0
}
    9e6e:	bd10      	pop	{r4, pc}
    9e70:	2000142c 	.word	0x2000142c
    9e74:	000031e5 	.word	0x000031e5

00009e78 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    9e78:	4b03      	ldr	r3, [pc, #12]	; (9e88 <tmr_disable_cc_interrupt+0x10>)
    9e7a:	2110      	movs	r1, #16
    9e7c:	681a      	ldr	r2, [r3, #0]
    9e7e:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    9e80:	7e5a      	ldrb	r2, [r3, #25]
    9e82:	438a      	bics	r2, r1
    9e84:	765a      	strb	r2, [r3, #25]
}
    9e86:	4770      	bx	lr
    9e88:	2000142c 	.word	0x2000142c

00009e8c <tmr_enable_cc_interrupt>:
{
    9e8c:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    9e8e:	4c0b      	ldr	r4, [pc, #44]	; (9ebc <tmr_enable_cc_interrupt+0x30>)
	if (status_flags & TC_STATUS_COUNT_OVERFLOW) {
		int_flags |= TC_INTFLAG_OVF;
	}

	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = int_flags;
    9e90:	2510      	movs	r5, #16
    9e92:	6823      	ldr	r3, [r4, #0]
    9e94:	729d      	strb	r5, [r3, #10]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    9e96:	0018      	movs	r0, r3
    9e98:	4b09      	ldr	r3, [pc, #36]	; (9ec0 <tmr_enable_cc_interrupt+0x34>)
    9e9a:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    9e9c:	4b09      	ldr	r3, [pc, #36]	; (9ec4 <tmr_enable_cc_interrupt+0x38>)
    9e9e:	5c1b      	ldrb	r3, [r3, r0]
    9ea0:	221f      	movs	r2, #31
    9ea2:	401a      	ands	r2, r3
    9ea4:	2301      	movs	r3, #1
    9ea6:	4093      	lsls	r3, r2
    9ea8:	4a07      	ldr	r2, [pc, #28]	; (9ec8 <tmr_enable_cc_interrupt+0x3c>)
    9eaa:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    9eac:	7e63      	ldrb	r3, [r4, #25]
    9eae:	2210      	movs	r2, #16
    9eb0:	4313      	orrs	r3, r2
    9eb2:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    9eb4:	6823      	ldr	r3, [r4, #0]
    9eb6:	725d      	strb	r5, [r3, #9]
}
    9eb8:	bd70      	pop	{r4, r5, r6, pc}
    9eba:	46c0      	nop			; (mov r8, r8)
    9ebc:	2000142c 	.word	0x2000142c
    9ec0:	00002eb9 	.word	0x00002eb9
    9ec4:	00019f24 	.word	0x00019f24
    9ec8:	e000e100 	.word	0xe000e100

00009ecc <tmr_disable_ovf_interrupt>:
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(2);
		module->enable_callback_mask &= ~TC_INTFLAG_MC(2);
	}
	else {
		module->hw->COUNT8.INTENCLR.reg = (1 << callback_type);
    9ecc:	4b03      	ldr	r3, [pc, #12]	; (9edc <tmr_disable_ovf_interrupt+0x10>)
    9ece:	2101      	movs	r1, #1
    9ed0:	681a      	ldr	r2, [r3, #0]
    9ed2:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~(1 << callback_type);
    9ed4:	7e5a      	ldrb	r2, [r3, #25]
    9ed6:	438a      	bics	r2, r1
    9ed8:	765a      	strb	r2, [r3, #25]
}
    9eda:	4770      	bx	lr
    9edc:	2000142c 	.word	0x2000142c

00009ee0 <tmr_stop>:
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    9ee0:	4b06      	ldr	r3, [pc, #24]	; (9efc <tmr_stop+0x1c>)
    9ee2:	681a      	ldr	r2, [r3, #0]
	return (tc_module->SYNCBUSY.reg);
    9ee4:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    9ee6:	2b00      	cmp	r3, #0
    9ee8:	d1fc      	bne.n	9ee4 <tmr_stop+0x4>
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    9eea:	3333      	adds	r3, #51	; 0x33
    9eec:	7213      	strb	r3, [r2, #8]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    9eee:	7293      	strb	r3, [r2, #10]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    9ef0:	6813      	ldr	r3, [r2, #0]
    9ef2:	2102      	movs	r1, #2
    9ef4:	438b      	bics	r3, r1
    9ef6:	6013      	str	r3, [r2, #0]
}
    9ef8:	4770      	bx	lr
    9efa:	46c0      	nop			; (mov r8, r8)
    9efc:	2000142c 	.word	0x2000142c

00009f00 <tmr_write_cmpreg>:
{
    9f00:	b510      	push	{r4, lr}
    9f02:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    9f04:	2100      	movs	r1, #0
    9f06:	4802      	ldr	r0, [pc, #8]	; (9f10 <tmr_write_cmpreg+0x10>)
    9f08:	4b02      	ldr	r3, [pc, #8]	; (9f14 <tmr_write_cmpreg+0x14>)
    9f0a:	4798      	blx	r3
}
    9f0c:	bd10      	pop	{r4, pc}
    9f0e:	46c0      	nop			; (mov r8, r8)
    9f10:	2000142c 	.word	0x2000142c
    9f14:	00003225 	.word	0x00003225

00009f18 <save_cpu_interrupt>:
{
    9f18:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    9f1a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    9f1e:	425a      	negs	r2, r3
    9f20:	4153      	adcs	r3, r2
    9f22:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    9f24:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    9f26:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    9f2a:	2200      	movs	r2, #0
    9f2c:	4b02      	ldr	r3, [pc, #8]	; (9f38 <save_cpu_interrupt+0x20>)
    9f2e:	701a      	strb	r2, [r3, #0]
	return flags;
    9f30:	9801      	ldr	r0, [sp, #4]
	return cpu_irq_save();
    9f32:	b2c0      	uxtb	r0, r0
}
    9f34:	b002      	add	sp, #8
    9f36:	4770      	bx	lr
    9f38:	20000000 	.word	0x20000000

00009f3c <restore_cpu_interrupt>:
	if (cpu_irq_is_enabled_flags(flags))
    9f3c:	2800      	cmp	r0, #0
    9f3e:	d005      	beq.n	9f4c <restore_cpu_interrupt+0x10>
		cpu_irq_enable();
    9f40:	2201      	movs	r2, #1
    9f42:	4b03      	ldr	r3, [pc, #12]	; (9f50 <restore_cpu_interrupt+0x14>)
    9f44:	701a      	strb	r2, [r3, #0]
    9f46:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    9f4a:	b662      	cpsie	i
}
    9f4c:	4770      	bx	lr
    9f4e:	46c0      	nop			; (mov r8, r8)
    9f50:	20000000 	.word	0x20000000

00009f54 <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    9f54:	b570      	push	{r4, r5, r6, lr}
	config->clock_source               = GCLK_GENERATOR_0;
    9f56:	4a33      	ldr	r2, [pc, #204]	; (a024 <tmr_init+0xd0>)
    9f58:	2100      	movs	r1, #0
    9f5a:	2300      	movs	r3, #0
    9f5c:	7011      	strb	r1, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    9f5e:	70d1      	strb	r1, [r2, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    9f60:	2000      	movs	r0, #0
    9f62:	8091      	strh	r1, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    9f64:	7190      	strb	r0, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    9f66:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = false;
    9f68:	7053      	strb	r3, [r2, #1]
	config->on_demand                  = false;
    9f6a:	7093      	strb	r3, [r2, #2]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    9f6c:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    9f6e:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    9f70:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    9f72:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    9f74:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    9f76:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    9f78:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    9f7a:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    9f7c:	6151      	str	r1, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    9f7e:	6191      	str	r1, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    9f80:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    9f82:	6211      	str	r1, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    9f84:	6251      	str	r1, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    9f86:	8511      	strh	r1, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    9f88:	8591      	strh	r1, [r2, #44]	; 0x2c
	config->double_buffering_enabled = false;
    9f8a:	2334      	movs	r3, #52	; 0x34
    9f8c:	54d0      	strb	r0, [r2, r3]
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    9f8e:	3b35      	subs	r3, #53	; 0x35
    9f90:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    9f92:	4c25      	ldr	r4, [pc, #148]	; (a028 <tmr_init+0xd4>)
    9f94:	4925      	ldr	r1, [pc, #148]	; (a02c <tmr_init+0xd8>)
    9f96:	0020      	movs	r0, r4
    9f98:	4b25      	ldr	r3, [pc, #148]	; (a030 <tmr_init+0xdc>)
    9f9a:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    9f9c:	2200      	movs	r2, #0
    9f9e:	4925      	ldr	r1, [pc, #148]	; (a034 <tmr_init+0xe0>)
    9fa0:	0020      	movs	r0, r4
    9fa2:	4d25      	ldr	r5, [pc, #148]	; (a038 <tmr_init+0xe4>)
    9fa4:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    9fa6:	2202      	movs	r2, #2
    9fa8:	4924      	ldr	r1, [pc, #144]	; (a03c <tmr_init+0xe8>)
    9faa:	0020      	movs	r0, r4
    9fac:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    9fae:	6820      	ldr	r0, [r4, #0]
    9fb0:	4b23      	ldr	r3, [pc, #140]	; (a040 <tmr_init+0xec>)
    9fb2:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    9fb4:	4b23      	ldr	r3, [pc, #140]	; (a044 <tmr_init+0xf0>)
    9fb6:	5c1a      	ldrb	r2, [r3, r0]
    9fb8:	231f      	movs	r3, #31
    9fba:	4013      	ands	r3, r2
    9fbc:	2101      	movs	r1, #1
    9fbe:	000a      	movs	r2, r1
    9fc0:	409a      	lsls	r2, r3
    9fc2:	4b21      	ldr	r3, [pc, #132]	; (a048 <tmr_init+0xf4>)
    9fc4:	601a      	str	r2, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    9fc6:	7e63      	ldrb	r3, [r4, #25]
    9fc8:	2201      	movs	r2, #1
    9fca:	4313      	orrs	r3, r2
    9fcc:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    9fce:	6822      	ldr	r2, [r4, #0]
    9fd0:	7251      	strb	r1, [r2, #9]
	return (tc_module->SYNCBUSY.reg);
    9fd2:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    9fd4:	2b00      	cmp	r3, #0
    9fd6:	d1fc      	bne.n	9fd2 <tmr_init+0x7e>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    9fd8:	6813      	ldr	r3, [r2, #0]
    9fda:	2102      	movs	r1, #2
    9fdc:	430b      	orrs	r3, r1
    9fde:	6013      	str	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;	
    9fe0:	2000      	movs	r0, #0
    9fe2:	4b1a      	ldr	r3, [pc, #104]	; (a04c <tmr_init+0xf8>)
    9fe4:	4798      	blx	r3
    9fe6:	4d1a      	ldr	r5, [pc, #104]	; (a050 <tmr_init+0xfc>)
    9fe8:	47a8      	blx	r5
    9fea:	491a      	ldr	r1, [pc, #104]	; (a054 <tmr_init+0x100>)
    9fec:	4b1a      	ldr	r3, [pc, #104]	; (a058 <tmr_init+0x104>)
    9fee:	4798      	blx	r3
    9ff0:	1c04      	adds	r4, r0, #0
	#endif
	
	if ((timer_multiplier - (uint32_t)timer_multiplier) >= 0.5f)
    9ff2:	4b1a      	ldr	r3, [pc, #104]	; (a05c <tmr_init+0x108>)
    9ff4:	4798      	blx	r3
    9ff6:	47a8      	blx	r5
    9ff8:	1c01      	adds	r1, r0, #0
    9ffa:	1c20      	adds	r0, r4, #0
    9ffc:	4b18      	ldr	r3, [pc, #96]	; (a060 <tmr_init+0x10c>)
    9ffe:	4798      	blx	r3
    a000:	21fc      	movs	r1, #252	; 0xfc
    a002:	0589      	lsls	r1, r1, #22
    a004:	4b17      	ldr	r3, [pc, #92]	; (a064 <tmr_init+0x110>)
    a006:	4798      	blx	r3
    a008:	2800      	cmp	r0, #0
    a00a:	d005      	beq.n	a018 <tmr_init+0xc4>
	{
		timer_multiplier += 1.0f;
    a00c:	21fe      	movs	r1, #254	; 0xfe
    a00e:	0589      	lsls	r1, r1, #22
    a010:	1c20      	adds	r0, r4, #0
    a012:	4b15      	ldr	r3, [pc, #84]	; (a068 <tmr_init+0x114>)
    a014:	4798      	blx	r3
    a016:	1c04      	adds	r4, r0, #0
	}
	
	return (uint8_t) timer_multiplier;
    a018:	1c20      	adds	r0, r4, #0
    a01a:	4b10      	ldr	r3, [pc, #64]	; (a05c <tmr_init+0x108>)
    a01c:	4798      	blx	r3
    a01e:	b2c0      	uxtb	r0, r0
}
    a020:	bd70      	pop	{r4, r5, r6, pc}
    a022:	46c0      	nop			; (mov r8, r8)
    a024:	200013f4 	.word	0x200013f4
    a028:	2000142c 	.word	0x2000142c
    a02c:	42002000 	.word	0x42002000
    a030:	00002ef5 	.word	0x00002ef5
    a034:	00009e59 	.word	0x00009e59
    a038:	000032ad 	.word	0x000032ad
    a03c:	00009e4d 	.word	0x00009e4d
    a040:	00002eb9 	.word	0x00002eb9
    a044:	00019f24 	.word	0x00019f24
    a048:	e000e100 	.word	0xe000e100
    a04c:	00002c81 	.word	0x00002c81
    a050:	00012aa9 	.word	0x00012aa9
    a054:	49742400 	.word	0x49742400
    a058:	00012071 	.word	0x00012071
    a05c:	00011b5d 	.word	0x00011b5d
    a060:	00012691 	.word	0x00012691
    a064:	00011ab5 	.word	0x00011ab5
    a068:	00011d4d 	.word	0x00011d4d

0000a06c <CayenneLPP>:
uint8_t maxsize;
uint8_t cursor;
	
void CayenneLPP(uint8_t size)	
//Initialize the payload buffer with the given maximum size.
{
    a06c:	b510      	push	{r4, lr}
	buffer = (uint8_t*) malloc(size);
    a06e:	4b05      	ldr	r3, [pc, #20]	; (a084 <CayenneLPP+0x18>)
    a070:	4798      	blx	r3
    a072:	4b05      	ldr	r3, [pc, #20]	; (a088 <CayenneLPP+0x1c>)
    a074:	6018      	str	r0, [r3, #0]
	cursor = 0;
    a076:	2200      	movs	r2, #0
    a078:	4b04      	ldr	r3, [pc, #16]	; (a08c <CayenneLPP+0x20>)
    a07a:	701a      	strb	r2, [r3, #0]
	maxsize = 200;
    a07c:	32c8      	adds	r2, #200	; 0xc8
    a07e:	4b04      	ldr	r3, [pc, #16]	; (a090 <CayenneLPP+0x24>)
    a080:	701a      	strb	r2, [r3, #0]
}
    a082:	bd10      	pop	{r4, pc}
    a084:	00014951 	.word	0x00014951
    a088:	2000144c 	.word	0x2000144c
    a08c:	20001449 	.word	0x20001449
    a090:	20001448 	.word	0x20001448

0000a094 <FreeCayenneLPP>:

void FreeCayenneLPP(void)
{
	cursor = 0;
    a094:	2200      	movs	r2, #0
    a096:	4b01      	ldr	r3, [pc, #4]	; (a09c <FreeCayenneLPP+0x8>)
    a098:	701a      	strb	r2, [r3, #0]
}
    a09a:	4770      	bx	lr
    a09c:	20001449 	.word	0x20001449

0000a0a0 <getSize>:

void reset(void){
	cursor = 0;
}
uint8_t getSize(void){
	return cursor;
    a0a0:	4b01      	ldr	r3, [pc, #4]	; (a0a8 <getSize+0x8>)
    a0a2:	7818      	ldrb	r0, [r3, #0]
}
    a0a4:	4770      	bx	lr
    a0a6:	46c0      	nop			; (mov r8, r8)
    a0a8:	20001449 	.word	0x20001449

0000a0ac <getBuffer>:
uint8_t* getBuffer(void){
	return buffer;
    a0ac:	4b01      	ldr	r3, [pc, #4]	; (a0b4 <getBuffer+0x8>)
    a0ae:	6818      	ldr	r0, [r3, #0]
}
    a0b0:	4770      	bx	lr
    a0b2:	46c0      	nop			; (mov r8, r8)
    a0b4:	2000144c 	.word	0x2000144c

0000a0b8 <addAnalogInput>:

// Analog voltage
uint8_t addAnalogInput(uint8_t channel, float value){
    a0b8:	b510      	push	{r4, lr}
    a0ba:	0004      	movs	r4, r0
    if ((cursor + LPP_ANALOG_INPUT_SIZE) > maxsize) {
    a0bc:	4b10      	ldr	r3, [pc, #64]	; (a100 <addAnalogInput+0x48>)
    a0be:	781a      	ldrb	r2, [r3, #0]
    a0c0:	1d11      	adds	r1, r2, #4
    a0c2:	4b10      	ldr	r3, [pc, #64]	; (a104 <addAnalogInput+0x4c>)
    a0c4:	781b      	ldrb	r3, [r3, #0]
	    return 0;
    a0c6:	2000      	movs	r0, #0
    if ((cursor + LPP_ANALOG_INPUT_SIZE) > maxsize) {
    a0c8:	4299      	cmp	r1, r3
    a0ca:	dc18      	bgt.n	a0fe <addAnalogInput+0x46>
    }
    
    int16_t val = value * 100;
    buffer[cursor++] = channel;
    a0cc:	490e      	ldr	r1, [pc, #56]	; (a108 <addAnalogInput+0x50>)
    a0ce:	4b0c      	ldr	r3, [pc, #48]	; (a100 <addAnalogInput+0x48>)
    a0d0:	1c50      	adds	r0, r2, #1
    a0d2:	7018      	strb	r0, [r3, #0]
    a0d4:	6808      	ldr	r0, [r1, #0]
    a0d6:	5484      	strb	r4, [r0, r2]
    buffer[cursor++] = LPP_ANALOG_INPUT;
    a0d8:	781a      	ldrb	r2, [r3, #0]
    a0da:	1c50      	adds	r0, r2, #1
    a0dc:	7018      	strb	r0, [r3, #0]
    a0de:	2002      	movs	r0, #2
    a0e0:	680c      	ldr	r4, [r1, #0]
    a0e2:	54a0      	strb	r0, [r4, r2]
 //   buffer[cursor++] = val >> 8;
 //   buffer[cursor++] = val;
	
	buffer[cursor++] = 128;
    a0e4:	781a      	ldrb	r2, [r3, #0]
    a0e6:	1c50      	adds	r0, r2, #1
    a0e8:	7018      	strb	r0, [r3, #0]
    a0ea:	2080      	movs	r0, #128	; 0x80
    a0ec:	680c      	ldr	r4, [r1, #0]
    a0ee:	54a0      	strb	r0, [r4, r2]
	buffer[cursor++] = 1;
    a0f0:	6809      	ldr	r1, [r1, #0]
    a0f2:	781a      	ldrb	r2, [r3, #0]
    a0f4:	1c50      	adds	r0, r2, #1
    a0f6:	7018      	strb	r0, [r3, #0]
    a0f8:	2001      	movs	r0, #1
    a0fa:	5488      	strb	r0, [r1, r2]

    return cursor;
    a0fc:	7818      	ldrb	r0, [r3, #0]
}
    a0fe:	bd10      	pop	{r4, pc}
    a100:	20001449 	.word	0x20001449
    a104:	20001448 	.word	0x20001448
    a108:	2000144c 	.word	0x2000144c

0000a10c <addTemperature>:
// Temperature
uint8_t addTemperature(uint8_t channel, float celsius)
{
    a10c:	b510      	push	{r4, lr}
    a10e:	0004      	movs	r4, r0
	if ((cursor + LPP_TEMPERATURE_SIZE) > maxsize) {
    a110:	4b10      	ldr	r3, [pc, #64]	; (a154 <addTemperature+0x48>)
    a112:	781a      	ldrb	r2, [r3, #0]
    a114:	1d11      	adds	r1, r2, #4
    a116:	4b10      	ldr	r3, [pc, #64]	; (a158 <addTemperature+0x4c>)
    a118:	781b      	ldrb	r3, [r3, #0]
		return 0;
    a11a:	2000      	movs	r0, #0
	if ((cursor + LPP_TEMPERATURE_SIZE) > maxsize) {
    a11c:	4299      	cmp	r1, r3
    a11e:	dc18      	bgt.n	a152 <addTemperature+0x46>
	}
	int16_t val = celsius * 10;
	buffer[cursor++] = channel;
    a120:	490e      	ldr	r1, [pc, #56]	; (a15c <addTemperature+0x50>)
    a122:	4b0c      	ldr	r3, [pc, #48]	; (a154 <addTemperature+0x48>)
    a124:	1c50      	adds	r0, r2, #1
    a126:	7018      	strb	r0, [r3, #0]
    a128:	6808      	ldr	r0, [r1, #0]
    a12a:	5484      	strb	r4, [r0, r2]
	buffer[cursor++] = LPP_TEMPERATURE;
    a12c:	781a      	ldrb	r2, [r3, #0]
    a12e:	1c50      	adds	r0, r2, #1
    a130:	7018      	strb	r0, [r3, #0]
    a132:	2067      	movs	r0, #103	; 0x67
    a134:	680c      	ldr	r4, [r1, #0]
    a136:	54a0      	strb	r0, [r4, r2]
	
//	buffer[cursor++] = val >> 8;
//	buffer[cursor++] = val;

	buffer[cursor++] = 128;
    a138:	781a      	ldrb	r2, [r3, #0]
    a13a:	1c50      	adds	r0, r2, #1
    a13c:	7018      	strb	r0, [r3, #0]
    a13e:	2080      	movs	r0, #128	; 0x80
    a140:	680c      	ldr	r4, [r1, #0]
    a142:	54a0      	strb	r0, [r4, r2]
	buffer[cursor++] = 129;
    a144:	6809      	ldr	r1, [r1, #0]
    a146:	781a      	ldrb	r2, [r3, #0]
    a148:	1c50      	adds	r0, r2, #1
    a14a:	7018      	strb	r0, [r3, #0]
    a14c:	2081      	movs	r0, #129	; 0x81
    a14e:	5488      	strb	r0, [r1, r2]

	return cursor;
    a150:	7818      	ldrb	r0, [r3, #0]
    a152:	bd10      	pop	{r4, pc}
    a154:	20001449 	.word	0x20001449
    a158:	20001448 	.word	0x20001448
    a15c:	2000144c 	.word	0x2000144c

0000a160 <serialGetSensorData>:
	uint8_t identifyByte;
	// Sensor Data + CRC + CheckSum
	int i = 1;
//	identifyByte = sio2host_getchar();
	identifyByte = 0x24;
	rawSensorData[0] = identifyByte;
    a160:	4a0d      	ldr	r2, [pc, #52]	; (a198 <serialGetSensorData+0x38>)
    a162:	2324      	movs	r3, #36	; 0x24
    a164:	7013      	strb	r3, [r2, #0]
    a166:	3201      	adds	r2, #1
    a168:	3b1a      	subs	r3, #26
	
	uint8_t ss = 0;
	for (i = 1; i < 7; i++)
	{
		rawSensorData[i] = i*10;
    a16a:	7013      	strb	r3, [r2, #0]
    a16c:	330a      	adds	r3, #10
    a16e:	b2db      	uxtb	r3, r3
    a170:	3201      	adds	r2, #1
	for (i = 1; i < 7; i++)
    a172:	2b46      	cmp	r3, #70	; 0x46
    a174:	d1f9      	bne.n	a16a <serialGetSensorData+0xa>
		ss = ss + rawSensorData[i];
	}
	
	rawSensorData[7] = ss + identifyByte;
    a176:	22f6      	movs	r2, #246	; 0xf6
    a178:	4b07      	ldr	r3, [pc, #28]	; (a198 <serialGetSensorData+0x38>)
    a17a:	71da      	strb	r2, [r3, #7]
		if (sum == rawSensorData[6])
		return true;
		else return false;
		*/
		
		uint8_t sum = 0;
    a17c:	2000      	movs	r0, #0
		for (i =0; i < 7; i++)
    a17e:	2300      	movs	r3, #0
		{
			sum = sum + rawSensorData[i];
    a180:	4905      	ldr	r1, [pc, #20]	; (a198 <serialGetSensorData+0x38>)
    a182:	5cca      	ldrb	r2, [r1, r3]
    a184:	1880      	adds	r0, r0, r2
    a186:	b2c0      	uxtb	r0, r0
		for (i =0; i < 7; i++)
    a188:	3301      	adds	r3, #1
    a18a:	2b07      	cmp	r3, #7
    a18c:	d1f9      	bne.n	a182 <serialGetSensorData+0x22>
		}
		if (sum == rawSensorData[7])
    a18e:	38f6      	subs	r0, #246	; 0xf6
    a190:	4243      	negs	r3, r0
    a192:	4158      	adcs	r0, r3
    a194:	b2c0      	uxtb	r0, r0
		else return false;
	}
	else
		return false;

}
    a196:	4770      	bx	lr
    a198:	20001454 	.word	0x20001454

0000a19c <extractVoltage>:

uint16_t extractVoltage(void)
{
    a19c:	b510      	push	{r4, lr}
	uint16_t wd = 0;
	// Voltage (V) is a combination from Nibbles 5th - 7th values
	if (rawSensorData[0] == 0x24)
    a19e:	4b09      	ldr	r3, [pc, #36]	; (a1c4 <extractVoltage+0x28>)
    a1a0:	781b      	ldrb	r3, [r3, #0]
	uint16_t wd = 0;
    a1a2:	2400      	movs	r4, #0
	if (rawSensorData[0] == 0x24)
    a1a4:	2b24      	cmp	r3, #36	; 0x24
    a1a6:	d001      	beq.n	a1ac <extractVoltage+0x10>
		#if defined (ENABLE_SENSOR_DEBUG)
		printf("\r\nWind Direction(deg): %d \r\n",wd);
		#endif
	}
	return wd;
}
    a1a8:	0020      	movs	r0, r4
    a1aa:	bd10      	pop	{r4, pc}
		wd = (uint16_t) (rawSensorData[2]) + ((uint16_t) ((rawSensorData[3] & 80)) << 1);
    a1ac:	4a05      	ldr	r2, [pc, #20]	; (a1c4 <extractVoltage+0x28>)
    a1ae:	78d3      	ldrb	r3, [r2, #3]
    a1b0:	005b      	lsls	r3, r3, #1
    a1b2:	34a0      	adds	r4, #160	; 0xa0
    a1b4:	4023      	ands	r3, r4
    a1b6:	7894      	ldrb	r4, [r2, #2]
    a1b8:	18e4      	adds	r4, r4, r3
		printf("\r\nWind Direction(deg): %d \r\n",wd);
    a1ba:	0021      	movs	r1, r4
    a1bc:	4802      	ldr	r0, [pc, #8]	; (a1c8 <extractVoltage+0x2c>)
    a1be:	4b03      	ldr	r3, [pc, #12]	; (a1cc <extractVoltage+0x30>)
    a1c0:	4798      	blx	r3
    a1c2:	e7f1      	b.n	a1a8 <extractVoltage+0xc>
    a1c4:	20001454 	.word	0x20001454
    a1c8:	00019f2c 	.word	0x00019f2c
    a1cc:	00015005 	.word	0x00015005

0000a1d0 <extractTemperature>:

extern int transmission_interval;

double extractTemperature(void)
{
    a1d0:	b5d0      	push	{r4, r6, r7, lr}
	double temperature = 0;
	
	// read temperature data
	//temperature = TMP102_readHighTempF();
	temperature = TMP102_readTempC();
    a1d2:	4b16      	ldr	r3, [pc, #88]	; (a22c <extractTemperature+0x5c>)
    a1d4:	4798      	blx	r3
    a1d6:	1c04      	adds	r4, r0, #0
    a1d8:	4b15      	ldr	r3, [pc, #84]	; (a230 <extractTemperature+0x60>)
    a1da:	4798      	blx	r3
    a1dc:	0006      	movs	r6, r0
    a1de:	000f      	movs	r7, r1
	
	if (temperature <= 24.5 && temperature >= 23.5)
    a1e0:	4914      	ldr	r1, [pc, #80]	; (a234 <extractTemperature+0x64>)
    a1e2:	1c20      	adds	r0, r4, #0
    a1e4:	4b14      	ldr	r3, [pc, #80]	; (a238 <extractTemperature+0x68>)
    a1e6:	4798      	blx	r3
    a1e8:	2800      	cmp	r0, #0
    a1ea:	d005      	beq.n	a1f8 <extractTemperature+0x28>
    a1ec:	4913      	ldr	r1, [pc, #76]	; (a23c <extractTemperature+0x6c>)
    a1ee:	1c20      	adds	r0, r4, #0
    a1f0:	4b13      	ldr	r3, [pc, #76]	; (a240 <extractTemperature+0x70>)
    a1f2:	4798      	blx	r3
    a1f4:	2800      	cmp	r0, #0
    a1f6:	d111      	bne.n	a21c <extractTemperature+0x4c>
		transmission_interval = CUSTOM_APP_SLEEP_TIME_MS_1;
	else if (temperature >= 25.5 && temperature <= 26.5)
    a1f8:	4912      	ldr	r1, [pc, #72]	; (a244 <extractTemperature+0x74>)
    a1fa:	1c20      	adds	r0, r4, #0
    a1fc:	4b10      	ldr	r3, [pc, #64]	; (a240 <extractTemperature+0x70>)
    a1fe:	4798      	blx	r3
    a200:	2800      	cmp	r0, #0
    a202:	d005      	beq.n	a210 <extractTemperature+0x40>
    a204:	4910      	ldr	r1, [pc, #64]	; (a248 <extractTemperature+0x78>)
    a206:	1c20      	adds	r0, r4, #0
    a208:	4b0b      	ldr	r3, [pc, #44]	; (a238 <extractTemperature+0x68>)
    a20a:	4798      	blx	r3
    a20c:	2800      	cmp	r0, #0
    a20e:	d109      	bne.n	a224 <extractTemperature+0x54>
		transmission_interval = CUSTOM_APP_SLEEP_TIME_MS_2;
	else
		transmission_interval = DEMO_CONF_DEFAULT_APP_SLEEP_TIME_MS;
    a210:	4a0e      	ldr	r2, [pc, #56]	; (a24c <extractTemperature+0x7c>)
    a212:	4b0f      	ldr	r3, [pc, #60]	; (a250 <extractTemperature+0x80>)
    a214:	601a      	str	r2, [r3, #0]
	
	return temperature;
    a216:	0030      	movs	r0, r6
    a218:	0039      	movs	r1, r7
    a21a:	bdd0      	pop	{r4, r6, r7, pc}
		transmission_interval = CUSTOM_APP_SLEEP_TIME_MS_1;
    a21c:	4a0b      	ldr	r2, [pc, #44]	; (a24c <extractTemperature+0x7c>)
    a21e:	4b0c      	ldr	r3, [pc, #48]	; (a250 <extractTemperature+0x80>)
    a220:	601a      	str	r2, [r3, #0]
    a222:	e7f8      	b.n	a216 <extractTemperature+0x46>
		transmission_interval = CUSTOM_APP_SLEEP_TIME_MS_2;
    a224:	4a0b      	ldr	r2, [pc, #44]	; (a254 <extractTemperature+0x84>)
    a226:	4b0a      	ldr	r3, [pc, #40]	; (a250 <extractTemperature+0x80>)
    a228:	601a      	str	r2, [r3, #0]
    a22a:	e7f4      	b.n	a216 <extractTemperature+0x46>
    a22c:	0000a3d9 	.word	0x0000a3d9
    a230:	00014445 	.word	0x00014445
    a234:	41c40000 	.word	0x41c40000
    a238:	00011a8d 	.word	0x00011a8d
    a23c:	41bc0000 	.word	0x41bc0000
    a240:	00011ab5 	.word	0x00011ab5
    a244:	41cc0000 	.word	0x41cc0000
    a248:	41d40000 	.word	0x41d40000
    a24c:	00007530 	.word	0x00007530
    a250:	20000060 	.word	0x20000060
    a254:	00003a98 	.word	0x00003a98

0000a258 <configure_i2c_master1>:

struct i2c_master_module i2c_master_instance;
struct i2c_master_packet master_packet;

void   configure_i2c_master1(void)
{
    a258:	b530      	push	{r4, r5, lr}
    a25a:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    a25c:	aa01      	add	r2, sp, #4
    a25e:	2364      	movs	r3, #100	; 0x64
    a260:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    a262:	4b21      	ldr	r3, [pc, #132]	; (a2e8 <configure_i2c_master1+0x90>)
    a264:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    a266:	2300      	movs	r3, #0
    a268:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    a26a:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    a26c:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    a26e:	2180      	movs	r1, #128	; 0x80
    a270:	0389      	lsls	r1, r1, #14
    a272:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    a274:	2101      	movs	r1, #1
    a276:	4249      	negs	r1, r1
    a278:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    a27a:	3125      	adds	r1, #37	; 0x25
    a27c:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    a27e:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    a280:	3108      	adds	r1, #8
    a282:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    a284:	3101      	adds	r1, #1
    a286:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    a288:	3101      	adds	r1, #1
    a28a:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    a28c:	33d7      	adds	r3, #215	; 0xd7
    a28e:	8613      	strh	r3, [r2, #48]	; 0x30
	/* Create and initialize config structure */
	struct i2c_master_config config_i2c;
	i2c_master_get_config_defaults(&config_i2c);
	
	config_i2c.buffer_timeout = 1000;
    a290:	23fa      	movs	r3, #250	; 0xfa
    a292:	009b      	lsls	r3, r3, #2
    a294:	82d3      	strh	r3, [r2, #22]

	/* Change pins */
	config_i2c.pinmux_pad0  = PINMUX_PA16C_SERCOM1_PAD0;
    a296:	4b15      	ldr	r3, [pc, #84]	; (a2ec <configure_i2c_master1+0x94>)
    a298:	61d3      	str	r3, [r2, #28]
	config_i2c.pinmux_pad1  = PINMUX_PA17C_SERCOM1_PAD1;
    a29a:	4b15      	ldr	r3, [pc, #84]	; (a2f0 <configure_i2c_master1+0x98>)
    a29c:	6213      	str	r3, [r2, #32]

	/* Initialize and enable device with config */
	i2c_master_init(&i2c_master_instance, CONF_I2C_MODULE, &config_i2c);
    a29e:	4c15      	ldr	r4, [pc, #84]	; (a2f4 <configure_i2c_master1+0x9c>)
    a2a0:	4915      	ldr	r1, [pc, #84]	; (a2f8 <configure_i2c_master1+0xa0>)
    a2a2:	0020      	movs	r0, r4
    a2a4:	4b15      	ldr	r3, [pc, #84]	; (a2fc <configure_i2c_master1+0xa4>)
    a2a6:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    a2a8:	6824      	ldr	r4, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    a2aa:	2207      	movs	r2, #7
    a2ac:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    a2ae:	421a      	tst	r2, r3
    a2b0:	d1fc      	bne.n	a2ac <configure_i2c_master1+0x54>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    a2b2:	6823      	ldr	r3, [r4, #0]
    a2b4:	2202      	movs	r2, #2
    a2b6:	4313      	orrs	r3, r2
    a2b8:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    a2ba:	4d0e      	ldr	r5, [pc, #56]	; (a2f4 <configure_i2c_master1+0x9c>)
    a2bc:	6828      	ldr	r0, [r5, #0]
    a2be:	4b10      	ldr	r3, [pc, #64]	; (a300 <configure_i2c_master1+0xa8>)
    a2c0:	4798      	blx	r3
    a2c2:	231f      	movs	r3, #31
    a2c4:	4018      	ands	r0, r3
    a2c6:	3b1e      	subs	r3, #30
    a2c8:	4083      	lsls	r3, r0
    a2ca:	4a0e      	ldr	r2, [pc, #56]	; (a304 <configure_i2c_master1+0xac>)
    a2cc:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    a2ce:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    a2d0:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    a2d2:	2110      	movs	r1, #16
    a2d4:	8b62      	ldrh	r2, [r4, #26]
    a2d6:	420a      	tst	r2, r1
    a2d8:	d104      	bne.n	a2e4 <configure_i2c_master1+0x8c>
		timeout_counter++;
    a2da:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    a2dc:	4283      	cmp	r3, r0
    a2de:	d3f9      	bcc.n	a2d4 <configure_i2c_master1+0x7c>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    a2e0:	2310      	movs	r3, #16
    a2e2:	8363      	strh	r3, [r4, #26]

	i2c_master_enable(&i2c_master_instance);
}
    a2e4:	b00f      	add	sp, #60	; 0x3c
    a2e6:	bd30      	pop	{r4, r5, pc}
    a2e8:	00000d48 	.word	0x00000d48
    a2ec:	00100002 	.word	0x00100002
    a2f0:	00110002 	.word	0x00110002
    a2f4:	20001568 	.word	0x20001568
    a2f8:	42000400 	.word	0x42000400
    a2fc:	00000edd 	.word	0x00000edd
    a300:	00002585 	.word	0x00002585
    a304:	e000e100 	.word	0xe000e100

0000a308 <TMP102_begin>:
	TMP102_setLowTempF(84.0);  // set T_LOW in F
	//sensor0.setLowTempC(26.67); // set T_LOW in C
}

void TMP102_begin(void)
{
    a308:	b510      	push	{r4, lr}

	configure_i2c_master1();
    a30a:	4b07      	ldr	r3, [pc, #28]	; (a328 <TMP102_begin+0x20>)
    a30c:	4798      	blx	r3
	
	/** Send the request token */
	master_packet.address         = TMP102_address;
    a30e:	4b07      	ldr	r3, [pc, #28]	; (a32c <TMP102_begin+0x24>)
    a310:	2248      	movs	r2, #72	; 0x48
    a312:	801a      	strh	r2, [r3, #0]
	master_packet.data            = write_buffer;
    a314:	4a06      	ldr	r2, [pc, #24]	; (a330 <TMP102_begin+0x28>)
    a316:	605a      	str	r2, [r3, #4]
	master_packet.data_length     = sizeof(write_buffer);	
    a318:	2202      	movs	r2, #2
    a31a:	805a      	strh	r2, [r3, #2]
	master_packet.ten_bit_address = false;
    a31c:	2200      	movs	r2, #0
    a31e:	721a      	strb	r2, [r3, #8]
	master_packet.high_speed      = false;
    a320:	725a      	strb	r2, [r3, #9]
	master_packet.hs_master_code  = 0x0;
    a322:	729a      	strb	r2, [r3, #10]
	
}
    a324:	bd10      	pop	{r4, pc}
    a326:	46c0      	nop			; (mov r8, r8)
    a328:	0000a259 	.word	0x0000a259
    a32c:	2000155c 	.word	0x2000155c
    a330:	20000e58 	.word	0x20000e58

0000a334 <TMP102_openPointerRegister>:



void TMP102_openPointerRegister(uint8_t pointerReg)
{
    a334:	b570      	push	{r4, r5, r6, lr}
	
	write_buffer[0] = pointerReg;
    a336:	4a0c      	ldr	r2, [pc, #48]	; (a368 <TMP102_openPointerRegister+0x34>)
    a338:	7010      	strb	r0, [r2, #0]
	
	master_packet.address = TMP102_address;
    a33a:	4b0c      	ldr	r3, [pc, #48]	; (a36c <TMP102_openPointerRegister+0x38>)
    a33c:	2148      	movs	r1, #72	; 0x48
    a33e:	8019      	strh	r1, [r3, #0]
	master_packet.data = write_buffer;
    a340:	605a      	str	r2, [r3, #4]
	master_packet.data_length = 1;
    a342:	2201      	movs	r2, #1
    a344:	805a      	strh	r2, [r3, #2]
	while (i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &master_packet) != STATUS_OK) {
    a346:	001d      	movs	r5, r3
    a348:	4c09      	ldr	r4, [pc, #36]	; (a370 <TMP102_openPointerRegister+0x3c>)
    a34a:	4e0a      	ldr	r6, [pc, #40]	; (a374 <TMP102_openPointerRegister+0x40>)
    a34c:	0029      	movs	r1, r5
    a34e:	0020      	movs	r0, r4
    a350:	47b0      	blx	r6
    a352:	2800      	cmp	r0, #0
    a354:	d007      	beq.n	a366 <TMP102_openPointerRegister+0x32>
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == TIMEOUT) {
    a356:	4a08      	ldr	r2, [pc, #32]	; (a378 <TMP102_openPointerRegister+0x44>)
    a358:	6813      	ldr	r3, [r2, #0]
    a35a:	1c59      	adds	r1, r3, #1
    a35c:	6011      	str	r1, [r2, #0]
    a35e:	22fa      	movs	r2, #250	; 0xfa
    a360:	0092      	lsls	r2, r2, #2
    a362:	4293      	cmp	r3, r2
    a364:	d1f2      	bne.n	a34c <TMP102_openPointerRegister+0x18>
			return;
		}
	}
	
}
    a366:	bd70      	pop	{r4, r5, r6, pc}
    a368:	20000e58 	.word	0x20000e58
    a36c:	2000155c 	.word	0x2000155c
    a370:	20001568 	.word	0x20001568
    a374:	0000151d 	.word	0x0000151d
    a378:	20000e54 	.word	0x20000e54

0000a37c <TMP102_readRegister>:


uint8_t TMP102_readRegister(bool registerNumber){
    a37c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a37e:	b083      	sub	sp, #12
    a380:	0006      	movs	r6, r0
	uint8_t registerByte[2];	// We'll store the data from the registers here
	
	master_packet.address = TMP102_address;
    a382:	4b10      	ldr	r3, [pc, #64]	; (a3c4 <TMP102_readRegister+0x48>)
    a384:	2248      	movs	r2, #72	; 0x48
    a386:	801a      	strh	r2, [r3, #0]
	master_packet.data = read_buffer;
    a388:	4a0f      	ldr	r2, [pc, #60]	; (a3c8 <TMP102_readRegister+0x4c>)
    a38a:	605a      	str	r2, [r3, #4]
	master_packet.data_length = 2;
    a38c:	2202      	movs	r2, #2
    a38e:	805a      	strh	r2, [r3, #2]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &master_packet) != STATUS_OK) {
    a390:	001d      	movs	r5, r3
    a392:	4c0e      	ldr	r4, [pc, #56]	; (a3cc <TMP102_readRegister+0x50>)
    a394:	4f0e      	ldr	r7, [pc, #56]	; (a3d0 <TMP102_readRegister+0x54>)
    a396:	0029      	movs	r1, r5
    a398:	0020      	movs	r0, r4
    a39a:	47b8      	blx	r7
    a39c:	2800      	cmp	r0, #0
    a39e:	d008      	beq.n	a3b2 <TMP102_readRegister+0x36>
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == TIMEOUT) {
    a3a0:	4a0c      	ldr	r2, [pc, #48]	; (a3d4 <TMP102_readRegister+0x58>)
    a3a2:	6813      	ldr	r3, [r2, #0]
    a3a4:	1c59      	adds	r1, r3, #1
    a3a6:	6011      	str	r1, [r2, #0]
    a3a8:	22fa      	movs	r2, #250	; 0xfa
    a3aa:	0092      	lsls	r2, r2, #2
    a3ac:	4293      	cmp	r3, r2
    a3ae:	d1f2      	bne.n	a396 <TMP102_readRegister+0x1a>
    a3b0:	e006      	b.n	a3c0 <TMP102_readRegister+0x44>
			return;
		}
	}
	
	registerByte[0] = read_buffer[0];	// Read first byte
    a3b2:	ab01      	add	r3, sp, #4
    a3b4:	4a04      	ldr	r2, [pc, #16]	; (a3c8 <TMP102_readRegister+0x4c>)
    a3b6:	7811      	ldrb	r1, [r2, #0]
    a3b8:	7019      	strb	r1, [r3, #0]
	registerByte[1] = read_buffer[1];	// Read second byte
    a3ba:	7852      	ldrb	r2, [r2, #1]
    a3bc:	705a      	strb	r2, [r3, #1]
	
	
	return registerByte[registerNumber];
    a3be:	5d98      	ldrb	r0, [r3, r6]
}
    a3c0:	b003      	add	sp, #12
    a3c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a3c4:	2000155c 	.word	0x2000155c
    a3c8:	20001590 	.word	0x20001590
    a3cc:	20001568 	.word	0x20001568
    a3d0:	000014f9 	.word	0x000014f9
    a3d4:	20000e54 	.word	0x20000e54

0000a3d8 <TMP102_readTempC>:


float TMP102_readTempC(void)
{
    a3d8:	b570      	push	{r4, r5, r6, lr}
	uint8_t registerByte[2];	// Store the data from the register here
	int16_t digitalTemp;  // Temperature stored in TMP102 register
	
	// Read Temperature
	// Change pointer address to temperature register (0)
	TMP102_openPointerRegister(TEMPERATURE_REGISTER);
    a3da:	2000      	movs	r0, #0
    a3dc:	4b13      	ldr	r3, [pc, #76]	; (a42c <TMP102_readTempC+0x54>)
    a3de:	4798      	blx	r3
	// Read from temperature register
	registerByte[0] = TMP102_readRegister(0);
    a3e0:	2000      	movs	r0, #0
    a3e2:	4d13      	ldr	r5, [pc, #76]	; (a430 <TMP102_readTempC+0x58>)
    a3e4:	47a8      	blx	r5
    a3e6:	0004      	movs	r4, r0
	registerByte[1] = TMP102_readRegister(1);
    a3e8:	2001      	movs	r0, #1
    a3ea:	47a8      	blx	r5

	// Bit 0 of second byte will always be 0 in 12-bit readings and 1 in 13-bit
	if(registerByte[1]&0x01)	// 13 bit mode
    a3ec:	07c3      	lsls	r3, r0, #31
    a3ee:	d50a      	bpl.n	a406 <TMP102_readTempC+0x2e>
	{
		// Combine bytes to create a signed int
		digitalTemp = ((registerByte[0]) << 5) | (registerByte[1] >> 3);
    a3f0:	0164      	lsls	r4, r4, #5
    a3f2:	08c0      	lsrs	r0, r0, #3
    a3f4:	b2c0      	uxtb	r0, r0
    a3f6:	4320      	orrs	r0, r4
    a3f8:	b200      	sxth	r0, r0
		// Temperature data can be + or -, if it should be negative,
		// convert 13 bit to 16 bit and use the 2s compliment.
		if(digitalTemp > 0xFFF)
    a3fa:	4b0e      	ldr	r3, [pc, #56]	; (a434 <TMP102_readTempC+0x5c>)
    a3fc:	4298      	cmp	r0, r3
    a3fe:	dd0c      	ble.n	a41a <TMP102_readTempC+0x42>
		{
			digitalTemp |= 0xE000;
    a400:	4b0d      	ldr	r3, [pc, #52]	; (a438 <TMP102_readTempC+0x60>)
    a402:	4318      	orrs	r0, r3
    a404:	e009      	b.n	a41a <TMP102_readTempC+0x42>
		}
	}
	else	// 12 bit mode
	{
		// Combine bytes to create a signed int
		digitalTemp = ((registerByte[0]) << 4) | (registerByte[1] >> 4);
    a406:	0124      	lsls	r4, r4, #4
    a408:	0900      	lsrs	r0, r0, #4
    a40a:	b2c0      	uxtb	r0, r0
    a40c:	4320      	orrs	r0, r4
    a40e:	b200      	sxth	r0, r0
		// Temperature data can be + or -, if it should be negative,
		// convert 12 bit to 16 bit and use the 2s compliment.
		if(digitalTemp > 0x7FF)
    a410:	4b0a      	ldr	r3, [pc, #40]	; (a43c <TMP102_readTempC+0x64>)
    a412:	4298      	cmp	r0, r3
    a414:	dd01      	ble.n	a41a <TMP102_readTempC+0x42>
		{
			digitalTemp |= 0xF000;
    a416:	4b0a      	ldr	r3, [pc, #40]	; (a440 <TMP102_readTempC+0x68>)
    a418:	4318      	orrs	r0, r3
		}
	}
	// Convert digital reading to analog temperature (1-bit is equal to 0.0625 C)
	return digitalTemp*0.0625;
    a41a:	4b0a      	ldr	r3, [pc, #40]	; (a444 <TMP102_readTempC+0x6c>)
    a41c:	4798      	blx	r3
    a41e:	2200      	movs	r2, #0
    a420:	4b09      	ldr	r3, [pc, #36]	; (a448 <TMP102_readTempC+0x70>)
    a422:	4c0a      	ldr	r4, [pc, #40]	; (a44c <TMP102_readTempC+0x74>)
    a424:	47a0      	blx	r4
    a426:	4b0a      	ldr	r3, [pc, #40]	; (a450 <TMP102_readTempC+0x78>)
    a428:	4798      	blx	r3
}
    a42a:	bd70      	pop	{r4, r5, r6, pc}
    a42c:	0000a335 	.word	0x0000a335
    a430:	0000a37d 	.word	0x0000a37d
    a434:	00000fff 	.word	0x00000fff
    a438:	ffffe000 	.word	0xffffe000
    a43c:	000007ff 	.word	0x000007ff
    a440:	fffff000 	.word	0xfffff000
    a444:	00014351 	.word	0x00014351
    a448:	3fb00000 	.word	0x3fb00000
    a44c:	000137bd 	.word	0x000137bd
    a450:	000144e9 	.word	0x000144e9

0000a454 <TMP102_sleep>:
	}
}


void TMP102_sleep(void)
{
    a454:	b570      	push	{r4, r5, r6, lr}
	uint8_t registerByte; // Store the data from the register here

	// Change pointer address to configuration register (0x01)
	TMP102_openPointerRegister(CONFIG_REGISTER);
    a456:	2001      	movs	r0, #1
    a458:	4b10      	ldr	r3, [pc, #64]	; (a49c <TMP102_sleep+0x48>)
    a45a:	4798      	blx	r3
	
	// Read current configuration register value
	registerByte = TMP102_readRegister(0);
    a45c:	2000      	movs	r0, #0
    a45e:	4b10      	ldr	r3, [pc, #64]	; (a4a0 <TMP102_sleep+0x4c>)
    a460:	4798      	blx	r3

	registerByte |= 0x01;	// Set SD (bit 0 of first byte)

	// Set configuration register	
	write_buffer[0] = CONFIG_REGISTER;
    a462:	4a10      	ldr	r2, [pc, #64]	; (a4a4 <TMP102_sleep+0x50>)
    a464:	2301      	movs	r3, #1
    a466:	7013      	strb	r3, [r2, #0]
	registerByte |= 0x01;	// Set SD (bit 0 of first byte)
    a468:	4318      	orrs	r0, r3
	write_buffer[1] = registerByte;
    a46a:	7050      	strb	r0, [r2, #1]
	
	master_packet.address = TMP102_address;
    a46c:	4b0e      	ldr	r3, [pc, #56]	; (a4a8 <TMP102_sleep+0x54>)
    a46e:	2148      	movs	r1, #72	; 0x48
    a470:	8019      	strh	r1, [r3, #0]
	master_packet.data = write_buffer;
    a472:	605a      	str	r2, [r3, #4]
	master_packet.data_length = 2;
    a474:	2202      	movs	r2, #2
    a476:	805a      	strh	r2, [r3, #2]
	while (i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &master_packet) != STATUS_OK) {
    a478:	001d      	movs	r5, r3
    a47a:	4c0c      	ldr	r4, [pc, #48]	; (a4ac <TMP102_sleep+0x58>)
    a47c:	4e0c      	ldr	r6, [pc, #48]	; (a4b0 <TMP102_sleep+0x5c>)
    a47e:	0029      	movs	r1, r5
    a480:	0020      	movs	r0, r4
    a482:	47b0      	blx	r6
    a484:	2800      	cmp	r0, #0
    a486:	d007      	beq.n	a498 <TMP102_sleep+0x44>
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == TIMEOUT) {
    a488:	4a0a      	ldr	r2, [pc, #40]	; (a4b4 <TMP102_sleep+0x60>)
    a48a:	6813      	ldr	r3, [r2, #0]
    a48c:	1c59      	adds	r1, r3, #1
    a48e:	6011      	str	r1, [r2, #0]
    a490:	22fa      	movs	r2, #250	; 0xfa
    a492:	0092      	lsls	r2, r2, #2
    a494:	4293      	cmp	r3, r2
    a496:	d1f2      	bne.n	a47e <TMP102_sleep+0x2a>
			return;
		}
	}
}
    a498:	bd70      	pop	{r4, r5, r6, pc}
    a49a:	46c0      	nop			; (mov r8, r8)
    a49c:	0000a335 	.word	0x0000a335
    a4a0:	0000a37d 	.word	0x0000a37d
    a4a4:	20000e58 	.word	0x20000e58
    a4a8:	2000155c 	.word	0x2000155c
    a4ac:	20001568 	.word	0x20001568
    a4b0:	0000151d 	.word	0x0000151d
    a4b4:	20000e54 	.word	0x20000e54

0000a4b8 <TMP102_wakeup>:


void TMP102_wakeup(void)
{
    a4b8:	b570      	push	{r4, r5, r6, lr}
	uint8_t registerByte; // Store the data from the register here

	// Change pointer address to configuration register (1)
	TMP102_openPointerRegister(CONFIG_REGISTER);
    a4ba:	2001      	movs	r0, #1
    a4bc:	4b10      	ldr	r3, [pc, #64]	; (a500 <TMP102_wakeup+0x48>)
    a4be:	4798      	blx	r3
	
	// Read current configuration register value
	registerByte = TMP102_readRegister(0);
    a4c0:	2000      	movs	r0, #0
    a4c2:	4b10      	ldr	r3, [pc, #64]	; (a504 <TMP102_wakeup+0x4c>)
    a4c4:	4798      	blx	r3

	registerByte &= 0xFE;	// Clear SD (bit 0 of first byte)

	// Set configuration registers	
	write_buffer[0] = CONFIG_REGISTER;
    a4c6:	4a10      	ldr	r2, [pc, #64]	; (a508 <TMP102_wakeup+0x50>)
    a4c8:	2301      	movs	r3, #1
    a4ca:	7013      	strb	r3, [r2, #0]
	registerByte &= 0xFE;	// Clear SD (bit 0 of first byte)
    a4cc:	4398      	bics	r0, r3
	write_buffer[1] = registerByte;
    a4ce:	7050      	strb	r0, [r2, #1]
	
	master_packet.address = TMP102_address;
    a4d0:	4b0e      	ldr	r3, [pc, #56]	; (a50c <TMP102_wakeup+0x54>)
    a4d2:	2148      	movs	r1, #72	; 0x48
    a4d4:	8019      	strh	r1, [r3, #0]
	master_packet.data = write_buffer;
    a4d6:	605a      	str	r2, [r3, #4]
	master_packet.data_length = 2;
    a4d8:	2202      	movs	r2, #2
    a4da:	805a      	strh	r2, [r3, #2]
	while (i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &master_packet) != STATUS_OK) {
    a4dc:	001d      	movs	r5, r3
    a4de:	4c0c      	ldr	r4, [pc, #48]	; (a510 <TMP102_wakeup+0x58>)
    a4e0:	4e0c      	ldr	r6, [pc, #48]	; (a514 <TMP102_wakeup+0x5c>)
    a4e2:	0029      	movs	r1, r5
    a4e4:	0020      	movs	r0, r4
    a4e6:	47b0      	blx	r6
    a4e8:	2800      	cmp	r0, #0
    a4ea:	d007      	beq.n	a4fc <TMP102_wakeup+0x44>
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == TIMEOUT) {
    a4ec:	4a0a      	ldr	r2, [pc, #40]	; (a518 <TMP102_wakeup+0x60>)
    a4ee:	6813      	ldr	r3, [r2, #0]
    a4f0:	1c59      	adds	r1, r3, #1
    a4f2:	6011      	str	r1, [r2, #0]
    a4f4:	22fa      	movs	r2, #250	; 0xfa
    a4f6:	0092      	lsls	r2, r2, #2
    a4f8:	4293      	cmp	r3, r2
    a4fa:	d1f2      	bne.n	a4e2 <TMP102_wakeup+0x2a>
			return;
		}
	}
}
    a4fc:	bd70      	pop	{r4, r5, r6, pc}
    a4fe:	46c0      	nop			; (mov r8, r8)
    a500:	0000a335 	.word	0x0000a335
    a504:	0000a37d 	.word	0x0000a37d
    a508:	20000e58 	.word	0x20000e58
    a50c:	2000155c 	.word	0x2000155c
    a510:	20001568 	.word	0x20001568
    a514:	0000151d 	.word	0x0000151d
    a518:	20000e54 	.word	0x20000e54

0000a51c <lTimerCb>:
    //appPostTask(DISPLAY_TASK_HANDLER);
	appPostTask(PROCESS_TASK_HANDLER);
}

void lTimerCb(void *data)
{
    a51c:	b510      	push	{r4, lr}
    a51e:	b082      	sub	sp, #8
    SwTimerStart(lTimerId,MS_TO_US(100),SW_TIMEOUT_RELATIVE,(void *)lTimerCb,NULL);
    a520:	4b07      	ldr	r3, [pc, #28]	; (a540 <lTimerCb+0x24>)
    a522:	7818      	ldrb	r0, [r3, #0]
    a524:	2300      	movs	r3, #0
    a526:	9300      	str	r3, [sp, #0]
    a528:	4b06      	ldr	r3, [pc, #24]	; (a544 <lTimerCb+0x28>)
    a52a:	2200      	movs	r2, #0
    a52c:	4906      	ldr	r1, [pc, #24]	; (a548 <lTimerCb+0x2c>)
    a52e:	4c07      	ldr	r4, [pc, #28]	; (a54c <lTimerCb+0x30>)
    a530:	47a0      	blx	r4
    set_LED_data(LED_GREEN,&toggle);
    a532:	4907      	ldr	r1, [pc, #28]	; (a550 <lTimerCb+0x34>)
    a534:	2003      	movs	r0, #3
    a536:	4b07      	ldr	r3, [pc, #28]	; (a554 <lTimerCb+0x38>)
    a538:	4798      	blx	r3
}
    a53a:	b002      	add	sp, #8
    a53c:	bd10      	pop	{r4, pc}
    a53e:	46c0      	nop			; (mov r8, r8)
    a540:	2000005f 	.word	0x2000005f
    a544:	0000a51d 	.word	0x0000a51d
    a548:	000186a0 	.word	0x000186a0
    a54c:	00009609 	.word	0x00009609
    a550:	2000005d 	.word	0x2000005d
    a554:	00009201 	.word	0x00009201

0000a558 <appPostTask>:
 \brief      App Post Task
 \param[in]  Id of the application to be posted
 ************************************************************************/

void appPostTask(AppTaskIds_t id)
{
    a558:	b510      	push	{r4, lr}
    a55a:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    a55c:	4b07      	ldr	r3, [pc, #28]	; (a57c <appPostTask+0x24>)
    a55e:	4798      	blx	r3
    appTaskFlags |= (1 << id);
    a560:	4907      	ldr	r1, [pc, #28]	; (a580 <appPostTask+0x28>)
    a562:	780b      	ldrb	r3, [r1, #0]
    a564:	2201      	movs	r2, #1
    a566:	40a2      	lsls	r2, r4
    a568:	4313      	orrs	r3, r2
    a56a:	b2db      	uxtb	r3, r3
    a56c:	700b      	strb	r3, [r1, #0]
    ATOMIC_SECTION_EXIT
    a56e:	4b05      	ldr	r3, [pc, #20]	; (a584 <appPostTask+0x2c>)
    a570:	4798      	blx	r3

    /* Also post a APP task to the system */
    SYSTEM_PostTask(APP_TASK_ID);
    a572:	2010      	movs	r0, #16
    a574:	4b04      	ldr	r3, [pc, #16]	; (a588 <appPostTask+0x30>)
    a576:	4798      	blx	r3
}
    a578:	bd10      	pop	{r4, pc}
    a57a:	46c0      	nop			; (mov r8, r8)
    a57c:	00003d2d 	.word	0x00003d2d
    a580:	20000e5a 	.word	0x20000e5a
    a584:	00003d39 	.word	0x00003d39
    a588:	00009c35 	.word	0x00009c35

0000a58c <mote_demo_init>:
{
    a58c:	b510      	push	{r4, lr}
    resource_init();
    a58e:	4b08      	ldr	r3, [pc, #32]	; (a5b0 <mote_demo_init+0x24>)
    a590:	4798      	blx	r3
	startReceiving = false;
    a592:	2200      	movs	r2, #0
    a594:	4b07      	ldr	r3, [pc, #28]	; (a5b4 <mote_demo_init+0x28>)
    a596:	701a      	strb	r2, [r3, #0]
    LORAWAN_Init(demo_appdata_callback, demo_joindata_callback);
    a598:	4907      	ldr	r1, [pc, #28]	; (a5b8 <mote_demo_init+0x2c>)
    a59a:	4808      	ldr	r0, [pc, #32]	; (a5bc <mote_demo_init+0x30>)
    a59c:	4b08      	ldr	r3, [pc, #32]	; (a5c0 <mote_demo_init+0x34>)
    a59e:	4798      	blx	r3
    appTaskState = DEMO_CERT_APP_STATE;
    a5a0:	2201      	movs	r2, #1
    a5a2:	4b08      	ldr	r3, [pc, #32]	; (a5c4 <mote_demo_init+0x38>)
    a5a4:	701a      	strb	r2, [r3, #0]
	appPostTask(PROCESS_TASK_HANDLER);
    a5a6:	2001      	movs	r0, #1
    a5a8:	4b07      	ldr	r3, [pc, #28]	; (a5c8 <mote_demo_init+0x3c>)
    a5aa:	4798      	blx	r3
}
    a5ac:	bd10      	pop	{r4, pc}
    a5ae:	46c0      	nop			; (mov r8, r8)
    a5b0:	00009271 	.word	0x00009271
    a5b4:	20000e6c 	.word	0x20000e6c
    a5b8:	0000ad61 	.word	0x0000ad61
    a5bc:	0000a5cd 	.word	0x0000a5cd
    a5c0:	0000bbc9 	.word	0x0000bbc9
    a5c4:	20000e5b 	.word	0x20000e5b
    a5c8:	0000a559 	.word	0x0000a559

0000a5cc <demo_appdata_callback>:
{
    a5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (LORAWAN_EVT_RX_DATA_AVAILABLE == appdata->evt)
    a5ce:	780b      	ldrb	r3, [r1, #0]
    a5d0:	2b02      	cmp	r3, #2
    a5d2:	d011      	beq.n	a5f8 <demo_appdata_callback+0x2c>
    else if(LORAWAN_EVT_TRANSACTION_COMPLETE == appdata->evt)
    a5d4:	2b04      	cmp	r3, #4
    a5d6:	d100      	bne.n	a5da <demo_appdata_callback+0xe>
    a5d8:	e0ac      	b.n	a734 <demo_appdata_callback+0x168>
    SwTimerStop(lTimerId);
    a5da:	4b99      	ldr	r3, [pc, #612]	; (a840 <demo_appdata_callback+0x274>)
    a5dc:	7818      	ldrb	r0, [r3, #0]
    a5de:	4b99      	ldr	r3, [pc, #612]	; (a844 <demo_appdata_callback+0x278>)
    a5e0:	4798      	blx	r3
        set_LED_data(LED_AMBER,&on);
    a5e2:	4999      	ldr	r1, [pc, #612]	; (a848 <demo_appdata_callback+0x27c>)
    a5e4:	2002      	movs	r0, #2
    a5e6:	4b99      	ldr	r3, [pc, #612]	; (a84c <demo_appdata_callback+0x280>)
    a5e8:	4798      	blx	r3
	appTaskState = JOIN_SEND_STATE;
    a5ea:	2203      	movs	r2, #3
    a5ec:	4b98      	ldr	r3, [pc, #608]	; (a850 <demo_appdata_callback+0x284>)
    a5ee:	701a      	strb	r2, [r3, #0]
    appPostTask(DISPLAY_TASK_HANDLER);
    a5f0:	2000      	movs	r0, #0
    a5f2:	4b98      	ldr	r3, [pc, #608]	; (a854 <demo_appdata_callback+0x288>)
    a5f4:	4798      	blx	r3
}
    a5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        status = appdata->param.rxData.status;
    a5f8:	7b4c      	ldrb	r4, [r1, #13]
        switch(status)
    a5fa:	2c1e      	cmp	r4, #30
    a5fc:	d900      	bls.n	a600 <demo_appdata_callback+0x34>
    a5fe:	e095      	b.n	a72c <demo_appdata_callback+0x160>
    a600:	00a3      	lsls	r3, r4, #2
    a602:	4a95      	ldr	r2, [pc, #596]	; (a858 <demo_appdata_callback+0x28c>)
    a604:	58d3      	ldr	r3, [r2, r3]
    a606:	469f      	mov	pc, r3
    uint8_t dataLength = appdata->param.rxData.dataLength;
    a608:	7b0e      	ldrb	r6, [r1, #12]
    if((dataLength > 0U) && (NULL != pData))
    a60a:	2e00      	cmp	r6, #0
    a60c:	d022      	beq.n	a654 <demo_appdata_callback+0x88>
    uint8_t *pData = appdata->param.rxData.pData;
    a60e:	688f      	ldr	r7, [r1, #8]
    if((dataLength > 0U) && (NULL != pData))
    a610:	2f00      	cmp	r7, #0
    a612:	d01f      	beq.n	a654 <demo_appdata_callback+0x88>
    uint32_t devAddress = appdata->param.rxData.devAddr;
    a614:	684d      	ldr	r5, [r1, #4]
        printf("*** Received DL Data ***\n\r");
    a616:	4891      	ldr	r0, [pc, #580]	; (a85c <demo_appdata_callback+0x290>)
    a618:	4c91      	ldr	r4, [pc, #580]	; (a860 <demo_appdata_callback+0x294>)
    a61a:	47a0      	blx	r4
        printf("\nFrame Received at port %d\n\r",pData[0]);
    a61c:	7839      	ldrb	r1, [r7, #0]
    a61e:	4891      	ldr	r0, [pc, #580]	; (a864 <demo_appdata_callback+0x298>)
    a620:	47a0      	blx	r4
        printf("\nFrame Length - %d\n\r",dataLength);
    a622:	0031      	movs	r1, r6
    a624:	4890      	ldr	r0, [pc, #576]	; (a868 <demo_appdata_callback+0x29c>)
    a626:	47a0      	blx	r4
        printf("\nAddress - 0x%lx\n\r", devAddress);
    a628:	0029      	movs	r1, r5
    a62a:	4890      	ldr	r0, [pc, #576]	; (a86c <demo_appdata_callback+0x2a0>)
    a62c:	47a0      	blx	r4
        printf ("\nPayload: ");
    a62e:	4890      	ldr	r0, [pc, #576]	; (a870 <demo_appdata_callback+0x2a4>)
    a630:	47a0      	blx	r4
        for (uint8_t i =0; i<dataLength - 1; i++)
    a632:	3e01      	subs	r6, #1
    a634:	2e00      	cmp	r6, #0
    a636:	dd09      	ble.n	a64c <demo_appdata_callback+0x80>
    a638:	2400      	movs	r4, #0
            printf("%x",pData[i+1]);
    a63a:	4d89      	ldr	r5, [pc, #548]	; (a860 <demo_appdata_callback+0x294>)
    a63c:	193b      	adds	r3, r7, r4
    a63e:	7859      	ldrb	r1, [r3, #1]
    a640:	488c      	ldr	r0, [pc, #560]	; (a874 <demo_appdata_callback+0x2a8>)
    a642:	47a8      	blx	r5
        for (uint8_t i =0; i<dataLength - 1; i++)
    a644:	3401      	adds	r4, #1
    a646:	b2e4      	uxtb	r4, r4
    a648:	42b4      	cmp	r4, r6
    a64a:	dbf7      	blt.n	a63c <demo_appdata_callback+0x70>
        printf("\r\n*************************\r\n");
    a64c:	488a      	ldr	r0, [pc, #552]	; (a878 <demo_appdata_callback+0x2ac>)
    a64e:	4b8b      	ldr	r3, [pc, #556]	; (a87c <demo_appdata_callback+0x2b0>)
    a650:	4798      	blx	r3
    a652:	e002      	b.n	a65a <demo_appdata_callback+0x8e>
        printf("Received ACK for Confirmed data\r\n");
    a654:	488a      	ldr	r0, [pc, #552]	; (a880 <demo_appdata_callback+0x2b4>)
    a656:	4b89      	ldr	r3, [pc, #548]	; (a87c <demo_appdata_callback+0x2b0>)
    a658:	4798      	blx	r3
    SwTimerStop(lTimerId);
    a65a:	4b79      	ldr	r3, [pc, #484]	; (a840 <demo_appdata_callback+0x274>)
    a65c:	7818      	ldrb	r0, [r3, #0]
    a65e:	4b79      	ldr	r3, [pc, #484]	; (a844 <demo_appdata_callback+0x278>)
    a660:	4798      	blx	r3
    a662:	e7c2      	b.n	a5ea <demo_appdata_callback+0x1e>
                printf("\n\rRADIO_NO_DATA \n\r");
    a664:	4887      	ldr	r0, [pc, #540]	; (a884 <demo_appdata_callback+0x2b8>)
    a666:	4b7e      	ldr	r3, [pc, #504]	; (a860 <demo_appdata_callback+0x294>)
    a668:	4798      	blx	r3
            break;
    a66a:	e7b6      	b.n	a5da <demo_appdata_callback+0xe>
                printf("\n\rRADIO_DATA_SIZE \n\r");
    a66c:	4886      	ldr	r0, [pc, #536]	; (a888 <demo_appdata_callback+0x2bc>)
    a66e:	4b7c      	ldr	r3, [pc, #496]	; (a860 <demo_appdata_callback+0x294>)
    a670:	4798      	blx	r3
            break;
    a672:	e7b2      	b.n	a5da <demo_appdata_callback+0xe>
                printf("\n\rRADIO_INVALID_REQ \n\r");
    a674:	4885      	ldr	r0, [pc, #532]	; (a88c <demo_appdata_callback+0x2c0>)
    a676:	4b7a      	ldr	r3, [pc, #488]	; (a860 <demo_appdata_callback+0x294>)
    a678:	4798      	blx	r3
            break;
    a67a:	e7ae      	b.n	a5da <demo_appdata_callback+0xe>
                printf("\n\rRADIO_BUSY \n\r");
    a67c:	4884      	ldr	r0, [pc, #528]	; (a890 <demo_appdata_callback+0x2c4>)
    a67e:	4b78      	ldr	r3, [pc, #480]	; (a860 <demo_appdata_callback+0x294>)
    a680:	4798      	blx	r3
            break;
    a682:	e7aa      	b.n	a5da <demo_appdata_callback+0xe>
                printf("\n\rRADIO_OUT_OF_RANGE \n\r");
    a684:	4883      	ldr	r0, [pc, #524]	; (a894 <demo_appdata_callback+0x2c8>)
    a686:	4b76      	ldr	r3, [pc, #472]	; (a860 <demo_appdata_callback+0x294>)
    a688:	4798      	blx	r3
            break;
    a68a:	e7a6      	b.n	a5da <demo_appdata_callback+0xe>
                printf("\n\rRADIO_UNSUPPORTED_ATTR \n\r");
    a68c:	4882      	ldr	r0, [pc, #520]	; (a898 <demo_appdata_callback+0x2cc>)
    a68e:	4b74      	ldr	r3, [pc, #464]	; (a860 <demo_appdata_callback+0x294>)
    a690:	4798      	blx	r3
            break;
    a692:	e7a2      	b.n	a5da <demo_appdata_callback+0xe>
                printf("\n\rRADIO_CHANNEL_BUSY \n\r");
    a694:	4881      	ldr	r0, [pc, #516]	; (a89c <demo_appdata_callback+0x2d0>)
    a696:	4b72      	ldr	r3, [pc, #456]	; (a860 <demo_appdata_callback+0x294>)
    a698:	4798      	blx	r3
            break;
    a69a:	e79e      	b.n	a5da <demo_appdata_callback+0xe>
                printf("\n\rNWK_NOT_JOINED \n\r");
    a69c:	4880      	ldr	r0, [pc, #512]	; (a8a0 <demo_appdata_callback+0x2d4>)
    a69e:	4b70      	ldr	r3, [pc, #448]	; (a860 <demo_appdata_callback+0x294>)
    a6a0:	4798      	blx	r3
            break;
    a6a2:	e79a      	b.n	a5da <demo_appdata_callback+0xe>
                printf("\n\rINVALID_PARAMETER \n\r");
    a6a4:	487f      	ldr	r0, [pc, #508]	; (a8a4 <demo_appdata_callback+0x2d8>)
    a6a6:	4b6e      	ldr	r3, [pc, #440]	; (a860 <demo_appdata_callback+0x294>)
    a6a8:	4798      	blx	r3
            break;
    a6aa:	e796      	b.n	a5da <demo_appdata_callback+0xe>
                printf("\n\rKEYS_NOT_INITIALIZED \n\r");
    a6ac:	487e      	ldr	r0, [pc, #504]	; (a8a8 <demo_appdata_callback+0x2dc>)
    a6ae:	4b6c      	ldr	r3, [pc, #432]	; (a860 <demo_appdata_callback+0x294>)
    a6b0:	4798      	blx	r3
            break;
    a6b2:	e792      	b.n	a5da <demo_appdata_callback+0xe>
                printf("\n\rSILENT_IMMEDIATELY_ACTIVE\n\r");
    a6b4:	487d      	ldr	r0, [pc, #500]	; (a8ac <demo_appdata_callback+0x2e0>)
    a6b6:	4b6a      	ldr	r3, [pc, #424]	; (a860 <demo_appdata_callback+0x294>)
    a6b8:	4798      	blx	r3
            break;
    a6ba:	e78e      	b.n	a5da <demo_appdata_callback+0xe>
                printf("\n\rFCNTR_ERROR_REJOIN_NEEDED \n\r");
    a6bc:	487c      	ldr	r0, [pc, #496]	; (a8b0 <demo_appdata_callback+0x2e4>)
    a6be:	4b68      	ldr	r3, [pc, #416]	; (a860 <demo_appdata_callback+0x294>)
    a6c0:	4798      	blx	r3
            break;
    a6c2:	e78a      	b.n	a5da <demo_appdata_callback+0xe>
                printf("\n\rINVALID_BUFFER_LENGTH \n\r");
    a6c4:	487b      	ldr	r0, [pc, #492]	; (a8b4 <demo_appdata_callback+0x2e8>)
    a6c6:	4b66      	ldr	r3, [pc, #408]	; (a860 <demo_appdata_callback+0x294>)
    a6c8:	4798      	blx	r3
            break;
    a6ca:	e786      	b.n	a5da <demo_appdata_callback+0xe>
                printf("\n\rMAC_PAUSED  \n\r");
    a6cc:	487a      	ldr	r0, [pc, #488]	; (a8b8 <demo_appdata_callback+0x2ec>)
    a6ce:	4b64      	ldr	r3, [pc, #400]	; (a860 <demo_appdata_callback+0x294>)
    a6d0:	4798      	blx	r3
            break;
    a6d2:	e782      	b.n	a5da <demo_appdata_callback+0xe>
                printf("\n\rNO_CHANNELS_FOUND \n\r");
    a6d4:	4879      	ldr	r0, [pc, #484]	; (a8bc <demo_appdata_callback+0x2f0>)
    a6d6:	4b62      	ldr	r3, [pc, #392]	; (a860 <demo_appdata_callback+0x294>)
    a6d8:	4798      	blx	r3
            break;
    a6da:	e77e      	b.n	a5da <demo_appdata_callback+0xe>
                printf("\n\rBUSY\n\r");
    a6dc:	4878      	ldr	r0, [pc, #480]	; (a8c0 <demo_appdata_callback+0x2f4>)
    a6de:	4b60      	ldr	r3, [pc, #384]	; (a860 <demo_appdata_callback+0x294>)
    a6e0:	4798      	blx	r3
            break;
    a6e2:	e77a      	b.n	a5da <demo_appdata_callback+0xe>
                printf("\n\rNO_ACK \n\r");
    a6e4:	4877      	ldr	r0, [pc, #476]	; (a8c4 <demo_appdata_callback+0x2f8>)
    a6e6:	4b5e      	ldr	r3, [pc, #376]	; (a860 <demo_appdata_callback+0x294>)
    a6e8:	4798      	blx	r3
            break;
    a6ea:	e776      	b.n	a5da <demo_appdata_callback+0xe>
                printf("\n\rALREADY JOINING IS IN PROGRESS \n\r");
    a6ec:	4876      	ldr	r0, [pc, #472]	; (a8c8 <demo_appdata_callback+0x2fc>)
    a6ee:	4b5c      	ldr	r3, [pc, #368]	; (a860 <demo_appdata_callback+0x294>)
    a6f0:	4798      	blx	r3
            break;
    a6f2:	e772      	b.n	a5da <demo_appdata_callback+0xe>
                printf("\n\rRESOURCE_UNAVAILABLE \n\r");
    a6f4:	4875      	ldr	r0, [pc, #468]	; (a8cc <demo_appdata_callback+0x300>)
    a6f6:	4b5a      	ldr	r3, [pc, #360]	; (a860 <demo_appdata_callback+0x294>)
    a6f8:	4798      	blx	r3
            break;
    a6fa:	e76e      	b.n	a5da <demo_appdata_callback+0xe>
                printf("\n\rINVALID_REQUEST \n\r");
    a6fc:	4874      	ldr	r0, [pc, #464]	; (a8d0 <demo_appdata_callback+0x304>)
    a6fe:	4b58      	ldr	r3, [pc, #352]	; (a860 <demo_appdata_callback+0x294>)
    a700:	4798      	blx	r3
            break;
    a702:	e76a      	b.n	a5da <demo_appdata_callback+0xe>
                printf("\n\rFCNTR_ERROR \n\r");
    a704:	4873      	ldr	r0, [pc, #460]	; (a8d4 <demo_appdata_callback+0x308>)
    a706:	4b56      	ldr	r3, [pc, #344]	; (a860 <demo_appdata_callback+0x294>)
    a708:	4798      	blx	r3
            break;
    a70a:	e766      	b.n	a5da <demo_appdata_callback+0xe>
                printf("\n\rMIC_ERROR \n\r");
    a70c:	4872      	ldr	r0, [pc, #456]	; (a8d8 <demo_appdata_callback+0x30c>)
    a70e:	4b54      	ldr	r3, [pc, #336]	; (a860 <demo_appdata_callback+0x294>)
    a710:	4798      	blx	r3
            break;
    a712:	e762      	b.n	a5da <demo_appdata_callback+0xe>
                printf("\n\rINVALID_MTYPE \n\r");
    a714:	4871      	ldr	r0, [pc, #452]	; (a8dc <demo_appdata_callback+0x310>)
    a716:	4b52      	ldr	r3, [pc, #328]	; (a860 <demo_appdata_callback+0x294>)
    a718:	4798      	blx	r3
            break;
    a71a:	e75e      	b.n	a5da <demo_appdata_callback+0xe>
                printf("\n\rMCAST_HDR_INVALID \n\r");
    a71c:	4870      	ldr	r0, [pc, #448]	; (a8e0 <demo_appdata_callback+0x314>)
    a71e:	4b50      	ldr	r3, [pc, #320]	; (a860 <demo_appdata_callback+0x294>)
    a720:	4798      	blx	r3
            break;
    a722:	e75a      	b.n	a5da <demo_appdata_callback+0xe>
				printf("\n\rINVALID_PACKET \n\r");
    a724:	486f      	ldr	r0, [pc, #444]	; (a8e4 <demo_appdata_callback+0x318>)
    a726:	4b4e      	ldr	r3, [pc, #312]	; (a860 <demo_appdata_callback+0x294>)
    a728:	4798      	blx	r3
			break;
    a72a:	e756      	b.n	a5da <demo_appdata_callback+0xe>
                printf("UNKNOWN ERROR\n\r");
    a72c:	486e      	ldr	r0, [pc, #440]	; (a8e8 <demo_appdata_callback+0x31c>)
    a72e:	4b4c      	ldr	r3, [pc, #304]	; (a860 <demo_appdata_callback+0x294>)
    a730:	4798      	blx	r3
            break;
    a732:	e00c      	b.n	a74e <demo_appdata_callback+0x182>
        switch(status = appdata->param.transCmpl.status)
    a734:	790c      	ldrb	r4, [r1, #4]
    a736:	2c1e      	cmp	r4, #30
    a738:	d87d      	bhi.n	a836 <demo_appdata_callback+0x26a>
    a73a:	00a3      	lsls	r3, r4, #2
    a73c:	4a6b      	ldr	r2, [pc, #428]	; (a8ec <demo_appdata_callback+0x320>)
    a73e:	58d3      	ldr	r3, [r2, r3]
    a740:	469f      	mov	pc, r3
                printf("Transmission Success\r\n");
    a742:	486b      	ldr	r0, [pc, #428]	; (a8f0 <demo_appdata_callback+0x324>)
    a744:	4b4d      	ldr	r3, [pc, #308]	; (a87c <demo_appdata_callback+0x2b0>)
    a746:	4798      	blx	r3
        printf("\n\r*************************************************\n\r");
    a748:	486a      	ldr	r0, [pc, #424]	; (a8f4 <demo_appdata_callback+0x328>)
    a74a:	4b45      	ldr	r3, [pc, #276]	; (a860 <demo_appdata_callback+0x294>)
    a74c:	4798      	blx	r3
    SwTimerStop(lTimerId);
    a74e:	4b3c      	ldr	r3, [pc, #240]	; (a840 <demo_appdata_callback+0x274>)
    a750:	7818      	ldrb	r0, [r3, #0]
    a752:	4b3c      	ldr	r3, [pc, #240]	; (a844 <demo_appdata_callback+0x278>)
    a754:	4798      	blx	r3
    if(status != LORAWAN_SUCCESS)
    a756:	2c08      	cmp	r4, #8
    a758:	d100      	bne.n	a75c <demo_appdata_callback+0x190>
    a75a:	e746      	b.n	a5ea <demo_appdata_callback+0x1e>
    a75c:	e741      	b.n	a5e2 <demo_appdata_callback+0x16>
                printf("Transmission Success\r\n");
    a75e:	4864      	ldr	r0, [pc, #400]	; (a8f0 <demo_appdata_callback+0x324>)
    a760:	4b46      	ldr	r3, [pc, #280]	; (a87c <demo_appdata_callback+0x2b0>)
    a762:	4798      	blx	r3
            break;
    a764:	e7f0      	b.n	a748 <demo_appdata_callback+0x17c>
                printf("\n\rRADIO_NO_DATA \n\r");
    a766:	4847      	ldr	r0, [pc, #284]	; (a884 <demo_appdata_callback+0x2b8>)
    a768:	4b3d      	ldr	r3, [pc, #244]	; (a860 <demo_appdata_callback+0x294>)
    a76a:	4798      	blx	r3
            break;
    a76c:	e7ec      	b.n	a748 <demo_appdata_callback+0x17c>
                printf("\n\rRADIO_DATA_SIZE \n\r");
    a76e:	4846      	ldr	r0, [pc, #280]	; (a888 <demo_appdata_callback+0x2bc>)
    a770:	4b3b      	ldr	r3, [pc, #236]	; (a860 <demo_appdata_callback+0x294>)
    a772:	4798      	blx	r3
            break;
    a774:	e7e8      	b.n	a748 <demo_appdata_callback+0x17c>
                printf("\n\rRADIO_INVALID_REQ \n\r");
    a776:	4845      	ldr	r0, [pc, #276]	; (a88c <demo_appdata_callback+0x2c0>)
    a778:	4b39      	ldr	r3, [pc, #228]	; (a860 <demo_appdata_callback+0x294>)
    a77a:	4798      	blx	r3
            break;
    a77c:	e7e4      	b.n	a748 <demo_appdata_callback+0x17c>
                printf("\n\rRADIO_BUSY \n\r");
    a77e:	4844      	ldr	r0, [pc, #272]	; (a890 <demo_appdata_callback+0x2c4>)
    a780:	4b37      	ldr	r3, [pc, #220]	; (a860 <demo_appdata_callback+0x294>)
    a782:	4798      	blx	r3
            break;
    a784:	e7e0      	b.n	a748 <demo_appdata_callback+0x17c>
                printf("\nTx Timeout\n\r");
    a786:	485c      	ldr	r0, [pc, #368]	; (a8f8 <demo_appdata_callback+0x32c>)
    a788:	4b35      	ldr	r3, [pc, #212]	; (a860 <demo_appdata_callback+0x294>)
    a78a:	4798      	blx	r3
            break;
    a78c:	e7dc      	b.n	a748 <demo_appdata_callback+0x17c>
                printf("\n\rRADIO_OUT_OF_RANGE \n\r");
    a78e:	4841      	ldr	r0, [pc, #260]	; (a894 <demo_appdata_callback+0x2c8>)
    a790:	4b33      	ldr	r3, [pc, #204]	; (a860 <demo_appdata_callback+0x294>)
    a792:	4798      	blx	r3
            break;
    a794:	e7d8      	b.n	a748 <demo_appdata_callback+0x17c>
                printf("\n\rRADIO_UNSUPPORTED_ATTR \n\r");
    a796:	4840      	ldr	r0, [pc, #256]	; (a898 <demo_appdata_callback+0x2cc>)
    a798:	4b31      	ldr	r3, [pc, #196]	; (a860 <demo_appdata_callback+0x294>)
    a79a:	4798      	blx	r3
            break;
    a79c:	e7d4      	b.n	a748 <demo_appdata_callback+0x17c>
                printf("\n\rRADIO_CHANNEL_BUSY \n\r");
    a79e:	483f      	ldr	r0, [pc, #252]	; (a89c <demo_appdata_callback+0x2d0>)
    a7a0:	4b2f      	ldr	r3, [pc, #188]	; (a860 <demo_appdata_callback+0x294>)
    a7a2:	4798      	blx	r3
            break;
    a7a4:	e7d0      	b.n	a748 <demo_appdata_callback+0x17c>
                printf("\n\rNWK_NOT_JOINED \n\r");
    a7a6:	483e      	ldr	r0, [pc, #248]	; (a8a0 <demo_appdata_callback+0x2d4>)
    a7a8:	4b2d      	ldr	r3, [pc, #180]	; (a860 <demo_appdata_callback+0x294>)
    a7aa:	4798      	blx	r3
            break;
    a7ac:	e7cc      	b.n	a748 <demo_appdata_callback+0x17c>
                printf("\n\rINVALID_PARAMETER \n\r");
    a7ae:	483d      	ldr	r0, [pc, #244]	; (a8a4 <demo_appdata_callback+0x2d8>)
    a7b0:	4b2b      	ldr	r3, [pc, #172]	; (a860 <demo_appdata_callback+0x294>)
    a7b2:	4798      	blx	r3
            break;
    a7b4:	e7c8      	b.n	a748 <demo_appdata_callback+0x17c>
                printf("\n\rKEYS_NOT_INITIALIZED \n\r");
    a7b6:	483c      	ldr	r0, [pc, #240]	; (a8a8 <demo_appdata_callback+0x2dc>)
    a7b8:	4b29      	ldr	r3, [pc, #164]	; (a860 <demo_appdata_callback+0x294>)
    a7ba:	4798      	blx	r3
            break;
    a7bc:	e7c4      	b.n	a748 <demo_appdata_callback+0x17c>
                printf("\n\rSILENT_IMMEDIATELY_ACTIVE\n\r");
    a7be:	483b      	ldr	r0, [pc, #236]	; (a8ac <demo_appdata_callback+0x2e0>)
    a7c0:	4b27      	ldr	r3, [pc, #156]	; (a860 <demo_appdata_callback+0x294>)
    a7c2:	4798      	blx	r3
            break;
    a7c4:	e7c0      	b.n	a748 <demo_appdata_callback+0x17c>
                printf("\n\rFCNTR_ERROR_REJOIN_NEEDED \n\r");
    a7c6:	483a      	ldr	r0, [pc, #232]	; (a8b0 <demo_appdata_callback+0x2e4>)
    a7c8:	4b25      	ldr	r3, [pc, #148]	; (a860 <demo_appdata_callback+0x294>)
    a7ca:	4798      	blx	r3
            break;
    a7cc:	e7bc      	b.n	a748 <demo_appdata_callback+0x17c>
                printf("\n\rINVALID_BUFFER_LENGTH \n\r");
    a7ce:	4839      	ldr	r0, [pc, #228]	; (a8b4 <demo_appdata_callback+0x2e8>)
    a7d0:	4b23      	ldr	r3, [pc, #140]	; (a860 <demo_appdata_callback+0x294>)
    a7d2:	4798      	blx	r3
            break;
    a7d4:	e7b8      	b.n	a748 <demo_appdata_callback+0x17c>
                printf("\n\rMAC_PAUSED  \n\r");
    a7d6:	4838      	ldr	r0, [pc, #224]	; (a8b8 <demo_appdata_callback+0x2ec>)
    a7d8:	4b21      	ldr	r3, [pc, #132]	; (a860 <demo_appdata_callback+0x294>)
    a7da:	4798      	blx	r3
            break;
    a7dc:	e7b4      	b.n	a748 <demo_appdata_callback+0x17c>
                printf("\n\rNO_CHANNELS_FOUND \n\r");
    a7de:	4837      	ldr	r0, [pc, #220]	; (a8bc <demo_appdata_callback+0x2f0>)
    a7e0:	4b1f      	ldr	r3, [pc, #124]	; (a860 <demo_appdata_callback+0x294>)
    a7e2:	4798      	blx	r3
            break;
    a7e4:	e7b0      	b.n	a748 <demo_appdata_callback+0x17c>
                printf("\n\rBUSY\n\r");
    a7e6:	4836      	ldr	r0, [pc, #216]	; (a8c0 <demo_appdata_callback+0x2f4>)
    a7e8:	4b1d      	ldr	r3, [pc, #116]	; (a860 <demo_appdata_callback+0x294>)
    a7ea:	4798      	blx	r3
            break;
    a7ec:	e7ac      	b.n	a748 <demo_appdata_callback+0x17c>
                printf("\n\rNO_ACK \n\r");
    a7ee:	4835      	ldr	r0, [pc, #212]	; (a8c4 <demo_appdata_callback+0x2f8>)
    a7f0:	4b1b      	ldr	r3, [pc, #108]	; (a860 <demo_appdata_callback+0x294>)
    a7f2:	4798      	blx	r3
            break;
    a7f4:	e7a8      	b.n	a748 <demo_appdata_callback+0x17c>
                printf("\n\rALREADY JOINING IS IN PROGRESS \n\r");
    a7f6:	4834      	ldr	r0, [pc, #208]	; (a8c8 <demo_appdata_callback+0x2fc>)
    a7f8:	4b19      	ldr	r3, [pc, #100]	; (a860 <demo_appdata_callback+0x294>)
    a7fa:	4798      	blx	r3
            break;
    a7fc:	e7a4      	b.n	a748 <demo_appdata_callback+0x17c>
                printf("\n\rRESOURCE_UNAVAILABLE \n\r");
    a7fe:	4833      	ldr	r0, [pc, #204]	; (a8cc <demo_appdata_callback+0x300>)
    a800:	4b17      	ldr	r3, [pc, #92]	; (a860 <demo_appdata_callback+0x294>)
    a802:	4798      	blx	r3
            break;
    a804:	e7a0      	b.n	a748 <demo_appdata_callback+0x17c>
                printf("\n\rINVALID_REQUEST \n\r");
    a806:	4832      	ldr	r0, [pc, #200]	; (a8d0 <demo_appdata_callback+0x304>)
    a808:	4b15      	ldr	r3, [pc, #84]	; (a860 <demo_appdata_callback+0x294>)
    a80a:	4798      	blx	r3
            break;
    a80c:	e79c      	b.n	a748 <demo_appdata_callback+0x17c>
                printf("\n\rFCNTR_ERROR \n\r");
    a80e:	4831      	ldr	r0, [pc, #196]	; (a8d4 <demo_appdata_callback+0x308>)
    a810:	4b13      	ldr	r3, [pc, #76]	; (a860 <demo_appdata_callback+0x294>)
    a812:	4798      	blx	r3
            break;
    a814:	e798      	b.n	a748 <demo_appdata_callback+0x17c>
                printf("\n\rMIC_ERROR \n\r");
    a816:	4830      	ldr	r0, [pc, #192]	; (a8d8 <demo_appdata_callback+0x30c>)
    a818:	4b11      	ldr	r3, [pc, #68]	; (a860 <demo_appdata_callback+0x294>)
    a81a:	4798      	blx	r3
            break;
    a81c:	e794      	b.n	a748 <demo_appdata_callback+0x17c>
                printf("\n\rINVALID_MTYPE \n\r");
    a81e:	482f      	ldr	r0, [pc, #188]	; (a8dc <demo_appdata_callback+0x310>)
    a820:	4b0f      	ldr	r3, [pc, #60]	; (a860 <demo_appdata_callback+0x294>)
    a822:	4798      	blx	r3
            break;
    a824:	e790      	b.n	a748 <demo_appdata_callback+0x17c>
                printf("\n\rMCAST_HDR_INVALID \n\r");
    a826:	482e      	ldr	r0, [pc, #184]	; (a8e0 <demo_appdata_callback+0x314>)
    a828:	4b0d      	ldr	r3, [pc, #52]	; (a860 <demo_appdata_callback+0x294>)
    a82a:	4798      	blx	r3
            break;
    a82c:	e78c      	b.n	a748 <demo_appdata_callback+0x17c>
				printf("\n\rINVALID_PACKET \n\r");
    a82e:	482d      	ldr	r0, [pc, #180]	; (a8e4 <demo_appdata_callback+0x318>)
    a830:	4b0b      	ldr	r3, [pc, #44]	; (a860 <demo_appdata_callback+0x294>)
    a832:	4798      	blx	r3
			break;
    a834:	e788      	b.n	a748 <demo_appdata_callback+0x17c>
                printf("\n\rUNKNOWN ERROR\n\r");
    a836:	4831      	ldr	r0, [pc, #196]	; (a8fc <demo_appdata_callback+0x330>)
    a838:	4b09      	ldr	r3, [pc, #36]	; (a860 <demo_appdata_callback+0x294>)
    a83a:	4798      	blx	r3
            break;
    a83c:	e784      	b.n	a748 <demo_appdata_callback+0x17c>
    a83e:	46c0      	nop			; (mov r8, r8)
    a840:	2000005f 	.word	0x2000005f
    a844:	00009915 	.word	0x00009915
    a848:	2000005c 	.word	0x2000005c
    a84c:	00009201 	.word	0x00009201
    a850:	20000e5b 	.word	0x20000e5b
    a854:	0000a559 	.word	0x0000a559
    a858:	00019f4c 	.word	0x00019f4c
    a85c:	0001a0cc 	.word	0x0001a0cc
    a860:	00015005 	.word	0x00015005
    a864:	0001a0e8 	.word	0x0001a0e8
    a868:	0001a108 	.word	0x0001a108
    a86c:	0001a120 	.word	0x0001a120
    a870:	0001a134 	.word	0x0001a134
    a874:	0001a140 	.word	0x0001a140
    a878:	0001a144 	.word	0x0001a144
    a87c:	000150c9 	.word	0x000150c9
    a880:	0001a164 	.word	0x0001a164
    a884:	0001a188 	.word	0x0001a188
    a888:	0001a19c 	.word	0x0001a19c
    a88c:	0001a1b4 	.word	0x0001a1b4
    a890:	0001a1cc 	.word	0x0001a1cc
    a894:	0001a1dc 	.word	0x0001a1dc
    a898:	0001a1f4 	.word	0x0001a1f4
    a89c:	0001a210 	.word	0x0001a210
    a8a0:	0001a228 	.word	0x0001a228
    a8a4:	0001a23c 	.word	0x0001a23c
    a8a8:	0001a254 	.word	0x0001a254
    a8ac:	0001a270 	.word	0x0001a270
    a8b0:	0001a290 	.word	0x0001a290
    a8b4:	0001a2b0 	.word	0x0001a2b0
    a8b8:	0001a2cc 	.word	0x0001a2cc
    a8bc:	0001a2e0 	.word	0x0001a2e0
    a8c0:	0001a2f8 	.word	0x0001a2f8
    a8c4:	0001a304 	.word	0x0001a304
    a8c8:	0001a310 	.word	0x0001a310
    a8cc:	0001a334 	.word	0x0001a334
    a8d0:	0001a350 	.word	0x0001a350
    a8d4:	0001a368 	.word	0x0001a368
    a8d8:	0001a37c 	.word	0x0001a37c
    a8dc:	0001a38c 	.word	0x0001a38c
    a8e0:	0001a3a0 	.word	0x0001a3a0
    a8e4:	0001a3b8 	.word	0x0001a3b8
    a8e8:	0001a3cc 	.word	0x0001a3cc
    a8ec:	00019fc8 	.word	0x00019fc8
    a8f0:	0001a3dc 	.word	0x0001a3dc
    a8f4:	0001a418 	.word	0x0001a418
    a8f8:	0001a3f4 	.word	0x0001a3f4
    a8fc:	0001a404 	.word	0x0001a404

0000a900 <displayTask>:
{
    a900:	b510      	push	{r4, lr}
	switch(appTaskState)
    a902:	4b13      	ldr	r3, [pc, #76]	; (a950 <displayTask+0x50>)
    a904:	781b      	ldrb	r3, [r3, #0]
    a906:	2b01      	cmp	r3, #1
    a908:	d00e      	beq.n	a928 <displayTask+0x28>
    a90a:	2b00      	cmp	r3, #0
    a90c:	d007      	beq.n	a91e <displayTask+0x1e>
    a90e:	2b02      	cmp	r3, #2
    a910:	d011      	beq.n	a936 <displayTask+0x36>
    a912:	2b03      	cmp	r3, #3
    a914:	d017      	beq.n	a946 <displayTask+0x46>
			printf("Error STATE Entered\r\n");
    a916:	480f      	ldr	r0, [pc, #60]	; (a954 <displayTask+0x54>)
    a918:	4b0f      	ldr	r3, [pc, #60]	; (a958 <displayTask+0x58>)
    a91a:	4798      	blx	r3
			break;
    a91c:	e002      	b.n	a924 <displayTask+0x24>
	appPostTask(PROCESS_TASK_HANDLER);
    a91e:	2001      	movs	r0, #1
    a920:	4b0e      	ldr	r3, [pc, #56]	; (a95c <displayTask+0x5c>)
    a922:	4798      	blx	r3
}
    a924:	2000      	movs	r0, #0
    a926:	bd10      	pop	{r4, pc}
	printf("LoRaWAN Weather Station Demo\r\n");
    a928:	480d      	ldr	r0, [pc, #52]	; (a960 <displayTask+0x60>)
    a92a:	4b0b      	ldr	r3, [pc, #44]	; (a958 <displayTask+0x58>)
    a92c:	4798      	blx	r3
	appPostTask(PROCESS_TASK_HANDLER);
    a92e:	2001      	movs	r0, #1
    a930:	4b0a      	ldr	r3, [pc, #40]	; (a95c <displayTask+0x5c>)
    a932:	4798      	blx	r3
    a934:	e7f6      	b.n	a924 <displayTask+0x24>
    printf("\r\nRegional band selected is %s\r\n", bandStrings[BAND_NUM]);
    a936:	490b      	ldr	r1, [pc, #44]	; (a964 <displayTask+0x64>)
    a938:	480b      	ldr	r0, [pc, #44]	; (a968 <displayTask+0x68>)
    a93a:	4b0c      	ldr	r3, [pc, #48]	; (a96c <displayTask+0x6c>)
    a93c:	4798      	blx	r3
	appPostTask(PROCESS_TASK_HANDLER);
    a93e:	2001      	movs	r0, #1
    a940:	4b06      	ldr	r3, [pc, #24]	; (a95c <displayTask+0x5c>)
    a942:	4798      	blx	r3
    a944:	e7ee      	b.n	a924 <displayTask+0x24>
	appPostTask(PROCESS_TASK_HANDLER);
    a946:	2001      	movs	r0, #1
    a948:	4b04      	ldr	r3, [pc, #16]	; (a95c <displayTask+0x5c>)
    a94a:	4798      	blx	r3
    a94c:	e7ea      	b.n	a924 <displayTask+0x24>
    a94e:	46c0      	nop			; (mov r8, r8)
    a950:	20000e5b 	.word	0x20000e5b
    a954:	0001a59c 	.word	0x0001a59c
    a958:	000150c9 	.word	0x000150c9
    a95c:	0000a559 	.word	0x0000a559
    a960:	0001a550 	.word	0x0001a550
    a964:	0001a570 	.word	0x0001a570
    a968:	0001a578 	.word	0x0001a578
    a96c:	00015005 	.word	0x00015005

0000a970 <APP_TaskHandler>:
/*********************************************************************//*
 \brief      Application Task Handler
 ************************************************************************/

SYSTEM_TaskStatus_t APP_TaskHandler(void)
{
    a970:	b570      	push	{r4, r5, r6, lr}

    if (appTaskFlags)
    a972:	4b12      	ldr	r3, [pc, #72]	; (a9bc <APP_TaskHandler+0x4c>)
    a974:	781b      	ldrb	r3, [r3, #0]
    a976:	2b00      	cmp	r3, #0
    a978:	d008      	beq.n	a98c <APP_TaskHandler+0x1c>
    {
        for (uint16_t taskId = 0; taskId < APP_TASKS_COUNT; taskId++)
        {
            if ((1 << taskId) & (appTaskFlags))
    a97a:	4b10      	ldr	r3, [pc, #64]	; (a9bc <APP_TaskHandler+0x4c>)
    a97c:	781b      	ldrb	r3, [r3, #0]
    a97e:	07db      	lsls	r3, r3, #31
    a980:	d406      	bmi.n	a990 <APP_TaskHandler+0x20>
    a982:	4b0e      	ldr	r3, [pc, #56]	; (a9bc <APP_TaskHandler+0x4c>)
    a984:	781c      	ldrb	r4, [r3, #0]
    a986:	07a4      	lsls	r4, r4, #30
    a988:	0fe4      	lsrs	r4, r4, #31
    a98a:	d102      	bne.n	a992 <APP_TaskHandler+0x22>
            }
        }
    }

    return SYSTEM_TASK_SUCCESS;
}
    a98c:	2000      	movs	r0, #0
    a98e:	bd70      	pop	{r4, r5, r6, pc}
            if ((1 << taskId) & (appTaskFlags))
    a990:	2400      	movs	r4, #0
                ATOMIC_SECTION_ENTER
    a992:	4b0b      	ldr	r3, [pc, #44]	; (a9c0 <APP_TaskHandler+0x50>)
    a994:	4798      	blx	r3
                appTaskFlags &= ~(1 << taskId);
    a996:	4d09      	ldr	r5, [pc, #36]	; (a9bc <APP_TaskHandler+0x4c>)
    a998:	782b      	ldrb	r3, [r5, #0]
    a99a:	2201      	movs	r2, #1
    a99c:	40a2      	lsls	r2, r4
    a99e:	4393      	bics	r3, r2
    a9a0:	702b      	strb	r3, [r5, #0]
                ATOMIC_SECTION_EXIT
    a9a2:	4b08      	ldr	r3, [pc, #32]	; (a9c4 <APP_TaskHandler+0x54>)
    a9a4:	4798      	blx	r3
                appTaskHandlers[taskId]();
    a9a6:	00a4      	lsls	r4, r4, #2
    a9a8:	4b07      	ldr	r3, [pc, #28]	; (a9c8 <APP_TaskHandler+0x58>)
    a9aa:	58e3      	ldr	r3, [r4, r3]
    a9ac:	4798      	blx	r3
                if (appTaskFlags)
    a9ae:	782b      	ldrb	r3, [r5, #0]
    a9b0:	2b00      	cmp	r3, #0
    a9b2:	d0eb      	beq.n	a98c <APP_TaskHandler+0x1c>
                    SYSTEM_PostTask(APP_TASK_ID);
    a9b4:	2010      	movs	r0, #16
    a9b6:	4b05      	ldr	r3, [pc, #20]	; (a9cc <APP_TaskHandler+0x5c>)
    a9b8:	4798      	blx	r3
    a9ba:	e7e7      	b.n	a98c <APP_TaskHandler+0x1c>
    a9bc:	20000e5a 	.word	0x20000e5a
    a9c0:	00003d2d 	.word	0x00003d2d
    a9c4:	00003d39 	.word	0x00003d39
    a9c8:	0001a07c 	.word	0x0001a07c
    a9cc:	00009c35 	.word	0x00009c35

0000a9d0 <print_array>:
 \brief      Function to Print array of characters
 \param[in]  *array  - Pointer of the array to be printed
 \param[in]   length - Length of the array
 ************************************************************************/
void print_array (uint8_t *array, uint8_t length)
{
    a9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a9d2:	0004      	movs	r4, r0
    a9d4:	000d      	movs	r5, r1
    printf("0x");
    a9d6:	480a      	ldr	r0, [pc, #40]	; (aa00 <print_array+0x30>)
    a9d8:	4b0a      	ldr	r3, [pc, #40]	; (aa04 <print_array+0x34>)
    a9da:	4798      	blx	r3
    for (uint8_t i =0; i < length; i++)
    a9dc:	2d00      	cmp	r5, #0
    a9de:	d00b      	beq.n	a9f8 <print_array+0x28>
    a9e0:	3d01      	subs	r5, #1
    a9e2:	b2ed      	uxtb	r5, r5
    a9e4:	3501      	adds	r5, #1
    a9e6:	1965      	adds	r5, r4, r5
    {
        printf("%02x", *array);
    a9e8:	4e07      	ldr	r6, [pc, #28]	; (aa08 <print_array+0x38>)
    a9ea:	4f06      	ldr	r7, [pc, #24]	; (aa04 <print_array+0x34>)
    a9ec:	7821      	ldrb	r1, [r4, #0]
    a9ee:	0030      	movs	r0, r6
    a9f0:	47b8      	blx	r7
        array++;
    a9f2:	3401      	adds	r4, #1
    for (uint8_t i =0; i < length; i++)
    a9f4:	42ac      	cmp	r4, r5
    a9f6:	d1f9      	bne.n	a9ec <print_array+0x1c>
    }
    printf("\n\r");
    a9f8:	4804      	ldr	r0, [pc, #16]	; (aa0c <print_array+0x3c>)
    a9fa:	4b02      	ldr	r3, [pc, #8]	; (aa04 <print_array+0x34>)
    a9fc:	4798      	blx	r3
}
    a9fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aa00:	0001a6e8 	.word	0x0001a6e8
    aa04:	00015005 	.word	0x00015005
    aa08:	0001a6ec 	.word	0x0001a6ec
    aa0c:	0001a198 	.word	0x0001a198

0000aa10 <set_join_parameters>:
{
    aa10:	b510      	push	{r4, lr}
    aa12:	0004      	movs	r4, r0
    printf("\n********************Join Parameters********************\n\r");
    aa14:	482a      	ldr	r0, [pc, #168]	; (aac0 <set_join_parameters+0xb0>)
    aa16:	4b2b      	ldr	r3, [pc, #172]	; (aac4 <set_join_parameters+0xb4>)
    aa18:	4798      	blx	r3
    if(ACTIVATION_BY_PERSONALIZATION == activation_type)
    aa1a:	2c01      	cmp	r4, #1
    aa1c:	d008      	beq.n	aa30 <set_join_parameters+0x20>
        status = LORAWAN_SetAttr (DEV_EUI, demoDevEui);
    aa1e:	492a      	ldr	r1, [pc, #168]	; (aac8 <set_join_parameters+0xb8>)
    aa20:	2000      	movs	r0, #0
    aa22:	4b2a      	ldr	r3, [pc, #168]	; (aacc <set_join_parameters+0xbc>)
    aa24:	4798      	blx	r3
    aa26:	0004      	movs	r4, r0
        if (LORAWAN_SUCCESS == status)
    aa28:	2808      	cmp	r0, #8
    aa2a:	d025      	beq.n	aa78 <set_join_parameters+0x68>
}
    aa2c:	0020      	movs	r0, r4
    aa2e:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr (DEV_ADDR, &demoDevAddr);
    aa30:	4927      	ldr	r1, [pc, #156]	; (aad0 <set_join_parameters+0xc0>)
    aa32:	2002      	movs	r0, #2
    aa34:	4b25      	ldr	r3, [pc, #148]	; (aacc <set_join_parameters+0xbc>)
    aa36:	4798      	blx	r3
    aa38:	0004      	movs	r4, r0
        if (LORAWAN_SUCCESS == status)
    aa3a:	2808      	cmp	r0, #8
    aa3c:	d1f6      	bne.n	aa2c <set_join_parameters+0x1c>
            status = LORAWAN_SetAttr (APPS_KEY, demoAppsKey);
    aa3e:	4925      	ldr	r1, [pc, #148]	; (aad4 <set_join_parameters+0xc4>)
    aa40:	2005      	movs	r0, #5
    aa42:	4b22      	ldr	r3, [pc, #136]	; (aacc <set_join_parameters+0xbc>)
    aa44:	4798      	blx	r3
    aa46:	0004      	movs	r4, r0
        if (LORAWAN_SUCCESS == status)
    aa48:	2808      	cmp	r0, #8
    aa4a:	d1ef      	bne.n	aa2c <set_join_parameters+0x1c>
            printf("\nAppSessionKey : ");
    aa4c:	4822      	ldr	r0, [pc, #136]	; (aad8 <set_join_parameters+0xc8>)
    aa4e:	4b1d      	ldr	r3, [pc, #116]	; (aac4 <set_join_parameters+0xb4>)
    aa50:	4798      	blx	r3
            print_array((uint8_t *)&demoAppsKey, sizeof(demoAppsKey));
    aa52:	2110      	movs	r1, #16
    aa54:	481f      	ldr	r0, [pc, #124]	; (aad4 <set_join_parameters+0xc4>)
    aa56:	4b21      	ldr	r3, [pc, #132]	; (aadc <set_join_parameters+0xcc>)
    aa58:	4798      	blx	r3
            status = LORAWAN_SetAttr (NWKS_KEY, demoNwksKey);
    aa5a:	4921      	ldr	r1, [pc, #132]	; (aae0 <set_join_parameters+0xd0>)
    aa5c:	2004      	movs	r0, #4
    aa5e:	4b1b      	ldr	r3, [pc, #108]	; (aacc <set_join_parameters+0xbc>)
    aa60:	4798      	blx	r3
    aa62:	0004      	movs	r4, r0
        if (LORAWAN_SUCCESS == status)
    aa64:	2808      	cmp	r0, #8
    aa66:	d1e1      	bne.n	aa2c <set_join_parameters+0x1c>
            printf("\nNwkSessionKey : ");
    aa68:	481e      	ldr	r0, [pc, #120]	; (aae4 <set_join_parameters+0xd4>)
    aa6a:	4b16      	ldr	r3, [pc, #88]	; (aac4 <set_join_parameters+0xb4>)
    aa6c:	4798      	blx	r3
            print_array((uint8_t *)&demoNwksKey, sizeof(demoNwksKey));
    aa6e:	2110      	movs	r1, #16
    aa70:	481b      	ldr	r0, [pc, #108]	; (aae0 <set_join_parameters+0xd0>)
    aa72:	4b1a      	ldr	r3, [pc, #104]	; (aadc <set_join_parameters+0xcc>)
    aa74:	4798      	blx	r3
    aa76:	e7d9      	b.n	aa2c <set_join_parameters+0x1c>
            printf("\nDevEUI : ");
    aa78:	481b      	ldr	r0, [pc, #108]	; (aae8 <set_join_parameters+0xd8>)
    aa7a:	4b12      	ldr	r3, [pc, #72]	; (aac4 <set_join_parameters+0xb4>)
    aa7c:	4798      	blx	r3
            print_array((uint8_t *)&demoDevEui, sizeof(demoDevEui));
    aa7e:	2108      	movs	r1, #8
    aa80:	4811      	ldr	r0, [pc, #68]	; (aac8 <set_join_parameters+0xb8>)
    aa82:	4b16      	ldr	r3, [pc, #88]	; (aadc <set_join_parameters+0xcc>)
    aa84:	4798      	blx	r3
            status = LORAWAN_SetAttr (APP_EUI, demoAppEui);
    aa86:	4919      	ldr	r1, [pc, #100]	; (aaec <set_join_parameters+0xdc>)
    aa88:	2001      	movs	r0, #1
    aa8a:	4b10      	ldr	r3, [pc, #64]	; (aacc <set_join_parameters+0xbc>)
    aa8c:	4798      	blx	r3
    aa8e:	0004      	movs	r4, r0
        if (LORAWAN_SUCCESS == status)
    aa90:	2808      	cmp	r0, #8
    aa92:	d1cb      	bne.n	aa2c <set_join_parameters+0x1c>
            printf("\nAppEUI : ");
    aa94:	4816      	ldr	r0, [pc, #88]	; (aaf0 <set_join_parameters+0xe0>)
    aa96:	4b0b      	ldr	r3, [pc, #44]	; (aac4 <set_join_parameters+0xb4>)
    aa98:	4798      	blx	r3
            print_array((uint8_t *)&demoAppEui, sizeof(demoAppEui));
    aa9a:	2108      	movs	r1, #8
    aa9c:	4813      	ldr	r0, [pc, #76]	; (aaec <set_join_parameters+0xdc>)
    aa9e:	4b0f      	ldr	r3, [pc, #60]	; (aadc <set_join_parameters+0xcc>)
    aaa0:	4798      	blx	r3
			status = LORAWAN_SetAttr (APP_KEY, demoAppKey);          
    aaa2:	4914      	ldr	r1, [pc, #80]	; (aaf4 <set_join_parameters+0xe4>)
    aaa4:	2003      	movs	r0, #3
    aaa6:	4b09      	ldr	r3, [pc, #36]	; (aacc <set_join_parameters+0xbc>)
    aaa8:	4798      	blx	r3
    aaaa:	0004      	movs	r4, r0
        if (LORAWAN_SUCCESS == status)
    aaac:	2808      	cmp	r0, #8
    aaae:	d1bd      	bne.n	aa2c <set_join_parameters+0x1c>
            printf("\nAppKey : ");
    aab0:	4811      	ldr	r0, [pc, #68]	; (aaf8 <set_join_parameters+0xe8>)
    aab2:	4b04      	ldr	r3, [pc, #16]	; (aac4 <set_join_parameters+0xb4>)
    aab4:	4798      	blx	r3
            print_array((uint8_t *)&demoAppKey, sizeof(demoAppKey));
    aab6:	2110      	movs	r1, #16
    aab8:	480e      	ldr	r0, [pc, #56]	; (aaf4 <set_join_parameters+0xe4>)
    aaba:	4b08      	ldr	r3, [pc, #32]	; (aadc <set_join_parameters+0xcc>)
    aabc:	4798      	blx	r3
    aabe:	e7b5      	b.n	aa2c <set_join_parameters+0x1c>
    aac0:	0001a8f8 	.word	0x0001a8f8
    aac4:	00015005 	.word	0x00015005
    aac8:	20000044 	.word	0x20000044
    aacc:	0000ecb9 	.word	0x0000ecb9
    aad0:	20000040 	.word	0x20000040
    aad4:	20000030 	.word	0x20000030
    aad8:	0001a934 	.word	0x0001a934
    aadc:	0000a9d1 	.word	0x0000a9d1
    aae0:	2000004c 	.word	0x2000004c
    aae4:	0001a948 	.word	0x0001a948
    aae8:	0001a95c 	.word	0x0001a95c
    aaec:	20000018 	.word	0x20000018
    aaf0:	0001a968 	.word	0x0001a968
    aaf4:	20000020 	.word	0x20000020
    aaf8:	0001a974 	.word	0x0001a974

0000aafc <set_multicast_params>:
{
    aafc:	b5f0      	push	{r4, r5, r6, r7, lr}
    aafe:	b08f      	sub	sp, #60	; 0x3c
    printf("\n***************Multicast Parameters********************\n\r");
    ab00:	482a      	ldr	r0, [pc, #168]	; (abac <set_multicast_params+0xb0>)
    ab02:	4b2b      	ldr	r3, [pc, #172]	; (abb0 <set_multicast_params+0xb4>)
    ab04:	4798      	blx	r3
    dMcastDevAddr.groupId = demoMcastGroupId;
    ab06:	af0c      	add	r7, sp, #48	; 0x30
    ab08:	2300      	movs	r3, #0
    ab0a:	703b      	strb	r3, [r7, #0]
    mcastAppSKey.groupId  = demoMcastGroupId;
    ab0c:	ac07      	add	r4, sp, #28
    ab0e:	7023      	strb	r3, [r4, #0]
    mcastNwkSKey.groupId  = demoMcastGroupId;
    ab10:	aa02      	add	r2, sp, #8
    ab12:	7013      	strb	r3, [r2, #0]
    mcastStatus.groupId   = demoMcastGroupId;
    ab14:	ad01      	add	r5, sp, #4
    ab16:	702b      	strb	r3, [r5, #0]
    memcpy(&(mcastAppSKey.mcastAppSKey), &demoMcastAppsKey,LORAWAN_SESSIONKEY_LENGTH);
    ab18:	2210      	movs	r2, #16
    ab1a:	4926      	ldr	r1, [pc, #152]	; (abb4 <set_multicast_params+0xb8>)
    ab1c:	201d      	movs	r0, #29
    ab1e:	4468      	add	r0, sp
    ab20:	4e25      	ldr	r6, [pc, #148]	; (abb8 <set_multicast_params+0xbc>)
    ab22:	47b0      	blx	r6
    dMcastDevAddr.mcast_dev_addr = demoMcastDevAddr;
    ab24:	4b25      	ldr	r3, [pc, #148]	; (abbc <set_multicast_params+0xc0>)
    ab26:	607b      	str	r3, [r7, #4]
    memcpy(&(mcastNwkSKey.mcastNwkSKey), &demoMcastNwksKey,LORAWAN_SESSIONKEY_LENGTH);
    ab28:	2210      	movs	r2, #16
    ab2a:	4925      	ldr	r1, [pc, #148]	; (abc0 <set_multicast_params+0xc4>)
    ab2c:	2009      	movs	r0, #9
    ab2e:	4468      	add	r0, sp
    ab30:	47b0      	blx	r6
    memcpy(&(mcastStatus.status),&demoMcastEnable,sizeof(demoMcastEnable));
    ab32:	2301      	movs	r3, #1
    ab34:	706b      	strb	r3, [r5, #1]
    status = LORAWAN_SetAttr(MCAST_APPS_KEY, &mcastAppSKey);
    ab36:	0021      	movs	r1, r4
    ab38:	202b      	movs	r0, #43	; 0x2b
    ab3a:	4b22      	ldr	r3, [pc, #136]	; (abc4 <set_multicast_params+0xc8>)
    ab3c:	4798      	blx	r3
    if (status == LORAWAN_SUCCESS)
    ab3e:	2808      	cmp	r0, #8
    ab40:	d00a      	beq.n	ab58 <set_multicast_params+0x5c>
	    printf("\nMcastGroupAddrStatus : Failed\n\r");
    ab42:	4821      	ldr	r0, [pc, #132]	; (abc8 <set_multicast_params+0xcc>)
    ab44:	4b1a      	ldr	r3, [pc, #104]	; (abb0 <set_multicast_params+0xb4>)
    ab46:	4798      	blx	r3
	    printf("\nMulticastStatus : Failed\n\r");
    ab48:	4820      	ldr	r0, [pc, #128]	; (abcc <set_multicast_params+0xd0>)
    ab4a:	4b19      	ldr	r3, [pc, #100]	; (abb0 <set_multicast_params+0xb4>)
    ab4c:	4798      	blx	r3
	 printf("\n********************************************************\n\r");
    ab4e:	4820      	ldr	r0, [pc, #128]	; (abd0 <set_multicast_params+0xd4>)
    ab50:	4b17      	ldr	r3, [pc, #92]	; (abb0 <set_multicast_params+0xb4>)
    ab52:	4798      	blx	r3
}
    ab54:	b00f      	add	sp, #60	; 0x3c
    ab56:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    printf("\nMcastAppSessionKey : ");
    ab58:	481e      	ldr	r0, [pc, #120]	; (abd4 <set_multicast_params+0xd8>)
    ab5a:	4b15      	ldr	r3, [pc, #84]	; (abb0 <set_multicast_params+0xb4>)
    ab5c:	4798      	blx	r3
	    print_array((uint8_t *)&(mcastAppSKey.mcastAppSKey), LORAWAN_SESSIONKEY_LENGTH);
    ab5e:	2110      	movs	r1, #16
    ab60:	201d      	movs	r0, #29
    ab62:	4468      	add	r0, sp
    ab64:	4b1c      	ldr	r3, [pc, #112]	; (abd8 <set_multicast_params+0xdc>)
    ab66:	4798      	blx	r3
	    status = LORAWAN_SetAttr(MCAST_NWKS_KEY, &mcastNwkSKey);
    ab68:	a902      	add	r1, sp, #8
    ab6a:	202a      	movs	r0, #42	; 0x2a
    ab6c:	4b15      	ldr	r3, [pc, #84]	; (abc4 <set_multicast_params+0xc8>)
    ab6e:	4798      	blx	r3
    if(status == LORAWAN_SUCCESS)
    ab70:	2808      	cmp	r0, #8
    ab72:	d1e6      	bne.n	ab42 <set_multicast_params+0x46>
	    printf("\nMcastNwkSessionKey : ");
    ab74:	4819      	ldr	r0, [pc, #100]	; (abdc <set_multicast_params+0xe0>)
    ab76:	4b0e      	ldr	r3, [pc, #56]	; (abb0 <set_multicast_params+0xb4>)
    ab78:	4798      	blx	r3
	    print_array((uint8_t *)&(mcastNwkSKey.mcastNwkSKey), LORAWAN_SESSIONKEY_LENGTH);
    ab7a:	2110      	movs	r1, #16
    ab7c:	2009      	movs	r0, #9
    ab7e:	4468      	add	r0, sp
    ab80:	4b15      	ldr	r3, [pc, #84]	; (abd8 <set_multicast_params+0xdc>)
    ab82:	4798      	blx	r3
	    status = LORAWAN_SetAttr(MCAST_GROUP_ADDR, &dMcastDevAddr);
    ab84:	a90c      	add	r1, sp, #48	; 0x30
    ab86:	2029      	movs	r0, #41	; 0x29
    ab88:	4b0e      	ldr	r3, [pc, #56]	; (abc4 <set_multicast_params+0xc8>)
    ab8a:	4798      	blx	r3
    if (status == LORAWAN_SUCCESS)
    ab8c:	2808      	cmp	r0, #8
    ab8e:	d1d8      	bne.n	ab42 <set_multicast_params+0x46>
	    printf("\nMcastGroupAddr : 0x%lx\n\r", dMcastDevAddr.mcast_dev_addr);
    ab90:	990d      	ldr	r1, [sp, #52]	; 0x34
    ab92:	4813      	ldr	r0, [pc, #76]	; (abe0 <set_multicast_params+0xe4>)
    ab94:	4b06      	ldr	r3, [pc, #24]	; (abb0 <set_multicast_params+0xb4>)
    ab96:	4798      	blx	r3
	    status = LORAWAN_SetAttr(MCAST_ENABLE, &mcastStatus);
    ab98:	a901      	add	r1, sp, #4
    ab9a:	2028      	movs	r0, #40	; 0x28
    ab9c:	4b09      	ldr	r3, [pc, #36]	; (abc4 <set_multicast_params+0xc8>)
    ab9e:	4798      	blx	r3
    if (status == LORAWAN_SUCCESS)
    aba0:	2808      	cmp	r0, #8
    aba2:	d1d1      	bne.n	ab48 <set_multicast_params+0x4c>
	    printf("\nMulticastStatus : Enabled\n\r");
    aba4:	480f      	ldr	r0, [pc, #60]	; (abe4 <set_multicast_params+0xe8>)
    aba6:	4b02      	ldr	r3, [pc, #8]	; (abb0 <set_multicast_params+0xb4>)
    aba8:	4798      	blx	r3
    abaa:	e7d0      	b.n	ab4e <set_multicast_params+0x52>
    abac:	0001a980 	.word	0x0001a980
    abb0:	00015005 	.word	0x00015005
    abb4:	0001a0ac 	.word	0x0001a0ac
    abb8:	00014ecd 	.word	0x00014ecd
    abbc:	0037cc56 	.word	0x0037cc56
    abc0:	0001a0bc 	.word	0x0001a0bc
    abc4:	0000ecb9 	.word	0x0000ecb9
    abc8:	0001aa08 	.word	0x0001aa08
    abcc:	0001aa4c 	.word	0x0001aa4c
    abd0:	0001aa68 	.word	0x0001aa68
    abd4:	0001a9bc 	.word	0x0001a9bc
    abd8:	0000a9d1 	.word	0x0000a9d1
    abdc:	0001a9d4 	.word	0x0001a9d4
    abe0:	0001a9ec 	.word	0x0001a9ec
    abe4:	0001aa2c 	.word	0x0001aa2c

0000abe8 <set_device_type>:
{
    abe8:	b510      	push	{r4, lr}
    abea:	b082      	sub	sp, #8
    abec:	466b      	mov	r3, sp
    abee:	1dd9      	adds	r1, r3, #7
    abf0:	7008      	strb	r0, [r1, #0]
    status = LORAWAN_SetAttr(EDCLASS, &ed_class);
    abf2:	2019      	movs	r0, #25
    abf4:	4b08      	ldr	r3, [pc, #32]	; (ac18 <set_device_type+0x30>)
    abf6:	4798      	blx	r3
    abf8:	0004      	movs	r4, r0
    if((LORAWAN_SUCCESS == status) && ((CLASS_C | CLASS_B) & ed_class) && (true == DEMO_APP_MCAST_ENABLE))
    abfa:	2808      	cmp	r0, #8
    abfc:	d002      	beq.n	ac04 <set_device_type+0x1c>
}
    abfe:	0020      	movs	r0, r4
    ac00:	b002      	add	sp, #8
    ac02:	bd10      	pop	{r4, pc}
    if((LORAWAN_SUCCESS == status) && ((CLASS_C | CLASS_B) & ed_class) && (true == DEMO_APP_MCAST_ENABLE))
    ac04:	466b      	mov	r3, sp
    ac06:	3307      	adds	r3, #7
    ac08:	781b      	ldrb	r3, [r3, #0]
    ac0a:	2206      	movs	r2, #6
    ac0c:	421a      	tst	r2, r3
    ac0e:	d0f6      	beq.n	abfe <set_device_type+0x16>
        set_multicast_params();
    ac10:	4b02      	ldr	r3, [pc, #8]	; (ac1c <set_device_type+0x34>)
    ac12:	4798      	blx	r3
    ac14:	e7f3      	b.n	abfe <set_device_type+0x16>
    ac16:	46c0      	nop			; (mov r8, r8)
    ac18:	0000ecb9 	.word	0x0000ecb9
    ac1c:	0000aafd 	.word	0x0000aafd

0000ac20 <mote_set_parameters>:
{
    ac20:	b570      	push	{r4, r5, r6, lr}
    ac22:	b084      	sub	sp, #16
    ac24:	0004      	movs	r4, r0
    bool joinBackoffEnable = false;
    ac26:	2200      	movs	r2, #0
    ac28:	230f      	movs	r3, #15
    ac2a:	446b      	add	r3, sp
    ac2c:	701a      	strb	r2, [r3, #0]
    LORAWAN_Reset(ismBand);
    ac2e:	4b22      	ldr	r3, [pc, #136]	; (acb8 <mote_set_parameters+0x98>)
    ac30:	4798      	blx	r3
    if ((ismBand == ISM_NA915) || (ismBand == ISM_AU915))
    ac32:	3c02      	subs	r4, #2
    ac34:	2c01      	cmp	r4, #1
    ac36:	d910      	bls.n	ac5a <mote_set_parameters+0x3a>
    LORAWAN_SetAttr(JOIN_BACKOFF_ENABLE,&joinBackoffEnable);
    ac38:	210f      	movs	r1, #15
    ac3a:	4469      	add	r1, sp
    ac3c:	202e      	movs	r0, #46	; 0x2e
    ac3e:	4b1f      	ldr	r3, [pc, #124]	; (acbc <mote_set_parameters+0x9c>)
    ac40:	4798      	blx	r3
    status = set_join_parameters(DEMO_APP_ACTIVATION_TYPE);
    ac42:	2000      	movs	r0, #0
    ac44:	4b1e      	ldr	r3, [pc, #120]	; (acc0 <mote_set_parameters+0xa0>)
    ac46:	4798      	blx	r3
    ac48:	0004      	movs	r4, r0
    if (LORAWAN_SUCCESS != status)
    ac4a:	2808      	cmp	r0, #8
    ac4c:	d023      	beq.n	ac96 <mote_set_parameters+0x76>
        printf("\nJoin parameters initialization failed\n\r");
    ac4e:	481d      	ldr	r0, [pc, #116]	; (acc4 <mote_set_parameters+0xa4>)
    ac50:	4b1d      	ldr	r3, [pc, #116]	; (acc8 <mote_set_parameters+0xa8>)
    ac52:	4798      	blx	r3
}
    ac54:	0020      	movs	r0, r4
    ac56:	b004      	add	sp, #16
    ac58:	bd70      	pop	{r4, r5, r6, pc}
        for (ch_params.channelId = 0; ch_params.channelId < MAX_NA_CHANNELS; ch_params.channelId++)
    ac5a:	2200      	movs	r2, #0
    ac5c:	ab01      	add	r3, sp, #4
    ac5e:	701a      	strb	r2, [r3, #0]
    ac60:	2300      	movs	r3, #0
                ch_params.channelAttr.status = false;
    ac62:	ac01      	add	r4, sp, #4
    ac64:	2600      	movs	r6, #0
            LORAWAN_SetAttr(CH_PARAM_STATUS, &ch_params);
    ac66:	4d15      	ldr	r5, [pc, #84]	; (acbc <mote_set_parameters+0x9c>)
    ac68:	e00b      	b.n	ac82 <mote_set_parameters+0x62>
            else if(ch_params.channelId == allowed_500khz_channel)
    ac6a:	2b41      	cmp	r3, #65	; 0x41
    ac6c:	d010      	beq.n	ac90 <mote_set_parameters+0x70>
                ch_params.channelAttr.status = false;
    ac6e:	7126      	strb	r6, [r4, #4]
            LORAWAN_SetAttr(CH_PARAM_STATUS, &ch_params);
    ac70:	0021      	movs	r1, r4
    ac72:	201c      	movs	r0, #28
    ac74:	47a8      	blx	r5
        for (ch_params.channelId = 0; ch_params.channelId < MAX_NA_CHANNELS; ch_params.channelId++)
    ac76:	7823      	ldrb	r3, [r4, #0]
    ac78:	3301      	adds	r3, #1
    ac7a:	b2db      	uxtb	r3, r3
    ac7c:	7023      	strb	r3, [r4, #0]
    ac7e:	2b47      	cmp	r3, #71	; 0x47
    ac80:	d8da      	bhi.n	ac38 <mote_set_parameters+0x18>
            if((ch_params.channelId >= allowed_min_125khz_ch) && (ch_params.channelId <= allowed_max_125khz_ch))
    ac82:	001a      	movs	r2, r3
    ac84:	3a08      	subs	r2, #8
    ac86:	2a07      	cmp	r2, #7
    ac88:	d8ef      	bhi.n	ac6a <mote_set_parameters+0x4a>
                ch_params.channelAttr.status = true;
    ac8a:	2301      	movs	r3, #1
    ac8c:	7123      	strb	r3, [r4, #4]
    ac8e:	e7ef      	b.n	ac70 <mote_set_parameters+0x50>
                ch_params.channelAttr.status = true;
    ac90:	3b40      	subs	r3, #64	; 0x40
    ac92:	7123      	strb	r3, [r4, #4]
    ac94:	e7ec      	b.n	ac70 <mote_set_parameters+0x50>
    status = set_device_type(DEMO_APP_ENDDEVICE_CLASS);
    ac96:	2001      	movs	r0, #1
    ac98:	4b0c      	ldr	r3, [pc, #48]	; (accc <mote_set_parameters+0xac>)
    ac9a:	4798      	blx	r3
    ac9c:	0004      	movs	r4, r0
    if (LORAWAN_SUCCESS != status)
    ac9e:	2808      	cmp	r0, #8
    aca0:	d106      	bne.n	acb0 <mote_set_parameters+0x90>
    while(LORAWAN_SUCCESS != LORAWAN_Join(DEMO_APP_ACTIVATION_TYPE));
    aca2:	4d0b      	ldr	r5, [pc, #44]	; (acd0 <mote_set_parameters+0xb0>)
    aca4:	2000      	movs	r0, #0
    aca6:	47a8      	blx	r5
    aca8:	0004      	movs	r4, r0
    acaa:	2808      	cmp	r0, #8
    acac:	d1fa      	bne.n	aca4 <mote_set_parameters+0x84>
    acae:	e7d1      	b.n	ac54 <mote_set_parameters+0x34>
        printf("\nUnsupported Device Type\n\r");
    acb0:	4808      	ldr	r0, [pc, #32]	; (acd4 <mote_set_parameters+0xb4>)
    acb2:	4b05      	ldr	r3, [pc, #20]	; (acc8 <mote_set_parameters+0xa8>)
    acb4:	4798      	blx	r3
        return status;
    acb6:	e7cd      	b.n	ac54 <mote_set_parameters+0x34>
    acb8:	0000f199 	.word	0x0000f199
    acbc:	0000ecb9 	.word	0x0000ecb9
    acc0:	0000aa11 	.word	0x0000aa11
    acc4:	0001a5b4 	.word	0x0001a5b4
    acc8:	00015005 	.word	0x00015005
    accc:	0000abe9 	.word	0x0000abe9
    acd0:	0000c989 	.word	0x0000c989
    acd4:	0001a5e0 	.word	0x0001a5e0

0000acd8 <print_application_config>:

/*********************************************************************//*
 \brief      Function to Print application configuration
 ************************************************************************/
void  print_application_config (void)
{
    acd8:	b530      	push	{r4, r5, lr}
    acda:	b083      	sub	sp, #12
    EdClass_t edClass;
    printf("\n***************Application Configuration***************\n\r");
    acdc:	4814      	ldr	r0, [pc, #80]	; (ad30 <print_application_config+0x58>)
    acde:	4d15      	ldr	r5, [pc, #84]	; (ad34 <print_application_config+0x5c>)
    ace0:	47a8      	blx	r5
    LORAWAN_GetAttr(EDCLASS, NULL, &edClass);
    ace2:	466b      	mov	r3, sp
    ace4:	1ddc      	adds	r4, r3, #7
    ace6:	0022      	movs	r2, r4
    ace8:	2100      	movs	r1, #0
    acea:	2019      	movs	r0, #25
    acec:	4b12      	ldr	r3, [pc, #72]	; (ad38 <print_application_config+0x60>)
    acee:	4798      	blx	r3
    printf("\nDevType : ");
    acf0:	4812      	ldr	r0, [pc, #72]	; (ad3c <print_application_config+0x64>)
    acf2:	47a8      	blx	r5

    if(edClass == CLASS_A)
    acf4:	7823      	ldrb	r3, [r4, #0]
    acf6:	2b01      	cmp	r3, #1
    acf8:	d011      	beq.n	ad1e <print_application_config+0x46>
    {
        printf("CLASS A\n\r");
    }
    else if(edClass == CLASS_C)
    acfa:	2b04      	cmp	r3, #4
    acfc:	d013      	beq.n	ad26 <print_application_config+0x4e>
    {
        printf("CLASS C\n\r");
    }

    printf("\nActivationType : ");
    acfe:	4810      	ldr	r0, [pc, #64]	; (ad40 <print_application_config+0x68>)
    ad00:	4c0c      	ldr	r4, [pc, #48]	; (ad34 <print_application_config+0x5c>)
    ad02:	47a0      	blx	r4

    if(DEMO_APP_ACTIVATION_TYPE == OVER_THE_AIR_ACTIVATION)
    {
        printf("OTAA\n\r");
    ad04:	480f      	ldr	r0, [pc, #60]	; (ad44 <print_application_config+0x6c>)
    ad06:	47a0      	blx	r4
    else if(DEMO_APP_ACTIVATION_TYPE == ACTIVATION_BY_PERSONALIZATION)
    {
        printf("ABP\n\r");
    }

    printf("\nTransmission Type - ");
    ad08:	480f      	ldr	r0, [pc, #60]	; (ad48 <print_application_config+0x70>)
    ad0a:	47a0      	blx	r4

    if(DEMO_APP_TRANSMISSION_TYPE == CONFIRMED)
    {
        printf("CONFIRMED\n\r");
    ad0c:	480f      	ldr	r0, [pc, #60]	; (ad4c <print_application_config+0x74>)
    ad0e:	47a0      	blx	r4
    else if(DEMO_APP_TRANSMISSION_TYPE == UNCONFIRMED)
    {
        printf("UNCONFIRMED\n\r");
    }

    printf("\nFPort - %d\n\r", DEMO_APP_FPORT);
    ad10:	2101      	movs	r1, #1
    ad12:	480f      	ldr	r0, [pc, #60]	; (ad50 <print_application_config+0x78>)
    ad14:	47a0      	blx	r4

    printf("\n*******************************************************\n\r");
    ad16:	480f      	ldr	r0, [pc, #60]	; (ad54 <print_application_config+0x7c>)
    ad18:	47a0      	blx	r4
}
    ad1a:	b003      	add	sp, #12
    ad1c:	bd30      	pop	{r4, r5, pc}
        printf("CLASS A\n\r");
    ad1e:	480e      	ldr	r0, [pc, #56]	; (ad58 <print_application_config+0x80>)
    ad20:	4b04      	ldr	r3, [pc, #16]	; (ad34 <print_application_config+0x5c>)
    ad22:	4798      	blx	r3
    ad24:	e7eb      	b.n	acfe <print_application_config+0x26>
        printf("CLASS C\n\r");
    ad26:	480d      	ldr	r0, [pc, #52]	; (ad5c <print_application_config+0x84>)
    ad28:	4b02      	ldr	r3, [pc, #8]	; (ad34 <print_application_config+0x5c>)
    ad2a:	4798      	blx	r3
    ad2c:	e7e7      	b.n	acfe <print_application_config+0x26>
    ad2e:	46c0      	nop			; (mov r8, r8)
    ad30:	0001a5fc 	.word	0x0001a5fc
    ad34:	00015005 	.word	0x00015005
    ad38:	0000d051 	.word	0x0000d051
    ad3c:	0001a638 	.word	0x0001a638
    ad40:	0001a65c 	.word	0x0001a65c
    ad44:	0001a670 	.word	0x0001a670
    ad48:	0001a678 	.word	0x0001a678
    ad4c:	0001a690 	.word	0x0001a690
    ad50:	0001a69c 	.word	0x0001a69c
    ad54:	0001a6ac 	.word	0x0001a6ac
    ad58:	0001a644 	.word	0x0001a644
    ad5c:	0001a650 	.word	0x0001a650

0000ad60 <demo_joindata_callback>:
{
    ad60:	b510      	push	{r4, lr}
    ad62:	b082      	sub	sp, #8
    if(LORAWAN_SUCCESS == status)
    ad64:	2808      	cmp	r0, #8
    ad66:	d018      	beq.n	ad9a <demo_joindata_callback+0x3a>
	else if(LORAWAN_NO_CHANNELS_FOUND == status)
    ad68:	2810      	cmp	r0, #16
    ad6a:	d039      	beq.n	ade0 <demo_joindata_callback+0x80>
	else if (LORAWAN_MIC_ERROR == status)
    ad6c:	2818      	cmp	r0, #24
    ad6e:	d03e      	beq.n	adee <demo_joindata_callback+0x8e>
	else if (LORAWAN_TX_TIMEOUT == status)
    ad70:	281b      	cmp	r0, #27
    ad72:	d043      	beq.n	adfc <demo_joindata_callback+0x9c>
        joined = false;
    ad74:	2200      	movs	r2, #0
    ad76:	4b25      	ldr	r3, [pc, #148]	; (ae0c <demo_joindata_callback+0xac>)
    ad78:	701a      	strb	r2, [r3, #0]
        printf("\nJoining Denied\n\r");
    ad7a:	4825      	ldr	r0, [pc, #148]	; (ae10 <demo_joindata_callback+0xb0>)
    ad7c:	4b25      	ldr	r3, [pc, #148]	; (ae14 <demo_joindata_callback+0xb4>)
    ad7e:	4798      	blx	r3
    printf("\n\r*******************************************************\n\r");
    ad80:	4825      	ldr	r0, [pc, #148]	; (ae18 <demo_joindata_callback+0xb8>)
    ad82:	4b24      	ldr	r3, [pc, #144]	; (ae14 <demo_joindata_callback+0xb4>)
    ad84:	4798      	blx	r3
    PDS_StoreAll();
    ad86:	4b25      	ldr	r3, [pc, #148]	; (ae1c <demo_joindata_callback+0xbc>)
    ad88:	4798      	blx	r3
	appTaskState = JOIN_SEND_STATE;
    ad8a:	2203      	movs	r2, #3
    ad8c:	4b24      	ldr	r3, [pc, #144]	; (ae20 <demo_joindata_callback+0xc0>)
    ad8e:	701a      	strb	r2, [r3, #0]
	appPostTask(PROCESS_TASK_HANDLER);
    ad90:	2001      	movs	r0, #1
    ad92:	4b24      	ldr	r3, [pc, #144]	; (ae24 <demo_joindata_callback+0xc4>)
    ad94:	4798      	blx	r3
}
    ad96:	b002      	add	sp, #8
    ad98:	bd10      	pop	{r4, pc}
        joined = true;
    ad9a:	2201      	movs	r2, #1
    ad9c:	4b1b      	ldr	r3, [pc, #108]	; (ae0c <demo_joindata_callback+0xac>)
    ad9e:	701a      	strb	r2, [r3, #0]
        printf("\nJoining Successful\n\r");
    ada0:	4821      	ldr	r0, [pc, #132]	; (ae28 <demo_joindata_callback+0xc8>)
    ada2:	4b1c      	ldr	r3, [pc, #112]	; (ae14 <demo_joindata_callback+0xb4>)
    ada4:	4798      	blx	r3
        LORAWAN_GetAttr(DEV_ADDR, NULL, &devAddress);
    ada6:	aa01      	add	r2, sp, #4
    ada8:	2100      	movs	r1, #0
    adaa:	2002      	movs	r0, #2
    adac:	4c1f      	ldr	r4, [pc, #124]	; (ae2c <demo_joindata_callback+0xcc>)
    adae:	47a0      	blx	r4
        LORAWAN_GetAttr(MCAST_ENABLE, NULL, &mcastEnabled);
    adb0:	466b      	mov	r3, sp
    adb2:	1cda      	adds	r2, r3, #3
    adb4:	2100      	movs	r1, #0
    adb6:	2028      	movs	r0, #40	; 0x28
    adb8:	47a0      	blx	r4
        if (devAddress != DEMO_APP_MCAST_GROUP_ADDRESS)
    adba:	9901      	ldr	r1, [sp, #4]
    adbc:	4b1c      	ldr	r3, [pc, #112]	; (ae30 <demo_joindata_callback+0xd0>)
    adbe:	4299      	cmp	r1, r3
    adc0:	d005      	beq.n	adce <demo_joindata_callback+0x6e>
            printf("\nDevAddr: 0x%lx\n\r", devAddress);
    adc2:	481c      	ldr	r0, [pc, #112]	; (ae34 <demo_joindata_callback+0xd4>)
    adc4:	4b13      	ldr	r3, [pc, #76]	; (ae14 <demo_joindata_callback+0xb4>)
    adc6:	4798      	blx	r3
        print_application_config();
    adc8:	4b1b      	ldr	r3, [pc, #108]	; (ae38 <demo_joindata_callback+0xd8>)
    adca:	4798      	blx	r3
    adcc:	e7d8      	b.n	ad80 <demo_joindata_callback+0x20>
        else if ((devAddress == DEMO_APP_MCAST_GROUP_ADDRESS) && (true == mcastEnabled))
    adce:	466b      	mov	r3, sp
    add0:	3303      	adds	r3, #3
    add2:	781b      	ldrb	r3, [r3, #0]
    add4:	2b00      	cmp	r3, #0
    add6:	d0f7      	beq.n	adc8 <demo_joindata_callback+0x68>
            printf("\nAddress conflict between Device Address and Multicast group address\n\r");
    add8:	4818      	ldr	r0, [pc, #96]	; (ae3c <demo_joindata_callback+0xdc>)
    adda:	4b0e      	ldr	r3, [pc, #56]	; (ae14 <demo_joindata_callback+0xb4>)
    addc:	4798      	blx	r3
    adde:	e7f3      	b.n	adc8 <demo_joindata_callback+0x68>
		joined = false;
    ade0:	2200      	movs	r2, #0
    ade2:	4b0a      	ldr	r3, [pc, #40]	; (ae0c <demo_joindata_callback+0xac>)
    ade4:	701a      	strb	r2, [r3, #0]
		printf("\n No Free Channel found");
    ade6:	4816      	ldr	r0, [pc, #88]	; (ae40 <demo_joindata_callback+0xe0>)
    ade8:	4b0a      	ldr	r3, [pc, #40]	; (ae14 <demo_joindata_callback+0xb4>)
    adea:	4798      	blx	r3
    adec:	e7c8      	b.n	ad80 <demo_joindata_callback+0x20>
		joined = false;
    adee:	2200      	movs	r2, #0
    adf0:	4b06      	ldr	r3, [pc, #24]	; (ae0c <demo_joindata_callback+0xac>)
    adf2:	701a      	strb	r2, [r3, #0]
		printf("\n MIC Error");
    adf4:	4813      	ldr	r0, [pc, #76]	; (ae44 <demo_joindata_callback+0xe4>)
    adf6:	4b07      	ldr	r3, [pc, #28]	; (ae14 <demo_joindata_callback+0xb4>)
    adf8:	4798      	blx	r3
    adfa:	e7c1      	b.n	ad80 <demo_joindata_callback+0x20>
		joined = false;
    adfc:	2200      	movs	r2, #0
    adfe:	4b03      	ldr	r3, [pc, #12]	; (ae0c <demo_joindata_callback+0xac>)
    ae00:	701a      	strb	r2, [r3, #0]
		printf("\n Transmission Timeout");
    ae02:	4811      	ldr	r0, [pc, #68]	; (ae48 <demo_joindata_callback+0xe8>)
    ae04:	4b03      	ldr	r3, [pc, #12]	; (ae14 <demo_joindata_callback+0xb4>)
    ae06:	4798      	blx	r3
    ae08:	e7ba      	b.n	ad80 <demo_joindata_callback+0x20>
    ae0a:	46c0      	nop			; (mov r8, r8)
    ae0c:	20000e6f 	.word	0x20000e6f
    ae10:	0001a500 	.word	0x0001a500
    ae14:	00015005 	.word	0x00015005
    ae18:	0001a514 	.word	0x0001a514
    ae1c:	000091e9 	.word	0x000091e9
    ae20:	20000e5b 	.word	0x20000e5b
    ae24:	0000a559 	.word	0x0000a559
    ae28:	0001a450 	.word	0x0001a450
    ae2c:	0000d051 	.word	0x0000d051
    ae30:	0037cc56 	.word	0x0037cc56
    ae34:	0001a468 	.word	0x0001a468
    ae38:	0000acd9 	.word	0x0000acd9
    ae3c:	0001a47c 	.word	0x0001a47c
    ae40:	0001a4c4 	.word	0x0001a4c4
    ae44:	0001a4dc 	.word	0x0001a4dc
    ae48:	0001a4e8 	.word	0x0001a4e8

0000ae4c <print_stack_status>:
/*********************************************************************//*
 \brief      Function to Print stack return status
 \param[in]  status - Status from the stack
 ************************************************************************/
void print_stack_status(StackRetStatus_t status)
{
    ae4c:	b510      	push	{r4, lr}
    switch(status)
    ae4e:	0003      	movs	r3, r0
    ae50:	3b08      	subs	r3, #8
    ae52:	b2da      	uxtb	r2, r3
    ae54:	2a0d      	cmp	r2, #13
    ae56:	d833      	bhi.n	aec0 <print_stack_status+0x74>
    ae58:	0093      	lsls	r3, r2, #2
    ae5a:	4a1c      	ldr	r2, [pc, #112]	; (aecc <print_stack_status+0x80>)
    ae5c:	58d3      	ldr	r3, [r2, r3]
    ae5e:	469f      	mov	pc, r3
    {
        case LORAWAN_SUCCESS:
             printf("\nlorawan_success\n\r");
    ae60:	481b      	ldr	r0, [pc, #108]	; (aed0 <print_stack_status+0x84>)
    ae62:	4b1c      	ldr	r3, [pc, #112]	; (aed4 <print_stack_status+0x88>)
    ae64:	4798      	blx	r3
        break;
        default:
           printf("\nrequest_failed %d\n\r",status);
        break;
    }
}
    ae66:	bd10      	pop	{r4, pc}
             printf("\nlorawan_state : stack_Busy\n\r");
    ae68:	481b      	ldr	r0, [pc, #108]	; (aed8 <print_stack_status+0x8c>)
    ae6a:	4b1a      	ldr	r3, [pc, #104]	; (aed4 <print_stack_status+0x88>)
    ae6c:	4798      	blx	r3
        break;
    ae6e:	e7fa      	b.n	ae66 <print_stack_status+0x1a>
            printf("\ndevice_not_joined_to_network\n\r");
    ae70:	481a      	ldr	r0, [pc, #104]	; (aedc <print_stack_status+0x90>)
    ae72:	4b18      	ldr	r3, [pc, #96]	; (aed4 <print_stack_status+0x88>)
    ae74:	4798      	blx	r3
        break;
    ae76:	e7f6      	b.n	ae66 <print_stack_status+0x1a>
            printf("\ninvalid_parameter\n\r");
    ae78:	4819      	ldr	r0, [pc, #100]	; (aee0 <print_stack_status+0x94>)
    ae7a:	4b16      	ldr	r3, [pc, #88]	; (aed4 <print_stack_status+0x88>)
    ae7c:	4798      	blx	r3
        break;
    ae7e:	e7f2      	b.n	ae66 <print_stack_status+0x1a>
            printf("\nkeys_not_initialized\n\r");
    ae80:	4818      	ldr	r0, [pc, #96]	; (aee4 <print_stack_status+0x98>)
    ae82:	4b14      	ldr	r3, [pc, #80]	; (aed4 <print_stack_status+0x88>)
    ae84:	4798      	blx	r3
        break;
    ae86:	e7ee      	b.n	ae66 <print_stack_status+0x1a>
            printf("\nsilent_immediately_active\n\r");
    ae88:	4817      	ldr	r0, [pc, #92]	; (aee8 <print_stack_status+0x9c>)
    ae8a:	4b12      	ldr	r3, [pc, #72]	; (aed4 <print_stack_status+0x88>)
    ae8c:	4798      	blx	r3
        break;
    ae8e:	e7ea      	b.n	ae66 <print_stack_status+0x1a>
            printf("\nframecounter_error_rejoin_needed\n\r");
    ae90:	4816      	ldr	r0, [pc, #88]	; (aeec <print_stack_status+0xa0>)
    ae92:	4b10      	ldr	r3, [pc, #64]	; (aed4 <print_stack_status+0x88>)
    ae94:	4798      	blx	r3
        break;
    ae96:	e7e6      	b.n	ae66 <print_stack_status+0x1a>
            printf("\ninvalid_buffer_length\n\r");
    ae98:	4815      	ldr	r0, [pc, #84]	; (aef0 <print_stack_status+0xa4>)
    ae9a:	4b0e      	ldr	r3, [pc, #56]	; (aed4 <print_stack_status+0x88>)
    ae9c:	4798      	blx	r3
        break;
    ae9e:	e7e2      	b.n	ae66 <print_stack_status+0x1a>
            printf("\nMAC_paused\n\r");
    aea0:	4814      	ldr	r0, [pc, #80]	; (aef4 <print_stack_status+0xa8>)
    aea2:	4b0c      	ldr	r3, [pc, #48]	; (aed4 <print_stack_status+0x88>)
    aea4:	4798      	blx	r3
        break;
    aea6:	e7de      	b.n	ae66 <print_stack_status+0x1a>
            printf("\nno_free_channels_found\n\r");
    aea8:	4813      	ldr	r0, [pc, #76]	; (aef8 <print_stack_status+0xac>)
    aeaa:	4b0a      	ldr	r3, [pc, #40]	; (aed4 <print_stack_status+0x88>)
    aeac:	4798      	blx	r3
        break;
    aeae:	e7da      	b.n	ae66 <print_stack_status+0x1a>
            printf("\nrequest_invalid\n\r");
    aeb0:	4812      	ldr	r0, [pc, #72]	; (aefc <print_stack_status+0xb0>)
    aeb2:	4b08      	ldr	r3, [pc, #32]	; (aed4 <print_stack_status+0x88>)
    aeb4:	4798      	blx	r3
        break;
    aeb6:	e7d6      	b.n	ae66 <print_stack_status+0x1a>
            printf("\nprev_join_request_in_progress\n\r");
    aeb8:	4811      	ldr	r0, [pc, #68]	; (af00 <print_stack_status+0xb4>)
    aeba:	4b06      	ldr	r3, [pc, #24]	; (aed4 <print_stack_status+0x88>)
    aebc:	4798      	blx	r3
        break;
    aebe:	e7d2      	b.n	ae66 <print_stack_status+0x1a>
           printf("\nrequest_failed %d\n\r",status);
    aec0:	0001      	movs	r1, r0
    aec2:	4810      	ldr	r0, [pc, #64]	; (af04 <print_stack_status+0xb8>)
    aec4:	4b03      	ldr	r3, [pc, #12]	; (aed4 <print_stack_status+0x88>)
    aec6:	4798      	blx	r3
}
    aec8:	e7cd      	b.n	ae66 <print_stack_status+0x1a>
    aeca:	46c0      	nop			; (mov r8, r8)
    aecc:	0001a044 	.word	0x0001a044
    aed0:	0001a6f4 	.word	0x0001a6f4
    aed4:	00015005 	.word	0x00015005
    aed8:	0001a708 	.word	0x0001a708
    aedc:	0001a728 	.word	0x0001a728
    aee0:	0001a748 	.word	0x0001a748
    aee4:	0001a760 	.word	0x0001a760
    aee8:	0001a778 	.word	0x0001a778
    aeec:	0001a798 	.word	0x0001a798
    aef0:	0001a7bc 	.word	0x0001a7bc
    aef4:	0001a7d8 	.word	0x0001a7d8
    aef8:	0001a7e8 	.word	0x0001a7e8
    aefc:	0001a804 	.word	0x0001a804
    af00:	0001a818 	.word	0x0001a818
    af04:	0001a83c 	.word	0x0001a83c

0000af08 <processTask>:
{
    af08:	b530      	push	{r4, r5, lr}
    af0a:	b085      	sub	sp, #20
	switch(appTaskState)
    af0c:	4b75      	ldr	r3, [pc, #468]	; (b0e4 <processTask+0x1dc>)
    af0e:	781b      	ldrb	r3, [r3, #0]
    af10:	2b01      	cmp	r3, #1
    af12:	d100      	bne.n	af16 <processTask+0xe>
    af14:	e080      	b.n	b018 <processTask+0x110>
    af16:	2b00      	cmp	r3, #0
    af18:	d009      	beq.n	af2e <processTask+0x26>
    af1a:	2b02      	cmp	r3, #2
    af1c:	d100      	bne.n	af20 <processTask+0x18>
    af1e:	e084      	b.n	b02a <processTask+0x122>
    af20:	2b03      	cmp	r3, #3
    af22:	d100      	bne.n	af26 <processTask+0x1e>
    af24:	e090      	b.n	b048 <processTask+0x140>
			printf("Error STATE Entered\r\n");
    af26:	4870      	ldr	r0, [pc, #448]	; (b0e8 <processTask+0x1e0>)
    af28:	4b70      	ldr	r3, [pc, #448]	; (b0ec <processTask+0x1e4>)
    af2a:	4798      	blx	r3
	return SYSTEM_TASK_SUCCESS;
    af2c:	e07a      	b.n	b024 <processTask+0x11c>
	uint8_t prevBand = 0xff;
    af2e:	240a      	movs	r4, #10
    af30:	446c      	add	r4, sp
    af32:	23ff      	movs	r3, #255	; 0xff
    af34:	7023      	strb	r3, [r4, #0]
	bool joinBackoffEnable = false;
    af36:	2200      	movs	r2, #0
    af38:	3bf4      	subs	r3, #244	; 0xf4
    af3a:	446b      	add	r3, sp
    af3c:	701a      	strb	r2, [r3, #0]
	PDS_RestoreAll();
    af3e:	4b6c      	ldr	r3, [pc, #432]	; (b0f0 <processTask+0x1e8>)
    af40:	4798      	blx	r3
	LORAWAN_GetAttr(ISMBAND,NULL,&prevBand);
    af42:	0022      	movs	r2, r4
    af44:	2100      	movs	r1, #0
    af46:	2023      	movs	r0, #35	; 0x23
    af48:	4b6a      	ldr	r3, [pc, #424]	; (b0f4 <processTask+0x1ec>)
    af4a:	4798      	blx	r3
		if(bandTable[i] == prevBand)
    af4c:	7821      	ldrb	r1, [r4, #0]
    af4e:	4b6a      	ldr	r3, [pc, #424]	; (b0f8 <processTask+0x1f0>)
    af50:	781b      	ldrb	r3, [r3, #0]
    af52:	428b      	cmp	r3, r1
    af54:	d100      	bne.n	af58 <processTask+0x50>
    af56:	e0be      	b.n	b0d6 <processTask+0x1ce>
    af58:	2301      	movs	r3, #1
    af5a:	4867      	ldr	r0, [pc, #412]	; (b0f8 <processTask+0x1f0>)
    af5c:	5c1a      	ldrb	r2, [r3, r0]
    af5e:	428a      	cmp	r2, r1
    af60:	d014      	beq.n	af8c <processTask+0x84>
	for (uint32_t i = 0; i < sizeof(bandTable)-1; i++)
    af62:	3301      	adds	r3, #1
    af64:	2b09      	cmp	r3, #9
    af66:	d1f9      	bne.n	af5c <processTask+0x54>
    LORAWAN_SetAttr(JOIN_BACKOFF_ENABLE,&joinBackoffEnable);
    af68:	210b      	movs	r1, #11
    af6a:	4469      	add	r1, sp
    af6c:	202e      	movs	r0, #46	; 0x2e
    af6e:	4b63      	ldr	r3, [pc, #396]	; (b0fc <processTask+0x1f4>)
    af70:	4798      	blx	r3
	uint8_t choice = 0xff;
    af72:	24ff      	movs	r4, #255	; 0xff
	if(status == LORAWAN_SUCCESS && choice < sizeof(bandTable)-1)
    af74:	2c08      	cmp	r4, #8
    af76:	d91d      	bls.n	afb4 <processTask+0xac>
		printf("Restoration failed\r\n");
    af78:	4861      	ldr	r0, [pc, #388]	; (b100 <processTask+0x1f8>)
    af7a:	4b5c      	ldr	r3, [pc, #368]	; (b0ec <processTask+0x1e4>)
    af7c:	4798      	blx	r3
		appTaskState = DEMO_APP_STATE;
    af7e:	2202      	movs	r2, #2
    af80:	4b58      	ldr	r3, [pc, #352]	; (b0e4 <processTask+0x1dc>)
    af82:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
    af84:	2000      	movs	r0, #0
    af86:	4b5f      	ldr	r3, [pc, #380]	; (b104 <processTask+0x1fc>)
    af88:	4798      	blx	r3
    af8a:	e04b      	b.n	b024 <processTask+0x11c>
			choice = i;
    af8c:	b2dc      	uxtb	r4, r3
	if(choice >0 && choice < sizeof(bandTable)-1)
    af8e:	1e62      	subs	r2, r4, #1
    af90:	2a07      	cmp	r2, #7
    af92:	d900      	bls.n	af96 <processTask+0x8e>
    af94:	e0a0      	b.n	b0d8 <processTask+0x1d0>
		status = LORAWAN_Reset(bandTable[choice]);
    af96:	22ff      	movs	r2, #255	; 0xff
    af98:	4013      	ands	r3, r2
    af9a:	4a57      	ldr	r2, [pc, #348]	; (b0f8 <processTask+0x1f0>)
    af9c:	5cd0      	ldrb	r0, [r2, r3]
    af9e:	4b5a      	ldr	r3, [pc, #360]	; (b108 <processTask+0x200>)
    afa0:	4798      	blx	r3
    afa2:	0005      	movs	r5, r0
    LORAWAN_SetAttr(JOIN_BACKOFF_ENABLE,&joinBackoffEnable);
    afa4:	210b      	movs	r1, #11
    afa6:	4469      	add	r1, sp
    afa8:	202e      	movs	r0, #46	; 0x2e
    afaa:	4b54      	ldr	r3, [pc, #336]	; (b0fc <processTask+0x1f4>)
    afac:	4798      	blx	r3
	if(status == LORAWAN_SUCCESS && choice < sizeof(bandTable)-1)
    afae:	2d08      	cmp	r5, #8
    afb0:	d1e2      	bne.n	af78 <processTask+0x70>
    afb2:	e7df      	b.n	af74 <processTask+0x6c>
		uint32_t joinStatus = 0;
    afb4:	2300      	movs	r3, #0
    afb6:	9303      	str	r3, [sp, #12]
		PDS_RestoreAll();
    afb8:	4b4d      	ldr	r3, [pc, #308]	; (b0f0 <processTask+0x1e8>)
    afba:	4798      	blx	r3
		LORAWAN_GetAttr(LORAWAN_STATUS,NULL, &joinStatus);
    afbc:	aa03      	add	r2, sp, #12
    afbe:	2100      	movs	r1, #0
    afc0:	2020      	movs	r0, #32
    afc2:	4b4c      	ldr	r3, [pc, #304]	; (b0f4 <processTask+0x1ec>)
    afc4:	4798      	blx	r3
		printf("\r\nPDS_RestorationStatus: Success\r\n" );
    afc6:	4851      	ldr	r0, [pc, #324]	; (b10c <processTask+0x204>)
    afc8:	4b48      	ldr	r3, [pc, #288]	; (b0ec <processTask+0x1e4>)
    afca:	4798      	blx	r3
		if(joinStatus & LORAWAN_NW_JOINED)
    afcc:	9b03      	ldr	r3, [sp, #12]
    afce:	07db      	lsls	r3, r3, #31
    afd0:	d514      	bpl.n	affc <processTask+0xf4>
			joined = true;
    afd2:	2201      	movs	r2, #1
    afd4:	4b4e      	ldr	r3, [pc, #312]	; (b110 <processTask+0x208>)
    afd6:	701a      	strb	r2, [r3, #0]
			printf("joinStatus: Joined\r\n");
    afd8:	484e      	ldr	r0, [pc, #312]	; (b114 <processTask+0x20c>)
    afda:	4b44      	ldr	r3, [pc, #272]	; (b0ec <processTask+0x1e4>)
    afdc:	4798      	blx	r3
		printf("Band: %s\r\n",bandStrings[choice]);
    afde:	00a4      	lsls	r4, r4, #2
    afe0:	4b4d      	ldr	r3, [pc, #308]	; (b118 <processTask+0x210>)
    afe2:	58e1      	ldr	r1, [r4, r3]
    afe4:	484d      	ldr	r0, [pc, #308]	; (b11c <processTask+0x214>)
    afe6:	4b4e      	ldr	r3, [pc, #312]	; (b120 <processTask+0x218>)
    afe8:	4798      	blx	r3
		print_application_config();
    afea:	4b4e      	ldr	r3, [pc, #312]	; (b124 <processTask+0x21c>)
    afec:	4798      	blx	r3
		appTaskState = JOIN_SEND_STATE;
    afee:	2203      	movs	r2, #3
    aff0:	4b3c      	ldr	r3, [pc, #240]	; (b0e4 <processTask+0x1dc>)
    aff2:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
    aff4:	2000      	movs	r0, #0
    aff6:	4b43      	ldr	r3, [pc, #268]	; (b104 <processTask+0x1fc>)
    aff8:	4798      	blx	r3
    affa:	e013      	b.n	b024 <processTask+0x11c>
			joined = false;
    affc:	2200      	movs	r2, #0
    affe:	4b44      	ldr	r3, [pc, #272]	; (b110 <processTask+0x208>)
    b000:	701a      	strb	r2, [r3, #0]
			printf("JoinStatus : Denied\r\n");
    b002:	4849      	ldr	r0, [pc, #292]	; (b128 <processTask+0x220>)
    b004:	4b39      	ldr	r3, [pc, #228]	; (b0ec <processTask+0x1e4>)
    b006:	4798      	blx	r3
			set_LED_data(LED_AMBER,&on);
    b008:	4948      	ldr	r1, [pc, #288]	; (b12c <processTask+0x224>)
    b00a:	2002      	movs	r0, #2
    b00c:	4b48      	ldr	r3, [pc, #288]	; (b130 <processTask+0x228>)
    b00e:	4798      	blx	r3
			SYSTEM_PostTask(APP_TASK_ID);
    b010:	2010      	movs	r0, #16
    b012:	4b48      	ldr	r3, [pc, #288]	; (b134 <processTask+0x22c>)
    b014:	4798      	blx	r3
    b016:	e7e2      	b.n	afde <processTask+0xd6>
	appTaskState = DEMO_APP_STATE;
    b018:	2202      	movs	r2, #2
    b01a:	4b32      	ldr	r3, [pc, #200]	; (b0e4 <processTask+0x1dc>)
    b01c:	701a      	strb	r2, [r3, #0]
	appPostTask(PROCESS_TASK_HANDLER);
    b01e:	2001      	movs	r0, #1
    b020:	4b38      	ldr	r3, [pc, #224]	; (b104 <processTask+0x1fc>)
    b022:	4798      	blx	r3
}
    b024:	2000      	movs	r0, #0
    b026:	b005      	add	sp, #20
    b028:	bd30      	pop	{r4, r5, pc}
	LORAWAN_Reset(bandTable[BAND_NUM]);
    b02a:	4c33      	ldr	r4, [pc, #204]	; (b0f8 <processTask+0x1f0>)
    b02c:	78a0      	ldrb	r0, [r4, #2]
    b02e:	4b36      	ldr	r3, [pc, #216]	; (b108 <processTask+0x200>)
    b030:	4798      	blx	r3
	mote_set_parameters(bandTable[BAND_NUM], 1);
    b032:	78a0      	ldrb	r0, [r4, #2]
    b034:	2101      	movs	r1, #1
    b036:	4b40      	ldr	r3, [pc, #256]	; (b138 <processTask+0x230>)
    b038:	4798      	blx	r3
	appTaskState = JOIN_SEND_STATE;
    b03a:	2203      	movs	r2, #3
    b03c:	4b29      	ldr	r3, [pc, #164]	; (b0e4 <processTask+0x1dc>)
    b03e:	701a      	strb	r2, [r3, #0]
	appPostTask(PROCESS_TASK_HANDLER);
    b040:	2001      	movs	r0, #1
    b042:	4b30      	ldr	r3, [pc, #192]	; (b104 <processTask+0x1fc>)
    b044:	4798      	blx	r3
    b046:	e7ed      	b.n	b024 <processTask+0x11c>
	if (joined && txDataReady)
    b048:	4b31      	ldr	r3, [pc, #196]	; (b110 <processTask+0x208>)
    b04a:	781b      	ldrb	r3, [r3, #0]
    b04c:	2b00      	cmp	r3, #0
    b04e:	d02d      	beq.n	b0ac <processTask+0x1a4>
    b050:	4b3a      	ldr	r3, [pc, #232]	; (b13c <processTask+0x234>)
    b052:	781b      	ldrb	r3, [r3, #0]
    b054:	2b00      	cmp	r3, #0
    b056:	d0e5      	beq.n	b024 <processTask+0x11c>
    lorawanSendReq.buffer = getBuffer();//&temp_sen_str;
    b058:	4b39      	ldr	r3, [pc, #228]	; (b140 <processTask+0x238>)
    b05a:	4798      	blx	r3
    b05c:	4c39      	ldr	r4, [pc, #228]	; (b144 <processTask+0x23c>)
    b05e:	6060      	str	r0, [r4, #4]
    lorawanSendReq.bufferLength = getSize();//data_len - 1;
    b060:	4b39      	ldr	r3, [pc, #228]	; (b148 <processTask+0x240>)
    b062:	4798      	blx	r3
    b064:	7220      	strb	r0, [r4, #8]
    lorawanSendReq.confirmed = DEMO_APP_TRANSMISSION_TYPE;
    b066:	2501      	movs	r5, #1
    b068:	7025      	strb	r5, [r4, #0]
    lorawanSendReq.port = DEMO_APP_FPORT;
    b06a:	7065      	strb	r5, [r4, #1]
    status = LORAWAN_Send(&lorawanSendReq);
    b06c:	0020      	movs	r0, r4
    b06e:	4b37      	ldr	r3, [pc, #220]	; (b14c <processTask+0x244>)
    b070:	4798      	blx	r3
	txDataReady = false;
    b072:	2200      	movs	r2, #0
    b074:	4b31      	ldr	r3, [pc, #196]	; (b13c <processTask+0x234>)
    b076:	701a      	strb	r2, [r3, #0]
	dataSent = true;
    b078:	4b35      	ldr	r3, [pc, #212]	; (b150 <processTask+0x248>)
    b07a:	701d      	strb	r5, [r3, #0]
    if (LORAWAN_SUCCESS == status)
    b07c:	2808      	cmp	r0, #8
    b07e:	d008      	beq.n	b092 <processTask+0x18a>
        print_stack_status(status);
    b080:	4b34      	ldr	r3, [pc, #208]	; (b154 <processTask+0x24c>)
    b082:	4798      	blx	r3
		appTaskState = JOIN_SEND_STATE;
    b084:	2203      	movs	r2, #3
    b086:	4b17      	ldr	r3, [pc, #92]	; (b0e4 <processTask+0x1dc>)
    b088:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
    b08a:	2000      	movs	r0, #0
    b08c:	4b1d      	ldr	r3, [pc, #116]	; (b104 <processTask+0x1fc>)
    b08e:	4798      	blx	r3
    b090:	e7c8      	b.n	b024 <processTask+0x11c>
        printf("\nTx Data Sent \r\n");
    b092:	4831      	ldr	r0, [pc, #196]	; (b158 <processTask+0x250>)
    b094:	4b15      	ldr	r3, [pc, #84]	; (b0ec <processTask+0x1e4>)
    b096:	4798      	blx	r3
        SwTimerStart(lTimerId,MS_TO_US(100),SW_TIMEOUT_RELATIVE,(void *)lTimerCb,NULL);
    b098:	4b30      	ldr	r3, [pc, #192]	; (b15c <processTask+0x254>)
    b09a:	7818      	ldrb	r0, [r3, #0]
    b09c:	2300      	movs	r3, #0
    b09e:	9300      	str	r3, [sp, #0]
    b0a0:	4b2f      	ldr	r3, [pc, #188]	; (b160 <processTask+0x258>)
    b0a2:	2200      	movs	r2, #0
    b0a4:	492f      	ldr	r1, [pc, #188]	; (b164 <processTask+0x25c>)
    b0a6:	4c30      	ldr	r4, [pc, #192]	; (b168 <processTask+0x260>)
    b0a8:	47a0      	blx	r4
    b0aa:	e7bb      	b.n	b024 <processTask+0x11c>
		status = LORAWAN_Join(DEMO_APP_ACTIVATION_TYPE);
    b0ac:	2000      	movs	r0, #0
    b0ae:	4b2f      	ldr	r3, [pc, #188]	; (b16c <processTask+0x264>)
    b0b0:	4798      	blx	r3
		if (LORAWAN_SUCCESS == (StackRetStatus_t)status)
    b0b2:	2808      	cmp	r0, #8
    b0b4:	d008      	beq.n	b0c8 <processTask+0x1c0>
			print_stack_status(status);
    b0b6:	4b27      	ldr	r3, [pc, #156]	; (b154 <processTask+0x24c>)
    b0b8:	4798      	blx	r3
			appTaskState = JOIN_SEND_STATE;
    b0ba:	2203      	movs	r2, #3
    b0bc:	4b09      	ldr	r3, [pc, #36]	; (b0e4 <processTask+0x1dc>)
    b0be:	701a      	strb	r2, [r3, #0]
			appPostTask(PROCESS_TASK_HANDLER);
    b0c0:	2001      	movs	r0, #1
    b0c2:	4b10      	ldr	r3, [pc, #64]	; (b104 <processTask+0x1fc>)
    b0c4:	4798      	blx	r3
    b0c6:	e7ad      	b.n	b024 <processTask+0x11c>
			printf("\nRetry Join- Join Request Sent\n\r");
    b0c8:	4829      	ldr	r0, [pc, #164]	; (b170 <processTask+0x268>)
    b0ca:	4b15      	ldr	r3, [pc, #84]	; (b120 <processTask+0x218>)
    b0cc:	4798      	blx	r3
			print_stack_status(status);
    b0ce:	2008      	movs	r0, #8
    b0d0:	4b20      	ldr	r3, [pc, #128]	; (b154 <processTask+0x24c>)
    b0d2:	4798      	blx	r3
    b0d4:	e7a6      	b.n	b024 <processTask+0x11c>
			choice = i;
    b0d6:	2400      	movs	r4, #0
    LORAWAN_SetAttr(JOIN_BACKOFF_ENABLE,&joinBackoffEnable);
    b0d8:	210b      	movs	r1, #11
    b0da:	4469      	add	r1, sp
    b0dc:	202e      	movs	r0, #46	; 0x2e
    b0de:	4b07      	ldr	r3, [pc, #28]	; (b0fc <processTask+0x1f4>)
    b0e0:	4798      	blx	r3
    b0e2:	e747      	b.n	af74 <processTask+0x6c>
    b0e4:	20000e5b 	.word	0x20000e5b
    b0e8:	0001a59c 	.word	0x0001a59c
    b0ec:	000150c9 	.word	0x000150c9
    b0f0:	000091e5 	.word	0x000091e5
    b0f4:	0000d051 	.word	0x0000d051
    b0f8:	2000000c 	.word	0x2000000c
    b0fc:	0000ecb9 	.word	0x0000ecb9
    b100:	0001a8b0 	.word	0x0001a8b0
    b104:	0000a559 	.word	0x0000a559
    b108:	0000f199 	.word	0x0000f199
    b10c:	0001a854 	.word	0x0001a854
    b110:	20000e6f 	.word	0x20000e6f
    b114:	0001a878 	.word	0x0001a878
    b118:	0001a084 	.word	0x0001a084
    b11c:	0001a8a4 	.word	0x0001a8a4
    b120:	00015005 	.word	0x00015005
    b124:	0000acd9 	.word	0x0000acd9
    b128:	0001a88c 	.word	0x0001a88c
    b12c:	2000005c 	.word	0x2000005c
    b130:	00009201 	.word	0x00009201
    b134:	00009c35 	.word	0x00009c35
    b138:	0000ac21 	.word	0x0000ac21
    b13c:	20000e78 	.word	0x20000e78
    b140:	0000a0ad 	.word	0x0000a0ad
    b144:	20000e60 	.word	0x20000e60
    b148:	0000a0a1 	.word	0x0000a0a1
    b14c:	0000bd41 	.word	0x0000bd41
    b150:	20000e6d 	.word	0x20000e6d
    b154:	0000ae4d 	.word	0x0000ae4d
    b158:	0001a8c4 	.word	0x0001a8c4
    b15c:	2000005f 	.word	0x2000005f
    b160:	0000a51d 	.word	0x0000a51d
    b164:	000186a0 	.word	0x000186a0
    b168:	00009609 	.word	0x00009609
    b16c:	0000c989 	.word	0x0000c989
    b170:	0001a8d4 	.word	0x0001a8d4

0000b174 <dev_eui_read>:
		/* Set EUI addr in EDBG if there */
		memcpy(demoDevEui, EDBGDevEUI, sizeof(demoDevEui));
	}
#endif
#endif
}
    b174:	4770      	bx	lr
	...

0000b178 <appWakeup>:
    }
}

#ifdef CONF_PMM_ENABLE
static void appWakeup(uint32_t sleptDuration)
{
    b178:	b510      	push	{r4, lr}
    b17a:	0004      	movs	r4, r0
    HAL_Radio_resources_init();
    b17c:	4b04      	ldr	r3, [pc, #16]	; (b190 <appWakeup+0x18>)
    b17e:	4798      	blx	r3
    sio2host_init();
    b180:	4b04      	ldr	r3, [pc, #16]	; (b194 <appWakeup+0x1c>)
    b182:	4798      	blx	r3
    printf("\r\nsleep_ok %ld ms\r\n", sleptDuration);
    b184:	0021      	movs	r1, r4
    b186:	4804      	ldr	r0, [pc, #16]	; (b198 <appWakeup+0x20>)
    b188:	4b04      	ldr	r3, [pc, #16]	; (b19c <appWakeup+0x24>)
    b18a:	4798      	blx	r3

}
    b18c:	bd10      	pop	{r4, pc}
    b18e:	46c0      	nop			; (mov r8, r8)
    b190:	00003b19 	.word	0x00003b19
    b194:	000035b5 	.word	0x000035b5
    b198:	0001ab00 	.word	0x0001ab00
    b19c:	00015005 	.word	0x00015005

0000b1a0 <app_resources_uninit>:
#endif /* #if (_DEBUG_ == 1) */

void app_resources_uninit(void);
#ifdef CONF_PMM_ENABLE
void app_resources_uninit(void)
{
    b1a0:	b530      	push	{r4, r5, lr}
    b1a2:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    b1a4:	ac01      	add	r4, sp, #4
    b1a6:	2300      	movs	r3, #0
    b1a8:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    b1aa:	3301      	adds	r3, #1
    b1ac:	7063      	strb	r3, [r4, #1]
	/* Disable USART TX and RX Pins */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
	pin_conf.powersave  = true;
    b1ae:	70a3      	strb	r3, [r4, #2]
	port_pin_set_config(HOST_SERCOM_PAD0_PIN, &pin_conf);
    b1b0:	0021      	movs	r1, r4
    b1b2:	2004      	movs	r0, #4
    b1b4:	4d05      	ldr	r5, [pc, #20]	; (b1cc <app_resources_uninit+0x2c>)
    b1b6:	47a8      	blx	r5
	port_pin_set_config(HOST_SERCOM_PAD1_PIN, &pin_conf);
    b1b8:	0021      	movs	r1, r4
    b1ba:	2005      	movs	r0, #5
    b1bc:	47a8      	blx	r5
	/* Disable UART module */
	sio2host_deinit();
    b1be:	4b04      	ldr	r3, [pc, #16]	; (b1d0 <app_resources_uninit+0x30>)
    b1c0:	4798      	blx	r3
	/* Disable Transceiver SPI Module */
	HAL_RadioDeInit();
    b1c2:	4b04      	ldr	r3, [pc, #16]	; (b1d4 <app_resources_uninit+0x34>)
    b1c4:	4798      	blx	r3
}
    b1c6:	b003      	add	sp, #12
    b1c8:	bd30      	pop	{r4, r5, pc}
    b1ca:	46c0      	nop			; (mov r8, r8)
    b1cc:	00000b01 	.word	0x00000b01
    b1d0:	00003701 	.word	0x00003701
    b1d4:	00003b3d 	.word	0x00003b3d

0000b1d8 <main>:
 * This is the reference manual for the LORAWAN Demo Application of EU Band
 */

bool txDataReady = false;
int main(void)
{
    b1d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b1da:	46d6      	mov	lr, sl
    b1dc:	464f      	mov	r7, r9
    b1de:	4646      	mov	r6, r8
    b1e0:	b5c0      	push	{r6, r7, lr}
    b1e2:	b084      	sub	sp, #16
	
    /* System Initialization */
    system_init();
    b1e4:	4b69      	ldr	r3, [pc, #420]	; (b38c <main+0x1b4>)
    b1e6:	4798      	blx	r3
    /* Initialize the delay driver */
    delay_init();
    b1e8:	4b69      	ldr	r3, [pc, #420]	; (b390 <main+0x1b8>)
    b1ea:	4798      	blx	r3
    /* Initialize the board target resources */
    board_init();
    b1ec:	4b69      	ldr	r3, [pc, #420]	; (b394 <main+0x1bc>)
    b1ee:	4798      	blx	r3

    INTERRUPT_GlobalInterruptEnable();
    b1f0:	2201      	movs	r2, #1
    b1f2:	4b69      	ldr	r3, [pc, #420]	; (b398 <main+0x1c0>)
    b1f4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    b1f6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    b1fa:	b662      	cpsie	i
	/* Initialize the Serial Interface */
	sio2host_init();
    b1fc:	4b67      	ldr	r3, [pc, #412]	; (b39c <main+0x1c4>)
    b1fe:	4798      	blx	r3
	
	// I
	LORAREG_Init(ISM_NA915);
    b200:	2002      	movs	r0, #2
    b202:	4b67      	ldr	r3, [pc, #412]	; (b3a0 <main+0x1c8>)
    b204:	4798      	blx	r3
	
	// TMP102 sensor init and setting parameters with I2C module
	TMP102_begin();
    b206:	4b67      	ldr	r3, [pc, #412]	; (b3a4 <main+0x1cc>)
    b208:	4798      	blx	r3
	//TMP102_init();
	
	
#ifndef CRYPTO_DEV_ENABLED
 	/* Read DEV EUI from EDBG */
    dev_eui_read();
    b20a:	4b67      	ldr	r3, [pc, #412]	; (b3a8 <main+0x1d0>)
    b20c:	4798      	blx	r3
/* Initializes all the hardware and software modules used for Stack operation */
static void driver_init(void)
{
	SalStatus_t sal_status = SAL_SUCCESS;
    /* Initialize the Radio Hardware */
    HAL_RadioInit();
    b20e:	4b67      	ldr	r3, [pc, #412]	; (b3ac <main+0x1d4>)
    b210:	4798      	blx	r3
    /* Initialize the Software Timer Module */
    SystemTimerInit();
    b212:	4b67      	ldr	r3, [pc, #412]	; (b3b0 <main+0x1d8>)
    b214:	4798      	blx	r3
#ifdef CONF_PMM_ENABLE
    /* Initialize the Sleep Timer Module */
    SleepTimerInit();
    b216:	4b67      	ldr	r3, [pc, #412]	; (b3b4 <main+0x1dc>)
    b218:	4798      	blx	r3
#if (ENABLE_PDS == 1)
    /* PDS Module Init */
    PDS_Init();
#endif
	/* Initializes the Security modules */
	sal_status = SAL_Init();
    b21a:	4b67      	ldr	r3, [pc, #412]	; (b3b8 <main+0x1e0>)
    b21c:	4798      	blx	r3
	
	if (SAL_SUCCESS != sal_status)
    b21e:	2800      	cmp	r0, #0
    b220:	d139      	bne.n	b296 <main+0xbe>
    delay_ms(5);
    b222:	2005      	movs	r0, #5
    b224:	4b65      	ldr	r3, [pc, #404]	; (b3bc <main+0x1e4>)
    b226:	4798      	blx	r3
 *
 * \return An enum value indicating the cause of the last system reset.
 */
static inline enum system_reset_cause system_get_reset_cause(void)
{
	return (enum system_reset_cause)RSTC->RCAUSE.reg;
    b228:	4b65      	ldr	r3, [pc, #404]	; (b3c0 <main+0x1e8>)
    b22a:	781c      	ldrb	r4, [r3, #0]
    b22c:	b2e4      	uxtb	r4, r4
    printf("Last reset cause: ");
    b22e:	4865      	ldr	r0, [pc, #404]	; (b3c4 <main+0x1ec>)
    b230:	4b65      	ldr	r3, [pc, #404]	; (b3c8 <main+0x1f0>)
    b232:	4798      	blx	r3
    if(rcause & (1 << 6)) {
    b234:	0663      	lsls	r3, r4, #25
    b236:	d502      	bpl.n	b23e <main+0x66>
        printf("System Reset Request\r\n");
    b238:	4864      	ldr	r0, [pc, #400]	; (b3cc <main+0x1f4>)
    b23a:	4b65      	ldr	r3, [pc, #404]	; (b3d0 <main+0x1f8>)
    b23c:	4798      	blx	r3
    if(rcause & (1 << 5)) {
    b23e:	06a3      	lsls	r3, r4, #26
    b240:	d502      	bpl.n	b248 <main+0x70>
        printf("Watchdog Reset\r\n");
    b242:	4864      	ldr	r0, [pc, #400]	; (b3d4 <main+0x1fc>)
    b244:	4b62      	ldr	r3, [pc, #392]	; (b3d0 <main+0x1f8>)
    b246:	4798      	blx	r3
    if(rcause & (1 << 4)) {
    b248:	06e3      	lsls	r3, r4, #27
    b24a:	d502      	bpl.n	b252 <main+0x7a>
        printf("External Reset\r\n");
    b24c:	4862      	ldr	r0, [pc, #392]	; (b3d8 <main+0x200>)
    b24e:	4b60      	ldr	r3, [pc, #384]	; (b3d0 <main+0x1f8>)
    b250:	4798      	blx	r3
    if(rcause & (1 << 2)) {
    b252:	0763      	lsls	r3, r4, #29
    b254:	d502      	bpl.n	b25c <main+0x84>
        printf("Brown Out 33 Detector Reset\r\n");
    b256:	4861      	ldr	r0, [pc, #388]	; (b3dc <main+0x204>)
    b258:	4b5d      	ldr	r3, [pc, #372]	; (b3d0 <main+0x1f8>)
    b25a:	4798      	blx	r3
    if(rcause & (1 << 1)) {
    b25c:	07a3      	lsls	r3, r4, #30
    b25e:	d502      	bpl.n	b266 <main+0x8e>
        printf("Brown Out 12 Detector Reset\r\n");
    b260:	485f      	ldr	r0, [pc, #380]	; (b3e0 <main+0x208>)
    b262:	4b5b      	ldr	r3, [pc, #364]	; (b3d0 <main+0x1f8>)
    b264:	4798      	blx	r3
    if(rcause & (1 << 0)) {
    b266:	07e3      	lsls	r3, r4, #31
    b268:	d502      	bpl.n	b270 <main+0x98>
        printf("Power-On Reset\r\n");
    b26a:	485e      	ldr	r0, [pc, #376]	; (b3e4 <main+0x20c>)
    b26c:	4b58      	ldr	r3, [pc, #352]	; (b3d0 <main+0x1f8>)
    b26e:	4798      	blx	r3
    Stack_Init();
    b270:	4b5d      	ldr	r3, [pc, #372]	; (b3e8 <main+0x210>)
    b272:	4798      	blx	r3
    SwTimerCreate(&demoTimerId);
    b274:	485d      	ldr	r0, [pc, #372]	; (b3ec <main+0x214>)
    b276:	4c5e      	ldr	r4, [pc, #376]	; (b3f0 <main+0x218>)
    b278:	47a0      	blx	r4
    SwTimerCreate(&lTimerId);
    b27a:	485e      	ldr	r0, [pc, #376]	; (b3f4 <main+0x21c>)
    b27c:	47a0      	blx	r4
    mote_demo_init();
    b27e:	4b5e      	ldr	r3, [pc, #376]	; (b3f8 <main+0x220>)
    b280:	4798      	blx	r3
	CayenneLPP(60); // Initialize the Payload Size 		
    b282:	203c      	movs	r0, #60	; 0x3c
    b284:	4b5d      	ldr	r3, [pc, #372]	; (b3fc <main+0x224>)
    b286:	4798      	blx	r3
		if (joined)
    b288:	4b5d      	ldr	r3, [pc, #372]	; (b400 <main+0x228>)
    b28a:	4698      	mov	r8, r3
			if (dataSent == false && txDataReady != true)
    b28c:	4b5d      	ldr	r3, [pc, #372]	; (b404 <main+0x22c>)
    b28e:	469a      	mov	sl, r3
			if (validDataAvail)
    b290:	4b5d      	ldr	r3, [pc, #372]	; (b408 <main+0x230>)
    b292:	4699      	mov	r9, r3
    b294:	e043      	b.n	b31e <main+0x146>
	{
		printf("Initialization of Security module is failed\r\n");
    b296:	485d      	ldr	r0, [pc, #372]	; (b40c <main+0x234>)
    b298:	4b4d      	ldr	r3, [pc, #308]	; (b3d0 <main+0x1f8>)
    b29a:	4798      	blx	r3
    b29c:	e7fe      	b.n	b29c <main+0xc4>
			if (validDataAvail)
    b29e:	464b      	mov	r3, r9
    b2a0:	781b      	ldrb	r3, [r3, #0]
    b2a2:	2b00      	cmp	r3, #0
    b2a4:	d031      	beq.n	b30a <main+0x132>
				TMP102_sleep();
    b2a6:	4b5a      	ldr	r3, [pc, #360]	; (b410 <main+0x238>)
    b2a8:	4798      	blx	r3
				temp = 0;
    b2aa:	2000      	movs	r0, #0
    b2ac:	2100      	movs	r1, #0
    b2ae:	4b59      	ldr	r3, [pc, #356]	; (b414 <main+0x23c>)
    b2b0:	6018      	str	r0, [r3, #0]
    b2b2:	6059      	str	r1, [r3, #4]
					printf("\r\nraw Sensor Data: { ");
    b2b4:	4858      	ldr	r0, [pc, #352]	; (b418 <main+0x240>)
    b2b6:	4b44      	ldr	r3, [pc, #272]	; (b3c8 <main+0x1f0>)
    b2b8:	4798      	blx	r3
						for (int p = 0 ; p < 7; p++)
    b2ba:	2400      	movs	r4, #0
							printf("0x%X,", rawSensorData[p]);
    b2bc:	4f57      	ldr	r7, [pc, #348]	; (b41c <main+0x244>)
    b2be:	4e58      	ldr	r6, [pc, #352]	; (b420 <main+0x248>)
    b2c0:	4d41      	ldr	r5, [pc, #260]	; (b3c8 <main+0x1f0>)
    b2c2:	5d39      	ldrb	r1, [r7, r4]
    b2c4:	0030      	movs	r0, r6
    b2c6:	47a8      	blx	r5
						for (int p = 0 ; p < 7; p++)
    b2c8:	3401      	adds	r4, #1
    b2ca:	2c07      	cmp	r4, #7
    b2cc:	d1f9      	bne.n	b2c2 <main+0xea>
					printf("}\r\n");
    b2ce:	4855      	ldr	r0, [pc, #340]	; (b424 <main+0x24c>)
    b2d0:	4b3f      	ldr	r3, [pc, #252]	; (b3d0 <main+0x1f8>)
    b2d2:	4798      	blx	r3
				FreeCayenneLPP(); 
    b2d4:	4b54      	ldr	r3, [pc, #336]	; (b428 <main+0x250>)
    b2d6:	4798      	blx	r3
				addAnalogInput(1, extractVoltage()); // voltage		
    b2d8:	4b54      	ldr	r3, [pc, #336]	; (b42c <main+0x254>)
    b2da:	4798      	blx	r3
    b2dc:	4b54      	ldr	r3, [pc, #336]	; (b430 <main+0x258>)
    b2de:	4798      	blx	r3
    b2e0:	1c01      	adds	r1, r0, #0
    b2e2:	2001      	movs	r0, #1
    b2e4:	4b53      	ldr	r3, [pc, #332]	; (b434 <main+0x25c>)
    b2e6:	4798      	blx	r3
				addTemperature(2, extractTemperature());   // temperature			
    b2e8:	4b53      	ldr	r3, [pc, #332]	; (b438 <main+0x260>)
    b2ea:	4798      	blx	r3
    b2ec:	4b53      	ldr	r3, [pc, #332]	; (b43c <main+0x264>)
    b2ee:	4798      	blx	r3
    b2f0:	1c01      	adds	r1, r0, #0
    b2f2:	2002      	movs	r0, #2
    b2f4:	4b52      	ldr	r3, [pc, #328]	; (b440 <main+0x268>)
    b2f6:	4798      	blx	r3
				validDataAvail = false;
    b2f8:	2200      	movs	r2, #0
    b2fa:	4b43      	ldr	r3, [pc, #268]	; (b408 <main+0x230>)
    b2fc:	701a      	strb	r2, [r3, #0]
				txDataReady = true;
    b2fe:	3201      	adds	r2, #1
    b300:	4b50      	ldr	r3, [pc, #320]	; (b444 <main+0x26c>)
    b302:	701a      	strb	r2, [r3, #0]
				appPostTask(PROCESS_TASK_HANDLER);
    b304:	2001      	movs	r0, #1
    b306:	4b50      	ldr	r3, [pc, #320]	; (b448 <main+0x270>)
    b308:	4798      	blx	r3
        SYSTEM_RunTasks();
    b30a:	4b50      	ldr	r3, [pc, #320]	; (b44c <main+0x274>)
    b30c:	4798      	blx	r3
        if (false == certAppEnabled)
    b30e:	4b50      	ldr	r3, [pc, #320]	; (b450 <main+0x278>)
    b310:	781b      	ldrb	r3, [r3, #0]
    b312:	2b00      	cmp	r3, #0
    b314:	d103      	bne.n	b31e <main+0x146>
            if(dataSent == true)
    b316:	4b3b      	ldr	r3, [pc, #236]	; (b404 <main+0x22c>)
    b318:	781b      	ldrb	r3, [r3, #0]
    b31a:	2b00      	cmp	r3, #0
    b31c:	d112      	bne.n	b344 <main+0x16c>
		if (joined)
    b31e:	4643      	mov	r3, r8
    b320:	781b      	ldrb	r3, [r3, #0]
    b322:	2b00      	cmp	r3, #0
    b324:	d0f1      	beq.n	b30a <main+0x132>
			if (dataSent == false && txDataReady != true)
    b326:	4653      	mov	r3, sl
    b328:	781b      	ldrb	r3, [r3, #0]
    b32a:	2b00      	cmp	r3, #0
    b32c:	d1b7      	bne.n	b29e <main+0xc6>
    b32e:	4b45      	ldr	r3, [pc, #276]	; (b444 <main+0x26c>)
    b330:	781b      	ldrb	r3, [r3, #0]
    b332:	2b00      	cmp	r3, #0
    b334:	d1b3      	bne.n	b29e <main+0xc6>
				TMP102_wakeup();	
    b336:	4b47      	ldr	r3, [pc, #284]	; (b454 <main+0x27c>)
    b338:	4798      	blx	r3
				validDataAvail = serialGetSensorData();
    b33a:	4b47      	ldr	r3, [pc, #284]	; (b458 <main+0x280>)
    b33c:	4798      	blx	r3
    b33e:	4b32      	ldr	r3, [pc, #200]	; (b408 <main+0x230>)
    b340:	7018      	strb	r0, [r3, #0]
    b342:	e7ac      	b.n	b29e <main+0xc6>
				sleepReq.sleepTimeMs = transmission_interval;
    b344:	ab01      	add	r3, sp, #4
    b346:	4a45      	ldr	r2, [pc, #276]	; (b45c <main+0x284>)
    b348:	6812      	ldr	r2, [r2, #0]
    b34a:	9201      	str	r2, [sp, #4]
                sleepReq.pmmWakeupCallback = appWakeup;
    b34c:	4a44      	ldr	r2, [pc, #272]	; (b460 <main+0x288>)
    b34e:	9203      	str	r2, [sp, #12]
                sleepReq.sleep_mode = CONF_PMM_SLEEPMODE_WHEN_IDLE;
    b350:	2201      	movs	r2, #1
    b352:	711a      	strb	r2, [r3, #4]
                    deviceResetsForWakeup = false;
    b354:	2200      	movs	r2, #0
    b356:	4b43      	ldr	r3, [pc, #268]	; (b464 <main+0x28c>)
    b358:	701a      	strb	r2, [r3, #0]
                if (true == LORAWAN_ReadyToSleep(deviceResetsForWakeup))
    b35a:	2000      	movs	r0, #0
    b35c:	4b42      	ldr	r3, [pc, #264]	; (b468 <main+0x290>)
    b35e:	4798      	blx	r3
    b360:	2800      	cmp	r0, #0
    b362:	d0dc      	beq.n	b31e <main+0x146>
					printf("..Sleeping..\r\n");
    b364:	4841      	ldr	r0, [pc, #260]	; (b46c <main+0x294>)
    b366:	4b1a      	ldr	r3, [pc, #104]	; (b3d0 <main+0x1f8>)
    b368:	4798      	blx	r3
                    app_resources_uninit();
    b36a:	4b41      	ldr	r3, [pc, #260]	; (b470 <main+0x298>)
    b36c:	4798      	blx	r3
                    if (PMM_SLEEP_REQ_DENIED == PMM_Sleep(&sleepReq))
    b36e:	a801      	add	r0, sp, #4
    b370:	4b40      	ldr	r3, [pc, #256]	; (b474 <main+0x29c>)
    b372:	4798      	blx	r3
    b374:	2800      	cmp	r0, #0
    b376:	d003      	beq.n	b380 <main+0x1a8>
					dataSent = false;
    b378:	2200      	movs	r2, #0
    b37a:	4b22      	ldr	r3, [pc, #136]	; (b404 <main+0x22c>)
    b37c:	701a      	strb	r2, [r3, #0]
    b37e:	e7ce      	b.n	b31e <main+0x146>
                        HAL_Radio_resources_init();
    b380:	4b3d      	ldr	r3, [pc, #244]	; (b478 <main+0x2a0>)
    b382:	4798      	blx	r3
                        sio2host_init();
    b384:	4b05      	ldr	r3, [pc, #20]	; (b39c <main+0x1c4>)
    b386:	4798      	blx	r3
    b388:	e7f6      	b.n	b378 <main+0x1a0>
    b38a:	46c0      	nop			; (mov r8, r8)
    b38c:	00002e8d 	.word	0x00002e8d
    b390:	00000185 	.word	0x00000185
    b394:	0000021d 	.word	0x0000021d
    b398:	20000000 	.word	0x20000000
    b39c:	000035b5 	.word	0x000035b5
    b3a0:	00008d95 	.word	0x00008d95
    b3a4:	0000a309 	.word	0x0000a309
    b3a8:	0000b175 	.word	0x0000b175
    b3ac:	00003961 	.word	0x00003961
    b3b0:	0000956d 	.word	0x0000956d
    b3b4:	000037a9 	.word	0x000037a9
    b3b8:	00008ebd 	.word	0x00008ebd
    b3bc:	000001f1 	.word	0x000001f1
    b3c0:	40000800 	.word	0x40000800
    b3c4:	0001ab44 	.word	0x0001ab44
    b3c8:	00015005 	.word	0x00015005
    b3cc:	0001ab58 	.word	0x0001ab58
    b3d0:	000150c9 	.word	0x000150c9
    b3d4:	0001ab70 	.word	0x0001ab70
    b3d8:	0001ab80 	.word	0x0001ab80
    b3dc:	0001ab90 	.word	0x0001ab90
    b3e0:	0001abb0 	.word	0x0001abb0
    b3e4:	0001abd0 	.word	0x0001abd0
    b3e8:	00009bb9 	.word	0x00009bb9
    b3ec:	2000005e 	.word	0x2000005e
    b3f0:	000095d5 	.word	0x000095d5
    b3f4:	2000005f 	.word	0x2000005f
    b3f8:	0000a58d 	.word	0x0000a58d
    b3fc:	0000a06d 	.word	0x0000a06d
    b400:	20000e6f 	.word	0x20000e6f
    b404:	20000e6d 	.word	0x20000e6d
    b408:	20000e79 	.word	0x20000e79
    b40c:	0001ab14 	.word	0x0001ab14
    b410:	0000a455 	.word	0x0000a455
    b414:	20000e70 	.word	0x20000e70
    b418:	0001abe0 	.word	0x0001abe0
    b41c:	20001454 	.word	0x20001454
    b420:	0001abf8 	.word	0x0001abf8
    b424:	0001ac00 	.word	0x0001ac00
    b428:	0000a095 	.word	0x0000a095
    b42c:	0000a19d 	.word	0x0000a19d
    b430:	00012aa9 	.word	0x00012aa9
    b434:	0000a0b9 	.word	0x0000a0b9
    b438:	0000a1d1 	.word	0x0000a1d1
    b43c:	000144e9 	.word	0x000144e9
    b440:	0000a10d 	.word	0x0000a10d
    b444:	20000e78 	.word	0x20000e78
    b448:	0000a559 	.word	0x0000a559
    b44c:	00009bc9 	.word	0x00009bc9
    b450:	20000e5c 	.word	0x20000e5c
    b454:	0000a4b9 	.word	0x0000a4b9
    b458:	0000a161 	.word	0x0000a161
    b45c:	20000060 	.word	0x20000060
    b460:	0000b179 	.word	0x0000b179
    b464:	20000e6e 	.word	0x20000e6e
    b468:	0000f40d 	.word	0x0000f40d
    b46c:	0001ac04 	.word	0x0001ac04
    b470:	0000b1a1 	.word	0x0000b1a1
    b474:	00003dc9 	.word	0x00003dc9
    b478:	00003b19 	.word	0x00003b19

0000b47c <common_tc_read_count>:
    b47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b47e:	4b0d      	ldr	r3, [pc, #52]	; (b4b4 <common_tc_read_count+0x38>)
    b480:	4798      	blx	r3
    b482:	4b0d      	ldr	r3, [pc, #52]	; (b4b8 <common_tc_read_count+0x3c>)
    b484:	781b      	ldrb	r3, [r3, #0]
    b486:	2b00      	cmp	r3, #0
    b488:	d00e      	beq.n	b4a8 <common_tc_read_count+0x2c>
    b48a:	4b0c      	ldr	r3, [pc, #48]	; (b4bc <common_tc_read_count+0x40>)
    b48c:	781d      	ldrb	r5, [r3, #0]
    b48e:	4b0a      	ldr	r3, [pc, #40]	; (b4b8 <common_tc_read_count+0x3c>)
    b490:	781f      	ldrb	r7, [r3, #0]
    b492:	4c0b      	ldr	r4, [pc, #44]	; (b4c0 <common_tc_read_count+0x44>)
    b494:	1c29      	adds	r1, r5, #0
    b496:	47a0      	blx	r4
    b498:	1c06      	adds	r6, r0, #0
    b49a:	480a      	ldr	r0, [pc, #40]	; (b4c4 <common_tc_read_count+0x48>)
    b49c:	1c29      	adds	r1, r5, #0
    b49e:	47a0      	blx	r4
    b4a0:	4378      	muls	r0, r7
    b4a2:	1830      	adds	r0, r6, r0
    b4a4:	b280      	uxth	r0, r0
    b4a6:	e004      	b.n	b4b2 <common_tc_read_count+0x36>
    b4a8:	4b04      	ldr	r3, [pc, #16]	; (b4bc <common_tc_read_count+0x40>)
    b4aa:	7819      	ldrb	r1, [r3, #0]
    b4ac:	4b04      	ldr	r3, [pc, #16]	; (b4c0 <common_tc_read_count+0x44>)
    b4ae:	4798      	blx	r3
    b4b0:	b280      	uxth	r0, r0
    b4b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b4b4:	00009e65 	.word	0x00009e65
    b4b8:	20000e7c 	.word	0x20000e7c
    b4bc:	20001690 	.word	0x20001690
    b4c0:	0001187d 	.word	0x0001187d
    b4c4:	0000ffff 	.word	0x0000ffff

0000b4c8 <common_tc_compare_stop>:
    b4c8:	b508      	push	{r3, lr}
    b4ca:	4b05      	ldr	r3, [pc, #20]	; (b4e0 <common_tc_compare_stop+0x18>)
    b4cc:	4798      	blx	r3
    b4ce:	4b05      	ldr	r3, [pc, #20]	; (b4e4 <common_tc_compare_stop+0x1c>)
    b4d0:	4798      	blx	r3
    b4d2:	4b05      	ldr	r3, [pc, #20]	; (b4e8 <common_tc_compare_stop+0x20>)
    b4d4:	2200      	movs	r2, #0
    b4d6:	605a      	str	r2, [r3, #4]
    b4d8:	811a      	strh	r2, [r3, #8]
    b4da:	4b04      	ldr	r3, [pc, #16]	; (b4ec <common_tc_compare_stop+0x24>)
    b4dc:	4798      	blx	r3
    b4de:	bd08      	pop	{r3, pc}
    b4e0:	00009e79 	.word	0x00009e79
    b4e4:	00009f19 	.word	0x00009f19
    b4e8:	20000e7c 	.word	0x20000e7c
    b4ec:	00009f3d 	.word	0x00009f3d

0000b4f0 <common_tc_overflow_stop>:
    b4f0:	b508      	push	{r3, lr}
    b4f2:	4b03      	ldr	r3, [pc, #12]	; (b500 <common_tc_overflow_stop+0x10>)
    b4f4:	4798      	blx	r3
    b4f6:	2200      	movs	r2, #0
    b4f8:	4b02      	ldr	r3, [pc, #8]	; (b504 <common_tc_overflow_stop+0x14>)
    b4fa:	701a      	strb	r2, [r3, #0]
    b4fc:	bd08      	pop	{r3, pc}
    b4fe:	46c0      	nop			; (mov r8, r8)
    b500:	00009ecd 	.word	0x00009ecd
    b504:	20000e7c 	.word	0x20000e7c

0000b508 <common_tc_stop>:
    b508:	b508      	push	{r3, lr}
    b50a:	4b03      	ldr	r3, [pc, #12]	; (b518 <common_tc_stop+0x10>)
    b50c:	4798      	blx	r3
    b50e:	4b03      	ldr	r3, [pc, #12]	; (b51c <common_tc_stop+0x14>)
    b510:	4798      	blx	r3
    b512:	4b03      	ldr	r3, [pc, #12]	; (b520 <common_tc_stop+0x18>)
    b514:	4798      	blx	r3
    b516:	bd08      	pop	{r3, pc}
    b518:	0000b4c9 	.word	0x0000b4c9
    b51c:	0000b4f1 	.word	0x0000b4f1
    b520:	00009ee1 	.word	0x00009ee1

0000b524 <common_tc_delay>:
    b524:	b510      	push	{r4, lr}
    b526:	1c04      	adds	r4, r0, #0
    b528:	4b13      	ldr	r3, [pc, #76]	; (b578 <common_tc_delay+0x54>)
    b52a:	4798      	blx	r3
    b52c:	4b13      	ldr	r3, [pc, #76]	; (b57c <common_tc_delay+0x58>)
    b52e:	781a      	ldrb	r2, [r3, #0]
    b530:	4362      	muls	r2, r4
    b532:	1881      	adds	r1, r0, r2
    b534:	4b12      	ldr	r3, [pc, #72]	; (b580 <common_tc_delay+0x5c>)
    b536:	6059      	str	r1, [r3, #4]
    b538:	6859      	ldr	r1, [r3, #4]
    b53a:	0c09      	lsrs	r1, r1, #16
    b53c:	6059      	str	r1, [r3, #4]
    b53e:	685b      	ldr	r3, [r3, #4]
    b540:	2b00      	cmp	r3, #0
    b542:	d007      	beq.n	b554 <common_tc_delay+0x30>
    b544:	4b0e      	ldr	r3, [pc, #56]	; (b580 <common_tc_delay+0x5c>)
    b546:	6859      	ldr	r1, [r3, #4]
    b548:	3201      	adds	r2, #1
    b54a:	1880      	adds	r0, r0, r2
    b54c:	8118      	strh	r0, [r3, #8]
    b54e:	4b0d      	ldr	r3, [pc, #52]	; (b584 <common_tc_delay+0x60>)
    b550:	4798      	blx	r3
    b552:	e004      	b.n	b55e <common_tc_delay+0x3a>
    b554:	1882      	adds	r2, r0, r2
    b556:	4b0a      	ldr	r3, [pc, #40]	; (b580 <common_tc_delay+0x5c>)
    b558:	811a      	strh	r2, [r3, #8]
    b55a:	4b0b      	ldr	r3, [pc, #44]	; (b588 <common_tc_delay+0x64>)
    b55c:	4798      	blx	r3
    b55e:	4b08      	ldr	r3, [pc, #32]	; (b580 <common_tc_delay+0x5c>)
    b560:	891b      	ldrh	r3, [r3, #8]
    b562:	2b63      	cmp	r3, #99	; 0x63
    b564:	d802      	bhi.n	b56c <common_tc_delay+0x48>
    b566:	3364      	adds	r3, #100	; 0x64
    b568:	4a05      	ldr	r2, [pc, #20]	; (b580 <common_tc_delay+0x5c>)
    b56a:	8113      	strh	r3, [r2, #8]
    b56c:	4b04      	ldr	r3, [pc, #16]	; (b580 <common_tc_delay+0x5c>)
    b56e:	8918      	ldrh	r0, [r3, #8]
    b570:	4b06      	ldr	r3, [pc, #24]	; (b58c <common_tc_delay+0x68>)
    b572:	4798      	blx	r3
    b574:	bd10      	pop	{r4, pc}
    b576:	46c0      	nop			; (mov r8, r8)
    b578:	00009e65 	.word	0x00009e65
    b57c:	20001690 	.word	0x20001690
    b580:	20000e7c 	.word	0x20000e7c
    b584:	00009e79 	.word	0x00009e79
    b588:	00009e8d 	.word	0x00009e8d
    b58c:	00009f01 	.word	0x00009f01

0000b590 <common_tc_init>:
    b590:	b508      	push	{r3, lr}
    b592:	2200      	movs	r2, #0
    b594:	4b03      	ldr	r3, [pc, #12]	; (b5a4 <common_tc_init+0x14>)
    b596:	701a      	strb	r2, [r3, #0]
    b598:	4b03      	ldr	r3, [pc, #12]	; (b5a8 <common_tc_init+0x18>)
    b59a:	4798      	blx	r3
    b59c:	4b03      	ldr	r3, [pc, #12]	; (b5ac <common_tc_init+0x1c>)
    b59e:	7018      	strb	r0, [r3, #0]
    b5a0:	bd08      	pop	{r3, pc}
    b5a2:	46c0      	nop			; (mov r8, r8)
    b5a4:	20000e7c 	.word	0x20000e7c
    b5a8:	00009f55 	.word	0x00009f55
    b5ac:	20001690 	.word	0x20001690

0000b5b0 <tmr_ovf_callback>:
    b5b0:	b508      	push	{r3, lr}
    b5b2:	4b0e      	ldr	r3, [pc, #56]	; (b5ec <tmr_ovf_callback+0x3c>)
    b5b4:	685b      	ldr	r3, [r3, #4]
    b5b6:	2b00      	cmp	r3, #0
    b5b8:	d007      	beq.n	b5ca <tmr_ovf_callback+0x1a>
    b5ba:	4a0c      	ldr	r2, [pc, #48]	; (b5ec <tmr_ovf_callback+0x3c>)
    b5bc:	6853      	ldr	r3, [r2, #4]
    b5be:	3b01      	subs	r3, #1
    b5c0:	6053      	str	r3, [r2, #4]
    b5c2:	2b00      	cmp	r3, #0
    b5c4:	d101      	bne.n	b5ca <tmr_ovf_callback+0x1a>
    b5c6:	4b0a      	ldr	r3, [pc, #40]	; (b5f0 <tmr_ovf_callback+0x40>)
    b5c8:	4798      	blx	r3
    b5ca:	4a08      	ldr	r2, [pc, #32]	; (b5ec <tmr_ovf_callback+0x3c>)
    b5cc:	7813      	ldrb	r3, [r2, #0]
    b5ce:	3301      	adds	r3, #1
    b5d0:	b2db      	uxtb	r3, r3
    b5d2:	7013      	strb	r3, [r2, #0]
    b5d4:	4a07      	ldr	r2, [pc, #28]	; (b5f4 <tmr_ovf_callback+0x44>)
    b5d6:	7812      	ldrb	r2, [r2, #0]
    b5d8:	429a      	cmp	r2, r3
    b5da:	d806      	bhi.n	b5ea <tmr_ovf_callback+0x3a>
    b5dc:	4b03      	ldr	r3, [pc, #12]	; (b5ec <tmr_ovf_callback+0x3c>)
    b5de:	2200      	movs	r2, #0
    b5e0:	701a      	strb	r2, [r3, #0]
    b5e2:	68db      	ldr	r3, [r3, #12]
    b5e4:	2b00      	cmp	r3, #0
    b5e6:	d000      	beq.n	b5ea <tmr_ovf_callback+0x3a>
    b5e8:	4798      	blx	r3
    b5ea:	bd08      	pop	{r3, pc}
    b5ec:	20000e7c 	.word	0x20000e7c
    b5f0:	00009e8d 	.word	0x00009e8d
    b5f4:	20001690 	.word	0x20001690

0000b5f8 <tmr_cca_callback>:
    b5f8:	b508      	push	{r3, lr}
    b5fa:	4b04      	ldr	r3, [pc, #16]	; (b60c <tmr_cca_callback+0x14>)
    b5fc:	4798      	blx	r3
    b5fe:	4b04      	ldr	r3, [pc, #16]	; (b610 <tmr_cca_callback+0x18>)
    b600:	691b      	ldr	r3, [r3, #16]
    b602:	2b00      	cmp	r3, #0
    b604:	d000      	beq.n	b608 <tmr_cca_callback+0x10>
    b606:	4798      	blx	r3
    b608:	bd08      	pop	{r3, pc}
    b60a:	46c0      	nop			; (mov r8, r8)
    b60c:	00009e79 	.word	0x00009e79
    b610:	20000e7c 	.word	0x20000e7c

0000b614 <set_common_tc_overflow_callback>:
    b614:	4b01      	ldr	r3, [pc, #4]	; (b61c <set_common_tc_overflow_callback+0x8>)
    b616:	60d8      	str	r0, [r3, #12]
    b618:	4770      	bx	lr
    b61a:	46c0      	nop			; (mov r8, r8)
    b61c:	20000e7c 	.word	0x20000e7c

0000b620 <set_common_tc_expiry_callback>:
    b620:	4b01      	ldr	r3, [pc, #4]	; (b628 <set_common_tc_expiry_callback+0x8>)
    b622:	6118      	str	r0, [r3, #16]
    b624:	4770      	bx	lr
    b626:	46c0      	nop			; (mov r8, r8)
    b628:	20000e7c 	.word	0x20000e7c

0000b62c <MacClearCommands>:
    b62c:	490e      	ldr	r1, [pc, #56]	; (b668 <MacClearCommands+0x3c>)
    b62e:	b570      	push	{r4, r5, r6, lr}
    b630:	000b      	movs	r3, r1
    b632:	33d8      	adds	r3, #216	; 0xd8
    b634:	7818      	ldrb	r0, [r3, #0]
    b636:	2303      	movs	r3, #3
    b638:	25a4      	movs	r5, #164	; 0xa4
    b63a:	4343      	muls	r3, r0
    b63c:	2401      	movs	r4, #1
    b63e:	20ff      	movs	r0, #255	; 0xff
    b640:	3391      	adds	r3, #145	; 0x91
    b642:	4a0a      	ldr	r2, [pc, #40]	; (b66c <MacClearCommands+0x40>)
    b644:	185b      	adds	r3, r3, r1
    b646:	00ed      	lsls	r5, r5, #3
    b648:	429a      	cmp	r2, r3
    b64a:	d100      	bne.n	b64e <MacClearCommands+0x22>
    b64c:	bd70      	pop	{r4, r5, r6, pc}
    b64e:	7811      	ldrb	r1, [r2, #0]
    b650:	29ff      	cmp	r1, #255	; 0xff
    b652:	d006      	beq.n	b662 <MacClearCommands+0x36>
    b654:	290a      	cmp	r1, #10
    b656:	d803      	bhi.n	b660 <MacClearCommands+0x34>
    b658:	0026      	movs	r6, r4
    b65a:	408e      	lsls	r6, r1
    b65c:	422e      	tst	r6, r5
    b65e:	d100      	bne.n	b662 <MacClearCommands+0x36>
    b660:	7010      	strb	r0, [r2, #0]
    b662:	3203      	adds	r2, #3
    b664:	e7f0      	b.n	b648 <MacClearCommands+0x1c>
    b666:	46c0      	nop			; (mov r8, r8)
    b668:	200017bc 	.word	0x200017bc
    b66c:	2000184d 	.word	0x2000184d

0000b670 <CountfOptsLength>:
    b670:	2200      	movs	r2, #0
    b672:	490d      	ldr	r1, [pc, #52]	; (b6a8 <CountfOptsLength+0x38>)
    b674:	b570      	push	{r4, r5, r6, lr}
    b676:	000b      	movs	r3, r1
    b678:	0010      	movs	r0, r2
    b67a:	2503      	movs	r5, #3
    b67c:	33d8      	adds	r3, #216	; 0xd8
    b67e:	781c      	ldrb	r4, [r3, #0]
    b680:	4e0a      	ldr	r6, [pc, #40]	; (b6ac <CountfOptsLength+0x3c>)
    b682:	b2d3      	uxtb	r3, r2
    b684:	429c      	cmp	r4, r3
    b686:	d800      	bhi.n	b68a <CountfOptsLength+0x1a>
    b688:	bd70      	pop	{r4, r5, r6, pc}
    b68a:	002b      	movs	r3, r5
    b68c:	4353      	muls	r3, r2
    b68e:	3391      	adds	r3, #145	; 0x91
    b690:	5ccb      	ldrb	r3, [r1, r3]
    b692:	2bff      	cmp	r3, #255	; 0xff
    b694:	d006      	beq.n	b6a4 <CountfOptsLength+0x34>
    b696:	18f3      	adds	r3, r6, r3
    b698:	3b02      	subs	r3, #2
    b69a:	781b      	ldrb	r3, [r3, #0]
    b69c:	18c3      	adds	r3, r0, r3
    b69e:	2b0f      	cmp	r3, #15
    b6a0:	dcf2      	bgt.n	b688 <CountfOptsLength+0x18>
    b6a2:	b2d8      	uxtb	r0, r3
    b6a4:	3201      	adds	r2, #1
    b6a6:	e7ec      	b.n	b682 <CountfOptsLength+0x12>
    b6a8:	200017bc 	.word	0x200017bc
    b6ac:	0001ac16 	.word	0x0001ac16

0000b6b0 <StopAllSoftwareTimers>:
    b6b0:	b570      	push	{r4, r5, r6, lr}
    b6b2:	4c17      	ldr	r4, [pc, #92]	; (b710 <StopAllSoftwareTimers+0x60>)
    b6b4:	4d17      	ldr	r5, [pc, #92]	; (b714 <StopAllSoftwareTimers+0x64>)
    b6b6:	0023      	movs	r3, r4
    b6b8:	33e2      	adds	r3, #226	; 0xe2
    b6ba:	7818      	ldrb	r0, [r3, #0]
    b6bc:	47a8      	blx	r5
    b6be:	0023      	movs	r3, r4
    b6c0:	33e3      	adds	r3, #227	; 0xe3
    b6c2:	7818      	ldrb	r0, [r3, #0]
    b6c4:	47a8      	blx	r5
    b6c6:	0023      	movs	r3, r4
    b6c8:	33e7      	adds	r3, #231	; 0xe7
    b6ca:	7818      	ldrb	r0, [r3, #0]
    b6cc:	47a8      	blx	r5
    b6ce:	0023      	movs	r3, r4
    b6d0:	33e4      	adds	r3, #228	; 0xe4
    b6d2:	7818      	ldrb	r0, [r3, #0]
    b6d4:	47a8      	blx	r5
    b6d6:	0023      	movs	r3, r4
    b6d8:	33e5      	adds	r3, #229	; 0xe5
    b6da:	7818      	ldrb	r0, [r3, #0]
    b6dc:	47a8      	blx	r5
    b6de:	0023      	movs	r3, r4
    b6e0:	33e8      	adds	r3, #232	; 0xe8
    b6e2:	7818      	ldrb	r0, [r3, #0]
    b6e4:	47a8      	blx	r5
    b6e6:	0023      	movs	r3, r4
    b6e8:	33e6      	adds	r3, #230	; 0xe6
    b6ea:	7818      	ldrb	r0, [r3, #0]
    b6ec:	47a8      	blx	r5
    b6ee:	0023      	movs	r3, r4
    b6f0:	33e9      	adds	r3, #233	; 0xe9
    b6f2:	7818      	ldrb	r0, [r3, #0]
    b6f4:	47a8      	blx	r5
    b6f6:	0023      	movs	r3, r4
    b6f8:	33f2      	adds	r3, #242	; 0xf2
    b6fa:	7818      	ldrb	r0, [r3, #0]
    b6fc:	47a8      	blx	r5
    b6fe:	0023      	movs	r3, r4
    b700:	33f3      	adds	r3, #243	; 0xf3
    b702:	7818      	ldrb	r0, [r3, #0]
    b704:	34ff      	adds	r4, #255	; 0xff
    b706:	47a8      	blx	r5
    b708:	7f60      	ldrb	r0, [r4, #29]
    b70a:	47a8      	blx	r5
    b70c:	bd70      	pop	{r4, r5, r6, pc}
    b70e:	46c0      	nop			; (mov r8, r8)
    b710:	200017bc 	.word	0x200017bc
    b714:	00009915 	.word	0x00009915

0000b718 <LorawanGetMaxPayloadSize>:
    b718:	b513      	push	{r0, r1, r4, lr}
    b71a:	466b      	mov	r3, sp
    b71c:	1ddc      	adds	r4, r3, #7
    b71e:	2300      	movs	r3, #0
    b720:	0022      	movs	r2, r4
    b722:	7023      	strb	r3, [r4, #0]
    b724:	4902      	ldr	r1, [pc, #8]	; (b730 <LorawanGetMaxPayloadSize+0x18>)
    b726:	4b03      	ldr	r3, [pc, #12]	; (b734 <LorawanGetMaxPayloadSize+0x1c>)
    b728:	2005      	movs	r0, #5
    b72a:	4798      	blx	r3
    b72c:	7820      	ldrb	r0, [r4, #0]
    b72e:	bd16      	pop	{r1, r2, r4, pc}
    b730:	2000189b 	.word	0x2000189b
    b734:	00008bf9 	.word	0x00008bf9

0000b738 <UpdateReceiveDelays>:
    b738:	23fa      	movs	r3, #250	; 0xfa
    b73a:	b570      	push	{r4, r5, r6, lr}
    b73c:	009b      	lsls	r3, r3, #2
    b73e:	4c0b      	ldr	r4, [pc, #44]	; (b76c <UpdateReceiveDelays+0x34>)
    b740:	2800      	cmp	r0, #0
    b742:	d000      	beq.n	b746 <UpdateReceiveDelays+0xe>
    b744:	4343      	muls	r3, r0
    b746:	0022      	movs	r2, r4
    b748:	4d09      	ldr	r5, [pc, #36]	; (b770 <UpdateReceiveDelays+0x38>)
    b74a:	32c8      	adds	r2, #200	; 0xc8
    b74c:	210c      	movs	r1, #12
    b74e:	2000      	movs	r0, #0
    b750:	8013      	strh	r3, [r2, #0]
    b752:	47a8      	blx	r5
    b754:	0023      	movs	r3, r4
    b756:	22fa      	movs	r2, #250	; 0xfa
    b758:	33c8      	adds	r3, #200	; 0xc8
    b75a:	881b      	ldrh	r3, [r3, #0]
    b75c:	0092      	lsls	r2, r2, #2
    b75e:	189b      	adds	r3, r3, r2
    b760:	34ca      	adds	r4, #202	; 0xca
    b762:	210d      	movs	r1, #13
    b764:	2000      	movs	r0, #0
    b766:	8023      	strh	r3, [r4, #0]
    b768:	47a8      	blx	r5
    b76a:	bd70      	pop	{r4, r5, r6, pc}
    b76c:	200017bc 	.word	0x200017bc
    b770:	000091e1 	.word	0x000091e1

0000b774 <IncludeMacCommandsResponse>:
    b774:	b5f0      	push	{r4, r5, r6, r7, lr}
    b776:	0005      	movs	r5, r0
    b778:	2600      	movs	r6, #0
    b77a:	b087      	sub	sp, #28
    b77c:	880c      	ldrh	r4, [r1, #0]
    b77e:	9101      	str	r1, [sp, #4]
    b780:	9203      	str	r2, [sp, #12]
    b782:	4a67      	ldr	r2, [pc, #412]	; (b920 <IncludeMacCommandsResponse+0x1ac>)
    b784:	0013      	movs	r3, r2
    b786:	33d8      	adds	r3, #216	; 0xd8
    b788:	781b      	ldrb	r3, [r3, #0]
    b78a:	42b3      	cmp	r3, r6
    b78c:	d913      	bls.n	b7b6 <IncludeMacCommandsResponse+0x42>
    b78e:	9b03      	ldr	r3, [sp, #12]
    b790:	2b00      	cmp	r3, #0
    b792:	d019      	beq.n	b7c8 <IncludeMacCommandsResponse+0x54>
    b794:	2303      	movs	r3, #3
    b796:	4373      	muls	r3, r6
    b798:	18d3      	adds	r3, r2, r3
    b79a:	3391      	adds	r3, #145	; 0x91
    b79c:	7818      	ldrb	r0, [r3, #0]
    b79e:	28ff      	cmp	r0, #255	; 0xff
    b7a0:	d012      	beq.n	b7c8 <IncludeMacCommandsResponse+0x54>
    b7a2:	9b01      	ldr	r3, [sp, #4]
    b7a4:	8819      	ldrh	r1, [r3, #0]
    b7a6:	4b5f      	ldr	r3, [pc, #380]	; (b924 <IncludeMacCommandsResponse+0x1b0>)
    b7a8:	1a61      	subs	r1, r4, r1
    b7aa:	181b      	adds	r3, r3, r0
    b7ac:	3b02      	subs	r3, #2
    b7ae:	781b      	ldrb	r3, [r3, #0]
    b7b0:	18cb      	adds	r3, r1, r3
    b7b2:	2b0f      	cmp	r3, #15
    b7b4:	dd08      	ble.n	b7c8 <IncludeMacCommandsResponse+0x54>
    b7b6:	2207      	movs	r2, #7
    b7b8:	2100      	movs	r1, #0
    b7ba:	4b5b      	ldr	r3, [pc, #364]	; (b928 <IncludeMacCommandsResponse+0x1b4>)
    b7bc:	485b      	ldr	r0, [pc, #364]	; (b92c <IncludeMacCommandsResponse+0x1b8>)
    b7be:	4798      	blx	r3
    b7c0:	9b01      	ldr	r3, [sp, #4]
    b7c2:	801c      	strh	r4, [r3, #0]
    b7c4:	b007      	add	sp, #28
    b7c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b7c8:	2303      	movs	r3, #3
    b7ca:	4373      	muls	r3, r6
    b7cc:	18d3      	adds	r3, r2, r3
    b7ce:	3391      	adds	r3, #145	; 0x91
    b7d0:	7819      	ldrb	r1, [r3, #0]
    b7d2:	1e88      	subs	r0, r1, #2
    b7d4:	2808      	cmp	r0, #8
    b7d6:	d862      	bhi.n	b89e <IncludeMacCommandsResponse+0x12a>
    b7d8:	1c63      	adds	r3, r4, #1
    b7da:	f005 ffb1 	bl	11740 <__gnu_thumb1_case_uqi>
    b7de:	0594      	.short	0x0594
    b7e0:	6646269e 	.word	0x6646269e
    b7e4:	7b9e      	.short	0x7b9e
    b7e6:	7f          	.byte	0x7f
    b7e7:	00          	.byte	0x00
    b7e8:	2203      	movs	r2, #3
    b7ea:	20d8      	movs	r0, #216	; 0xd8
    b7ec:	552a      	strb	r2, [r5, r4]
    b7ee:	2200      	movs	r2, #0
    b7f0:	b29b      	uxth	r3, r3
    b7f2:	18eb      	adds	r3, r5, r3
    b7f4:	4f4a      	ldr	r7, [pc, #296]	; (b920 <IncludeMacCommandsResponse+0x1ac>)
    b7f6:	701a      	strb	r2, [r3, #0]
    b7f8:	30ff      	adds	r0, #255	; 0xff
    b7fa:	5c39      	ldrb	r1, [r7, r0]
    b7fc:	3201      	adds	r2, #1
    b7fe:	4011      	ands	r1, r2
    b800:	466a      	mov	r2, sp
    b802:	9102      	str	r1, [sp, #8]
    b804:	7a12      	ldrb	r2, [r2, #8]
    b806:	701a      	strb	r2, [r3, #0]
    b808:	5c3a      	ldrb	r2, [r7, r0]
    b80a:	4694      	mov	ip, r2
    b80c:	2202      	movs	r2, #2
    b80e:	4661      	mov	r1, ip
    b810:	4211      	tst	r1, r2
    b812:	d002      	beq.n	b81a <IncludeMacCommandsResponse+0xa6>
    b814:	9902      	ldr	r1, [sp, #8]
    b816:	430a      	orrs	r2, r1
    b818:	701a      	strb	r2, [r3, #0]
    b81a:	2204      	movs	r2, #4
    b81c:	5c39      	ldrb	r1, [r7, r0]
    b81e:	4211      	tst	r1, r2
    b820:	d06e      	beq.n	b900 <IncludeMacCommandsResponse+0x18c>
    b822:	7819      	ldrb	r1, [r3, #0]
    b824:	430a      	orrs	r2, r1
    b826:	701a      	strb	r2, [r3, #0]
    b828:	e06a      	b.n	b900 <IncludeMacCommandsResponse+0x18c>
    b82a:	2205      	movs	r2, #5
    b82c:	2103      	movs	r1, #3
    b82e:	552a      	strb	r2, [r5, r4]
    b830:	2200      	movs	r2, #0
    b832:	b29b      	uxth	r3, r3
    b834:	4371      	muls	r1, r6
    b836:	18eb      	adds	r3, r5, r3
    b838:	701a      	strb	r2, [r3, #0]
    b83a:	4a39      	ldr	r2, [pc, #228]	; (b920 <IncludeMacCommandsResponse+0x1ac>)
    b83c:	1851      	adds	r1, r2, r1
    b83e:	3190      	adds	r1, #144	; 0x90
    b840:	7888      	ldrb	r0, [r1, #2]
    b842:	0700      	lsls	r0, r0, #28
    b844:	0fc0      	lsrs	r0, r0, #31
    b846:	7018      	strb	r0, [r3, #0]
    b848:	7889      	ldrb	r1, [r1, #2]
    b84a:	b2c7      	uxtb	r7, r0
    b84c:	06c9      	lsls	r1, r1, #27
    b84e:	d502      	bpl.n	b856 <IncludeMacCommandsResponse+0xe2>
    b850:	2102      	movs	r1, #2
    b852:	4339      	orrs	r1, r7
    b854:	7019      	strb	r1, [r3, #0]
    b856:	2103      	movs	r1, #3
    b858:	4371      	muls	r1, r6
    b85a:	1852      	adds	r2, r2, r1
    b85c:	3290      	adds	r2, #144	; 0x90
    b85e:	7892      	ldrb	r2, [r2, #2]
    b860:	0692      	lsls	r2, r2, #26
    b862:	d54d      	bpl.n	b900 <IncludeMacCommandsResponse+0x18c>
    b864:	7819      	ldrb	r1, [r3, #0]
    b866:	2204      	movs	r2, #4
    b868:	e7dc      	b.n	b824 <IncludeMacCommandsResponse+0xb0>
    b86a:	ab04      	add	r3, sp, #16
    b86c:	1ddf      	adds	r7, r3, #7
    b86e:	0039      	movs	r1, r7
    b870:	4b2f      	ldr	r3, [pc, #188]	; (b930 <IncludeMacCommandsResponse+0x1bc>)
    b872:	200e      	movs	r0, #14
    b874:	4798      	blx	r3
    b876:	2306      	movs	r3, #6
    b878:	4a29      	ldr	r2, [pc, #164]	; (b920 <IncludeMacCommandsResponse+0x1ac>)
    b87a:	552b      	strb	r3, [r5, r4]
    b87c:	32e0      	adds	r2, #224	; 0xe0
    b87e:	7811      	ldrb	r1, [r2, #0]
    b880:	1c62      	adds	r2, r4, #1
    b882:	b292      	uxth	r2, r2
    b884:	54a9      	strb	r1, [r5, r2]
    b886:	783a      	ldrb	r2, [r7, #0]
    b888:	1ca3      	adds	r3, r4, #2
    b88a:	0011      	movs	r1, r2
    b88c:	3120      	adds	r1, #32
    b88e:	3403      	adds	r4, #3
    b890:	b2c9      	uxtb	r1, r1
    b892:	b29b      	uxth	r3, r3
    b894:	b2a4      	uxth	r4, r4
    b896:	293f      	cmp	r1, #63	; 0x3f
    b898:	d904      	bls.n	b8a4 <IncludeMacCommandsResponse+0x130>
    b89a:	2220      	movs	r2, #32
    b89c:	54ea      	strb	r2, [r5, r3]
    b89e:	3601      	adds	r6, #1
    b8a0:	b2f6      	uxtb	r6, r6
    b8a2:	e76e      	b.n	b782 <IncludeMacCommandsResponse+0xe>
    b8a4:	213f      	movs	r1, #63	; 0x3f
    b8a6:	400a      	ands	r2, r1
    b8a8:	e7f8      	b.n	b89c <IncludeMacCommandsResponse+0x128>
    b8aa:	2207      	movs	r2, #7
    b8ac:	2103      	movs	r1, #3
    b8ae:	552a      	strb	r2, [r5, r4]
    b8b0:	2200      	movs	r2, #0
    b8b2:	4371      	muls	r1, r6
    b8b4:	b29b      	uxth	r3, r3
    b8b6:	18eb      	adds	r3, r5, r3
    b8b8:	701a      	strb	r2, [r3, #0]
    b8ba:	4a19      	ldr	r2, [pc, #100]	; (b920 <IncludeMacCommandsResponse+0x1ac>)
    b8bc:	1852      	adds	r2, r2, r1
    b8be:	3290      	adds	r2, #144	; 0x90
    b8c0:	7891      	ldrb	r1, [r2, #2]
    b8c2:	09c9      	lsrs	r1, r1, #7
    b8c4:	7019      	strb	r1, [r3, #0]
    b8c6:	7892      	ldrb	r2, [r2, #2]
    b8c8:	b2c8      	uxtb	r0, r1
    b8ca:	0652      	lsls	r2, r2, #25
    b8cc:	d518      	bpl.n	b900 <IncludeMacCommandsResponse+0x18c>
    b8ce:	2202      	movs	r2, #2
    b8d0:	4302      	orrs	r2, r0
    b8d2:	e7a8      	b.n	b826 <IncludeMacCommandsResponse+0xb2>
    b8d4:	2209      	movs	r2, #9
    b8d6:	552a      	strb	r2, [r5, r4]
    b8d8:	b29c      	uxth	r4, r3
    b8da:	e7e0      	b.n	b89e <IncludeMacCommandsResponse+0x12a>
    b8dc:	220a      	movs	r2, #10
    b8de:	2103      	movs	r1, #3
    b8e0:	552a      	strb	r2, [r5, r4]
    b8e2:	2200      	movs	r2, #0
    b8e4:	4371      	muls	r1, r6
    b8e6:	b29b      	uxth	r3, r3
    b8e8:	18eb      	adds	r3, r5, r3
    b8ea:	701a      	strb	r2, [r3, #0]
    b8ec:	4a0c      	ldr	r2, [pc, #48]	; (b920 <IncludeMacCommandsResponse+0x1ac>)
    b8ee:	1852      	adds	r2, r2, r1
    b8f0:	3290      	adds	r2, #144	; 0x90
    b8f2:	7891      	ldrb	r1, [r2, #2]
    b8f4:	09c9      	lsrs	r1, r1, #7
    b8f6:	7019      	strb	r1, [r3, #0]
    b8f8:	78d2      	ldrb	r2, [r2, #3]
    b8fa:	b2c8      	uxtb	r0, r1
    b8fc:	07d2      	lsls	r2, r2, #31
    b8fe:	d4e6      	bmi.n	b8ce <IncludeMacCommandsResponse+0x15a>
    b900:	3402      	adds	r4, #2
    b902:	b2a4      	uxth	r4, r4
    b904:	e7cb      	b.n	b89e <IncludeMacCommandsResponse+0x12a>
    b906:	0013      	movs	r3, r2
    b908:	21ff      	movs	r1, #255	; 0xff
    b90a:	33dd      	adds	r3, #221	; 0xdd
    b90c:	7019      	strb	r1, [r3, #0]
    b90e:	2300      	movs	r3, #0
    b910:	32de      	adds	r2, #222	; 0xde
    b912:	7013      	strb	r3, [r2, #0]
    b914:	1c63      	adds	r3, r4, #1
    b916:	2202      	movs	r2, #2
    b918:	e7dd      	b.n	b8d6 <IncludeMacCommandsResponse+0x162>
    b91a:	5529      	strb	r1, [r5, r4]
    b91c:	e7dc      	b.n	b8d8 <IncludeMacCommandsResponse+0x164>
    b91e:	46c0      	nop			; (mov r8, r8)
    b920:	200017bc 	.word	0x200017bc
    b924:	0001ac16 	.word	0x0001ac16
    b928:	00014f51 	.word	0x00014f51
    b92c:	20001993 	.word	0x20001993
    b930:	0000fc5d 	.word	0x0000fc5d

0000b934 <UpdateJoinSuccessState>:
    b934:	b5f0      	push	{r4, r5, r6, r7, lr}
    b936:	4c35      	ldr	r4, [pc, #212]	; (ba0c <UpdateJoinSuccessState+0xd8>)
    b938:	2104      	movs	r1, #4
    b93a:	0022      	movs	r2, r4
    b93c:	328c      	adds	r2, #140	; 0x8c
    b93e:	7813      	ldrb	r3, [r2, #0]
    b940:	2001      	movs	r0, #1
    b942:	438b      	bics	r3, r1
    b944:	7013      	strb	r3, [r2, #0]
    b946:	0022      	movs	r2, r4
    b948:	2500      	movs	r5, #0
    b94a:	327c      	adds	r2, #124	; 0x7c
    b94c:	7813      	ldrb	r3, [r2, #0]
    b94e:	b087      	sub	sp, #28
    b950:	4303      	orrs	r3, r0
    b952:	3107      	adds	r1, #7
    b954:	4f2e      	ldr	r7, [pc, #184]	; (ba10 <UpdateJoinSuccessState+0xdc>)
    b956:	7013      	strb	r3, [r2, #0]
    b958:	47b8      	blx	r7
    b95a:	1d23      	adds	r3, r4, #4
    b95c:	2116      	movs	r1, #22
    b95e:	0028      	movs	r0, r5
    b960:	67dd      	str	r5, [r3, #124]	; 0x7c
    b962:	47b8      	blx	r7
    b964:	0023      	movs	r3, r4
    b966:	2020      	movs	r0, #32
    b968:	33ff      	adds	r3, #255	; 0xff
    b96a:	7c5b      	ldrb	r3, [r3, #17]
    b96c:	4e29      	ldr	r6, [pc, #164]	; (ba14 <UpdateJoinSuccessState+0xe0>)
    b96e:	4203      	tst	r3, r0
    b970:	d014      	beq.n	b99c <UpdateJoinSuccessState+0x68>
    b972:	0023      	movs	r3, r4
    b974:	337b      	adds	r3, #123	; 0x7b
    b976:	701d      	strb	r5, [r3, #0]
    b978:	0023      	movs	r3, r4
    b97a:	a904      	add	r1, sp, #16
    b97c:	336f      	adds	r3, #111	; 0x6f
    b97e:	710d      	strb	r5, [r1, #4]
    b980:	701d      	strb	r5, [r3, #0]
    b982:	705d      	strb	r5, [r3, #1]
    b984:	709d      	strb	r5, [r3, #2]
    b986:	70dd      	strb	r5, [r3, #3]
    b988:	711d      	strb	r5, [r3, #4]
    b98a:	715d      	strb	r5, [r3, #5]
    b98c:	719d      	strb	r5, [r3, #6]
    b98e:	71dd      	strb	r5, [r3, #7]
    b990:	47b0      	blx	r6
    b992:	210f      	movs	r1, #15
    b994:	2021      	movs	r0, #33	; 0x21
    b996:	4469      	add	r1, sp
    b998:	700d      	strb	r5, [r1, #0]
    b99a:	47b0      	blx	r6
    b99c:	0023      	movs	r3, r4
    b99e:	2500      	movs	r5, #0
    b9a0:	3308      	adds	r3, #8
    b9a2:	210a      	movs	r1, #10
    b9a4:	2001      	movs	r0, #1
    b9a6:	67dd      	str	r5, [r3, #124]	; 0x7c
    b9a8:	47b8      	blx	r7
    b9aa:	0023      	movs	r3, r4
    b9ac:	33c2      	adds	r3, #194	; 0xc2
    b9ae:	801d      	strh	r5, [r3, #0]
    b9b0:	0022      	movs	r2, r4
    b9b2:	0023      	movs	r3, r4
    b9b4:	210e      	movs	r1, #14
    b9b6:	327c      	adds	r2, #124	; 0x7c
    b9b8:	33ed      	adds	r3, #237	; 0xed
    b9ba:	701d      	strb	r5, [r3, #0]
    b9bc:	7813      	ldrb	r3, [r2, #0]
    b9be:	203a      	movs	r0, #58	; 0x3a
    b9c0:	438b      	bics	r3, r1
    b9c2:	0029      	movs	r1, r5
    b9c4:	7013      	strb	r3, [r2, #0]
    b9c6:	47b0      	blx	r6
    b9c8:	0023      	movs	r3, r4
    b9ca:	337d      	adds	r3, #125	; 0x7d
    b9cc:	781b      	ldrb	r3, [r3, #0]
    b9ce:	079b      	lsls	r3, r3, #30
    b9d0:	d50c      	bpl.n	b9ec <UpdateJoinSuccessState+0xb8>
    b9d2:	0023      	movs	r3, r4
    b9d4:	21fa      	movs	r1, #250	; 0xfa
    b9d6:	3388      	adds	r3, #136	; 0x88
    b9d8:	681b      	ldr	r3, [r3, #0]
    b9da:	34e7      	adds	r4, #231	; 0xe7
    b9dc:	0089      	lsls	r1, r1, #2
    b9de:	7820      	ldrb	r0, [r4, #0]
    b9e0:	4359      	muls	r1, r3
    b9e2:	9500      	str	r5, [sp, #0]
    b9e4:	4b0c      	ldr	r3, [pc, #48]	; (ba18 <UpdateJoinSuccessState+0xe4>)
    b9e6:	002a      	movs	r2, r5
    b9e8:	4c0c      	ldr	r4, [pc, #48]	; (ba1c <UpdateJoinSuccessState+0xe8>)
    b9ea:	47a0      	blx	r4
    b9ec:	490c      	ldr	r1, [pc, #48]	; (ba20 <UpdateJoinSuccessState+0xec>)
    b9ee:	794a      	ldrb	r2, [r1, #5]
    b9f0:	790b      	ldrb	r3, [r1, #4]
    b9f2:	0212      	lsls	r2, r2, #8
    b9f4:	431a      	orrs	r2, r3
    b9f6:	798b      	ldrb	r3, [r1, #6]
    b9f8:	041b      	lsls	r3, r3, #16
    b9fa:	431a      	orrs	r2, r3
    b9fc:	79cb      	ldrb	r3, [r1, #7]
    b9fe:	061b      	lsls	r3, r3, #24
    ba00:	4313      	orrs	r3, r2
    ba02:	d001      	beq.n	ba08 <UpdateJoinSuccessState+0xd4>
    ba04:	2008      	movs	r0, #8
    ba06:	4798      	blx	r3
    ba08:	b007      	add	sp, #28
    ba0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ba0c:	200017bc 	.word	0x200017bc
    ba10:	000091e1 	.word	0x000091e1
    ba14:	00008d21 	.word	0x00008d21
    ba18:	0000bb61 	.word	0x0000bb61
    ba1c:	00009609 	.word	0x00009609
    ba20:	20001ab4 	.word	0x20001ab4

0000ba24 <PrepareSessionKeys>:
    ba24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ba26:	0004      	movs	r4, r0
    ba28:	2603      	movs	r6, #3
    ba2a:	000d      	movs	r5, r1
    ba2c:	0017      	movs	r7, r2
    ba2e:	4b09      	ldr	r3, [pc, #36]	; (ba54 <PrepareSessionKeys+0x30>)
    ba30:	2210      	movs	r2, #16
    ba32:	2100      	movs	r1, #0
    ba34:	4798      	blx	r3
    ba36:	0032      	movs	r2, r6
    ba38:	0029      	movs	r1, r5
    ba3a:	1c60      	adds	r0, r4, #1
    ba3c:	4d06      	ldr	r5, [pc, #24]	; (ba58 <PrepareSessionKeys+0x34>)
    ba3e:	47a8      	blx	r5
    ba40:	0032      	movs	r2, r6
    ba42:	0039      	movs	r1, r7
    ba44:	1d20      	adds	r0, r4, #4
    ba46:	47a8      	blx	r5
    ba48:	1de0      	adds	r0, r4, #7
    ba4a:	2202      	movs	r2, #2
    ba4c:	4903      	ldr	r1, [pc, #12]	; (ba5c <PrepareSessionKeys+0x38>)
    ba4e:	47a8      	blx	r5
    ba50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ba52:	46c0      	nop			; (mov r8, r8)
    ba54:	00014f51 	.word	0x00014f51
    ba58:	00014ecd 	.word	0x00014ecd
    ba5c:	20001880 	.word	0x20001880

0000ba60 <AssembleEncryptionBlock>:
    ba60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ba62:	001e      	movs	r6, r3
    ba64:	4c0b      	ldr	r4, [pc, #44]	; (ba94 <AssembleEncryptionBlock+0x34>)
    ba66:	0017      	movs	r7, r2
    ba68:	4b0b      	ldr	r3, [pc, #44]	; (ba98 <AssembleEncryptionBlock+0x38>)
    ba6a:	0005      	movs	r5, r0
    ba6c:	9101      	str	r1, [sp, #4]
    ba6e:	2210      	movs	r2, #16
    ba70:	2100      	movs	r1, #0
    ba72:	0020      	movs	r0, r4
    ba74:	4798      	blx	r3
    ba76:	7026      	strb	r6, [r4, #0]
    ba78:	2604      	movs	r6, #4
    ba7a:	7165      	strb	r5, [r4, #5]
    ba7c:	0032      	movs	r2, r6
    ba7e:	4d07      	ldr	r5, [pc, #28]	; (ba9c <AssembleEncryptionBlock+0x3c>)
    ba80:	a908      	add	r1, sp, #32
    ba82:	1da0      	adds	r0, r4, #6
    ba84:	47a8      	blx	r5
    ba86:	0020      	movs	r0, r4
    ba88:	0032      	movs	r2, r6
    ba8a:	a901      	add	r1, sp, #4
    ba8c:	300a      	adds	r0, #10
    ba8e:	47a8      	blx	r5
    ba90:	73e7      	strb	r7, [r4, #15]
    ba92:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    ba94:	20000e90 	.word	0x20000e90
    ba98:	00014f51 	.word	0x00014f51
    ba9c:	00014ecd 	.word	0x00014ecd

0000baa0 <ConfigureRadio>:
    baa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    baa2:	0001      	movs	r1, r0
    baa4:	0005      	movs	r5, r0
    baa6:	4c11      	ldr	r4, [pc, #68]	; (baec <ConfigureRadio+0x4c>)
    baa8:	3109      	adds	r1, #9
    baaa:	2009      	movs	r0, #9
    baac:	47a0      	blx	r4
    baae:	0029      	movs	r1, r5
    bab0:	2001      	movs	r0, #1
    bab2:	47a0      	blx	r4
    bab4:	1d29      	adds	r1, r5, #4
    bab6:	200a      	movs	r0, #10
    bab8:	47a0      	blx	r4
    baba:	7a6b      	ldrb	r3, [r5, #9]
    babc:	2b01      	cmp	r3, #1
    babe:	d10b      	bne.n	bad8 <ConfigureRadio+0x38>
    bac0:	0029      	movs	r1, r5
    bac2:	2016      	movs	r0, #22
    bac4:	310b      	adds	r1, #11
    bac6:	47a0      	blx	r4
    bac8:	0029      	movs	r1, r5
    baca:	2007      	movs	r0, #7
    bacc:	310a      	adds	r1, #10
    bace:	47a0      	blx	r4
    bad0:	2000      	movs	r0, #0
    bad2:	4907      	ldr	r1, [pc, #28]	; (baf0 <ConfigureRadio+0x50>)
    bad4:	47a0      	blx	r4
    bad6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    bad8:	466b      	mov	r3, sp
    bada:	1dd9      	adds	r1, r3, #7
    badc:	2303      	movs	r3, #3
    bade:	2013      	movs	r0, #19
    bae0:	700b      	strb	r3, [r1, #0]
    bae2:	47a0      	blx	r4
    bae4:	4903      	ldr	r1, [pc, #12]	; (baf4 <ConfigureRadio+0x54>)
    bae6:	2012      	movs	r0, #18
    bae8:	e7f4      	b.n	bad4 <ConfigureRadio+0x34>
    baea:	46c0      	nop			; (mov r8, r8)
    baec:	0000fd4d 	.word	0x0000fd4d
    baf0:	200018b3 	.word	0x200018b3
    baf4:	0001ac13 	.word	0x0001ac13

0000baf8 <StopReceiveWindow2Timer>:
    baf8:	b510      	push	{r4, lr}
    bafa:	4c0b      	ldr	r4, [pc, #44]	; (bb28 <StopReceiveWindow2Timer+0x30>)
    bafc:	0022      	movs	r2, r4
    bafe:	32f4      	adds	r2, #244	; 0xf4
    bb00:	7812      	ldrb	r2, [r2, #0]
    bb02:	2a01      	cmp	r2, #1
    bb04:	d10e      	bne.n	bb24 <StopReceiveWindow2Timer+0x2c>
    bb06:	0021      	movs	r1, r4
    bb08:	200e      	movs	r0, #14
    bb0a:	317c      	adds	r1, #124	; 0x7c
    bb0c:	780a      	ldrb	r2, [r1, #0]
    bb0e:	34e5      	adds	r4, #229	; 0xe5
    bb10:	4382      	bics	r2, r0
    bb12:	700a      	strb	r2, [r1, #0]
    bb14:	7820      	ldrb	r0, [r4, #0]
    bb16:	4b05      	ldr	r3, [pc, #20]	; (bb2c <StopReceiveWindow2Timer+0x34>)
    bb18:	4798      	blx	r3
    bb1a:	2800      	cmp	r0, #0
    bb1c:	d002      	beq.n	bb24 <StopReceiveWindow2Timer+0x2c>
    bb1e:	7820      	ldrb	r0, [r4, #0]
    bb20:	4b03      	ldr	r3, [pc, #12]	; (bb30 <StopReceiveWindow2Timer+0x38>)
    bb22:	4798      	blx	r3
    bb24:	bd10      	pop	{r4, pc}
    bb26:	46c0      	nop			; (mov r8, r8)
    bb28:	200017bc 	.word	0x200017bc
    bb2c:	000097a1 	.word	0x000097a1
    bb30:	00009915 	.word	0x00009915

0000bb34 <LorawanLinkCheckCallback.part.1>:
    bb34:	4b07      	ldr	r3, [pc, #28]	; (bb54 <LorawanLinkCheckCallback.part.1+0x20>)
    bb36:	b513      	push	{r0, r1, r4, lr}
    bb38:	001a      	movs	r2, r3
    bb3a:	21fa      	movs	r1, #250	; 0xfa
    bb3c:	3288      	adds	r2, #136	; 0x88
    bb3e:	6812      	ldr	r2, [r2, #0]
    bb40:	0089      	lsls	r1, r1, #2
    bb42:	4351      	muls	r1, r2
    bb44:	2200      	movs	r2, #0
    bb46:	33e7      	adds	r3, #231	; 0xe7
    bb48:	7818      	ldrb	r0, [r3, #0]
    bb4a:	4c03      	ldr	r4, [pc, #12]	; (bb58 <LorawanLinkCheckCallback.part.1+0x24>)
    bb4c:	9200      	str	r2, [sp, #0]
    bb4e:	4b03      	ldr	r3, [pc, #12]	; (bb5c <LorawanLinkCheckCallback.part.1+0x28>)
    bb50:	47a0      	blx	r4
    bb52:	bd13      	pop	{r0, r1, r4, pc}
    bb54:	200017bc 	.word	0x200017bc
    bb58:	00009609 	.word	0x00009609
    bb5c:	0000bb61 	.word	0x0000bb61

0000bb60 <LorawanLinkCheckCallback>:
    bb60:	4b17      	ldr	r3, [pc, #92]	; (bbc0 <LorawanLinkCheckCallback+0x60>)
    bb62:	20a0      	movs	r0, #160	; 0xa0
    bb64:	001a      	movs	r2, r3
    bb66:	2180      	movs	r1, #128	; 0x80
    bb68:	b510      	push	{r4, lr}
    bb6a:	327c      	adds	r2, #124	; 0x7c
    bb6c:	8812      	ldrh	r2, [r2, #0]
    bb6e:	0080      	lsls	r0, r0, #2
    bb70:	0089      	lsls	r1, r1, #2
    bb72:	4002      	ands	r2, r0
    bb74:	428a      	cmp	r2, r1
    bb76:	d11c      	bne.n	bbb2 <LorawanLinkCheckCallback+0x52>
    bb78:	001a      	movs	r2, r3
    bb7a:	32d8      	adds	r2, #216	; 0xd8
    bb7c:	7810      	ldrb	r0, [r2, #0]
    bb7e:	2403      	movs	r4, #3
    bb80:	2200      	movs	r2, #0
    bb82:	b2d1      	uxtb	r1, r2
    bb84:	4281      	cmp	r1, r0
    bb86:	d30d      	bcc.n	bba4 <LorawanLinkCheckCallback+0x44>
    bb88:	d113      	bne.n	bbb2 <LorawanLinkCheckCallback+0x52>
    bb8a:	2203      	movs	r2, #3
    bb8c:	434a      	muls	r2, r1
    bb8e:	2102      	movs	r1, #2
    bb90:	189a      	adds	r2, r3, r2
    bb92:	3291      	adds	r2, #145	; 0x91
    bb94:	7011      	strb	r1, [r2, #0]
    bb96:	280f      	cmp	r0, #15
    bb98:	d80b      	bhi.n	bbb2 <LorawanLinkCheckCallback+0x52>
    bb9a:	001a      	movs	r2, r3
    bb9c:	3001      	adds	r0, #1
    bb9e:	32d8      	adds	r2, #216	; 0xd8
    bba0:	7010      	strb	r0, [r2, #0]
    bba2:	e006      	b.n	bbb2 <LorawanLinkCheckCallback+0x52>
    bba4:	0021      	movs	r1, r4
    bba6:	3201      	adds	r2, #1
    bba8:	4351      	muls	r1, r2
    bbaa:	318e      	adds	r1, #142	; 0x8e
    bbac:	5c59      	ldrb	r1, [r3, r1]
    bbae:	2902      	cmp	r1, #2
    bbb0:	d1e7      	bne.n	bb82 <LorawanLinkCheckCallback+0x22>
    bbb2:	337d      	adds	r3, #125	; 0x7d
    bbb4:	781b      	ldrb	r3, [r3, #0]
    bbb6:	079b      	lsls	r3, r3, #30
    bbb8:	d501      	bpl.n	bbbe <LorawanLinkCheckCallback+0x5e>
    bbba:	4b02      	ldr	r3, [pc, #8]	; (bbc4 <LorawanLinkCheckCallback+0x64>)
    bbbc:	4798      	blx	r3
    bbbe:	bd10      	pop	{r4, pc}
    bbc0:	200017bc 	.word	0x200017bc
    bbc4:	0000bb35 	.word	0x0000bb35

0000bbc8 <LORAWAN_Init>:
    bbc8:	2270      	movs	r2, #112	; 0x70
    bbca:	b5f0      	push	{r4, r5, r6, r7, lr}
    bbcc:	4b3e      	ldr	r3, [pc, #248]	; (bcc8 <LORAWAN_Init+0x100>)
    bbce:	b087      	sub	sp, #28
    bbd0:	781b      	ldrb	r3, [r3, #0]
    bbd2:	0005      	movs	r5, r0
    bbd4:	011b      	lsls	r3, r3, #4
    bbd6:	4013      	ands	r3, r2
    bbd8:	4a3c      	ldr	r2, [pc, #240]	; (bccc <LORAWAN_Init+0x104>)
    bbda:	000e      	movs	r6, r1
    bbdc:	7812      	ldrb	r2, [r2, #0]
    bbde:	0912      	lsrs	r2, r2, #4
    bbe0:	4313      	orrs	r3, r2
    bbe2:	2b1f      	cmp	r3, #31
    bbe4:	d000      	beq.n	bbe8 <LORAWAN_Init+0x20>
    bbe6:	e7fe      	b.n	bbe6 <LORAWAN_Init+0x1e>
    bbe8:	4f39      	ldr	r7, [pc, #228]	; (bcd0 <LORAWAN_Init+0x108>)
    bbea:	003b      	movs	r3, r7
    bbec:	33ef      	adds	r3, #239	; 0xef
    bbee:	781b      	ldrb	r3, [r3, #0]
    bbf0:	2b00      	cmp	r3, #0
    bbf2:	d166      	bne.n	bcc2 <LORAWAN_Init+0xfa>
    bbf4:	4837      	ldr	r0, [pc, #220]	; (bcd4 <LORAWAN_Init+0x10c>)
    bbf6:	4c38      	ldr	r4, [pc, #224]	; (bcd8 <LORAWAN_Init+0x110>)
    bbf8:	47a0      	blx	r4
    bbfa:	2808      	cmp	r0, #8
    bbfc:	d034      	beq.n	bc68 <LORAWAN_Init+0xa0>
    bbfe:	4b37      	ldr	r3, [pc, #220]	; (bcdc <LORAWAN_Init+0x114>)
    bc00:	4798      	blx	r3
    bc02:	37ef      	adds	r7, #239	; 0xef
    bc04:	783b      	ldrb	r3, [r7, #0]
    bc06:	2b00      	cmp	r3, #0
    bc08:	d018      	beq.n	bc3c <LORAWAN_Init+0x74>
    bc0a:	4b35      	ldr	r3, [pc, #212]	; (bce0 <LORAWAN_Init+0x118>)
    bc0c:	0a2a      	lsrs	r2, r5, #8
    bc0e:	705a      	strb	r2, [r3, #1]
    bc10:	0c2a      	lsrs	r2, r5, #16
    bc12:	709a      	strb	r2, [r3, #2]
    bc14:	0a32      	lsrs	r2, r6, #8
    bc16:	701d      	strb	r5, [r3, #0]
    bc18:	711e      	strb	r6, [r3, #4]
    bc1a:	715a      	strb	r2, [r3, #5]
    bc1c:	0e2d      	lsrs	r5, r5, #24
    bc1e:	0c32      	lsrs	r2, r6, #16
    bc20:	0e36      	lsrs	r6, r6, #24
    bc22:	719a      	strb	r2, [r3, #6]
    bc24:	70dd      	strb	r5, [r3, #3]
    bc26:	71de      	strb	r6, [r3, #7]
    bc28:	4b2e      	ldr	r3, [pc, #184]	; (bce4 <LORAWAN_Init+0x11c>)
    bc2a:	4798      	blx	r3
    bc2c:	492e      	ldr	r1, [pc, #184]	; (bce8 <LORAWAN_Init+0x120>)
    bc2e:	4b2f      	ldr	r3, [pc, #188]	; (bcec <LORAWAN_Init+0x124>)
    bc30:	201a      	movs	r0, #26
    bc32:	4798      	blx	r3
    bc34:	4b2e      	ldr	r3, [pc, #184]	; (bcf0 <LORAWAN_Init+0x128>)
    bc36:	4798      	blx	r3
    bc38:	4b2e      	ldr	r3, [pc, #184]	; (bcf4 <LORAWAN_Init+0x12c>)
    bc3a:	4798      	blx	r3
    bc3c:	2317      	movs	r3, #23
    bc3e:	ac02      	add	r4, sp, #8
    bc40:	7123      	strb	r3, [r4, #4]
    bc42:	4b2d      	ldr	r3, [pc, #180]	; (bcf8 <LORAWAN_Init+0x130>)
    bc44:	9a03      	ldr	r2, [sp, #12]
    bc46:	9300      	str	r3, [sp, #0]
    bc48:	4d2c      	ldr	r5, [pc, #176]	; (bcfc <LORAWAN_Init+0x134>)
    bc4a:	492d      	ldr	r1, [pc, #180]	; (bd00 <LORAWAN_Init+0x138>)
    bc4c:	4b2d      	ldr	r3, [pc, #180]	; (bd04 <LORAWAN_Init+0x13c>)
    bc4e:	2000      	movs	r0, #0
    bc50:	47a8      	blx	r5
    bc52:	230f      	movs	r3, #15
    bc54:	7123      	strb	r3, [r4, #4]
    bc56:	4b2c      	ldr	r3, [pc, #176]	; (bd08 <LORAWAN_Init+0x140>)
    bc58:	492c      	ldr	r1, [pc, #176]	; (bd0c <LORAWAN_Init+0x144>)
    bc5a:	9300      	str	r3, [sp, #0]
    bc5c:	6862      	ldr	r2, [r4, #4]
    bc5e:	4b2c      	ldr	r3, [pc, #176]	; (bd10 <LORAWAN_Init+0x148>)
    bc60:	2001      	movs	r0, #1
    bc62:	47a8      	blx	r5
    bc64:	b007      	add	sp, #28
    bc66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bc68:	482a      	ldr	r0, [pc, #168]	; (bd14 <LORAWAN_Init+0x14c>)
    bc6a:	47a0      	blx	r4
    bc6c:	2808      	cmp	r0, #8
    bc6e:	d1c6      	bne.n	bbfe <LORAWAN_Init+0x36>
    bc70:	4829      	ldr	r0, [pc, #164]	; (bd18 <LORAWAN_Init+0x150>)
    bc72:	47a0      	blx	r4
    bc74:	2808      	cmp	r0, #8
    bc76:	d1c2      	bne.n	bbfe <LORAWAN_Init+0x36>
    bc78:	4828      	ldr	r0, [pc, #160]	; (bd1c <LORAWAN_Init+0x154>)
    bc7a:	47a0      	blx	r4
    bc7c:	2808      	cmp	r0, #8
    bc7e:	d1be      	bne.n	bbfe <LORAWAN_Init+0x36>
    bc80:	4827      	ldr	r0, [pc, #156]	; (bd20 <LORAWAN_Init+0x158>)
    bc82:	47a0      	blx	r4
    bc84:	2808      	cmp	r0, #8
    bc86:	d1ba      	bne.n	bbfe <LORAWAN_Init+0x36>
    bc88:	4826      	ldr	r0, [pc, #152]	; (bd24 <LORAWAN_Init+0x15c>)
    bc8a:	47a0      	blx	r4
    bc8c:	2808      	cmp	r0, #8
    bc8e:	d1b6      	bne.n	bbfe <LORAWAN_Init+0x36>
    bc90:	4825      	ldr	r0, [pc, #148]	; (bd28 <LORAWAN_Init+0x160>)
    bc92:	47a0      	blx	r4
    bc94:	2808      	cmp	r0, #8
    bc96:	d1b2      	bne.n	bbfe <LORAWAN_Init+0x36>
    bc98:	4824      	ldr	r0, [pc, #144]	; (bd2c <LORAWAN_Init+0x164>)
    bc9a:	47a0      	blx	r4
    bc9c:	2808      	cmp	r0, #8
    bc9e:	d1ae      	bne.n	bbfe <LORAWAN_Init+0x36>
    bca0:	4823      	ldr	r0, [pc, #140]	; (bd30 <LORAWAN_Init+0x168>)
    bca2:	47a0      	blx	r4
    bca4:	2808      	cmp	r0, #8
    bca6:	d1aa      	bne.n	bbfe <LORAWAN_Init+0x36>
    bca8:	4822      	ldr	r0, [pc, #136]	; (bd34 <LORAWAN_Init+0x16c>)
    bcaa:	47a0      	blx	r4
    bcac:	2808      	cmp	r0, #8
    bcae:	d1a6      	bne.n	bbfe <LORAWAN_Init+0x36>
    bcb0:	4821      	ldr	r0, [pc, #132]	; (bd38 <LORAWAN_Init+0x170>)
    bcb2:	47a0      	blx	r4
    bcb4:	2808      	cmp	r0, #8
    bcb6:	d1a2      	bne.n	bbfe <LORAWAN_Init+0x36>
    bcb8:	003b      	movs	r3, r7
    bcba:	2201      	movs	r2, #1
    bcbc:	33ef      	adds	r3, #239	; 0xef
    bcbe:	701a      	strb	r2, [r3, #0]
    bcc0:	e79f      	b.n	bc02 <LORAWAN_Init+0x3a>
    bcc2:	4b1e      	ldr	r3, [pc, #120]	; (bd3c <LORAWAN_Init+0x174>)
    bcc4:	4798      	blx	r3
    bcc6:	e79c      	b.n	bc02 <LORAWAN_Init+0x3a>
    bcc8:	41003fe8 	.word	0x41003fe8
    bccc:	41003fe4 	.word	0x41003fe4
    bcd0:	200017bc 	.word	0x200017bc
    bcd4:	2000189e 	.word	0x2000189e
    bcd8:	000095d5 	.word	0x000095d5
    bcdc:	00009519 	.word	0x00009519
    bce0:	20001ab4 	.word	0x20001ab4
    bce4:	0000ff69 	.word	0x0000ff69
    bce8:	0000d86d 	.word	0x0000d86d
    bcec:	0000fd4d 	.word	0x0000fd4d
    bcf0:	00009da1 	.word	0x00009da1
    bcf4:	000150dd 	.word	0x000150dd
    bcf8:	0000f91d 	.word	0x0000f91d
    bcfc:	000091ed 	.word	0x000091ed
    bd00:	200017a3 	.word	0x200017a3
    bd04:	0001ac30 	.word	0x0001ac30
    bd08:	0000f921 	.word	0x0000f921
    bd0c:	20001694 	.word	0x20001694
    bd10:	0001ace8 	.word	0x0001ace8
    bd14:	2000189f 	.word	0x2000189f
    bd18:	200018a0 	.word	0x200018a0
    bd1c:	200018a1 	.word	0x200018a1
    bd20:	200018a3 	.word	0x200018a3
    bd24:	200018a4 	.word	0x200018a4
    bd28:	200018a2 	.word	0x200018a2
    bd2c:	200018a5 	.word	0x200018a5
    bd30:	200018ae 	.word	0x200018ae
    bd34:	200018af 	.word	0x200018af
    bd38:	200018d8 	.word	0x200018d8
    bd3c:	0000b6b1 	.word	0x0000b6b1

0000bd40 <LORAWAN_Send>:
    bd40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    bd42:	4c37      	ldr	r4, [pc, #220]	; (be20 <LORAWAN_Send+0xe0>)
    bd44:	0006      	movs	r6, r0
    bd46:	0023      	movs	r3, r4
    bd48:	337c      	adds	r3, #124	; 0x7c
    bd4a:	781b      	ldrb	r3, [r3, #0]
    bd4c:	250f      	movs	r5, #15
    bd4e:	b25a      	sxtb	r2, r3
    bd50:	2a00      	cmp	r2, #0
    bd52:	db0b      	blt.n	bd6c <LORAWAN_Send+0x2c>
    bd54:	3d03      	subs	r5, #3
    bd56:	065a      	lsls	r2, r3, #25
    bd58:	d408      	bmi.n	bd6c <LORAWAN_Send+0x2c>
    bd5a:	3d03      	subs	r5, #3
    bd5c:	07db      	lsls	r3, r3, #31
    bd5e:	d505      	bpl.n	bd6c <LORAWAN_Send+0x2c>
    bd60:	23ea      	movs	r3, #234	; 0xea
    bd62:	005b      	lsls	r3, r3, #1
    bd64:	5ce7      	ldrb	r7, [r4, r3]
    bd66:	2f00      	cmp	r7, #0
    bd68:	d102      	bne.n	bd70 <LORAWAN_Send+0x30>
    bd6a:	2511      	movs	r5, #17
    bd6c:	0028      	movs	r0, r5
    bd6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    bd70:	2800      	cmp	r0, #0
    bd72:	d10e      	bne.n	bd92 <LORAWAN_Send+0x52>
    bd74:	2700      	movs	r7, #0
    bd76:	1d23      	adds	r3, r4, #4
    bd78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    bd7a:	3301      	adds	r3, #1
    bd7c:	d123      	bne.n	bdc6 <LORAWAN_Send+0x86>
    bd7e:	2001      	movs	r0, #1
    bd80:	347c      	adds	r4, #124	; 0x7c
    bd82:	78a3      	ldrb	r3, [r4, #2]
    bd84:	210b      	movs	r1, #11
    bd86:	4303      	orrs	r3, r0
    bd88:	70a3      	strb	r3, [r4, #2]
    bd8a:	4b26      	ldr	r3, [pc, #152]	; (be24 <LORAWAN_Send+0xe4>)
    bd8c:	4798      	blx	r3
    bd8e:	250d      	movs	r5, #13
    bd90:	e7ec      	b.n	bd6c <LORAWAN_Send+0x2c>
    bd92:	7843      	ldrb	r3, [r0, #1]
    bd94:	7a02      	ldrb	r2, [r0, #8]
    bd96:	3b01      	subs	r3, #1
    bd98:	b2db      	uxtb	r3, r3
    bd9a:	9201      	str	r2, [sp, #4]
    bd9c:	2bdf      	cmp	r3, #223	; 0xdf
    bd9e:	d902      	bls.n	bda6 <LORAWAN_Send+0x66>
    bda0:	250a      	movs	r5, #10
    bda2:	2a00      	cmp	r2, #0
    bda4:	d1e2      	bne.n	bd6c <LORAWAN_Send+0x2c>
    bda6:	4b20      	ldr	r3, [pc, #128]	; (be28 <LORAWAN_Send+0xe8>)
    bda8:	4798      	blx	r3
    bdaa:	4684      	mov	ip, r0
    bdac:	9b01      	ldr	r3, [sp, #4]
    bdae:	9000      	str	r0, [sp, #0]
    bdb0:	4463      	add	r3, ip
    bdb2:	001d      	movs	r5, r3
    bdb4:	4b1d      	ldr	r3, [pc, #116]	; (be2c <LORAWAN_Send+0xec>)
    bdb6:	4798      	blx	r3
    bdb8:	4285      	cmp	r5, r0
    bdba:	dddb      	ble.n	bd74 <LORAWAN_Send+0x34>
    bdbc:	9b00      	ldr	r3, [sp, #0]
    bdbe:	250e      	movs	r5, #14
    bdc0:	2b00      	cmp	r3, #0
    bdc2:	d0d3      	beq.n	bd6c <LORAWAN_Send+0x2c>
    bdc4:	e7d7      	b.n	bd76 <LORAWAN_Send+0x36>
    bdc6:	0023      	movs	r3, r4
    bdc8:	33f4      	adds	r3, #244	; 0xf4
    bdca:	781b      	ldrb	r3, [r3, #0]
    bdcc:	2b04      	cmp	r3, #4
    bdce:	d01d      	beq.n	be0c <LORAWAN_Send+0xcc>
    bdd0:	0023      	movs	r3, r4
    bdd2:	33f4      	adds	r3, #244	; 0xf4
    bdd4:	781b      	ldrb	r3, [r3, #0]
    bdd6:	2b01      	cmp	r3, #1
    bdd8:	d105      	bne.n	bde6 <LORAWAN_Send+0xa6>
    bdda:	0023      	movs	r3, r4
    bddc:	337c      	adds	r3, #124	; 0x7c
    bdde:	781a      	ldrb	r2, [r3, #0]
    bde0:	230e      	movs	r3, #14
    bde2:	421a      	tst	r2, r3
    bde4:	d1c1      	bne.n	bd6a <LORAWAN_Send+0x2a>
    bde6:	0023      	movs	r3, r4
    bde8:	33fc      	adds	r3, #252	; 0xfc
    bdea:	2f00      	cmp	r7, #0
    bdec:	d113      	bne.n	be16 <LORAWAN_Send+0xd6>
    bdee:	2508      	movs	r5, #8
    bdf0:	601e      	str	r6, [r3, #0]
    bdf2:	23ea      	movs	r3, #234	; 0xea
    bdf4:	2200      	movs	r2, #0
    bdf6:	005b      	lsls	r3, r3, #1
    bdf8:	54e2      	strb	r2, [r4, r3]
    bdfa:	2001      	movs	r0, #1
    bdfc:	4b0c      	ldr	r3, [pc, #48]	; (be30 <LORAWAN_Send+0xf0>)
    bdfe:	4798      	blx	r3
    be00:	2320      	movs	r3, #32
    be02:	348c      	adds	r4, #140	; 0x8c
    be04:	7822      	ldrb	r2, [r4, #0]
    be06:	4313      	orrs	r3, r2
    be08:	7023      	strb	r3, [r4, #0]
    be0a:	e7af      	b.n	bd6c <LORAWAN_Send+0x2c>
    be0c:	4b09      	ldr	r3, [pc, #36]	; (be34 <LORAWAN_Send+0xf4>)
    be0e:	4798      	blx	r3
    be10:	2808      	cmp	r0, #8
    be12:	d1aa      	bne.n	bd6a <LORAWAN_Send+0x2a>
    be14:	e7dc      	b.n	bdd0 <LORAWAN_Send+0x90>
    be16:	2200      	movs	r2, #0
    be18:	2511      	movs	r5, #17
    be1a:	601a      	str	r2, [r3, #0]
    be1c:	e7e9      	b.n	bdf2 <LORAWAN_Send+0xb2>
    be1e:	46c0      	nop			; (mov r8, r8)
    be20:	200017bc 	.word	0x200017bc
    be24:	000091e1 	.word	0x000091e1
    be28:	0000b671 	.word	0x0000b671
    be2c:	0000b719 	.word	0x0000b719
    be30:	0000fbd9 	.word	0x0000fbd9
    be34:	0000f449 	.word	0x0000f449

0000be38 <AutomaticReplyCallback>:
    be38:	b510      	push	{r4, lr}
    be3a:	4c0d      	ldr	r4, [pc, #52]	; (be70 <AutomaticReplyCallback+0x38>)
    be3c:	0023      	movs	r3, r4
    be3e:	33f4      	adds	r3, #244	; 0xf4
    be40:	781b      	ldrb	r3, [r3, #0]
    be42:	2b01      	cmp	r3, #1
    be44:	d10e      	bne.n	be64 <AutomaticReplyCallback+0x2c>
    be46:	0022      	movs	r2, r4
    be48:	210e      	movs	r1, #14
    be4a:	327c      	adds	r2, #124	; 0x7c
    be4c:	7813      	ldrb	r3, [r2, #0]
    be4e:	438b      	bics	r3, r1
    be50:	7013      	strb	r3, [r2, #0]
    be52:	4b08      	ldr	r3, [pc, #32]	; (be74 <AutomaticReplyCallback+0x3c>)
    be54:	2000      	movs	r0, #0
    be56:	4798      	blx	r3
    be58:	2208      	movs	r2, #8
    be5a:	348c      	adds	r4, #140	; 0x8c
    be5c:	7823      	ldrb	r3, [r4, #0]
    be5e:	4393      	bics	r3, r2
    be60:	7023      	strb	r3, [r4, #0]
    be62:	bd10      	pop	{r4, pc}
    be64:	2b04      	cmp	r3, #4
    be66:	d1f4      	bne.n	be52 <AutomaticReplyCallback+0x1a>
    be68:	4b03      	ldr	r3, [pc, #12]	; (be78 <AutomaticReplyCallback+0x40>)
    be6a:	4798      	blx	r3
    be6c:	e7f1      	b.n	be52 <AutomaticReplyCallback+0x1a>
    be6e:	46c0      	nop			; (mov r8, r8)
    be70:	200017bc 	.word	0x200017bc
    be74:	0000bd41 	.word	0x0000bd41
    be78:	00010681 	.word	0x00010681

0000be7c <LorawanLinkCheckConfigure>:
    be7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    be7e:	23fa      	movs	r3, #250	; 0xfa
    be80:	4c21      	ldr	r4, [pc, #132]	; (bf08 <LorawanLinkCheckConfigure+0x8c>)
    be82:	009b      	lsls	r3, r3, #2
    be84:	0022      	movs	r2, r4
    be86:	0025      	movs	r5, r4
    be88:	4343      	muls	r3, r0
    be8a:	3288      	adds	r2, #136	; 0x88
    be8c:	0006      	movs	r6, r0
    be8e:	2102      	movs	r1, #2
    be90:	2000      	movs	r0, #0
    be92:	4f1e      	ldr	r7, [pc, #120]	; (bf0c <LorawanLinkCheckConfigure+0x90>)
    be94:	6013      	str	r3, [r2, #0]
    be96:	357c      	adds	r5, #124	; 0x7c
    be98:	47b8      	blx	r7
    be9a:	2e00      	cmp	r6, #0
    be9c:	d127      	bne.n	beee <LorawanLinkCheckConfigure+0x72>
    be9e:	0023      	movs	r3, r4
    bea0:	33e7      	adds	r3, #231	; 0xe7
    bea2:	7818      	ldrb	r0, [r3, #0]
    bea4:	4b1a      	ldr	r3, [pc, #104]	; (bf10 <LorawanLinkCheckConfigure+0x94>)
    bea6:	4798      	blx	r3
    bea8:	2202      	movs	r2, #2
    beaa:	786b      	ldrb	r3, [r5, #1]
    beac:	210b      	movs	r1, #11
    beae:	4393      	bics	r3, r2
    beb0:	706b      	strb	r3, [r5, #1]
    beb2:	2001      	movs	r0, #1
    beb4:	47b8      	blx	r7
    beb6:	0023      	movs	r3, r4
    beb8:	2701      	movs	r7, #1
    beba:	33d8      	adds	r3, #216	; 0xd8
    bebc:	781b      	ldrb	r3, [r3, #0]
    bebe:	0030      	movs	r0, r6
    bec0:	0032      	movs	r2, r6
    bec2:	36ff      	adds	r6, #255	; 0xff
    bec4:	429a      	cmp	r2, r3
    bec6:	d304      	bcc.n	bed2 <LorawanLinkCheckConfigure+0x56>
    bec8:	2800      	cmp	r0, #0
    beca:	d001      	beq.n	bed0 <LorawanLinkCheckConfigure+0x54>
    becc:	34d8      	adds	r4, #216	; 0xd8
    bece:	7023      	strb	r3, [r4, #0]
    bed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bed2:	2103      	movs	r1, #3
    bed4:	4351      	muls	r1, r2
    bed6:	1861      	adds	r1, r4, r1
    bed8:	3191      	adds	r1, #145	; 0x91
    beda:	780d      	ldrb	r5, [r1, #0]
    bedc:	2d02      	cmp	r5, #2
    bede:	d103      	bne.n	bee8 <LorawanLinkCheckConfigure+0x6c>
    bee0:	0038      	movs	r0, r7
    bee2:	3b01      	subs	r3, #1
    bee4:	700e      	strb	r6, [r1, #0]
    bee6:	b2db      	uxtb	r3, r3
    bee8:	3201      	adds	r2, #1
    beea:	b2d2      	uxtb	r2, r2
    beec:	e7ea      	b.n	bec4 <LorawanLinkCheckConfigure+0x48>
    beee:	2302      	movs	r3, #2
    bef0:	786a      	ldrb	r2, [r5, #1]
    bef2:	210b      	movs	r1, #11
    bef4:	4313      	orrs	r3, r2
    bef6:	706b      	strb	r3, [r5, #1]
    bef8:	2001      	movs	r0, #1
    befa:	47b8      	blx	r7
    befc:	782b      	ldrb	r3, [r5, #0]
    befe:	07db      	lsls	r3, r3, #31
    bf00:	d5e6      	bpl.n	bed0 <LorawanLinkCheckConfigure+0x54>
    bf02:	4b04      	ldr	r3, [pc, #16]	; (bf14 <LorawanLinkCheckConfigure+0x98>)
    bf04:	4798      	blx	r3
    bf06:	e7e3      	b.n	bed0 <LorawanLinkCheckConfigure+0x54>
    bf08:	200017bc 	.word	0x200017bc
    bf0c:	000091e1 	.word	0x000091e1
    bf10:	00009915 	.word	0x00009915
    bf14:	0000bb35 	.word	0x0000bb35

0000bf18 <UpdateCurrentDataRate>:
    bf18:	b510      	push	{r4, lr}
    bf1a:	4b04      	ldr	r3, [pc, #16]	; (bf2c <UpdateCurrentDataRate+0x14>)
    bf1c:	210c      	movs	r1, #12
    bf1e:	33df      	adds	r3, #223	; 0xdf
    bf20:	7018      	strb	r0, [r3, #0]
    bf22:	2001      	movs	r0, #1
    bf24:	4b02      	ldr	r3, [pc, #8]	; (bf30 <UpdateCurrentDataRate+0x18>)
    bf26:	4798      	blx	r3
    bf28:	bd10      	pop	{r4, pc}
    bf2a:	46c0      	nop			; (mov r8, r8)
    bf2c:	200017bc 	.word	0x200017bc
    bf30:	000091e1 	.word	0x000091e1

0000bf34 <UpdateDLSettings>:
    bf34:	b573      	push	{r0, r1, r4, r5, r6, lr}
    bf36:	466b      	mov	r3, sp
    bf38:	1dde      	adds	r6, r3, #7
    bf3a:	1d9c      	adds	r4, r3, #6
    bf3c:	71d8      	strb	r0, [r3, #7]
    bf3e:	7021      	strb	r1, [r4, #0]
    bf40:	2017      	movs	r0, #23
    bf42:	0031      	movs	r1, r6
    bf44:	4d0c      	ldr	r5, [pc, #48]	; (bf78 <UpdateDLSettings+0x44>)
    bf46:	47a8      	blx	r5
    bf48:	2808      	cmp	r0, #8
    bf4a:	d107      	bne.n	bf5c <UpdateDLSettings+0x28>
    bf4c:	4b0b      	ldr	r3, [pc, #44]	; (bf7c <UpdateDLSettings+0x48>)
    bf4e:	7832      	ldrb	r2, [r6, #0]
    bf50:	336e      	adds	r3, #110	; 0x6e
    bf52:	701a      	strb	r2, [r3, #0]
    bf54:	2100      	movs	r1, #0
    bf56:	3807      	subs	r0, #7
    bf58:	4b09      	ldr	r3, [pc, #36]	; (bf80 <UpdateDLSettings+0x4c>)
    bf5a:	4798      	blx	r3
    bf5c:	0021      	movs	r1, r4
    bf5e:	2018      	movs	r0, #24
    bf60:	47a8      	blx	r5
    bf62:	2808      	cmp	r0, #8
    bf64:	d107      	bne.n	bf76 <UpdateDLSettings+0x42>
    bf66:	2101      	movs	r1, #1
    bf68:	4b04      	ldr	r3, [pc, #16]	; (bf7c <UpdateDLSettings+0x48>)
    bf6a:	7822      	ldrb	r2, [r4, #0]
    bf6c:	33ee      	adds	r3, #238	; 0xee
    bf6e:	701a      	strb	r2, [r3, #0]
    bf70:	0008      	movs	r0, r1
    bf72:	4b03      	ldr	r3, [pc, #12]	; (bf80 <UpdateDLSettings+0x4c>)
    bf74:	4798      	blx	r3
    bf76:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    bf78:	00008c15 	.word	0x00008c15
    bf7c:	200017bc 	.word	0x200017bc
    bf80:	000091e1 	.word	0x000091e1

0000bf84 <UpdateTxPower>:
    bf84:	b510      	push	{r4, lr}
    bf86:	4b04      	ldr	r3, [pc, #16]	; (bf98 <UpdateTxPower+0x14>)
    bf88:	210a      	movs	r1, #10
    bf8a:	33e1      	adds	r3, #225	; 0xe1
    bf8c:	7018      	strb	r0, [r3, #0]
    bf8e:	2000      	movs	r0, #0
    bf90:	4b02      	ldr	r3, [pc, #8]	; (bf9c <UpdateTxPower+0x18>)
    bf92:	4798      	blx	r3
    bf94:	bd10      	pop	{r4, pc}
    bf96:	46c0      	nop			; (mov r8, r8)
    bf98:	200017bc 	.word	0x200017bc
    bf9c:	000091e1 	.word	0x000091e1

0000bfa0 <UpdateRetransmissionAckTimeoutState>:
    bfa0:	4b10      	ldr	r3, [pc, #64]	; (bfe4 <UpdateRetransmissionAckTimeoutState+0x44>)
    bfa2:	b513      	push	{r0, r1, r4, lr}
    bfa4:	001a      	movs	r2, r3
    bfa6:	32f4      	adds	r2, #244	; 0xf4
    bfa8:	7812      	ldrb	r2, [r2, #0]
    bfaa:	2a01      	cmp	r2, #1
    bfac:	d108      	bne.n	bfc0 <UpdateRetransmissionAckTimeoutState+0x20>
    bfae:	0018      	movs	r0, r3
    bfb0:	210e      	movs	r1, #14
    bfb2:	307c      	adds	r0, #124	; 0x7c
    bfb4:	7802      	ldrb	r2, [r0, #0]
    bfb6:	438a      	bics	r2, r1
    bfb8:	0011      	movs	r1, r2
    bfba:	220c      	movs	r2, #12
    bfbc:	430a      	orrs	r2, r1
    bfbe:	7002      	strb	r2, [r0, #0]
    bfc0:	001a      	movs	r2, r3
    bfc2:	32d2      	adds	r2, #210	; 0xd2
    bfc4:	8811      	ldrh	r1, [r2, #0]
    bfc6:	22e0      	movs	r2, #224	; 0xe0
    bfc8:	32ff      	adds	r2, #255	; 0xff
    bfca:	5c9a      	ldrb	r2, [r3, r2]
    bfcc:	33e8      	adds	r3, #232	; 0xe8
    bfce:	1a8a      	subs	r2, r1, r2
    bfd0:	21fa      	movs	r1, #250	; 0xfa
    bfd2:	0089      	lsls	r1, r1, #2
    bfd4:	4351      	muls	r1, r2
    bfd6:	2200      	movs	r2, #0
    bfd8:	7818      	ldrb	r0, [r3, #0]
    bfda:	4c03      	ldr	r4, [pc, #12]	; (bfe8 <UpdateRetransmissionAckTimeoutState+0x48>)
    bfdc:	9200      	str	r2, [sp, #0]
    bfde:	4b03      	ldr	r3, [pc, #12]	; (bfec <UpdateRetransmissionAckTimeoutState+0x4c>)
    bfe0:	47a0      	blx	r4
    bfe2:	bd13      	pop	{r0, r1, r4, pc}
    bfe4:	200017bc 	.word	0x200017bc
    bfe8:	00009609 	.word	0x00009609
    bfec:	0000d9c1 	.word	0x0000d9c1

0000bff0 <UpdateReceiveWindow2Parameters>:
    bff0:	4b06      	ldr	r3, [pc, #24]	; (c00c <UpdateReceiveWindow2Parameters+0x1c>)
    bff2:	b510      	push	{r4, lr}
    bff4:	001a      	movs	r2, r3
    bff6:	336a      	adds	r3, #106	; 0x6a
    bff8:	8018      	strh	r0, [r3, #0]
    bffa:	326e      	adds	r2, #110	; 0x6e
    bffc:	0c00      	lsrs	r0, r0, #16
    bffe:	8058      	strh	r0, [r3, #2]
    c000:	7011      	strb	r1, [r2, #0]
    c002:	2001      	movs	r0, #1
    c004:	2100      	movs	r1, #0
    c006:	4b02      	ldr	r3, [pc, #8]	; (c010 <UpdateReceiveWindow2Parameters+0x20>)
    c008:	4798      	blx	r3
    c00a:	bd10      	pop	{r4, pc}
    c00c:	200017bc 	.word	0x200017bc
    c010:	000091e1 	.word	0x000091e1

0000c014 <ResetParametersForConfirmedTransmission>:
    c014:	4b0a      	ldr	r3, [pc, #40]	; (c040 <ResetParametersForConfirmedTransmission+0x2c>)
    c016:	001a      	movs	r2, r3
    c018:	32f4      	adds	r2, #244	; 0xf4
    c01a:	7812      	ldrb	r2, [r2, #0]
    c01c:	2a01      	cmp	r2, #1
    c01e:	d105      	bne.n	c02c <ResetParametersForConfirmedTransmission+0x18>
    c020:	0019      	movs	r1, r3
    c022:	200e      	movs	r0, #14
    c024:	317c      	adds	r1, #124	; 0x7c
    c026:	780a      	ldrb	r2, [r1, #0]
    c028:	4382      	bics	r2, r0
    c02a:	700a      	strb	r2, [r1, #0]
    c02c:	001a      	movs	r2, r3
    c02e:	2100      	movs	r1, #0
    c030:	338c      	adds	r3, #140	; 0x8c
    c032:	32dc      	adds	r2, #220	; 0xdc
    c034:	7011      	strb	r1, [r2, #0]
    c036:	781a      	ldrb	r2, [r3, #0]
    c038:	3101      	adds	r1, #1
    c03a:	438a      	bics	r2, r1
    c03c:	701a      	strb	r2, [r3, #0]
    c03e:	4770      	bx	lr
    c040:	200017bc 	.word	0x200017bc

0000c044 <ResetParametersForUnconfirmedTransmission>:
    c044:	4b07      	ldr	r3, [pc, #28]	; (c064 <ResetParametersForUnconfirmedTransmission+0x20>)
    c046:	001a      	movs	r2, r3
    c048:	32f4      	adds	r2, #244	; 0xf4
    c04a:	7812      	ldrb	r2, [r2, #0]
    c04c:	2a01      	cmp	r2, #1
    c04e:	d105      	bne.n	c05c <ResetParametersForUnconfirmedTransmission+0x18>
    c050:	0019      	movs	r1, r3
    c052:	200e      	movs	r0, #14
    c054:	317c      	adds	r1, #124	; 0x7c
    c056:	780a      	ldrb	r2, [r1, #0]
    c058:	4382      	bics	r2, r0
    c05a:	700a      	strb	r2, [r1, #0]
    c05c:	2200      	movs	r2, #0
    c05e:	33db      	adds	r3, #219	; 0xdb
    c060:	701a      	strb	r2, [r3, #0]
    c062:	4770      	bx	lr
    c064:	200017bc 	.word	0x200017bc

0000c068 <SetJoinFailState>:
    c068:	b570      	push	{r4, r5, r6, lr}
    c06a:	4c15      	ldr	r4, [pc, #84]	; (c0c0 <SetJoinFailState+0x58>)
    c06c:	2604      	movs	r6, #4
    c06e:	0025      	movs	r5, r4
    c070:	358c      	adds	r5, #140	; 0x8c
    c072:	782a      	ldrb	r2, [r5, #0]
    c074:	0021      	movs	r1, r4
    c076:	43b2      	bics	r2, r6
    c078:	702a      	strb	r2, [r5, #0]
    c07a:	22f0      	movs	r2, #240	; 0xf0
    c07c:	317c      	adds	r1, #124	; 0x7c
    c07e:	780b      	ldrb	r3, [r1, #0]
    c080:	4013      	ands	r3, r2
    c082:	700b      	strb	r3, [r1, #0]
    c084:	0023      	movs	r3, r4
    c086:	33ff      	adds	r3, #255	; 0xff
    c088:	7c5b      	ldrb	r3, [r3, #17]
    c08a:	069b      	lsls	r3, r3, #26
    c08c:	d503      	bpl.n	c096 <SetJoinFailState+0x2e>
    c08e:	0023      	movs	r3, r4
    c090:	2200      	movs	r2, #0
    c092:	337b      	adds	r3, #123	; 0x7b
    c094:	701a      	strb	r2, [r3, #0]
    c096:	490b      	ldr	r1, [pc, #44]	; (c0c4 <SetJoinFailState+0x5c>)
    c098:	794a      	ldrb	r2, [r1, #5]
    c09a:	790b      	ldrb	r3, [r1, #4]
    c09c:	0212      	lsls	r2, r2, #8
    c09e:	431a      	orrs	r2, r3
    c0a0:	798b      	ldrb	r3, [r1, #6]
    c0a2:	041b      	lsls	r3, r3, #16
    c0a4:	431a      	orrs	r2, r3
    c0a6:	79cb      	ldrb	r3, [r1, #7]
    c0a8:	061b      	lsls	r3, r3, #24
    c0aa:	4313      	orrs	r3, r2
    c0ac:	d000      	beq.n	c0b0 <SetJoinFailState+0x48>
    c0ae:	4798      	blx	r3
    c0b0:	2300      	movs	r3, #0
    c0b2:	34f0      	adds	r4, #240	; 0xf0
    c0b4:	7023      	strb	r3, [r4, #0]
    c0b6:	210b      	movs	r1, #11
    c0b8:	4b03      	ldr	r3, [pc, #12]	; (c0c8 <SetJoinFailState+0x60>)
    c0ba:	2001      	movs	r0, #1
    c0bc:	4798      	blx	r3
    c0be:	bd70      	pop	{r4, r5, r6, pc}
    c0c0:	200017bc 	.word	0x200017bc
    c0c4:	20001ab4 	.word	0x20001ab4
    c0c8:	000091e1 	.word	0x000091e1

0000c0cc <ExecuteRxParamSetupReq>:
    c0cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    c0ce:	b085      	sub	sp, #20
    c0d0:	7805      	ldrb	r5, [r0, #0]
    c0d2:	0004      	movs	r4, r0
    c0d4:	1c41      	adds	r1, r0, #1
    c0d6:	2204      	movs	r2, #4
    c0d8:	4b36      	ldr	r3, [pc, #216]	; (c1b4 <ExecuteRxParamSetupReq+0xe8>)
    c0da:	a803      	add	r0, sp, #12
    c0dc:	4798      	blx	r3
    c0de:	2264      	movs	r2, #100	; 0x64
    c0e0:	9b03      	ldr	r3, [sp, #12]
    c0e2:	a903      	add	r1, sp, #12
    c0e4:	021b      	lsls	r3, r3, #8
    c0e6:	0a1b      	lsrs	r3, r3, #8
    c0e8:	4353      	muls	r3, r2
    c0ea:	9303      	str	r3, [sp, #12]
    c0ec:	1d23      	adds	r3, r4, #4
    c0ee:	9301      	str	r3, [sp, #4]
    c0f0:	072b      	lsls	r3, r5, #28
    c0f2:	0f1b      	lsrs	r3, r3, #28
    c0f4:	b2da      	uxtb	r2, r3
    c0f6:	9200      	str	r2, [sp, #0]
    c0f8:	aa02      	add	r2, sp, #8
    c0fa:	1c96      	adds	r6, r2, #2
    c0fc:	066d      	lsls	r5, r5, #25
    c0fe:	7033      	strb	r3, [r6, #0]
    c100:	1cd7      	adds	r7, r2, #3
    c102:	0f6d      	lsrs	r5, r5, #29
    c104:	2001      	movs	r0, #1
    c106:	4b2c      	ldr	r3, [pc, #176]	; (c1b8 <ExecuteRxParamSetupReq+0xec>)
    c108:	703d      	strb	r5, [r7, #0]
    c10a:	4798      	blx	r3
    c10c:	4c2b      	ldr	r4, [pc, #172]	; (c1bc <ExecuteRxParamSetupReq+0xf0>)
    c10e:	2808      	cmp	r0, #8
    c110:	d109      	bne.n	c126 <ExecuteRxParamSetupReq+0x5a>
    c112:	0023      	movs	r3, r4
    c114:	33d8      	adds	r3, #216	; 0xd8
    c116:	781a      	ldrb	r2, [r3, #0]
    c118:	2303      	movs	r3, #3
    c11a:	4353      	muls	r3, r2
    c11c:	18e3      	adds	r3, r4, r3
    c11e:	3390      	adds	r3, #144	; 0x90
    c120:	789a      	ldrb	r2, [r3, #2]
    c122:	4310      	orrs	r0, r2
    c124:	7098      	strb	r0, [r3, #2]
    c126:	0031      	movs	r1, r6
    c128:	200f      	movs	r0, #15
    c12a:	4e23      	ldr	r6, [pc, #140]	; (c1b8 <ExecuteRxParamSetupReq+0xec>)
    c12c:	47b0      	blx	r6
    c12e:	2808      	cmp	r0, #8
    c130:	d10a      	bne.n	c148 <ExecuteRxParamSetupReq+0x7c>
    c132:	0023      	movs	r3, r4
    c134:	33d8      	adds	r3, #216	; 0xd8
    c136:	781a      	ldrb	r2, [r3, #0]
    c138:	2303      	movs	r3, #3
    c13a:	4353      	muls	r3, r2
    c13c:	2210      	movs	r2, #16
    c13e:	18e3      	adds	r3, r4, r3
    c140:	3390      	adds	r3, #144	; 0x90
    c142:	7899      	ldrb	r1, [r3, #2]
    c144:	430a      	orrs	r2, r1
    c146:	709a      	strb	r2, [r3, #2]
    c148:	0039      	movs	r1, r7
    c14a:	2018      	movs	r0, #24
    c14c:	47b0      	blx	r6
    c14e:	2808      	cmp	r0, #8
    c150:	d10a      	bne.n	c168 <ExecuteRxParamSetupReq+0x9c>
    c152:	0023      	movs	r3, r4
    c154:	33d8      	adds	r3, #216	; 0xd8
    c156:	781a      	ldrb	r2, [r3, #0]
    c158:	2303      	movs	r3, #3
    c15a:	4353      	muls	r3, r2
    c15c:	2220      	movs	r2, #32
    c15e:	18e3      	adds	r3, r4, r3
    c160:	3390      	adds	r3, #144	; 0x90
    c162:	7899      	ldrb	r1, [r3, #2]
    c164:	430a      	orrs	r2, r1
    c166:	709a      	strb	r2, [r3, #2]
    c168:	0023      	movs	r3, r4
    c16a:	33d8      	adds	r3, #216	; 0xd8
    c16c:	781a      	ldrb	r2, [r3, #0]
    c16e:	2303      	movs	r3, #3
    c170:	4353      	muls	r3, r2
    c172:	18e3      	adds	r3, r4, r3
    c174:	3390      	adds	r3, #144	; 0x90
    c176:	789e      	ldrb	r6, [r3, #2]
    c178:	06f3      	lsls	r3, r6, #27
    c17a:	d518      	bpl.n	c1ae <ExecuteRxParamSetupReq+0xe2>
    c17c:	0733      	lsls	r3, r6, #28
    c17e:	d516      	bpl.n	c1ae <ExecuteRxParamSetupReq+0xe2>
    c180:	06b6      	lsls	r6, r6, #26
    c182:	0ff6      	lsrs	r6, r6, #31
    c184:	2e01      	cmp	r6, #1
    c186:	d112      	bne.n	c1ae <ExecuteRxParamSetupReq+0xe2>
    c188:	0023      	movs	r3, r4
    c18a:	33ee      	adds	r3, #238	; 0xee
    c18c:	701d      	strb	r5, [r3, #0]
    c18e:	0031      	movs	r1, r6
    c190:	0030      	movs	r0, r6
    c192:	4d0b      	ldr	r5, [pc, #44]	; (c1c0 <ExecuteRxParamSetupReq+0xf4>)
    c194:	47a8      	blx	r5
    c196:	9900      	ldr	r1, [sp, #0]
    c198:	9803      	ldr	r0, [sp, #12]
    c19a:	4b0a      	ldr	r3, [pc, #40]	; (c1c4 <ExecuteRxParamSetupReq+0xf8>)
    c19c:	4798      	blx	r3
    c19e:	2340      	movs	r3, #64	; 0x40
    c1a0:	347c      	adds	r4, #124	; 0x7c
    c1a2:	7862      	ldrb	r2, [r4, #1]
    c1a4:	210b      	movs	r1, #11
    c1a6:	4313      	orrs	r3, r2
    c1a8:	7063      	strb	r3, [r4, #1]
    c1aa:	0030      	movs	r0, r6
    c1ac:	47a8      	blx	r5
    c1ae:	9801      	ldr	r0, [sp, #4]
    c1b0:	b005      	add	sp, #20
    c1b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c1b4:	00014ecd 	.word	0x00014ecd
    c1b8:	00008c15 	.word	0x00008c15
    c1bc:	200017bc 	.word	0x200017bc
    c1c0:	000091e1 	.word	0x000091e1
    c1c4:	0000bff1 	.word	0x0000bff1

0000c1c8 <ExecuteDutyCycle>:
    c1c8:	b570      	push	{r4, r5, r6, lr}
    c1ca:	7803      	ldrb	r3, [r0, #0]
    c1cc:	1c46      	adds	r6, r0, #1
    c1ce:	2b0f      	cmp	r3, #15
    c1d0:	d80f      	bhi.n	c1f2 <ExecuteDutyCycle+0x2a>
    c1d2:	4c09      	ldr	r4, [pc, #36]	; (c1f8 <ExecuteDutyCycle+0x30>)
    c1d4:	210b      	movs	r1, #11
    c1d6:	0022      	movs	r2, r4
    c1d8:	2000      	movs	r0, #0
    c1da:	3290      	adds	r2, #144	; 0x90
    c1dc:	4d07      	ldr	r5, [pc, #28]	; (c1fc <ExecuteDutyCycle+0x34>)
    c1de:	7013      	strb	r3, [r2, #0]
    c1e0:	47a8      	blx	r5
    c1e2:	2320      	movs	r3, #32
    c1e4:	347c      	adds	r4, #124	; 0x7c
    c1e6:	7862      	ldrb	r2, [r4, #1]
    c1e8:	210b      	movs	r1, #11
    c1ea:	4313      	orrs	r3, r2
    c1ec:	7063      	strb	r3, [r4, #1]
    c1ee:	2001      	movs	r0, #1
    c1f0:	47a8      	blx	r5
    c1f2:	0030      	movs	r0, r6
    c1f4:	bd70      	pop	{r4, r5, r6, pc}
    c1f6:	46c0      	nop			; (mov r8, r8)
    c1f8:	200017bc 	.word	0x200017bc
    c1fc:	000091e1 	.word	0x000091e1

0000c200 <ExecuteDlChannel>:
    c200:	b5f0      	push	{r4, r5, r6, r7, lr}
    c202:	b089      	sub	sp, #36	; 0x24
    c204:	7805      	ldrb	r5, [r0, #0]
    c206:	ab02      	add	r3, sp, #8
    c208:	1c41      	adds	r1, r0, #1
    c20a:	0007      	movs	r7, r0
    c20c:	719d      	strb	r5, [r3, #6]
    c20e:	1d9e      	adds	r6, r3, #6
    c210:	2204      	movs	r2, #4
    c212:	4b23      	ldr	r3, [pc, #140]	; (c2a0 <ExecuteDlChannel+0xa0>)
    c214:	a805      	add	r0, sp, #20
    c216:	4798      	blx	r3
    c218:	9b05      	ldr	r3, [sp, #20]
    c21a:	a904      	add	r1, sp, #16
    c21c:	021c      	lsls	r4, r3, #8
    c21e:	2364      	movs	r3, #100	; 0x64
    c220:	0a24      	lsrs	r4, r4, #8
    c222:	435c      	muls	r4, r3
    c224:	1d3b      	adds	r3, r7, #4
    c226:	9301      	str	r3, [sp, #4]
    c228:	2301      	movs	r3, #1
    c22a:	2015      	movs	r0, #21
    c22c:	704b      	strb	r3, [r1, #1]
    c22e:	4b1d      	ldr	r3, [pc, #116]	; (c2a4 <ExecuteDlChannel+0xa4>)
    c230:	9405      	str	r4, [sp, #20]
    c232:	700d      	strb	r5, [r1, #0]
    c234:	4798      	blx	r3
    c236:	2808      	cmp	r0, #8
    c238:	d12f      	bne.n	c29a <ExecuteDlChannel+0x9a>
    c23a:	ab02      	add	r3, sp, #8
    c23c:	1ddd      	adds	r5, r3, #7
    c23e:	2300      	movs	r3, #0
    c240:	702b      	strb	r3, [r5, #0]
    c242:	7833      	ldrb	r3, [r6, #0]
    c244:	af06      	add	r7, sp, #24
    c246:	713b      	strb	r3, [r7, #4]
    c248:	002a      	movs	r2, r5
    c24a:	0031      	movs	r1, r6
    c24c:	300e      	adds	r0, #14
    c24e:	4b16      	ldr	r3, [pc, #88]	; (c2a8 <ExecuteDlChannel+0xa8>)
    c250:	9406      	str	r4, [sp, #24]
    c252:	4798      	blx	r3
    c254:	280a      	cmp	r0, #10
    c256:	d00d      	beq.n	c274 <ExecuteDlChannel+0x74>
    c258:	782a      	ldrb	r2, [r5, #0]
    c25a:	2a01      	cmp	r2, #1
    c25c:	d10a      	bne.n	c274 <ExecuteDlChannel+0x74>
    c25e:	4b13      	ldr	r3, [pc, #76]	; (c2ac <ExecuteDlChannel+0xac>)
    c260:	0019      	movs	r1, r3
    c262:	31d8      	adds	r1, #216	; 0xd8
    c264:	7808      	ldrb	r0, [r1, #0]
    c266:	2103      	movs	r1, #3
    c268:	4341      	muls	r1, r0
    c26a:	185b      	adds	r3, r3, r1
    c26c:	3390      	adds	r3, #144	; 0x90
    c26e:	78d9      	ldrb	r1, [r3, #3]
    c270:	430a      	orrs	r2, r1
    c272:	70da      	strb	r2, [r3, #3]
    c274:	0039      	movs	r1, r7
    c276:	2034      	movs	r0, #52	; 0x34
    c278:	4b0d      	ldr	r3, [pc, #52]	; (c2b0 <ExecuteDlChannel+0xb0>)
    c27a:	4798      	blx	r3
    c27c:	2808      	cmp	r0, #8
    c27e:	d10c      	bne.n	c29a <ExecuteDlChannel+0x9a>
    c280:	4b0a      	ldr	r3, [pc, #40]	; (c2ac <ExecuteDlChannel+0xac>)
    c282:	001a      	movs	r2, r3
    c284:	32d8      	adds	r2, #216	; 0xd8
    c286:	7811      	ldrb	r1, [r2, #0]
    c288:	2203      	movs	r2, #3
    c28a:	434a      	muls	r2, r1
    c28c:	189b      	adds	r3, r3, r2
    c28e:	2280      	movs	r2, #128	; 0x80
    c290:	3390      	adds	r3, #144	; 0x90
    c292:	7899      	ldrb	r1, [r3, #2]
    c294:	4252      	negs	r2, r2
    c296:	430a      	orrs	r2, r1
    c298:	709a      	strb	r2, [r3, #2]
    c29a:	9801      	ldr	r0, [sp, #4]
    c29c:	b009      	add	sp, #36	; 0x24
    c29e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c2a0:	00014ecd 	.word	0x00014ecd
    c2a4:	00008c15 	.word	0x00008c15
    c2a8:	00008bf9 	.word	0x00008bf9
    c2ac:	200017bc 	.word	0x200017bc
    c2b0:	00008d21 	.word	0x00008d21

0000c2b4 <ExecuteTxParamSetup>:
    c2b4:	220f      	movs	r2, #15
    c2b6:	b513      	push	{r0, r1, r4, lr}
    c2b8:	7803      	ldrb	r3, [r0, #0]
    c2ba:	4c0f      	ldr	r4, [pc, #60]	; (c2f8 <ExecuteTxParamSetup+0x44>)
    c2bc:	401a      	ands	r2, r3
    c2be:	5ca2      	ldrb	r2, [r4, r2]
    c2c0:	2401      	movs	r4, #1
    c2c2:	a901      	add	r1, sp, #4
    c2c4:	700a      	strb	r2, [r1, #0]
    c2c6:	111a      	asrs	r2, r3, #4
    c2c8:	115b      	asrs	r3, r3, #5
    c2ca:	4023      	ands	r3, r4
    c2cc:	40a3      	lsls	r3, r4
    c2ce:	4022      	ands	r2, r4
    c2d0:	4313      	orrs	r3, r2
    c2d2:	704b      	strb	r3, [r1, #1]
    c2d4:	1904      	adds	r4, r0, r4
    c2d6:	4b09      	ldr	r3, [pc, #36]	; (c2fc <ExecuteTxParamSetup+0x48>)
    c2d8:	2035      	movs	r0, #53	; 0x35
    c2da:	4798      	blx	r3
    c2dc:	2808      	cmp	r0, #8
    c2de:	d009      	beq.n	c2f4 <ExecuteTxParamSetup+0x40>
    c2e0:	4b07      	ldr	r3, [pc, #28]	; (c300 <ExecuteTxParamSetup+0x4c>)
    c2e2:	001a      	movs	r2, r3
    c2e4:	32d8      	adds	r2, #216	; 0xd8
    c2e6:	7811      	ldrb	r1, [r2, #0]
    c2e8:	2203      	movs	r2, #3
    c2ea:	434a      	muls	r2, r1
    c2ec:	189b      	adds	r3, r3, r2
    c2ee:	22ff      	movs	r2, #255	; 0xff
    c2f0:	3391      	adds	r3, #145	; 0x91
    c2f2:	701a      	strb	r2, [r3, #0]
    c2f4:	0020      	movs	r0, r4
    c2f6:	bd16      	pop	{r1, r2, r4, pc}
    c2f8:	0001ac1f 	.word	0x0001ac1f
    c2fc:	00008d21 	.word	0x00008d21
    c300:	200017bc 	.word	0x200017bc

0000c304 <ExecuteLinkAdr>:
    c304:	220f      	movs	r2, #15
    c306:	b5f0      	push	{r4, r5, r6, r7, lr}
    c308:	0005      	movs	r5, r0
    c30a:	7803      	ldrb	r3, [r0, #0]
    c30c:	b089      	sub	sp, #36	; 0x24
    c30e:	401a      	ands	r2, r3
    c310:	a905      	add	r1, sp, #20
    c312:	700a      	strb	r2, [r1, #0]
    c314:	24d8      	movs	r4, #216	; 0xd8
    c316:	aa04      	add	r2, sp, #16
    c318:	1d96      	adds	r6, r2, #6
    c31a:	091b      	lsrs	r3, r3, #4
    c31c:	7153      	strb	r3, [r2, #5]
    c31e:	1c41      	adds	r1, r0, #1
    c320:	2202      	movs	r2, #2
    c322:	0030      	movs	r0, r6
    c324:	4b38      	ldr	r3, [pc, #224]	; (c408 <ExecuteLinkAdr+0x104>)
    c326:	4798      	blx	r3
    c328:	2201      	movs	r2, #1
    c32a:	1d2b      	adds	r3, r5, #4
    c32c:	9303      	str	r3, [sp, #12]
    c32e:	78eb      	ldrb	r3, [r5, #3]
    c330:	4f36      	ldr	r7, [pc, #216]	; (c40c <ExecuteLinkAdr+0x108>)
    c332:	065b      	lsls	r3, r3, #25
    c334:	0f5b      	lsrs	r3, r3, #29
    c336:	34ff      	adds	r4, #255	; 0xff
    c338:	9300      	str	r3, [sp, #0]
    c33a:	5d3b      	ldrb	r3, [r7, r4]
    c33c:	a906      	add	r1, sp, #24
    c33e:	4393      	bics	r3, r2
    c340:	1892      	adds	r2, r2, r2
    c342:	4393      	bics	r3, r2
    c344:	3202      	adds	r2, #2
    c346:	4393      	bics	r3, r2
    c348:	553b      	strb	r3, [r7, r4]
    c34a:	466b      	mov	r3, sp
    c34c:	781b      	ldrb	r3, [r3, #0]
    c34e:	8836      	ldrh	r6, [r6, #0]
    c350:	700b      	strb	r3, [r1, #0]
    c352:	2038      	movs	r0, #56	; 0x38
    c354:	4b2e      	ldr	r3, [pc, #184]	; (c410 <ExecuteLinkAdr+0x10c>)
    c356:	804e      	strh	r6, [r1, #2]
    c358:	4798      	blx	r3
    c35a:	2808      	cmp	r0, #8
    c35c:	d116      	bne.n	c38c <ExecuteLinkAdr+0x88>
    c35e:	466b      	mov	r3, sp
    c360:	781b      	ldrb	r3, [r3, #0]
    c362:	a907      	add	r1, sp, #28
    c364:	708b      	strb	r3, [r1, #2]
    c366:	3014      	adds	r0, #20
    c368:	4b2a      	ldr	r3, [pc, #168]	; (c414 <ExecuteLinkAdr+0x110>)
    c36a:	800e      	strh	r6, [r1, #0]
    c36c:	4798      	blx	r3
    c36e:	2201      	movs	r2, #1
    c370:	5d3b      	ldrb	r3, [r7, r4]
    c372:	2010      	movs	r0, #16
    c374:	4313      	orrs	r3, r2
    c376:	553b      	strb	r3, [r7, r4]
    c378:	ab04      	add	r3, sp, #16
    c37a:	1d59      	adds	r1, r3, #5
    c37c:	4b24      	ldr	r3, [pc, #144]	; (c410 <ExecuteLinkAdr+0x10c>)
    c37e:	4798      	blx	r3
    c380:	2808      	cmp	r0, #8
    c382:	d103      	bne.n	c38c <ExecuteLinkAdr+0x88>
    c384:	2202      	movs	r2, #2
    c386:	5d3b      	ldrb	r3, [r7, r4]
    c388:	4313      	orrs	r3, r2
    c38a:	553b      	strb	r3, [r7, r4]
    c38c:	af05      	add	r7, sp, #20
    c38e:	4b20      	ldr	r3, [pc, #128]	; (c410 <ExecuteLinkAdr+0x10c>)
    c390:	0039      	movs	r1, r7
    c392:	201d      	movs	r0, #29
    c394:	4798      	blx	r3
    c396:	4b1d      	ldr	r3, [pc, #116]	; (c40c <ExecuteLinkAdr+0x108>)
    c398:	2808      	cmp	r0, #8
    c39a:	d103      	bne.n	c3a4 <ExecuteLinkAdr+0xa0>
    c39c:	2204      	movs	r2, #4
    c39e:	5d19      	ldrb	r1, [r3, r4]
    c3a0:	430a      	orrs	r2, r1
    c3a2:	551a      	strb	r2, [r3, r4]
    c3a4:	2207      	movs	r2, #7
    c3a6:	5d19      	ldrb	r1, [r3, r4]
    c3a8:	4011      	ands	r1, r2
    c3aa:	4291      	cmp	r1, r2
    c3ac:	d122      	bne.n	c3f4 <ExecuteLinkAdr+0xf0>
    c3ae:	22dc      	movs	r2, #220	; 0xdc
    c3b0:	32ff      	adds	r2, #255	; 0xff
    c3b2:	549e      	strb	r6, [r3, r2]
    c3b4:	001a      	movs	r2, r3
    c3b6:	32dc      	adds	r2, #220	; 0xdc
    c3b8:	32ff      	adds	r2, #255	; 0xff
    c3ba:	0a36      	lsrs	r6, r6, #8
    c3bc:	7056      	strb	r6, [r2, #1]
    c3be:	aa04      	add	r2, sp, #16
    c3c0:	7950      	ldrb	r0, [r2, #5]
    c3c2:	22ec      	movs	r2, #236	; 0xec
    c3c4:	0052      	lsls	r2, r2, #1
    c3c6:	5498      	strb	r0, [r3, r2]
    c3c8:	20de      	movs	r0, #222	; 0xde
    c3ca:	2470      	movs	r4, #112	; 0x70
    c3cc:	78ea      	ldrb	r2, [r5, #3]
    c3ce:	30ff      	adds	r0, #255	; 0xff
    c3d0:	0912      	lsrs	r2, r2, #4
    c3d2:	400a      	ands	r2, r1
    c3d4:	5c19      	ldrb	r1, [r3, r0]
    c3d6:	0112      	lsls	r2, r2, #4
    c3d8:	43a1      	bics	r1, r4
    c3da:	430a      	orrs	r2, r1
    c3dc:	541a      	strb	r2, [r3, r0]
    c3de:	78e9      	ldrb	r1, [r5, #3]
    c3e0:	3c61      	subs	r4, #97	; 0x61
    c3e2:	b2d2      	uxtb	r2, r2
    c3e4:	4021      	ands	r1, r4
    c3e6:	43a2      	bics	r2, r4
    c3e8:	430a      	orrs	r2, r1
    c3ea:	541a      	strb	r2, [r3, r0]
    c3ec:	22da      	movs	r2, #218	; 0xda
    c3ee:	7839      	ldrb	r1, [r7, #0]
    c3f0:	32ff      	adds	r2, #255	; 0xff
    c3f2:	5499      	strb	r1, [r3, r2]
    c3f4:	22ed      	movs	r2, #237	; 0xed
    c3f6:	4905      	ldr	r1, [pc, #20]	; (c40c <ExecuteLinkAdr+0x108>)
    c3f8:	0052      	lsls	r2, r2, #1
    c3fa:	5c8b      	ldrb	r3, [r1, r2]
    c3fc:	9803      	ldr	r0, [sp, #12]
    c3fe:	3301      	adds	r3, #1
    c400:	548b      	strb	r3, [r1, r2]
    c402:	b009      	add	sp, #36	; 0x24
    c404:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c406:	46c0      	nop			; (mov r8, r8)
    c408:	00014ecd 	.word	0x00014ecd
    c40c:	200017bc 	.word	0x200017bc
    c410:	00008c15 	.word	0x00008c15
    c414:	00008d21 	.word	0x00008d21

0000c418 <PrepareJoinRequestFrame>:
    c418:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    c41a:	2210      	movs	r2, #16
    c41c:	4d23      	ldr	r5, [pc, #140]	; (c4ac <PrepareJoinRequestFrame+0x94>)
    c41e:	4b24      	ldr	r3, [pc, #144]	; (c4b0 <PrepareJoinRequestFrame+0x98>)
    c420:	32ff      	adds	r2, #255	; 0xff
    c422:	2100      	movs	r1, #0
    c424:	0028      	movs	r0, r5
    c426:	4798      	blx	r3
    c428:	2300      	movs	r3, #0
    c42a:	702b      	strb	r3, [r5, #0]
    c42c:	23e2      	movs	r3, #226	; 0xe2
    c42e:	4c21      	ldr	r4, [pc, #132]	; (c4b4 <PrepareJoinRequestFrame+0x9c>)
    c430:	33ff      	adds	r3, #255	; 0xff
    c432:	5ce3      	ldrb	r3, [r4, r3]
    c434:	2b00      	cmp	r3, #0
    c436:	d006      	beq.n	c446 <PrepareJoinRequestFrame+0x2e>
    c438:	491f      	ldr	r1, [pc, #124]	; (c4b8 <PrepareJoinRequestFrame+0xa0>)
    c43a:	2006      	movs	r0, #6
    c43c:	4e1f      	ldr	r6, [pc, #124]	; (c4bc <PrepareJoinRequestFrame+0xa4>)
    c43e:	47b0      	blx	r6
    c440:	491f      	ldr	r1, [pc, #124]	; (c4c0 <PrepareJoinRequestFrame+0xa8>)
    c442:	2007      	movs	r0, #7
    c444:	47b0      	blx	r6
    c446:	2300      	movs	r3, #0
    c448:	205c      	movs	r0, #92	; 0x5c
    c44a:	1ac1      	subs	r1, r0, r3
    c44c:	5c61      	ldrb	r1, [r4, r1]
    c44e:	18ea      	adds	r2, r5, r3
    c450:	3301      	adds	r3, #1
    c452:	7051      	strb	r1, [r2, #1]
    c454:	2b08      	cmp	r3, #8
    c456:	d1f8      	bne.n	c44a <PrepareJoinRequestFrame+0x32>
    c458:	2300      	movs	r3, #0
    c45a:	2064      	movs	r0, #100	; 0x64
    c45c:	1ac1      	subs	r1, r0, r3
    c45e:	5c61      	ldrb	r1, [r4, r1]
    c460:	18ea      	adds	r2, r5, r3
    c462:	3301      	adds	r3, #1
    c464:	7251      	strb	r1, [r2, #9]
    c466:	2b08      	cmp	r3, #8
    c468:	d1f8      	bne.n	c45c <PrepareJoinRequestFrame+0x44>
    c46a:	4b16      	ldr	r3, [pc, #88]	; (c4c4 <PrepareJoinRequestFrame+0xac>)
    c46c:	4798      	blx	r3
    c46e:	4b16      	ldr	r3, [pc, #88]	; (c4c8 <PrepareJoinRequestFrame+0xb0>)
    c470:	4916      	ldr	r1, [pc, #88]	; (c4cc <PrepareJoinRequestFrame+0xb4>)
    c472:	4798      	blx	r3
    c474:	34c4      	adds	r4, #196	; 0xc4
    c476:	8021      	strh	r1, [r4, #0]
    c478:	2202      	movs	r2, #2
    c47a:	0021      	movs	r1, r4
    c47c:	4814      	ldr	r0, [pc, #80]	; (c4d0 <PrepareJoinRequestFrame+0xb8>)
    c47e:	4c15      	ldr	r4, [pc, #84]	; (c4d4 <PrepareJoinRequestFrame+0xbc>)
    c480:	47a0      	blx	r4
    c482:	2313      	movs	r3, #19
    c484:	4e14      	ldr	r6, [pc, #80]	; (c4d8 <PrepareJoinRequestFrame+0xc0>)
    c486:	9300      	str	r3, [sp, #0]
    c488:	0032      	movs	r2, r6
    c48a:	002b      	movs	r3, r5
    c48c:	2100      	movs	r1, #0
    c48e:	4d13      	ldr	r5, [pc, #76]	; (c4dc <PrepareJoinRequestFrame+0xc4>)
    c490:	4813      	ldr	r0, [pc, #76]	; (c4e0 <PrepareJoinRequestFrame+0xc8>)
    c492:	47a8      	blx	r5
    c494:	0031      	movs	r1, r6
    c496:	2204      	movs	r2, #4
    c498:	a803      	add	r0, sp, #12
    c49a:	47a0      	blx	r4
    c49c:	2204      	movs	r2, #4
    c49e:	a903      	add	r1, sp, #12
    c4a0:	4810      	ldr	r0, [pc, #64]	; (c4e4 <PrepareJoinRequestFrame+0xcc>)
    c4a2:	47a0      	blx	r4
    c4a4:	2017      	movs	r0, #23
    c4a6:	b004      	add	sp, #16
    c4a8:	bd70      	pop	{r4, r5, r6, pc}
    c4aa:	46c0      	nop			; (mov r8, r8)
    c4ac:	200019a1 	.word	0x200019a1
    c4b0:	00014f51 	.word	0x00014f51
    c4b4:	200017bc 	.word	0x200017bc
    c4b8:	20001811 	.word	0x20001811
    c4bc:	00008f01 	.word	0x00008f01
    c4c0:	20001819 	.word	0x20001819
    c4c4:	000150f1 	.word	0x000150f1
    c4c8:	00011a49 	.word	0x00011a49
    c4cc:	0000ffff 	.word	0x0000ffff
    c4d0:	200019b2 	.word	0x200019b2
    c4d4:	00014ecd 	.word	0x00014ecd
    c4d8:	20000e90 	.word	0x20000e90
    c4dc:	00008f05 	.word	0x00008f05
    c4e0:	20001801 	.word	0x20001801
    c4e4:	200019b4 	.word	0x200019b4

0000c4e8 <ConfigureRadioRx>:
    c4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c4ea:	b087      	sub	sp, #28
    c4ec:	466b      	mov	r3, sp
    c4ee:	2600      	movs	r6, #0
    c4f0:	1ddc      	adds	r4, r3, #7
    c4f2:	71d8      	strb	r0, [r3, #7]
    c4f4:	729e      	strb	r6, [r3, #10]
    c4f6:	466a      	mov	r2, sp
    c4f8:	2301      	movs	r3, #1
    c4fa:	72d3      	strb	r3, [r2, #11]
    c4fc:	2215      	movs	r2, #21
    c4fe:	ad03      	add	r5, sp, #12
    c500:	4f11      	ldr	r7, [pc, #68]	; (c548 <ConfigureRadioRx+0x60>)
    c502:	9100      	str	r1, [sp, #0]
    c504:	446a      	add	r2, sp
    c506:	0021      	movs	r1, r4
    c508:	2023      	movs	r0, #35	; 0x23
    c50a:	80ae      	strh	r6, [r5, #4]
    c50c:	47b8      	blx	r7
    c50e:	2216      	movs	r2, #22
    c510:	0021      	movs	r1, r4
    c512:	446a      	add	r2, sp
    c514:	2024      	movs	r0, #36	; 0x24
    c516:	47b8      	blx	r7
    c518:	2217      	movs	r2, #23
    c51a:	0021      	movs	r1, r4
    c51c:	446a      	add	r2, sp
    c51e:	2025      	movs	r0, #37	; 0x25
    c520:	47b8      	blx	r7
    c522:	9b00      	ldr	r3, [sp, #0]
    c524:	0028      	movs	r0, r5
    c526:	9303      	str	r3, [sp, #12]
    c528:	4b08      	ldr	r3, [pc, #32]	; (c54c <ConfigureRadioRx+0x64>)
    c52a:	80ae      	strh	r6, [r5, #4]
    c52c:	4798      	blx	r3
    c52e:	230a      	movs	r3, #10
    c530:	446b      	add	r3, sp
    c532:	0019      	movs	r1, r3
    c534:	4c06      	ldr	r4, [pc, #24]	; (c550 <ConfigureRadioRx+0x68>)
    c536:	2014      	movs	r0, #20
    c538:	47a0      	blx	r4
    c53a:	230b      	movs	r3, #11
    c53c:	446b      	add	r3, sp
    c53e:	0019      	movs	r1, r3
    c540:	2006      	movs	r0, #6
    c542:	47a0      	blx	r4
    c544:	b007      	add	sp, #28
    c546:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c548:	00008bf9 	.word	0x00008bf9
    c54c:	0000baa1 	.word	0x0000baa1
    c550:	0000fd4d 	.word	0x0000fd4d

0000c554 <LorawanReceiveWindow1Callback>:
    c554:	b537      	push	{r0, r1, r2, r4, r5, lr}
    c556:	4c18      	ldr	r4, [pc, #96]	; (c5b8 <LorawanReceiveWindow1Callback+0x64>)
    c558:	0023      	movs	r3, r4
    c55a:	337c      	adds	r3, #124	; 0x7c
    c55c:	781b      	ldrb	r3, [r3, #0]
    c55e:	b25a      	sxtb	r2, r3
    c560:	2a00      	cmp	r2, #0
    c562:	db28      	blt.n	c5b6 <LorawanReceiveWindow1Callback+0x62>
    c564:	0022      	movs	r2, r4
    c566:	32f4      	adds	r2, #244	; 0xf4
    c568:	7812      	ldrb	r2, [r2, #0]
    c56a:	2a04      	cmp	r2, #4
    c56c:	d103      	bne.n	c576 <LorawanReceiveWindow1Callback+0x22>
    c56e:	07db      	lsls	r3, r3, #31
    c570:	d501      	bpl.n	c576 <LorawanReceiveWindow1Callback+0x22>
    c572:	4b12      	ldr	r3, [pc, #72]	; (c5bc <LorawanReceiveWindow1Callback+0x68>)
    c574:	4798      	blx	r3
    c576:	0021      	movs	r1, r4
    c578:	220e      	movs	r2, #14
    c57a:	317c      	adds	r1, #124	; 0x7c
    c57c:	780b      	ldrb	r3, [r1, #0]
    c57e:	ad01      	add	r5, sp, #4
    c580:	4393      	bics	r3, r2
    c582:	001a      	movs	r2, r3
    c584:	2306      	movs	r3, #6
    c586:	4313      	orrs	r3, r2
    c588:	0022      	movs	r2, r4
    c58a:	700b      	strb	r3, [r1, #0]
    c58c:	3268      	adds	r2, #104	; 0x68
    c58e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    c590:	7811      	ldrb	r1, [r2, #0]
    c592:	0a1b      	lsrs	r3, r3, #8
    c594:	3469      	adds	r4, #105	; 0x69
    c596:	0609      	lsls	r1, r1, #24
    c598:	4319      	orrs	r1, r3
    c59a:	7820      	ldrb	r0, [r4, #0]
    c59c:	4b08      	ldr	r3, [pc, #32]	; (c5c0 <LorawanReceiveWindow1Callback+0x6c>)
    c59e:	4798      	blx	r3
    c5a0:	2300      	movs	r3, #0
    c5a2:	702b      	strb	r3, [r5, #0]
    c5a4:	466b      	mov	r3, sp
    c5a6:	0021      	movs	r1, r4
    c5a8:	1d9a      	adds	r2, r3, #6
    c5aa:	2003      	movs	r0, #3
    c5ac:	4b05      	ldr	r3, [pc, #20]	; (c5c4 <LorawanReceiveWindow1Callback+0x70>)
    c5ae:	4798      	blx	r3
    c5b0:	0028      	movs	r0, r5
    c5b2:	4b05      	ldr	r3, [pc, #20]	; (c5c8 <LorawanReceiveWindow1Callback+0x74>)
    c5b4:	4798      	blx	r3
    c5b6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    c5b8:	200017bc 	.word	0x200017bc
    c5bc:	0000f481 	.word	0x0000f481
    c5c0:	0000c4e9 	.word	0x0000c4e9
    c5c4:	00008bf9 	.word	0x00008bf9
    c5c8:	00010f71 	.word	0x00010f71

0000c5cc <ConfigureRadioTx>:
    c5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    c5ce:	2517      	movs	r5, #23
    c5d0:	2300      	movs	r3, #0
    c5d2:	2616      	movs	r6, #22
    c5d4:	2701      	movs	r7, #1
    c5d6:	b087      	sub	sp, #28
    c5d8:	ac01      	add	r4, sp, #4
    c5da:	446d      	add	r5, sp
    c5dc:	9001      	str	r0, [sp, #4]
    c5de:	702b      	strb	r3, [r5, #0]
    c5e0:	0020      	movs	r0, r4
    c5e2:	4b10      	ldr	r3, [pc, #64]	; (c624 <ConfigureRadioTx+0x58>)
    c5e4:	446e      	add	r6, sp
    c5e6:	9102      	str	r1, [sp, #8]
    c5e8:	9203      	str	r2, [sp, #12]
    c5ea:	7037      	strb	r7, [r6, #0]
    c5ec:	4798      	blx	r3
    c5ee:	79e3      	ldrb	r3, [r4, #7]
    c5f0:	4c0d      	ldr	r4, [pc, #52]	; (c628 <ConfigureRadioTx+0x5c>)
    c5f2:	2b00      	cmp	r3, #0
    c5f4:	d00b      	beq.n	c60e <ConfigureRadioTx+0x42>
    c5f6:	23eb      	movs	r3, #235	; 0xeb
    c5f8:	4a0c      	ldr	r2, [pc, #48]	; (c62c <ConfigureRadioTx+0x60>)
    c5fa:	005b      	lsls	r3, r3, #1
    c5fc:	54d7      	strb	r7, [r2, r3]
    c5fe:	490c      	ldr	r1, [pc, #48]	; (c630 <ConfigureRadioTx+0x64>)
    c600:	200b      	movs	r0, #11
    c602:	4b0c      	ldr	r3, [pc, #48]	; (c634 <ConfigureRadioTx+0x68>)
    c604:	4798      	blx	r3
    c606:	210a      	movs	r1, #10
    c608:	200b      	movs	r0, #11
    c60a:	4469      	add	r1, sp
    c60c:	47a0      	blx	r4
    c60e:	a903      	add	r1, sp, #12
    c610:	2004      	movs	r0, #4
    c612:	47a0      	blx	r4
    c614:	0031      	movs	r1, r6
    c616:	2014      	movs	r0, #20
    c618:	47a0      	blx	r4
    c61a:	0029      	movs	r1, r5
    c61c:	2006      	movs	r0, #6
    c61e:	47a0      	blx	r4
    c620:	b007      	add	sp, #28
    c622:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c624:	0000baa1 	.word	0x0000baa1
    c628:	0000fd4d 	.word	0x0000fd4d
    c62c:	200017bc 	.word	0x200017bc
    c630:	20001991 	.word	0x20001991
    c634:	0000fc5d 	.word	0x0000fc5d

0000c638 <LorawanGetChAndInitiateRadioTransmit>:
    c638:	2301      	movs	r3, #1
    c63a:	b530      	push	{r4, r5, lr}
    c63c:	4c46      	ldr	r4, [pc, #280]	; (c758 <LorawanGetChAndInitiateRadioTransmit+0x120>)
    c63e:	b089      	sub	sp, #36	; 0x24
    c640:	a902      	add	r1, sp, #8
    c642:	700b      	strb	r3, [r1, #0]
    c644:	0023      	movs	r3, r4
    c646:	33e1      	adds	r3, #225	; 0xe1
    c648:	781b      	ldrb	r3, [r3, #0]
    c64a:	704b      	strb	r3, [r1, #1]
    c64c:	0023      	movs	r3, r4
    c64e:	33df      	adds	r3, #223	; 0xdf
    c650:	781b      	ldrb	r3, [r3, #0]
    c652:	708b      	strb	r3, [r1, #2]
    c654:	0023      	movs	r3, r4
    c656:	33f4      	adds	r3, #244	; 0xf4
    c658:	781b      	ldrb	r3, [r3, #0]
    c65a:	2b01      	cmp	r3, #1
    c65c:	d108      	bne.n	c670 <LorawanGetChAndInitiateRadioTransmit+0x38>
    c65e:	0020      	movs	r0, r4
    c660:	220e      	movs	r2, #14
    c662:	307c      	adds	r0, #124	; 0x7c
    c664:	7803      	ldrb	r3, [r0, #0]
    c666:	4393      	bics	r3, r2
    c668:	001a      	movs	r2, r3
    c66a:	230c      	movs	r3, #12
    c66c:	4313      	orrs	r3, r2
    c66e:	7003      	strb	r3, [r0, #0]
    c670:	aa05      	add	r2, sp, #20
    c672:	202f      	movs	r0, #47	; 0x2f
    c674:	4d39      	ldr	r5, [pc, #228]	; (c75c <LorawanGetChAndInitiateRadioTransmit+0x124>)
    c676:	47a8      	blx	r5
    c678:	0023      	movs	r3, r4
    c67a:	2808      	cmp	r0, #8
    c67c:	d132      	bne.n	c6e4 <LorawanGetChAndInitiateRadioTransmit+0xac>
    c67e:	33f4      	adds	r3, #244	; 0xf4
    c680:	781b      	ldrb	r3, [r3, #0]
    c682:	ad03      	add	r5, sp, #12
    c684:	2b04      	cmp	r3, #4
    c686:	d104      	bne.n	c692 <LorawanGetChAndInitiateRadioTransmit+0x5a>
    c688:	3b03      	subs	r3, #3
    c68a:	702b      	strb	r3, [r5, #0]
    c68c:	0028      	movs	r0, r5
    c68e:	4b34      	ldr	r3, [pc, #208]	; (c760 <LorawanGetChAndInitiateRadioTransmit+0x128>)
    c690:	4798      	blx	r3
    c692:	9805      	ldr	r0, [sp, #20]
    c694:	4b33      	ldr	r3, [pc, #204]	; (c764 <LorawanGetChAndInitiateRadioTransmit+0x12c>)
    c696:	9906      	ldr	r1, [sp, #24]
    c698:	9a07      	ldr	r2, [sp, #28]
    c69a:	4798      	blx	r3
    c69c:	0023      	movs	r3, r4
    c69e:	33c6      	adds	r3, #198	; 0xc6
    c6a0:	881b      	ldrh	r3, [r3, #0]
    c6a2:	0028      	movs	r0, r5
    c6a4:	702b      	strb	r3, [r5, #0]
    c6a6:	4b30      	ldr	r3, [pc, #192]	; (c768 <LorawanGetChAndInitiateRadioTransmit+0x130>)
    c6a8:	606b      	str	r3, [r5, #4]
    c6aa:	4b30      	ldr	r3, [pc, #192]	; (c76c <LorawanGetChAndInitiateRadioTransmit+0x134>)
    c6ac:	4798      	blx	r3
    c6ae:	2800      	cmp	r0, #0
    c6b0:	d109      	bne.n	c6c6 <LorawanGetChAndInitiateRadioTransmit+0x8e>
    c6b2:	220e      	movs	r2, #14
    c6b4:	347c      	adds	r4, #124	; 0x7c
    c6b6:	7823      	ldrb	r3, [r4, #0]
    c6b8:	4393      	bics	r3, r2
    c6ba:	001a      	movs	r2, r3
    c6bc:	2302      	movs	r3, #2
    c6be:	4313      	orrs	r3, r2
    c6c0:	7023      	strb	r3, [r4, #0]
    c6c2:	b009      	add	sp, #36	; 0x24
    c6c4:	bd30      	pop	{r4, r5, pc}
    c6c6:	23e0      	movs	r3, #224	; 0xe0
    c6c8:	2200      	movs	r2, #0
    c6ca:	33ff      	adds	r3, #255	; 0xff
    c6cc:	5ce3      	ldrb	r3, [r4, r3]
    c6ce:	4928      	ldr	r1, [pc, #160]	; (c770 <LorawanGetChAndInitiateRadioTransmit+0x138>)
    c6d0:	34f3      	adds	r4, #243	; 0xf3
    c6d2:	4359      	muls	r1, r3
    c6d4:	4b27      	ldr	r3, [pc, #156]	; (c774 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
    c6d6:	7820      	ldrb	r0, [r4, #0]
    c6d8:	18c9      	adds	r1, r1, r3
    c6da:	4b27      	ldr	r3, [pc, #156]	; (c778 <LorawanGetChAndInitiateRadioTransmit+0x140>)
    c6dc:	9200      	str	r2, [sp, #0]
    c6de:	4c27      	ldr	r4, [pc, #156]	; (c77c <LorawanGetChAndInitiateRadioTransmit+0x144>)
    c6e0:	47a0      	blx	r4
    c6e2:	e7ee      	b.n	c6c2 <LorawanGetChAndInitiateRadioTransmit+0x8a>
    c6e4:	33ff      	adds	r3, #255	; 0xff
    c6e6:	7c5b      	ldrb	r3, [r3, #17]
    c6e8:	079a      	lsls	r2, r3, #30
    c6ea:	d516      	bpl.n	c71a <LorawanGetChAndInitiateRadioTransmit+0xe2>
    c6ec:	aa03      	add	r2, sp, #12
    c6ee:	4924      	ldr	r1, [pc, #144]	; (c780 <LorawanGetChAndInitiateRadioTransmit+0x148>)
    c6f0:	2026      	movs	r0, #38	; 0x26
    c6f2:	47a8      	blx	r5
    c6f4:	9b03      	ldr	r3, [sp, #12]
    c6f6:	1c5a      	adds	r2, r3, #1
    c6f8:	d001      	beq.n	c6fe <LorawanGetChAndInitiateRadioTransmit+0xc6>
    c6fa:	3314      	adds	r3, #20
    c6fc:	9303      	str	r3, [sp, #12]
    c6fe:	23e0      	movs	r3, #224	; 0xe0
    c700:	21fa      	movs	r1, #250	; 0xfa
    c702:	33ff      	adds	r3, #255	; 0xff
    c704:	5ce3      	ldrb	r3, [r4, r3]
    c706:	9a03      	ldr	r2, [sp, #12]
    c708:	0089      	lsls	r1, r1, #2
    c70a:	1ad3      	subs	r3, r2, r3
    c70c:	2200      	movs	r2, #0
    c70e:	4359      	muls	r1, r3
    c710:	34e9      	adds	r4, #233	; 0xe9
    c712:	7820      	ldrb	r0, [r4, #0]
    c714:	9200      	str	r2, [sp, #0]
    c716:	4b1b      	ldr	r3, [pc, #108]	; (c784 <LorawanGetChAndInitiateRadioTransmit+0x14c>)
    c718:	e7e1      	b.n	c6de <LorawanGetChAndInitiateRadioTransmit+0xa6>
    c71a:	075b      	lsls	r3, r3, #29
    c71c:	d508      	bpl.n	c730 <LorawanGetChAndInitiateRadioTransmit+0xf8>
    c71e:	aa03      	add	r2, sp, #12
    c720:	4917      	ldr	r1, [pc, #92]	; (c780 <LorawanGetChAndInitiateRadioTransmit+0x148>)
    c722:	2033      	movs	r0, #51	; 0x33
    c724:	47a8      	blx	r5
    c726:	9b03      	ldr	r3, [sp, #12]
    c728:	1c5a      	adds	r2, r3, #1
    c72a:	d0e8      	beq.n	c6fe <LorawanGetChAndInitiateRadioTransmit+0xc6>
    c72c:	3301      	adds	r3, #1
    c72e:	e7e5      	b.n	c6fc <LorawanGetChAndInitiateRadioTransmit+0xc4>
    c730:	0023      	movs	r3, r4
    c732:	2201      	movs	r2, #1
    c734:	338c      	adds	r3, #140	; 0x8c
    c736:	781b      	ldrb	r3, [r3, #0]
    c738:	401a      	ands	r2, r3
    c73a:	d109      	bne.n	c750 <LorawanGetChAndInitiateRadioTransmit+0x118>
    c73c:	23e0      	movs	r3, #224	; 0xe0
    c73e:	33ff      	adds	r3, #255	; 0xff
    c740:	5ce3      	ldrb	r3, [r4, r3]
    c742:	490b      	ldr	r1, [pc, #44]	; (c770 <LorawanGetChAndInitiateRadioTransmit+0x138>)
    c744:	34e9      	adds	r4, #233	; 0xe9
    c746:	4359      	muls	r1, r3
    c748:	4b0a      	ldr	r3, [pc, #40]	; (c774 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
    c74a:	7820      	ldrb	r0, [r4, #0]
    c74c:	18c9      	adds	r1, r1, r3
    c74e:	e7e1      	b.n	c714 <LorawanGetChAndInitiateRadioTransmit+0xdc>
    c750:	4b0d      	ldr	r3, [pc, #52]	; (c788 <LorawanGetChAndInitiateRadioTransmit+0x150>)
    c752:	4798      	blx	r3
    c754:	e7b5      	b.n	c6c2 <LorawanGetChAndInitiateRadioTransmit+0x8a>
    c756:	46c0      	nop			; (mov r8, r8)
    c758:	200017bc 	.word	0x200017bc
    c75c:	00008bf9 	.word	0x00008bf9
    c760:	00010f71 	.word	0x00010f71
    c764:	0000c5cd 	.word	0x0000c5cd
    c768:	200019b1 	.word	0x200019b1
    c76c:	0001069d 	.word	0x0001069d
    c770:	fffffc18 	.word	0xfffffc18
    c774:	001e8480 	.word	0x001e8480
    c778:	0000c78d 	.word	0x0000c78d
    c77c:	00009609 	.word	0x00009609
    c780:	2000189b 	.word	0x2000189b
    c784:	0000c841 	.word	0x0000c841
    c788:	0000bfa1 	.word	0x0000bfa1

0000c78c <TransmissionErrorCallback>:
    c78c:	b530      	push	{r4, r5, lr}
    c78e:	4c22      	ldr	r4, [pc, #136]	; (c818 <TransmissionErrorCallback+0x8c>)
    c790:	2501      	movs	r5, #1
    c792:	0023      	movs	r3, r4
    c794:	b08b      	sub	sp, #44	; 0x2c
    c796:	a903      	add	r1, sp, #12
    c798:	700d      	strb	r5, [r1, #0]
    c79a:	33e1      	adds	r3, #225	; 0xe1
    c79c:	781b      	ldrb	r3, [r3, #0]
    c79e:	aa07      	add	r2, sp, #28
    c7a0:	704b      	strb	r3, [r1, #1]
    c7a2:	0023      	movs	r3, r4
    c7a4:	33df      	adds	r3, #223	; 0xdf
    c7a6:	781b      	ldrb	r3, [r3, #0]
    c7a8:	202f      	movs	r0, #47	; 0x2f
    c7aa:	708b      	strb	r3, [r1, #2]
    c7ac:	4b1b      	ldr	r3, [pc, #108]	; (c81c <TransmissionErrorCallback+0x90>)
    c7ae:	4798      	blx	r3
    c7b0:	2808      	cmp	r0, #8
    c7b2:	d121      	bne.n	c7f8 <TransmissionErrorCallback+0x6c>
    c7b4:	a804      	add	r0, sp, #16
    c7b6:	4b1a      	ldr	r3, [pc, #104]	; (c820 <TransmissionErrorCallback+0x94>)
    c7b8:	7005      	strb	r5, [r0, #0]
    c7ba:	4798      	blx	r3
    c7bc:	9807      	ldr	r0, [sp, #28]
    c7be:	4b19      	ldr	r3, [pc, #100]	; (c824 <TransmissionErrorCallback+0x98>)
    c7c0:	9908      	ldr	r1, [sp, #32]
    c7c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c7c4:	4798      	blx	r3
    c7c6:	0023      	movs	r3, r4
    c7c8:	33c6      	adds	r3, #198	; 0xc6
    c7ca:	881b      	ldrh	r3, [r3, #0]
    c7cc:	a805      	add	r0, sp, #20
    c7ce:	7003      	strb	r3, [r0, #0]
    c7d0:	4b15      	ldr	r3, [pc, #84]	; (c828 <TransmissionErrorCallback+0x9c>)
    c7d2:	6043      	str	r3, [r0, #4]
    c7d4:	4b15      	ldr	r3, [pc, #84]	; (c82c <TransmissionErrorCallback+0xa0>)
    c7d6:	4798      	blx	r3
    c7d8:	2800      	cmp	r0, #0
    c7da:	d01b      	beq.n	c814 <TransmissionErrorCallback+0x88>
    c7dc:	0023      	movs	r3, r4
    c7de:	33f4      	adds	r3, #244	; 0xf4
    c7e0:	781b      	ldrb	r3, [r3, #0]
    c7e2:	42ab      	cmp	r3, r5
    c7e4:	d108      	bne.n	c7f8 <TransmissionErrorCallback+0x6c>
    c7e6:	0021      	movs	r1, r4
    c7e8:	220e      	movs	r2, #14
    c7ea:	317c      	adds	r1, #124	; 0x7c
    c7ec:	780b      	ldrb	r3, [r1, #0]
    c7ee:	4393      	bics	r3, r2
    c7f0:	001a      	movs	r2, r3
    c7f2:	230c      	movs	r3, #12
    c7f4:	4313      	orrs	r3, r2
    c7f6:	700b      	strb	r3, [r1, #0]
    c7f8:	23e0      	movs	r3, #224	; 0xe0
    c7fa:	2200      	movs	r2, #0
    c7fc:	33ff      	adds	r3, #255	; 0xff
    c7fe:	5ce3      	ldrb	r3, [r4, r3]
    c800:	490b      	ldr	r1, [pc, #44]	; (c830 <TransmissionErrorCallback+0xa4>)
    c802:	34f3      	adds	r4, #243	; 0xf3
    c804:	4359      	muls	r1, r3
    c806:	4b0b      	ldr	r3, [pc, #44]	; (c834 <TransmissionErrorCallback+0xa8>)
    c808:	7820      	ldrb	r0, [r4, #0]
    c80a:	18c9      	adds	r1, r1, r3
    c80c:	9200      	str	r2, [sp, #0]
    c80e:	4b0a      	ldr	r3, [pc, #40]	; (c838 <TransmissionErrorCallback+0xac>)
    c810:	4c0a      	ldr	r4, [pc, #40]	; (c83c <TransmissionErrorCallback+0xb0>)
    c812:	47a0      	blx	r4
    c814:	b00b      	add	sp, #44	; 0x2c
    c816:	bd30      	pop	{r4, r5, pc}
    c818:	200017bc 	.word	0x200017bc
    c81c:	00008bf9 	.word	0x00008bf9
    c820:	00010f71 	.word	0x00010f71
    c824:	0000c5cd 	.word	0x0000c5cd
    c828:	200019b1 	.word	0x200019b1
    c82c:	0001069d 	.word	0x0001069d
    c830:	fffffc18 	.word	0xfffffc18
    c834:	001e8480 	.word	0x001e8480
    c838:	0000c78d 	.word	0x0000c78d
    c83c:	00009609 	.word	0x00009609

0000c840 <UnconfirmedTransmissionCallback>:
    c840:	b5f0      	push	{r4, r5, r6, r7, lr}
    c842:	4c38      	ldr	r4, [pc, #224]	; (c924 <UnconfirmedTransmissionCallback+0xe4>)
    c844:	b08b      	sub	sp, #44	; 0x2c
    c846:	0023      	movs	r3, r4
    c848:	33c6      	adds	r3, #198	; 0xc6
    c84a:	881b      	ldrh	r3, [r3, #0]
    c84c:	af05      	add	r7, sp, #20
    c84e:	703b      	strb	r3, [r7, #0]
    c850:	4b35      	ldr	r3, [pc, #212]	; (c928 <UnconfirmedTransmissionCallback+0xe8>)
    c852:	a903      	add	r1, sp, #12
    c854:	9306      	str	r3, [sp, #24]
    c856:	2301      	movs	r3, #1
    c858:	700b      	strb	r3, [r1, #0]
    c85a:	0023      	movs	r3, r4
    c85c:	0026      	movs	r6, r4
    c85e:	33e1      	adds	r3, #225	; 0xe1
    c860:	781b      	ldrb	r3, [r3, #0]
    c862:	36df      	adds	r6, #223	; 0xdf
    c864:	704b      	strb	r3, [r1, #1]
    c866:	7833      	ldrb	r3, [r6, #0]
    c868:	aa07      	add	r2, sp, #28
    c86a:	202f      	movs	r0, #47	; 0x2f
    c86c:	4d2f      	ldr	r5, [pc, #188]	; (c92c <UnconfirmedTransmissionCallback+0xec>)
    c86e:	708b      	strb	r3, [r1, #2]
    c870:	47a8      	blx	r5
    c872:	2808      	cmp	r0, #8
    c874:	d12c      	bne.n	c8d0 <UnconfirmedTransmissionCallback+0x90>
    c876:	2301      	movs	r3, #1
    c878:	a804      	add	r0, sp, #16
    c87a:	7003      	strb	r3, [r0, #0]
    c87c:	4b2c      	ldr	r3, [pc, #176]	; (c930 <UnconfirmedTransmissionCallback+0xf0>)
    c87e:	4798      	blx	r3
    c880:	9807      	ldr	r0, [sp, #28]
    c882:	4b2c      	ldr	r3, [pc, #176]	; (c934 <UnconfirmedTransmissionCallback+0xf4>)
    c884:	9908      	ldr	r1, [sp, #32]
    c886:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c888:	4798      	blx	r3
    c88a:	0038      	movs	r0, r7
    c88c:	4b2a      	ldr	r3, [pc, #168]	; (c938 <UnconfirmedTransmissionCallback+0xf8>)
    c88e:	4798      	blx	r3
    c890:	2800      	cmp	r0, #0
    c892:	d01b      	beq.n	c8cc <UnconfirmedTransmissionCallback+0x8c>
    c894:	0023      	movs	r3, r4
    c896:	33f4      	adds	r3, #244	; 0xf4
    c898:	781b      	ldrb	r3, [r3, #0]
    c89a:	2b01      	cmp	r3, #1
    c89c:	d108      	bne.n	c8b0 <UnconfirmedTransmissionCallback+0x70>
    c89e:	0021      	movs	r1, r4
    c8a0:	220e      	movs	r2, #14
    c8a2:	317c      	adds	r1, #124	; 0x7c
    c8a4:	780b      	ldrb	r3, [r1, #0]
    c8a6:	4393      	bics	r3, r2
    c8a8:	001a      	movs	r2, r3
    c8aa:	230c      	movs	r3, #12
    c8ac:	4313      	orrs	r3, r2
    c8ae:	700b      	strb	r3, [r1, #0]
    c8b0:	23e0      	movs	r3, #224	; 0xe0
    c8b2:	2200      	movs	r2, #0
    c8b4:	33ff      	adds	r3, #255	; 0xff
    c8b6:	5ce3      	ldrb	r3, [r4, r3]
    c8b8:	4920      	ldr	r1, [pc, #128]	; (c93c <UnconfirmedTransmissionCallback+0xfc>)
    c8ba:	34f3      	adds	r4, #243	; 0xf3
    c8bc:	4359      	muls	r1, r3
    c8be:	4b20      	ldr	r3, [pc, #128]	; (c940 <UnconfirmedTransmissionCallback+0x100>)
    c8c0:	7820      	ldrb	r0, [r4, #0]
    c8c2:	18c9      	adds	r1, r1, r3
    c8c4:	4b1f      	ldr	r3, [pc, #124]	; (c944 <UnconfirmedTransmissionCallback+0x104>)
    c8c6:	9200      	str	r2, [sp, #0]
    c8c8:	4c1f      	ldr	r4, [pc, #124]	; (c948 <UnconfirmedTransmissionCallback+0x108>)
    c8ca:	47a0      	blx	r4
    c8cc:	b00b      	add	sp, #44	; 0x2c
    c8ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c8d0:	23fa      	movs	r3, #250	; 0xfa
    c8d2:	00db      	lsls	r3, r3, #3
    c8d4:	9304      	str	r3, [sp, #16]
    c8d6:	0023      	movs	r3, r4
    c8d8:	33ff      	adds	r3, #255	; 0xff
    c8da:	7c5b      	ldrb	r3, [r3, #17]
    c8dc:	079a      	lsls	r2, r3, #30
    c8de:	d516      	bpl.n	c90e <UnconfirmedTransmissionCallback+0xce>
    c8e0:	aa04      	add	r2, sp, #16
    c8e2:	0031      	movs	r1, r6
    c8e4:	2026      	movs	r0, #38	; 0x26
    c8e6:	47a8      	blx	r5
    c8e8:	9b04      	ldr	r3, [sp, #16]
    c8ea:	1c5a      	adds	r2, r3, #1
    c8ec:	d001      	beq.n	c8f2 <UnconfirmedTransmissionCallback+0xb2>
    c8ee:	3314      	adds	r3, #20
    c8f0:	9304      	str	r3, [sp, #16]
    c8f2:	23e0      	movs	r3, #224	; 0xe0
    c8f4:	33ff      	adds	r3, #255	; 0xff
    c8f6:	5ce3      	ldrb	r3, [r4, r3]
    c8f8:	9a04      	ldr	r2, [sp, #16]
    c8fa:	21fa      	movs	r1, #250	; 0xfa
    c8fc:	1ad3      	subs	r3, r2, r3
    c8fe:	2200      	movs	r2, #0
    c900:	0089      	lsls	r1, r1, #2
    c902:	34e9      	adds	r4, #233	; 0xe9
    c904:	4359      	muls	r1, r3
    c906:	7820      	ldrb	r0, [r4, #0]
    c908:	4b10      	ldr	r3, [pc, #64]	; (c94c <UnconfirmedTransmissionCallback+0x10c>)
    c90a:	9200      	str	r2, [sp, #0]
    c90c:	e7dc      	b.n	c8c8 <UnconfirmedTransmissionCallback+0x88>
    c90e:	075b      	lsls	r3, r3, #29
    c910:	d5ef      	bpl.n	c8f2 <UnconfirmedTransmissionCallback+0xb2>
    c912:	aa04      	add	r2, sp, #16
    c914:	0031      	movs	r1, r6
    c916:	2033      	movs	r0, #51	; 0x33
    c918:	47a8      	blx	r5
    c91a:	9b04      	ldr	r3, [sp, #16]
    c91c:	1c5a      	adds	r2, r3, #1
    c91e:	d0e8      	beq.n	c8f2 <UnconfirmedTransmissionCallback+0xb2>
    c920:	3301      	adds	r3, #1
    c922:	e7e5      	b.n	c8f0 <UnconfirmedTransmissionCallback+0xb0>
    c924:	200017bc 	.word	0x200017bc
    c928:	200019b1 	.word	0x200019b1
    c92c:	00008bf9 	.word	0x00008bf9
    c930:	00010f71 	.word	0x00010f71
    c934:	0000c5cd 	.word	0x0000c5cd
    c938:	0001069d 	.word	0x0001069d
    c93c:	fffffc18 	.word	0xfffffc18
    c940:	001e8480 	.word	0x001e8480
    c944:	0000c78d 	.word	0x0000c78d
    c948:	00009609 	.word	0x00009609
    c94c:	0000c841 	.word	0x0000c841

0000c950 <UpdateJoinInProgress>:
    c950:	b570      	push	{r4, r5, r6, lr}
    c952:	2504      	movs	r5, #4
    c954:	4c0a      	ldr	r4, [pc, #40]	; (c980 <UpdateJoinInProgress+0x30>)
    c956:	0002      	movs	r2, r0
    c958:	0021      	movs	r1, r4
    c95a:	348c      	adds	r4, #140	; 0x8c
    c95c:	7826      	ldrb	r6, [r4, #0]
    c95e:	2001      	movs	r0, #1
    c960:	4335      	orrs	r5, r6
    c962:	7025      	strb	r5, [r4, #0]
    c964:	2407      	movs	r4, #7
    c966:	4022      	ands	r2, r4
    c968:	4082      	lsls	r2, r0
    c96a:	317c      	adds	r1, #124	; 0x7c
    c96c:	780b      	ldrb	r3, [r1, #0]
    c96e:	1924      	adds	r4, r4, r4
    c970:	4383      	bics	r3, r0
    c972:	43a3      	bics	r3, r4
    c974:	4313      	orrs	r3, r2
    c976:	700b      	strb	r3, [r1, #0]
    c978:	210b      	movs	r1, #11
    c97a:	4b02      	ldr	r3, [pc, #8]	; (c984 <UpdateJoinInProgress+0x34>)
    c97c:	4798      	blx	r3
    c97e:	bd70      	pop	{r4, r5, r6, pc}
    c980:	200017bc 	.word	0x200017bc
    c984:	000091e1 	.word	0x000091e1

0000c988 <LORAWAN_Join>:
    c988:	b573      	push	{r0, r1, r4, r5, r6, lr}
    c98a:	4c33      	ldr	r4, [pc, #204]	; (ca58 <LORAWAN_Join+0xd0>)
    c98c:	0006      	movs	r6, r0
    c98e:	0023      	movs	r3, r4
    c990:	337c      	adds	r3, #124	; 0x7c
    c992:	781b      	ldrb	r3, [r3, #0]
    c994:	200f      	movs	r0, #15
    c996:	b25a      	sxtb	r2, r3
    c998:	2a00      	cmp	r2, #0
    c99a:	db4b      	blt.n	ca34 <LORAWAN_Join+0xac>
    c99c:	3803      	subs	r0, #3
    c99e:	065b      	lsls	r3, r3, #25
    c9a0:	d448      	bmi.n	ca34 <LORAWAN_Join+0xac>
    c9a2:	0023      	movs	r3, r4
    c9a4:	338c      	adds	r3, #140	; 0x8c
    c9a6:	781b      	ldrb	r3, [r3, #0]
    c9a8:	3007      	adds	r0, #7
    c9aa:	075b      	lsls	r3, r3, #29
    c9ac:	d442      	bmi.n	ca34 <LORAWAN_Join+0xac>
    c9ae:	0023      	movs	r3, r4
    c9b0:	33f4      	adds	r3, #244	; 0xf4
    c9b2:	781b      	ldrb	r3, [r3, #0]
    c9b4:	2b04      	cmp	r3, #4
    c9b6:	d038      	beq.n	ca2a <LORAWAN_Join+0xa2>
    c9b8:	0023      	movs	r3, r4
    c9ba:	33f4      	adds	r3, #244	; 0xf4
    c9bc:	781b      	ldrb	r3, [r3, #0]
    c9be:	2b01      	cmp	r3, #1
    c9c0:	d105      	bne.n	c9ce <LORAWAN_Join+0x46>
    c9c2:	0023      	movs	r3, r4
    c9c4:	337c      	adds	r3, #124	; 0x7c
    c9c6:	781a      	ldrb	r2, [r3, #0]
    c9c8:	230e      	movs	r3, #14
    c9ca:	421a      	tst	r2, r3
    c9cc:	d131      	bne.n	ca32 <LORAWAN_Join+0xaa>
    c9ce:	2102      	movs	r1, #2
    c9d0:	2001      	movs	r0, #1
    c9d2:	4d22      	ldr	r5, [pc, #136]	; (ca5c <LORAWAN_Join+0xd4>)
    c9d4:	7026      	strb	r6, [r4, #0]
    c9d6:	47a8      	blx	r5
    c9d8:	0023      	movs	r3, r4
    c9da:	33d6      	adds	r3, #214	; 0xd6
    c9dc:	781b      	ldrb	r3, [r3, #0]
    c9de:	2e00      	cmp	r6, #0
    c9e0:	d129      	bne.n	ca36 <LORAWAN_Join+0xae>
    c9e2:	200b      	movs	r0, #11
    c9e4:	4003      	ands	r3, r0
    c9e6:	4283      	cmp	r3, r0
    c9e8:	d004      	beq.n	c9f4 <LORAWAN_Join+0x6c>
    c9ea:	23e2      	movs	r3, #226	; 0xe2
    c9ec:	33ff      	adds	r3, #255	; 0xff
    c9ee:	5ce3      	ldrb	r3, [r4, r3]
    c9f0:	2b00      	cmp	r3, #0
    c9f2:	d01f      	beq.n	ca34 <LORAWAN_Join+0xac>
    c9f4:	0023      	movs	r3, r4
    c9f6:	337c      	adds	r3, #124	; 0x7c
    c9f8:	781b      	ldrb	r3, [r3, #0]
    c9fa:	07db      	lsls	r3, r3, #31
    c9fc:	d503      	bpl.n	ca06 <LORAWAN_Join+0x7e>
    c9fe:	2100      	movs	r1, #0
    ca00:	203b      	movs	r0, #59	; 0x3b
    ca02:	4b17      	ldr	r3, [pc, #92]	; (ca60 <LORAWAN_Join+0xd8>)
    ca04:	4798      	blx	r3
    ca06:	0022      	movs	r2, r4
    ca08:	2001      	movs	r0, #1
    ca0a:	327c      	adds	r2, #124	; 0x7c
    ca0c:	7813      	ldrb	r3, [r2, #0]
    ca0e:	348c      	adds	r4, #140	; 0x8c
    ca10:	4383      	bics	r3, r0
    ca12:	7013      	strb	r3, [r2, #0]
    ca14:	2304      	movs	r3, #4
    ca16:	7822      	ldrb	r2, [r4, #0]
    ca18:	210b      	movs	r1, #11
    ca1a:	4313      	orrs	r3, r2
    ca1c:	7023      	strb	r3, [r4, #0]
    ca1e:	47a8      	blx	r5
    ca20:	2000      	movs	r0, #0
    ca22:	4b10      	ldr	r3, [pc, #64]	; (ca64 <LORAWAN_Join+0xdc>)
    ca24:	4798      	blx	r3
    ca26:	2008      	movs	r0, #8
    ca28:	e004      	b.n	ca34 <LORAWAN_Join+0xac>
    ca2a:	4b0f      	ldr	r3, [pc, #60]	; (ca68 <LORAWAN_Join+0xe0>)
    ca2c:	4798      	blx	r3
    ca2e:	2808      	cmp	r0, #8
    ca30:	d0c2      	beq.n	c9b8 <LORAWAN_Join+0x30>
    ca32:	2011      	movs	r0, #17
    ca34:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    ca36:	2234      	movs	r2, #52	; 0x34
    ca38:	200b      	movs	r0, #11
    ca3a:	4013      	ands	r3, r2
    ca3c:	4293      	cmp	r3, r2
    ca3e:	d1f9      	bne.n	ca34 <LORAWAN_Join+0xac>
    ca40:	3804      	subs	r0, #4
    ca42:	4b0a      	ldr	r3, [pc, #40]	; (ca6c <LORAWAN_Join+0xe4>)
    ca44:	4798      	blx	r3
    ca46:	2200      	movs	r2, #0
    ca48:	34f2      	adds	r4, #242	; 0xf2
    ca4a:	7820      	ldrb	r0, [r4, #0]
    ca4c:	4b08      	ldr	r3, [pc, #32]	; (ca70 <LORAWAN_Join+0xe8>)
    ca4e:	9200      	str	r2, [sp, #0]
    ca50:	4908      	ldr	r1, [pc, #32]	; (ca74 <LORAWAN_Join+0xec>)
    ca52:	4c09      	ldr	r4, [pc, #36]	; (ca78 <LORAWAN_Join+0xf0>)
    ca54:	47a0      	blx	r4
    ca56:	e7e6      	b.n	ca26 <LORAWAN_Join+0x9e>
    ca58:	200017bc 	.word	0x200017bc
    ca5c:	000091e1 	.word	0x000091e1
    ca60:	00008d21 	.word	0x00008d21
    ca64:	0000fbd9 	.word	0x0000fbd9
    ca68:	0000f449 	.word	0x0000f449
    ca6c:	0000c951 	.word	0x0000c951
    ca70:	0000b935 	.word	0x0000b935
    ca74:	0000c350 	.word	0x0000c350
    ca78:	00009609 	.word	0x00009609

0000ca7c <EncryptFRMPayload>:
    ca7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ca7e:	0007      	movs	r7, r0
    ca80:	2401      	movs	r4, #1
    ca82:	b089      	sub	sp, #36	; 0x24
    ca84:	9306      	str	r3, [sp, #24]
    ca86:	ab10      	add	r3, sp, #64	; 0x40
    ca88:	781d      	ldrb	r5, [r3, #0]
    ca8a:	090b      	lsrs	r3, r1, #4
    ca8c:	9104      	str	r1, [sp, #16]
    ca8e:	9205      	str	r2, [sp, #20]
    ca90:	9303      	str	r3, [sp, #12]
    ca92:	9b03      	ldr	r3, [sp, #12]
    ca94:	429c      	cmp	r4, r3
    ca96:	d907      	bls.n	caa8 <EncryptFRMPayload+0x2c>
    ca98:	260f      	movs	r6, #15
    ca9a:	9b04      	ldr	r3, [sp, #16]
    ca9c:	4033      	ands	r3, r6
    ca9e:	1e1e      	subs	r6, r3, #0
    caa0:	d126      	bne.n	caf0 <EncryptFRMPayload+0x74>
    caa2:	2000      	movs	r0, #0
    caa4:	b009      	add	sp, #36	; 0x24
    caa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    caa8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    caaa:	0022      	movs	r2, r4
    caac:	9300      	str	r3, [sp, #0]
    caae:	9906      	ldr	r1, [sp, #24]
    cab0:	2301      	movs	r3, #1
    cab2:	9805      	ldr	r0, [sp, #20]
    cab4:	4e1e      	ldr	r6, [pc, #120]	; (cb30 <EncryptFRMPayload+0xb4>)
    cab6:	47b0      	blx	r6
    cab8:	4e1e      	ldr	r6, [pc, #120]	; (cb34 <EncryptFRMPayload+0xb8>)
    caba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    cabc:	2101      	movs	r1, #1
    cabe:	0030      	movs	r0, r6
    cac0:	4b1d      	ldr	r3, [pc, #116]	; (cb38 <EncryptFRMPayload+0xbc>)
    cac2:	4798      	blx	r3
    cac4:	2800      	cmp	r0, #0
    cac6:	d1ed      	bne.n	caa4 <EncryptFRMPayload+0x28>
    cac8:	1e63      	subs	r3, r4, #1
    caca:	011b      	lsls	r3, r3, #4
    cacc:	18fb      	adds	r3, r7, r3
    cace:	9307      	str	r3, [sp, #28]
    cad0:	9b07      	ldr	r3, [sp, #28]
    cad2:	182a      	adds	r2, r5, r0
    cad4:	5c19      	ldrb	r1, [r3, r0]
    cad6:	5d83      	ldrb	r3, [r0, r6]
    cad8:	b2d2      	uxtb	r2, r2
    cada:	4059      	eors	r1, r3
    cadc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cade:	3001      	adds	r0, #1
    cae0:	5499      	strb	r1, [r3, r2]
    cae2:	2810      	cmp	r0, #16
    cae4:	d1f4      	bne.n	cad0 <EncryptFRMPayload+0x54>
    cae6:	3510      	adds	r5, #16
    cae8:	3401      	adds	r4, #1
    caea:	b2ed      	uxtb	r5, r5
    caec:	b2e4      	uxtb	r4, r4
    caee:	e7d0      	b.n	ca92 <EncryptFRMPayload+0x16>
    caf0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    caf2:	0022      	movs	r2, r4
    caf4:	9300      	str	r3, [sp, #0]
    caf6:	9906      	ldr	r1, [sp, #24]
    caf8:	2301      	movs	r3, #1
    cafa:	9805      	ldr	r0, [sp, #20]
    cafc:	4c0c      	ldr	r4, [pc, #48]	; (cb30 <EncryptFRMPayload+0xb4>)
    cafe:	47a0      	blx	r4
    cb00:	4c0c      	ldr	r4, [pc, #48]	; (cb34 <EncryptFRMPayload+0xb8>)
    cb02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    cb04:	2101      	movs	r1, #1
    cb06:	0020      	movs	r0, r4
    cb08:	4b0b      	ldr	r3, [pc, #44]	; (cb38 <EncryptFRMPayload+0xbc>)
    cb0a:	4798      	blx	r3
    cb0c:	2800      	cmp	r0, #0
    cb0e:	d1c9      	bne.n	caa4 <EncryptFRMPayload+0x28>
    cb10:	9b03      	ldr	r3, [sp, #12]
    cb12:	011b      	lsls	r3, r3, #4
    cb14:	18fb      	adds	r3, r7, r3
    cb16:	5d07      	ldrb	r7, [r0, r4]
    cb18:	5c19      	ldrb	r1, [r3, r0]
    cb1a:	182a      	adds	r2, r5, r0
    cb1c:	4079      	eors	r1, r7
    cb1e:	9f11      	ldr	r7, [sp, #68]	; 0x44
    cb20:	b2d2      	uxtb	r2, r2
    cb22:	3001      	adds	r0, #1
    cb24:	54b9      	strb	r1, [r7, r2]
    cb26:	b2c2      	uxtb	r2, r0
    cb28:	4296      	cmp	r6, r2
    cb2a:	d8f4      	bhi.n	cb16 <EncryptFRMPayload+0x9a>
    cb2c:	e7b9      	b.n	caa2 <EncryptFRMPayload+0x26>
    cb2e:	46c0      	nop			; (mov r8, r8)
    cb30:	0000ba61 	.word	0x0000ba61
    cb34:	20000e90 	.word	0x20000e90
    cb38:	00008ecd 	.word	0x00008ecd

0000cb3c <UpdateTransactionCompleteCbParams>:
    cb3c:	23ea      	movs	r3, #234	; 0xea
    cb3e:	2201      	movs	r2, #1
    cb40:	b570      	push	{r4, r5, r6, lr}
    cb42:	0001      	movs	r1, r0
    cb44:	4c14      	ldr	r4, [pc, #80]	; (cb98 <UpdateTransactionCompleteCbParams+0x5c>)
    cb46:	4815      	ldr	r0, [pc, #84]	; (cb9c <UpdateTransactionCompleteCbParams+0x60>)
    cb48:	005b      	lsls	r3, r3, #1
    cb4a:	54e2      	strb	r2, [r4, r3]
    cb4c:	7842      	ldrb	r2, [r0, #1]
    cb4e:	7803      	ldrb	r3, [r0, #0]
    cb50:	0212      	lsls	r2, r2, #8
    cb52:	431a      	orrs	r2, r3
    cb54:	7883      	ldrb	r3, [r0, #2]
    cb56:	041b      	lsls	r3, r3, #16
    cb58:	431a      	orrs	r2, r3
    cb5a:	78c3      	ldrb	r3, [r0, #3]
    cb5c:	061b      	lsls	r3, r3, #24
    cb5e:	4313      	orrs	r3, r2
    cb60:	d010      	beq.n	cb84 <UpdateTransactionCompleteCbParams+0x48>
    cb62:	0022      	movs	r2, r4
    cb64:	2504      	movs	r5, #4
    cb66:	32f8      	adds	r2, #248	; 0xf8
    cb68:	6812      	ldr	r2, [r2, #0]
    cb6a:	422a      	tst	r2, r5
    cb6c:	d00a      	beq.n	cb84 <UpdateTransactionCompleteCbParams+0x48>
    cb6e:	0022      	movs	r2, r4
    cb70:	32fc      	adds	r2, #252	; 0xfc
    cb72:	6810      	ldr	r0, [r2, #0]
    cb74:	2800      	cmp	r0, #0
    cb76:	d005      	beq.n	cb84 <UpdateTransactionCompleteCbParams+0x48>
    cb78:	0022      	movs	r2, r4
    cb7a:	32ff      	adds	r2, #255	; 0xff
    cb7c:	7151      	strb	r1, [r2, #5]
    cb7e:	7055      	strb	r5, [r2, #1]
    cb80:	4907      	ldr	r1, [pc, #28]	; (cba0 <UpdateTransactionCompleteCbParams+0x64>)
    cb82:	4798      	blx	r3
    cb84:	23ea      	movs	r3, #234	; 0xea
    cb86:	005b      	lsls	r3, r3, #1
    cb88:	5ce3      	ldrb	r3, [r4, r3]
    cb8a:	2b00      	cmp	r3, #0
    cb8c:	d002      	beq.n	cb94 <UpdateTransactionCompleteCbParams+0x58>
    cb8e:	2300      	movs	r3, #0
    cb90:	34fc      	adds	r4, #252	; 0xfc
    cb92:	6023      	str	r3, [r4, #0]
    cb94:	bd70      	pop	{r4, r5, r6, pc}
    cb96:	46c0      	nop			; (mov r8, r8)
    cb98:	200017bc 	.word	0x200017bc
    cb9c:	20001ab4 	.word	0x20001ab4
    cba0:	200018bc 	.word	0x200018bc

0000cba4 <AssemblePacket>:
    cba4:	b5f0      	push	{r4, r5, r6, r7, lr}
    cba6:	2710      	movs	r7, #16
    cba8:	b08d      	sub	sp, #52	; 0x34
    cbaa:	9306      	str	r3, [sp, #24]
    cbac:	ab04      	add	r3, sp, #16
    cbae:	839f      	strh	r7, [r3, #28]
    cbb0:	231e      	movs	r3, #30
    cbb2:	9208      	str	r2, [sp, #32]
    cbb4:	aa04      	add	r2, sp, #16
    cbb6:	189b      	adds	r3, r3, r2
    cbb8:	2500      	movs	r5, #0
    cbba:	2210      	movs	r2, #16
    cbbc:	ac0a      	add	r4, sp, #40	; 0x28
    cbbe:	9007      	str	r0, [sp, #28]
    cbc0:	9109      	str	r1, [sp, #36]	; 0x24
    cbc2:	32ff      	adds	r2, #255	; 0xff
    cbc4:	0029      	movs	r1, r5
    cbc6:	4eb5      	ldr	r6, [pc, #724]	; (ce9c <AssemblePacket+0x2f8>)
    cbc8:	7025      	strb	r5, [r4, #0]
    cbca:	48b5      	ldr	r0, [pc, #724]	; (cea0 <AssemblePacket+0x2fc>)
    cbcc:	801d      	strh	r5, [r3, #0]
    cbce:	47b0      	blx	r6
    cbd0:	003a      	movs	r2, r7
    cbd2:	0029      	movs	r1, r5
    cbd4:	48b3      	ldr	r0, [pc, #716]	; (cea4 <AssemblePacket+0x300>)
    cbd6:	47b0      	blx	r6
    cbd8:	221f      	movs	r2, #31
    cbda:	7823      	ldrb	r3, [r4, #0]
    cbdc:	9907      	ldr	r1, [sp, #28]
    cbde:	4013      	ands	r3, r2
    cbe0:	42a9      	cmp	r1, r5
    cbe2:	d043      	beq.n	cc6c <AssemblePacket+0xc8>
    cbe4:	3a9f      	subs	r2, #159	; 0x9f
    cbe6:	4313      	orrs	r3, r2
    cbe8:	7023      	strb	r3, [r4, #0]
    cbea:	4baf      	ldr	r3, [pc, #700]	; (cea8 <AssemblePacket+0x304>)
    cbec:	3281      	adds	r2, #129	; 0x81
    cbee:	338c      	adds	r3, #140	; 0x8c
    cbf0:	7819      	ldrb	r1, [r3, #0]
    cbf2:	430a      	orrs	r2, r1
    cbf4:	701a      	strb	r2, [r3, #0]
    cbf6:	22e0      	movs	r2, #224	; 0xe0
    cbf8:	7823      	ldrb	r3, [r4, #0]
    cbfa:	48a9      	ldr	r0, [pc, #676]	; (cea0 <AssemblePacket+0x2fc>)
    cbfc:	4013      	ands	r3, r2
    cbfe:	7023      	strb	r3, [r4, #0]
    cc00:	4ca9      	ldr	r4, [pc, #676]	; (cea8 <AssemblePacket+0x304>)
    cc02:	7403      	strb	r3, [r0, #16]
    cc04:	3adc      	subs	r2, #220	; 0xdc
    cc06:	4ba9      	ldr	r3, [pc, #676]	; (ceac <AssemblePacket+0x308>)
    cc08:	3011      	adds	r0, #17
    cc0a:	1c61      	adds	r1, r4, #1
    cc0c:	4798      	blx	r3
    cc0e:	2315      	movs	r3, #21
    cc10:	aa04      	add	r2, sp, #16
    cc12:	8393      	strh	r3, [r2, #28]
    cc14:	0023      	movs	r3, r4
    cc16:	337c      	adds	r3, #124	; 0x7c
    cc18:	781b      	ldrb	r3, [r3, #0]
    cc1a:	2700      	movs	r7, #0
    cc1c:	069b      	lsls	r3, r3, #26
    cc1e:	d400      	bmi.n	cc22 <AssemblePacket+0x7e>
    cc20:	e0fd      	b.n	ce1e <AssemblePacket+0x27a>
    cc22:	0023      	movs	r3, r4
    cc24:	33df      	adds	r3, #223	; 0xdf
    cc26:	781a      	ldrb	r2, [r3, #0]
    cc28:	23ea      	movs	r3, #234	; 0xea
    cc2a:	469c      	mov	ip, r3
    cc2c:	44a4      	add	ip, r4
    cc2e:	4663      	mov	r3, ip
    cc30:	781d      	ldrb	r5, [r3, #0]
    cc32:	42aa      	cmp	r2, r5
    cc34:	d200      	bcs.n	cc38 <AssemblePacket+0x94>
    cc36:	e0f2      	b.n	ce1e <AssemblePacket+0x27a>
    cc38:	0021      	movs	r1, r4
    cc3a:	0026      	movs	r6, r4
    cc3c:	4b9c      	ldr	r3, [pc, #624]	; (ceb0 <AssemblePacket+0x30c>)
    cc3e:	31c2      	adds	r1, #194	; 0xc2
    cc40:	7818      	ldrb	r0, [r3, #0]
    cc42:	880b      	ldrh	r3, [r1, #0]
    cc44:	36d4      	adds	r6, #212	; 0xd4
    cc46:	3301      	adds	r3, #1
    cc48:	b29b      	uxth	r3, r3
    cc4a:	800b      	strh	r3, [r1, #0]
    cc4c:	7836      	ldrb	r6, [r6, #0]
    cc4e:	42b3      	cmp	r3, r6
    cc50:	d110      	bne.n	cc74 <AssemblePacket+0xd0>
    cc52:	0023      	movs	r3, r4
    cc54:	33ed      	adds	r3, #237	; 0xed
    cc56:	701f      	strb	r7, [r3, #0]
    cc58:	2380      	movs	r3, #128	; 0x80
    cc5a:	2040      	movs	r0, #64	; 0x40
    cc5c:	348c      	adds	r4, #140	; 0x8c
    cc5e:	425b      	negs	r3, r3
    cc60:	7822      	ldrb	r2, [r4, #0]
    cc62:	4318      	orrs	r0, r3
    cc64:	3390      	adds	r3, #144	; 0x90
    cc66:	4313      	orrs	r3, r2
    cc68:	7023      	strb	r3, [r4, #0]
    cc6a:	e02f      	b.n	cccc <AssemblePacket+0x128>
    cc6c:	2240      	movs	r2, #64	; 0x40
    cc6e:	4313      	orrs	r3, r2
    cc70:	7023      	strb	r3, [r4, #0]
    cc72:	e7c0      	b.n	cbf6 <AssemblePacket+0x52>
    cc74:	42b3      	cmp	r3, r6
    cc76:	d929      	bls.n	cccc <AssemblePacket+0x128>
    cc78:	42aa      	cmp	r2, r5
    cc7a:	d100      	bne.n	cc7e <AssemblePacket+0xda>
    cc7c:	e0c9      	b.n	ce12 <AssemblePacket+0x26e>
    cc7e:	0021      	movs	r1, r4
    cc80:	0020      	movs	r0, r4
    cc82:	31ed      	adds	r1, #237	; 0xed
    cc84:	780b      	ldrb	r3, [r1, #0]
    cc86:	30d5      	adds	r0, #213	; 0xd5
    cc88:	3301      	adds	r3, #1
    cc8a:	b2db      	uxtb	r3, r3
    cc8c:	700b      	strb	r3, [r1, #0]
    cc8e:	7800      	ldrb	r0, [r0, #0]
    cc90:	3801      	subs	r0, #1
    cc92:	4283      	cmp	r3, r0
    cc94:	dbe0      	blt.n	cc58 <AssemblePacket+0xb4>
    cc96:	700f      	strb	r7, [r1, #0]
    cc98:	42aa      	cmp	r2, r5
    cc9a:	d90d      	bls.n	ccb8 <AssemblePacket+0x114>
    cc9c:	231b      	movs	r3, #27
    cc9e:	4666      	mov	r6, ip
    cca0:	a904      	add	r1, sp, #16
    cca2:	3a01      	subs	r2, #1
    cca4:	185b      	adds	r3, r3, r1
    cca6:	701a      	strb	r2, [r3, #0]
    cca8:	251b      	movs	r5, #27
    ccaa:	ab04      	add	r3, sp, #16
    ccac:	18ed      	adds	r5, r5, r3
    ccae:	7832      	ldrb	r2, [r6, #0]
    ccb0:	782b      	ldrb	r3, [r5, #0]
    ccb2:	429a      	cmp	r2, r3
    ccb4:	d800      	bhi.n	ccb8 <AssemblePacket+0x114>
    ccb6:	e098      	b.n	cdea <AssemblePacket+0x246>
    ccb8:	2380      	movs	r3, #128	; 0x80
    ccba:	2040      	movs	r0, #64	; 0x40
    ccbc:	2210      	movs	r2, #16
    ccbe:	425b      	negs	r3, r3
    ccc0:	4318      	orrs	r0, r3
    ccc2:	4b79      	ldr	r3, [pc, #484]	; (cea8 <AssemblePacket+0x304>)
    ccc4:	338c      	adds	r3, #140	; 0x8c
    ccc6:	7819      	ldrb	r1, [r3, #0]
    ccc8:	430a      	orrs	r2, r1
    ccca:	701a      	strb	r2, [r3, #0]
    cccc:	4d76      	ldr	r5, [pc, #472]	; (cea8 <AssemblePacket+0x304>)
    ccce:	2102      	movs	r1, #2
    ccd0:	002a      	movs	r2, r5
    ccd2:	328c      	adds	r2, #140	; 0x8c
    ccd4:	7813      	ldrb	r3, [r2, #0]
    ccd6:	420b      	tst	r3, r1
    ccd8:	d003      	beq.n	cce2 <AssemblePacket+0x13e>
    ccda:	2420      	movs	r4, #32
    ccdc:	438b      	bics	r3, r1
    ccde:	4320      	orrs	r0, r4
    cce0:	7013      	strb	r3, [r2, #0]
    cce2:	2310      	movs	r3, #16
    cce4:	0004      	movs	r4, r0
    cce6:	439c      	bics	r4, r3
    cce8:	002b      	movs	r3, r5
    ccea:	33d8      	adds	r3, #216	; 0xd8
    ccec:	781b      	ldrb	r3, [r3, #0]
    ccee:	9307      	str	r3, [sp, #28]
    ccf0:	2b00      	cmp	r3, #0
    ccf2:	d003      	beq.n	ccfc <AssemblePacket+0x158>
    ccf4:	9b06      	ldr	r3, [sp, #24]
    ccf6:	2b00      	cmp	r3, #0
    ccf8:	d000      	beq.n	ccfc <AssemblePacket+0x158>
    ccfa:	e092      	b.n	ce22 <AssemblePacket+0x27e>
    ccfc:	230f      	movs	r3, #15
    ccfe:	439c      	bics	r4, r3
    cd00:	0020      	movs	r0, r4
    cd02:	ac0b      	add	r4, sp, #44	; 0x2c
    cd04:	8826      	ldrh	r6, [r4, #0]
    cd06:	4f66      	ldr	r7, [pc, #408]	; (cea0 <AssemblePacket+0x2fc>)
    cd08:	4b68      	ldr	r3, [pc, #416]	; (ceac <AssemblePacket+0x308>)
    cd0a:	55b8      	strb	r0, [r7, r6]
    cd0c:	1c70      	adds	r0, r6, #1
    cd0e:	b280      	uxth	r0, r0
    cd10:	19c0      	adds	r0, r0, r7
    cd12:	2202      	movs	r2, #2
    cd14:	4967      	ldr	r1, [pc, #412]	; (ceb4 <AssemblePacket+0x310>)
    cd16:	4798      	blx	r3
    cd18:	9b07      	ldr	r3, [sp, #28]
    cd1a:	3603      	adds	r6, #3
    cd1c:	8026      	strh	r6, [r4, #0]
    cd1e:	2b00      	cmp	r3, #0
    cd20:	d100      	bne.n	cd24 <AssemblePacket+0x180>
    cd22:	e087      	b.n	ce34 <AssemblePacket+0x290>
    cd24:	9b06      	ldr	r3, [sp, #24]
    cd26:	2b00      	cmp	r3, #0
    cd28:	d004      	beq.n	cd34 <AssemblePacket+0x190>
    cd2a:	2201      	movs	r2, #1
    cd2c:	0021      	movs	r1, r4
    cd2e:	0038      	movs	r0, r7
    cd30:	4b61      	ldr	r3, [pc, #388]	; (ceb8 <AssemblePacket+0x314>)
    cd32:	4798      	blx	r3
    cd34:	466a      	mov	r2, sp
    cd36:	2124      	movs	r1, #36	; 0x24
    cd38:	1852      	adds	r2, r2, r1
    cd3a:	8823      	ldrh	r3, [r4, #0]
    cd3c:	7812      	ldrb	r2, [r2, #0]
    cd3e:	1c5e      	adds	r6, r3, #1
    cd40:	54fa      	strb	r2, [r7, r3]
    cd42:	9b06      	ldr	r3, [sp, #24]
    cd44:	b2b6      	uxth	r6, r6
    cd46:	8026      	strh	r6, [r4, #0]
    cd48:	2b00      	cmp	r3, #0
    cd4a:	d100      	bne.n	cd4e <AssemblePacket+0x1aa>
    cd4c:	e076      	b.n	ce3c <AssemblePacket+0x298>
    cd4e:	001a      	movs	r2, r3
    cd50:	19b8      	adds	r0, r7, r6
    cd52:	9908      	ldr	r1, [sp, #32]
    cd54:	4b55      	ldr	r3, [pc, #340]	; (ceac <AssemblePacket+0x308>)
    cd56:	4798      	blx	r3
    cd58:	466b      	mov	r3, sp
    cd5a:	7e19      	ldrb	r1, [r3, #24]
    cd5c:	682b      	ldr	r3, [r5, #0]
    cd5e:	b2f6      	uxtb	r6, r6
    cd60:	0a18      	lsrs	r0, r3, #8
    cd62:	792b      	ldrb	r3, [r5, #4]
    cd64:	1d2a      	adds	r2, r5, #4
    cd66:	061b      	lsls	r3, r3, #24
    cd68:	4303      	orrs	r3, r0
    cd6a:	9304      	str	r3, [sp, #16]
    cd6c:	2301      	movs	r3, #1
    cd6e:	9301      	str	r3, [sp, #4]
    cd70:	4b52      	ldr	r3, [pc, #328]	; (cebc <AssemblePacket+0x318>)
    cd72:	9703      	str	r7, [sp, #12]
    cd74:	9602      	str	r6, [sp, #8]
    cd76:	9300      	str	r3, [sp, #0]
    cd78:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
    cd7a:	9808      	ldr	r0, [sp, #32]
    cd7c:	2200      	movs	r2, #0
    cd7e:	4c50      	ldr	r4, [pc, #320]	; (cec0 <AssemblePacket+0x31c>)
    cd80:	47a0      	blx	r4
    cd82:	2800      	cmp	r0, #0
    cd84:	d002      	beq.n	cd8c <AssemblePacket+0x1e8>
    cd86:	2020      	movs	r0, #32
    cd88:	4b4e      	ldr	r3, [pc, #312]	; (cec4 <AssemblePacket+0x320>)
    cd8a:	4798      	blx	r3
    cd8c:	aa0b      	add	r2, sp, #44	; 0x2c
    cd8e:	8813      	ldrh	r3, [r2, #0]
    cd90:	9906      	ldr	r1, [sp, #24]
    cd92:	18cb      	adds	r3, r1, r3
    cd94:	8013      	strh	r3, [r2, #0]
    cd96:	4c44      	ldr	r4, [pc, #272]	; (cea8 <AssemblePacket+0x304>)
    cd98:	ae0b      	add	r6, sp, #44	; 0x2c
    cd9a:	6823      	ldr	r3, [r4, #0]
    cd9c:	8832      	ldrh	r2, [r6, #0]
    cd9e:	0a18      	lsrs	r0, r3, #8
    cda0:	7923      	ldrb	r3, [r4, #4]
    cda2:	1d21      	adds	r1, r4, #4
    cda4:	061b      	lsls	r3, r3, #24
    cda6:	4303      	orrs	r3, r0
    cda8:	9300      	str	r3, [sp, #0]
    cdaa:	3a10      	subs	r2, #16
    cdac:	b2d2      	uxtb	r2, r2
    cdae:	2349      	movs	r3, #73	; 0x49
    cdb0:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
    cdb2:	2000      	movs	r0, #0
    cdb4:	4d44      	ldr	r5, [pc, #272]	; (cec8 <AssemblePacket+0x324>)
    cdb6:	47a8      	blx	r5
    cdb8:	4f39      	ldr	r7, [pc, #228]	; (cea0 <AssemblePacket+0x2fc>)
    cdba:	2210      	movs	r2, #16
    cdbc:	4939      	ldr	r1, [pc, #228]	; (cea4 <AssemblePacket+0x300>)
    cdbe:	0038      	movs	r0, r7
    cdc0:	4b3a      	ldr	r3, [pc, #232]	; (ceac <AssemblePacket+0x308>)
    cdc2:	4798      	blx	r3
    cdc4:	7833      	ldrb	r3, [r6, #0]
    cdc6:	4a37      	ldr	r2, [pc, #220]	; (cea4 <AssemblePacket+0x300>)
    cdc8:	9300      	str	r3, [sp, #0]
    cdca:	2102      	movs	r1, #2
    cdcc:	003b      	movs	r3, r7
    cdce:	4d3f      	ldr	r5, [pc, #252]	; (cecc <AssemblePacket+0x328>)
    cdd0:	483f      	ldr	r0, [pc, #252]	; (ced0 <AssemblePacket+0x32c>)
    cdd2:	47a8      	blx	r5
    cdd4:	8836      	ldrh	r6, [r6, #0]
    cdd6:	2204      	movs	r2, #4
    cdd8:	19f0      	adds	r0, r6, r7
    cdda:	4932      	ldr	r1, [pc, #200]	; (cea4 <AssemblePacket+0x300>)
    cddc:	4b33      	ldr	r3, [pc, #204]	; (ceac <AssemblePacket+0x308>)
    cdde:	4798      	blx	r3
    cde0:	3e0c      	subs	r6, #12
    cde2:	34c6      	adds	r4, #198	; 0xc6
    cde4:	8026      	strh	r6, [r4, #0]
    cde6:	b00d      	add	sp, #52	; 0x34
    cde8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cdea:	0029      	movs	r1, r5
    cdec:	2010      	movs	r0, #16
    cdee:	4f39      	ldr	r7, [pc, #228]	; (ced4 <AssemblePacket+0x330>)
    cdf0:	47b8      	blx	r7
    cdf2:	2808      	cmp	r0, #8
    cdf4:	d000      	beq.n	cdf8 <AssemblePacket+0x254>
    cdf6:	e75f      	b.n	ccb8 <AssemblePacket+0x114>
    cdf8:	0029      	movs	r1, r5
    cdfa:	3009      	adds	r0, #9
    cdfc:	47b8      	blx	r7
    cdfe:	782b      	ldrb	r3, [r5, #0]
    ce00:	2808      	cmp	r0, #8
    ce02:	d047      	beq.n	ce94 <AssemblePacket+0x2f0>
    ce04:	7832      	ldrb	r2, [r6, #0]
    ce06:	429a      	cmp	r2, r3
    ce08:	d300      	bcc.n	ce0c <AssemblePacket+0x268>
    ce0a:	e74d      	b.n	cca8 <AssemblePacket+0x104>
    ce0c:	3b01      	subs	r3, #1
    ce0e:	702b      	strb	r3, [r5, #0]
    ce10:	e74a      	b.n	cca8 <AssemblePacket+0x104>
    ce12:	800f      	strh	r7, [r1, #0]
    ce14:	2210      	movs	r2, #16
    ce16:	348c      	adds	r4, #140	; 0x8c
    ce18:	7823      	ldrb	r3, [r4, #0]
    ce1a:	4393      	bics	r3, r2
    ce1c:	e724      	b.n	cc68 <AssemblePacket+0xc4>
    ce1e:	2000      	movs	r0, #0
    ce20:	e7f8      	b.n	ce14 <AssemblePacket+0x270>
    ce22:	4b2d      	ldr	r3, [pc, #180]	; (ced8 <AssemblePacket+0x334>)
    ce24:	4798      	blx	r3
    ce26:	220f      	movs	r2, #15
    ce28:	0003      	movs	r3, r0
    ce2a:	0020      	movs	r0, r4
    ce2c:	4013      	ands	r3, r2
    ce2e:	4390      	bics	r0, r2
    ce30:	4318      	orrs	r0, r3
    ce32:	e766      	b.n	cd02 <AssemblePacket+0x15e>
    ce34:	9b06      	ldr	r3, [sp, #24]
    ce36:	2b00      	cmp	r3, #0
    ce38:	d000      	beq.n	ce3c <AssemblePacket+0x298>
    ce3a:	e77b      	b.n	cd34 <AssemblePacket+0x190>
    ce3c:	4d1a      	ldr	r5, [pc, #104]	; (cea8 <AssemblePacket+0x304>)
    ce3e:	002b      	movs	r3, r5
    ce40:	33d8      	adds	r3, #216	; 0xd8
    ce42:	781b      	ldrb	r3, [r3, #0]
    ce44:	2b00      	cmp	r3, #0
    ce46:	d0a6      	beq.n	cd96 <AssemblePacket+0x1f2>
    ce48:	261e      	movs	r6, #30
    ce4a:	ab04      	add	r3, sp, #16
    ce4c:	18f6      	adds	r6, r6, r3
    ce4e:	2200      	movs	r2, #0
    ce50:	0031      	movs	r1, r6
    ce52:	4822      	ldr	r0, [pc, #136]	; (cedc <AssemblePacket+0x338>)
    ce54:	4b18      	ldr	r3, [pc, #96]	; (ceb8 <AssemblePacket+0x314>)
    ce56:	4798      	blx	r3
    ce58:	682b      	ldr	r3, [r5, #0]
    ce5a:	7831      	ldrb	r1, [r6, #0]
    ce5c:	0a18      	lsrs	r0, r3, #8
    ce5e:	792b      	ldrb	r3, [r5, #4]
    ce60:	9703      	str	r7, [sp, #12]
    ce62:	061b      	lsls	r3, r3, #24
    ce64:	4303      	orrs	r3, r0
    ce66:	9304      	str	r3, [sp, #16]
    ce68:	7823      	ldrb	r3, [r4, #0]
    ce6a:	1d2a      	adds	r2, r5, #4
    ce6c:	9302      	str	r3, [sp, #8]
    ce6e:	2302      	movs	r3, #2
    ce70:	9301      	str	r3, [sp, #4]
    ce72:	4b17      	ldr	r3, [pc, #92]	; (ced0 <AssemblePacket+0x32c>)
    ce74:	4819      	ldr	r0, [pc, #100]	; (cedc <AssemblePacket+0x338>)
    ce76:	9300      	str	r3, [sp, #0]
    ce78:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
    ce7a:	4d11      	ldr	r5, [pc, #68]	; (cec0 <AssemblePacket+0x31c>)
    ce7c:	2200      	movs	r2, #0
    ce7e:	47a8      	blx	r5
    ce80:	2800      	cmp	r0, #0
    ce82:	d002      	beq.n	ce8a <AssemblePacket+0x2e6>
    ce84:	2020      	movs	r0, #32
    ce86:	4b0f      	ldr	r3, [pc, #60]	; (cec4 <AssemblePacket+0x320>)
    ce88:	4798      	blx	r3
    ce8a:	8823      	ldrh	r3, [r4, #0]
    ce8c:	8832      	ldrh	r2, [r6, #0]
    ce8e:	189b      	adds	r3, r3, r2
    ce90:	8023      	strh	r3, [r4, #0]
    ce92:	e780      	b.n	cd96 <AssemblePacket+0x1f2>
    ce94:	34df      	adds	r4, #223	; 0xdf
    ce96:	7023      	strb	r3, [r4, #0]
    ce98:	e70e      	b.n	ccb8 <AssemblePacket+0x114>
    ce9a:	46c0      	nop			; (mov r8, r8)
    ce9c:	00014f51 	.word	0x00014f51
    cea0:	200019a1 	.word	0x200019a1
    cea4:	20000e90 	.word	0x20000e90
    cea8:	200017bc 	.word	0x200017bc
    ceac:	00014ecd 	.word	0x00014ecd
    ceb0:	0001ac12 	.word	0x0001ac12
    ceb4:	2000183c 	.word	0x2000183c
    ceb8:	0000b775 	.word	0x0000b775
    cebc:	200017f1 	.word	0x200017f1
    cec0:	0000ca7d 	.word	0x0000ca7d
    cec4:	0000cb3d 	.word	0x0000cb3d
    cec8:	0000ba61 	.word	0x0000ba61
    cecc:	00008f05 	.word	0x00008f05
    ced0:	200017e1 	.word	0x200017e1
    ced4:	00008c15 	.word	0x00008c15
    ced8:	0000b671 	.word	0x0000b671
    cedc:	20001abc 	.word	0x20001abc

0000cee0 <UpdateRxDataAvailableCbParams>:
    cee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cee2:	4e0f      	ldr	r6, [pc, #60]	; (cf20 <UpdateRxDataAvailableCbParams+0x40>)
    cee4:	7874      	ldrb	r4, [r6, #1]
    cee6:	7835      	ldrb	r5, [r6, #0]
    cee8:	0224      	lsls	r4, r4, #8
    ceea:	432c      	orrs	r4, r5
    ceec:	78b5      	ldrb	r5, [r6, #2]
    ceee:	042d      	lsls	r5, r5, #16
    cef0:	432c      	orrs	r4, r5
    cef2:	78f5      	ldrb	r5, [r6, #3]
    cef4:	062d      	lsls	r5, r5, #24
    cef6:	4325      	orrs	r5, r4
    cef8:	d011      	beq.n	cf1e <UpdateRxDataAvailableCbParams+0x3e>
    cefa:	4c0a      	ldr	r4, [pc, #40]	; (cf24 <UpdateRxDataAvailableCbParams+0x44>)
    cefc:	2702      	movs	r7, #2
    cefe:	0026      	movs	r6, r4
    cf00:	36f8      	adds	r6, #248	; 0xf8
    cf02:	6836      	ldr	r6, [r6, #0]
    cf04:	423e      	tst	r6, r7
    cf06:	d00a      	beq.n	cf1e <UpdateRxDataAvailableCbParams+0x3e>
    cf08:	0026      	movs	r6, r4
    cf0a:	34fc      	adds	r4, #252	; 0xfc
    cf0c:	36ff      	adds	r6, #255	; 0xff
    cf0e:	60a0      	str	r0, [r4, #8]
    cf10:	60e1      	str	r1, [r4, #12]
    cf12:	7077      	strb	r7, [r6, #1]
    cf14:	7372      	strb	r2, [r6, #13]
    cf16:	73b3      	strb	r3, [r6, #14]
    cf18:	4903      	ldr	r1, [pc, #12]	; (cf28 <UpdateRxDataAvailableCbParams+0x48>)
    cf1a:	6820      	ldr	r0, [r4, #0]
    cf1c:	47a8      	blx	r5
    cf1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cf20:	20001ab4 	.word	0x20001ab4
    cf24:	200017bc 	.word	0x200017bc
    cf28:	200018bc 	.word	0x200018bc

0000cf2c <LorawanNotifyAppOnRxdone>:
    cf2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cf2e:	4c25      	ldr	r4, [pc, #148]	; (cfc4 <LorawanNotifyAppOnRxdone+0x98>)
    cf30:	0007      	movs	r7, r0
    cf32:	0023      	movs	r3, r4
    cf34:	33f4      	adds	r3, #244	; 0xf4
    cf36:	781b      	ldrb	r3, [r3, #0]
    cf38:	000d      	movs	r5, r1
    cf3a:	0016      	movs	r6, r2
    cf3c:	2b01      	cmp	r3, #1
    cf3e:	d136      	bne.n	cfae <LorawanNotifyAppOnRxdone+0x82>
    cf40:	0022      	movs	r2, r4
    cf42:	210e      	movs	r1, #14
    cf44:	327c      	adds	r2, #124	; 0x7c
    cf46:	7813      	ldrb	r3, [r2, #0]
    cf48:	438b      	bics	r3, r1
    cf4a:	7013      	strb	r3, [r2, #0]
    cf4c:	491e      	ldr	r1, [pc, #120]	; (cfc8 <LorawanNotifyAppOnRxdone+0x9c>)
    cf4e:	784a      	ldrb	r2, [r1, #1]
    cf50:	780b      	ldrb	r3, [r1, #0]
    cf52:	0212      	lsls	r2, r2, #8
    cf54:	431a      	orrs	r2, r3
    cf56:	788b      	ldrb	r3, [r1, #2]
    cf58:	041b      	lsls	r3, r3, #16
    cf5a:	431a      	orrs	r2, r3
    cf5c:	78cb      	ldrb	r3, [r1, #3]
    cf5e:	061b      	lsls	r3, r3, #24
    cf60:	4313      	orrs	r3, r2
    cf62:	d023      	beq.n	cfac <LorawanNotifyAppOnRxdone+0x80>
    cf64:	0022      	movs	r2, r4
    cf66:	2120      	movs	r1, #32
    cf68:	328c      	adds	r2, #140	; 0x8c
    cf6a:	7813      	ldrb	r3, [r2, #0]
    cf6c:	438b      	bics	r3, r1
    cf6e:	7013      	strb	r3, [r2, #0]
    cf70:	0023      	movs	r3, r4
    cf72:	33f4      	adds	r3, #244	; 0xf4
    cf74:	781b      	ldrb	r3, [r3, #0]
    cf76:	7878      	ldrb	r0, [r7, #1]
    cf78:	469c      	mov	ip, r3
    cf7a:	78fa      	ldrb	r2, [r7, #3]
    cf7c:	78b9      	ldrb	r1, [r7, #2]
    cf7e:	793b      	ldrb	r3, [r7, #4]
    cf80:	4667      	mov	r7, ip
    cf82:	0209      	lsls	r1, r1, #8
    cf84:	4301      	orrs	r1, r0
    cf86:	0410      	lsls	r0, r2, #16
    cf88:	4308      	orrs	r0, r1
    cf8a:	061b      	lsls	r3, r3, #24
    cf8c:	4318      	orrs	r0, r3
    cf8e:	0032      	movs	r2, r6
    cf90:	2308      	movs	r3, #8
    cf92:	0029      	movs	r1, r5
    cf94:	2f04      	cmp	r7, #4
    cf96:	d112      	bne.n	cfbe <LorawanNotifyAppOnRxdone+0x92>
    cf98:	4d0c      	ldr	r5, [pc, #48]	; (cfcc <LorawanNotifyAppOnRxdone+0xa0>)
    cf9a:	47a8      	blx	r5
    cf9c:	23ea      	movs	r3, #234	; 0xea
    cf9e:	005b      	lsls	r3, r3, #1
    cfa0:	5ce3      	ldrb	r3, [r4, r3]
    cfa2:	2b00      	cmp	r3, #0
    cfa4:	d102      	bne.n	cfac <LorawanNotifyAppOnRxdone+0x80>
    cfa6:	2008      	movs	r0, #8
    cfa8:	4b09      	ldr	r3, [pc, #36]	; (cfd0 <LorawanNotifyAppOnRxdone+0xa4>)
    cfaa:	4798      	blx	r3
    cfac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cfae:	2b04      	cmp	r3, #4
    cfb0:	d1cc      	bne.n	cf4c <LorawanNotifyAppOnRxdone+0x20>
    cfb2:	0023      	movs	r3, r4
    cfb4:	33e8      	adds	r3, #232	; 0xe8
    cfb6:	7818      	ldrb	r0, [r3, #0]
    cfb8:	4b06      	ldr	r3, [pc, #24]	; (cfd4 <LorawanNotifyAppOnRxdone+0xa8>)
    cfba:	4798      	blx	r3
    cfbc:	e7c6      	b.n	cf4c <LorawanNotifyAppOnRxdone+0x20>
    cfbe:	4d06      	ldr	r5, [pc, #24]	; (cfd8 <LorawanNotifyAppOnRxdone+0xac>)
    cfc0:	47a8      	blx	r5
    cfc2:	e7eb      	b.n	cf9c <LorawanNotifyAppOnRxdone+0x70>
    cfc4:	200017bc 	.word	0x200017bc
    cfc8:	20001ab4 	.word	0x20001ab4
    cfcc:	0000f5b1 	.word	0x0000f5b1
    cfd0:	0000cb3d 	.word	0x0000cb3d
    cfd4:	00009915 	.word	0x00009915
    cfd8:	0000cee1 	.word	0x0000cee1

0000cfdc <LorawanSetReceiveWindow2Parameters>:
    cfdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    cfde:	466b      	mov	r3, sp
    cfe0:	1cdd      	adds	r5, r3, #3
    cfe2:	9001      	str	r0, [sp, #4]
    cfe4:	7029      	strb	r1, [r5, #0]
    cfe6:	2001      	movs	r0, #1
    cfe8:	a901      	add	r1, sp, #4
    cfea:	4c09      	ldr	r4, [pc, #36]	; (d010 <LorawanSetReceiveWindow2Parameters+0x34>)
    cfec:	47a0      	blx	r4
    cfee:	2808      	cmp	r0, #8
    cff0:	d002      	beq.n	cff8 <LorawanSetReceiveWindow2Parameters+0x1c>
    cff2:	240a      	movs	r4, #10
    cff4:	0020      	movs	r0, r4
    cff6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    cff8:	0029      	movs	r1, r5
    cffa:	200f      	movs	r0, #15
    cffc:	47a0      	blx	r4
    cffe:	0004      	movs	r4, r0
    d000:	2808      	cmp	r0, #8
    d002:	d1f6      	bne.n	cff2 <LorawanSetReceiveWindow2Parameters+0x16>
    d004:	7829      	ldrb	r1, [r5, #0]
    d006:	9801      	ldr	r0, [sp, #4]
    d008:	4b02      	ldr	r3, [pc, #8]	; (d014 <LorawanSetReceiveWindow2Parameters+0x38>)
    d00a:	4798      	blx	r3
    d00c:	e7f2      	b.n	cff4 <LorawanSetReceiveWindow2Parameters+0x18>
    d00e:	46c0      	nop			; (mov r8, r8)
    d010:	00008c15 	.word	0x00008c15
    d014:	0000bff1 	.word	0x0000bff1

0000d018 <LorawanSetFrequency>:
    d018:	b507      	push	{r0, r1, r2, lr}
    d01a:	466b      	mov	r3, sp
    d01c:	9100      	str	r1, [sp, #0]
    d01e:	7118      	strb	r0, [r3, #4]
    d020:	4669      	mov	r1, sp
    d022:	2000      	movs	r0, #0
    d024:	4b01      	ldr	r3, [pc, #4]	; (d02c <LorawanSetFrequency+0x14>)
    d026:	4798      	blx	r3
    d028:	bd0e      	pop	{r1, r2, r3, pc}
    d02a:	46c0      	nop			; (mov r8, r8)
    d02c:	00008d21 	.word	0x00008d21

0000d030 <LorawanGetReceiveWindow2Parameters>:
    d030:	4a06      	ldr	r2, [pc, #24]	; (d04c <LorawanGetReceiveWindow2Parameters+0x1c>)
    d032:	0013      	movs	r3, r2
    d034:	336e      	adds	r3, #110	; 0x6e
    d036:	781b      	ldrb	r3, [r3, #0]
    d038:	7103      	strb	r3, [r0, #4]
    d03a:	0013      	movs	r3, r2
    d03c:	326c      	adds	r2, #108	; 0x6c
    d03e:	336a      	adds	r3, #106	; 0x6a
    d040:	8819      	ldrh	r1, [r3, #0]
    d042:	8813      	ldrh	r3, [r2, #0]
    d044:	041b      	lsls	r3, r3, #16
    d046:	430b      	orrs	r3, r1
    d048:	6003      	str	r3, [r0, #0]
    d04a:	4770      	bx	lr
    d04c:	200017bc 	.word	0x200017bc

0000d050 <LORAWAN_GetAttr>:
    d050:	b530      	push	{r4, r5, lr}
    d052:	000b      	movs	r3, r1
    d054:	b085      	sub	sp, #20
    d056:	0014      	movs	r4, r2
    d058:	2838      	cmp	r0, #56	; 0x38
    d05a:	d83a      	bhi.n	d0d2 <LORAWAN_GetAttr+0x82>
    d05c:	f004 fb7a 	bl	11754 <__gnu_thumb1_case_uhi>
    d060:	005b003c 	.word	0x005b003c
    d064:	006f005f 	.word	0x006f005f
    d068:	006b0067 	.word	0x006b0067
    d06c:	00780073 	.word	0x00780073
    d070:	007f007c 	.word	0x007f007c
    d074:	00860082 	.word	0x00860082
    d078:	00910089 	.word	0x00910089
    d07c:	00970094 	.word	0x00970094
    d080:	009f009c 	.word	0x009f009c
    d084:	00a500a2 	.word	0x00a500a2
    d088:	00d100a8 	.word	0x00d100a8
    d08c:	00ab00ae 	.word	0x00ab00ae
    d090:	00d800de 	.word	0x00d800de
    d094:	00c700cc 	.word	0x00c700cc
    d098:	003900c0 	.word	0x003900c0
    d09c:	00ba008e 	.word	0x00ba008e
    d0a0:	00b700be 	.word	0x00b700be
    d0a4:	00d500b4 	.word	0x00d500b4
    d0a8:	004200db 	.word	0x004200db
    d0ac:	00440042 	.word	0x00440042
    d0b0:	010f00e7 	.word	0x010f00e7
    d0b4:	00f90106 	.word	0x00f90106
    d0b8:	0039011c 	.word	0x0039011c
    d0bc:	012a0152 	.word	0x012a0152
    d0c0:	0133012e 	.word	0x0133012e
    d0c4:	013d0138 	.word	0x013d0138
    d0c8:	01440141 	.word	0x01440141
    d0cc:	014f0147 	.word	0x014f0147
    d0d0:	0156      	.short	0x0156
    d0d2:	200a      	movs	r0, #10
    d0d4:	b005      	add	sp, #20
    d0d6:	bd30      	pop	{r4, r5, pc}
    d0d8:	2208      	movs	r2, #8
    d0da:	498f      	ldr	r1, [pc, #572]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d0dc:	315d      	adds	r1, #93	; 0x5d
    d0de:	0020      	movs	r0, r4
    d0e0:	4b8e      	ldr	r3, [pc, #568]	; (d31c <LORAWAN_GetAttr+0x2cc>)
    d0e2:	4798      	blx	r3
    d0e4:	2008      	movs	r0, #8
    d0e6:	e7f5      	b.n	d0d4 <LORAWAN_GetAttr+0x84>
    d0e8:	4669      	mov	r1, sp
    d0ea:	4b8d      	ldr	r3, [pc, #564]	; (d320 <LORAWAN_GetAttr+0x2d0>)
    d0ec:	201d      	movs	r0, #29
    d0ee:	4798      	blx	r3
    d0f0:	4b89      	ldr	r3, [pc, #548]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d0f2:	a902      	add	r1, sp, #8
    d0f4:	33fe      	adds	r3, #254	; 0xfe
    d0f6:	8adb      	ldrh	r3, [r3, #22]
    d0f8:	2208      	movs	r2, #8
    d0fa:	808b      	strh	r3, [r1, #4]
    d0fc:	466b      	mov	r3, sp
    d0fe:	791b      	ldrb	r3, [r3, #4]
    d100:	718b      	strb	r3, [r1, #6]
    d102:	466b      	mov	r3, sp
    d104:	881b      	ldrh	r3, [r3, #0]
    d106:	800b      	strh	r3, [r1, #0]
    d108:	466b      	mov	r3, sp
    d10a:	885b      	ldrh	r3, [r3, #2]
    d10c:	804b      	strh	r3, [r1, #2]
    d10e:	466b      	mov	r3, sp
    d110:	795b      	ldrb	r3, [r3, #5]
    d112:	71cb      	strb	r3, [r1, #7]
    d114:	e7e3      	b.n	d0de <LORAWAN_GetAttr+0x8e>
    d116:	4980      	ldr	r1, [pc, #512]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d118:	2208      	movs	r2, #8
    d11a:	3155      	adds	r1, #85	; 0x55
    d11c:	e7df      	b.n	d0de <LORAWAN_GetAttr+0x8e>
    d11e:	4b7e      	ldr	r3, [pc, #504]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d120:	681a      	ldr	r2, [r3, #0]
    d122:	791b      	ldrb	r3, [r3, #4]
    d124:	0a12      	lsrs	r2, r2, #8
    d126:	061b      	lsls	r3, r3, #24
    d128:	4313      	orrs	r3, r2
    d12a:	6023      	str	r3, [r4, #0]
    d12c:	e7da      	b.n	d0e4 <LORAWAN_GetAttr+0x94>
    d12e:	497a      	ldr	r1, [pc, #488]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d130:	2210      	movs	r2, #16
    d132:	3105      	adds	r1, #5
    d134:	e7d3      	b.n	d0de <LORAWAN_GetAttr+0x8e>
    d136:	4978      	ldr	r1, [pc, #480]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d138:	2210      	movs	r2, #16
    d13a:	3115      	adds	r1, #21
    d13c:	e7cf      	b.n	d0de <LORAWAN_GetAttr+0x8e>
    d13e:	4976      	ldr	r1, [pc, #472]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d140:	2210      	movs	r2, #16
    d142:	3145      	adds	r1, #69	; 0x45
    d144:	e7cb      	b.n	d0de <LORAWAN_GetAttr+0x8e>
    d146:	4b74      	ldr	r3, [pc, #464]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d148:	337c      	adds	r3, #124	; 0x7c
    d14a:	781b      	ldrb	r3, [r3, #0]
    d14c:	069b      	lsls	r3, r3, #26
    d14e:	e039      	b.n	d1c4 <LORAWAN_GetAttr+0x174>
    d150:	4b71      	ldr	r3, [pc, #452]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d152:	33df      	adds	r3, #223	; 0xdf
    d154:	781b      	ldrb	r3, [r3, #0]
    d156:	e01d      	b.n	d194 <LORAWAN_GetAttr+0x144>
    d158:	4b6f      	ldr	r3, [pc, #444]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d15a:	33e1      	adds	r3, #225	; 0xe1
    d15c:	e7fa      	b.n	d154 <LORAWAN_GetAttr+0x104>
    d15e:	4b6e      	ldr	r3, [pc, #440]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d160:	33f7      	adds	r3, #247	; 0xf7
    d162:	e7f7      	b.n	d154 <LORAWAN_GetAttr+0x104>
    d164:	4b6c      	ldr	r3, [pc, #432]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d166:	3304      	adds	r3, #4
    d168:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    d16a:	e7de      	b.n	d12a <LORAWAN_GetAttr+0xda>
    d16c:	4b6a      	ldr	r3, [pc, #424]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d16e:	3308      	adds	r3, #8
    d170:	e7fa      	b.n	d168 <LORAWAN_GetAttr+0x118>
    d172:	4b69      	ldr	r3, [pc, #420]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d174:	33c8      	adds	r3, #200	; 0xc8
    d176:	881b      	ldrh	r3, [r3, #0]
    d178:	8023      	strh	r3, [r4, #0]
    d17a:	e7b3      	b.n	d0e4 <LORAWAN_GetAttr+0x94>
    d17c:	4b66      	ldr	r3, [pc, #408]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d17e:	33ca      	adds	r3, #202	; 0xca
    d180:	e7f9      	b.n	d176 <LORAWAN_GetAttr+0x126>
    d182:	4b65      	ldr	r3, [pc, #404]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d184:	33cc      	adds	r3, #204	; 0xcc
    d186:	e7f6      	b.n	d176 <LORAWAN_GetAttr+0x126>
    d188:	4b63      	ldr	r3, [pc, #396]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d18a:	33ce      	adds	r3, #206	; 0xce
    d18c:	e7f3      	b.n	d176 <LORAWAN_GetAttr+0x126>
    d18e:	4b62      	ldr	r3, [pc, #392]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d190:	33d0      	adds	r3, #208	; 0xd0
    d192:	881b      	ldrh	r3, [r3, #0]
    d194:	7023      	strb	r3, [r4, #0]
    d196:	e7a5      	b.n	d0e4 <LORAWAN_GetAttr+0x94>
    d198:	4b5f      	ldr	r3, [pc, #380]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d19a:	33d4      	adds	r3, #212	; 0xd4
    d19c:	e7da      	b.n	d154 <LORAWAN_GetAttr+0x104>
    d19e:	4b5e      	ldr	r3, [pc, #376]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d1a0:	33d5      	adds	r3, #213	; 0xd5
    d1a2:	e7d7      	b.n	d154 <LORAWAN_GetAttr+0x104>
    d1a4:	4b5c      	ldr	r3, [pc, #368]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d1a6:	33d2      	adds	r3, #210	; 0xd2
    d1a8:	e7e5      	b.n	d176 <LORAWAN_GetAttr+0x126>
    d1aa:	4b5b      	ldr	r3, [pc, #364]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d1ac:	33da      	adds	r3, #218	; 0xda
    d1ae:	e7d1      	b.n	d154 <LORAWAN_GetAttr+0x104>
    d1b0:	4b59      	ldr	r3, [pc, #356]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d1b2:	33d9      	adds	r3, #217	; 0xd9
    d1b4:	e7ce      	b.n	d154 <LORAWAN_GetAttr+0x104>
    d1b6:	4b58      	ldr	r3, [pc, #352]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d1b8:	33e0      	adds	r3, #224	; 0xe0
    d1ba:	e7cb      	b.n	d154 <LORAWAN_GetAttr+0x104>
    d1bc:	4b56      	ldr	r3, [pc, #344]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d1be:	337c      	adds	r3, #124	; 0x7c
    d1c0:	781b      	ldrb	r3, [r3, #0]
    d1c2:	06db      	lsls	r3, r3, #27
    d1c4:	0fdb      	lsrs	r3, r3, #31
    d1c6:	e7e5      	b.n	d194 <LORAWAN_GetAttr+0x144>
    d1c8:	4b53      	ldr	r3, [pc, #332]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d1ca:	33de      	adds	r3, #222	; 0xde
    d1cc:	e7c2      	b.n	d154 <LORAWAN_GetAttr+0x104>
    d1ce:	4b52      	ldr	r3, [pc, #328]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d1d0:	33dd      	adds	r3, #221	; 0xdd
    d1d2:	e7bf      	b.n	d154 <LORAWAN_GetAttr+0x104>
    d1d4:	4b50      	ldr	r3, [pc, #320]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d1d6:	3390      	adds	r3, #144	; 0x90
    d1d8:	781b      	ldrb	r3, [r3, #0]
    d1da:	e7cd      	b.n	d178 <LORAWAN_GetAttr+0x128>
    d1dc:	4b4e      	ldr	r3, [pc, #312]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d1de:	e7c3      	b.n	d168 <LORAWAN_GetAttr+0x118>
    d1e0:	2016      	movs	r0, #22
    d1e2:	781b      	ldrb	r3, [r3, #0]
    d1e4:	a902      	add	r1, sp, #8
    d1e6:	700b      	strb	r3, [r1, #0]
    d1e8:	4b4e      	ldr	r3, [pc, #312]	; (d324 <LORAWAN_GetAttr+0x2d4>)
    d1ea:	4798      	blx	r3
    d1ec:	e77a      	b.n	d0e4 <LORAWAN_GetAttr+0x94>
    d1ee:	781b      	ldrb	r3, [r3, #0]
    d1f0:	a902      	add	r1, sp, #8
    d1f2:	700b      	strb	r3, [r1, #0]
    d1f4:	2012      	movs	r0, #18
    d1f6:	e7f7      	b.n	d1e8 <LORAWAN_GetAttr+0x198>
    d1f8:	781b      	ldrb	r3, [r3, #0]
    d1fa:	a902      	add	r1, sp, #8
    d1fc:	700b      	strb	r3, [r1, #0]
    d1fe:	2000      	movs	r0, #0
    d200:	e7f2      	b.n	d1e8 <LORAWAN_GetAttr+0x198>
    d202:	0010      	movs	r0, r2
    d204:	4b48      	ldr	r3, [pc, #288]	; (d328 <LORAWAN_GetAttr+0x2d8>)
    d206:	4798      	blx	r3
    d208:	e76c      	b.n	d0e4 <LORAWAN_GetAttr+0x94>
    d20a:	4b43      	ldr	r3, [pc, #268]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d20c:	33f6      	adds	r3, #246	; 0xf6
    d20e:	e7a1      	b.n	d154 <LORAWAN_GetAttr+0x104>
    d210:	4b41      	ldr	r3, [pc, #260]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d212:	33f4      	adds	r3, #244	; 0xf4
    d214:	e79e      	b.n	d154 <LORAWAN_GetAttr+0x104>
    d216:	4b40      	ldr	r3, [pc, #256]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d218:	33f5      	adds	r3, #245	; 0xf5
    d21a:	e79b      	b.n	d154 <LORAWAN_GetAttr+0x104>
    d21c:	21fa      	movs	r1, #250	; 0xfa
    d21e:	4b3e      	ldr	r3, [pc, #248]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d220:	0089      	lsls	r1, r1, #2
    d222:	3388      	adds	r3, #136	; 0x88
    d224:	6818      	ldr	r0, [r3, #0]
    d226:	4b41      	ldr	r3, [pc, #260]	; (d32c <LORAWAN_GetAttr+0x2dc>)
    d228:	4798      	blx	r3
    d22a:	8020      	strh	r0, [r4, #0]
    d22c:	e75a      	b.n	d0e4 <LORAWAN_GetAttr+0x94>
    d22e:	780a      	ldrb	r2, [r1, #0]
    d230:	200a      	movs	r0, #10
    d232:	2a03      	cmp	r2, #3
    d234:	d900      	bls.n	d238 <LORAWAN_GetAttr+0x1e8>
    d236:	e74d      	b.n	d0d4 <LORAWAN_GetAttr+0x84>
    d238:	2322      	movs	r3, #34	; 0x22
    d23a:	4937      	ldr	r1, [pc, #220]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d23c:	33ff      	adds	r3, #255	; 0xff
    d23e:	5cc9      	ldrb	r1, [r1, r3]
    d240:	3b21      	subs	r3, #33	; 0x21
    d242:	3bff      	subs	r3, #255	; 0xff
    d244:	4093      	lsls	r3, r2
    d246:	400b      	ands	r3, r1
    d248:	1e5a      	subs	r2, r3, #1
    d24a:	4193      	sbcs	r3, r2
    d24c:	7023      	strb	r3, [r4, #0]
    d24e:	3802      	subs	r0, #2
    d250:	e740      	b.n	d0d4 <LORAWAN_GetAttr+0x84>
    d252:	780b      	ldrb	r3, [r1, #0]
    d254:	200a      	movs	r0, #10
    d256:	2b03      	cmp	r3, #3
    d258:	d900      	bls.n	d25c <LORAWAN_GetAttr+0x20c>
    d25a:	e73b      	b.n	d0d4 <LORAWAN_GetAttr+0x84>
    d25c:	212c      	movs	r1, #44	; 0x2c
    d25e:	4359      	muls	r1, r3
    d260:	3139      	adds	r1, #57	; 0x39
    d262:	4b2d      	ldr	r3, [pc, #180]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d264:	31ff      	adds	r1, #255	; 0xff
    d266:	18c9      	adds	r1, r1, r3
    d268:	2210      	movs	r2, #16
    d26a:	e738      	b.n	d0de <LORAWAN_GetAttr+0x8e>
    d26c:	780b      	ldrb	r3, [r1, #0]
    d26e:	200a      	movs	r0, #10
    d270:	2b03      	cmp	r3, #3
    d272:	d900      	bls.n	d276 <LORAWAN_GetAttr+0x226>
    d274:	e72e      	b.n	d0d4 <LORAWAN_GetAttr+0x84>
    d276:	212c      	movs	r1, #44	; 0x2c
    d278:	4359      	muls	r1, r3
    d27a:	3129      	adds	r1, #41	; 0x29
    d27c:	e7f1      	b.n	d262 <LORAWAN_GetAttr+0x212>
    d27e:	780b      	ldrb	r3, [r1, #0]
    d280:	200a      	movs	r0, #10
    d282:	2b03      	cmp	r3, #3
    d284:	d900      	bls.n	d288 <LORAWAN_GetAttr+0x238>
    d286:	e725      	b.n	d0d4 <LORAWAN_GetAttr+0x84>
    d288:	212c      	movs	r1, #44	; 0x2c
    d28a:	4359      	muls	r1, r3
    d28c:	4b22      	ldr	r3, [pc, #136]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d28e:	3125      	adds	r1, #37	; 0x25
    d290:	31ff      	adds	r1, #255	; 0xff
    d292:	18c9      	adds	r1, r1, r3
    d294:	2204      	movs	r2, #4
    d296:	e722      	b.n	d0de <LORAWAN_GetAttr+0x8e>
    d298:	780a      	ldrb	r2, [r1, #0]
    d29a:	200a      	movs	r0, #10
    d29c:	2a03      	cmp	r2, #3
    d29e:	d900      	bls.n	d2a2 <LORAWAN_GetAttr+0x252>
    d2a0:	e718      	b.n	d0d4 <LORAWAN_GetAttr+0x84>
    d2a2:	232c      	movs	r3, #44	; 0x2c
    d2a4:	435a      	muls	r2, r3
    d2a6:	4b1c      	ldr	r3, [pc, #112]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d2a8:	189b      	adds	r3, r3, r2
    d2aa:	3349      	adds	r3, #73	; 0x49
    d2ac:	33ff      	adds	r3, #255	; 0xff
    d2ae:	881b      	ldrh	r3, [r3, #0]
    d2b0:	8023      	strh	r3, [r4, #0]
    d2b2:	e7cc      	b.n	d24e <LORAWAN_GetAttr+0x1fe>
    d2b4:	0010      	movs	r0, r2
    d2b6:	4b1e      	ldr	r3, [pc, #120]	; (d330 <LORAWAN_GetAttr+0x2e0>)
    d2b8:	4798      	blx	r3
    d2ba:	e70b      	b.n	d0d4 <LORAWAN_GetAttr+0x84>
    d2bc:	0011      	movs	r1, r2
    d2be:	4b18      	ldr	r3, [pc, #96]	; (d320 <LORAWAN_GetAttr+0x2d0>)
    d2c0:	201f      	movs	r0, #31
    d2c2:	4798      	blx	r3
    d2c4:	e70e      	b.n	d0e4 <LORAWAN_GetAttr+0x94>
    d2c6:	4b14      	ldr	r3, [pc, #80]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d2c8:	338c      	adds	r3, #140	; 0x8c
    d2ca:	781b      	ldrb	r3, [r3, #0]
    d2cc:	071b      	lsls	r3, r3, #28
    d2ce:	e779      	b.n	d1c4 <LORAWAN_GetAttr+0x174>
    d2d0:	4b11      	ldr	r3, [pc, #68]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d2d2:	338c      	adds	r3, #140	; 0x8c
    d2d4:	781b      	ldrb	r3, [r3, #0]
    d2d6:	07db      	lsls	r3, r3, #31
    d2d8:	e774      	b.n	d1c4 <LORAWAN_GetAttr+0x174>
    d2da:	2031      	movs	r0, #49	; 0x31
    d2dc:	4b11      	ldr	r3, [pc, #68]	; (d324 <LORAWAN_GetAttr+0x2d4>)
    d2de:	4798      	blx	r3
    d2e0:	e6f8      	b.n	d0d4 <LORAWAN_GetAttr+0x84>
    d2e2:	4914      	ldr	r1, [pc, #80]	; (d334 <LORAWAN_GetAttr+0x2e4>)
    d2e4:	2026      	movs	r0, #38	; 0x26
    d2e6:	e7f9      	b.n	d2dc <LORAWAN_GetAttr+0x28c>
    d2e8:	4b0b      	ldr	r3, [pc, #44]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d2ea:	33dc      	adds	r3, #220	; 0xdc
    d2ec:	e732      	b.n	d154 <LORAWAN_GetAttr+0x104>
    d2ee:	4b12      	ldr	r3, [pc, #72]	; (d338 <LORAWAN_GetAttr+0x2e8>)
    d2f0:	4798      	blx	r3
    d2f2:	4b12      	ldr	r3, [pc, #72]	; (d33c <LORAWAN_GetAttr+0x2ec>)
    d2f4:	0005      	movs	r5, r0
    d2f6:	4798      	blx	r3
    d2f8:	1b40      	subs	r0, r0, r5
    d2fa:	7020      	strb	r0, [r4, #0]
    d2fc:	e6f2      	b.n	d0e4 <LORAWAN_GetAttr+0x94>
    d2fe:	2100      	movs	r1, #0
    d300:	2020      	movs	r0, #32
    d302:	e7eb      	b.n	d2dc <LORAWAN_GetAttr+0x28c>
    d304:	4b04      	ldr	r3, [pc, #16]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d306:	33ff      	adds	r3, #255	; 0xff
    d308:	7c5b      	ldrb	r3, [r3, #17]
    d30a:	e71f      	b.n	d14c <LORAWAN_GetAttr+0xfc>
    d30c:	23f0      	movs	r3, #240	; 0xf0
    d30e:	4a02      	ldr	r2, [pc, #8]	; (d318 <LORAWAN_GetAttr+0x2c8>)
    d310:	005b      	lsls	r3, r3, #1
    d312:	5cd3      	ldrb	r3, [r2, r3]
    d314:	e73e      	b.n	d194 <LORAWAN_GetAttr+0x144>
    d316:	46c0      	nop			; (mov r8, r8)
    d318:	200017bc 	.word	0x200017bc
    d31c:	00014ecd 	.word	0x00014ecd
    d320:	0000fc5d 	.word	0x0000fc5d
    d324:	00008bf9 	.word	0x00008bf9
    d328:	0000d031 	.word	0x0000d031
    d32c:	00011769 	.word	0x00011769
    d330:	00008e69 	.word	0x00008e69
    d334:	2000189b 	.word	0x2000189b
    d338:	0000b671 	.word	0x0000b671
    d33c:	0000b719 	.word	0x0000b719

0000d340 <LORAWAN_TxDone>:
    d340:	b5f0      	push	{r4, r5, r6, r7, lr}
    d342:	6843      	ldr	r3, [r0, #4]
    d344:	b08f      	sub	sp, #60	; 0x3c
    d346:	ad07      	add	r5, sp, #28
    d348:	7804      	ldrb	r4, [r0, #0]
    d34a:	9302      	str	r3, [sp, #8]
    d34c:	2100      	movs	r1, #0
    d34e:	4b84      	ldr	r3, [pc, #528]	; (d560 <LORAWAN_TxDone+0x220>)
    d350:	002a      	movs	r2, r5
    d352:	2027      	movs	r0, #39	; 0x27
    d354:	4798      	blx	r3
    d356:	4f83      	ldr	r7, [pc, #524]	; (d564 <LORAWAN_TxDone+0x224>)
    d358:	0039      	movs	r1, r7
    d35a:	317c      	adds	r1, #124	; 0x7c
    d35c:	780b      	ldrb	r3, [r1, #0]
    d35e:	2b7f      	cmp	r3, #127	; 0x7f
    d360:	d900      	bls.n	d364 <LORAWAN_TxDone+0x24>
    d362:	e24a      	b.n	d7fa <LORAWAN_TxDone+0x4ba>
    d364:	4a80      	ldr	r2, [pc, #512]	; (d568 <LORAWAN_TxDone+0x228>)
    d366:	7810      	ldrb	r0, [r2, #0]
    d368:	2804      	cmp	r0, #4
    d36a:	d10b      	bne.n	d384 <LORAWAN_TxDone+0x44>
    d36c:	220e      	movs	r2, #14
    d36e:	4393      	bics	r3, r2
    d370:	700b      	strb	r3, [r1, #0]
    d372:	3017      	adds	r0, #23
    d374:	07db      	lsls	r3, r3, #31
    d376:	d500      	bpl.n	d37a <LORAWAN_TxDone+0x3a>
    d378:	e0b2      	b.n	d4e0 <LORAWAN_TxDone+0x1a0>
    d37a:	201b      	movs	r0, #27
    d37c:	4b7b      	ldr	r3, [pc, #492]	; (d56c <LORAWAN_TxDone+0x22c>)
    d37e:	4798      	blx	r3
    d380:	b00f      	add	sp, #60	; 0x3c
    d382:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d384:	7813      	ldrb	r3, [r2, #0]
    d386:	2b02      	cmp	r3, #2
    d388:	d1fa      	bne.n	d380 <LORAWAN_TxDone+0x40>
    d38a:	33d5      	adds	r3, #213	; 0xd5
    d38c:	33ff      	adds	r3, #255	; 0xff
    d38e:	5cfa      	ldrb	r2, [r7, r3]
    d390:	2a00      	cmp	r2, #0
    d392:	d005      	beq.n	d3a0 <LORAWAN_TxDone+0x60>
    d394:	2200      	movs	r2, #0
    d396:	4976      	ldr	r1, [pc, #472]	; (d570 <LORAWAN_TxDone+0x230>)
    d398:	54fa      	strb	r2, [r7, r3]
    d39a:	200b      	movs	r0, #11
    d39c:	4b75      	ldr	r3, [pc, #468]	; (d574 <LORAWAN_TxDone+0x234>)
    d39e:	4798      	blx	r3
    d3a0:	2c07      	cmp	r4, #7
    d3a2:	d000      	beq.n	d3a6 <LORAWAN_TxDone+0x66>
    d3a4:	e0a0      	b.n	d4e8 <LORAWAN_TxDone+0x1a8>
    d3a6:	79eb      	ldrb	r3, [r5, #7]
    d3a8:	2b00      	cmp	r3, #0
    d3aa:	d0e9      	beq.n	d380 <LORAWAN_TxDone+0x40>
    d3ac:	003b      	movs	r3, r7
    d3ae:	338c      	adds	r3, #140	; 0x8c
    d3b0:	7818      	ldrb	r0, [r3, #0]
    d3b2:	003e      	movs	r6, r7
    d3b4:	2304      	movs	r3, #4
    d3b6:	36fe      	adds	r6, #254	; 0xfe
    d3b8:	4018      	ands	r0, r3
    d3ba:	4d6f      	ldr	r5, [pc, #444]	; (d578 <LORAWAN_TxDone+0x238>)
    d3bc:	d005      	beq.n	d3ca <LORAWAN_TxDone+0x8a>
    d3be:	2000      	movs	r0, #0
    d3c0:	2109      	movs	r1, #9
    d3c2:	82b0      	strh	r0, [r6, #20]
    d3c4:	47a8      	blx	r5
    d3c6:	0020      	movs	r0, r4
    d3c8:	e7d8      	b.n	d37c <LORAWAN_TxDone+0x3c>
    d3ca:	8ab3      	ldrh	r3, [r6, #20]
    d3cc:	2109      	movs	r1, #9
    d3ce:	3301      	adds	r3, #1
    d3d0:	82b3      	strh	r3, [r6, #20]
    d3d2:	47a8      	blx	r5
    d3d4:	8af3      	ldrh	r3, [r6, #22]
    d3d6:	4a69      	ldr	r2, [pc, #420]	; (d57c <LORAWAN_TxDone+0x23c>)
    d3d8:	4293      	cmp	r3, r2
    d3da:	d002      	beq.n	d3e2 <LORAWAN_TxDone+0xa2>
    d3dc:	8ab2      	ldrh	r2, [r6, #20]
    d3de:	429a      	cmp	r2, r3
    d3e0:	d266      	bcs.n	d4b0 <LORAWAN_TxDone+0x170>
    d3e2:	23ef      	movs	r3, #239	; 0xef
    d3e4:	005b      	lsls	r3, r3, #1
    d3e6:	5cfb      	ldrb	r3, [r7, r3]
    d3e8:	2b00      	cmp	r3, #0
    d3ea:	d061      	beq.n	d4b0 <LORAWAN_TxDone+0x170>
    d3ec:	2601      	movs	r6, #1
    d3ee:	003b      	movs	r3, r7
    d3f0:	a905      	add	r1, sp, #20
    d3f2:	700e      	strb	r6, [r1, #0]
    d3f4:	33e1      	adds	r3, #225	; 0xe1
    d3f6:	781b      	ldrb	r3, [r3, #0]
    d3f8:	aa0b      	add	r2, sp, #44	; 0x2c
    d3fa:	704b      	strb	r3, [r1, #1]
    d3fc:	003b      	movs	r3, r7
    d3fe:	33df      	adds	r3, #223	; 0xdf
    d400:	781b      	ldrb	r3, [r3, #0]
    d402:	202f      	movs	r0, #47	; 0x2f
    d404:	708b      	strb	r3, [r1, #2]
    d406:	4b5e      	ldr	r3, [pc, #376]	; (d580 <LORAWAN_TxDone+0x240>)
    d408:	4798      	blx	r3
    d40a:	2808      	cmp	r0, #8
    d40c:	d135      	bne.n	d47a <LORAWAN_TxDone+0x13a>
    d40e:	a806      	add	r0, sp, #24
    d410:	4b5c      	ldr	r3, [pc, #368]	; (d584 <LORAWAN_TxDone+0x244>)
    d412:	7006      	strb	r6, [r0, #0]
    d414:	4798      	blx	r3
    d416:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d418:	990c      	ldr	r1, [sp, #48]	; 0x30
    d41a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    d41c:	4b5a      	ldr	r3, [pc, #360]	; (d588 <LORAWAN_TxDone+0x248>)
    d41e:	4798      	blx	r3
    d420:	003b      	movs	r3, r7
    d422:	33c6      	adds	r3, #198	; 0xc6
    d424:	881b      	ldrh	r3, [r3, #0]
    d426:	a809      	add	r0, sp, #36	; 0x24
    d428:	7003      	strb	r3, [r0, #0]
    d42a:	4b58      	ldr	r3, [pc, #352]	; (d58c <LORAWAN_TxDone+0x24c>)
    d42c:	6043      	str	r3, [r0, #4]
    d42e:	4b58      	ldr	r3, [pc, #352]	; (d590 <LORAWAN_TxDone+0x250>)
    d430:	4798      	blx	r3
    d432:	1e04      	subs	r4, r0, #0
    d434:	d108      	bne.n	d448 <LORAWAN_TxDone+0x108>
    d436:	220e      	movs	r2, #14
    d438:	377c      	adds	r7, #124	; 0x7c
    d43a:	783b      	ldrb	r3, [r7, #0]
    d43c:	4393      	bics	r3, r2
    d43e:	001a      	movs	r2, r3
    d440:	2302      	movs	r3, #2
    d442:	4313      	orrs	r3, r2
    d444:	703b      	strb	r3, [r7, #0]
    d446:	e79b      	b.n	d380 <LORAWAN_TxDone+0x40>
    d448:	003b      	movs	r3, r7
    d44a:	338c      	adds	r3, #140	; 0x8c
    d44c:	7818      	ldrb	r0, [r3, #0]
    d44e:	003b      	movs	r3, r7
    d450:	4030      	ands	r0, r6
    d452:	33fe      	adds	r3, #254	; 0xfe
    d454:	4e4f      	ldr	r6, [pc, #316]	; (d594 <LORAWAN_TxDone+0x254>)
    d456:	4f50      	ldr	r7, [pc, #320]	; (d598 <LORAWAN_TxDone+0x258>)
    d458:	2800      	cmp	r0, #0
    d45a:	d009      	beq.n	d470 <LORAWAN_TxDone+0x130>
    d45c:	2000      	movs	r0, #0
    d45e:	2109      	movs	r1, #9
    d460:	8298      	strh	r0, [r3, #20]
    d462:	47a8      	blx	r5
    d464:	4b4d      	ldr	r3, [pc, #308]	; (d59c <LORAWAN_TxDone+0x25c>)
    d466:	4798      	blx	r3
    d468:	47b8      	blx	r7
    d46a:	0020      	movs	r0, r4
    d46c:	47b0      	blx	r6
    d46e:	e787      	b.n	d380 <LORAWAN_TxDone+0x40>
    d470:	2109      	movs	r1, #9
    d472:	8298      	strh	r0, [r3, #20]
    d474:	47a8      	blx	r5
    d476:	4b4a      	ldr	r3, [pc, #296]	; (d5a0 <LORAWAN_TxDone+0x260>)
    d478:	e7f5      	b.n	d466 <LORAWAN_TxDone+0x126>
    d47a:	003b      	movs	r3, r7
    d47c:	338c      	adds	r3, #140	; 0x8c
    d47e:	7818      	ldrb	r0, [r3, #0]
    d480:	003b      	movs	r3, r7
    d482:	4006      	ands	r6, r0
    d484:	4c43      	ldr	r4, [pc, #268]	; (d594 <LORAWAN_TxDone+0x254>)
    d486:	33fe      	adds	r3, #254	; 0xfe
    d488:	4f43      	ldr	r7, [pc, #268]	; (d598 <LORAWAN_TxDone+0x258>)
    d48a:	2e00      	cmp	r6, #0
    d48c:	d00a      	beq.n	d4a4 <LORAWAN_TxDone+0x164>
    d48e:	2600      	movs	r6, #0
    d490:	2109      	movs	r1, #9
    d492:	0030      	movs	r0, r6
    d494:	829e      	strh	r6, [r3, #20]
    d496:	47a8      	blx	r5
    d498:	4b40      	ldr	r3, [pc, #256]	; (d59c <LORAWAN_TxDone+0x25c>)
    d49a:	4798      	blx	r3
    d49c:	47b8      	blx	r7
    d49e:	0030      	movs	r0, r6
    d4a0:	47a0      	blx	r4
    d4a2:	e76d      	b.n	d380 <LORAWAN_TxDone+0x40>
    d4a4:	2109      	movs	r1, #9
    d4a6:	0030      	movs	r0, r6
    d4a8:	829e      	strh	r6, [r3, #20]
    d4aa:	47a8      	blx	r5
    d4ac:	4b3c      	ldr	r3, [pc, #240]	; (d5a0 <LORAWAN_TxDone+0x260>)
    d4ae:	e7f4      	b.n	d49a <LORAWAN_TxDone+0x15a>
    d4b0:	003b      	movs	r3, r7
    d4b2:	2000      	movs	r0, #0
    d4b4:	33fe      	adds	r3, #254	; 0xfe
    d4b6:	2109      	movs	r1, #9
    d4b8:	8298      	strh	r0, [r3, #20]
    d4ba:	47a8      	blx	r5
    d4bc:	003a      	movs	r2, r7
    d4be:	210e      	movs	r1, #14
    d4c0:	327c      	adds	r2, #124	; 0x7c
    d4c2:	7813      	ldrb	r3, [r2, #0]
    d4c4:	378c      	adds	r7, #140	; 0x8c
    d4c6:	438b      	bics	r3, r1
    d4c8:	7013      	strb	r3, [r2, #0]
    d4ca:	2220      	movs	r2, #32
    d4cc:	783b      	ldrb	r3, [r7, #0]
    d4ce:	4c32      	ldr	r4, [pc, #200]	; (d598 <LORAWAN_TxDone+0x258>)
    d4d0:	4393      	bics	r3, r2
    d4d2:	703b      	strb	r3, [r7, #0]
    d4d4:	07db      	lsls	r3, r3, #31
    d4d6:	d505      	bpl.n	d4e4 <LORAWAN_TxDone+0x1a4>
    d4d8:	4b30      	ldr	r3, [pc, #192]	; (d59c <LORAWAN_TxDone+0x25c>)
    d4da:	4798      	blx	r3
    d4dc:	47a0      	blx	r4
    d4de:	2007      	movs	r0, #7
    d4e0:	4b2c      	ldr	r3, [pc, #176]	; (d594 <LORAWAN_TxDone+0x254>)
    d4e2:	e74c      	b.n	d37e <LORAWAN_TxDone+0x3e>
    d4e4:	4b2e      	ldr	r3, [pc, #184]	; (d5a0 <LORAWAN_TxDone+0x260>)
    d4e6:	e7f8      	b.n	d4da <LORAWAN_TxDone+0x19a>
    d4e8:	2c00      	cmp	r4, #0
    d4ea:	d000      	beq.n	d4ee <LORAWAN_TxDone+0x1ae>
    d4ec:	e748      	b.n	d380 <LORAWAN_TxDone+0x40>
    d4ee:	003b      	movs	r3, r7
    d4f0:	33fc      	adds	r3, #252	; 0xfc
    d4f2:	681d      	ldr	r5, [r3, #0]
    d4f4:	003b      	movs	r3, r7
    d4f6:	33fe      	adds	r3, #254	; 0xfe
    d4f8:	829c      	strh	r4, [r3, #20]
    d4fa:	0020      	movs	r0, r4
    d4fc:	2109      	movs	r1, #9
    d4fe:	4c1e      	ldr	r4, [pc, #120]	; (d578 <LORAWAN_TxDone+0x238>)
    d500:	47a0      	blx	r4
    d502:	003b      	movs	r3, r7
    d504:	003e      	movs	r6, r7
    d506:	33db      	adds	r3, #219	; 0xdb
    d508:	781b      	ldrb	r3, [r3, #0]
    d50a:	367c      	adds	r6, #124	; 0x7c
    d50c:	2b00      	cmp	r3, #0
    d50e:	d149      	bne.n	d5a4 <LORAWAN_TxDone+0x264>
    d510:	003a      	movs	r2, r7
    d512:	32dc      	adds	r2, #220	; 0xdc
    d514:	7812      	ldrb	r2, [r2, #0]
    d516:	2a00      	cmp	r2, #0
    d518:	d144      	bne.n	d5a4 <LORAWAN_TxDone+0x264>
    d51a:	7832      	ldrb	r2, [r6, #0]
    d51c:	3301      	adds	r3, #1
    d51e:	421a      	tst	r2, r3
    d520:	d04f      	beq.n	d5c2 <LORAWAN_TxDone+0x282>
    d522:	1d39      	adds	r1, r7, #4
    d524:	6fca      	ldr	r2, [r1, #124]	; 0x7c
    d526:	18d2      	adds	r2, r2, r3
    d528:	67ca      	str	r2, [r1, #124]	; 0x7c
    d52a:	21f0      	movs	r1, #240	; 0xf0
    d52c:	0049      	lsls	r1, r1, #1
    d52e:	5c79      	ldrb	r1, [r7, r1]
    d530:	2900      	cmp	r1, #0
    d532:	d003      	beq.n	d53c <LORAWAN_TxDone+0x1fc>
    d534:	408b      	lsls	r3, r1
    d536:	3b01      	subs	r3, #1
    d538:	421a      	tst	r2, r3
    d53a:	d102      	bne.n	d542 <LORAWAN_TxDone+0x202>
    d53c:	2116      	movs	r1, #22
    d53e:	2000      	movs	r0, #0
    d540:	47a0      	blx	r4
    d542:	782b      	ldrb	r3, [r5, #0]
    d544:	003a      	movs	r2, r7
    d546:	2b01      	cmp	r3, #1
    d548:	d106      	bne.n	d558 <LORAWAN_TxDone+0x218>
    d54a:	328c      	adds	r2, #140	; 0x8c
    d54c:	7811      	ldrb	r1, [r2, #0]
    d54e:	430b      	orrs	r3, r1
    d550:	7013      	strb	r3, [r2, #0]
    d552:	003a      	movs	r2, r7
    d554:	32dc      	adds	r2, #220	; 0xdc
    d556:	e000      	b.n	d55a <LORAWAN_TxDone+0x21a>
    d558:	32db      	adds	r2, #219	; 0xdb
    d55a:	7813      	ldrb	r3, [r2, #0]
    d55c:	3301      	adds	r3, #1
    d55e:	e02f      	b.n	d5c0 <LORAWAN_TxDone+0x280>
    d560:	0000d051 	.word	0x0000d051
    d564:	200017bc 	.word	0x200017bc
    d568:	200019a0 	.word	0x200019a0
    d56c:	0000c069 	.word	0x0000c069
    d570:	20001991 	.word	0x20001991
    d574:	0000fd4d 	.word	0x0000fd4d
    d578:	000091e1 	.word	0x000091e1
    d57c:	0000ffff 	.word	0x0000ffff
    d580:	00008bf9 	.word	0x00008bf9
    d584:	00010f71 	.word	0x00010f71
    d588:	0000c5cd 	.word	0x0000c5cd
    d58c:	200019b1 	.word	0x200019b1
    d590:	0001069d 	.word	0x0001069d
    d594:	0000cb3d 	.word	0x0000cb3d
    d598:	0000b62d 	.word	0x0000b62d
    d59c:	0000c015 	.word	0x0000c015
    d5a0:	0000c045 	.word	0x0000c045
    d5a4:	003a      	movs	r2, r7
    d5a6:	327c      	adds	r2, #124	; 0x7c
    d5a8:	7811      	ldrb	r1, [r2, #0]
    d5aa:	2201      	movs	r2, #1
    d5ac:	4211      	tst	r1, r2
    d5ae:	d008      	beq.n	d5c2 <LORAWAN_TxDone+0x282>
    d5b0:	0039      	movs	r1, r7
    d5b2:	318c      	adds	r1, #140	; 0x8c
    d5b4:	7809      	ldrb	r1, [r1, #0]
    d5b6:	4211      	tst	r1, r2
    d5b8:	d1cb      	bne.n	d552 <LORAWAN_TxDone+0x212>
    d5ba:	189b      	adds	r3, r3, r2
    d5bc:	003a      	movs	r2, r7
    d5be:	32db      	adds	r2, #219	; 0xdb
    d5c0:	7013      	strb	r3, [r2, #0]
    d5c2:	003b      	movs	r3, r7
    d5c4:	2200      	movs	r2, #0
    d5c6:	33f0      	adds	r3, #240	; 0xf0
    d5c8:	701a      	strb	r2, [r3, #0]
    d5ca:	003a      	movs	r2, r7
    d5cc:	210e      	movs	r1, #14
    d5ce:	2504      	movs	r5, #4
    d5d0:	327c      	adds	r2, #124	; 0x7c
    d5d2:	7813      	ldrb	r3, [r2, #0]
    d5d4:	003e      	movs	r6, r7
    d5d6:	438b      	bics	r3, r1
    d5d8:	432b      	orrs	r3, r5
    d5da:	7013      	strb	r3, [r2, #0]
    d5dc:	003b      	movs	r3, r7
    d5de:	33df      	adds	r3, #223	; 0xdf
    d5e0:	781b      	ldrb	r3, [r3, #0]
    d5e2:	a906      	add	r1, sp, #24
    d5e4:	708b      	strb	r3, [r1, #2]
    d5e6:	003b      	movs	r3, r7
    d5e8:	33ee      	adds	r3, #238	; 0xee
    d5ea:	781b      	ldrb	r3, [r3, #0]
    d5ec:	368c      	adds	r6, #140	; 0x8c
    d5ee:	704b      	strb	r3, [r1, #1]
    d5f0:	7833      	ldrb	r3, [r6, #0]
    d5f2:	ac09      	add	r4, sp, #36	; 0x24
    d5f4:	075b      	lsls	r3, r3, #29
    d5f6:	0fdb      	lsrs	r3, r3, #31
    d5f8:	700b      	strb	r3, [r1, #0]
    d5fa:	0022      	movs	r2, r4
    d5fc:	4b8f      	ldr	r3, [pc, #572]	; (d83c <LORAWAN_TxDone+0x4fc>)
    d5fe:	2019      	movs	r0, #25
    d600:	4798      	blx	r3
    d602:	7833      	ldrb	r3, [r6, #0]
    d604:	422b      	tst	r3, r5
    d606:	d100      	bne.n	d60a <LORAWAN_TxDone+0x2ca>
    d608:	e0bd      	b.n	d786 <LORAWAN_TxDone+0x446>
    d60a:	2300      	movs	r3, #0
    d60c:	ae0b      	add	r6, sp, #44	; 0x2c
    d60e:	7033      	strb	r3, [r6, #0]
    d610:	0032      	movs	r2, r6
    d612:	2100      	movs	r1, #0
    d614:	2009      	movs	r0, #9
    d616:	4b89      	ldr	r3, [pc, #548]	; (d83c <LORAWAN_TxDone+0x4fc>)
    d618:	4798      	blx	r3
    d61a:	0031      	movs	r1, r6
    d61c:	aa05      	add	r2, sp, #20
    d61e:	0028      	movs	r0, r5
    d620:	4b86      	ldr	r3, [pc, #536]	; (d83c <LORAWAN_TxDone+0x4fc>)
    d622:	4798      	blx	r3
    d624:	0039      	movs	r1, r7
    d626:	7923      	ldrb	r3, [r4, #4]
    d628:	3169      	adds	r1, #105	; 0x69
    d62a:	700b      	strb	r3, [r1, #0]
    d62c:	003b      	movs	r3, r7
    d62e:	260b      	movs	r6, #11
    d630:	7822      	ldrb	r2, [r4, #0]
    d632:	3365      	adds	r3, #101	; 0x65
    d634:	701a      	strb	r2, [r3, #0]
    d636:	7862      	ldrb	r2, [r4, #1]
    d638:	2004      	movs	r0, #4
    d63a:	705a      	strb	r2, [r3, #1]
    d63c:	78a2      	ldrb	r2, [r4, #2]
    d63e:	2500      	movs	r5, #0
    d640:	709a      	strb	r2, [r3, #2]
    d642:	78e2      	ldrb	r2, [r4, #3]
    d644:	70da      	strb	r2, [r3, #3]
    d646:	ab02      	add	r3, sp, #8
    d648:	18f6      	adds	r6, r6, r3
    d64a:	0032      	movs	r2, r6
    d64c:	4b7b      	ldr	r3, [pc, #492]	; (d83c <LORAWAN_TxDone+0x4fc>)
    d64e:	4798      	blx	r3
    d650:	003b      	movs	r3, r7
    d652:	338c      	adds	r3, #140	; 0x8c
    d654:	781c      	ldrb	r4, [r3, #0]
    d656:	2304      	movs	r3, #4
    d658:	401c      	ands	r4, r3
    d65a:	2300      	movs	r3, #0
    d65c:	003a      	movs	r2, r7
    d65e:	56f3      	ldrsb	r3, [r6, r3]
    d660:	42ac      	cmp	r4, r5
    d662:	d100      	bne.n	d666 <LORAWAN_TxDone+0x326>
    d664:	e092      	b.n	d78c <LORAWAN_TxDone+0x44c>
    d666:	2100      	movs	r1, #0
    d668:	32ce      	adds	r2, #206	; 0xce
    d66a:	8816      	ldrh	r6, [r2, #0]
    d66c:	aa05      	add	r2, sp, #20
    d66e:	5651      	ldrsb	r1, [r2, r1]
    d670:	4c73      	ldr	r4, [pc, #460]	; (d840 <LORAWAN_TxDone+0x500>)
    d672:	1872      	adds	r2, r6, r1
    d674:	9203      	str	r2, [sp, #12]
    d676:	003a      	movs	r2, r7
    d678:	32cc      	adds	r2, #204	; 0xcc
    d67a:	8811      	ldrh	r1, [r2, #0]
    d67c:	26fa      	movs	r6, #250	; 0xfa
    d67e:	18c9      	adds	r1, r1, r3
    d680:	23e0      	movs	r3, #224	; 0xe0
    d682:	33ff      	adds	r3, #255	; 0xff
    d684:	5cfb      	ldrb	r3, [r7, r3]
    d686:	00b6      	lsls	r6, r6, #2
    d688:	1ac9      	subs	r1, r1, r3
    d68a:	003b      	movs	r3, r7
    d68c:	33e2      	adds	r3, #226	; 0xe2
    d68e:	7818      	ldrb	r0, [r3, #0]
    d690:	4371      	muls	r1, r6
    d692:	4b6c      	ldr	r3, [pc, #432]	; (d844 <LORAWAN_TxDone+0x504>)
    d694:	002a      	movs	r2, r5
    d696:	9500      	str	r5, [sp, #0]
    d698:	47a0      	blx	r4
    d69a:	23e0      	movs	r3, #224	; 0xe0
    d69c:	33ff      	adds	r3, #255	; 0xff
    d69e:	5cf9      	ldrb	r1, [r7, r3]
    d6a0:	9b03      	ldr	r3, [sp, #12]
    d6a2:	002a      	movs	r2, r5
    d6a4:	1a59      	subs	r1, r3, r1
    d6a6:	003b      	movs	r3, r7
    d6a8:	33e3      	adds	r3, #227	; 0xe3
    d6aa:	7818      	ldrb	r0, [r3, #0]
    d6ac:	4371      	muls	r1, r6
    d6ae:	4b66      	ldr	r3, [pc, #408]	; (d848 <LORAWAN_TxDone+0x508>)
    d6b0:	9500      	str	r5, [sp, #0]
    d6b2:	47a0      	blx	r4
    d6b4:	003b      	movs	r3, r7
    d6b6:	33ff      	adds	r3, #255	; 0xff
    d6b8:	7c5b      	ldrb	r3, [r3, #17]
    d6ba:	069b      	lsls	r3, r3, #26
    d6bc:	d549      	bpl.n	d752 <LORAWAN_TxDone+0x412>
    d6be:	466a      	mov	r2, sp
    d6c0:	003b      	movs	r3, r7
    d6c2:	7a12      	ldrb	r2, [r2, #8]
    d6c4:	3377      	adds	r3, #119	; 0x77
    d6c6:	701a      	strb	r2, [r3, #0]
    d6c8:	9a02      	ldr	r2, [sp, #8]
    d6ca:	ad0b      	add	r5, sp, #44	; 0x2c
    d6cc:	0a12      	lsrs	r2, r2, #8
    d6ce:	705a      	strb	r2, [r3, #1]
    d6d0:	9a02      	ldr	r2, [sp, #8]
    d6d2:	0c12      	lsrs	r2, r2, #16
    d6d4:	709a      	strb	r2, [r3, #2]
    d6d6:	9a02      	ldr	r2, [sp, #8]
    d6d8:	0e12      	lsrs	r2, r2, #24
    d6da:	70da      	strb	r2, [r3, #3]
    d6dc:	003b      	movs	r3, r7
    d6de:	337b      	adds	r3, #123	; 0x7b
    d6e0:	781b      	ldrb	r3, [r3, #0]
    d6e2:	2b00      	cmp	r3, #0
    d6e4:	d027      	beq.n	d736 <LORAWAN_TxDone+0x3f6>
    d6e6:	003c      	movs	r4, r7
    d6e8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    d6ea:	346f      	adds	r4, #111	; 0x6f
    d6ec:	0216      	lsls	r6, r2, #8
    d6ee:	003a      	movs	r2, r7
    d6f0:	7823      	ldrb	r3, [r4, #0]
    d6f2:	3273      	adds	r2, #115	; 0x73
    d6f4:	4333      	orrs	r3, r6
    d6f6:	6f7e      	ldr	r6, [r7, #116]	; 0x74
    d6f8:	7812      	ldrb	r2, [r2, #0]
    d6fa:	0236      	lsls	r6, r6, #8
    d6fc:	4316      	orrs	r6, r2
    d6fe:	431e      	orrs	r6, r3
    d700:	d119      	bne.n	d736 <LORAWAN_TxDone+0x3f6>
    d702:	2301      	movs	r3, #1
    d704:	0029      	movs	r1, r5
    d706:	702b      	strb	r3, [r5, #0]
    d708:	2021      	movs	r0, #33	; 0x21
    d70a:	4b50      	ldr	r3, [pc, #320]	; (d84c <LORAWAN_TxDone+0x50c>)
    d70c:	4798      	blx	r3
    d70e:	4b50      	ldr	r3, [pc, #320]	; (d850 <LORAWAN_TxDone+0x510>)
    d710:	4798      	blx	r3
    d712:	0033      	movs	r3, r6
    d714:	9a02      	ldr	r2, [sp, #8]
    d716:	1a80      	subs	r0, r0, r2
    d718:	4199      	sbcs	r1, r3
    d71a:	0a03      	lsrs	r3, r0, #8
    d71c:	7063      	strb	r3, [r4, #1]
    d71e:	0c03      	lsrs	r3, r0, #16
    d720:	70a3      	strb	r3, [r4, #2]
    d722:	0e03      	lsrs	r3, r0, #24
    d724:	70e3      	strb	r3, [r4, #3]
    d726:	0a0b      	lsrs	r3, r1, #8
    d728:	7163      	strb	r3, [r4, #5]
    d72a:	0c0b      	lsrs	r3, r1, #16
    d72c:	71a3      	strb	r3, [r4, #6]
    d72e:	0e0b      	lsrs	r3, r1, #24
    d730:	7020      	strb	r0, [r4, #0]
    d732:	7121      	strb	r1, [r4, #4]
    d734:	71e3      	strb	r3, [r4, #7]
    d736:	4a47      	ldr	r2, [pc, #284]	; (d854 <LORAWAN_TxDone+0x514>)
    d738:	2020      	movs	r0, #32
    d73a:	0013      	movs	r3, r2
    d73c:	3377      	adds	r3, #119	; 0x77
    d73e:	7819      	ldrb	r1, [r3, #0]
    d740:	6f93      	ldr	r3, [r2, #120]	; 0x78
    d742:	021b      	lsls	r3, r3, #8
    d744:	430b      	orrs	r3, r1
    d746:	930b      	str	r3, [sp, #44]	; 0x2c
    d748:	2301      	movs	r3, #1
    d74a:	0029      	movs	r1, r5
    d74c:	712b      	strb	r3, [r5, #4]
    d74e:	4b3f      	ldr	r3, [pc, #252]	; (d84c <LORAWAN_TxDone+0x50c>)
    d750:	4798      	blx	r3
    d752:	4b40      	ldr	r3, [pc, #256]	; (d854 <LORAWAN_TxDone+0x514>)
    d754:	2102      	movs	r1, #2
    d756:	001a      	movs	r2, r3
    d758:	32ff      	adds	r2, #255	; 0xff
    d75a:	7c52      	ldrb	r2, [r2, #17]
    d75c:	4011      	ands	r1, r2
    d75e:	d047      	beq.n	d7f0 <LORAWAN_TxDone+0x4b0>
    d760:	466a      	mov	r2, sp
    d762:	8912      	ldrh	r2, [r2, #8]
    d764:	a90b      	add	r1, sp, #44	; 0x2c
    d766:	800a      	strh	r2, [r1, #0]
    d768:	001a      	movs	r2, r3
    d76a:	328c      	adds	r2, #140	; 0x8c
    d76c:	7812      	ldrb	r2, [r2, #0]
    d76e:	3390      	adds	r3, #144	; 0x90
    d770:	0752      	lsls	r2, r2, #29
    d772:	0fd2      	lsrs	r2, r2, #31
    d774:	710a      	strb	r2, [r1, #4]
    d776:	781a      	ldrb	r2, [r3, #0]
    d778:	2301      	movs	r3, #1
    d77a:	4093      	lsls	r3, r2
    d77c:	201f      	movs	r0, #31
    d77e:	804b      	strh	r3, [r1, #2]
    d780:	4b32      	ldr	r3, [pc, #200]	; (d84c <LORAWAN_TxDone+0x50c>)
    d782:	4798      	blx	r3
    d784:	e5fc      	b.n	d380 <LORAWAN_TxDone+0x40>
    d786:	aa05      	add	r2, sp, #20
    d788:	4933      	ldr	r1, [pc, #204]	; (d858 <LORAWAN_TxDone+0x518>)
    d78a:	e748      	b.n	d61e <LORAWAN_TxDone+0x2de>
    d78c:	32c8      	adds	r2, #200	; 0xc8
    d78e:	8811      	ldrh	r1, [r2, #0]
    d790:	25fa      	movs	r5, #250	; 0xfa
    d792:	18c9      	adds	r1, r1, r3
    d794:	23e0      	movs	r3, #224	; 0xe0
    d796:	33ff      	adds	r3, #255	; 0xff
    d798:	5cfb      	ldrb	r3, [r7, r3]
    d79a:	00ad      	lsls	r5, r5, #2
    d79c:	1ac9      	subs	r1, r1, r3
    d79e:	003b      	movs	r3, r7
    d7a0:	33e4      	adds	r3, #228	; 0xe4
    d7a2:	7818      	ldrb	r0, [r3, #0]
    d7a4:	4369      	muls	r1, r5
    d7a6:	4b27      	ldr	r3, [pc, #156]	; (d844 <LORAWAN_TxDone+0x504>)
    d7a8:	9400      	str	r4, [sp, #0]
    d7aa:	0022      	movs	r2, r4
    d7ac:	4e24      	ldr	r6, [pc, #144]	; (d840 <LORAWAN_TxDone+0x500>)
    d7ae:	47b0      	blx	r6
    d7b0:	003b      	movs	r3, r7
    d7b2:	33f4      	adds	r3, #244	; 0xf4
    d7b4:	781b      	ldrb	r3, [r3, #0]
    d7b6:	2b04      	cmp	r3, #4
    d7b8:	d105      	bne.n	d7c6 <LORAWAN_TxDone+0x486>
    d7ba:	2000      	movs	r0, #0
    d7bc:	ab05      	add	r3, sp, #20
    d7be:	5618      	ldrsb	r0, [r3, r0]
    d7c0:	4b26      	ldr	r3, [pc, #152]	; (d85c <LORAWAN_TxDone+0x51c>)
    d7c2:	4798      	blx	r3
    d7c4:	e7c5      	b.n	d752 <LORAWAN_TxDone+0x412>
    d7c6:	2b01      	cmp	r3, #1
    d7c8:	d1c3      	bne.n	d752 <LORAWAN_TxDone+0x412>
    d7ca:	003b      	movs	r3, r7
    d7cc:	33ca      	adds	r3, #202	; 0xca
    d7ce:	8819      	ldrh	r1, [r3, #0]
    d7d0:	ab05      	add	r3, sp, #20
    d7d2:	781b      	ldrb	r3, [r3, #0]
    d7d4:	0022      	movs	r2, r4
    d7d6:	b25b      	sxtb	r3, r3
    d7d8:	18c9      	adds	r1, r1, r3
    d7da:	23e0      	movs	r3, #224	; 0xe0
    d7dc:	33ff      	adds	r3, #255	; 0xff
    d7de:	5cfb      	ldrb	r3, [r7, r3]
    d7e0:	37e5      	adds	r7, #229	; 0xe5
    d7e2:	1ac9      	subs	r1, r1, r3
    d7e4:	7838      	ldrb	r0, [r7, #0]
    d7e6:	4369      	muls	r1, r5
    d7e8:	9400      	str	r4, [sp, #0]
    d7ea:	4b17      	ldr	r3, [pc, #92]	; (d848 <LORAWAN_TxDone+0x508>)
    d7ec:	47b0      	blx	r6
    d7ee:	e7b0      	b.n	d752 <LORAWAN_TxDone+0x412>
    d7f0:	0753      	lsls	r3, r2, #29
    d7f2:	d400      	bmi.n	d7f6 <LORAWAN_TxDone+0x4b6>
    d7f4:	e5c4      	b.n	d380 <LORAWAN_TxDone+0x40>
    d7f6:	2022      	movs	r0, #34	; 0x22
    d7f8:	e7c2      	b.n	d780 <LORAWAN_TxDone+0x440>
    d7fa:	4919      	ldr	r1, [pc, #100]	; (d860 <LORAWAN_TxDone+0x520>)
    d7fc:	784a      	ldrb	r2, [r1, #1]
    d7fe:	780b      	ldrb	r3, [r1, #0]
    d800:	0212      	lsls	r2, r2, #8
    d802:	431a      	orrs	r2, r3
    d804:	788b      	ldrb	r3, [r1, #2]
    d806:	041b      	lsls	r3, r3, #16
    d808:	431a      	orrs	r2, r3
    d80a:	78cb      	ldrb	r3, [r1, #3]
    d80c:	061b      	lsls	r3, r3, #24
    d80e:	4313      	orrs	r3, r2
    d810:	d100      	bne.n	d814 <LORAWAN_TxDone+0x4d4>
    d812:	e5b5      	b.n	d380 <LORAWAN_TxDone+0x40>
    d814:	4a13      	ldr	r2, [pc, #76]	; (d864 <LORAWAN_TxDone+0x524>)
    d816:	7811      	ldrb	r1, [r2, #0]
    d818:	221c      	movs	r2, #28
    d81a:	2904      	cmp	r1, #4
    d81c:	d003      	beq.n	d826 <LORAWAN_TxDone+0x4e6>
    d81e:	2200      	movs	r2, #0
    d820:	2c07      	cmp	r4, #7
    d822:	d100      	bne.n	d826 <LORAWAN_TxDone+0x4e6>
    d824:	0022      	movs	r2, r4
    d826:	0039      	movs	r1, r7
    d828:	2004      	movs	r0, #4
    d82a:	31ff      	adds	r1, #255	; 0xff
    d82c:	37fc      	adds	r7, #252	; 0xfc
    d82e:	7048      	strb	r0, [r1, #1]
    d830:	714a      	strb	r2, [r1, #5]
    d832:	6838      	ldr	r0, [r7, #0]
    d834:	490c      	ldr	r1, [pc, #48]	; (d868 <LORAWAN_TxDone+0x528>)
    d836:	4798      	blx	r3
    d838:	e5a2      	b.n	d380 <LORAWAN_TxDone+0x40>
    d83a:	46c0      	nop			; (mov r8, r8)
    d83c:	00008bf9 	.word	0x00008bf9
    d840:	00009609 	.word	0x00009609
    d844:	0000c555 	.word	0x0000c555
    d848:	0000dba1 	.word	0x0000dba1
    d84c:	00008d21 	.word	0x00008d21
    d850:	000095b1 	.word	0x000095b1
    d854:	200017bc 	.word	0x200017bc
    d858:	2000182a 	.word	0x2000182a
    d85c:	0000f501 	.word	0x0000f501
    d860:	20001ab4 	.word	0x20001ab4
    d864:	200019a0 	.word	0x200019a0
    d868:	200018bc 	.word	0x200018bc

0000d86c <radioCallback>:
    d86c:	4b10      	ldr	r3, [pc, #64]	; (d8b0 <radioCallback+0x44>)
    d86e:	b510      	push	{r4, lr}
    d870:	7018      	strb	r0, [r3, #0]
    d872:	3801      	subs	r0, #1
    d874:	b2c0      	uxtb	r0, r0
    d876:	000c      	movs	r4, r1
    d878:	281f      	cmp	r0, #31
    d87a:	d809      	bhi.n	d890 <radioCallback+0x24>
    d87c:	2301      	movs	r3, #1
    d87e:	4083      	lsls	r3, r0
    d880:	4a0c      	ldr	r2, [pc, #48]	; (d8b4 <radioCallback+0x48>)
    d882:	4213      	tst	r3, r2
    d884:	d109      	bne.n	d89a <radioCallback+0x2e>
    d886:	220a      	movs	r2, #10
    d888:	4213      	tst	r3, r2
    d88a:	d102      	bne.n	d892 <radioCallback+0x26>
    d88c:	2b00      	cmp	r3, #0
    d88e:	db08      	blt.n	d8a2 <radioCallback+0x36>
    d890:	bd10      	pop	{r4, pc}
    d892:	0008      	movs	r0, r1
    d894:	4b08      	ldr	r3, [pc, #32]	; (d8b8 <radioCallback+0x4c>)
    d896:	4798      	blx	r3
    d898:	e7fa      	b.n	d890 <radioCallback+0x24>
    d89a:	2002      	movs	r0, #2
    d89c:	4b07      	ldr	r3, [pc, #28]	; (d8bc <radioCallback+0x50>)
    d89e:	4798      	blx	r3
    d8a0:	e7f6      	b.n	d890 <radioCallback+0x24>
    d8a2:	4b07      	ldr	r3, [pc, #28]	; (d8c0 <radioCallback+0x54>)
    d8a4:	681b      	ldr	r3, [r3, #0]
    d8a6:	2b00      	cmp	r3, #0
    d8a8:	d0f2      	beq.n	d890 <radioCallback+0x24>
    d8aa:	4798      	blx	r3
    d8ac:	6020      	str	r0, [r4, #0]
    d8ae:	e7ef      	b.n	d890 <radioCallback+0x24>
    d8b0:	200019a0 	.word	0x200019a0
    d8b4:	00008081 	.word	0x00008081
    d8b8:	0000d341 	.word	0x0000d341
    d8bc:	0000fbd9 	.word	0x0000fbd9
    d8c0:	20001ab0 	.word	0x20001ab0

0000d8c4 <LorawanCheckAndDoRetryOnTimeout>:
    d8c4:	b513      	push	{r0, r1, r4, lr}
    d8c6:	4c34      	ldr	r4, [pc, #208]	; (d998 <LorawanCheckAndDoRetryOnTimeout+0xd4>)
    d8c8:	0023      	movs	r3, r4
    d8ca:	338c      	adds	r3, #140	; 0x8c
    d8cc:	781b      	ldrb	r3, [r3, #0]
    d8ce:	0022      	movs	r2, r4
    d8d0:	07db      	lsls	r3, r3, #31
    d8d2:	d54d      	bpl.n	d970 <LorawanCheckAndDoRetryOnTimeout+0xac>
    d8d4:	0023      	movs	r3, r4
    d8d6:	32dc      	adds	r2, #220	; 0xdc
    d8d8:	33da      	adds	r3, #218	; 0xda
    d8da:	7812      	ldrb	r2, [r2, #0]
    d8dc:	781b      	ldrb	r3, [r3, #0]
    d8de:	429a      	cmp	r2, r3
    d8e0:	d838      	bhi.n	d954 <LorawanCheckAndDoRetryOnTimeout+0x90>
    d8e2:	23ef      	movs	r3, #239	; 0xef
    d8e4:	005b      	lsls	r3, r3, #1
    d8e6:	5ce3      	ldrb	r3, [r4, r3]
    d8e8:	2b00      	cmp	r3, #0
    d8ea:	d033      	beq.n	d954 <LorawanCheckAndDoRetryOnTimeout+0x90>
    d8ec:	0023      	movs	r3, r4
    d8ee:	33f4      	adds	r3, #244	; 0xf4
    d8f0:	781b      	ldrb	r3, [r3, #0]
    d8f2:	2b01      	cmp	r3, #1
    d8f4:	d11a      	bne.n	d92c <LorawanCheckAndDoRetryOnTimeout+0x68>
    d8f6:	0021      	movs	r1, r4
    d8f8:	220e      	movs	r2, #14
    d8fa:	317c      	adds	r1, #124	; 0x7c
    d8fc:	780b      	ldrb	r3, [r1, #0]
    d8fe:	4393      	bics	r3, r2
    d900:	001a      	movs	r2, r3
    d902:	230c      	movs	r3, #12
    d904:	4313      	orrs	r3, r2
    d906:	700b      	strb	r3, [r1, #0]
    d908:	0023      	movs	r3, r4
    d90a:	33d2      	adds	r3, #210	; 0xd2
    d90c:	8819      	ldrh	r1, [r3, #0]
    d90e:	23e0      	movs	r3, #224	; 0xe0
    d910:	33ff      	adds	r3, #255	; 0xff
    d912:	5ce3      	ldrb	r3, [r4, r3]
    d914:	2200      	movs	r2, #0
    d916:	1acb      	subs	r3, r1, r3
    d918:	21fa      	movs	r1, #250	; 0xfa
    d91a:	34e8      	adds	r4, #232	; 0xe8
    d91c:	0089      	lsls	r1, r1, #2
    d91e:	7820      	ldrb	r0, [r4, #0]
    d920:	4359      	muls	r1, r3
    d922:	9200      	str	r2, [sp, #0]
    d924:	4b1d      	ldr	r3, [pc, #116]	; (d99c <LorawanCheckAndDoRetryOnTimeout+0xd8>)
    d926:	4c1e      	ldr	r4, [pc, #120]	; (d9a0 <LorawanCheckAndDoRetryOnTimeout+0xdc>)
    d928:	47a0      	blx	r4
    d92a:	bd13      	pop	{r0, r1, r4, pc}
    d92c:	2b04      	cmp	r3, #4
    d92e:	d1fc      	bne.n	d92a <LorawanCheckAndDoRetryOnTimeout+0x66>
    d930:	4b1c      	ldr	r3, [pc, #112]	; (d9a4 <LorawanCheckAndDoRetryOnTimeout+0xe0>)
    d932:	4798      	blx	r3
    d934:	34c6      	adds	r4, #198	; 0xc6
    d936:	300d      	adds	r0, #13
    d938:	8823      	ldrh	r3, [r4, #0]
    d93a:	b280      	uxth	r0, r0
    d93c:	4283      	cmp	r3, r0
    d93e:	d802      	bhi.n	d946 <LorawanCheckAndDoRetryOnTimeout+0x82>
    d940:	4b19      	ldr	r3, [pc, #100]	; (d9a8 <LorawanCheckAndDoRetryOnTimeout+0xe4>)
    d942:	4798      	blx	r3
    d944:	e7f1      	b.n	d92a <LorawanCheckAndDoRetryOnTimeout+0x66>
    d946:	200e      	movs	r0, #14
    d948:	4b18      	ldr	r3, [pc, #96]	; (d9ac <LorawanCheckAndDoRetryOnTimeout+0xe8>)
    d94a:	4798      	blx	r3
    d94c:	4b18      	ldr	r3, [pc, #96]	; (d9b0 <LorawanCheckAndDoRetryOnTimeout+0xec>)
    d94e:	4798      	blx	r3
    d950:	4b18      	ldr	r3, [pc, #96]	; (d9b4 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
    d952:	e7f6      	b.n	d942 <LorawanCheckAndDoRetryOnTimeout+0x7e>
    d954:	2012      	movs	r0, #18
    d956:	4b15      	ldr	r3, [pc, #84]	; (d9ac <LorawanCheckAndDoRetryOnTimeout+0xe8>)
    d958:	4798      	blx	r3
    d95a:	4b15      	ldr	r3, [pc, #84]	; (d9b0 <LorawanCheckAndDoRetryOnTimeout+0xec>)
    d95c:	4798      	blx	r3
    d95e:	34f4      	adds	r4, #244	; 0xf4
    d960:	4b14      	ldr	r3, [pc, #80]	; (d9b4 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
    d962:	4798      	blx	r3
    d964:	7823      	ldrb	r3, [r4, #0]
    d966:	2b04      	cmp	r3, #4
    d968:	d1df      	bne.n	d92a <LorawanCheckAndDoRetryOnTimeout+0x66>
    d96a:	4b13      	ldr	r3, [pc, #76]	; (d9b8 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
    d96c:	4798      	blx	r3
    d96e:	e7dc      	b.n	d92a <LorawanCheckAndDoRetryOnTimeout+0x66>
    d970:	0023      	movs	r3, r4
    d972:	32db      	adds	r2, #219	; 0xdb
    d974:	33d9      	adds	r3, #217	; 0xd9
    d976:	7812      	ldrb	r2, [r2, #0]
    d978:	781b      	ldrb	r3, [r3, #0]
    d97a:	429a      	cmp	r2, r3
    d97c:	d804      	bhi.n	d988 <LorawanCheckAndDoRetryOnTimeout+0xc4>
    d97e:	23ef      	movs	r3, #239	; 0xef
    d980:	005b      	lsls	r3, r3, #1
    d982:	5ce3      	ldrb	r3, [r4, r3]
    d984:	2b00      	cmp	r3, #0
    d986:	d1db      	bne.n	d940 <LorawanCheckAndDoRetryOnTimeout+0x7c>
    d988:	4b0c      	ldr	r3, [pc, #48]	; (d9bc <LorawanCheckAndDoRetryOnTimeout+0xf8>)
    d98a:	4798      	blx	r3
    d98c:	4b09      	ldr	r3, [pc, #36]	; (d9b4 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
    d98e:	4798      	blx	r3
    d990:	2008      	movs	r0, #8
    d992:	4b06      	ldr	r3, [pc, #24]	; (d9ac <LorawanCheckAndDoRetryOnTimeout+0xe8>)
    d994:	4798      	blx	r3
    d996:	e7c8      	b.n	d92a <LorawanCheckAndDoRetryOnTimeout+0x66>
    d998:	200017bc 	.word	0x200017bc
    d99c:	0000d9c1 	.word	0x0000d9c1
    d9a0:	00009609 	.word	0x00009609
    d9a4:	0000b719 	.word	0x0000b719
    d9a8:	0000c639 	.word	0x0000c639
    d9ac:	0000cb3d 	.word	0x0000cb3d
    d9b0:	0000c015 	.word	0x0000c015
    d9b4:	0000b62d 	.word	0x0000b62d
    d9b8:	00010681 	.word	0x00010681
    d9bc:	0000c045 	.word	0x0000c045

0000d9c0 <AckRetransmissionCallback>:
    d9c0:	b510      	push	{r4, lr}
    d9c2:	4c1c      	ldr	r4, [pc, #112]	; (da34 <AckRetransmissionCallback+0x74>)
    d9c4:	0023      	movs	r3, r4
    d9c6:	337c      	adds	r3, #124	; 0x7c
    d9c8:	781b      	ldrb	r3, [r3, #0]
    d9ca:	2b7f      	cmp	r3, #127	; 0x7f
    d9cc:	d82e      	bhi.n	da2c <AckRetransmissionCallback+0x6c>
    d9ce:	0023      	movs	r3, r4
    d9d0:	33f4      	adds	r3, #244	; 0xf4
    d9d2:	781b      	ldrb	r3, [r3, #0]
    d9d4:	2b04      	cmp	r3, #4
    d9d6:	d102      	bne.n	d9de <AckRetransmissionCallback+0x1e>
    d9d8:	4b17      	ldr	r3, [pc, #92]	; (da38 <AckRetransmissionCallback+0x78>)
    d9da:	4798      	blx	r3
    d9dc:	e01f      	b.n	da1e <AckRetransmissionCallback+0x5e>
    d9de:	2b01      	cmp	r3, #1
    d9e0:	d11d      	bne.n	da1e <AckRetransmissionCallback+0x5e>
    d9e2:	0022      	movs	r2, r4
    d9e4:	0023      	movs	r3, r4
    d9e6:	32dc      	adds	r2, #220	; 0xdc
    d9e8:	33da      	adds	r3, #218	; 0xda
    d9ea:	7812      	ldrb	r2, [r2, #0]
    d9ec:	781b      	ldrb	r3, [r3, #0]
    d9ee:	429a      	cmp	r2, r3
    d9f0:	d816      	bhi.n	da20 <AckRetransmissionCallback+0x60>
    d9f2:	23ef      	movs	r3, #239	; 0xef
    d9f4:	005b      	lsls	r3, r3, #1
    d9f6:	5ce3      	ldrb	r3, [r4, r3]
    d9f8:	2b00      	cmp	r3, #0
    d9fa:	d011      	beq.n	da20 <AckRetransmissionCallback+0x60>
    d9fc:	4b0f      	ldr	r3, [pc, #60]	; (da3c <AckRetransmissionCallback+0x7c>)
    d9fe:	4798      	blx	r3
    da00:	34c6      	adds	r4, #198	; 0xc6
    da02:	300d      	adds	r0, #13
    da04:	8823      	ldrh	r3, [r4, #0]
    da06:	b280      	uxth	r0, r0
    da08:	4283      	cmp	r3, r0
    da0a:	d801      	bhi.n	da10 <AckRetransmissionCallback+0x50>
    da0c:	4b0c      	ldr	r3, [pc, #48]	; (da40 <AckRetransmissionCallback+0x80>)
    da0e:	e7e4      	b.n	d9da <AckRetransmissionCallback+0x1a>
    da10:	4b0c      	ldr	r3, [pc, #48]	; (da44 <AckRetransmissionCallback+0x84>)
    da12:	4798      	blx	r3
    da14:	4b0c      	ldr	r3, [pc, #48]	; (da48 <AckRetransmissionCallback+0x88>)
    da16:	4798      	blx	r3
    da18:	200e      	movs	r0, #14
    da1a:	4b0c      	ldr	r3, [pc, #48]	; (da4c <AckRetransmissionCallback+0x8c>)
    da1c:	4798      	blx	r3
    da1e:	bd10      	pop	{r4, pc}
    da20:	4b08      	ldr	r3, [pc, #32]	; (da44 <AckRetransmissionCallback+0x84>)
    da22:	4798      	blx	r3
    da24:	4b08      	ldr	r3, [pc, #32]	; (da48 <AckRetransmissionCallback+0x88>)
    da26:	4798      	blx	r3
    da28:	2012      	movs	r0, #18
    da2a:	e7f6      	b.n	da1a <AckRetransmissionCallback+0x5a>
    da2c:	4b05      	ldr	r3, [pc, #20]	; (da44 <AckRetransmissionCallback+0x84>)
    da2e:	4798      	blx	r3
    da30:	4b05      	ldr	r3, [pc, #20]	; (da48 <AckRetransmissionCallback+0x88>)
    da32:	e7d2      	b.n	d9da <AckRetransmissionCallback+0x1a>
    da34:	200017bc 	.word	0x200017bc
    da38:	0000d8c5 	.word	0x0000d8c5
    da3c:	0000b719 	.word	0x0000b719
    da40:	0000c639 	.word	0x0000c639
    da44:	0000c015 	.word	0x0000c015
    da48:	0000b62d 	.word	0x0000b62d
    da4c:	0000cb3d 	.word	0x0000cb3d

0000da50 <LORAWAN_RxTimeout>:
    da50:	4b22      	ldr	r3, [pc, #136]	; (dadc <LORAWAN_RxTimeout+0x8c>)
    da52:	b510      	push	{r4, lr}
    da54:	001a      	movs	r2, r3
    da56:	327c      	adds	r2, #124	; 0x7c
    da58:	7812      	ldrb	r2, [r2, #0]
    da5a:	b251      	sxtb	r1, r2
    da5c:	2900      	cmp	r1, #0
    da5e:	db23      	blt.n	daa8 <LORAWAN_RxTimeout+0x58>
    da60:	0019      	movs	r1, r3
    da62:	31f4      	adds	r1, #244	; 0xf4
    da64:	7809      	ldrb	r1, [r1, #0]
    da66:	2904      	cmp	r1, #4
    da68:	d104      	bne.n	da74 <LORAWAN_RxTimeout+0x24>
    da6a:	07d1      	lsls	r1, r2, #31
    da6c:	d502      	bpl.n	da74 <LORAWAN_RxTimeout+0x24>
    da6e:	4b1c      	ldr	r3, [pc, #112]	; (dae0 <LORAWAN_RxTimeout+0x90>)
    da70:	4798      	blx	r3
    da72:	bd10      	pop	{r4, pc}
    da74:	210e      	movs	r1, #14
    da76:	0010      	movs	r0, r2
    da78:	4008      	ands	r0, r1
    da7a:	2806      	cmp	r0, #6
    da7c:	d107      	bne.n	da8e <LORAWAN_RxTimeout+0x3e>
    da7e:	337c      	adds	r3, #124	; 0x7c
    da80:	781a      	ldrb	r2, [r3, #0]
    da82:	438a      	bics	r2, r1
    da84:	0011      	movs	r1, r2
    da86:	2208      	movs	r2, #8
    da88:	430a      	orrs	r2, r1
    da8a:	701a      	strb	r2, [r3, #0]
    da8c:	e7f1      	b.n	da72 <LORAWAN_RxTimeout+0x22>
    da8e:	2004      	movs	r0, #4
    da90:	338c      	adds	r3, #140	; 0x8c
    da92:	781b      	ldrb	r3, [r3, #0]
    da94:	4203      	tst	r3, r0
    da96:	d002      	beq.n	da9e <LORAWAN_RxTimeout+0x4e>
    da98:	4b12      	ldr	r3, [pc, #72]	; (dae4 <LORAWAN_RxTimeout+0x94>)
    da9a:	4798      	blx	r3
    da9c:	e7e9      	b.n	da72 <LORAWAN_RxTimeout+0x22>
    da9e:	07d3      	lsls	r3, r2, #31
    daa0:	d5e7      	bpl.n	da72 <LORAWAN_RxTimeout+0x22>
    daa2:	4b11      	ldr	r3, [pc, #68]	; (dae8 <LORAWAN_RxTimeout+0x98>)
    daa4:	4798      	blx	r3
    daa6:	e7e4      	b.n	da72 <LORAWAN_RxTimeout+0x22>
    daa8:	4810      	ldr	r0, [pc, #64]	; (daec <LORAWAN_RxTimeout+0x9c>)
    daaa:	7841      	ldrb	r1, [r0, #1]
    daac:	7802      	ldrb	r2, [r0, #0]
    daae:	0209      	lsls	r1, r1, #8
    dab0:	4311      	orrs	r1, r2
    dab2:	7882      	ldrb	r2, [r0, #2]
    dab4:	0412      	lsls	r2, r2, #16
    dab6:	4311      	orrs	r1, r2
    dab8:	78c2      	ldrb	r2, [r0, #3]
    daba:	0612      	lsls	r2, r2, #24
    dabc:	430a      	orrs	r2, r1
    dabe:	d0d8      	beq.n	da72 <LORAWAN_RxTimeout+0x22>
    dac0:	21ea      	movs	r1, #234	; 0xea
    dac2:	2001      	movs	r0, #1
    dac4:	0049      	lsls	r1, r1, #1
    dac6:	5458      	strb	r0, [r3, r1]
    dac8:	0019      	movs	r1, r3
    daca:	2404      	movs	r4, #4
    dacc:	31ff      	adds	r1, #255	; 0xff
    dace:	33fc      	adds	r3, #252	; 0xfc
    dad0:	704c      	strb	r4, [r1, #1]
    dad2:	7148      	strb	r0, [r1, #5]
    dad4:	4906      	ldr	r1, [pc, #24]	; (daf0 <LORAWAN_RxTimeout+0xa0>)
    dad6:	6818      	ldr	r0, [r3, #0]
    dad8:	4790      	blx	r2
    dada:	e7ca      	b.n	da72 <LORAWAN_RxTimeout+0x22>
    dadc:	200017bc 	.word	0x200017bc
    dae0:	0000f585 	.word	0x0000f585
    dae4:	0000c069 	.word	0x0000c069
    dae8:	0000d8c5 	.word	0x0000d8c5
    daec:	20001ab4 	.word	0x20001ab4
    daf0:	200018bc 	.word	0x200018bc

0000daf4 <LorawanConfigureRadioForRX2>:
    daf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    daf6:	466b      	mov	r3, sp
    daf8:	4c21      	ldr	r4, [pc, #132]	; (db80 <LorawanConfigureRadioForRX2+0x8c>)
    dafa:	1cdd      	adds	r5, r3, #3
    dafc:	0023      	movs	r3, r4
    dafe:	2100      	movs	r1, #0
    db00:	338c      	adds	r3, #140	; 0x8c
    db02:	781b      	ldrb	r3, [r3, #0]
    db04:	0007      	movs	r7, r0
    db06:	7029      	strb	r1, [r5, #0]
    db08:	075b      	lsls	r3, r3, #29
    db0a:	d52c      	bpl.n	db66 <LorawanConfigureRadioForRX2+0x72>
    db0c:	002a      	movs	r2, r5
    db0e:	2009      	movs	r0, #9
    db10:	4b1c      	ldr	r3, [pc, #112]	; (db84 <LorawanConfigureRadioForRX2+0x90>)
    db12:	4798      	blx	r3
    db14:	0022      	movs	r2, r4
    db16:	0023      	movs	r3, r4
    db18:	326c      	adds	r2, #108	; 0x6c
    db1a:	8811      	ldrh	r1, [r2, #0]
    db1c:	336a      	adds	r3, #106	; 0x6a
    db1e:	881b      	ldrh	r3, [r3, #0]
    db20:	0409      	lsls	r1, r1, #16
    db22:	4319      	orrs	r1, r3
    db24:	7828      	ldrb	r0, [r5, #0]
    db26:	4b18      	ldr	r3, [pc, #96]	; (db88 <LorawanConfigureRadioForRX2+0x94>)
    db28:	4798      	blx	r3
    db2a:	2300      	movs	r3, #0
    db2c:	0022      	movs	r2, r4
    db2e:	ae01      	add	r6, sp, #4
    db30:	7033      	strb	r3, [r6, #0]
    db32:	32f4      	adds	r2, #244	; 0xf4
    db34:	7812      	ldrb	r2, [r2, #0]
    db36:	2a04      	cmp	r2, #4
    db38:	d11a      	bne.n	db70 <LorawanConfigureRadioForRX2+0x7c>
    db3a:	347c      	adds	r4, #124	; 0x7c
    db3c:	7822      	ldrb	r2, [r4, #0]
    db3e:	07d2      	lsls	r2, r2, #31
    db40:	d516      	bpl.n	db70 <LorawanConfigureRadioForRX2+0x7c>
    db42:	8073      	strh	r3, [r6, #2]
    db44:	0030      	movs	r0, r6
    db46:	4b11      	ldr	r3, [pc, #68]	; (db8c <LorawanConfigureRadioForRX2+0x98>)
    db48:	4798      	blx	r3
    db4a:	1e04      	subs	r4, r0, #0
    db4c:	d00a      	beq.n	db64 <LorawanConfigureRadioForRX2+0x70>
    db4e:	4b10      	ldr	r3, [pc, #64]	; (db90 <LorawanConfigureRadioForRX2+0x9c>)
    db50:	4798      	blx	r3
    db52:	4b10      	ldr	r3, [pc, #64]	; (db94 <LorawanConfigureRadioForRX2+0xa0>)
    db54:	4798      	blx	r3
    db56:	4b10      	ldr	r3, [pc, #64]	; (db98 <LorawanConfigureRadioForRX2+0xa4>)
    db58:	4798      	blx	r3
    db5a:	2f00      	cmp	r7, #0
    db5c:	d002      	beq.n	db64 <LorawanConfigureRadioForRX2+0x70>
    db5e:	0020      	movs	r0, r4
    db60:	4b0e      	ldr	r3, [pc, #56]	; (db9c <LorawanConfigureRadioForRX2+0xa8>)
    db62:	4798      	blx	r3
    db64:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    db66:	0023      	movs	r3, r4
    db68:	336e      	adds	r3, #110	; 0x6e
    db6a:	781b      	ldrb	r3, [r3, #0]
    db6c:	702b      	strb	r3, [r5, #0]
    db6e:	e7d1      	b.n	db14 <LorawanConfigureRadioForRX2+0x20>
    db70:	466b      	mov	r3, sp
    db72:	0029      	movs	r1, r5
    db74:	1d9a      	adds	r2, r3, #6
    db76:	2003      	movs	r0, #3
    db78:	4b02      	ldr	r3, [pc, #8]	; (db84 <LorawanConfigureRadioForRX2+0x90>)
    db7a:	4798      	blx	r3
    db7c:	e7e2      	b.n	db44 <LorawanConfigureRadioForRX2+0x50>
    db7e:	46c0      	nop			; (mov r8, r8)
    db80:	200017bc 	.word	0x200017bc
    db84:	00008bf9 	.word	0x00008bf9
    db88:	0000c4e9 	.word	0x0000c4e9
    db8c:	00010f71 	.word	0x00010f71
    db90:	0000c015 	.word	0x0000c015
    db94:	0000c045 	.word	0x0000c045
    db98:	0000b62d 	.word	0x0000b62d
    db9c:	0000cb3d 	.word	0x0000cb3d

0000dba0 <LorawanReceiveWindow2Callback>:
    dba0:	b570      	push	{r4, r5, r6, lr}
    dba2:	4c16      	ldr	r4, [pc, #88]	; (dbfc <LorawanReceiveWindow2Callback+0x5c>)
    dba4:	0025      	movs	r5, r4
    dba6:	357c      	adds	r5, #124	; 0x7c
    dba8:	782b      	ldrb	r3, [r5, #0]
    dbaa:	2b7f      	cmp	r3, #127	; 0x7f
    dbac:	d811      	bhi.n	dbd2 <LorawanReceiveWindow2Callback+0x32>
    dbae:	4b14      	ldr	r3, [pc, #80]	; (dc00 <LorawanReceiveWindow2Callback+0x60>)
    dbb0:	4798      	blx	r3
    dbb2:	2801      	cmp	r0, #1
    dbb4:	d109      	bne.n	dbca <LorawanReceiveWindow2Callback+0x2a>
    dbb6:	220e      	movs	r2, #14
    dbb8:	782b      	ldrb	r3, [r5, #0]
    dbba:	4393      	bics	r3, r2
    dbbc:	001a      	movs	r2, r3
    dbbe:	230a      	movs	r3, #10
    dbc0:	4313      	orrs	r3, r2
    dbc2:	702b      	strb	r3, [r5, #0]
    dbc4:	4b0f      	ldr	r3, [pc, #60]	; (dc04 <LorawanReceiveWindow2Callback+0x64>)
    dbc6:	4798      	blx	r3
    dbc8:	bd70      	pop	{r4, r5, r6, pc}
    dbca:	2301      	movs	r3, #1
    dbcc:	34f0      	adds	r4, #240	; 0xf0
    dbce:	7023      	strb	r3, [r4, #0]
    dbd0:	e7fa      	b.n	dbc8 <LorawanReceiveWindow2Callback+0x28>
    dbd2:	2104      	movs	r1, #4
    dbd4:	348c      	adds	r4, #140	; 0x8c
    dbd6:	7822      	ldrb	r2, [r4, #0]
    dbd8:	420a      	tst	r2, r1
    dbda:	d007      	beq.n	dbec <LorawanReceiveWindow2Callback+0x4c>
    dbdc:	2001      	movs	r0, #1
    dbde:	4383      	bics	r3, r0
    dbe0:	438a      	bics	r2, r1
    dbe2:	702b      	strb	r3, [r5, #0]
    dbe4:	3107      	adds	r1, #7
    dbe6:	4b08      	ldr	r3, [pc, #32]	; (dc08 <LorawanReceiveWindow2Callback+0x68>)
    dbe8:	7022      	strb	r2, [r4, #0]
    dbea:	4798      	blx	r3
    dbec:	4b07      	ldr	r3, [pc, #28]	; (dc0c <LorawanReceiveWindow2Callback+0x6c>)
    dbee:	4798      	blx	r3
    dbf0:	4b07      	ldr	r3, [pc, #28]	; (dc10 <LorawanReceiveWindow2Callback+0x70>)
    dbf2:	4798      	blx	r3
    dbf4:	4b07      	ldr	r3, [pc, #28]	; (dc14 <LorawanReceiveWindow2Callback+0x74>)
    dbf6:	4798      	blx	r3
    dbf8:	e7e6      	b.n	dbc8 <LorawanReceiveWindow2Callback+0x28>
    dbfa:	46c0      	nop			; (mov r8, r8)
    dbfc:	200017bc 	.word	0x200017bc
    dc00:	00010681 	.word	0x00010681
    dc04:	0000daf5 	.word	0x0000daf5
    dc08:	000091e1 	.word	0x000091e1
    dc0c:	0000c045 	.word	0x0000c045
    dc10:	0000c015 	.word	0x0000c015
    dc14:	0000b62d 	.word	0x0000b62d

0000dc18 <SetReceptionNotOkState>:
    dc18:	22ea      	movs	r2, #234	; 0xea
    dc1a:	2101      	movs	r1, #1
    dc1c:	4b19      	ldr	r3, [pc, #100]	; (dc84 <SetReceptionNotOkState+0x6c>)
    dc1e:	0052      	lsls	r2, r2, #1
    dc20:	b510      	push	{r4, lr}
    dc22:	5499      	strb	r1, [r3, r2]
    dc24:	001a      	movs	r2, r3
    dc26:	0019      	movs	r1, r3
    dc28:	32f4      	adds	r2, #244	; 0xf4
    dc2a:	7812      	ldrb	r2, [r2, #0]
    dc2c:	317c      	adds	r1, #124	; 0x7c
    dc2e:	200e      	movs	r0, #14
    dc30:	2a01      	cmp	r2, #1
    dc32:	d11d      	bne.n	dc70 <SetReceptionNotOkState+0x58>
    dc34:	780a      	ldrb	r2, [r1, #0]
    dc36:	4002      	ands	r2, r0
    dc38:	2a0a      	cmp	r2, #10
    dc3a:	d006      	beq.n	dc4a <SetReceptionNotOkState+0x32>
    dc3c:	2a06      	cmp	r2, #6
    dc3e:	d113      	bne.n	dc68 <SetReceptionNotOkState+0x50>
    dc40:	001a      	movs	r2, r3
    dc42:	32f0      	adds	r2, #240	; 0xf0
    dc44:	7812      	ldrb	r2, [r2, #0]
    dc46:	2a00      	cmp	r2, #0
    dc48:	d00e      	beq.n	dc68 <SetReceptionNotOkState+0x50>
    dc4a:	0019      	movs	r1, r3
    dc4c:	2001      	movs	r0, #1
    dc4e:	318c      	adds	r1, #140	; 0x8c
    dc50:	780a      	ldrb	r2, [r1, #0]
    dc52:	240e      	movs	r4, #14
    dc54:	4382      	bics	r2, r0
    dc56:	700a      	strb	r2, [r1, #0]
    dc58:	001a      	movs	r2, r3
    dc5a:	327c      	adds	r2, #124	; 0x7c
    dc5c:	7811      	ldrb	r1, [r2, #0]
    dc5e:	43a1      	bics	r1, r4
    dc60:	7011      	strb	r1, [r2, #0]
    dc62:	7851      	ldrb	r1, [r2, #1]
    dc64:	4381      	bics	r1, r0
    dc66:	7051      	strb	r1, [r2, #1]
    dc68:	2200      	movs	r2, #0
    dc6a:	33f0      	adds	r3, #240	; 0xf0
    dc6c:	701a      	strb	r2, [r3, #0]
    dc6e:	bd10      	pop	{r4, pc}
    dc70:	230a      	movs	r3, #10
    dc72:	780a      	ldrb	r2, [r1, #0]
    dc74:	4382      	bics	r2, r0
    dc76:	4313      	orrs	r3, r2
    dc78:	700b      	strb	r3, [r1, #0]
    dc7a:	2000      	movs	r0, #0
    dc7c:	4b02      	ldr	r3, [pc, #8]	; (dc88 <SetReceptionNotOkState+0x70>)
    dc7e:	4798      	blx	r3
    dc80:	e7f5      	b.n	dc6e <SetReceptionNotOkState+0x56>
    dc82:	46c0      	nop			; (mov r8, r8)
    dc84:	200017bc 	.word	0x200017bc
    dc88:	0000daf5 	.word	0x0000daf5

0000dc8c <UpdateCurrentDataRateAfterDataRangeChanges>:
    dc8c:	4b09      	ldr	r3, [pc, #36]	; (dcb4 <UpdateCurrentDataRateAfterDataRangeChanges+0x28>)
    dc8e:	001a      	movs	r2, r3
    dc90:	32eb      	adds	r2, #235	; 0xeb
    dc92:	7811      	ldrb	r1, [r2, #0]
    dc94:	001a      	movs	r2, r3
    dc96:	32df      	adds	r2, #223	; 0xdf
    dc98:	7810      	ldrb	r0, [r2, #0]
    dc9a:	4288      	cmp	r0, r1
    dc9c:	d900      	bls.n	dca0 <UpdateCurrentDataRateAfterDataRangeChanges+0x14>
    dc9e:	7011      	strb	r1, [r2, #0]
    dca0:	001a      	movs	r2, r3
    dca2:	33df      	adds	r3, #223	; 0xdf
    dca4:	32ea      	adds	r2, #234	; 0xea
    dca6:	7812      	ldrb	r2, [r2, #0]
    dca8:	7819      	ldrb	r1, [r3, #0]
    dcaa:	4291      	cmp	r1, r2
    dcac:	d200      	bcs.n	dcb0 <UpdateCurrentDataRateAfterDataRangeChanges+0x24>
    dcae:	701a      	strb	r2, [r3, #0]
    dcb0:	4770      	bx	lr
    dcb2:	46c0      	nop			; (mov r8, r8)
    dcb4:	200017bc 	.word	0x200017bc

0000dcb8 <ExecuteNewChannel>:
    dcb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    dcba:	b08d      	sub	sp, #52	; 0x34
    dcbc:	7807      	ldrb	r7, [r0, #0]
    dcbe:	ab02      	add	r3, sp, #8
    dcc0:	0006      	movs	r6, r0
    dcc2:	71df      	strb	r7, [r3, #7]
    dcc4:	1c41      	adds	r1, r0, #1
    dcc6:	4b59      	ldr	r3, [pc, #356]	; (de2c <ExecuteNewChannel+0x174>)
    dcc8:	2204      	movs	r2, #4
    dcca:	a808      	add	r0, sp, #32
    dccc:	4798      	blx	r3
    dcce:	9b08      	ldr	r3, [sp, #32]
    dcd0:	4c57      	ldr	r4, [pc, #348]	; (de30 <ExecuteNewChannel+0x178>)
    dcd2:	021d      	lsls	r5, r3, #8
    dcd4:	2364      	movs	r3, #100	; 0x64
    dcd6:	0a2d      	lsrs	r5, r5, #8
    dcd8:	435d      	muls	r5, r3
    dcda:	1d73      	adds	r3, r6, #5
    dcdc:	9301      	str	r3, [sp, #4]
    dcde:	0023      	movs	r3, r4
    dce0:	9508      	str	r5, [sp, #32]
    dce2:	33f6      	adds	r3, #246	; 0xf6
    dce4:	781b      	ldrb	r3, [r3, #0]
    dce6:	3b02      	subs	r3, #2
    dce8:	2b01      	cmp	r3, #1
    dcea:	d800      	bhi.n	dcee <ExecuteNewChannel+0x36>
    dcec:	e092      	b.n	de14 <ExecuteNewChannel+0x15c>
    dcee:	7933      	ldrb	r3, [r6, #4]
    dcf0:	a904      	add	r1, sp, #16
    dcf2:	9300      	str	r3, [sp, #0]
    dcf4:	2300      	movs	r3, #0
    dcf6:	2015      	movs	r0, #21
    dcf8:	4e4e      	ldr	r6, [pc, #312]	; (de34 <ExecuteNewChannel+0x17c>)
    dcfa:	700f      	strb	r7, [r1, #0]
    dcfc:	704b      	strb	r3, [r1, #1]
    dcfe:	47b0      	blx	r6
    dd00:	2808      	cmp	r0, #8
    dd02:	d12b      	bne.n	dd5c <ExecuteNewChannel+0xa4>
    dd04:	466a      	mov	r2, sp
    dd06:	ab02      	add	r3, sp, #8
    dd08:	79db      	ldrb	r3, [r3, #7]
    dd0a:	7812      	ldrb	r2, [r2, #0]
    dd0c:	af06      	add	r7, sp, #24
    dd0e:	a90a      	add	r1, sp, #40	; 0x28
    dd10:	3806      	subs	r0, #6
    dd12:	703b      	strb	r3, [r7, #0]
    dd14:	707a      	strb	r2, [r7, #1]
    dd16:	710b      	strb	r3, [r1, #4]
    dd18:	950a      	str	r5, [sp, #40]	; 0x28
    dd1a:	47b0      	blx	r6
    dd1c:	2808      	cmp	r0, #8
    dd1e:	d001      	beq.n	dd24 <ExecuteNewChannel+0x6c>
    dd20:	2d00      	cmp	r5, #0
    dd22:	d10b      	bne.n	dd3c <ExecuteNewChannel+0x84>
    dd24:	0023      	movs	r3, r4
    dd26:	33d8      	adds	r3, #216	; 0xd8
    dd28:	781a      	ldrb	r2, [r3, #0]
    dd2a:	2303      	movs	r3, #3
    dd2c:	4353      	muls	r3, r2
    dd2e:	2280      	movs	r2, #128	; 0x80
    dd30:	18e3      	adds	r3, r4, r3
    dd32:	3390      	adds	r3, #144	; 0x90
    dd34:	7899      	ldrb	r1, [r3, #2]
    dd36:	4252      	negs	r2, r2
    dd38:	430a      	orrs	r2, r1
    dd3a:	709a      	strb	r2, [r3, #2]
    dd3c:	0039      	movs	r1, r7
    dd3e:	2012      	movs	r0, #18
    dd40:	47b0      	blx	r6
    dd42:	2808      	cmp	r0, #8
    dd44:	d10a      	bne.n	dd5c <ExecuteNewChannel+0xa4>
    dd46:	0023      	movs	r3, r4
    dd48:	33d8      	adds	r3, #216	; 0xd8
    dd4a:	781a      	ldrb	r2, [r3, #0]
    dd4c:	2303      	movs	r3, #3
    dd4e:	4353      	muls	r3, r2
    dd50:	2240      	movs	r2, #64	; 0x40
    dd52:	18e3      	adds	r3, r4, r3
    dd54:	3390      	adds	r3, #144	; 0x90
    dd56:	7899      	ldrb	r1, [r3, #2]
    dd58:	430a      	orrs	r2, r1
    dd5a:	709a      	strb	r2, [r3, #2]
    dd5c:	0023      	movs	r3, r4
    dd5e:	33d8      	adds	r3, #216	; 0xd8
    dd60:	781a      	ldrb	r2, [r3, #0]
    dd62:	2303      	movs	r3, #3
    dd64:	4353      	muls	r3, r2
    dd66:	18e3      	adds	r3, r4, r3
    dd68:	3390      	adds	r3, #144	; 0x90
    dd6a:	789b      	ldrb	r3, [r3, #2]
    dd6c:	09da      	lsrs	r2, r3, #7
    dd6e:	2a01      	cmp	r2, #1
    dd70:	d150      	bne.n	de14 <ExecuteNewChannel+0x15c>
    dd72:	065b      	lsls	r3, r3, #25
    dd74:	d54e      	bpl.n	de14 <ExecuteNewChannel+0x15c>
    dd76:	4e30      	ldr	r6, [pc, #192]	; (de38 <ExecuteNewChannel+0x180>)
    dd78:	2d00      	cmp	r5, #0
    dd7a:	d04e      	beq.n	de1a <ExecuteNewChannel+0x162>
    dd7c:	a906      	add	r1, sp, #24
    dd7e:	2012      	movs	r0, #18
    dd80:	47b0      	blx	r6
    dd82:	ad07      	add	r5, sp, #28
    dd84:	a90a      	add	r1, sp, #40	; 0x28
    dd86:	2000      	movs	r0, #0
    dd88:	47b0      	blx	r6
    dd8a:	002a      	movs	r2, r5
    dd8c:	2100      	movs	r1, #0
    dd8e:	2014      	movs	r0, #20
    dd90:	4f2a      	ldr	r7, [pc, #168]	; (de3c <ExecuteNewChannel+0x184>)
    dd92:	47b8      	blx	r7
    dd94:	0023      	movs	r3, r4
    dd96:	782a      	ldrb	r2, [r5, #0]
    dd98:	33ea      	adds	r3, #234	; 0xea
    dd9a:	701a      	strb	r2, [r3, #0]
    dd9c:	0023      	movs	r3, r4
    dd9e:	786a      	ldrb	r2, [r5, #1]
    dda0:	33eb      	adds	r3, #235	; 0xeb
    dda2:	701a      	strb	r2, [r3, #0]
    dda4:	34ff      	adds	r4, #255	; 0xff
    dda6:	4b26      	ldr	r3, [pc, #152]	; (de40 <ExecuteNewChannel+0x188>)
    dda8:	4798      	blx	r3
    ddaa:	7c63      	ldrb	r3, [r4, #17]
    ddac:	079b      	lsls	r3, r3, #30
    ddae:	d50e      	bpl.n	ddce <ExecuteNewChannel+0x116>
    ddb0:	2416      	movs	r4, #22
    ddb2:	ab02      	add	r3, sp, #8
    ddb4:	18e4      	adds	r4, r4, r3
    ddb6:	1dd9      	adds	r1, r3, #7
    ddb8:	0022      	movs	r2, r4
    ddba:	201e      	movs	r0, #30
    ddbc:	47b8      	blx	r7
    ddbe:	ab02      	add	r3, sp, #8
    ddc0:	79db      	ldrb	r3, [r3, #7]
    ddc2:	a909      	add	r1, sp, #36	; 0x24
    ddc4:	708b      	strb	r3, [r1, #2]
    ddc6:	8823      	ldrh	r3, [r4, #0]
    ddc8:	201e      	movs	r0, #30
    ddca:	800b      	strh	r3, [r1, #0]
    ddcc:	47b0      	blx	r6
    ddce:	ab02      	add	r3, sp, #8
    ddd0:	79db      	ldrb	r3, [r3, #7]
    ddd2:	a905      	add	r1, sp, #20
    ddd4:	700b      	strb	r3, [r1, #0]
    ddd6:	2301      	movs	r3, #1
    ddd8:	2016      	movs	r0, #22
    ddda:	704b      	strb	r3, [r1, #1]
    dddc:	4b16      	ldr	r3, [pc, #88]	; (de38 <ExecuteNewChannel+0x180>)
    ddde:	4798      	blx	r3
    dde0:	ad09      	add	r5, sp, #36	; 0x24
    dde2:	2100      	movs	r1, #0
    dde4:	002a      	movs	r2, r5
    dde6:	4b15      	ldr	r3, [pc, #84]	; (de3c <ExecuteNewChannel+0x184>)
    dde8:	2014      	movs	r0, #20
    ddea:	4798      	blx	r3
    ddec:	4c10      	ldr	r4, [pc, #64]	; (de30 <ExecuteNewChannel+0x178>)
    ddee:	782a      	ldrb	r2, [r5, #0]
    ddf0:	0023      	movs	r3, r4
    ddf2:	33ea      	adds	r3, #234	; 0xea
    ddf4:	701a      	strb	r2, [r3, #0]
    ddf6:	0023      	movs	r3, r4
    ddf8:	786a      	ldrb	r2, [r5, #1]
    ddfa:	33eb      	adds	r3, #235	; 0xeb
    ddfc:	701a      	strb	r2, [r3, #0]
    ddfe:	4b10      	ldr	r3, [pc, #64]	; (de40 <ExecuteNewChannel+0x188>)
    de00:	4798      	blx	r3
    de02:	2304      	movs	r3, #4
    de04:	347c      	adds	r4, #124	; 0x7c
    de06:	7862      	ldrb	r2, [r4, #1]
    de08:	210b      	movs	r1, #11
    de0a:	4313      	orrs	r3, r2
    de0c:	7063      	strb	r3, [r4, #1]
    de0e:	2001      	movs	r0, #1
    de10:	4b0c      	ldr	r3, [pc, #48]	; (de44 <ExecuteNewChannel+0x18c>)
    de12:	4798      	blx	r3
    de14:	9801      	ldr	r0, [sp, #4]
    de16:	b00d      	add	sp, #52	; 0x34
    de18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    de1a:	ab02      	add	r3, sp, #8
    de1c:	79db      	ldrb	r3, [r3, #7]
    de1e:	a905      	add	r1, sp, #20
    de20:	2016      	movs	r0, #22
    de22:	700b      	strb	r3, [r1, #0]
    de24:	704d      	strb	r5, [r1, #1]
    de26:	47b0      	blx	r6
    de28:	e7da      	b.n	dde0 <ExecuteNewChannel+0x128>
    de2a:	46c0      	nop			; (mov r8, r8)
    de2c:	00014ecd 	.word	0x00014ecd
    de30:	200017bc 	.word	0x200017bc
    de34:	00008c15 	.word	0x00008c15
    de38:	00008d21 	.word	0x00008d21
    de3c:	00008bf9 	.word	0x00008bf9
    de40:	0000dc8d 	.word	0x0000dc8d
    de44:	000091e1 	.word	0x000091e1

0000de48 <MacExecuteCommands>:
    de48:	2300      	movs	r3, #0
    de4a:	b5f0      	push	{r4, r5, r6, r7, lr}
    de4c:	0007      	movs	r7, r0
    de4e:	2501      	movs	r5, #1
    de50:	b087      	sub	sp, #28
    de52:	9002      	str	r0, [sp, #8]
    de54:	9103      	str	r1, [sp, #12]
    de56:	9300      	str	r3, [sp, #0]
    de58:	9b02      	ldr	r3, [sp, #8]
    de5a:	9a03      	ldr	r2, [sp, #12]
    de5c:	4e63      	ldr	r6, [pc, #396]	; (dfec <MacExecuteCommands+0x1a4>)
    de5e:	1898      	adds	r0, r3, r2
    de60:	4287      	cmp	r7, r0
    de62:	d353      	bcc.n	df0c <MacExecuteCommands+0xc4>
    de64:	23ed      	movs	r3, #237	; 0xed
    de66:	005b      	lsls	r3, r3, #1
    de68:	5cf3      	ldrb	r3, [r6, r3]
    de6a:	2b00      	cmp	r3, #0
    de6c:	d000      	beq.n	de70 <MacExecuteCommands+0x28>
    de6e:	e072      	b.n	df56 <MacExecuteCommands+0x10e>
    de70:	0038      	movs	r0, r7
    de72:	b007      	add	sp, #28
    de74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    de76:	0033      	movs	r3, r6
    de78:	787a      	ldrb	r2, [r7, #1]
    de7a:	33dd      	adds	r3, #221	; 0xdd
    de7c:	701a      	strb	r2, [r3, #0]
    de7e:	0033      	movs	r3, r6
    de80:	78ba      	ldrb	r2, [r7, #2]
    de82:	33de      	adds	r3, #222	; 0xde
    de84:	701a      	strb	r2, [r3, #0]
    de86:	2203      	movs	r2, #3
    de88:	9b01      	ldr	r3, [sp, #4]
    de8a:	1cfc      	adds	r4, r7, #3
    de8c:	4353      	muls	r3, r2
    de8e:	18f3      	adds	r3, r6, r3
    de90:	3391      	adds	r3, #145	; 0x91
    de92:	32fc      	adds	r2, #252	; 0xfc
    de94:	701a      	strb	r2, [r3, #0]
    de96:	0032      	movs	r2, r6
    de98:	2103      	movs	r1, #3
    de9a:	32d8      	adds	r2, #216	; 0xd8
    de9c:	7813      	ldrb	r3, [r2, #0]
    de9e:	4359      	muls	r1, r3
    dea0:	1876      	adds	r6, r6, r1
    dea2:	3691      	adds	r6, #145	; 0x91
    dea4:	7831      	ldrb	r1, [r6, #0]
    dea6:	29ff      	cmp	r1, #255	; 0xff
    dea8:	d003      	beq.n	deb2 <MacExecuteCommands+0x6a>
    deaa:	2b0f      	cmp	r3, #15
    deac:	d801      	bhi.n	deb2 <MacExecuteCommands+0x6a>
    deae:	3301      	adds	r3, #1
    deb0:	7013      	strb	r3, [r2, #0]
    deb2:	0027      	movs	r7, r4
    deb4:	e7d0      	b.n	de58 <MacExecuteCommands+0x10>
    deb6:	0020      	movs	r0, r4
    deb8:	4b4d      	ldr	r3, [pc, #308]	; (dff0 <MacExecuteCommands+0x1a8>)
    deba:	4798      	blx	r3
    debc:	0004      	movs	r4, r0
    debe:	e7ea      	b.n	de96 <MacExecuteCommands+0x4e>
    dec0:	0020      	movs	r0, r4
    dec2:	4b4c      	ldr	r3, [pc, #304]	; (dff4 <MacExecuteCommands+0x1ac>)
    dec4:	e7f9      	b.n	deba <MacExecuteCommands+0x72>
    dec6:	0020      	movs	r0, r4
    dec8:	4b4b      	ldr	r3, [pc, #300]	; (dff8 <MacExecuteCommands+0x1b0>)
    deca:	e7f6      	b.n	deba <MacExecuteCommands+0x72>
    decc:	0020      	movs	r0, r4
    dece:	4b4b      	ldr	r3, [pc, #300]	; (dffc <MacExecuteCommands+0x1b4>)
    ded0:	e7f3      	b.n	deba <MacExecuteCommands+0x72>
    ded2:	230f      	movs	r3, #15
    ded4:	7878      	ldrb	r0, [r7, #1]
    ded6:	1cbc      	adds	r4, r7, #2
    ded8:	4018      	ands	r0, r3
    deda:	4b49      	ldr	r3, [pc, #292]	; (e000 <MacExecuteCommands+0x1b8>)
    dedc:	4798      	blx	r3
    dede:	0032      	movs	r2, r6
    dee0:	2380      	movs	r3, #128	; 0x80
    dee2:	327c      	adds	r2, #124	; 0x7c
    dee4:	7851      	ldrb	r1, [r2, #1]
    dee6:	425b      	negs	r3, r3
    dee8:	430b      	orrs	r3, r1
    deea:	7053      	strb	r3, [r2, #1]
    deec:	210b      	movs	r1, #11
    deee:	0028      	movs	r0, r5
    def0:	4b44      	ldr	r3, [pc, #272]	; (e004 <MacExecuteCommands+0x1bc>)
    def2:	4798      	blx	r3
    def4:	e7cf      	b.n	de96 <MacExecuteCommands+0x4e>
    def6:	0020      	movs	r0, r4
    def8:	4b43      	ldr	r3, [pc, #268]	; (e008 <MacExecuteCommands+0x1c0>)
    defa:	e7de      	b.n	deba <MacExecuteCommands+0x72>
    defc:	0020      	movs	r0, r4
    defe:	4b43      	ldr	r3, [pc, #268]	; (e00c <MacExecuteCommands+0x1c4>)
    df00:	e7db      	b.n	deba <MacExecuteCommands+0x72>
    df02:	22ff      	movs	r2, #255	; 0xff
    df04:	0004      	movs	r4, r0
    df06:	701a      	strb	r2, [r3, #0]
    df08:	9500      	str	r5, [sp, #0]
    df0a:	e7c4      	b.n	de96 <MacExecuteCommands+0x4e>
    df0c:	9b00      	ldr	r3, [sp, #0]
    df0e:	2b00      	cmp	r3, #0
    df10:	d1a8      	bne.n	de64 <MacExecuteCommands+0x1c>
    df12:	0033      	movs	r3, r6
    df14:	33d8      	adds	r3, #216	; 0xd8
    df16:	781b      	ldrb	r3, [r3, #0]
    df18:	2401      	movs	r4, #1
    df1a:	9301      	str	r3, [sp, #4]
    df1c:	2303      	movs	r3, #3
    df1e:	9a01      	ldr	r2, [sp, #4]
    df20:	4353      	muls	r3, r2
    df22:	18f3      	adds	r3, r6, r3
    df24:	0019      	movs	r1, r3
    df26:	3190      	adds	r1, #144	; 0x90
    df28:	788a      	ldrb	r2, [r1, #2]
    df2a:	3391      	adds	r3, #145	; 0x91
    df2c:	43aa      	bics	r2, r5
    df2e:	4022      	ands	r2, r4
    df30:	708a      	strb	r2, [r1, #2]
    df32:	78ca      	ldrb	r2, [r1, #3]
    df34:	193c      	adds	r4, r7, r4
    df36:	43aa      	bics	r2, r5
    df38:	70ca      	strb	r2, [r1, #3]
    df3a:	783a      	ldrb	r2, [r7, #0]
    df3c:	701a      	strb	r2, [r3, #0]
    df3e:	783a      	ldrb	r2, [r7, #0]
    df40:	3a02      	subs	r2, #2
    df42:	2a08      	cmp	r2, #8
    df44:	d8dd      	bhi.n	df02 <MacExecuteCommands+0xba>
    df46:	0010      	movs	r0, r2
    df48:	f003 fbf0 	bl	1172c <__gnu_thumb1_case_sqi>
    df4c:	bdbab595 	.word	0xbdbab595
    df50:	d5c3c0a5 	.word	0xd5c3c0a5
    df54:	d8          	.byte	0xd8
    df55:	00          	.byte	0x00
    df56:	23d8      	movs	r3, #216	; 0xd8
    df58:	33ff      	adds	r3, #255	; 0xff
    df5a:	5cf3      	ldrb	r3, [r6, r3]
    df5c:	43db      	mvns	r3, r3
    df5e:	075b      	lsls	r3, r3, #29
    df60:	d000      	beq.n	df64 <MacExecuteCommands+0x11c>
    df62:	e785      	b.n	de70 <MacExecuteCommands+0x28>
    df64:	23de      	movs	r3, #222	; 0xde
    df66:	33ff      	adds	r3, #255	; 0xff
    df68:	5cf4      	ldrb	r4, [r6, r3]
    df6a:	ad05      	add	r5, sp, #20
    df6c:	0724      	lsls	r4, r4, #28
    df6e:	0f24      	lsrs	r4, r4, #28
    df70:	b2e3      	uxtb	r3, r4
    df72:	9300      	str	r3, [sp, #0]
    df74:	23da      	movs	r3, #218	; 0xda
    df76:	33ff      	adds	r3, #255	; 0xff
    df78:	5cf3      	ldrb	r3, [r6, r3]
    df7a:	2100      	movs	r1, #0
    df7c:	9301      	str	r3, [sp, #4]
    df7e:	23ec      	movs	r3, #236	; 0xec
    df80:	005b      	lsls	r3, r3, #1
    df82:	5cf3      	ldrb	r3, [r6, r3]
    df84:	002a      	movs	r2, r5
    df86:	9302      	str	r3, [sp, #8]
    df88:	2014      	movs	r0, #20
    df8a:	4b21      	ldr	r3, [pc, #132]	; (e010 <MacExecuteCommands+0x1c8>)
    df8c:	4798      	blx	r3
    df8e:	0033      	movs	r3, r6
    df90:	782a      	ldrb	r2, [r5, #0]
    df92:	33ea      	adds	r3, #234	; 0xea
    df94:	701a      	strb	r2, [r3, #0]
    df96:	0033      	movs	r3, r6
    df98:	786a      	ldrb	r2, [r5, #1]
    df9a:	33eb      	adds	r3, #235	; 0xeb
    df9c:	701a      	strb	r2, [r3, #0]
    df9e:	4b1d      	ldr	r3, [pc, #116]	; (e014 <MacExecuteCommands+0x1cc>)
    dfa0:	4798      	blx	r3
    dfa2:	9801      	ldr	r0, [sp, #4]
    dfa4:	4b1c      	ldr	r3, [pc, #112]	; (e018 <MacExecuteCommands+0x1d0>)
    dfa6:	4798      	blx	r3
    dfa8:	0032      	movs	r2, r6
    dfaa:	2308      	movs	r3, #8
    dfac:	327c      	adds	r2, #124	; 0x7c
    dfae:	7851      	ldrb	r1, [r2, #1]
    dfb0:	430b      	orrs	r3, r1
    dfb2:	7053      	strb	r3, [r2, #1]
    dfb4:	9802      	ldr	r0, [sp, #8]
    dfb6:	4b19      	ldr	r3, [pc, #100]	; (e01c <MacExecuteCommands+0x1d4>)
    dfb8:	4798      	blx	r3
    dfba:	0033      	movs	r3, r6
    dfbc:	b2e2      	uxtb	r2, r4
    dfbe:	33d9      	adds	r3, #217	; 0xd9
    dfc0:	2a00      	cmp	r2, #0
    dfc2:	d10e      	bne.n	dfe2 <MacExecuteCommands+0x19a>
    dfc4:	701c      	strb	r4, [r3, #0]
    dfc6:	2114      	movs	r1, #20
    dfc8:	4c0e      	ldr	r4, [pc, #56]	; (e004 <MacExecuteCommands+0x1bc>)
    dfca:	2000      	movs	r0, #0
    dfcc:	47a0      	blx	r4
    dfce:	2210      	movs	r2, #16
    dfd0:	4b06      	ldr	r3, [pc, #24]	; (dfec <MacExecuteCommands+0x1a4>)
    dfd2:	2001      	movs	r0, #1
    dfd4:	337c      	adds	r3, #124	; 0x7c
    dfd6:	7859      	ldrb	r1, [r3, #1]
    dfd8:	430a      	orrs	r2, r1
    dfda:	705a      	strb	r2, [r3, #1]
    dfdc:	210b      	movs	r1, #11
    dfde:	47a0      	blx	r4
    dfe0:	e746      	b.n	de70 <MacExecuteCommands+0x28>
    dfe2:	9a00      	ldr	r2, [sp, #0]
    dfe4:	3a01      	subs	r2, #1
    dfe6:	701a      	strb	r2, [r3, #0]
    dfe8:	e7ed      	b.n	dfc6 <MacExecuteCommands+0x17e>
    dfea:	46c0      	nop			; (mov r8, r8)
    dfec:	200017bc 	.word	0x200017bc
    dff0:	0000c305 	.word	0x0000c305
    dff4:	0000c1c9 	.word	0x0000c1c9
    dff8:	0000c0cd 	.word	0x0000c0cd
    dffc:	0000dcb9 	.word	0x0000dcb9
    e000:	0000b739 	.word	0x0000b739
    e004:	000091e1 	.word	0x000091e1
    e008:	0000c2b5 	.word	0x0000c2b5
    e00c:	0000c201 	.word	0x0000c201
    e010:	00008bf9 	.word	0x00008bf9
    e014:	0000dc8d 	.word	0x0000dc8d
    e018:	0000bf85 	.word	0x0000bf85
    e01c:	0000bf19 	.word	0x0000bf19

0000e020 <LorawanSetDataRange>:
    e020:	2201      	movs	r2, #1
    e022:	b530      	push	{r4, r5, lr}
    e024:	b085      	sub	sp, #20
    e026:	ab01      	add	r3, sp, #4
    e028:	ac02      	add	r4, sp, #8
    e02a:	7018      	strb	r0, [r3, #0]
    e02c:	7020      	strb	r0, [r4, #0]
    e02e:	7061      	strb	r1, [r4, #1]
    e030:	2015      	movs	r0, #21
    e032:	0019      	movs	r1, r3
    e034:	4d11      	ldr	r5, [pc, #68]	; (e07c <LorawanSetDataRange+0x5c>)
    e036:	705a      	strb	r2, [r3, #1]
    e038:	47a8      	blx	r5
    e03a:	2808      	cmp	r0, #8
    e03c:	d003      	beq.n	e046 <LorawanSetDataRange+0x26>
    e03e:	250a      	movs	r5, #10
    e040:	0028      	movs	r0, r5
    e042:	b005      	add	sp, #20
    e044:	bd30      	pop	{r4, r5, pc}
    e046:	0021      	movs	r1, r4
    e048:	2012      	movs	r0, #18
    e04a:	47a8      	blx	r5
    e04c:	0005      	movs	r5, r0
    e04e:	2808      	cmp	r0, #8
    e050:	d1f5      	bne.n	e03e <LorawanSetDataRange+0x1e>
    e052:	0021      	movs	r1, r4
    e054:	4b0a      	ldr	r3, [pc, #40]	; (e080 <LorawanSetDataRange+0x60>)
    e056:	ac03      	add	r4, sp, #12
    e058:	2012      	movs	r0, #18
    e05a:	4798      	blx	r3
    e05c:	0022      	movs	r2, r4
    e05e:	2100      	movs	r1, #0
    e060:	4b08      	ldr	r3, [pc, #32]	; (e084 <LorawanSetDataRange+0x64>)
    e062:	2014      	movs	r0, #20
    e064:	4798      	blx	r3
    e066:	4b08      	ldr	r3, [pc, #32]	; (e088 <LorawanSetDataRange+0x68>)
    e068:	7821      	ldrb	r1, [r4, #0]
    e06a:	001a      	movs	r2, r3
    e06c:	32ea      	adds	r2, #234	; 0xea
    e06e:	7011      	strb	r1, [r2, #0]
    e070:	7862      	ldrb	r2, [r4, #1]
    e072:	33eb      	adds	r3, #235	; 0xeb
    e074:	701a      	strb	r2, [r3, #0]
    e076:	4b05      	ldr	r3, [pc, #20]	; (e08c <LorawanSetDataRange+0x6c>)
    e078:	4798      	blx	r3
    e07a:	e7e1      	b.n	e040 <LorawanSetDataRange+0x20>
    e07c:	00008c15 	.word	0x00008c15
    e080:	00008d21 	.word	0x00008d21
    e084:	00008bf9 	.word	0x00008bf9
    e088:	200017bc 	.word	0x200017bc
    e08c:	0000dc8d 	.word	0x0000dc8d

0000e090 <LorawanSetChannelIdStatus>:
    e090:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e092:	466b      	mov	r3, sp
    e094:	7018      	strb	r0, [r3, #0]
    e096:	7059      	strb	r1, [r3, #1]
    e098:	2016      	movs	r0, #22
    e09a:	4669      	mov	r1, sp
    e09c:	4b0c      	ldr	r3, [pc, #48]	; (e0d0 <LorawanSetChannelIdStatus+0x40>)
    e09e:	4798      	blx	r3
    e0a0:	0004      	movs	r4, r0
    e0a2:	2808      	cmp	r0, #8
    e0a4:	d111      	bne.n	e0ca <LorawanSetChannelIdStatus+0x3a>
    e0a6:	ad01      	add	r5, sp, #4
    e0a8:	002a      	movs	r2, r5
    e0aa:	2100      	movs	r1, #0
    e0ac:	4b09      	ldr	r3, [pc, #36]	; (e0d4 <LorawanSetChannelIdStatus+0x44>)
    e0ae:	2014      	movs	r0, #20
    e0b0:	4798      	blx	r3
    e0b2:	4b09      	ldr	r3, [pc, #36]	; (e0d8 <LorawanSetChannelIdStatus+0x48>)
    e0b4:	7829      	ldrb	r1, [r5, #0]
    e0b6:	001a      	movs	r2, r3
    e0b8:	32ea      	adds	r2, #234	; 0xea
    e0ba:	7011      	strb	r1, [r2, #0]
    e0bc:	786a      	ldrb	r2, [r5, #1]
    e0be:	33eb      	adds	r3, #235	; 0xeb
    e0c0:	701a      	strb	r2, [r3, #0]
    e0c2:	4b06      	ldr	r3, [pc, #24]	; (e0dc <LorawanSetChannelIdStatus+0x4c>)
    e0c4:	4798      	blx	r3
    e0c6:	0020      	movs	r0, r4
    e0c8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    e0ca:	240a      	movs	r4, #10
    e0cc:	e7fb      	b.n	e0c6 <LorawanSetChannelIdStatus+0x36>
    e0ce:	46c0      	nop			; (mov r8, r8)
    e0d0:	00008d21 	.word	0x00008d21
    e0d4:	00008bf9 	.word	0x00008bf9
    e0d8:	200017bc 	.word	0x200017bc
    e0dc:	0000dc8d 	.word	0x0000dc8d

0000e0e0 <LORAWAN_RxDone>:
    e0e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e0e2:	4bc5      	ldr	r3, [pc, #788]	; (e3f8 <LORAWAN_RxDone+0x318>)
    e0e4:	b093      	sub	sp, #76	; 0x4c
    e0e6:	781b      	ldrb	r3, [r3, #0]
    e0e8:	0007      	movs	r7, r0
    e0ea:	b25a      	sxtb	r2, r3
    e0ec:	9107      	str	r1, [sp, #28]
    e0ee:	4cc3      	ldr	r4, [pc, #780]	; (e3fc <LORAWAN_RxDone+0x31c>)
    e0f0:	2a00      	cmp	r2, #0
    e0f2:	da01      	bge.n	e0f8 <LORAWAN_RxDone+0x18>
    e0f4:	f000 fd72 	bl	ebdc <LORAWAN_RxDone+0xafc>
    e0f8:	7801      	ldrb	r1, [r0, #0]
    e0fa:	221f      	movs	r2, #31
    e0fc:	0008      	movs	r0, r1
    e0fe:	4390      	bics	r0, r2
    e100:	0002      	movs	r2, r0
    e102:	2820      	cmp	r0, #32
    e104:	d000      	beq.n	e108 <LORAWAN_RxDone+0x28>
    e106:	e1ad      	b.n	e464 <LORAWAN_RxDone+0x384>
    e108:	7822      	ldrb	r2, [r4, #0]
    e10a:	2a00      	cmp	r2, #0
    e10c:	d001      	beq.n	e112 <LORAWAN_RxDone+0x32>
    e10e:	f000 fd51 	bl	ebb4 <LORAWAN_RxDone+0xad4>
    e112:	0022      	movs	r2, r4
    e114:	328c      	adds	r2, #140	; 0x8c
    e116:	7812      	ldrb	r2, [r2, #0]
    e118:	0752      	lsls	r2, r2, #29
    e11a:	d401      	bmi.n	e120 <LORAWAN_RxDone+0x40>
    e11c:	f000 fd4a 	bl	ebb4 <LORAWAN_RxDone+0xad4>
    e120:	9b07      	ldr	r3, [sp, #28]
    e122:	3b01      	subs	r3, #1
    e124:	b2db      	uxtb	r3, r3
    e126:	9306      	str	r3, [sp, #24]
    e128:	4bb5      	ldr	r3, [pc, #724]	; (e400 <LORAWAN_RxDone+0x320>)
    e12a:	469c      	mov	ip, r3
    e12c:	9b06      	ldr	r3, [sp, #24]
    e12e:	2b00      	cmp	r3, #0
    e130:	d12c      	bne.n	e18c <LORAWAN_RxDone+0xac>
    e132:	9b07      	ldr	r3, [sp, #28]
    e134:	4660      	mov	r0, ip
    e136:	1f1d      	subs	r5, r3, #4
    e138:	b2eb      	uxtb	r3, r5
    e13a:	9300      	str	r3, [sp, #0]
    e13c:	4ab1      	ldr	r2, [pc, #708]	; (e404 <LORAWAN_RxDone+0x324>)
    e13e:	003b      	movs	r3, r7
    e140:	9906      	ldr	r1, [sp, #24]
    e142:	4eb1      	ldr	r6, [pc, #708]	; (e408 <LORAWAN_RxDone+0x328>)
    e144:	47b0      	blx	r6
    e146:	2204      	movs	r2, #4
    e148:	49ae      	ldr	r1, [pc, #696]	; (e404 <LORAWAN_RxDone+0x324>)
    e14a:	4bb0      	ldr	r3, [pc, #704]	; (e40c <LORAWAN_RxDone+0x32c>)
    e14c:	a810      	add	r0, sp, #64	; 0x40
    e14e:	4798      	blx	r3
    e150:	9e10      	ldr	r6, [sp, #64]	; 0x40
    e152:	1979      	adds	r1, r7, r5
    e154:	2204      	movs	r2, #4
    e156:	4bad      	ldr	r3, [pc, #692]	; (e40c <LORAWAN_RxDone+0x32c>)
    e158:	a810      	add	r0, sp, #64	; 0x40
    e15a:	960d      	str	r6, [sp, #52]	; 0x34
    e15c:	4798      	blx	r3
    e15e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e160:	4ba6      	ldr	r3, [pc, #664]	; (e3fc <LORAWAN_RxDone+0x31c>)
    e162:	210e      	movs	r1, #14
    e164:	42b2      	cmp	r2, r6
    e166:	d029      	beq.n	e1bc <LORAWAN_RxDone+0xdc>
    e168:	001a      	movs	r2, r3
    e16a:	327c      	adds	r2, #124	; 0x7c
    e16c:	7812      	ldrb	r2, [r2, #0]
    e16e:	400a      	ands	r2, r1
    e170:	2a0a      	cmp	r2, #10
    e172:	d005      	beq.n	e180 <LORAWAN_RxDone+0xa0>
    e174:	2a06      	cmp	r2, #6
    e176:	d106      	bne.n	e186 <LORAWAN_RxDone+0xa6>
    e178:	33f0      	adds	r3, #240	; 0xf0
    e17a:	781b      	ldrb	r3, [r3, #0]
    e17c:	2b00      	cmp	r3, #0
    e17e:	d002      	beq.n	e186 <LORAWAN_RxDone+0xa6>
    e180:	2018      	movs	r0, #24
    e182:	4ba3      	ldr	r3, [pc, #652]	; (e410 <LORAWAN_RxDone+0x330>)
    e184:	4798      	blx	r3
    e186:	4ba3      	ldr	r3, [pc, #652]	; (e414 <LORAWAN_RxDone+0x334>)
    e188:	4798      	blx	r3
    e18a:	e1f5      	b.n	e578 <LORAWAN_RxDone+0x498>
    e18c:	9b07      	ldr	r3, [sp, #28]
    e18e:	9a06      	ldr	r2, [sp, #24]
    e190:	2100      	movs	r1, #0
    e192:	1a98      	subs	r0, r3, r2
    e194:	1838      	adds	r0, r7, r0
    e196:	4662      	mov	r2, ip
    e198:	4b9f      	ldr	r3, [pc, #636]	; (e418 <LORAWAN_RxDone+0x338>)
    e19a:	4798      	blx	r3
    e19c:	2800      	cmp	r0, #0
    e19e:	d006      	beq.n	e1ae <LORAWAN_RxDone+0xce>
    e1a0:	4b9b      	ldr	r3, [pc, #620]	; (e410 <LORAWAN_RxDone+0x330>)
    e1a2:	4798      	blx	r3
    e1a4:	4b9b      	ldr	r3, [pc, #620]	; (e414 <LORAWAN_RxDone+0x334>)
    e1a6:	4798      	blx	r3
    e1a8:	201f      	movs	r0, #31
    e1aa:	b013      	add	sp, #76	; 0x4c
    e1ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e1ae:	9b06      	ldr	r3, [sp, #24]
    e1b0:	2b10      	cmp	r3, #16
    e1b2:	d901      	bls.n	e1b8 <LORAWAN_RxDone+0xd8>
    e1b4:	3b10      	subs	r3, #16
    e1b6:	e7b5      	b.n	e124 <LORAWAN_RxDone+0x44>
    e1b8:	9006      	str	r0, [sp, #24]
    e1ba:	e7b5      	b.n	e128 <LORAWAN_RxDone+0x48>
    e1bc:	001a      	movs	r2, r3
    e1be:	327c      	adds	r2, #124	; 0x7c
    e1c0:	7812      	ldrb	r2, [r2, #0]
    e1c2:	400a      	ands	r2, r1
    e1c4:	2a06      	cmp	r2, #6
    e1c6:	d103      	bne.n	e1d0 <LORAWAN_RxDone+0xf0>
    e1c8:	33e3      	adds	r3, #227	; 0xe3
    e1ca:	7818      	ldrb	r0, [r3, #0]
    e1cc:	4b93      	ldr	r3, [pc, #588]	; (e41c <LORAWAN_RxDone+0x33c>)
    e1ce:	4798      	blx	r3
    e1d0:	7a3a      	ldrb	r2, [r7, #8]
    e1d2:	79fb      	ldrb	r3, [r7, #7]
    e1d4:	0212      	lsls	r2, r2, #8
    e1d6:	431a      	orrs	r2, r3
    e1d8:	7a7b      	ldrb	r3, [r7, #9]
    e1da:	2001      	movs	r0, #1
    e1dc:	041b      	lsls	r3, r3, #16
    e1de:	431a      	orrs	r2, r3
    e1e0:	7abb      	ldrb	r3, [r7, #10]
    e1e2:	061b      	lsls	r3, r3, #24
    e1e4:	4313      	orrs	r3, r2
    e1e6:	0a19      	lsrs	r1, r3, #8
    e1e8:	7063      	strb	r3, [r4, #1]
    e1ea:	70a1      	strb	r1, [r4, #2]
    e1ec:	0c19      	lsrs	r1, r3, #16
    e1ee:	0e1b      	lsrs	r3, r3, #24
    e1f0:	70e1      	strb	r1, [r4, #3]
    e1f2:	7123      	strb	r3, [r4, #4]
    e1f4:	240f      	movs	r4, #15
    e1f6:	2103      	movs	r1, #3
    e1f8:	4b89      	ldr	r3, [pc, #548]	; (e420 <LORAWAN_RxDone+0x340>)
    e1fa:	4798      	blx	r3
    e1fc:	7b38      	ldrb	r0, [r7, #12]
    e1fe:	4b89      	ldr	r3, [pc, #548]	; (e424 <LORAWAN_RxDone+0x344>)
    e200:	4020      	ands	r0, r4
    e202:	4798      	blx	r3
    e204:	7af8      	ldrb	r0, [r7, #11]
    e206:	4b88      	ldr	r3, [pc, #544]	; (e428 <LORAWAN_RxDone+0x348>)
    e208:	0641      	lsls	r1, r0, #25
    e20a:	0700      	lsls	r0, r0, #28
    e20c:	0f49      	lsrs	r1, r1, #29
    e20e:	0f00      	lsrs	r0, r0, #28
    e210:	4798      	blx	r3
    e212:	4b86      	ldr	r3, [pc, #536]	; (e42c <LORAWAN_RxDone+0x34c>)
    e214:	2100      	movs	r1, #0
    e216:	203c      	movs	r0, #60	; 0x3c
    e218:	4798      	blx	r3
    e21a:	9b07      	ldr	r3, [sp, #28]
    e21c:	2b21      	cmp	r3, #33	; 0x21
    e21e:	d000      	beq.n	e222 <LORAWAN_RxDone+0x142>
    e220:	e08c      	b.n	e33c <LORAWAN_RxDone+0x25c>
    e222:	251a      	movs	r5, #26
    e224:	ab04      	add	r3, sp, #16
    e226:	18ed      	adds	r5, r5, r3
    e228:	002a      	movs	r2, r5
    e22a:	4b81      	ldr	r3, [pc, #516]	; (e430 <LORAWAN_RxDone+0x350>)
    e22c:	4981      	ldr	r1, [pc, #516]	; (e434 <LORAWAN_RxDone+0x354>)
    e22e:	2007      	movs	r0, #7
    e230:	4798      	blx	r3
    e232:	782b      	ldrb	r3, [r5, #0]
    e234:	2bff      	cmp	r3, #255	; 0xff
    e236:	d100      	bne.n	e23a <LORAWAN_RxDone+0x15a>
    e238:	e080      	b.n	e33c <LORAWAN_RxDone+0x25c>
    e23a:	2350      	movs	r3, #80	; 0x50
    e23c:	43a3      	bics	r3, r4
    e23e:	9308      	str	r3, [sp, #32]
    e240:	003b      	movs	r3, r7
    e242:	330d      	adds	r3, #13
    e244:	9307      	str	r3, [sp, #28]
    e246:	2600      	movs	r6, #0
    e248:	2203      	movs	r2, #3
    e24a:	9907      	ldr	r1, [sp, #28]
    e24c:	4b6f      	ldr	r3, [pc, #444]	; (e40c <LORAWAN_RxDone+0x32c>)
    e24e:	a80e      	add	r0, sp, #56	; 0x38
    e250:	960e      	str	r6, [sp, #56]	; 0x38
    e252:	4798      	blx	r3
    e254:	2364      	movs	r3, #100	; 0x64
    e256:	990e      	ldr	r1, [sp, #56]	; 0x38
    e258:	aa04      	add	r2, sp, #16
    e25a:	4359      	muls	r1, r3
    e25c:	3b4a      	subs	r3, #74	; 0x4a
    e25e:	189b      	adds	r3, r3, r2
    e260:	7818      	ldrb	r0, [r3, #0]
    e262:	9b06      	ldr	r3, [sp, #24]
    e264:	910e      	str	r1, [sp, #56]	; 0x38
    e266:	1818      	adds	r0, r3, r0
    e268:	b2c0      	uxtb	r0, r0
    e26a:	76d0      	strb	r0, [r2, #27]
    e26c:	42b1      	cmp	r1, r6
    e26e:	d100      	bne.n	e272 <LORAWAN_RxDone+0x192>
    e270:	e0a8      	b.n	e3c4 <LORAWAN_RxDone+0x2e4>
    e272:	466b      	mov	r3, sp
    e274:	2220      	movs	r2, #32
    e276:	189b      	adds	r3, r3, r2
    e278:	781b      	ldrb	r3, [r3, #0]
    e27a:	ad10      	add	r5, sp, #64	; 0x40
    e27c:	ac0b      	add	r4, sp, #44	; 0x2c
    e27e:	7128      	strb	r0, [r5, #4]
    e280:	9110      	str	r1, [sp, #64]	; 0x40
    e282:	7020      	strb	r0, [r4, #0]
    e284:	7063      	strb	r3, [r4, #1]
    e286:	0029      	movs	r1, r5
    e288:	2002      	movs	r0, #2
    e28a:	4b6b      	ldr	r3, [pc, #428]	; (e438 <LORAWAN_RxDone+0x358>)
    e28c:	4798      	blx	r3
    e28e:	2808      	cmp	r0, #8
    e290:	d140      	bne.n	e314 <LORAWAN_RxDone+0x234>
    e292:	0029      	movs	r1, r5
    e294:	0030      	movs	r0, r6
    e296:	4b65      	ldr	r3, [pc, #404]	; (e42c <LORAWAN_RxDone+0x34c>)
    e298:	4798      	blx	r3
    e29a:	ad0c      	add	r5, sp, #48	; 0x30
    e29c:	0021      	movs	r1, r4
    e29e:	4b63      	ldr	r3, [pc, #396]	; (e42c <LORAWAN_RxDone+0x34c>)
    e2a0:	2012      	movs	r0, #18
    e2a2:	4798      	blx	r3
    e2a4:	0031      	movs	r1, r6
    e2a6:	002a      	movs	r2, r5
    e2a8:	4e61      	ldr	r6, [pc, #388]	; (e430 <LORAWAN_RxDone+0x350>)
    e2aa:	2014      	movs	r0, #20
    e2ac:	47b0      	blx	r6
    e2ae:	4c53      	ldr	r4, [pc, #332]	; (e3fc <LORAWAN_RxDone+0x31c>)
    e2b0:	782a      	ldrb	r2, [r5, #0]
    e2b2:	0023      	movs	r3, r4
    e2b4:	33ea      	adds	r3, #234	; 0xea
    e2b6:	701a      	strb	r2, [r3, #0]
    e2b8:	0023      	movs	r3, r4
    e2ba:	786a      	ldrb	r2, [r5, #1]
    e2bc:	2522      	movs	r5, #34	; 0x22
    e2be:	33eb      	adds	r3, #235	; 0xeb
    e2c0:	701a      	strb	r2, [r3, #0]
    e2c2:	4b5e      	ldr	r3, [pc, #376]	; (e43c <LORAWAN_RxDone+0x35c>)
    e2c4:	4798      	blx	r3
    e2c6:	ab04      	add	r3, sp, #16
    e2c8:	18ed      	adds	r5, r5, r3
    e2ca:	231b      	movs	r3, #27
    e2cc:	a904      	add	r1, sp, #16
    e2ce:	185b      	adds	r3, r3, r1
    e2d0:	0019      	movs	r1, r3
    e2d2:	002a      	movs	r2, r5
    e2d4:	201e      	movs	r0, #30
    e2d6:	47b0      	blx	r6
    e2d8:	0023      	movs	r3, r4
    e2da:	33ff      	adds	r3, #255	; 0xff
    e2dc:	7c5b      	ldrb	r3, [r3, #17]
    e2de:	079b      	lsls	r3, r3, #30
    e2e0:	d508      	bpl.n	e2f4 <LORAWAN_RxDone+0x214>
    e2e2:	ab04      	add	r3, sp, #16
    e2e4:	7edb      	ldrb	r3, [r3, #27]
    e2e6:	a90f      	add	r1, sp, #60	; 0x3c
    e2e8:	708b      	strb	r3, [r1, #2]
    e2ea:	882b      	ldrh	r3, [r5, #0]
    e2ec:	201e      	movs	r0, #30
    e2ee:	800b      	strh	r3, [r1, #0]
    e2f0:	4b4e      	ldr	r3, [pc, #312]	; (e42c <LORAWAN_RxDone+0x34c>)
    e2f2:	4798      	blx	r3
    e2f4:	231b      	movs	r3, #27
    e2f6:	aa04      	add	r2, sp, #16
    e2f8:	189b      	adds	r3, r3, r2
    e2fa:	7818      	ldrb	r0, [r3, #0]
    e2fc:	2101      	movs	r1, #1
    e2fe:	4b50      	ldr	r3, [pc, #320]	; (e440 <LORAWAN_RxDone+0x360>)
    e300:	4798      	blx	r3
    e302:	2204      	movs	r2, #4
    e304:	347c      	adds	r4, #124	; 0x7c
    e306:	7863      	ldrb	r3, [r4, #1]
    e308:	210b      	movs	r1, #11
    e30a:	4313      	orrs	r3, r2
    e30c:	7063      	strb	r3, [r4, #1]
    e30e:	2001      	movs	r0, #1
    e310:	4b43      	ldr	r3, [pc, #268]	; (e420 <LORAWAN_RxDone+0x340>)
    e312:	4798      	blx	r3
    e314:	9b06      	ldr	r3, [sp, #24]
    e316:	3301      	adds	r3, #1
    e318:	b2db      	uxtb	r3, r3
    e31a:	9306      	str	r3, [sp, #24]
    e31c:	9b07      	ldr	r3, [sp, #28]
    e31e:	3303      	adds	r3, #3
    e320:	9307      	str	r3, [sp, #28]
    e322:	9b06      	ldr	r3, [sp, #24]
    e324:	2b05      	cmp	r3, #5
    e326:	d18e      	bne.n	e246 <LORAWAN_RxDone+0x166>
    e328:	2204      	movs	r2, #4
    e32a:	4b34      	ldr	r3, [pc, #208]	; (e3fc <LORAWAN_RxDone+0x31c>)
    e32c:	2001      	movs	r0, #1
    e32e:	337c      	adds	r3, #124	; 0x7c
    e330:	7859      	ldrb	r1, [r3, #1]
    e332:	430a      	orrs	r2, r1
    e334:	705a      	strb	r2, [r3, #1]
    e336:	210b      	movs	r1, #11
    e338:	4b39      	ldr	r3, [pc, #228]	; (e420 <LORAWAN_RxDone+0x340>)
    e33a:	4798      	blx	r3
    e33c:	4d41      	ldr	r5, [pc, #260]	; (e444 <LORAWAN_RxDone+0x364>)
    e33e:	1c7e      	adds	r6, r7, #1
    e340:	3704      	adds	r7, #4
    e342:	0028      	movs	r0, r5
    e344:	003a      	movs	r2, r7
    e346:	0031      	movs	r1, r6
    e348:	4b3f      	ldr	r3, [pc, #252]	; (e448 <LORAWAN_RxDone+0x368>)
    e34a:	4798      	blx	r3
    e34c:	2302      	movs	r3, #2
    e34e:	4c2b      	ldr	r4, [pc, #172]	; (e3fc <LORAWAN_RxDone+0x31c>)
    e350:	0028      	movs	r0, r5
    e352:	7563      	strb	r3, [r4, #21]
    e354:	4a2a      	ldr	r2, [pc, #168]	; (e400 <LORAWAN_RxDone+0x320>)
    e356:	3b01      	subs	r3, #1
    e358:	2100      	movs	r1, #0
    e35a:	4d3c      	ldr	r5, [pc, #240]	; (e44c <LORAWAN_RxDone+0x36c>)
    e35c:	47a8      	blx	r5
    e35e:	2800      	cmp	r0, #0
    e360:	d003      	beq.n	e36a <LORAWAN_RxDone+0x28a>
    e362:	4b2b      	ldr	r3, [pc, #172]	; (e410 <LORAWAN_RxDone+0x330>)
    e364:	4798      	blx	r3
    e366:	4b2b      	ldr	r3, [pc, #172]	; (e414 <LORAWAN_RxDone+0x334>)
    e368:	4798      	blx	r3
    e36a:	2105      	movs	r1, #5
    e36c:	4b2c      	ldr	r3, [pc, #176]	; (e420 <LORAWAN_RxDone+0x340>)
    e36e:	2001      	movs	r0, #1
    e370:	4798      	blx	r3
    e372:	4d37      	ldr	r5, [pc, #220]	; (e450 <LORAWAN_RxDone+0x370>)
    e374:	003a      	movs	r2, r7
    e376:	0028      	movs	r0, r5
    e378:	0031      	movs	r1, r6
    e37a:	4b33      	ldr	r3, [pc, #204]	; (e448 <LORAWAN_RxDone+0x368>)
    e37c:	4798      	blx	r3
    e37e:	2301      	movs	r3, #1
    e380:	0028      	movs	r0, r5
    e382:	7163      	strb	r3, [r4, #5]
    e384:	4a1e      	ldr	r2, [pc, #120]	; (e400 <LORAWAN_RxDone+0x320>)
    e386:	18db      	adds	r3, r3, r3
    e388:	2100      	movs	r1, #0
    e38a:	4d30      	ldr	r5, [pc, #192]	; (e44c <LORAWAN_RxDone+0x36c>)
    e38c:	47a8      	blx	r5
    e38e:	2800      	cmp	r0, #0
    e390:	d003      	beq.n	e39a <LORAWAN_RxDone+0x2ba>
    e392:	4b1f      	ldr	r3, [pc, #124]	; (e410 <LORAWAN_RxDone+0x330>)
    e394:	4798      	blx	r3
    e396:	4b1f      	ldr	r3, [pc, #124]	; (e414 <LORAWAN_RxDone+0x334>)
    e398:	4798      	blx	r3
    e39a:	4b21      	ldr	r3, [pc, #132]	; (e420 <LORAWAN_RxDone+0x340>)
    e39c:	2104      	movs	r1, #4
    e39e:	2001      	movs	r0, #1
    e3a0:	4798      	blx	r3
    e3a2:	23e2      	movs	r3, #226	; 0xe2
    e3a4:	33ff      	adds	r3, #255	; 0xff
    e3a6:	5ce3      	ldrb	r3, [r4, r3]
    e3a8:	2b00      	cmp	r3, #0
    e3aa:	d017      	beq.n	e3dc <LORAWAN_RxDone+0x2fc>
    e3ac:	4929      	ldr	r1, [pc, #164]	; (e454 <LORAWAN_RxDone+0x374>)
    e3ae:	2002      	movs	r0, #2
    e3b0:	4c29      	ldr	r4, [pc, #164]	; (e458 <LORAWAN_RxDone+0x378>)
    e3b2:	47a0      	blx	r4
    e3b4:	2800      	cmp	r0, #0
    e3b6:	d008      	beq.n	e3ca <LORAWAN_RxDone+0x2ea>
    e3b8:	4b15      	ldr	r3, [pc, #84]	; (e410 <LORAWAN_RxDone+0x330>)
    e3ba:	4798      	blx	r3
    e3bc:	4b15      	ldr	r3, [pc, #84]	; (e414 <LORAWAN_RxDone+0x334>)
    e3be:	4798      	blx	r3
    e3c0:	2023      	movs	r0, #35	; 0x23
    e3c2:	e6f2      	b.n	e1aa <LORAWAN_RxDone+0xca>
    e3c4:	4b1e      	ldr	r3, [pc, #120]	; (e440 <LORAWAN_RxDone+0x360>)
    e3c6:	4798      	blx	r3
    e3c8:	e7a4      	b.n	e314 <LORAWAN_RxDone+0x234>
    e3ca:	4924      	ldr	r1, [pc, #144]	; (e45c <LORAWAN_RxDone+0x37c>)
    e3cc:	2001      	movs	r0, #1
    e3ce:	47a0      	blx	r4
    e3d0:	2800      	cmp	r0, #0
    e3d2:	d1f1      	bne.n	e3b8 <LORAWAN_RxDone+0x2d8>
    e3d4:	4b22      	ldr	r3, [pc, #136]	; (e460 <LORAWAN_RxDone+0x380>)
    e3d6:	4798      	blx	r3
    e3d8:	2008      	movs	r0, #8
    e3da:	e6e6      	b.n	e1aa <LORAWAN_RxDone+0xca>
    e3dc:	0020      	movs	r0, r4
    e3de:	0021      	movs	r1, r4
    e3e0:	2210      	movs	r2, #16
    e3e2:	3115      	adds	r1, #21
    e3e4:	4d09      	ldr	r5, [pc, #36]	; (e40c <LORAWAN_RxDone+0x32c>)
    e3e6:	3035      	adds	r0, #53	; 0x35
    e3e8:	47a8      	blx	r5
    e3ea:	0020      	movs	r0, r4
    e3ec:	1d61      	adds	r1, r4, #5
    e3ee:	2210      	movs	r2, #16
    e3f0:	3025      	adds	r0, #37	; 0x25
    e3f2:	47a8      	blx	r5
    e3f4:	e7ee      	b.n	e3d4 <LORAWAN_RxDone+0x2f4>
    e3f6:	46c0      	nop			; (mov r8, r8)
    e3f8:	20001838 	.word	0x20001838
    e3fc:	200017bc 	.word	0x200017bc
    e400:	20001801 	.word	0x20001801
    e404:	20000e90 	.word	0x20000e90
    e408:	00008f05 	.word	0x00008f05
    e40c:	00014ecd 	.word	0x00014ecd
    e410:	0000c069 	.word	0x0000c069
    e414:	0000dc19 	.word	0x0000dc19
    e418:	00008ecd 	.word	0x00008ecd
    e41c:	00009915 	.word	0x00009915
    e420:	000091e1 	.word	0x000091e1
    e424:	0000b739 	.word	0x0000b739
    e428:	0000bf35 	.word	0x0000bf35
    e42c:	00008d21 	.word	0x00008d21
    e430:	00008bf9 	.word	0x00008bf9
    e434:	2000189b 	.word	0x2000189b
    e438:	00008c15 	.word	0x00008c15
    e43c:	0000dc8d 	.word	0x0000dc8d
    e440:	0000e091 	.word	0x0000e091
    e444:	200017d1 	.word	0x200017d1
    e448:	0000ba25 	.word	0x0000ba25
    e44c:	00008ef5 	.word	0x00008ef5
    e450:	200017c1 	.word	0x200017c1
    e454:	200017e1 	.word	0x200017e1
    e458:	00008f01 	.word	0x00008f01
    e45c:	200017f1 	.word	0x200017f1
    e460:	0000b935 	.word	0x0000b935
    e464:	20bf      	movs	r0, #191	; 0xbf
    e466:	3a60      	subs	r2, #96	; 0x60
    e468:	4002      	ands	r2, r0
    e46a:	d000      	beq.n	e46e <LORAWAN_RxDone+0x38e>
    e46c:	e3a2      	b.n	ebb4 <LORAWAN_RxDone+0xad4>
    e46e:	38be      	subs	r0, #190	; 0xbe
    e470:	4203      	tst	r3, r0
    e472:	d100      	bne.n	e476 <LORAWAN_RxDone+0x396>
    e474:	e39e      	b.n	ebb4 <LORAWAN_RxDone+0xad4>
    e476:	6823      	ldr	r3, [r4, #0]
    e478:	0a18      	lsrs	r0, r3, #8
    e47a:	7923      	ldrb	r3, [r4, #4]
    e47c:	061b      	lsls	r3, r3, #24
    e47e:	4303      	orrs	r3, r0
    e480:	0020      	movs	r0, r4
    e482:	30d8      	adds	r0, #216	; 0xd8
    e484:	7002      	strb	r2, [r0, #0]
    e486:	78bd      	ldrb	r5, [r7, #2]
    e488:	787e      	ldrb	r6, [r7, #1]
    e48a:	022d      	lsls	r5, r5, #8
    e48c:	432e      	orrs	r6, r5
    e48e:	78fd      	ldrb	r5, [r7, #3]
    e490:	7938      	ldrb	r0, [r7, #4]
    e492:	042d      	lsls	r5, r5, #16
    e494:	4335      	orrs	r5, r6
    e496:	0600      	lsls	r0, r0, #24
    e498:	4305      	orrs	r5, r0
    e49a:	42ab      	cmp	r3, r5
    e49c:	d07b      	beq.n	e596 <LORAWAN_RxDone+0x4b6>
    e49e:	2522      	movs	r5, #34	; 0x22
    e4a0:	ab04      	add	r3, sp, #16
    e4a2:	18ed      	adds	r5, r5, r3
    e4a4:	7a3a      	ldrb	r2, [r7, #8]
    e4a6:	0949      	lsrs	r1, r1, #5
    e4a8:	002b      	movs	r3, r5
    e4aa:	0038      	movs	r0, r7
    e4ac:	4e97      	ldr	r6, [pc, #604]	; (e70c <LORAWAN_RxDone+0x62c>)
    e4ae:	47b0      	blx	r6
    e4b0:	2808      	cmp	r0, #8
    e4b2:	d159      	bne.n	e568 <LORAWAN_RxDone+0x488>
    e4b4:	232c      	movs	r3, #44	; 0x2c
    e4b6:	782a      	ldrb	r2, [r5, #0]
    e4b8:	4353      	muls	r3, r2
    e4ba:	001a      	movs	r2, r3
    e4bc:	3229      	adds	r2, #41	; 0x29
    e4be:	32ff      	adds	r2, #255	; 0xff
    e4c0:	1912      	adds	r2, r2, r4
    e4c2:	18e4      	adds	r4, r4, r3
    e4c4:	2301      	movs	r3, #1
    e4c6:	34fc      	adds	r4, #252	; 0xfc
    e4c8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    e4ca:	9206      	str	r2, [sp, #24]
    e4cc:	9308      	str	r3, [sp, #32]
    e4ce:	4c90      	ldr	r4, [pc, #576]	; (e710 <LORAWAN_RxDone+0x630>)
    e4d0:	0021      	movs	r1, r4
    e4d2:	0020      	movs	r0, r4
    e4d4:	3108      	adds	r1, #8
    e4d6:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
    e4d8:	3084      	adds	r0, #132	; 0x84
    e4da:	9309      	str	r3, [sp, #36]	; 0x24
    e4dc:	79fb      	ldrb	r3, [r7, #7]
    e4de:	79ba      	ldrb	r2, [r7, #6]
    e4e0:	021b      	lsls	r3, r3, #8
    e4e2:	4313      	orrs	r3, r2
    e4e4:	8802      	ldrh	r2, [r0, #0]
    e4e6:	4293      	cmp	r3, r2
    e4e8:	d37a      	bcc.n	e5e0 <LORAWAN_RxDone+0x500>
    e4ea:	0026      	movs	r6, r4
    e4ec:	36d0      	adds	r6, #208	; 0xd0
    e4ee:	8836      	ldrh	r6, [r6, #0]
    e4f0:	1a9a      	subs	r2, r3, r2
    e4f2:	42b2      	cmp	r2, r6
    e4f4:	dd53      	ble.n	e59e <LORAWAN_RxDone+0x4be>
    e4f6:	0022      	movs	r2, r4
    e4f8:	2101      	movs	r1, #1
    e4fa:	328c      	adds	r2, #140	; 0x8c
    e4fc:	7813      	ldrb	r3, [r2, #0]
    e4fe:	438b      	bics	r3, r1
    e500:	7013      	strb	r3, [r2, #0]
    e502:	0023      	movs	r3, r4
    e504:	33f4      	adds	r3, #244	; 0xf4
    e506:	781b      	ldrb	r3, [r3, #0]
    e508:	428b      	cmp	r3, r1
    e50a:	d108      	bne.n	e51e <LORAWAN_RxDone+0x43e>
    e50c:	0023      	movs	r3, r4
    e50e:	220e      	movs	r2, #14
    e510:	337c      	adds	r3, #124	; 0x7c
    e512:	781b      	ldrb	r3, [r3, #0]
    e514:	4013      	ands	r3, r2
    e516:	2b06      	cmp	r3, #6
    e518:	d101      	bne.n	e51e <LORAWAN_RxDone+0x43e>
    e51a:	4b7e      	ldr	r3, [pc, #504]	; (e714 <LORAWAN_RxDone+0x634>)
    e51c:	4798      	blx	r3
    e51e:	497e      	ldr	r1, [pc, #504]	; (e718 <LORAWAN_RxDone+0x638>)
    e520:	784a      	ldrb	r2, [r1, #1]
    e522:	780b      	ldrb	r3, [r1, #0]
    e524:	0212      	lsls	r2, r2, #8
    e526:	431a      	orrs	r2, r3
    e528:	788b      	ldrb	r3, [r1, #2]
    e52a:	041b      	lsls	r3, r3, #16
    e52c:	431a      	orrs	r2, r3
    e52e:	78cb      	ldrb	r3, [r1, #3]
    e530:	061b      	lsls	r3, r3, #24
    e532:	4313      	orrs	r3, r2
    e534:	d008      	beq.n	e548 <LORAWAN_RxDone+0x468>
    e536:	0022      	movs	r2, r4
    e538:	2120      	movs	r1, #32
    e53a:	328c      	adds	r2, #140	; 0x8c
    e53c:	7813      	ldrb	r3, [r2, #0]
    e53e:	2017      	movs	r0, #23
    e540:	438b      	bics	r3, r1
    e542:	7013      	strb	r3, [r2, #0]
    e544:	4b75      	ldr	r3, [pc, #468]	; (e71c <LORAWAN_RxDone+0x63c>)
    e546:	4798      	blx	r3
    e548:	2501      	movs	r5, #1
    e54a:	347c      	adds	r4, #124	; 0x7c
    e54c:	7863      	ldrb	r3, [r4, #1]
    e54e:	43ab      	bics	r3, r5
    e550:	7063      	strb	r3, [r4, #1]
    e552:	78a3      	ldrb	r3, [r4, #2]
    e554:	432b      	orrs	r3, r5
    e556:	70a3      	strb	r3, [r4, #2]
    e558:	4b71      	ldr	r3, [pc, #452]	; (e720 <LORAWAN_RxDone+0x640>)
    e55a:	4798      	blx	r3
    e55c:	210b      	movs	r1, #11
    e55e:	0028      	movs	r0, r5
    e560:	4b70      	ldr	r3, [pc, #448]	; (e724 <LORAWAN_RxDone+0x644>)
    e562:	4798      	blx	r3
    e564:	200d      	movs	r0, #13
    e566:	e620      	b.n	e1aa <LORAWAN_RxDone+0xca>
    e568:	220e      	movs	r2, #14
    e56a:	4b6f      	ldr	r3, [pc, #444]	; (e728 <LORAWAN_RxDone+0x648>)
    e56c:	781b      	ldrb	r3, [r3, #0]
    e56e:	4013      	ands	r3, r2
    e570:	2b0a      	cmp	r3, #10
    e572:	d008      	beq.n	e586 <LORAWAN_RxDone+0x4a6>
    e574:	2b06      	cmp	r3, #6
    e576:	d001      	beq.n	e57c <LORAWAN_RxDone+0x49c>
    e578:	200a      	movs	r0, #10
    e57a:	e616      	b.n	e1aa <LORAWAN_RxDone+0xca>
    e57c:	0023      	movs	r3, r4
    e57e:	33f0      	adds	r3, #240	; 0xf0
    e580:	781b      	ldrb	r3, [r3, #0]
    e582:	2b00      	cmp	r3, #0
    e584:	d0f8      	beq.n	e578 <LORAWAN_RxDone+0x498>
    e586:	2220      	movs	r2, #32
    e588:	201e      	movs	r0, #30
    e58a:	348c      	adds	r4, #140	; 0x8c
    e58c:	7823      	ldrb	r3, [r4, #0]
    e58e:	4393      	bics	r3, r2
    e590:	7023      	strb	r3, [r4, #0]
    e592:	4b62      	ldr	r3, [pc, #392]	; (e71c <LORAWAN_RxDone+0x63c>)
    e594:	e5f6      	b.n	e184 <LORAWAN_RxDone+0xa4>
    e596:	4b65      	ldr	r3, [pc, #404]	; (e72c <LORAWAN_RxDone+0x64c>)
    e598:	9208      	str	r2, [sp, #32]
    e59a:	9306      	str	r3, [sp, #24]
    e59c:	e797      	b.n	e4ce <LORAWAN_RxDone+0x3ee>
    e59e:	8003      	strh	r3, [r0, #0]
    e5a0:	23f0      	movs	r3, #240	; 0xf0
    e5a2:	005b      	lsls	r3, r3, #1
    e5a4:	5ce2      	ldrb	r2, [r4, r3]
    e5a6:	2a00      	cmp	r2, #0
    e5a8:	d113      	bne.n	e5d2 <LORAWAN_RxDone+0x4f2>
    e5aa:	210a      	movs	r1, #10
    e5ac:	2001      	movs	r0, #1
    e5ae:	4b5d      	ldr	r3, [pc, #372]	; (e724 <LORAWAN_RxDone+0x644>)
    e5b0:	4798      	blx	r3
    e5b2:	4b57      	ldr	r3, [pc, #348]	; (e710 <LORAWAN_RxDone+0x630>)
    e5b4:	001a      	movs	r2, r3
    e5b6:	3208      	adds	r2, #8
    e5b8:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
    e5ba:	1c4a      	adds	r2, r1, #1
    e5bc:	d13f      	bne.n	e63e <LORAWAN_RxDone+0x55e>
    e5be:	2401      	movs	r4, #1
    e5c0:	337c      	adds	r3, #124	; 0x7c
    e5c2:	789a      	ldrb	r2, [r3, #2]
    e5c4:	4322      	orrs	r2, r4
    e5c6:	709a      	strb	r2, [r3, #2]
    e5c8:	4b55      	ldr	r3, [pc, #340]	; (e720 <LORAWAN_RxDone+0x640>)
    e5ca:	4798      	blx	r3
    e5cc:	210b      	movs	r1, #11
    e5ce:	0020      	movs	r0, r4
    e5d0:	e7c6      	b.n	e560 <LORAWAN_RxDone+0x480>
    e5d2:	2301      	movs	r3, #1
    e5d4:	4093      	lsls	r3, r2
    e5d6:	6fca      	ldr	r2, [r1, #124]	; 0x7c
    e5d8:	3b01      	subs	r3, #1
    e5da:	421a      	tst	r2, r3
    e5dc:	d0e5      	beq.n	e5aa <LORAWAN_RxDone+0x4ca>
    e5de:	e7e8      	b.n	e5b2 <LORAWAN_RxDone+0x4d2>
    e5e0:	4e53      	ldr	r6, [pc, #332]	; (e730 <LORAWAN_RxDone+0x650>)
    e5e2:	1a9a      	subs	r2, r3, r2
    e5e4:	1992      	adds	r2, r2, r6
    e5e6:	4e53      	ldr	r6, [pc, #332]	; (e734 <LORAWAN_RxDone+0x654>)
    e5e8:	42b2      	cmp	r2, r6
    e5ea:	dc06      	bgt.n	e5fa <LORAWAN_RxDone+0x51a>
    e5ec:	0022      	movs	r2, r4
    e5ee:	8003      	strh	r3, [r0, #0]
    e5f0:	3286      	adds	r2, #134	; 0x86
    e5f2:	8813      	ldrh	r3, [r2, #0]
    e5f4:	3301      	adds	r3, #1
    e5f6:	8013      	strh	r3, [r2, #0]
    e5f8:	e7d2      	b.n	e5a0 <LORAWAN_RxDone+0x4c0>
    e5fa:	0023      	movs	r3, r4
    e5fc:	33f4      	adds	r3, #244	; 0xf4
    e5fe:	781b      	ldrb	r3, [r3, #0]
    e600:	2b01      	cmp	r3, #1
    e602:	d108      	bne.n	e616 <LORAWAN_RxDone+0x536>
    e604:	0023      	movs	r3, r4
    e606:	220e      	movs	r2, #14
    e608:	337c      	adds	r3, #124	; 0x7c
    e60a:	781b      	ldrb	r3, [r3, #0]
    e60c:	4013      	ands	r3, r2
    e60e:	2b06      	cmp	r3, #6
    e610:	d101      	bne.n	e616 <LORAWAN_RxDone+0x536>
    e612:	4b40      	ldr	r3, [pc, #256]	; (e714 <LORAWAN_RxDone+0x634>)
    e614:	4798      	blx	r3
    e616:	4940      	ldr	r1, [pc, #256]	; (e718 <LORAWAN_RxDone+0x638>)
    e618:	784a      	ldrb	r2, [r1, #1]
    e61a:	780b      	ldrb	r3, [r1, #0]
    e61c:	0212      	lsls	r2, r2, #8
    e61e:	431a      	orrs	r2, r3
    e620:	788b      	ldrb	r3, [r1, #2]
    e622:	041b      	lsls	r3, r3, #16
    e624:	431a      	orrs	r2, r3
    e626:	78cb      	ldrb	r3, [r1, #3]
    e628:	061b      	lsls	r3, r3, #24
    e62a:	4313      	orrs	r3, r2
    e62c:	d100      	bne.n	e630 <LORAWAN_RxDone+0x550>
    e62e:	e5aa      	b.n	e186 <LORAWAN_RxDone+0xa6>
    e630:	2220      	movs	r2, #32
    e632:	348c      	adds	r4, #140	; 0x8c
    e634:	7823      	ldrb	r3, [r4, #0]
    e636:	2017      	movs	r0, #23
    e638:	4393      	bics	r3, r2
    e63a:	7023      	strb	r3, [r4, #0]
    e63c:	e7a9      	b.n	e592 <LORAWAN_RxDone+0x4b2>
    e63e:	9b07      	ldr	r3, [sp, #28]
    e640:	9500      	str	r5, [sp, #0]
    e642:	1f1e      	subs	r6, r3, #4
    e644:	b2f2      	uxtb	r2, r6
    e646:	2349      	movs	r3, #73	; 0x49
    e648:	2001      	movs	r0, #1
    e64a:	4c3b      	ldr	r4, [pc, #236]	; (e738 <LORAWAN_RxDone+0x658>)
    e64c:	47a0      	blx	r4
    e64e:	4d3b      	ldr	r5, [pc, #236]	; (e73c <LORAWAN_RxDone+0x65c>)
    e650:	4c3b      	ldr	r4, [pc, #236]	; (e740 <LORAWAN_RxDone+0x660>)
    e652:	2210      	movs	r2, #16
    e654:	0021      	movs	r1, r4
    e656:	4b3b      	ldr	r3, [pc, #236]	; (e744 <LORAWAN_RxDone+0x664>)
    e658:	0028      	movs	r0, r5
    e65a:	4798      	blx	r3
    e65c:	0032      	movs	r2, r6
    e65e:	4b39      	ldr	r3, [pc, #228]	; (e744 <LORAWAN_RxDone+0x664>)
    e660:	0039      	movs	r1, r7
    e662:	4839      	ldr	r0, [pc, #228]	; (e748 <LORAWAN_RxDone+0x668>)
    e664:	4798      	blx	r3
    e666:	9b07      	ldr	r3, [sp, #28]
    e668:	9a08      	ldr	r2, [sp, #32]
    e66a:	330c      	adds	r3, #12
    e66c:	b2db      	uxtb	r3, r3
    e66e:	9300      	str	r3, [sp, #0]
    e670:	002b      	movs	r3, r5
    e672:	2a00      	cmp	r2, #0
    e674:	d038      	beq.n	e6e8 <LORAWAN_RxDone+0x608>
    e676:	0022      	movs	r2, r4
    e678:	2104      	movs	r1, #4
    e67a:	4c34      	ldr	r4, [pc, #208]	; (e74c <LORAWAN_RxDone+0x66c>)
    e67c:	9806      	ldr	r0, [sp, #24]
    e67e:	47a0      	blx	r4
    e680:	2204      	movs	r2, #4
    e682:	492f      	ldr	r1, [pc, #188]	; (e740 <LORAWAN_RxDone+0x660>)
    e684:	4c2f      	ldr	r4, [pc, #188]	; (e744 <LORAWAN_RxDone+0x664>)
    e686:	a80d      	add	r0, sp, #52	; 0x34
    e688:	47a0      	blx	r4
    e68a:	2204      	movs	r2, #4
    e68c:	19b9      	adds	r1, r7, r6
    e68e:	a810      	add	r0, sp, #64	; 0x40
    e690:	47a0      	blx	r4
    e692:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e694:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e696:	4293      	cmp	r3, r2
    e698:	d029      	beq.n	e6ee <LORAWAN_RxDone+0x60e>
    e69a:	4c1d      	ldr	r4, [pc, #116]	; (e710 <LORAWAN_RxDone+0x630>)
    e69c:	0023      	movs	r3, r4
    e69e:	33f4      	adds	r3, #244	; 0xf4
    e6a0:	781b      	ldrb	r3, [r3, #0]
    e6a2:	2b01      	cmp	r3, #1
    e6a4:	d108      	bne.n	e6b8 <LORAWAN_RxDone+0x5d8>
    e6a6:	0023      	movs	r3, r4
    e6a8:	220e      	movs	r2, #14
    e6aa:	337c      	adds	r3, #124	; 0x7c
    e6ac:	781b      	ldrb	r3, [r3, #0]
    e6ae:	4013      	ands	r3, r2
    e6b0:	2b06      	cmp	r3, #6
    e6b2:	d101      	bne.n	e6b8 <LORAWAN_RxDone+0x5d8>
    e6b4:	4b17      	ldr	r3, [pc, #92]	; (e714 <LORAWAN_RxDone+0x634>)
    e6b6:	4798      	blx	r3
    e6b8:	4917      	ldr	r1, [pc, #92]	; (e718 <LORAWAN_RxDone+0x638>)
    e6ba:	784a      	ldrb	r2, [r1, #1]
    e6bc:	780b      	ldrb	r3, [r1, #0]
    e6be:	0212      	lsls	r2, r2, #8
    e6c0:	431a      	orrs	r2, r3
    e6c2:	788b      	ldrb	r3, [r1, #2]
    e6c4:	041b      	lsls	r3, r3, #16
    e6c6:	431a      	orrs	r2, r3
    e6c8:	78cb      	ldrb	r3, [r1, #3]
    e6ca:	061b      	lsls	r3, r3, #24
    e6cc:	4313      	orrs	r3, r2
    e6ce:	d100      	bne.n	e6d2 <LORAWAN_RxDone+0x5f2>
    e6d0:	e559      	b.n	e186 <LORAWAN_RxDone+0xa6>
    e6d2:	0022      	movs	r2, r4
    e6d4:	2120      	movs	r1, #32
    e6d6:	328c      	adds	r2, #140	; 0x8c
    e6d8:	7813      	ldrb	r3, [r2, #0]
    e6da:	3408      	adds	r4, #8
    e6dc:	438b      	bics	r3, r1
    e6de:	7013      	strb	r3, [r2, #0]
    e6e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e6e2:	2018      	movs	r0, #24
    e6e4:	67e3      	str	r3, [r4, #124]	; 0x7c
    e6e6:	e754      	b.n	e592 <LORAWAN_RxDone+0x4b2>
    e6e8:	0022      	movs	r2, r4
    e6ea:	2102      	movs	r1, #2
    e6ec:	e7c5      	b.n	e67a <LORAWAN_RxDone+0x59a>
    e6ee:	9b08      	ldr	r3, [sp, #32]
    e6f0:	2b00      	cmp	r3, #0
    e6f2:	d02f      	beq.n	e754 <LORAWAN_RxDone+0x674>
    e6f4:	2322      	movs	r3, #34	; 0x22
    e6f6:	aa04      	add	r2, sp, #16
    e6f8:	189b      	adds	r3, r3, r2
    e6fa:	781b      	ldrb	r3, [r3, #0]
    e6fc:	003a      	movs	r2, r7
    e6fe:	9907      	ldr	r1, [sp, #28]
    e700:	0038      	movs	r0, r7
    e702:	4c13      	ldr	r4, [pc, #76]	; (e750 <LORAWAN_RxDone+0x670>)
    e704:	47a0      	blx	r4
    e706:	2001      	movs	r0, #1
    e708:	e54f      	b.n	e1aa <LORAWAN_RxDone+0xca>
    e70a:	46c0      	nop			; (mov r8, r8)
    e70c:	0000f6ad 	.word	0x0000f6ad
    e710:	200017bc 	.word	0x200017bc
    e714:	0000baf9 	.word	0x0000baf9
    e718:	20001ab4 	.word	0x20001ab4
    e71c:	0000cb3d 	.word	0x0000cb3d
    e720:	0000dc19 	.word	0x0000dc19
    e724:	000091e1 	.word	0x000091e1
    e728:	20001838 	.word	0x20001838
    e72c:	200017e1 	.word	0x200017e1
    e730:	0000ffff 	.word	0x0000ffff
    e734:	00003fff 	.word	0x00003fff
    e738:	0000ba61 	.word	0x0000ba61
    e73c:	20001abc 	.word	0x20001abc
    e740:	20000e90 	.word	0x20000e90
    e744:	00014ecd 	.word	0x00014ecd
    e748:	20001acc 	.word	0x20001acc
    e74c:	00008f05 	.word	0x00008f05
    e750:	0000f721 	.word	0x0000f721
    e754:	4cd7      	ldr	r4, [pc, #860]	; (eab4 <LORAWAN_RxDone+0x9d4>)
    e756:	466a      	mov	r2, sp
    e758:	2120      	movs	r1, #32
    e75a:	0023      	movs	r3, r4
    e75c:	1852      	adds	r2, r2, r1
    e75e:	7812      	ldrb	r2, [r2, #0]
    e760:	33db      	adds	r3, #219	; 0xdb
    e762:	701a      	strb	r2, [r3, #0]
    e764:	797b      	ldrb	r3, [r7, #5]
    e766:	2b7f      	cmp	r3, #127	; 0x7f
    e768:	d909      	bls.n	e77e <LORAWAN_RxDone+0x69e>
    e76a:	0022      	movs	r2, r4
    e76c:	2320      	movs	r3, #32
    e76e:	327c      	adds	r2, #124	; 0x7c
    e770:	7811      	ldrb	r1, [r2, #0]
    e772:	2001      	movs	r0, #1
    e774:	430b      	orrs	r3, r1
    e776:	7013      	strb	r3, [r2, #0]
    e778:	210b      	movs	r1, #11
    e77a:	4bcf      	ldr	r3, [pc, #828]	; (eab8 <LORAWAN_RxDone+0x9d8>)
    e77c:	4798      	blx	r3
    e77e:	797b      	ldrb	r3, [r7, #5]
    e780:	06db      	lsls	r3, r3, #27
    e782:	d505      	bpl.n	e790 <LORAWAN_RxDone+0x6b0>
    e784:	0022      	movs	r2, r4
    e786:	2308      	movs	r3, #8
    e788:	328c      	adds	r2, #140	; 0x8c
    e78a:	7811      	ldrb	r1, [r2, #0]
    e78c:	430b      	orrs	r3, r1
    e78e:	7013      	strb	r3, [r2, #0]
    e790:	797b      	ldrb	r3, [r7, #5]
    e792:	065b      	lsls	r3, r3, #25
    e794:	d505      	bpl.n	e7a2 <LORAWAN_RxDone+0x6c2>
    e796:	0022      	movs	r2, r4
    e798:	2310      	movs	r3, #16
    e79a:	328c      	adds	r2, #140	; 0x8c
    e79c:	7811      	ldrb	r1, [r2, #0]
    e79e:	430b      	orrs	r3, r1
    e7a0:	7013      	strb	r3, [r2, #0]
    e7a2:	221f      	movs	r2, #31
    e7a4:	783b      	ldrb	r3, [r7, #0]
    e7a6:	4393      	bics	r3, r2
    e7a8:	2ba0      	cmp	r3, #160	; 0xa0
    e7aa:	d105      	bne.n	e7b8 <LORAWAN_RxDone+0x6d8>
    e7ac:	0022      	movs	r2, r4
    e7ae:	328c      	adds	r2, #140	; 0x8c
    e7b0:	7811      	ldrb	r1, [r2, #0]
    e7b2:	3b9e      	subs	r3, #158	; 0x9e
    e7b4:	430b      	orrs	r3, r1
    e7b6:	7013      	strb	r3, [r2, #0]
    e7b8:	7979      	ldrb	r1, [r7, #5]
    e7ba:	070b      	lsls	r3, r1, #28
    e7bc:	d100      	bne.n	e7c0 <LORAWAN_RxDone+0x6e0>
    e7be:	e0da      	b.n	e976 <LORAWAN_RxDone+0x896>
    e7c0:	0709      	lsls	r1, r1, #28
    e7c2:	0f09      	lsrs	r1, r1, #28
    e7c4:	187b      	adds	r3, r7, r1
    e7c6:	7a1b      	ldrb	r3, [r3, #8]
    e7c8:	2b00      	cmp	r3, #0
    e7ca:	d100      	bne.n	e7ce <LORAWAN_RxDone+0x6ee>
    e7cc:	e0aa      	b.n	e924 <LORAWAN_RxDone+0x844>
    e7ce:	0038      	movs	r0, r7
    e7d0:	4bba      	ldr	r3, [pc, #744]	; (eabc <LORAWAN_RxDone+0x9dc>)
    e7d2:	3008      	adds	r0, #8
    e7d4:	4798      	blx	r3
    e7d6:	2301      	movs	r3, #1
    e7d8:	0006      	movs	r6, r0
    e7da:	9308      	str	r3, [sp, #32]
    e7dc:	7978      	ldrb	r0, [r7, #5]
    e7de:	9907      	ldr	r1, [sp, #28]
    e7e0:	0702      	lsls	r2, r0, #28
    e7e2:	0f12      	lsrs	r2, r2, #28
    e7e4:	0013      	movs	r3, r2
    e7e6:	330c      	adds	r3, #12
    e7e8:	4299      	cmp	r1, r3
    e7ea:	d100      	bne.n	e7ee <LORAWAN_RxDone+0x70e>
    e7ec:	e0fa      	b.n	e9e4 <LORAWAN_RxDone+0x904>
    e7ee:	7833      	ldrb	r3, [r6, #0]
    e7f0:	1a89      	subs	r1, r1, r2
    e7f2:	b2c9      	uxtb	r1, r1
    e7f4:	9309      	str	r3, [sp, #36]	; 0x24
    e7f6:	000b      	movs	r3, r1
    e7f8:	3219      	adds	r2, #25
    e7fa:	3b0c      	subs	r3, #12
    e7fc:	4694      	mov	ip, r2
    e7fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e800:	b2db      	uxtb	r3, r3
    e802:	9306      	str	r3, [sp, #24]
    e804:	1c75      	adds	r5, r6, #1
    e806:	4bab      	ldr	r3, [pc, #684]	; (eab4 <LORAWAN_RxDone+0x9d4>)
    e808:	2a00      	cmp	r2, #0
    e80a:	d100      	bne.n	e80e <LORAWAN_RxDone+0x72e>
    e80c:	e0b6      	b.n	e97c <LORAWAN_RxDone+0x89c>
    e80e:	681a      	ldr	r2, [r3, #0]
    e810:	0018      	movs	r0, r3
    e812:	791b      	ldrb	r3, [r3, #4]
    e814:	0a14      	lsrs	r4, r2, #8
    e816:	061b      	lsls	r3, r3, #24
    e818:	4323      	orrs	r3, r4
    e81a:	9304      	str	r3, [sp, #16]
    e81c:	4ba8      	ldr	r3, [pc, #672]	; (eac0 <LORAWAN_RxDone+0x9e0>)
    e81e:	2201      	movs	r2, #1
    e820:	9303      	str	r3, [sp, #12]
    e822:	4663      	mov	r3, ip
    e824:	9302      	str	r3, [sp, #8]
    e826:	4ba7      	ldr	r3, [pc, #668]	; (eac4 <LORAWAN_RxDone+0x9e4>)
    e828:	3008      	adds	r0, #8
    e82a:	390d      	subs	r1, #13
    e82c:	9201      	str	r2, [sp, #4]
    e82e:	9300      	str	r3, [sp, #0]
    e830:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
    e832:	b2c9      	uxtb	r1, r1
    e834:	0028      	movs	r0, r5
    e836:	4ca4      	ldr	r4, [pc, #656]	; (eac8 <LORAWAN_RxDone+0x9e8>)
    e838:	47a0      	blx	r4
    e83a:	2800      	cmp	r0, #0
    e83c:	d004      	beq.n	e848 <LORAWAN_RxDone+0x768>
    e83e:	4ba3      	ldr	r3, [pc, #652]	; (eacc <LORAWAN_RxDone+0x9ec>)
    e840:	4798      	blx	r3
    e842:	201f      	movs	r0, #31
    e844:	4ba2      	ldr	r3, [pc, #648]	; (ead0 <LORAWAN_RxDone+0x9f0>)
    e846:	4798      	blx	r3
    e848:	4c9a      	ldr	r4, [pc, #616]	; (eab4 <LORAWAN_RxDone+0x9d4>)
    e84a:	2300      	movs	r3, #0
    e84c:	0022      	movs	r2, r4
    e84e:	32c2      	adds	r2, #194	; 0xc2
    e850:	8013      	strh	r3, [r2, #0]
    e852:	0022      	movs	r2, r4
    e854:	32ed      	adds	r2, #237	; 0xed
    e856:	7013      	strb	r3, [r2, #0]
    e858:	0022      	movs	r2, r4
    e85a:	2110      	movs	r1, #16
    e85c:	328c      	adds	r2, #140	; 0x8c
    e85e:	7813      	ldrb	r3, [r2, #0]
    e860:	438b      	bics	r3, r1
    e862:	7013      	strb	r3, [r2, #0]
    e864:	0023      	movs	r3, r4
    e866:	2201      	movs	r2, #1
    e868:	337c      	adds	r3, #124	; 0x7c
    e86a:	7859      	ldrb	r1, [r3, #1]
    e86c:	430a      	orrs	r2, r1
    e86e:	705a      	strb	r2, [r3, #1]
    e870:	220e      	movs	r2, #14
    e872:	781b      	ldrb	r3, [r3, #0]
    e874:	4013      	ands	r3, r2
    e876:	2b06      	cmp	r3, #6
    e878:	d109      	bne.n	e88e <LORAWAN_RxDone+0x7ae>
    e87a:	0023      	movs	r3, r4
    e87c:	33f4      	adds	r3, #244	; 0xf4
    e87e:	781b      	ldrb	r3, [r3, #0]
    e880:	2b01      	cmp	r3, #1
    e882:	d104      	bne.n	e88e <LORAWAN_RxDone+0x7ae>
    e884:	0023      	movs	r3, r4
    e886:	33e5      	adds	r3, #229	; 0xe5
    e888:	7818      	ldrb	r0, [r3, #0]
    e88a:	4b92      	ldr	r3, [pc, #584]	; (ead4 <LORAWAN_RxDone+0x9f4>)
    e88c:	4798      	blx	r3
    e88e:	0025      	movs	r5, r4
    e890:	2201      	movs	r2, #1
    e892:	358c      	adds	r5, #140	; 0x8c
    e894:	782b      	ldrb	r3, [r5, #0]
    e896:	4213      	tst	r3, r2
    e898:	d100      	bne.n	e89c <LORAWAN_RxDone+0x7bc>
    e89a:	e0e5      	b.n	ea68 <LORAWAN_RxDone+0x988>
    e89c:	797b      	ldrb	r3, [r7, #5]
    e89e:	321f      	adds	r2, #31
    e8a0:	4213      	tst	r3, r2
    e8a2:	d100      	bne.n	e8a6 <LORAWAN_RxDone+0x7c6>
    e8a4:	e0c6      	b.n	ea34 <LORAWAN_RxDone+0x954>
    e8a6:	4b8c      	ldr	r3, [pc, #560]	; (ead8 <LORAWAN_RxDone+0x9f8>)
    e8a8:	4798      	blx	r3
    e8aa:	0023      	movs	r3, r4
    e8ac:	2101      	movs	r1, #1
    e8ae:	337c      	adds	r3, #124	; 0x7c
    e8b0:	785a      	ldrb	r2, [r3, #1]
    e8b2:	438a      	bics	r2, r1
    e8b4:	705a      	strb	r2, [r3, #1]
    e8b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e8b8:	2a00      	cmp	r2, #0
    e8ba:	d100      	bne.n	e8be <LORAWAN_RxDone+0x7de>
    e8bc:	e09a      	b.n	e9f4 <LORAWAN_RxDone+0x914>
    e8be:	9a06      	ldr	r2, [sp, #24]
    e8c0:	0031      	movs	r1, r6
    e8c2:	0038      	movs	r0, r7
    e8c4:	4b85      	ldr	r3, [pc, #532]	; (eadc <LORAWAN_RxDone+0x9fc>)
    e8c6:	4798      	blx	r3
    e8c8:	4b85      	ldr	r3, [pc, #532]	; (eae0 <LORAWAN_RxDone+0xa00>)
    e8ca:	4d7a      	ldr	r5, [pc, #488]	; (eab4 <LORAWAN_RxDone+0x9d4>)
    e8cc:	781b      	ldrb	r3, [r3, #0]
    e8ce:	06db      	lsls	r3, r3, #27
    e8d0:	d400      	bmi.n	e8d4 <LORAWAN_RxDone+0x7f4>
    e8d2:	e166      	b.n	eba2 <LORAWAN_RxDone+0xac2>
    e8d4:	2220      	movs	r2, #32
    e8d6:	4b83      	ldr	r3, [pc, #524]	; (eae4 <LORAWAN_RxDone+0xa04>)
    e8d8:	781b      	ldrb	r3, [r3, #0]
    e8da:	401a      	ands	r2, r3
    e8dc:	9206      	str	r2, [sp, #24]
    e8de:	d000      	beq.n	e8e2 <LORAWAN_RxDone+0x802>
    e8e0:	e15f      	b.n	eba2 <LORAWAN_RxDone+0xac2>
    e8e2:	320a      	adds	r2, #10
    e8e4:	4213      	tst	r3, r2
    e8e6:	d100      	bne.n	e8ea <LORAWAN_RxDone+0x80a>
    e8e8:	e15b      	b.n	eba2 <LORAWAN_RxDone+0xac2>
    e8ea:	002b      	movs	r3, r5
    e8ec:	33ec      	adds	r3, #236	; 0xec
    e8ee:	781b      	ldrb	r3, [r3, #0]
    e8f0:	a90f      	add	r1, sp, #60	; 0x3c
    e8f2:	704b      	strb	r3, [r1, #1]
    e8f4:	002e      	movs	r6, r5
    e8f6:	2301      	movs	r3, #1
    e8f8:	36df      	adds	r6, #223	; 0xdf
    e8fa:	700b      	strb	r3, [r1, #0]
    e8fc:	7833      	ldrb	r3, [r6, #0]
    e8fe:	aa0e      	add	r2, sp, #56	; 0x38
    e900:	2030      	movs	r0, #48	; 0x30
    e902:	4f79      	ldr	r7, [pc, #484]	; (eae8 <LORAWAN_RxDone+0xa08>)
    e904:	708b      	strb	r3, [r1, #2]
    e906:	47b8      	blx	r7
    e908:	9007      	str	r0, [sp, #28]
    e90a:	2808      	cmp	r0, #8
    e90c:	d000      	beq.n	e910 <LORAWAN_RxDone+0x830>
    e90e:	e0ff      	b.n	eb10 <LORAWAN_RxDone+0xa30>
    e910:	4b76      	ldr	r3, [pc, #472]	; (eaec <LORAWAN_RxDone+0xa0c>)
    e912:	9806      	ldr	r0, [sp, #24]
    e914:	4798      	blx	r3
    e916:	4b73      	ldr	r3, [pc, #460]	; (eae4 <LORAWAN_RxDone+0xa04>)
    e918:	9a07      	ldr	r2, [sp, #28]
    e91a:	781b      	ldrb	r3, [r3, #0]
    e91c:	4393      	bics	r3, r2
    e91e:	4a71      	ldr	r2, [pc, #452]	; (eae4 <LORAWAN_RxDone+0xa04>)
    e920:	7013      	strb	r3, [r2, #0]
    e922:	e6f0      	b.n	e706 <LORAWAN_RxDone+0x626>
    e924:	0023      	movs	r3, r4
    e926:	33f4      	adds	r3, #244	; 0xf4
    e928:	781b      	ldrb	r3, [r3, #0]
    e92a:	2b01      	cmp	r3, #1
    e92c:	d108      	bne.n	e940 <LORAWAN_RxDone+0x860>
    e92e:	0023      	movs	r3, r4
    e930:	220e      	movs	r2, #14
    e932:	337c      	adds	r3, #124	; 0x7c
    e934:	781b      	ldrb	r3, [r3, #0]
    e936:	4013      	ands	r3, r2
    e938:	2b06      	cmp	r3, #6
    e93a:	d101      	bne.n	e940 <LORAWAN_RxDone+0x860>
    e93c:	4b6c      	ldr	r3, [pc, #432]	; (eaf0 <LORAWAN_RxDone+0xa10>)
    e93e:	4798      	blx	r3
    e940:	496c      	ldr	r1, [pc, #432]	; (eaf4 <LORAWAN_RxDone+0xa14>)
    e942:	784a      	ldrb	r2, [r1, #1]
    e944:	780b      	ldrb	r3, [r1, #0]
    e946:	0212      	lsls	r2, r2, #8
    e948:	431a      	orrs	r2, r3
    e94a:	788b      	ldrb	r3, [r1, #2]
    e94c:	041b      	lsls	r3, r3, #16
    e94e:	431a      	orrs	r2, r3
    e950:	78cb      	ldrb	r3, [r1, #3]
    e952:	061b      	lsls	r3, r3, #24
    e954:	4313      	orrs	r3, r2
    e956:	d008      	beq.n	e96a <LORAWAN_RxDone+0x88a>
    e958:	0022      	movs	r2, r4
    e95a:	2120      	movs	r1, #32
    e95c:	328c      	adds	r2, #140	; 0x8c
    e95e:	7813      	ldrb	r3, [r2, #0]
    e960:	201e      	movs	r0, #30
    e962:	438b      	bics	r3, r1
    e964:	7013      	strb	r3, [r2, #0]
    e966:	4b5a      	ldr	r3, [pc, #360]	; (ead0 <LORAWAN_RxDone+0x9f0>)
    e968:	4798      	blx	r3
    e96a:	2300      	movs	r3, #0
    e96c:	34d8      	adds	r4, #216	; 0xd8
    e96e:	7023      	strb	r3, [r4, #0]
    e970:	4b56      	ldr	r3, [pc, #344]	; (eacc <LORAWAN_RxDone+0x9ec>)
    e972:	4798      	blx	r3
    e974:	e6c7      	b.n	e706 <LORAWAN_RxDone+0x626>
    e976:	003e      	movs	r6, r7
    e978:	3608      	adds	r6, #8
    e97a:	e72f      	b.n	e7dc <LORAWAN_RxDone+0x6fc>
    e97c:	9a06      	ldr	r2, [sp, #24]
    e97e:	2a00      	cmp	r2, #0
    e980:	d034      	beq.n	e9ec <LORAWAN_RxDone+0x90c>
    e982:	0702      	lsls	r2, r0, #28
    e984:	d128      	bne.n	e9d8 <LORAWAN_RxDone+0x8f8>
    e986:	390d      	subs	r1, #13
    e988:	681a      	ldr	r2, [r3, #0]
    e98a:	b2cc      	uxtb	r4, r1
    e98c:	0019      	movs	r1, r3
    e98e:	791b      	ldrb	r3, [r3, #4]
    e990:	0a10      	lsrs	r0, r2, #8
    e992:	061b      	lsls	r3, r3, #24
    e994:	4303      	orrs	r3, r0
    e996:	9304      	str	r3, [sp, #16]
    e998:	4b49      	ldr	r3, [pc, #292]	; (eac0 <LORAWAN_RxDone+0x9e0>)
    e99a:	3108      	adds	r1, #8
    e99c:	9303      	str	r3, [sp, #12]
    e99e:	4663      	mov	r3, ip
    e9a0:	9302      	str	r3, [sp, #8]
    e9a2:	2302      	movs	r3, #2
    e9a4:	9301      	str	r3, [sp, #4]
    e9a6:	4b54      	ldr	r3, [pc, #336]	; (eaf8 <LORAWAN_RxDone+0xa18>)
    e9a8:	2201      	movs	r2, #1
    e9aa:	9300      	str	r3, [sp, #0]
    e9ac:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
    e9ae:	0028      	movs	r0, r5
    e9b0:	0021      	movs	r1, r4
    e9b2:	4e45      	ldr	r6, [pc, #276]	; (eac8 <LORAWAN_RxDone+0x9e8>)
    e9b4:	47b0      	blx	r6
    e9b6:	2800      	cmp	r0, #0
    e9b8:	d004      	beq.n	e9c4 <LORAWAN_RxDone+0x8e4>
    e9ba:	4b44      	ldr	r3, [pc, #272]	; (eacc <LORAWAN_RxDone+0x9ec>)
    e9bc:	4798      	blx	r3
    e9be:	201f      	movs	r0, #31
    e9c0:	4b43      	ldr	r3, [pc, #268]	; (ead0 <LORAWAN_RxDone+0x9f0>)
    e9c2:	4798      	blx	r3
    e9c4:	4b3d      	ldr	r3, [pc, #244]	; (eabc <LORAWAN_RxDone+0x9dc>)
    e9c6:	0021      	movs	r1, r4
    e9c8:	0028      	movs	r0, r5
    e9ca:	4798      	blx	r3
    e9cc:	2300      	movs	r3, #0
    e9ce:	9306      	str	r3, [sp, #24]
    e9d0:	3301      	adds	r3, #1
    e9d2:	9308      	str	r3, [sp, #32]
    e9d4:	2600      	movs	r6, #0
    e9d6:	e737      	b.n	e848 <LORAWAN_RxDone+0x768>
    e9d8:	001a      	movs	r2, r3
    e9da:	32f4      	adds	r2, #244	; 0xf4
    e9dc:	7812      	ldrb	r2, [r2, #0]
    e9de:	2a01      	cmp	r2, #1
    e9e0:	d1ae      	bne.n	e940 <LORAWAN_RxDone+0x860>
    e9e2:	e7a5      	b.n	e930 <LORAWAN_RxDone+0x850>
    e9e4:	2600      	movs	r6, #0
    e9e6:	9609      	str	r6, [sp, #36]	; 0x24
    e9e8:	9606      	str	r6, [sp, #24]
    e9ea:	e72d      	b.n	e848 <LORAWAN_RxDone+0x768>
    e9ec:	9b06      	ldr	r3, [sp, #24]
    e9ee:	9309      	str	r3, [sp, #36]	; 0x24
    e9f0:	001e      	movs	r6, r3
    e9f2:	e729      	b.n	e848 <LORAWAN_RxDone+0x768>
    e9f4:	2120      	movs	r1, #32
    e9f6:	782a      	ldrb	r2, [r5, #0]
    e9f8:	438a      	bics	r2, r1
    e9fa:	702a      	strb	r2, [r5, #0]
    e9fc:	0022      	movs	r2, r4
    e9fe:	32f4      	adds	r2, #244	; 0xf4
    ea00:	7812      	ldrb	r2, [r2, #0]
    ea02:	2a01      	cmp	r2, #1
    ea04:	d10e      	bne.n	ea24 <LORAWAN_RxDone+0x944>
    ea06:	781a      	ldrb	r2, [r3, #0]
    ea08:	3912      	subs	r1, #18
    ea0a:	438a      	bics	r2, r1
    ea0c:	701a      	strb	r2, [r3, #0]
    ea0e:	23ea      	movs	r3, #234	; 0xea
    ea10:	4a28      	ldr	r2, [pc, #160]	; (eab4 <LORAWAN_RxDone+0x9d4>)
    ea12:	005b      	lsls	r3, r3, #1
    ea14:	5cd3      	ldrb	r3, [r2, r3]
    ea16:	2b00      	cmp	r3, #0
    ea18:	d000      	beq.n	ea1c <LORAWAN_RxDone+0x93c>
    ea1a:	e755      	b.n	e8c8 <LORAWAN_RxDone+0x7e8>
    ea1c:	2008      	movs	r0, #8
    ea1e:	4b2c      	ldr	r3, [pc, #176]	; (ead0 <LORAWAN_RxDone+0x9f0>)
    ea20:	4798      	blx	r3
    ea22:	e751      	b.n	e8c8 <LORAWAN_RxDone+0x7e8>
    ea24:	2a04      	cmp	r2, #4
    ea26:	d1f2      	bne.n	ea0e <LORAWAN_RxDone+0x92e>
    ea28:	0023      	movs	r3, r4
    ea2a:	33e8      	adds	r3, #232	; 0xe8
    ea2c:	7818      	ldrb	r0, [r3, #0]
    ea2e:	4b29      	ldr	r3, [pc, #164]	; (ead4 <LORAWAN_RxDone+0x9f4>)
    ea30:	4798      	blx	r3
    ea32:	e7ec      	b.n	ea0e <LORAWAN_RxDone+0x92e>
    ea34:	9b08      	ldr	r3, [sp, #32]
    ea36:	2b00      	cmp	r3, #0
    ea38:	d013      	beq.n	ea62 <LORAWAN_RxDone+0x982>
    ea3a:	0023      	movs	r3, r4
    ea3c:	33f4      	adds	r3, #244	; 0xf4
    ea3e:	781e      	ldrb	r6, [r3, #0]
    ea40:	2e01      	cmp	r6, #1
    ea42:	d10e      	bne.n	ea62 <LORAWAN_RxDone+0x982>
    ea44:	4b24      	ldr	r3, [pc, #144]	; (ead8 <LORAWAN_RxDone+0x9f8>)
    ea46:	4798      	blx	r3
    ea48:	0022      	movs	r2, r4
    ea4a:	327c      	adds	r2, #124	; 0x7c
    ea4c:	7853      	ldrb	r3, [r2, #1]
    ea4e:	43b3      	bics	r3, r6
    ea50:	7053      	strb	r3, [r2, #1]
    ea52:	2220      	movs	r2, #32
    ea54:	782b      	ldrb	r3, [r5, #0]
    ea56:	4393      	bics	r3, r2
    ea58:	702b      	strb	r3, [r5, #0]
    ea5a:	23ea      	movs	r3, #234	; 0xea
    ea5c:	005b      	lsls	r3, r3, #1
    ea5e:	5ce3      	ldrb	r3, [r4, r3]
    ea60:	e7d9      	b.n	ea16 <LORAWAN_RxDone+0x936>
    ea62:	4b26      	ldr	r3, [pc, #152]	; (eafc <LORAWAN_RxDone+0xa1c>)
    ea64:	4798      	blx	r3
    ea66:	e72f      	b.n	e8c8 <LORAWAN_RxDone+0x7e8>
    ea68:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ea6a:	2a00      	cmp	r2, #0
    ea6c:	d00b      	beq.n	ea86 <LORAWAN_RxDone+0x9a6>
    ea6e:	9a06      	ldr	r2, [sp, #24]
    ea70:	0031      	movs	r1, r6
    ea72:	0038      	movs	r0, r7
    ea74:	4b19      	ldr	r3, [pc, #100]	; (eadc <LORAWAN_RxDone+0x9fc>)
    ea76:	4798      	blx	r3
    ea78:	0022      	movs	r2, r4
    ea7a:	2101      	movs	r1, #1
    ea7c:	327c      	adds	r2, #124	; 0x7c
    ea7e:	7853      	ldrb	r3, [r2, #1]
    ea80:	438b      	bics	r3, r1
    ea82:	7053      	strb	r3, [r2, #1]
    ea84:	e720      	b.n	e8c8 <LORAWAN_RxDone+0x7e8>
    ea86:	2220      	movs	r2, #32
    ea88:	4393      	bics	r3, r2
    ea8a:	702b      	strb	r3, [r5, #0]
    ea8c:	0023      	movs	r3, r4
    ea8e:	33f4      	adds	r3, #244	; 0xf4
    ea90:	781b      	ldrb	r3, [r3, #0]
    ea92:	2b01      	cmp	r3, #1
    ea94:	d134      	bne.n	eb00 <LORAWAN_RxDone+0xa20>
    ea96:	0022      	movs	r2, r4
    ea98:	210e      	movs	r1, #14
    ea9a:	327c      	adds	r2, #124	; 0x7c
    ea9c:	7813      	ldrb	r3, [r2, #0]
    ea9e:	438b      	bics	r3, r1
    eaa0:	7013      	strb	r3, [r2, #0]
    eaa2:	23ea      	movs	r3, #234	; 0xea
    eaa4:	005b      	lsls	r3, r3, #1
    eaa6:	5ce3      	ldrb	r3, [r4, r3]
    eaa8:	2b00      	cmp	r3, #0
    eaaa:	d1e5      	bne.n	ea78 <LORAWAN_RxDone+0x998>
    eaac:	2008      	movs	r0, #8
    eaae:	4b08      	ldr	r3, [pc, #32]	; (ead0 <LORAWAN_RxDone+0x9f0>)
    eab0:	4798      	blx	r3
    eab2:	e7e1      	b.n	ea78 <LORAWAN_RxDone+0x998>
    eab4:	200017bc 	.word	0x200017bc
    eab8:	000091e1 	.word	0x000091e1
    eabc:	0000de49 	.word	0x0000de49
    eac0:	20001abc 	.word	0x20001abc
    eac4:	200017f1 	.word	0x200017f1
    eac8:	0000ca7d 	.word	0x0000ca7d
    eacc:	0000dc19 	.word	0x0000dc19
    ead0:	0000cb3d 	.word	0x0000cb3d
    ead4:	00009915 	.word	0x00009915
    ead8:	0000c015 	.word	0x0000c015
    eadc:	0000cf2d 	.word	0x0000cf2d
    eae0:	20001838 	.word	0x20001838
    eae4:	20001848 	.word	0x20001848
    eae8:	00008bf9 	.word	0x00008bf9
    eaec:	0000bd41 	.word	0x0000bd41
    eaf0:	0000baf9 	.word	0x0000baf9
    eaf4:	20001ab4 	.word	0x20001ab4
    eaf8:	200017e1 	.word	0x200017e1
    eafc:	0000bfa1 	.word	0x0000bfa1
    eb00:	2b04      	cmp	r3, #4
    eb02:	d1ce      	bne.n	eaa2 <LORAWAN_RxDone+0x9c2>
    eb04:	0023      	movs	r3, r4
    eb06:	33e8      	adds	r3, #232	; 0xe8
    eb08:	7818      	ldrb	r0, [r3, #0]
    eb0a:	4b43      	ldr	r3, [pc, #268]	; (ec18 <LORAWAN_RxDone+0xb38>)
    eb0c:	4798      	blx	r3
    eb0e:	e7c8      	b.n	eaa2 <LORAWAN_RxDone+0x9c2>
    eb10:	35ff      	adds	r5, #255	; 0xff
    eb12:	7c6b      	ldrb	r3, [r5, #17]
    eb14:	079a      	lsls	r2, r3, #30
    eb16:	d521      	bpl.n	eb5c <LORAWAN_RxDone+0xa7c>
    eb18:	aa10      	add	r2, sp, #64	; 0x40
    eb1a:	0031      	movs	r1, r6
    eb1c:	2026      	movs	r0, #38	; 0x26
    eb1e:	47b8      	blx	r7
    eb20:	9b10      	ldr	r3, [sp, #64]	; 0x40
    eb22:	1c5a      	adds	r2, r3, #1
    eb24:	d001      	beq.n	eb2a <LORAWAN_RxDone+0xa4a>
    eb26:	3314      	adds	r3, #20
    eb28:	9310      	str	r3, [sp, #64]	; 0x40
    eb2a:	0021      	movs	r1, r4
    eb2c:	220e      	movs	r2, #14
    eb2e:	317c      	adds	r1, #124	; 0x7c
    eb30:	780b      	ldrb	r3, [r1, #0]
    eb32:	4393      	bics	r3, r2
    eb34:	001a      	movs	r2, r3
    eb36:	230c      	movs	r3, #12
    eb38:	4313      	orrs	r3, r2
    eb3a:	700b      	strb	r3, [r1, #0]
    eb3c:	23e0      	movs	r3, #224	; 0xe0
    eb3e:	33ff      	adds	r3, #255	; 0xff
    eb40:	5ce3      	ldrb	r3, [r4, r3]
    eb42:	9a10      	ldr	r2, [sp, #64]	; 0x40
    eb44:	21fa      	movs	r1, #250	; 0xfa
    eb46:	1ad3      	subs	r3, r2, r3
    eb48:	2200      	movs	r2, #0
    eb4a:	0089      	lsls	r1, r1, #2
    eb4c:	4359      	muls	r1, r3
    eb4e:	34e6      	adds	r4, #230	; 0xe6
    eb50:	4b32      	ldr	r3, [pc, #200]	; (ec1c <LORAWAN_RxDone+0xb3c>)
    eb52:	7820      	ldrb	r0, [r4, #0]
    eb54:	9200      	str	r2, [sp, #0]
    eb56:	4c32      	ldr	r4, [pc, #200]	; (ec20 <LORAWAN_RxDone+0xb40>)
    eb58:	47a0      	blx	r4
    eb5a:	e5d4      	b.n	e706 <LORAWAN_RxDone+0x626>
    eb5c:	075b      	lsls	r3, r3, #29
    eb5e:	d400      	bmi.n	eb62 <LORAWAN_RxDone+0xa82>
    eb60:	e5d1      	b.n	e706 <LORAWAN_RxDone+0x626>
    eb62:	aa10      	add	r2, sp, #64	; 0x40
    eb64:	0031      	movs	r1, r6
    eb66:	2033      	movs	r0, #51	; 0x33
    eb68:	47b8      	blx	r7
    eb6a:	220e      	movs	r2, #14
    eb6c:	4b2d      	ldr	r3, [pc, #180]	; (ec24 <LORAWAN_RxDone+0xb44>)
    eb6e:	781b      	ldrb	r3, [r3, #0]
    eb70:	4393      	bics	r3, r2
    eb72:	001a      	movs	r2, r3
    eb74:	230c      	movs	r3, #12
    eb76:	4313      	orrs	r3, r2
    eb78:	4a2a      	ldr	r2, [pc, #168]	; (ec24 <LORAWAN_RxDone+0xb44>)
    eb7a:	7013      	strb	r3, [r2, #0]
    eb7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    eb7e:	1c5a      	adds	r2, r3, #1
    eb80:	d001      	beq.n	eb86 <LORAWAN_RxDone+0xaa6>
    eb82:	3301      	adds	r3, #1
    eb84:	9310      	str	r3, [sp, #64]	; 0x40
    eb86:	23e0      	movs	r3, #224	; 0xe0
    eb88:	33ff      	adds	r3, #255	; 0xff
    eb8a:	5ce3      	ldrb	r3, [r4, r3]
    eb8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    eb8e:	21fa      	movs	r1, #250	; 0xfa
    eb90:	1ad3      	subs	r3, r2, r3
    eb92:	2200      	movs	r2, #0
    eb94:	0089      	lsls	r1, r1, #2
    eb96:	34e9      	adds	r4, #233	; 0xe9
    eb98:	4359      	muls	r1, r3
    eb9a:	7820      	ldrb	r0, [r4, #0]
    eb9c:	4b22      	ldr	r3, [pc, #136]	; (ec28 <LORAWAN_RxDone+0xb48>)
    eb9e:	9200      	str	r2, [sp, #0]
    eba0:	e7d9      	b.n	eb56 <LORAWAN_RxDone+0xa76>
    eba2:	35f4      	adds	r5, #244	; 0xf4
    eba4:	782b      	ldrb	r3, [r5, #0]
    eba6:	2b04      	cmp	r3, #4
    eba8:	d000      	beq.n	ebac <LORAWAN_RxDone+0xacc>
    ebaa:	e5ac      	b.n	e706 <LORAWAN_RxDone+0x626>
    ebac:	0038      	movs	r0, r7
    ebae:	4b1f      	ldr	r3, [pc, #124]	; (ec2c <LORAWAN_RxDone+0xb4c>)
    ebb0:	4798      	blx	r3
    ebb2:	e5a8      	b.n	e706 <LORAWAN_RxDone+0x626>
    ebb4:	220e      	movs	r2, #14
    ebb6:	4013      	ands	r3, r2
    ebb8:	2b0a      	cmp	r3, #10
    ebba:	d008      	beq.n	ebce <LORAWAN_RxDone+0xaee>
    ebbc:	2b06      	cmp	r3, #6
    ebbe:	d000      	beq.n	ebc2 <LORAWAN_RxDone+0xae2>
    ebc0:	e4da      	b.n	e578 <LORAWAN_RxDone+0x498>
    ebc2:	0023      	movs	r3, r4
    ebc4:	33f0      	adds	r3, #240	; 0xf0
    ebc6:	781b      	ldrb	r3, [r3, #0]
    ebc8:	2b00      	cmp	r3, #0
    ebca:	d100      	bne.n	ebce <LORAWAN_RxDone+0xaee>
    ebcc:	e4d4      	b.n	e578 <LORAWAN_RxDone+0x498>
    ebce:	2220      	movs	r2, #32
    ebd0:	348c      	adds	r4, #140	; 0x8c
    ebd2:	7823      	ldrb	r3, [r4, #0]
    ebd4:	2019      	movs	r0, #25
    ebd6:	4393      	bics	r3, r2
    ebd8:	7023      	strb	r3, [r4, #0]
    ebda:	e4da      	b.n	e592 <LORAWAN_RxDone+0x4b2>
    ebdc:	4914      	ldr	r1, [pc, #80]	; (ec30 <LORAWAN_RxDone+0xb50>)
    ebde:	784a      	ldrb	r2, [r1, #1]
    ebe0:	780b      	ldrb	r3, [r1, #0]
    ebe2:	0212      	lsls	r2, r2, #8
    ebe4:	431a      	orrs	r2, r3
    ebe6:	788b      	ldrb	r3, [r1, #2]
    ebe8:	041b      	lsls	r3, r3, #16
    ebea:	431a      	orrs	r2, r3
    ebec:	78cb      	ldrb	r3, [r1, #3]
    ebee:	061b      	lsls	r3, r3, #24
    ebf0:	4313      	orrs	r3, r2
    ebf2:	d100      	bne.n	ebf6 <LORAWAN_RxDone+0xb16>
    ebf4:	e587      	b.n	e706 <LORAWAN_RxDone+0x626>
    ebf6:	4b0f      	ldr	r3, [pc, #60]	; (ec34 <LORAWAN_RxDone+0xb54>)
    ebf8:	4c0f      	ldr	r4, [pc, #60]	; (ec38 <LORAWAN_RxDone+0xb58>)
    ebfa:	781b      	ldrb	r3, [r3, #0]
    ebfc:	2b10      	cmp	r3, #16
    ebfe:	d105      	bne.n	ec0c <LORAWAN_RxDone+0xb2c>
    ec00:	0001      	movs	r1, r0
    ec02:	2000      	movs	r0, #0
    ec04:	9a07      	ldr	r2, [sp, #28]
    ec06:	3b0c      	subs	r3, #12
    ec08:	47a0      	blx	r4
    ec0a:	e57c      	b.n	e706 <LORAWAN_RxDone+0x626>
    ec0c:	2300      	movs	r3, #0
    ec0e:	0001      	movs	r1, r0
    ec10:	9a07      	ldr	r2, [sp, #28]
    ec12:	0018      	movs	r0, r3
    ec14:	e7f8      	b.n	ec08 <LORAWAN_RxDone+0xb28>
    ec16:	46c0      	nop			; (mov r8, r8)
    ec18:	00009915 	.word	0x00009915
    ec1c:	0000be39 	.word	0x0000be39
    ec20:	00009609 	.word	0x00009609
    ec24:	20001838 	.word	0x20001838
    ec28:	0000c841 	.word	0x0000c841
    ec2c:	0000f495 	.word	0x0000f495
    ec30:	20001ab4 	.word	0x20001ab4
    ec34:	200019a0 	.word	0x200019a0
    ec38:	0000cee1 	.word	0x0000cee1

0000ec3c <LorawanSetEdClass>:
    ec3c:	23ea      	movs	r3, #234	; 0xea
    ec3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ec40:	4d19      	ldr	r5, [pc, #100]	; (eca8 <LorawanSetEdClass+0x6c>)
    ec42:	005b      	lsls	r3, r3, #1
    ec44:	5ceb      	ldrb	r3, [r5, r3]
    ec46:	0004      	movs	r4, r0
    ec48:	2011      	movs	r0, #17
    ec4a:	2b00      	cmp	r3, #0
    ec4c:	d013      	beq.n	ec76 <LorawanSetEdClass+0x3a>
    ec4e:	002b      	movs	r3, r5
    ec50:	33f5      	adds	r3, #245	; 0xf5
    ec52:	781b      	ldrb	r3, [r3, #0]
    ec54:	3807      	subs	r0, #7
    ec56:	4223      	tst	r3, r4
    ec58:	d00d      	beq.n	ec76 <LorawanSetEdClass+0x3a>
    ec5a:	002b      	movs	r3, r5
    ec5c:	33f4      	adds	r3, #244	; 0xf4
    ec5e:	7819      	ldrb	r1, [r3, #0]
    ec60:	428c      	cmp	r4, r1
    ec62:	d007      	beq.n	ec74 <LorawanSetEdClass+0x38>
    ec64:	2901      	cmp	r1, #1
    ec66:	d107      	bne.n	ec78 <LorawanSetEdClass+0x3c>
    ec68:	2c04      	cmp	r4, #4
    ec6a:	d104      	bne.n	ec76 <LorawanSetEdClass+0x3a>
    ec6c:	701c      	strb	r4, [r3, #0]
    ec6e:	2000      	movs	r0, #0
    ec70:	4b0e      	ldr	r3, [pc, #56]	; (ecac <LorawanSetEdClass+0x70>)
    ec72:	4798      	blx	r3
    ec74:	2008      	movs	r0, #8
    ec76:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ec78:	2904      	cmp	r1, #4
    ec7a:	d1fc      	bne.n	ec76 <LorawanSetEdClass+0x3a>
    ec7c:	2c01      	cmp	r4, #1
    ec7e:	d1fa      	bne.n	ec76 <LorawanSetEdClass+0x3a>
    ec80:	701c      	strb	r4, [r3, #0]
    ec82:	0021      	movs	r1, r4
    ec84:	4b09      	ldr	r3, [pc, #36]	; (ecac <LorawanSetEdClass+0x70>)
    ec86:	2000      	movs	r0, #0
    ec88:	4798      	blx	r3
    ec8a:	002a      	movs	r2, r5
    ec8c:	210e      	movs	r1, #14
    ec8e:	327c      	adds	r2, #124	; 0x7c
    ec90:	7813      	ldrb	r3, [r2, #0]
    ec92:	a801      	add	r0, sp, #4
    ec94:	438b      	bics	r3, r1
    ec96:	7013      	strb	r3, [r2, #0]
    ec98:	35ff      	adds	r5, #255	; 0xff
    ec9a:	4b05      	ldr	r3, [pc, #20]	; (ecb0 <LorawanSetEdClass+0x74>)
    ec9c:	7004      	strb	r4, [r0, #0]
    ec9e:	4798      	blx	r3
    eca0:	7f68      	ldrb	r0, [r5, #29]
    eca2:	4b04      	ldr	r3, [pc, #16]	; (ecb4 <LorawanSetEdClass+0x78>)
    eca4:	4798      	blx	r3
    eca6:	e7e5      	b.n	ec74 <LorawanSetEdClass+0x38>
    eca8:	200017bc 	.word	0x200017bc
    ecac:	000091e1 	.word	0x000091e1
    ecb0:	00010f71 	.word	0x00010f71
    ecb4:	00009915 	.word	0x00009915

0000ecb8 <LORAWAN_SetAttr>:
    ecb8:	23ea      	movs	r3, #234	; 0xea
    ecba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ecbc:	4cbf      	ldr	r4, [pc, #764]	; (efbc <LORAWAN_SetAttr+0x304>)
    ecbe:	005b      	lsls	r3, r3, #1
    ecc0:	5ce3      	ldrb	r3, [r4, r3]
    ecc2:	000d      	movs	r5, r1
    ecc4:	2611      	movs	r6, #17
    ecc6:	2b00      	cmp	r3, #0
    ecc8:	d100      	bne.n	eccc <LORAWAN_SetAttr+0x14>
    ecca:	e113      	b.n	eef4 <LORAWAN_SetAttr+0x23c>
    eccc:	2839      	cmp	r0, #57	; 0x39
    ecce:	d86b      	bhi.n	eda8 <LORAWAN_SetAttr+0xf0>
    ecd0:	f002 fd40 	bl	11754 <__gnu_thumb1_case_uhi>
    ecd4:	0086003a 	.word	0x0086003a
    ecd8:	00ef00a5 	.word	0x00ef00a5
    ecdc:	00d900b8 	.word	0x00d900b8
    ece0:	01280112 	.word	0x01280112
    ece4:	015a0148 	.word	0x015a0148
    ece8:	016b0160 	.word	0x016b0160
    ecec:	0197017e 	.word	0x0197017e
    ecf0:	01a1019c 	.word	0x01a1019c
    ecf4:	01ab01a6 	.word	0x01ab01a6
    ecf8:	01b501b0 	.word	0x01b501b0
    ecfc:	01dc01ba 	.word	0x01dc01ba
    ed00:	01be01c1 	.word	0x01be01c1
    ed04:	01e101e5 	.word	0x01e101e5
    ed08:	01d301d7 	.word	0x01d301d7
    ed0c:	006a01cd 	.word	0x006a01cd
    ed10:	018f006a 	.word	0x018f006a
    ed14:	006a006a 	.word	0x006a006a
    ed18:	006a006a 	.word	0x006a006a
    ed1c:	006a006a 	.word	0x006a006a
    ed20:	005901e9 	.word	0x005901e9
    ed24:	01fa01ec 	.word	0x01fa01ec
    ed28:	01f101f6 	.word	0x01f101f6
    ed2c:	01fe006a 	.word	0x01fe006a
    ed30:	006a021e 	.word	0x006a021e
    ed34:	006a006a 	.word	0x006a006a
    ed38:	006a006a 	.word	0x006a006a
    ed3c:	006a006a 	.word	0x006a006a
    ed40:	006a006a 	.word	0x006a006a
    ed44:	023f0235 	.word	0x023f0235
    ed48:	260a      	movs	r6, #10
    ed4a:	2900      	cmp	r1, #0
    ed4c:	d100      	bne.n	ed50 <LORAWAN_SetAttr+0x98>
    ed4e:	e0d1      	b.n	eef4 <LORAWAN_SetAttr+0x23c>
    ed50:	0020      	movs	r0, r4
    ed52:	2208      	movs	r2, #8
    ed54:	4b9a      	ldr	r3, [pc, #616]	; (efc0 <LORAWAN_SetAttr+0x308>)
    ed56:	305d      	adds	r0, #93	; 0x5d
    ed58:	4798      	blx	r3
    ed5a:	2108      	movs	r1, #8
    ed5c:	4e99      	ldr	r6, [pc, #612]	; (efc4 <LORAWAN_SetAttr+0x30c>)
    ed5e:	2001      	movs	r0, #1
    ed60:	47b0      	blx	r6
    ed62:	0022      	movs	r2, r4
    ed64:	2501      	movs	r5, #1
    ed66:	32d6      	adds	r2, #214	; 0xd6
    ed68:	7813      	ldrb	r3, [r2, #0]
    ed6a:	2109      	movs	r1, #9
    ed6c:	432b      	orrs	r3, r5
    ed6e:	347c      	adds	r4, #124	; 0x7c
    ed70:	0028      	movs	r0, r5
    ed72:	7013      	strb	r3, [r2, #0]
    ed74:	47b0      	blx	r6
    ed76:	7823      	ldrb	r3, [r4, #0]
    ed78:	210b      	movs	r1, #11
    ed7a:	43ab      	bics	r3, r5
    ed7c:	0028      	movs	r0, r5
    ed7e:	7023      	strb	r3, [r4, #0]
    ed80:	47b0      	blx	r6
    ed82:	2608      	movs	r6, #8
    ed84:	e0b6      	b.n	eef4 <LORAWAN_SetAttr+0x23c>
    ed86:	0023      	movs	r3, r4
    ed88:	33ff      	adds	r3, #255	; 0xff
    ed8a:	7c5b      	ldrb	r3, [r3, #17]
    ed8c:	260a      	movs	r6, #10
    ed8e:	075b      	lsls	r3, r3, #29
    ed90:	d400      	bmi.n	ed94 <LORAWAN_SetAttr+0xdc>
    ed92:	e0af      	b.n	eef4 <LORAWAN_SetAttr+0x23c>
    ed94:	79ca      	ldrb	r2, [r1, #7]
    ed96:	4b8c      	ldr	r3, [pc, #560]	; (efc8 <LORAWAN_SetAttr+0x310>)
    ed98:	2a00      	cmp	r2, #0
    ed9a:	d10e      	bne.n	edba <LORAWAN_SetAttr+0x102>
    ed9c:	4669      	mov	r1, sp
    ed9e:	201d      	movs	r0, #29
    eda0:	714a      	strb	r2, [r1, #5]
    eda2:	4798      	blx	r3
    eda4:	2800      	cmp	r0, #0
    eda6:	d001      	beq.n	edac <LORAWAN_SetAttr+0xf4>
    eda8:	260a      	movs	r6, #10
    edaa:	e0a3      	b.n	eef4 <LORAWAN_SetAttr+0x23c>
    edac:	2109      	movs	r1, #9
    edae:	34fe      	adds	r4, #254	; 0xfe
    edb0:	82e0      	strh	r0, [r4, #22]
    edb2:	82a0      	strh	r0, [r4, #20]
    edb4:	4b83      	ldr	r3, [pc, #524]	; (efc4 <LORAWAN_SetAttr+0x30c>)
    edb6:	4798      	blx	r3
    edb8:	e7e3      	b.n	ed82 <LORAWAN_SetAttr+0xca>
    edba:	2002      	movs	r0, #2
    edbc:	5e2a      	ldrsh	r2, [r5, r0]
    edbe:	88ae      	ldrh	r6, [r5, #4]
    edc0:	79a8      	ldrb	r0, [r5, #6]
    edc2:	466d      	mov	r5, sp
    edc4:	806a      	strh	r2, [r5, #2]
    edc6:	2201      	movs	r2, #1
    edc8:	8809      	ldrh	r1, [r1, #0]
    edca:	7128      	strb	r0, [r5, #4]
    edcc:	8029      	strh	r1, [r5, #0]
    edce:	201d      	movs	r0, #29
    edd0:	4669      	mov	r1, sp
    edd2:	716a      	strb	r2, [r5, #5]
    edd4:	4798      	blx	r3
    edd6:	2800      	cmp	r0, #0
    edd8:	d1e6      	bne.n	eda8 <LORAWAN_SetAttr+0xf0>
    edda:	34fe      	adds	r4, #254	; 0xfe
    eddc:	82e6      	strh	r6, [r4, #22]
    edde:	e7d0      	b.n	ed82 <LORAWAN_SetAttr+0xca>
    ede0:	260a      	movs	r6, #10
    ede2:	2900      	cmp	r1, #0
    ede4:	d100      	bne.n	ede8 <LORAWAN_SetAttr+0x130>
    ede6:	e085      	b.n	eef4 <LORAWAN_SetAttr+0x23c>
    ede8:	0020      	movs	r0, r4
    edea:	2208      	movs	r2, #8
    edec:	4b74      	ldr	r3, [pc, #464]	; (efc0 <LORAWAN_SetAttr+0x308>)
    edee:	3055      	adds	r0, #85	; 0x55
    edf0:	4798      	blx	r3
    edf2:	2107      	movs	r1, #7
    edf4:	4d73      	ldr	r5, [pc, #460]	; (efc4 <LORAWAN_SetAttr+0x30c>)
    edf6:	2001      	movs	r0, #1
    edf8:	47a8      	blx	r5
    edfa:	0022      	movs	r2, r4
    edfc:	2302      	movs	r3, #2
    edfe:	32d6      	adds	r2, #214	; 0xd6
    ee00:	7811      	ldrb	r1, [r2, #0]
    ee02:	2001      	movs	r0, #1
    ee04:	430b      	orrs	r3, r1
    ee06:	2109      	movs	r1, #9
    ee08:	7013      	strb	r3, [r2, #0]
    ee0a:	47a8      	blx	r5
    ee0c:	2001      	movs	r0, #1
    ee0e:	347c      	adds	r4, #124	; 0x7c
    ee10:	7823      	ldrb	r3, [r4, #0]
    ee12:	210b      	movs	r1, #11
    ee14:	4383      	bics	r3, r0
    ee16:	7023      	strb	r3, [r4, #0]
    ee18:	47a8      	blx	r5
    ee1a:	3e02      	subs	r6, #2
    ee1c:	e06a      	b.n	eef4 <LORAWAN_SetAttr+0x23c>
    ee1e:	680b      	ldr	r3, [r1, #0]
    ee20:	2001      	movs	r0, #1
    ee22:	0a19      	lsrs	r1, r3, #8
    ee24:	70a1      	strb	r1, [r4, #2]
    ee26:	0c19      	lsrs	r1, r3, #16
    ee28:	7063      	strb	r3, [r4, #1]
    ee2a:	70e1      	strb	r1, [r4, #3]
    ee2c:	0e1b      	lsrs	r3, r3, #24
    ee2e:	2103      	movs	r1, #3
    ee30:	4d64      	ldr	r5, [pc, #400]	; (efc4 <LORAWAN_SetAttr+0x30c>)
    ee32:	7123      	strb	r3, [r4, #4]
    ee34:	47a8      	blx	r5
    ee36:	0022      	movs	r2, r4
    ee38:	2304      	movs	r3, #4
    ee3a:	32d6      	adds	r2, #214	; 0xd6
    ee3c:	7811      	ldrb	r1, [r2, #0]
    ee3e:	430b      	orrs	r3, r1
    ee40:	7013      	strb	r3, [r2, #0]
    ee42:	e015      	b.n	ee70 <LORAWAN_SetAttr+0x1b8>
    ee44:	260a      	movs	r6, #10
    ee46:	2900      	cmp	r1, #0
    ee48:	d054      	beq.n	eef4 <LORAWAN_SetAttr+0x23c>
    ee4a:	3606      	adds	r6, #6
    ee4c:	0032      	movs	r2, r6
    ee4e:	4f5c      	ldr	r7, [pc, #368]	; (efc0 <LORAWAN_SetAttr+0x308>)
    ee50:	1d60      	adds	r0, r4, #5
    ee52:	47b8      	blx	r7
    ee54:	0020      	movs	r0, r4
    ee56:	0032      	movs	r2, r6
    ee58:	0029      	movs	r1, r5
    ee5a:	3025      	adds	r0, #37	; 0x25
    ee5c:	47b8      	blx	r7
    ee5e:	2104      	movs	r1, #4
    ee60:	2001      	movs	r0, #1
    ee62:	4d58      	ldr	r5, [pc, #352]	; (efc4 <LORAWAN_SetAttr+0x30c>)
    ee64:	47a8      	blx	r5
    ee66:	0023      	movs	r3, r4
    ee68:	33d6      	adds	r3, #214	; 0xd6
    ee6a:	781a      	ldrb	r2, [r3, #0]
    ee6c:	4316      	orrs	r6, r2
    ee6e:	701e      	strb	r6, [r3, #0]
    ee70:	2109      	movs	r1, #9
    ee72:	2001      	movs	r0, #1
    ee74:	47a8      	blx	r5
    ee76:	2001      	movs	r0, #1
    ee78:	210b      	movs	r1, #11
    ee7a:	347c      	adds	r4, #124	; 0x7c
    ee7c:	7823      	ldrb	r3, [r4, #0]
    ee7e:	4383      	bics	r3, r0
    ee80:	7023      	strb	r3, [r4, #0]
    ee82:	47a8      	blx	r5
    ee84:	e77d      	b.n	ed82 <LORAWAN_SetAttr+0xca>
    ee86:	260a      	movs	r6, #10
    ee88:	2900      	cmp	r1, #0
    ee8a:	d033      	beq.n	eef4 <LORAWAN_SetAttr+0x23c>
    ee8c:	0020      	movs	r0, r4
    ee8e:	2210      	movs	r2, #16
    ee90:	4e4b      	ldr	r6, [pc, #300]	; (efc0 <LORAWAN_SetAttr+0x308>)
    ee92:	3015      	adds	r0, #21
    ee94:	47b0      	blx	r6
    ee96:	0020      	movs	r0, r4
    ee98:	2210      	movs	r2, #16
    ee9a:	0029      	movs	r1, r5
    ee9c:	3035      	adds	r0, #53	; 0x35
    ee9e:	47b0      	blx	r6
    eea0:	2105      	movs	r1, #5
    eea2:	2001      	movs	r0, #1
    eea4:	4d47      	ldr	r5, [pc, #284]	; (efc4 <LORAWAN_SetAttr+0x30c>)
    eea6:	47a8      	blx	r5
    eea8:	0022      	movs	r2, r4
    eeaa:	32d6      	adds	r2, #214	; 0xd6
    eeac:	7811      	ldrb	r1, [r2, #0]
    eeae:	2320      	movs	r3, #32
    eeb0:	e7c5      	b.n	ee3e <LORAWAN_SetAttr+0x186>
    eeb2:	260a      	movs	r6, #10
    eeb4:	2900      	cmp	r1, #0
    eeb6:	d01d      	beq.n	eef4 <LORAWAN_SetAttr+0x23c>
    eeb8:	23e2      	movs	r3, #226	; 0xe2
    eeba:	33ff      	adds	r3, #255	; 0xff
    eebc:	5ce3      	ldrb	r3, [r4, r3]
    eebe:	3e02      	subs	r6, #2
    eec0:	2b00      	cmp	r3, #0
    eec2:	d117      	bne.n	eef4 <LORAWAN_SetAttr+0x23c>
    eec4:	0020      	movs	r0, r4
    eec6:	2210      	movs	r2, #16
    eec8:	4b3d      	ldr	r3, [pc, #244]	; (efc0 <LORAWAN_SetAttr+0x308>)
    eeca:	3045      	adds	r0, #69	; 0x45
    eecc:	4798      	blx	r3
    eece:	2106      	movs	r1, #6
    eed0:	4d3c      	ldr	r5, [pc, #240]	; (efc4 <LORAWAN_SetAttr+0x30c>)
    eed2:	2001      	movs	r0, #1
    eed4:	47a8      	blx	r5
    eed6:	0022      	movs	r2, r4
    eed8:	32d6      	adds	r2, #214	; 0xd6
    eeda:	7813      	ldrb	r3, [r2, #0]
    eedc:	2109      	movs	r1, #9
    eede:	4333      	orrs	r3, r6
    eee0:	2001      	movs	r0, #1
    eee2:	7013      	strb	r3, [r2, #0]
    eee4:	47a8      	blx	r5
    eee6:	2001      	movs	r0, #1
    eee8:	347c      	adds	r4, #124	; 0x7c
    eeea:	7823      	ldrb	r3, [r4, #0]
    eeec:	210b      	movs	r1, #11
    eeee:	4383      	bics	r3, r0
    eef0:	7023      	strb	r3, [r4, #0]
    eef2:	47a8      	blx	r5
    eef4:	0030      	movs	r0, r6
    eef6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    eef8:	780b      	ldrb	r3, [r1, #0]
    eefa:	2001      	movs	r0, #1
    eefc:	0021      	movs	r1, r4
    eefe:	2520      	movs	r5, #32
    ef00:	317c      	adds	r1, #124	; 0x7c
    ef02:	4003      	ands	r3, r0
    ef04:	015a      	lsls	r2, r3, #5
    ef06:	780b      	ldrb	r3, [r1, #0]
    ef08:	43ab      	bics	r3, r5
    ef0a:	4313      	orrs	r3, r2
    ef0c:	700b      	strb	r3, [r1, #0]
    ef0e:	0023      	movs	r3, r4
    ef10:	2200      	movs	r2, #0
    ef12:	33c2      	adds	r3, #194	; 0xc2
    ef14:	348c      	adds	r4, #140	; 0x8c
    ef16:	801a      	strh	r2, [r3, #0]
    ef18:	7823      	ldrb	r3, [r4, #0]
    ef1a:	3210      	adds	r2, #16
    ef1c:	4393      	bics	r3, r2
    ef1e:	7023      	strb	r3, [r4, #0]
    ef20:	210b      	movs	r1, #11
    ef22:	e747      	b.n	edb4 <LORAWAN_SetAttr+0xfc>
    ef24:	466a      	mov	r2, sp
    ef26:	780b      	ldrb	r3, [r1, #0]
    ef28:	7013      	strb	r3, [r2, #0]
    ef2a:	0022      	movs	r2, r4
    ef2c:	32ea      	adds	r2, #234	; 0xea
    ef2e:	7812      	ldrb	r2, [r2, #0]
    ef30:	429a      	cmp	r2, r3
    ef32:	d900      	bls.n	ef36 <LORAWAN_SetAttr+0x27e>
    ef34:	e738      	b.n	eda8 <LORAWAN_SetAttr+0xf0>
    ef36:	0022      	movs	r2, r4
    ef38:	32eb      	adds	r2, #235	; 0xeb
    ef3a:	7812      	ldrb	r2, [r2, #0]
    ef3c:	429a      	cmp	r2, r3
    ef3e:	d200      	bcs.n	ef42 <LORAWAN_SetAttr+0x28a>
    ef40:	e732      	b.n	eda8 <LORAWAN_SetAttr+0xf0>
    ef42:	4669      	mov	r1, sp
    ef44:	2010      	movs	r0, #16
    ef46:	4b21      	ldr	r3, [pc, #132]	; (efcc <LORAWAN_SetAttr+0x314>)
    ef48:	4798      	blx	r3
    ef4a:	0006      	movs	r6, r0
    ef4c:	2808      	cmp	r0, #8
    ef4e:	d000      	beq.n	ef52 <LORAWAN_SetAttr+0x29a>
    ef50:	e72a      	b.n	eda8 <LORAWAN_SetAttr+0xf0>
    ef52:	466b      	mov	r3, sp
    ef54:	210c      	movs	r1, #12
    ef56:	2001      	movs	r0, #1
    ef58:	781b      	ldrb	r3, [r3, #0]
    ef5a:	34df      	adds	r4, #223	; 0xdf
    ef5c:	7023      	strb	r3, [r4, #0]
    ef5e:	4b19      	ldr	r3, [pc, #100]	; (efc4 <LORAWAN_SetAttr+0x30c>)
    ef60:	4798      	blx	r3
    ef62:	e7c7      	b.n	eef4 <LORAWAN_SetAttr+0x23c>
    ef64:	466a      	mov	r2, sp
    ef66:	780b      	ldrb	r3, [r1, #0]
    ef68:	201d      	movs	r0, #29
    ef6a:	7013      	strb	r3, [r2, #0]
    ef6c:	4669      	mov	r1, sp
    ef6e:	4b17      	ldr	r3, [pc, #92]	; (efcc <LORAWAN_SetAttr+0x314>)
    ef70:	4798      	blx	r3
    ef72:	0006      	movs	r6, r0
    ef74:	2808      	cmp	r0, #8
    ef76:	d000      	beq.n	ef7a <LORAWAN_SetAttr+0x2c2>
    ef78:	e716      	b.n	eda8 <LORAWAN_SetAttr+0xf0>
    ef7a:	466b      	mov	r3, sp
    ef7c:	781b      	ldrb	r3, [r3, #0]
    ef7e:	34e1      	adds	r4, #225	; 0xe1
    ef80:	7023      	strb	r3, [r4, #0]
    ef82:	210a      	movs	r1, #10
    ef84:	2000      	movs	r0, #0
    ef86:	e7ea      	b.n	ef5e <LORAWAN_SetAttr+0x2a6>
    ef88:	780b      	ldrb	r3, [r1, #0]
    ef8a:	2103      	movs	r1, #3
    ef8c:	34f7      	adds	r4, #247	; 0xf7
    ef8e:	7023      	strb	r3, [r4, #0]
    ef90:	2000      	movs	r0, #0
    ef92:	e70f      	b.n	edb4 <LORAWAN_SetAttr+0xfc>
    ef94:	680b      	ldr	r3, [r1, #0]
    ef96:	260a      	movs	r6, #10
    ef98:	1c5a      	adds	r2, r3, #1
    ef9a:	d0ab      	beq.n	eef4 <LORAWAN_SetAttr+0x23c>
    ef9c:	2116      	movs	r1, #22
    ef9e:	2000      	movs	r0, #0
    efa0:	3404      	adds	r4, #4
    efa2:	67e3      	str	r3, [r4, #124]	; 0x7c
    efa4:	4b07      	ldr	r3, [pc, #28]	; (efc4 <LORAWAN_SetAttr+0x30c>)
    efa6:	4798      	blx	r3
    efa8:	e737      	b.n	ee1a <LORAWAN_SetAttr+0x162>
    efaa:	680b      	ldr	r3, [r1, #0]
    efac:	260a      	movs	r6, #10
    efae:	1c5a      	adds	r2, r3, #1
    efb0:	d0a0      	beq.n	eef4 <LORAWAN_SetAttr+0x23c>
    efb2:	0031      	movs	r1, r6
    efb4:	3408      	adds	r4, #8
    efb6:	67e3      	str	r3, [r4, #124]	; 0x7c
    efb8:	2001      	movs	r0, #1
    efba:	e7f3      	b.n	efa4 <LORAWAN_SetAttr+0x2ec>
    efbc:	200017bc 	.word	0x200017bc
    efc0:	00014ecd 	.word	0x00014ecd
    efc4:	000091e1 	.word	0x000091e1
    efc8:	0000fd4d 	.word	0x0000fd4d
    efcc:	00008c15 	.word	0x00008c15
    efd0:	0026      	movs	r6, r4
    efd2:	880b      	ldrh	r3, [r1, #0]
    efd4:	36c8      	adds	r6, #200	; 0xc8
    efd6:	210c      	movs	r1, #12
    efd8:	2000      	movs	r0, #0
    efda:	4d60      	ldr	r5, [pc, #384]	; (f15c <LORAWAN_SetAttr+0x4a4>)
    efdc:	8033      	strh	r3, [r6, #0]
    efde:	47a8      	blx	r5
    efe0:	22fa      	movs	r2, #250	; 0xfa
    efe2:	8833      	ldrh	r3, [r6, #0]
    efe4:	0092      	lsls	r2, r2, #2
    efe6:	189b      	adds	r3, r3, r2
    efe8:	34ca      	adds	r4, #202	; 0xca
    efea:	8023      	strh	r3, [r4, #0]
    efec:	210d      	movs	r1, #13
    efee:	2000      	movs	r0, #0
    eff0:	e747      	b.n	ee82 <LORAWAN_SetAttr+0x1ca>
    eff2:	780b      	ldrb	r3, [r1, #0]
    eff4:	260a      	movs	r6, #10
    eff6:	2b0f      	cmp	r3, #15
    eff8:	d900      	bls.n	effc <LORAWAN_SetAttr+0x344>
    effa:	e77b      	b.n	eef4 <LORAWAN_SetAttr+0x23c>
    effc:	3490      	adds	r4, #144	; 0x90
    effe:	7023      	strb	r3, [r4, #0]
    f000:	e70b      	b.n	ee1a <LORAWAN_SetAttr+0x162>
    f002:	880b      	ldrh	r3, [r1, #0]
    f004:	34cc      	adds	r4, #204	; 0xcc
    f006:	8023      	strh	r3, [r4, #0]
    f008:	210e      	movs	r1, #14
    f00a:	e7c1      	b.n	ef90 <LORAWAN_SetAttr+0x2d8>
    f00c:	880b      	ldrh	r3, [r1, #0]
    f00e:	34ce      	adds	r4, #206	; 0xce
    f010:	8023      	strh	r3, [r4, #0]
    f012:	210f      	movs	r1, #15
    f014:	e7bc      	b.n	ef90 <LORAWAN_SetAttr+0x2d8>
    f016:	880b      	ldrh	r3, [r1, #0]
    f018:	34d0      	adds	r4, #208	; 0xd0
    f01a:	8023      	strh	r3, [r4, #0]
    f01c:	2110      	movs	r1, #16
    f01e:	e7b7      	b.n	ef90 <LORAWAN_SetAttr+0x2d8>
    f020:	780b      	ldrb	r3, [r1, #0]
    f022:	34d4      	adds	r4, #212	; 0xd4
    f024:	7023      	strb	r3, [r4, #0]
    f026:	2112      	movs	r1, #18
    f028:	e7b2      	b.n	ef90 <LORAWAN_SetAttr+0x2d8>
    f02a:	780b      	ldrb	r3, [r1, #0]
    f02c:	34d5      	adds	r4, #213	; 0xd5
    f02e:	7023      	strb	r3, [r4, #0]
    f030:	2113      	movs	r1, #19
    f032:	e7ad      	b.n	ef90 <LORAWAN_SetAttr+0x2d8>
    f034:	880b      	ldrh	r3, [r1, #0]
    f036:	34d2      	adds	r4, #210	; 0xd2
    f038:	8023      	strh	r3, [r4, #0]
    f03a:	2111      	movs	r1, #17
    f03c:	e7a8      	b.n	ef90 <LORAWAN_SetAttr+0x2d8>
    f03e:	780b      	ldrb	r3, [r1, #0]
    f040:	34da      	adds	r4, #218	; 0xda
    f042:	7023      	strb	r3, [r4, #0]
    f044:	2115      	movs	r1, #21
    f046:	e7a3      	b.n	ef90 <LORAWAN_SetAttr+0x2d8>
    f048:	780b      	ldrb	r3, [r1, #0]
    f04a:	34d9      	adds	r4, #217	; 0xd9
    f04c:	7023      	strb	r3, [r4, #0]
    f04e:	e698      	b.n	ed82 <LORAWAN_SetAttr+0xca>
    f050:	780b      	ldrb	r3, [r1, #0]
    f052:	34e0      	adds	r4, #224	; 0xe0
    f054:	e7fa      	b.n	f04c <LORAWAN_SetAttr+0x394>
    f056:	2001      	movs	r0, #1
    f058:	780b      	ldrb	r3, [r1, #0]
    f05a:	2110      	movs	r1, #16
    f05c:	347c      	adds	r4, #124	; 0x7c
    f05e:	4003      	ands	r3, r0
    f060:	011a      	lsls	r2, r3, #4
    f062:	7823      	ldrb	r3, [r4, #0]
    f064:	438b      	bics	r3, r1
    f066:	4313      	orrs	r3, r2
    f068:	7023      	strb	r3, [r4, #0]
    f06a:	3905      	subs	r1, #5
    f06c:	e6a2      	b.n	edb4 <LORAWAN_SetAttr+0xfc>
    f06e:	7909      	ldrb	r1, [r1, #4]
    f070:	7828      	ldrb	r0, [r5, #0]
    f072:	4b3b      	ldr	r3, [pc, #236]	; (f160 <LORAWAN_SetAttr+0x4a8>)
    f074:	4798      	blx	r3
    f076:	0006      	movs	r6, r0
    f078:	e73c      	b.n	eef4 <LORAWAN_SetAttr+0x23c>
    f07a:	7909      	ldrb	r1, [r1, #4]
    f07c:	7828      	ldrb	r0, [r5, #0]
    f07e:	4b39      	ldr	r3, [pc, #228]	; (f164 <LORAWAN_SetAttr+0x4ac>)
    f080:	e7f8      	b.n	f074 <LORAWAN_SetAttr+0x3bc>
    f082:	7808      	ldrb	r0, [r1, #0]
    f084:	4b38      	ldr	r3, [pc, #224]	; (f168 <LORAWAN_SetAttr+0x4b0>)
    f086:	6849      	ldr	r1, [r1, #4]
    f088:	4798      	blx	r3
    f08a:	e7f4      	b.n	f076 <LORAWAN_SetAttr+0x3be>
    f08c:	7909      	ldrb	r1, [r1, #4]
    f08e:	6828      	ldr	r0, [r5, #0]
    f090:	4b36      	ldr	r3, [pc, #216]	; (f16c <LORAWAN_SetAttr+0x4b4>)
    f092:	4798      	blx	r3
    f094:	e7ef      	b.n	f076 <LORAWAN_SetAttr+0x3be>
    f096:	7808      	ldrb	r0, [r1, #0]
    f098:	4b35      	ldr	r3, [pc, #212]	; (f170 <LORAWAN_SetAttr+0x4b8>)
    f09a:	4798      	blx	r3
    f09c:	e7eb      	b.n	f076 <LORAWAN_SetAttr+0x3be>
    f09e:	8808      	ldrh	r0, [r1, #0]
    f0a0:	4b34      	ldr	r3, [pc, #208]	; (f174 <LORAWAN_SetAttr+0x4bc>)
    f0a2:	4798      	blx	r3
    f0a4:	e66d      	b.n	ed82 <LORAWAN_SetAttr+0xca>
    f0a6:	4b34      	ldr	r3, [pc, #208]	; (f178 <LORAWAN_SetAttr+0x4c0>)
    f0a8:	6019      	str	r1, [r3, #0]
    f0aa:	e67d      	b.n	eda8 <LORAWAN_SetAttr+0xf0>
    f0ac:	7809      	ldrb	r1, [r1, #0]
    f0ae:	7868      	ldrb	r0, [r5, #1]
    f0b0:	4b32      	ldr	r3, [pc, #200]	; (f17c <LORAWAN_SetAttr+0x4c4>)
    f0b2:	4798      	blx	r3
    f0b4:	e7df      	b.n	f076 <LORAWAN_SetAttr+0x3be>
    f0b6:	7809      	ldrb	r1, [r1, #0]
    f0b8:	4b31      	ldr	r3, [pc, #196]	; (f180 <LORAWAN_SetAttr+0x4c8>)
    f0ba:	1c68      	adds	r0, r5, #1
    f0bc:	4798      	blx	r3
    f0be:	e7da      	b.n	f076 <LORAWAN_SetAttr+0x3be>
    f0c0:	7809      	ldrb	r1, [r1, #0]
    f0c2:	1c68      	adds	r0, r5, #1
    f0c4:	4b2f      	ldr	r3, [pc, #188]	; (f184 <LORAWAN_SetAttr+0x4cc>)
    f0c6:	e7f9      	b.n	f0bc <LORAWAN_SetAttr+0x404>
    f0c8:	7809      	ldrb	r1, [r1, #0]
    f0ca:	6868      	ldr	r0, [r5, #4]
    f0cc:	4b2e      	ldr	r3, [pc, #184]	; (f188 <LORAWAN_SetAttr+0x4d0>)
    f0ce:	e7f5      	b.n	f0bc <LORAWAN_SetAttr+0x404>
    f0d0:	2300      	movs	r3, #0
    f0d2:	466a      	mov	r2, sp
    f0d4:	7809      	ldrb	r1, [r1, #0]
    f0d6:	7013      	strb	r3, [r2, #0]
    f0d8:	4299      	cmp	r1, r3
    f0da:	d014      	beq.n	f106 <LORAWAN_SetAttr+0x44e>
    f0dc:	0022      	movs	r2, r4
    f0de:	2102      	movs	r1, #2
    f0e0:	32ff      	adds	r2, #255	; 0xff
    f0e2:	7c53      	ldrb	r3, [r2, #17]
    f0e4:	420b      	tst	r3, r1
    f0e6:	d001      	beq.n	f0ec <LORAWAN_SetAttr+0x434>
    f0e8:	438b      	bics	r3, r1
    f0ea:	7453      	strb	r3, [r2, #17]
    f0ec:	2220      	movs	r2, #32
    f0ee:	34ff      	adds	r4, #255	; 0xff
    f0f0:	7c63      	ldrb	r3, [r4, #17]
    f0f2:	4213      	tst	r3, r2
    f0f4:	d100      	bne.n	f0f8 <LORAWAN_SetAttr+0x440>
    f0f6:	e644      	b.n	ed82 <LORAWAN_SetAttr+0xca>
    f0f8:	4393      	bics	r3, r2
    f0fa:	7463      	strb	r3, [r4, #17]
    f0fc:	4669      	mov	r1, sp
    f0fe:	4b23      	ldr	r3, [pc, #140]	; (f18c <LORAWAN_SetAttr+0x4d4>)
    f100:	2039      	movs	r0, #57	; 0x39
    f102:	4798      	blx	r3
    f104:	e63d      	b.n	ed82 <LORAWAN_SetAttr+0xca>
    f106:	4a22      	ldr	r2, [pc, #136]	; (f190 <LORAWAN_SetAttr+0x4d8>)
    f108:	4b22      	ldr	r3, [pc, #136]	; (f194 <LORAWAN_SetAttr+0x4dc>)
    f10a:	200e      	movs	r0, #14
    f10c:	4798      	blx	r3
    f10e:	e638      	b.n	ed82 <LORAWAN_SetAttr+0xca>
    f110:	466b      	mov	r3, sp
    f112:	780a      	ldrb	r2, [r1, #0]
    f114:	34ff      	adds	r4, #255	; 0xff
    f116:	701a      	strb	r2, [r3, #0]
    f118:	2320      	movs	r3, #32
    f11a:	2a00      	cmp	r2, #0
    f11c:	d007      	beq.n	f12e <LORAWAN_SetAttr+0x476>
    f11e:	7c62      	ldrb	r2, [r4, #17]
    f120:	4313      	orrs	r3, r2
    f122:	7463      	strb	r3, [r4, #17]
    f124:	4669      	mov	r1, sp
    f126:	4b19      	ldr	r3, [pc, #100]	; (f18c <LORAWAN_SetAttr+0x4d4>)
    f128:	2039      	movs	r0, #57	; 0x39
    f12a:	4798      	blx	r3
    f12c:	e7a3      	b.n	f076 <LORAWAN_SetAttr+0x3be>
    f12e:	7c62      	ldrb	r2, [r4, #17]
    f130:	260a      	movs	r6, #10
    f132:	421a      	tst	r2, r3
    f134:	d100      	bne.n	f138 <LORAWAN_SetAttr+0x480>
    f136:	e6dd      	b.n	eef4 <LORAWAN_SetAttr+0x23c>
    f138:	439a      	bics	r2, r3
    f13a:	7462      	strb	r2, [r4, #17]
    f13c:	e7f2      	b.n	f124 <LORAWAN_SetAttr+0x46c>
    f13e:	780b      	ldrb	r3, [r1, #0]
    f140:	260a      	movs	r6, #10
    f142:	2b08      	cmp	r3, #8
    f144:	d900      	bls.n	f148 <LORAWAN_SetAttr+0x490>
    f146:	e6d5      	b.n	eef4 <LORAWAN_SetAttr+0x23c>
    f148:	22f0      	movs	r2, #240	; 0xf0
    f14a:	0052      	lsls	r2, r2, #1
    f14c:	54a3      	strb	r3, [r4, r2]
    f14e:	210d      	movs	r1, #13
    f150:	e732      	b.n	efb8 <LORAWAN_SetAttr+0x300>
    f152:	23e2      	movs	r3, #226	; 0xe2
    f154:	780a      	ldrb	r2, [r1, #0]
    f156:	33ff      	adds	r3, #255	; 0xff
    f158:	54e2      	strb	r2, [r4, r3]
    f15a:	e612      	b.n	ed82 <LORAWAN_SetAttr+0xca>
    f15c:	000091e1 	.word	0x000091e1
    f160:	0000e091 	.word	0x0000e091
    f164:	0000e021 	.word	0x0000e021
    f168:	0000d019 	.word	0x0000d019
    f16c:	0000cfdd 	.word	0x0000cfdd
    f170:	0000ec3d 	.word	0x0000ec3d
    f174:	0000be7d 	.word	0x0000be7d
    f178:	20001ab0 	.word	0x20001ab0
    f17c:	0000f635 	.word	0x0000f635
    f180:	0000f875 	.word	0x0000f875
    f184:	0000f8c9 	.word	0x0000f8c9
    f188:	0000f825 	.word	0x0000f825
    f18c:	00008d21 	.word	0x00008d21
    f190:	200018cc 	.word	0x200018cc
    f194:	00008bf9 	.word	0x00008bf9

0000f198 <LORAWAN_Reset>:
    f198:	b5f0      	push	{r4, r5, r6, r7, lr}
    f19a:	b087      	sub	sp, #28
    f19c:	ab02      	add	r3, sp, #8
    f19e:	1ddd      	adds	r5, r3, #7
    f1a0:	23ff      	movs	r3, #255	; 0xff
    f1a2:	4c80      	ldr	r4, [pc, #512]	; (f3a4 <LORAWAN_Reset+0x20c>)
    f1a4:	702b      	strb	r3, [r5, #0]
    f1a6:	0023      	movs	r3, r4
    f1a8:	9001      	str	r0, [sp, #4]
    f1aa:	33ef      	adds	r3, #239	; 0xef
    f1ac:	781b      	ldrb	r3, [r3, #0]
    f1ae:	2b00      	cmp	r3, #0
    f1b0:	d001      	beq.n	f1b6 <LORAWAN_Reset+0x1e>
    f1b2:	4b7d      	ldr	r3, [pc, #500]	; (f3a8 <LORAWAN_Reset+0x210>)
    f1b4:	4798      	blx	r3
    f1b6:	002a      	movs	r2, r5
    f1b8:	4b7c      	ldr	r3, [pc, #496]	; (f3ac <LORAWAN_Reset+0x214>)
    f1ba:	2100      	movs	r1, #0
    f1bc:	2023      	movs	r0, #35	; 0x23
    f1be:	4798      	blx	r3
    f1c0:	782b      	ldrb	r3, [r5, #0]
    f1c2:	9a01      	ldr	r2, [sp, #4]
    f1c4:	4293      	cmp	r3, r2
    f1c6:	d001      	beq.n	f1cc <LORAWAN_Reset+0x34>
    f1c8:	4b79      	ldr	r3, [pc, #484]	; (f3b0 <LORAWAN_Reset+0x218>)
    f1ca:	4798      	blx	r3
    f1cc:	0021      	movs	r1, r4
    f1ce:	2334      	movs	r3, #52	; 0x34
    f1d0:	31f7      	adds	r1, #247	; 0xf7
    f1d2:	700b      	strb	r3, [r1, #0]
    f1d4:	2000      	movs	r0, #0
    f1d6:	4b77      	ldr	r3, [pc, #476]	; (f3b4 <LORAWAN_Reset+0x21c>)
    f1d8:	4798      	blx	r3
    f1da:	0023      	movs	r3, r4
    f1dc:	2201      	movs	r2, #1
    f1de:	33f4      	adds	r3, #244	; 0xf4
    f1e0:	701a      	strb	r2, [r3, #0]
    f1e2:	0023      	movs	r3, r4
    f1e4:	2205      	movs	r2, #5
    f1e6:	33f5      	adds	r3, #245	; 0xf5
    f1e8:	701a      	strb	r2, [r3, #0]
    f1ea:	0023      	movs	r3, r4
    f1ec:	32fa      	adds	r2, #250	; 0xfa
    f1ee:	33dd      	adds	r3, #221	; 0xdd
    f1f0:	701a      	strb	r2, [r3, #0]
    f1f2:	0023      	movs	r3, r4
    f1f4:	2500      	movs	r5, #0
    f1f6:	33de      	adds	r3, #222	; 0xde
    f1f8:	701d      	strb	r5, [r3, #0]
    f1fa:	0023      	movs	r3, r4
    f1fc:	33c6      	adds	r3, #198	; 0xc6
    f1fe:	801d      	strh	r5, [r3, #0]
    f200:	0023      	movs	r3, r4
    f202:	3308      	adds	r3, #8
    f204:	67dd      	str	r5, [r3, #124]	; 0x7c
    f206:	1d23      	adds	r3, r4, #4
    f208:	67dd      	str	r5, [r3, #124]	; 0x7c
    f20a:	0023      	movs	r3, r4
    f20c:	33c4      	adds	r3, #196	; 0xc4
    f20e:	801d      	strh	r5, [r3, #0]
    f210:	0023      	movs	r3, r4
    f212:	3390      	adds	r3, #144	; 0x90
    f214:	701d      	strb	r5, [r3, #0]
    f216:	0023      	movs	r3, r4
    f218:	33c2      	adds	r3, #194	; 0xc2
    f21a:	801d      	strh	r5, [r3, #0]
    f21c:	0023      	movs	r3, r4
    f21e:	33ed      	adds	r3, #237	; 0xed
    f220:	701d      	strb	r5, [r3, #0]
    f222:	0023      	movs	r3, r4
    f224:	33ee      	adds	r3, #238	; 0xee
    f226:	701d      	strb	r5, [r3, #0]
    f228:	0023      	movs	r3, r4
    f22a:	3af9      	subs	r2, #249	; 0xf9
    f22c:	33f8      	adds	r3, #248	; 0xf8
    f22e:	601a      	str	r2, [r3, #0]
    f230:	0023      	movs	r3, r4
    f232:	33fc      	adds	r3, #252	; 0xfc
    f234:	601d      	str	r5, [r3, #0]
    f236:	0023      	movs	r3, r4
    f238:	33fe      	adds	r3, #254	; 0xfe
    f23a:	829d      	strh	r5, [r3, #20]
    f23c:	82dd      	strh	r5, [r3, #22]
    f23e:	320a      	adds	r2, #10
    f240:	0029      	movs	r1, r5
    f242:	4b5d      	ldr	r3, [pc, #372]	; (f3b8 <LORAWAN_Reset+0x220>)
    f244:	485d      	ldr	r0, [pc, #372]	; (f3bc <LORAWAN_Reset+0x224>)
    f246:	4798      	blx	r3
    f248:	23ea      	movs	r3, #234	; 0xea
    f24a:	2201      	movs	r2, #1
    f24c:	2607      	movs	r6, #7
    f24e:	005b      	lsls	r3, r3, #1
    f250:	54e2      	strb	r2, [r4, r3]
    f252:	0029      	movs	r1, r5
    f254:	0032      	movs	r2, r6
    f256:	4b58      	ldr	r3, [pc, #352]	; (f3b8 <LORAWAN_Reset+0x220>)
    f258:	4859      	ldr	r0, [pc, #356]	; (f3c0 <LORAWAN_Reset+0x228>)
    f25a:	4798      	blx	r3
    f25c:	23f0      	movs	r3, #240	; 0xf0
    f25e:	2201      	movs	r2, #1
    f260:	005b      	lsls	r3, r3, #1
    f262:	54e2      	strb	r2, [r4, r3]
    f264:	0023      	movs	r3, r4
    f266:	338c      	adds	r3, #140	; 0x8c
    f268:	801d      	strh	r5, [r3, #0]
    f26a:	0023      	movs	r3, r4
    f26c:	33da      	adds	r3, #218	; 0xda
    f26e:	701e      	strb	r6, [r3, #0]
    f270:	0023      	movs	r3, r4
    f272:	33d9      	adds	r3, #217	; 0xd9
    f274:	701d      	strb	r5, [r3, #0]
    f276:	0023      	movs	r3, r4
    f278:	33dc      	adds	r3, #220	; 0xdc
    f27a:	701d      	strb	r5, [r3, #0]
    f27c:	0023      	movs	r3, r4
    f27e:	33db      	adds	r3, #219	; 0xdb
    f280:	701d      	strb	r5, [r3, #0]
    f282:	9801      	ldr	r0, [sp, #4]
    f284:	4b4f      	ldr	r3, [pc, #316]	; (f3c4 <LORAWAN_Reset+0x22c>)
    f286:	67e5      	str	r5, [r4, #124]	; 0x7c
    f288:	4798      	blx	r3
    f28a:	0007      	movs	r7, r0
    f28c:	2808      	cmp	r0, #8
    f28e:	d000      	beq.n	f292 <LORAWAN_Reset+0xfa>
    f290:	e086      	b.n	f3a0 <LORAWAN_Reset+0x208>
    f292:	4e4d      	ldr	r6, [pc, #308]	; (f3c8 <LORAWAN_Reset+0x230>)
    f294:	4a4d      	ldr	r2, [pc, #308]	; (f3cc <LORAWAN_Reset+0x234>)
    f296:	0029      	movs	r1, r5
    f298:	47b0      	blx	r6
    f29a:	4a4d      	ldr	r2, [pc, #308]	; (f3d0 <LORAWAN_Reset+0x238>)
    f29c:	0029      	movs	r1, r5
    f29e:	200e      	movs	r0, #14
    f2a0:	47b0      	blx	r6
    f2a2:	0023      	movs	r3, r4
    f2a4:	4a4b      	ldr	r2, [pc, #300]	; (f3d4 <LORAWAN_Reset+0x23c>)
    f2a6:	33e0      	adds	r3, #224	; 0xe0
    f2a8:	0029      	movs	r1, r5
    f2aa:	2006      	movs	r0, #6
    f2ac:	701d      	strb	r5, [r3, #0]
    f2ae:	47b0      	blx	r6
    f2b0:	4b49      	ldr	r3, [pc, #292]	; (f3d8 <LORAWAN_Reset+0x240>)
    f2b2:	4798      	blx	r3
    f2b4:	466a      	mov	r2, sp
    f2b6:	0023      	movs	r3, r4
    f2b8:	7912      	ldrb	r2, [r2, #4]
    f2ba:	33f6      	adds	r3, #246	; 0xf6
    f2bc:	701a      	strb	r2, [r3, #0]
    f2be:	0029      	movs	r1, r5
    f2c0:	4b46      	ldr	r3, [pc, #280]	; (f3dc <LORAWAN_Reset+0x244>)
    f2c2:	0028      	movs	r0, r5
    f2c4:	4798      	blx	r3
    f2c6:	2210      	movs	r2, #16
    f2c8:	34ff      	adds	r4, #255	; 0xff
    f2ca:	7c63      	ldrb	r3, [r4, #17]
    f2cc:	4213      	tst	r3, r2
    f2ce:	d006      	beq.n	f2de <LORAWAN_Reset+0x146>
    f2d0:	ab02      	add	r3, sp, #8
    f2d2:	1d99      	adds	r1, r3, #6
    f2d4:	2301      	movs	r3, #1
    f2d6:	0038      	movs	r0, r7
    f2d8:	700b      	strb	r3, [r1, #0]
    f2da:	4b36      	ldr	r3, [pc, #216]	; (f3b4 <LORAWAN_Reset+0x21c>)
    f2dc:	4798      	blx	r3
    f2de:	4b40      	ldr	r3, [pc, #256]	; (f3e0 <LORAWAN_Reset+0x248>)
    f2e0:	4940      	ldr	r1, [pc, #256]	; (f3e4 <LORAWAN_Reset+0x24c>)
    f2e2:	201e      	movs	r0, #30
    f2e4:	4798      	blx	r3
    f2e6:	4c2f      	ldr	r4, [pc, #188]	; (f3a4 <LORAWAN_Reset+0x20c>)
    f2e8:	0023      	movs	r3, r4
    f2ea:	33ff      	adds	r3, #255	; 0xff
    f2ec:	7c5b      	ldrb	r3, [r3, #17]
    f2ee:	075b      	lsls	r3, r3, #29
    f2f0:	d507      	bpl.n	f302 <LORAWAN_Reset+0x16a>
    f2f2:	2100      	movs	r1, #0
    f2f4:	aa04      	add	r2, sp, #16
    f2f6:	2032      	movs	r0, #50	; 0x32
    f2f8:	47b0      	blx	r6
    f2fa:	a904      	add	r1, sp, #16
    f2fc:	2027      	movs	r0, #39	; 0x27
    f2fe:	4b3a      	ldr	r3, [pc, #232]	; (f3e8 <LORAWAN_Reset+0x250>)
    f300:	4798      	blx	r3
    f302:	4a3a      	ldr	r2, [pc, #232]	; (f3ec <LORAWAN_Reset+0x254>)
    f304:	2100      	movs	r1, #0
    f306:	2009      	movs	r0, #9
    f308:	47b0      	blx	r6
    f30a:	4a39      	ldr	r2, [pc, #228]	; (f3f0 <LORAWAN_Reset+0x258>)
    f30c:	2100      	movs	r1, #0
    f30e:	200a      	movs	r0, #10
    f310:	47b0      	blx	r6
    f312:	4a38      	ldr	r2, [pc, #224]	; (f3f4 <LORAWAN_Reset+0x25c>)
    f314:	2100      	movs	r1, #0
    f316:	2036      	movs	r0, #54	; 0x36
    f318:	47b0      	blx	r6
    f31a:	ad04      	add	r5, sp, #16
    f31c:	4a36      	ldr	r2, [pc, #216]	; (f3f8 <LORAWAN_Reset+0x260>)
    f31e:	2100      	movs	r1, #0
    f320:	2037      	movs	r0, #55	; 0x37
    f322:	47b0      	blx	r6
    f324:	002a      	movs	r2, r5
    f326:	2100      	movs	r1, #0
    f328:	2014      	movs	r0, #20
    f32a:	47b0      	blx	r6
    f32c:	0023      	movs	r3, r4
    f32e:	782a      	ldrb	r2, [r5, #0]
    f330:	33ea      	adds	r3, #234	; 0xea
    f332:	701a      	strb	r2, [r3, #0]
    f334:	0023      	movs	r3, r4
    f336:	786a      	ldrb	r2, [r5, #1]
    f338:	33eb      	adds	r3, #235	; 0xeb
    f33a:	701a      	strb	r2, [r3, #0]
    f33c:	0023      	movs	r3, r4
    f33e:	2500      	movs	r5, #0
    f340:	33d6      	adds	r3, #214	; 0xd6
    f342:	801d      	strh	r5, [r3, #0]
    f344:	2265      	movs	r2, #101	; 0x65
    f346:	0029      	movs	r1, r5
    f348:	0020      	movs	r0, r4
    f34a:	4b1b      	ldr	r3, [pc, #108]	; (f3b8 <LORAWAN_Reset+0x220>)
    f34c:	4798      	blx	r3
    f34e:	0023      	movs	r3, r4
    f350:	22fa      	movs	r2, #250	; 0xfa
    f352:	33c8      	adds	r3, #200	; 0xc8
    f354:	0092      	lsls	r2, r2, #2
    f356:	801a      	strh	r2, [r3, #0]
    f358:	0022      	movs	r2, r4
    f35a:	23fa      	movs	r3, #250	; 0xfa
    f35c:	32ca      	adds	r2, #202	; 0xca
    f35e:	00db      	lsls	r3, r3, #3
    f360:	8013      	strh	r3, [r2, #0]
    f362:	0022      	movs	r2, r4
    f364:	4925      	ldr	r1, [pc, #148]	; (f3fc <LORAWAN_Reset+0x264>)
    f366:	32cc      	adds	r2, #204	; 0xcc
    f368:	8011      	strh	r1, [r2, #0]
    f36a:	0022      	movs	r2, r4
    f36c:	4924      	ldr	r1, [pc, #144]	; (f400 <LORAWAN_Reset+0x268>)
    f36e:	32ce      	adds	r2, #206	; 0xce
    f370:	8011      	strh	r1, [r2, #0]
    f372:	0022      	movs	r2, r4
    f374:	32d2      	adds	r2, #210	; 0xd2
    f376:	8013      	strh	r3, [r2, #0]
    f378:	0023      	movs	r3, r4
    f37a:	2220      	movs	r2, #32
    f37c:	33d5      	adds	r3, #213	; 0xd5
    f37e:	701a      	strb	r2, [r3, #0]
    f380:	0023      	movs	r3, r4
    f382:	1892      	adds	r2, r2, r2
    f384:	33d4      	adds	r3, #212	; 0xd4
    f386:	701a      	strb	r2, [r3, #0]
    f388:	2380      	movs	r3, #128	; 0x80
    f38a:	34d0      	adds	r4, #208	; 0xd0
    f38c:	01db      	lsls	r3, r3, #7
    f38e:	8023      	strh	r3, [r4, #0]
    f390:	0028      	movs	r0, r5
    f392:	4b1c      	ldr	r3, [pc, #112]	; (f404 <LORAWAN_Reset+0x26c>)
    f394:	4798      	blx	r3
    f396:	4b1c      	ldr	r3, [pc, #112]	; (f408 <LORAWAN_Reset+0x270>)
    f398:	4798      	blx	r3
    f39a:	0038      	movs	r0, r7
    f39c:	b007      	add	sp, #28
    f39e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f3a0:	270a      	movs	r7, #10
    f3a2:	e7fa      	b.n	f39a <LORAWAN_Reset+0x202>
    f3a4:	200017bc 	.word	0x200017bc
    f3a8:	0000b6b1 	.word	0x0000b6b1
    f3ac:	0000d051 	.word	0x0000d051
    f3b0:	00008e75 	.word	0x00008e75
    f3b4:	0000fd4d 	.word	0x0000fd4d
    f3b8:	00014f51 	.word	0x00014f51
    f3bc:	200018bc 	.word	0x200018bc
    f3c0:	20001993 	.word	0x20001993
    f3c4:	00008d95 	.word	0x00008d95
    f3c8:	00008bf9 	.word	0x00008bf9
    f3cc:	20001825 	.word	0x20001825
    f3d0:	200018cc 	.word	0x200018cc
    f3d4:	200018a8 	.word	0x200018a8
    f3d8:	0000ff69 	.word	0x0000ff69
    f3dc:	000091e1 	.word	0x000091e1
    f3e0:	0000fc5d 	.word	0x0000fc5d
    f3e4:	2000199b 	.word	0x2000199b
    f3e8:	0000ecb9 	.word	0x0000ecb9
    f3ec:	2000182a 	.word	0x2000182a
    f3f0:	20001826 	.word	0x20001826
    f3f4:	2000189d 	.word	0x2000189d
    f3f8:	2000189b 	.word	0x2000189b
    f3fc:	00001388 	.word	0x00001388
    f400:	00001770 	.word	0x00001770
    f404:	0000be7d 	.word	0x0000be7d
    f408:	0000f5e5 	.word	0x0000f5e5

0000f40c <LORAWAN_ReadyToSleep>:
    f40c:	4b08      	ldr	r3, [pc, #32]	; (f430 <LORAWAN_ReadyToSleep+0x24>)
    f40e:	001a      	movs	r2, r3
    f410:	32f4      	adds	r2, #244	; 0xf4
    f412:	7812      	ldrb	r2, [r2, #0]
    f414:	2a01      	cmp	r2, #1
    f416:	d002      	beq.n	f41e <LORAWAN_ReadyToSleep+0x12>
    f418:	2000      	movs	r0, #0
    f41a:	2a04      	cmp	r2, #4
    f41c:	d106      	bne.n	f42c <LORAWAN_ReadyToSleep+0x20>
    f41e:	337c      	adds	r3, #124	; 0x7c
    f420:	7818      	ldrb	r0, [r3, #0]
    f422:	230e      	movs	r3, #14
    f424:	4018      	ands	r0, r3
    f426:	4243      	negs	r3, r0
    f428:	4158      	adcs	r0, r3
    f42a:	b2c0      	uxtb	r0, r0
    f42c:	4770      	bx	lr
    f42e:	46c0      	nop			; (mov r8, r8)
    f430:	200017bc 	.word	0x200017bc

0000f434 <LorawanClasscUlAckTimerCallback>:
    f434:	2102      	movs	r1, #2
    f436:	4b03      	ldr	r3, [pc, #12]	; (f444 <LorawanClasscUlAckTimerCallback+0x10>)
    f438:	338c      	adds	r3, #140	; 0x8c
    f43a:	781a      	ldrb	r2, [r3, #0]
    f43c:	438a      	bics	r2, r1
    f43e:	701a      	strb	r2, [r3, #0]
    f440:	4770      	bx	lr
    f442:	46c0      	nop			; (mov r8, r8)
    f444:	200017bc 	.word	0x200017bc

0000f448 <LorawanClasscValidateSend>:
    f448:	23ea      	movs	r3, #234	; 0xea
    f44a:	b510      	push	{r4, lr}
    f44c:	4c0a      	ldr	r4, [pc, #40]	; (f478 <LorawanClasscValidateSend+0x30>)
    f44e:	005b      	lsls	r3, r3, #1
    f450:	5ce3      	ldrb	r3, [r4, r3]
    f452:	2b00      	cmp	r3, #0
    f454:	d008      	beq.n	f468 <LorawanClasscValidateSend+0x20>
    f456:	220e      	movs	r2, #14
    f458:	347c      	adds	r4, #124	; 0x7c
    f45a:	7823      	ldrb	r3, [r4, #0]
    f45c:	2008      	movs	r0, #8
    f45e:	4013      	ands	r3, r2
    f460:	2b02      	cmp	r3, #2
    f462:	d100      	bne.n	f466 <LorawanClasscValidateSend+0x1e>
    f464:	2011      	movs	r0, #17
    f466:	bd10      	pop	{r4, pc}
    f468:	0023      	movs	r3, r4
    f46a:	33ff      	adds	r3, #255	; 0xff
    f46c:	7f58      	ldrb	r0, [r3, #29]
    f46e:	4b03      	ldr	r3, [pc, #12]	; (f47c <LorawanClasscValidateSend+0x34>)
    f470:	4798      	blx	r3
    f472:	2800      	cmp	r0, #0
    f474:	d1ef      	bne.n	f456 <LorawanClasscValidateSend+0xe>
    f476:	e7f5      	b.n	f464 <LorawanClasscValidateSend+0x1c>
    f478:	200017bc 	.word	0x200017bc
    f47c:	000097a1 	.word	0x000097a1

0000f480 <LorawanClasscReceiveWindow1Callback>:
    f480:	2301      	movs	r3, #1
    f482:	b507      	push	{r0, r1, r2, lr}
    f484:	a801      	add	r0, sp, #4
    f486:	7003      	strb	r3, [r0, #0]
    f488:	4b01      	ldr	r3, [pc, #4]	; (f490 <LorawanClasscReceiveWindow1Callback+0x10>)
    f48a:	4798      	blx	r3
    f48c:	bd07      	pop	{r0, r1, r2, pc}
    f48e:	46c0      	nop			; (mov r8, r8)
    f490:	00010f71 	.word	0x00010f71

0000f494 <LorawanClasscRxDone>:
    f494:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f496:	221f      	movs	r2, #31
    f498:	7803      	ldrb	r3, [r0, #0]
    f49a:	4c13      	ldr	r4, [pc, #76]	; (f4e8 <LorawanClasscRxDone+0x54>)
    f49c:	4393      	bics	r3, r2
    f49e:	2ba0      	cmp	r3, #160	; 0xa0
    f4a0:	d10c      	bne.n	f4bc <LorawanClasscRxDone+0x28>
    f4a2:	0025      	movs	r5, r4
    f4a4:	35ff      	adds	r5, #255	; 0xff
    f4a6:	7f68      	ldrb	r0, [r5, #29]
    f4a8:	4b10      	ldr	r3, [pc, #64]	; (f4ec <LorawanClasscRxDone+0x58>)
    f4aa:	4798      	blx	r3
    f4ac:	1e02      	subs	r2, r0, #0
    f4ae:	d014      	beq.n	f4da <LorawanClasscRxDone+0x46>
    f4b0:	0022      	movs	r2, r4
    f4b2:	2102      	movs	r1, #2
    f4b4:	328c      	adds	r2, #140	; 0x8c
    f4b6:	7813      	ldrb	r3, [r2, #0]
    f4b8:	438b      	bics	r3, r1
    f4ba:	7013      	strb	r3, [r2, #0]
    f4bc:	347c      	adds	r4, #124	; 0x7c
    f4be:	7823      	ldrb	r3, [r4, #0]
    f4c0:	220e      	movs	r2, #14
    f4c2:	0019      	movs	r1, r3
    f4c4:	4011      	ands	r1, r2
    f4c6:	2906      	cmp	r1, #6
    f4c8:	d103      	bne.n	f4d2 <LorawanClasscRxDone+0x3e>
    f4ca:	4393      	bics	r3, r2
    f4cc:	3a04      	subs	r2, #4
    f4ce:	4313      	orrs	r3, r2
    f4d0:	7023      	strb	r3, [r4, #0]
    f4d2:	2000      	movs	r0, #0
    f4d4:	4b06      	ldr	r3, [pc, #24]	; (f4f0 <LorawanClasscRxDone+0x5c>)
    f4d6:	4798      	blx	r3
    f4d8:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    f4da:	7f68      	ldrb	r0, [r5, #29]
    f4dc:	4b05      	ldr	r3, [pc, #20]	; (f4f4 <LorawanClasscRxDone+0x60>)
    f4de:	9200      	str	r2, [sp, #0]
    f4e0:	4905      	ldr	r1, [pc, #20]	; (f4f8 <LorawanClasscRxDone+0x64>)
    f4e2:	4d06      	ldr	r5, [pc, #24]	; (f4fc <LorawanClasscRxDone+0x68>)
    f4e4:	47a8      	blx	r5
    f4e6:	e7e9      	b.n	f4bc <LorawanClasscRxDone+0x28>
    f4e8:	200017bc 	.word	0x200017bc
    f4ec:	000097a1 	.word	0x000097a1
    f4f0:	0000daf5 	.word	0x0000daf5
    f4f4:	0000f435 	.word	0x0000f435
    f4f8:	001e8480 	.word	0x001e8480
    f4fc:	00009609 	.word	0x00009609

0000f500 <LorawanClasscTxDone>:
    f500:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f502:	4c1b      	ldr	r4, [pc, #108]	; (f570 <LorawanClasscTxDone+0x70>)
    f504:	0023      	movs	r3, r4
    f506:	33ca      	adds	r3, #202	; 0xca
    f508:	881d      	ldrh	r5, [r3, #0]
    f50a:	0023      	movs	r3, r4
    f50c:	338c      	adds	r3, #140	; 0x8c
    f50e:	781b      	ldrb	r3, [r3, #0]
    f510:	07db      	lsls	r3, r3, #31
    f512:	d525      	bpl.n	f560 <LorawanClasscTxDone+0x60>
    f514:	0023      	movs	r3, r4
    f516:	0022      	movs	r2, r4
    f518:	33da      	adds	r3, #218	; 0xda
    f51a:	781b      	ldrb	r3, [r3, #0]
    f51c:	32dc      	adds	r2, #220	; 0xdc
    f51e:	3301      	adds	r3, #1
    f520:	7812      	ldrb	r2, [r2, #0]
    f522:	4293      	cmp	r3, r2
    f524:	db07      	blt.n	f536 <LorawanClasscTxDone+0x36>
    f526:	23ef      	movs	r3, #239	; 0xef
    f528:	005b      	lsls	r3, r3, #1
    f52a:	5ce3      	ldrb	r3, [r4, r3]
    f52c:	2b00      	cmp	r3, #0
    f52e:	d002      	beq.n	f536 <LorawanClasscTxDone+0x36>
    f530:	23fa      	movs	r3, #250	; 0xfa
    f532:	00db      	lsls	r3, r3, #3
    f534:	18ed      	adds	r5, r5, r3
    f536:	0023      	movs	r3, r4
    f538:	33ff      	adds	r3, #255	; 0xff
    f53a:	1945      	adds	r5, r0, r5
    f53c:	7f58      	ldrb	r0, [r3, #29]
    f53e:	4b0d      	ldr	r3, [pc, #52]	; (f574 <LorawanClasscTxDone+0x74>)
    f540:	4798      	blx	r3
    f542:	34e8      	adds	r4, #232	; 0xe8
    f544:	21fa      	movs	r1, #250	; 0xfa
    f546:	7820      	ldrb	r0, [r4, #0]
    f548:	2400      	movs	r4, #0
    f54a:	0089      	lsls	r1, r1, #2
    f54c:	4369      	muls	r1, r5
    f54e:	0022      	movs	r2, r4
    f550:	4d09      	ldr	r5, [pc, #36]	; (f578 <LorawanClasscTxDone+0x78>)
    f552:	9400      	str	r4, [sp, #0]
    f554:	4b09      	ldr	r3, [pc, #36]	; (f57c <LorawanClasscTxDone+0x7c>)
    f556:	47a8      	blx	r5
    f558:	0020      	movs	r0, r4
    f55a:	4b09      	ldr	r3, [pc, #36]	; (f580 <LorawanClasscTxDone+0x80>)
    f55c:	4798      	blx	r3
    f55e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    f560:	0023      	movs	r3, r4
    f562:	0022      	movs	r2, r4
    f564:	33d9      	adds	r3, #217	; 0xd9
    f566:	781b      	ldrb	r3, [r3, #0]
    f568:	32db      	adds	r2, #219	; 0xdb
    f56a:	3301      	adds	r3, #1
    f56c:	e7d8      	b.n	f520 <LorawanClasscTxDone+0x20>
    f56e:	46c0      	nop			; (mov r8, r8)
    f570:	200017bc 	.word	0x200017bc
    f574:	00009915 	.word	0x00009915
    f578:	00009609 	.word	0x00009609
    f57c:	0000d9c1 	.word	0x0000d9c1
    f580:	0000daf5 	.word	0x0000daf5

0000f584 <LorawanClasscRxTimeout>:
    f584:	b510      	push	{r4, lr}
    f586:	4b08      	ldr	r3, [pc, #32]	; (f5a8 <LorawanClasscRxTimeout+0x24>)
    f588:	210e      	movs	r1, #14
    f58a:	337c      	adds	r3, #124	; 0x7c
    f58c:	781a      	ldrb	r2, [r3, #0]
    f58e:	0010      	movs	r0, r2
    f590:	4008      	ands	r0, r1
    f592:	2806      	cmp	r0, #6
    f594:	d106      	bne.n	f5a4 <LorawanClasscRxTimeout+0x20>
    f596:	438a      	bics	r2, r1
    f598:	3904      	subs	r1, #4
    f59a:	430a      	orrs	r2, r1
    f59c:	701a      	strb	r2, [r3, #0]
    f59e:	2000      	movs	r0, #0
    f5a0:	4b02      	ldr	r3, [pc, #8]	; (f5ac <LorawanClasscRxTimeout+0x28>)
    f5a2:	4798      	blx	r3
    f5a4:	bd10      	pop	{r4, pc}
    f5a6:	46c0      	nop			; (mov r8, r8)
    f5a8:	200017bc 	.word	0x200017bc
    f5ac:	0000daf5 	.word	0x0000daf5

0000f5b0 <LorawanClasscNotifyAppOnReceive>:
    f5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f5b2:	001f      	movs	r7, r3
    f5b4:	4b08      	ldr	r3, [pc, #32]	; (f5d8 <LorawanClasscNotifyAppOnReceive+0x28>)
    f5b6:	0004      	movs	r4, r0
    f5b8:	33ff      	adds	r3, #255	; 0xff
    f5ba:	7f58      	ldrb	r0, [r3, #29]
    f5bc:	4b07      	ldr	r3, [pc, #28]	; (f5dc <LorawanClasscNotifyAppOnReceive+0x2c>)
    f5be:	000d      	movs	r5, r1
    f5c0:	0016      	movs	r6, r2
    f5c2:	4798      	blx	r3
    f5c4:	2800      	cmp	r0, #0
    f5c6:	d105      	bne.n	f5d4 <LorawanClasscNotifyAppOnReceive+0x24>
    f5c8:	0020      	movs	r0, r4
    f5ca:	003b      	movs	r3, r7
    f5cc:	0032      	movs	r2, r6
    f5ce:	0029      	movs	r1, r5
    f5d0:	4c03      	ldr	r4, [pc, #12]	; (f5e0 <LorawanClasscNotifyAppOnReceive+0x30>)
    f5d2:	47a0      	blx	r4
    f5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f5d6:	46c0      	nop			; (mov r8, r8)
    f5d8:	200017bc 	.word	0x200017bc
    f5dc:	000097a1 	.word	0x000097a1
    f5e0:	0000cee1 	.word	0x0000cee1

0000f5e4 <LorawanMcastInit>:
    f5e4:	2290      	movs	r2, #144	; 0x90
    f5e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f5e8:	2500      	movs	r5, #0
    f5ea:	4b0e      	ldr	r3, [pc, #56]	; (f624 <LorawanMcastInit+0x40>)
    f5ec:	0052      	lsls	r2, r2, #1
    f5ee:	549d      	strb	r5, [r3, r2]
    f5f0:	2222      	movs	r2, #34	; 0x22
    f5f2:	2701      	movs	r7, #1
    f5f4:	32ff      	adds	r2, #255	; 0xff
    f5f6:	4c0c      	ldr	r4, [pc, #48]	; (f628 <LorawanMcastInit+0x44>)
    f5f8:	549d      	strb	r5, [r3, r2]
    f5fa:	427f      	negs	r7, r7
    f5fc:	0023      	movs	r3, r4
    f5fe:	3b14      	subs	r3, #20
    f600:	601f      	str	r7, [r3, #0]
    f602:	2210      	movs	r2, #16
    f604:	2100      	movs	r1, #0
    f606:	0020      	movs	r0, r4
    f608:	4e08      	ldr	r6, [pc, #32]	; (f62c <LorawanMcastInit+0x48>)
    f60a:	47b0      	blx	r6
    f60c:	0020      	movs	r0, r4
    f60e:	2210      	movs	r2, #16
    f610:	3810      	subs	r0, #16
    f612:	2100      	movs	r1, #0
    f614:	47b0      	blx	r6
    f616:	4b06      	ldr	r3, [pc, #24]	; (f630 <LorawanMcastInit+0x4c>)
    f618:	6125      	str	r5, [r4, #16]
    f61a:	342c      	adds	r4, #44	; 0x2c
    f61c:	429c      	cmp	r4, r3
    f61e:	d1ed      	bne.n	f5fc <LorawanMcastInit+0x18>
    f620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f622:	46c0      	nop			; (mov r8, r8)
    f624:	200017bc 	.word	0x200017bc
    f628:	200018f4 	.word	0x200018f4
    f62c:	00014f51 	.word	0x00014f51
    f630:	200019a4 	.word	0x200019a4

0000f634 <LorawanMcastEnable>:
    f634:	0002      	movs	r2, r0
    f636:	b530      	push	{r4, r5, lr}
    f638:	200a      	movs	r0, #10
    f63a:	2903      	cmp	r1, #3
    f63c:	d823      	bhi.n	f686 <LorawanMcastEnable+0x52>
    f63e:	4b1a      	ldr	r3, [pc, #104]	; (f6a8 <LorawanMcastEnable+0x74>)
    f640:	2a00      	cmp	r2, #0
    f642:	d021      	beq.n	f688 <LorawanMcastEnable+0x54>
    f644:	222c      	movs	r2, #44	; 0x2c
    f646:	434a      	muls	r2, r1
    f648:	189a      	adds	r2, r3, r2
    f64a:	3249      	adds	r2, #73	; 0x49
    f64c:	32ff      	adds	r2, #255	; 0xff
    f64e:	7912      	ldrb	r2, [r2, #4]
    f650:	0754      	lsls	r4, r2, #29
    f652:	d513      	bpl.n	f67c <LorawanMcastEnable+0x48>
    f654:	0794      	lsls	r4, r2, #30
    f656:	d511      	bpl.n	f67c <LorawanMcastEnable+0x48>
    f658:	07d2      	lsls	r2, r2, #31
    f65a:	0fd2      	lsrs	r2, r2, #31
    f65c:	2a01      	cmp	r2, #1
    f65e:	d10d      	bne.n	f67c <LorawanMcastEnable+0x48>
    f660:	001c      	movs	r4, r3
    f662:	34f4      	adds	r4, #244	; 0xf4
    f664:	7825      	ldrb	r5, [r4, #0]
    f666:	2406      	movs	r4, #6
    f668:	4225      	tst	r5, r4
    f66a:	d007      	beq.n	f67c <LorawanMcastEnable+0x48>
    f66c:	2022      	movs	r0, #34	; 0x22
    f66e:	408a      	lsls	r2, r1
    f670:	30ff      	adds	r0, #255	; 0xff
    f672:	5c19      	ldrb	r1, [r3, r0]
    f674:	430a      	orrs	r2, r1
    f676:	541a      	strb	r2, [r3, r0]
    f678:	381a      	subs	r0, #26
    f67a:	38ff      	subs	r0, #255	; 0xff
    f67c:	2190      	movs	r1, #144	; 0x90
    f67e:	0049      	lsls	r1, r1, #1
    f680:	5c5a      	ldrb	r2, [r3, r1]
    f682:	3201      	adds	r2, #1
    f684:	545a      	strb	r2, [r3, r1]
    f686:	bd30      	pop	{r4, r5, pc}
    f688:	2201      	movs	r2, #1
    f68a:	408a      	lsls	r2, r1
    f68c:	2022      	movs	r0, #34	; 0x22
    f68e:	0011      	movs	r1, r2
    f690:	30ff      	adds	r0, #255	; 0xff
    f692:	5c1a      	ldrb	r2, [r3, r0]
    f694:	438a      	bics	r2, r1
    f696:	2190      	movs	r1, #144	; 0x90
    f698:	541a      	strb	r2, [r3, r0]
    f69a:	0049      	lsls	r1, r1, #1
    f69c:	5c5a      	ldrb	r2, [r3, r1]
    f69e:	381a      	subs	r0, #26
    f6a0:	3a01      	subs	r2, #1
    f6a2:	545a      	strb	r2, [r3, r1]
    f6a4:	38ff      	subs	r0, #255	; 0xff
    f6a6:	e7ee      	b.n	f686 <LorawanMcastEnable+0x52>
    f6a8:	200017bc 	.word	0x200017bc

0000f6ac <LorawanMcastValidateHdr>:
    f6ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f6ae:	469c      	mov	ip, r3
    f6b0:	2400      	movs	r4, #0
    f6b2:	230a      	movs	r3, #10
    f6b4:	4f18      	ldr	r7, [pc, #96]	; (f718 <LorawanMcastValidateHdr+0x6c>)
    f6b6:	b2e5      	uxtb	r5, r4
    f6b8:	9501      	str	r5, [sp, #4]
    f6ba:	2522      	movs	r5, #34	; 0x22
    f6bc:	35ff      	adds	r5, #255	; 0xff
    f6be:	5d7d      	ldrb	r5, [r7, r5]
    f6c0:	2601      	movs	r6, #1
    f6c2:	4125      	asrs	r5, r4
    f6c4:	4235      	tst	r5, r6
    f6c6:	d022      	beq.n	f70e <LorawanMcastValidateHdr+0x62>
    f6c8:	7886      	ldrb	r6, [r0, #2]
    f6ca:	7845      	ldrb	r5, [r0, #1]
    f6cc:	0236      	lsls	r6, r6, #8
    f6ce:	432e      	orrs	r6, r5
    f6d0:	78c5      	ldrb	r5, [r0, #3]
    f6d2:	042d      	lsls	r5, r5, #16
    f6d4:	432e      	orrs	r6, r5
    f6d6:	7905      	ldrb	r5, [r0, #4]
    f6d8:	062d      	lsls	r5, r5, #24
    f6da:	4335      	orrs	r5, r6
    f6dc:	262c      	movs	r6, #44	; 0x2c
    f6de:	4366      	muls	r6, r4
    f6e0:	3625      	adds	r6, #37	; 0x25
    f6e2:	36ff      	adds	r6, #255	; 0xff
    f6e4:	59be      	ldr	r6, [r7, r6]
    f6e6:	42b5      	cmp	r5, r6
    f6e8:	d111      	bne.n	f70e <LorawanMcastValidateHdr+0x62>
    f6ea:	4d0c      	ldr	r5, [pc, #48]	; (f71c <LorawanMcastValidateHdr+0x70>)
    f6ec:	782e      	ldrb	r6, [r5, #0]
    f6ee:	2506      	movs	r5, #6
    f6f0:	422e      	tst	r6, r5
    f6f2:	d00c      	beq.n	f70e <LorawanMcastValidateHdr+0x62>
    f6f4:	2a00      	cmp	r2, #0
    f6f6:	d00a      	beq.n	f70e <LorawanMcastValidateHdr+0x62>
    f6f8:	7946      	ldrb	r6, [r0, #5]
    f6fa:	3569      	adds	r5, #105	; 0x69
    f6fc:	422e      	tst	r6, r5
    f6fe:	d106      	bne.n	f70e <LorawanMcastValidateHdr+0x62>
    f700:	2903      	cmp	r1, #3
    f702:	d104      	bne.n	f70e <LorawanMcastValidateHdr+0x62>
    f704:	466d      	mov	r5, sp
    f706:	4663      	mov	r3, ip
    f708:	792d      	ldrb	r5, [r5, #4]
    f70a:	701d      	strb	r5, [r3, #0]
    f70c:	2308      	movs	r3, #8
    f70e:	3401      	adds	r4, #1
    f710:	2c04      	cmp	r4, #4
    f712:	d1d0      	bne.n	f6b6 <LorawanMcastValidateHdr+0xa>
    f714:	0018      	movs	r0, r3
    f716:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f718:	200017bc 	.word	0x200017bc
    f71c:	200018b0 	.word	0x200018b0

0000f720 <LorawanMcastProcessPkt>:
    f720:	b5f0      	push	{r4, r5, r6, r7, lr}
    f722:	b08b      	sub	sp, #44	; 0x2c
    f724:	9007      	str	r0, [sp, #28]
    f726:	000c      	movs	r4, r1
    f728:	0015      	movs	r5, r2
    f72a:	7991      	ldrb	r1, [r2, #6]
    f72c:	79d2      	ldrb	r2, [r2, #7]
    f72e:	4e35      	ldr	r6, [pc, #212]	; (f804 <LorawanMcastProcessPkt+0xe4>)
    f730:	0212      	lsls	r2, r2, #8
    f732:	430a      	orrs	r2, r1
    f734:	212c      	movs	r1, #44	; 0x2c
    f736:	4359      	muls	r1, r3
    f738:	1873      	adds	r3, r6, r1
    f73a:	9309      	str	r3, [sp, #36]	; 0x24
    f73c:	3349      	adds	r3, #73	; 0x49
    f73e:	33ff      	adds	r3, #255	; 0xff
    f740:	9108      	str	r1, [sp, #32]
    f742:	8819      	ldrh	r1, [r3, #0]
    f744:	270a      	movs	r7, #10
    f746:	4291      	cmp	r1, r2
    f748:	d845      	bhi.n	f7d6 <LorawanMcastProcessPkt+0xb6>
    f74a:	801a      	strh	r2, [r3, #0]
    f74c:	2105      	movs	r1, #5
    f74e:	4b2e      	ldr	r3, [pc, #184]	; (f808 <LorawanMcastProcessPkt+0xe8>)
    f750:	2000      	movs	r0, #0
    f752:	4798      	blx	r3
    f754:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f756:	0021      	movs	r1, r4
    f758:	32fc      	adds	r2, #252	; 0xfc
    f75a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    f75c:	9807      	ldr	r0, [sp, #28]
    f75e:	9304      	str	r3, [sp, #16]
    f760:	4b2a      	ldr	r3, [pc, #168]	; (f80c <LorawanMcastProcessPkt+0xec>)
    f762:	390d      	subs	r1, #13
    f764:	9303      	str	r3, [sp, #12]
    f766:	2319      	movs	r3, #25
    f768:	9302      	str	r3, [sp, #8]
    f76a:	3b16      	subs	r3, #22
    f76c:	9301      	str	r3, [sp, #4]
    f76e:	9b08      	ldr	r3, [sp, #32]
    f770:	b2c9      	uxtb	r1, r1
    f772:	3339      	adds	r3, #57	; 0x39
    f774:	33ff      	adds	r3, #255	; 0xff
    f776:	199b      	adds	r3, r3, r6
    f778:	9300      	str	r3, [sp, #0]
    f77a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    f77c:	3009      	adds	r0, #9
    f77e:	2201      	movs	r2, #1
    f780:	4f23      	ldr	r7, [pc, #140]	; (f810 <LorawanMcastProcessPkt+0xf0>)
    f782:	47b8      	blx	r7
    f784:	2800      	cmp	r0, #0
    f786:	d002      	beq.n	f78e <LorawanMcastProcessPkt+0x6e>
    f788:	201f      	movs	r0, #31
    f78a:	4b22      	ldr	r3, [pc, #136]	; (f814 <LorawanMcastProcessPkt+0xf4>)
    f78c:	4798      	blx	r3
    f78e:	4922      	ldr	r1, [pc, #136]	; (f818 <LorawanMcastProcessPkt+0xf8>)
    f790:	2708      	movs	r7, #8
    f792:	784a      	ldrb	r2, [r1, #1]
    f794:	780b      	ldrb	r3, [r1, #0]
    f796:	0212      	lsls	r2, r2, #8
    f798:	431a      	orrs	r2, r3
    f79a:	788b      	ldrb	r3, [r1, #2]
    f79c:	041b      	lsls	r3, r3, #16
    f79e:	431a      	orrs	r2, r3
    f7a0:	78cb      	ldrb	r3, [r1, #3]
    f7a2:	061b      	lsls	r3, r3, #24
    f7a4:	4313      	orrs	r3, r2
    f7a6:	d016      	beq.n	f7d6 <LorawanMcastProcessPkt+0xb6>
    f7a8:	2220      	movs	r2, #32
    f7aa:	368c      	adds	r6, #140	; 0x8c
    f7ac:	7833      	ldrb	r3, [r6, #0]
    f7ae:	9907      	ldr	r1, [sp, #28]
    f7b0:	4393      	bics	r3, r2
    f7b2:	7033      	strb	r3, [r6, #0]
    f7b4:	78ab      	ldrb	r3, [r5, #2]
    f7b6:	0022      	movs	r2, r4
    f7b8:	40bb      	lsls	r3, r7
    f7ba:	7868      	ldrb	r0, [r5, #1]
    f7bc:	3a0c      	subs	r2, #12
    f7be:	4303      	orrs	r3, r0
    f7c0:	78e8      	ldrb	r0, [r5, #3]
    f7c2:	b2d2      	uxtb	r2, r2
    f7c4:	0400      	lsls	r0, r0, #16
    f7c6:	4303      	orrs	r3, r0
    f7c8:	7928      	ldrb	r0, [r5, #4]
    f7ca:	19c9      	adds	r1, r1, r7
    f7cc:	0600      	lsls	r0, r0, #24
    f7ce:	4318      	orrs	r0, r3
    f7d0:	4c12      	ldr	r4, [pc, #72]	; (f81c <LorawanMcastProcessPkt+0xfc>)
    f7d2:	003b      	movs	r3, r7
    f7d4:	47a0      	blx	r4
    f7d6:	4a0b      	ldr	r2, [pc, #44]	; (f804 <LorawanMcastProcessPkt+0xe4>)
    f7d8:	200e      	movs	r0, #14
    f7da:	0011      	movs	r1, r2
    f7dc:	317c      	adds	r1, #124	; 0x7c
    f7de:	780b      	ldrb	r3, [r1, #0]
    f7e0:	001c      	movs	r4, r3
    f7e2:	4004      	ands	r4, r0
    f7e4:	2c06      	cmp	r4, #6
    f7e6:	d107      	bne.n	f7f8 <LorawanMcastProcessPkt+0xd8>
    f7e8:	32f4      	adds	r2, #244	; 0xf4
    f7ea:	7812      	ldrb	r2, [r2, #0]
    f7ec:	2a04      	cmp	r2, #4
    f7ee:	d103      	bne.n	f7f8 <LorawanMcastProcessPkt+0xd8>
    f7f0:	4383      	bics	r3, r0
    f7f2:	3206      	adds	r2, #6
    f7f4:	4313      	orrs	r3, r2
    f7f6:	700b      	strb	r3, [r1, #0]
    f7f8:	2000      	movs	r0, #0
    f7fa:	4b09      	ldr	r3, [pc, #36]	; (f820 <LorawanMcastProcessPkt+0x100>)
    f7fc:	4798      	blx	r3
    f7fe:	0038      	movs	r0, r7
    f800:	b00b      	add	sp, #44	; 0x2c
    f802:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f804:	200017bc 	.word	0x200017bc
    f808:	000091e1 	.word	0x000091e1
    f80c:	20001abc 	.word	0x20001abc
    f810:	0000ca7d 	.word	0x0000ca7d
    f814:	0000cb3d 	.word	0x0000cb3d
    f818:	20001ab4 	.word	0x20001ab4
    f81c:	0000cee1 	.word	0x0000cee1
    f820:	0000daf5 	.word	0x0000daf5

0000f824 <LorawanAddMcastAddr>:
    f824:	4b11      	ldr	r3, [pc, #68]	; (f86c <LorawanAddMcastAddr+0x48>)
    f826:	b570      	push	{r4, r5, r6, lr}
    f828:	001a      	movs	r2, r3
    f82a:	327c      	adds	r2, #124	; 0x7c
    f82c:	7812      	ldrb	r2, [r2, #0]
    f82e:	07d2      	lsls	r2, r2, #31
    f830:	d509      	bpl.n	f846 <LorawanAddMcastAddr+0x22>
    f832:	681a      	ldr	r2, [r3, #0]
    f834:	0a15      	lsrs	r5, r2, #8
    f836:	791a      	ldrb	r2, [r3, #4]
    f838:	0612      	lsls	r2, r2, #24
    f83a:	432a      	orrs	r2, r5
    f83c:	4282      	cmp	r2, r0
    f83e:	d102      	bne.n	f846 <LorawanAddMcastAddr+0x22>
    f840:	220a      	movs	r2, #10
    f842:	2903      	cmp	r1, #3
    f844:	d810      	bhi.n	f868 <LorawanAddMcastAddr+0x44>
    f846:	242c      	movs	r4, #44	; 0x2c
    f848:	434c      	muls	r4, r1
    f84a:	191c      	adds	r4, r3, r4
    f84c:	0023      	movs	r3, r4
    f84e:	33fc      	adds	r3, #252	; 0xfc
    f850:	6298      	str	r0, [r3, #40]	; 0x28
    f852:	2106      	movs	r1, #6
    f854:	2000      	movs	r0, #0
    f856:	4b06      	ldr	r3, [pc, #24]	; (f870 <LorawanAddMcastAddr+0x4c>)
    f858:	4798      	blx	r3
    f85a:	2201      	movs	r2, #1
    f85c:	3449      	adds	r4, #73	; 0x49
    f85e:	34ff      	adds	r4, #255	; 0xff
    f860:	7921      	ldrb	r1, [r4, #4]
    f862:	430a      	orrs	r2, r1
    f864:	7122      	strb	r2, [r4, #4]
    f866:	2208      	movs	r2, #8
    f868:	0010      	movs	r0, r2
    f86a:	bd70      	pop	{r4, r5, r6, pc}
    f86c:	200017bc 	.word	0x200017bc
    f870:	000091e1 	.word	0x000091e1

0000f874 <LorawanAddMcastAppskey>:
    f874:	b570      	push	{r4, r5, r6, lr}
    f876:	4c11      	ldr	r4, [pc, #68]	; (f8bc <LorawanAddMcastAppskey+0x48>)
    f878:	0006      	movs	r6, r0
    f87a:	0023      	movs	r3, r4
    f87c:	337c      	adds	r3, #124	; 0x7c
    f87e:	781b      	ldrb	r3, [r3, #0]
    f880:	07db      	lsls	r3, r3, #31
    f882:	d504      	bpl.n	f88e <LorawanAddMcastAppskey+0x1a>
    f884:	2800      	cmp	r0, #0
    f886:	d102      	bne.n	f88e <LorawanAddMcastAppskey+0x1a>
    f888:	200a      	movs	r0, #10
    f88a:	2903      	cmp	r1, #3
    f88c:	d815      	bhi.n	f8ba <LorawanAddMcastAppskey+0x46>
    f88e:	252c      	movs	r5, #44	; 0x2c
    f890:	434d      	muls	r5, r1
    f892:	0028      	movs	r0, r5
    f894:	3039      	adds	r0, #57	; 0x39
    f896:	30ff      	adds	r0, #255	; 0xff
    f898:	2210      	movs	r2, #16
    f89a:	1820      	adds	r0, r4, r0
    f89c:	0031      	movs	r1, r6
    f89e:	4b08      	ldr	r3, [pc, #32]	; (f8c0 <LorawanAddMcastAppskey+0x4c>)
    f8a0:	4798      	blx	r3
    f8a2:	4b08      	ldr	r3, [pc, #32]	; (f8c4 <LorawanAddMcastAppskey+0x50>)
    f8a4:	2107      	movs	r1, #7
    f8a6:	2000      	movs	r0, #0
    f8a8:	4798      	blx	r3
    f8aa:	2304      	movs	r3, #4
    f8ac:	2008      	movs	r0, #8
    f8ae:	1964      	adds	r4, r4, r5
    f8b0:	3449      	adds	r4, #73	; 0x49
    f8b2:	34ff      	adds	r4, #255	; 0xff
    f8b4:	7922      	ldrb	r2, [r4, #4]
    f8b6:	4313      	orrs	r3, r2
    f8b8:	7123      	strb	r3, [r4, #4]
    f8ba:	bd70      	pop	{r4, r5, r6, pc}
    f8bc:	200017bc 	.word	0x200017bc
    f8c0:	00014ecd 	.word	0x00014ecd
    f8c4:	000091e1 	.word	0x000091e1

0000f8c8 <LorawanAddMcastNwkskey>:
    f8c8:	b570      	push	{r4, r5, r6, lr}
    f8ca:	4c11      	ldr	r4, [pc, #68]	; (f910 <LorawanAddMcastNwkskey+0x48>)
    f8cc:	0006      	movs	r6, r0
    f8ce:	0023      	movs	r3, r4
    f8d0:	337c      	adds	r3, #124	; 0x7c
    f8d2:	781b      	ldrb	r3, [r3, #0]
    f8d4:	07db      	lsls	r3, r3, #31
    f8d6:	d504      	bpl.n	f8e2 <LorawanAddMcastNwkskey+0x1a>
    f8d8:	2800      	cmp	r0, #0
    f8da:	d102      	bne.n	f8e2 <LorawanAddMcastNwkskey+0x1a>
    f8dc:	200a      	movs	r0, #10
    f8de:	2903      	cmp	r1, #3
    f8e0:	d815      	bhi.n	f90e <LorawanAddMcastNwkskey+0x46>
    f8e2:	252c      	movs	r5, #44	; 0x2c
    f8e4:	434d      	muls	r5, r1
    f8e6:	0028      	movs	r0, r5
    f8e8:	3029      	adds	r0, #41	; 0x29
    f8ea:	30ff      	adds	r0, #255	; 0xff
    f8ec:	2210      	movs	r2, #16
    f8ee:	1820      	adds	r0, r4, r0
    f8f0:	0031      	movs	r1, r6
    f8f2:	4b08      	ldr	r3, [pc, #32]	; (f914 <LorawanAddMcastNwkskey+0x4c>)
    f8f4:	4798      	blx	r3
    f8f6:	4b08      	ldr	r3, [pc, #32]	; (f918 <LorawanAddMcastNwkskey+0x50>)
    f8f8:	2108      	movs	r1, #8
    f8fa:	2000      	movs	r0, #0
    f8fc:	4798      	blx	r3
    f8fe:	2302      	movs	r3, #2
    f900:	2008      	movs	r0, #8
    f902:	1964      	adds	r4, r4, r5
    f904:	3449      	adds	r4, #73	; 0x49
    f906:	34ff      	adds	r4, #255	; 0xff
    f908:	7922      	ldrb	r2, [r4, #4]
    f90a:	4313      	orrs	r3, r2
    f90c:	7123      	strb	r3, [r4, #4]
    f90e:	bd70      	pop	{r4, r5, r6, pc}
    f910:	200017bc 	.word	0x200017bc
    f914:	00014ecd 	.word	0x00014ecd
    f918:	000091e1 	.word	0x000091e1

0000f91c <Lorawan_Pds_fid1_CB>:
    f91c:	4770      	bx	lr
	...

0000f920 <Lorawan_Pds_fid2_CB>:
    f920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f922:	23f0      	movs	r3, #240	; 0xf0
    f924:	4c25      	ldr	r4, [pc, #148]	; (f9bc <Lorawan_Pds_fid2_CB+0x9c>)
    f926:	005b      	lsls	r3, r3, #1
    f928:	5ce2      	ldrb	r2, [r4, r3]
    f92a:	2a00      	cmp	r2, #0
    f92c:	d010      	beq.n	f950 <Lorawan_Pds_fid2_CB+0x30>
    f92e:	3be0      	subs	r3, #224	; 0xe0
    f930:	3bff      	subs	r3, #255	; 0xff
    f932:	4093      	lsls	r3, r2
    f934:	1d21      	adds	r1, r4, #4
    f936:	6fca      	ldr	r2, [r1, #124]	; 0x7c
    f938:	18d2      	adds	r2, r2, r3
    f93a:	67ca      	str	r2, [r1, #124]	; 0x7c
    f93c:	0021      	movs	r1, r4
    f93e:	3108      	adds	r1, #8
    f940:	6fca      	ldr	r2, [r1, #124]	; 0x7c
    f942:	18d2      	adds	r2, r2, r3
    f944:	67ca      	str	r2, [r1, #124]	; 0x7c
    f946:	0022      	movs	r2, r4
    f948:	32fc      	adds	r2, #252	; 0xfc
    f94a:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    f94c:	18cb      	adds	r3, r1, r3
    f94e:	64d3      	str	r3, [r2, #76]	; 0x4c
    f950:	0025      	movs	r5, r4
    f952:	2271      	movs	r2, #113	; 0x71
    f954:	2701      	movs	r7, #1
    f956:	357c      	adds	r5, #124	; 0x7c
    f958:	782b      	ldrb	r3, [r5, #0]
    f95a:	4013      	ands	r3, r2
    f95c:	702b      	strb	r3, [r5, #0]
    f95e:	786b      	ldrb	r3, [r5, #1]
    f960:	43bb      	bics	r3, r7
    f962:	706b      	strb	r3, [r5, #1]
    f964:	23e2      	movs	r3, #226	; 0xe2
    f966:	33ff      	adds	r3, #255	; 0xff
    f968:	5ce3      	ldrb	r3, [r4, r3]
    f96a:	2b00      	cmp	r3, #0
    f96c:	d018      	beq.n	f9a0 <Lorawan_Pds_fid2_CB+0x80>
    f96e:	4914      	ldr	r1, [pc, #80]	; (f9c0 <Lorawan_Pds_fid2_CB+0xa0>)
    f970:	2006      	movs	r0, #6
    f972:	4e14      	ldr	r6, [pc, #80]	; (f9c4 <Lorawan_Pds_fid2_CB+0xa4>)
    f974:	47b0      	blx	r6
    f976:	2800      	cmp	r0, #0
    f978:	d002      	beq.n	f980 <Lorawan_Pds_fid2_CB+0x60>
    f97a:	782b      	ldrb	r3, [r5, #0]
    f97c:	43bb      	bics	r3, r7
    f97e:	702b      	strb	r3, [r5, #0]
    f980:	0023      	movs	r3, r4
    f982:	2501      	movs	r5, #1
    f984:	337c      	adds	r3, #124	; 0x7c
    f986:	781b      	ldrb	r3, [r3, #0]
    f988:	422b      	tst	r3, r5
    f98a:	d008      	beq.n	f99e <Lorawan_Pds_fid2_CB+0x7e>
    f98c:	7823      	ldrb	r3, [r4, #0]
    f98e:	2b00      	cmp	r3, #0
    f990:	d106      	bne.n	f9a0 <Lorawan_Pds_fid2_CB+0x80>
    f992:	490d      	ldr	r1, [pc, #52]	; (f9c8 <Lorawan_Pds_fid2_CB+0xa8>)
    f994:	2002      	movs	r0, #2
    f996:	47b0      	blx	r6
    f998:	490c      	ldr	r1, [pc, #48]	; (f9cc <Lorawan_Pds_fid2_CB+0xac>)
    f99a:	0028      	movs	r0, r5
    f99c:	47b0      	blx	r6
    f99e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f9a0:	0020      	movs	r0, r4
    f9a2:	0021      	movs	r1, r4
    f9a4:	2210      	movs	r2, #16
    f9a6:	3115      	adds	r1, #21
    f9a8:	4d09      	ldr	r5, [pc, #36]	; (f9d0 <Lorawan_Pds_fid2_CB+0xb0>)
    f9aa:	3035      	adds	r0, #53	; 0x35
    f9ac:	47a8      	blx	r5
    f9ae:	0020      	movs	r0, r4
    f9b0:	1d61      	adds	r1, r4, #5
    f9b2:	2210      	movs	r2, #16
    f9b4:	3025      	adds	r0, #37	; 0x25
    f9b6:	47a8      	blx	r5
    f9b8:	e7f1      	b.n	f99e <Lorawan_Pds_fid2_CB+0x7e>
    f9ba:	46c0      	nop			; (mov r8, r8)
    f9bc:	200017bc 	.word	0x200017bc
    f9c0:	20001811 	.word	0x20001811
    f9c4:	00008f01 	.word	0x00008f01
    f9c8:	200017e1 	.word	0x200017e1
    f9cc:	200017f1 	.word	0x200017f1
    f9d0:	00014ecd 	.word	0x00014ecd

0000f9d4 <LORAWAN_TxHandler>:
    f9d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    f9d6:	b087      	sub	sp, #28
    f9d8:	466b      	mov	r3, sp
    f9da:	2501      	movs	r5, #1
    f9dc:	4c30      	ldr	r4, [pc, #192]	; (faa0 <LORAWAN_TxHandler+0xcc>)
    f9de:	701d      	strb	r5, [r3, #0]
    f9e0:	0023      	movs	r3, r4
    f9e2:	466a      	mov	r2, sp
    f9e4:	33e1      	adds	r3, #225	; 0xe1
    f9e6:	781b      	ldrb	r3, [r3, #0]
    f9e8:	4669      	mov	r1, sp
    f9ea:	7053      	strb	r3, [r2, #1]
    f9ec:	0023      	movs	r3, r4
    f9ee:	33df      	adds	r3, #223	; 0xdf
    f9f0:	781b      	ldrb	r3, [r3, #0]
    f9f2:	202f      	movs	r0, #47	; 0x2f
    f9f4:	7093      	strb	r3, [r2, #2]
    f9f6:	aa03      	add	r2, sp, #12
    f9f8:	4b2a      	ldr	r3, [pc, #168]	; (faa4 <LORAWAN_TxHandler+0xd0>)
    f9fa:	4798      	blx	r3
    f9fc:	2808      	cmp	r0, #8
    f9fe:	d004      	beq.n	fa0a <LORAWAN_TxHandler+0x36>
    fa00:	4b29      	ldr	r3, [pc, #164]	; (faa8 <LORAWAN_TxHandler+0xd4>)
    fa02:	4798      	blx	r3
    fa04:	2000      	movs	r0, #0
    fa06:	b007      	add	sp, #28
    fa08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fa0a:	0023      	movs	r3, r4
    fa0c:	33f4      	adds	r3, #244	; 0xf4
    fa0e:	781b      	ldrb	r3, [r3, #0]
    fa10:	ae01      	add	r6, sp, #4
    fa12:	2b04      	cmp	r3, #4
    fa14:	d103      	bne.n	fa1e <LORAWAN_TxHandler+0x4a>
    fa16:	0030      	movs	r0, r6
    fa18:	4b24      	ldr	r3, [pc, #144]	; (faac <LORAWAN_TxHandler+0xd8>)
    fa1a:	7035      	strb	r5, [r6, #0]
    fa1c:	4798      	blx	r3
    fa1e:	4b24      	ldr	r3, [pc, #144]	; (fab0 <LORAWAN_TxHandler+0xdc>)
    fa20:	9803      	ldr	r0, [sp, #12]
    fa22:	9904      	ldr	r1, [sp, #16]
    fa24:	9a05      	ldr	r2, [sp, #20]
    fa26:	4798      	blx	r3
    fa28:	0023      	movs	r3, r4
    fa2a:	33fc      	adds	r3, #252	; 0xfc
    fa2c:	681d      	ldr	r5, [r3, #0]
    fa2e:	23ef      	movs	r3, #239	; 0xef
    fa30:	4f20      	ldr	r7, [pc, #128]	; (fab4 <LORAWAN_TxHandler+0xe0>)
    fa32:	005b      	lsls	r3, r3, #1
    fa34:	2d00      	cmp	r5, #0
    fa36:	d023      	beq.n	fa80 <LORAWAN_TxHandler+0xac>
    fa38:	2201      	movs	r2, #1
    fa3a:	54e2      	strb	r2, [r4, r3]
    fa3c:	7828      	ldrb	r0, [r5, #0]
    fa3e:	7a2b      	ldrb	r3, [r5, #8]
    fa40:	1e42      	subs	r2, r0, #1
    fa42:	4190      	sbcs	r0, r2
    fa44:	7869      	ldrb	r1, [r5, #1]
    fa46:	686a      	ldr	r2, [r5, #4]
    fa48:	b2c0      	uxtb	r0, r0
    fa4a:	47b8      	blx	r7
    fa4c:	0023      	movs	r3, r4
    fa4e:	33c6      	adds	r3, #198	; 0xc6
    fa50:	881b      	ldrh	r3, [r3, #0]
    fa52:	0030      	movs	r0, r6
    fa54:	7033      	strb	r3, [r6, #0]
    fa56:	4b18      	ldr	r3, [pc, #96]	; (fab8 <LORAWAN_TxHandler+0xe4>)
    fa58:	6073      	str	r3, [r6, #4]
    fa5a:	4b18      	ldr	r3, [pc, #96]	; (fabc <LORAWAN_TxHandler+0xe8>)
    fa5c:	4798      	blx	r3
    fa5e:	2800      	cmp	r0, #0
    fa60:	d114      	bne.n	fa8c <LORAWAN_TxHandler+0xb8>
    fa62:	0021      	movs	r1, r4
    fa64:	220e      	movs	r2, #14
    fa66:	317c      	adds	r1, #124	; 0x7c
    fa68:	780b      	ldrb	r3, [r1, #0]
    fa6a:	4393      	bics	r3, r2
    fa6c:	001a      	movs	r2, r3
    fa6e:	2302      	movs	r3, #2
    fa70:	4313      	orrs	r3, r2
    fa72:	700b      	strb	r3, [r1, #0]
    fa74:	2208      	movs	r2, #8
    fa76:	348c      	adds	r4, #140	; 0x8c
    fa78:	7823      	ldrb	r3, [r4, #0]
    fa7a:	4393      	bics	r3, r2
    fa7c:	7023      	strb	r3, [r4, #0]
    fa7e:	e7c1      	b.n	fa04 <LORAWAN_TxHandler+0x30>
    fa80:	54e5      	strb	r5, [r4, r3]
    fa82:	002a      	movs	r2, r5
    fa84:	002b      	movs	r3, r5
    fa86:	0029      	movs	r1, r5
    fa88:	0028      	movs	r0, r5
    fa8a:	e7de      	b.n	fa4a <LORAWAN_TxHandler+0x76>
    fa8c:	0022      	movs	r2, r4
    fa8e:	2120      	movs	r1, #32
    fa90:	328c      	adds	r2, #140	; 0x8c
    fa92:	7813      	ldrb	r3, [r2, #0]
    fa94:	438b      	bics	r3, r1
    fa96:	7013      	strb	r3, [r2, #0]
    fa98:	4b03      	ldr	r3, [pc, #12]	; (faa8 <LORAWAN_TxHandler+0xd4>)
    fa9a:	4798      	blx	r3
    fa9c:	e7ea      	b.n	fa74 <LORAWAN_TxHandler+0xa0>
    fa9e:	46c0      	nop			; (mov r8, r8)
    faa0:	200017bc 	.word	0x200017bc
    faa4:	00008bf9 	.word	0x00008bf9
    faa8:	0000cb3d 	.word	0x0000cb3d
    faac:	00010f71 	.word	0x00010f71
    fab0:	0000c5cd 	.word	0x0000c5cd
    fab4:	0000cba5 	.word	0x0000cba5
    fab8:	200019b1 	.word	0x200019b1
    fabc:	0001069d 	.word	0x0001069d

0000fac0 <LORAWAN_JoinReqHandler>:
    fac0:	b530      	push	{r4, r5, lr}
    fac2:	b087      	sub	sp, #28
    fac4:	466a      	mov	r2, sp
    fac6:	2300      	movs	r3, #0
    fac8:	4c2a      	ldr	r4, [pc, #168]	; (fb74 <LORAWAN_JoinReqHandler+0xb4>)
    faca:	7013      	strb	r3, [r2, #0]
    facc:	0023      	movs	r3, r4
    face:	33e1      	adds	r3, #225	; 0xe1
    fad0:	781b      	ldrb	r3, [r3, #0]
    fad2:	7053      	strb	r3, [r2, #1]
    fad4:	0023      	movs	r3, r4
    fad6:	33df      	adds	r3, #223	; 0xdf
    fad8:	781b      	ldrb	r3, [r3, #0]
    fada:	7093      	strb	r3, [r2, #2]
    fadc:	0023      	movs	r3, r4
    fade:	33ff      	adds	r3, #255	; 0xff
    fae0:	7c5b      	ldrb	r3, [r3, #17]
    fae2:	069b      	lsls	r3, r3, #26
    fae4:	d511      	bpl.n	fb0a <LORAWAN_JoinReqHandler+0x4a>
    fae6:	0023      	movs	r3, r4
    fae8:	336f      	adds	r3, #111	; 0x6f
    faea:	781a      	ldrb	r2, [r3, #0]
    faec:	6f23      	ldr	r3, [r4, #112]	; 0x70
    faee:	021b      	lsls	r3, r3, #8
    faf0:	4313      	orrs	r3, r2
    faf2:	0022      	movs	r2, r4
    faf4:	3273      	adds	r2, #115	; 0x73
    faf6:	7811      	ldrb	r1, [r2, #0]
    faf8:	6f62      	ldr	r2, [r4, #116]	; 0x74
    fafa:	0212      	lsls	r2, r2, #8
    fafc:	430a      	orrs	r2, r1
    fafe:	4313      	orrs	r3, r2
    fb00:	d103      	bne.n	fb0a <LORAWAN_JoinReqHandler+0x4a>
    fb02:	0023      	movs	r3, r4
    fb04:	2201      	movs	r2, #1
    fb06:	337b      	adds	r3, #123	; 0x7b
    fb08:	701a      	strb	r2, [r3, #0]
    fb0a:	aa03      	add	r2, sp, #12
    fb0c:	4669      	mov	r1, sp
    fb0e:	202f      	movs	r0, #47	; 0x2f
    fb10:	4b19      	ldr	r3, [pc, #100]	; (fb78 <LORAWAN_JoinReqHandler+0xb8>)
    fb12:	4798      	blx	r3
    fb14:	2808      	cmp	r0, #8
    fb16:	d004      	beq.n	fb22 <LORAWAN_JoinReqHandler+0x62>
    fb18:	4b18      	ldr	r3, [pc, #96]	; (fb7c <LORAWAN_JoinReqHandler+0xbc>)
    fb1a:	4798      	blx	r3
    fb1c:	2000      	movs	r0, #0
    fb1e:	b007      	add	sp, #28
    fb20:	bd30      	pop	{r4, r5, pc}
    fb22:	4b17      	ldr	r3, [pc, #92]	; (fb80 <LORAWAN_JoinReqHandler+0xc0>)
    fb24:	9803      	ldr	r0, [sp, #12]
    fb26:	9904      	ldr	r1, [sp, #16]
    fb28:	9a05      	ldr	r2, [sp, #20]
    fb2a:	4798      	blx	r3
    fb2c:	0023      	movs	r3, r4
    fb2e:	33f4      	adds	r3, #244	; 0xf4
    fb30:	781b      	ldrb	r3, [r3, #0]
    fb32:	ad01      	add	r5, sp, #4
    fb34:	2b04      	cmp	r3, #4
    fb36:	d104      	bne.n	fb42 <LORAWAN_JoinReqHandler+0x82>
    fb38:	3b03      	subs	r3, #3
    fb3a:	702b      	strb	r3, [r5, #0]
    fb3c:	0028      	movs	r0, r5
    fb3e:	4b11      	ldr	r3, [pc, #68]	; (fb84 <LORAWAN_JoinReqHandler+0xc4>)
    fb40:	4798      	blx	r3
    fb42:	23ef      	movs	r3, #239	; 0xef
    fb44:	2200      	movs	r2, #0
    fb46:	005b      	lsls	r3, r3, #1
    fb48:	54e2      	strb	r2, [r4, r3]
    fb4a:	4b0f      	ldr	r3, [pc, #60]	; (fb88 <LORAWAN_JoinReqHandler+0xc8>)
    fb4c:	4798      	blx	r3
    fb4e:	4b0f      	ldr	r3, [pc, #60]	; (fb8c <LORAWAN_JoinReqHandler+0xcc>)
    fb50:	7028      	strb	r0, [r5, #0]
    fb52:	606b      	str	r3, [r5, #4]
    fb54:	0028      	movs	r0, r5
    fb56:	4b0e      	ldr	r3, [pc, #56]	; (fb90 <LORAWAN_JoinReqHandler+0xd0>)
    fb58:	4798      	blx	r3
    fb5a:	2800      	cmp	r0, #0
    fb5c:	d001      	beq.n	fb62 <LORAWAN_JoinReqHandler+0xa2>
    fb5e:	201b      	movs	r0, #27
    fb60:	e7da      	b.n	fb18 <LORAWAN_JoinReqHandler+0x58>
    fb62:	220e      	movs	r2, #14
    fb64:	347c      	adds	r4, #124	; 0x7c
    fb66:	7823      	ldrb	r3, [r4, #0]
    fb68:	4393      	bics	r3, r2
    fb6a:	001a      	movs	r2, r3
    fb6c:	2302      	movs	r3, #2
    fb6e:	4313      	orrs	r3, r2
    fb70:	7023      	strb	r3, [r4, #0]
    fb72:	e7d3      	b.n	fb1c <LORAWAN_JoinReqHandler+0x5c>
    fb74:	200017bc 	.word	0x200017bc
    fb78:	00008bf9 	.word	0x00008bf9
    fb7c:	0000c069 	.word	0x0000c069
    fb80:	0000c5cd 	.word	0x0000c5cd
    fb84:	00010f71 	.word	0x00010f71
    fb88:	0000c419 	.word	0x0000c419
    fb8c:	200019a1 	.word	0x200019a1
    fb90:	0001069d 	.word	0x0001069d

0000fb94 <LORAWAN_RxHandler>:
    fb94:	b513      	push	{r0, r1, r4, lr}
    fb96:	4b0c      	ldr	r3, [pc, #48]	; (fbc8 <LORAWAN_RxHandler+0x34>)
    fb98:	781b      	ldrb	r3, [r3, #0]
    fb9a:	2b08      	cmp	r3, #8
    fb9c:	d011      	beq.n	fbc2 <LORAWAN_RxHandler+0x2e>
    fb9e:	2b10      	cmp	r3, #16
    fba0:	d001      	beq.n	fba6 <LORAWAN_RxHandler+0x12>
    fba2:	2b01      	cmp	r3, #1
    fba4:	d10b      	bne.n	fbbe <LORAWAN_RxHandler+0x2a>
    fba6:	466b      	mov	r3, sp
    fba8:	1c9c      	adds	r4, r3, #2
    fbaa:	0021      	movs	r1, r4
    fbac:	a801      	add	r0, sp, #4
    fbae:	4b07      	ldr	r3, [pc, #28]	; (fbcc <LORAWAN_RxHandler+0x38>)
    fbb0:	4798      	blx	r3
    fbb2:	9801      	ldr	r0, [sp, #4]
    fbb4:	2800      	cmp	r0, #0
    fbb6:	d002      	beq.n	fbbe <LORAWAN_RxHandler+0x2a>
    fbb8:	7821      	ldrb	r1, [r4, #0]
    fbba:	4b05      	ldr	r3, [pc, #20]	; (fbd0 <LORAWAN_RxHandler+0x3c>)
    fbbc:	4798      	blx	r3
    fbbe:	2000      	movs	r0, #0
    fbc0:	bd16      	pop	{r1, r2, r4, pc}
    fbc2:	4b04      	ldr	r3, [pc, #16]	; (fbd4 <LORAWAN_RxHandler+0x40>)
    fbc4:	4798      	blx	r3
    fbc6:	e7fa      	b.n	fbbe <LORAWAN_RxHandler+0x2a>
    fbc8:	200019a0 	.word	0x200019a0
    fbcc:	00010869 	.word	0x00010869
    fbd0:	0000e0e1 	.word	0x0000e0e1
    fbd4:	0000da51 	.word	0x0000da51

0000fbd8 <LORAWAN_PostTask>:
    fbd8:	b510      	push	{r4, lr}
    fbda:	4b08      	ldr	r3, [pc, #32]	; (fbfc <LORAWAN_PostTask+0x24>)
    fbdc:	0004      	movs	r4, r0
    fbde:	4798      	blx	r3
    fbe0:	2201      	movs	r2, #1
    fbe2:	40a2      	lsls	r2, r4
    fbe4:	4906      	ldr	r1, [pc, #24]	; (fc00 <LORAWAN_PostTask+0x28>)
    fbe6:	780b      	ldrb	r3, [r1, #0]
    fbe8:	4313      	orrs	r3, r2
    fbea:	b2db      	uxtb	r3, r3
    fbec:	700b      	strb	r3, [r1, #0]
    fbee:	4b05      	ldr	r3, [pc, #20]	; (fc04 <LORAWAN_PostTask+0x2c>)
    fbf0:	4798      	blx	r3
    fbf2:	2004      	movs	r0, #4
    fbf4:	4b04      	ldr	r3, [pc, #16]	; (fc08 <LORAWAN_PostTask+0x30>)
    fbf6:	4798      	blx	r3
    fbf8:	bd10      	pop	{r4, pc}
    fbfa:	46c0      	nop			; (mov r8, r8)
    fbfc:	00003d2d 	.word	0x00003d2d
    fc00:	20000ea0 	.word	0x20000ea0
    fc04:	00003d39 	.word	0x00003d39
    fc08:	00009c35 	.word	0x00009c35

0000fc0c <LORAWAN_TaskHandler>:
    fc0c:	b570      	push	{r4, r5, r6, lr}
    fc0e:	2601      	movs	r6, #1
    fc10:	4d0e      	ldr	r5, [pc, #56]	; (fc4c <LORAWAN_TaskHandler+0x40>)
    fc12:	e015      	b.n	fc40 <LORAWAN_TaskHandler+0x34>
    fc14:	2400      	movs	r4, #0
    fc16:	782b      	ldrb	r3, [r5, #0]
    fc18:	4123      	asrs	r3, r4
    fc1a:	4233      	tst	r3, r6
    fc1c:	d00d      	beq.n	fc3a <LORAWAN_TaskHandler+0x2e>
    fc1e:	4b0c      	ldr	r3, [pc, #48]	; (fc50 <LORAWAN_TaskHandler+0x44>)
    fc20:	4798      	blx	r3
    fc22:	0032      	movs	r2, r6
    fc24:	40a2      	lsls	r2, r4
    fc26:	782b      	ldrb	r3, [r5, #0]
    fc28:	00a4      	lsls	r4, r4, #2
    fc2a:	4393      	bics	r3, r2
    fc2c:	702b      	strb	r3, [r5, #0]
    fc2e:	4b09      	ldr	r3, [pc, #36]	; (fc54 <LORAWAN_TaskHandler+0x48>)
    fc30:	4798      	blx	r3
    fc32:	4b09      	ldr	r3, [pc, #36]	; (fc58 <LORAWAN_TaskHandler+0x4c>)
    fc34:	58e3      	ldr	r3, [r4, r3]
    fc36:	4798      	blx	r3
    fc38:	e7ea      	b.n	fc10 <LORAWAN_TaskHandler+0x4>
    fc3a:	3401      	adds	r4, #1
    fc3c:	2c03      	cmp	r4, #3
    fc3e:	d1ea      	bne.n	fc16 <LORAWAN_TaskHandler+0xa>
    fc40:	7828      	ldrb	r0, [r5, #0]
    fc42:	b2c0      	uxtb	r0, r0
    fc44:	2800      	cmp	r0, #0
    fc46:	d1e5      	bne.n	fc14 <LORAWAN_TaskHandler+0x8>
    fc48:	bd70      	pop	{r4, r5, r6, pc}
    fc4a:	46c0      	nop			; (mov r8, r8)
    fc4c:	20000ea0 	.word	0x20000ea0
    fc50:	00003d2d 	.word	0x00003d2d
    fc54:	00003d39 	.word	0x00003d39
    fc58:	0001ad60 	.word	0x0001ad60

0000fc5c <RADIO_GetAttr>:
    fc5c:	b510      	push	{r4, lr}
    fc5e:	000b      	movs	r3, r1
    fc60:	281f      	cmp	r0, #31
    fc62:	d900      	bls.n	fc66 <RADIO_GetAttr+0xa>
    fc64:	e069      	b.n	fd3a <RADIO_GetAttr+0xde>
    fc66:	f001 fd6b 	bl	11740 <__gnu_thumb1_case_uqi>
    fc6a:	1410      	.short	0x1410
    fc6c:	68201c19 	.word	0x68201c19
    fc70:	312e2a27 	.word	0x312e2a27
    fc74:	3d3a3734 	.word	0x3d3a3734
    fc78:	46434054 	.word	0x46434054
    fc7c:	68245149 	.word	0x68245149
    fc80:	68686859 	.word	0x68686859
    fc84:	5c686817 	.word	0x5c686817
    fc88:	6360      	.short	0x6360
    fc8a:	4a2d      	ldr	r2, [pc, #180]	; (fd40 <RADIO_GetAttr+0xe4>)
    fc8c:	7e12      	ldrb	r2, [r2, #24]
    fc8e:	701a      	strb	r2, [r3, #0]
    fc90:	e002      	b.n	fc98 <RADIO_GetAttr+0x3c>
    fc92:	4a2b      	ldr	r2, [pc, #172]	; (fd40 <RADIO_GetAttr+0xe4>)
    fc94:	6812      	ldr	r2, [r2, #0]
    fc96:	601a      	str	r2, [r3, #0]
    fc98:	2000      	movs	r0, #0
    fc9a:	bd10      	pop	{r4, pc}
    fc9c:	4a28      	ldr	r2, [pc, #160]	; (fd40 <RADIO_GetAttr+0xe4>)
    fc9e:	6852      	ldr	r2, [r2, #4]
    fca0:	e7f9      	b.n	fc96 <RADIO_GetAttr+0x3a>
    fca2:	4a27      	ldr	r2, [pc, #156]	; (fd40 <RADIO_GetAttr+0xe4>)
    fca4:	8a92      	ldrh	r2, [r2, #20]
    fca6:	801a      	strh	r2, [r3, #0]
    fca8:	e7f6      	b.n	fc98 <RADIO_GetAttr+0x3c>
    fcaa:	4a25      	ldr	r2, [pc, #148]	; (fd40 <RADIO_GetAttr+0xe4>)
    fcac:	3203      	adds	r2, #3
    fcae:	7fd2      	ldrb	r2, [r2, #31]
    fcb0:	e7ed      	b.n	fc8e <RADIO_GetAttr+0x32>
    fcb2:	4a23      	ldr	r2, [pc, #140]	; (fd40 <RADIO_GetAttr+0xe4>)
    fcb4:	3204      	adds	r2, #4
    fcb6:	e7fa      	b.n	fcae <RADIO_GetAttr+0x52>
    fcb8:	4a21      	ldr	r2, [pc, #132]	; (fd40 <RADIO_GetAttr+0xe4>)
    fcba:	3206      	adds	r2, #6
    fcbc:	e7f7      	b.n	fcae <RADIO_GetAttr+0x52>
    fcbe:	4a20      	ldr	r2, [pc, #128]	; (fd40 <RADIO_GetAttr+0xe4>)
    fcc0:	3236      	adds	r2, #54	; 0x36
    fcc2:	7812      	ldrb	r2, [r2, #0]
    fcc4:	e7e3      	b.n	fc8e <RADIO_GetAttr+0x32>
    fcc6:	4a1e      	ldr	r2, [pc, #120]	; (fd40 <RADIO_GetAttr+0xe4>)
    fcc8:	3205      	adds	r2, #5
    fcca:	e7f0      	b.n	fcae <RADIO_GetAttr+0x52>
    fccc:	4a1c      	ldr	r2, [pc, #112]	; (fd40 <RADIO_GetAttr+0xe4>)
    fcce:	3234      	adds	r2, #52	; 0x34
    fcd0:	e7f7      	b.n	fcc2 <RADIO_GetAttr+0x66>
    fcd2:	4a1b      	ldr	r2, [pc, #108]	; (fd40 <RADIO_GetAttr+0xe4>)
    fcd4:	8ad2      	ldrh	r2, [r2, #22]
    fcd6:	e7e6      	b.n	fca6 <RADIO_GetAttr+0x4a>
    fcd8:	4a19      	ldr	r2, [pc, #100]	; (fd40 <RADIO_GetAttr+0xe4>)
    fcda:	3233      	adds	r2, #51	; 0x33
    fcdc:	e7f1      	b.n	fcc2 <RADIO_GetAttr+0x66>
    fcde:	4a18      	ldr	r2, [pc, #96]	; (fd40 <RADIO_GetAttr+0xe4>)
    fce0:	68d2      	ldr	r2, [r2, #12]
    fce2:	e7d8      	b.n	fc96 <RADIO_GetAttr+0x3a>
    fce4:	4a16      	ldr	r2, [pc, #88]	; (fd40 <RADIO_GetAttr+0xe4>)
    fce6:	6892      	ldr	r2, [r2, #8]
    fce8:	e7d5      	b.n	fc96 <RADIO_GetAttr+0x3a>
    fcea:	4a15      	ldr	r2, [pc, #84]	; (fd40 <RADIO_GetAttr+0xe4>)
    fcec:	3237      	adds	r2, #55	; 0x37
    fcee:	e7e8      	b.n	fcc2 <RADIO_GetAttr+0x66>
    fcf0:	4a13      	ldr	r2, [pc, #76]	; (fd40 <RADIO_GetAttr+0xe4>)
    fcf2:	3238      	adds	r2, #56	; 0x38
    fcf4:	e7e5      	b.n	fcc2 <RADIO_GetAttr+0x66>
    fcf6:	4a12      	ldr	r2, [pc, #72]	; (fd40 <RADIO_GetAttr+0xe4>)
    fcf8:	3239      	adds	r2, #57	; 0x39
    fcfa:	e7e2      	b.n	fcc2 <RADIO_GetAttr+0x66>
    fcfc:	4a10      	ldr	r2, [pc, #64]	; (fd40 <RADIO_GetAttr+0xe4>)
    fcfe:	4911      	ldr	r1, [pc, #68]	; (fd44 <RADIO_GetAttr+0xe8>)
    fd00:	3202      	adds	r2, #2
    fd02:	7fd2      	ldrb	r2, [r2, #31]
    fd04:	0018      	movs	r0, r3
    fd06:	4b10      	ldr	r3, [pc, #64]	; (fd48 <RADIO_GetAttr+0xec>)
    fd08:	4798      	blx	r3
    fd0a:	e7c5      	b.n	fc98 <RADIO_GetAttr+0x3c>
    fd0c:	4a0c      	ldr	r2, [pc, #48]	; (fd40 <RADIO_GetAttr+0xe4>)
    fd0e:	3202      	adds	r2, #2
    fd10:	e7cd      	b.n	fcae <RADIO_GetAttr+0x52>
    fd12:	4a0b      	ldr	r2, [pc, #44]	; (fd40 <RADIO_GetAttr+0xe4>)
    fd14:	3232      	adds	r2, #50	; 0x32
    fd16:	7812      	ldrb	r2, [r2, #0]
    fd18:	b252      	sxtb	r2, r2
    fd1a:	e7b8      	b.n	fc8e <RADIO_GetAttr+0x32>
    fd1c:	4a08      	ldr	r2, [pc, #32]	; (fd40 <RADIO_GetAttr+0xe4>)
    fd1e:	3235      	adds	r2, #53	; 0x35
    fd20:	e7cf      	b.n	fcc2 <RADIO_GetAttr+0x66>
    fd22:	4907      	ldr	r1, [pc, #28]	; (fd40 <RADIO_GetAttr+0xe4>)
    fd24:	2206      	movs	r2, #6
    fd26:	313c      	adds	r1, #60	; 0x3c
    fd28:	e7ec      	b.n	fd04 <RADIO_GetAttr+0xa8>
    fd2a:	4a05      	ldr	r2, [pc, #20]	; (fd40 <RADIO_GetAttr+0xe4>)
    fd2c:	3254      	adds	r2, #84	; 0x54
    fd2e:	e7c8      	b.n	fcc2 <RADIO_GetAttr+0x66>
    fd30:	4a03      	ldr	r2, [pc, #12]	; (fd40 <RADIO_GetAttr+0xe4>)
    fd32:	3256      	adds	r2, #86	; 0x56
    fd34:	2100      	movs	r1, #0
    fd36:	5e52      	ldrsh	r2, [r2, r1]
    fd38:	e7b5      	b.n	fca6 <RADIO_GetAttr+0x4a>
    fd3a:	2005      	movs	r0, #5
    fd3c:	e7ad      	b.n	fc9a <RADIO_GetAttr+0x3e>
    fd3e:	46c0      	nop			; (mov r8, r8)
    fd40:	20001398 	.word	0x20001398
    fd44:	200013b1 	.word	0x200013b1
    fd48:	00014ecd 	.word	0x00014ecd

0000fd4c <RADIO_SetAttr>:
    fd4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    fd4e:	4b77      	ldr	r3, [pc, #476]	; (ff2c <RADIO_SetAttr+0x1e0>)
    fd50:	b085      	sub	sp, #20
    fd52:	0006      	movs	r6, r0
    fd54:	000d      	movs	r5, r1
    fd56:	4798      	blx	r3
    fd58:	2404      	movs	r4, #4
    fd5a:	2801      	cmp	r0, #1
    fd5c:	d11a      	bne.n	fd94 <RADIO_SetAttr+0x48>
    fd5e:	2e1d      	cmp	r6, #29
    fd60:	d900      	bls.n	fd64 <RADIO_SetAttr+0x18>
    fd62:	e0e0      	b.n	ff26 <RADIO_SetAttr+0x1da>
    fd64:	0030      	movs	r0, r6
    fd66:	f001 fceb 	bl	11740 <__gnu_thumb1_case_uqi>
    fd6a:	514d      	.short	0x514d
    fd6c:	de6d6965 	.word	0xde6d6965
    fd70:	8f8b8179 	.word	0x8f8b8179
    fd74:	a7a49b97 	.word	0xa7a49b97
    fd78:	bcb3abde 	.word	0xbcb3abde
    fd7c:	de72cdc5 	.word	0xde72cdc5
    fd80:	dededed5 	.word	0xdededed5
    fd84:	18dede0f 	.word	0x18dede0f
    fd88:	2403      	movs	r4, #3
    fd8a:	2d00      	cmp	r5, #0
    fd8c:	d002      	beq.n	fd94 <RADIO_SetAttr+0x48>
    fd8e:	4b68      	ldr	r3, [pc, #416]	; (ff30 <RADIO_SetAttr+0x1e4>)
    fd90:	611d      	str	r5, [r3, #16]
    fd92:	2400      	movs	r4, #0
    fd94:	0020      	movs	r0, r4
    fd96:	b005      	add	sp, #20
    fd98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fd9a:	796e      	ldrb	r6, [r5, #5]
    fd9c:	2e00      	cmp	r6, #0
    fd9e:	d109      	bne.n	fdb4 <RADIO_SetAttr+0x68>
    fda0:	4b63      	ldr	r3, [pc, #396]	; (ff30 <RADIO_SetAttr+0x1e4>)
    fda2:	001a      	movs	r2, r3
    fda4:	649e      	str	r6, [r3, #72]	; 0x48
    fda6:	879e      	strh	r6, [r3, #60]	; 0x3c
    fda8:	87de      	strh	r6, [r3, #62]	; 0x3e
    fdaa:	3240      	adds	r2, #64	; 0x40
    fdac:	3341      	adds	r3, #65	; 0x41
    fdae:	7016      	strb	r6, [r2, #0]
    fdb0:	701e      	strb	r6, [r3, #0]
    fdb2:	e7ee      	b.n	fd92 <RADIO_SetAttr+0x46>
    fdb4:	882b      	ldrh	r3, [r5, #0]
    fdb6:	2403      	movs	r4, #3
    fdb8:	9301      	str	r3, [sp, #4]
    fdba:	2b00      	cmp	r3, #0
    fdbc:	d0ea      	beq.n	fd94 <RADIO_SetAttr+0x48>
    fdbe:	792f      	ldrb	r7, [r5, #4]
    fdc0:	2f00      	cmp	r7, #0
    fdc2:	d0e7      	beq.n	fd94 <RADIO_SetAttr+0x48>
    fdc4:	20fa      	movs	r0, #250	; 0xfa
    fdc6:	0080      	lsls	r0, r0, #2
    fdc8:	0039      	movs	r1, r7
    fdca:	4358      	muls	r0, r3
    fdcc:	4b59      	ldr	r3, [pc, #356]	; (ff34 <RADIO_SetAttr+0x1e8>)
    fdce:	4798      	blx	r3
    fdd0:	4b59      	ldr	r3, [pc, #356]	; (ff38 <RADIO_SetAttr+0x1ec>)
    fdd2:	4798      	blx	r3
    fdd4:	4959      	ldr	r1, [pc, #356]	; (ff3c <RADIO_SetAttr+0x1f0>)
    fdd6:	9002      	str	r0, [sp, #8]
    fdd8:	4b59      	ldr	r3, [pc, #356]	; (ff40 <RADIO_SetAttr+0x1f4>)
    fdda:	4798      	blx	r3
    fddc:	9003      	str	r0, [sp, #12]
    fdde:	2800      	cmp	r0, #0
    fde0:	d1d8      	bne.n	fd94 <RADIO_SetAttr+0x48>
    fde2:	2302      	movs	r3, #2
    fde4:	5eed      	ldrsh	r5, [r5, r3]
    fde6:	9802      	ldr	r0, [sp, #8]
    fde8:	4b56      	ldr	r3, [pc, #344]	; (ff44 <RADIO_SetAttr+0x1f8>)
    fdea:	4798      	blx	r3
    fdec:	466b      	mov	r3, sp
    fdee:	4c50      	ldr	r4, [pc, #320]	; (ff30 <RADIO_SetAttr+0x1e4>)
    fdf0:	889b      	ldrh	r3, [r3, #4]
    fdf2:	64a0      	str	r0, [r4, #72]	; 0x48
    fdf4:	87a3      	strh	r3, [r4, #60]	; 0x3c
    fdf6:	0023      	movs	r3, r4
    fdf8:	87e5      	strh	r5, [r4, #62]	; 0x3e
    fdfa:	3340      	adds	r3, #64	; 0x40
    fdfc:	3441      	adds	r4, #65	; 0x41
    fdfe:	701f      	strb	r7, [r3, #0]
    fe00:	7026      	strb	r6, [r4, #0]
    fe02:	e7c6      	b.n	fd92 <RADIO_SetAttr+0x46>
    fe04:	782a      	ldrb	r2, [r5, #0]
    fe06:	4b4a      	ldr	r3, [pc, #296]	; (ff30 <RADIO_SetAttr+0x1e4>)
    fe08:	761a      	strb	r2, [r3, #24]
    fe0a:	e7c2      	b.n	fd92 <RADIO_SetAttr+0x46>
    fe0c:	4a4e      	ldr	r2, [pc, #312]	; (ff48 <RADIO_SetAttr+0x1fc>)
    fe0e:	682b      	ldr	r3, [r5, #0]
    fe10:	1899      	adds	r1, r3, r2
    fe12:	4a4e      	ldr	r2, [pc, #312]	; (ff4c <RADIO_SetAttr+0x200>)
    fe14:	4291      	cmp	r1, r2
    fe16:	d90a      	bls.n	fe2e <RADIO_SetAttr+0xe2>
    fe18:	4a4d      	ldr	r2, [pc, #308]	; (ff50 <RADIO_SetAttr+0x204>)
    fe1a:	494e      	ldr	r1, [pc, #312]	; (ff54 <RADIO_SetAttr+0x208>)
    fe1c:	189a      	adds	r2, r3, r2
    fe1e:	428a      	cmp	r2, r1
    fe20:	d905      	bls.n	fe2e <RADIO_SetAttr+0xe2>
    fe22:	4a4d      	ldr	r2, [pc, #308]	; (ff58 <RADIO_SetAttr+0x20c>)
    fe24:	494d      	ldr	r1, [pc, #308]	; (ff5c <RADIO_SetAttr+0x210>)
    fe26:	189a      	adds	r2, r3, r2
    fe28:	2405      	movs	r4, #5
    fe2a:	428a      	cmp	r2, r1
    fe2c:	d8b2      	bhi.n	fd94 <RADIO_SetAttr+0x48>
    fe2e:	4a40      	ldr	r2, [pc, #256]	; (ff30 <RADIO_SetAttr+0x1e4>)
    fe30:	6013      	str	r3, [r2, #0]
    fe32:	e7ae      	b.n	fd92 <RADIO_SetAttr+0x46>
    fe34:	682a      	ldr	r2, [r5, #0]
    fe36:	4b3e      	ldr	r3, [pc, #248]	; (ff30 <RADIO_SetAttr+0x1e4>)
    fe38:	605a      	str	r2, [r3, #4]
    fe3a:	e7aa      	b.n	fd92 <RADIO_SetAttr+0x46>
    fe3c:	882a      	ldrh	r2, [r5, #0]
    fe3e:	4b3c      	ldr	r3, [pc, #240]	; (ff30 <RADIO_SetAttr+0x1e4>)
    fe40:	829a      	strh	r2, [r3, #20]
    fe42:	e7a6      	b.n	fd92 <RADIO_SetAttr+0x46>
    fe44:	4b3a      	ldr	r3, [pc, #232]	; (ff30 <RADIO_SetAttr+0x1e4>)
    fe46:	782a      	ldrb	r2, [r5, #0]
    fe48:	3303      	adds	r3, #3
    fe4a:	77da      	strb	r2, [r3, #31]
    fe4c:	e7a1      	b.n	fd92 <RADIO_SetAttr+0x46>
    fe4e:	782a      	ldrb	r2, [r5, #0]
    fe50:	2405      	movs	r4, #5
    fe52:	2a01      	cmp	r2, #1
    fe54:	d89e      	bhi.n	fd94 <RADIO_SetAttr+0x48>
    fe56:	4b36      	ldr	r3, [pc, #216]	; (ff30 <RADIO_SetAttr+0x1e4>)
    fe58:	3304      	adds	r3, #4
    fe5a:	e7f6      	b.n	fe4a <RADIO_SetAttr+0xfe>
    fe5c:	782a      	ldrb	r2, [r5, #0]
    fe5e:	2405      	movs	r4, #5
    fe60:	2a01      	cmp	r2, #1
    fe62:	d900      	bls.n	fe66 <RADIO_SetAttr+0x11a>
    fe64:	e796      	b.n	fd94 <RADIO_SetAttr+0x48>
    fe66:	4b32      	ldr	r3, [pc, #200]	; (ff30 <RADIO_SetAttr+0x1e4>)
    fe68:	3306      	adds	r3, #6
    fe6a:	e7ee      	b.n	fe4a <RADIO_SetAttr+0xfe>
    fe6c:	782a      	ldrb	r2, [r5, #0]
    fe6e:	2405      	movs	r4, #5
    fe70:	1fd3      	subs	r3, r2, #7
    fe72:	2b02      	cmp	r3, #2
    fe74:	d900      	bls.n	fe78 <RADIO_SetAttr+0x12c>
    fe76:	e78d      	b.n	fd94 <RADIO_SetAttr+0x48>
    fe78:	4b2d      	ldr	r3, [pc, #180]	; (ff30 <RADIO_SetAttr+0x1e4>)
    fe7a:	3336      	adds	r3, #54	; 0x36
    fe7c:	701a      	strb	r2, [r3, #0]
    fe7e:	e788      	b.n	fd92 <RADIO_SetAttr+0x46>
    fe80:	4b2b      	ldr	r3, [pc, #172]	; (ff30 <RADIO_SetAttr+0x1e4>)
    fe82:	782a      	ldrb	r2, [r5, #0]
    fe84:	3305      	adds	r3, #5
    fe86:	e7e0      	b.n	fe4a <RADIO_SetAttr+0xfe>
    fe88:	782a      	ldrb	r2, [r5, #0]
    fe8a:	2405      	movs	r4, #5
    fe8c:	2a01      	cmp	r2, #1
    fe8e:	d900      	bls.n	fe92 <RADIO_SetAttr+0x146>
    fe90:	e780      	b.n	fd94 <RADIO_SetAttr+0x48>
    fe92:	4b27      	ldr	r3, [pc, #156]	; (ff30 <RADIO_SetAttr+0x1e4>)
    fe94:	3334      	adds	r3, #52	; 0x34
    fe96:	e7f1      	b.n	fe7c <RADIO_SetAttr+0x130>
    fe98:	882a      	ldrh	r2, [r5, #0]
    fe9a:	4b25      	ldr	r3, [pc, #148]	; (ff30 <RADIO_SetAttr+0x1e4>)
    fe9c:	82da      	strh	r2, [r3, #22]
    fe9e:	e778      	b.n	fd92 <RADIO_SetAttr+0x46>
    fea0:	782a      	ldrb	r2, [r5, #0]
    fea2:	2405      	movs	r4, #5
    fea4:	1e53      	subs	r3, r2, #1
    fea6:	2b03      	cmp	r3, #3
    fea8:	d900      	bls.n	feac <RADIO_SetAttr+0x160>
    feaa:	e773      	b.n	fd94 <RADIO_SetAttr+0x48>
    feac:	4b20      	ldr	r3, [pc, #128]	; (ff30 <RADIO_SetAttr+0x1e4>)
    feae:	3333      	adds	r3, #51	; 0x33
    feb0:	e7e4      	b.n	fe7c <RADIO_SetAttr+0x130>
    feb2:	4b1f      	ldr	r3, [pc, #124]	; (ff30 <RADIO_SetAttr+0x1e4>)
    feb4:	682a      	ldr	r2, [r5, #0]
    feb6:	60da      	str	r2, [r3, #12]
    feb8:	682a      	ldr	r2, [r5, #0]
    feba:	4b1d      	ldr	r3, [pc, #116]	; (ff30 <RADIO_SetAttr+0x1e4>)
    febc:	609a      	str	r2, [r3, #8]
    febe:	e768      	b.n	fd92 <RADIO_SetAttr+0x46>
    fec0:	782a      	ldrb	r2, [r5, #0]
    fec2:	2405      	movs	r4, #5
    fec4:	2a03      	cmp	r2, #3
    fec6:	d900      	bls.n	feca <RADIO_SetAttr+0x17e>
    fec8:	e764      	b.n	fd94 <RADIO_SetAttr+0x48>
    feca:	4b19      	ldr	r3, [pc, #100]	; (ff30 <RADIO_SetAttr+0x1e4>)
    fecc:	3337      	adds	r3, #55	; 0x37
    fece:	e7d5      	b.n	fe7c <RADIO_SetAttr+0x130>
    fed0:	782a      	ldrb	r2, [r5, #0]
    fed2:	2405      	movs	r4, #5
    fed4:	1e53      	subs	r3, r2, #1
    fed6:	2b16      	cmp	r3, #22
    fed8:	d900      	bls.n	fedc <RADIO_SetAttr+0x190>
    feda:	e75b      	b.n	fd94 <RADIO_SetAttr+0x48>
    fedc:	4b14      	ldr	r3, [pc, #80]	; (ff30 <RADIO_SetAttr+0x1e4>)
    fede:	3338      	adds	r3, #56	; 0x38
    fee0:	e7cc      	b.n	fe7c <RADIO_SetAttr+0x130>
    fee2:	782a      	ldrb	r2, [r5, #0]
    fee4:	2405      	movs	r4, #5
    fee6:	1e53      	subs	r3, r2, #1
    fee8:	2b16      	cmp	r3, #22
    feea:	d900      	bls.n	feee <RADIO_SetAttr+0x1a2>
    feec:	e752      	b.n	fd94 <RADIO_SetAttr+0x48>
    feee:	4b10      	ldr	r3, [pc, #64]	; (ff30 <RADIO_SetAttr+0x1e4>)
    fef0:	3339      	adds	r3, #57	; 0x39
    fef2:	e7c3      	b.n	fe7c <RADIO_SetAttr+0x130>
    fef4:	4b0e      	ldr	r3, [pc, #56]	; (ff30 <RADIO_SetAttr+0x1e4>)
    fef6:	0029      	movs	r1, r5
    fef8:	3302      	adds	r3, #2
    fefa:	7fda      	ldrb	r2, [r3, #31]
    fefc:	4818      	ldr	r0, [pc, #96]	; (ff60 <RADIO_SetAttr+0x214>)
    fefe:	4b19      	ldr	r3, [pc, #100]	; (ff64 <RADIO_SetAttr+0x218>)
    ff00:	4798      	blx	r3
    ff02:	e746      	b.n	fd92 <RADIO_SetAttr+0x46>
    ff04:	782b      	ldrb	r3, [r5, #0]
    ff06:	1c1a      	adds	r2, r3, #0
    ff08:	2b08      	cmp	r3, #8
    ff0a:	d900      	bls.n	ff0e <RADIO_SetAttr+0x1c2>
    ff0c:	2208      	movs	r2, #8
    ff0e:	4b08      	ldr	r3, [pc, #32]	; (ff30 <RADIO_SetAttr+0x1e4>)
    ff10:	3302      	adds	r3, #2
    ff12:	e79a      	b.n	fe4a <RADIO_SetAttr+0xfe>
    ff14:	2405      	movs	r4, #5
    ff16:	782a      	ldrb	r2, [r5, #0]
    ff18:	1fd3      	subs	r3, r2, #7
    ff1a:	42a3      	cmp	r3, r4
    ff1c:	d900      	bls.n	ff20 <RADIO_SetAttr+0x1d4>
    ff1e:	e739      	b.n	fd94 <RADIO_SetAttr+0x48>
    ff20:	4b03      	ldr	r3, [pc, #12]	; (ff30 <RADIO_SetAttr+0x1e4>)
    ff22:	3335      	adds	r3, #53	; 0x35
    ff24:	e7aa      	b.n	fe7c <RADIO_SetAttr+0x130>
    ff26:	2405      	movs	r4, #5
    ff28:	e734      	b.n	fd94 <RADIO_SetAttr+0x48>
    ff2a:	46c0      	nop			; (mov r8, r8)
    ff2c:	00010681 	.word	0x00010681
    ff30:	20001398 	.word	0x20001398
    ff34:	0001187d 	.word	0x0001187d
    ff38:	00012a09 	.word	0x00012a09
    ff3c:	43fa0000 	.word	0x43fa0000
    ff40:	00011a79 	.word	0x00011a79
    ff44:	00011b5d 	.word	0x00011b5d
    ff48:	f7d58bc0 	.word	0xf7d58bc0
    ff4c:	0243d580 	.word	0x0243d580
    ff50:	e78fe580 	.word	0xe78fe580
    ff54:	06dac2c0 	.word	0x06dac2c0
    ff58:	cc9eec80 	.word	0xcc9eec80
    ff5c:	096ae380 	.word	0x096ae380
    ff60:	200013b1 	.word	0x200013b1
    ff64:	00014ecd 	.word	0x00014ecd

0000ff68 <RADIO_Init>:
    ff68:	b510      	push	{r4, lr}
    ff6a:	4b0c      	ldr	r3, [pc, #48]	; (ff9c <RADIO_Init+0x34>)
    ff6c:	4798      	blx	r3
    ff6e:	4b0c      	ldr	r3, [pc, #48]	; (ffa0 <RADIO_Init+0x38>)
    ff70:	201f      	movs	r0, #31
    ff72:	4798      	blx	r3
    ff74:	4c0b      	ldr	r4, [pc, #44]	; (ffa4 <RADIO_Init+0x3c>)
    ff76:	490c      	ldr	r1, [pc, #48]	; (ffa8 <RADIO_Init+0x40>)
    ff78:	2001      	movs	r0, #1
    ff7a:	47a0      	blx	r4
    ff7c:	490b      	ldr	r1, [pc, #44]	; (ffac <RADIO_Init+0x44>)
    ff7e:	2002      	movs	r0, #2
    ff80:	47a0      	blx	r4
    ff82:	490b      	ldr	r1, [pc, #44]	; (ffb0 <RADIO_Init+0x48>)
    ff84:	2004      	movs	r0, #4
    ff86:	47a0      	blx	r4
    ff88:	490a      	ldr	r1, [pc, #40]	; (ffb4 <RADIO_Init+0x4c>)
    ff8a:	2008      	movs	r0, #8
    ff8c:	47a0      	blx	r4
    ff8e:	490a      	ldr	r1, [pc, #40]	; (ffb8 <RADIO_Init+0x50>)
    ff90:	2010      	movs	r0, #16
    ff92:	47a0      	blx	r4
    ff94:	4909      	ldr	r1, [pc, #36]	; (ffbc <RADIO_Init+0x54>)
    ff96:	2020      	movs	r0, #32
    ff98:	47a0      	blx	r4
    ff9a:	bd10      	pop	{r4, pc}
    ff9c:	00010d7d 	.word	0x00010d7d
    ffa0:	0001068d 	.word	0x0001068d
    ffa4:	00003c71 	.word	0x00003c71
    ffa8:	00010419 	.word	0x00010419
    ffac:	00010491 	.word	0x00010491
    ffb0:	00010501 	.word	0x00010501
    ffb4:	00010551 	.word	0x00010551
    ffb8:	00010579 	.word	0x00010579
    ffbc:	000105a1 	.word	0x000105a1

0000ffc0 <Radio_WriteFrequency>:
    ffc0:	b570      	push	{r4, r5, r6, lr}
    ffc2:	490d      	ldr	r1, [pc, #52]	; (fff8 <Radio_WriteFrequency+0x38>)
    ffc4:	4d0d      	ldr	r5, [pc, #52]	; (fffc <Radio_WriteFrequency+0x3c>)
    ffc6:	0006      	movs	r6, r0
    ffc8:	47a8      	blx	r5
    ffca:	4b0d      	ldr	r3, [pc, #52]	; (10000 <Radio_WriteFrequency+0x40>)
    ffcc:	0004      	movs	r4, r0
    ffce:	490a      	ldr	r1, [pc, #40]	; (fff8 <Radio_WriteFrequency+0x38>)
    ffd0:	0030      	movs	r0, r6
    ffd2:	4798      	blx	r3
    ffd4:	0208      	lsls	r0, r1, #8
    ffd6:	4908      	ldr	r1, [pc, #32]	; (fff8 <Radio_WriteFrequency+0x38>)
    ffd8:	47a8      	blx	r5
    ffda:	0224      	lsls	r4, r4, #8
    ffdc:	1904      	adds	r4, r0, r4
    ffde:	0c21      	lsrs	r1, r4, #16
    ffe0:	4d08      	ldr	r5, [pc, #32]	; (10004 <Radio_WriteFrequency+0x44>)
    ffe2:	b2c9      	uxtb	r1, r1
    ffe4:	2006      	movs	r0, #6
    ffe6:	47a8      	blx	r5
    ffe8:	0a21      	lsrs	r1, r4, #8
    ffea:	b2c9      	uxtb	r1, r1
    ffec:	2007      	movs	r0, #7
    ffee:	47a8      	blx	r5
    fff0:	b2e1      	uxtb	r1, r4
    fff2:	2008      	movs	r0, #8
    fff4:	47a8      	blx	r5
    fff6:	bd70      	pop	{r4, r5, r6, pc}
    fff8:	00003d09 	.word	0x00003d09
    fffc:	00011769 	.word	0x00011769
   10000:	00011875 	.word	0x00011875
   10004:	00003b9d 	.word	0x00003b9d

00010008 <Radio_WriteConfiguration>:
   10008:	b5f0      	push	{r4, r5, r6, r7, lr}
   1000a:	4cb0      	ldr	r4, [pc, #704]	; (102cc <Radio_WriteConfiguration+0x2c4>)
   1000c:	2200      	movs	r2, #0
   1000e:	0023      	movs	r3, r4
   10010:	b085      	sub	sp, #20
   10012:	9002      	str	r0, [sp, #8]
   10014:	3334      	adds	r3, #52	; 0x34
   10016:	0010      	movs	r0, r2
   10018:	7819      	ldrb	r1, [r3, #0]
   1001a:	4bad      	ldr	r3, [pc, #692]	; (102d0 <Radio_WriteConfiguration+0x2c8>)
   1001c:	4798      	blx	r3
   1001e:	4bad      	ldr	r3, [pc, #692]	; (102d4 <Radio_WriteConfiguration+0x2cc>)
   10020:	6820      	ldr	r0, [r4, #0]
   10022:	4798      	blx	r3
   10024:	1ce3      	adds	r3, r4, #3
   10026:	1d62      	adds	r2, r4, #5
   10028:	7fdb      	ldrb	r3, [r3, #31]
   1002a:	7fd2      	ldrb	r2, [r2, #31]
   1002c:	b25b      	sxtb	r3, r3
   1002e:	4eaa      	ldr	r6, [pc, #680]	; (102d8 <Radio_WriteConfiguration+0x2d0>)
   10030:	4daa      	ldr	r5, [pc, #680]	; (102dc <Radio_WriteConfiguration+0x2d4>)
   10032:	2a00      	cmp	r2, #0
   10034:	d000      	beq.n	10038 <Radio_WriteConfiguration+0x30>
   10036:	e0fc      	b.n	10232 <Radio_WriteConfiguration+0x22a>
   10038:	1c1f      	adds	r7, r3, #0
   1003a:	2b0f      	cmp	r3, #15
   1003c:	dc00      	bgt.n	10040 <Radio_WriteConfiguration+0x38>
   1003e:	e0ec      	b.n	1021a <Radio_WriteConfiguration+0x212>
   10040:	270f      	movs	r7, #15
   10042:	b27b      	sxtb	r3, r7
   10044:	204d      	movs	r0, #77	; 0x4d
   10046:	9301      	str	r3, [sp, #4]
   10048:	47b0      	blx	r6
   1004a:	21f8      	movs	r1, #248	; 0xf8
   1004c:	4008      	ands	r0, r1
   1004e:	39f4      	subs	r1, #244	; 0xf4
   10050:	4301      	orrs	r1, r0
   10052:	204d      	movs	r0, #77	; 0x4d
   10054:	47a8      	blx	r5
   10056:	b27b      	sxtb	r3, r7
   10058:	2b00      	cmp	r3, #0
   1005a:	db00      	blt.n	1005e <Radio_WriteConfiguration+0x56>
   1005c:	e0e4      	b.n	10228 <Radio_WriteConfiguration+0x220>
   1005e:	3703      	adds	r7, #3
   10060:	b2f9      	uxtb	r1, r7
   10062:	2720      	movs	r7, #32
   10064:	4339      	orrs	r1, r7
   10066:	2009      	movs	r0, #9
   10068:	47a8      	blx	r5
   1006a:	0023      	movs	r3, r4
   1006c:	3334      	adds	r3, #52	; 0x34
   1006e:	781f      	ldrb	r7, [r3, #0]
   10070:	2f01      	cmp	r7, #1
   10072:	d000      	beq.n	10076 <Radio_WriteConfiguration+0x6e>
   10074:	e144      	b.n	10300 <Radio_WriteConfiguration+0x2f8>
   10076:	7e21      	ldrb	r1, [r4, #24]
   10078:	2039      	movs	r0, #57	; 0x39
   1007a:	47a8      	blx	r5
   1007c:	4b98      	ldr	r3, [pc, #608]	; (102e0 <Radio_WriteConfiguration+0x2d8>)
   1007e:	201d      	movs	r0, #29
   10080:	7819      	ldrb	r1, [r3, #0]
   10082:	0023      	movs	r3, r4
   10084:	3333      	adds	r3, #51	; 0x33
   10086:	781b      	ldrb	r3, [r3, #0]
   10088:	0109      	lsls	r1, r1, #4
   1008a:	005b      	lsls	r3, r3, #1
   1008c:	4319      	orrs	r1, r3
   1008e:	1de3      	adds	r3, r4, #7
   10090:	7fdb      	ldrb	r3, [r3, #31]
   10092:	401f      	ands	r7, r3
   10094:	4339      	orrs	r1, r7
   10096:	b2c9      	uxtb	r1, r1
   10098:	47a8      	blx	r5
   1009a:	1d23      	adds	r3, r4, #4
   1009c:	7fd9      	ldrb	r1, [r3, #31]
   1009e:	2304      	movs	r3, #4
   100a0:	0089      	lsls	r1, r1, #2
   100a2:	4019      	ands	r1, r3
   100a4:	0023      	movs	r3, r4
   100a6:	3335      	adds	r3, #53	; 0x35
   100a8:	781b      	ldrb	r3, [r3, #0]
   100aa:	201e      	movs	r0, #30
   100ac:	011b      	lsls	r3, r3, #4
   100ae:	4319      	orrs	r1, r3
   100b0:	9b02      	ldr	r3, [sp, #8]
   100b2:	059b      	lsls	r3, r3, #22
   100b4:	0f9b      	lsrs	r3, r3, #30
   100b6:	4319      	orrs	r1, r3
   100b8:	b2c9      	uxtb	r1, r1
   100ba:	47a8      	blx	r5
   100bc:	2300      	movs	r3, #0
   100be:	8ae1      	ldrh	r1, [r4, #22]
   100c0:	4299      	cmp	r1, r3
   100c2:	d011      	beq.n	100e8 <Radio_WriteConfiguration+0xe0>
   100c4:	4a86      	ldr	r2, [pc, #536]	; (102e0 <Radio_WriteConfiguration+0x2d8>)
   100c6:	7812      	ldrb	r2, [r2, #0]
   100c8:	2a08      	cmp	r2, #8
   100ca:	d100      	bne.n	100ce <Radio_WriteConfiguration+0xc6>
   100cc:	e0e4      	b.n	10298 <Radio_WriteConfiguration+0x290>
   100ce:	2a09      	cmp	r2, #9
   100d0:	d100      	bne.n	100d4 <Radio_WriteConfiguration+0xcc>
   100d2:	e0e3      	b.n	1029c <Radio_WriteConfiguration+0x294>
   100d4:	2a07      	cmp	r2, #7
   100d6:	d000      	beq.n	100da <Radio_WriteConfiguration+0xd2>
   100d8:	e0e3      	b.n	102a2 <Radio_WriteConfiguration+0x29a>
   100da:	337d      	adds	r3, #125	; 0x7d
   100dc:	4359      	muls	r1, r3
   100de:	0023      	movs	r3, r4
   100e0:	3335      	adds	r3, #53	; 0x35
   100e2:	781b      	ldrb	r3, [r3, #0]
   100e4:	40d9      	lsrs	r1, r3
   100e6:	000b      	movs	r3, r1
   100e8:	b2d9      	uxtb	r1, r3
   100ea:	2024      	movs	r0, #36	; 0x24
   100ec:	4d7b      	ldr	r5, [pc, #492]	; (102dc <Radio_WriteConfiguration+0x2d4>)
   100ee:	47a8      	blx	r5
   100f0:	466b      	mov	r3, sp
   100f2:	201f      	movs	r0, #31
   100f4:	7a19      	ldrb	r1, [r3, #8]
   100f6:	47a8      	blx	r5
   100f8:	2026      	movs	r0, #38	; 0x26
   100fa:	47b0      	blx	r6
   100fc:	0023      	movs	r3, r4
   100fe:	3335      	adds	r3, #53	; 0x35
   10100:	781b      	ldrb	r3, [r3, #0]
   10102:	2b0c      	cmp	r3, #12
   10104:	d105      	bne.n	10112 <Radio_WriteConfiguration+0x10a>
   10106:	0023      	movs	r3, r4
   10108:	3336      	adds	r3, #54	; 0x36
   1010a:	781b      	ldrb	r3, [r3, #0]
   1010c:	3b07      	subs	r3, #7
   1010e:	2b01      	cmp	r3, #1
   10110:	d906      	bls.n	10120 <Radio_WriteConfiguration+0x118>
   10112:	6b62      	ldr	r2, [r4, #52]	; 0x34
   10114:	4b73      	ldr	r3, [pc, #460]	; (102e4 <Radio_WriteConfiguration+0x2dc>)
   10116:	4013      	ands	r3, r2
   10118:	4a73      	ldr	r2, [pc, #460]	; (102e8 <Radio_WriteConfiguration+0x2e0>)
   1011a:	4293      	cmp	r3, r2
   1011c:	d000      	beq.n	10120 <Radio_WriteConfiguration+0x118>
   1011e:	e0c2      	b.n	102a6 <Radio_WriteConfiguration+0x29e>
   10120:	2108      	movs	r1, #8
   10122:	4308      	orrs	r0, r1
   10124:	b2c0      	uxtb	r0, r0
   10126:	2104      	movs	r1, #4
   10128:	4301      	orrs	r1, r0
   1012a:	2026      	movs	r0, #38	; 0x26
   1012c:	47a8      	blx	r5
   1012e:	2031      	movs	r0, #49	; 0x31
   10130:	47b0      	blx	r6
   10132:	21f8      	movs	r1, #248	; 0xf8
   10134:	4008      	ands	r0, r1
   10136:	39f5      	subs	r1, #245	; 0xf5
   10138:	4301      	orrs	r1, r0
   1013a:	2031      	movs	r0, #49	; 0x31
   1013c:	47a8      	blx	r5
   1013e:	210a      	movs	r1, #10
   10140:	2037      	movs	r0, #55	; 0x37
   10142:	47a8      	blx	r5
   10144:	0023      	movs	r3, r4
   10146:	3331      	adds	r3, #49	; 0x31
   10148:	781b      	ldrb	r3, [r3, #0]
   1014a:	2b12      	cmp	r3, #18
   1014c:	d11e      	bne.n	1018c <Radio_WriteConfiguration+0x184>
   1014e:	0023      	movs	r3, r4
   10150:	3336      	adds	r3, #54	; 0x36
   10152:	781b      	ldrb	r3, [r3, #0]
   10154:	3b07      	subs	r3, #7
   10156:	2b01      	cmp	r3, #1
   10158:	d80b      	bhi.n	10172 <Radio_WriteConfiguration+0x16a>
   1015a:	2031      	movs	r0, #49	; 0x31
   1015c:	47b0      	blx	r6
   1015e:	217f      	movs	r1, #127	; 0x7f
   10160:	4001      	ands	r1, r0
   10162:	2031      	movs	r0, #49	; 0x31
   10164:	47a8      	blx	r5
   10166:	2140      	movs	r1, #64	; 0x40
   10168:	202f      	movs	r0, #47	; 0x2f
   1016a:	47a8      	blx	r5
   1016c:	2100      	movs	r1, #0
   1016e:	2030      	movs	r0, #48	; 0x30
   10170:	47a8      	blx	r5
   10172:	0023      	movs	r3, r4
   10174:	3336      	adds	r3, #54	; 0x36
   10176:	781b      	ldrb	r3, [r3, #0]
   10178:	2b09      	cmp	r3, #9
   1017a:	d107      	bne.n	1018c <Radio_WriteConfiguration+0x184>
   1017c:	2031      	movs	r0, #49	; 0x31
   1017e:	47b0      	blx	r6
   10180:	2180      	movs	r1, #128	; 0x80
   10182:	4249      	negs	r1, r1
   10184:	4301      	orrs	r1, r0
   10186:	b2c9      	uxtb	r1, r1
   10188:	2031      	movs	r0, #49	; 0x31
   1018a:	47a8      	blx	r5
   1018c:	2033      	movs	r0, #51	; 0x33
   1018e:	47b0      	blx	r6
   10190:	1da3      	adds	r3, r4, #6
   10192:	7fd9      	ldrb	r1, [r3, #31]
   10194:	2340      	movs	r3, #64	; 0x40
   10196:	0189      	lsls	r1, r1, #6
   10198:	4398      	bics	r0, r3
   1019a:	4019      	ands	r1, r3
   1019c:	4301      	orrs	r1, r0
   1019e:	b2c9      	uxtb	r1, r1
   101a0:	2033      	movs	r0, #51	; 0x33
   101a2:	47a8      	blx	r5
   101a4:	8aa1      	ldrh	r1, [r4, #20]
   101a6:	2020      	movs	r0, #32
   101a8:	0a09      	lsrs	r1, r1, #8
   101aa:	47a8      	blx	r5
   101ac:	7d21      	ldrb	r1, [r4, #20]
   101ae:	2021      	movs	r0, #33	; 0x21
   101b0:	47a8      	blx	r5
   101b2:	2100      	movs	r1, #0
   101b4:	200d      	movs	r0, #13
   101b6:	47a8      	blx	r5
   101b8:	2100      	movs	r1, #0
   101ba:	200e      	movs	r0, #14
   101bc:	47a8      	blx	r5
   101be:	2100      	movs	r1, #0
   101c0:	200f      	movs	r0, #15
   101c2:	47a8      	blx	r5
   101c4:	0023      	movs	r3, r4
   101c6:	3331      	adds	r3, #49	; 0x31
   101c8:	781b      	ldrb	r3, [r3, #0]
   101ca:	2b12      	cmp	r3, #18
   101cc:	d120      	bne.n	10210 <Radio_WriteConfiguration+0x208>
   101ce:	0023      	movs	r3, r4
   101d0:	3336      	adds	r3, #54	; 0x36
   101d2:	781b      	ldrb	r3, [r3, #0]
   101d4:	2b09      	cmp	r3, #9
   101d6:	d000      	beq.n	101da <Radio_WriteConfiguration+0x1d2>
   101d8:	e072      	b.n	102c0 <Radio_WriteConfiguration+0x2b8>
   101da:	4a44      	ldr	r2, [pc, #272]	; (102ec <Radio_WriteConfiguration+0x2e4>)
   101dc:	6823      	ldr	r3, [r4, #0]
   101de:	1899      	adds	r1, r3, r2
   101e0:	4a43      	ldr	r2, [pc, #268]	; (102f0 <Radio_WriteConfiguration+0x2e8>)
   101e2:	4291      	cmp	r1, r2
   101e4:	d862      	bhi.n	102ac <Radio_WriteConfiguration+0x2a4>
   101e6:	2102      	movs	r1, #2
   101e8:	2036      	movs	r0, #54	; 0x36
   101ea:	47a8      	blx	r5
   101ec:	2164      	movs	r1, #100	; 0x64
   101ee:	203a      	movs	r0, #58	; 0x3a
   101f0:	47a8      	blx	r5
   101f2:	0023      	movs	r3, r4
   101f4:	3336      	adds	r3, #54	; 0x36
   101f6:	781b      	ldrb	r3, [r3, #0]
   101f8:	2165      	movs	r1, #101	; 0x65
   101fa:	203a      	movs	r0, #58	; 0x3a
   101fc:	2b09      	cmp	r3, #9
   101fe:	d162      	bne.n	102c6 <Radio_WriteConfiguration+0x2be>
   10200:	3406      	adds	r4, #6
   10202:	7fe3      	ldrb	r3, [r4, #31]
   10204:	2b01      	cmp	r3, #1
   10206:	d15e      	bne.n	102c6 <Radio_WriteConfiguration+0x2be>
   10208:	47a8      	blx	r5
   1020a:	2119      	movs	r1, #25
   1020c:	203b      	movs	r0, #59	; 0x3b
   1020e:	47a8      	blx	r5
   10210:	21ff      	movs	r1, #255	; 0xff
   10212:	2012      	movs	r0, #18
   10214:	47a8      	blx	r5
   10216:	b005      	add	sp, #20
   10218:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1021a:	b25b      	sxtb	r3, r3
   1021c:	3303      	adds	r3, #3
   1021e:	db00      	blt.n	10222 <Radio_WriteConfiguration+0x21a>
   10220:	e70f      	b.n	10042 <Radio_WriteConfiguration+0x3a>
   10222:	4b34      	ldr	r3, [pc, #208]	; (102f4 <Radio_WriteConfiguration+0x2ec>)
   10224:	781f      	ldrb	r7, [r3, #0]
   10226:	e70c      	b.n	10042 <Radio_WriteConfiguration+0x3a>
   10228:	2170      	movs	r1, #112	; 0x70
   1022a:	9b01      	ldr	r3, [sp, #4]
   1022c:	4319      	orrs	r1, r3
   1022e:	b2c9      	uxtb	r1, r1
   10230:	e719      	b.n	10066 <Radio_WriteConfiguration+0x5e>
   10232:	2b01      	cmp	r3, #1
   10234:	dd07      	ble.n	10246 <Radio_WriteConfiguration+0x23e>
   10236:	2714      	movs	r7, #20
   10238:	2b13      	cmp	r3, #19
   1023a:	dc06      	bgt.n	1024a <Radio_WriteConfiguration+0x242>
   1023c:	1c1f      	adds	r7, r3, #0
   1023e:	2b11      	cmp	r3, #17
   10240:	dd02      	ble.n	10248 <Radio_WriteConfiguration+0x240>
   10242:	2711      	movs	r7, #17
   10244:	e000      	b.n	10248 <Radio_WriteConfiguration+0x240>
   10246:	2702      	movs	r7, #2
   10248:	b27f      	sxtb	r7, r7
   1024a:	200b      	movs	r0, #11
   1024c:	47b0      	blx	r6
   1024e:	9003      	str	r0, [sp, #12]
   10250:	204d      	movs	r0, #77	; 0x4d
   10252:	47b0      	blx	r6
   10254:	2307      	movs	r3, #7
   10256:	4398      	bics	r0, r3
   10258:	b2c1      	uxtb	r1, r0
   1025a:	2f14      	cmp	r7, #20
   1025c:	d112      	bne.n	10284 <Radio_WriteConfiguration+0x27c>
   1025e:	4319      	orrs	r1, r3
   10260:	9b03      	ldr	r3, [sp, #12]
   10262:	37cb      	adds	r7, #203	; 0xcb
   10264:	403b      	ands	r3, r7
   10266:	001f      	movs	r7, r3
   10268:	230f      	movs	r3, #15
   1026a:	9301      	str	r3, [sp, #4]
   1026c:	204d      	movs	r0, #77	; 0x4d
   1026e:	47a8      	blx	r5
   10270:	2180      	movs	r1, #128	; 0x80
   10272:	9b01      	ldr	r3, [sp, #4]
   10274:	4249      	negs	r1, r1
   10276:	4319      	orrs	r1, r3
   10278:	b2c9      	uxtb	r1, r1
   1027a:	2009      	movs	r0, #9
   1027c:	47a8      	blx	r5
   1027e:	0039      	movs	r1, r7
   10280:	200b      	movs	r0, #11
   10282:	e6f1      	b.n	10068 <Radio_WriteConfiguration+0x60>
   10284:	3f02      	subs	r7, #2
   10286:	b27b      	sxtb	r3, r7
   10288:	2720      	movs	r7, #32
   1028a:	2004      	movs	r0, #4
   1028c:	9301      	str	r3, [sp, #4]
   1028e:	9b03      	ldr	r3, [sp, #12]
   10290:	4301      	orrs	r1, r0
   10292:	431f      	orrs	r7, r3
   10294:	b2ff      	uxtb	r7, r7
   10296:	e7e9      	b.n	1026c <Radio_WriteConfiguration+0x264>
   10298:	23fa      	movs	r3, #250	; 0xfa
   1029a:	e71f      	b.n	100dc <Radio_WriteConfiguration+0xd4>
   1029c:	23fa      	movs	r3, #250	; 0xfa
   1029e:	005b      	lsls	r3, r3, #1
   102a0:	e71c      	b.n	100dc <Radio_WriteConfiguration+0xd4>
   102a2:	0019      	movs	r1, r3
   102a4:	e71b      	b.n	100de <Radio_WriteConfiguration+0xd6>
   102a6:	21f7      	movs	r1, #247	; 0xf7
   102a8:	4008      	ands	r0, r1
   102aa:	e73c      	b.n	10126 <Radio_WriteConfiguration+0x11e>
   102ac:	4a12      	ldr	r2, [pc, #72]	; (102f8 <Radio_WriteConfiguration+0x2f0>)
   102ae:	189b      	adds	r3, r3, r2
   102b0:	4a12      	ldr	r2, [pc, #72]	; (102fc <Radio_WriteConfiguration+0x2f4>)
   102b2:	4293      	cmp	r3, r2
   102b4:	d804      	bhi.n	102c0 <Radio_WriteConfiguration+0x2b8>
   102b6:	2102      	movs	r1, #2
   102b8:	2036      	movs	r0, #54	; 0x36
   102ba:	47a8      	blx	r5
   102bc:	217f      	movs	r1, #127	; 0x7f
   102be:	e796      	b.n	101ee <Radio_WriteConfiguration+0x1e6>
   102c0:	2103      	movs	r1, #3
   102c2:	2036      	movs	r0, #54	; 0x36
   102c4:	e794      	b.n	101f0 <Radio_WriteConfiguration+0x1e8>
   102c6:	47a8      	blx	r5
   102c8:	211d      	movs	r1, #29
   102ca:	e79f      	b.n	1020c <Radio_WriteConfiguration+0x204>
   102cc:	20001398 	.word	0x20001398
   102d0:	00009c6d 	.word	0x00009c6d
   102d4:	0000ffc1 	.word	0x0000ffc1
   102d8:	00003bc5 	.word	0x00003bc5
   102dc:	00003b9d 	.word	0x00003b9d
   102e0:	200013ce 	.word	0x200013ce
   102e4:	00ffff00 	.word	0x00ffff00
   102e8:	00070b00 	.word	0x00070b00
   102ec:	cc9eec80 	.word	0xcc9eec80
   102f0:	096ae380 	.word	0x096ae380
   102f4:	0001ad6c 	.word	0x0001ad6c
   102f8:	e78fe580 	.word	0xe78fe580
   102fc:	06dac2c0 	.word	0x06dac2c0
   10300:	6863      	ldr	r3, [r4, #4]
   10302:	492c      	ldr	r1, [pc, #176]	; (103b4 <Radio_WriteConfiguration+0x3ac>)
   10304:	0218      	lsls	r0, r3, #8
   10306:	4b2c      	ldr	r3, [pc, #176]	; (103b8 <Radio_WriteConfiguration+0x3b0>)
   10308:	4798      	blx	r3
   1030a:	0007      	movs	r7, r0
   1030c:	0a01      	lsrs	r1, r0, #8
   1030e:	b2c9      	uxtb	r1, r1
   10310:	2004      	movs	r0, #4
   10312:	47a8      	blx	r5
   10314:	b2f9      	uxtb	r1, r7
   10316:	2005      	movs	r0, #5
   10318:	47a8      	blx	r5
   1031a:	4b27      	ldr	r3, [pc, #156]	; (103b8 <Radio_WriteConfiguration+0x3b0>)
   1031c:	68a1      	ldr	r1, [r4, #8]
   1031e:	4827      	ldr	r0, [pc, #156]	; (103bc <Radio_WriteConfiguration+0x3b4>)
   10320:	4798      	blx	r3
   10322:	0007      	movs	r7, r0
   10324:	0a01      	lsrs	r1, r0, #8
   10326:	b2c9      	uxtb	r1, r1
   10328:	2002      	movs	r0, #2
   1032a:	47a8      	blx	r5
   1032c:	b2f9      	uxtb	r1, r7
   1032e:	2003      	movs	r0, #3
   10330:	47a8      	blx	r5
   10332:	2100      	movs	r1, #0
   10334:	205d      	movs	r0, #93	; 0x5d
   10336:	47a8      	blx	r5
   10338:	8aa1      	ldrh	r1, [r4, #20]
   1033a:	2025      	movs	r0, #37	; 0x25
   1033c:	0a09      	lsrs	r1, r1, #8
   1033e:	47a8      	blx	r5
   10340:	7d21      	ldrb	r1, [r4, #20]
   10342:	2026      	movs	r0, #38	; 0x26
   10344:	47a8      	blx	r5
   10346:	219e      	movs	r1, #158	; 0x9e
   10348:	200d      	movs	r0, #13
   1034a:	47a8      	blx	r5
   1034c:	21bf      	movs	r1, #191	; 0xbf
   1034e:	2035      	movs	r0, #53	; 0x35
   10350:	47a8      	blx	r5
   10352:	200a      	movs	r0, #10
   10354:	47b0      	blx	r6
   10356:	0023      	movs	r3, r4
   10358:	3337      	adds	r3, #55	; 0x37
   1035a:	7819      	ldrb	r1, [r3, #0]
   1035c:	2360      	movs	r3, #96	; 0x60
   1035e:	0149      	lsls	r1, r1, #5
   10360:	4398      	bics	r0, r3
   10362:	4301      	orrs	r1, r0
   10364:	b2c9      	uxtb	r1, r1
   10366:	200a      	movs	r0, #10
   10368:	47a8      	blx	r5
   1036a:	1d23      	adds	r3, r4, #4
   1036c:	7fdb      	ldrb	r3, [r3, #31]
   1036e:	21c0      	movs	r1, #192	; 0xc0
   10370:	2b00      	cmp	r3, #0
   10372:	d000      	beq.n	10376 <Radio_WriteConfiguration+0x36e>
   10374:	3110      	adds	r1, #16
   10376:	2030      	movs	r0, #48	; 0x30
   10378:	47a8      	blx	r5
   1037a:	2600      	movs	r6, #0
   1037c:	1ca3      	adds	r3, r4, #2
   1037e:	7fd9      	ldrb	r1, [r3, #31]
   10380:	428e      	cmp	r6, r1
   10382:	d30d      	bcc.n	103a0 <Radio_WriteConfiguration+0x398>
   10384:	2900      	cmp	r1, #0
   10386:	d003      	beq.n	10390 <Radio_WriteConfiguration+0x388>
   10388:	2310      	movs	r3, #16
   1038a:	3901      	subs	r1, #1
   1038c:	4319      	orrs	r1, r3
   1038e:	b2c9      	uxtb	r1, r1
   10390:	2027      	movs	r0, #39	; 0x27
   10392:	47a8      	blx	r5
   10394:	21ff      	movs	r1, #255	; 0xff
   10396:	203e      	movs	r0, #62	; 0x3e
   10398:	47a8      	blx	r5
   1039a:	21ff      	movs	r1, #255	; 0xff
   1039c:	203f      	movs	r0, #63	; 0x3f
   1039e:	e739      	b.n	10214 <Radio_WriteConfiguration+0x20c>
   103a0:	0030      	movs	r0, r6
   103a2:	19a3      	adds	r3, r4, r6
   103a4:	3028      	adds	r0, #40	; 0x28
   103a6:	7e59      	ldrb	r1, [r3, #25]
   103a8:	b2c0      	uxtb	r0, r0
   103aa:	3601      	adds	r6, #1
   103ac:	47a8      	blx	r5
   103ae:	b2f6      	uxtb	r6, r6
   103b0:	e7e4      	b.n	1037c <Radio_WriteConfiguration+0x374>
   103b2:	46c0      	nop			; (mov r8, r8)
   103b4:	00003d09 	.word	0x00003d09
   103b8:	00011769 	.word	0x00011769
   103bc:	01e84800 	.word	0x01e84800

000103c0 <RADIO_getMappingAndOpmode>:
   103c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   103c2:	0006      	movs	r6, r0
   103c4:	4d06      	ldr	r5, [pc, #24]	; (103e0 <RADIO_getMappingAndOpmode+0x20>)
   103c6:	2040      	movs	r0, #64	; 0x40
   103c8:	001f      	movs	r7, r3
   103ca:	0014      	movs	r4, r2
   103cc:	9101      	str	r1, [sp, #4]
   103ce:	47a8      	blx	r5
   103d0:	4004      	ands	r4, r0
   103d2:	413c      	asrs	r4, r7
   103d4:	2001      	movs	r0, #1
   103d6:	7034      	strb	r4, [r6, #0]
   103d8:	47a8      	blx	r5
   103da:	9b01      	ldr	r3, [sp, #4]
   103dc:	7018      	strb	r0, [r3, #0]
   103de:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   103e0:	00003bc5 	.word	0x00003bc5

000103e4 <RADIO_UnhandledInterrupt.part.0>:
   103e4:	b510      	push	{r4, lr}
   103e6:	21ff      	movs	r1, #255	; 0xff
   103e8:	2012      	movs	r0, #18
   103ea:	4b01      	ldr	r3, [pc, #4]	; (103f0 <RADIO_UnhandledInterrupt.part.0+0xc>)
   103ec:	4798      	blx	r3
   103ee:	bd10      	pop	{r4, pc}
   103f0:	00003b9d 	.word	0x00003b9d

000103f4 <RADIO_UnhandledInterrupt>:
   103f4:	b510      	push	{r4, lr}
   103f6:	2801      	cmp	r0, #1
   103f8:	d102      	bne.n	10400 <RADIO_UnhandledInterrupt+0xc>
   103fa:	4b05      	ldr	r3, [pc, #20]	; (10410 <RADIO_UnhandledInterrupt+0x1c>)
   103fc:	4798      	blx	r3
   103fe:	bd10      	pop	{r4, pc}
   10400:	21ff      	movs	r1, #255	; 0xff
   10402:	203e      	movs	r0, #62	; 0x3e
   10404:	4c03      	ldr	r4, [pc, #12]	; (10414 <RADIO_UnhandledInterrupt+0x20>)
   10406:	47a0      	blx	r4
   10408:	21ff      	movs	r1, #255	; 0xff
   1040a:	203f      	movs	r0, #63	; 0x3f
   1040c:	47a0      	blx	r4
   1040e:	e7f6      	b.n	103fe <RADIO_UnhandledInterrupt+0xa>
   10410:	000103e5 	.word	0x000103e5
   10414:	00003b9d 	.word	0x00003b9d

00010418 <RADIO_DIO0>:
   10418:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1041a:	466b      	mov	r3, sp
   1041c:	1ddc      	adds	r4, r3, #7
   1041e:	1d9d      	adds	r5, r3, #6
   10420:	22c0      	movs	r2, #192	; 0xc0
   10422:	2306      	movs	r3, #6
   10424:	0028      	movs	r0, r5
   10426:	0021      	movs	r1, r4
   10428:	4e12      	ldr	r6, [pc, #72]	; (10474 <RADIO_DIO0+0x5c>)
   1042a:	47b0      	blx	r6
   1042c:	7823      	ldrb	r3, [r4, #0]
   1042e:	7828      	ldrb	r0, [r5, #0]
   10430:	b25a      	sxtb	r2, r3
   10432:	b2c0      	uxtb	r0, r0
   10434:	2a00      	cmp	r2, #0
   10436:	da0b      	bge.n	10450 <RADIO_DIO0+0x38>
   10438:	2800      	cmp	r0, #0
   1043a:	d004      	beq.n	10446 <RADIO_DIO0+0x2e>
   1043c:	2801      	cmp	r0, #1
   1043e:	d005      	beq.n	1044c <RADIO_DIO0+0x34>
   10440:	4b0d      	ldr	r3, [pc, #52]	; (10478 <RADIO_DIO0+0x60>)
   10442:	4798      	blx	r3
   10444:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   10446:	4b0d      	ldr	r3, [pc, #52]	; (1047c <RADIO_DIO0+0x64>)
   10448:	4798      	blx	r3
   1044a:	e7fb      	b.n	10444 <RADIO_DIO0+0x2c>
   1044c:	4b0c      	ldr	r3, [pc, #48]	; (10480 <RADIO_DIO0+0x68>)
   1044e:	e7fb      	b.n	10448 <RADIO_DIO0+0x30>
   10450:	2800      	cmp	r0, #0
   10452:	d10a      	bne.n	1046a <RADIO_DIO0+0x52>
   10454:	2207      	movs	r2, #7
   10456:	4013      	ands	r3, r2
   10458:	7023      	strb	r3, [r4, #0]
   1045a:	2b03      	cmp	r3, #3
   1045c:	d101      	bne.n	10462 <RADIO_DIO0+0x4a>
   1045e:	4b09      	ldr	r3, [pc, #36]	; (10484 <RADIO_DIO0+0x6c>)
   10460:	e7f2      	b.n	10448 <RADIO_DIO0+0x30>
   10462:	2b05      	cmp	r3, #5
   10464:	d102      	bne.n	1046c <RADIO_DIO0+0x54>
   10466:	4b08      	ldr	r3, [pc, #32]	; (10488 <RADIO_DIO0+0x70>)
   10468:	e7ee      	b.n	10448 <RADIO_DIO0+0x30>
   1046a:	2000      	movs	r0, #0
   1046c:	4b07      	ldr	r3, [pc, #28]	; (1048c <RADIO_DIO0+0x74>)
   1046e:	4798      	blx	r3
   10470:	e7e8      	b.n	10444 <RADIO_DIO0+0x2c>
   10472:	46c0      	nop			; (mov r8, r8)
   10474:	000103c1 	.word	0x000103c1
   10478:	000103e5 	.word	0x000103e5
   1047c:	00010b9d 	.word	0x00010b9d
   10480:	00010aa1 	.word	0x00010aa1
   10484:	00010b1d 	.word	0x00010b1d
   10488:	00010c19 	.word	0x00010c19
   1048c:	000103f5 	.word	0x000103f5

00010490 <RADIO_DIO1>:
   10490:	b573      	push	{r0, r1, r4, r5, r6, lr}
   10492:	466b      	mov	r3, sp
   10494:	1ddc      	adds	r4, r3, #7
   10496:	1d9d      	adds	r5, r3, #6
   10498:	2230      	movs	r2, #48	; 0x30
   1049a:	2304      	movs	r3, #4
   1049c:	0021      	movs	r1, r4
   1049e:	0028      	movs	r0, r5
   104a0:	4e11      	ldr	r6, [pc, #68]	; (104e8 <RADIO_DIO1+0x58>)
   104a2:	47b0      	blx	r6
   104a4:	7822      	ldrb	r2, [r4, #0]
   104a6:	782b      	ldrb	r3, [r5, #0]
   104a8:	b251      	sxtb	r1, r2
   104aa:	2900      	cmp	r1, #0
   104ac:	da0c      	bge.n	104c8 <RADIO_DIO1+0x38>
   104ae:	b2db      	uxtb	r3, r3
   104b0:	2b00      	cmp	r3, #0
   104b2:	d004      	beq.n	104be <RADIO_DIO1+0x2e>
   104b4:	2b01      	cmp	r3, #1
   104b6:	d005      	beq.n	104c4 <RADIO_DIO1+0x34>
   104b8:	4b0c      	ldr	r3, [pc, #48]	; (104ec <RADIO_DIO1+0x5c>)
   104ba:	4798      	blx	r3
   104bc:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   104be:	4b0c      	ldr	r3, [pc, #48]	; (104f0 <RADIO_DIO1+0x60>)
   104c0:	4798      	blx	r3
   104c2:	e7fb      	b.n	104bc <RADIO_DIO1+0x2c>
   104c4:	4b0b      	ldr	r3, [pc, #44]	; (104f4 <RADIO_DIO1+0x64>)
   104c6:	e7fb      	b.n	104c0 <RADIO_DIO1+0x30>
   104c8:	2107      	movs	r1, #7
   104ca:	b2db      	uxtb	r3, r3
   104cc:	400a      	ands	r2, r1
   104ce:	7022      	strb	r2, [r4, #0]
   104d0:	2b00      	cmp	r3, #0
   104d2:	d005      	beq.n	104e0 <RADIO_DIO1+0x50>
   104d4:	2b01      	cmp	r3, #1
   104d6:	d1f1      	bne.n	104bc <RADIO_DIO1+0x2c>
   104d8:	2a03      	cmp	r2, #3
   104da:	d1ef      	bne.n	104bc <RADIO_DIO1+0x2c>
   104dc:	4b06      	ldr	r3, [pc, #24]	; (104f8 <RADIO_DIO1+0x68>)
   104de:	e7ef      	b.n	104c0 <RADIO_DIO1+0x30>
   104e0:	4b06      	ldr	r3, [pc, #24]	; (104fc <RADIO_DIO1+0x6c>)
   104e2:	2a05      	cmp	r2, #5
   104e4:	d1ea      	bne.n	104bc <RADIO_DIO1+0x2c>
   104e6:	e7eb      	b.n	104c0 <RADIO_DIO1+0x30>
   104e8:	000103c1 	.word	0x000103c1
   104ec:	000103e5 	.word	0x000103e5
   104f0:	00010a25 	.word	0x00010a25
   104f4:	00009d51 	.word	0x00009d51
   104f8:	0001084d 	.word	0x0001084d
   104fc:	000107b1 	.word	0x000107b1

00010500 <RADIO_DIO2>:
   10500:	b573      	push	{r0, r1, r4, r5, r6, lr}
   10502:	466b      	mov	r3, sp
   10504:	1ddc      	adds	r4, r3, #7
   10506:	1d9d      	adds	r5, r3, #6
   10508:	220c      	movs	r2, #12
   1050a:	2302      	movs	r3, #2
   1050c:	0021      	movs	r1, r4
   1050e:	0028      	movs	r0, r5
   10510:	4e0b      	ldr	r6, [pc, #44]	; (10540 <RADIO_DIO2+0x40>)
   10512:	47b0      	blx	r6
   10514:	7823      	ldrb	r3, [r4, #0]
   10516:	782a      	ldrb	r2, [r5, #0]
   10518:	b259      	sxtb	r1, r3
   1051a:	2900      	cmp	r1, #0
   1051c:	da05      	bge.n	1052a <RADIO_DIO2+0x2a>
   1051e:	4b09      	ldr	r3, [pc, #36]	; (10544 <RADIO_DIO2+0x44>)
   10520:	2a02      	cmp	r2, #2
   10522:	d90a      	bls.n	1053a <RADIO_DIO2+0x3a>
   10524:	4b08      	ldr	r3, [pc, #32]	; (10548 <RADIO_DIO2+0x48>)
   10526:	4798      	blx	r3
   10528:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   1052a:	2107      	movs	r1, #7
   1052c:	400b      	ands	r3, r1
   1052e:	7023      	strb	r3, [r4, #0]
   10530:	2a03      	cmp	r2, #3
   10532:	d1f9      	bne.n	10528 <RADIO_DIO2+0x28>
   10534:	2b05      	cmp	r3, #5
   10536:	d1f7      	bne.n	10528 <RADIO_DIO2+0x28>
   10538:	4b04      	ldr	r3, [pc, #16]	; (1054c <RADIO_DIO2+0x4c>)
   1053a:	4798      	blx	r3
   1053c:	e7f4      	b.n	10528 <RADIO_DIO2+0x28>
   1053e:	46c0      	nop			; (mov r8, r8)
   10540:	000103c1 	.word	0x000103c1
   10544:	00009d51 	.word	0x00009d51
   10548:	000103e5 	.word	0x000103e5
   1054c:	00010781 	.word	0x00010781

00010550 <RADIO_DIO3>:
   10550:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10552:	466b      	mov	r3, sp
   10554:	4668      	mov	r0, sp
   10556:	1ddc      	adds	r4, r3, #7
   10558:	2203      	movs	r2, #3
   1055a:	2300      	movs	r3, #0
   1055c:	0021      	movs	r1, r4
   1055e:	3006      	adds	r0, #6
   10560:	4d03      	ldr	r5, [pc, #12]	; (10570 <RADIO_DIO3+0x20>)
   10562:	47a8      	blx	r5
   10564:	7823      	ldrb	r3, [r4, #0]
   10566:	2b7f      	cmp	r3, #127	; 0x7f
   10568:	d901      	bls.n	1056e <RADIO_DIO3+0x1e>
   1056a:	4b02      	ldr	r3, [pc, #8]	; (10574 <RADIO_DIO3+0x24>)
   1056c:	4798      	blx	r3
   1056e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   10570:	000103c1 	.word	0x000103c1
   10574:	000103e5 	.word	0x000103e5

00010578 <RADIO_DIO4>:
   10578:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1057a:	466b      	mov	r3, sp
   1057c:	4668      	mov	r0, sp
   1057e:	1ddc      	adds	r4, r3, #7
   10580:	2306      	movs	r3, #6
   10582:	22c0      	movs	r2, #192	; 0xc0
   10584:	18c0      	adds	r0, r0, r3
   10586:	0021      	movs	r1, r4
   10588:	4d03      	ldr	r5, [pc, #12]	; (10598 <RADIO_DIO4+0x20>)
   1058a:	47a8      	blx	r5
   1058c:	7823      	ldrb	r3, [r4, #0]
   1058e:	2b7f      	cmp	r3, #127	; 0x7f
   10590:	d901      	bls.n	10596 <RADIO_DIO4+0x1e>
   10592:	4b02      	ldr	r3, [pc, #8]	; (1059c <RADIO_DIO4+0x24>)
   10594:	4798      	blx	r3
   10596:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   10598:	000103c1 	.word	0x000103c1
   1059c:	000103e5 	.word	0x000103e5

000105a0 <RADIO_DIO5>:
   105a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   105a2:	466b      	mov	r3, sp
   105a4:	4668      	mov	r0, sp
   105a6:	1ddc      	adds	r4, r3, #7
   105a8:	2230      	movs	r2, #48	; 0x30
   105aa:	2304      	movs	r3, #4
   105ac:	0021      	movs	r1, r4
   105ae:	3006      	adds	r0, #6
   105b0:	4d03      	ldr	r5, [pc, #12]	; (105c0 <RADIO_DIO5+0x20>)
   105b2:	47a8      	blx	r5
   105b4:	7823      	ldrb	r3, [r4, #0]
   105b6:	2b7f      	cmp	r3, #127	; 0x7f
   105b8:	d901      	bls.n	105be <RADIO_DIO5+0x1e>
   105ba:	4b02      	ldr	r3, [pc, #8]	; (105c4 <RADIO_DIO5+0x24>)
   105bc:	4798      	blx	r3
   105be:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   105c0:	000103c1 	.word	0x000103c1
   105c4:	000103e5 	.word	0x000103e5

000105c8 <radioPostTask>:
   105c8:	b510      	push	{r4, lr}
   105ca:	0004      	movs	r4, r0
   105cc:	4b05      	ldr	r3, [pc, #20]	; (105e4 <radioPostTask+0x1c>)
   105ce:	4798      	blx	r3
   105d0:	4b05      	ldr	r3, [pc, #20]	; (105e8 <radioPostTask+0x20>)
   105d2:	8818      	ldrh	r0, [r3, #0]
   105d4:	4320      	orrs	r0, r4
   105d6:	8018      	strh	r0, [r3, #0]
   105d8:	4b04      	ldr	r3, [pc, #16]	; (105ec <radioPostTask+0x24>)
   105da:	4798      	blx	r3
   105dc:	2002      	movs	r0, #2
   105de:	4b04      	ldr	r3, [pc, #16]	; (105f0 <radioPostTask+0x28>)
   105e0:	4798      	blx	r3
   105e2:	bd10      	pop	{r4, pc}
   105e4:	00003d2d 	.word	0x00003d2d
   105e8:	20000ea2 	.word	0x20000ea2
   105ec:	00003d39 	.word	0x00003d39
   105f0:	00009c35 	.word	0x00009c35

000105f4 <radioClearTask>:
   105f4:	b510      	push	{r4, lr}
   105f6:	0004      	movs	r4, r0
   105f8:	4b04      	ldr	r3, [pc, #16]	; (1060c <radioClearTask+0x18>)
   105fa:	4798      	blx	r3
   105fc:	4a04      	ldr	r2, [pc, #16]	; (10610 <radioClearTask+0x1c>)
   105fe:	8813      	ldrh	r3, [r2, #0]
   10600:	43a3      	bics	r3, r4
   10602:	8013      	strh	r3, [r2, #0]
   10604:	4b03      	ldr	r3, [pc, #12]	; (10614 <radioClearTask+0x20>)
   10606:	4798      	blx	r3
   10608:	bd10      	pop	{r4, pc}
   1060a:	46c0      	nop			; (mov r8, r8)
   1060c:	00003d2d 	.word	0x00003d2d
   10610:	20000ea2 	.word	0x20000ea2
   10614:	00003d39 	.word	0x00003d39

00010618 <RADIO_TaskHandler>:
   10618:	b570      	push	{r4, r5, r6, lr}
   1061a:	2400      	movs	r4, #0
   1061c:	4d10      	ldr	r5, [pc, #64]	; (10660 <RADIO_TaskHandler+0x48>)
   1061e:	2601      	movs	r6, #1
   10620:	882b      	ldrh	r3, [r5, #0]
   10622:	42a3      	cmp	r3, r4
   10624:	d015      	beq.n	10652 <RADIO_TaskHandler+0x3a>
   10626:	882b      	ldrh	r3, [r5, #0]
   10628:	4123      	asrs	r3, r4
   1062a:	4233      	tst	r3, r6
   1062c:	d013      	beq.n	10656 <RADIO_TaskHandler+0x3e>
   1062e:	40a6      	lsls	r6, r4
   10630:	4b0c      	ldr	r3, [pc, #48]	; (10664 <RADIO_TaskHandler+0x4c>)
   10632:	4798      	blx	r3
   10634:	882b      	ldrh	r3, [r5, #0]
   10636:	00a4      	lsls	r4, r4, #2
   10638:	43b3      	bics	r3, r6
   1063a:	802b      	strh	r3, [r5, #0]
   1063c:	4b0a      	ldr	r3, [pc, #40]	; (10668 <RADIO_TaskHandler+0x50>)
   1063e:	4798      	blx	r3
   10640:	4b0a      	ldr	r3, [pc, #40]	; (1066c <RADIO_TaskHandler+0x54>)
   10642:	58e3      	ldr	r3, [r4, r3]
   10644:	4798      	blx	r3
   10646:	882b      	ldrh	r3, [r5, #0]
   10648:	2b00      	cmp	r3, #0
   1064a:	d002      	beq.n	10652 <RADIO_TaskHandler+0x3a>
   1064c:	2002      	movs	r0, #2
   1064e:	4b08      	ldr	r3, [pc, #32]	; (10670 <RADIO_TaskHandler+0x58>)
   10650:	4798      	blx	r3
   10652:	2000      	movs	r0, #0
   10654:	bd70      	pop	{r4, r5, r6, pc}
   10656:	3401      	adds	r4, #1
   10658:	2c05      	cmp	r4, #5
   1065a:	d1e4      	bne.n	10626 <RADIO_TaskHandler+0xe>
   1065c:	e7f9      	b.n	10652 <RADIO_TaskHandler+0x3a>
   1065e:	46c0      	nop			; (mov r8, r8)
   10660:	20000ea2 	.word	0x20000ea2
   10664:	00003d2d 	.word	0x00003d2d
   10668:	00003d39 	.word	0x00003d39
   1066c:	0001ad70 	.word	0x0001ad70
   10670:	00009c35 	.word	0x00009c35

00010674 <RadioSetState>:
   10674:	4b01      	ldr	r3, [pc, #4]	; (1067c <RadioSetState+0x8>)
   10676:	7018      	strb	r0, [r3, #0]
   10678:	4770      	bx	lr
   1067a:	46c0      	nop			; (mov r8, r8)
   1067c:	20001bcf 	.word	0x20001bcf

00010680 <RADIO_GetState>:
   10680:	4b01      	ldr	r3, [pc, #4]	; (10688 <RADIO_GetState+0x8>)
   10682:	7818      	ldrb	r0, [r3, #0]
   10684:	b2c0      	uxtb	r0, r0
   10686:	4770      	bx	lr
   10688:	20001bcf 	.word	0x20001bcf

0001068c <RADIO_SetCallbackBitmask>:
   1068c:	4a02      	ldr	r2, [pc, #8]	; (10698 <RADIO_SetCallbackBitmask+0xc>)
   1068e:	7813      	ldrb	r3, [r2, #0]
   10690:	4318      	orrs	r0, r3
   10692:	7010      	strb	r0, [r2, #0]
   10694:	4770      	bx	lr
   10696:	46c0      	nop			; (mov r8, r8)
   10698:	20001bce 	.word	0x20001bce

0001069c <RADIO_Transmit>:
   1069c:	b570      	push	{r4, r5, r6, lr}
   1069e:	4d10      	ldr	r5, [pc, #64]	; (106e0 <RADIO_Transmit+0x44>)
   106a0:	0006      	movs	r6, r0
   106a2:	782b      	ldrb	r3, [r5, #0]
   106a4:	2004      	movs	r0, #4
   106a6:	2b01      	cmp	r3, #1
   106a8:	d118      	bne.n	106dc <RADIO_Transmit+0x40>
   106aa:	4c0e      	ldr	r4, [pc, #56]	; (106e4 <RADIO_Transmit+0x48>)
   106ac:	0023      	movs	r3, r4
   106ae:	332f      	adds	r3, #47	; 0x2f
   106b0:	7818      	ldrb	r0, [r3, #0]
   106b2:	4b0d      	ldr	r3, [pc, #52]	; (106e8 <RADIO_Transmit+0x4c>)
   106b4:	4798      	blx	r3
   106b6:	4b0d      	ldr	r3, [pc, #52]	; (106ec <RADIO_Transmit+0x50>)
   106b8:	7832      	ldrb	r2, [r6, #0]
   106ba:	6871      	ldr	r1, [r6, #4]
   106bc:	701a      	strb	r2, [r3, #0]
   106be:	4b0c      	ldr	r3, [pc, #48]	; (106f0 <RADIO_Transmit+0x54>)
   106c0:	3434      	adds	r4, #52	; 0x34
   106c2:	6019      	str	r1, [r3, #0]
   106c4:	7821      	ldrb	r1, [r4, #0]
   106c6:	2302      	movs	r3, #2
   106c8:	2900      	cmp	r1, #0
   106ca:	d102      	bne.n	106d2 <RADIO_Transmit+0x36>
   106cc:	0018      	movs	r0, r3
   106ce:	2a3f      	cmp	r2, #63	; 0x3f
   106d0:	d804      	bhi.n	106dc <RADIO_Transmit+0x40>
   106d2:	702b      	strb	r3, [r5, #0]
   106d4:	2004      	movs	r0, #4
   106d6:	4b07      	ldr	r3, [pc, #28]	; (106f4 <RADIO_Transmit+0x58>)
   106d8:	4798      	blx	r3
   106da:	2000      	movs	r0, #0
   106dc:	bd70      	pop	{r4, r5, r6, pc}
   106de:	46c0      	nop			; (mov r8, r8)
   106e0:	20001bcf 	.word	0x20001bcf
   106e4:	20001398 	.word	0x20001398
   106e8:	00009915 	.word	0x00009915
   106ec:	20000ec4 	.word	0x20000ec4
   106f0:	20000ec0 	.word	0x20000ec0
   106f4:	000105c9 	.word	0x000105c9

000106f8 <Radio_FSKTxPayloadHandler>:
   106f8:	b570      	push	{r4, r5, r6, lr}
   106fa:	4b1c      	ldr	r3, [pc, #112]	; (1076c <Radio_FSKTxPayloadHandler+0x74>)
   106fc:	000d      	movs	r5, r1
   106fe:	4798      	blx	r3
   10700:	4c1b      	ldr	r4, [pc, #108]	; (10770 <Radio_FSKTxPayloadHandler+0x78>)
   10702:	3458      	adds	r4, #88	; 0x58
   10704:	7820      	ldrb	r0, [r4, #0]
   10706:	b2c0      	uxtb	r0, r0
   10708:	2800      	cmp	r0, #0
   1070a:	d112      	bne.n	10732 <Radio_FSKTxPayloadHandler+0x3a>
   1070c:	2d00      	cmp	r5, #0
   1070e:	d007      	beq.n	10720 <Radio_FSKTxPayloadHandler+0x28>
   10710:	4918      	ldr	r1, [pc, #96]	; (10774 <Radio_FSKTxPayloadHandler+0x7c>)
   10712:	4b19      	ldr	r3, [pc, #100]	; (10778 <Radio_FSKTxPayloadHandler+0x80>)
   10714:	2d3e      	cmp	r5, #62	; 0x3e
   10716:	d806      	bhi.n	10726 <Radio_FSKTxPayloadHandler+0x2e>
   10718:	002a      	movs	r2, r5
   1071a:	6809      	ldr	r1, [r1, #0]
   1071c:	4798      	blx	r3
   1071e:	7025      	strb	r5, [r4, #0]
   10720:	4b16      	ldr	r3, [pc, #88]	; (1077c <Radio_FSKTxPayloadHandler+0x84>)
   10722:	4798      	blx	r3
   10724:	bd70      	pop	{r4, r5, r6, pc}
   10726:	223f      	movs	r2, #63	; 0x3f
   10728:	6809      	ldr	r1, [r1, #0]
   1072a:	4798      	blx	r3
   1072c:	233f      	movs	r3, #63	; 0x3f
   1072e:	7023      	strb	r3, [r4, #0]
   10730:	e7f6      	b.n	10720 <Radio_FSKTxPayloadHandler+0x28>
   10732:	7823      	ldrb	r3, [r4, #0]
   10734:	429d      	cmp	r5, r3
   10736:	d0f3      	beq.n	10720 <Radio_FSKTxPayloadHandler+0x28>
   10738:	7822      	ldrb	r2, [r4, #0]
   1073a:	480e      	ldr	r0, [pc, #56]	; (10774 <Radio_FSKTxPayloadHandler+0x7c>)
   1073c:	1aaa      	subs	r2, r5, r2
   1073e:	b2d2      	uxtb	r2, r2
   10740:	4b0d      	ldr	r3, [pc, #52]	; (10778 <Radio_FSKTxPayloadHandler+0x80>)
   10742:	2a3f      	cmp	r2, #63	; 0x3f
   10744:	d807      	bhi.n	10756 <Radio_FSKTxPayloadHandler+0x5e>
   10746:	7826      	ldrb	r6, [r4, #0]
   10748:	7822      	ldrb	r2, [r4, #0]
   1074a:	6801      	ldr	r1, [r0, #0]
   1074c:	1aaa      	subs	r2, r5, r2
   1074e:	b2d2      	uxtb	r2, r2
   10750:	1989      	adds	r1, r1, r6
   10752:	2000      	movs	r0, #0
   10754:	e7e2      	b.n	1071c <Radio_FSKTxPayloadHandler+0x24>
   10756:	7822      	ldrb	r2, [r4, #0]
   10758:	6801      	ldr	r1, [r0, #0]
   1075a:	2000      	movs	r0, #0
   1075c:	1889      	adds	r1, r1, r2
   1075e:	223f      	movs	r2, #63	; 0x3f
   10760:	4798      	blx	r3
   10762:	7823      	ldrb	r3, [r4, #0]
   10764:	333f      	adds	r3, #63	; 0x3f
   10766:	b2db      	uxtb	r3, r3
   10768:	e7e1      	b.n	1072e <Radio_FSKTxPayloadHandler+0x36>
   1076a:	46c0      	nop			; (mov r8, r8)
   1076c:	00000115 	.word	0x00000115
   10770:	20001398 	.word	0x20001398
   10774:	20000ec0 	.word	0x20000ec0
   10778:	00003bf1 	.word	0x00003bf1
   1077c:	00000155 	.word	0x00000155

00010780 <RADIO_FSKSyncAddr>:
   10780:	4b08      	ldr	r3, [pc, #32]	; (107a4 <RADIO_FSKSyncAddr+0x24>)
   10782:	b510      	push	{r4, lr}
   10784:	4798      	blx	r3
   10786:	4b08      	ldr	r3, [pc, #32]	; (107a8 <RADIO_FSKSyncAddr+0x28>)
   10788:	001a      	movs	r2, r3
   1078a:	3234      	adds	r2, #52	; 0x34
   1078c:	7812      	ldrb	r2, [r2, #0]
   1078e:	2a00      	cmp	r2, #0
   10790:	d104      	bne.n	1079c <RADIO_FSKSyncAddr+0x1c>
   10792:	0019      	movs	r1, r3
   10794:	3358      	adds	r3, #88	; 0x58
   10796:	312c      	adds	r1, #44	; 0x2c
   10798:	700a      	strb	r2, [r1, #0]
   1079a:	701a      	strb	r2, [r3, #0]
   1079c:	4b03      	ldr	r3, [pc, #12]	; (107ac <RADIO_FSKSyncAddr+0x2c>)
   1079e:	4798      	blx	r3
   107a0:	bd10      	pop	{r4, pc}
   107a2:	46c0      	nop			; (mov r8, r8)
   107a4:	00000115 	.word	0x00000115
   107a8:	20001398 	.word	0x20001398
   107ac:	00000155 	.word	0x00000155

000107b0 <RADIO_FSKFifoLevel>:
   107b0:	b570      	push	{r4, r5, r6, lr}
   107b2:	4b22      	ldr	r3, [pc, #136]	; (1083c <RADIO_FSKFifoLevel+0x8c>)
   107b4:	4798      	blx	r3
   107b6:	4d22      	ldr	r5, [pc, #136]	; (10840 <RADIO_FSKFifoLevel+0x90>)
   107b8:	002a      	movs	r2, r5
   107ba:	002b      	movs	r3, r5
   107bc:	322c      	adds	r2, #44	; 0x2c
   107be:	3358      	adds	r3, #88	; 0x58
   107c0:	7810      	ldrb	r0, [r2, #0]
   107c2:	7819      	ldrb	r1, [r3, #0]
   107c4:	4288      	cmp	r0, r1
   107c6:	d105      	bne.n	107d4 <RADIO_FSKFifoLevel+0x24>
   107c8:	7812      	ldrb	r2, [r2, #0]
   107ca:	2a00      	cmp	r2, #0
   107cc:	d002      	beq.n	107d4 <RADIO_FSKFifoLevel+0x24>
   107ce:	781b      	ldrb	r3, [r3, #0]
   107d0:	2b00      	cmp	r3, #0
   107d2:	d11f      	bne.n	10814 <RADIO_FSKFifoLevel+0x64>
   107d4:	0029      	movs	r1, r5
   107d6:	312c      	adds	r1, #44	; 0x2c
   107d8:	7808      	ldrb	r0, [r1, #0]
   107da:	b2c0      	uxtb	r0, r0
   107dc:	2800      	cmp	r0, #0
   107de:	d102      	bne.n	107e6 <RADIO_FSKFifoLevel+0x36>
   107e0:	2201      	movs	r2, #1
   107e2:	4b18      	ldr	r3, [pc, #96]	; (10844 <RADIO_FSKFifoLevel+0x94>)
   107e4:	4798      	blx	r3
   107e6:	002e      	movs	r6, r5
   107e8:	002c      	movs	r4, r5
   107ea:	362c      	adds	r6, #44	; 0x2c
   107ec:	3458      	adds	r4, #88	; 0x58
   107ee:	7833      	ldrb	r3, [r6, #0]
   107f0:	7822      	ldrb	r2, [r4, #0]
   107f2:	1a9b      	subs	r3, r3, r2
   107f4:	b2db      	uxtb	r3, r3
   107f6:	2b3e      	cmp	r3, #62	; 0x3e
   107f8:	d80f      	bhi.n	1081a <RADIO_FSKFifoLevel+0x6a>
   107fa:	7823      	ldrb	r3, [r4, #0]
   107fc:	7832      	ldrb	r2, [r6, #0]
   107fe:	7821      	ldrb	r1, [r4, #0]
   10800:	2000      	movs	r0, #0
   10802:	1a52      	subs	r2, r2, r1
   10804:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   10806:	b2d2      	uxtb	r2, r2
   10808:	18c9      	adds	r1, r1, r3
   1080a:	4b0e      	ldr	r3, [pc, #56]	; (10844 <RADIO_FSKFifoLevel+0x94>)
   1080c:	4798      	blx	r3
   1080e:	7833      	ldrb	r3, [r6, #0]
   10810:	b2db      	uxtb	r3, r3
   10812:	7023      	strb	r3, [r4, #0]
   10814:	4b0c      	ldr	r3, [pc, #48]	; (10848 <RADIO_FSKFifoLevel+0x98>)
   10816:	4798      	blx	r3
   10818:	bd70      	pop	{r4, r5, r6, pc}
   1081a:	7833      	ldrb	r3, [r6, #0]
   1081c:	7822      	ldrb	r2, [r4, #0]
   1081e:	1a9b      	subs	r3, r3, r2
   10820:	b2db      	uxtb	r3, r3
   10822:	2b3f      	cmp	r3, #63	; 0x3f
   10824:	d9f6      	bls.n	10814 <RADIO_FSKFifoLevel+0x64>
   10826:	7823      	ldrb	r3, [r4, #0]
   10828:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   1082a:	223f      	movs	r2, #63	; 0x3f
   1082c:	18c9      	adds	r1, r1, r3
   1082e:	2000      	movs	r0, #0
   10830:	4b04      	ldr	r3, [pc, #16]	; (10844 <RADIO_FSKFifoLevel+0x94>)
   10832:	4798      	blx	r3
   10834:	7823      	ldrb	r3, [r4, #0]
   10836:	333f      	adds	r3, #63	; 0x3f
   10838:	e7ea      	b.n	10810 <RADIO_FSKFifoLevel+0x60>
   1083a:	46c0      	nop			; (mov r8, r8)
   1083c:	00000115 	.word	0x00000115
   10840:	20001398 	.word	0x20001398
   10844:	00003c31 	.word	0x00003c31
   10848:	00000155 	.word	0x00000155

0001084c <RADIO_FSKFifoEmpty>:
   1084c:	b510      	push	{r4, lr}
   1084e:	4b03      	ldr	r3, [pc, #12]	; (1085c <RADIO_FSKFifoEmpty+0x10>)
   10850:	7819      	ldrb	r1, [r3, #0]
   10852:	4b03      	ldr	r3, [pc, #12]	; (10860 <RADIO_FSKFifoEmpty+0x14>)
   10854:	6818      	ldr	r0, [r3, #0]
   10856:	4b03      	ldr	r3, [pc, #12]	; (10864 <RADIO_FSKFifoEmpty+0x18>)
   10858:	4798      	blx	r3
   1085a:	bd10      	pop	{r4, pc}
   1085c:	20000ec4 	.word	0x20000ec4
   10860:	20000ec0 	.word	0x20000ec0
   10864:	000106f9 	.word	0x000106f9

00010868 <RADIO_GetData>:
   10868:	4b03      	ldr	r3, [pc, #12]	; (10878 <RADIO_GetData+0x10>)
   1086a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1086c:	332c      	adds	r3, #44	; 0x2c
   1086e:	6002      	str	r2, [r0, #0]
   10870:	781b      	ldrb	r3, [r3, #0]
   10872:	2000      	movs	r0, #0
   10874:	800b      	strh	r3, [r1, #0]
   10876:	4770      	bx	lr
   10878:	20001398 	.word	0x20001398

0001087c <Radio_EnableRfControl>:
   1087c:	b510      	push	{r4, lr}
   1087e:	4b08      	ldr	r3, [pc, #32]	; (108a0 <Radio_EnableRfControl+0x24>)
   10880:	0001      	movs	r1, r0
   10882:	681a      	ldr	r2, [r3, #0]
   10884:	4807      	ldr	r0, [pc, #28]	; (108a4 <Radio_EnableRfControl+0x28>)
   10886:	4c08      	ldr	r4, [pc, #32]	; (108a8 <Radio_EnableRfControl+0x2c>)
   10888:	1812      	adds	r2, r2, r0
   1088a:	2000      	movs	r0, #0
   1088c:	42a2      	cmp	r2, r4
   1088e:	d804      	bhi.n	1089a <Radio_EnableRfControl+0x1e>
   10890:	3305      	adds	r3, #5
   10892:	7fdb      	ldrb	r3, [r3, #31]
   10894:	1e58      	subs	r0, r3, #1
   10896:	4183      	sbcs	r3, r0
   10898:	1c58      	adds	r0, r3, #1
   1089a:	4b04      	ldr	r3, [pc, #16]	; (108ac <Radio_EnableRfControl+0x30>)
   1089c:	4798      	blx	r3
   1089e:	bd10      	pop	{r4, pc}
   108a0:	20001398 	.word	0x20001398
   108a4:	cc9eec80 	.word	0xcc9eec80
   108a8:	096ae380 	.word	0x096ae380
   108ac:	00003c9d 	.word	0x00003c9d

000108b0 <RADIO_RxHandler>:
   108b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   108b2:	4b33      	ldr	r3, [pc, #204]	; (10980 <RADIO_RxHandler+0xd0>)
   108b4:	2000      	movs	r0, #0
   108b6:	4798      	blx	r3
   108b8:	4e32      	ldr	r6, [pc, #200]	; (10984 <RADIO_RxHandler+0xd4>)
   108ba:	4b33      	ldr	r3, [pc, #204]	; (10988 <RADIO_RxHandler+0xd8>)
   108bc:	8830      	ldrh	r0, [r6, #0]
   108be:	2800      	cmp	r0, #0
   108c0:	d100      	bne.n	108c4 <RADIO_RxHandler+0x14>
   108c2:	3004      	adds	r0, #4
   108c4:	4798      	blx	r3
   108c6:	4c31      	ldr	r4, [pc, #196]	; (1098c <RADIO_RxHandler+0xdc>)
   108c8:	4d31      	ldr	r5, [pc, #196]	; (10990 <RADIO_RxHandler+0xe0>)
   108ca:	0023      	movs	r3, r4
   108cc:	3334      	adds	r3, #52	; 0x34
   108ce:	7819      	ldrb	r1, [r3, #0]
   108d0:	2901      	cmp	r1, #1
   108d2:	d122      	bne.n	1091a <RADIO_RxHandler+0x6a>
   108d4:	2022      	movs	r0, #34	; 0x22
   108d6:	47a8      	blx	r5
   108d8:	2100      	movs	r1, #0
   108da:	2040      	movs	r0, #64	; 0x40
   108dc:	47a8      	blx	r5
   108de:	2100      	movs	r1, #0
   108e0:	2041      	movs	r0, #65	; 0x41
   108e2:	47a8      	blx	r5
   108e4:	8832      	ldrh	r2, [r6, #0]
   108e6:	4b2b      	ldr	r3, [pc, #172]	; (10994 <RADIO_RxHandler+0xe4>)
   108e8:	2a00      	cmp	r2, #0
   108ea:	d131      	bne.n	10950 <RADIO_RxHandler+0xa0>
   108ec:	0021      	movs	r1, r4
   108ee:	2005      	movs	r0, #5
   108f0:	3134      	adds	r1, #52	; 0x34
   108f2:	7809      	ldrb	r1, [r1, #0]
   108f4:	4798      	blx	r3
   108f6:	68e3      	ldr	r3, [r4, #12]
   108f8:	2b00      	cmp	r3, #0
   108fa:	d00c      	beq.n	10916 <RADIO_RxHandler+0x66>
   108fc:	8832      	ldrh	r2, [r6, #0]
   108fe:	2a00      	cmp	r2, #0
   10900:	d009      	beq.n	10916 <RADIO_RxHandler+0x66>
   10902:	21fa      	movs	r1, #250	; 0xfa
   10904:	2200      	movs	r2, #0
   10906:	342f      	adds	r4, #47	; 0x2f
   10908:	0089      	lsls	r1, r1, #2
   1090a:	7820      	ldrb	r0, [r4, #0]
   1090c:	4359      	muls	r1, r3
   1090e:	9200      	str	r2, [sp, #0]
   10910:	4b21      	ldr	r3, [pc, #132]	; (10998 <RADIO_RxHandler+0xe8>)
   10912:	4c22      	ldr	r4, [pc, #136]	; (1099c <RADIO_RxHandler+0xec>)
   10914:	47a0      	blx	r4
   10916:	2000      	movs	r0, #0
   10918:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   1091a:	0023      	movs	r3, r4
   1091c:	3338      	adds	r3, #56	; 0x38
   1091e:	7819      	ldrb	r1, [r3, #0]
   10920:	2012      	movs	r0, #18
   10922:	47a8      	blx	r5
   10924:	0023      	movs	r3, r4
   10926:	3339      	adds	r3, #57	; 0x39
   10928:	7819      	ldrb	r1, [r3, #0]
   1092a:	2013      	movs	r0, #19
   1092c:	47a8      	blx	r5
   1092e:	210c      	movs	r1, #12
   10930:	2040      	movs	r0, #64	; 0x40
   10932:	47a8      	blx	r5
   10934:	2100      	movs	r1, #0
   10936:	2041      	movs	r0, #65	; 0x41
   10938:	47a8      	blx	r5
   1093a:	0022      	movs	r2, r4
   1093c:	2300      	movs	r3, #0
   1093e:	3256      	adds	r2, #86	; 0x56
   10940:	8013      	strh	r3, [r2, #0]
   10942:	0022      	movs	r2, r4
   10944:	322c      	adds	r2, #44	; 0x2c
   10946:	7013      	strb	r3, [r2, #0]
   10948:	0022      	movs	r2, r4
   1094a:	3258      	adds	r2, #88	; 0x58
   1094c:	7013      	strb	r3, [r2, #0]
   1094e:	e7c9      	b.n	108e4 <RADIO_RxHandler+0x34>
   10950:	0022      	movs	r2, r4
   10952:	3234      	adds	r2, #52	; 0x34
   10954:	7811      	ldrb	r1, [r2, #0]
   10956:	2200      	movs	r2, #0
   10958:	2901      	cmp	r1, #1
   1095a:	d101      	bne.n	10960 <RADIO_RxHandler+0xb0>
   1095c:	2006      	movs	r0, #6
   1095e:	e7c9      	b.n	108f4 <RADIO_RxHandler+0x44>
   10960:	0011      	movs	r1, r2
   10962:	2005      	movs	r0, #5
   10964:	4798      	blx	r3
   10966:	21fa      	movs	r1, #250	; 0xfa
   10968:	8833      	ldrh	r3, [r6, #0]
   1096a:	0089      	lsls	r1, r1, #2
   1096c:	4359      	muls	r1, r3
   1096e:	0023      	movs	r3, r4
   10970:	2200      	movs	r2, #0
   10972:	332e      	adds	r3, #46	; 0x2e
   10974:	7818      	ldrb	r0, [r3, #0]
   10976:	4d09      	ldr	r5, [pc, #36]	; (1099c <RADIO_RxHandler+0xec>)
   10978:	9200      	str	r2, [sp, #0]
   1097a:	4b09      	ldr	r3, [pc, #36]	; (109a0 <RADIO_RxHandler+0xf0>)
   1097c:	47a8      	blx	r5
   1097e:	e7ba      	b.n	108f6 <RADIO_RxHandler+0x46>
   10980:	0001087d 	.word	0x0001087d
   10984:	20000eb0 	.word	0x20000eb0
   10988:	00010009 	.word	0x00010009
   1098c:	20001398 	.word	0x20001398
   10990:	00003b9d 	.word	0x00003b9d
   10994:	00009c6d 	.word	0x00009c6d
   10998:	000109d9 	.word	0x000109d9
   1099c:	00009609 	.word	0x00009609
   109a0:	00010a69 	.word	0x00010a69

000109a4 <Radio_DisableRfControl>:
   109a4:	b510      	push	{r4, lr}
   109a6:	4b08      	ldr	r3, [pc, #32]	; (109c8 <Radio_DisableRfControl+0x24>)
   109a8:	0001      	movs	r1, r0
   109aa:	681a      	ldr	r2, [r3, #0]
   109ac:	4807      	ldr	r0, [pc, #28]	; (109cc <Radio_DisableRfControl+0x28>)
   109ae:	4c08      	ldr	r4, [pc, #32]	; (109d0 <Radio_DisableRfControl+0x2c>)
   109b0:	1812      	adds	r2, r2, r0
   109b2:	2000      	movs	r0, #0
   109b4:	42a2      	cmp	r2, r4
   109b6:	d804      	bhi.n	109c2 <Radio_DisableRfControl+0x1e>
   109b8:	3305      	adds	r3, #5
   109ba:	7fdb      	ldrb	r3, [r3, #31]
   109bc:	1e58      	subs	r0, r3, #1
   109be:	4183      	sbcs	r3, r0
   109c0:	1c58      	adds	r0, r3, #1
   109c2:	4b04      	ldr	r3, [pc, #16]	; (109d4 <Radio_DisableRfControl+0x30>)
   109c4:	4798      	blx	r3
   109c6:	bd10      	pop	{r4, pc}
   109c8:	20001398 	.word	0x20001398
   109cc:	cc9eec80 	.word	0xcc9eec80
   109d0:	096ae380 	.word	0x096ae380
   109d4:	00003cc5 	.word	0x00003cc5

000109d8 <Radio_WatchdogTimeout>:
   109d8:	b510      	push	{r4, lr}
   109da:	4b0e      	ldr	r3, [pc, #56]	; (10a14 <Radio_WatchdogTimeout+0x3c>)
   109dc:	781a      	ldrb	r2, [r3, #0]
   109de:	2a04      	cmp	r2, #4
   109e0:	d10b      	bne.n	109fa <Radio_WatchdogTimeout+0x22>
   109e2:	2320      	movs	r3, #32
   109e4:	4a0c      	ldr	r2, [pc, #48]	; (10a18 <Radio_WatchdogTimeout+0x40>)
   109e6:	2000      	movs	r0, #0
   109e8:	8811      	ldrh	r1, [r2, #0]
   109ea:	430b      	orrs	r3, r1
   109ec:	8013      	strh	r3, [r2, #0]
   109ee:	4b0b      	ldr	r3, [pc, #44]	; (10a1c <Radio_WatchdogTimeout+0x44>)
   109f0:	4798      	blx	r3
   109f2:	2002      	movs	r0, #2
   109f4:	4b0a      	ldr	r3, [pc, #40]	; (10a20 <Radio_WatchdogTimeout+0x48>)
   109f6:	4798      	blx	r3
   109f8:	bd10      	pop	{r4, pc}
   109fa:	781b      	ldrb	r3, [r3, #0]
   109fc:	2b02      	cmp	r3, #2
   109fe:	d1fb      	bne.n	109f8 <Radio_WatchdogTimeout+0x20>
   10a00:	4a05      	ldr	r2, [pc, #20]	; (10a18 <Radio_WatchdogTimeout+0x40>)
   10a02:	330e      	adds	r3, #14
   10a04:	8811      	ldrh	r1, [r2, #0]
   10a06:	2001      	movs	r0, #1
   10a08:	430b      	orrs	r3, r1
   10a0a:	8013      	strh	r3, [r2, #0]
   10a0c:	4b03      	ldr	r3, [pc, #12]	; (10a1c <Radio_WatchdogTimeout+0x44>)
   10a0e:	4798      	blx	r3
   10a10:	2001      	movs	r0, #1
   10a12:	e7ef      	b.n	109f4 <Radio_WatchdogTimeout+0x1c>
   10a14:	20001bcf 	.word	0x20001bcf
   10a18:	20001bcc 	.word	0x20001bcc
   10a1c:	000109a5 	.word	0x000109a5
   10a20:	000105c9 	.word	0x000105c9

00010a24 <RADIO_RxTimeout>:
   10a24:	b510      	push	{r4, lr}
   10a26:	4b0a      	ldr	r3, [pc, #40]	; (10a50 <RADIO_RxTimeout+0x2c>)
   10a28:	332f      	adds	r3, #47	; 0x2f
   10a2a:	7818      	ldrb	r0, [r3, #0]
   10a2c:	4b09      	ldr	r3, [pc, #36]	; (10a54 <RADIO_RxTimeout+0x30>)
   10a2e:	4798      	blx	r3
   10a30:	2000      	movs	r0, #0
   10a32:	4b09      	ldr	r3, [pc, #36]	; (10a58 <RADIO_RxTimeout+0x34>)
   10a34:	4798      	blx	r3
   10a36:	2180      	movs	r1, #128	; 0x80
   10a38:	2012      	movs	r0, #18
   10a3a:	4b08      	ldr	r3, [pc, #32]	; (10a5c <RADIO_RxTimeout+0x38>)
   10a3c:	4798      	blx	r3
   10a3e:	2340      	movs	r3, #64	; 0x40
   10a40:	4a07      	ldr	r2, [pc, #28]	; (10a60 <RADIO_RxTimeout+0x3c>)
   10a42:	2002      	movs	r0, #2
   10a44:	8811      	ldrh	r1, [r2, #0]
   10a46:	430b      	orrs	r3, r1
   10a48:	8013      	strh	r3, [r2, #0]
   10a4a:	4b06      	ldr	r3, [pc, #24]	; (10a64 <RADIO_RxTimeout+0x40>)
   10a4c:	4798      	blx	r3
   10a4e:	bd10      	pop	{r4, pc}
   10a50:	20001398 	.word	0x20001398
   10a54:	00009915 	.word	0x00009915
   10a58:	000109a5 	.word	0x000109a5
   10a5c:	00003b9d 	.word	0x00003b9d
   10a60:	20001bcc 	.word	0x20001bcc
   10a64:	000105c9 	.word	0x000105c9

00010a68 <Radio_RxFSKTimeout>:
   10a68:	b510      	push	{r4, lr}
   10a6a:	4b08      	ldr	r3, [pc, #32]	; (10a8c <Radio_RxFSKTimeout+0x24>)
   10a6c:	332f      	adds	r3, #47	; 0x2f
   10a6e:	7818      	ldrb	r0, [r3, #0]
   10a70:	4b07      	ldr	r3, [pc, #28]	; (10a90 <Radio_RxFSKTimeout+0x28>)
   10a72:	4798      	blx	r3
   10a74:	2000      	movs	r0, #0
   10a76:	4b07      	ldr	r3, [pc, #28]	; (10a94 <Radio_RxFSKTimeout+0x2c>)
   10a78:	4798      	blx	r3
   10a7a:	2380      	movs	r3, #128	; 0x80
   10a7c:	4a06      	ldr	r2, [pc, #24]	; (10a98 <Radio_RxFSKTimeout+0x30>)
   10a7e:	2002      	movs	r0, #2
   10a80:	8811      	ldrh	r1, [r2, #0]
   10a82:	430b      	orrs	r3, r1
   10a84:	8013      	strh	r3, [r2, #0]
   10a86:	4b05      	ldr	r3, [pc, #20]	; (10a9c <Radio_RxFSKTimeout+0x34>)
   10a88:	4798      	blx	r3
   10a8a:	bd10      	pop	{r4, pc}
   10a8c:	20001398 	.word	0x20001398
   10a90:	00009915 	.word	0x00009915
   10a94:	000109a5 	.word	0x000109a5
   10a98:	20001bcc 	.word	0x20001bcc
   10a9c:	000105c9 	.word	0x000105c9

00010aa0 <RADIO_TxDone>:
   10aa0:	b570      	push	{r4, r5, r6, lr}
   10aa2:	4b14      	ldr	r3, [pc, #80]	; (10af4 <RADIO_TxDone+0x54>)
   10aa4:	332f      	adds	r3, #47	; 0x2f
   10aa6:	7818      	ldrb	r0, [r3, #0]
   10aa8:	4b13      	ldr	r3, [pc, #76]	; (10af8 <RADIO_TxDone+0x58>)
   10aaa:	4798      	blx	r3
   10aac:	2001      	movs	r0, #1
   10aae:	4b13      	ldr	r3, [pc, #76]	; (10afc <RADIO_TxDone+0x5c>)
   10ab0:	4798      	blx	r3
   10ab2:	4b13      	ldr	r3, [pc, #76]	; (10b00 <RADIO_TxDone+0x60>)
   10ab4:	2108      	movs	r1, #8
   10ab6:	2012      	movs	r0, #18
   10ab8:	4798      	blx	r3
   10aba:	4b12      	ldr	r3, [pc, #72]	; (10b04 <RADIO_TxDone+0x64>)
   10abc:	781a      	ldrb	r2, [r3, #0]
   10abe:	4b12      	ldr	r3, [pc, #72]	; (10b08 <RADIO_TxDone+0x68>)
   10ac0:	2a02      	cmp	r2, #2
   10ac2:	d002      	beq.n	10aca <RADIO_TxDone+0x2a>
   10ac4:	881a      	ldrh	r2, [r3, #0]
   10ac6:	0692      	lsls	r2, r2, #26
   10ac8:	d413      	bmi.n	10af2 <RADIO_TxDone+0x52>
   10aca:	2001      	movs	r0, #1
   10acc:	881a      	ldrh	r2, [r3, #0]
   10ace:	4302      	orrs	r2, r0
   10ad0:	801a      	strh	r2, [r3, #0]
   10ad2:	4b0e      	ldr	r3, [pc, #56]	; (10b0c <RADIO_TxDone+0x6c>)
   10ad4:	4798      	blx	r3
   10ad6:	4b0e      	ldr	r3, [pc, #56]	; (10b10 <RADIO_TxDone+0x70>)
   10ad8:	4798      	blx	r3
   10ada:	4c0e      	ldr	r4, [pc, #56]	; (10b14 <RADIO_TxDone+0x74>)
   10adc:	4d0e      	ldr	r5, [pc, #56]	; (10b18 <RADIO_TxDone+0x78>)
   10ade:	6822      	ldr	r2, [r4, #0]
   10ae0:	6863      	ldr	r3, [r4, #4]
   10ae2:	1a80      	subs	r0, r0, r2
   10ae4:	4199      	sbcs	r1, r3
   10ae6:	22fa      	movs	r2, #250	; 0xfa
   10ae8:	2300      	movs	r3, #0
   10aea:	0092      	lsls	r2, r2, #2
   10aec:	47a8      	blx	r5
   10aee:	6020      	str	r0, [r4, #0]
   10af0:	6061      	str	r1, [r4, #4]
   10af2:	bd70      	pop	{r4, r5, r6, pc}
   10af4:	20001398 	.word	0x20001398
   10af8:	00009915 	.word	0x00009915
   10afc:	000109a5 	.word	0x000109a5
   10b00:	00003b9d 	.word	0x00003b9d
   10b04:	20001bcf 	.word	0x20001bcf
   10b08:	20001bcc 	.word	0x20001bcc
   10b0c:	000105c9 	.word	0x000105c9
   10b10:	000095b1 	.word	0x000095b1
   10b14:	20000eb8 	.word	0x20000eb8
   10b18:	00011ac9 	.word	0x00011ac9

00010b1c <RADIO_FSKPacketSent>:
   10b1c:	b570      	push	{r4, r5, r6, lr}
   10b1e:	4b15      	ldr	r3, [pc, #84]	; (10b74 <RADIO_FSKPacketSent+0x58>)
   10b20:	203f      	movs	r0, #63	; 0x3f
   10b22:	4798      	blx	r3
   10b24:	0703      	lsls	r3, r0, #28
   10b26:	d524      	bpl.n	10b72 <RADIO_FSKPacketSent+0x56>
   10b28:	4b13      	ldr	r3, [pc, #76]	; (10b78 <RADIO_FSKPacketSent+0x5c>)
   10b2a:	332f      	adds	r3, #47	; 0x2f
   10b2c:	7818      	ldrb	r0, [r3, #0]
   10b2e:	4b13      	ldr	r3, [pc, #76]	; (10b7c <RADIO_FSKPacketSent+0x60>)
   10b30:	4798      	blx	r3
   10b32:	4b13      	ldr	r3, [pc, #76]	; (10b80 <RADIO_FSKPacketSent+0x64>)
   10b34:	2001      	movs	r0, #1
   10b36:	4798      	blx	r3
   10b38:	4b12      	ldr	r3, [pc, #72]	; (10b84 <RADIO_FSKPacketSent+0x68>)
   10b3a:	4c13      	ldr	r4, [pc, #76]	; (10b88 <RADIO_FSKPacketSent+0x6c>)
   10b3c:	781b      	ldrb	r3, [r3, #0]
   10b3e:	2b02      	cmp	r3, #2
   10b40:	d002      	beq.n	10b48 <RADIO_FSKPacketSent+0x2c>
   10b42:	8823      	ldrh	r3, [r4, #0]
   10b44:	069b      	lsls	r3, r3, #26
   10b46:	d414      	bmi.n	10b72 <RADIO_FSKPacketSent+0x56>
   10b48:	4b10      	ldr	r3, [pc, #64]	; (10b8c <RADIO_FSKPacketSent+0x70>)
   10b4a:	4798      	blx	r3
   10b4c:	4d10      	ldr	r5, [pc, #64]	; (10b90 <RADIO_FSKPacketSent+0x74>)
   10b4e:	4e11      	ldr	r6, [pc, #68]	; (10b94 <RADIO_FSKPacketSent+0x78>)
   10b50:	682a      	ldr	r2, [r5, #0]
   10b52:	686b      	ldr	r3, [r5, #4]
   10b54:	1a80      	subs	r0, r0, r2
   10b56:	4199      	sbcs	r1, r3
   10b58:	22fa      	movs	r2, #250	; 0xfa
   10b5a:	2300      	movs	r3, #0
   10b5c:	0092      	lsls	r2, r2, #2
   10b5e:	47b0      	blx	r6
   10b60:	4b0d      	ldr	r3, [pc, #52]	; (10b98 <RADIO_FSKPacketSent+0x7c>)
   10b62:	6028      	str	r0, [r5, #0]
   10b64:	6069      	str	r1, [r5, #4]
   10b66:	2001      	movs	r0, #1
   10b68:	4798      	blx	r3
   10b6a:	2304      	movs	r3, #4
   10b6c:	8822      	ldrh	r2, [r4, #0]
   10b6e:	4313      	orrs	r3, r2
   10b70:	8023      	strh	r3, [r4, #0]
   10b72:	bd70      	pop	{r4, r5, r6, pc}
   10b74:	00003bc5 	.word	0x00003bc5
   10b78:	20001398 	.word	0x20001398
   10b7c:	00009915 	.word	0x00009915
   10b80:	000109a5 	.word	0x000109a5
   10b84:	20001bcf 	.word	0x20001bcf
   10b88:	20001bcc 	.word	0x20001bcc
   10b8c:	000095b1 	.word	0x000095b1
   10b90:	20000eb8 	.word	0x20000eb8
   10b94:	00011ac9 	.word	0x00011ac9
   10b98:	000105c9 	.word	0x000105c9

00010b9c <RADIO_RxDone>:
   10b9c:	b570      	push	{r4, r5, r6, lr}
   10b9e:	2012      	movs	r0, #18
   10ba0:	4e16      	ldr	r6, [pc, #88]	; (10bfc <RADIO_RxDone+0x60>)
   10ba2:	47b0      	blx	r6
   10ba4:	4b16      	ldr	r3, [pc, #88]	; (10c00 <RADIO_RxDone+0x64>)
   10ba6:	0005      	movs	r5, r0
   10ba8:	2170      	movs	r1, #112	; 0x70
   10baa:	2012      	movs	r0, #18
   10bac:	4798      	blx	r3
   10bae:	2350      	movs	r3, #80	; 0x50
   10bb0:	402b      	ands	r3, r5
   10bb2:	2b50      	cmp	r3, #80	; 0x50
   10bb4:	d119      	bne.n	10bea <RADIO_RxDone+0x4e>
   10bb6:	4c13      	ldr	r4, [pc, #76]	; (10c04 <RADIO_RxDone+0x68>)
   10bb8:	0023      	movs	r3, r4
   10bba:	332f      	adds	r3, #47	; 0x2f
   10bbc:	7818      	ldrb	r0, [r3, #0]
   10bbe:	4b12      	ldr	r3, [pc, #72]	; (10c08 <RADIO_RxDone+0x6c>)
   10bc0:	4798      	blx	r3
   10bc2:	4b12      	ldr	r3, [pc, #72]	; (10c0c <RADIO_RxDone+0x70>)
   10bc4:	2000      	movs	r0, #0
   10bc6:	4798      	blx	r3
   10bc8:	3404      	adds	r4, #4
   10bca:	201c      	movs	r0, #28
   10bcc:	47b0      	blx	r6
   10bce:	7fe2      	ldrb	r2, [r4, #31]
   10bd0:	4b0f      	ldr	r3, [pc, #60]	; (10c10 <RADIO_RxDone+0x74>)
   10bd2:	4910      	ldr	r1, [pc, #64]	; (10c14 <RADIO_RxDone+0x78>)
   10bd4:	2a00      	cmp	r2, #0
   10bd6:	d003      	beq.n	10be0 <RADIO_RxDone+0x44>
   10bd8:	06aa      	lsls	r2, r5, #26
   10bda:	d407      	bmi.n	10bec <RADIO_RxDone+0x50>
   10bdc:	0642      	lsls	r2, r0, #25
   10bde:	d505      	bpl.n	10bec <RADIO_RxDone+0x50>
   10be0:	2002      	movs	r0, #2
   10be2:	881a      	ldrh	r2, [r3, #0]
   10be4:	4302      	orrs	r2, r0
   10be6:	801a      	strh	r2, [r3, #0]
   10be8:	4788      	blx	r1
   10bea:	bd70      	pop	{r4, r5, r6, pc}
   10bec:	2280      	movs	r2, #128	; 0x80
   10bee:	8818      	ldrh	r0, [r3, #0]
   10bf0:	0052      	lsls	r2, r2, #1
   10bf2:	4302      	orrs	r2, r0
   10bf4:	801a      	strh	r2, [r3, #0]
   10bf6:	2002      	movs	r0, #2
   10bf8:	e7f6      	b.n	10be8 <RADIO_RxDone+0x4c>
   10bfa:	46c0      	nop			; (mov r8, r8)
   10bfc:	00003bc5 	.word	0x00003bc5
   10c00:	00003b9d 	.word	0x00003b9d
   10c04:	20001398 	.word	0x20001398
   10c08:	00009915 	.word	0x00009915
   10c0c:	000109a5 	.word	0x000109a5
   10c10:	20001bcc 	.word	0x20001bcc
   10c14:	000105c9 	.word	0x000105c9

00010c18 <RADIO_FSKPayloadReady>:
   10c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10c1a:	203f      	movs	r0, #63	; 0x3f
   10c1c:	4b39      	ldr	r3, [pc, #228]	; (10d04 <RADIO_FSKPayloadReady+0xec>)
   10c1e:	4798      	blx	r3
   10c20:	0743      	lsls	r3, r0, #29
   10c22:	d559      	bpl.n	10cd8 <RADIO_FSKPayloadReady+0xc0>
   10c24:	4c38      	ldr	r4, [pc, #224]	; (10d08 <RADIO_FSKPayloadReady+0xf0>)
   10c26:	4d39      	ldr	r5, [pc, #228]	; (10d0c <RADIO_FSKPayloadReady+0xf4>)
   10c28:	1d23      	adds	r3, r4, #4
   10c2a:	7fdb      	ldrb	r3, [r3, #31]
   10c2c:	2b01      	cmp	r3, #1
   10c2e:	d154      	bne.n	10cda <RADIO_FSKPayloadReady+0xc2>
   10c30:	2202      	movs	r2, #2
   10c32:	4210      	tst	r0, r2
   10c34:	d048      	beq.n	10cc8 <RADIO_FSKPayloadReady+0xb0>
   10c36:	0023      	movs	r3, r4
   10c38:	332f      	adds	r3, #47	; 0x2f
   10c3a:	7818      	ldrb	r0, [r3, #0]
   10c3c:	4e34      	ldr	r6, [pc, #208]	; (10d10 <RADIO_FSKPayloadReady+0xf8>)
   10c3e:	47b0      	blx	r6
   10c40:	0023      	movs	r3, r4
   10c42:	332e      	adds	r3, #46	; 0x2e
   10c44:	7818      	ldrb	r0, [r3, #0]
   10c46:	47b0      	blx	r6
   10c48:	4b32      	ldr	r3, [pc, #200]	; (10d14 <RADIO_FSKPayloadReady+0xfc>)
   10c4a:	4798      	blx	r3
   10c4c:	0022      	movs	r2, r4
   10c4e:	0023      	movs	r3, r4
   10c50:	322c      	adds	r2, #44	; 0x2c
   10c52:	3358      	adds	r3, #88	; 0x58
   10c54:	7810      	ldrb	r0, [r2, #0]
   10c56:	7819      	ldrb	r1, [r3, #0]
   10c58:	4288      	cmp	r0, r1
   10c5a:	d105      	bne.n	10c68 <RADIO_FSKPayloadReady+0x50>
   10c5c:	7812      	ldrb	r2, [r2, #0]
   10c5e:	2a00      	cmp	r2, #0
   10c60:	d002      	beq.n	10c68 <RADIO_FSKPayloadReady+0x50>
   10c62:	781b      	ldrb	r3, [r3, #0]
   10c64:	2b00      	cmp	r3, #0
   10c66:	d118      	bne.n	10c9a <RADIO_FSKPayloadReady+0x82>
   10c68:	0021      	movs	r1, r4
   10c6a:	312c      	adds	r1, #44	; 0x2c
   10c6c:	7808      	ldrb	r0, [r1, #0]
   10c6e:	b2c0      	uxtb	r0, r0
   10c70:	2800      	cmp	r0, #0
   10c72:	d102      	bne.n	10c7a <RADIO_FSKPayloadReady+0x62>
   10c74:	2201      	movs	r2, #1
   10c76:	4b28      	ldr	r3, [pc, #160]	; (10d18 <RADIO_FSKPayloadReady+0x100>)
   10c78:	4798      	blx	r3
   10c7a:	0026      	movs	r6, r4
   10c7c:	0027      	movs	r7, r4
   10c7e:	3658      	adds	r6, #88	; 0x58
   10c80:	7830      	ldrb	r0, [r6, #0]
   10c82:	372c      	adds	r7, #44	; 0x2c
   10c84:	b2c0      	uxtb	r0, r0
   10c86:	2800      	cmp	r0, #0
   10c88:	d110      	bne.n	10cac <RADIO_FSKPayloadReady+0x94>
   10c8a:	783a      	ldrb	r2, [r7, #0]
   10c8c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   10c8e:	b2d2      	uxtb	r2, r2
   10c90:	4b21      	ldr	r3, [pc, #132]	; (10d18 <RADIO_FSKPayloadReady+0x100>)
   10c92:	4798      	blx	r3
   10c94:	783b      	ldrb	r3, [r7, #0]
   10c96:	b2db      	uxtb	r3, r3
   10c98:	7033      	strb	r3, [r6, #0]
   10c9a:	4b20      	ldr	r3, [pc, #128]	; (10d1c <RADIO_FSKPayloadReady+0x104>)
   10c9c:	4798      	blx	r3
   10c9e:	4b20      	ldr	r3, [pc, #128]	; (10d20 <RADIO_FSKPayloadReady+0x108>)
   10ca0:	2000      	movs	r0, #0
   10ca2:	4798      	blx	r3
   10ca4:	2308      	movs	r3, #8
   10ca6:	882a      	ldrh	r2, [r5, #0]
   10ca8:	4313      	orrs	r3, r2
   10caa:	e011      	b.n	10cd0 <RADIO_FSKPayloadReady+0xb8>
   10cac:	783b      	ldrb	r3, [r7, #0]
   10cae:	7832      	ldrb	r2, [r6, #0]
   10cb0:	1a9b      	subs	r3, r3, r2
   10cb2:	2b00      	cmp	r3, #0
   10cb4:	ddf1      	ble.n	10c9a <RADIO_FSKPayloadReady+0x82>
   10cb6:	7833      	ldrb	r3, [r6, #0]
   10cb8:	783a      	ldrb	r2, [r7, #0]
   10cba:	7831      	ldrb	r1, [r6, #0]
   10cbc:	2000      	movs	r0, #0
   10cbe:	1a52      	subs	r2, r2, r1
   10cc0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   10cc2:	b2d2      	uxtb	r2, r2
   10cc4:	18c9      	adds	r1, r1, r3
   10cc6:	e7e3      	b.n	10c90 <RADIO_FSKPayloadReady+0x78>
   10cc8:	2380      	movs	r3, #128	; 0x80
   10cca:	8829      	ldrh	r1, [r5, #0]
   10ccc:	005b      	lsls	r3, r3, #1
   10cce:	430b      	orrs	r3, r1
   10cd0:	802b      	strh	r3, [r5, #0]
   10cd2:	2002      	movs	r0, #2
   10cd4:	4b13      	ldr	r3, [pc, #76]	; (10d24 <RADIO_FSKPayloadReady+0x10c>)
   10cd6:	4798      	blx	r3
   10cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10cda:	0023      	movs	r3, r4
   10cdc:	332f      	adds	r3, #47	; 0x2f
   10cde:	4e0c      	ldr	r6, [pc, #48]	; (10d10 <RADIO_FSKPayloadReady+0xf8>)
   10ce0:	7818      	ldrb	r0, [r3, #0]
   10ce2:	47b0      	blx	r6
   10ce4:	0023      	movs	r3, r4
   10ce6:	332e      	adds	r3, #46	; 0x2e
   10ce8:	7818      	ldrb	r0, [r3, #0]
   10cea:	47b0      	blx	r6
   10cec:	4e0e      	ldr	r6, [pc, #56]	; (10d28 <RADIO_FSKPayloadReady+0x110>)
   10cee:	2201      	movs	r2, #1
   10cf0:	0031      	movs	r1, r6
   10cf2:	2000      	movs	r0, #0
   10cf4:	4f08      	ldr	r7, [pc, #32]	; (10d18 <RADIO_FSKPayloadReady+0x100>)
   10cf6:	47b8      	blx	r7
   10cf8:	7832      	ldrb	r2, [r6, #0]
   10cfa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   10cfc:	b2d2      	uxtb	r2, r2
   10cfe:	2000      	movs	r0, #0
   10d00:	47b8      	blx	r7
   10d02:	e7cc      	b.n	10c9e <RADIO_FSKPayloadReady+0x86>
   10d04:	00003bc5 	.word	0x00003bc5
   10d08:	20001398 	.word	0x20001398
   10d0c:	20001bcc 	.word	0x20001bcc
   10d10:	00009915 	.word	0x00009915
   10d14:	00000115 	.word	0x00000115
   10d18:	00003c31 	.word	0x00003c31
   10d1c:	00000155 	.word	0x00000155
   10d20:	000109a5 	.word	0x000109a5
   10d24:	000105c9 	.word	0x000105c9
   10d28:	200013c4 	.word	0x200013c4

00010d2c <Radio_SetClockInput>:
   10d2c:	b510      	push	{r4, lr}
   10d2e:	4b08      	ldr	r3, [pc, #32]	; (10d50 <Radio_SetClockInput+0x24>)
   10d30:	3355      	adds	r3, #85	; 0x55
   10d32:	781b      	ldrb	r3, [r3, #0]
   10d34:	2b00      	cmp	r3, #0
   10d36:	d10a      	bne.n	10d4e <Radio_SetClockInput+0x22>
   10d38:	4b06      	ldr	r3, [pc, #24]	; (10d54 <Radio_SetClockInput+0x28>)
   10d3a:	204b      	movs	r0, #75	; 0x4b
   10d3c:	4798      	blx	r3
   10d3e:	2110      	movs	r1, #16
   10d40:	4301      	orrs	r1, r0
   10d42:	4b05      	ldr	r3, [pc, #20]	; (10d58 <Radio_SetClockInput+0x2c>)
   10d44:	b2c9      	uxtb	r1, r1
   10d46:	204b      	movs	r0, #75	; 0x4b
   10d48:	4798      	blx	r3
   10d4a:	4b04      	ldr	r3, [pc, #16]	; (10d5c <Radio_SetClockInput+0x30>)
   10d4c:	4798      	blx	r3
   10d4e:	bd10      	pop	{r4, pc}
   10d50:	20001398 	.word	0x20001398
   10d54:	00003bc5 	.word	0x00003bc5
   10d58:	00003b9d 	.word	0x00003b9d
   10d5c:	00003ce5 	.word	0x00003ce5

00010d60 <Radio_ResetClockInput>:
   10d60:	b510      	push	{r4, lr}
   10d62:	4b04      	ldr	r3, [pc, #16]	; (10d74 <Radio_ResetClockInput+0x14>)
   10d64:	3355      	adds	r3, #85	; 0x55
   10d66:	781b      	ldrb	r3, [r3, #0]
   10d68:	2b00      	cmp	r3, #0
   10d6a:	d101      	bne.n	10d70 <Radio_ResetClockInput+0x10>
   10d6c:	4b02      	ldr	r3, [pc, #8]	; (10d78 <Radio_ResetClockInput+0x18>)
   10d6e:	4798      	blx	r3
   10d70:	bd10      	pop	{r4, pc}
   10d72:	46c0      	nop			; (mov r8, r8)
   10d74:	20001398 	.word	0x20001398
   10d78:	00003d01 	.word	0x00003d01

00010d7c <RADIO_InitDefaultAttributes>:
   10d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10d7e:	2501      	movs	r5, #1
   10d80:	4b64      	ldr	r3, [pc, #400]	; (10f14 <RADIO_InitDefaultAttributes+0x198>)
   10d82:	4c65      	ldr	r4, [pc, #404]	; (10f18 <RADIO_InitDefaultAttributes+0x19c>)
   10d84:	701d      	strb	r5, [r3, #0]
   10d86:	4b65      	ldr	r3, [pc, #404]	; (10f1c <RADIO_InitDefaultAttributes+0x1a0>)
   10d88:	2207      	movs	r2, #7
   10d8a:	6023      	str	r3, [r4, #0]
   10d8c:	4b64      	ldr	r3, [pc, #400]	; (10f20 <RADIO_InitDefaultAttributes+0x1a4>)
   10d8e:	18a1      	adds	r1, r4, r2
   10d90:	6063      	str	r3, [r4, #4]
   10d92:	4b64      	ldr	r3, [pc, #400]	; (10f24 <RADIO_InitDefaultAttributes+0x1a8>)
   10d94:	0027      	movs	r7, r4
   10d96:	60a3      	str	r3, [r4, #8]
   10d98:	0023      	movs	r3, r4
   10d9a:	3334      	adds	r3, #52	; 0x34
   10d9c:	701d      	strb	r5, [r3, #0]
   10d9e:	0023      	movs	r3, r4
   10da0:	3336      	adds	r3, #54	; 0x36
   10da2:	701a      	strb	r2, [r3, #0]
   10da4:	1ce3      	adds	r3, r4, #3
   10da6:	77dd      	strb	r5, [r3, #31]
   10da8:	0023      	movs	r3, r4
   10daa:	3333      	adds	r3, #51	; 0x33
   10dac:	701d      	strb	r5, [r3, #0]
   10dae:	2300      	movs	r3, #0
   10db0:	77cb      	strb	r3, [r1, #31]
   10db2:	2108      	movs	r1, #8
   10db4:	82a1      	strh	r1, [r4, #20]
   10db6:	0021      	movs	r1, r4
   10db8:	3135      	adds	r1, #53	; 0x35
   10dba:	700a      	strb	r2, [r1, #0]
   10dbc:	1d22      	adds	r2, r4, #4
   10dbe:	77d5      	strb	r5, [r2, #31]
   10dc0:	1d62      	adds	r2, r4, #5
   10dc2:	77d3      	strb	r3, [r2, #31]
   10dc4:	1da2      	adds	r2, r4, #6
   10dc6:	77d3      	strb	r3, [r2, #31]
   10dc8:	2194      	movs	r1, #148	; 0x94
   10dca:	22c1      	movs	r2, #193	; 0xc1
   10dcc:	76a1      	strb	r1, [r4, #26]
   10dce:	7662      	strb	r2, [r4, #25]
   10dd0:	76e2      	strb	r2, [r4, #27]
   10dd2:	3991      	subs	r1, #145	; 0x91
   10dd4:	1ca2      	adds	r2, r4, #2
   10dd6:	77d1      	strb	r1, [r2, #31]
   10dd8:	2234      	movs	r2, #52	; 0x34
   10dda:	7622      	strb	r2, [r4, #24]
   10ddc:	0022      	movs	r2, r4
   10dde:	317d      	adds	r1, #125	; 0x7d
   10de0:	3232      	adds	r2, #50	; 0x32
   10de2:	7011      	strb	r1, [r2, #0]
   10de4:	4a50      	ldr	r2, [pc, #320]	; (10f28 <RADIO_InitDefaultAttributes+0x1ac>)
   10de6:	397e      	subs	r1, #126	; 0x7e
   10de8:	60e2      	str	r2, [r4, #12]
   10dea:	0022      	movs	r2, r4
   10dec:	3237      	adds	r2, #55	; 0x37
   10dee:	7011      	strb	r1, [r2, #0]
   10df0:	0022      	movs	r2, r4
   10df2:	3109      	adds	r1, #9
   10df4:	3238      	adds	r2, #56	; 0x38
   10df6:	7011      	strb	r1, [r2, #0]
   10df8:	0022      	movs	r2, r4
   10dfa:	3107      	adds	r1, #7
   10dfc:	3239      	adds	r2, #57	; 0x39
   10dfe:	7011      	strb	r1, [r2, #0]
   10e00:	0022      	movs	r2, r4
   10e02:	322c      	adds	r2, #44	; 0x2c
   10e04:	7013      	strb	r3, [r2, #0]
   10e06:	4a49      	ldr	r2, [pc, #292]	; (10f2c <RADIO_InitDefaultAttributes+0x1b0>)
   10e08:	82e3      	strh	r3, [r4, #22]
   10e0a:	62a2      	str	r2, [r4, #40]	; 0x28
   10e0c:	0022      	movs	r2, r4
   10e0e:	324c      	adds	r2, #76	; 0x4c
   10e10:	8013      	strh	r3, [r2, #0]
   10e12:	0022      	movs	r2, r4
   10e14:	324e      	adds	r2, #78	; 0x4e
   10e16:	7013      	strb	r3, [r2, #0]
   10e18:	0022      	movs	r2, r4
   10e1a:	324f      	adds	r2, #79	; 0x4f
   10e1c:	7013      	strb	r3, [r2, #0]
   10e1e:	0022      	movs	r2, r4
   10e20:	3240      	adds	r2, #64	; 0x40
   10e22:	7013      	strb	r3, [r2, #0]
   10e24:	0022      	movs	r2, r4
   10e26:	3241      	adds	r2, #65	; 0x41
   10e28:	7013      	strb	r3, [r2, #0]
   10e2a:	0022      	movs	r2, r4
   10e2c:	3254      	adds	r2, #84	; 0x54
   10e2e:	7013      	strb	r3, [r2, #0]
   10e30:	0022      	movs	r2, r4
   10e32:	3255      	adds	r2, #85	; 0x55
   10e34:	7015      	strb	r5, [r2, #0]
   10e36:	0022      	movs	r2, r4
   10e38:	3258      	adds	r2, #88	; 0x58
   10e3a:	6463      	str	r3, [r4, #68]	; 0x44
   10e3c:	64a3      	str	r3, [r4, #72]	; 0x48
   10e3e:	87a3      	strh	r3, [r4, #60]	; 0x3c
   10e40:	87e3      	strh	r3, [r4, #62]	; 0x3e
   10e42:	7013      	strb	r3, [r2, #0]
   10e44:	3730      	adds	r7, #48	; 0x30
   10e46:	783b      	ldrb	r3, [r7, #0]
   10e48:	2b00      	cmp	r3, #0
   10e4a:	d151      	bne.n	10ef0 <RADIO_InitDefaultAttributes+0x174>
   10e4c:	4838      	ldr	r0, [pc, #224]	; (10f30 <RADIO_InitDefaultAttributes+0x1b4>)
   10e4e:	4e39      	ldr	r6, [pc, #228]	; (10f34 <RADIO_InitDefaultAttributes+0x1b8>)
   10e50:	47b0      	blx	r6
   10e52:	2808      	cmp	r0, #8
   10e54:	d149      	bne.n	10eea <RADIO_InitDefaultAttributes+0x16e>
   10e56:	4838      	ldr	r0, [pc, #224]	; (10f38 <RADIO_InitDefaultAttributes+0x1bc>)
   10e58:	47b0      	blx	r6
   10e5a:	2808      	cmp	r0, #8
   10e5c:	d145      	bne.n	10eea <RADIO_InitDefaultAttributes+0x16e>
   10e5e:	4837      	ldr	r0, [pc, #220]	; (10f3c <RADIO_InitDefaultAttributes+0x1c0>)
   10e60:	47b0      	blx	r6
   10e62:	2808      	cmp	r0, #8
   10e64:	d141      	bne.n	10eea <RADIO_InitDefaultAttributes+0x16e>
   10e66:	4836      	ldr	r0, [pc, #216]	; (10f40 <RADIO_InitDefaultAttributes+0x1c4>)
   10e68:	47b0      	blx	r6
   10e6a:	2808      	cmp	r0, #8
   10e6c:	d13d      	bne.n	10eea <RADIO_InitDefaultAttributes+0x16e>
   10e6e:	703d      	strb	r5, [r7, #0]
   10e70:	4b34      	ldr	r3, [pc, #208]	; (10f44 <RADIO_InitDefaultAttributes+0x1c8>)
   10e72:	4798      	blx	r3
   10e74:	4b34      	ldr	r3, [pc, #208]	; (10f48 <RADIO_InitDefaultAttributes+0x1cc>)
   10e76:	4798      	blx	r3
   10e78:	2800      	cmp	r0, #0
   10e7a:	d107      	bne.n	10e8c <RADIO_InitDefaultAttributes+0x110>
   10e7c:	0023      	movs	r3, r4
   10e7e:	3355      	adds	r3, #85	; 0x55
   10e80:	7018      	strb	r0, [r3, #0]
   10e82:	4b32      	ldr	r3, [pc, #200]	; (10f4c <RADIO_InitDefaultAttributes+0x1d0>)
   10e84:	4798      	blx	r3
   10e86:	0023      	movs	r3, r4
   10e88:	3354      	adds	r3, #84	; 0x54
   10e8a:	7018      	strb	r0, [r3, #0]
   10e8c:	4b30      	ldr	r3, [pc, #192]	; (10f50 <RADIO_InitDefaultAttributes+0x1d4>)
   10e8e:	4798      	blx	r3
   10e90:	2201      	movs	r2, #1
   10e92:	2100      	movs	r1, #0
   10e94:	0010      	movs	r0, r2
   10e96:	4f2f      	ldr	r7, [pc, #188]	; (10f54 <RADIO_InitDefaultAttributes+0x1d8>)
   10e98:	47b8      	blx	r7
   10e9a:	6820      	ldr	r0, [r4, #0]
   10e9c:	4b2e      	ldr	r3, [pc, #184]	; (10f58 <RADIO_InitDefaultAttributes+0x1dc>)
   10e9e:	4798      	blx	r3
   10ea0:	2142      	movs	r1, #66	; 0x42
   10ea2:	203b      	movs	r0, #59	; 0x3b
   10ea4:	4d2d      	ldr	r5, [pc, #180]	; (10f5c <RADIO_InitDefaultAttributes+0x1e0>)
   10ea6:	47a8      	blx	r5
   10ea8:	203b      	movs	r0, #59	; 0x3b
   10eaa:	4b2d      	ldr	r3, [pc, #180]	; (10f60 <RADIO_InitDefaultAttributes+0x1e4>)
   10eac:	4798      	blx	r3
   10eae:	2620      	movs	r6, #32
   10eb0:	4006      	ands	r6, r0
   10eb2:	d1f9      	bne.n	10ea8 <RADIO_InitDefaultAttributes+0x12c>
   10eb4:	2123      	movs	r1, #35	; 0x23
   10eb6:	200c      	movs	r0, #12
   10eb8:	47a8      	blx	r5
   10eba:	21aa      	movs	r1, #170	; 0xaa
   10ebc:	201f      	movs	r0, #31
   10ebe:	47a8      	blx	r5
   10ec0:	21ff      	movs	r1, #255	; 0xff
   10ec2:	2032      	movs	r0, #50	; 0x32
   10ec4:	47a8      	blx	r5
   10ec6:	2140      	movs	r1, #64	; 0x40
   10ec8:	2031      	movs	r0, #49	; 0x31
   10eca:	47a8      	blx	r5
   10ecc:	2201      	movs	r2, #1
   10ece:	0030      	movs	r0, r6
   10ed0:	0011      	movs	r1, r2
   10ed2:	47b8      	blx	r7
   10ed4:	21ff      	movs	r1, #255	; 0xff
   10ed6:	2023      	movs	r0, #35	; 0x23
   10ed8:	47a8      	blx	r5
   10eda:	4b21      	ldr	r3, [pc, #132]	; (10f60 <RADIO_InitDefaultAttributes+0x1e4>)
   10edc:	2042      	movs	r0, #66	; 0x42
   10ede:	4798      	blx	r3
   10ee0:	3431      	adds	r4, #49	; 0x31
   10ee2:	4b20      	ldr	r3, [pc, #128]	; (10f64 <RADIO_InitDefaultAttributes+0x1e8>)
   10ee4:	7020      	strb	r0, [r4, #0]
   10ee6:	4798      	blx	r3
   10ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10eea:	4b1f      	ldr	r3, [pc, #124]	; (10f68 <RADIO_InitDefaultAttributes+0x1ec>)
   10eec:	4798      	blx	r3
   10eee:	e7bf      	b.n	10e70 <RADIO_InitDefaultAttributes+0xf4>
   10ef0:	0023      	movs	r3, r4
   10ef2:	332d      	adds	r3, #45	; 0x2d
   10ef4:	4d1d      	ldr	r5, [pc, #116]	; (10f6c <RADIO_InitDefaultAttributes+0x1f0>)
   10ef6:	7818      	ldrb	r0, [r3, #0]
   10ef8:	47a8      	blx	r5
   10efa:	0023      	movs	r3, r4
   10efc:	332e      	adds	r3, #46	; 0x2e
   10efe:	7818      	ldrb	r0, [r3, #0]
   10f00:	47a8      	blx	r5
   10f02:	0023      	movs	r3, r4
   10f04:	332f      	adds	r3, #47	; 0x2f
   10f06:	7818      	ldrb	r0, [r3, #0]
   10f08:	47a8      	blx	r5
   10f0a:	0023      	movs	r3, r4
   10f0c:	3350      	adds	r3, #80	; 0x50
   10f0e:	7818      	ldrb	r0, [r3, #0]
   10f10:	47a8      	blx	r5
   10f12:	e7ad      	b.n	10e70 <RADIO_InitDefaultAttributes+0xf4>
   10f14:	20001bcf 	.word	0x20001bcf
   10f18:	20001398 	.word	0x20001398
   10f1c:	33be27a0 	.word	0x33be27a0
   10f20:	000061a8 	.word	0x000061a8
   10f24:	0000c350 	.word	0x0000c350
   10f28:	00003a98 	.word	0x00003a98
   10f2c:	20001acc 	.word	0x20001acc
   10f30:	200013c5 	.word	0x200013c5
   10f34:	000095d5 	.word	0x000095d5
   10f38:	200013c6 	.word	0x200013c6
   10f3c:	200013c7 	.word	0x200013c7
   10f40:	200013e8 	.word	0x200013e8
   10f44:	00003b5d 	.word	0x00003b5d
   10f48:	00003ce1 	.word	0x00003ce1
   10f4c:	00003cdd 	.word	0x00003cdd
   10f50:	00010d2d 	.word	0x00010d2d
   10f54:	00009c6d 	.word	0x00009c6d
   10f58:	0000ffc1 	.word	0x0000ffc1
   10f5c:	00003b9d 	.word	0x00003b9d
   10f60:	00003bc5 	.word	0x00003bc5
   10f64:	00010d61 	.word	0x00010d61
   10f68:	00009519 	.word	0x00009519
   10f6c:	00009915 	.word	0x00009915

00010f70 <RADIO_Receive>:
   10f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10f72:	7803      	ldrb	r3, [r0, #0]
   10f74:	0006      	movs	r6, r0
   10f76:	4d24      	ldr	r5, [pc, #144]	; (11008 <RADIO_Receive+0x98>)
   10f78:	2b00      	cmp	r3, #0
   10f7a:	d11d      	bne.n	10fb8 <RADIO_Receive+0x48>
   10f7c:	782b      	ldrb	r3, [r5, #0]
   10f7e:	2004      	movs	r0, #4
   10f80:	2b01      	cmp	r3, #1
   10f82:	d118      	bne.n	10fb6 <RADIO_Receive+0x46>
   10f84:	4c21      	ldr	r4, [pc, #132]	; (1100c <RADIO_Receive+0x9c>)
   10f86:	4f22      	ldr	r7, [pc, #136]	; (11010 <RADIO_Receive+0xa0>)
   10f88:	0023      	movs	r3, r4
   10f8a:	332f      	adds	r3, #47	; 0x2f
   10f8c:	7818      	ldrb	r0, [r3, #0]
   10f8e:	47b8      	blx	r7
   10f90:	0023      	movs	r3, r4
   10f92:	3334      	adds	r3, #52	; 0x34
   10f94:	781b      	ldrb	r3, [r3, #0]
   10f96:	2b00      	cmp	r3, #0
   10f98:	d102      	bne.n	10fa0 <RADIO_Receive+0x30>
   10f9a:	342e      	adds	r4, #46	; 0x2e
   10f9c:	7820      	ldrb	r0, [r4, #0]
   10f9e:	47b8      	blx	r7
   10fa0:	8872      	ldrh	r2, [r6, #2]
   10fa2:	4b1c      	ldr	r3, [pc, #112]	; (11014 <RADIO_Receive+0xa4>)
   10fa4:	2008      	movs	r0, #8
   10fa6:	801a      	strh	r2, [r3, #0]
   10fa8:	2304      	movs	r3, #4
   10faa:	702b      	strb	r3, [r5, #0]
   10fac:	4b1a      	ldr	r3, [pc, #104]	; (11018 <RADIO_Receive+0xa8>)
   10fae:	4798      	blx	r3
   10fb0:	4b1a      	ldr	r3, [pc, #104]	; (1101c <RADIO_Receive+0xac>)
   10fb2:	4798      	blx	r3
   10fb4:	2000      	movs	r0, #0
   10fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10fb8:	782b      	ldrb	r3, [r5, #0]
   10fba:	2000      	movs	r0, #0
   10fbc:	2b01      	cmp	r3, #1
   10fbe:	d0fa      	beq.n	10fb6 <RADIO_Receive+0x46>
   10fc0:	782b      	ldrb	r3, [r5, #0]
   10fc2:	3003      	adds	r0, #3
   10fc4:	2b04      	cmp	r3, #4
   10fc6:	d1f6      	bne.n	10fb6 <RADIO_Receive+0x46>
   10fc8:	4c10      	ldr	r4, [pc, #64]	; (1100c <RADIO_Receive+0x9c>)
   10fca:	4e11      	ldr	r6, [pc, #68]	; (11010 <RADIO_Receive+0xa0>)
   10fcc:	0023      	movs	r3, r4
   10fce:	332f      	adds	r3, #47	; 0x2f
   10fd0:	7818      	ldrb	r0, [r3, #0]
   10fd2:	47b0      	blx	r6
   10fd4:	0023      	movs	r3, r4
   10fd6:	3334      	adds	r3, #52	; 0x34
   10fd8:	781b      	ldrb	r3, [r3, #0]
   10fda:	2b00      	cmp	r3, #0
   10fdc:	d103      	bne.n	10fe6 <RADIO_Receive+0x76>
   10fde:	0023      	movs	r3, r4
   10fe0:	332e      	adds	r3, #46	; 0x2e
   10fe2:	7818      	ldrb	r0, [r3, #0]
   10fe4:	47b0      	blx	r6
   10fe6:	2200      	movs	r2, #0
   10fe8:	3434      	adds	r4, #52	; 0x34
   10fea:	7821      	ldrb	r1, [r4, #0]
   10fec:	0010      	movs	r0, r2
   10fee:	4b0c      	ldr	r3, [pc, #48]	; (11020 <RADIO_Receive+0xb0>)
   10ff0:	4798      	blx	r3
   10ff2:	4b0c      	ldr	r3, [pc, #48]	; (11024 <RADIO_Receive+0xb4>)
   10ff4:	4798      	blx	r3
   10ff6:	2301      	movs	r3, #1
   10ff8:	2008      	movs	r0, #8
   10ffa:	4c0b      	ldr	r4, [pc, #44]	; (11028 <RADIO_Receive+0xb8>)
   10ffc:	702b      	strb	r3, [r5, #0]
   10ffe:	47a0      	blx	r4
   11000:	2002      	movs	r0, #2
   11002:	47a0      	blx	r4
   11004:	e7d6      	b.n	10fb4 <RADIO_Receive+0x44>
   11006:	46c0      	nop			; (mov r8, r8)
   11008:	20001bcf 	.word	0x20001bcf
   1100c:	20001398 	.word	0x20001398
   11010:	00009915 	.word	0x00009915
   11014:	20000eb0 	.word	0x20000eb0
   11018:	000105c9 	.word	0x000105c9
   1101c:	00010d2d 	.word	0x00010d2d
   11020:	00009c6d 	.word	0x00009c6d
   11024:	00010d61 	.word	0x00010d61
   11028:	000105f5 	.word	0x000105f5

0001102c <RADIO_TxHandler>:
   1102c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1102e:	4c5d      	ldr	r4, [pc, #372]	; (111a4 <RADIO_TxHandler+0x178>)
   11030:	b087      	sub	sp, #28
   11032:	47a0      	blx	r4
   11034:	4d5c      	ldr	r5, [pc, #368]	; (111a8 <RADIO_TxHandler+0x17c>)
   11036:	002b      	movs	r3, r5
   11038:	332d      	adds	r3, #45	; 0x2d
   1103a:	7818      	ldrb	r0, [r3, #0]
   1103c:	4b5b      	ldr	r3, [pc, #364]	; (111ac <RADIO_TxHandler+0x180>)
   1103e:	4798      	blx	r3
   11040:	002b      	movs	r3, r5
   11042:	3341      	adds	r3, #65	; 0x41
   11044:	781b      	ldrb	r3, [r3, #0]
   11046:	2b00      	cmp	r3, #0
   11048:	d035      	beq.n	110b6 <RADIO_TxHandler+0x8a>
   1104a:	8faf      	ldrh	r7, [r5, #60]	; 0x3c
   1104c:	47a0      	blx	r4
   1104e:	2000      	movs	r0, #0
   11050:	4b57      	ldr	r3, [pc, #348]	; (111b0 <RADIO_TxHandler+0x184>)
   11052:	4798      	blx	r3
   11054:	6828      	ldr	r0, [r5, #0]
   11056:	4b57      	ldr	r3, [pc, #348]	; (111b4 <RADIO_TxHandler+0x188>)
   11058:	4798      	blx	r3
   1105a:	2400      	movs	r4, #0
   1105c:	002b      	movs	r3, r5
   1105e:	2201      	movs	r2, #1
   11060:	334c      	adds	r3, #76	; 0x4c
   11062:	0021      	movs	r1, r4
   11064:	0020      	movs	r0, r4
   11066:	4e54      	ldr	r6, [pc, #336]	; (111b8 <RADIO_TxHandler+0x18c>)
   11068:	801c      	strh	r4, [r3, #0]
   1106a:	47b0      	blx	r6
   1106c:	4b53      	ldr	r3, [pc, #332]	; (111bc <RADIO_TxHandler+0x190>)
   1106e:	2109      	movs	r1, #9
   11070:	2012      	movs	r0, #18
   11072:	4798      	blx	r3
   11074:	2201      	movs	r2, #1
   11076:	0021      	movs	r1, r4
   11078:	2005      	movs	r0, #5
   1107a:	47b0      	blx	r6
   1107c:	4b50      	ldr	r3, [pc, #320]	; (111c0 <RADIO_TxHandler+0x194>)
   1107e:	4798      	blx	r3
   11080:	22fa      	movs	r2, #250	; 0xfa
   11082:	2300      	movs	r3, #0
   11084:	0092      	lsls	r2, r2, #2
   11086:	4c4f      	ldr	r4, [pc, #316]	; (111c4 <RADIO_TxHandler+0x198>)
   11088:	47a0      	blx	r4
   1108a:	4b4f      	ldr	r3, [pc, #316]	; (111c8 <RADIO_TxHandler+0x19c>)
   1108c:	3701      	adds	r7, #1
   1108e:	6018      	str	r0, [r3, #0]
   11090:	6059      	str	r1, [r3, #4]
   11092:	b2bf      	uxth	r7, r7
   11094:	4b4a      	ldr	r3, [pc, #296]	; (111c0 <RADIO_TxHandler+0x194>)
   11096:	4798      	blx	r3
   11098:	22fa      	movs	r2, #250	; 0xfa
   1109a:	2300      	movs	r3, #0
   1109c:	0092      	lsls	r2, r2, #2
   1109e:	4e49      	ldr	r6, [pc, #292]	; (111c4 <RADIO_TxHandler+0x198>)
   110a0:	47b0      	blx	r6
   110a2:	4b49      	ldr	r3, [pc, #292]	; (111c8 <RADIO_TxHandler+0x19c>)
   110a4:	2400      	movs	r4, #0
   110a6:	681a      	ldr	r2, [r3, #0]
   110a8:	685b      	ldr	r3, [r3, #4]
   110aa:	1a80      	subs	r0, r0, r2
   110ac:	4199      	sbcs	r1, r3
   110ae:	428c      	cmp	r4, r1
   110b0:	d101      	bne.n	110b6 <RADIO_TxHandler+0x8a>
   110b2:	4287      	cmp	r7, r0
   110b4:	d845      	bhi.n	11142 <RADIO_TxHandler+0x116>
   110b6:	2001      	movs	r0, #1
   110b8:	4b3d      	ldr	r3, [pc, #244]	; (111b0 <RADIO_TxHandler+0x184>)
   110ba:	4798      	blx	r3
   110bc:	4b43      	ldr	r3, [pc, #268]	; (111cc <RADIO_TxHandler+0x1a0>)
   110be:	2004      	movs	r0, #4
   110c0:	4798      	blx	r3
   110c2:	4b43      	ldr	r3, [pc, #268]	; (111d0 <RADIO_TxHandler+0x1a4>)
   110c4:	4c3d      	ldr	r4, [pc, #244]	; (111bc <RADIO_TxHandler+0x190>)
   110c6:	781e      	ldrb	r6, [r3, #0]
   110c8:	4f42      	ldr	r7, [pc, #264]	; (111d4 <RADIO_TxHandler+0x1a8>)
   110ca:	2e01      	cmp	r6, #1
   110cc:	d158      	bne.n	11180 <RADIO_TxHandler+0x154>
   110ce:	7839      	ldrb	r1, [r7, #0]
   110d0:	2022      	movs	r0, #34	; 0x22
   110d2:	47a0      	blx	r4
   110d4:	4b40      	ldr	r3, [pc, #256]	; (111d8 <RADIO_TxHandler+0x1ac>)
   110d6:	200a      	movs	r0, #10
   110d8:	4798      	blx	r3
   110da:	21f0      	movs	r1, #240	; 0xf0
   110dc:	4008      	ands	r0, r1
   110de:	39e8      	subs	r1, #232	; 0xe8
   110e0:	4301      	orrs	r1, r0
   110e2:	200a      	movs	r0, #10
   110e4:	47a0      	blx	r4
   110e6:	2140      	movs	r1, #64	; 0x40
   110e8:	0008      	movs	r0, r1
   110ea:	47a0      	blx	r4
   110ec:	2100      	movs	r1, #0
   110ee:	2041      	movs	r0, #65	; 0x41
   110f0:	47a0      	blx	r4
   110f2:	4b37      	ldr	r3, [pc, #220]	; (111d0 <RADIO_TxHandler+0x1a4>)
   110f4:	0032      	movs	r2, r6
   110f6:	7819      	ldrb	r1, [r3, #0]
   110f8:	0030      	movs	r0, r6
   110fa:	4b2f      	ldr	r3, [pc, #188]	; (111b8 <RADIO_TxHandler+0x18c>)
   110fc:	4798      	blx	r3
   110fe:	4b37      	ldr	r3, [pc, #220]	; (111dc <RADIO_TxHandler+0x1b0>)
   11100:	783a      	ldrb	r2, [r7, #0]
   11102:	6819      	ldr	r1, [r3, #0]
   11104:	2000      	movs	r0, #0
   11106:	4b36      	ldr	r3, [pc, #216]	; (111e0 <RADIO_TxHandler+0x1b4>)
   11108:	4798      	blx	r3
   1110a:	002b      	movs	r3, r5
   1110c:	3334      	adds	r3, #52	; 0x34
   1110e:	7819      	ldrb	r1, [r3, #0]
   11110:	2200      	movs	r2, #0
   11112:	2003      	movs	r0, #3
   11114:	4b28      	ldr	r3, [pc, #160]	; (111b8 <RADIO_TxHandler+0x18c>)
   11116:	4798      	blx	r3
   11118:	4b29      	ldr	r3, [pc, #164]	; (111c0 <RADIO_TxHandler+0x194>)
   1111a:	4798      	blx	r3
   1111c:	4b31      	ldr	r3, [pc, #196]	; (111e4 <RADIO_TxHandler+0x1b8>)
   1111e:	6018      	str	r0, [r3, #0]
   11120:	6059      	str	r1, [r3, #4]
   11122:	68eb      	ldr	r3, [r5, #12]
   11124:	2b00      	cmp	r3, #0
   11126:	d009      	beq.n	1113c <RADIO_TxHandler+0x110>
   11128:	21fa      	movs	r1, #250	; 0xfa
   1112a:	2200      	movs	r2, #0
   1112c:	0089      	lsls	r1, r1, #2
   1112e:	352f      	adds	r5, #47	; 0x2f
   11130:	4359      	muls	r1, r3
   11132:	7828      	ldrb	r0, [r5, #0]
   11134:	4b2c      	ldr	r3, [pc, #176]	; (111e8 <RADIO_TxHandler+0x1bc>)
   11136:	9200      	str	r2, [sp, #0]
   11138:	4c2c      	ldr	r4, [pc, #176]	; (111ec <RADIO_TxHandler+0x1c0>)
   1113a:	47a0      	blx	r4
   1113c:	2000      	movs	r0, #0
   1113e:	b007      	add	sp, #28
   11140:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11142:	4e2b      	ldr	r6, [pc, #172]	; (111f0 <RADIO_TxHandler+0x1c4>)
   11144:	4b2b      	ldr	r3, [pc, #172]	; (111f4 <RADIO_TxHandler+0x1c8>)
   11146:	0030      	movs	r0, r6
   11148:	4798      	blx	r3
   1114a:	233e      	movs	r3, #62	; 0x3e
   1114c:	5eea      	ldrsh	r2, [r5, r3]
   1114e:	2100      	movs	r1, #0
   11150:	5e73      	ldrsh	r3, [r6, r1]
   11152:	429a      	cmp	r2, r3
   11154:	da9e      	bge.n	11094 <RADIO_TxHandler+0x68>
   11156:	0020      	movs	r0, r4
   11158:	4b27      	ldr	r3, [pc, #156]	; (111f8 <RADIO_TxHandler+0x1cc>)
   1115a:	4798      	blx	r3
   1115c:	4b27      	ldr	r3, [pc, #156]	; (111fc <RADIO_TxHandler+0x1d0>)
   1115e:	4798      	blx	r3
   11160:	2307      	movs	r3, #7
   11162:	2201      	movs	r2, #1
   11164:	a903      	add	r1, sp, #12
   11166:	700b      	strb	r3, [r1, #0]
   11168:	4b25      	ldr	r3, [pc, #148]	; (11200 <RADIO_TxHandler+0x1d4>)
   1116a:	701a      	strb	r2, [r3, #0]
   1116c:	4b25      	ldr	r3, [pc, #148]	; (11204 <RADIO_TxHandler+0x1d8>)
   1116e:	781b      	ldrb	r3, [r3, #0]
   11170:	079b      	lsls	r3, r3, #30
   11172:	d5a0      	bpl.n	110b6 <RADIO_TxHandler+0x8a>
   11174:	692b      	ldr	r3, [r5, #16]
   11176:	2b00      	cmp	r3, #0
   11178:	d09d      	beq.n	110b6 <RADIO_TxHandler+0x8a>
   1117a:	2002      	movs	r0, #2
   1117c:	4798      	blx	r3
   1117e:	e79a      	b.n	110b6 <RADIO_TxHandler+0x8a>
   11180:	2100      	movs	r1, #0
   11182:	2040      	movs	r0, #64	; 0x40
   11184:	47a0      	blx	r4
   11186:	2100      	movs	r1, #0
   11188:	2041      	movs	r0, #65	; 0x41
   1118a:	47a0      	blx	r4
   1118c:	002b      	movs	r3, r5
   1118e:	2000      	movs	r0, #0
   11190:	3358      	adds	r3, #88	; 0x58
   11192:	7839      	ldrb	r1, [r7, #0]
   11194:	7018      	strb	r0, [r3, #0]
   11196:	47a0      	blx	r4
   11198:	4b10      	ldr	r3, [pc, #64]	; (111dc <RADIO_TxHandler+0x1b0>)
   1119a:	7839      	ldrb	r1, [r7, #0]
   1119c:	6818      	ldr	r0, [r3, #0]
   1119e:	4b1a      	ldr	r3, [pc, #104]	; (11208 <RADIO_TxHandler+0x1dc>)
   111a0:	4798      	blx	r3
   111a2:	e7b2      	b.n	1110a <RADIO_TxHandler+0xde>
   111a4:	00010d2d 	.word	0x00010d2d
   111a8:	20001398 	.word	0x20001398
   111ac:	00009915 	.word	0x00009915
   111b0:	0001087d 	.word	0x0001087d
   111b4:	0000ffc1 	.word	0x0000ffc1
   111b8:	00009c6d 	.word	0x00009c6d
   111bc:	00003b9d 	.word	0x00003b9d
   111c0:	000095b1 	.word	0x000095b1
   111c4:	00011ac9 	.word	0x00011ac9
   111c8:	20000ea8 	.word	0x20000ea8
   111cc:	00010009 	.word	0x00010009
   111d0:	200013cc 	.word	0x200013cc
   111d4:	20000ec4 	.word	0x20000ec4
   111d8:	00003bc5 	.word	0x00003bc5
   111dc:	20000ec0 	.word	0x20000ec0
   111e0:	00003bf1 	.word	0x00003bf1
   111e4:	20000eb8 	.word	0x20000eb8
   111e8:	000109d9 	.word	0x000109d9
   111ec:	00009609 	.word	0x00009609
   111f0:	20000ea4 	.word	0x20000ea4
   111f4:	00009e31 	.word	0x00009e31
   111f8:	000109a5 	.word	0x000109a5
   111fc:	00010d61 	.word	0x00010d61
   11200:	20001bcf 	.word	0x20001bcf
   11204:	20001bce 	.word	0x20001bce
   11208:	000106f9 	.word	0x000106f9

0001120c <RADIO_TxDoneHandler>:
   1120c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1120e:	4b35      	ldr	r3, [pc, #212]	; (112e4 <RADIO_TxDoneHandler+0xd8>)
   11210:	b087      	sub	sp, #28
   11212:	881a      	ldrh	r2, [r3, #0]
   11214:	06d2      	lsls	r2, r2, #27
   11216:	0fd2      	lsrs	r2, r2, #31
   11218:	9200      	str	r2, [sp, #0]
   1121a:	466a      	mov	r2, sp
   1121c:	7810      	ldrb	r0, [r2, #0]
   1121e:	881a      	ldrh	r2, [r3, #0]
   11220:	2801      	cmp	r0, #1
   11222:	d12b      	bne.n	1127c <RADIO_TxDoneHandler+0x70>
   11224:	4c30      	ldr	r4, [pc, #192]	; (112e8 <RADIO_TxDoneHandler+0xdc>)
   11226:	2110      	movs	r1, #16
   11228:	0027      	movs	r7, r4
   1122a:	2500      	movs	r5, #0
   1122c:	438a      	bics	r2, r1
   1122e:	801a      	strh	r2, [r3, #0]
   11230:	3734      	adds	r7, #52	; 0x34
   11232:	0002      	movs	r2, r0
   11234:	7839      	ldrb	r1, [r7, #0]
   11236:	4b2d      	ldr	r3, [pc, #180]	; (112ec <RADIO_TxDoneHandler+0xe0>)
   11238:	4798      	blx	r3
   1123a:	68e3      	ldr	r3, [r4, #12]
   1123c:	ae03      	add	r6, sp, #12
   1123e:	9304      	str	r3, [sp, #16]
   11240:	7035      	strb	r5, [r6, #0]
   11242:	002a      	movs	r2, r5
   11244:	4b29      	ldr	r3, [pc, #164]	; (112ec <RADIO_TxDoneHandler+0xe0>)
   11246:	7839      	ldrb	r1, [r7, #0]
   11248:	0028      	movs	r0, r5
   1124a:	4798      	blx	r3
   1124c:	466a      	mov	r2, sp
   1124e:	4b28      	ldr	r3, [pc, #160]	; (112f0 <RADIO_TxDoneHandler+0xe4>)
   11250:	7812      	ldrb	r2, [r2, #0]
   11252:	701a      	strb	r2, [r3, #0]
   11254:	0023      	movs	r3, r4
   11256:	3358      	adds	r3, #88	; 0x58
   11258:	701d      	strb	r5, [r3, #0]
   1125a:	4b26      	ldr	r3, [pc, #152]	; (112f4 <RADIO_TxDoneHandler+0xe8>)
   1125c:	781b      	ldrb	r3, [r3, #0]
   1125e:	075b      	lsls	r3, r3, #29
   11260:	d505      	bpl.n	1126e <RADIO_TxDoneHandler+0x62>
   11262:	6923      	ldr	r3, [r4, #16]
   11264:	42ab      	cmp	r3, r5
   11266:	d002      	beq.n	1126e <RADIO_TxDoneHandler+0x62>
   11268:	0031      	movs	r1, r6
   1126a:	2004      	movs	r0, #4
   1126c:	4798      	blx	r3
   1126e:	4b22      	ldr	r3, [pc, #136]	; (112f8 <RADIO_TxDoneHandler+0xec>)
   11270:	4798      	blx	r3
   11272:	4b22      	ldr	r3, [pc, #136]	; (112fc <RADIO_TxDoneHandler+0xf0>)
   11274:	4798      	blx	r3
   11276:	2000      	movs	r0, #0
   11278:	b007      	add	sp, #28
   1127a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1127c:	07d2      	lsls	r2, r2, #31
   1127e:	d402      	bmi.n	11286 <RADIO_TxDoneHandler+0x7a>
   11280:	881a      	ldrh	r2, [r3, #0]
   11282:	0752      	lsls	r2, r2, #29
   11284:	d527      	bpl.n	112d6 <RADIO_TxDoneHandler+0xca>
   11286:	2601      	movs	r6, #1
   11288:	2104      	movs	r1, #4
   1128a:	881a      	ldrh	r2, [r3, #0]
   1128c:	4f16      	ldr	r7, [pc, #88]	; (112e8 <RADIO_TxDoneHandler+0xdc>)
   1128e:	43b2      	bics	r2, r6
   11290:	801a      	strh	r2, [r3, #0]
   11292:	881a      	ldrh	r2, [r3, #0]
   11294:	2400      	movs	r4, #0
   11296:	438a      	bics	r2, r1
   11298:	801a      	strh	r2, [r3, #0]
   1129a:	4b19      	ldr	r3, [pc, #100]	; (11300 <RADIO_TxDoneHandler+0xf4>)
   1129c:	ad03      	add	r5, sp, #12
   1129e:	681b      	ldr	r3, [r3, #0]
   112a0:	702c      	strb	r4, [r5, #0]
   112a2:	9304      	str	r3, [sp, #16]
   112a4:	003b      	movs	r3, r7
   112a6:	3334      	adds	r3, #52	; 0x34
   112a8:	7819      	ldrb	r1, [r3, #0]
   112aa:	0022      	movs	r2, r4
   112ac:	0020      	movs	r0, r4
   112ae:	4b0f      	ldr	r3, [pc, #60]	; (112ec <RADIO_TxDoneHandler+0xe0>)
   112b0:	4798      	blx	r3
   112b2:	4b14      	ldr	r3, [pc, #80]	; (11304 <RADIO_TxDoneHandler+0xf8>)
   112b4:	4798      	blx	r3
   112b6:	4b0e      	ldr	r3, [pc, #56]	; (112f0 <RADIO_TxDoneHandler+0xe4>)
   112b8:	701e      	strb	r6, [r3, #0]
   112ba:	003b      	movs	r3, r7
   112bc:	3358      	adds	r3, #88	; 0x58
   112be:	701c      	strb	r4, [r3, #0]
   112c0:	4b0c      	ldr	r3, [pc, #48]	; (112f4 <RADIO_TxDoneHandler+0xe8>)
   112c2:	781b      	ldrb	r3, [r3, #0]
   112c4:	079b      	lsls	r3, r3, #30
   112c6:	d5d6      	bpl.n	11276 <RADIO_TxDoneHandler+0x6a>
   112c8:	693b      	ldr	r3, [r7, #16]
   112ca:	42a3      	cmp	r3, r4
   112cc:	d0d3      	beq.n	11276 <RADIO_TxDoneHandler+0x6a>
   112ce:	0029      	movs	r1, r5
   112d0:	2002      	movs	r0, #2
   112d2:	4798      	blx	r3
   112d4:	e7cf      	b.n	11276 <RADIO_TxDoneHandler+0x6a>
   112d6:	881b      	ldrh	r3, [r3, #0]
   112d8:	059b      	lsls	r3, r3, #22
   112da:	d5cc      	bpl.n	11276 <RADIO_TxDoneHandler+0x6a>
   112dc:	4b0a      	ldr	r3, [pc, #40]	; (11308 <RADIO_TxDoneHandler+0xfc>)
   112de:	4798      	blx	r3
   112e0:	e7c9      	b.n	11276 <RADIO_TxDoneHandler+0x6a>
   112e2:	46c0      	nop			; (mov r8, r8)
   112e4:	20001bcc 	.word	0x20001bcc
   112e8:	20001398 	.word	0x20001398
   112ec:	00009c6d 	.word	0x00009c6d
   112f0:	20001bcf 	.word	0x20001bcf
   112f4:	20001bce 	.word	0x20001bce
   112f8:	00003b5d 	.word	0x00003b5d
   112fc:	00010d7d 	.word	0x00010d7d
   11300:	20000eb8 	.word	0x20000eb8
   11304:	00010d61 	.word	0x00010d61
   11308:	000116a5 	.word	0x000116a5

0001130c <RADIO_RxDoneHandler>:
   1130c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1130e:	4b97      	ldr	r3, [pc, #604]	; (1156c <RADIO_RxDoneHandler+0x260>)
   11310:	b085      	sub	sp, #20
   11312:	881c      	ldrh	r4, [r3, #0]
   11314:	881a      	ldrh	r2, [r3, #0]
   11316:	06a4      	lsls	r4, r4, #26
   11318:	0fe4      	lsrs	r4, r4, #31
   1131a:	b2e0      	uxtb	r0, r4
   1131c:	2801      	cmp	r0, #1
   1131e:	d126      	bne.n	1136e <RADIO_RxDoneHandler+0x62>
   11320:	4d93      	ldr	r5, [pc, #588]	; (11570 <RADIO_RxDoneHandler+0x264>)
   11322:	2120      	movs	r1, #32
   11324:	002e      	movs	r6, r5
   11326:	438a      	bics	r2, r1
   11328:	801a      	strh	r2, [r3, #0]
   1132a:	3634      	adds	r6, #52	; 0x34
   1132c:	0002      	movs	r2, r0
   1132e:	7831      	ldrb	r1, [r6, #0]
   11330:	4f90      	ldr	r7, [pc, #576]	; (11574 <RADIO_RxDoneHandler+0x268>)
   11332:	47b8      	blx	r7
   11334:	2200      	movs	r2, #0
   11336:	7831      	ldrb	r1, [r6, #0]
   11338:	0010      	movs	r0, r2
   1133a:	47b8      	blx	r7
   1133c:	4b8e      	ldr	r3, [pc, #568]	; (11578 <RADIO_RxDoneHandler+0x26c>)
   1133e:	4798      	blx	r3
   11340:	4b8e      	ldr	r3, [pc, #568]	; (1157c <RADIO_RxDoneHandler+0x270>)
   11342:	002a      	movs	r2, r5
   11344:	701c      	strb	r4, [r3, #0]
   11346:	2300      	movs	r3, #0
   11348:	322c      	adds	r2, #44	; 0x2c
   1134a:	7013      	strb	r3, [r2, #0]
   1134c:	002a      	movs	r2, r5
   1134e:	a901      	add	r1, sp, #4
   11350:	3258      	adds	r2, #88	; 0x58
   11352:	7013      	strb	r3, [r2, #0]
   11354:	700b      	strb	r3, [r1, #0]
   11356:	4b8a      	ldr	r3, [pc, #552]	; (11580 <RADIO_RxDoneHandler+0x274>)
   11358:	781b      	ldrb	r3, [r3, #0]
   1135a:	071b      	lsls	r3, r3, #28
   1135c:	d504      	bpl.n	11368 <RADIO_RxDoneHandler+0x5c>
   1135e:	692b      	ldr	r3, [r5, #16]
   11360:	2008      	movs	r0, #8
   11362:	2b00      	cmp	r3, #0
   11364:	d000      	beq.n	11368 <RADIO_RxDoneHandler+0x5c>
   11366:	e084      	b.n	11472 <RADIO_RxDoneHandler+0x166>
   11368:	2000      	movs	r0, #0
   1136a:	b005      	add	sp, #20
   1136c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1136e:	0652      	lsls	r2, r2, #25
   11370:	d402      	bmi.n	11378 <RADIO_RxDoneHandler+0x6c>
   11372:	881a      	ldrh	r2, [r3, #0]
   11374:	0612      	lsls	r2, r2, #24
   11376:	d523      	bpl.n	113c0 <RADIO_RxDoneHandler+0xb4>
   11378:	2140      	movs	r1, #64	; 0x40
   1137a:	881a      	ldrh	r2, [r3, #0]
   1137c:	4c7c      	ldr	r4, [pc, #496]	; (11570 <RADIO_RxDoneHandler+0x264>)
   1137e:	438a      	bics	r2, r1
   11380:	801a      	strh	r2, [r3, #0]
   11382:	881a      	ldrh	r2, [r3, #0]
   11384:	1849      	adds	r1, r1, r1
   11386:	438a      	bics	r2, r1
   11388:	801a      	strh	r2, [r3, #0]
   1138a:	0023      	movs	r3, r4
   1138c:	2200      	movs	r2, #0
   1138e:	3334      	adds	r3, #52	; 0x34
   11390:	7819      	ldrb	r1, [r3, #0]
   11392:	0010      	movs	r0, r2
   11394:	4b77      	ldr	r3, [pc, #476]	; (11574 <RADIO_RxDoneHandler+0x268>)
   11396:	4798      	blx	r3
   11398:	4b77      	ldr	r3, [pc, #476]	; (11578 <RADIO_RxDoneHandler+0x26c>)
   1139a:	4798      	blx	r3
   1139c:	2201      	movs	r2, #1
   1139e:	4b77      	ldr	r3, [pc, #476]	; (1157c <RADIO_RxDoneHandler+0x270>)
   113a0:	a901      	add	r1, sp, #4
   113a2:	701a      	strb	r2, [r3, #0]
   113a4:	0022      	movs	r2, r4
   113a6:	2300      	movs	r3, #0
   113a8:	322c      	adds	r2, #44	; 0x2c
   113aa:	7013      	strb	r3, [r2, #0]
   113ac:	0022      	movs	r2, r4
   113ae:	3258      	adds	r2, #88	; 0x58
   113b0:	7013      	strb	r3, [r2, #0]
   113b2:	700b      	strb	r3, [r1, #0]
   113b4:	4b72      	ldr	r3, [pc, #456]	; (11580 <RADIO_RxDoneHandler+0x274>)
   113b6:	781b      	ldrb	r3, [r3, #0]
   113b8:	071b      	lsls	r3, r3, #28
   113ba:	d5d5      	bpl.n	11368 <RADIO_RxDoneHandler+0x5c>
   113bc:	6923      	ldr	r3, [r4, #16]
   113be:	e7cf      	b.n	11360 <RADIO_RxDoneHandler+0x54>
   113c0:	881a      	ldrh	r2, [r3, #0]
   113c2:	0792      	lsls	r2, r2, #30
   113c4:	d571      	bpl.n	114aa <RADIO_RxDoneHandler+0x19e>
   113c6:	2102      	movs	r1, #2
   113c8:	881a      	ldrh	r2, [r3, #0]
   113ca:	4d6e      	ldr	r5, [pc, #440]	; (11584 <RADIO_RxDoneHandler+0x278>)
   113cc:	438a      	bics	r2, r1
   113ce:	801a      	strh	r2, [r3, #0]
   113d0:	2013      	movs	r0, #19
   113d2:	47a8      	blx	r5
   113d4:	4c66      	ldr	r4, [pc, #408]	; (11570 <RADIO_RxDoneHandler+0x264>)
   113d6:	2100      	movs	r1, #0
   113d8:	0026      	movs	r6, r4
   113da:	362c      	adds	r6, #44	; 0x2c
   113dc:	7030      	strb	r0, [r6, #0]
   113de:	4b6a      	ldr	r3, [pc, #424]	; (11588 <RADIO_RxDoneHandler+0x27c>)
   113e0:	200d      	movs	r0, #13
   113e2:	4798      	blx	r3
   113e4:	7832      	ldrb	r2, [r6, #0]
   113e6:	4b69      	ldr	r3, [pc, #420]	; (1158c <RADIO_RxDoneHandler+0x280>)
   113e8:	b2d2      	uxtb	r2, r2
   113ea:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   113ec:	2000      	movs	r0, #0
   113ee:	4798      	blx	r3
   113f0:	2019      	movs	r0, #25
   113f2:	47a8      	blx	r5
   113f4:	0023      	movs	r3, r4
   113f6:	b240      	sxtb	r0, r0
   113f8:	3332      	adds	r3, #50	; 0x32
   113fa:	2800      	cmp	r0, #0
   113fc:	da3b      	bge.n	11476 <RADIO_RxDoneHandler+0x16a>
   113fe:	4240      	negs	r0, r0
   11400:	1080      	asrs	r0, r0, #2
   11402:	4240      	negs	r0, r0
   11404:	7018      	strb	r0, [r3, #0]
   11406:	201a      	movs	r0, #26
   11408:	47a8      	blx	r5
   1140a:	0023      	movs	r3, r4
   1140c:	3332      	adds	r3, #50	; 0x32
   1140e:	781b      	ldrb	r3, [r3, #0]
   11410:	b202      	sxth	r2, r0
   11412:	b25b      	sxtb	r3, r3
   11414:	4d5e      	ldr	r5, [pc, #376]	; (11590 <RADIO_RxDoneHandler+0x284>)
   11416:	2b00      	cmp	r3, #0
   11418:	da36      	bge.n	11488 <RADIO_RxDoneHandler+0x17c>
   1141a:	6821      	ldr	r1, [r4, #0]
   1141c:	4e5d      	ldr	r6, [pc, #372]	; (11594 <RADIO_RxDoneHandler+0x288>)
   1141e:	198e      	adds	r6, r1, r6
   11420:	42ae      	cmp	r6, r5
   11422:	d82a      	bhi.n	1147a <RADIO_RxDoneHandler+0x16e>
   11424:	3b9d      	subs	r3, #157	; 0x9d
   11426:	181b      	adds	r3, r3, r0
   11428:	1112      	asrs	r2, r2, #4
   1142a:	189b      	adds	r3, r3, r2
   1142c:	0022      	movs	r2, r4
   1142e:	3256      	adds	r2, #86	; 0x56
   11430:	8013      	strh	r3, [r2, #0]
   11432:	0023      	movs	r3, r4
   11434:	2200      	movs	r2, #0
   11436:	3334      	adds	r3, #52	; 0x34
   11438:	7819      	ldrb	r1, [r3, #0]
   1143a:	0010      	movs	r0, r2
   1143c:	4b4d      	ldr	r3, [pc, #308]	; (11574 <RADIO_RxDoneHandler+0x268>)
   1143e:	4798      	blx	r3
   11440:	4b4d      	ldr	r3, [pc, #308]	; (11578 <RADIO_RxDoneHandler+0x26c>)
   11442:	4798      	blx	r3
   11444:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11446:	a901      	add	r1, sp, #4
   11448:	604b      	str	r3, [r1, #4]
   1144a:	0023      	movs	r3, r4
   1144c:	332c      	adds	r3, #44	; 0x2c
   1144e:	781b      	ldrb	r3, [r3, #0]
   11450:	2201      	movs	r2, #1
   11452:	720b      	strb	r3, [r1, #8]
   11454:	2300      	movs	r3, #0
   11456:	700b      	strb	r3, [r1, #0]
   11458:	4b48      	ldr	r3, [pc, #288]	; (1157c <RADIO_RxDoneHandler+0x270>)
   1145a:	701a      	strb	r2, [r3, #0]
   1145c:	4b48      	ldr	r3, [pc, #288]	; (11580 <RADIO_RxDoneHandler+0x274>)
   1145e:	7818      	ldrb	r0, [r3, #0]
   11460:	07c0      	lsls	r0, r0, #31
   11462:	0fc0      	lsrs	r0, r0, #31
   11464:	4290      	cmp	r0, r2
   11466:	d000      	beq.n	1146a <RADIO_RxDoneHandler+0x15e>
   11468:	e77e      	b.n	11368 <RADIO_RxDoneHandler+0x5c>
   1146a:	6923      	ldr	r3, [r4, #16]
   1146c:	2b00      	cmp	r3, #0
   1146e:	d100      	bne.n	11472 <RADIO_RxDoneHandler+0x166>
   11470:	e77a      	b.n	11368 <RADIO_RxDoneHandler+0x5c>
   11472:	4798      	blx	r3
   11474:	e778      	b.n	11368 <RADIO_RxDoneHandler+0x5c>
   11476:	1080      	asrs	r0, r0, #2
   11478:	e7c4      	b.n	11404 <RADIO_RxDoneHandler+0xf8>
   1147a:	4d47      	ldr	r5, [pc, #284]	; (11598 <RADIO_RxDoneHandler+0x28c>)
   1147c:	1949      	adds	r1, r1, r5
   1147e:	4d47      	ldr	r5, [pc, #284]	; (1159c <RADIO_RxDoneHandler+0x290>)
   11480:	42a9      	cmp	r1, r5
   11482:	d8d6      	bhi.n	11432 <RADIO_RxDoneHandler+0x126>
   11484:	3ba4      	subs	r3, #164	; 0xa4
   11486:	e7ce      	b.n	11426 <RADIO_RxDoneHandler+0x11a>
   11488:	6823      	ldr	r3, [r4, #0]
   1148a:	4942      	ldr	r1, [pc, #264]	; (11594 <RADIO_RxDoneHandler+0x288>)
   1148c:	1859      	adds	r1, r3, r1
   1148e:	42a9      	cmp	r1, r5
   11490:	d802      	bhi.n	11498 <RADIO_RxDoneHandler+0x18c>
   11492:	0003      	movs	r3, r0
   11494:	3b9d      	subs	r3, #157	; 0x9d
   11496:	e7c7      	b.n	11428 <RADIO_RxDoneHandler+0x11c>
   11498:	493f      	ldr	r1, [pc, #252]	; (11598 <RADIO_RxDoneHandler+0x28c>)
   1149a:	185b      	adds	r3, r3, r1
   1149c:	493f      	ldr	r1, [pc, #252]	; (1159c <RADIO_RxDoneHandler+0x290>)
   1149e:	428b      	cmp	r3, r1
   114a0:	d8c7      	bhi.n	11432 <RADIO_RxDoneHandler+0x126>
   114a2:	38a4      	subs	r0, #164	; 0xa4
   114a4:	1113      	asrs	r3, r2, #4
   114a6:	18c3      	adds	r3, r0, r3
   114a8:	e7c0      	b.n	1142c <RADIO_RxDoneHandler+0x120>
   114aa:	881a      	ldrh	r2, [r3, #0]
   114ac:	0712      	lsls	r2, r2, #28
   114ae:	0fd5      	lsrs	r5, r2, #31
   114b0:	2a00      	cmp	r2, #0
   114b2:	da27      	bge.n	11504 <RADIO_RxDoneHandler+0x1f8>
   114b4:	2108      	movs	r1, #8
   114b6:	881a      	ldrh	r2, [r3, #0]
   114b8:	4c2d      	ldr	r4, [pc, #180]	; (11570 <RADIO_RxDoneHandler+0x264>)
   114ba:	438a      	bics	r2, r1
   114bc:	801a      	strh	r2, [r3, #0]
   114be:	0023      	movs	r3, r4
   114c0:	2280      	movs	r2, #128	; 0x80
   114c2:	3332      	adds	r3, #50	; 0x32
   114c4:	701a      	strb	r2, [r3, #0]
   114c6:	0023      	movs	r3, r4
   114c8:	2200      	movs	r2, #0
   114ca:	3334      	adds	r3, #52	; 0x34
   114cc:	7819      	ldrb	r1, [r3, #0]
   114ce:	0010      	movs	r0, r2
   114d0:	4b28      	ldr	r3, [pc, #160]	; (11574 <RADIO_RxDoneHandler+0x268>)
   114d2:	4798      	blx	r3
   114d4:	4b28      	ldr	r3, [pc, #160]	; (11578 <RADIO_RxDoneHandler+0x26c>)
   114d6:	4798      	blx	r3
   114d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   114da:	a901      	add	r1, sp, #4
   114dc:	604b      	str	r3, [r1, #4]
   114de:	0023      	movs	r3, r4
   114e0:	332c      	adds	r3, #44	; 0x2c
   114e2:	781b      	ldrb	r3, [r3, #0]
   114e4:	0022      	movs	r2, r4
   114e6:	720b      	strb	r3, [r1, #8]
   114e8:	2300      	movs	r3, #0
   114ea:	3258      	adds	r2, #88	; 0x58
   114ec:	7013      	strb	r3, [r2, #0]
   114ee:	700b      	strb	r3, [r1, #0]
   114f0:	4b22      	ldr	r3, [pc, #136]	; (1157c <RADIO_RxDoneHandler+0x270>)
   114f2:	701d      	strb	r5, [r3, #0]
   114f4:	4b22      	ldr	r3, [pc, #136]	; (11580 <RADIO_RxDoneHandler+0x274>)
   114f6:	7818      	ldrb	r0, [r3, #0]
   114f8:	07c0      	lsls	r0, r0, #31
   114fa:	0fc0      	lsrs	r0, r0, #31
   114fc:	2801      	cmp	r0, #1
   114fe:	d000      	beq.n	11502 <RADIO_RxDoneHandler+0x1f6>
   11500:	e732      	b.n	11368 <RADIO_RxDoneHandler+0x5c>
   11502:	e7b2      	b.n	1146a <RADIO_RxDoneHandler+0x15e>
   11504:	881a      	ldrh	r2, [r3, #0]
   11506:	05d2      	lsls	r2, r2, #23
   11508:	0fd5      	lsrs	r5, r2, #31
   1150a:	2a00      	cmp	r2, #0
   1150c:	db00      	blt.n	11510 <RADIO_RxDoneHandler+0x204>
   1150e:	e72b      	b.n	11368 <RADIO_RxDoneHandler+0x5c>
   11510:	4c17      	ldr	r4, [pc, #92]	; (11570 <RADIO_RxDoneHandler+0x264>)
   11512:	881a      	ldrh	r2, [r3, #0]
   11514:	0026      	movs	r6, r4
   11516:	4922      	ldr	r1, [pc, #136]	; (115a0 <RADIO_RxDoneHandler+0x294>)
   11518:	362c      	adds	r6, #44	; 0x2c
   1151a:	400a      	ands	r2, r1
   1151c:	801a      	strh	r2, [r3, #0]
   1151e:	7832      	ldrb	r2, [r6, #0]
   11520:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   11522:	b2d2      	uxtb	r2, r2
   11524:	2000      	movs	r0, #0
   11526:	4b19      	ldr	r3, [pc, #100]	; (1158c <RADIO_RxDoneHandler+0x280>)
   11528:	4798      	blx	r3
   1152a:	0023      	movs	r3, r4
   1152c:	2200      	movs	r2, #0
   1152e:	3334      	adds	r3, #52	; 0x34
   11530:	7819      	ldrb	r1, [r3, #0]
   11532:	0010      	movs	r0, r2
   11534:	4b0f      	ldr	r3, [pc, #60]	; (11574 <RADIO_RxDoneHandler+0x268>)
   11536:	4798      	blx	r3
   11538:	4b0f      	ldr	r3, [pc, #60]	; (11578 <RADIO_RxDoneHandler+0x26c>)
   1153a:	4798      	blx	r3
   1153c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1153e:	a901      	add	r1, sp, #4
   11540:	604b      	str	r3, [r1, #4]
   11542:	7833      	ldrb	r3, [r6, #0]
   11544:	0022      	movs	r2, r4
   11546:	720b      	strb	r3, [r1, #8]
   11548:	2300      	movs	r3, #0
   1154a:	3258      	adds	r2, #88	; 0x58
   1154c:	7013      	strb	r3, [r2, #0]
   1154e:	700b      	strb	r3, [r1, #0]
   11550:	4b0a      	ldr	r3, [pc, #40]	; (1157c <RADIO_RxDoneHandler+0x270>)
   11552:	701d      	strb	r5, [r3, #0]
   11554:	4b0a      	ldr	r3, [pc, #40]	; (11580 <RADIO_RxDoneHandler+0x274>)
   11556:	781b      	ldrb	r3, [r3, #0]
   11558:	06db      	lsls	r3, r3, #27
   1155a:	d400      	bmi.n	1155e <RADIO_RxDoneHandler+0x252>
   1155c:	e704      	b.n	11368 <RADIO_RxDoneHandler+0x5c>
   1155e:	6923      	ldr	r3, [r4, #16]
   11560:	2b00      	cmp	r3, #0
   11562:	d100      	bne.n	11566 <RADIO_RxDoneHandler+0x25a>
   11564:	e700      	b.n	11368 <RADIO_RxDoneHandler+0x5c>
   11566:	2010      	movs	r0, #16
   11568:	e783      	b.n	11472 <RADIO_RxDoneHandler+0x166>
   1156a:	46c0      	nop			; (mov r8, r8)
   1156c:	20001bcc 	.word	0x20001bcc
   11570:	20001398 	.word	0x20001398
   11574:	00009c6d 	.word	0x00009c6d
   11578:	00010d61 	.word	0x00010d61
   1157c:	20001bcf 	.word	0x20001bcf
   11580:	20001bce 	.word	0x20001bce
   11584:	00003bc5 	.word	0x00003bc5
   11588:	00003b9d 	.word	0x00003b9d
   1158c:	00003c31 	.word	0x00003c31
   11590:	096ae380 	.word	0x096ae380
   11594:	cc9eec80 	.word	0xcc9eec80
   11598:	e78fe580 	.word	0xe78fe580
   1159c:	06dac2c0 	.word	0x06dac2c0
   115a0:	fffffeff 	.word	0xfffffeff

000115a4 <Radio_LBTScanTimeout>:
   115a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   115a6:	4c1c      	ldr	r4, [pc, #112]	; (11618 <Radio_LBTScanTimeout+0x74>)
   115a8:	0025      	movs	r5, r4
   115aa:	0023      	movs	r3, r4
   115ac:	354f      	adds	r5, #79	; 0x4f
   115ae:	7829      	ldrb	r1, [r5, #0]
   115b0:	3340      	adds	r3, #64	; 0x40
   115b2:	3101      	adds	r1, #1
   115b4:	b2c9      	uxtb	r1, r1
   115b6:	7029      	strb	r1, [r5, #0]
   115b8:	781b      	ldrb	r3, [r3, #0]
   115ba:	428b      	cmp	r3, r1
   115bc:	d315      	bcc.n	115ea <Radio_LBTScanTimeout+0x46>
   115be:	260e      	movs	r6, #14
   115c0:	446e      	add	r6, sp
   115c2:	4b16      	ldr	r3, [pc, #88]	; (1161c <Radio_LBTScanTimeout+0x78>)
   115c4:	0030      	movs	r0, r6
   115c6:	4798      	blx	r3
   115c8:	2300      	movs	r3, #0
   115ca:	5ef2      	ldrsh	r2, [r6, r3]
   115cc:	782b      	ldrb	r3, [r5, #0]
   115ce:	4353      	muls	r3, r2
   115d0:	6c62      	ldr	r2, [r4, #68]	; 0x44
   115d2:	189b      	adds	r3, r3, r2
   115d4:	6463      	str	r3, [r4, #68]	; 0x44
   115d6:	0023      	movs	r3, r4
   115d8:	2200      	movs	r2, #0
   115da:	3350      	adds	r3, #80	; 0x50
   115dc:	7818      	ldrb	r0, [r3, #0]
   115de:	9200      	str	r2, [sp, #0]
   115e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   115e2:	4b0f      	ldr	r3, [pc, #60]	; (11620 <Radio_LBTScanTimeout+0x7c>)
   115e4:	4c0f      	ldr	r4, [pc, #60]	; (11624 <Radio_LBTScanTimeout+0x80>)
   115e6:	47a0      	blx	r4
   115e8:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
   115ea:	2380      	movs	r3, #128	; 0x80
   115ec:	4a0e      	ldr	r2, [pc, #56]	; (11628 <Radio_LBTScanTimeout+0x84>)
   115ee:	009b      	lsls	r3, r3, #2
   115f0:	8810      	ldrh	r0, [r2, #0]
   115f2:	4303      	orrs	r3, r0
   115f4:	8013      	strh	r3, [r2, #0]
   115f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   115f8:	0058      	lsls	r0, r3, #1
   115fa:	1e4b      	subs	r3, r1, #1
   115fc:	4359      	muls	r1, r3
   115fe:	4b0b      	ldr	r3, [pc, #44]	; (1162c <Radio_LBTScanTimeout+0x88>)
   11600:	b289      	uxth	r1, r1
   11602:	4798      	blx	r3
   11604:	0023      	movs	r3, r4
   11606:	334c      	adds	r3, #76	; 0x4c
   11608:	8018      	strh	r0, [r3, #0]
   1160a:	2300      	movs	r3, #0
   1160c:	2001      	movs	r0, #1
   1160e:	702b      	strb	r3, [r5, #0]
   11610:	6463      	str	r3, [r4, #68]	; 0x44
   11612:	4b07      	ldr	r3, [pc, #28]	; (11630 <Radio_LBTScanTimeout+0x8c>)
   11614:	4798      	blx	r3
   11616:	e7e7      	b.n	115e8 <Radio_LBTScanTimeout+0x44>
   11618:	20001398 	.word	0x20001398
   1161c:	00009e31 	.word	0x00009e31
   11620:	000115a5 	.word	0x000115a5
   11624:	00009609 	.word	0x00009609
   11628:	20001bcc 	.word	0x20001bcc
   1162c:	0001187d 	.word	0x0001187d
   11630:	000105c9 	.word	0x000105c9

00011634 <RADIO_ScanHandler>:
   11634:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11636:	4b12      	ldr	r3, [pc, #72]	; (11680 <RADIO_ScanHandler+0x4c>)
   11638:	4798      	blx	r3
   1163a:	2000      	movs	r0, #0
   1163c:	4b11      	ldr	r3, [pc, #68]	; (11684 <RADIO_ScanHandler+0x50>)
   1163e:	4798      	blx	r3
   11640:	4d11      	ldr	r5, [pc, #68]	; (11688 <RADIO_ScanHandler+0x54>)
   11642:	4b12      	ldr	r3, [pc, #72]	; (1168c <RADIO_ScanHandler+0x58>)
   11644:	6828      	ldr	r0, [r5, #0]
   11646:	2400      	movs	r4, #0
   11648:	4798      	blx	r3
   1164a:	002b      	movs	r3, r5
   1164c:	4e10      	ldr	r6, [pc, #64]	; (11690 <RADIO_ScanHandler+0x5c>)
   1164e:	334c      	adds	r3, #76	; 0x4c
   11650:	2201      	movs	r2, #1
   11652:	0021      	movs	r1, r4
   11654:	0020      	movs	r0, r4
   11656:	801c      	strh	r4, [r3, #0]
   11658:	47b0      	blx	r6
   1165a:	4b0e      	ldr	r3, [pc, #56]	; (11694 <RADIO_ScanHandler+0x60>)
   1165c:	2109      	movs	r1, #9
   1165e:	2012      	movs	r0, #18
   11660:	4798      	blx	r3
   11662:	3550      	adds	r5, #80	; 0x50
   11664:	0022      	movs	r2, r4
   11666:	0021      	movs	r1, r4
   11668:	2005      	movs	r0, #5
   1166a:	47b0      	blx	r6
   1166c:	7828      	ldrb	r0, [r5, #0]
   1166e:	4b0a      	ldr	r3, [pc, #40]	; (11698 <RADIO_ScanHandler+0x64>)
   11670:	4d0a      	ldr	r5, [pc, #40]	; (1169c <RADIO_ScanHandler+0x68>)
   11672:	9400      	str	r4, [sp, #0]
   11674:	0022      	movs	r2, r4
   11676:	490a      	ldr	r1, [pc, #40]	; (116a0 <RADIO_ScanHandler+0x6c>)
   11678:	47a8      	blx	r5
   1167a:	0020      	movs	r0, r4
   1167c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   1167e:	46c0      	nop			; (mov r8, r8)
   11680:	00010d2d 	.word	0x00010d2d
   11684:	0001087d 	.word	0x0001087d
   11688:	20001398 	.word	0x20001398
   1168c:	0000ffc1 	.word	0x0000ffc1
   11690:	00009c6d 	.word	0x00009c6d
   11694:	00003b9d 	.word	0x00003b9d
   11698:	000115a5 	.word	0x000115a5
   1169c:	00009609 	.word	0x00009609
   116a0:	00002328 	.word	0x00002328

000116a4 <radioScanDoneHandler>:
   116a4:	b530      	push	{r4, r5, lr}
   116a6:	4a18      	ldr	r2, [pc, #96]	; (11708 <radioScanDoneHandler+0x64>)
   116a8:	4918      	ldr	r1, [pc, #96]	; (1170c <radioScanDoneHandler+0x68>)
   116aa:	8813      	ldrh	r3, [r2, #0]
   116ac:	b085      	sub	sp, #20
   116ae:	400b      	ands	r3, r1
   116b0:	8013      	strh	r3, [r2, #0]
   116b2:	2200      	movs	r2, #0
   116b4:	4b16      	ldr	r3, [pc, #88]	; (11710 <radioScanDoneHandler+0x6c>)
   116b6:	0011      	movs	r1, r2
   116b8:	0010      	movs	r0, r2
   116ba:	4798      	blx	r3
   116bc:	2000      	movs	r0, #0
   116be:	4b15      	ldr	r3, [pc, #84]	; (11714 <radioScanDoneHandler+0x70>)
   116c0:	4798      	blx	r3
   116c2:	4b15      	ldr	r3, [pc, #84]	; (11718 <radioScanDoneHandler+0x74>)
   116c4:	4798      	blx	r3
   116c6:	4c15      	ldr	r4, [pc, #84]	; (1171c <radioScanDoneHandler+0x78>)
   116c8:	0023      	movs	r3, r4
   116ca:	334c      	adds	r3, #76	; 0x4c
   116cc:	2100      	movs	r1, #0
   116ce:	5e59      	ldrsh	r1, [r3, r1]
   116d0:	233e      	movs	r3, #62	; 0x3e
   116d2:	5ee2      	ldrsh	r2, [r4, r3]
   116d4:	4b12      	ldr	r3, [pc, #72]	; (11720 <radioScanDoneHandler+0x7c>)
   116d6:	4291      	cmp	r1, r2
   116d8:	da06      	bge.n	116e8 <radioScanDoneHandler+0x44>
   116da:	2002      	movs	r0, #2
   116dc:	4798      	blx	r3
   116de:	4b11      	ldr	r3, [pc, #68]	; (11724 <radioScanDoneHandler+0x80>)
   116e0:	4798      	blx	r3
   116e2:	2000      	movs	r0, #0
   116e4:	b005      	add	sp, #20
   116e6:	bd30      	pop	{r4, r5, pc}
   116e8:	2207      	movs	r2, #7
   116ea:	ad01      	add	r5, sp, #4
   116ec:	2001      	movs	r0, #1
   116ee:	702a      	strb	r2, [r5, #0]
   116f0:	4798      	blx	r3
   116f2:	4b0d      	ldr	r3, [pc, #52]	; (11728 <radioScanDoneHandler+0x84>)
   116f4:	781b      	ldrb	r3, [r3, #0]
   116f6:	079b      	lsls	r3, r3, #30
   116f8:	d5f3      	bpl.n	116e2 <radioScanDoneHandler+0x3e>
   116fa:	6923      	ldr	r3, [r4, #16]
   116fc:	2b00      	cmp	r3, #0
   116fe:	d0f0      	beq.n	116e2 <radioScanDoneHandler+0x3e>
   11700:	0029      	movs	r1, r5
   11702:	2002      	movs	r0, #2
   11704:	4798      	blx	r3
   11706:	e7ec      	b.n	116e2 <radioScanDoneHandler+0x3e>
   11708:	20001bcc 	.word	0x20001bcc
   1170c:	fffffdff 	.word	0xfffffdff
   11710:	00009c6d 	.word	0x00009c6d
   11714:	000109a5 	.word	0x000109a5
   11718:	00010d61 	.word	0x00010d61
   1171c:	20001398 	.word	0x20001398
   11720:	00010675 	.word	0x00010675
   11724:	0001102d 	.word	0x0001102d
   11728:	20001bce 	.word	0x20001bce

0001172c <__gnu_thumb1_case_sqi>:
   1172c:	b402      	push	{r1}
   1172e:	4671      	mov	r1, lr
   11730:	0849      	lsrs	r1, r1, #1
   11732:	0049      	lsls	r1, r1, #1
   11734:	5609      	ldrsb	r1, [r1, r0]
   11736:	0049      	lsls	r1, r1, #1
   11738:	448e      	add	lr, r1
   1173a:	bc02      	pop	{r1}
   1173c:	4770      	bx	lr
   1173e:	46c0      	nop			; (mov r8, r8)

00011740 <__gnu_thumb1_case_uqi>:
   11740:	b402      	push	{r1}
   11742:	4671      	mov	r1, lr
   11744:	0849      	lsrs	r1, r1, #1
   11746:	0049      	lsls	r1, r1, #1
   11748:	5c09      	ldrb	r1, [r1, r0]
   1174a:	0049      	lsls	r1, r1, #1
   1174c:	448e      	add	lr, r1
   1174e:	bc02      	pop	{r1}
   11750:	4770      	bx	lr
   11752:	46c0      	nop			; (mov r8, r8)

00011754 <__gnu_thumb1_case_uhi>:
   11754:	b403      	push	{r0, r1}
   11756:	4671      	mov	r1, lr
   11758:	0849      	lsrs	r1, r1, #1
   1175a:	0040      	lsls	r0, r0, #1
   1175c:	0049      	lsls	r1, r1, #1
   1175e:	5a09      	ldrh	r1, [r1, r0]
   11760:	0049      	lsls	r1, r1, #1
   11762:	448e      	add	lr, r1
   11764:	bc03      	pop	{r0, r1}
   11766:	4770      	bx	lr

00011768 <__udivsi3>:
   11768:	2200      	movs	r2, #0
   1176a:	0843      	lsrs	r3, r0, #1
   1176c:	428b      	cmp	r3, r1
   1176e:	d374      	bcc.n	1185a <__udivsi3+0xf2>
   11770:	0903      	lsrs	r3, r0, #4
   11772:	428b      	cmp	r3, r1
   11774:	d35f      	bcc.n	11836 <__udivsi3+0xce>
   11776:	0a03      	lsrs	r3, r0, #8
   11778:	428b      	cmp	r3, r1
   1177a:	d344      	bcc.n	11806 <__udivsi3+0x9e>
   1177c:	0b03      	lsrs	r3, r0, #12
   1177e:	428b      	cmp	r3, r1
   11780:	d328      	bcc.n	117d4 <__udivsi3+0x6c>
   11782:	0c03      	lsrs	r3, r0, #16
   11784:	428b      	cmp	r3, r1
   11786:	d30d      	bcc.n	117a4 <__udivsi3+0x3c>
   11788:	22ff      	movs	r2, #255	; 0xff
   1178a:	0209      	lsls	r1, r1, #8
   1178c:	ba12      	rev	r2, r2
   1178e:	0c03      	lsrs	r3, r0, #16
   11790:	428b      	cmp	r3, r1
   11792:	d302      	bcc.n	1179a <__udivsi3+0x32>
   11794:	1212      	asrs	r2, r2, #8
   11796:	0209      	lsls	r1, r1, #8
   11798:	d065      	beq.n	11866 <__udivsi3+0xfe>
   1179a:	0b03      	lsrs	r3, r0, #12
   1179c:	428b      	cmp	r3, r1
   1179e:	d319      	bcc.n	117d4 <__udivsi3+0x6c>
   117a0:	e000      	b.n	117a4 <__udivsi3+0x3c>
   117a2:	0a09      	lsrs	r1, r1, #8
   117a4:	0bc3      	lsrs	r3, r0, #15
   117a6:	428b      	cmp	r3, r1
   117a8:	d301      	bcc.n	117ae <__udivsi3+0x46>
   117aa:	03cb      	lsls	r3, r1, #15
   117ac:	1ac0      	subs	r0, r0, r3
   117ae:	4152      	adcs	r2, r2
   117b0:	0b83      	lsrs	r3, r0, #14
   117b2:	428b      	cmp	r3, r1
   117b4:	d301      	bcc.n	117ba <__udivsi3+0x52>
   117b6:	038b      	lsls	r3, r1, #14
   117b8:	1ac0      	subs	r0, r0, r3
   117ba:	4152      	adcs	r2, r2
   117bc:	0b43      	lsrs	r3, r0, #13
   117be:	428b      	cmp	r3, r1
   117c0:	d301      	bcc.n	117c6 <__udivsi3+0x5e>
   117c2:	034b      	lsls	r3, r1, #13
   117c4:	1ac0      	subs	r0, r0, r3
   117c6:	4152      	adcs	r2, r2
   117c8:	0b03      	lsrs	r3, r0, #12
   117ca:	428b      	cmp	r3, r1
   117cc:	d301      	bcc.n	117d2 <__udivsi3+0x6a>
   117ce:	030b      	lsls	r3, r1, #12
   117d0:	1ac0      	subs	r0, r0, r3
   117d2:	4152      	adcs	r2, r2
   117d4:	0ac3      	lsrs	r3, r0, #11
   117d6:	428b      	cmp	r3, r1
   117d8:	d301      	bcc.n	117de <__udivsi3+0x76>
   117da:	02cb      	lsls	r3, r1, #11
   117dc:	1ac0      	subs	r0, r0, r3
   117de:	4152      	adcs	r2, r2
   117e0:	0a83      	lsrs	r3, r0, #10
   117e2:	428b      	cmp	r3, r1
   117e4:	d301      	bcc.n	117ea <__udivsi3+0x82>
   117e6:	028b      	lsls	r3, r1, #10
   117e8:	1ac0      	subs	r0, r0, r3
   117ea:	4152      	adcs	r2, r2
   117ec:	0a43      	lsrs	r3, r0, #9
   117ee:	428b      	cmp	r3, r1
   117f0:	d301      	bcc.n	117f6 <__udivsi3+0x8e>
   117f2:	024b      	lsls	r3, r1, #9
   117f4:	1ac0      	subs	r0, r0, r3
   117f6:	4152      	adcs	r2, r2
   117f8:	0a03      	lsrs	r3, r0, #8
   117fa:	428b      	cmp	r3, r1
   117fc:	d301      	bcc.n	11802 <__udivsi3+0x9a>
   117fe:	020b      	lsls	r3, r1, #8
   11800:	1ac0      	subs	r0, r0, r3
   11802:	4152      	adcs	r2, r2
   11804:	d2cd      	bcs.n	117a2 <__udivsi3+0x3a>
   11806:	09c3      	lsrs	r3, r0, #7
   11808:	428b      	cmp	r3, r1
   1180a:	d301      	bcc.n	11810 <__udivsi3+0xa8>
   1180c:	01cb      	lsls	r3, r1, #7
   1180e:	1ac0      	subs	r0, r0, r3
   11810:	4152      	adcs	r2, r2
   11812:	0983      	lsrs	r3, r0, #6
   11814:	428b      	cmp	r3, r1
   11816:	d301      	bcc.n	1181c <__udivsi3+0xb4>
   11818:	018b      	lsls	r3, r1, #6
   1181a:	1ac0      	subs	r0, r0, r3
   1181c:	4152      	adcs	r2, r2
   1181e:	0943      	lsrs	r3, r0, #5
   11820:	428b      	cmp	r3, r1
   11822:	d301      	bcc.n	11828 <__udivsi3+0xc0>
   11824:	014b      	lsls	r3, r1, #5
   11826:	1ac0      	subs	r0, r0, r3
   11828:	4152      	adcs	r2, r2
   1182a:	0903      	lsrs	r3, r0, #4
   1182c:	428b      	cmp	r3, r1
   1182e:	d301      	bcc.n	11834 <__udivsi3+0xcc>
   11830:	010b      	lsls	r3, r1, #4
   11832:	1ac0      	subs	r0, r0, r3
   11834:	4152      	adcs	r2, r2
   11836:	08c3      	lsrs	r3, r0, #3
   11838:	428b      	cmp	r3, r1
   1183a:	d301      	bcc.n	11840 <__udivsi3+0xd8>
   1183c:	00cb      	lsls	r3, r1, #3
   1183e:	1ac0      	subs	r0, r0, r3
   11840:	4152      	adcs	r2, r2
   11842:	0883      	lsrs	r3, r0, #2
   11844:	428b      	cmp	r3, r1
   11846:	d301      	bcc.n	1184c <__udivsi3+0xe4>
   11848:	008b      	lsls	r3, r1, #2
   1184a:	1ac0      	subs	r0, r0, r3
   1184c:	4152      	adcs	r2, r2
   1184e:	0843      	lsrs	r3, r0, #1
   11850:	428b      	cmp	r3, r1
   11852:	d301      	bcc.n	11858 <__udivsi3+0xf0>
   11854:	004b      	lsls	r3, r1, #1
   11856:	1ac0      	subs	r0, r0, r3
   11858:	4152      	adcs	r2, r2
   1185a:	1a41      	subs	r1, r0, r1
   1185c:	d200      	bcs.n	11860 <__udivsi3+0xf8>
   1185e:	4601      	mov	r1, r0
   11860:	4152      	adcs	r2, r2
   11862:	4610      	mov	r0, r2
   11864:	4770      	bx	lr
   11866:	e7ff      	b.n	11868 <__udivsi3+0x100>
   11868:	b501      	push	{r0, lr}
   1186a:	2000      	movs	r0, #0
   1186c:	f000 f8f0 	bl	11a50 <__aeabi_idiv0>
   11870:	bd02      	pop	{r1, pc}
   11872:	46c0      	nop			; (mov r8, r8)

00011874 <__aeabi_uidivmod>:
   11874:	2900      	cmp	r1, #0
   11876:	d0f7      	beq.n	11868 <__udivsi3+0x100>
   11878:	e776      	b.n	11768 <__udivsi3>
   1187a:	4770      	bx	lr

0001187c <__divsi3>:
   1187c:	4603      	mov	r3, r0
   1187e:	430b      	orrs	r3, r1
   11880:	d47f      	bmi.n	11982 <__divsi3+0x106>
   11882:	2200      	movs	r2, #0
   11884:	0843      	lsrs	r3, r0, #1
   11886:	428b      	cmp	r3, r1
   11888:	d374      	bcc.n	11974 <__divsi3+0xf8>
   1188a:	0903      	lsrs	r3, r0, #4
   1188c:	428b      	cmp	r3, r1
   1188e:	d35f      	bcc.n	11950 <__divsi3+0xd4>
   11890:	0a03      	lsrs	r3, r0, #8
   11892:	428b      	cmp	r3, r1
   11894:	d344      	bcc.n	11920 <__divsi3+0xa4>
   11896:	0b03      	lsrs	r3, r0, #12
   11898:	428b      	cmp	r3, r1
   1189a:	d328      	bcc.n	118ee <__divsi3+0x72>
   1189c:	0c03      	lsrs	r3, r0, #16
   1189e:	428b      	cmp	r3, r1
   118a0:	d30d      	bcc.n	118be <__divsi3+0x42>
   118a2:	22ff      	movs	r2, #255	; 0xff
   118a4:	0209      	lsls	r1, r1, #8
   118a6:	ba12      	rev	r2, r2
   118a8:	0c03      	lsrs	r3, r0, #16
   118aa:	428b      	cmp	r3, r1
   118ac:	d302      	bcc.n	118b4 <__divsi3+0x38>
   118ae:	1212      	asrs	r2, r2, #8
   118b0:	0209      	lsls	r1, r1, #8
   118b2:	d065      	beq.n	11980 <__divsi3+0x104>
   118b4:	0b03      	lsrs	r3, r0, #12
   118b6:	428b      	cmp	r3, r1
   118b8:	d319      	bcc.n	118ee <__divsi3+0x72>
   118ba:	e000      	b.n	118be <__divsi3+0x42>
   118bc:	0a09      	lsrs	r1, r1, #8
   118be:	0bc3      	lsrs	r3, r0, #15
   118c0:	428b      	cmp	r3, r1
   118c2:	d301      	bcc.n	118c8 <__divsi3+0x4c>
   118c4:	03cb      	lsls	r3, r1, #15
   118c6:	1ac0      	subs	r0, r0, r3
   118c8:	4152      	adcs	r2, r2
   118ca:	0b83      	lsrs	r3, r0, #14
   118cc:	428b      	cmp	r3, r1
   118ce:	d301      	bcc.n	118d4 <__divsi3+0x58>
   118d0:	038b      	lsls	r3, r1, #14
   118d2:	1ac0      	subs	r0, r0, r3
   118d4:	4152      	adcs	r2, r2
   118d6:	0b43      	lsrs	r3, r0, #13
   118d8:	428b      	cmp	r3, r1
   118da:	d301      	bcc.n	118e0 <__divsi3+0x64>
   118dc:	034b      	lsls	r3, r1, #13
   118de:	1ac0      	subs	r0, r0, r3
   118e0:	4152      	adcs	r2, r2
   118e2:	0b03      	lsrs	r3, r0, #12
   118e4:	428b      	cmp	r3, r1
   118e6:	d301      	bcc.n	118ec <__divsi3+0x70>
   118e8:	030b      	lsls	r3, r1, #12
   118ea:	1ac0      	subs	r0, r0, r3
   118ec:	4152      	adcs	r2, r2
   118ee:	0ac3      	lsrs	r3, r0, #11
   118f0:	428b      	cmp	r3, r1
   118f2:	d301      	bcc.n	118f8 <__divsi3+0x7c>
   118f4:	02cb      	lsls	r3, r1, #11
   118f6:	1ac0      	subs	r0, r0, r3
   118f8:	4152      	adcs	r2, r2
   118fa:	0a83      	lsrs	r3, r0, #10
   118fc:	428b      	cmp	r3, r1
   118fe:	d301      	bcc.n	11904 <__divsi3+0x88>
   11900:	028b      	lsls	r3, r1, #10
   11902:	1ac0      	subs	r0, r0, r3
   11904:	4152      	adcs	r2, r2
   11906:	0a43      	lsrs	r3, r0, #9
   11908:	428b      	cmp	r3, r1
   1190a:	d301      	bcc.n	11910 <__divsi3+0x94>
   1190c:	024b      	lsls	r3, r1, #9
   1190e:	1ac0      	subs	r0, r0, r3
   11910:	4152      	adcs	r2, r2
   11912:	0a03      	lsrs	r3, r0, #8
   11914:	428b      	cmp	r3, r1
   11916:	d301      	bcc.n	1191c <__divsi3+0xa0>
   11918:	020b      	lsls	r3, r1, #8
   1191a:	1ac0      	subs	r0, r0, r3
   1191c:	4152      	adcs	r2, r2
   1191e:	d2cd      	bcs.n	118bc <__divsi3+0x40>
   11920:	09c3      	lsrs	r3, r0, #7
   11922:	428b      	cmp	r3, r1
   11924:	d301      	bcc.n	1192a <__divsi3+0xae>
   11926:	01cb      	lsls	r3, r1, #7
   11928:	1ac0      	subs	r0, r0, r3
   1192a:	4152      	adcs	r2, r2
   1192c:	0983      	lsrs	r3, r0, #6
   1192e:	428b      	cmp	r3, r1
   11930:	d301      	bcc.n	11936 <__divsi3+0xba>
   11932:	018b      	lsls	r3, r1, #6
   11934:	1ac0      	subs	r0, r0, r3
   11936:	4152      	adcs	r2, r2
   11938:	0943      	lsrs	r3, r0, #5
   1193a:	428b      	cmp	r3, r1
   1193c:	d301      	bcc.n	11942 <__divsi3+0xc6>
   1193e:	014b      	lsls	r3, r1, #5
   11940:	1ac0      	subs	r0, r0, r3
   11942:	4152      	adcs	r2, r2
   11944:	0903      	lsrs	r3, r0, #4
   11946:	428b      	cmp	r3, r1
   11948:	d301      	bcc.n	1194e <__divsi3+0xd2>
   1194a:	010b      	lsls	r3, r1, #4
   1194c:	1ac0      	subs	r0, r0, r3
   1194e:	4152      	adcs	r2, r2
   11950:	08c3      	lsrs	r3, r0, #3
   11952:	428b      	cmp	r3, r1
   11954:	d301      	bcc.n	1195a <__divsi3+0xde>
   11956:	00cb      	lsls	r3, r1, #3
   11958:	1ac0      	subs	r0, r0, r3
   1195a:	4152      	adcs	r2, r2
   1195c:	0883      	lsrs	r3, r0, #2
   1195e:	428b      	cmp	r3, r1
   11960:	d301      	bcc.n	11966 <__divsi3+0xea>
   11962:	008b      	lsls	r3, r1, #2
   11964:	1ac0      	subs	r0, r0, r3
   11966:	4152      	adcs	r2, r2
   11968:	0843      	lsrs	r3, r0, #1
   1196a:	428b      	cmp	r3, r1
   1196c:	d301      	bcc.n	11972 <__divsi3+0xf6>
   1196e:	004b      	lsls	r3, r1, #1
   11970:	1ac0      	subs	r0, r0, r3
   11972:	4152      	adcs	r2, r2
   11974:	1a41      	subs	r1, r0, r1
   11976:	d200      	bcs.n	1197a <__divsi3+0xfe>
   11978:	4601      	mov	r1, r0
   1197a:	4152      	adcs	r2, r2
   1197c:	4610      	mov	r0, r2
   1197e:	4770      	bx	lr
   11980:	e05d      	b.n	11a3e <__divsi3+0x1c2>
   11982:	0fca      	lsrs	r2, r1, #31
   11984:	d000      	beq.n	11988 <__divsi3+0x10c>
   11986:	4249      	negs	r1, r1
   11988:	1003      	asrs	r3, r0, #32
   1198a:	d300      	bcc.n	1198e <__divsi3+0x112>
   1198c:	4240      	negs	r0, r0
   1198e:	4053      	eors	r3, r2
   11990:	2200      	movs	r2, #0
   11992:	469c      	mov	ip, r3
   11994:	0903      	lsrs	r3, r0, #4
   11996:	428b      	cmp	r3, r1
   11998:	d32d      	bcc.n	119f6 <__divsi3+0x17a>
   1199a:	0a03      	lsrs	r3, r0, #8
   1199c:	428b      	cmp	r3, r1
   1199e:	d312      	bcc.n	119c6 <__divsi3+0x14a>
   119a0:	22fc      	movs	r2, #252	; 0xfc
   119a2:	0189      	lsls	r1, r1, #6
   119a4:	ba12      	rev	r2, r2
   119a6:	0a03      	lsrs	r3, r0, #8
   119a8:	428b      	cmp	r3, r1
   119aa:	d30c      	bcc.n	119c6 <__divsi3+0x14a>
   119ac:	0189      	lsls	r1, r1, #6
   119ae:	1192      	asrs	r2, r2, #6
   119b0:	428b      	cmp	r3, r1
   119b2:	d308      	bcc.n	119c6 <__divsi3+0x14a>
   119b4:	0189      	lsls	r1, r1, #6
   119b6:	1192      	asrs	r2, r2, #6
   119b8:	428b      	cmp	r3, r1
   119ba:	d304      	bcc.n	119c6 <__divsi3+0x14a>
   119bc:	0189      	lsls	r1, r1, #6
   119be:	d03a      	beq.n	11a36 <__divsi3+0x1ba>
   119c0:	1192      	asrs	r2, r2, #6
   119c2:	e000      	b.n	119c6 <__divsi3+0x14a>
   119c4:	0989      	lsrs	r1, r1, #6
   119c6:	09c3      	lsrs	r3, r0, #7
   119c8:	428b      	cmp	r3, r1
   119ca:	d301      	bcc.n	119d0 <__divsi3+0x154>
   119cc:	01cb      	lsls	r3, r1, #7
   119ce:	1ac0      	subs	r0, r0, r3
   119d0:	4152      	adcs	r2, r2
   119d2:	0983      	lsrs	r3, r0, #6
   119d4:	428b      	cmp	r3, r1
   119d6:	d301      	bcc.n	119dc <__divsi3+0x160>
   119d8:	018b      	lsls	r3, r1, #6
   119da:	1ac0      	subs	r0, r0, r3
   119dc:	4152      	adcs	r2, r2
   119de:	0943      	lsrs	r3, r0, #5
   119e0:	428b      	cmp	r3, r1
   119e2:	d301      	bcc.n	119e8 <__divsi3+0x16c>
   119e4:	014b      	lsls	r3, r1, #5
   119e6:	1ac0      	subs	r0, r0, r3
   119e8:	4152      	adcs	r2, r2
   119ea:	0903      	lsrs	r3, r0, #4
   119ec:	428b      	cmp	r3, r1
   119ee:	d301      	bcc.n	119f4 <__divsi3+0x178>
   119f0:	010b      	lsls	r3, r1, #4
   119f2:	1ac0      	subs	r0, r0, r3
   119f4:	4152      	adcs	r2, r2
   119f6:	08c3      	lsrs	r3, r0, #3
   119f8:	428b      	cmp	r3, r1
   119fa:	d301      	bcc.n	11a00 <__divsi3+0x184>
   119fc:	00cb      	lsls	r3, r1, #3
   119fe:	1ac0      	subs	r0, r0, r3
   11a00:	4152      	adcs	r2, r2
   11a02:	0883      	lsrs	r3, r0, #2
   11a04:	428b      	cmp	r3, r1
   11a06:	d301      	bcc.n	11a0c <__divsi3+0x190>
   11a08:	008b      	lsls	r3, r1, #2
   11a0a:	1ac0      	subs	r0, r0, r3
   11a0c:	4152      	adcs	r2, r2
   11a0e:	d2d9      	bcs.n	119c4 <__divsi3+0x148>
   11a10:	0843      	lsrs	r3, r0, #1
   11a12:	428b      	cmp	r3, r1
   11a14:	d301      	bcc.n	11a1a <__divsi3+0x19e>
   11a16:	004b      	lsls	r3, r1, #1
   11a18:	1ac0      	subs	r0, r0, r3
   11a1a:	4152      	adcs	r2, r2
   11a1c:	1a41      	subs	r1, r0, r1
   11a1e:	d200      	bcs.n	11a22 <__divsi3+0x1a6>
   11a20:	4601      	mov	r1, r0
   11a22:	4663      	mov	r3, ip
   11a24:	4152      	adcs	r2, r2
   11a26:	105b      	asrs	r3, r3, #1
   11a28:	4610      	mov	r0, r2
   11a2a:	d301      	bcc.n	11a30 <__divsi3+0x1b4>
   11a2c:	4240      	negs	r0, r0
   11a2e:	2b00      	cmp	r3, #0
   11a30:	d500      	bpl.n	11a34 <__divsi3+0x1b8>
   11a32:	4249      	negs	r1, r1
   11a34:	4770      	bx	lr
   11a36:	4663      	mov	r3, ip
   11a38:	105b      	asrs	r3, r3, #1
   11a3a:	d300      	bcc.n	11a3e <__divsi3+0x1c2>
   11a3c:	4240      	negs	r0, r0
   11a3e:	b501      	push	{r0, lr}
   11a40:	2000      	movs	r0, #0
   11a42:	f000 f805 	bl	11a50 <__aeabi_idiv0>
   11a46:	bd02      	pop	{r1, pc}

00011a48 <__aeabi_idivmod>:
   11a48:	2900      	cmp	r1, #0
   11a4a:	d0f8      	beq.n	11a3e <__divsi3+0x1c2>
   11a4c:	e716      	b.n	1187c <__divsi3>
   11a4e:	4770      	bx	lr

00011a50 <__aeabi_idiv0>:
   11a50:	4770      	bx	lr
   11a52:	46c0      	nop			; (mov r8, r8)

00011a54 <__aeabi_cfrcmple>:
   11a54:	4684      	mov	ip, r0
   11a56:	1c08      	adds	r0, r1, #0
   11a58:	4661      	mov	r1, ip
   11a5a:	e7ff      	b.n	11a5c <__aeabi_cfcmpeq>

00011a5c <__aeabi_cfcmpeq>:
   11a5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   11a5e:	f000 fcb5 	bl	123cc <__lesf2>
   11a62:	2800      	cmp	r0, #0
   11a64:	d401      	bmi.n	11a6a <__aeabi_cfcmpeq+0xe>
   11a66:	2100      	movs	r1, #0
   11a68:	42c8      	cmn	r0, r1
   11a6a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00011a6c <__aeabi_fcmpeq>:
   11a6c:	b510      	push	{r4, lr}
   11a6e:	f000 fc47 	bl	12300 <__eqsf2>
   11a72:	4240      	negs	r0, r0
   11a74:	3001      	adds	r0, #1
   11a76:	bd10      	pop	{r4, pc}

00011a78 <__aeabi_fcmplt>:
   11a78:	b510      	push	{r4, lr}
   11a7a:	f000 fca7 	bl	123cc <__lesf2>
   11a7e:	2800      	cmp	r0, #0
   11a80:	db01      	blt.n	11a86 <__aeabi_fcmplt+0xe>
   11a82:	2000      	movs	r0, #0
   11a84:	bd10      	pop	{r4, pc}
   11a86:	2001      	movs	r0, #1
   11a88:	bd10      	pop	{r4, pc}
   11a8a:	46c0      	nop			; (mov r8, r8)

00011a8c <__aeabi_fcmple>:
   11a8c:	b510      	push	{r4, lr}
   11a8e:	f000 fc9d 	bl	123cc <__lesf2>
   11a92:	2800      	cmp	r0, #0
   11a94:	dd01      	ble.n	11a9a <__aeabi_fcmple+0xe>
   11a96:	2000      	movs	r0, #0
   11a98:	bd10      	pop	{r4, pc}
   11a9a:	2001      	movs	r0, #1
   11a9c:	bd10      	pop	{r4, pc}
   11a9e:	46c0      	nop			; (mov r8, r8)

00011aa0 <__aeabi_fcmpgt>:
   11aa0:	b510      	push	{r4, lr}
   11aa2:	f000 fc53 	bl	1234c <__gesf2>
   11aa6:	2800      	cmp	r0, #0
   11aa8:	dc01      	bgt.n	11aae <__aeabi_fcmpgt+0xe>
   11aaa:	2000      	movs	r0, #0
   11aac:	bd10      	pop	{r4, pc}
   11aae:	2001      	movs	r0, #1
   11ab0:	bd10      	pop	{r4, pc}
   11ab2:	46c0      	nop			; (mov r8, r8)

00011ab4 <__aeabi_fcmpge>:
   11ab4:	b510      	push	{r4, lr}
   11ab6:	f000 fc49 	bl	1234c <__gesf2>
   11aba:	2800      	cmp	r0, #0
   11abc:	da01      	bge.n	11ac2 <__aeabi_fcmpge+0xe>
   11abe:	2000      	movs	r0, #0
   11ac0:	bd10      	pop	{r4, pc}
   11ac2:	2001      	movs	r0, #1
   11ac4:	bd10      	pop	{r4, pc}
   11ac6:	46c0      	nop			; (mov r8, r8)

00011ac8 <__aeabi_uldivmod>:
   11ac8:	2b00      	cmp	r3, #0
   11aca:	d111      	bne.n	11af0 <__aeabi_uldivmod+0x28>
   11acc:	2a00      	cmp	r2, #0
   11ace:	d10f      	bne.n	11af0 <__aeabi_uldivmod+0x28>
   11ad0:	2900      	cmp	r1, #0
   11ad2:	d100      	bne.n	11ad6 <__aeabi_uldivmod+0xe>
   11ad4:	2800      	cmp	r0, #0
   11ad6:	d002      	beq.n	11ade <__aeabi_uldivmod+0x16>
   11ad8:	2100      	movs	r1, #0
   11ada:	43c9      	mvns	r1, r1
   11adc:	1c08      	adds	r0, r1, #0
   11ade:	b407      	push	{r0, r1, r2}
   11ae0:	4802      	ldr	r0, [pc, #8]	; (11aec <__aeabi_uldivmod+0x24>)
   11ae2:	a102      	add	r1, pc, #8	; (adr r1, 11aec <__aeabi_uldivmod+0x24>)
   11ae4:	1840      	adds	r0, r0, r1
   11ae6:	9002      	str	r0, [sp, #8]
   11ae8:	bd03      	pop	{r0, r1, pc}
   11aea:	46c0      	nop			; (mov r8, r8)
   11aec:	ffffff65 	.word	0xffffff65
   11af0:	b403      	push	{r0, r1}
   11af2:	4668      	mov	r0, sp
   11af4:	b501      	push	{r0, lr}
   11af6:	9802      	ldr	r0, [sp, #8]
   11af8:	f000 f868 	bl	11bcc <__udivmoddi4>
   11afc:	9b01      	ldr	r3, [sp, #4]
   11afe:	469e      	mov	lr, r3
   11b00:	b002      	add	sp, #8
   11b02:	bc0c      	pop	{r2, r3}
   11b04:	4770      	bx	lr
   11b06:	46c0      	nop			; (mov r8, r8)

00011b08 <__aeabi_lmul>:
   11b08:	b5f0      	push	{r4, r5, r6, r7, lr}
   11b0a:	46ce      	mov	lr, r9
   11b0c:	4647      	mov	r7, r8
   11b0e:	0415      	lsls	r5, r2, #16
   11b10:	0c2d      	lsrs	r5, r5, #16
   11b12:	002e      	movs	r6, r5
   11b14:	b580      	push	{r7, lr}
   11b16:	0407      	lsls	r7, r0, #16
   11b18:	0c14      	lsrs	r4, r2, #16
   11b1a:	0c3f      	lsrs	r7, r7, #16
   11b1c:	4699      	mov	r9, r3
   11b1e:	0c03      	lsrs	r3, r0, #16
   11b20:	437e      	muls	r6, r7
   11b22:	435d      	muls	r5, r3
   11b24:	4367      	muls	r7, r4
   11b26:	4363      	muls	r3, r4
   11b28:	197f      	adds	r7, r7, r5
   11b2a:	0c34      	lsrs	r4, r6, #16
   11b2c:	19e4      	adds	r4, r4, r7
   11b2e:	469c      	mov	ip, r3
   11b30:	42a5      	cmp	r5, r4
   11b32:	d903      	bls.n	11b3c <__aeabi_lmul+0x34>
   11b34:	2380      	movs	r3, #128	; 0x80
   11b36:	025b      	lsls	r3, r3, #9
   11b38:	4698      	mov	r8, r3
   11b3a:	44c4      	add	ip, r8
   11b3c:	464b      	mov	r3, r9
   11b3e:	4351      	muls	r1, r2
   11b40:	4343      	muls	r3, r0
   11b42:	0436      	lsls	r6, r6, #16
   11b44:	0c36      	lsrs	r6, r6, #16
   11b46:	0c25      	lsrs	r5, r4, #16
   11b48:	0424      	lsls	r4, r4, #16
   11b4a:	4465      	add	r5, ip
   11b4c:	19a4      	adds	r4, r4, r6
   11b4e:	1859      	adds	r1, r3, r1
   11b50:	1949      	adds	r1, r1, r5
   11b52:	0020      	movs	r0, r4
   11b54:	bc0c      	pop	{r2, r3}
   11b56:	4690      	mov	r8, r2
   11b58:	4699      	mov	r9, r3
   11b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00011b5c <__aeabi_f2uiz>:
   11b5c:	219e      	movs	r1, #158	; 0x9e
   11b5e:	b510      	push	{r4, lr}
   11b60:	05c9      	lsls	r1, r1, #23
   11b62:	1c04      	adds	r4, r0, #0
   11b64:	f7ff ffa6 	bl	11ab4 <__aeabi_fcmpge>
   11b68:	2800      	cmp	r0, #0
   11b6a:	d103      	bne.n	11b74 <__aeabi_f2uiz+0x18>
   11b6c:	1c20      	adds	r0, r4, #0
   11b6e:	f000 ff2b 	bl	129c8 <__aeabi_f2iz>
   11b72:	bd10      	pop	{r4, pc}
   11b74:	219e      	movs	r1, #158	; 0x9e
   11b76:	1c20      	adds	r0, r4, #0
   11b78:	05c9      	lsls	r1, r1, #23
   11b7a:	f000 fd89 	bl	12690 <__aeabi_fsub>
   11b7e:	f000 ff23 	bl	129c8 <__aeabi_f2iz>
   11b82:	2380      	movs	r3, #128	; 0x80
   11b84:	061b      	lsls	r3, r3, #24
   11b86:	469c      	mov	ip, r3
   11b88:	4460      	add	r0, ip
   11b8a:	e7f2      	b.n	11b72 <__aeabi_f2uiz+0x16>

00011b8c <__aeabi_f2ulz>:
   11b8c:	b570      	push	{r4, r5, r6, lr}
   11b8e:	f002 fc59 	bl	14444 <__aeabi_f2d>
   11b92:	2200      	movs	r2, #0
   11b94:	4b0b      	ldr	r3, [pc, #44]	; (11bc4 <__aeabi_f2ulz+0x38>)
   11b96:	000d      	movs	r5, r1
   11b98:	0004      	movs	r4, r0
   11b9a:	f001 fe0f 	bl	137bc <__aeabi_dmul>
   11b9e:	f002 fd57 	bl	14650 <__aeabi_d2uiz>
   11ba2:	0006      	movs	r6, r0
   11ba4:	f002 fc16 	bl	143d4 <__aeabi_ui2d>
   11ba8:	2200      	movs	r2, #0
   11baa:	4b07      	ldr	r3, [pc, #28]	; (11bc8 <__aeabi_f2ulz+0x3c>)
   11bac:	f001 fe06 	bl	137bc <__aeabi_dmul>
   11bb0:	0002      	movs	r2, r0
   11bb2:	000b      	movs	r3, r1
   11bb4:	0020      	movs	r0, r4
   11bb6:	0029      	movs	r1, r5
   11bb8:	f002 f880 	bl	13cbc <__aeabi_dsub>
   11bbc:	f002 fd48 	bl	14650 <__aeabi_d2uiz>
   11bc0:	0031      	movs	r1, r6
   11bc2:	bd70      	pop	{r4, r5, r6, pc}
   11bc4:	3df00000 	.word	0x3df00000
   11bc8:	41f00000 	.word	0x41f00000

00011bcc <__udivmoddi4>:
   11bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   11bce:	4657      	mov	r7, sl
   11bd0:	464e      	mov	r6, r9
   11bd2:	4645      	mov	r5, r8
   11bd4:	46de      	mov	lr, fp
   11bd6:	b5e0      	push	{r5, r6, r7, lr}
   11bd8:	0004      	movs	r4, r0
   11bda:	b083      	sub	sp, #12
   11bdc:	000d      	movs	r5, r1
   11bde:	4692      	mov	sl, r2
   11be0:	4699      	mov	r9, r3
   11be2:	428b      	cmp	r3, r1
   11be4:	d82f      	bhi.n	11c46 <__udivmoddi4+0x7a>
   11be6:	d02c      	beq.n	11c42 <__udivmoddi4+0x76>
   11be8:	4649      	mov	r1, r9
   11bea:	4650      	mov	r0, sl
   11bec:	f002 fd24 	bl	14638 <__clzdi2>
   11bf0:	0029      	movs	r1, r5
   11bf2:	0006      	movs	r6, r0
   11bf4:	0020      	movs	r0, r4
   11bf6:	f002 fd1f 	bl	14638 <__clzdi2>
   11bfa:	1a33      	subs	r3, r6, r0
   11bfc:	4698      	mov	r8, r3
   11bfe:	3b20      	subs	r3, #32
   11c00:	469b      	mov	fp, r3
   11c02:	d500      	bpl.n	11c06 <__udivmoddi4+0x3a>
   11c04:	e074      	b.n	11cf0 <__udivmoddi4+0x124>
   11c06:	4653      	mov	r3, sl
   11c08:	465a      	mov	r2, fp
   11c0a:	4093      	lsls	r3, r2
   11c0c:	001f      	movs	r7, r3
   11c0e:	4653      	mov	r3, sl
   11c10:	4642      	mov	r2, r8
   11c12:	4093      	lsls	r3, r2
   11c14:	001e      	movs	r6, r3
   11c16:	42af      	cmp	r7, r5
   11c18:	d829      	bhi.n	11c6e <__udivmoddi4+0xa2>
   11c1a:	d026      	beq.n	11c6a <__udivmoddi4+0x9e>
   11c1c:	465b      	mov	r3, fp
   11c1e:	1ba4      	subs	r4, r4, r6
   11c20:	41bd      	sbcs	r5, r7
   11c22:	2b00      	cmp	r3, #0
   11c24:	da00      	bge.n	11c28 <__udivmoddi4+0x5c>
   11c26:	e079      	b.n	11d1c <__udivmoddi4+0x150>
   11c28:	2200      	movs	r2, #0
   11c2a:	2300      	movs	r3, #0
   11c2c:	9200      	str	r2, [sp, #0]
   11c2e:	9301      	str	r3, [sp, #4]
   11c30:	2301      	movs	r3, #1
   11c32:	465a      	mov	r2, fp
   11c34:	4093      	lsls	r3, r2
   11c36:	9301      	str	r3, [sp, #4]
   11c38:	2301      	movs	r3, #1
   11c3a:	4642      	mov	r2, r8
   11c3c:	4093      	lsls	r3, r2
   11c3e:	9300      	str	r3, [sp, #0]
   11c40:	e019      	b.n	11c76 <__udivmoddi4+0xaa>
   11c42:	4282      	cmp	r2, r0
   11c44:	d9d0      	bls.n	11be8 <__udivmoddi4+0x1c>
   11c46:	2200      	movs	r2, #0
   11c48:	2300      	movs	r3, #0
   11c4a:	9200      	str	r2, [sp, #0]
   11c4c:	9301      	str	r3, [sp, #4]
   11c4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11c50:	2b00      	cmp	r3, #0
   11c52:	d001      	beq.n	11c58 <__udivmoddi4+0x8c>
   11c54:	601c      	str	r4, [r3, #0]
   11c56:	605d      	str	r5, [r3, #4]
   11c58:	9800      	ldr	r0, [sp, #0]
   11c5a:	9901      	ldr	r1, [sp, #4]
   11c5c:	b003      	add	sp, #12
   11c5e:	bc3c      	pop	{r2, r3, r4, r5}
   11c60:	4690      	mov	r8, r2
   11c62:	4699      	mov	r9, r3
   11c64:	46a2      	mov	sl, r4
   11c66:	46ab      	mov	fp, r5
   11c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11c6a:	42a3      	cmp	r3, r4
   11c6c:	d9d6      	bls.n	11c1c <__udivmoddi4+0x50>
   11c6e:	2200      	movs	r2, #0
   11c70:	2300      	movs	r3, #0
   11c72:	9200      	str	r2, [sp, #0]
   11c74:	9301      	str	r3, [sp, #4]
   11c76:	4643      	mov	r3, r8
   11c78:	2b00      	cmp	r3, #0
   11c7a:	d0e8      	beq.n	11c4e <__udivmoddi4+0x82>
   11c7c:	07fb      	lsls	r3, r7, #31
   11c7e:	0872      	lsrs	r2, r6, #1
   11c80:	431a      	orrs	r2, r3
   11c82:	4646      	mov	r6, r8
   11c84:	087b      	lsrs	r3, r7, #1
   11c86:	e00e      	b.n	11ca6 <__udivmoddi4+0xda>
   11c88:	42ab      	cmp	r3, r5
   11c8a:	d101      	bne.n	11c90 <__udivmoddi4+0xc4>
   11c8c:	42a2      	cmp	r2, r4
   11c8e:	d80c      	bhi.n	11caa <__udivmoddi4+0xde>
   11c90:	1aa4      	subs	r4, r4, r2
   11c92:	419d      	sbcs	r5, r3
   11c94:	2001      	movs	r0, #1
   11c96:	1924      	adds	r4, r4, r4
   11c98:	416d      	adcs	r5, r5
   11c9a:	2100      	movs	r1, #0
   11c9c:	3e01      	subs	r6, #1
   11c9e:	1824      	adds	r4, r4, r0
   11ca0:	414d      	adcs	r5, r1
   11ca2:	2e00      	cmp	r6, #0
   11ca4:	d006      	beq.n	11cb4 <__udivmoddi4+0xe8>
   11ca6:	42ab      	cmp	r3, r5
   11ca8:	d9ee      	bls.n	11c88 <__udivmoddi4+0xbc>
   11caa:	3e01      	subs	r6, #1
   11cac:	1924      	adds	r4, r4, r4
   11cae:	416d      	adcs	r5, r5
   11cb0:	2e00      	cmp	r6, #0
   11cb2:	d1f8      	bne.n	11ca6 <__udivmoddi4+0xda>
   11cb4:	465b      	mov	r3, fp
   11cb6:	9800      	ldr	r0, [sp, #0]
   11cb8:	9901      	ldr	r1, [sp, #4]
   11cba:	1900      	adds	r0, r0, r4
   11cbc:	4169      	adcs	r1, r5
   11cbe:	2b00      	cmp	r3, #0
   11cc0:	db22      	blt.n	11d08 <__udivmoddi4+0x13c>
   11cc2:	002b      	movs	r3, r5
   11cc4:	465a      	mov	r2, fp
   11cc6:	40d3      	lsrs	r3, r2
   11cc8:	002a      	movs	r2, r5
   11cca:	4644      	mov	r4, r8
   11ccc:	40e2      	lsrs	r2, r4
   11cce:	001c      	movs	r4, r3
   11cd0:	465b      	mov	r3, fp
   11cd2:	0015      	movs	r5, r2
   11cd4:	2b00      	cmp	r3, #0
   11cd6:	db2c      	blt.n	11d32 <__udivmoddi4+0x166>
   11cd8:	0026      	movs	r6, r4
   11cda:	409e      	lsls	r6, r3
   11cdc:	0033      	movs	r3, r6
   11cde:	0026      	movs	r6, r4
   11ce0:	4647      	mov	r7, r8
   11ce2:	40be      	lsls	r6, r7
   11ce4:	0032      	movs	r2, r6
   11ce6:	1a80      	subs	r0, r0, r2
   11ce8:	4199      	sbcs	r1, r3
   11cea:	9000      	str	r0, [sp, #0]
   11cec:	9101      	str	r1, [sp, #4]
   11cee:	e7ae      	b.n	11c4e <__udivmoddi4+0x82>
   11cf0:	4642      	mov	r2, r8
   11cf2:	2320      	movs	r3, #32
   11cf4:	1a9b      	subs	r3, r3, r2
   11cf6:	4652      	mov	r2, sl
   11cf8:	40da      	lsrs	r2, r3
   11cfa:	4641      	mov	r1, r8
   11cfc:	0013      	movs	r3, r2
   11cfe:	464a      	mov	r2, r9
   11d00:	408a      	lsls	r2, r1
   11d02:	0017      	movs	r7, r2
   11d04:	431f      	orrs	r7, r3
   11d06:	e782      	b.n	11c0e <__udivmoddi4+0x42>
   11d08:	4642      	mov	r2, r8
   11d0a:	2320      	movs	r3, #32
   11d0c:	1a9b      	subs	r3, r3, r2
   11d0e:	002a      	movs	r2, r5
   11d10:	4646      	mov	r6, r8
   11d12:	409a      	lsls	r2, r3
   11d14:	0023      	movs	r3, r4
   11d16:	40f3      	lsrs	r3, r6
   11d18:	4313      	orrs	r3, r2
   11d1a:	e7d5      	b.n	11cc8 <__udivmoddi4+0xfc>
   11d1c:	4642      	mov	r2, r8
   11d1e:	2320      	movs	r3, #32
   11d20:	2100      	movs	r1, #0
   11d22:	1a9b      	subs	r3, r3, r2
   11d24:	2200      	movs	r2, #0
   11d26:	9100      	str	r1, [sp, #0]
   11d28:	9201      	str	r2, [sp, #4]
   11d2a:	2201      	movs	r2, #1
   11d2c:	40da      	lsrs	r2, r3
   11d2e:	9201      	str	r2, [sp, #4]
   11d30:	e782      	b.n	11c38 <__udivmoddi4+0x6c>
   11d32:	4642      	mov	r2, r8
   11d34:	2320      	movs	r3, #32
   11d36:	0026      	movs	r6, r4
   11d38:	1a9b      	subs	r3, r3, r2
   11d3a:	40de      	lsrs	r6, r3
   11d3c:	002f      	movs	r7, r5
   11d3e:	46b4      	mov	ip, r6
   11d40:	4097      	lsls	r7, r2
   11d42:	4666      	mov	r6, ip
   11d44:	003b      	movs	r3, r7
   11d46:	4333      	orrs	r3, r6
   11d48:	e7c9      	b.n	11cde <__udivmoddi4+0x112>
   11d4a:	46c0      	nop			; (mov r8, r8)

00011d4c <__aeabi_fadd>:
   11d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   11d4e:	46c6      	mov	lr, r8
   11d50:	024e      	lsls	r6, r1, #9
   11d52:	0247      	lsls	r7, r0, #9
   11d54:	0a76      	lsrs	r6, r6, #9
   11d56:	0a7b      	lsrs	r3, r7, #9
   11d58:	0044      	lsls	r4, r0, #1
   11d5a:	0fc5      	lsrs	r5, r0, #31
   11d5c:	00f7      	lsls	r7, r6, #3
   11d5e:	0048      	lsls	r0, r1, #1
   11d60:	4698      	mov	r8, r3
   11d62:	b500      	push	{lr}
   11d64:	0e24      	lsrs	r4, r4, #24
   11d66:	002a      	movs	r2, r5
   11d68:	00db      	lsls	r3, r3, #3
   11d6a:	0e00      	lsrs	r0, r0, #24
   11d6c:	0fc9      	lsrs	r1, r1, #31
   11d6e:	46bc      	mov	ip, r7
   11d70:	428d      	cmp	r5, r1
   11d72:	d067      	beq.n	11e44 <__aeabi_fadd+0xf8>
   11d74:	1a22      	subs	r2, r4, r0
   11d76:	2a00      	cmp	r2, #0
   11d78:	dc00      	bgt.n	11d7c <__aeabi_fadd+0x30>
   11d7a:	e0a5      	b.n	11ec8 <__aeabi_fadd+0x17c>
   11d7c:	2800      	cmp	r0, #0
   11d7e:	d13a      	bne.n	11df6 <__aeabi_fadd+0xaa>
   11d80:	2f00      	cmp	r7, #0
   11d82:	d100      	bne.n	11d86 <__aeabi_fadd+0x3a>
   11d84:	e093      	b.n	11eae <__aeabi_fadd+0x162>
   11d86:	1e51      	subs	r1, r2, #1
   11d88:	2900      	cmp	r1, #0
   11d8a:	d000      	beq.n	11d8e <__aeabi_fadd+0x42>
   11d8c:	e0bc      	b.n	11f08 <__aeabi_fadd+0x1bc>
   11d8e:	2401      	movs	r4, #1
   11d90:	1bdb      	subs	r3, r3, r7
   11d92:	015a      	lsls	r2, r3, #5
   11d94:	d546      	bpl.n	11e24 <__aeabi_fadd+0xd8>
   11d96:	019b      	lsls	r3, r3, #6
   11d98:	099e      	lsrs	r6, r3, #6
   11d9a:	0030      	movs	r0, r6
   11d9c:	f002 fc2e 	bl	145fc <__clzsi2>
   11da0:	3805      	subs	r0, #5
   11da2:	4086      	lsls	r6, r0
   11da4:	4284      	cmp	r4, r0
   11da6:	dd00      	ble.n	11daa <__aeabi_fadd+0x5e>
   11da8:	e09d      	b.n	11ee6 <__aeabi_fadd+0x19a>
   11daa:	1b04      	subs	r4, r0, r4
   11dac:	0032      	movs	r2, r6
   11dae:	2020      	movs	r0, #32
   11db0:	3401      	adds	r4, #1
   11db2:	40e2      	lsrs	r2, r4
   11db4:	1b04      	subs	r4, r0, r4
   11db6:	40a6      	lsls	r6, r4
   11db8:	0033      	movs	r3, r6
   11dba:	1e5e      	subs	r6, r3, #1
   11dbc:	41b3      	sbcs	r3, r6
   11dbe:	2400      	movs	r4, #0
   11dc0:	4313      	orrs	r3, r2
   11dc2:	075a      	lsls	r2, r3, #29
   11dc4:	d004      	beq.n	11dd0 <__aeabi_fadd+0x84>
   11dc6:	220f      	movs	r2, #15
   11dc8:	401a      	ands	r2, r3
   11dca:	2a04      	cmp	r2, #4
   11dcc:	d000      	beq.n	11dd0 <__aeabi_fadd+0x84>
   11dce:	3304      	adds	r3, #4
   11dd0:	015a      	lsls	r2, r3, #5
   11dd2:	d529      	bpl.n	11e28 <__aeabi_fadd+0xdc>
   11dd4:	3401      	adds	r4, #1
   11dd6:	2cff      	cmp	r4, #255	; 0xff
   11dd8:	d100      	bne.n	11ddc <__aeabi_fadd+0x90>
   11dda:	e081      	b.n	11ee0 <__aeabi_fadd+0x194>
   11ddc:	002a      	movs	r2, r5
   11dde:	019b      	lsls	r3, r3, #6
   11de0:	0a5b      	lsrs	r3, r3, #9
   11de2:	b2e4      	uxtb	r4, r4
   11de4:	025b      	lsls	r3, r3, #9
   11de6:	05e4      	lsls	r4, r4, #23
   11de8:	0a58      	lsrs	r0, r3, #9
   11dea:	07d2      	lsls	r2, r2, #31
   11dec:	4320      	orrs	r0, r4
   11dee:	4310      	orrs	r0, r2
   11df0:	bc04      	pop	{r2}
   11df2:	4690      	mov	r8, r2
   11df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11df6:	2cff      	cmp	r4, #255	; 0xff
   11df8:	d0e3      	beq.n	11dc2 <__aeabi_fadd+0x76>
   11dfa:	2180      	movs	r1, #128	; 0x80
   11dfc:	0038      	movs	r0, r7
   11dfe:	04c9      	lsls	r1, r1, #19
   11e00:	4308      	orrs	r0, r1
   11e02:	4684      	mov	ip, r0
   11e04:	2a1b      	cmp	r2, #27
   11e06:	dd00      	ble.n	11e0a <__aeabi_fadd+0xbe>
   11e08:	e082      	b.n	11f10 <__aeabi_fadd+0x1c4>
   11e0a:	2020      	movs	r0, #32
   11e0c:	4661      	mov	r1, ip
   11e0e:	40d1      	lsrs	r1, r2
   11e10:	1a82      	subs	r2, r0, r2
   11e12:	4660      	mov	r0, ip
   11e14:	4090      	lsls	r0, r2
   11e16:	0002      	movs	r2, r0
   11e18:	1e50      	subs	r0, r2, #1
   11e1a:	4182      	sbcs	r2, r0
   11e1c:	430a      	orrs	r2, r1
   11e1e:	1a9b      	subs	r3, r3, r2
   11e20:	015a      	lsls	r2, r3, #5
   11e22:	d4b8      	bmi.n	11d96 <__aeabi_fadd+0x4a>
   11e24:	075a      	lsls	r2, r3, #29
   11e26:	d1ce      	bne.n	11dc6 <__aeabi_fadd+0x7a>
   11e28:	08de      	lsrs	r6, r3, #3
   11e2a:	002a      	movs	r2, r5
   11e2c:	2cff      	cmp	r4, #255	; 0xff
   11e2e:	d13a      	bne.n	11ea6 <__aeabi_fadd+0x15a>
   11e30:	2e00      	cmp	r6, #0
   11e32:	d100      	bne.n	11e36 <__aeabi_fadd+0xea>
   11e34:	e0ae      	b.n	11f94 <__aeabi_fadd+0x248>
   11e36:	2380      	movs	r3, #128	; 0x80
   11e38:	03db      	lsls	r3, r3, #15
   11e3a:	4333      	orrs	r3, r6
   11e3c:	025b      	lsls	r3, r3, #9
   11e3e:	0a5b      	lsrs	r3, r3, #9
   11e40:	24ff      	movs	r4, #255	; 0xff
   11e42:	e7cf      	b.n	11de4 <__aeabi_fadd+0x98>
   11e44:	1a21      	subs	r1, r4, r0
   11e46:	2900      	cmp	r1, #0
   11e48:	dd52      	ble.n	11ef0 <__aeabi_fadd+0x1a4>
   11e4a:	2800      	cmp	r0, #0
   11e4c:	d031      	beq.n	11eb2 <__aeabi_fadd+0x166>
   11e4e:	2cff      	cmp	r4, #255	; 0xff
   11e50:	d0b7      	beq.n	11dc2 <__aeabi_fadd+0x76>
   11e52:	2080      	movs	r0, #128	; 0x80
   11e54:	003e      	movs	r6, r7
   11e56:	04c0      	lsls	r0, r0, #19
   11e58:	4306      	orrs	r6, r0
   11e5a:	46b4      	mov	ip, r6
   11e5c:	291b      	cmp	r1, #27
   11e5e:	dd00      	ble.n	11e62 <__aeabi_fadd+0x116>
   11e60:	e0aa      	b.n	11fb8 <__aeabi_fadd+0x26c>
   11e62:	2620      	movs	r6, #32
   11e64:	4660      	mov	r0, ip
   11e66:	40c8      	lsrs	r0, r1
   11e68:	1a71      	subs	r1, r6, r1
   11e6a:	4666      	mov	r6, ip
   11e6c:	408e      	lsls	r6, r1
   11e6e:	0031      	movs	r1, r6
   11e70:	1e4e      	subs	r6, r1, #1
   11e72:	41b1      	sbcs	r1, r6
   11e74:	4301      	orrs	r1, r0
   11e76:	185b      	adds	r3, r3, r1
   11e78:	0159      	lsls	r1, r3, #5
   11e7a:	d5d3      	bpl.n	11e24 <__aeabi_fadd+0xd8>
   11e7c:	3401      	adds	r4, #1
   11e7e:	2cff      	cmp	r4, #255	; 0xff
   11e80:	d100      	bne.n	11e84 <__aeabi_fadd+0x138>
   11e82:	e087      	b.n	11f94 <__aeabi_fadd+0x248>
   11e84:	2201      	movs	r2, #1
   11e86:	4978      	ldr	r1, [pc, #480]	; (12068 <__aeabi_fadd+0x31c>)
   11e88:	401a      	ands	r2, r3
   11e8a:	085b      	lsrs	r3, r3, #1
   11e8c:	400b      	ands	r3, r1
   11e8e:	4313      	orrs	r3, r2
   11e90:	e797      	b.n	11dc2 <__aeabi_fadd+0x76>
   11e92:	2c00      	cmp	r4, #0
   11e94:	d000      	beq.n	11e98 <__aeabi_fadd+0x14c>
   11e96:	e0a7      	b.n	11fe8 <__aeabi_fadd+0x29c>
   11e98:	2b00      	cmp	r3, #0
   11e9a:	d000      	beq.n	11e9e <__aeabi_fadd+0x152>
   11e9c:	e0b6      	b.n	1200c <__aeabi_fadd+0x2c0>
   11e9e:	1e3b      	subs	r3, r7, #0
   11ea0:	d162      	bne.n	11f68 <__aeabi_fadd+0x21c>
   11ea2:	2600      	movs	r6, #0
   11ea4:	2200      	movs	r2, #0
   11ea6:	0273      	lsls	r3, r6, #9
   11ea8:	0a5b      	lsrs	r3, r3, #9
   11eaa:	b2e4      	uxtb	r4, r4
   11eac:	e79a      	b.n	11de4 <__aeabi_fadd+0x98>
   11eae:	0014      	movs	r4, r2
   11eb0:	e787      	b.n	11dc2 <__aeabi_fadd+0x76>
   11eb2:	2f00      	cmp	r7, #0
   11eb4:	d04d      	beq.n	11f52 <__aeabi_fadd+0x206>
   11eb6:	1e48      	subs	r0, r1, #1
   11eb8:	2800      	cmp	r0, #0
   11eba:	d157      	bne.n	11f6c <__aeabi_fadd+0x220>
   11ebc:	4463      	add	r3, ip
   11ebe:	2401      	movs	r4, #1
   11ec0:	015a      	lsls	r2, r3, #5
   11ec2:	d5af      	bpl.n	11e24 <__aeabi_fadd+0xd8>
   11ec4:	2402      	movs	r4, #2
   11ec6:	e7dd      	b.n	11e84 <__aeabi_fadd+0x138>
   11ec8:	2a00      	cmp	r2, #0
   11eca:	d124      	bne.n	11f16 <__aeabi_fadd+0x1ca>
   11ecc:	1c62      	adds	r2, r4, #1
   11ece:	b2d2      	uxtb	r2, r2
   11ed0:	2a01      	cmp	r2, #1
   11ed2:	ddde      	ble.n	11e92 <__aeabi_fadd+0x146>
   11ed4:	1bde      	subs	r6, r3, r7
   11ed6:	0172      	lsls	r2, r6, #5
   11ed8:	d535      	bpl.n	11f46 <__aeabi_fadd+0x1fa>
   11eda:	1afe      	subs	r6, r7, r3
   11edc:	000d      	movs	r5, r1
   11ede:	e75c      	b.n	11d9a <__aeabi_fadd+0x4e>
   11ee0:	002a      	movs	r2, r5
   11ee2:	2300      	movs	r3, #0
   11ee4:	e77e      	b.n	11de4 <__aeabi_fadd+0x98>
   11ee6:	0033      	movs	r3, r6
   11ee8:	4a60      	ldr	r2, [pc, #384]	; (1206c <__aeabi_fadd+0x320>)
   11eea:	1a24      	subs	r4, r4, r0
   11eec:	4013      	ands	r3, r2
   11eee:	e768      	b.n	11dc2 <__aeabi_fadd+0x76>
   11ef0:	2900      	cmp	r1, #0
   11ef2:	d163      	bne.n	11fbc <__aeabi_fadd+0x270>
   11ef4:	1c61      	adds	r1, r4, #1
   11ef6:	b2c8      	uxtb	r0, r1
   11ef8:	2801      	cmp	r0, #1
   11efa:	dd4e      	ble.n	11f9a <__aeabi_fadd+0x24e>
   11efc:	29ff      	cmp	r1, #255	; 0xff
   11efe:	d049      	beq.n	11f94 <__aeabi_fadd+0x248>
   11f00:	4463      	add	r3, ip
   11f02:	085b      	lsrs	r3, r3, #1
   11f04:	000c      	movs	r4, r1
   11f06:	e75c      	b.n	11dc2 <__aeabi_fadd+0x76>
   11f08:	2aff      	cmp	r2, #255	; 0xff
   11f0a:	d041      	beq.n	11f90 <__aeabi_fadd+0x244>
   11f0c:	000a      	movs	r2, r1
   11f0e:	e779      	b.n	11e04 <__aeabi_fadd+0xb8>
   11f10:	2201      	movs	r2, #1
   11f12:	1a9b      	subs	r3, r3, r2
   11f14:	e784      	b.n	11e20 <__aeabi_fadd+0xd4>
   11f16:	2c00      	cmp	r4, #0
   11f18:	d01d      	beq.n	11f56 <__aeabi_fadd+0x20a>
   11f1a:	28ff      	cmp	r0, #255	; 0xff
   11f1c:	d022      	beq.n	11f64 <__aeabi_fadd+0x218>
   11f1e:	2480      	movs	r4, #128	; 0x80
   11f20:	04e4      	lsls	r4, r4, #19
   11f22:	4252      	negs	r2, r2
   11f24:	4323      	orrs	r3, r4
   11f26:	2a1b      	cmp	r2, #27
   11f28:	dd00      	ble.n	11f2c <__aeabi_fadd+0x1e0>
   11f2a:	e08a      	b.n	12042 <__aeabi_fadd+0x2f6>
   11f2c:	001c      	movs	r4, r3
   11f2e:	2520      	movs	r5, #32
   11f30:	40d4      	lsrs	r4, r2
   11f32:	1aaa      	subs	r2, r5, r2
   11f34:	4093      	lsls	r3, r2
   11f36:	1e5a      	subs	r2, r3, #1
   11f38:	4193      	sbcs	r3, r2
   11f3a:	4323      	orrs	r3, r4
   11f3c:	4662      	mov	r2, ip
   11f3e:	0004      	movs	r4, r0
   11f40:	1ad3      	subs	r3, r2, r3
   11f42:	000d      	movs	r5, r1
   11f44:	e725      	b.n	11d92 <__aeabi_fadd+0x46>
   11f46:	2e00      	cmp	r6, #0
   11f48:	d000      	beq.n	11f4c <__aeabi_fadd+0x200>
   11f4a:	e726      	b.n	11d9a <__aeabi_fadd+0x4e>
   11f4c:	2200      	movs	r2, #0
   11f4e:	2400      	movs	r4, #0
   11f50:	e7a9      	b.n	11ea6 <__aeabi_fadd+0x15a>
   11f52:	000c      	movs	r4, r1
   11f54:	e735      	b.n	11dc2 <__aeabi_fadd+0x76>
   11f56:	2b00      	cmp	r3, #0
   11f58:	d04d      	beq.n	11ff6 <__aeabi_fadd+0x2aa>
   11f5a:	43d2      	mvns	r2, r2
   11f5c:	2a00      	cmp	r2, #0
   11f5e:	d0ed      	beq.n	11f3c <__aeabi_fadd+0x1f0>
   11f60:	28ff      	cmp	r0, #255	; 0xff
   11f62:	d1e0      	bne.n	11f26 <__aeabi_fadd+0x1da>
   11f64:	4663      	mov	r3, ip
   11f66:	24ff      	movs	r4, #255	; 0xff
   11f68:	000d      	movs	r5, r1
   11f6a:	e72a      	b.n	11dc2 <__aeabi_fadd+0x76>
   11f6c:	29ff      	cmp	r1, #255	; 0xff
   11f6e:	d00f      	beq.n	11f90 <__aeabi_fadd+0x244>
   11f70:	0001      	movs	r1, r0
   11f72:	e773      	b.n	11e5c <__aeabi_fadd+0x110>
   11f74:	2b00      	cmp	r3, #0
   11f76:	d061      	beq.n	1203c <__aeabi_fadd+0x2f0>
   11f78:	24ff      	movs	r4, #255	; 0xff
   11f7a:	2f00      	cmp	r7, #0
   11f7c:	d100      	bne.n	11f80 <__aeabi_fadd+0x234>
   11f7e:	e720      	b.n	11dc2 <__aeabi_fadd+0x76>
   11f80:	2280      	movs	r2, #128	; 0x80
   11f82:	4641      	mov	r1, r8
   11f84:	03d2      	lsls	r2, r2, #15
   11f86:	4211      	tst	r1, r2
   11f88:	d002      	beq.n	11f90 <__aeabi_fadd+0x244>
   11f8a:	4216      	tst	r6, r2
   11f8c:	d100      	bne.n	11f90 <__aeabi_fadd+0x244>
   11f8e:	003b      	movs	r3, r7
   11f90:	24ff      	movs	r4, #255	; 0xff
   11f92:	e716      	b.n	11dc2 <__aeabi_fadd+0x76>
   11f94:	24ff      	movs	r4, #255	; 0xff
   11f96:	2300      	movs	r3, #0
   11f98:	e724      	b.n	11de4 <__aeabi_fadd+0x98>
   11f9a:	2c00      	cmp	r4, #0
   11f9c:	d1ea      	bne.n	11f74 <__aeabi_fadd+0x228>
   11f9e:	2b00      	cmp	r3, #0
   11fa0:	d058      	beq.n	12054 <__aeabi_fadd+0x308>
   11fa2:	2f00      	cmp	r7, #0
   11fa4:	d100      	bne.n	11fa8 <__aeabi_fadd+0x25c>
   11fa6:	e70c      	b.n	11dc2 <__aeabi_fadd+0x76>
   11fa8:	4463      	add	r3, ip
   11faa:	015a      	lsls	r2, r3, #5
   11fac:	d400      	bmi.n	11fb0 <__aeabi_fadd+0x264>
   11fae:	e739      	b.n	11e24 <__aeabi_fadd+0xd8>
   11fb0:	4a2e      	ldr	r2, [pc, #184]	; (1206c <__aeabi_fadd+0x320>)
   11fb2:	000c      	movs	r4, r1
   11fb4:	4013      	ands	r3, r2
   11fb6:	e704      	b.n	11dc2 <__aeabi_fadd+0x76>
   11fb8:	2101      	movs	r1, #1
   11fba:	e75c      	b.n	11e76 <__aeabi_fadd+0x12a>
   11fbc:	2c00      	cmp	r4, #0
   11fbe:	d11e      	bne.n	11ffe <__aeabi_fadd+0x2b2>
   11fc0:	2b00      	cmp	r3, #0
   11fc2:	d040      	beq.n	12046 <__aeabi_fadd+0x2fa>
   11fc4:	43c9      	mvns	r1, r1
   11fc6:	2900      	cmp	r1, #0
   11fc8:	d00b      	beq.n	11fe2 <__aeabi_fadd+0x296>
   11fca:	28ff      	cmp	r0, #255	; 0xff
   11fcc:	d036      	beq.n	1203c <__aeabi_fadd+0x2f0>
   11fce:	291b      	cmp	r1, #27
   11fd0:	dc47      	bgt.n	12062 <__aeabi_fadd+0x316>
   11fd2:	001c      	movs	r4, r3
   11fd4:	2620      	movs	r6, #32
   11fd6:	40cc      	lsrs	r4, r1
   11fd8:	1a71      	subs	r1, r6, r1
   11fda:	408b      	lsls	r3, r1
   11fdc:	1e59      	subs	r1, r3, #1
   11fde:	418b      	sbcs	r3, r1
   11fe0:	4323      	orrs	r3, r4
   11fe2:	4463      	add	r3, ip
   11fe4:	0004      	movs	r4, r0
   11fe6:	e747      	b.n	11e78 <__aeabi_fadd+0x12c>
   11fe8:	2b00      	cmp	r3, #0
   11fea:	d118      	bne.n	1201e <__aeabi_fadd+0x2d2>
   11fec:	1e3b      	subs	r3, r7, #0
   11fee:	d02d      	beq.n	1204c <__aeabi_fadd+0x300>
   11ff0:	000d      	movs	r5, r1
   11ff2:	24ff      	movs	r4, #255	; 0xff
   11ff4:	e6e5      	b.n	11dc2 <__aeabi_fadd+0x76>
   11ff6:	003b      	movs	r3, r7
   11ff8:	0004      	movs	r4, r0
   11ffa:	000d      	movs	r5, r1
   11ffc:	e6e1      	b.n	11dc2 <__aeabi_fadd+0x76>
   11ffe:	28ff      	cmp	r0, #255	; 0xff
   12000:	d01c      	beq.n	1203c <__aeabi_fadd+0x2f0>
   12002:	2480      	movs	r4, #128	; 0x80
   12004:	04e4      	lsls	r4, r4, #19
   12006:	4249      	negs	r1, r1
   12008:	4323      	orrs	r3, r4
   1200a:	e7e0      	b.n	11fce <__aeabi_fadd+0x282>
   1200c:	2f00      	cmp	r7, #0
   1200e:	d100      	bne.n	12012 <__aeabi_fadd+0x2c6>
   12010:	e6d7      	b.n	11dc2 <__aeabi_fadd+0x76>
   12012:	1bde      	subs	r6, r3, r7
   12014:	0172      	lsls	r2, r6, #5
   12016:	d51f      	bpl.n	12058 <__aeabi_fadd+0x30c>
   12018:	1afb      	subs	r3, r7, r3
   1201a:	000d      	movs	r5, r1
   1201c:	e6d1      	b.n	11dc2 <__aeabi_fadd+0x76>
   1201e:	24ff      	movs	r4, #255	; 0xff
   12020:	2f00      	cmp	r7, #0
   12022:	d100      	bne.n	12026 <__aeabi_fadd+0x2da>
   12024:	e6cd      	b.n	11dc2 <__aeabi_fadd+0x76>
   12026:	2280      	movs	r2, #128	; 0x80
   12028:	4640      	mov	r0, r8
   1202a:	03d2      	lsls	r2, r2, #15
   1202c:	4210      	tst	r0, r2
   1202e:	d0af      	beq.n	11f90 <__aeabi_fadd+0x244>
   12030:	4216      	tst	r6, r2
   12032:	d1ad      	bne.n	11f90 <__aeabi_fadd+0x244>
   12034:	003b      	movs	r3, r7
   12036:	000d      	movs	r5, r1
   12038:	24ff      	movs	r4, #255	; 0xff
   1203a:	e6c2      	b.n	11dc2 <__aeabi_fadd+0x76>
   1203c:	4663      	mov	r3, ip
   1203e:	24ff      	movs	r4, #255	; 0xff
   12040:	e6bf      	b.n	11dc2 <__aeabi_fadd+0x76>
   12042:	2301      	movs	r3, #1
   12044:	e77a      	b.n	11f3c <__aeabi_fadd+0x1f0>
   12046:	003b      	movs	r3, r7
   12048:	0004      	movs	r4, r0
   1204a:	e6ba      	b.n	11dc2 <__aeabi_fadd+0x76>
   1204c:	2680      	movs	r6, #128	; 0x80
   1204e:	2200      	movs	r2, #0
   12050:	03f6      	lsls	r6, r6, #15
   12052:	e6f0      	b.n	11e36 <__aeabi_fadd+0xea>
   12054:	003b      	movs	r3, r7
   12056:	e6b4      	b.n	11dc2 <__aeabi_fadd+0x76>
   12058:	1e33      	subs	r3, r6, #0
   1205a:	d000      	beq.n	1205e <__aeabi_fadd+0x312>
   1205c:	e6e2      	b.n	11e24 <__aeabi_fadd+0xd8>
   1205e:	2200      	movs	r2, #0
   12060:	e721      	b.n	11ea6 <__aeabi_fadd+0x15a>
   12062:	2301      	movs	r3, #1
   12064:	e7bd      	b.n	11fe2 <__aeabi_fadd+0x296>
   12066:	46c0      	nop			; (mov r8, r8)
   12068:	7dffffff 	.word	0x7dffffff
   1206c:	fbffffff 	.word	0xfbffffff

00012070 <__aeabi_fdiv>:
   12070:	b5f0      	push	{r4, r5, r6, r7, lr}
   12072:	4657      	mov	r7, sl
   12074:	464e      	mov	r6, r9
   12076:	46de      	mov	lr, fp
   12078:	4645      	mov	r5, r8
   1207a:	b5e0      	push	{r5, r6, r7, lr}
   1207c:	0244      	lsls	r4, r0, #9
   1207e:	0043      	lsls	r3, r0, #1
   12080:	0fc6      	lsrs	r6, r0, #31
   12082:	b083      	sub	sp, #12
   12084:	1c0f      	adds	r7, r1, #0
   12086:	0a64      	lsrs	r4, r4, #9
   12088:	0e1b      	lsrs	r3, r3, #24
   1208a:	46b2      	mov	sl, r6
   1208c:	d053      	beq.n	12136 <__aeabi_fdiv+0xc6>
   1208e:	2bff      	cmp	r3, #255	; 0xff
   12090:	d027      	beq.n	120e2 <__aeabi_fdiv+0x72>
   12092:	2280      	movs	r2, #128	; 0x80
   12094:	00e4      	lsls	r4, r4, #3
   12096:	04d2      	lsls	r2, r2, #19
   12098:	4314      	orrs	r4, r2
   1209a:	227f      	movs	r2, #127	; 0x7f
   1209c:	4252      	negs	r2, r2
   1209e:	4690      	mov	r8, r2
   120a0:	4498      	add	r8, r3
   120a2:	2300      	movs	r3, #0
   120a4:	4699      	mov	r9, r3
   120a6:	469b      	mov	fp, r3
   120a8:	027d      	lsls	r5, r7, #9
   120aa:	0078      	lsls	r0, r7, #1
   120ac:	0ffb      	lsrs	r3, r7, #31
   120ae:	0a6d      	lsrs	r5, r5, #9
   120b0:	0e00      	lsrs	r0, r0, #24
   120b2:	9300      	str	r3, [sp, #0]
   120b4:	d024      	beq.n	12100 <__aeabi_fdiv+0x90>
   120b6:	28ff      	cmp	r0, #255	; 0xff
   120b8:	d046      	beq.n	12148 <__aeabi_fdiv+0xd8>
   120ba:	2380      	movs	r3, #128	; 0x80
   120bc:	2100      	movs	r1, #0
   120be:	00ed      	lsls	r5, r5, #3
   120c0:	04db      	lsls	r3, r3, #19
   120c2:	431d      	orrs	r5, r3
   120c4:	387f      	subs	r0, #127	; 0x7f
   120c6:	4647      	mov	r7, r8
   120c8:	1a38      	subs	r0, r7, r0
   120ca:	464f      	mov	r7, r9
   120cc:	430f      	orrs	r7, r1
   120ce:	00bf      	lsls	r7, r7, #2
   120d0:	46b9      	mov	r9, r7
   120d2:	0033      	movs	r3, r6
   120d4:	9a00      	ldr	r2, [sp, #0]
   120d6:	4f87      	ldr	r7, [pc, #540]	; (122f4 <__aeabi_fdiv+0x284>)
   120d8:	4053      	eors	r3, r2
   120da:	464a      	mov	r2, r9
   120dc:	58ba      	ldr	r2, [r7, r2]
   120de:	9301      	str	r3, [sp, #4]
   120e0:	4697      	mov	pc, r2
   120e2:	2c00      	cmp	r4, #0
   120e4:	d14e      	bne.n	12184 <__aeabi_fdiv+0x114>
   120e6:	2308      	movs	r3, #8
   120e8:	4699      	mov	r9, r3
   120ea:	33f7      	adds	r3, #247	; 0xf7
   120ec:	4698      	mov	r8, r3
   120ee:	3bfd      	subs	r3, #253	; 0xfd
   120f0:	469b      	mov	fp, r3
   120f2:	027d      	lsls	r5, r7, #9
   120f4:	0078      	lsls	r0, r7, #1
   120f6:	0ffb      	lsrs	r3, r7, #31
   120f8:	0a6d      	lsrs	r5, r5, #9
   120fa:	0e00      	lsrs	r0, r0, #24
   120fc:	9300      	str	r3, [sp, #0]
   120fe:	d1da      	bne.n	120b6 <__aeabi_fdiv+0x46>
   12100:	2d00      	cmp	r5, #0
   12102:	d126      	bne.n	12152 <__aeabi_fdiv+0xe2>
   12104:	2000      	movs	r0, #0
   12106:	2101      	movs	r1, #1
   12108:	0033      	movs	r3, r6
   1210a:	9a00      	ldr	r2, [sp, #0]
   1210c:	4f7a      	ldr	r7, [pc, #488]	; (122f8 <__aeabi_fdiv+0x288>)
   1210e:	4053      	eors	r3, r2
   12110:	4642      	mov	r2, r8
   12112:	1a10      	subs	r0, r2, r0
   12114:	464a      	mov	r2, r9
   12116:	430a      	orrs	r2, r1
   12118:	0092      	lsls	r2, r2, #2
   1211a:	58ba      	ldr	r2, [r7, r2]
   1211c:	001d      	movs	r5, r3
   1211e:	4697      	mov	pc, r2
   12120:	9b00      	ldr	r3, [sp, #0]
   12122:	002c      	movs	r4, r5
   12124:	469a      	mov	sl, r3
   12126:	468b      	mov	fp, r1
   12128:	465b      	mov	r3, fp
   1212a:	2b02      	cmp	r3, #2
   1212c:	d131      	bne.n	12192 <__aeabi_fdiv+0x122>
   1212e:	4653      	mov	r3, sl
   12130:	21ff      	movs	r1, #255	; 0xff
   12132:	2400      	movs	r4, #0
   12134:	e038      	b.n	121a8 <__aeabi_fdiv+0x138>
   12136:	2c00      	cmp	r4, #0
   12138:	d117      	bne.n	1216a <__aeabi_fdiv+0xfa>
   1213a:	2304      	movs	r3, #4
   1213c:	4699      	mov	r9, r3
   1213e:	2300      	movs	r3, #0
   12140:	4698      	mov	r8, r3
   12142:	3301      	adds	r3, #1
   12144:	469b      	mov	fp, r3
   12146:	e7af      	b.n	120a8 <__aeabi_fdiv+0x38>
   12148:	20ff      	movs	r0, #255	; 0xff
   1214a:	2d00      	cmp	r5, #0
   1214c:	d10b      	bne.n	12166 <__aeabi_fdiv+0xf6>
   1214e:	2102      	movs	r1, #2
   12150:	e7da      	b.n	12108 <__aeabi_fdiv+0x98>
   12152:	0028      	movs	r0, r5
   12154:	f002 fa52 	bl	145fc <__clzsi2>
   12158:	1f43      	subs	r3, r0, #5
   1215a:	409d      	lsls	r5, r3
   1215c:	2376      	movs	r3, #118	; 0x76
   1215e:	425b      	negs	r3, r3
   12160:	1a18      	subs	r0, r3, r0
   12162:	2100      	movs	r1, #0
   12164:	e7af      	b.n	120c6 <__aeabi_fdiv+0x56>
   12166:	2103      	movs	r1, #3
   12168:	e7ad      	b.n	120c6 <__aeabi_fdiv+0x56>
   1216a:	0020      	movs	r0, r4
   1216c:	f002 fa46 	bl	145fc <__clzsi2>
   12170:	1f43      	subs	r3, r0, #5
   12172:	409c      	lsls	r4, r3
   12174:	2376      	movs	r3, #118	; 0x76
   12176:	425b      	negs	r3, r3
   12178:	1a1b      	subs	r3, r3, r0
   1217a:	4698      	mov	r8, r3
   1217c:	2300      	movs	r3, #0
   1217e:	4699      	mov	r9, r3
   12180:	469b      	mov	fp, r3
   12182:	e791      	b.n	120a8 <__aeabi_fdiv+0x38>
   12184:	230c      	movs	r3, #12
   12186:	4699      	mov	r9, r3
   12188:	33f3      	adds	r3, #243	; 0xf3
   1218a:	4698      	mov	r8, r3
   1218c:	3bfc      	subs	r3, #252	; 0xfc
   1218e:	469b      	mov	fp, r3
   12190:	e78a      	b.n	120a8 <__aeabi_fdiv+0x38>
   12192:	2b03      	cmp	r3, #3
   12194:	d100      	bne.n	12198 <__aeabi_fdiv+0x128>
   12196:	e0a5      	b.n	122e4 <__aeabi_fdiv+0x274>
   12198:	4655      	mov	r5, sl
   1219a:	2b01      	cmp	r3, #1
   1219c:	d000      	beq.n	121a0 <__aeabi_fdiv+0x130>
   1219e:	e081      	b.n	122a4 <__aeabi_fdiv+0x234>
   121a0:	2301      	movs	r3, #1
   121a2:	2100      	movs	r1, #0
   121a4:	2400      	movs	r4, #0
   121a6:	402b      	ands	r3, r5
   121a8:	0264      	lsls	r4, r4, #9
   121aa:	05c9      	lsls	r1, r1, #23
   121ac:	0a60      	lsrs	r0, r4, #9
   121ae:	07db      	lsls	r3, r3, #31
   121b0:	4308      	orrs	r0, r1
   121b2:	4318      	orrs	r0, r3
   121b4:	b003      	add	sp, #12
   121b6:	bc3c      	pop	{r2, r3, r4, r5}
   121b8:	4690      	mov	r8, r2
   121ba:	4699      	mov	r9, r3
   121bc:	46a2      	mov	sl, r4
   121be:	46ab      	mov	fp, r5
   121c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   121c2:	2480      	movs	r4, #128	; 0x80
   121c4:	2300      	movs	r3, #0
   121c6:	03e4      	lsls	r4, r4, #15
   121c8:	21ff      	movs	r1, #255	; 0xff
   121ca:	e7ed      	b.n	121a8 <__aeabi_fdiv+0x138>
   121cc:	21ff      	movs	r1, #255	; 0xff
   121ce:	2400      	movs	r4, #0
   121d0:	e7ea      	b.n	121a8 <__aeabi_fdiv+0x138>
   121d2:	2301      	movs	r3, #1
   121d4:	1a59      	subs	r1, r3, r1
   121d6:	291b      	cmp	r1, #27
   121d8:	dd66      	ble.n	122a8 <__aeabi_fdiv+0x238>
   121da:	9a01      	ldr	r2, [sp, #4]
   121dc:	4013      	ands	r3, r2
   121de:	2100      	movs	r1, #0
   121e0:	2400      	movs	r4, #0
   121e2:	e7e1      	b.n	121a8 <__aeabi_fdiv+0x138>
   121e4:	2380      	movs	r3, #128	; 0x80
   121e6:	03db      	lsls	r3, r3, #15
   121e8:	421c      	tst	r4, r3
   121ea:	d038      	beq.n	1225e <__aeabi_fdiv+0x1ee>
   121ec:	421d      	tst	r5, r3
   121ee:	d051      	beq.n	12294 <__aeabi_fdiv+0x224>
   121f0:	431c      	orrs	r4, r3
   121f2:	0264      	lsls	r4, r4, #9
   121f4:	0a64      	lsrs	r4, r4, #9
   121f6:	0033      	movs	r3, r6
   121f8:	21ff      	movs	r1, #255	; 0xff
   121fa:	e7d5      	b.n	121a8 <__aeabi_fdiv+0x138>
   121fc:	0163      	lsls	r3, r4, #5
   121fe:	016c      	lsls	r4, r5, #5
   12200:	42a3      	cmp	r3, r4
   12202:	d23b      	bcs.n	1227c <__aeabi_fdiv+0x20c>
   12204:	261b      	movs	r6, #27
   12206:	2100      	movs	r1, #0
   12208:	3801      	subs	r0, #1
   1220a:	2501      	movs	r5, #1
   1220c:	001f      	movs	r7, r3
   1220e:	0049      	lsls	r1, r1, #1
   12210:	005b      	lsls	r3, r3, #1
   12212:	2f00      	cmp	r7, #0
   12214:	db01      	blt.n	1221a <__aeabi_fdiv+0x1aa>
   12216:	429c      	cmp	r4, r3
   12218:	d801      	bhi.n	1221e <__aeabi_fdiv+0x1ae>
   1221a:	1b1b      	subs	r3, r3, r4
   1221c:	4329      	orrs	r1, r5
   1221e:	3e01      	subs	r6, #1
   12220:	2e00      	cmp	r6, #0
   12222:	d1f3      	bne.n	1220c <__aeabi_fdiv+0x19c>
   12224:	001c      	movs	r4, r3
   12226:	1e63      	subs	r3, r4, #1
   12228:	419c      	sbcs	r4, r3
   1222a:	430c      	orrs	r4, r1
   1222c:	0001      	movs	r1, r0
   1222e:	317f      	adds	r1, #127	; 0x7f
   12230:	2900      	cmp	r1, #0
   12232:	ddce      	ble.n	121d2 <__aeabi_fdiv+0x162>
   12234:	0763      	lsls	r3, r4, #29
   12236:	d004      	beq.n	12242 <__aeabi_fdiv+0x1d2>
   12238:	230f      	movs	r3, #15
   1223a:	4023      	ands	r3, r4
   1223c:	2b04      	cmp	r3, #4
   1223e:	d000      	beq.n	12242 <__aeabi_fdiv+0x1d2>
   12240:	3404      	adds	r4, #4
   12242:	0123      	lsls	r3, r4, #4
   12244:	d503      	bpl.n	1224e <__aeabi_fdiv+0x1de>
   12246:	0001      	movs	r1, r0
   12248:	4b2c      	ldr	r3, [pc, #176]	; (122fc <__aeabi_fdiv+0x28c>)
   1224a:	3180      	adds	r1, #128	; 0x80
   1224c:	401c      	ands	r4, r3
   1224e:	29fe      	cmp	r1, #254	; 0xfe
   12250:	dd0d      	ble.n	1226e <__aeabi_fdiv+0x1fe>
   12252:	2301      	movs	r3, #1
   12254:	9a01      	ldr	r2, [sp, #4]
   12256:	21ff      	movs	r1, #255	; 0xff
   12258:	4013      	ands	r3, r2
   1225a:	2400      	movs	r4, #0
   1225c:	e7a4      	b.n	121a8 <__aeabi_fdiv+0x138>
   1225e:	2380      	movs	r3, #128	; 0x80
   12260:	03db      	lsls	r3, r3, #15
   12262:	431c      	orrs	r4, r3
   12264:	0264      	lsls	r4, r4, #9
   12266:	0a64      	lsrs	r4, r4, #9
   12268:	0033      	movs	r3, r6
   1226a:	21ff      	movs	r1, #255	; 0xff
   1226c:	e79c      	b.n	121a8 <__aeabi_fdiv+0x138>
   1226e:	2301      	movs	r3, #1
   12270:	9a01      	ldr	r2, [sp, #4]
   12272:	01a4      	lsls	r4, r4, #6
   12274:	0a64      	lsrs	r4, r4, #9
   12276:	b2c9      	uxtb	r1, r1
   12278:	4013      	ands	r3, r2
   1227a:	e795      	b.n	121a8 <__aeabi_fdiv+0x138>
   1227c:	1b1b      	subs	r3, r3, r4
   1227e:	261a      	movs	r6, #26
   12280:	2101      	movs	r1, #1
   12282:	e7c2      	b.n	1220a <__aeabi_fdiv+0x19a>
   12284:	9b00      	ldr	r3, [sp, #0]
   12286:	468b      	mov	fp, r1
   12288:	469a      	mov	sl, r3
   1228a:	2400      	movs	r4, #0
   1228c:	e74c      	b.n	12128 <__aeabi_fdiv+0xb8>
   1228e:	0263      	lsls	r3, r4, #9
   12290:	d5e5      	bpl.n	1225e <__aeabi_fdiv+0x1ee>
   12292:	2500      	movs	r5, #0
   12294:	2480      	movs	r4, #128	; 0x80
   12296:	03e4      	lsls	r4, r4, #15
   12298:	432c      	orrs	r4, r5
   1229a:	0264      	lsls	r4, r4, #9
   1229c:	0a64      	lsrs	r4, r4, #9
   1229e:	9b00      	ldr	r3, [sp, #0]
   122a0:	21ff      	movs	r1, #255	; 0xff
   122a2:	e781      	b.n	121a8 <__aeabi_fdiv+0x138>
   122a4:	9501      	str	r5, [sp, #4]
   122a6:	e7c1      	b.n	1222c <__aeabi_fdiv+0x1bc>
   122a8:	0023      	movs	r3, r4
   122aa:	2020      	movs	r0, #32
   122ac:	40cb      	lsrs	r3, r1
   122ae:	1a41      	subs	r1, r0, r1
   122b0:	408c      	lsls	r4, r1
   122b2:	1e61      	subs	r1, r4, #1
   122b4:	418c      	sbcs	r4, r1
   122b6:	431c      	orrs	r4, r3
   122b8:	0763      	lsls	r3, r4, #29
   122ba:	d004      	beq.n	122c6 <__aeabi_fdiv+0x256>
   122bc:	230f      	movs	r3, #15
   122be:	4023      	ands	r3, r4
   122c0:	2b04      	cmp	r3, #4
   122c2:	d000      	beq.n	122c6 <__aeabi_fdiv+0x256>
   122c4:	3404      	adds	r4, #4
   122c6:	0163      	lsls	r3, r4, #5
   122c8:	d505      	bpl.n	122d6 <__aeabi_fdiv+0x266>
   122ca:	2301      	movs	r3, #1
   122cc:	9a01      	ldr	r2, [sp, #4]
   122ce:	2101      	movs	r1, #1
   122d0:	4013      	ands	r3, r2
   122d2:	2400      	movs	r4, #0
   122d4:	e768      	b.n	121a8 <__aeabi_fdiv+0x138>
   122d6:	2301      	movs	r3, #1
   122d8:	9a01      	ldr	r2, [sp, #4]
   122da:	01a4      	lsls	r4, r4, #6
   122dc:	0a64      	lsrs	r4, r4, #9
   122de:	4013      	ands	r3, r2
   122e0:	2100      	movs	r1, #0
   122e2:	e761      	b.n	121a8 <__aeabi_fdiv+0x138>
   122e4:	2380      	movs	r3, #128	; 0x80
   122e6:	03db      	lsls	r3, r3, #15
   122e8:	431c      	orrs	r4, r3
   122ea:	0264      	lsls	r4, r4, #9
   122ec:	0a64      	lsrs	r4, r4, #9
   122ee:	4653      	mov	r3, sl
   122f0:	21ff      	movs	r1, #255	; 0xff
   122f2:	e759      	b.n	121a8 <__aeabi_fdiv+0x138>
   122f4:	0001ad84 	.word	0x0001ad84
   122f8:	0001adc4 	.word	0x0001adc4
   122fc:	f7ffffff 	.word	0xf7ffffff

00012300 <__eqsf2>:
   12300:	b570      	push	{r4, r5, r6, lr}
   12302:	0042      	lsls	r2, r0, #1
   12304:	0245      	lsls	r5, r0, #9
   12306:	024e      	lsls	r6, r1, #9
   12308:	004c      	lsls	r4, r1, #1
   1230a:	0fc3      	lsrs	r3, r0, #31
   1230c:	0a6d      	lsrs	r5, r5, #9
   1230e:	0e12      	lsrs	r2, r2, #24
   12310:	0a76      	lsrs	r6, r6, #9
   12312:	0e24      	lsrs	r4, r4, #24
   12314:	0fc9      	lsrs	r1, r1, #31
   12316:	2001      	movs	r0, #1
   12318:	2aff      	cmp	r2, #255	; 0xff
   1231a:	d006      	beq.n	1232a <__eqsf2+0x2a>
   1231c:	2cff      	cmp	r4, #255	; 0xff
   1231e:	d003      	beq.n	12328 <__eqsf2+0x28>
   12320:	42a2      	cmp	r2, r4
   12322:	d101      	bne.n	12328 <__eqsf2+0x28>
   12324:	42b5      	cmp	r5, r6
   12326:	d006      	beq.n	12336 <__eqsf2+0x36>
   12328:	bd70      	pop	{r4, r5, r6, pc}
   1232a:	2d00      	cmp	r5, #0
   1232c:	d1fc      	bne.n	12328 <__eqsf2+0x28>
   1232e:	2cff      	cmp	r4, #255	; 0xff
   12330:	d1fa      	bne.n	12328 <__eqsf2+0x28>
   12332:	2e00      	cmp	r6, #0
   12334:	d1f8      	bne.n	12328 <__eqsf2+0x28>
   12336:	428b      	cmp	r3, r1
   12338:	d006      	beq.n	12348 <__eqsf2+0x48>
   1233a:	2001      	movs	r0, #1
   1233c:	2a00      	cmp	r2, #0
   1233e:	d1f3      	bne.n	12328 <__eqsf2+0x28>
   12340:	0028      	movs	r0, r5
   12342:	1e45      	subs	r5, r0, #1
   12344:	41a8      	sbcs	r0, r5
   12346:	e7ef      	b.n	12328 <__eqsf2+0x28>
   12348:	2000      	movs	r0, #0
   1234a:	e7ed      	b.n	12328 <__eqsf2+0x28>

0001234c <__gesf2>:
   1234c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1234e:	0042      	lsls	r2, r0, #1
   12350:	0245      	lsls	r5, r0, #9
   12352:	024c      	lsls	r4, r1, #9
   12354:	0fc3      	lsrs	r3, r0, #31
   12356:	0048      	lsls	r0, r1, #1
   12358:	0a6d      	lsrs	r5, r5, #9
   1235a:	0e12      	lsrs	r2, r2, #24
   1235c:	0a64      	lsrs	r4, r4, #9
   1235e:	0e00      	lsrs	r0, r0, #24
   12360:	0fc9      	lsrs	r1, r1, #31
   12362:	2aff      	cmp	r2, #255	; 0xff
   12364:	d01e      	beq.n	123a4 <__gesf2+0x58>
   12366:	28ff      	cmp	r0, #255	; 0xff
   12368:	d021      	beq.n	123ae <__gesf2+0x62>
   1236a:	2a00      	cmp	r2, #0
   1236c:	d10a      	bne.n	12384 <__gesf2+0x38>
   1236e:	426e      	negs	r6, r5
   12370:	416e      	adcs	r6, r5
   12372:	b2f6      	uxtb	r6, r6
   12374:	2800      	cmp	r0, #0
   12376:	d10f      	bne.n	12398 <__gesf2+0x4c>
   12378:	2c00      	cmp	r4, #0
   1237a:	d10d      	bne.n	12398 <__gesf2+0x4c>
   1237c:	2000      	movs	r0, #0
   1237e:	2d00      	cmp	r5, #0
   12380:	d009      	beq.n	12396 <__gesf2+0x4a>
   12382:	e005      	b.n	12390 <__gesf2+0x44>
   12384:	2800      	cmp	r0, #0
   12386:	d101      	bne.n	1238c <__gesf2+0x40>
   12388:	2c00      	cmp	r4, #0
   1238a:	d001      	beq.n	12390 <__gesf2+0x44>
   1238c:	428b      	cmp	r3, r1
   1238e:	d011      	beq.n	123b4 <__gesf2+0x68>
   12390:	2101      	movs	r1, #1
   12392:	4258      	negs	r0, r3
   12394:	4308      	orrs	r0, r1
   12396:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12398:	2e00      	cmp	r6, #0
   1239a:	d0f7      	beq.n	1238c <__gesf2+0x40>
   1239c:	2001      	movs	r0, #1
   1239e:	3901      	subs	r1, #1
   123a0:	4308      	orrs	r0, r1
   123a2:	e7f8      	b.n	12396 <__gesf2+0x4a>
   123a4:	2d00      	cmp	r5, #0
   123a6:	d0de      	beq.n	12366 <__gesf2+0x1a>
   123a8:	2002      	movs	r0, #2
   123aa:	4240      	negs	r0, r0
   123ac:	e7f3      	b.n	12396 <__gesf2+0x4a>
   123ae:	2c00      	cmp	r4, #0
   123b0:	d0db      	beq.n	1236a <__gesf2+0x1e>
   123b2:	e7f9      	b.n	123a8 <__gesf2+0x5c>
   123b4:	4282      	cmp	r2, r0
   123b6:	dceb      	bgt.n	12390 <__gesf2+0x44>
   123b8:	db04      	blt.n	123c4 <__gesf2+0x78>
   123ba:	42a5      	cmp	r5, r4
   123bc:	d8e8      	bhi.n	12390 <__gesf2+0x44>
   123be:	2000      	movs	r0, #0
   123c0:	42a5      	cmp	r5, r4
   123c2:	d2e8      	bcs.n	12396 <__gesf2+0x4a>
   123c4:	2101      	movs	r1, #1
   123c6:	1e58      	subs	r0, r3, #1
   123c8:	4308      	orrs	r0, r1
   123ca:	e7e4      	b.n	12396 <__gesf2+0x4a>

000123cc <__lesf2>:
   123cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   123ce:	0042      	lsls	r2, r0, #1
   123d0:	024d      	lsls	r5, r1, #9
   123d2:	004c      	lsls	r4, r1, #1
   123d4:	0246      	lsls	r6, r0, #9
   123d6:	0a76      	lsrs	r6, r6, #9
   123d8:	0e12      	lsrs	r2, r2, #24
   123da:	0fc3      	lsrs	r3, r0, #31
   123dc:	0a6d      	lsrs	r5, r5, #9
   123de:	0e24      	lsrs	r4, r4, #24
   123e0:	0fc9      	lsrs	r1, r1, #31
   123e2:	2aff      	cmp	r2, #255	; 0xff
   123e4:	d016      	beq.n	12414 <__lesf2+0x48>
   123e6:	2cff      	cmp	r4, #255	; 0xff
   123e8:	d018      	beq.n	1241c <__lesf2+0x50>
   123ea:	2a00      	cmp	r2, #0
   123ec:	d10a      	bne.n	12404 <__lesf2+0x38>
   123ee:	4270      	negs	r0, r6
   123f0:	4170      	adcs	r0, r6
   123f2:	b2c0      	uxtb	r0, r0
   123f4:	2c00      	cmp	r4, #0
   123f6:	d015      	beq.n	12424 <__lesf2+0x58>
   123f8:	2800      	cmp	r0, #0
   123fa:	d005      	beq.n	12408 <__lesf2+0x3c>
   123fc:	2001      	movs	r0, #1
   123fe:	3901      	subs	r1, #1
   12400:	4308      	orrs	r0, r1
   12402:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12404:	2c00      	cmp	r4, #0
   12406:	d013      	beq.n	12430 <__lesf2+0x64>
   12408:	4299      	cmp	r1, r3
   1240a:	d014      	beq.n	12436 <__lesf2+0x6a>
   1240c:	2001      	movs	r0, #1
   1240e:	425b      	negs	r3, r3
   12410:	4318      	orrs	r0, r3
   12412:	e7f6      	b.n	12402 <__lesf2+0x36>
   12414:	2002      	movs	r0, #2
   12416:	2e00      	cmp	r6, #0
   12418:	d1f3      	bne.n	12402 <__lesf2+0x36>
   1241a:	e7e4      	b.n	123e6 <__lesf2+0x1a>
   1241c:	2002      	movs	r0, #2
   1241e:	2d00      	cmp	r5, #0
   12420:	d1ef      	bne.n	12402 <__lesf2+0x36>
   12422:	e7e2      	b.n	123ea <__lesf2+0x1e>
   12424:	2d00      	cmp	r5, #0
   12426:	d1e7      	bne.n	123f8 <__lesf2+0x2c>
   12428:	2000      	movs	r0, #0
   1242a:	2e00      	cmp	r6, #0
   1242c:	d0e9      	beq.n	12402 <__lesf2+0x36>
   1242e:	e7ed      	b.n	1240c <__lesf2+0x40>
   12430:	2d00      	cmp	r5, #0
   12432:	d1e9      	bne.n	12408 <__lesf2+0x3c>
   12434:	e7ea      	b.n	1240c <__lesf2+0x40>
   12436:	42a2      	cmp	r2, r4
   12438:	dc06      	bgt.n	12448 <__lesf2+0x7c>
   1243a:	dbdf      	blt.n	123fc <__lesf2+0x30>
   1243c:	42ae      	cmp	r6, r5
   1243e:	d803      	bhi.n	12448 <__lesf2+0x7c>
   12440:	2000      	movs	r0, #0
   12442:	42ae      	cmp	r6, r5
   12444:	d3da      	bcc.n	123fc <__lesf2+0x30>
   12446:	e7dc      	b.n	12402 <__lesf2+0x36>
   12448:	2001      	movs	r0, #1
   1244a:	4249      	negs	r1, r1
   1244c:	4308      	orrs	r0, r1
   1244e:	e7d8      	b.n	12402 <__lesf2+0x36>

00012450 <__aeabi_fmul>:
   12450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12452:	4657      	mov	r7, sl
   12454:	464e      	mov	r6, r9
   12456:	4645      	mov	r5, r8
   12458:	46de      	mov	lr, fp
   1245a:	b5e0      	push	{r5, r6, r7, lr}
   1245c:	0247      	lsls	r7, r0, #9
   1245e:	0046      	lsls	r6, r0, #1
   12460:	4688      	mov	r8, r1
   12462:	0a7f      	lsrs	r7, r7, #9
   12464:	0e36      	lsrs	r6, r6, #24
   12466:	0fc4      	lsrs	r4, r0, #31
   12468:	2e00      	cmp	r6, #0
   1246a:	d047      	beq.n	124fc <__aeabi_fmul+0xac>
   1246c:	2eff      	cmp	r6, #255	; 0xff
   1246e:	d024      	beq.n	124ba <__aeabi_fmul+0x6a>
   12470:	00fb      	lsls	r3, r7, #3
   12472:	2780      	movs	r7, #128	; 0x80
   12474:	04ff      	lsls	r7, r7, #19
   12476:	431f      	orrs	r7, r3
   12478:	2300      	movs	r3, #0
   1247a:	4699      	mov	r9, r3
   1247c:	469a      	mov	sl, r3
   1247e:	3e7f      	subs	r6, #127	; 0x7f
   12480:	4643      	mov	r3, r8
   12482:	025d      	lsls	r5, r3, #9
   12484:	0058      	lsls	r0, r3, #1
   12486:	0fdb      	lsrs	r3, r3, #31
   12488:	0a6d      	lsrs	r5, r5, #9
   1248a:	0e00      	lsrs	r0, r0, #24
   1248c:	4698      	mov	r8, r3
   1248e:	d043      	beq.n	12518 <__aeabi_fmul+0xc8>
   12490:	28ff      	cmp	r0, #255	; 0xff
   12492:	d03b      	beq.n	1250c <__aeabi_fmul+0xbc>
   12494:	00eb      	lsls	r3, r5, #3
   12496:	2580      	movs	r5, #128	; 0x80
   12498:	2200      	movs	r2, #0
   1249a:	04ed      	lsls	r5, r5, #19
   1249c:	431d      	orrs	r5, r3
   1249e:	387f      	subs	r0, #127	; 0x7f
   124a0:	1836      	adds	r6, r6, r0
   124a2:	1c73      	adds	r3, r6, #1
   124a4:	4641      	mov	r1, r8
   124a6:	469b      	mov	fp, r3
   124a8:	464b      	mov	r3, r9
   124aa:	4061      	eors	r1, r4
   124ac:	4313      	orrs	r3, r2
   124ae:	2b0f      	cmp	r3, #15
   124b0:	d864      	bhi.n	1257c <__aeabi_fmul+0x12c>
   124b2:	4875      	ldr	r0, [pc, #468]	; (12688 <__aeabi_fmul+0x238>)
   124b4:	009b      	lsls	r3, r3, #2
   124b6:	58c3      	ldr	r3, [r0, r3]
   124b8:	469f      	mov	pc, r3
   124ba:	2f00      	cmp	r7, #0
   124bc:	d142      	bne.n	12544 <__aeabi_fmul+0xf4>
   124be:	2308      	movs	r3, #8
   124c0:	4699      	mov	r9, r3
   124c2:	3b06      	subs	r3, #6
   124c4:	26ff      	movs	r6, #255	; 0xff
   124c6:	469a      	mov	sl, r3
   124c8:	e7da      	b.n	12480 <__aeabi_fmul+0x30>
   124ca:	4641      	mov	r1, r8
   124cc:	2a02      	cmp	r2, #2
   124ce:	d028      	beq.n	12522 <__aeabi_fmul+0xd2>
   124d0:	2a03      	cmp	r2, #3
   124d2:	d100      	bne.n	124d6 <__aeabi_fmul+0x86>
   124d4:	e0ce      	b.n	12674 <__aeabi_fmul+0x224>
   124d6:	2a01      	cmp	r2, #1
   124d8:	d000      	beq.n	124dc <__aeabi_fmul+0x8c>
   124da:	e0ac      	b.n	12636 <__aeabi_fmul+0x1e6>
   124dc:	4011      	ands	r1, r2
   124de:	2000      	movs	r0, #0
   124e0:	2200      	movs	r2, #0
   124e2:	b2cc      	uxtb	r4, r1
   124e4:	0240      	lsls	r0, r0, #9
   124e6:	05d2      	lsls	r2, r2, #23
   124e8:	0a40      	lsrs	r0, r0, #9
   124ea:	07e4      	lsls	r4, r4, #31
   124ec:	4310      	orrs	r0, r2
   124ee:	4320      	orrs	r0, r4
   124f0:	bc3c      	pop	{r2, r3, r4, r5}
   124f2:	4690      	mov	r8, r2
   124f4:	4699      	mov	r9, r3
   124f6:	46a2      	mov	sl, r4
   124f8:	46ab      	mov	fp, r5
   124fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   124fc:	2f00      	cmp	r7, #0
   124fe:	d115      	bne.n	1252c <__aeabi_fmul+0xdc>
   12500:	2304      	movs	r3, #4
   12502:	4699      	mov	r9, r3
   12504:	3b03      	subs	r3, #3
   12506:	2600      	movs	r6, #0
   12508:	469a      	mov	sl, r3
   1250a:	e7b9      	b.n	12480 <__aeabi_fmul+0x30>
   1250c:	20ff      	movs	r0, #255	; 0xff
   1250e:	2202      	movs	r2, #2
   12510:	2d00      	cmp	r5, #0
   12512:	d0c5      	beq.n	124a0 <__aeabi_fmul+0x50>
   12514:	2203      	movs	r2, #3
   12516:	e7c3      	b.n	124a0 <__aeabi_fmul+0x50>
   12518:	2d00      	cmp	r5, #0
   1251a:	d119      	bne.n	12550 <__aeabi_fmul+0x100>
   1251c:	2000      	movs	r0, #0
   1251e:	2201      	movs	r2, #1
   12520:	e7be      	b.n	124a0 <__aeabi_fmul+0x50>
   12522:	2401      	movs	r4, #1
   12524:	22ff      	movs	r2, #255	; 0xff
   12526:	400c      	ands	r4, r1
   12528:	2000      	movs	r0, #0
   1252a:	e7db      	b.n	124e4 <__aeabi_fmul+0x94>
   1252c:	0038      	movs	r0, r7
   1252e:	f002 f865 	bl	145fc <__clzsi2>
   12532:	2676      	movs	r6, #118	; 0x76
   12534:	1f43      	subs	r3, r0, #5
   12536:	409f      	lsls	r7, r3
   12538:	2300      	movs	r3, #0
   1253a:	4276      	negs	r6, r6
   1253c:	1a36      	subs	r6, r6, r0
   1253e:	4699      	mov	r9, r3
   12540:	469a      	mov	sl, r3
   12542:	e79d      	b.n	12480 <__aeabi_fmul+0x30>
   12544:	230c      	movs	r3, #12
   12546:	4699      	mov	r9, r3
   12548:	3b09      	subs	r3, #9
   1254a:	26ff      	movs	r6, #255	; 0xff
   1254c:	469a      	mov	sl, r3
   1254e:	e797      	b.n	12480 <__aeabi_fmul+0x30>
   12550:	0028      	movs	r0, r5
   12552:	f002 f853 	bl	145fc <__clzsi2>
   12556:	1f43      	subs	r3, r0, #5
   12558:	409d      	lsls	r5, r3
   1255a:	2376      	movs	r3, #118	; 0x76
   1255c:	425b      	negs	r3, r3
   1255e:	1a18      	subs	r0, r3, r0
   12560:	2200      	movs	r2, #0
   12562:	e79d      	b.n	124a0 <__aeabi_fmul+0x50>
   12564:	2080      	movs	r0, #128	; 0x80
   12566:	2400      	movs	r4, #0
   12568:	03c0      	lsls	r0, r0, #15
   1256a:	22ff      	movs	r2, #255	; 0xff
   1256c:	e7ba      	b.n	124e4 <__aeabi_fmul+0x94>
   1256e:	003d      	movs	r5, r7
   12570:	4652      	mov	r2, sl
   12572:	e7ab      	b.n	124cc <__aeabi_fmul+0x7c>
   12574:	003d      	movs	r5, r7
   12576:	0021      	movs	r1, r4
   12578:	4652      	mov	r2, sl
   1257a:	e7a7      	b.n	124cc <__aeabi_fmul+0x7c>
   1257c:	0c3b      	lsrs	r3, r7, #16
   1257e:	469c      	mov	ip, r3
   12580:	042a      	lsls	r2, r5, #16
   12582:	0c12      	lsrs	r2, r2, #16
   12584:	0c2b      	lsrs	r3, r5, #16
   12586:	0014      	movs	r4, r2
   12588:	4660      	mov	r0, ip
   1258a:	4665      	mov	r5, ip
   1258c:	043f      	lsls	r7, r7, #16
   1258e:	0c3f      	lsrs	r7, r7, #16
   12590:	437c      	muls	r4, r7
   12592:	4342      	muls	r2, r0
   12594:	435d      	muls	r5, r3
   12596:	437b      	muls	r3, r7
   12598:	0c27      	lsrs	r7, r4, #16
   1259a:	189b      	adds	r3, r3, r2
   1259c:	18ff      	adds	r7, r7, r3
   1259e:	42ba      	cmp	r2, r7
   125a0:	d903      	bls.n	125aa <__aeabi_fmul+0x15a>
   125a2:	2380      	movs	r3, #128	; 0x80
   125a4:	025b      	lsls	r3, r3, #9
   125a6:	469c      	mov	ip, r3
   125a8:	4465      	add	r5, ip
   125aa:	0424      	lsls	r4, r4, #16
   125ac:	043a      	lsls	r2, r7, #16
   125ae:	0c24      	lsrs	r4, r4, #16
   125b0:	1912      	adds	r2, r2, r4
   125b2:	0193      	lsls	r3, r2, #6
   125b4:	1e5c      	subs	r4, r3, #1
   125b6:	41a3      	sbcs	r3, r4
   125b8:	0c3f      	lsrs	r7, r7, #16
   125ba:	0e92      	lsrs	r2, r2, #26
   125bc:	197d      	adds	r5, r7, r5
   125be:	431a      	orrs	r2, r3
   125c0:	01ad      	lsls	r5, r5, #6
   125c2:	4315      	orrs	r5, r2
   125c4:	012b      	lsls	r3, r5, #4
   125c6:	d504      	bpl.n	125d2 <__aeabi_fmul+0x182>
   125c8:	2301      	movs	r3, #1
   125ca:	465e      	mov	r6, fp
   125cc:	086a      	lsrs	r2, r5, #1
   125ce:	401d      	ands	r5, r3
   125d0:	4315      	orrs	r5, r2
   125d2:	0032      	movs	r2, r6
   125d4:	327f      	adds	r2, #127	; 0x7f
   125d6:	2a00      	cmp	r2, #0
   125d8:	dd25      	ble.n	12626 <__aeabi_fmul+0x1d6>
   125da:	076b      	lsls	r3, r5, #29
   125dc:	d004      	beq.n	125e8 <__aeabi_fmul+0x198>
   125de:	230f      	movs	r3, #15
   125e0:	402b      	ands	r3, r5
   125e2:	2b04      	cmp	r3, #4
   125e4:	d000      	beq.n	125e8 <__aeabi_fmul+0x198>
   125e6:	3504      	adds	r5, #4
   125e8:	012b      	lsls	r3, r5, #4
   125ea:	d503      	bpl.n	125f4 <__aeabi_fmul+0x1a4>
   125ec:	0032      	movs	r2, r6
   125ee:	4b27      	ldr	r3, [pc, #156]	; (1268c <__aeabi_fmul+0x23c>)
   125f0:	3280      	adds	r2, #128	; 0x80
   125f2:	401d      	ands	r5, r3
   125f4:	2afe      	cmp	r2, #254	; 0xfe
   125f6:	dc94      	bgt.n	12522 <__aeabi_fmul+0xd2>
   125f8:	2401      	movs	r4, #1
   125fa:	01a8      	lsls	r0, r5, #6
   125fc:	0a40      	lsrs	r0, r0, #9
   125fe:	b2d2      	uxtb	r2, r2
   12600:	400c      	ands	r4, r1
   12602:	e76f      	b.n	124e4 <__aeabi_fmul+0x94>
   12604:	2080      	movs	r0, #128	; 0x80
   12606:	03c0      	lsls	r0, r0, #15
   12608:	4207      	tst	r7, r0
   1260a:	d007      	beq.n	1261c <__aeabi_fmul+0x1cc>
   1260c:	4205      	tst	r5, r0
   1260e:	d105      	bne.n	1261c <__aeabi_fmul+0x1cc>
   12610:	4328      	orrs	r0, r5
   12612:	0240      	lsls	r0, r0, #9
   12614:	0a40      	lsrs	r0, r0, #9
   12616:	4644      	mov	r4, r8
   12618:	22ff      	movs	r2, #255	; 0xff
   1261a:	e763      	b.n	124e4 <__aeabi_fmul+0x94>
   1261c:	4338      	orrs	r0, r7
   1261e:	0240      	lsls	r0, r0, #9
   12620:	0a40      	lsrs	r0, r0, #9
   12622:	22ff      	movs	r2, #255	; 0xff
   12624:	e75e      	b.n	124e4 <__aeabi_fmul+0x94>
   12626:	2401      	movs	r4, #1
   12628:	1aa3      	subs	r3, r4, r2
   1262a:	2b1b      	cmp	r3, #27
   1262c:	dd05      	ble.n	1263a <__aeabi_fmul+0x1ea>
   1262e:	400c      	ands	r4, r1
   12630:	2200      	movs	r2, #0
   12632:	2000      	movs	r0, #0
   12634:	e756      	b.n	124e4 <__aeabi_fmul+0x94>
   12636:	465e      	mov	r6, fp
   12638:	e7cb      	b.n	125d2 <__aeabi_fmul+0x182>
   1263a:	002a      	movs	r2, r5
   1263c:	2020      	movs	r0, #32
   1263e:	40da      	lsrs	r2, r3
   12640:	1ac3      	subs	r3, r0, r3
   12642:	409d      	lsls	r5, r3
   12644:	002b      	movs	r3, r5
   12646:	1e5d      	subs	r5, r3, #1
   12648:	41ab      	sbcs	r3, r5
   1264a:	4313      	orrs	r3, r2
   1264c:	075a      	lsls	r2, r3, #29
   1264e:	d004      	beq.n	1265a <__aeabi_fmul+0x20a>
   12650:	220f      	movs	r2, #15
   12652:	401a      	ands	r2, r3
   12654:	2a04      	cmp	r2, #4
   12656:	d000      	beq.n	1265a <__aeabi_fmul+0x20a>
   12658:	3304      	adds	r3, #4
   1265a:	015a      	lsls	r2, r3, #5
   1265c:	d504      	bpl.n	12668 <__aeabi_fmul+0x218>
   1265e:	2401      	movs	r4, #1
   12660:	2201      	movs	r2, #1
   12662:	400c      	ands	r4, r1
   12664:	2000      	movs	r0, #0
   12666:	e73d      	b.n	124e4 <__aeabi_fmul+0x94>
   12668:	2401      	movs	r4, #1
   1266a:	019b      	lsls	r3, r3, #6
   1266c:	0a58      	lsrs	r0, r3, #9
   1266e:	400c      	ands	r4, r1
   12670:	2200      	movs	r2, #0
   12672:	e737      	b.n	124e4 <__aeabi_fmul+0x94>
   12674:	2080      	movs	r0, #128	; 0x80
   12676:	2401      	movs	r4, #1
   12678:	03c0      	lsls	r0, r0, #15
   1267a:	4328      	orrs	r0, r5
   1267c:	0240      	lsls	r0, r0, #9
   1267e:	0a40      	lsrs	r0, r0, #9
   12680:	400c      	ands	r4, r1
   12682:	22ff      	movs	r2, #255	; 0xff
   12684:	e72e      	b.n	124e4 <__aeabi_fmul+0x94>
   12686:	46c0      	nop			; (mov r8, r8)
   12688:	0001ae04 	.word	0x0001ae04
   1268c:	f7ffffff 	.word	0xf7ffffff

00012690 <__aeabi_fsub>:
   12690:	b5f0      	push	{r4, r5, r6, r7, lr}
   12692:	464f      	mov	r7, r9
   12694:	46d6      	mov	lr, sl
   12696:	4646      	mov	r6, r8
   12698:	0044      	lsls	r4, r0, #1
   1269a:	b5c0      	push	{r6, r7, lr}
   1269c:	0fc2      	lsrs	r2, r0, #31
   1269e:	0247      	lsls	r7, r0, #9
   126a0:	0248      	lsls	r0, r1, #9
   126a2:	0a40      	lsrs	r0, r0, #9
   126a4:	4684      	mov	ip, r0
   126a6:	4666      	mov	r6, ip
   126a8:	0a7b      	lsrs	r3, r7, #9
   126aa:	0048      	lsls	r0, r1, #1
   126ac:	0fc9      	lsrs	r1, r1, #31
   126ae:	469a      	mov	sl, r3
   126b0:	0e24      	lsrs	r4, r4, #24
   126b2:	0015      	movs	r5, r2
   126b4:	00db      	lsls	r3, r3, #3
   126b6:	0e00      	lsrs	r0, r0, #24
   126b8:	4689      	mov	r9, r1
   126ba:	00f6      	lsls	r6, r6, #3
   126bc:	28ff      	cmp	r0, #255	; 0xff
   126be:	d100      	bne.n	126c2 <__aeabi_fsub+0x32>
   126c0:	e08f      	b.n	127e2 <__aeabi_fsub+0x152>
   126c2:	2101      	movs	r1, #1
   126c4:	464f      	mov	r7, r9
   126c6:	404f      	eors	r7, r1
   126c8:	0039      	movs	r1, r7
   126ca:	4291      	cmp	r1, r2
   126cc:	d066      	beq.n	1279c <__aeabi_fsub+0x10c>
   126ce:	1a22      	subs	r2, r4, r0
   126d0:	2a00      	cmp	r2, #0
   126d2:	dc00      	bgt.n	126d6 <__aeabi_fsub+0x46>
   126d4:	e09d      	b.n	12812 <__aeabi_fsub+0x182>
   126d6:	2800      	cmp	r0, #0
   126d8:	d13d      	bne.n	12756 <__aeabi_fsub+0xc6>
   126da:	2e00      	cmp	r6, #0
   126dc:	d100      	bne.n	126e0 <__aeabi_fsub+0x50>
   126de:	e08b      	b.n	127f8 <__aeabi_fsub+0x168>
   126e0:	1e51      	subs	r1, r2, #1
   126e2:	2900      	cmp	r1, #0
   126e4:	d000      	beq.n	126e8 <__aeabi_fsub+0x58>
   126e6:	e0b5      	b.n	12854 <__aeabi_fsub+0x1c4>
   126e8:	2401      	movs	r4, #1
   126ea:	1b9b      	subs	r3, r3, r6
   126ec:	015a      	lsls	r2, r3, #5
   126ee:	d544      	bpl.n	1277a <__aeabi_fsub+0xea>
   126f0:	019b      	lsls	r3, r3, #6
   126f2:	099f      	lsrs	r7, r3, #6
   126f4:	0038      	movs	r0, r7
   126f6:	f001 ff81 	bl	145fc <__clzsi2>
   126fa:	3805      	subs	r0, #5
   126fc:	4087      	lsls	r7, r0
   126fe:	4284      	cmp	r4, r0
   12700:	dd00      	ble.n	12704 <__aeabi_fsub+0x74>
   12702:	e096      	b.n	12832 <__aeabi_fsub+0x1a2>
   12704:	1b04      	subs	r4, r0, r4
   12706:	003a      	movs	r2, r7
   12708:	2020      	movs	r0, #32
   1270a:	3401      	adds	r4, #1
   1270c:	40e2      	lsrs	r2, r4
   1270e:	1b04      	subs	r4, r0, r4
   12710:	40a7      	lsls	r7, r4
   12712:	003b      	movs	r3, r7
   12714:	1e5f      	subs	r7, r3, #1
   12716:	41bb      	sbcs	r3, r7
   12718:	2400      	movs	r4, #0
   1271a:	4313      	orrs	r3, r2
   1271c:	075a      	lsls	r2, r3, #29
   1271e:	d004      	beq.n	1272a <__aeabi_fsub+0x9a>
   12720:	220f      	movs	r2, #15
   12722:	401a      	ands	r2, r3
   12724:	2a04      	cmp	r2, #4
   12726:	d000      	beq.n	1272a <__aeabi_fsub+0x9a>
   12728:	3304      	adds	r3, #4
   1272a:	015a      	lsls	r2, r3, #5
   1272c:	d527      	bpl.n	1277e <__aeabi_fsub+0xee>
   1272e:	3401      	adds	r4, #1
   12730:	2cff      	cmp	r4, #255	; 0xff
   12732:	d100      	bne.n	12736 <__aeabi_fsub+0xa6>
   12734:	e079      	b.n	1282a <__aeabi_fsub+0x19a>
   12736:	2201      	movs	r2, #1
   12738:	019b      	lsls	r3, r3, #6
   1273a:	0a5b      	lsrs	r3, r3, #9
   1273c:	b2e4      	uxtb	r4, r4
   1273e:	402a      	ands	r2, r5
   12740:	025b      	lsls	r3, r3, #9
   12742:	05e4      	lsls	r4, r4, #23
   12744:	0a58      	lsrs	r0, r3, #9
   12746:	07d2      	lsls	r2, r2, #31
   12748:	4320      	orrs	r0, r4
   1274a:	4310      	orrs	r0, r2
   1274c:	bc1c      	pop	{r2, r3, r4}
   1274e:	4690      	mov	r8, r2
   12750:	4699      	mov	r9, r3
   12752:	46a2      	mov	sl, r4
   12754:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12756:	2cff      	cmp	r4, #255	; 0xff
   12758:	d0e0      	beq.n	1271c <__aeabi_fsub+0x8c>
   1275a:	2180      	movs	r1, #128	; 0x80
   1275c:	04c9      	lsls	r1, r1, #19
   1275e:	430e      	orrs	r6, r1
   12760:	2a1b      	cmp	r2, #27
   12762:	dc7b      	bgt.n	1285c <__aeabi_fsub+0x1cc>
   12764:	0031      	movs	r1, r6
   12766:	2020      	movs	r0, #32
   12768:	40d1      	lsrs	r1, r2
   1276a:	1a82      	subs	r2, r0, r2
   1276c:	4096      	lsls	r6, r2
   1276e:	1e72      	subs	r2, r6, #1
   12770:	4196      	sbcs	r6, r2
   12772:	430e      	orrs	r6, r1
   12774:	1b9b      	subs	r3, r3, r6
   12776:	015a      	lsls	r2, r3, #5
   12778:	d4ba      	bmi.n	126f0 <__aeabi_fsub+0x60>
   1277a:	075a      	lsls	r2, r3, #29
   1277c:	d1d0      	bne.n	12720 <__aeabi_fsub+0x90>
   1277e:	2201      	movs	r2, #1
   12780:	08df      	lsrs	r7, r3, #3
   12782:	402a      	ands	r2, r5
   12784:	2cff      	cmp	r4, #255	; 0xff
   12786:	d133      	bne.n	127f0 <__aeabi_fsub+0x160>
   12788:	2f00      	cmp	r7, #0
   1278a:	d100      	bne.n	1278e <__aeabi_fsub+0xfe>
   1278c:	e0a8      	b.n	128e0 <__aeabi_fsub+0x250>
   1278e:	2380      	movs	r3, #128	; 0x80
   12790:	03db      	lsls	r3, r3, #15
   12792:	433b      	orrs	r3, r7
   12794:	025b      	lsls	r3, r3, #9
   12796:	0a5b      	lsrs	r3, r3, #9
   12798:	24ff      	movs	r4, #255	; 0xff
   1279a:	e7d1      	b.n	12740 <__aeabi_fsub+0xb0>
   1279c:	1a21      	subs	r1, r4, r0
   1279e:	2900      	cmp	r1, #0
   127a0:	dd4c      	ble.n	1283c <__aeabi_fsub+0x1ac>
   127a2:	2800      	cmp	r0, #0
   127a4:	d02a      	beq.n	127fc <__aeabi_fsub+0x16c>
   127a6:	2cff      	cmp	r4, #255	; 0xff
   127a8:	d0b8      	beq.n	1271c <__aeabi_fsub+0x8c>
   127aa:	2080      	movs	r0, #128	; 0x80
   127ac:	04c0      	lsls	r0, r0, #19
   127ae:	4306      	orrs	r6, r0
   127b0:	291b      	cmp	r1, #27
   127b2:	dd00      	ble.n	127b6 <__aeabi_fsub+0x126>
   127b4:	e0af      	b.n	12916 <__aeabi_fsub+0x286>
   127b6:	0030      	movs	r0, r6
   127b8:	2720      	movs	r7, #32
   127ba:	40c8      	lsrs	r0, r1
   127bc:	1a79      	subs	r1, r7, r1
   127be:	408e      	lsls	r6, r1
   127c0:	1e71      	subs	r1, r6, #1
   127c2:	418e      	sbcs	r6, r1
   127c4:	4306      	orrs	r6, r0
   127c6:	199b      	adds	r3, r3, r6
   127c8:	0159      	lsls	r1, r3, #5
   127ca:	d5d6      	bpl.n	1277a <__aeabi_fsub+0xea>
   127cc:	3401      	adds	r4, #1
   127ce:	2cff      	cmp	r4, #255	; 0xff
   127d0:	d100      	bne.n	127d4 <__aeabi_fsub+0x144>
   127d2:	e085      	b.n	128e0 <__aeabi_fsub+0x250>
   127d4:	2201      	movs	r2, #1
   127d6:	497a      	ldr	r1, [pc, #488]	; (129c0 <__aeabi_fsub+0x330>)
   127d8:	401a      	ands	r2, r3
   127da:	085b      	lsrs	r3, r3, #1
   127dc:	400b      	ands	r3, r1
   127de:	4313      	orrs	r3, r2
   127e0:	e79c      	b.n	1271c <__aeabi_fsub+0x8c>
   127e2:	2e00      	cmp	r6, #0
   127e4:	d000      	beq.n	127e8 <__aeabi_fsub+0x158>
   127e6:	e770      	b.n	126ca <__aeabi_fsub+0x3a>
   127e8:	e76b      	b.n	126c2 <__aeabi_fsub+0x32>
   127ea:	1e3b      	subs	r3, r7, #0
   127ec:	d1c5      	bne.n	1277a <__aeabi_fsub+0xea>
   127ee:	2200      	movs	r2, #0
   127f0:	027b      	lsls	r3, r7, #9
   127f2:	0a5b      	lsrs	r3, r3, #9
   127f4:	b2e4      	uxtb	r4, r4
   127f6:	e7a3      	b.n	12740 <__aeabi_fsub+0xb0>
   127f8:	0014      	movs	r4, r2
   127fa:	e78f      	b.n	1271c <__aeabi_fsub+0x8c>
   127fc:	2e00      	cmp	r6, #0
   127fe:	d04d      	beq.n	1289c <__aeabi_fsub+0x20c>
   12800:	1e48      	subs	r0, r1, #1
   12802:	2800      	cmp	r0, #0
   12804:	d157      	bne.n	128b6 <__aeabi_fsub+0x226>
   12806:	199b      	adds	r3, r3, r6
   12808:	2401      	movs	r4, #1
   1280a:	015a      	lsls	r2, r3, #5
   1280c:	d5b5      	bpl.n	1277a <__aeabi_fsub+0xea>
   1280e:	2402      	movs	r4, #2
   12810:	e7e0      	b.n	127d4 <__aeabi_fsub+0x144>
   12812:	2a00      	cmp	r2, #0
   12814:	d125      	bne.n	12862 <__aeabi_fsub+0x1d2>
   12816:	1c62      	adds	r2, r4, #1
   12818:	b2d2      	uxtb	r2, r2
   1281a:	2a01      	cmp	r2, #1
   1281c:	dd72      	ble.n	12904 <__aeabi_fsub+0x274>
   1281e:	1b9f      	subs	r7, r3, r6
   12820:	017a      	lsls	r2, r7, #5
   12822:	d535      	bpl.n	12890 <__aeabi_fsub+0x200>
   12824:	1af7      	subs	r7, r6, r3
   12826:	000d      	movs	r5, r1
   12828:	e764      	b.n	126f4 <__aeabi_fsub+0x64>
   1282a:	2201      	movs	r2, #1
   1282c:	2300      	movs	r3, #0
   1282e:	402a      	ands	r2, r5
   12830:	e786      	b.n	12740 <__aeabi_fsub+0xb0>
   12832:	003b      	movs	r3, r7
   12834:	4a63      	ldr	r2, [pc, #396]	; (129c4 <__aeabi_fsub+0x334>)
   12836:	1a24      	subs	r4, r4, r0
   12838:	4013      	ands	r3, r2
   1283a:	e76f      	b.n	1271c <__aeabi_fsub+0x8c>
   1283c:	2900      	cmp	r1, #0
   1283e:	d16c      	bne.n	1291a <__aeabi_fsub+0x28a>
   12840:	1c61      	adds	r1, r4, #1
   12842:	b2c8      	uxtb	r0, r1
   12844:	2801      	cmp	r0, #1
   12846:	dd4e      	ble.n	128e6 <__aeabi_fsub+0x256>
   12848:	29ff      	cmp	r1, #255	; 0xff
   1284a:	d049      	beq.n	128e0 <__aeabi_fsub+0x250>
   1284c:	199b      	adds	r3, r3, r6
   1284e:	085b      	lsrs	r3, r3, #1
   12850:	000c      	movs	r4, r1
   12852:	e763      	b.n	1271c <__aeabi_fsub+0x8c>
   12854:	2aff      	cmp	r2, #255	; 0xff
   12856:	d041      	beq.n	128dc <__aeabi_fsub+0x24c>
   12858:	000a      	movs	r2, r1
   1285a:	e781      	b.n	12760 <__aeabi_fsub+0xd0>
   1285c:	2601      	movs	r6, #1
   1285e:	1b9b      	subs	r3, r3, r6
   12860:	e789      	b.n	12776 <__aeabi_fsub+0xe6>
   12862:	2c00      	cmp	r4, #0
   12864:	d01c      	beq.n	128a0 <__aeabi_fsub+0x210>
   12866:	28ff      	cmp	r0, #255	; 0xff
   12868:	d021      	beq.n	128ae <__aeabi_fsub+0x21e>
   1286a:	2480      	movs	r4, #128	; 0x80
   1286c:	04e4      	lsls	r4, r4, #19
   1286e:	4252      	negs	r2, r2
   12870:	4323      	orrs	r3, r4
   12872:	2a1b      	cmp	r2, #27
   12874:	dd00      	ble.n	12878 <__aeabi_fsub+0x1e8>
   12876:	e096      	b.n	129a6 <__aeabi_fsub+0x316>
   12878:	001c      	movs	r4, r3
   1287a:	2520      	movs	r5, #32
   1287c:	40d4      	lsrs	r4, r2
   1287e:	1aaa      	subs	r2, r5, r2
   12880:	4093      	lsls	r3, r2
   12882:	1e5a      	subs	r2, r3, #1
   12884:	4193      	sbcs	r3, r2
   12886:	4323      	orrs	r3, r4
   12888:	1af3      	subs	r3, r6, r3
   1288a:	0004      	movs	r4, r0
   1288c:	000d      	movs	r5, r1
   1288e:	e72d      	b.n	126ec <__aeabi_fsub+0x5c>
   12890:	2f00      	cmp	r7, #0
   12892:	d000      	beq.n	12896 <__aeabi_fsub+0x206>
   12894:	e72e      	b.n	126f4 <__aeabi_fsub+0x64>
   12896:	2200      	movs	r2, #0
   12898:	2400      	movs	r4, #0
   1289a:	e7a9      	b.n	127f0 <__aeabi_fsub+0x160>
   1289c:	000c      	movs	r4, r1
   1289e:	e73d      	b.n	1271c <__aeabi_fsub+0x8c>
   128a0:	2b00      	cmp	r3, #0
   128a2:	d058      	beq.n	12956 <__aeabi_fsub+0x2c6>
   128a4:	43d2      	mvns	r2, r2
   128a6:	2a00      	cmp	r2, #0
   128a8:	d0ee      	beq.n	12888 <__aeabi_fsub+0x1f8>
   128aa:	28ff      	cmp	r0, #255	; 0xff
   128ac:	d1e1      	bne.n	12872 <__aeabi_fsub+0x1e2>
   128ae:	0033      	movs	r3, r6
   128b0:	24ff      	movs	r4, #255	; 0xff
   128b2:	000d      	movs	r5, r1
   128b4:	e732      	b.n	1271c <__aeabi_fsub+0x8c>
   128b6:	29ff      	cmp	r1, #255	; 0xff
   128b8:	d010      	beq.n	128dc <__aeabi_fsub+0x24c>
   128ba:	0001      	movs	r1, r0
   128bc:	e778      	b.n	127b0 <__aeabi_fsub+0x120>
   128be:	2b00      	cmp	r3, #0
   128c0:	d06e      	beq.n	129a0 <__aeabi_fsub+0x310>
   128c2:	24ff      	movs	r4, #255	; 0xff
   128c4:	2e00      	cmp	r6, #0
   128c6:	d100      	bne.n	128ca <__aeabi_fsub+0x23a>
   128c8:	e728      	b.n	1271c <__aeabi_fsub+0x8c>
   128ca:	2280      	movs	r2, #128	; 0x80
   128cc:	4651      	mov	r1, sl
   128ce:	03d2      	lsls	r2, r2, #15
   128d0:	4211      	tst	r1, r2
   128d2:	d003      	beq.n	128dc <__aeabi_fsub+0x24c>
   128d4:	4661      	mov	r1, ip
   128d6:	4211      	tst	r1, r2
   128d8:	d100      	bne.n	128dc <__aeabi_fsub+0x24c>
   128da:	0033      	movs	r3, r6
   128dc:	24ff      	movs	r4, #255	; 0xff
   128de:	e71d      	b.n	1271c <__aeabi_fsub+0x8c>
   128e0:	24ff      	movs	r4, #255	; 0xff
   128e2:	2300      	movs	r3, #0
   128e4:	e72c      	b.n	12740 <__aeabi_fsub+0xb0>
   128e6:	2c00      	cmp	r4, #0
   128e8:	d1e9      	bne.n	128be <__aeabi_fsub+0x22e>
   128ea:	2b00      	cmp	r3, #0
   128ec:	d063      	beq.n	129b6 <__aeabi_fsub+0x326>
   128ee:	2e00      	cmp	r6, #0
   128f0:	d100      	bne.n	128f4 <__aeabi_fsub+0x264>
   128f2:	e713      	b.n	1271c <__aeabi_fsub+0x8c>
   128f4:	199b      	adds	r3, r3, r6
   128f6:	015a      	lsls	r2, r3, #5
   128f8:	d400      	bmi.n	128fc <__aeabi_fsub+0x26c>
   128fa:	e73e      	b.n	1277a <__aeabi_fsub+0xea>
   128fc:	4a31      	ldr	r2, [pc, #196]	; (129c4 <__aeabi_fsub+0x334>)
   128fe:	000c      	movs	r4, r1
   12900:	4013      	ands	r3, r2
   12902:	e70b      	b.n	1271c <__aeabi_fsub+0x8c>
   12904:	2c00      	cmp	r4, #0
   12906:	d11e      	bne.n	12946 <__aeabi_fsub+0x2b6>
   12908:	2b00      	cmp	r3, #0
   1290a:	d12f      	bne.n	1296c <__aeabi_fsub+0x2dc>
   1290c:	2e00      	cmp	r6, #0
   1290e:	d04f      	beq.n	129b0 <__aeabi_fsub+0x320>
   12910:	0033      	movs	r3, r6
   12912:	000d      	movs	r5, r1
   12914:	e702      	b.n	1271c <__aeabi_fsub+0x8c>
   12916:	2601      	movs	r6, #1
   12918:	e755      	b.n	127c6 <__aeabi_fsub+0x136>
   1291a:	2c00      	cmp	r4, #0
   1291c:	d11f      	bne.n	1295e <__aeabi_fsub+0x2ce>
   1291e:	2b00      	cmp	r3, #0
   12920:	d043      	beq.n	129aa <__aeabi_fsub+0x31a>
   12922:	43c9      	mvns	r1, r1
   12924:	2900      	cmp	r1, #0
   12926:	d00b      	beq.n	12940 <__aeabi_fsub+0x2b0>
   12928:	28ff      	cmp	r0, #255	; 0xff
   1292a:	d039      	beq.n	129a0 <__aeabi_fsub+0x310>
   1292c:	291b      	cmp	r1, #27
   1292e:	dc44      	bgt.n	129ba <__aeabi_fsub+0x32a>
   12930:	001c      	movs	r4, r3
   12932:	2720      	movs	r7, #32
   12934:	40cc      	lsrs	r4, r1
   12936:	1a79      	subs	r1, r7, r1
   12938:	408b      	lsls	r3, r1
   1293a:	1e59      	subs	r1, r3, #1
   1293c:	418b      	sbcs	r3, r1
   1293e:	4323      	orrs	r3, r4
   12940:	199b      	adds	r3, r3, r6
   12942:	0004      	movs	r4, r0
   12944:	e740      	b.n	127c8 <__aeabi_fsub+0x138>
   12946:	2b00      	cmp	r3, #0
   12948:	d11a      	bne.n	12980 <__aeabi_fsub+0x2f0>
   1294a:	2e00      	cmp	r6, #0
   1294c:	d124      	bne.n	12998 <__aeabi_fsub+0x308>
   1294e:	2780      	movs	r7, #128	; 0x80
   12950:	2200      	movs	r2, #0
   12952:	03ff      	lsls	r7, r7, #15
   12954:	e71b      	b.n	1278e <__aeabi_fsub+0xfe>
   12956:	0033      	movs	r3, r6
   12958:	0004      	movs	r4, r0
   1295a:	000d      	movs	r5, r1
   1295c:	e6de      	b.n	1271c <__aeabi_fsub+0x8c>
   1295e:	28ff      	cmp	r0, #255	; 0xff
   12960:	d01e      	beq.n	129a0 <__aeabi_fsub+0x310>
   12962:	2480      	movs	r4, #128	; 0x80
   12964:	04e4      	lsls	r4, r4, #19
   12966:	4249      	negs	r1, r1
   12968:	4323      	orrs	r3, r4
   1296a:	e7df      	b.n	1292c <__aeabi_fsub+0x29c>
   1296c:	2e00      	cmp	r6, #0
   1296e:	d100      	bne.n	12972 <__aeabi_fsub+0x2e2>
   12970:	e6d4      	b.n	1271c <__aeabi_fsub+0x8c>
   12972:	1b9f      	subs	r7, r3, r6
   12974:	017a      	lsls	r2, r7, #5
   12976:	d400      	bmi.n	1297a <__aeabi_fsub+0x2ea>
   12978:	e737      	b.n	127ea <__aeabi_fsub+0x15a>
   1297a:	1af3      	subs	r3, r6, r3
   1297c:	000d      	movs	r5, r1
   1297e:	e6cd      	b.n	1271c <__aeabi_fsub+0x8c>
   12980:	24ff      	movs	r4, #255	; 0xff
   12982:	2e00      	cmp	r6, #0
   12984:	d100      	bne.n	12988 <__aeabi_fsub+0x2f8>
   12986:	e6c9      	b.n	1271c <__aeabi_fsub+0x8c>
   12988:	2280      	movs	r2, #128	; 0x80
   1298a:	4650      	mov	r0, sl
   1298c:	03d2      	lsls	r2, r2, #15
   1298e:	4210      	tst	r0, r2
   12990:	d0a4      	beq.n	128dc <__aeabi_fsub+0x24c>
   12992:	4660      	mov	r0, ip
   12994:	4210      	tst	r0, r2
   12996:	d1a1      	bne.n	128dc <__aeabi_fsub+0x24c>
   12998:	0033      	movs	r3, r6
   1299a:	000d      	movs	r5, r1
   1299c:	24ff      	movs	r4, #255	; 0xff
   1299e:	e6bd      	b.n	1271c <__aeabi_fsub+0x8c>
   129a0:	0033      	movs	r3, r6
   129a2:	24ff      	movs	r4, #255	; 0xff
   129a4:	e6ba      	b.n	1271c <__aeabi_fsub+0x8c>
   129a6:	2301      	movs	r3, #1
   129a8:	e76e      	b.n	12888 <__aeabi_fsub+0x1f8>
   129aa:	0033      	movs	r3, r6
   129ac:	0004      	movs	r4, r0
   129ae:	e6b5      	b.n	1271c <__aeabi_fsub+0x8c>
   129b0:	2700      	movs	r7, #0
   129b2:	2200      	movs	r2, #0
   129b4:	e71c      	b.n	127f0 <__aeabi_fsub+0x160>
   129b6:	0033      	movs	r3, r6
   129b8:	e6b0      	b.n	1271c <__aeabi_fsub+0x8c>
   129ba:	2301      	movs	r3, #1
   129bc:	e7c0      	b.n	12940 <__aeabi_fsub+0x2b0>
   129be:	46c0      	nop			; (mov r8, r8)
   129c0:	7dffffff 	.word	0x7dffffff
   129c4:	fbffffff 	.word	0xfbffffff

000129c8 <__aeabi_f2iz>:
   129c8:	0241      	lsls	r1, r0, #9
   129ca:	0043      	lsls	r3, r0, #1
   129cc:	0fc2      	lsrs	r2, r0, #31
   129ce:	0a49      	lsrs	r1, r1, #9
   129d0:	0e1b      	lsrs	r3, r3, #24
   129d2:	2000      	movs	r0, #0
   129d4:	2b7e      	cmp	r3, #126	; 0x7e
   129d6:	dd0d      	ble.n	129f4 <__aeabi_f2iz+0x2c>
   129d8:	2b9d      	cmp	r3, #157	; 0x9d
   129da:	dc0c      	bgt.n	129f6 <__aeabi_f2iz+0x2e>
   129dc:	2080      	movs	r0, #128	; 0x80
   129de:	0400      	lsls	r0, r0, #16
   129e0:	4301      	orrs	r1, r0
   129e2:	2b95      	cmp	r3, #149	; 0x95
   129e4:	dc0a      	bgt.n	129fc <__aeabi_f2iz+0x34>
   129e6:	2096      	movs	r0, #150	; 0x96
   129e8:	1ac3      	subs	r3, r0, r3
   129ea:	40d9      	lsrs	r1, r3
   129ec:	4248      	negs	r0, r1
   129ee:	2a00      	cmp	r2, #0
   129f0:	d100      	bne.n	129f4 <__aeabi_f2iz+0x2c>
   129f2:	0008      	movs	r0, r1
   129f4:	4770      	bx	lr
   129f6:	4b03      	ldr	r3, [pc, #12]	; (12a04 <__aeabi_f2iz+0x3c>)
   129f8:	18d0      	adds	r0, r2, r3
   129fa:	e7fb      	b.n	129f4 <__aeabi_f2iz+0x2c>
   129fc:	3b96      	subs	r3, #150	; 0x96
   129fe:	4099      	lsls	r1, r3
   12a00:	e7f4      	b.n	129ec <__aeabi_f2iz+0x24>
   12a02:	46c0      	nop			; (mov r8, r8)
   12a04:	7fffffff 	.word	0x7fffffff

00012a08 <__aeabi_i2f>:
   12a08:	b570      	push	{r4, r5, r6, lr}
   12a0a:	2800      	cmp	r0, #0
   12a0c:	d030      	beq.n	12a70 <__aeabi_i2f+0x68>
   12a0e:	17c3      	asrs	r3, r0, #31
   12a10:	18c4      	adds	r4, r0, r3
   12a12:	405c      	eors	r4, r3
   12a14:	0fc5      	lsrs	r5, r0, #31
   12a16:	0020      	movs	r0, r4
   12a18:	f001 fdf0 	bl	145fc <__clzsi2>
   12a1c:	239e      	movs	r3, #158	; 0x9e
   12a1e:	1a1b      	subs	r3, r3, r0
   12a20:	2b96      	cmp	r3, #150	; 0x96
   12a22:	dc0d      	bgt.n	12a40 <__aeabi_i2f+0x38>
   12a24:	2296      	movs	r2, #150	; 0x96
   12a26:	1ad2      	subs	r2, r2, r3
   12a28:	4094      	lsls	r4, r2
   12a2a:	002a      	movs	r2, r5
   12a2c:	0264      	lsls	r4, r4, #9
   12a2e:	0a64      	lsrs	r4, r4, #9
   12a30:	b2db      	uxtb	r3, r3
   12a32:	0264      	lsls	r4, r4, #9
   12a34:	05db      	lsls	r3, r3, #23
   12a36:	0a60      	lsrs	r0, r4, #9
   12a38:	07d2      	lsls	r2, r2, #31
   12a3a:	4318      	orrs	r0, r3
   12a3c:	4310      	orrs	r0, r2
   12a3e:	bd70      	pop	{r4, r5, r6, pc}
   12a40:	2b99      	cmp	r3, #153	; 0x99
   12a42:	dc19      	bgt.n	12a78 <__aeabi_i2f+0x70>
   12a44:	2299      	movs	r2, #153	; 0x99
   12a46:	1ad2      	subs	r2, r2, r3
   12a48:	2a00      	cmp	r2, #0
   12a4a:	dd29      	ble.n	12aa0 <__aeabi_i2f+0x98>
   12a4c:	4094      	lsls	r4, r2
   12a4e:	0022      	movs	r2, r4
   12a50:	4c14      	ldr	r4, [pc, #80]	; (12aa4 <__aeabi_i2f+0x9c>)
   12a52:	4014      	ands	r4, r2
   12a54:	0751      	lsls	r1, r2, #29
   12a56:	d004      	beq.n	12a62 <__aeabi_i2f+0x5a>
   12a58:	210f      	movs	r1, #15
   12a5a:	400a      	ands	r2, r1
   12a5c:	2a04      	cmp	r2, #4
   12a5e:	d000      	beq.n	12a62 <__aeabi_i2f+0x5a>
   12a60:	3404      	adds	r4, #4
   12a62:	0162      	lsls	r2, r4, #5
   12a64:	d413      	bmi.n	12a8e <__aeabi_i2f+0x86>
   12a66:	01a4      	lsls	r4, r4, #6
   12a68:	0a64      	lsrs	r4, r4, #9
   12a6a:	b2db      	uxtb	r3, r3
   12a6c:	002a      	movs	r2, r5
   12a6e:	e7e0      	b.n	12a32 <__aeabi_i2f+0x2a>
   12a70:	2200      	movs	r2, #0
   12a72:	2300      	movs	r3, #0
   12a74:	2400      	movs	r4, #0
   12a76:	e7dc      	b.n	12a32 <__aeabi_i2f+0x2a>
   12a78:	2205      	movs	r2, #5
   12a7a:	0021      	movs	r1, r4
   12a7c:	1a12      	subs	r2, r2, r0
   12a7e:	40d1      	lsrs	r1, r2
   12a80:	22b9      	movs	r2, #185	; 0xb9
   12a82:	1ad2      	subs	r2, r2, r3
   12a84:	4094      	lsls	r4, r2
   12a86:	1e62      	subs	r2, r4, #1
   12a88:	4194      	sbcs	r4, r2
   12a8a:	430c      	orrs	r4, r1
   12a8c:	e7da      	b.n	12a44 <__aeabi_i2f+0x3c>
   12a8e:	4b05      	ldr	r3, [pc, #20]	; (12aa4 <__aeabi_i2f+0x9c>)
   12a90:	002a      	movs	r2, r5
   12a92:	401c      	ands	r4, r3
   12a94:	239f      	movs	r3, #159	; 0x9f
   12a96:	01a4      	lsls	r4, r4, #6
   12a98:	1a1b      	subs	r3, r3, r0
   12a9a:	0a64      	lsrs	r4, r4, #9
   12a9c:	b2db      	uxtb	r3, r3
   12a9e:	e7c8      	b.n	12a32 <__aeabi_i2f+0x2a>
   12aa0:	0022      	movs	r2, r4
   12aa2:	e7d5      	b.n	12a50 <__aeabi_i2f+0x48>
   12aa4:	fbffffff 	.word	0xfbffffff

00012aa8 <__aeabi_ui2f>:
   12aa8:	b510      	push	{r4, lr}
   12aaa:	1e04      	subs	r4, r0, #0
   12aac:	d027      	beq.n	12afe <__aeabi_ui2f+0x56>
   12aae:	f001 fda5 	bl	145fc <__clzsi2>
   12ab2:	239e      	movs	r3, #158	; 0x9e
   12ab4:	1a1b      	subs	r3, r3, r0
   12ab6:	2b96      	cmp	r3, #150	; 0x96
   12ab8:	dc0a      	bgt.n	12ad0 <__aeabi_ui2f+0x28>
   12aba:	2296      	movs	r2, #150	; 0x96
   12abc:	1ad2      	subs	r2, r2, r3
   12abe:	4094      	lsls	r4, r2
   12ac0:	0264      	lsls	r4, r4, #9
   12ac2:	0a64      	lsrs	r4, r4, #9
   12ac4:	b2db      	uxtb	r3, r3
   12ac6:	0264      	lsls	r4, r4, #9
   12ac8:	05db      	lsls	r3, r3, #23
   12aca:	0a60      	lsrs	r0, r4, #9
   12acc:	4318      	orrs	r0, r3
   12ace:	bd10      	pop	{r4, pc}
   12ad0:	2b99      	cmp	r3, #153	; 0x99
   12ad2:	dc17      	bgt.n	12b04 <__aeabi_ui2f+0x5c>
   12ad4:	2299      	movs	r2, #153	; 0x99
   12ad6:	1ad2      	subs	r2, r2, r3
   12ad8:	2a00      	cmp	r2, #0
   12ada:	dd27      	ble.n	12b2c <__aeabi_ui2f+0x84>
   12adc:	4094      	lsls	r4, r2
   12ade:	0022      	movs	r2, r4
   12ae0:	4c13      	ldr	r4, [pc, #76]	; (12b30 <__aeabi_ui2f+0x88>)
   12ae2:	4014      	ands	r4, r2
   12ae4:	0751      	lsls	r1, r2, #29
   12ae6:	d004      	beq.n	12af2 <__aeabi_ui2f+0x4a>
   12ae8:	210f      	movs	r1, #15
   12aea:	400a      	ands	r2, r1
   12aec:	2a04      	cmp	r2, #4
   12aee:	d000      	beq.n	12af2 <__aeabi_ui2f+0x4a>
   12af0:	3404      	adds	r4, #4
   12af2:	0162      	lsls	r2, r4, #5
   12af4:	d412      	bmi.n	12b1c <__aeabi_ui2f+0x74>
   12af6:	01a4      	lsls	r4, r4, #6
   12af8:	0a64      	lsrs	r4, r4, #9
   12afa:	b2db      	uxtb	r3, r3
   12afc:	e7e3      	b.n	12ac6 <__aeabi_ui2f+0x1e>
   12afe:	2300      	movs	r3, #0
   12b00:	2400      	movs	r4, #0
   12b02:	e7e0      	b.n	12ac6 <__aeabi_ui2f+0x1e>
   12b04:	22b9      	movs	r2, #185	; 0xb9
   12b06:	0021      	movs	r1, r4
   12b08:	1ad2      	subs	r2, r2, r3
   12b0a:	4091      	lsls	r1, r2
   12b0c:	000a      	movs	r2, r1
   12b0e:	1e51      	subs	r1, r2, #1
   12b10:	418a      	sbcs	r2, r1
   12b12:	2105      	movs	r1, #5
   12b14:	1a09      	subs	r1, r1, r0
   12b16:	40cc      	lsrs	r4, r1
   12b18:	4314      	orrs	r4, r2
   12b1a:	e7db      	b.n	12ad4 <__aeabi_ui2f+0x2c>
   12b1c:	4b04      	ldr	r3, [pc, #16]	; (12b30 <__aeabi_ui2f+0x88>)
   12b1e:	401c      	ands	r4, r3
   12b20:	239f      	movs	r3, #159	; 0x9f
   12b22:	01a4      	lsls	r4, r4, #6
   12b24:	1a1b      	subs	r3, r3, r0
   12b26:	0a64      	lsrs	r4, r4, #9
   12b28:	b2db      	uxtb	r3, r3
   12b2a:	e7cc      	b.n	12ac6 <__aeabi_ui2f+0x1e>
   12b2c:	0022      	movs	r2, r4
   12b2e:	e7d7      	b.n	12ae0 <__aeabi_ui2f+0x38>
   12b30:	fbffffff 	.word	0xfbffffff

00012b34 <__aeabi_dadd>:
   12b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12b36:	4645      	mov	r5, r8
   12b38:	46de      	mov	lr, fp
   12b3a:	4657      	mov	r7, sl
   12b3c:	464e      	mov	r6, r9
   12b3e:	030c      	lsls	r4, r1, #12
   12b40:	b5e0      	push	{r5, r6, r7, lr}
   12b42:	004e      	lsls	r6, r1, #1
   12b44:	0fc9      	lsrs	r1, r1, #31
   12b46:	4688      	mov	r8, r1
   12b48:	000d      	movs	r5, r1
   12b4a:	0a61      	lsrs	r1, r4, #9
   12b4c:	0f44      	lsrs	r4, r0, #29
   12b4e:	430c      	orrs	r4, r1
   12b50:	00c7      	lsls	r7, r0, #3
   12b52:	0319      	lsls	r1, r3, #12
   12b54:	0058      	lsls	r0, r3, #1
   12b56:	0fdb      	lsrs	r3, r3, #31
   12b58:	469b      	mov	fp, r3
   12b5a:	0a4b      	lsrs	r3, r1, #9
   12b5c:	0f51      	lsrs	r1, r2, #29
   12b5e:	430b      	orrs	r3, r1
   12b60:	0d76      	lsrs	r6, r6, #21
   12b62:	0d40      	lsrs	r0, r0, #21
   12b64:	0019      	movs	r1, r3
   12b66:	00d2      	lsls	r2, r2, #3
   12b68:	45d8      	cmp	r8, fp
   12b6a:	d100      	bne.n	12b6e <__aeabi_dadd+0x3a>
   12b6c:	e0ae      	b.n	12ccc <__aeabi_dadd+0x198>
   12b6e:	1a35      	subs	r5, r6, r0
   12b70:	2d00      	cmp	r5, #0
   12b72:	dc00      	bgt.n	12b76 <__aeabi_dadd+0x42>
   12b74:	e0f6      	b.n	12d64 <__aeabi_dadd+0x230>
   12b76:	2800      	cmp	r0, #0
   12b78:	d10f      	bne.n	12b9a <__aeabi_dadd+0x66>
   12b7a:	4313      	orrs	r3, r2
   12b7c:	d100      	bne.n	12b80 <__aeabi_dadd+0x4c>
   12b7e:	e0db      	b.n	12d38 <__aeabi_dadd+0x204>
   12b80:	1e6b      	subs	r3, r5, #1
   12b82:	2b00      	cmp	r3, #0
   12b84:	d000      	beq.n	12b88 <__aeabi_dadd+0x54>
   12b86:	e137      	b.n	12df8 <__aeabi_dadd+0x2c4>
   12b88:	1aba      	subs	r2, r7, r2
   12b8a:	4297      	cmp	r7, r2
   12b8c:	41bf      	sbcs	r7, r7
   12b8e:	1a64      	subs	r4, r4, r1
   12b90:	427f      	negs	r7, r7
   12b92:	1be4      	subs	r4, r4, r7
   12b94:	2601      	movs	r6, #1
   12b96:	0017      	movs	r7, r2
   12b98:	e024      	b.n	12be4 <__aeabi_dadd+0xb0>
   12b9a:	4bc6      	ldr	r3, [pc, #792]	; (12eb4 <__aeabi_dadd+0x380>)
   12b9c:	429e      	cmp	r6, r3
   12b9e:	d04d      	beq.n	12c3c <__aeabi_dadd+0x108>
   12ba0:	2380      	movs	r3, #128	; 0x80
   12ba2:	041b      	lsls	r3, r3, #16
   12ba4:	4319      	orrs	r1, r3
   12ba6:	2d38      	cmp	r5, #56	; 0x38
   12ba8:	dd00      	ble.n	12bac <__aeabi_dadd+0x78>
   12baa:	e107      	b.n	12dbc <__aeabi_dadd+0x288>
   12bac:	2d1f      	cmp	r5, #31
   12bae:	dd00      	ble.n	12bb2 <__aeabi_dadd+0x7e>
   12bb0:	e138      	b.n	12e24 <__aeabi_dadd+0x2f0>
   12bb2:	2020      	movs	r0, #32
   12bb4:	1b43      	subs	r3, r0, r5
   12bb6:	469a      	mov	sl, r3
   12bb8:	000b      	movs	r3, r1
   12bba:	4650      	mov	r0, sl
   12bbc:	4083      	lsls	r3, r0
   12bbe:	4699      	mov	r9, r3
   12bc0:	0013      	movs	r3, r2
   12bc2:	4648      	mov	r0, r9
   12bc4:	40eb      	lsrs	r3, r5
   12bc6:	4318      	orrs	r0, r3
   12bc8:	0003      	movs	r3, r0
   12bca:	4650      	mov	r0, sl
   12bcc:	4082      	lsls	r2, r0
   12bce:	1e50      	subs	r0, r2, #1
   12bd0:	4182      	sbcs	r2, r0
   12bd2:	40e9      	lsrs	r1, r5
   12bd4:	431a      	orrs	r2, r3
   12bd6:	1aba      	subs	r2, r7, r2
   12bd8:	1a61      	subs	r1, r4, r1
   12bda:	4297      	cmp	r7, r2
   12bdc:	41a4      	sbcs	r4, r4
   12bde:	0017      	movs	r7, r2
   12be0:	4264      	negs	r4, r4
   12be2:	1b0c      	subs	r4, r1, r4
   12be4:	0223      	lsls	r3, r4, #8
   12be6:	d562      	bpl.n	12cae <__aeabi_dadd+0x17a>
   12be8:	0264      	lsls	r4, r4, #9
   12bea:	0a65      	lsrs	r5, r4, #9
   12bec:	2d00      	cmp	r5, #0
   12bee:	d100      	bne.n	12bf2 <__aeabi_dadd+0xbe>
   12bf0:	e0df      	b.n	12db2 <__aeabi_dadd+0x27e>
   12bf2:	0028      	movs	r0, r5
   12bf4:	f001 fd02 	bl	145fc <__clzsi2>
   12bf8:	0003      	movs	r3, r0
   12bfa:	3b08      	subs	r3, #8
   12bfc:	2b1f      	cmp	r3, #31
   12bfe:	dd00      	ble.n	12c02 <__aeabi_dadd+0xce>
   12c00:	e0d2      	b.n	12da8 <__aeabi_dadd+0x274>
   12c02:	2220      	movs	r2, #32
   12c04:	003c      	movs	r4, r7
   12c06:	1ad2      	subs	r2, r2, r3
   12c08:	409d      	lsls	r5, r3
   12c0a:	40d4      	lsrs	r4, r2
   12c0c:	409f      	lsls	r7, r3
   12c0e:	4325      	orrs	r5, r4
   12c10:	429e      	cmp	r6, r3
   12c12:	dd00      	ble.n	12c16 <__aeabi_dadd+0xe2>
   12c14:	e0c4      	b.n	12da0 <__aeabi_dadd+0x26c>
   12c16:	1b9e      	subs	r6, r3, r6
   12c18:	1c73      	adds	r3, r6, #1
   12c1a:	2b1f      	cmp	r3, #31
   12c1c:	dd00      	ble.n	12c20 <__aeabi_dadd+0xec>
   12c1e:	e0f1      	b.n	12e04 <__aeabi_dadd+0x2d0>
   12c20:	2220      	movs	r2, #32
   12c22:	0038      	movs	r0, r7
   12c24:	0029      	movs	r1, r5
   12c26:	1ad2      	subs	r2, r2, r3
   12c28:	40d8      	lsrs	r0, r3
   12c2a:	4091      	lsls	r1, r2
   12c2c:	4097      	lsls	r7, r2
   12c2e:	002c      	movs	r4, r5
   12c30:	4301      	orrs	r1, r0
   12c32:	1e78      	subs	r0, r7, #1
   12c34:	4187      	sbcs	r7, r0
   12c36:	40dc      	lsrs	r4, r3
   12c38:	2600      	movs	r6, #0
   12c3a:	430f      	orrs	r7, r1
   12c3c:	077b      	lsls	r3, r7, #29
   12c3e:	d009      	beq.n	12c54 <__aeabi_dadd+0x120>
   12c40:	230f      	movs	r3, #15
   12c42:	403b      	ands	r3, r7
   12c44:	2b04      	cmp	r3, #4
   12c46:	d005      	beq.n	12c54 <__aeabi_dadd+0x120>
   12c48:	1d3b      	adds	r3, r7, #4
   12c4a:	42bb      	cmp	r3, r7
   12c4c:	41bf      	sbcs	r7, r7
   12c4e:	427f      	negs	r7, r7
   12c50:	19e4      	adds	r4, r4, r7
   12c52:	001f      	movs	r7, r3
   12c54:	0223      	lsls	r3, r4, #8
   12c56:	d52c      	bpl.n	12cb2 <__aeabi_dadd+0x17e>
   12c58:	4b96      	ldr	r3, [pc, #600]	; (12eb4 <__aeabi_dadd+0x380>)
   12c5a:	3601      	adds	r6, #1
   12c5c:	429e      	cmp	r6, r3
   12c5e:	d100      	bne.n	12c62 <__aeabi_dadd+0x12e>
   12c60:	e09a      	b.n	12d98 <__aeabi_dadd+0x264>
   12c62:	4645      	mov	r5, r8
   12c64:	4b94      	ldr	r3, [pc, #592]	; (12eb8 <__aeabi_dadd+0x384>)
   12c66:	08ff      	lsrs	r7, r7, #3
   12c68:	401c      	ands	r4, r3
   12c6a:	0760      	lsls	r0, r4, #29
   12c6c:	0576      	lsls	r6, r6, #21
   12c6e:	0264      	lsls	r4, r4, #9
   12c70:	4307      	orrs	r7, r0
   12c72:	0b24      	lsrs	r4, r4, #12
   12c74:	0d76      	lsrs	r6, r6, #21
   12c76:	2100      	movs	r1, #0
   12c78:	0324      	lsls	r4, r4, #12
   12c7a:	0b23      	lsrs	r3, r4, #12
   12c7c:	0d0c      	lsrs	r4, r1, #20
   12c7e:	4a8f      	ldr	r2, [pc, #572]	; (12ebc <__aeabi_dadd+0x388>)
   12c80:	0524      	lsls	r4, r4, #20
   12c82:	431c      	orrs	r4, r3
   12c84:	4014      	ands	r4, r2
   12c86:	0533      	lsls	r3, r6, #20
   12c88:	4323      	orrs	r3, r4
   12c8a:	005b      	lsls	r3, r3, #1
   12c8c:	07ed      	lsls	r5, r5, #31
   12c8e:	085b      	lsrs	r3, r3, #1
   12c90:	432b      	orrs	r3, r5
   12c92:	0038      	movs	r0, r7
   12c94:	0019      	movs	r1, r3
   12c96:	bc3c      	pop	{r2, r3, r4, r5}
   12c98:	4690      	mov	r8, r2
   12c9a:	4699      	mov	r9, r3
   12c9c:	46a2      	mov	sl, r4
   12c9e:	46ab      	mov	fp, r5
   12ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12ca2:	4664      	mov	r4, ip
   12ca4:	4304      	orrs	r4, r0
   12ca6:	d100      	bne.n	12caa <__aeabi_dadd+0x176>
   12ca8:	e211      	b.n	130ce <__aeabi_dadd+0x59a>
   12caa:	0004      	movs	r4, r0
   12cac:	4667      	mov	r7, ip
   12cae:	077b      	lsls	r3, r7, #29
   12cb0:	d1c6      	bne.n	12c40 <__aeabi_dadd+0x10c>
   12cb2:	4645      	mov	r5, r8
   12cb4:	0760      	lsls	r0, r4, #29
   12cb6:	08ff      	lsrs	r7, r7, #3
   12cb8:	4307      	orrs	r7, r0
   12cba:	08e4      	lsrs	r4, r4, #3
   12cbc:	4b7d      	ldr	r3, [pc, #500]	; (12eb4 <__aeabi_dadd+0x380>)
   12cbe:	429e      	cmp	r6, r3
   12cc0:	d030      	beq.n	12d24 <__aeabi_dadd+0x1f0>
   12cc2:	0324      	lsls	r4, r4, #12
   12cc4:	0576      	lsls	r6, r6, #21
   12cc6:	0b24      	lsrs	r4, r4, #12
   12cc8:	0d76      	lsrs	r6, r6, #21
   12cca:	e7d4      	b.n	12c76 <__aeabi_dadd+0x142>
   12ccc:	1a33      	subs	r3, r6, r0
   12cce:	469a      	mov	sl, r3
   12cd0:	2b00      	cmp	r3, #0
   12cd2:	dd78      	ble.n	12dc6 <__aeabi_dadd+0x292>
   12cd4:	2800      	cmp	r0, #0
   12cd6:	d031      	beq.n	12d3c <__aeabi_dadd+0x208>
   12cd8:	4876      	ldr	r0, [pc, #472]	; (12eb4 <__aeabi_dadd+0x380>)
   12cda:	4286      	cmp	r6, r0
   12cdc:	d0ae      	beq.n	12c3c <__aeabi_dadd+0x108>
   12cde:	2080      	movs	r0, #128	; 0x80
   12ce0:	0400      	lsls	r0, r0, #16
   12ce2:	4301      	orrs	r1, r0
   12ce4:	4653      	mov	r3, sl
   12ce6:	2b38      	cmp	r3, #56	; 0x38
   12ce8:	dc00      	bgt.n	12cec <__aeabi_dadd+0x1b8>
   12cea:	e0e9      	b.n	12ec0 <__aeabi_dadd+0x38c>
   12cec:	430a      	orrs	r2, r1
   12cee:	1e51      	subs	r1, r2, #1
   12cf0:	418a      	sbcs	r2, r1
   12cf2:	2100      	movs	r1, #0
   12cf4:	19d2      	adds	r2, r2, r7
   12cf6:	42ba      	cmp	r2, r7
   12cf8:	41bf      	sbcs	r7, r7
   12cfa:	1909      	adds	r1, r1, r4
   12cfc:	427c      	negs	r4, r7
   12cfe:	0017      	movs	r7, r2
   12d00:	190c      	adds	r4, r1, r4
   12d02:	0223      	lsls	r3, r4, #8
   12d04:	d5d3      	bpl.n	12cae <__aeabi_dadd+0x17a>
   12d06:	4b6b      	ldr	r3, [pc, #428]	; (12eb4 <__aeabi_dadd+0x380>)
   12d08:	3601      	adds	r6, #1
   12d0a:	429e      	cmp	r6, r3
   12d0c:	d100      	bne.n	12d10 <__aeabi_dadd+0x1dc>
   12d0e:	e13a      	b.n	12f86 <__aeabi_dadd+0x452>
   12d10:	2001      	movs	r0, #1
   12d12:	4b69      	ldr	r3, [pc, #420]	; (12eb8 <__aeabi_dadd+0x384>)
   12d14:	401c      	ands	r4, r3
   12d16:	087b      	lsrs	r3, r7, #1
   12d18:	4007      	ands	r7, r0
   12d1a:	431f      	orrs	r7, r3
   12d1c:	07e0      	lsls	r0, r4, #31
   12d1e:	4307      	orrs	r7, r0
   12d20:	0864      	lsrs	r4, r4, #1
   12d22:	e78b      	b.n	12c3c <__aeabi_dadd+0x108>
   12d24:	0023      	movs	r3, r4
   12d26:	433b      	orrs	r3, r7
   12d28:	d100      	bne.n	12d2c <__aeabi_dadd+0x1f8>
   12d2a:	e1cb      	b.n	130c4 <__aeabi_dadd+0x590>
   12d2c:	2280      	movs	r2, #128	; 0x80
   12d2e:	0312      	lsls	r2, r2, #12
   12d30:	4314      	orrs	r4, r2
   12d32:	0324      	lsls	r4, r4, #12
   12d34:	0b24      	lsrs	r4, r4, #12
   12d36:	e79e      	b.n	12c76 <__aeabi_dadd+0x142>
   12d38:	002e      	movs	r6, r5
   12d3a:	e77f      	b.n	12c3c <__aeabi_dadd+0x108>
   12d3c:	0008      	movs	r0, r1
   12d3e:	4310      	orrs	r0, r2
   12d40:	d100      	bne.n	12d44 <__aeabi_dadd+0x210>
   12d42:	e0b4      	b.n	12eae <__aeabi_dadd+0x37a>
   12d44:	1e58      	subs	r0, r3, #1
   12d46:	2800      	cmp	r0, #0
   12d48:	d000      	beq.n	12d4c <__aeabi_dadd+0x218>
   12d4a:	e0de      	b.n	12f0a <__aeabi_dadd+0x3d6>
   12d4c:	18ba      	adds	r2, r7, r2
   12d4e:	42ba      	cmp	r2, r7
   12d50:	419b      	sbcs	r3, r3
   12d52:	1864      	adds	r4, r4, r1
   12d54:	425b      	negs	r3, r3
   12d56:	18e4      	adds	r4, r4, r3
   12d58:	0017      	movs	r7, r2
   12d5a:	2601      	movs	r6, #1
   12d5c:	0223      	lsls	r3, r4, #8
   12d5e:	d5a6      	bpl.n	12cae <__aeabi_dadd+0x17a>
   12d60:	2602      	movs	r6, #2
   12d62:	e7d5      	b.n	12d10 <__aeabi_dadd+0x1dc>
   12d64:	2d00      	cmp	r5, #0
   12d66:	d16e      	bne.n	12e46 <__aeabi_dadd+0x312>
   12d68:	1c70      	adds	r0, r6, #1
   12d6a:	0540      	lsls	r0, r0, #21
   12d6c:	0d40      	lsrs	r0, r0, #21
   12d6e:	2801      	cmp	r0, #1
   12d70:	dc00      	bgt.n	12d74 <__aeabi_dadd+0x240>
   12d72:	e0f9      	b.n	12f68 <__aeabi_dadd+0x434>
   12d74:	1ab8      	subs	r0, r7, r2
   12d76:	4684      	mov	ip, r0
   12d78:	4287      	cmp	r7, r0
   12d7a:	4180      	sbcs	r0, r0
   12d7c:	1ae5      	subs	r5, r4, r3
   12d7e:	4240      	negs	r0, r0
   12d80:	1a2d      	subs	r5, r5, r0
   12d82:	0228      	lsls	r0, r5, #8
   12d84:	d400      	bmi.n	12d88 <__aeabi_dadd+0x254>
   12d86:	e089      	b.n	12e9c <__aeabi_dadd+0x368>
   12d88:	1bd7      	subs	r7, r2, r7
   12d8a:	42ba      	cmp	r2, r7
   12d8c:	4192      	sbcs	r2, r2
   12d8e:	1b1c      	subs	r4, r3, r4
   12d90:	4252      	negs	r2, r2
   12d92:	1aa5      	subs	r5, r4, r2
   12d94:	46d8      	mov	r8, fp
   12d96:	e729      	b.n	12bec <__aeabi_dadd+0xb8>
   12d98:	4645      	mov	r5, r8
   12d9a:	2400      	movs	r4, #0
   12d9c:	2700      	movs	r7, #0
   12d9e:	e76a      	b.n	12c76 <__aeabi_dadd+0x142>
   12da0:	4c45      	ldr	r4, [pc, #276]	; (12eb8 <__aeabi_dadd+0x384>)
   12da2:	1af6      	subs	r6, r6, r3
   12da4:	402c      	ands	r4, r5
   12da6:	e749      	b.n	12c3c <__aeabi_dadd+0x108>
   12da8:	003d      	movs	r5, r7
   12daa:	3828      	subs	r0, #40	; 0x28
   12dac:	4085      	lsls	r5, r0
   12dae:	2700      	movs	r7, #0
   12db0:	e72e      	b.n	12c10 <__aeabi_dadd+0xdc>
   12db2:	0038      	movs	r0, r7
   12db4:	f001 fc22 	bl	145fc <__clzsi2>
   12db8:	3020      	adds	r0, #32
   12dba:	e71d      	b.n	12bf8 <__aeabi_dadd+0xc4>
   12dbc:	430a      	orrs	r2, r1
   12dbe:	1e51      	subs	r1, r2, #1
   12dc0:	418a      	sbcs	r2, r1
   12dc2:	2100      	movs	r1, #0
   12dc4:	e707      	b.n	12bd6 <__aeabi_dadd+0xa2>
   12dc6:	2b00      	cmp	r3, #0
   12dc8:	d000      	beq.n	12dcc <__aeabi_dadd+0x298>
   12dca:	e0f3      	b.n	12fb4 <__aeabi_dadd+0x480>
   12dcc:	1c70      	adds	r0, r6, #1
   12dce:	0543      	lsls	r3, r0, #21
   12dd0:	0d5b      	lsrs	r3, r3, #21
   12dd2:	2b01      	cmp	r3, #1
   12dd4:	dc00      	bgt.n	12dd8 <__aeabi_dadd+0x2a4>
   12dd6:	e0ad      	b.n	12f34 <__aeabi_dadd+0x400>
   12dd8:	4b36      	ldr	r3, [pc, #216]	; (12eb4 <__aeabi_dadd+0x380>)
   12dda:	4298      	cmp	r0, r3
   12ddc:	d100      	bne.n	12de0 <__aeabi_dadd+0x2ac>
   12dde:	e0d1      	b.n	12f84 <__aeabi_dadd+0x450>
   12de0:	18ba      	adds	r2, r7, r2
   12de2:	42ba      	cmp	r2, r7
   12de4:	41bf      	sbcs	r7, r7
   12de6:	1864      	adds	r4, r4, r1
   12de8:	427f      	negs	r7, r7
   12dea:	19e4      	adds	r4, r4, r7
   12dec:	07e7      	lsls	r7, r4, #31
   12dee:	0852      	lsrs	r2, r2, #1
   12df0:	4317      	orrs	r7, r2
   12df2:	0864      	lsrs	r4, r4, #1
   12df4:	0006      	movs	r6, r0
   12df6:	e721      	b.n	12c3c <__aeabi_dadd+0x108>
   12df8:	482e      	ldr	r0, [pc, #184]	; (12eb4 <__aeabi_dadd+0x380>)
   12dfa:	4285      	cmp	r5, r0
   12dfc:	d100      	bne.n	12e00 <__aeabi_dadd+0x2cc>
   12dfe:	e093      	b.n	12f28 <__aeabi_dadd+0x3f4>
   12e00:	001d      	movs	r5, r3
   12e02:	e6d0      	b.n	12ba6 <__aeabi_dadd+0x72>
   12e04:	0029      	movs	r1, r5
   12e06:	3e1f      	subs	r6, #31
   12e08:	40f1      	lsrs	r1, r6
   12e0a:	2b20      	cmp	r3, #32
   12e0c:	d100      	bne.n	12e10 <__aeabi_dadd+0x2dc>
   12e0e:	e08d      	b.n	12f2c <__aeabi_dadd+0x3f8>
   12e10:	2240      	movs	r2, #64	; 0x40
   12e12:	1ad3      	subs	r3, r2, r3
   12e14:	409d      	lsls	r5, r3
   12e16:	432f      	orrs	r7, r5
   12e18:	1e7d      	subs	r5, r7, #1
   12e1a:	41af      	sbcs	r7, r5
   12e1c:	2400      	movs	r4, #0
   12e1e:	430f      	orrs	r7, r1
   12e20:	2600      	movs	r6, #0
   12e22:	e744      	b.n	12cae <__aeabi_dadd+0x17a>
   12e24:	002b      	movs	r3, r5
   12e26:	0008      	movs	r0, r1
   12e28:	3b20      	subs	r3, #32
   12e2a:	40d8      	lsrs	r0, r3
   12e2c:	0003      	movs	r3, r0
   12e2e:	2d20      	cmp	r5, #32
   12e30:	d100      	bne.n	12e34 <__aeabi_dadd+0x300>
   12e32:	e07d      	b.n	12f30 <__aeabi_dadd+0x3fc>
   12e34:	2040      	movs	r0, #64	; 0x40
   12e36:	1b45      	subs	r5, r0, r5
   12e38:	40a9      	lsls	r1, r5
   12e3a:	430a      	orrs	r2, r1
   12e3c:	1e51      	subs	r1, r2, #1
   12e3e:	418a      	sbcs	r2, r1
   12e40:	2100      	movs	r1, #0
   12e42:	431a      	orrs	r2, r3
   12e44:	e6c7      	b.n	12bd6 <__aeabi_dadd+0xa2>
   12e46:	2e00      	cmp	r6, #0
   12e48:	d050      	beq.n	12eec <__aeabi_dadd+0x3b8>
   12e4a:	4e1a      	ldr	r6, [pc, #104]	; (12eb4 <__aeabi_dadd+0x380>)
   12e4c:	42b0      	cmp	r0, r6
   12e4e:	d057      	beq.n	12f00 <__aeabi_dadd+0x3cc>
   12e50:	2680      	movs	r6, #128	; 0x80
   12e52:	426b      	negs	r3, r5
   12e54:	4699      	mov	r9, r3
   12e56:	0436      	lsls	r6, r6, #16
   12e58:	4334      	orrs	r4, r6
   12e5a:	464b      	mov	r3, r9
   12e5c:	2b38      	cmp	r3, #56	; 0x38
   12e5e:	dd00      	ble.n	12e62 <__aeabi_dadd+0x32e>
   12e60:	e0d6      	b.n	13010 <__aeabi_dadd+0x4dc>
   12e62:	2b1f      	cmp	r3, #31
   12e64:	dd00      	ble.n	12e68 <__aeabi_dadd+0x334>
   12e66:	e135      	b.n	130d4 <__aeabi_dadd+0x5a0>
   12e68:	2620      	movs	r6, #32
   12e6a:	1af5      	subs	r5, r6, r3
   12e6c:	0026      	movs	r6, r4
   12e6e:	40ae      	lsls	r6, r5
   12e70:	46b2      	mov	sl, r6
   12e72:	003e      	movs	r6, r7
   12e74:	40de      	lsrs	r6, r3
   12e76:	46ac      	mov	ip, r5
   12e78:	0035      	movs	r5, r6
   12e7a:	4656      	mov	r6, sl
   12e7c:	432e      	orrs	r6, r5
   12e7e:	4665      	mov	r5, ip
   12e80:	40af      	lsls	r7, r5
   12e82:	1e7d      	subs	r5, r7, #1
   12e84:	41af      	sbcs	r7, r5
   12e86:	40dc      	lsrs	r4, r3
   12e88:	4337      	orrs	r7, r6
   12e8a:	1bd7      	subs	r7, r2, r7
   12e8c:	42ba      	cmp	r2, r7
   12e8e:	4192      	sbcs	r2, r2
   12e90:	1b0c      	subs	r4, r1, r4
   12e92:	4252      	negs	r2, r2
   12e94:	1aa4      	subs	r4, r4, r2
   12e96:	0006      	movs	r6, r0
   12e98:	46d8      	mov	r8, fp
   12e9a:	e6a3      	b.n	12be4 <__aeabi_dadd+0xb0>
   12e9c:	4664      	mov	r4, ip
   12e9e:	4667      	mov	r7, ip
   12ea0:	432c      	orrs	r4, r5
   12ea2:	d000      	beq.n	12ea6 <__aeabi_dadd+0x372>
   12ea4:	e6a2      	b.n	12bec <__aeabi_dadd+0xb8>
   12ea6:	2500      	movs	r5, #0
   12ea8:	2600      	movs	r6, #0
   12eaa:	2700      	movs	r7, #0
   12eac:	e706      	b.n	12cbc <__aeabi_dadd+0x188>
   12eae:	001e      	movs	r6, r3
   12eb0:	e6c4      	b.n	12c3c <__aeabi_dadd+0x108>
   12eb2:	46c0      	nop			; (mov r8, r8)
   12eb4:	000007ff 	.word	0x000007ff
   12eb8:	ff7fffff 	.word	0xff7fffff
   12ebc:	800fffff 	.word	0x800fffff
   12ec0:	2b1f      	cmp	r3, #31
   12ec2:	dc63      	bgt.n	12f8c <__aeabi_dadd+0x458>
   12ec4:	2020      	movs	r0, #32
   12ec6:	1ac3      	subs	r3, r0, r3
   12ec8:	0008      	movs	r0, r1
   12eca:	4098      	lsls	r0, r3
   12ecc:	469c      	mov	ip, r3
   12ece:	4683      	mov	fp, r0
   12ed0:	4653      	mov	r3, sl
   12ed2:	0010      	movs	r0, r2
   12ed4:	40d8      	lsrs	r0, r3
   12ed6:	0003      	movs	r3, r0
   12ed8:	4658      	mov	r0, fp
   12eda:	4318      	orrs	r0, r3
   12edc:	4663      	mov	r3, ip
   12ede:	409a      	lsls	r2, r3
   12ee0:	1e53      	subs	r3, r2, #1
   12ee2:	419a      	sbcs	r2, r3
   12ee4:	4653      	mov	r3, sl
   12ee6:	4302      	orrs	r2, r0
   12ee8:	40d9      	lsrs	r1, r3
   12eea:	e703      	b.n	12cf4 <__aeabi_dadd+0x1c0>
   12eec:	0026      	movs	r6, r4
   12eee:	433e      	orrs	r6, r7
   12ef0:	d006      	beq.n	12f00 <__aeabi_dadd+0x3cc>
   12ef2:	43eb      	mvns	r3, r5
   12ef4:	4699      	mov	r9, r3
   12ef6:	2b00      	cmp	r3, #0
   12ef8:	d0c7      	beq.n	12e8a <__aeabi_dadd+0x356>
   12efa:	4e94      	ldr	r6, [pc, #592]	; (1314c <__aeabi_dadd+0x618>)
   12efc:	42b0      	cmp	r0, r6
   12efe:	d1ac      	bne.n	12e5a <__aeabi_dadd+0x326>
   12f00:	000c      	movs	r4, r1
   12f02:	0017      	movs	r7, r2
   12f04:	0006      	movs	r6, r0
   12f06:	46d8      	mov	r8, fp
   12f08:	e698      	b.n	12c3c <__aeabi_dadd+0x108>
   12f0a:	4b90      	ldr	r3, [pc, #576]	; (1314c <__aeabi_dadd+0x618>)
   12f0c:	459a      	cmp	sl, r3
   12f0e:	d00b      	beq.n	12f28 <__aeabi_dadd+0x3f4>
   12f10:	4682      	mov	sl, r0
   12f12:	e6e7      	b.n	12ce4 <__aeabi_dadd+0x1b0>
   12f14:	2800      	cmp	r0, #0
   12f16:	d000      	beq.n	12f1a <__aeabi_dadd+0x3e6>
   12f18:	e09e      	b.n	13058 <__aeabi_dadd+0x524>
   12f1a:	0018      	movs	r0, r3
   12f1c:	4310      	orrs	r0, r2
   12f1e:	d100      	bne.n	12f22 <__aeabi_dadd+0x3ee>
   12f20:	e0e9      	b.n	130f6 <__aeabi_dadd+0x5c2>
   12f22:	001c      	movs	r4, r3
   12f24:	0017      	movs	r7, r2
   12f26:	46d8      	mov	r8, fp
   12f28:	4e88      	ldr	r6, [pc, #544]	; (1314c <__aeabi_dadd+0x618>)
   12f2a:	e687      	b.n	12c3c <__aeabi_dadd+0x108>
   12f2c:	2500      	movs	r5, #0
   12f2e:	e772      	b.n	12e16 <__aeabi_dadd+0x2e2>
   12f30:	2100      	movs	r1, #0
   12f32:	e782      	b.n	12e3a <__aeabi_dadd+0x306>
   12f34:	0023      	movs	r3, r4
   12f36:	433b      	orrs	r3, r7
   12f38:	2e00      	cmp	r6, #0
   12f3a:	d000      	beq.n	12f3e <__aeabi_dadd+0x40a>
   12f3c:	e0ab      	b.n	13096 <__aeabi_dadd+0x562>
   12f3e:	2b00      	cmp	r3, #0
   12f40:	d100      	bne.n	12f44 <__aeabi_dadd+0x410>
   12f42:	e0e7      	b.n	13114 <__aeabi_dadd+0x5e0>
   12f44:	000b      	movs	r3, r1
   12f46:	4313      	orrs	r3, r2
   12f48:	d100      	bne.n	12f4c <__aeabi_dadd+0x418>
   12f4a:	e677      	b.n	12c3c <__aeabi_dadd+0x108>
   12f4c:	18ba      	adds	r2, r7, r2
   12f4e:	42ba      	cmp	r2, r7
   12f50:	41bf      	sbcs	r7, r7
   12f52:	1864      	adds	r4, r4, r1
   12f54:	427f      	negs	r7, r7
   12f56:	19e4      	adds	r4, r4, r7
   12f58:	0223      	lsls	r3, r4, #8
   12f5a:	d400      	bmi.n	12f5e <__aeabi_dadd+0x42a>
   12f5c:	e0f2      	b.n	13144 <__aeabi_dadd+0x610>
   12f5e:	4b7c      	ldr	r3, [pc, #496]	; (13150 <__aeabi_dadd+0x61c>)
   12f60:	0017      	movs	r7, r2
   12f62:	401c      	ands	r4, r3
   12f64:	0006      	movs	r6, r0
   12f66:	e669      	b.n	12c3c <__aeabi_dadd+0x108>
   12f68:	0020      	movs	r0, r4
   12f6a:	4338      	orrs	r0, r7
   12f6c:	2e00      	cmp	r6, #0
   12f6e:	d1d1      	bne.n	12f14 <__aeabi_dadd+0x3e0>
   12f70:	2800      	cmp	r0, #0
   12f72:	d15b      	bne.n	1302c <__aeabi_dadd+0x4f8>
   12f74:	001c      	movs	r4, r3
   12f76:	4314      	orrs	r4, r2
   12f78:	d100      	bne.n	12f7c <__aeabi_dadd+0x448>
   12f7a:	e0a8      	b.n	130ce <__aeabi_dadd+0x59a>
   12f7c:	001c      	movs	r4, r3
   12f7e:	0017      	movs	r7, r2
   12f80:	46d8      	mov	r8, fp
   12f82:	e65b      	b.n	12c3c <__aeabi_dadd+0x108>
   12f84:	0006      	movs	r6, r0
   12f86:	2400      	movs	r4, #0
   12f88:	2700      	movs	r7, #0
   12f8a:	e697      	b.n	12cbc <__aeabi_dadd+0x188>
   12f8c:	4650      	mov	r0, sl
   12f8e:	000b      	movs	r3, r1
   12f90:	3820      	subs	r0, #32
   12f92:	40c3      	lsrs	r3, r0
   12f94:	4699      	mov	r9, r3
   12f96:	4653      	mov	r3, sl
   12f98:	2b20      	cmp	r3, #32
   12f9a:	d100      	bne.n	12f9e <__aeabi_dadd+0x46a>
   12f9c:	e095      	b.n	130ca <__aeabi_dadd+0x596>
   12f9e:	2340      	movs	r3, #64	; 0x40
   12fa0:	4650      	mov	r0, sl
   12fa2:	1a1b      	subs	r3, r3, r0
   12fa4:	4099      	lsls	r1, r3
   12fa6:	430a      	orrs	r2, r1
   12fa8:	1e51      	subs	r1, r2, #1
   12faa:	418a      	sbcs	r2, r1
   12fac:	464b      	mov	r3, r9
   12fae:	2100      	movs	r1, #0
   12fb0:	431a      	orrs	r2, r3
   12fb2:	e69f      	b.n	12cf4 <__aeabi_dadd+0x1c0>
   12fb4:	2e00      	cmp	r6, #0
   12fb6:	d130      	bne.n	1301a <__aeabi_dadd+0x4e6>
   12fb8:	0026      	movs	r6, r4
   12fba:	433e      	orrs	r6, r7
   12fbc:	d067      	beq.n	1308e <__aeabi_dadd+0x55a>
   12fbe:	43db      	mvns	r3, r3
   12fc0:	469a      	mov	sl, r3
   12fc2:	2b00      	cmp	r3, #0
   12fc4:	d01c      	beq.n	13000 <__aeabi_dadd+0x4cc>
   12fc6:	4e61      	ldr	r6, [pc, #388]	; (1314c <__aeabi_dadd+0x618>)
   12fc8:	42b0      	cmp	r0, r6
   12fca:	d060      	beq.n	1308e <__aeabi_dadd+0x55a>
   12fcc:	4653      	mov	r3, sl
   12fce:	2b38      	cmp	r3, #56	; 0x38
   12fd0:	dd00      	ble.n	12fd4 <__aeabi_dadd+0x4a0>
   12fd2:	e096      	b.n	13102 <__aeabi_dadd+0x5ce>
   12fd4:	2b1f      	cmp	r3, #31
   12fd6:	dd00      	ble.n	12fda <__aeabi_dadd+0x4a6>
   12fd8:	e09f      	b.n	1311a <__aeabi_dadd+0x5e6>
   12fda:	2620      	movs	r6, #32
   12fdc:	1af3      	subs	r3, r6, r3
   12fde:	0026      	movs	r6, r4
   12fe0:	409e      	lsls	r6, r3
   12fe2:	469c      	mov	ip, r3
   12fe4:	46b3      	mov	fp, r6
   12fe6:	4653      	mov	r3, sl
   12fe8:	003e      	movs	r6, r7
   12fea:	40de      	lsrs	r6, r3
   12fec:	0033      	movs	r3, r6
   12fee:	465e      	mov	r6, fp
   12ff0:	431e      	orrs	r6, r3
   12ff2:	4663      	mov	r3, ip
   12ff4:	409f      	lsls	r7, r3
   12ff6:	1e7b      	subs	r3, r7, #1
   12ff8:	419f      	sbcs	r7, r3
   12ffa:	4653      	mov	r3, sl
   12ffc:	40dc      	lsrs	r4, r3
   12ffe:	4337      	orrs	r7, r6
   13000:	18bf      	adds	r7, r7, r2
   13002:	4297      	cmp	r7, r2
   13004:	4192      	sbcs	r2, r2
   13006:	1864      	adds	r4, r4, r1
   13008:	4252      	negs	r2, r2
   1300a:	18a4      	adds	r4, r4, r2
   1300c:	0006      	movs	r6, r0
   1300e:	e678      	b.n	12d02 <__aeabi_dadd+0x1ce>
   13010:	4327      	orrs	r7, r4
   13012:	1e7c      	subs	r4, r7, #1
   13014:	41a7      	sbcs	r7, r4
   13016:	2400      	movs	r4, #0
   13018:	e737      	b.n	12e8a <__aeabi_dadd+0x356>
   1301a:	4e4c      	ldr	r6, [pc, #304]	; (1314c <__aeabi_dadd+0x618>)
   1301c:	42b0      	cmp	r0, r6
   1301e:	d036      	beq.n	1308e <__aeabi_dadd+0x55a>
   13020:	2680      	movs	r6, #128	; 0x80
   13022:	425b      	negs	r3, r3
   13024:	0436      	lsls	r6, r6, #16
   13026:	469a      	mov	sl, r3
   13028:	4334      	orrs	r4, r6
   1302a:	e7cf      	b.n	12fcc <__aeabi_dadd+0x498>
   1302c:	0018      	movs	r0, r3
   1302e:	4310      	orrs	r0, r2
   13030:	d100      	bne.n	13034 <__aeabi_dadd+0x500>
   13032:	e603      	b.n	12c3c <__aeabi_dadd+0x108>
   13034:	1ab8      	subs	r0, r7, r2
   13036:	4684      	mov	ip, r0
   13038:	4567      	cmp	r7, ip
   1303a:	41ad      	sbcs	r5, r5
   1303c:	1ae0      	subs	r0, r4, r3
   1303e:	426d      	negs	r5, r5
   13040:	1b40      	subs	r0, r0, r5
   13042:	0205      	lsls	r5, r0, #8
   13044:	d400      	bmi.n	13048 <__aeabi_dadd+0x514>
   13046:	e62c      	b.n	12ca2 <__aeabi_dadd+0x16e>
   13048:	1bd7      	subs	r7, r2, r7
   1304a:	42ba      	cmp	r2, r7
   1304c:	4192      	sbcs	r2, r2
   1304e:	1b1c      	subs	r4, r3, r4
   13050:	4252      	negs	r2, r2
   13052:	1aa4      	subs	r4, r4, r2
   13054:	46d8      	mov	r8, fp
   13056:	e5f1      	b.n	12c3c <__aeabi_dadd+0x108>
   13058:	0018      	movs	r0, r3
   1305a:	4310      	orrs	r0, r2
   1305c:	d100      	bne.n	13060 <__aeabi_dadd+0x52c>
   1305e:	e763      	b.n	12f28 <__aeabi_dadd+0x3f4>
   13060:	08f8      	lsrs	r0, r7, #3
   13062:	0767      	lsls	r7, r4, #29
   13064:	4307      	orrs	r7, r0
   13066:	2080      	movs	r0, #128	; 0x80
   13068:	08e4      	lsrs	r4, r4, #3
   1306a:	0300      	lsls	r0, r0, #12
   1306c:	4204      	tst	r4, r0
   1306e:	d008      	beq.n	13082 <__aeabi_dadd+0x54e>
   13070:	08dd      	lsrs	r5, r3, #3
   13072:	4205      	tst	r5, r0
   13074:	d105      	bne.n	13082 <__aeabi_dadd+0x54e>
   13076:	08d2      	lsrs	r2, r2, #3
   13078:	0759      	lsls	r1, r3, #29
   1307a:	4311      	orrs	r1, r2
   1307c:	000f      	movs	r7, r1
   1307e:	002c      	movs	r4, r5
   13080:	46d8      	mov	r8, fp
   13082:	0f7b      	lsrs	r3, r7, #29
   13084:	00e4      	lsls	r4, r4, #3
   13086:	431c      	orrs	r4, r3
   13088:	00ff      	lsls	r7, r7, #3
   1308a:	4e30      	ldr	r6, [pc, #192]	; (1314c <__aeabi_dadd+0x618>)
   1308c:	e5d6      	b.n	12c3c <__aeabi_dadd+0x108>
   1308e:	000c      	movs	r4, r1
   13090:	0017      	movs	r7, r2
   13092:	0006      	movs	r6, r0
   13094:	e5d2      	b.n	12c3c <__aeabi_dadd+0x108>
   13096:	2b00      	cmp	r3, #0
   13098:	d038      	beq.n	1310c <__aeabi_dadd+0x5d8>
   1309a:	000b      	movs	r3, r1
   1309c:	4313      	orrs	r3, r2
   1309e:	d100      	bne.n	130a2 <__aeabi_dadd+0x56e>
   130a0:	e742      	b.n	12f28 <__aeabi_dadd+0x3f4>
   130a2:	08f8      	lsrs	r0, r7, #3
   130a4:	0767      	lsls	r7, r4, #29
   130a6:	4307      	orrs	r7, r0
   130a8:	2080      	movs	r0, #128	; 0x80
   130aa:	08e4      	lsrs	r4, r4, #3
   130ac:	0300      	lsls	r0, r0, #12
   130ae:	4204      	tst	r4, r0
   130b0:	d0e7      	beq.n	13082 <__aeabi_dadd+0x54e>
   130b2:	08cb      	lsrs	r3, r1, #3
   130b4:	4203      	tst	r3, r0
   130b6:	d1e4      	bne.n	13082 <__aeabi_dadd+0x54e>
   130b8:	08d2      	lsrs	r2, r2, #3
   130ba:	0749      	lsls	r1, r1, #29
   130bc:	4311      	orrs	r1, r2
   130be:	000f      	movs	r7, r1
   130c0:	001c      	movs	r4, r3
   130c2:	e7de      	b.n	13082 <__aeabi_dadd+0x54e>
   130c4:	2700      	movs	r7, #0
   130c6:	2400      	movs	r4, #0
   130c8:	e5d5      	b.n	12c76 <__aeabi_dadd+0x142>
   130ca:	2100      	movs	r1, #0
   130cc:	e76b      	b.n	12fa6 <__aeabi_dadd+0x472>
   130ce:	2500      	movs	r5, #0
   130d0:	2700      	movs	r7, #0
   130d2:	e5f3      	b.n	12cbc <__aeabi_dadd+0x188>
   130d4:	464e      	mov	r6, r9
   130d6:	0025      	movs	r5, r4
   130d8:	3e20      	subs	r6, #32
   130da:	40f5      	lsrs	r5, r6
   130dc:	464b      	mov	r3, r9
   130de:	002e      	movs	r6, r5
   130e0:	2b20      	cmp	r3, #32
   130e2:	d02d      	beq.n	13140 <__aeabi_dadd+0x60c>
   130e4:	2540      	movs	r5, #64	; 0x40
   130e6:	1aed      	subs	r5, r5, r3
   130e8:	40ac      	lsls	r4, r5
   130ea:	4327      	orrs	r7, r4
   130ec:	1e7c      	subs	r4, r7, #1
   130ee:	41a7      	sbcs	r7, r4
   130f0:	2400      	movs	r4, #0
   130f2:	4337      	orrs	r7, r6
   130f4:	e6c9      	b.n	12e8a <__aeabi_dadd+0x356>
   130f6:	2480      	movs	r4, #128	; 0x80
   130f8:	2500      	movs	r5, #0
   130fa:	0324      	lsls	r4, r4, #12
   130fc:	4e13      	ldr	r6, [pc, #76]	; (1314c <__aeabi_dadd+0x618>)
   130fe:	2700      	movs	r7, #0
   13100:	e5dc      	b.n	12cbc <__aeabi_dadd+0x188>
   13102:	4327      	orrs	r7, r4
   13104:	1e7c      	subs	r4, r7, #1
   13106:	41a7      	sbcs	r7, r4
   13108:	2400      	movs	r4, #0
   1310a:	e779      	b.n	13000 <__aeabi_dadd+0x4cc>
   1310c:	000c      	movs	r4, r1
   1310e:	0017      	movs	r7, r2
   13110:	4e0e      	ldr	r6, [pc, #56]	; (1314c <__aeabi_dadd+0x618>)
   13112:	e593      	b.n	12c3c <__aeabi_dadd+0x108>
   13114:	000c      	movs	r4, r1
   13116:	0017      	movs	r7, r2
   13118:	e590      	b.n	12c3c <__aeabi_dadd+0x108>
   1311a:	4656      	mov	r6, sl
   1311c:	0023      	movs	r3, r4
   1311e:	3e20      	subs	r6, #32
   13120:	40f3      	lsrs	r3, r6
   13122:	4699      	mov	r9, r3
   13124:	4653      	mov	r3, sl
   13126:	2b20      	cmp	r3, #32
   13128:	d00e      	beq.n	13148 <__aeabi_dadd+0x614>
   1312a:	2340      	movs	r3, #64	; 0x40
   1312c:	4656      	mov	r6, sl
   1312e:	1b9b      	subs	r3, r3, r6
   13130:	409c      	lsls	r4, r3
   13132:	4327      	orrs	r7, r4
   13134:	1e7c      	subs	r4, r7, #1
   13136:	41a7      	sbcs	r7, r4
   13138:	464b      	mov	r3, r9
   1313a:	2400      	movs	r4, #0
   1313c:	431f      	orrs	r7, r3
   1313e:	e75f      	b.n	13000 <__aeabi_dadd+0x4cc>
   13140:	2400      	movs	r4, #0
   13142:	e7d2      	b.n	130ea <__aeabi_dadd+0x5b6>
   13144:	0017      	movs	r7, r2
   13146:	e5b2      	b.n	12cae <__aeabi_dadd+0x17a>
   13148:	2400      	movs	r4, #0
   1314a:	e7f2      	b.n	13132 <__aeabi_dadd+0x5fe>
   1314c:	000007ff 	.word	0x000007ff
   13150:	ff7fffff 	.word	0xff7fffff

00013154 <__aeabi_ddiv>:
   13154:	b5f0      	push	{r4, r5, r6, r7, lr}
   13156:	4657      	mov	r7, sl
   13158:	4645      	mov	r5, r8
   1315a:	46de      	mov	lr, fp
   1315c:	464e      	mov	r6, r9
   1315e:	b5e0      	push	{r5, r6, r7, lr}
   13160:	004c      	lsls	r4, r1, #1
   13162:	030e      	lsls	r6, r1, #12
   13164:	b087      	sub	sp, #28
   13166:	4683      	mov	fp, r0
   13168:	4692      	mov	sl, r2
   1316a:	001d      	movs	r5, r3
   1316c:	4680      	mov	r8, r0
   1316e:	0b36      	lsrs	r6, r6, #12
   13170:	0d64      	lsrs	r4, r4, #21
   13172:	0fcf      	lsrs	r7, r1, #31
   13174:	2c00      	cmp	r4, #0
   13176:	d04f      	beq.n	13218 <__aeabi_ddiv+0xc4>
   13178:	4b6f      	ldr	r3, [pc, #444]	; (13338 <__aeabi_ddiv+0x1e4>)
   1317a:	429c      	cmp	r4, r3
   1317c:	d035      	beq.n	131ea <__aeabi_ddiv+0x96>
   1317e:	2380      	movs	r3, #128	; 0x80
   13180:	0f42      	lsrs	r2, r0, #29
   13182:	041b      	lsls	r3, r3, #16
   13184:	00f6      	lsls	r6, r6, #3
   13186:	4313      	orrs	r3, r2
   13188:	4333      	orrs	r3, r6
   1318a:	4699      	mov	r9, r3
   1318c:	00c3      	lsls	r3, r0, #3
   1318e:	4698      	mov	r8, r3
   13190:	4b6a      	ldr	r3, [pc, #424]	; (1333c <__aeabi_ddiv+0x1e8>)
   13192:	2600      	movs	r6, #0
   13194:	469c      	mov	ip, r3
   13196:	2300      	movs	r3, #0
   13198:	4464      	add	r4, ip
   1319a:	9303      	str	r3, [sp, #12]
   1319c:	032b      	lsls	r3, r5, #12
   1319e:	0b1b      	lsrs	r3, r3, #12
   131a0:	469b      	mov	fp, r3
   131a2:	006b      	lsls	r3, r5, #1
   131a4:	0fed      	lsrs	r5, r5, #31
   131a6:	4650      	mov	r0, sl
   131a8:	0d5b      	lsrs	r3, r3, #21
   131aa:	9501      	str	r5, [sp, #4]
   131ac:	d05e      	beq.n	1326c <__aeabi_ddiv+0x118>
   131ae:	4a62      	ldr	r2, [pc, #392]	; (13338 <__aeabi_ddiv+0x1e4>)
   131b0:	4293      	cmp	r3, r2
   131b2:	d053      	beq.n	1325c <__aeabi_ddiv+0x108>
   131b4:	465a      	mov	r2, fp
   131b6:	00d1      	lsls	r1, r2, #3
   131b8:	2280      	movs	r2, #128	; 0x80
   131ba:	0f40      	lsrs	r0, r0, #29
   131bc:	0412      	lsls	r2, r2, #16
   131be:	4302      	orrs	r2, r0
   131c0:	430a      	orrs	r2, r1
   131c2:	4693      	mov	fp, r2
   131c4:	4652      	mov	r2, sl
   131c6:	00d1      	lsls	r1, r2, #3
   131c8:	4a5c      	ldr	r2, [pc, #368]	; (1333c <__aeabi_ddiv+0x1e8>)
   131ca:	4694      	mov	ip, r2
   131cc:	2200      	movs	r2, #0
   131ce:	4463      	add	r3, ip
   131d0:	0038      	movs	r0, r7
   131d2:	4068      	eors	r0, r5
   131d4:	4684      	mov	ip, r0
   131d6:	9002      	str	r0, [sp, #8]
   131d8:	1ae4      	subs	r4, r4, r3
   131da:	4316      	orrs	r6, r2
   131dc:	2e0f      	cmp	r6, #15
   131de:	d900      	bls.n	131e2 <__aeabi_ddiv+0x8e>
   131e0:	e0b4      	b.n	1334c <__aeabi_ddiv+0x1f8>
   131e2:	4b57      	ldr	r3, [pc, #348]	; (13340 <__aeabi_ddiv+0x1ec>)
   131e4:	00b6      	lsls	r6, r6, #2
   131e6:	599b      	ldr	r3, [r3, r6]
   131e8:	469f      	mov	pc, r3
   131ea:	0003      	movs	r3, r0
   131ec:	4333      	orrs	r3, r6
   131ee:	4699      	mov	r9, r3
   131f0:	d16c      	bne.n	132cc <__aeabi_ddiv+0x178>
   131f2:	2300      	movs	r3, #0
   131f4:	4698      	mov	r8, r3
   131f6:	3302      	adds	r3, #2
   131f8:	2608      	movs	r6, #8
   131fa:	9303      	str	r3, [sp, #12]
   131fc:	e7ce      	b.n	1319c <__aeabi_ddiv+0x48>
   131fe:	46cb      	mov	fp, r9
   13200:	4641      	mov	r1, r8
   13202:	9a03      	ldr	r2, [sp, #12]
   13204:	9701      	str	r7, [sp, #4]
   13206:	2a02      	cmp	r2, #2
   13208:	d165      	bne.n	132d6 <__aeabi_ddiv+0x182>
   1320a:	9b01      	ldr	r3, [sp, #4]
   1320c:	4c4a      	ldr	r4, [pc, #296]	; (13338 <__aeabi_ddiv+0x1e4>)
   1320e:	469c      	mov	ip, r3
   13210:	2300      	movs	r3, #0
   13212:	2200      	movs	r2, #0
   13214:	4698      	mov	r8, r3
   13216:	e06b      	b.n	132f0 <__aeabi_ddiv+0x19c>
   13218:	0003      	movs	r3, r0
   1321a:	4333      	orrs	r3, r6
   1321c:	4699      	mov	r9, r3
   1321e:	d04e      	beq.n	132be <__aeabi_ddiv+0x16a>
   13220:	2e00      	cmp	r6, #0
   13222:	d100      	bne.n	13226 <__aeabi_ddiv+0xd2>
   13224:	e1bc      	b.n	135a0 <__aeabi_ddiv+0x44c>
   13226:	0030      	movs	r0, r6
   13228:	f001 f9e8 	bl	145fc <__clzsi2>
   1322c:	0003      	movs	r3, r0
   1322e:	3b0b      	subs	r3, #11
   13230:	2b1c      	cmp	r3, #28
   13232:	dd00      	ble.n	13236 <__aeabi_ddiv+0xe2>
   13234:	e1ac      	b.n	13590 <__aeabi_ddiv+0x43c>
   13236:	221d      	movs	r2, #29
   13238:	1ad3      	subs	r3, r2, r3
   1323a:	465a      	mov	r2, fp
   1323c:	0001      	movs	r1, r0
   1323e:	40da      	lsrs	r2, r3
   13240:	3908      	subs	r1, #8
   13242:	408e      	lsls	r6, r1
   13244:	0013      	movs	r3, r2
   13246:	4333      	orrs	r3, r6
   13248:	4699      	mov	r9, r3
   1324a:	465b      	mov	r3, fp
   1324c:	408b      	lsls	r3, r1
   1324e:	4698      	mov	r8, r3
   13250:	2300      	movs	r3, #0
   13252:	4c3c      	ldr	r4, [pc, #240]	; (13344 <__aeabi_ddiv+0x1f0>)
   13254:	2600      	movs	r6, #0
   13256:	1a24      	subs	r4, r4, r0
   13258:	9303      	str	r3, [sp, #12]
   1325a:	e79f      	b.n	1319c <__aeabi_ddiv+0x48>
   1325c:	4651      	mov	r1, sl
   1325e:	465a      	mov	r2, fp
   13260:	4311      	orrs	r1, r2
   13262:	d129      	bne.n	132b8 <__aeabi_ddiv+0x164>
   13264:	2200      	movs	r2, #0
   13266:	4693      	mov	fp, r2
   13268:	3202      	adds	r2, #2
   1326a:	e7b1      	b.n	131d0 <__aeabi_ddiv+0x7c>
   1326c:	4659      	mov	r1, fp
   1326e:	4301      	orrs	r1, r0
   13270:	d01e      	beq.n	132b0 <__aeabi_ddiv+0x15c>
   13272:	465b      	mov	r3, fp
   13274:	2b00      	cmp	r3, #0
   13276:	d100      	bne.n	1327a <__aeabi_ddiv+0x126>
   13278:	e19e      	b.n	135b8 <__aeabi_ddiv+0x464>
   1327a:	4658      	mov	r0, fp
   1327c:	f001 f9be 	bl	145fc <__clzsi2>
   13280:	0003      	movs	r3, r0
   13282:	3b0b      	subs	r3, #11
   13284:	2b1c      	cmp	r3, #28
   13286:	dd00      	ble.n	1328a <__aeabi_ddiv+0x136>
   13288:	e18f      	b.n	135aa <__aeabi_ddiv+0x456>
   1328a:	0002      	movs	r2, r0
   1328c:	4659      	mov	r1, fp
   1328e:	3a08      	subs	r2, #8
   13290:	4091      	lsls	r1, r2
   13292:	468b      	mov	fp, r1
   13294:	211d      	movs	r1, #29
   13296:	1acb      	subs	r3, r1, r3
   13298:	4651      	mov	r1, sl
   1329a:	40d9      	lsrs	r1, r3
   1329c:	000b      	movs	r3, r1
   1329e:	4659      	mov	r1, fp
   132a0:	430b      	orrs	r3, r1
   132a2:	4651      	mov	r1, sl
   132a4:	469b      	mov	fp, r3
   132a6:	4091      	lsls	r1, r2
   132a8:	4b26      	ldr	r3, [pc, #152]	; (13344 <__aeabi_ddiv+0x1f0>)
   132aa:	2200      	movs	r2, #0
   132ac:	1a1b      	subs	r3, r3, r0
   132ae:	e78f      	b.n	131d0 <__aeabi_ddiv+0x7c>
   132b0:	2300      	movs	r3, #0
   132b2:	2201      	movs	r2, #1
   132b4:	469b      	mov	fp, r3
   132b6:	e78b      	b.n	131d0 <__aeabi_ddiv+0x7c>
   132b8:	4651      	mov	r1, sl
   132ba:	2203      	movs	r2, #3
   132bc:	e788      	b.n	131d0 <__aeabi_ddiv+0x7c>
   132be:	2300      	movs	r3, #0
   132c0:	4698      	mov	r8, r3
   132c2:	3301      	adds	r3, #1
   132c4:	2604      	movs	r6, #4
   132c6:	2400      	movs	r4, #0
   132c8:	9303      	str	r3, [sp, #12]
   132ca:	e767      	b.n	1319c <__aeabi_ddiv+0x48>
   132cc:	2303      	movs	r3, #3
   132ce:	46b1      	mov	r9, r6
   132d0:	9303      	str	r3, [sp, #12]
   132d2:	260c      	movs	r6, #12
   132d4:	e762      	b.n	1319c <__aeabi_ddiv+0x48>
   132d6:	2a03      	cmp	r2, #3
   132d8:	d100      	bne.n	132dc <__aeabi_ddiv+0x188>
   132da:	e25c      	b.n	13796 <__aeabi_ddiv+0x642>
   132dc:	9b01      	ldr	r3, [sp, #4]
   132de:	2a01      	cmp	r2, #1
   132e0:	d000      	beq.n	132e4 <__aeabi_ddiv+0x190>
   132e2:	e1e4      	b.n	136ae <__aeabi_ddiv+0x55a>
   132e4:	4013      	ands	r3, r2
   132e6:	469c      	mov	ip, r3
   132e8:	2300      	movs	r3, #0
   132ea:	2400      	movs	r4, #0
   132ec:	2200      	movs	r2, #0
   132ee:	4698      	mov	r8, r3
   132f0:	2100      	movs	r1, #0
   132f2:	0312      	lsls	r2, r2, #12
   132f4:	0b13      	lsrs	r3, r2, #12
   132f6:	0d0a      	lsrs	r2, r1, #20
   132f8:	0512      	lsls	r2, r2, #20
   132fa:	431a      	orrs	r2, r3
   132fc:	0523      	lsls	r3, r4, #20
   132fe:	4c12      	ldr	r4, [pc, #72]	; (13348 <__aeabi_ddiv+0x1f4>)
   13300:	4640      	mov	r0, r8
   13302:	4022      	ands	r2, r4
   13304:	4313      	orrs	r3, r2
   13306:	4662      	mov	r2, ip
   13308:	005b      	lsls	r3, r3, #1
   1330a:	07d2      	lsls	r2, r2, #31
   1330c:	085b      	lsrs	r3, r3, #1
   1330e:	4313      	orrs	r3, r2
   13310:	0019      	movs	r1, r3
   13312:	b007      	add	sp, #28
   13314:	bc3c      	pop	{r2, r3, r4, r5}
   13316:	4690      	mov	r8, r2
   13318:	4699      	mov	r9, r3
   1331a:	46a2      	mov	sl, r4
   1331c:	46ab      	mov	fp, r5
   1331e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13320:	2300      	movs	r3, #0
   13322:	2280      	movs	r2, #128	; 0x80
   13324:	469c      	mov	ip, r3
   13326:	0312      	lsls	r2, r2, #12
   13328:	4698      	mov	r8, r3
   1332a:	4c03      	ldr	r4, [pc, #12]	; (13338 <__aeabi_ddiv+0x1e4>)
   1332c:	e7e0      	b.n	132f0 <__aeabi_ddiv+0x19c>
   1332e:	2300      	movs	r3, #0
   13330:	4c01      	ldr	r4, [pc, #4]	; (13338 <__aeabi_ddiv+0x1e4>)
   13332:	2200      	movs	r2, #0
   13334:	4698      	mov	r8, r3
   13336:	e7db      	b.n	132f0 <__aeabi_ddiv+0x19c>
   13338:	000007ff 	.word	0x000007ff
   1333c:	fffffc01 	.word	0xfffffc01
   13340:	0001ae44 	.word	0x0001ae44
   13344:	fffffc0d 	.word	0xfffffc0d
   13348:	800fffff 	.word	0x800fffff
   1334c:	45d9      	cmp	r9, fp
   1334e:	d900      	bls.n	13352 <__aeabi_ddiv+0x1fe>
   13350:	e139      	b.n	135c6 <__aeabi_ddiv+0x472>
   13352:	d100      	bne.n	13356 <__aeabi_ddiv+0x202>
   13354:	e134      	b.n	135c0 <__aeabi_ddiv+0x46c>
   13356:	2300      	movs	r3, #0
   13358:	4646      	mov	r6, r8
   1335a:	464d      	mov	r5, r9
   1335c:	469a      	mov	sl, r3
   1335e:	3c01      	subs	r4, #1
   13360:	465b      	mov	r3, fp
   13362:	0e0a      	lsrs	r2, r1, #24
   13364:	021b      	lsls	r3, r3, #8
   13366:	431a      	orrs	r2, r3
   13368:	020b      	lsls	r3, r1, #8
   1336a:	0c17      	lsrs	r7, r2, #16
   1336c:	9303      	str	r3, [sp, #12]
   1336e:	0413      	lsls	r3, r2, #16
   13370:	0c1b      	lsrs	r3, r3, #16
   13372:	0039      	movs	r1, r7
   13374:	0028      	movs	r0, r5
   13376:	4690      	mov	r8, r2
   13378:	9301      	str	r3, [sp, #4]
   1337a:	f7fe f9f5 	bl	11768 <__udivsi3>
   1337e:	0002      	movs	r2, r0
   13380:	9b01      	ldr	r3, [sp, #4]
   13382:	4683      	mov	fp, r0
   13384:	435a      	muls	r2, r3
   13386:	0028      	movs	r0, r5
   13388:	0039      	movs	r1, r7
   1338a:	4691      	mov	r9, r2
   1338c:	f7fe fa72 	bl	11874 <__aeabi_uidivmod>
   13390:	0c35      	lsrs	r5, r6, #16
   13392:	0409      	lsls	r1, r1, #16
   13394:	430d      	orrs	r5, r1
   13396:	45a9      	cmp	r9, r5
   13398:	d90d      	bls.n	133b6 <__aeabi_ddiv+0x262>
   1339a:	465b      	mov	r3, fp
   1339c:	4445      	add	r5, r8
   1339e:	3b01      	subs	r3, #1
   133a0:	45a8      	cmp	r8, r5
   133a2:	d900      	bls.n	133a6 <__aeabi_ddiv+0x252>
   133a4:	e13a      	b.n	1361c <__aeabi_ddiv+0x4c8>
   133a6:	45a9      	cmp	r9, r5
   133a8:	d800      	bhi.n	133ac <__aeabi_ddiv+0x258>
   133aa:	e137      	b.n	1361c <__aeabi_ddiv+0x4c8>
   133ac:	2302      	movs	r3, #2
   133ae:	425b      	negs	r3, r3
   133b0:	469c      	mov	ip, r3
   133b2:	4445      	add	r5, r8
   133b4:	44e3      	add	fp, ip
   133b6:	464b      	mov	r3, r9
   133b8:	1aeb      	subs	r3, r5, r3
   133ba:	0039      	movs	r1, r7
   133bc:	0018      	movs	r0, r3
   133be:	9304      	str	r3, [sp, #16]
   133c0:	f7fe f9d2 	bl	11768 <__udivsi3>
   133c4:	9b01      	ldr	r3, [sp, #4]
   133c6:	0005      	movs	r5, r0
   133c8:	4343      	muls	r3, r0
   133ca:	0039      	movs	r1, r7
   133cc:	9804      	ldr	r0, [sp, #16]
   133ce:	4699      	mov	r9, r3
   133d0:	f7fe fa50 	bl	11874 <__aeabi_uidivmod>
   133d4:	0433      	lsls	r3, r6, #16
   133d6:	0409      	lsls	r1, r1, #16
   133d8:	0c1b      	lsrs	r3, r3, #16
   133da:	430b      	orrs	r3, r1
   133dc:	4599      	cmp	r9, r3
   133de:	d909      	bls.n	133f4 <__aeabi_ddiv+0x2a0>
   133e0:	4443      	add	r3, r8
   133e2:	1e6a      	subs	r2, r5, #1
   133e4:	4598      	cmp	r8, r3
   133e6:	d900      	bls.n	133ea <__aeabi_ddiv+0x296>
   133e8:	e11a      	b.n	13620 <__aeabi_ddiv+0x4cc>
   133ea:	4599      	cmp	r9, r3
   133ec:	d800      	bhi.n	133f0 <__aeabi_ddiv+0x29c>
   133ee:	e117      	b.n	13620 <__aeabi_ddiv+0x4cc>
   133f0:	3d02      	subs	r5, #2
   133f2:	4443      	add	r3, r8
   133f4:	464a      	mov	r2, r9
   133f6:	1a9b      	subs	r3, r3, r2
   133f8:	465a      	mov	r2, fp
   133fa:	0412      	lsls	r2, r2, #16
   133fc:	432a      	orrs	r2, r5
   133fe:	9903      	ldr	r1, [sp, #12]
   13400:	4693      	mov	fp, r2
   13402:	0c10      	lsrs	r0, r2, #16
   13404:	0c0a      	lsrs	r2, r1, #16
   13406:	4691      	mov	r9, r2
   13408:	0409      	lsls	r1, r1, #16
   1340a:	465a      	mov	r2, fp
   1340c:	0c09      	lsrs	r1, r1, #16
   1340e:	464e      	mov	r6, r9
   13410:	000d      	movs	r5, r1
   13412:	0412      	lsls	r2, r2, #16
   13414:	0c12      	lsrs	r2, r2, #16
   13416:	4345      	muls	r5, r0
   13418:	9105      	str	r1, [sp, #20]
   1341a:	4351      	muls	r1, r2
   1341c:	4372      	muls	r2, r6
   1341e:	4370      	muls	r0, r6
   13420:	1952      	adds	r2, r2, r5
   13422:	0c0e      	lsrs	r6, r1, #16
   13424:	18b2      	adds	r2, r6, r2
   13426:	4295      	cmp	r5, r2
   13428:	d903      	bls.n	13432 <__aeabi_ddiv+0x2de>
   1342a:	2580      	movs	r5, #128	; 0x80
   1342c:	026d      	lsls	r5, r5, #9
   1342e:	46ac      	mov	ip, r5
   13430:	4460      	add	r0, ip
   13432:	0c15      	lsrs	r5, r2, #16
   13434:	0409      	lsls	r1, r1, #16
   13436:	0412      	lsls	r2, r2, #16
   13438:	0c09      	lsrs	r1, r1, #16
   1343a:	1828      	adds	r0, r5, r0
   1343c:	1852      	adds	r2, r2, r1
   1343e:	4283      	cmp	r3, r0
   13440:	d200      	bcs.n	13444 <__aeabi_ddiv+0x2f0>
   13442:	e0ce      	b.n	135e2 <__aeabi_ddiv+0x48e>
   13444:	d100      	bne.n	13448 <__aeabi_ddiv+0x2f4>
   13446:	e0c8      	b.n	135da <__aeabi_ddiv+0x486>
   13448:	1a1d      	subs	r5, r3, r0
   1344a:	4653      	mov	r3, sl
   1344c:	1a9e      	subs	r6, r3, r2
   1344e:	45b2      	cmp	sl, r6
   13450:	4192      	sbcs	r2, r2
   13452:	4252      	negs	r2, r2
   13454:	1aab      	subs	r3, r5, r2
   13456:	469a      	mov	sl, r3
   13458:	4598      	cmp	r8, r3
   1345a:	d100      	bne.n	1345e <__aeabi_ddiv+0x30a>
   1345c:	e117      	b.n	1368e <__aeabi_ddiv+0x53a>
   1345e:	0039      	movs	r1, r7
   13460:	0018      	movs	r0, r3
   13462:	f7fe f981 	bl	11768 <__udivsi3>
   13466:	9b01      	ldr	r3, [sp, #4]
   13468:	0005      	movs	r5, r0
   1346a:	4343      	muls	r3, r0
   1346c:	0039      	movs	r1, r7
   1346e:	4650      	mov	r0, sl
   13470:	9304      	str	r3, [sp, #16]
   13472:	f7fe f9ff 	bl	11874 <__aeabi_uidivmod>
   13476:	9804      	ldr	r0, [sp, #16]
   13478:	040b      	lsls	r3, r1, #16
   1347a:	0c31      	lsrs	r1, r6, #16
   1347c:	4319      	orrs	r1, r3
   1347e:	4288      	cmp	r0, r1
   13480:	d909      	bls.n	13496 <__aeabi_ddiv+0x342>
   13482:	4441      	add	r1, r8
   13484:	1e6b      	subs	r3, r5, #1
   13486:	4588      	cmp	r8, r1
   13488:	d900      	bls.n	1348c <__aeabi_ddiv+0x338>
   1348a:	e107      	b.n	1369c <__aeabi_ddiv+0x548>
   1348c:	4288      	cmp	r0, r1
   1348e:	d800      	bhi.n	13492 <__aeabi_ddiv+0x33e>
   13490:	e104      	b.n	1369c <__aeabi_ddiv+0x548>
   13492:	3d02      	subs	r5, #2
   13494:	4441      	add	r1, r8
   13496:	9b04      	ldr	r3, [sp, #16]
   13498:	1acb      	subs	r3, r1, r3
   1349a:	0018      	movs	r0, r3
   1349c:	0039      	movs	r1, r7
   1349e:	9304      	str	r3, [sp, #16]
   134a0:	f7fe f962 	bl	11768 <__udivsi3>
   134a4:	9b01      	ldr	r3, [sp, #4]
   134a6:	4682      	mov	sl, r0
   134a8:	4343      	muls	r3, r0
   134aa:	0039      	movs	r1, r7
   134ac:	9804      	ldr	r0, [sp, #16]
   134ae:	9301      	str	r3, [sp, #4]
   134b0:	f7fe f9e0 	bl	11874 <__aeabi_uidivmod>
   134b4:	9801      	ldr	r0, [sp, #4]
   134b6:	040b      	lsls	r3, r1, #16
   134b8:	0431      	lsls	r1, r6, #16
   134ba:	0c09      	lsrs	r1, r1, #16
   134bc:	4319      	orrs	r1, r3
   134be:	4288      	cmp	r0, r1
   134c0:	d90d      	bls.n	134de <__aeabi_ddiv+0x38a>
   134c2:	4653      	mov	r3, sl
   134c4:	4441      	add	r1, r8
   134c6:	3b01      	subs	r3, #1
   134c8:	4588      	cmp	r8, r1
   134ca:	d900      	bls.n	134ce <__aeabi_ddiv+0x37a>
   134cc:	e0e8      	b.n	136a0 <__aeabi_ddiv+0x54c>
   134ce:	4288      	cmp	r0, r1
   134d0:	d800      	bhi.n	134d4 <__aeabi_ddiv+0x380>
   134d2:	e0e5      	b.n	136a0 <__aeabi_ddiv+0x54c>
   134d4:	2302      	movs	r3, #2
   134d6:	425b      	negs	r3, r3
   134d8:	469c      	mov	ip, r3
   134da:	4441      	add	r1, r8
   134dc:	44e2      	add	sl, ip
   134de:	9b01      	ldr	r3, [sp, #4]
   134e0:	042d      	lsls	r5, r5, #16
   134e2:	1ace      	subs	r6, r1, r3
   134e4:	4651      	mov	r1, sl
   134e6:	4329      	orrs	r1, r5
   134e8:	9d05      	ldr	r5, [sp, #20]
   134ea:	464f      	mov	r7, r9
   134ec:	002a      	movs	r2, r5
   134ee:	040b      	lsls	r3, r1, #16
   134f0:	0c08      	lsrs	r0, r1, #16
   134f2:	0c1b      	lsrs	r3, r3, #16
   134f4:	435a      	muls	r2, r3
   134f6:	4345      	muls	r5, r0
   134f8:	437b      	muls	r3, r7
   134fa:	4378      	muls	r0, r7
   134fc:	195b      	adds	r3, r3, r5
   134fe:	0c17      	lsrs	r7, r2, #16
   13500:	18fb      	adds	r3, r7, r3
   13502:	429d      	cmp	r5, r3
   13504:	d903      	bls.n	1350e <__aeabi_ddiv+0x3ba>
   13506:	2580      	movs	r5, #128	; 0x80
   13508:	026d      	lsls	r5, r5, #9
   1350a:	46ac      	mov	ip, r5
   1350c:	4460      	add	r0, ip
   1350e:	0c1d      	lsrs	r5, r3, #16
   13510:	0412      	lsls	r2, r2, #16
   13512:	041b      	lsls	r3, r3, #16
   13514:	0c12      	lsrs	r2, r2, #16
   13516:	1828      	adds	r0, r5, r0
   13518:	189b      	adds	r3, r3, r2
   1351a:	4286      	cmp	r6, r0
   1351c:	d200      	bcs.n	13520 <__aeabi_ddiv+0x3cc>
   1351e:	e093      	b.n	13648 <__aeabi_ddiv+0x4f4>
   13520:	d100      	bne.n	13524 <__aeabi_ddiv+0x3d0>
   13522:	e08e      	b.n	13642 <__aeabi_ddiv+0x4ee>
   13524:	2301      	movs	r3, #1
   13526:	4319      	orrs	r1, r3
   13528:	4ba0      	ldr	r3, [pc, #640]	; (137ac <__aeabi_ddiv+0x658>)
   1352a:	18e3      	adds	r3, r4, r3
   1352c:	2b00      	cmp	r3, #0
   1352e:	dc00      	bgt.n	13532 <__aeabi_ddiv+0x3de>
   13530:	e099      	b.n	13666 <__aeabi_ddiv+0x512>
   13532:	074a      	lsls	r2, r1, #29
   13534:	d000      	beq.n	13538 <__aeabi_ddiv+0x3e4>
   13536:	e09e      	b.n	13676 <__aeabi_ddiv+0x522>
   13538:	465a      	mov	r2, fp
   1353a:	01d2      	lsls	r2, r2, #7
   1353c:	d506      	bpl.n	1354c <__aeabi_ddiv+0x3f8>
   1353e:	465a      	mov	r2, fp
   13540:	4b9b      	ldr	r3, [pc, #620]	; (137b0 <__aeabi_ddiv+0x65c>)
   13542:	401a      	ands	r2, r3
   13544:	2380      	movs	r3, #128	; 0x80
   13546:	4693      	mov	fp, r2
   13548:	00db      	lsls	r3, r3, #3
   1354a:	18e3      	adds	r3, r4, r3
   1354c:	4a99      	ldr	r2, [pc, #612]	; (137b4 <__aeabi_ddiv+0x660>)
   1354e:	4293      	cmp	r3, r2
   13550:	dd68      	ble.n	13624 <__aeabi_ddiv+0x4d0>
   13552:	2301      	movs	r3, #1
   13554:	9a02      	ldr	r2, [sp, #8]
   13556:	4c98      	ldr	r4, [pc, #608]	; (137b8 <__aeabi_ddiv+0x664>)
   13558:	401a      	ands	r2, r3
   1355a:	2300      	movs	r3, #0
   1355c:	4694      	mov	ip, r2
   1355e:	4698      	mov	r8, r3
   13560:	2200      	movs	r2, #0
   13562:	e6c5      	b.n	132f0 <__aeabi_ddiv+0x19c>
   13564:	2280      	movs	r2, #128	; 0x80
   13566:	464b      	mov	r3, r9
   13568:	0312      	lsls	r2, r2, #12
   1356a:	4213      	tst	r3, r2
   1356c:	d00a      	beq.n	13584 <__aeabi_ddiv+0x430>
   1356e:	465b      	mov	r3, fp
   13570:	4213      	tst	r3, r2
   13572:	d106      	bne.n	13582 <__aeabi_ddiv+0x42e>
   13574:	431a      	orrs	r2, r3
   13576:	0312      	lsls	r2, r2, #12
   13578:	0b12      	lsrs	r2, r2, #12
   1357a:	46ac      	mov	ip, r5
   1357c:	4688      	mov	r8, r1
   1357e:	4c8e      	ldr	r4, [pc, #568]	; (137b8 <__aeabi_ddiv+0x664>)
   13580:	e6b6      	b.n	132f0 <__aeabi_ddiv+0x19c>
   13582:	464b      	mov	r3, r9
   13584:	431a      	orrs	r2, r3
   13586:	0312      	lsls	r2, r2, #12
   13588:	0b12      	lsrs	r2, r2, #12
   1358a:	46bc      	mov	ip, r7
   1358c:	4c8a      	ldr	r4, [pc, #552]	; (137b8 <__aeabi_ddiv+0x664>)
   1358e:	e6af      	b.n	132f0 <__aeabi_ddiv+0x19c>
   13590:	0003      	movs	r3, r0
   13592:	465a      	mov	r2, fp
   13594:	3b28      	subs	r3, #40	; 0x28
   13596:	409a      	lsls	r2, r3
   13598:	2300      	movs	r3, #0
   1359a:	4691      	mov	r9, r2
   1359c:	4698      	mov	r8, r3
   1359e:	e657      	b.n	13250 <__aeabi_ddiv+0xfc>
   135a0:	4658      	mov	r0, fp
   135a2:	f001 f82b 	bl	145fc <__clzsi2>
   135a6:	3020      	adds	r0, #32
   135a8:	e640      	b.n	1322c <__aeabi_ddiv+0xd8>
   135aa:	0003      	movs	r3, r0
   135ac:	4652      	mov	r2, sl
   135ae:	3b28      	subs	r3, #40	; 0x28
   135b0:	409a      	lsls	r2, r3
   135b2:	2100      	movs	r1, #0
   135b4:	4693      	mov	fp, r2
   135b6:	e677      	b.n	132a8 <__aeabi_ddiv+0x154>
   135b8:	f001 f820 	bl	145fc <__clzsi2>
   135bc:	3020      	adds	r0, #32
   135be:	e65f      	b.n	13280 <__aeabi_ddiv+0x12c>
   135c0:	4588      	cmp	r8, r1
   135c2:	d200      	bcs.n	135c6 <__aeabi_ddiv+0x472>
   135c4:	e6c7      	b.n	13356 <__aeabi_ddiv+0x202>
   135c6:	464b      	mov	r3, r9
   135c8:	07de      	lsls	r6, r3, #31
   135ca:	085d      	lsrs	r5, r3, #1
   135cc:	4643      	mov	r3, r8
   135ce:	085b      	lsrs	r3, r3, #1
   135d0:	431e      	orrs	r6, r3
   135d2:	4643      	mov	r3, r8
   135d4:	07db      	lsls	r3, r3, #31
   135d6:	469a      	mov	sl, r3
   135d8:	e6c2      	b.n	13360 <__aeabi_ddiv+0x20c>
   135da:	2500      	movs	r5, #0
   135dc:	4592      	cmp	sl, r2
   135de:	d300      	bcc.n	135e2 <__aeabi_ddiv+0x48e>
   135e0:	e733      	b.n	1344a <__aeabi_ddiv+0x2f6>
   135e2:	9e03      	ldr	r6, [sp, #12]
   135e4:	4659      	mov	r1, fp
   135e6:	46b4      	mov	ip, r6
   135e8:	44e2      	add	sl, ip
   135ea:	45b2      	cmp	sl, r6
   135ec:	41ad      	sbcs	r5, r5
   135ee:	426d      	negs	r5, r5
   135f0:	4445      	add	r5, r8
   135f2:	18eb      	adds	r3, r5, r3
   135f4:	3901      	subs	r1, #1
   135f6:	4598      	cmp	r8, r3
   135f8:	d207      	bcs.n	1360a <__aeabi_ddiv+0x4b6>
   135fa:	4298      	cmp	r0, r3
   135fc:	d900      	bls.n	13600 <__aeabi_ddiv+0x4ac>
   135fe:	e07f      	b.n	13700 <__aeabi_ddiv+0x5ac>
   13600:	d100      	bne.n	13604 <__aeabi_ddiv+0x4b0>
   13602:	e0bc      	b.n	1377e <__aeabi_ddiv+0x62a>
   13604:	1a1d      	subs	r5, r3, r0
   13606:	468b      	mov	fp, r1
   13608:	e71f      	b.n	1344a <__aeabi_ddiv+0x2f6>
   1360a:	4598      	cmp	r8, r3
   1360c:	d1fa      	bne.n	13604 <__aeabi_ddiv+0x4b0>
   1360e:	9d03      	ldr	r5, [sp, #12]
   13610:	4555      	cmp	r5, sl
   13612:	d9f2      	bls.n	135fa <__aeabi_ddiv+0x4a6>
   13614:	4643      	mov	r3, r8
   13616:	468b      	mov	fp, r1
   13618:	1a1d      	subs	r5, r3, r0
   1361a:	e716      	b.n	1344a <__aeabi_ddiv+0x2f6>
   1361c:	469b      	mov	fp, r3
   1361e:	e6ca      	b.n	133b6 <__aeabi_ddiv+0x262>
   13620:	0015      	movs	r5, r2
   13622:	e6e7      	b.n	133f4 <__aeabi_ddiv+0x2a0>
   13624:	465a      	mov	r2, fp
   13626:	08c9      	lsrs	r1, r1, #3
   13628:	0752      	lsls	r2, r2, #29
   1362a:	430a      	orrs	r2, r1
   1362c:	055b      	lsls	r3, r3, #21
   1362e:	4690      	mov	r8, r2
   13630:	0d5c      	lsrs	r4, r3, #21
   13632:	465a      	mov	r2, fp
   13634:	2301      	movs	r3, #1
   13636:	9902      	ldr	r1, [sp, #8]
   13638:	0252      	lsls	r2, r2, #9
   1363a:	4019      	ands	r1, r3
   1363c:	0b12      	lsrs	r2, r2, #12
   1363e:	468c      	mov	ip, r1
   13640:	e656      	b.n	132f0 <__aeabi_ddiv+0x19c>
   13642:	2b00      	cmp	r3, #0
   13644:	d100      	bne.n	13648 <__aeabi_ddiv+0x4f4>
   13646:	e76f      	b.n	13528 <__aeabi_ddiv+0x3d4>
   13648:	4446      	add	r6, r8
   1364a:	1e4a      	subs	r2, r1, #1
   1364c:	45b0      	cmp	r8, r6
   1364e:	d929      	bls.n	136a4 <__aeabi_ddiv+0x550>
   13650:	0011      	movs	r1, r2
   13652:	4286      	cmp	r6, r0
   13654:	d000      	beq.n	13658 <__aeabi_ddiv+0x504>
   13656:	e765      	b.n	13524 <__aeabi_ddiv+0x3d0>
   13658:	9a03      	ldr	r2, [sp, #12]
   1365a:	4293      	cmp	r3, r2
   1365c:	d000      	beq.n	13660 <__aeabi_ddiv+0x50c>
   1365e:	e761      	b.n	13524 <__aeabi_ddiv+0x3d0>
   13660:	e762      	b.n	13528 <__aeabi_ddiv+0x3d4>
   13662:	2101      	movs	r1, #1
   13664:	4249      	negs	r1, r1
   13666:	2001      	movs	r0, #1
   13668:	1ac2      	subs	r2, r0, r3
   1366a:	2a38      	cmp	r2, #56	; 0x38
   1366c:	dd21      	ble.n	136b2 <__aeabi_ddiv+0x55e>
   1366e:	9b02      	ldr	r3, [sp, #8]
   13670:	4003      	ands	r3, r0
   13672:	469c      	mov	ip, r3
   13674:	e638      	b.n	132e8 <__aeabi_ddiv+0x194>
   13676:	220f      	movs	r2, #15
   13678:	400a      	ands	r2, r1
   1367a:	2a04      	cmp	r2, #4
   1367c:	d100      	bne.n	13680 <__aeabi_ddiv+0x52c>
   1367e:	e75b      	b.n	13538 <__aeabi_ddiv+0x3e4>
   13680:	000a      	movs	r2, r1
   13682:	1d11      	adds	r1, r2, #4
   13684:	4291      	cmp	r1, r2
   13686:	4192      	sbcs	r2, r2
   13688:	4252      	negs	r2, r2
   1368a:	4493      	add	fp, r2
   1368c:	e754      	b.n	13538 <__aeabi_ddiv+0x3e4>
   1368e:	4b47      	ldr	r3, [pc, #284]	; (137ac <__aeabi_ddiv+0x658>)
   13690:	18e3      	adds	r3, r4, r3
   13692:	2b00      	cmp	r3, #0
   13694:	dde5      	ble.n	13662 <__aeabi_ddiv+0x50e>
   13696:	2201      	movs	r2, #1
   13698:	4252      	negs	r2, r2
   1369a:	e7f2      	b.n	13682 <__aeabi_ddiv+0x52e>
   1369c:	001d      	movs	r5, r3
   1369e:	e6fa      	b.n	13496 <__aeabi_ddiv+0x342>
   136a0:	469a      	mov	sl, r3
   136a2:	e71c      	b.n	134de <__aeabi_ddiv+0x38a>
   136a4:	42b0      	cmp	r0, r6
   136a6:	d839      	bhi.n	1371c <__aeabi_ddiv+0x5c8>
   136a8:	d06e      	beq.n	13788 <__aeabi_ddiv+0x634>
   136aa:	0011      	movs	r1, r2
   136ac:	e73a      	b.n	13524 <__aeabi_ddiv+0x3d0>
   136ae:	9302      	str	r3, [sp, #8]
   136b0:	e73a      	b.n	13528 <__aeabi_ddiv+0x3d4>
   136b2:	2a1f      	cmp	r2, #31
   136b4:	dc3c      	bgt.n	13730 <__aeabi_ddiv+0x5dc>
   136b6:	2320      	movs	r3, #32
   136b8:	1a9b      	subs	r3, r3, r2
   136ba:	000c      	movs	r4, r1
   136bc:	4658      	mov	r0, fp
   136be:	4099      	lsls	r1, r3
   136c0:	4098      	lsls	r0, r3
   136c2:	1e4b      	subs	r3, r1, #1
   136c4:	4199      	sbcs	r1, r3
   136c6:	465b      	mov	r3, fp
   136c8:	40d4      	lsrs	r4, r2
   136ca:	40d3      	lsrs	r3, r2
   136cc:	4320      	orrs	r0, r4
   136ce:	4308      	orrs	r0, r1
   136d0:	001a      	movs	r2, r3
   136d2:	0743      	lsls	r3, r0, #29
   136d4:	d009      	beq.n	136ea <__aeabi_ddiv+0x596>
   136d6:	230f      	movs	r3, #15
   136d8:	4003      	ands	r3, r0
   136da:	2b04      	cmp	r3, #4
   136dc:	d005      	beq.n	136ea <__aeabi_ddiv+0x596>
   136de:	0001      	movs	r1, r0
   136e0:	1d08      	adds	r0, r1, #4
   136e2:	4288      	cmp	r0, r1
   136e4:	419b      	sbcs	r3, r3
   136e6:	425b      	negs	r3, r3
   136e8:	18d2      	adds	r2, r2, r3
   136ea:	0213      	lsls	r3, r2, #8
   136ec:	d53a      	bpl.n	13764 <__aeabi_ddiv+0x610>
   136ee:	2301      	movs	r3, #1
   136f0:	9a02      	ldr	r2, [sp, #8]
   136f2:	2401      	movs	r4, #1
   136f4:	401a      	ands	r2, r3
   136f6:	2300      	movs	r3, #0
   136f8:	4694      	mov	ip, r2
   136fa:	4698      	mov	r8, r3
   136fc:	2200      	movs	r2, #0
   136fe:	e5f7      	b.n	132f0 <__aeabi_ddiv+0x19c>
   13700:	2102      	movs	r1, #2
   13702:	4249      	negs	r1, r1
   13704:	468c      	mov	ip, r1
   13706:	9d03      	ldr	r5, [sp, #12]
   13708:	44e3      	add	fp, ip
   1370a:	46ac      	mov	ip, r5
   1370c:	44e2      	add	sl, ip
   1370e:	45aa      	cmp	sl, r5
   13710:	41ad      	sbcs	r5, r5
   13712:	426d      	negs	r5, r5
   13714:	4445      	add	r5, r8
   13716:	18ed      	adds	r5, r5, r3
   13718:	1a2d      	subs	r5, r5, r0
   1371a:	e696      	b.n	1344a <__aeabi_ddiv+0x2f6>
   1371c:	1e8a      	subs	r2, r1, #2
   1371e:	9903      	ldr	r1, [sp, #12]
   13720:	004d      	lsls	r5, r1, #1
   13722:	428d      	cmp	r5, r1
   13724:	4189      	sbcs	r1, r1
   13726:	4249      	negs	r1, r1
   13728:	4441      	add	r1, r8
   1372a:	1876      	adds	r6, r6, r1
   1372c:	9503      	str	r5, [sp, #12]
   1372e:	e78f      	b.n	13650 <__aeabi_ddiv+0x4fc>
   13730:	201f      	movs	r0, #31
   13732:	4240      	negs	r0, r0
   13734:	1ac3      	subs	r3, r0, r3
   13736:	4658      	mov	r0, fp
   13738:	40d8      	lsrs	r0, r3
   1373a:	0003      	movs	r3, r0
   1373c:	2a20      	cmp	r2, #32
   1373e:	d028      	beq.n	13792 <__aeabi_ddiv+0x63e>
   13740:	2040      	movs	r0, #64	; 0x40
   13742:	465d      	mov	r5, fp
   13744:	1a82      	subs	r2, r0, r2
   13746:	4095      	lsls	r5, r2
   13748:	4329      	orrs	r1, r5
   1374a:	1e4a      	subs	r2, r1, #1
   1374c:	4191      	sbcs	r1, r2
   1374e:	4319      	orrs	r1, r3
   13750:	2307      	movs	r3, #7
   13752:	2200      	movs	r2, #0
   13754:	400b      	ands	r3, r1
   13756:	d009      	beq.n	1376c <__aeabi_ddiv+0x618>
   13758:	230f      	movs	r3, #15
   1375a:	2200      	movs	r2, #0
   1375c:	400b      	ands	r3, r1
   1375e:	0008      	movs	r0, r1
   13760:	2b04      	cmp	r3, #4
   13762:	d1bd      	bne.n	136e0 <__aeabi_ddiv+0x58c>
   13764:	0001      	movs	r1, r0
   13766:	0753      	lsls	r3, r2, #29
   13768:	0252      	lsls	r2, r2, #9
   1376a:	0b12      	lsrs	r2, r2, #12
   1376c:	08c9      	lsrs	r1, r1, #3
   1376e:	4319      	orrs	r1, r3
   13770:	2301      	movs	r3, #1
   13772:	4688      	mov	r8, r1
   13774:	9902      	ldr	r1, [sp, #8]
   13776:	2400      	movs	r4, #0
   13778:	4019      	ands	r1, r3
   1377a:	468c      	mov	ip, r1
   1377c:	e5b8      	b.n	132f0 <__aeabi_ddiv+0x19c>
   1377e:	4552      	cmp	r2, sl
   13780:	d8be      	bhi.n	13700 <__aeabi_ddiv+0x5ac>
   13782:	468b      	mov	fp, r1
   13784:	2500      	movs	r5, #0
   13786:	e660      	b.n	1344a <__aeabi_ddiv+0x2f6>
   13788:	9d03      	ldr	r5, [sp, #12]
   1378a:	429d      	cmp	r5, r3
   1378c:	d3c6      	bcc.n	1371c <__aeabi_ddiv+0x5c8>
   1378e:	0011      	movs	r1, r2
   13790:	e762      	b.n	13658 <__aeabi_ddiv+0x504>
   13792:	2500      	movs	r5, #0
   13794:	e7d8      	b.n	13748 <__aeabi_ddiv+0x5f4>
   13796:	2280      	movs	r2, #128	; 0x80
   13798:	465b      	mov	r3, fp
   1379a:	0312      	lsls	r2, r2, #12
   1379c:	431a      	orrs	r2, r3
   1379e:	9b01      	ldr	r3, [sp, #4]
   137a0:	0312      	lsls	r2, r2, #12
   137a2:	0b12      	lsrs	r2, r2, #12
   137a4:	469c      	mov	ip, r3
   137a6:	4688      	mov	r8, r1
   137a8:	4c03      	ldr	r4, [pc, #12]	; (137b8 <__aeabi_ddiv+0x664>)
   137aa:	e5a1      	b.n	132f0 <__aeabi_ddiv+0x19c>
   137ac:	000003ff 	.word	0x000003ff
   137b0:	feffffff 	.word	0xfeffffff
   137b4:	000007fe 	.word	0x000007fe
   137b8:	000007ff 	.word	0x000007ff

000137bc <__aeabi_dmul>:
   137bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   137be:	4657      	mov	r7, sl
   137c0:	4645      	mov	r5, r8
   137c2:	46de      	mov	lr, fp
   137c4:	464e      	mov	r6, r9
   137c6:	b5e0      	push	{r5, r6, r7, lr}
   137c8:	030c      	lsls	r4, r1, #12
   137ca:	4698      	mov	r8, r3
   137cc:	004e      	lsls	r6, r1, #1
   137ce:	0b23      	lsrs	r3, r4, #12
   137d0:	b087      	sub	sp, #28
   137d2:	0007      	movs	r7, r0
   137d4:	4692      	mov	sl, r2
   137d6:	469b      	mov	fp, r3
   137d8:	0d76      	lsrs	r6, r6, #21
   137da:	0fcd      	lsrs	r5, r1, #31
   137dc:	2e00      	cmp	r6, #0
   137de:	d06b      	beq.n	138b8 <__aeabi_dmul+0xfc>
   137e0:	4b6d      	ldr	r3, [pc, #436]	; (13998 <__aeabi_dmul+0x1dc>)
   137e2:	429e      	cmp	r6, r3
   137e4:	d035      	beq.n	13852 <__aeabi_dmul+0x96>
   137e6:	2480      	movs	r4, #128	; 0x80
   137e8:	465b      	mov	r3, fp
   137ea:	0f42      	lsrs	r2, r0, #29
   137ec:	0424      	lsls	r4, r4, #16
   137ee:	00db      	lsls	r3, r3, #3
   137f0:	4314      	orrs	r4, r2
   137f2:	431c      	orrs	r4, r3
   137f4:	00c3      	lsls	r3, r0, #3
   137f6:	4699      	mov	r9, r3
   137f8:	4b68      	ldr	r3, [pc, #416]	; (1399c <__aeabi_dmul+0x1e0>)
   137fa:	46a3      	mov	fp, r4
   137fc:	469c      	mov	ip, r3
   137fe:	2300      	movs	r3, #0
   13800:	2700      	movs	r7, #0
   13802:	4466      	add	r6, ip
   13804:	9302      	str	r3, [sp, #8]
   13806:	4643      	mov	r3, r8
   13808:	031c      	lsls	r4, r3, #12
   1380a:	005a      	lsls	r2, r3, #1
   1380c:	0fdb      	lsrs	r3, r3, #31
   1380e:	4650      	mov	r0, sl
   13810:	0b24      	lsrs	r4, r4, #12
   13812:	0d52      	lsrs	r2, r2, #21
   13814:	4698      	mov	r8, r3
   13816:	d100      	bne.n	1381a <__aeabi_dmul+0x5e>
   13818:	e076      	b.n	13908 <__aeabi_dmul+0x14c>
   1381a:	4b5f      	ldr	r3, [pc, #380]	; (13998 <__aeabi_dmul+0x1dc>)
   1381c:	429a      	cmp	r2, r3
   1381e:	d06d      	beq.n	138fc <__aeabi_dmul+0x140>
   13820:	2380      	movs	r3, #128	; 0x80
   13822:	0f41      	lsrs	r1, r0, #29
   13824:	041b      	lsls	r3, r3, #16
   13826:	430b      	orrs	r3, r1
   13828:	495c      	ldr	r1, [pc, #368]	; (1399c <__aeabi_dmul+0x1e0>)
   1382a:	00e4      	lsls	r4, r4, #3
   1382c:	468c      	mov	ip, r1
   1382e:	431c      	orrs	r4, r3
   13830:	00c3      	lsls	r3, r0, #3
   13832:	2000      	movs	r0, #0
   13834:	4462      	add	r2, ip
   13836:	4641      	mov	r1, r8
   13838:	18b6      	adds	r6, r6, r2
   1383a:	4069      	eors	r1, r5
   1383c:	1c72      	adds	r2, r6, #1
   1383e:	9101      	str	r1, [sp, #4]
   13840:	4694      	mov	ip, r2
   13842:	4307      	orrs	r7, r0
   13844:	2f0f      	cmp	r7, #15
   13846:	d900      	bls.n	1384a <__aeabi_dmul+0x8e>
   13848:	e0b0      	b.n	139ac <__aeabi_dmul+0x1f0>
   1384a:	4a55      	ldr	r2, [pc, #340]	; (139a0 <__aeabi_dmul+0x1e4>)
   1384c:	00bf      	lsls	r7, r7, #2
   1384e:	59d2      	ldr	r2, [r2, r7]
   13850:	4697      	mov	pc, r2
   13852:	465b      	mov	r3, fp
   13854:	4303      	orrs	r3, r0
   13856:	4699      	mov	r9, r3
   13858:	d000      	beq.n	1385c <__aeabi_dmul+0xa0>
   1385a:	e087      	b.n	1396c <__aeabi_dmul+0x1b0>
   1385c:	2300      	movs	r3, #0
   1385e:	469b      	mov	fp, r3
   13860:	3302      	adds	r3, #2
   13862:	2708      	movs	r7, #8
   13864:	9302      	str	r3, [sp, #8]
   13866:	e7ce      	b.n	13806 <__aeabi_dmul+0x4a>
   13868:	4642      	mov	r2, r8
   1386a:	9201      	str	r2, [sp, #4]
   1386c:	2802      	cmp	r0, #2
   1386e:	d067      	beq.n	13940 <__aeabi_dmul+0x184>
   13870:	2803      	cmp	r0, #3
   13872:	d100      	bne.n	13876 <__aeabi_dmul+0xba>
   13874:	e20e      	b.n	13c94 <__aeabi_dmul+0x4d8>
   13876:	2801      	cmp	r0, #1
   13878:	d000      	beq.n	1387c <__aeabi_dmul+0xc0>
   1387a:	e162      	b.n	13b42 <__aeabi_dmul+0x386>
   1387c:	2300      	movs	r3, #0
   1387e:	2400      	movs	r4, #0
   13880:	2200      	movs	r2, #0
   13882:	4699      	mov	r9, r3
   13884:	9901      	ldr	r1, [sp, #4]
   13886:	4001      	ands	r1, r0
   13888:	b2cd      	uxtb	r5, r1
   1388a:	2100      	movs	r1, #0
   1388c:	0312      	lsls	r2, r2, #12
   1388e:	0d0b      	lsrs	r3, r1, #20
   13890:	0b12      	lsrs	r2, r2, #12
   13892:	051b      	lsls	r3, r3, #20
   13894:	4313      	orrs	r3, r2
   13896:	4a43      	ldr	r2, [pc, #268]	; (139a4 <__aeabi_dmul+0x1e8>)
   13898:	0524      	lsls	r4, r4, #20
   1389a:	4013      	ands	r3, r2
   1389c:	431c      	orrs	r4, r3
   1389e:	0064      	lsls	r4, r4, #1
   138a0:	07ed      	lsls	r5, r5, #31
   138a2:	0864      	lsrs	r4, r4, #1
   138a4:	432c      	orrs	r4, r5
   138a6:	4648      	mov	r0, r9
   138a8:	0021      	movs	r1, r4
   138aa:	b007      	add	sp, #28
   138ac:	bc3c      	pop	{r2, r3, r4, r5}
   138ae:	4690      	mov	r8, r2
   138b0:	4699      	mov	r9, r3
   138b2:	46a2      	mov	sl, r4
   138b4:	46ab      	mov	fp, r5
   138b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   138b8:	4303      	orrs	r3, r0
   138ba:	4699      	mov	r9, r3
   138bc:	d04f      	beq.n	1395e <__aeabi_dmul+0x1a2>
   138be:	465b      	mov	r3, fp
   138c0:	2b00      	cmp	r3, #0
   138c2:	d100      	bne.n	138c6 <__aeabi_dmul+0x10a>
   138c4:	e189      	b.n	13bda <__aeabi_dmul+0x41e>
   138c6:	4658      	mov	r0, fp
   138c8:	f000 fe98 	bl	145fc <__clzsi2>
   138cc:	0003      	movs	r3, r0
   138ce:	3b0b      	subs	r3, #11
   138d0:	2b1c      	cmp	r3, #28
   138d2:	dd00      	ble.n	138d6 <__aeabi_dmul+0x11a>
   138d4:	e17a      	b.n	13bcc <__aeabi_dmul+0x410>
   138d6:	221d      	movs	r2, #29
   138d8:	1ad3      	subs	r3, r2, r3
   138da:	003a      	movs	r2, r7
   138dc:	0001      	movs	r1, r0
   138de:	465c      	mov	r4, fp
   138e0:	40da      	lsrs	r2, r3
   138e2:	3908      	subs	r1, #8
   138e4:	408c      	lsls	r4, r1
   138e6:	0013      	movs	r3, r2
   138e8:	408f      	lsls	r7, r1
   138ea:	4323      	orrs	r3, r4
   138ec:	469b      	mov	fp, r3
   138ee:	46b9      	mov	r9, r7
   138f0:	2300      	movs	r3, #0
   138f2:	4e2d      	ldr	r6, [pc, #180]	; (139a8 <__aeabi_dmul+0x1ec>)
   138f4:	2700      	movs	r7, #0
   138f6:	1a36      	subs	r6, r6, r0
   138f8:	9302      	str	r3, [sp, #8]
   138fa:	e784      	b.n	13806 <__aeabi_dmul+0x4a>
   138fc:	4653      	mov	r3, sl
   138fe:	4323      	orrs	r3, r4
   13900:	d12a      	bne.n	13958 <__aeabi_dmul+0x19c>
   13902:	2400      	movs	r4, #0
   13904:	2002      	movs	r0, #2
   13906:	e796      	b.n	13836 <__aeabi_dmul+0x7a>
   13908:	4653      	mov	r3, sl
   1390a:	4323      	orrs	r3, r4
   1390c:	d020      	beq.n	13950 <__aeabi_dmul+0x194>
   1390e:	2c00      	cmp	r4, #0
   13910:	d100      	bne.n	13914 <__aeabi_dmul+0x158>
   13912:	e157      	b.n	13bc4 <__aeabi_dmul+0x408>
   13914:	0020      	movs	r0, r4
   13916:	f000 fe71 	bl	145fc <__clzsi2>
   1391a:	0003      	movs	r3, r0
   1391c:	3b0b      	subs	r3, #11
   1391e:	2b1c      	cmp	r3, #28
   13920:	dd00      	ble.n	13924 <__aeabi_dmul+0x168>
   13922:	e149      	b.n	13bb8 <__aeabi_dmul+0x3fc>
   13924:	211d      	movs	r1, #29
   13926:	1acb      	subs	r3, r1, r3
   13928:	4651      	mov	r1, sl
   1392a:	0002      	movs	r2, r0
   1392c:	40d9      	lsrs	r1, r3
   1392e:	4653      	mov	r3, sl
   13930:	3a08      	subs	r2, #8
   13932:	4094      	lsls	r4, r2
   13934:	4093      	lsls	r3, r2
   13936:	430c      	orrs	r4, r1
   13938:	4a1b      	ldr	r2, [pc, #108]	; (139a8 <__aeabi_dmul+0x1ec>)
   1393a:	1a12      	subs	r2, r2, r0
   1393c:	2000      	movs	r0, #0
   1393e:	e77a      	b.n	13836 <__aeabi_dmul+0x7a>
   13940:	2501      	movs	r5, #1
   13942:	9b01      	ldr	r3, [sp, #4]
   13944:	4c14      	ldr	r4, [pc, #80]	; (13998 <__aeabi_dmul+0x1dc>)
   13946:	401d      	ands	r5, r3
   13948:	2300      	movs	r3, #0
   1394a:	2200      	movs	r2, #0
   1394c:	4699      	mov	r9, r3
   1394e:	e79c      	b.n	1388a <__aeabi_dmul+0xce>
   13950:	2400      	movs	r4, #0
   13952:	2200      	movs	r2, #0
   13954:	2001      	movs	r0, #1
   13956:	e76e      	b.n	13836 <__aeabi_dmul+0x7a>
   13958:	4653      	mov	r3, sl
   1395a:	2003      	movs	r0, #3
   1395c:	e76b      	b.n	13836 <__aeabi_dmul+0x7a>
   1395e:	2300      	movs	r3, #0
   13960:	469b      	mov	fp, r3
   13962:	3301      	adds	r3, #1
   13964:	2704      	movs	r7, #4
   13966:	2600      	movs	r6, #0
   13968:	9302      	str	r3, [sp, #8]
   1396a:	e74c      	b.n	13806 <__aeabi_dmul+0x4a>
   1396c:	2303      	movs	r3, #3
   1396e:	4681      	mov	r9, r0
   13970:	270c      	movs	r7, #12
   13972:	9302      	str	r3, [sp, #8]
   13974:	e747      	b.n	13806 <__aeabi_dmul+0x4a>
   13976:	2280      	movs	r2, #128	; 0x80
   13978:	2300      	movs	r3, #0
   1397a:	2500      	movs	r5, #0
   1397c:	0312      	lsls	r2, r2, #12
   1397e:	4699      	mov	r9, r3
   13980:	4c05      	ldr	r4, [pc, #20]	; (13998 <__aeabi_dmul+0x1dc>)
   13982:	e782      	b.n	1388a <__aeabi_dmul+0xce>
   13984:	465c      	mov	r4, fp
   13986:	464b      	mov	r3, r9
   13988:	9802      	ldr	r0, [sp, #8]
   1398a:	e76f      	b.n	1386c <__aeabi_dmul+0xb0>
   1398c:	465c      	mov	r4, fp
   1398e:	464b      	mov	r3, r9
   13990:	9501      	str	r5, [sp, #4]
   13992:	9802      	ldr	r0, [sp, #8]
   13994:	e76a      	b.n	1386c <__aeabi_dmul+0xb0>
   13996:	46c0      	nop			; (mov r8, r8)
   13998:	000007ff 	.word	0x000007ff
   1399c:	fffffc01 	.word	0xfffffc01
   139a0:	0001ae84 	.word	0x0001ae84
   139a4:	800fffff 	.word	0x800fffff
   139a8:	fffffc0d 	.word	0xfffffc0d
   139ac:	464a      	mov	r2, r9
   139ae:	4649      	mov	r1, r9
   139b0:	0c17      	lsrs	r7, r2, #16
   139b2:	0c1a      	lsrs	r2, r3, #16
   139b4:	041b      	lsls	r3, r3, #16
   139b6:	0c1b      	lsrs	r3, r3, #16
   139b8:	0408      	lsls	r0, r1, #16
   139ba:	0019      	movs	r1, r3
   139bc:	0c00      	lsrs	r0, r0, #16
   139be:	4341      	muls	r1, r0
   139c0:	0015      	movs	r5, r2
   139c2:	4688      	mov	r8, r1
   139c4:	0019      	movs	r1, r3
   139c6:	437d      	muls	r5, r7
   139c8:	4379      	muls	r1, r7
   139ca:	9503      	str	r5, [sp, #12]
   139cc:	4689      	mov	r9, r1
   139ce:	0029      	movs	r1, r5
   139d0:	0015      	movs	r5, r2
   139d2:	4345      	muls	r5, r0
   139d4:	444d      	add	r5, r9
   139d6:	9502      	str	r5, [sp, #8]
   139d8:	4645      	mov	r5, r8
   139da:	0c2d      	lsrs	r5, r5, #16
   139dc:	46aa      	mov	sl, r5
   139de:	9d02      	ldr	r5, [sp, #8]
   139e0:	4455      	add	r5, sl
   139e2:	45a9      	cmp	r9, r5
   139e4:	d906      	bls.n	139f4 <__aeabi_dmul+0x238>
   139e6:	468a      	mov	sl, r1
   139e8:	2180      	movs	r1, #128	; 0x80
   139ea:	0249      	lsls	r1, r1, #9
   139ec:	4689      	mov	r9, r1
   139ee:	44ca      	add	sl, r9
   139f0:	4651      	mov	r1, sl
   139f2:	9103      	str	r1, [sp, #12]
   139f4:	0c29      	lsrs	r1, r5, #16
   139f6:	9104      	str	r1, [sp, #16]
   139f8:	4641      	mov	r1, r8
   139fa:	0409      	lsls	r1, r1, #16
   139fc:	042d      	lsls	r5, r5, #16
   139fe:	0c09      	lsrs	r1, r1, #16
   13a00:	4688      	mov	r8, r1
   13a02:	0029      	movs	r1, r5
   13a04:	0c25      	lsrs	r5, r4, #16
   13a06:	0424      	lsls	r4, r4, #16
   13a08:	4441      	add	r1, r8
   13a0a:	0c24      	lsrs	r4, r4, #16
   13a0c:	9105      	str	r1, [sp, #20]
   13a0e:	0021      	movs	r1, r4
   13a10:	4341      	muls	r1, r0
   13a12:	4688      	mov	r8, r1
   13a14:	0021      	movs	r1, r4
   13a16:	4379      	muls	r1, r7
   13a18:	468a      	mov	sl, r1
   13a1a:	4368      	muls	r0, r5
   13a1c:	4641      	mov	r1, r8
   13a1e:	4450      	add	r0, sl
   13a20:	4681      	mov	r9, r0
   13a22:	0c08      	lsrs	r0, r1, #16
   13a24:	4448      	add	r0, r9
   13a26:	436f      	muls	r7, r5
   13a28:	4582      	cmp	sl, r0
   13a2a:	d903      	bls.n	13a34 <__aeabi_dmul+0x278>
   13a2c:	2180      	movs	r1, #128	; 0x80
   13a2e:	0249      	lsls	r1, r1, #9
   13a30:	4689      	mov	r9, r1
   13a32:	444f      	add	r7, r9
   13a34:	0c01      	lsrs	r1, r0, #16
   13a36:	4689      	mov	r9, r1
   13a38:	0039      	movs	r1, r7
   13a3a:	4449      	add	r1, r9
   13a3c:	9102      	str	r1, [sp, #8]
   13a3e:	4641      	mov	r1, r8
   13a40:	040f      	lsls	r7, r1, #16
   13a42:	9904      	ldr	r1, [sp, #16]
   13a44:	0c3f      	lsrs	r7, r7, #16
   13a46:	4688      	mov	r8, r1
   13a48:	0400      	lsls	r0, r0, #16
   13a4a:	19c0      	adds	r0, r0, r7
   13a4c:	4480      	add	r8, r0
   13a4e:	4641      	mov	r1, r8
   13a50:	9104      	str	r1, [sp, #16]
   13a52:	4659      	mov	r1, fp
   13a54:	0c0f      	lsrs	r7, r1, #16
   13a56:	0409      	lsls	r1, r1, #16
   13a58:	0c09      	lsrs	r1, r1, #16
   13a5a:	4688      	mov	r8, r1
   13a5c:	4359      	muls	r1, r3
   13a5e:	468a      	mov	sl, r1
   13a60:	0039      	movs	r1, r7
   13a62:	4351      	muls	r1, r2
   13a64:	4689      	mov	r9, r1
   13a66:	4641      	mov	r1, r8
   13a68:	434a      	muls	r2, r1
   13a6a:	4651      	mov	r1, sl
   13a6c:	0c09      	lsrs	r1, r1, #16
   13a6e:	468b      	mov	fp, r1
   13a70:	437b      	muls	r3, r7
   13a72:	18d2      	adds	r2, r2, r3
   13a74:	445a      	add	r2, fp
   13a76:	4293      	cmp	r3, r2
   13a78:	d903      	bls.n	13a82 <__aeabi_dmul+0x2c6>
   13a7a:	2380      	movs	r3, #128	; 0x80
   13a7c:	025b      	lsls	r3, r3, #9
   13a7e:	469b      	mov	fp, r3
   13a80:	44d9      	add	r9, fp
   13a82:	4651      	mov	r1, sl
   13a84:	0409      	lsls	r1, r1, #16
   13a86:	0c09      	lsrs	r1, r1, #16
   13a88:	468a      	mov	sl, r1
   13a8a:	4641      	mov	r1, r8
   13a8c:	4361      	muls	r1, r4
   13a8e:	437c      	muls	r4, r7
   13a90:	0c13      	lsrs	r3, r2, #16
   13a92:	0412      	lsls	r2, r2, #16
   13a94:	444b      	add	r3, r9
   13a96:	4452      	add	r2, sl
   13a98:	46a1      	mov	r9, r4
   13a9a:	468a      	mov	sl, r1
   13a9c:	003c      	movs	r4, r7
   13a9e:	4641      	mov	r1, r8
   13aa0:	436c      	muls	r4, r5
   13aa2:	434d      	muls	r5, r1
   13aa4:	4651      	mov	r1, sl
   13aa6:	444d      	add	r5, r9
   13aa8:	0c0f      	lsrs	r7, r1, #16
   13aaa:	197d      	adds	r5, r7, r5
   13aac:	45a9      	cmp	r9, r5
   13aae:	d903      	bls.n	13ab8 <__aeabi_dmul+0x2fc>
   13ab0:	2180      	movs	r1, #128	; 0x80
   13ab2:	0249      	lsls	r1, r1, #9
   13ab4:	4688      	mov	r8, r1
   13ab6:	4444      	add	r4, r8
   13ab8:	9f04      	ldr	r7, [sp, #16]
   13aba:	9903      	ldr	r1, [sp, #12]
   13abc:	46b8      	mov	r8, r7
   13abe:	4441      	add	r1, r8
   13ac0:	468b      	mov	fp, r1
   13ac2:	4583      	cmp	fp, r0
   13ac4:	4180      	sbcs	r0, r0
   13ac6:	4241      	negs	r1, r0
   13ac8:	4688      	mov	r8, r1
   13aca:	4651      	mov	r1, sl
   13acc:	0408      	lsls	r0, r1, #16
   13ace:	042f      	lsls	r7, r5, #16
   13ad0:	0c00      	lsrs	r0, r0, #16
   13ad2:	183f      	adds	r7, r7, r0
   13ad4:	4658      	mov	r0, fp
   13ad6:	9902      	ldr	r1, [sp, #8]
   13ad8:	1810      	adds	r0, r2, r0
   13ada:	4689      	mov	r9, r1
   13adc:	4290      	cmp	r0, r2
   13ade:	4192      	sbcs	r2, r2
   13ae0:	444f      	add	r7, r9
   13ae2:	46ba      	mov	sl, r7
   13ae4:	4252      	negs	r2, r2
   13ae6:	4699      	mov	r9, r3
   13ae8:	4693      	mov	fp, r2
   13aea:	44c2      	add	sl, r8
   13aec:	44d1      	add	r9, sl
   13aee:	44cb      	add	fp, r9
   13af0:	428f      	cmp	r7, r1
   13af2:	41bf      	sbcs	r7, r7
   13af4:	45c2      	cmp	sl, r8
   13af6:	4189      	sbcs	r1, r1
   13af8:	4599      	cmp	r9, r3
   13afa:	419b      	sbcs	r3, r3
   13afc:	4593      	cmp	fp, r2
   13afe:	4192      	sbcs	r2, r2
   13b00:	427f      	negs	r7, r7
   13b02:	4249      	negs	r1, r1
   13b04:	0c2d      	lsrs	r5, r5, #16
   13b06:	4252      	negs	r2, r2
   13b08:	430f      	orrs	r7, r1
   13b0a:	425b      	negs	r3, r3
   13b0c:	4313      	orrs	r3, r2
   13b0e:	197f      	adds	r7, r7, r5
   13b10:	18ff      	adds	r7, r7, r3
   13b12:	465b      	mov	r3, fp
   13b14:	193c      	adds	r4, r7, r4
   13b16:	0ddb      	lsrs	r3, r3, #23
   13b18:	9a05      	ldr	r2, [sp, #20]
   13b1a:	0264      	lsls	r4, r4, #9
   13b1c:	431c      	orrs	r4, r3
   13b1e:	0243      	lsls	r3, r0, #9
   13b20:	4313      	orrs	r3, r2
   13b22:	1e5d      	subs	r5, r3, #1
   13b24:	41ab      	sbcs	r3, r5
   13b26:	465a      	mov	r2, fp
   13b28:	0dc0      	lsrs	r0, r0, #23
   13b2a:	4303      	orrs	r3, r0
   13b2c:	0252      	lsls	r2, r2, #9
   13b2e:	4313      	orrs	r3, r2
   13b30:	01e2      	lsls	r2, r4, #7
   13b32:	d556      	bpl.n	13be2 <__aeabi_dmul+0x426>
   13b34:	2001      	movs	r0, #1
   13b36:	085a      	lsrs	r2, r3, #1
   13b38:	4003      	ands	r3, r0
   13b3a:	4313      	orrs	r3, r2
   13b3c:	07e2      	lsls	r2, r4, #31
   13b3e:	4313      	orrs	r3, r2
   13b40:	0864      	lsrs	r4, r4, #1
   13b42:	485a      	ldr	r0, [pc, #360]	; (13cac <__aeabi_dmul+0x4f0>)
   13b44:	4460      	add	r0, ip
   13b46:	2800      	cmp	r0, #0
   13b48:	dd4d      	ble.n	13be6 <__aeabi_dmul+0x42a>
   13b4a:	075a      	lsls	r2, r3, #29
   13b4c:	d009      	beq.n	13b62 <__aeabi_dmul+0x3a6>
   13b4e:	220f      	movs	r2, #15
   13b50:	401a      	ands	r2, r3
   13b52:	2a04      	cmp	r2, #4
   13b54:	d005      	beq.n	13b62 <__aeabi_dmul+0x3a6>
   13b56:	1d1a      	adds	r2, r3, #4
   13b58:	429a      	cmp	r2, r3
   13b5a:	419b      	sbcs	r3, r3
   13b5c:	425b      	negs	r3, r3
   13b5e:	18e4      	adds	r4, r4, r3
   13b60:	0013      	movs	r3, r2
   13b62:	01e2      	lsls	r2, r4, #7
   13b64:	d504      	bpl.n	13b70 <__aeabi_dmul+0x3b4>
   13b66:	2080      	movs	r0, #128	; 0x80
   13b68:	4a51      	ldr	r2, [pc, #324]	; (13cb0 <__aeabi_dmul+0x4f4>)
   13b6a:	00c0      	lsls	r0, r0, #3
   13b6c:	4014      	ands	r4, r2
   13b6e:	4460      	add	r0, ip
   13b70:	4a50      	ldr	r2, [pc, #320]	; (13cb4 <__aeabi_dmul+0x4f8>)
   13b72:	4290      	cmp	r0, r2
   13b74:	dd00      	ble.n	13b78 <__aeabi_dmul+0x3bc>
   13b76:	e6e3      	b.n	13940 <__aeabi_dmul+0x184>
   13b78:	2501      	movs	r5, #1
   13b7a:	08db      	lsrs	r3, r3, #3
   13b7c:	0762      	lsls	r2, r4, #29
   13b7e:	431a      	orrs	r2, r3
   13b80:	0264      	lsls	r4, r4, #9
   13b82:	9b01      	ldr	r3, [sp, #4]
   13b84:	4691      	mov	r9, r2
   13b86:	0b22      	lsrs	r2, r4, #12
   13b88:	0544      	lsls	r4, r0, #21
   13b8a:	0d64      	lsrs	r4, r4, #21
   13b8c:	401d      	ands	r5, r3
   13b8e:	e67c      	b.n	1388a <__aeabi_dmul+0xce>
   13b90:	2280      	movs	r2, #128	; 0x80
   13b92:	4659      	mov	r1, fp
   13b94:	0312      	lsls	r2, r2, #12
   13b96:	4211      	tst	r1, r2
   13b98:	d008      	beq.n	13bac <__aeabi_dmul+0x3f0>
   13b9a:	4214      	tst	r4, r2
   13b9c:	d106      	bne.n	13bac <__aeabi_dmul+0x3f0>
   13b9e:	4322      	orrs	r2, r4
   13ba0:	0312      	lsls	r2, r2, #12
   13ba2:	0b12      	lsrs	r2, r2, #12
   13ba4:	4645      	mov	r5, r8
   13ba6:	4699      	mov	r9, r3
   13ba8:	4c43      	ldr	r4, [pc, #268]	; (13cb8 <__aeabi_dmul+0x4fc>)
   13baa:	e66e      	b.n	1388a <__aeabi_dmul+0xce>
   13bac:	465b      	mov	r3, fp
   13bae:	431a      	orrs	r2, r3
   13bb0:	0312      	lsls	r2, r2, #12
   13bb2:	0b12      	lsrs	r2, r2, #12
   13bb4:	4c40      	ldr	r4, [pc, #256]	; (13cb8 <__aeabi_dmul+0x4fc>)
   13bb6:	e668      	b.n	1388a <__aeabi_dmul+0xce>
   13bb8:	0003      	movs	r3, r0
   13bba:	4654      	mov	r4, sl
   13bbc:	3b28      	subs	r3, #40	; 0x28
   13bbe:	409c      	lsls	r4, r3
   13bc0:	2300      	movs	r3, #0
   13bc2:	e6b9      	b.n	13938 <__aeabi_dmul+0x17c>
   13bc4:	f000 fd1a 	bl	145fc <__clzsi2>
   13bc8:	3020      	adds	r0, #32
   13bca:	e6a6      	b.n	1391a <__aeabi_dmul+0x15e>
   13bcc:	0003      	movs	r3, r0
   13bce:	3b28      	subs	r3, #40	; 0x28
   13bd0:	409f      	lsls	r7, r3
   13bd2:	2300      	movs	r3, #0
   13bd4:	46bb      	mov	fp, r7
   13bd6:	4699      	mov	r9, r3
   13bd8:	e68a      	b.n	138f0 <__aeabi_dmul+0x134>
   13bda:	f000 fd0f 	bl	145fc <__clzsi2>
   13bde:	3020      	adds	r0, #32
   13be0:	e674      	b.n	138cc <__aeabi_dmul+0x110>
   13be2:	46b4      	mov	ip, r6
   13be4:	e7ad      	b.n	13b42 <__aeabi_dmul+0x386>
   13be6:	2501      	movs	r5, #1
   13be8:	1a2a      	subs	r2, r5, r0
   13bea:	2a38      	cmp	r2, #56	; 0x38
   13bec:	dd06      	ble.n	13bfc <__aeabi_dmul+0x440>
   13bee:	9b01      	ldr	r3, [sp, #4]
   13bf0:	2400      	movs	r4, #0
   13bf2:	401d      	ands	r5, r3
   13bf4:	2300      	movs	r3, #0
   13bf6:	2200      	movs	r2, #0
   13bf8:	4699      	mov	r9, r3
   13bfa:	e646      	b.n	1388a <__aeabi_dmul+0xce>
   13bfc:	2a1f      	cmp	r2, #31
   13bfe:	dc21      	bgt.n	13c44 <__aeabi_dmul+0x488>
   13c00:	2520      	movs	r5, #32
   13c02:	0020      	movs	r0, r4
   13c04:	1aad      	subs	r5, r5, r2
   13c06:	001e      	movs	r6, r3
   13c08:	40ab      	lsls	r3, r5
   13c0a:	40a8      	lsls	r0, r5
   13c0c:	40d6      	lsrs	r6, r2
   13c0e:	1e5d      	subs	r5, r3, #1
   13c10:	41ab      	sbcs	r3, r5
   13c12:	4330      	orrs	r0, r6
   13c14:	4318      	orrs	r0, r3
   13c16:	40d4      	lsrs	r4, r2
   13c18:	0743      	lsls	r3, r0, #29
   13c1a:	d009      	beq.n	13c30 <__aeabi_dmul+0x474>
   13c1c:	230f      	movs	r3, #15
   13c1e:	4003      	ands	r3, r0
   13c20:	2b04      	cmp	r3, #4
   13c22:	d005      	beq.n	13c30 <__aeabi_dmul+0x474>
   13c24:	0003      	movs	r3, r0
   13c26:	1d18      	adds	r0, r3, #4
   13c28:	4298      	cmp	r0, r3
   13c2a:	419b      	sbcs	r3, r3
   13c2c:	425b      	negs	r3, r3
   13c2e:	18e4      	adds	r4, r4, r3
   13c30:	0223      	lsls	r3, r4, #8
   13c32:	d521      	bpl.n	13c78 <__aeabi_dmul+0x4bc>
   13c34:	2501      	movs	r5, #1
   13c36:	9b01      	ldr	r3, [sp, #4]
   13c38:	2401      	movs	r4, #1
   13c3a:	401d      	ands	r5, r3
   13c3c:	2300      	movs	r3, #0
   13c3e:	2200      	movs	r2, #0
   13c40:	4699      	mov	r9, r3
   13c42:	e622      	b.n	1388a <__aeabi_dmul+0xce>
   13c44:	251f      	movs	r5, #31
   13c46:	0021      	movs	r1, r4
   13c48:	426d      	negs	r5, r5
   13c4a:	1a28      	subs	r0, r5, r0
   13c4c:	40c1      	lsrs	r1, r0
   13c4e:	0008      	movs	r0, r1
   13c50:	2a20      	cmp	r2, #32
   13c52:	d01d      	beq.n	13c90 <__aeabi_dmul+0x4d4>
   13c54:	355f      	adds	r5, #95	; 0x5f
   13c56:	1aaa      	subs	r2, r5, r2
   13c58:	4094      	lsls	r4, r2
   13c5a:	4323      	orrs	r3, r4
   13c5c:	1e5c      	subs	r4, r3, #1
   13c5e:	41a3      	sbcs	r3, r4
   13c60:	2507      	movs	r5, #7
   13c62:	4303      	orrs	r3, r0
   13c64:	401d      	ands	r5, r3
   13c66:	2200      	movs	r2, #0
   13c68:	2d00      	cmp	r5, #0
   13c6a:	d009      	beq.n	13c80 <__aeabi_dmul+0x4c4>
   13c6c:	220f      	movs	r2, #15
   13c6e:	2400      	movs	r4, #0
   13c70:	401a      	ands	r2, r3
   13c72:	0018      	movs	r0, r3
   13c74:	2a04      	cmp	r2, #4
   13c76:	d1d6      	bne.n	13c26 <__aeabi_dmul+0x46a>
   13c78:	0003      	movs	r3, r0
   13c7a:	0765      	lsls	r5, r4, #29
   13c7c:	0264      	lsls	r4, r4, #9
   13c7e:	0b22      	lsrs	r2, r4, #12
   13c80:	08db      	lsrs	r3, r3, #3
   13c82:	432b      	orrs	r3, r5
   13c84:	2501      	movs	r5, #1
   13c86:	4699      	mov	r9, r3
   13c88:	9b01      	ldr	r3, [sp, #4]
   13c8a:	2400      	movs	r4, #0
   13c8c:	401d      	ands	r5, r3
   13c8e:	e5fc      	b.n	1388a <__aeabi_dmul+0xce>
   13c90:	2400      	movs	r4, #0
   13c92:	e7e2      	b.n	13c5a <__aeabi_dmul+0x49e>
   13c94:	2280      	movs	r2, #128	; 0x80
   13c96:	2501      	movs	r5, #1
   13c98:	0312      	lsls	r2, r2, #12
   13c9a:	4322      	orrs	r2, r4
   13c9c:	9901      	ldr	r1, [sp, #4]
   13c9e:	0312      	lsls	r2, r2, #12
   13ca0:	0b12      	lsrs	r2, r2, #12
   13ca2:	400d      	ands	r5, r1
   13ca4:	4699      	mov	r9, r3
   13ca6:	4c04      	ldr	r4, [pc, #16]	; (13cb8 <__aeabi_dmul+0x4fc>)
   13ca8:	e5ef      	b.n	1388a <__aeabi_dmul+0xce>
   13caa:	46c0      	nop			; (mov r8, r8)
   13cac:	000003ff 	.word	0x000003ff
   13cb0:	feffffff 	.word	0xfeffffff
   13cb4:	000007fe 	.word	0x000007fe
   13cb8:	000007ff 	.word	0x000007ff

00013cbc <__aeabi_dsub>:
   13cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   13cbe:	4646      	mov	r6, r8
   13cc0:	46d6      	mov	lr, sl
   13cc2:	464f      	mov	r7, r9
   13cc4:	030c      	lsls	r4, r1, #12
   13cc6:	b5c0      	push	{r6, r7, lr}
   13cc8:	0fcd      	lsrs	r5, r1, #31
   13cca:	004e      	lsls	r6, r1, #1
   13ccc:	0a61      	lsrs	r1, r4, #9
   13cce:	0f44      	lsrs	r4, r0, #29
   13cd0:	430c      	orrs	r4, r1
   13cd2:	00c1      	lsls	r1, r0, #3
   13cd4:	0058      	lsls	r0, r3, #1
   13cd6:	0d40      	lsrs	r0, r0, #21
   13cd8:	4684      	mov	ip, r0
   13cda:	468a      	mov	sl, r1
   13cdc:	000f      	movs	r7, r1
   13cde:	0319      	lsls	r1, r3, #12
   13ce0:	0f50      	lsrs	r0, r2, #29
   13ce2:	0a49      	lsrs	r1, r1, #9
   13ce4:	4301      	orrs	r1, r0
   13ce6:	48c6      	ldr	r0, [pc, #792]	; (14000 <__aeabi_dsub+0x344>)
   13ce8:	0d76      	lsrs	r6, r6, #21
   13cea:	46a8      	mov	r8, r5
   13cec:	0fdb      	lsrs	r3, r3, #31
   13cee:	00d2      	lsls	r2, r2, #3
   13cf0:	4584      	cmp	ip, r0
   13cf2:	d100      	bne.n	13cf6 <__aeabi_dsub+0x3a>
   13cf4:	e0d8      	b.n	13ea8 <__aeabi_dsub+0x1ec>
   13cf6:	2001      	movs	r0, #1
   13cf8:	4043      	eors	r3, r0
   13cfa:	42ab      	cmp	r3, r5
   13cfc:	d100      	bne.n	13d00 <__aeabi_dsub+0x44>
   13cfe:	e0a6      	b.n	13e4e <__aeabi_dsub+0x192>
   13d00:	4660      	mov	r0, ip
   13d02:	1a35      	subs	r5, r6, r0
   13d04:	2d00      	cmp	r5, #0
   13d06:	dc00      	bgt.n	13d0a <__aeabi_dsub+0x4e>
   13d08:	e105      	b.n	13f16 <__aeabi_dsub+0x25a>
   13d0a:	2800      	cmp	r0, #0
   13d0c:	d110      	bne.n	13d30 <__aeabi_dsub+0x74>
   13d0e:	000b      	movs	r3, r1
   13d10:	4313      	orrs	r3, r2
   13d12:	d100      	bne.n	13d16 <__aeabi_dsub+0x5a>
   13d14:	e0d7      	b.n	13ec6 <__aeabi_dsub+0x20a>
   13d16:	1e6b      	subs	r3, r5, #1
   13d18:	2b00      	cmp	r3, #0
   13d1a:	d000      	beq.n	13d1e <__aeabi_dsub+0x62>
   13d1c:	e14b      	b.n	13fb6 <__aeabi_dsub+0x2fa>
   13d1e:	4653      	mov	r3, sl
   13d20:	1a9f      	subs	r7, r3, r2
   13d22:	45ba      	cmp	sl, r7
   13d24:	4180      	sbcs	r0, r0
   13d26:	1a64      	subs	r4, r4, r1
   13d28:	4240      	negs	r0, r0
   13d2a:	1a24      	subs	r4, r4, r0
   13d2c:	2601      	movs	r6, #1
   13d2e:	e01e      	b.n	13d6e <__aeabi_dsub+0xb2>
   13d30:	4bb3      	ldr	r3, [pc, #716]	; (14000 <__aeabi_dsub+0x344>)
   13d32:	429e      	cmp	r6, r3
   13d34:	d048      	beq.n	13dc8 <__aeabi_dsub+0x10c>
   13d36:	2380      	movs	r3, #128	; 0x80
   13d38:	041b      	lsls	r3, r3, #16
   13d3a:	4319      	orrs	r1, r3
   13d3c:	2d38      	cmp	r5, #56	; 0x38
   13d3e:	dd00      	ble.n	13d42 <__aeabi_dsub+0x86>
   13d40:	e119      	b.n	13f76 <__aeabi_dsub+0x2ba>
   13d42:	2d1f      	cmp	r5, #31
   13d44:	dd00      	ble.n	13d48 <__aeabi_dsub+0x8c>
   13d46:	e14c      	b.n	13fe2 <__aeabi_dsub+0x326>
   13d48:	2320      	movs	r3, #32
   13d4a:	000f      	movs	r7, r1
   13d4c:	1b5b      	subs	r3, r3, r5
   13d4e:	0010      	movs	r0, r2
   13d50:	409a      	lsls	r2, r3
   13d52:	409f      	lsls	r7, r3
   13d54:	40e8      	lsrs	r0, r5
   13d56:	1e53      	subs	r3, r2, #1
   13d58:	419a      	sbcs	r2, r3
   13d5a:	40e9      	lsrs	r1, r5
   13d5c:	4307      	orrs	r7, r0
   13d5e:	4317      	orrs	r7, r2
   13d60:	4653      	mov	r3, sl
   13d62:	1bdf      	subs	r7, r3, r7
   13d64:	1a61      	subs	r1, r4, r1
   13d66:	45ba      	cmp	sl, r7
   13d68:	41a4      	sbcs	r4, r4
   13d6a:	4264      	negs	r4, r4
   13d6c:	1b0c      	subs	r4, r1, r4
   13d6e:	0223      	lsls	r3, r4, #8
   13d70:	d400      	bmi.n	13d74 <__aeabi_dsub+0xb8>
   13d72:	e0c5      	b.n	13f00 <__aeabi_dsub+0x244>
   13d74:	0264      	lsls	r4, r4, #9
   13d76:	0a65      	lsrs	r5, r4, #9
   13d78:	2d00      	cmp	r5, #0
   13d7a:	d100      	bne.n	13d7e <__aeabi_dsub+0xc2>
   13d7c:	e0f6      	b.n	13f6c <__aeabi_dsub+0x2b0>
   13d7e:	0028      	movs	r0, r5
   13d80:	f000 fc3c 	bl	145fc <__clzsi2>
   13d84:	0003      	movs	r3, r0
   13d86:	3b08      	subs	r3, #8
   13d88:	2b1f      	cmp	r3, #31
   13d8a:	dd00      	ble.n	13d8e <__aeabi_dsub+0xd2>
   13d8c:	e0e9      	b.n	13f62 <__aeabi_dsub+0x2a6>
   13d8e:	2220      	movs	r2, #32
   13d90:	003c      	movs	r4, r7
   13d92:	1ad2      	subs	r2, r2, r3
   13d94:	409d      	lsls	r5, r3
   13d96:	40d4      	lsrs	r4, r2
   13d98:	409f      	lsls	r7, r3
   13d9a:	4325      	orrs	r5, r4
   13d9c:	429e      	cmp	r6, r3
   13d9e:	dd00      	ble.n	13da2 <__aeabi_dsub+0xe6>
   13da0:	e0db      	b.n	13f5a <__aeabi_dsub+0x29e>
   13da2:	1b9e      	subs	r6, r3, r6
   13da4:	1c73      	adds	r3, r6, #1
   13da6:	2b1f      	cmp	r3, #31
   13da8:	dd00      	ble.n	13dac <__aeabi_dsub+0xf0>
   13daa:	e10a      	b.n	13fc2 <__aeabi_dsub+0x306>
   13dac:	2220      	movs	r2, #32
   13dae:	0038      	movs	r0, r7
   13db0:	1ad2      	subs	r2, r2, r3
   13db2:	0029      	movs	r1, r5
   13db4:	4097      	lsls	r7, r2
   13db6:	002c      	movs	r4, r5
   13db8:	4091      	lsls	r1, r2
   13dba:	40d8      	lsrs	r0, r3
   13dbc:	1e7a      	subs	r2, r7, #1
   13dbe:	4197      	sbcs	r7, r2
   13dc0:	40dc      	lsrs	r4, r3
   13dc2:	2600      	movs	r6, #0
   13dc4:	4301      	orrs	r1, r0
   13dc6:	430f      	orrs	r7, r1
   13dc8:	077b      	lsls	r3, r7, #29
   13dca:	d009      	beq.n	13de0 <__aeabi_dsub+0x124>
   13dcc:	230f      	movs	r3, #15
   13dce:	403b      	ands	r3, r7
   13dd0:	2b04      	cmp	r3, #4
   13dd2:	d005      	beq.n	13de0 <__aeabi_dsub+0x124>
   13dd4:	1d3b      	adds	r3, r7, #4
   13dd6:	42bb      	cmp	r3, r7
   13dd8:	41bf      	sbcs	r7, r7
   13dda:	427f      	negs	r7, r7
   13ddc:	19e4      	adds	r4, r4, r7
   13dde:	001f      	movs	r7, r3
   13de0:	0223      	lsls	r3, r4, #8
   13de2:	d525      	bpl.n	13e30 <__aeabi_dsub+0x174>
   13de4:	4b86      	ldr	r3, [pc, #536]	; (14000 <__aeabi_dsub+0x344>)
   13de6:	3601      	adds	r6, #1
   13de8:	429e      	cmp	r6, r3
   13dea:	d100      	bne.n	13dee <__aeabi_dsub+0x132>
   13dec:	e0af      	b.n	13f4e <__aeabi_dsub+0x292>
   13dee:	4b85      	ldr	r3, [pc, #532]	; (14004 <__aeabi_dsub+0x348>)
   13df0:	2501      	movs	r5, #1
   13df2:	401c      	ands	r4, r3
   13df4:	4643      	mov	r3, r8
   13df6:	0762      	lsls	r2, r4, #29
   13df8:	08ff      	lsrs	r7, r7, #3
   13dfa:	0264      	lsls	r4, r4, #9
   13dfc:	0576      	lsls	r6, r6, #21
   13dfe:	4317      	orrs	r7, r2
   13e00:	0b24      	lsrs	r4, r4, #12
   13e02:	0d76      	lsrs	r6, r6, #21
   13e04:	401d      	ands	r5, r3
   13e06:	2100      	movs	r1, #0
   13e08:	0324      	lsls	r4, r4, #12
   13e0a:	0b23      	lsrs	r3, r4, #12
   13e0c:	0d0c      	lsrs	r4, r1, #20
   13e0e:	4a7e      	ldr	r2, [pc, #504]	; (14008 <__aeabi_dsub+0x34c>)
   13e10:	0524      	lsls	r4, r4, #20
   13e12:	431c      	orrs	r4, r3
   13e14:	4014      	ands	r4, r2
   13e16:	0533      	lsls	r3, r6, #20
   13e18:	4323      	orrs	r3, r4
   13e1a:	005b      	lsls	r3, r3, #1
   13e1c:	07ed      	lsls	r5, r5, #31
   13e1e:	085b      	lsrs	r3, r3, #1
   13e20:	432b      	orrs	r3, r5
   13e22:	0038      	movs	r0, r7
   13e24:	0019      	movs	r1, r3
   13e26:	bc1c      	pop	{r2, r3, r4}
   13e28:	4690      	mov	r8, r2
   13e2a:	4699      	mov	r9, r3
   13e2c:	46a2      	mov	sl, r4
   13e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13e30:	2501      	movs	r5, #1
   13e32:	4643      	mov	r3, r8
   13e34:	0762      	lsls	r2, r4, #29
   13e36:	08ff      	lsrs	r7, r7, #3
   13e38:	4317      	orrs	r7, r2
   13e3a:	08e4      	lsrs	r4, r4, #3
   13e3c:	401d      	ands	r5, r3
   13e3e:	4b70      	ldr	r3, [pc, #448]	; (14000 <__aeabi_dsub+0x344>)
   13e40:	429e      	cmp	r6, r3
   13e42:	d036      	beq.n	13eb2 <__aeabi_dsub+0x1f6>
   13e44:	0324      	lsls	r4, r4, #12
   13e46:	0576      	lsls	r6, r6, #21
   13e48:	0b24      	lsrs	r4, r4, #12
   13e4a:	0d76      	lsrs	r6, r6, #21
   13e4c:	e7db      	b.n	13e06 <__aeabi_dsub+0x14a>
   13e4e:	4663      	mov	r3, ip
   13e50:	1af3      	subs	r3, r6, r3
   13e52:	2b00      	cmp	r3, #0
   13e54:	dc00      	bgt.n	13e58 <__aeabi_dsub+0x19c>
   13e56:	e094      	b.n	13f82 <__aeabi_dsub+0x2c6>
   13e58:	4660      	mov	r0, ip
   13e5a:	2800      	cmp	r0, #0
   13e5c:	d035      	beq.n	13eca <__aeabi_dsub+0x20e>
   13e5e:	4868      	ldr	r0, [pc, #416]	; (14000 <__aeabi_dsub+0x344>)
   13e60:	4286      	cmp	r6, r0
   13e62:	d0b1      	beq.n	13dc8 <__aeabi_dsub+0x10c>
   13e64:	2780      	movs	r7, #128	; 0x80
   13e66:	043f      	lsls	r7, r7, #16
   13e68:	4339      	orrs	r1, r7
   13e6a:	2b38      	cmp	r3, #56	; 0x38
   13e6c:	dc00      	bgt.n	13e70 <__aeabi_dsub+0x1b4>
   13e6e:	e0fd      	b.n	1406c <__aeabi_dsub+0x3b0>
   13e70:	430a      	orrs	r2, r1
   13e72:	0017      	movs	r7, r2
   13e74:	2100      	movs	r1, #0
   13e76:	1e7a      	subs	r2, r7, #1
   13e78:	4197      	sbcs	r7, r2
   13e7a:	4457      	add	r7, sl
   13e7c:	4557      	cmp	r7, sl
   13e7e:	4180      	sbcs	r0, r0
   13e80:	1909      	adds	r1, r1, r4
   13e82:	4244      	negs	r4, r0
   13e84:	190c      	adds	r4, r1, r4
   13e86:	0223      	lsls	r3, r4, #8
   13e88:	d53a      	bpl.n	13f00 <__aeabi_dsub+0x244>
   13e8a:	4b5d      	ldr	r3, [pc, #372]	; (14000 <__aeabi_dsub+0x344>)
   13e8c:	3601      	adds	r6, #1
   13e8e:	429e      	cmp	r6, r3
   13e90:	d100      	bne.n	13e94 <__aeabi_dsub+0x1d8>
   13e92:	e14b      	b.n	1412c <__aeabi_dsub+0x470>
   13e94:	2201      	movs	r2, #1
   13e96:	4b5b      	ldr	r3, [pc, #364]	; (14004 <__aeabi_dsub+0x348>)
   13e98:	401c      	ands	r4, r3
   13e9a:	087b      	lsrs	r3, r7, #1
   13e9c:	4017      	ands	r7, r2
   13e9e:	431f      	orrs	r7, r3
   13ea0:	07e2      	lsls	r2, r4, #31
   13ea2:	4317      	orrs	r7, r2
   13ea4:	0864      	lsrs	r4, r4, #1
   13ea6:	e78f      	b.n	13dc8 <__aeabi_dsub+0x10c>
   13ea8:	0008      	movs	r0, r1
   13eaa:	4310      	orrs	r0, r2
   13eac:	d000      	beq.n	13eb0 <__aeabi_dsub+0x1f4>
   13eae:	e724      	b.n	13cfa <__aeabi_dsub+0x3e>
   13eb0:	e721      	b.n	13cf6 <__aeabi_dsub+0x3a>
   13eb2:	0023      	movs	r3, r4
   13eb4:	433b      	orrs	r3, r7
   13eb6:	d100      	bne.n	13eba <__aeabi_dsub+0x1fe>
   13eb8:	e1b9      	b.n	1422e <__aeabi_dsub+0x572>
   13eba:	2280      	movs	r2, #128	; 0x80
   13ebc:	0312      	lsls	r2, r2, #12
   13ebe:	4314      	orrs	r4, r2
   13ec0:	0324      	lsls	r4, r4, #12
   13ec2:	0b24      	lsrs	r4, r4, #12
   13ec4:	e79f      	b.n	13e06 <__aeabi_dsub+0x14a>
   13ec6:	002e      	movs	r6, r5
   13ec8:	e77e      	b.n	13dc8 <__aeabi_dsub+0x10c>
   13eca:	0008      	movs	r0, r1
   13ecc:	4310      	orrs	r0, r2
   13ece:	d100      	bne.n	13ed2 <__aeabi_dsub+0x216>
   13ed0:	e0ca      	b.n	14068 <__aeabi_dsub+0x3ac>
   13ed2:	1e58      	subs	r0, r3, #1
   13ed4:	4684      	mov	ip, r0
   13ed6:	2800      	cmp	r0, #0
   13ed8:	d000      	beq.n	13edc <__aeabi_dsub+0x220>
   13eda:	e0e7      	b.n	140ac <__aeabi_dsub+0x3f0>
   13edc:	4452      	add	r2, sl
   13ede:	4552      	cmp	r2, sl
   13ee0:	4180      	sbcs	r0, r0
   13ee2:	1864      	adds	r4, r4, r1
   13ee4:	4240      	negs	r0, r0
   13ee6:	1824      	adds	r4, r4, r0
   13ee8:	0017      	movs	r7, r2
   13eea:	2601      	movs	r6, #1
   13eec:	0223      	lsls	r3, r4, #8
   13eee:	d507      	bpl.n	13f00 <__aeabi_dsub+0x244>
   13ef0:	2602      	movs	r6, #2
   13ef2:	e7cf      	b.n	13e94 <__aeabi_dsub+0x1d8>
   13ef4:	4664      	mov	r4, ip
   13ef6:	432c      	orrs	r4, r5
   13ef8:	d100      	bne.n	13efc <__aeabi_dsub+0x240>
   13efa:	e1b3      	b.n	14264 <__aeabi_dsub+0x5a8>
   13efc:	002c      	movs	r4, r5
   13efe:	4667      	mov	r7, ip
   13f00:	077b      	lsls	r3, r7, #29
   13f02:	d000      	beq.n	13f06 <__aeabi_dsub+0x24a>
   13f04:	e762      	b.n	13dcc <__aeabi_dsub+0x110>
   13f06:	0763      	lsls	r3, r4, #29
   13f08:	08ff      	lsrs	r7, r7, #3
   13f0a:	431f      	orrs	r7, r3
   13f0c:	2501      	movs	r5, #1
   13f0e:	4643      	mov	r3, r8
   13f10:	08e4      	lsrs	r4, r4, #3
   13f12:	401d      	ands	r5, r3
   13f14:	e793      	b.n	13e3e <__aeabi_dsub+0x182>
   13f16:	2d00      	cmp	r5, #0
   13f18:	d178      	bne.n	1400c <__aeabi_dsub+0x350>
   13f1a:	1c75      	adds	r5, r6, #1
   13f1c:	056d      	lsls	r5, r5, #21
   13f1e:	0d6d      	lsrs	r5, r5, #21
   13f20:	2d01      	cmp	r5, #1
   13f22:	dc00      	bgt.n	13f26 <__aeabi_dsub+0x26a>
   13f24:	e0f2      	b.n	1410c <__aeabi_dsub+0x450>
   13f26:	4650      	mov	r0, sl
   13f28:	1a80      	subs	r0, r0, r2
   13f2a:	4582      	cmp	sl, r0
   13f2c:	41bf      	sbcs	r7, r7
   13f2e:	1a65      	subs	r5, r4, r1
   13f30:	427f      	negs	r7, r7
   13f32:	1bed      	subs	r5, r5, r7
   13f34:	4684      	mov	ip, r0
   13f36:	0228      	lsls	r0, r5, #8
   13f38:	d400      	bmi.n	13f3c <__aeabi_dsub+0x280>
   13f3a:	e08c      	b.n	14056 <__aeabi_dsub+0x39a>
   13f3c:	4650      	mov	r0, sl
   13f3e:	1a17      	subs	r7, r2, r0
   13f40:	42ba      	cmp	r2, r7
   13f42:	4192      	sbcs	r2, r2
   13f44:	1b0c      	subs	r4, r1, r4
   13f46:	4255      	negs	r5, r2
   13f48:	1b65      	subs	r5, r4, r5
   13f4a:	4698      	mov	r8, r3
   13f4c:	e714      	b.n	13d78 <__aeabi_dsub+0xbc>
   13f4e:	2501      	movs	r5, #1
   13f50:	4643      	mov	r3, r8
   13f52:	2400      	movs	r4, #0
   13f54:	401d      	ands	r5, r3
   13f56:	2700      	movs	r7, #0
   13f58:	e755      	b.n	13e06 <__aeabi_dsub+0x14a>
   13f5a:	4c2a      	ldr	r4, [pc, #168]	; (14004 <__aeabi_dsub+0x348>)
   13f5c:	1af6      	subs	r6, r6, r3
   13f5e:	402c      	ands	r4, r5
   13f60:	e732      	b.n	13dc8 <__aeabi_dsub+0x10c>
   13f62:	003d      	movs	r5, r7
   13f64:	3828      	subs	r0, #40	; 0x28
   13f66:	4085      	lsls	r5, r0
   13f68:	2700      	movs	r7, #0
   13f6a:	e717      	b.n	13d9c <__aeabi_dsub+0xe0>
   13f6c:	0038      	movs	r0, r7
   13f6e:	f000 fb45 	bl	145fc <__clzsi2>
   13f72:	3020      	adds	r0, #32
   13f74:	e706      	b.n	13d84 <__aeabi_dsub+0xc8>
   13f76:	430a      	orrs	r2, r1
   13f78:	0017      	movs	r7, r2
   13f7a:	2100      	movs	r1, #0
   13f7c:	1e7a      	subs	r2, r7, #1
   13f7e:	4197      	sbcs	r7, r2
   13f80:	e6ee      	b.n	13d60 <__aeabi_dsub+0xa4>
   13f82:	2b00      	cmp	r3, #0
   13f84:	d000      	beq.n	13f88 <__aeabi_dsub+0x2cc>
   13f86:	e0e5      	b.n	14154 <__aeabi_dsub+0x498>
   13f88:	1c73      	adds	r3, r6, #1
   13f8a:	469c      	mov	ip, r3
   13f8c:	055b      	lsls	r3, r3, #21
   13f8e:	0d5b      	lsrs	r3, r3, #21
   13f90:	2b01      	cmp	r3, #1
   13f92:	dc00      	bgt.n	13f96 <__aeabi_dsub+0x2da>
   13f94:	e09f      	b.n	140d6 <__aeabi_dsub+0x41a>
   13f96:	4b1a      	ldr	r3, [pc, #104]	; (14000 <__aeabi_dsub+0x344>)
   13f98:	459c      	cmp	ip, r3
   13f9a:	d100      	bne.n	13f9e <__aeabi_dsub+0x2e2>
   13f9c:	e0c5      	b.n	1412a <__aeabi_dsub+0x46e>
   13f9e:	4452      	add	r2, sl
   13fa0:	4552      	cmp	r2, sl
   13fa2:	4180      	sbcs	r0, r0
   13fa4:	1864      	adds	r4, r4, r1
   13fa6:	4240      	negs	r0, r0
   13fa8:	1824      	adds	r4, r4, r0
   13faa:	07e7      	lsls	r7, r4, #31
   13fac:	0852      	lsrs	r2, r2, #1
   13fae:	4317      	orrs	r7, r2
   13fb0:	0864      	lsrs	r4, r4, #1
   13fb2:	4666      	mov	r6, ip
   13fb4:	e708      	b.n	13dc8 <__aeabi_dsub+0x10c>
   13fb6:	4812      	ldr	r0, [pc, #72]	; (14000 <__aeabi_dsub+0x344>)
   13fb8:	4285      	cmp	r5, r0
   13fba:	d100      	bne.n	13fbe <__aeabi_dsub+0x302>
   13fbc:	e085      	b.n	140ca <__aeabi_dsub+0x40e>
   13fbe:	001d      	movs	r5, r3
   13fc0:	e6bc      	b.n	13d3c <__aeabi_dsub+0x80>
   13fc2:	0029      	movs	r1, r5
   13fc4:	3e1f      	subs	r6, #31
   13fc6:	40f1      	lsrs	r1, r6
   13fc8:	2b20      	cmp	r3, #32
   13fca:	d100      	bne.n	13fce <__aeabi_dsub+0x312>
   13fcc:	e07f      	b.n	140ce <__aeabi_dsub+0x412>
   13fce:	2240      	movs	r2, #64	; 0x40
   13fd0:	1ad3      	subs	r3, r2, r3
   13fd2:	409d      	lsls	r5, r3
   13fd4:	432f      	orrs	r7, r5
   13fd6:	1e7d      	subs	r5, r7, #1
   13fd8:	41af      	sbcs	r7, r5
   13fda:	2400      	movs	r4, #0
   13fdc:	430f      	orrs	r7, r1
   13fde:	2600      	movs	r6, #0
   13fe0:	e78e      	b.n	13f00 <__aeabi_dsub+0x244>
   13fe2:	002b      	movs	r3, r5
   13fe4:	000f      	movs	r7, r1
   13fe6:	3b20      	subs	r3, #32
   13fe8:	40df      	lsrs	r7, r3
   13fea:	2d20      	cmp	r5, #32
   13fec:	d071      	beq.n	140d2 <__aeabi_dsub+0x416>
   13fee:	2340      	movs	r3, #64	; 0x40
   13ff0:	1b5d      	subs	r5, r3, r5
   13ff2:	40a9      	lsls	r1, r5
   13ff4:	430a      	orrs	r2, r1
   13ff6:	1e51      	subs	r1, r2, #1
   13ff8:	418a      	sbcs	r2, r1
   13ffa:	2100      	movs	r1, #0
   13ffc:	4317      	orrs	r7, r2
   13ffe:	e6af      	b.n	13d60 <__aeabi_dsub+0xa4>
   14000:	000007ff 	.word	0x000007ff
   14004:	ff7fffff 	.word	0xff7fffff
   14008:	800fffff 	.word	0x800fffff
   1400c:	2e00      	cmp	r6, #0
   1400e:	d03e      	beq.n	1408e <__aeabi_dsub+0x3d2>
   14010:	4eb3      	ldr	r6, [pc, #716]	; (142e0 <__aeabi_dsub+0x624>)
   14012:	45b4      	cmp	ip, r6
   14014:	d045      	beq.n	140a2 <__aeabi_dsub+0x3e6>
   14016:	2680      	movs	r6, #128	; 0x80
   14018:	0436      	lsls	r6, r6, #16
   1401a:	426d      	negs	r5, r5
   1401c:	4334      	orrs	r4, r6
   1401e:	2d38      	cmp	r5, #56	; 0x38
   14020:	dd00      	ble.n	14024 <__aeabi_dsub+0x368>
   14022:	e0a8      	b.n	14176 <__aeabi_dsub+0x4ba>
   14024:	2d1f      	cmp	r5, #31
   14026:	dd00      	ble.n	1402a <__aeabi_dsub+0x36e>
   14028:	e11f      	b.n	1426a <__aeabi_dsub+0x5ae>
   1402a:	2620      	movs	r6, #32
   1402c:	0027      	movs	r7, r4
   1402e:	4650      	mov	r0, sl
   14030:	1b76      	subs	r6, r6, r5
   14032:	40b7      	lsls	r7, r6
   14034:	40e8      	lsrs	r0, r5
   14036:	4307      	orrs	r7, r0
   14038:	4650      	mov	r0, sl
   1403a:	40b0      	lsls	r0, r6
   1403c:	1e46      	subs	r6, r0, #1
   1403e:	41b0      	sbcs	r0, r6
   14040:	40ec      	lsrs	r4, r5
   14042:	4338      	orrs	r0, r7
   14044:	1a17      	subs	r7, r2, r0
   14046:	42ba      	cmp	r2, r7
   14048:	4192      	sbcs	r2, r2
   1404a:	1b0c      	subs	r4, r1, r4
   1404c:	4252      	negs	r2, r2
   1404e:	1aa4      	subs	r4, r4, r2
   14050:	4666      	mov	r6, ip
   14052:	4698      	mov	r8, r3
   14054:	e68b      	b.n	13d6e <__aeabi_dsub+0xb2>
   14056:	4664      	mov	r4, ip
   14058:	4667      	mov	r7, ip
   1405a:	432c      	orrs	r4, r5
   1405c:	d000      	beq.n	14060 <__aeabi_dsub+0x3a4>
   1405e:	e68b      	b.n	13d78 <__aeabi_dsub+0xbc>
   14060:	2500      	movs	r5, #0
   14062:	2600      	movs	r6, #0
   14064:	2700      	movs	r7, #0
   14066:	e6ea      	b.n	13e3e <__aeabi_dsub+0x182>
   14068:	001e      	movs	r6, r3
   1406a:	e6ad      	b.n	13dc8 <__aeabi_dsub+0x10c>
   1406c:	2b1f      	cmp	r3, #31
   1406e:	dc60      	bgt.n	14132 <__aeabi_dsub+0x476>
   14070:	2720      	movs	r7, #32
   14072:	1af8      	subs	r0, r7, r3
   14074:	000f      	movs	r7, r1
   14076:	4684      	mov	ip, r0
   14078:	4087      	lsls	r7, r0
   1407a:	0010      	movs	r0, r2
   1407c:	40d8      	lsrs	r0, r3
   1407e:	4307      	orrs	r7, r0
   14080:	4660      	mov	r0, ip
   14082:	4082      	lsls	r2, r0
   14084:	1e50      	subs	r0, r2, #1
   14086:	4182      	sbcs	r2, r0
   14088:	40d9      	lsrs	r1, r3
   1408a:	4317      	orrs	r7, r2
   1408c:	e6f5      	b.n	13e7a <__aeabi_dsub+0x1be>
   1408e:	0026      	movs	r6, r4
   14090:	4650      	mov	r0, sl
   14092:	4306      	orrs	r6, r0
   14094:	d005      	beq.n	140a2 <__aeabi_dsub+0x3e6>
   14096:	43ed      	mvns	r5, r5
   14098:	2d00      	cmp	r5, #0
   1409a:	d0d3      	beq.n	14044 <__aeabi_dsub+0x388>
   1409c:	4e90      	ldr	r6, [pc, #576]	; (142e0 <__aeabi_dsub+0x624>)
   1409e:	45b4      	cmp	ip, r6
   140a0:	d1bd      	bne.n	1401e <__aeabi_dsub+0x362>
   140a2:	000c      	movs	r4, r1
   140a4:	0017      	movs	r7, r2
   140a6:	4666      	mov	r6, ip
   140a8:	4698      	mov	r8, r3
   140aa:	e68d      	b.n	13dc8 <__aeabi_dsub+0x10c>
   140ac:	488c      	ldr	r0, [pc, #560]	; (142e0 <__aeabi_dsub+0x624>)
   140ae:	4283      	cmp	r3, r0
   140b0:	d00b      	beq.n	140ca <__aeabi_dsub+0x40e>
   140b2:	4663      	mov	r3, ip
   140b4:	e6d9      	b.n	13e6a <__aeabi_dsub+0x1ae>
   140b6:	2d00      	cmp	r5, #0
   140b8:	d000      	beq.n	140bc <__aeabi_dsub+0x400>
   140ba:	e096      	b.n	141ea <__aeabi_dsub+0x52e>
   140bc:	0008      	movs	r0, r1
   140be:	4310      	orrs	r0, r2
   140c0:	d100      	bne.n	140c4 <__aeabi_dsub+0x408>
   140c2:	e0e2      	b.n	1428a <__aeabi_dsub+0x5ce>
   140c4:	000c      	movs	r4, r1
   140c6:	0017      	movs	r7, r2
   140c8:	4698      	mov	r8, r3
   140ca:	4e85      	ldr	r6, [pc, #532]	; (142e0 <__aeabi_dsub+0x624>)
   140cc:	e67c      	b.n	13dc8 <__aeabi_dsub+0x10c>
   140ce:	2500      	movs	r5, #0
   140d0:	e780      	b.n	13fd4 <__aeabi_dsub+0x318>
   140d2:	2100      	movs	r1, #0
   140d4:	e78e      	b.n	13ff4 <__aeabi_dsub+0x338>
   140d6:	0023      	movs	r3, r4
   140d8:	4650      	mov	r0, sl
   140da:	4303      	orrs	r3, r0
   140dc:	2e00      	cmp	r6, #0
   140de:	d000      	beq.n	140e2 <__aeabi_dsub+0x426>
   140e0:	e0a8      	b.n	14234 <__aeabi_dsub+0x578>
   140e2:	2b00      	cmp	r3, #0
   140e4:	d100      	bne.n	140e8 <__aeabi_dsub+0x42c>
   140e6:	e0de      	b.n	142a6 <__aeabi_dsub+0x5ea>
   140e8:	000b      	movs	r3, r1
   140ea:	4313      	orrs	r3, r2
   140ec:	d100      	bne.n	140f0 <__aeabi_dsub+0x434>
   140ee:	e66b      	b.n	13dc8 <__aeabi_dsub+0x10c>
   140f0:	4452      	add	r2, sl
   140f2:	4552      	cmp	r2, sl
   140f4:	4180      	sbcs	r0, r0
   140f6:	1864      	adds	r4, r4, r1
   140f8:	4240      	negs	r0, r0
   140fa:	1824      	adds	r4, r4, r0
   140fc:	0017      	movs	r7, r2
   140fe:	0223      	lsls	r3, r4, #8
   14100:	d400      	bmi.n	14104 <__aeabi_dsub+0x448>
   14102:	e6fd      	b.n	13f00 <__aeabi_dsub+0x244>
   14104:	4b77      	ldr	r3, [pc, #476]	; (142e4 <__aeabi_dsub+0x628>)
   14106:	4666      	mov	r6, ip
   14108:	401c      	ands	r4, r3
   1410a:	e65d      	b.n	13dc8 <__aeabi_dsub+0x10c>
   1410c:	0025      	movs	r5, r4
   1410e:	4650      	mov	r0, sl
   14110:	4305      	orrs	r5, r0
   14112:	2e00      	cmp	r6, #0
   14114:	d1cf      	bne.n	140b6 <__aeabi_dsub+0x3fa>
   14116:	2d00      	cmp	r5, #0
   14118:	d14f      	bne.n	141ba <__aeabi_dsub+0x4fe>
   1411a:	000c      	movs	r4, r1
   1411c:	4314      	orrs	r4, r2
   1411e:	d100      	bne.n	14122 <__aeabi_dsub+0x466>
   14120:	e0a0      	b.n	14264 <__aeabi_dsub+0x5a8>
   14122:	000c      	movs	r4, r1
   14124:	0017      	movs	r7, r2
   14126:	4698      	mov	r8, r3
   14128:	e64e      	b.n	13dc8 <__aeabi_dsub+0x10c>
   1412a:	4666      	mov	r6, ip
   1412c:	2400      	movs	r4, #0
   1412e:	2700      	movs	r7, #0
   14130:	e685      	b.n	13e3e <__aeabi_dsub+0x182>
   14132:	001f      	movs	r7, r3
   14134:	0008      	movs	r0, r1
   14136:	3f20      	subs	r7, #32
   14138:	40f8      	lsrs	r0, r7
   1413a:	0007      	movs	r7, r0
   1413c:	2b20      	cmp	r3, #32
   1413e:	d100      	bne.n	14142 <__aeabi_dsub+0x486>
   14140:	e08e      	b.n	14260 <__aeabi_dsub+0x5a4>
   14142:	2040      	movs	r0, #64	; 0x40
   14144:	1ac3      	subs	r3, r0, r3
   14146:	4099      	lsls	r1, r3
   14148:	430a      	orrs	r2, r1
   1414a:	1e51      	subs	r1, r2, #1
   1414c:	418a      	sbcs	r2, r1
   1414e:	2100      	movs	r1, #0
   14150:	4317      	orrs	r7, r2
   14152:	e692      	b.n	13e7a <__aeabi_dsub+0x1be>
   14154:	2e00      	cmp	r6, #0
   14156:	d114      	bne.n	14182 <__aeabi_dsub+0x4c6>
   14158:	0026      	movs	r6, r4
   1415a:	4650      	mov	r0, sl
   1415c:	4306      	orrs	r6, r0
   1415e:	d062      	beq.n	14226 <__aeabi_dsub+0x56a>
   14160:	43db      	mvns	r3, r3
   14162:	2b00      	cmp	r3, #0
   14164:	d15c      	bne.n	14220 <__aeabi_dsub+0x564>
   14166:	1887      	adds	r7, r0, r2
   14168:	4297      	cmp	r7, r2
   1416a:	4192      	sbcs	r2, r2
   1416c:	1864      	adds	r4, r4, r1
   1416e:	4252      	negs	r2, r2
   14170:	18a4      	adds	r4, r4, r2
   14172:	4666      	mov	r6, ip
   14174:	e687      	b.n	13e86 <__aeabi_dsub+0x1ca>
   14176:	4650      	mov	r0, sl
   14178:	4320      	orrs	r0, r4
   1417a:	1e44      	subs	r4, r0, #1
   1417c:	41a0      	sbcs	r0, r4
   1417e:	2400      	movs	r4, #0
   14180:	e760      	b.n	14044 <__aeabi_dsub+0x388>
   14182:	4e57      	ldr	r6, [pc, #348]	; (142e0 <__aeabi_dsub+0x624>)
   14184:	45b4      	cmp	ip, r6
   14186:	d04e      	beq.n	14226 <__aeabi_dsub+0x56a>
   14188:	2680      	movs	r6, #128	; 0x80
   1418a:	0436      	lsls	r6, r6, #16
   1418c:	425b      	negs	r3, r3
   1418e:	4334      	orrs	r4, r6
   14190:	2b38      	cmp	r3, #56	; 0x38
   14192:	dd00      	ble.n	14196 <__aeabi_dsub+0x4da>
   14194:	e07f      	b.n	14296 <__aeabi_dsub+0x5da>
   14196:	2b1f      	cmp	r3, #31
   14198:	dd00      	ble.n	1419c <__aeabi_dsub+0x4e0>
   1419a:	e08b      	b.n	142b4 <__aeabi_dsub+0x5f8>
   1419c:	2620      	movs	r6, #32
   1419e:	0027      	movs	r7, r4
   141a0:	4650      	mov	r0, sl
   141a2:	1af6      	subs	r6, r6, r3
   141a4:	40b7      	lsls	r7, r6
   141a6:	40d8      	lsrs	r0, r3
   141a8:	4307      	orrs	r7, r0
   141aa:	4650      	mov	r0, sl
   141ac:	40b0      	lsls	r0, r6
   141ae:	1e46      	subs	r6, r0, #1
   141b0:	41b0      	sbcs	r0, r6
   141b2:	4307      	orrs	r7, r0
   141b4:	40dc      	lsrs	r4, r3
   141b6:	18bf      	adds	r7, r7, r2
   141b8:	e7d6      	b.n	14168 <__aeabi_dsub+0x4ac>
   141ba:	000d      	movs	r5, r1
   141bc:	4315      	orrs	r5, r2
   141be:	d100      	bne.n	141c2 <__aeabi_dsub+0x506>
   141c0:	e602      	b.n	13dc8 <__aeabi_dsub+0x10c>
   141c2:	4650      	mov	r0, sl
   141c4:	1a80      	subs	r0, r0, r2
   141c6:	4582      	cmp	sl, r0
   141c8:	41bf      	sbcs	r7, r7
   141ca:	1a65      	subs	r5, r4, r1
   141cc:	427f      	negs	r7, r7
   141ce:	1bed      	subs	r5, r5, r7
   141d0:	4684      	mov	ip, r0
   141d2:	0228      	lsls	r0, r5, #8
   141d4:	d400      	bmi.n	141d8 <__aeabi_dsub+0x51c>
   141d6:	e68d      	b.n	13ef4 <__aeabi_dsub+0x238>
   141d8:	4650      	mov	r0, sl
   141da:	1a17      	subs	r7, r2, r0
   141dc:	42ba      	cmp	r2, r7
   141de:	4192      	sbcs	r2, r2
   141e0:	1b0c      	subs	r4, r1, r4
   141e2:	4252      	negs	r2, r2
   141e4:	1aa4      	subs	r4, r4, r2
   141e6:	4698      	mov	r8, r3
   141e8:	e5ee      	b.n	13dc8 <__aeabi_dsub+0x10c>
   141ea:	000d      	movs	r5, r1
   141ec:	4315      	orrs	r5, r2
   141ee:	d100      	bne.n	141f2 <__aeabi_dsub+0x536>
   141f0:	e76b      	b.n	140ca <__aeabi_dsub+0x40e>
   141f2:	4650      	mov	r0, sl
   141f4:	0767      	lsls	r7, r4, #29
   141f6:	08c0      	lsrs	r0, r0, #3
   141f8:	4307      	orrs	r7, r0
   141fa:	2080      	movs	r0, #128	; 0x80
   141fc:	08e4      	lsrs	r4, r4, #3
   141fe:	0300      	lsls	r0, r0, #12
   14200:	4204      	tst	r4, r0
   14202:	d007      	beq.n	14214 <__aeabi_dsub+0x558>
   14204:	08cd      	lsrs	r5, r1, #3
   14206:	4205      	tst	r5, r0
   14208:	d104      	bne.n	14214 <__aeabi_dsub+0x558>
   1420a:	002c      	movs	r4, r5
   1420c:	4698      	mov	r8, r3
   1420e:	08d7      	lsrs	r7, r2, #3
   14210:	0749      	lsls	r1, r1, #29
   14212:	430f      	orrs	r7, r1
   14214:	0f7b      	lsrs	r3, r7, #29
   14216:	00e4      	lsls	r4, r4, #3
   14218:	431c      	orrs	r4, r3
   1421a:	00ff      	lsls	r7, r7, #3
   1421c:	4e30      	ldr	r6, [pc, #192]	; (142e0 <__aeabi_dsub+0x624>)
   1421e:	e5d3      	b.n	13dc8 <__aeabi_dsub+0x10c>
   14220:	4e2f      	ldr	r6, [pc, #188]	; (142e0 <__aeabi_dsub+0x624>)
   14222:	45b4      	cmp	ip, r6
   14224:	d1b4      	bne.n	14190 <__aeabi_dsub+0x4d4>
   14226:	000c      	movs	r4, r1
   14228:	0017      	movs	r7, r2
   1422a:	4666      	mov	r6, ip
   1422c:	e5cc      	b.n	13dc8 <__aeabi_dsub+0x10c>
   1422e:	2700      	movs	r7, #0
   14230:	2400      	movs	r4, #0
   14232:	e5e8      	b.n	13e06 <__aeabi_dsub+0x14a>
   14234:	2b00      	cmp	r3, #0
   14236:	d039      	beq.n	142ac <__aeabi_dsub+0x5f0>
   14238:	000b      	movs	r3, r1
   1423a:	4313      	orrs	r3, r2
   1423c:	d100      	bne.n	14240 <__aeabi_dsub+0x584>
   1423e:	e744      	b.n	140ca <__aeabi_dsub+0x40e>
   14240:	08c0      	lsrs	r0, r0, #3
   14242:	0767      	lsls	r7, r4, #29
   14244:	4307      	orrs	r7, r0
   14246:	2080      	movs	r0, #128	; 0x80
   14248:	08e4      	lsrs	r4, r4, #3
   1424a:	0300      	lsls	r0, r0, #12
   1424c:	4204      	tst	r4, r0
   1424e:	d0e1      	beq.n	14214 <__aeabi_dsub+0x558>
   14250:	08cb      	lsrs	r3, r1, #3
   14252:	4203      	tst	r3, r0
   14254:	d1de      	bne.n	14214 <__aeabi_dsub+0x558>
   14256:	08d7      	lsrs	r7, r2, #3
   14258:	0749      	lsls	r1, r1, #29
   1425a:	430f      	orrs	r7, r1
   1425c:	001c      	movs	r4, r3
   1425e:	e7d9      	b.n	14214 <__aeabi_dsub+0x558>
   14260:	2100      	movs	r1, #0
   14262:	e771      	b.n	14148 <__aeabi_dsub+0x48c>
   14264:	2500      	movs	r5, #0
   14266:	2700      	movs	r7, #0
   14268:	e5e9      	b.n	13e3e <__aeabi_dsub+0x182>
   1426a:	002e      	movs	r6, r5
   1426c:	0027      	movs	r7, r4
   1426e:	3e20      	subs	r6, #32
   14270:	40f7      	lsrs	r7, r6
   14272:	2d20      	cmp	r5, #32
   14274:	d02f      	beq.n	142d6 <__aeabi_dsub+0x61a>
   14276:	2640      	movs	r6, #64	; 0x40
   14278:	1b75      	subs	r5, r6, r5
   1427a:	40ac      	lsls	r4, r5
   1427c:	4650      	mov	r0, sl
   1427e:	4320      	orrs	r0, r4
   14280:	1e44      	subs	r4, r0, #1
   14282:	41a0      	sbcs	r0, r4
   14284:	2400      	movs	r4, #0
   14286:	4338      	orrs	r0, r7
   14288:	e6dc      	b.n	14044 <__aeabi_dsub+0x388>
   1428a:	2480      	movs	r4, #128	; 0x80
   1428c:	2500      	movs	r5, #0
   1428e:	0324      	lsls	r4, r4, #12
   14290:	4e13      	ldr	r6, [pc, #76]	; (142e0 <__aeabi_dsub+0x624>)
   14292:	2700      	movs	r7, #0
   14294:	e5d3      	b.n	13e3e <__aeabi_dsub+0x182>
   14296:	4650      	mov	r0, sl
   14298:	4320      	orrs	r0, r4
   1429a:	0007      	movs	r7, r0
   1429c:	1e78      	subs	r0, r7, #1
   1429e:	4187      	sbcs	r7, r0
   142a0:	2400      	movs	r4, #0
   142a2:	18bf      	adds	r7, r7, r2
   142a4:	e760      	b.n	14168 <__aeabi_dsub+0x4ac>
   142a6:	000c      	movs	r4, r1
   142a8:	0017      	movs	r7, r2
   142aa:	e58d      	b.n	13dc8 <__aeabi_dsub+0x10c>
   142ac:	000c      	movs	r4, r1
   142ae:	0017      	movs	r7, r2
   142b0:	4e0b      	ldr	r6, [pc, #44]	; (142e0 <__aeabi_dsub+0x624>)
   142b2:	e589      	b.n	13dc8 <__aeabi_dsub+0x10c>
   142b4:	001e      	movs	r6, r3
   142b6:	0027      	movs	r7, r4
   142b8:	3e20      	subs	r6, #32
   142ba:	40f7      	lsrs	r7, r6
   142bc:	2b20      	cmp	r3, #32
   142be:	d00c      	beq.n	142da <__aeabi_dsub+0x61e>
   142c0:	2640      	movs	r6, #64	; 0x40
   142c2:	1af3      	subs	r3, r6, r3
   142c4:	409c      	lsls	r4, r3
   142c6:	4650      	mov	r0, sl
   142c8:	4320      	orrs	r0, r4
   142ca:	1e44      	subs	r4, r0, #1
   142cc:	41a0      	sbcs	r0, r4
   142ce:	4307      	orrs	r7, r0
   142d0:	2400      	movs	r4, #0
   142d2:	18bf      	adds	r7, r7, r2
   142d4:	e748      	b.n	14168 <__aeabi_dsub+0x4ac>
   142d6:	2400      	movs	r4, #0
   142d8:	e7d0      	b.n	1427c <__aeabi_dsub+0x5c0>
   142da:	2400      	movs	r4, #0
   142dc:	e7f3      	b.n	142c6 <__aeabi_dsub+0x60a>
   142de:	46c0      	nop			; (mov r8, r8)
   142e0:	000007ff 	.word	0x000007ff
   142e4:	ff7fffff 	.word	0xff7fffff

000142e8 <__aeabi_d2iz>:
   142e8:	b530      	push	{r4, r5, lr}
   142ea:	4d13      	ldr	r5, [pc, #76]	; (14338 <__aeabi_d2iz+0x50>)
   142ec:	030a      	lsls	r2, r1, #12
   142ee:	004b      	lsls	r3, r1, #1
   142f0:	0b12      	lsrs	r2, r2, #12
   142f2:	0d5b      	lsrs	r3, r3, #21
   142f4:	0fc9      	lsrs	r1, r1, #31
   142f6:	2400      	movs	r4, #0
   142f8:	42ab      	cmp	r3, r5
   142fa:	dd10      	ble.n	1431e <__aeabi_d2iz+0x36>
   142fc:	4c0f      	ldr	r4, [pc, #60]	; (1433c <__aeabi_d2iz+0x54>)
   142fe:	42a3      	cmp	r3, r4
   14300:	dc0f      	bgt.n	14322 <__aeabi_d2iz+0x3a>
   14302:	2480      	movs	r4, #128	; 0x80
   14304:	4d0e      	ldr	r5, [pc, #56]	; (14340 <__aeabi_d2iz+0x58>)
   14306:	0364      	lsls	r4, r4, #13
   14308:	4322      	orrs	r2, r4
   1430a:	1aed      	subs	r5, r5, r3
   1430c:	2d1f      	cmp	r5, #31
   1430e:	dd0b      	ble.n	14328 <__aeabi_d2iz+0x40>
   14310:	480c      	ldr	r0, [pc, #48]	; (14344 <__aeabi_d2iz+0x5c>)
   14312:	1ac3      	subs	r3, r0, r3
   14314:	40da      	lsrs	r2, r3
   14316:	4254      	negs	r4, r2
   14318:	2900      	cmp	r1, #0
   1431a:	d100      	bne.n	1431e <__aeabi_d2iz+0x36>
   1431c:	0014      	movs	r4, r2
   1431e:	0020      	movs	r0, r4
   14320:	bd30      	pop	{r4, r5, pc}
   14322:	4b09      	ldr	r3, [pc, #36]	; (14348 <__aeabi_d2iz+0x60>)
   14324:	18cc      	adds	r4, r1, r3
   14326:	e7fa      	b.n	1431e <__aeabi_d2iz+0x36>
   14328:	4c08      	ldr	r4, [pc, #32]	; (1434c <__aeabi_d2iz+0x64>)
   1432a:	40e8      	lsrs	r0, r5
   1432c:	46a4      	mov	ip, r4
   1432e:	4463      	add	r3, ip
   14330:	409a      	lsls	r2, r3
   14332:	4302      	orrs	r2, r0
   14334:	e7ef      	b.n	14316 <__aeabi_d2iz+0x2e>
   14336:	46c0      	nop			; (mov r8, r8)
   14338:	000003fe 	.word	0x000003fe
   1433c:	0000041d 	.word	0x0000041d
   14340:	00000433 	.word	0x00000433
   14344:	00000413 	.word	0x00000413
   14348:	7fffffff 	.word	0x7fffffff
   1434c:	fffffbed 	.word	0xfffffbed

00014350 <__aeabi_i2d>:
   14350:	b570      	push	{r4, r5, r6, lr}
   14352:	2800      	cmp	r0, #0
   14354:	d030      	beq.n	143b8 <__aeabi_i2d+0x68>
   14356:	17c3      	asrs	r3, r0, #31
   14358:	18c4      	adds	r4, r0, r3
   1435a:	405c      	eors	r4, r3
   1435c:	0fc5      	lsrs	r5, r0, #31
   1435e:	0020      	movs	r0, r4
   14360:	f000 f94c 	bl	145fc <__clzsi2>
   14364:	4b17      	ldr	r3, [pc, #92]	; (143c4 <__aeabi_i2d+0x74>)
   14366:	4a18      	ldr	r2, [pc, #96]	; (143c8 <__aeabi_i2d+0x78>)
   14368:	1a1b      	subs	r3, r3, r0
   1436a:	1ad2      	subs	r2, r2, r3
   1436c:	2a1f      	cmp	r2, #31
   1436e:	dd18      	ble.n	143a2 <__aeabi_i2d+0x52>
   14370:	4a16      	ldr	r2, [pc, #88]	; (143cc <__aeabi_i2d+0x7c>)
   14372:	1ad2      	subs	r2, r2, r3
   14374:	4094      	lsls	r4, r2
   14376:	2200      	movs	r2, #0
   14378:	0324      	lsls	r4, r4, #12
   1437a:	055b      	lsls	r3, r3, #21
   1437c:	0b24      	lsrs	r4, r4, #12
   1437e:	0d5b      	lsrs	r3, r3, #21
   14380:	2100      	movs	r1, #0
   14382:	0010      	movs	r0, r2
   14384:	0324      	lsls	r4, r4, #12
   14386:	0d0a      	lsrs	r2, r1, #20
   14388:	0b24      	lsrs	r4, r4, #12
   1438a:	0512      	lsls	r2, r2, #20
   1438c:	4322      	orrs	r2, r4
   1438e:	4c10      	ldr	r4, [pc, #64]	; (143d0 <__aeabi_i2d+0x80>)
   14390:	051b      	lsls	r3, r3, #20
   14392:	4022      	ands	r2, r4
   14394:	4313      	orrs	r3, r2
   14396:	005b      	lsls	r3, r3, #1
   14398:	07ed      	lsls	r5, r5, #31
   1439a:	085b      	lsrs	r3, r3, #1
   1439c:	432b      	orrs	r3, r5
   1439e:	0019      	movs	r1, r3
   143a0:	bd70      	pop	{r4, r5, r6, pc}
   143a2:	0021      	movs	r1, r4
   143a4:	4091      	lsls	r1, r2
   143a6:	000a      	movs	r2, r1
   143a8:	210b      	movs	r1, #11
   143aa:	1a08      	subs	r0, r1, r0
   143ac:	40c4      	lsrs	r4, r0
   143ae:	055b      	lsls	r3, r3, #21
   143b0:	0324      	lsls	r4, r4, #12
   143b2:	0b24      	lsrs	r4, r4, #12
   143b4:	0d5b      	lsrs	r3, r3, #21
   143b6:	e7e3      	b.n	14380 <__aeabi_i2d+0x30>
   143b8:	2500      	movs	r5, #0
   143ba:	2300      	movs	r3, #0
   143bc:	2400      	movs	r4, #0
   143be:	2200      	movs	r2, #0
   143c0:	e7de      	b.n	14380 <__aeabi_i2d+0x30>
   143c2:	46c0      	nop			; (mov r8, r8)
   143c4:	0000041e 	.word	0x0000041e
   143c8:	00000433 	.word	0x00000433
   143cc:	00000413 	.word	0x00000413
   143d0:	800fffff 	.word	0x800fffff

000143d4 <__aeabi_ui2d>:
   143d4:	b510      	push	{r4, lr}
   143d6:	1e04      	subs	r4, r0, #0
   143d8:	d028      	beq.n	1442c <__aeabi_ui2d+0x58>
   143da:	f000 f90f 	bl	145fc <__clzsi2>
   143de:	4b15      	ldr	r3, [pc, #84]	; (14434 <__aeabi_ui2d+0x60>)
   143e0:	4a15      	ldr	r2, [pc, #84]	; (14438 <__aeabi_ui2d+0x64>)
   143e2:	1a1b      	subs	r3, r3, r0
   143e4:	1ad2      	subs	r2, r2, r3
   143e6:	2a1f      	cmp	r2, #31
   143e8:	dd15      	ble.n	14416 <__aeabi_ui2d+0x42>
   143ea:	4a14      	ldr	r2, [pc, #80]	; (1443c <__aeabi_ui2d+0x68>)
   143ec:	1ad2      	subs	r2, r2, r3
   143ee:	4094      	lsls	r4, r2
   143f0:	2200      	movs	r2, #0
   143f2:	0324      	lsls	r4, r4, #12
   143f4:	055b      	lsls	r3, r3, #21
   143f6:	0b24      	lsrs	r4, r4, #12
   143f8:	0d5b      	lsrs	r3, r3, #21
   143fa:	2100      	movs	r1, #0
   143fc:	0010      	movs	r0, r2
   143fe:	0324      	lsls	r4, r4, #12
   14400:	0d0a      	lsrs	r2, r1, #20
   14402:	0b24      	lsrs	r4, r4, #12
   14404:	0512      	lsls	r2, r2, #20
   14406:	4322      	orrs	r2, r4
   14408:	4c0d      	ldr	r4, [pc, #52]	; (14440 <__aeabi_ui2d+0x6c>)
   1440a:	051b      	lsls	r3, r3, #20
   1440c:	4022      	ands	r2, r4
   1440e:	4313      	orrs	r3, r2
   14410:	005b      	lsls	r3, r3, #1
   14412:	0859      	lsrs	r1, r3, #1
   14414:	bd10      	pop	{r4, pc}
   14416:	0021      	movs	r1, r4
   14418:	4091      	lsls	r1, r2
   1441a:	000a      	movs	r2, r1
   1441c:	210b      	movs	r1, #11
   1441e:	1a08      	subs	r0, r1, r0
   14420:	40c4      	lsrs	r4, r0
   14422:	055b      	lsls	r3, r3, #21
   14424:	0324      	lsls	r4, r4, #12
   14426:	0b24      	lsrs	r4, r4, #12
   14428:	0d5b      	lsrs	r3, r3, #21
   1442a:	e7e6      	b.n	143fa <__aeabi_ui2d+0x26>
   1442c:	2300      	movs	r3, #0
   1442e:	2400      	movs	r4, #0
   14430:	2200      	movs	r2, #0
   14432:	e7e2      	b.n	143fa <__aeabi_ui2d+0x26>
   14434:	0000041e 	.word	0x0000041e
   14438:	00000433 	.word	0x00000433
   1443c:	00000413 	.word	0x00000413
   14440:	800fffff 	.word	0x800fffff

00014444 <__aeabi_f2d>:
   14444:	0041      	lsls	r1, r0, #1
   14446:	0e09      	lsrs	r1, r1, #24
   14448:	1c4b      	adds	r3, r1, #1
   1444a:	b570      	push	{r4, r5, r6, lr}
   1444c:	b2db      	uxtb	r3, r3
   1444e:	0246      	lsls	r6, r0, #9
   14450:	0a75      	lsrs	r5, r6, #9
   14452:	0fc4      	lsrs	r4, r0, #31
   14454:	2b01      	cmp	r3, #1
   14456:	dd14      	ble.n	14482 <__aeabi_f2d+0x3e>
   14458:	23e0      	movs	r3, #224	; 0xe0
   1445a:	009b      	lsls	r3, r3, #2
   1445c:	076d      	lsls	r5, r5, #29
   1445e:	0b36      	lsrs	r6, r6, #12
   14460:	18cb      	adds	r3, r1, r3
   14462:	2100      	movs	r1, #0
   14464:	0d0a      	lsrs	r2, r1, #20
   14466:	0028      	movs	r0, r5
   14468:	0512      	lsls	r2, r2, #20
   1446a:	4d1c      	ldr	r5, [pc, #112]	; (144dc <__aeabi_f2d+0x98>)
   1446c:	4332      	orrs	r2, r6
   1446e:	055b      	lsls	r3, r3, #21
   14470:	402a      	ands	r2, r5
   14472:	085b      	lsrs	r3, r3, #1
   14474:	4313      	orrs	r3, r2
   14476:	005b      	lsls	r3, r3, #1
   14478:	07e4      	lsls	r4, r4, #31
   1447a:	085b      	lsrs	r3, r3, #1
   1447c:	4323      	orrs	r3, r4
   1447e:	0019      	movs	r1, r3
   14480:	bd70      	pop	{r4, r5, r6, pc}
   14482:	2900      	cmp	r1, #0
   14484:	d114      	bne.n	144b0 <__aeabi_f2d+0x6c>
   14486:	2d00      	cmp	r5, #0
   14488:	d01e      	beq.n	144c8 <__aeabi_f2d+0x84>
   1448a:	0028      	movs	r0, r5
   1448c:	f000 f8b6 	bl	145fc <__clzsi2>
   14490:	280a      	cmp	r0, #10
   14492:	dc1c      	bgt.n	144ce <__aeabi_f2d+0x8a>
   14494:	230b      	movs	r3, #11
   14496:	002a      	movs	r2, r5
   14498:	1a1b      	subs	r3, r3, r0
   1449a:	40da      	lsrs	r2, r3
   1449c:	0003      	movs	r3, r0
   1449e:	3315      	adds	r3, #21
   144a0:	409d      	lsls	r5, r3
   144a2:	4b0f      	ldr	r3, [pc, #60]	; (144e0 <__aeabi_f2d+0x9c>)
   144a4:	0312      	lsls	r2, r2, #12
   144a6:	1a1b      	subs	r3, r3, r0
   144a8:	055b      	lsls	r3, r3, #21
   144aa:	0b16      	lsrs	r6, r2, #12
   144ac:	0d5b      	lsrs	r3, r3, #21
   144ae:	e7d8      	b.n	14462 <__aeabi_f2d+0x1e>
   144b0:	2d00      	cmp	r5, #0
   144b2:	d006      	beq.n	144c2 <__aeabi_f2d+0x7e>
   144b4:	0b32      	lsrs	r2, r6, #12
   144b6:	2680      	movs	r6, #128	; 0x80
   144b8:	0336      	lsls	r6, r6, #12
   144ba:	076d      	lsls	r5, r5, #29
   144bc:	4316      	orrs	r6, r2
   144be:	4b09      	ldr	r3, [pc, #36]	; (144e4 <__aeabi_f2d+0xa0>)
   144c0:	e7cf      	b.n	14462 <__aeabi_f2d+0x1e>
   144c2:	4b08      	ldr	r3, [pc, #32]	; (144e4 <__aeabi_f2d+0xa0>)
   144c4:	2600      	movs	r6, #0
   144c6:	e7cc      	b.n	14462 <__aeabi_f2d+0x1e>
   144c8:	2300      	movs	r3, #0
   144ca:	2600      	movs	r6, #0
   144cc:	e7c9      	b.n	14462 <__aeabi_f2d+0x1e>
   144ce:	0003      	movs	r3, r0
   144d0:	002a      	movs	r2, r5
   144d2:	3b0b      	subs	r3, #11
   144d4:	409a      	lsls	r2, r3
   144d6:	2500      	movs	r5, #0
   144d8:	e7e3      	b.n	144a2 <__aeabi_f2d+0x5e>
   144da:	46c0      	nop			; (mov r8, r8)
   144dc:	800fffff 	.word	0x800fffff
   144e0:	00000389 	.word	0x00000389
   144e4:	000007ff 	.word	0x000007ff

000144e8 <__aeabi_d2f>:
   144e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   144ea:	004c      	lsls	r4, r1, #1
   144ec:	0d64      	lsrs	r4, r4, #21
   144ee:	030b      	lsls	r3, r1, #12
   144f0:	1c62      	adds	r2, r4, #1
   144f2:	0f45      	lsrs	r5, r0, #29
   144f4:	0a5b      	lsrs	r3, r3, #9
   144f6:	0552      	lsls	r2, r2, #21
   144f8:	432b      	orrs	r3, r5
   144fa:	0fc9      	lsrs	r1, r1, #31
   144fc:	00c5      	lsls	r5, r0, #3
   144fe:	0d52      	lsrs	r2, r2, #21
   14500:	2a01      	cmp	r2, #1
   14502:	dd28      	ble.n	14556 <__aeabi_d2f+0x6e>
   14504:	4a3a      	ldr	r2, [pc, #232]	; (145f0 <__aeabi_d2f+0x108>)
   14506:	18a6      	adds	r6, r4, r2
   14508:	2efe      	cmp	r6, #254	; 0xfe
   1450a:	dc1b      	bgt.n	14544 <__aeabi_d2f+0x5c>
   1450c:	2e00      	cmp	r6, #0
   1450e:	dd3e      	ble.n	1458e <__aeabi_d2f+0xa6>
   14510:	0180      	lsls	r0, r0, #6
   14512:	0002      	movs	r2, r0
   14514:	1e50      	subs	r0, r2, #1
   14516:	4182      	sbcs	r2, r0
   14518:	0f6d      	lsrs	r5, r5, #29
   1451a:	432a      	orrs	r2, r5
   1451c:	00db      	lsls	r3, r3, #3
   1451e:	4313      	orrs	r3, r2
   14520:	075a      	lsls	r2, r3, #29
   14522:	d004      	beq.n	1452e <__aeabi_d2f+0x46>
   14524:	220f      	movs	r2, #15
   14526:	401a      	ands	r2, r3
   14528:	2a04      	cmp	r2, #4
   1452a:	d000      	beq.n	1452e <__aeabi_d2f+0x46>
   1452c:	3304      	adds	r3, #4
   1452e:	2280      	movs	r2, #128	; 0x80
   14530:	04d2      	lsls	r2, r2, #19
   14532:	401a      	ands	r2, r3
   14534:	d05a      	beq.n	145ec <__aeabi_d2f+0x104>
   14536:	3601      	adds	r6, #1
   14538:	2eff      	cmp	r6, #255	; 0xff
   1453a:	d003      	beq.n	14544 <__aeabi_d2f+0x5c>
   1453c:	019b      	lsls	r3, r3, #6
   1453e:	0a5b      	lsrs	r3, r3, #9
   14540:	b2f4      	uxtb	r4, r6
   14542:	e001      	b.n	14548 <__aeabi_d2f+0x60>
   14544:	24ff      	movs	r4, #255	; 0xff
   14546:	2300      	movs	r3, #0
   14548:	0258      	lsls	r0, r3, #9
   1454a:	05e4      	lsls	r4, r4, #23
   1454c:	0a40      	lsrs	r0, r0, #9
   1454e:	07c9      	lsls	r1, r1, #31
   14550:	4320      	orrs	r0, r4
   14552:	4308      	orrs	r0, r1
   14554:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14556:	2c00      	cmp	r4, #0
   14558:	d007      	beq.n	1456a <__aeabi_d2f+0x82>
   1455a:	431d      	orrs	r5, r3
   1455c:	d0f2      	beq.n	14544 <__aeabi_d2f+0x5c>
   1455e:	2080      	movs	r0, #128	; 0x80
   14560:	00db      	lsls	r3, r3, #3
   14562:	0480      	lsls	r0, r0, #18
   14564:	4303      	orrs	r3, r0
   14566:	26ff      	movs	r6, #255	; 0xff
   14568:	e7da      	b.n	14520 <__aeabi_d2f+0x38>
   1456a:	432b      	orrs	r3, r5
   1456c:	d003      	beq.n	14576 <__aeabi_d2f+0x8e>
   1456e:	2305      	movs	r3, #5
   14570:	08db      	lsrs	r3, r3, #3
   14572:	2cff      	cmp	r4, #255	; 0xff
   14574:	d003      	beq.n	1457e <__aeabi_d2f+0x96>
   14576:	025b      	lsls	r3, r3, #9
   14578:	0a5b      	lsrs	r3, r3, #9
   1457a:	b2e4      	uxtb	r4, r4
   1457c:	e7e4      	b.n	14548 <__aeabi_d2f+0x60>
   1457e:	2b00      	cmp	r3, #0
   14580:	d032      	beq.n	145e8 <__aeabi_d2f+0x100>
   14582:	2080      	movs	r0, #128	; 0x80
   14584:	03c0      	lsls	r0, r0, #15
   14586:	4303      	orrs	r3, r0
   14588:	025b      	lsls	r3, r3, #9
   1458a:	0a5b      	lsrs	r3, r3, #9
   1458c:	e7dc      	b.n	14548 <__aeabi_d2f+0x60>
   1458e:	0032      	movs	r2, r6
   14590:	3217      	adds	r2, #23
   14592:	db14      	blt.n	145be <__aeabi_d2f+0xd6>
   14594:	2280      	movs	r2, #128	; 0x80
   14596:	271e      	movs	r7, #30
   14598:	0412      	lsls	r2, r2, #16
   1459a:	4313      	orrs	r3, r2
   1459c:	1bbf      	subs	r7, r7, r6
   1459e:	2f1f      	cmp	r7, #31
   145a0:	dc0f      	bgt.n	145c2 <__aeabi_d2f+0xda>
   145a2:	4a14      	ldr	r2, [pc, #80]	; (145f4 <__aeabi_d2f+0x10c>)
   145a4:	4694      	mov	ip, r2
   145a6:	4464      	add	r4, ip
   145a8:	002a      	movs	r2, r5
   145aa:	40a5      	lsls	r5, r4
   145ac:	002e      	movs	r6, r5
   145ae:	40a3      	lsls	r3, r4
   145b0:	1e75      	subs	r5, r6, #1
   145b2:	41ae      	sbcs	r6, r5
   145b4:	40fa      	lsrs	r2, r7
   145b6:	4333      	orrs	r3, r6
   145b8:	4313      	orrs	r3, r2
   145ba:	2600      	movs	r6, #0
   145bc:	e7b0      	b.n	14520 <__aeabi_d2f+0x38>
   145be:	2400      	movs	r4, #0
   145c0:	e7d5      	b.n	1456e <__aeabi_d2f+0x86>
   145c2:	2202      	movs	r2, #2
   145c4:	4252      	negs	r2, r2
   145c6:	1b96      	subs	r6, r2, r6
   145c8:	001a      	movs	r2, r3
   145ca:	40f2      	lsrs	r2, r6
   145cc:	2f20      	cmp	r7, #32
   145ce:	d009      	beq.n	145e4 <__aeabi_d2f+0xfc>
   145d0:	4809      	ldr	r0, [pc, #36]	; (145f8 <__aeabi_d2f+0x110>)
   145d2:	4684      	mov	ip, r0
   145d4:	4464      	add	r4, ip
   145d6:	40a3      	lsls	r3, r4
   145d8:	432b      	orrs	r3, r5
   145da:	1e5d      	subs	r5, r3, #1
   145dc:	41ab      	sbcs	r3, r5
   145de:	2600      	movs	r6, #0
   145e0:	4313      	orrs	r3, r2
   145e2:	e79d      	b.n	14520 <__aeabi_d2f+0x38>
   145e4:	2300      	movs	r3, #0
   145e6:	e7f7      	b.n	145d8 <__aeabi_d2f+0xf0>
   145e8:	2300      	movs	r3, #0
   145ea:	e7ad      	b.n	14548 <__aeabi_d2f+0x60>
   145ec:	0034      	movs	r4, r6
   145ee:	e7bf      	b.n	14570 <__aeabi_d2f+0x88>
   145f0:	fffffc80 	.word	0xfffffc80
   145f4:	fffffc82 	.word	0xfffffc82
   145f8:	fffffca2 	.word	0xfffffca2

000145fc <__clzsi2>:
   145fc:	211c      	movs	r1, #28
   145fe:	2301      	movs	r3, #1
   14600:	041b      	lsls	r3, r3, #16
   14602:	4298      	cmp	r0, r3
   14604:	d301      	bcc.n	1460a <__clzsi2+0xe>
   14606:	0c00      	lsrs	r0, r0, #16
   14608:	3910      	subs	r1, #16
   1460a:	0a1b      	lsrs	r3, r3, #8
   1460c:	4298      	cmp	r0, r3
   1460e:	d301      	bcc.n	14614 <__clzsi2+0x18>
   14610:	0a00      	lsrs	r0, r0, #8
   14612:	3908      	subs	r1, #8
   14614:	091b      	lsrs	r3, r3, #4
   14616:	4298      	cmp	r0, r3
   14618:	d301      	bcc.n	1461e <__clzsi2+0x22>
   1461a:	0900      	lsrs	r0, r0, #4
   1461c:	3904      	subs	r1, #4
   1461e:	a202      	add	r2, pc, #8	; (adr r2, 14628 <__clzsi2+0x2c>)
   14620:	5c10      	ldrb	r0, [r2, r0]
   14622:	1840      	adds	r0, r0, r1
   14624:	4770      	bx	lr
   14626:	46c0      	nop			; (mov r8, r8)
   14628:	02020304 	.word	0x02020304
   1462c:	01010101 	.word	0x01010101
	...

00014638 <__clzdi2>:
   14638:	b510      	push	{r4, lr}
   1463a:	2900      	cmp	r1, #0
   1463c:	d103      	bne.n	14646 <__clzdi2+0xe>
   1463e:	f7ff ffdd 	bl	145fc <__clzsi2>
   14642:	3020      	adds	r0, #32
   14644:	e002      	b.n	1464c <__clzdi2+0x14>
   14646:	1c08      	adds	r0, r1, #0
   14648:	f7ff ffd8 	bl	145fc <__clzsi2>
   1464c:	bd10      	pop	{r4, pc}
   1464e:	46c0      	nop			; (mov r8, r8)

00014650 <__aeabi_d2uiz>:
   14650:	b570      	push	{r4, r5, r6, lr}
   14652:	2200      	movs	r2, #0
   14654:	4b0c      	ldr	r3, [pc, #48]	; (14688 <__aeabi_d2uiz+0x38>)
   14656:	0004      	movs	r4, r0
   14658:	000d      	movs	r5, r1
   1465a:	f000 f84b 	bl	146f4 <__aeabi_dcmpge>
   1465e:	2800      	cmp	r0, #0
   14660:	d104      	bne.n	1466c <__aeabi_d2uiz+0x1c>
   14662:	0020      	movs	r0, r4
   14664:	0029      	movs	r1, r5
   14666:	f7ff fe3f 	bl	142e8 <__aeabi_d2iz>
   1466a:	bd70      	pop	{r4, r5, r6, pc}
   1466c:	4b06      	ldr	r3, [pc, #24]	; (14688 <__aeabi_d2uiz+0x38>)
   1466e:	2200      	movs	r2, #0
   14670:	0020      	movs	r0, r4
   14672:	0029      	movs	r1, r5
   14674:	f7ff fb22 	bl	13cbc <__aeabi_dsub>
   14678:	f7ff fe36 	bl	142e8 <__aeabi_d2iz>
   1467c:	2380      	movs	r3, #128	; 0x80
   1467e:	061b      	lsls	r3, r3, #24
   14680:	469c      	mov	ip, r3
   14682:	4460      	add	r0, ip
   14684:	e7f1      	b.n	1466a <__aeabi_d2uiz+0x1a>
   14686:	46c0      	nop			; (mov r8, r8)
   14688:	41e00000 	.word	0x41e00000

0001468c <__aeabi_cdrcmple>:
   1468c:	4684      	mov	ip, r0
   1468e:	1c10      	adds	r0, r2, #0
   14690:	4662      	mov	r2, ip
   14692:	468c      	mov	ip, r1
   14694:	1c19      	adds	r1, r3, #0
   14696:	4663      	mov	r3, ip
   14698:	e000      	b.n	1469c <__aeabi_cdcmpeq>
   1469a:	46c0      	nop			; (mov r8, r8)

0001469c <__aeabi_cdcmpeq>:
   1469c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1469e:	f000 f8d1 	bl	14844 <__ledf2>
   146a2:	2800      	cmp	r0, #0
   146a4:	d401      	bmi.n	146aa <__aeabi_cdcmpeq+0xe>
   146a6:	2100      	movs	r1, #0
   146a8:	42c8      	cmn	r0, r1
   146aa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000146ac <__aeabi_dcmpeq>:
   146ac:	b510      	push	{r4, lr}
   146ae:	f000 f82b 	bl	14708 <__eqdf2>
   146b2:	4240      	negs	r0, r0
   146b4:	3001      	adds	r0, #1
   146b6:	bd10      	pop	{r4, pc}

000146b8 <__aeabi_dcmplt>:
   146b8:	b510      	push	{r4, lr}
   146ba:	f000 f8c3 	bl	14844 <__ledf2>
   146be:	2800      	cmp	r0, #0
   146c0:	db01      	blt.n	146c6 <__aeabi_dcmplt+0xe>
   146c2:	2000      	movs	r0, #0
   146c4:	bd10      	pop	{r4, pc}
   146c6:	2001      	movs	r0, #1
   146c8:	bd10      	pop	{r4, pc}
   146ca:	46c0      	nop			; (mov r8, r8)

000146cc <__aeabi_dcmple>:
   146cc:	b510      	push	{r4, lr}
   146ce:	f000 f8b9 	bl	14844 <__ledf2>
   146d2:	2800      	cmp	r0, #0
   146d4:	dd01      	ble.n	146da <__aeabi_dcmple+0xe>
   146d6:	2000      	movs	r0, #0
   146d8:	bd10      	pop	{r4, pc}
   146da:	2001      	movs	r0, #1
   146dc:	bd10      	pop	{r4, pc}
   146de:	46c0      	nop			; (mov r8, r8)

000146e0 <__aeabi_dcmpgt>:
   146e0:	b510      	push	{r4, lr}
   146e2:	f000 f84b 	bl	1477c <__gedf2>
   146e6:	2800      	cmp	r0, #0
   146e8:	dc01      	bgt.n	146ee <__aeabi_dcmpgt+0xe>
   146ea:	2000      	movs	r0, #0
   146ec:	bd10      	pop	{r4, pc}
   146ee:	2001      	movs	r0, #1
   146f0:	bd10      	pop	{r4, pc}
   146f2:	46c0      	nop			; (mov r8, r8)

000146f4 <__aeabi_dcmpge>:
   146f4:	b510      	push	{r4, lr}
   146f6:	f000 f841 	bl	1477c <__gedf2>
   146fa:	2800      	cmp	r0, #0
   146fc:	da01      	bge.n	14702 <__aeabi_dcmpge+0xe>
   146fe:	2000      	movs	r0, #0
   14700:	bd10      	pop	{r4, pc}
   14702:	2001      	movs	r0, #1
   14704:	bd10      	pop	{r4, pc}
   14706:	46c0      	nop			; (mov r8, r8)

00014708 <__eqdf2>:
   14708:	b5f0      	push	{r4, r5, r6, r7, lr}
   1470a:	464f      	mov	r7, r9
   1470c:	4646      	mov	r6, r8
   1470e:	46d6      	mov	lr, sl
   14710:	005c      	lsls	r4, r3, #1
   14712:	b5c0      	push	{r6, r7, lr}
   14714:	031f      	lsls	r7, r3, #12
   14716:	0fdb      	lsrs	r3, r3, #31
   14718:	469a      	mov	sl, r3
   1471a:	4b17      	ldr	r3, [pc, #92]	; (14778 <__eqdf2+0x70>)
   1471c:	030e      	lsls	r6, r1, #12
   1471e:	004d      	lsls	r5, r1, #1
   14720:	4684      	mov	ip, r0
   14722:	4680      	mov	r8, r0
   14724:	0b36      	lsrs	r6, r6, #12
   14726:	0d6d      	lsrs	r5, r5, #21
   14728:	0fc9      	lsrs	r1, r1, #31
   1472a:	4691      	mov	r9, r2
   1472c:	0b3f      	lsrs	r7, r7, #12
   1472e:	0d64      	lsrs	r4, r4, #21
   14730:	2001      	movs	r0, #1
   14732:	429d      	cmp	r5, r3
   14734:	d008      	beq.n	14748 <__eqdf2+0x40>
   14736:	429c      	cmp	r4, r3
   14738:	d001      	beq.n	1473e <__eqdf2+0x36>
   1473a:	42a5      	cmp	r5, r4
   1473c:	d00b      	beq.n	14756 <__eqdf2+0x4e>
   1473e:	bc1c      	pop	{r2, r3, r4}
   14740:	4690      	mov	r8, r2
   14742:	4699      	mov	r9, r3
   14744:	46a2      	mov	sl, r4
   14746:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14748:	4663      	mov	r3, ip
   1474a:	4333      	orrs	r3, r6
   1474c:	d1f7      	bne.n	1473e <__eqdf2+0x36>
   1474e:	42ac      	cmp	r4, r5
   14750:	d1f5      	bne.n	1473e <__eqdf2+0x36>
   14752:	433a      	orrs	r2, r7
   14754:	d1f3      	bne.n	1473e <__eqdf2+0x36>
   14756:	2001      	movs	r0, #1
   14758:	42be      	cmp	r6, r7
   1475a:	d1f0      	bne.n	1473e <__eqdf2+0x36>
   1475c:	45c8      	cmp	r8, r9
   1475e:	d1ee      	bne.n	1473e <__eqdf2+0x36>
   14760:	4551      	cmp	r1, sl
   14762:	d007      	beq.n	14774 <__eqdf2+0x6c>
   14764:	2d00      	cmp	r5, #0
   14766:	d1ea      	bne.n	1473e <__eqdf2+0x36>
   14768:	4663      	mov	r3, ip
   1476a:	431e      	orrs	r6, r3
   1476c:	0030      	movs	r0, r6
   1476e:	1e46      	subs	r6, r0, #1
   14770:	41b0      	sbcs	r0, r6
   14772:	e7e4      	b.n	1473e <__eqdf2+0x36>
   14774:	2000      	movs	r0, #0
   14776:	e7e2      	b.n	1473e <__eqdf2+0x36>
   14778:	000007ff 	.word	0x000007ff

0001477c <__gedf2>:
   1477c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1477e:	4645      	mov	r5, r8
   14780:	46de      	mov	lr, fp
   14782:	4657      	mov	r7, sl
   14784:	464e      	mov	r6, r9
   14786:	b5e0      	push	{r5, r6, r7, lr}
   14788:	031f      	lsls	r7, r3, #12
   1478a:	0b3d      	lsrs	r5, r7, #12
   1478c:	4f2c      	ldr	r7, [pc, #176]	; (14840 <__gedf2+0xc4>)
   1478e:	030e      	lsls	r6, r1, #12
   14790:	004c      	lsls	r4, r1, #1
   14792:	46ab      	mov	fp, r5
   14794:	005d      	lsls	r5, r3, #1
   14796:	4684      	mov	ip, r0
   14798:	0b36      	lsrs	r6, r6, #12
   1479a:	0d64      	lsrs	r4, r4, #21
   1479c:	0fc9      	lsrs	r1, r1, #31
   1479e:	4690      	mov	r8, r2
   147a0:	0d6d      	lsrs	r5, r5, #21
   147a2:	0fdb      	lsrs	r3, r3, #31
   147a4:	42bc      	cmp	r4, r7
   147a6:	d02a      	beq.n	147fe <__gedf2+0x82>
   147a8:	4f25      	ldr	r7, [pc, #148]	; (14840 <__gedf2+0xc4>)
   147aa:	42bd      	cmp	r5, r7
   147ac:	d02d      	beq.n	1480a <__gedf2+0x8e>
   147ae:	2c00      	cmp	r4, #0
   147b0:	d10f      	bne.n	147d2 <__gedf2+0x56>
   147b2:	4330      	orrs	r0, r6
   147b4:	0007      	movs	r7, r0
   147b6:	4681      	mov	r9, r0
   147b8:	4278      	negs	r0, r7
   147ba:	4178      	adcs	r0, r7
   147bc:	b2c0      	uxtb	r0, r0
   147be:	2d00      	cmp	r5, #0
   147c0:	d117      	bne.n	147f2 <__gedf2+0x76>
   147c2:	465f      	mov	r7, fp
   147c4:	433a      	orrs	r2, r7
   147c6:	d114      	bne.n	147f2 <__gedf2+0x76>
   147c8:	464b      	mov	r3, r9
   147ca:	2000      	movs	r0, #0
   147cc:	2b00      	cmp	r3, #0
   147ce:	d00a      	beq.n	147e6 <__gedf2+0x6a>
   147d0:	e006      	b.n	147e0 <__gedf2+0x64>
   147d2:	2d00      	cmp	r5, #0
   147d4:	d102      	bne.n	147dc <__gedf2+0x60>
   147d6:	4658      	mov	r0, fp
   147d8:	4302      	orrs	r2, r0
   147da:	d001      	beq.n	147e0 <__gedf2+0x64>
   147dc:	4299      	cmp	r1, r3
   147de:	d018      	beq.n	14812 <__gedf2+0x96>
   147e0:	4248      	negs	r0, r1
   147e2:	2101      	movs	r1, #1
   147e4:	4308      	orrs	r0, r1
   147e6:	bc3c      	pop	{r2, r3, r4, r5}
   147e8:	4690      	mov	r8, r2
   147ea:	4699      	mov	r9, r3
   147ec:	46a2      	mov	sl, r4
   147ee:	46ab      	mov	fp, r5
   147f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   147f2:	2800      	cmp	r0, #0
   147f4:	d0f2      	beq.n	147dc <__gedf2+0x60>
   147f6:	2001      	movs	r0, #1
   147f8:	3b01      	subs	r3, #1
   147fa:	4318      	orrs	r0, r3
   147fc:	e7f3      	b.n	147e6 <__gedf2+0x6a>
   147fe:	0037      	movs	r7, r6
   14800:	4307      	orrs	r7, r0
   14802:	d0d1      	beq.n	147a8 <__gedf2+0x2c>
   14804:	2002      	movs	r0, #2
   14806:	4240      	negs	r0, r0
   14808:	e7ed      	b.n	147e6 <__gedf2+0x6a>
   1480a:	465f      	mov	r7, fp
   1480c:	4317      	orrs	r7, r2
   1480e:	d0ce      	beq.n	147ae <__gedf2+0x32>
   14810:	e7f8      	b.n	14804 <__gedf2+0x88>
   14812:	42ac      	cmp	r4, r5
   14814:	dce4      	bgt.n	147e0 <__gedf2+0x64>
   14816:	da03      	bge.n	14820 <__gedf2+0xa4>
   14818:	1e48      	subs	r0, r1, #1
   1481a:	2101      	movs	r1, #1
   1481c:	4308      	orrs	r0, r1
   1481e:	e7e2      	b.n	147e6 <__gedf2+0x6a>
   14820:	455e      	cmp	r6, fp
   14822:	d8dd      	bhi.n	147e0 <__gedf2+0x64>
   14824:	d006      	beq.n	14834 <__gedf2+0xb8>
   14826:	2000      	movs	r0, #0
   14828:	455e      	cmp	r6, fp
   1482a:	d2dc      	bcs.n	147e6 <__gedf2+0x6a>
   1482c:	2301      	movs	r3, #1
   1482e:	1e48      	subs	r0, r1, #1
   14830:	4318      	orrs	r0, r3
   14832:	e7d8      	b.n	147e6 <__gedf2+0x6a>
   14834:	45c4      	cmp	ip, r8
   14836:	d8d3      	bhi.n	147e0 <__gedf2+0x64>
   14838:	2000      	movs	r0, #0
   1483a:	45c4      	cmp	ip, r8
   1483c:	d3f6      	bcc.n	1482c <__gedf2+0xb0>
   1483e:	e7d2      	b.n	147e6 <__gedf2+0x6a>
   14840:	000007ff 	.word	0x000007ff

00014844 <__ledf2>:
   14844:	b5f0      	push	{r4, r5, r6, r7, lr}
   14846:	464e      	mov	r6, r9
   14848:	4645      	mov	r5, r8
   1484a:	46de      	mov	lr, fp
   1484c:	4657      	mov	r7, sl
   1484e:	005c      	lsls	r4, r3, #1
   14850:	b5e0      	push	{r5, r6, r7, lr}
   14852:	031f      	lsls	r7, r3, #12
   14854:	0fdb      	lsrs	r3, r3, #31
   14856:	4699      	mov	r9, r3
   14858:	4b2a      	ldr	r3, [pc, #168]	; (14904 <__ledf2+0xc0>)
   1485a:	030e      	lsls	r6, r1, #12
   1485c:	004d      	lsls	r5, r1, #1
   1485e:	0fc9      	lsrs	r1, r1, #31
   14860:	4684      	mov	ip, r0
   14862:	0b36      	lsrs	r6, r6, #12
   14864:	0d6d      	lsrs	r5, r5, #21
   14866:	468b      	mov	fp, r1
   14868:	4690      	mov	r8, r2
   1486a:	0b3f      	lsrs	r7, r7, #12
   1486c:	0d64      	lsrs	r4, r4, #21
   1486e:	429d      	cmp	r5, r3
   14870:	d020      	beq.n	148b4 <__ledf2+0x70>
   14872:	4b24      	ldr	r3, [pc, #144]	; (14904 <__ledf2+0xc0>)
   14874:	429c      	cmp	r4, r3
   14876:	d022      	beq.n	148be <__ledf2+0x7a>
   14878:	2d00      	cmp	r5, #0
   1487a:	d112      	bne.n	148a2 <__ledf2+0x5e>
   1487c:	4330      	orrs	r0, r6
   1487e:	4243      	negs	r3, r0
   14880:	4143      	adcs	r3, r0
   14882:	b2db      	uxtb	r3, r3
   14884:	2c00      	cmp	r4, #0
   14886:	d01f      	beq.n	148c8 <__ledf2+0x84>
   14888:	2b00      	cmp	r3, #0
   1488a:	d00c      	beq.n	148a6 <__ledf2+0x62>
   1488c:	464b      	mov	r3, r9
   1488e:	2001      	movs	r0, #1
   14890:	3b01      	subs	r3, #1
   14892:	4303      	orrs	r3, r0
   14894:	0018      	movs	r0, r3
   14896:	bc3c      	pop	{r2, r3, r4, r5}
   14898:	4690      	mov	r8, r2
   1489a:	4699      	mov	r9, r3
   1489c:	46a2      	mov	sl, r4
   1489e:	46ab      	mov	fp, r5
   148a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   148a2:	2c00      	cmp	r4, #0
   148a4:	d016      	beq.n	148d4 <__ledf2+0x90>
   148a6:	45cb      	cmp	fp, r9
   148a8:	d017      	beq.n	148da <__ledf2+0x96>
   148aa:	465b      	mov	r3, fp
   148ac:	4259      	negs	r1, r3
   148ae:	2301      	movs	r3, #1
   148b0:	430b      	orrs	r3, r1
   148b2:	e7ef      	b.n	14894 <__ledf2+0x50>
   148b4:	0031      	movs	r1, r6
   148b6:	2302      	movs	r3, #2
   148b8:	4301      	orrs	r1, r0
   148ba:	d1eb      	bne.n	14894 <__ledf2+0x50>
   148bc:	e7d9      	b.n	14872 <__ledf2+0x2e>
   148be:	0039      	movs	r1, r7
   148c0:	2302      	movs	r3, #2
   148c2:	4311      	orrs	r1, r2
   148c4:	d1e6      	bne.n	14894 <__ledf2+0x50>
   148c6:	e7d7      	b.n	14878 <__ledf2+0x34>
   148c8:	433a      	orrs	r2, r7
   148ca:	d1dd      	bne.n	14888 <__ledf2+0x44>
   148cc:	2300      	movs	r3, #0
   148ce:	2800      	cmp	r0, #0
   148d0:	d0e0      	beq.n	14894 <__ledf2+0x50>
   148d2:	e7ea      	b.n	148aa <__ledf2+0x66>
   148d4:	433a      	orrs	r2, r7
   148d6:	d1e6      	bne.n	148a6 <__ledf2+0x62>
   148d8:	e7e7      	b.n	148aa <__ledf2+0x66>
   148da:	42a5      	cmp	r5, r4
   148dc:	dce5      	bgt.n	148aa <__ledf2+0x66>
   148de:	db05      	blt.n	148ec <__ledf2+0xa8>
   148e0:	42be      	cmp	r6, r7
   148e2:	d8e2      	bhi.n	148aa <__ledf2+0x66>
   148e4:	d007      	beq.n	148f6 <__ledf2+0xb2>
   148e6:	2300      	movs	r3, #0
   148e8:	42be      	cmp	r6, r7
   148ea:	d2d3      	bcs.n	14894 <__ledf2+0x50>
   148ec:	4659      	mov	r1, fp
   148ee:	2301      	movs	r3, #1
   148f0:	3901      	subs	r1, #1
   148f2:	430b      	orrs	r3, r1
   148f4:	e7ce      	b.n	14894 <__ledf2+0x50>
   148f6:	45c4      	cmp	ip, r8
   148f8:	d8d7      	bhi.n	148aa <__ledf2+0x66>
   148fa:	2300      	movs	r3, #0
   148fc:	45c4      	cmp	ip, r8
   148fe:	d3f5      	bcc.n	148ec <__ledf2+0xa8>
   14900:	e7c8      	b.n	14894 <__ledf2+0x50>
   14902:	46c0      	nop			; (mov r8, r8)
   14904:	000007ff 	.word	0x000007ff

00014908 <__libc_init_array>:
   14908:	b570      	push	{r4, r5, r6, lr}
   1490a:	4e0d      	ldr	r6, [pc, #52]	; (14940 <__libc_init_array+0x38>)
   1490c:	4d0d      	ldr	r5, [pc, #52]	; (14944 <__libc_init_array+0x3c>)
   1490e:	2400      	movs	r4, #0
   14910:	1bad      	subs	r5, r5, r6
   14912:	10ad      	asrs	r5, r5, #2
   14914:	d005      	beq.n	14922 <__libc_init_array+0x1a>
   14916:	00a3      	lsls	r3, r4, #2
   14918:	58f3      	ldr	r3, [r6, r3]
   1491a:	3401      	adds	r4, #1
   1491c:	4798      	blx	r3
   1491e:	42a5      	cmp	r5, r4
   14920:	d1f9      	bne.n	14916 <__libc_init_array+0xe>
   14922:	f006 fcc5 	bl	1b2b0 <_init>
   14926:	4e08      	ldr	r6, [pc, #32]	; (14948 <__libc_init_array+0x40>)
   14928:	4d08      	ldr	r5, [pc, #32]	; (1494c <__libc_init_array+0x44>)
   1492a:	2400      	movs	r4, #0
   1492c:	1bad      	subs	r5, r5, r6
   1492e:	10ad      	asrs	r5, r5, #2
   14930:	d005      	beq.n	1493e <__libc_init_array+0x36>
   14932:	00a3      	lsls	r3, r4, #2
   14934:	58f3      	ldr	r3, [r6, r3]
   14936:	3401      	adds	r4, #1
   14938:	4798      	blx	r3
   1493a:	42a5      	cmp	r5, r4
   1493c:	d1f9      	bne.n	14932 <__libc_init_array+0x2a>
   1493e:	bd70      	pop	{r4, r5, r6, pc}
   14940:	0001b2bc 	.word	0x0001b2bc
   14944:	0001b2bc 	.word	0x0001b2bc
   14948:	0001b2bc 	.word	0x0001b2bc
   1494c:	0001b2c4 	.word	0x0001b2c4

00014950 <malloc>:
   14950:	b510      	push	{r4, lr}
   14952:	4b03      	ldr	r3, [pc, #12]	; (14960 <malloc+0x10>)
   14954:	0001      	movs	r1, r0
   14956:	6818      	ldr	r0, [r3, #0]
   14958:	f000 f804 	bl	14964 <_malloc_r>
   1495c:	bd10      	pop	{r4, pc}
   1495e:	46c0      	nop			; (mov r8, r8)
   14960:	20000064 	.word	0x20000064

00014964 <_malloc_r>:
   14964:	b5f0      	push	{r4, r5, r6, r7, lr}
   14966:	4657      	mov	r7, sl
   14968:	4645      	mov	r5, r8
   1496a:	46de      	mov	lr, fp
   1496c:	464e      	mov	r6, r9
   1496e:	b5e0      	push	{r5, r6, r7, lr}
   14970:	000d      	movs	r5, r1
   14972:	350b      	adds	r5, #11
   14974:	b083      	sub	sp, #12
   14976:	0007      	movs	r7, r0
   14978:	2d16      	cmp	r5, #22
   1497a:	d800      	bhi.n	1497e <_malloc_r+0x1a>
   1497c:	e09f      	b.n	14abe <_malloc_r+0x15a>
   1497e:	2307      	movs	r3, #7
   14980:	439d      	bics	r5, r3
   14982:	d500      	bpl.n	14986 <_malloc_r+0x22>
   14984:	e0c4      	b.n	14b10 <_malloc_r+0x1ac>
   14986:	42a9      	cmp	r1, r5
   14988:	d900      	bls.n	1498c <_malloc_r+0x28>
   1498a:	e0c1      	b.n	14b10 <_malloc_r+0x1ac>
   1498c:	f000 fb2a 	bl	14fe4 <__malloc_lock>
   14990:	23f8      	movs	r3, #248	; 0xf8
   14992:	33ff      	adds	r3, #255	; 0xff
   14994:	429d      	cmp	r5, r3
   14996:	d800      	bhi.n	1499a <_malloc_r+0x36>
   14998:	e28f      	b.n	14eba <_malloc_r+0x556>
   1499a:	0a68      	lsrs	r0, r5, #9
   1499c:	d100      	bne.n	149a0 <_malloc_r+0x3c>
   1499e:	e0bb      	b.n	14b18 <_malloc_r+0x1b4>
   149a0:	2804      	cmp	r0, #4
   149a2:	d900      	bls.n	149a6 <_malloc_r+0x42>
   149a4:	e162      	b.n	14c6c <_malloc_r+0x308>
   149a6:	2338      	movs	r3, #56	; 0x38
   149a8:	4698      	mov	r8, r3
   149aa:	09a8      	lsrs	r0, r5, #6
   149ac:	4480      	add	r8, r0
   149ae:	3039      	adds	r0, #57	; 0x39
   149b0:	00c1      	lsls	r1, r0, #3
   149b2:	4ed2      	ldr	r6, [pc, #840]	; (14cfc <_malloc_r+0x398>)
   149b4:	1871      	adds	r1, r6, r1
   149b6:	3908      	subs	r1, #8
   149b8:	68cc      	ldr	r4, [r1, #12]
   149ba:	42a1      	cmp	r1, r4
   149bc:	d019      	beq.n	149f2 <_malloc_r+0x8e>
   149be:	2303      	movs	r3, #3
   149c0:	6862      	ldr	r2, [r4, #4]
   149c2:	439a      	bics	r2, r3
   149c4:	0013      	movs	r3, r2
   149c6:	1b52      	subs	r2, r2, r5
   149c8:	2a0f      	cmp	r2, #15
   149ca:	dd00      	ble.n	149ce <_malloc_r+0x6a>
   149cc:	e0aa      	b.n	14b24 <_malloc_r+0x1c0>
   149ce:	2a00      	cmp	r2, #0
   149d0:	db00      	blt.n	149d4 <_malloc_r+0x70>
   149d2:	e088      	b.n	14ae6 <_malloc_r+0x182>
   149d4:	2303      	movs	r3, #3
   149d6:	469c      	mov	ip, r3
   149d8:	e008      	b.n	149ec <_malloc_r+0x88>
   149da:	4662      	mov	r2, ip
   149dc:	6863      	ldr	r3, [r4, #4]
   149de:	4393      	bics	r3, r2
   149e0:	1b5a      	subs	r2, r3, r5
   149e2:	2a0f      	cmp	r2, #15
   149e4:	dd00      	ble.n	149e8 <_malloc_r+0x84>
   149e6:	e09d      	b.n	14b24 <_malloc_r+0x1c0>
   149e8:	2a00      	cmp	r2, #0
   149ea:	da7c      	bge.n	14ae6 <_malloc_r+0x182>
   149ec:	68e4      	ldr	r4, [r4, #12]
   149ee:	42a1      	cmp	r1, r4
   149f0:	d1f3      	bne.n	149da <_malloc_r+0x76>
   149f2:	0032      	movs	r2, r6
   149f4:	6934      	ldr	r4, [r6, #16]
   149f6:	3208      	adds	r2, #8
   149f8:	4294      	cmp	r4, r2
   149fa:	d100      	bne.n	149fe <_malloc_r+0x9a>
   149fc:	e190      	b.n	14d20 <_malloc_r+0x3bc>
   149fe:	2303      	movs	r3, #3
   14a00:	6861      	ldr	r1, [r4, #4]
   14a02:	4399      	bics	r1, r3
   14a04:	4689      	mov	r9, r1
   14a06:	1b49      	subs	r1, r1, r5
   14a08:	290f      	cmp	r1, #15
   14a0a:	dd00      	ble.n	14a0e <_malloc_r+0xaa>
   14a0c:	e162      	b.n	14cd4 <_malloc_r+0x370>
   14a0e:	6172      	str	r2, [r6, #20]
   14a10:	6132      	str	r2, [r6, #16]
   14a12:	2900      	cmp	r1, #0
   14a14:	db00      	blt.n	14a18 <_malloc_r+0xb4>
   14a16:	e087      	b.n	14b28 <_malloc_r+0x1c4>
   14a18:	4ab9      	ldr	r2, [pc, #740]	; (14d00 <_malloc_r+0x39c>)
   14a1a:	464b      	mov	r3, r9
   14a1c:	4591      	cmp	r9, r2
   14a1e:	d900      	bls.n	14a22 <_malloc_r+0xbe>
   14a20:	e130      	b.n	14c84 <_malloc_r+0x320>
   14a22:	08db      	lsrs	r3, r3, #3
   14a24:	3aff      	subs	r2, #255	; 0xff
   14a26:	1099      	asrs	r1, r3, #2
   14a28:	3aff      	subs	r2, #255	; 0xff
   14a2a:	408a      	lsls	r2, r1
   14a2c:	00db      	lsls	r3, r3, #3
   14a2e:	6871      	ldr	r1, [r6, #4]
   14a30:	199b      	adds	r3, r3, r6
   14a32:	430a      	orrs	r2, r1
   14a34:	6899      	ldr	r1, [r3, #8]
   14a36:	6072      	str	r2, [r6, #4]
   14a38:	60e3      	str	r3, [r4, #12]
   14a3a:	60a1      	str	r1, [r4, #8]
   14a3c:	609c      	str	r4, [r3, #8]
   14a3e:	0013      	movs	r3, r2
   14a40:	60cc      	str	r4, [r1, #12]
   14a42:	2101      	movs	r1, #1
   14a44:	1082      	asrs	r2, r0, #2
   14a46:	4091      	lsls	r1, r2
   14a48:	4299      	cmp	r1, r3
   14a4a:	d86f      	bhi.n	14b2c <_malloc_r+0x1c8>
   14a4c:	420b      	tst	r3, r1
   14a4e:	d105      	bne.n	14a5c <_malloc_r+0xf8>
   14a50:	2203      	movs	r2, #3
   14a52:	4390      	bics	r0, r2
   14a54:	0049      	lsls	r1, r1, #1
   14a56:	3004      	adds	r0, #4
   14a58:	420b      	tst	r3, r1
   14a5a:	d0fb      	beq.n	14a54 <_malloc_r+0xf0>
   14a5c:	2303      	movs	r3, #3
   14a5e:	4698      	mov	r8, r3
   14a60:	00c3      	lsls	r3, r0, #3
   14a62:	4699      	mov	r9, r3
   14a64:	44b1      	add	r9, r6
   14a66:	46cc      	mov	ip, r9
   14a68:	4682      	mov	sl, r0
   14a6a:	4663      	mov	r3, ip
   14a6c:	68dc      	ldr	r4, [r3, #12]
   14a6e:	45a4      	cmp	ip, r4
   14a70:	d107      	bne.n	14a82 <_malloc_r+0x11e>
   14a72:	e157      	b.n	14d24 <_malloc_r+0x3c0>
   14a74:	2a00      	cmp	r2, #0
   14a76:	db00      	blt.n	14a7a <_malloc_r+0x116>
   14a78:	e166      	b.n	14d48 <_malloc_r+0x3e4>
   14a7a:	68e4      	ldr	r4, [r4, #12]
   14a7c:	45a4      	cmp	ip, r4
   14a7e:	d100      	bne.n	14a82 <_malloc_r+0x11e>
   14a80:	e150      	b.n	14d24 <_malloc_r+0x3c0>
   14a82:	4642      	mov	r2, r8
   14a84:	6863      	ldr	r3, [r4, #4]
   14a86:	4393      	bics	r3, r2
   14a88:	1b5a      	subs	r2, r3, r5
   14a8a:	2a0f      	cmp	r2, #15
   14a8c:	ddf2      	ble.n	14a74 <_malloc_r+0x110>
   14a8e:	2001      	movs	r0, #1
   14a90:	4680      	mov	r8, r0
   14a92:	1961      	adds	r1, r4, r5
   14a94:	4305      	orrs	r5, r0
   14a96:	6065      	str	r5, [r4, #4]
   14a98:	68a0      	ldr	r0, [r4, #8]
   14a9a:	68e5      	ldr	r5, [r4, #12]
   14a9c:	3608      	adds	r6, #8
   14a9e:	60c5      	str	r5, [r0, #12]
   14aa0:	60a8      	str	r0, [r5, #8]
   14aa2:	4640      	mov	r0, r8
   14aa4:	60f1      	str	r1, [r6, #12]
   14aa6:	60b1      	str	r1, [r6, #8]
   14aa8:	4310      	orrs	r0, r2
   14aaa:	6048      	str	r0, [r1, #4]
   14aac:	60ce      	str	r6, [r1, #12]
   14aae:	608e      	str	r6, [r1, #8]
   14ab0:	0038      	movs	r0, r7
   14ab2:	50e2      	str	r2, [r4, r3]
   14ab4:	f000 fa9e 	bl	14ff4 <__malloc_unlock>
   14ab8:	0020      	movs	r0, r4
   14aba:	3008      	adds	r0, #8
   14abc:	e021      	b.n	14b02 <_malloc_r+0x19e>
   14abe:	2910      	cmp	r1, #16
   14ac0:	d826      	bhi.n	14b10 <_malloc_r+0x1ac>
   14ac2:	0038      	movs	r0, r7
   14ac4:	f000 fa8e 	bl	14fe4 <__malloc_lock>
   14ac8:	2510      	movs	r5, #16
   14aca:	2318      	movs	r3, #24
   14acc:	2002      	movs	r0, #2
   14ace:	4e8b      	ldr	r6, [pc, #556]	; (14cfc <_malloc_r+0x398>)
   14ad0:	18f3      	adds	r3, r6, r3
   14ad2:	001a      	movs	r2, r3
   14ad4:	685c      	ldr	r4, [r3, #4]
   14ad6:	3a08      	subs	r2, #8
   14ad8:	4294      	cmp	r4, r2
   14ada:	d100      	bne.n	14ade <_malloc_r+0x17a>
   14adc:	e12e      	b.n	14d3c <_malloc_r+0x3d8>
   14ade:	2303      	movs	r3, #3
   14ae0:	6862      	ldr	r2, [r4, #4]
   14ae2:	439a      	bics	r2, r3
   14ae4:	0013      	movs	r3, r2
   14ae6:	68e2      	ldr	r2, [r4, #12]
   14ae8:	68a1      	ldr	r1, [r4, #8]
   14aea:	60ca      	str	r2, [r1, #12]
   14aec:	6091      	str	r1, [r2, #8]
   14aee:	2201      	movs	r2, #1
   14af0:	18e3      	adds	r3, r4, r3
   14af2:	6859      	ldr	r1, [r3, #4]
   14af4:	0038      	movs	r0, r7
   14af6:	430a      	orrs	r2, r1
   14af8:	605a      	str	r2, [r3, #4]
   14afa:	f000 fa7b 	bl	14ff4 <__malloc_unlock>
   14afe:	0020      	movs	r0, r4
   14b00:	3008      	adds	r0, #8
   14b02:	b003      	add	sp, #12
   14b04:	bc3c      	pop	{r2, r3, r4, r5}
   14b06:	4690      	mov	r8, r2
   14b08:	4699      	mov	r9, r3
   14b0a:	46a2      	mov	sl, r4
   14b0c:	46ab      	mov	fp, r5
   14b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14b10:	230c      	movs	r3, #12
   14b12:	2000      	movs	r0, #0
   14b14:	603b      	str	r3, [r7, #0]
   14b16:	e7f4      	b.n	14b02 <_malloc_r+0x19e>
   14b18:	2180      	movs	r1, #128	; 0x80
   14b1a:	233f      	movs	r3, #63	; 0x3f
   14b1c:	2040      	movs	r0, #64	; 0x40
   14b1e:	0089      	lsls	r1, r1, #2
   14b20:	4698      	mov	r8, r3
   14b22:	e746      	b.n	149b2 <_malloc_r+0x4e>
   14b24:	4640      	mov	r0, r8
   14b26:	e764      	b.n	149f2 <_malloc_r+0x8e>
   14b28:	464b      	mov	r3, r9
   14b2a:	e7e0      	b.n	14aee <_malloc_r+0x18a>
   14b2c:	2303      	movs	r3, #3
   14b2e:	68b4      	ldr	r4, [r6, #8]
   14b30:	6862      	ldr	r2, [r4, #4]
   14b32:	439a      	bics	r2, r3
   14b34:	4690      	mov	r8, r2
   14b36:	42aa      	cmp	r2, r5
   14b38:	d303      	bcc.n	14b42 <_malloc_r+0x1de>
   14b3a:	1b53      	subs	r3, r2, r5
   14b3c:	2b0f      	cmp	r3, #15
   14b3e:	dd00      	ble.n	14b42 <_malloc_r+0x1de>
   14b40:	e086      	b.n	14c50 <_malloc_r+0x2ec>
   14b42:	0023      	movs	r3, r4
   14b44:	4443      	add	r3, r8
   14b46:	4a6f      	ldr	r2, [pc, #444]	; (14d04 <_malloc_r+0x3a0>)
   14b48:	9301      	str	r3, [sp, #4]
   14b4a:	4b6f      	ldr	r3, [pc, #444]	; (14d08 <_malloc_r+0x3a4>)
   14b4c:	4693      	mov	fp, r2
   14b4e:	681b      	ldr	r3, [r3, #0]
   14b50:	6812      	ldr	r2, [r2, #0]
   14b52:	18eb      	adds	r3, r5, r3
   14b54:	3201      	adds	r2, #1
   14b56:	d100      	bne.n	14b5a <_malloc_r+0x1f6>
   14b58:	e168      	b.n	14e2c <_malloc_r+0x4c8>
   14b5a:	4a6c      	ldr	r2, [pc, #432]	; (14d0c <_malloc_r+0x3a8>)
   14b5c:	4694      	mov	ip, r2
   14b5e:	4463      	add	r3, ip
   14b60:	0b1b      	lsrs	r3, r3, #12
   14b62:	031b      	lsls	r3, r3, #12
   14b64:	9300      	str	r3, [sp, #0]
   14b66:	9900      	ldr	r1, [sp, #0]
   14b68:	0038      	movs	r0, r7
   14b6a:	f000 fadb 	bl	15124 <_sbrk_r>
   14b6e:	0003      	movs	r3, r0
   14b70:	4681      	mov	r9, r0
   14b72:	3301      	adds	r3, #1
   14b74:	d061      	beq.n	14c3a <_malloc_r+0x2d6>
   14b76:	9b01      	ldr	r3, [sp, #4]
   14b78:	4283      	cmp	r3, r0
   14b7a:	d900      	bls.n	14b7e <_malloc_r+0x21a>
   14b7c:	e0ff      	b.n	14d7e <_malloc_r+0x41a>
   14b7e:	4b64      	ldr	r3, [pc, #400]	; (14d10 <_malloc_r+0x3ac>)
   14b80:	9a00      	ldr	r2, [sp, #0]
   14b82:	469a      	mov	sl, r3
   14b84:	681b      	ldr	r3, [r3, #0]
   14b86:	469c      	mov	ip, r3
   14b88:	4653      	mov	r3, sl
   14b8a:	4462      	add	r2, ip
   14b8c:	601a      	str	r2, [r3, #0]
   14b8e:	9b01      	ldr	r3, [sp, #4]
   14b90:	0011      	movs	r1, r2
   14b92:	4283      	cmp	r3, r0
   14b94:	d100      	bne.n	14b98 <_malloc_r+0x234>
   14b96:	e155      	b.n	14e44 <_malloc_r+0x4e0>
   14b98:	465b      	mov	r3, fp
   14b9a:	681b      	ldr	r3, [r3, #0]
   14b9c:	3301      	adds	r3, #1
   14b9e:	d100      	bne.n	14ba2 <_malloc_r+0x23e>
   14ba0:	e16c      	b.n	14e7c <_malloc_r+0x518>
   14ba2:	464b      	mov	r3, r9
   14ba4:	9a01      	ldr	r2, [sp, #4]
   14ba6:	1a9b      	subs	r3, r3, r2
   14ba8:	1859      	adds	r1, r3, r1
   14baa:	4653      	mov	r3, sl
   14bac:	6019      	str	r1, [r3, #0]
   14bae:	2307      	movs	r3, #7
   14bb0:	464a      	mov	r2, r9
   14bb2:	4013      	ands	r3, r2
   14bb4:	d100      	bne.n	14bb8 <_malloc_r+0x254>
   14bb6:	e124      	b.n	14e02 <_malloc_r+0x49e>
   14bb8:	2108      	movs	r1, #8
   14bba:	4689      	mov	r9, r1
   14bbc:	4955      	ldr	r1, [pc, #340]	; (14d14 <_malloc_r+0x3b0>)
   14bbe:	1ad2      	subs	r2, r2, r3
   14bc0:	4491      	add	r9, r2
   14bc2:	1acb      	subs	r3, r1, r3
   14bc4:	9a00      	ldr	r2, [sp, #0]
   14bc6:	0038      	movs	r0, r7
   14bc8:	444a      	add	r2, r9
   14bca:	0511      	lsls	r1, r2, #20
   14bcc:	0d09      	lsrs	r1, r1, #20
   14bce:	1a5b      	subs	r3, r3, r1
   14bd0:	0019      	movs	r1, r3
   14bd2:	469b      	mov	fp, r3
   14bd4:	f000 faa6 	bl	15124 <_sbrk_r>
   14bd8:	1c43      	adds	r3, r0, #1
   14bda:	d100      	bne.n	14bde <_malloc_r+0x27a>
   14bdc:	e142      	b.n	14e64 <_malloc_r+0x500>
   14bde:	464b      	mov	r3, r9
   14be0:	1ac0      	subs	r0, r0, r3
   14be2:	2301      	movs	r3, #1
   14be4:	4458      	add	r0, fp
   14be6:	4318      	orrs	r0, r3
   14be8:	4653      	mov	r3, sl
   14bea:	681b      	ldr	r3, [r3, #0]
   14bec:	445b      	add	r3, fp
   14bee:	0019      	movs	r1, r3
   14bf0:	4653      	mov	r3, sl
   14bf2:	6019      	str	r1, [r3, #0]
   14bf4:	464b      	mov	r3, r9
   14bf6:	60b3      	str	r3, [r6, #8]
   14bf8:	6058      	str	r0, [r3, #4]
   14bfa:	42b4      	cmp	r4, r6
   14bfc:	d013      	beq.n	14c26 <_malloc_r+0x2c2>
   14bfe:	4643      	mov	r3, r8
   14c00:	2b0f      	cmp	r3, #15
   14c02:	d800      	bhi.n	14c06 <_malloc_r+0x2a2>
   14c04:	e0e8      	b.n	14dd8 <_malloc_r+0x474>
   14c06:	4643      	mov	r3, r8
   14c08:	2207      	movs	r2, #7
   14c0a:	6860      	ldr	r0, [r4, #4]
   14c0c:	3b0c      	subs	r3, #12
   14c0e:	4393      	bics	r3, r2
   14c10:	3a06      	subs	r2, #6
   14c12:	4002      	ands	r2, r0
   14c14:	2005      	movs	r0, #5
   14c16:	431a      	orrs	r2, r3
   14c18:	6062      	str	r2, [r4, #4]
   14c1a:	18e2      	adds	r2, r4, r3
   14c1c:	6050      	str	r0, [r2, #4]
   14c1e:	6090      	str	r0, [r2, #8]
   14c20:	2b0f      	cmp	r3, #15
   14c22:	d900      	bls.n	14c26 <_malloc_r+0x2c2>
   14c24:	e122      	b.n	14e6c <_malloc_r+0x508>
   14c26:	4b3c      	ldr	r3, [pc, #240]	; (14d18 <_malloc_r+0x3b4>)
   14c28:	681a      	ldr	r2, [r3, #0]
   14c2a:	4291      	cmp	r1, r2
   14c2c:	d900      	bls.n	14c30 <_malloc_r+0x2cc>
   14c2e:	6019      	str	r1, [r3, #0]
   14c30:	4b3a      	ldr	r3, [pc, #232]	; (14d1c <_malloc_r+0x3b8>)
   14c32:	681a      	ldr	r2, [r3, #0]
   14c34:	4291      	cmp	r1, r2
   14c36:	d900      	bls.n	14c3a <_malloc_r+0x2d6>
   14c38:	6019      	str	r1, [r3, #0]
   14c3a:	2303      	movs	r3, #3
   14c3c:	68b4      	ldr	r4, [r6, #8]
   14c3e:	6862      	ldr	r2, [r4, #4]
   14c40:	439a      	bics	r2, r3
   14c42:	1b53      	subs	r3, r2, r5
   14c44:	4295      	cmp	r5, r2
   14c46:	d900      	bls.n	14c4a <_malloc_r+0x2e6>
   14c48:	e0c9      	b.n	14dde <_malloc_r+0x47a>
   14c4a:	2b0f      	cmp	r3, #15
   14c4c:	dc00      	bgt.n	14c50 <_malloc_r+0x2ec>
   14c4e:	e0c6      	b.n	14dde <_malloc_r+0x47a>
   14c50:	2201      	movs	r2, #1
   14c52:	0029      	movs	r1, r5
   14c54:	4313      	orrs	r3, r2
   14c56:	4311      	orrs	r1, r2
   14c58:	1965      	adds	r5, r4, r5
   14c5a:	6061      	str	r1, [r4, #4]
   14c5c:	0038      	movs	r0, r7
   14c5e:	60b5      	str	r5, [r6, #8]
   14c60:	606b      	str	r3, [r5, #4]
   14c62:	f000 f9c7 	bl	14ff4 <__malloc_unlock>
   14c66:	0020      	movs	r0, r4
   14c68:	3008      	adds	r0, #8
   14c6a:	e74a      	b.n	14b02 <_malloc_r+0x19e>
   14c6c:	2814      	cmp	r0, #20
   14c6e:	d97a      	bls.n	14d66 <_malloc_r+0x402>
   14c70:	2854      	cmp	r0, #84	; 0x54
   14c72:	d900      	bls.n	14c76 <_malloc_r+0x312>
   14c74:	e0ba      	b.n	14dec <_malloc_r+0x488>
   14c76:	236e      	movs	r3, #110	; 0x6e
   14c78:	4698      	mov	r8, r3
   14c7a:	0b28      	lsrs	r0, r5, #12
   14c7c:	4480      	add	r8, r0
   14c7e:	306f      	adds	r0, #111	; 0x6f
   14c80:	00c1      	lsls	r1, r0, #3
   14c82:	e696      	b.n	149b2 <_malloc_r+0x4e>
   14c84:	0a5a      	lsrs	r2, r3, #9
   14c86:	2a04      	cmp	r2, #4
   14c88:	d973      	bls.n	14d72 <_malloc_r+0x40e>
   14c8a:	2a14      	cmp	r2, #20
   14c8c:	d900      	bls.n	14c90 <_malloc_r+0x32c>
   14c8e:	e0d0      	b.n	14e32 <_malloc_r+0x4ce>
   14c90:	0011      	movs	r1, r2
   14c92:	325c      	adds	r2, #92	; 0x5c
   14c94:	315b      	adds	r1, #91	; 0x5b
   14c96:	00d2      	lsls	r2, r2, #3
   14c98:	2308      	movs	r3, #8
   14c9a:	425b      	negs	r3, r3
   14c9c:	469c      	mov	ip, r3
   14c9e:	18b2      	adds	r2, r6, r2
   14ca0:	4494      	add	ip, r2
   14ca2:	4663      	mov	r3, ip
   14ca4:	689a      	ldr	r2, [r3, #8]
   14ca6:	2303      	movs	r3, #3
   14ca8:	4698      	mov	r8, r3
   14caa:	4594      	cmp	ip, r2
   14cac:	d100      	bne.n	14cb0 <_malloc_r+0x34c>
   14cae:	e0ab      	b.n	14e08 <_malloc_r+0x4a4>
   14cb0:	4643      	mov	r3, r8
   14cb2:	6851      	ldr	r1, [r2, #4]
   14cb4:	4399      	bics	r1, r3
   14cb6:	4589      	cmp	r9, r1
   14cb8:	d300      	bcc.n	14cbc <_malloc_r+0x358>
   14cba:	e095      	b.n	14de8 <_malloc_r+0x484>
   14cbc:	6892      	ldr	r2, [r2, #8]
   14cbe:	4594      	cmp	ip, r2
   14cc0:	d1f6      	bne.n	14cb0 <_malloc_r+0x34c>
   14cc2:	4663      	mov	r3, ip
   14cc4:	68da      	ldr	r2, [r3, #12]
   14cc6:	6873      	ldr	r3, [r6, #4]
   14cc8:	4661      	mov	r1, ip
   14cca:	60e2      	str	r2, [r4, #12]
   14ccc:	60a1      	str	r1, [r4, #8]
   14cce:	6094      	str	r4, [r2, #8]
   14cd0:	60cc      	str	r4, [r1, #12]
   14cd2:	e6b6      	b.n	14a42 <_malloc_r+0xde>
   14cd4:	2301      	movs	r3, #1
   14cd6:	1960      	adds	r0, r4, r5
   14cd8:	431d      	orrs	r5, r3
   14cda:	6065      	str	r5, [r4, #4]
   14cdc:	6170      	str	r0, [r6, #20]
   14cde:	6130      	str	r0, [r6, #16]
   14ce0:	60c2      	str	r2, [r0, #12]
   14ce2:	6082      	str	r2, [r0, #8]
   14ce4:	001a      	movs	r2, r3
   14ce6:	464b      	mov	r3, r9
   14ce8:	430a      	orrs	r2, r1
   14cea:	6042      	str	r2, [r0, #4]
   14cec:	0038      	movs	r0, r7
   14cee:	50e1      	str	r1, [r4, r3]
   14cf0:	f000 f980 	bl	14ff4 <__malloc_unlock>
   14cf4:	0020      	movs	r0, r4
   14cf6:	3008      	adds	r0, #8
   14cf8:	e703      	b.n	14b02 <_malloc_r+0x19e>
   14cfa:	46c0      	nop			; (mov r8, r8)
   14cfc:	20000490 	.word	0x20000490
   14d00:	000001ff 	.word	0x000001ff
   14d04:	20000898 	.word	0x20000898
   14d08:	20000ef8 	.word	0x20000ef8
   14d0c:	0000100f 	.word	0x0000100f
   14d10:	20000ec8 	.word	0x20000ec8
   14d14:	00001008 	.word	0x00001008
   14d18:	20000ef0 	.word	0x20000ef0
   14d1c:	20000ef4 	.word	0x20000ef4
   14d20:	6873      	ldr	r3, [r6, #4]
   14d22:	e68e      	b.n	14a42 <_malloc_r+0xde>
   14d24:	2308      	movs	r3, #8
   14d26:	469b      	mov	fp, r3
   14d28:	3b07      	subs	r3, #7
   14d2a:	44dc      	add	ip, fp
   14d2c:	469b      	mov	fp, r3
   14d2e:	44da      	add	sl, fp
   14d30:	4643      	mov	r3, r8
   14d32:	4652      	mov	r2, sl
   14d34:	4213      	tst	r3, r2
   14d36:	d000      	beq.n	14d3a <_malloc_r+0x3d6>
   14d38:	e697      	b.n	14a6a <_malloc_r+0x106>
   14d3a:	e037      	b.n	14dac <_malloc_r+0x448>
   14d3c:	68dc      	ldr	r4, [r3, #12]
   14d3e:	3002      	adds	r0, #2
   14d40:	42a3      	cmp	r3, r4
   14d42:	d100      	bne.n	14d46 <_malloc_r+0x3e2>
   14d44:	e655      	b.n	149f2 <_malloc_r+0x8e>
   14d46:	e6ca      	b.n	14ade <_malloc_r+0x17a>
   14d48:	2201      	movs	r2, #1
   14d4a:	18e3      	adds	r3, r4, r3
   14d4c:	6859      	ldr	r1, [r3, #4]
   14d4e:	0038      	movs	r0, r7
   14d50:	430a      	orrs	r2, r1
   14d52:	605a      	str	r2, [r3, #4]
   14d54:	68e3      	ldr	r3, [r4, #12]
   14d56:	68a2      	ldr	r2, [r4, #8]
   14d58:	60d3      	str	r3, [r2, #12]
   14d5a:	609a      	str	r2, [r3, #8]
   14d5c:	f000 f94a 	bl	14ff4 <__malloc_unlock>
   14d60:	0020      	movs	r0, r4
   14d62:	3008      	adds	r0, #8
   14d64:	e6cd      	b.n	14b02 <_malloc_r+0x19e>
   14d66:	235b      	movs	r3, #91	; 0x5b
   14d68:	4698      	mov	r8, r3
   14d6a:	4480      	add	r8, r0
   14d6c:	305c      	adds	r0, #92	; 0x5c
   14d6e:	00c1      	lsls	r1, r0, #3
   14d70:	e61f      	b.n	149b2 <_malloc_r+0x4e>
   14d72:	099a      	lsrs	r2, r3, #6
   14d74:	0011      	movs	r1, r2
   14d76:	3239      	adds	r2, #57	; 0x39
   14d78:	3138      	adds	r1, #56	; 0x38
   14d7a:	00d2      	lsls	r2, r2, #3
   14d7c:	e78c      	b.n	14c98 <_malloc_r+0x334>
   14d7e:	42b4      	cmp	r4, r6
   14d80:	d000      	beq.n	14d84 <_malloc_r+0x420>
   14d82:	e75a      	b.n	14c3a <_malloc_r+0x2d6>
   14d84:	4b4f      	ldr	r3, [pc, #316]	; (14ec4 <_malloc_r+0x560>)
   14d86:	9a00      	ldr	r2, [sp, #0]
   14d88:	469a      	mov	sl, r3
   14d8a:	681b      	ldr	r3, [r3, #0]
   14d8c:	469c      	mov	ip, r3
   14d8e:	4653      	mov	r3, sl
   14d90:	4462      	add	r2, ip
   14d92:	0011      	movs	r1, r2
   14d94:	601a      	str	r2, [r3, #0]
   14d96:	e6ff      	b.n	14b98 <_malloc_r+0x234>
   14d98:	2308      	movs	r3, #8
   14d9a:	425b      	negs	r3, r3
   14d9c:	469c      	mov	ip, r3
   14d9e:	44e1      	add	r9, ip
   14da0:	464b      	mov	r3, r9
   14da2:	689b      	ldr	r3, [r3, #8]
   14da4:	3801      	subs	r0, #1
   14da6:	4599      	cmp	r9, r3
   14da8:	d000      	beq.n	14dac <_malloc_r+0x448>
   14daa:	e084      	b.n	14eb6 <_malloc_r+0x552>
   14dac:	4643      	mov	r3, r8
   14dae:	4203      	tst	r3, r0
   14db0:	d1f2      	bne.n	14d98 <_malloc_r+0x434>
   14db2:	6873      	ldr	r3, [r6, #4]
   14db4:	438b      	bics	r3, r1
   14db6:	6073      	str	r3, [r6, #4]
   14db8:	0049      	lsls	r1, r1, #1
   14dba:	4299      	cmp	r1, r3
   14dbc:	d900      	bls.n	14dc0 <_malloc_r+0x45c>
   14dbe:	e6b5      	b.n	14b2c <_malloc_r+0x1c8>
   14dc0:	2900      	cmp	r1, #0
   14dc2:	d100      	bne.n	14dc6 <_malloc_r+0x462>
   14dc4:	e6b2      	b.n	14b2c <_malloc_r+0x1c8>
   14dc6:	4650      	mov	r0, sl
   14dc8:	420b      	tst	r3, r1
   14dca:	d000      	beq.n	14dce <_malloc_r+0x46a>
   14dcc:	e648      	b.n	14a60 <_malloc_r+0xfc>
   14dce:	0049      	lsls	r1, r1, #1
   14dd0:	3004      	adds	r0, #4
   14dd2:	420b      	tst	r3, r1
   14dd4:	d0fb      	beq.n	14dce <_malloc_r+0x46a>
   14dd6:	e643      	b.n	14a60 <_malloc_r+0xfc>
   14dd8:	2301      	movs	r3, #1
   14dda:	464a      	mov	r2, r9
   14ddc:	6053      	str	r3, [r2, #4]
   14dde:	0038      	movs	r0, r7
   14de0:	f000 f908 	bl	14ff4 <__malloc_unlock>
   14de4:	2000      	movs	r0, #0
   14de6:	e68c      	b.n	14b02 <_malloc_r+0x19e>
   14de8:	4694      	mov	ip, r2
   14dea:	e76a      	b.n	14cc2 <_malloc_r+0x35e>
   14dec:	23aa      	movs	r3, #170	; 0xaa
   14dee:	005b      	lsls	r3, r3, #1
   14df0:	4298      	cmp	r0, r3
   14df2:	d811      	bhi.n	14e18 <_malloc_r+0x4b4>
   14df4:	3bdd      	subs	r3, #221	; 0xdd
   14df6:	4698      	mov	r8, r3
   14df8:	0be8      	lsrs	r0, r5, #15
   14dfa:	4480      	add	r8, r0
   14dfc:	3078      	adds	r0, #120	; 0x78
   14dfe:	00c1      	lsls	r1, r0, #3
   14e00:	e5d7      	b.n	149b2 <_malloc_r+0x4e>
   14e02:	2380      	movs	r3, #128	; 0x80
   14e04:	015b      	lsls	r3, r3, #5
   14e06:	e6dd      	b.n	14bc4 <_malloc_r+0x260>
   14e08:	1089      	asrs	r1, r1, #2
   14e0a:	3b02      	subs	r3, #2
   14e0c:	408b      	lsls	r3, r1
   14e0e:	6872      	ldr	r2, [r6, #4]
   14e10:	4313      	orrs	r3, r2
   14e12:	6073      	str	r3, [r6, #4]
   14e14:	4662      	mov	r2, ip
   14e16:	e757      	b.n	14cc8 <_malloc_r+0x364>
   14e18:	4b2b      	ldr	r3, [pc, #172]	; (14ec8 <_malloc_r+0x564>)
   14e1a:	4298      	cmp	r0, r3
   14e1c:	d81c      	bhi.n	14e58 <_malloc_r+0x4f4>
   14e1e:	237c      	movs	r3, #124	; 0x7c
   14e20:	4698      	mov	r8, r3
   14e22:	0ca8      	lsrs	r0, r5, #18
   14e24:	4480      	add	r8, r0
   14e26:	307d      	adds	r0, #125	; 0x7d
   14e28:	00c1      	lsls	r1, r0, #3
   14e2a:	e5c2      	b.n	149b2 <_malloc_r+0x4e>
   14e2c:	3310      	adds	r3, #16
   14e2e:	9300      	str	r3, [sp, #0]
   14e30:	e699      	b.n	14b66 <_malloc_r+0x202>
   14e32:	2a54      	cmp	r2, #84	; 0x54
   14e34:	d826      	bhi.n	14e84 <_malloc_r+0x520>
   14e36:	464b      	mov	r3, r9
   14e38:	0b1a      	lsrs	r2, r3, #12
   14e3a:	0011      	movs	r1, r2
   14e3c:	326f      	adds	r2, #111	; 0x6f
   14e3e:	316e      	adds	r1, #110	; 0x6e
   14e40:	00d2      	lsls	r2, r2, #3
   14e42:	e729      	b.n	14c98 <_malloc_r+0x334>
   14e44:	051b      	lsls	r3, r3, #20
   14e46:	d000      	beq.n	14e4a <_malloc_r+0x4e6>
   14e48:	e6a6      	b.n	14b98 <_malloc_r+0x234>
   14e4a:	2001      	movs	r0, #1
   14e4c:	9b00      	ldr	r3, [sp, #0]
   14e4e:	68b2      	ldr	r2, [r6, #8]
   14e50:	4443      	add	r3, r8
   14e52:	4303      	orrs	r3, r0
   14e54:	6053      	str	r3, [r2, #4]
   14e56:	e6e6      	b.n	14c26 <_malloc_r+0x2c2>
   14e58:	21fe      	movs	r1, #254	; 0xfe
   14e5a:	237e      	movs	r3, #126	; 0x7e
   14e5c:	207f      	movs	r0, #127	; 0x7f
   14e5e:	0089      	lsls	r1, r1, #2
   14e60:	4698      	mov	r8, r3
   14e62:	e5a6      	b.n	149b2 <_malloc_r+0x4e>
   14e64:	2300      	movs	r3, #0
   14e66:	2001      	movs	r0, #1
   14e68:	469b      	mov	fp, r3
   14e6a:	e6bd      	b.n	14be8 <_malloc_r+0x284>
   14e6c:	0021      	movs	r1, r4
   14e6e:	0038      	movs	r0, r7
   14e70:	3108      	adds	r1, #8
   14e72:	f003 f8bd 	bl	17ff0 <_free_r>
   14e76:	4653      	mov	r3, sl
   14e78:	6819      	ldr	r1, [r3, #0]
   14e7a:	e6d4      	b.n	14c26 <_malloc_r+0x2c2>
   14e7c:	465b      	mov	r3, fp
   14e7e:	464a      	mov	r2, r9
   14e80:	601a      	str	r2, [r3, #0]
   14e82:	e694      	b.n	14bae <_malloc_r+0x24a>
   14e84:	21aa      	movs	r1, #170	; 0xaa
   14e86:	0049      	lsls	r1, r1, #1
   14e88:	428a      	cmp	r2, r1
   14e8a:	d806      	bhi.n	14e9a <_malloc_r+0x536>
   14e8c:	464b      	mov	r3, r9
   14e8e:	0bda      	lsrs	r2, r3, #15
   14e90:	0011      	movs	r1, r2
   14e92:	3278      	adds	r2, #120	; 0x78
   14e94:	3177      	adds	r1, #119	; 0x77
   14e96:	00d2      	lsls	r2, r2, #3
   14e98:	e6fe      	b.n	14c98 <_malloc_r+0x334>
   14e9a:	490b      	ldr	r1, [pc, #44]	; (14ec8 <_malloc_r+0x564>)
   14e9c:	428a      	cmp	r2, r1
   14e9e:	d806      	bhi.n	14eae <_malloc_r+0x54a>
   14ea0:	464b      	mov	r3, r9
   14ea2:	0c9a      	lsrs	r2, r3, #18
   14ea4:	0011      	movs	r1, r2
   14ea6:	327d      	adds	r2, #125	; 0x7d
   14ea8:	317c      	adds	r1, #124	; 0x7c
   14eaa:	00d2      	lsls	r2, r2, #3
   14eac:	e6f4      	b.n	14c98 <_malloc_r+0x334>
   14eae:	22fe      	movs	r2, #254	; 0xfe
   14eb0:	217e      	movs	r1, #126	; 0x7e
   14eb2:	0092      	lsls	r2, r2, #2
   14eb4:	e6f0      	b.n	14c98 <_malloc_r+0x334>
   14eb6:	6873      	ldr	r3, [r6, #4]
   14eb8:	e77e      	b.n	14db8 <_malloc_r+0x454>
   14eba:	002b      	movs	r3, r5
   14ebc:	08e8      	lsrs	r0, r5, #3
   14ebe:	3308      	adds	r3, #8
   14ec0:	e605      	b.n	14ace <_malloc_r+0x16a>
   14ec2:	46c0      	nop			; (mov r8, r8)
   14ec4:	20000ec8 	.word	0x20000ec8
   14ec8:	00000554 	.word	0x00000554

00014ecc <memcpy>:
   14ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
   14ece:	0005      	movs	r5, r0
   14ed0:	2a0f      	cmp	r2, #15
   14ed2:	d92f      	bls.n	14f34 <memcpy+0x68>
   14ed4:	000b      	movs	r3, r1
   14ed6:	4303      	orrs	r3, r0
   14ed8:	079b      	lsls	r3, r3, #30
   14eda:	d134      	bne.n	14f46 <memcpy+0x7a>
   14edc:	0016      	movs	r6, r2
   14ede:	000c      	movs	r4, r1
   14ee0:	0003      	movs	r3, r0
   14ee2:	3e10      	subs	r6, #16
   14ee4:	0935      	lsrs	r5, r6, #4
   14ee6:	3501      	adds	r5, #1
   14ee8:	012d      	lsls	r5, r5, #4
   14eea:	1945      	adds	r5, r0, r5
   14eec:	6827      	ldr	r7, [r4, #0]
   14eee:	601f      	str	r7, [r3, #0]
   14ef0:	6867      	ldr	r7, [r4, #4]
   14ef2:	605f      	str	r7, [r3, #4]
   14ef4:	68a7      	ldr	r7, [r4, #8]
   14ef6:	609f      	str	r7, [r3, #8]
   14ef8:	68e7      	ldr	r7, [r4, #12]
   14efa:	3410      	adds	r4, #16
   14efc:	60df      	str	r7, [r3, #12]
   14efe:	3310      	adds	r3, #16
   14f00:	429d      	cmp	r5, r3
   14f02:	d1f3      	bne.n	14eec <memcpy+0x20>
   14f04:	230f      	movs	r3, #15
   14f06:	439e      	bics	r6, r3
   14f08:	3610      	adds	r6, #16
   14f0a:	1985      	adds	r5, r0, r6
   14f0c:	1989      	adds	r1, r1, r6
   14f0e:	4013      	ands	r3, r2
   14f10:	2b03      	cmp	r3, #3
   14f12:	d91a      	bls.n	14f4a <memcpy+0x7e>
   14f14:	1f1e      	subs	r6, r3, #4
   14f16:	2300      	movs	r3, #0
   14f18:	08b4      	lsrs	r4, r6, #2
   14f1a:	3401      	adds	r4, #1
   14f1c:	00a4      	lsls	r4, r4, #2
   14f1e:	58cf      	ldr	r7, [r1, r3]
   14f20:	50ef      	str	r7, [r5, r3]
   14f22:	3304      	adds	r3, #4
   14f24:	42a3      	cmp	r3, r4
   14f26:	d1fa      	bne.n	14f1e <memcpy+0x52>
   14f28:	2403      	movs	r4, #3
   14f2a:	43a6      	bics	r6, r4
   14f2c:	1d33      	adds	r3, r6, #4
   14f2e:	4022      	ands	r2, r4
   14f30:	18c9      	adds	r1, r1, r3
   14f32:	18ed      	adds	r5, r5, r3
   14f34:	2a00      	cmp	r2, #0
   14f36:	d005      	beq.n	14f44 <memcpy+0x78>
   14f38:	2300      	movs	r3, #0
   14f3a:	5ccc      	ldrb	r4, [r1, r3]
   14f3c:	54ec      	strb	r4, [r5, r3]
   14f3e:	3301      	adds	r3, #1
   14f40:	4293      	cmp	r3, r2
   14f42:	d1fa      	bne.n	14f3a <memcpy+0x6e>
   14f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14f46:	0005      	movs	r5, r0
   14f48:	e7f6      	b.n	14f38 <memcpy+0x6c>
   14f4a:	001a      	movs	r2, r3
   14f4c:	e7f2      	b.n	14f34 <memcpy+0x68>
   14f4e:	46c0      	nop			; (mov r8, r8)

00014f50 <memset>:
   14f50:	b5f0      	push	{r4, r5, r6, r7, lr}
   14f52:	0783      	lsls	r3, r0, #30
   14f54:	d043      	beq.n	14fde <memset+0x8e>
   14f56:	1e54      	subs	r4, r2, #1
   14f58:	2a00      	cmp	r2, #0
   14f5a:	d03f      	beq.n	14fdc <memset+0x8c>
   14f5c:	b2ce      	uxtb	r6, r1
   14f5e:	0002      	movs	r2, r0
   14f60:	2503      	movs	r5, #3
   14f62:	e002      	b.n	14f6a <memset+0x1a>
   14f64:	001a      	movs	r2, r3
   14f66:	3c01      	subs	r4, #1
   14f68:	d338      	bcc.n	14fdc <memset+0x8c>
   14f6a:	1c53      	adds	r3, r2, #1
   14f6c:	7016      	strb	r6, [r2, #0]
   14f6e:	422b      	tst	r3, r5
   14f70:	d1f8      	bne.n	14f64 <memset+0x14>
   14f72:	2c03      	cmp	r4, #3
   14f74:	d92a      	bls.n	14fcc <memset+0x7c>
   14f76:	22ff      	movs	r2, #255	; 0xff
   14f78:	400a      	ands	r2, r1
   14f7a:	0215      	lsls	r5, r2, #8
   14f7c:	4315      	orrs	r5, r2
   14f7e:	042a      	lsls	r2, r5, #16
   14f80:	4315      	orrs	r5, r2
   14f82:	2c0f      	cmp	r4, #15
   14f84:	d914      	bls.n	14fb0 <memset+0x60>
   14f86:	0027      	movs	r7, r4
   14f88:	001a      	movs	r2, r3
   14f8a:	3f10      	subs	r7, #16
   14f8c:	093e      	lsrs	r6, r7, #4
   14f8e:	3601      	adds	r6, #1
   14f90:	0136      	lsls	r6, r6, #4
   14f92:	199e      	adds	r6, r3, r6
   14f94:	6015      	str	r5, [r2, #0]
   14f96:	6055      	str	r5, [r2, #4]
   14f98:	6095      	str	r5, [r2, #8]
   14f9a:	60d5      	str	r5, [r2, #12]
   14f9c:	3210      	adds	r2, #16
   14f9e:	4296      	cmp	r6, r2
   14fa0:	d1f8      	bne.n	14f94 <memset+0x44>
   14fa2:	220f      	movs	r2, #15
   14fa4:	4397      	bics	r7, r2
   14fa6:	3710      	adds	r7, #16
   14fa8:	19db      	adds	r3, r3, r7
   14faa:	4014      	ands	r4, r2
   14fac:	2c03      	cmp	r4, #3
   14fae:	d90d      	bls.n	14fcc <memset+0x7c>
   14fb0:	001a      	movs	r2, r3
   14fb2:	1f27      	subs	r7, r4, #4
   14fb4:	08be      	lsrs	r6, r7, #2
   14fb6:	3601      	adds	r6, #1
   14fb8:	00b6      	lsls	r6, r6, #2
   14fba:	199e      	adds	r6, r3, r6
   14fbc:	c220      	stmia	r2!, {r5}
   14fbe:	42b2      	cmp	r2, r6
   14fc0:	d1fc      	bne.n	14fbc <memset+0x6c>
   14fc2:	2203      	movs	r2, #3
   14fc4:	4397      	bics	r7, r2
   14fc6:	3704      	adds	r7, #4
   14fc8:	19db      	adds	r3, r3, r7
   14fca:	4014      	ands	r4, r2
   14fcc:	2c00      	cmp	r4, #0
   14fce:	d005      	beq.n	14fdc <memset+0x8c>
   14fd0:	b2c9      	uxtb	r1, r1
   14fd2:	191c      	adds	r4, r3, r4
   14fd4:	7019      	strb	r1, [r3, #0]
   14fd6:	3301      	adds	r3, #1
   14fd8:	429c      	cmp	r4, r3
   14fda:	d1fb      	bne.n	14fd4 <memset+0x84>
   14fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14fde:	0014      	movs	r4, r2
   14fe0:	0003      	movs	r3, r0
   14fe2:	e7c6      	b.n	14f72 <memset+0x22>

00014fe4 <__malloc_lock>:
   14fe4:	b510      	push	{r4, lr}
   14fe6:	4802      	ldr	r0, [pc, #8]	; (14ff0 <__malloc_lock+0xc>)
   14fe8:	f003 fa9a 	bl	18520 <__retarget_lock_acquire_recursive>
   14fec:	bd10      	pop	{r4, pc}
   14fee:	46c0      	nop			; (mov r8, r8)
   14ff0:	20001be0 	.word	0x20001be0

00014ff4 <__malloc_unlock>:
   14ff4:	b510      	push	{r4, lr}
   14ff6:	4802      	ldr	r0, [pc, #8]	; (15000 <__malloc_unlock+0xc>)
   14ff8:	f003 fa94 	bl	18524 <__retarget_lock_release_recursive>
   14ffc:	bd10      	pop	{r4, pc}
   14ffe:	46c0      	nop			; (mov r8, r8)
   15000:	20001be0 	.word	0x20001be0

00015004 <printf>:
   15004:	b40f      	push	{r0, r1, r2, r3}
   15006:	b500      	push	{lr}
   15008:	4906      	ldr	r1, [pc, #24]	; (15024 <printf+0x20>)
   1500a:	b083      	sub	sp, #12
   1500c:	ab04      	add	r3, sp, #16
   1500e:	6808      	ldr	r0, [r1, #0]
   15010:	cb04      	ldmia	r3!, {r2}
   15012:	6881      	ldr	r1, [r0, #8]
   15014:	9301      	str	r3, [sp, #4]
   15016:	f000 f9a3 	bl	15360 <_vfprintf_r>
   1501a:	b003      	add	sp, #12
   1501c:	bc08      	pop	{r3}
   1501e:	b004      	add	sp, #16
   15020:	4718      	bx	r3
   15022:	46c0      	nop			; (mov r8, r8)
   15024:	20000064 	.word	0x20000064

00015028 <_puts_r>:
   15028:	b530      	push	{r4, r5, lr}
   1502a:	0004      	movs	r4, r0
   1502c:	b089      	sub	sp, #36	; 0x24
   1502e:	0008      	movs	r0, r1
   15030:	000d      	movs	r5, r1
   15032:	f000 f963 	bl	152fc <strlen>
   15036:	ab04      	add	r3, sp, #16
   15038:	4a21      	ldr	r2, [pc, #132]	; (150c0 <_puts_r+0x98>)
   1503a:	9301      	str	r3, [sp, #4]
   1503c:	2302      	movs	r3, #2
   1503e:	9206      	str	r2, [sp, #24]
   15040:	2201      	movs	r2, #1
   15042:	9302      	str	r3, [sp, #8]
   15044:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   15046:	9005      	str	r0, [sp, #20]
   15048:	3001      	adds	r0, #1
   1504a:	9504      	str	r5, [sp, #16]
   1504c:	9207      	str	r2, [sp, #28]
   1504e:	9003      	str	r0, [sp, #12]
   15050:	68a5      	ldr	r5, [r4, #8]
   15052:	2b00      	cmp	r3, #0
   15054:	d02f      	beq.n	150b6 <_puts_r+0x8e>
   15056:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   15058:	07db      	lsls	r3, r3, #31
   1505a:	d424      	bmi.n	150a6 <_puts_r+0x7e>
   1505c:	230c      	movs	r3, #12
   1505e:	5eea      	ldrsh	r2, [r5, r3]
   15060:	b291      	uxth	r1, r2
   15062:	058b      	lsls	r3, r1, #22
   15064:	d51c      	bpl.n	150a0 <_puts_r+0x78>
   15066:	2380      	movs	r3, #128	; 0x80
   15068:	019b      	lsls	r3, r3, #6
   1506a:	4219      	tst	r1, r3
   1506c:	d105      	bne.n	1507a <_puts_r+0x52>
   1506e:	4313      	orrs	r3, r2
   15070:	81ab      	strh	r3, [r5, #12]
   15072:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   15074:	4b13      	ldr	r3, [pc, #76]	; (150c4 <_puts_r+0x9c>)
   15076:	4013      	ands	r3, r2
   15078:	666b      	str	r3, [r5, #100]	; 0x64
   1507a:	0020      	movs	r0, r4
   1507c:	aa01      	add	r2, sp, #4
   1507e:	0029      	movs	r1, r5
   15080:	f003 f894 	bl	181ac <__sfvwrite_r>
   15084:	1e44      	subs	r4, r0, #1
   15086:	41a0      	sbcs	r0, r4
   15088:	4244      	negs	r4, r0
   1508a:	200a      	movs	r0, #10
   1508c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1508e:	4304      	orrs	r4, r0
   15090:	07db      	lsls	r3, r3, #31
   15092:	d402      	bmi.n	1509a <_puts_r+0x72>
   15094:	89ab      	ldrh	r3, [r5, #12]
   15096:	059b      	lsls	r3, r3, #22
   15098:	d509      	bpl.n	150ae <_puts_r+0x86>
   1509a:	0020      	movs	r0, r4
   1509c:	b009      	add	sp, #36	; 0x24
   1509e:	bd30      	pop	{r4, r5, pc}
   150a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
   150a2:	f003 fa3d 	bl	18520 <__retarget_lock_acquire_recursive>
   150a6:	230c      	movs	r3, #12
   150a8:	5eea      	ldrsh	r2, [r5, r3]
   150aa:	b291      	uxth	r1, r2
   150ac:	e7db      	b.n	15066 <_puts_r+0x3e>
   150ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
   150b0:	f003 fa38 	bl	18524 <__retarget_lock_release_recursive>
   150b4:	e7f1      	b.n	1509a <_puts_r+0x72>
   150b6:	0020      	movs	r0, r4
   150b8:	f002 fef0 	bl	17e9c <__sinit>
   150bc:	e7cb      	b.n	15056 <_puts_r+0x2e>
   150be:	46c0      	nop			; (mov r8, r8)
   150c0:	0001aec8 	.word	0x0001aec8
   150c4:	ffffdfff 	.word	0xffffdfff

000150c8 <puts>:
   150c8:	b510      	push	{r4, lr}
   150ca:	4b03      	ldr	r3, [pc, #12]	; (150d8 <puts+0x10>)
   150cc:	0001      	movs	r1, r0
   150ce:	6818      	ldr	r0, [r3, #0]
   150d0:	f7ff ffaa 	bl	15028 <_puts_r>
   150d4:	bd10      	pop	{r4, pc}
   150d6:	46c0      	nop			; (mov r8, r8)
   150d8:	20000064 	.word	0x20000064

000150dc <srand>:
   150dc:	2200      	movs	r2, #0
   150de:	4b03      	ldr	r3, [pc, #12]	; (150ec <srand+0x10>)
   150e0:	681b      	ldr	r3, [r3, #0]
   150e2:	33a8      	adds	r3, #168	; 0xa8
   150e4:	6018      	str	r0, [r3, #0]
   150e6:	605a      	str	r2, [r3, #4]
   150e8:	4770      	bx	lr
   150ea:	46c0      	nop			; (mov r8, r8)
   150ec:	20000064 	.word	0x20000064

000150f0 <rand>:
   150f0:	b510      	push	{r4, lr}
   150f2:	4b09      	ldr	r3, [pc, #36]	; (15118 <rand+0x28>)
   150f4:	4a09      	ldr	r2, [pc, #36]	; (1511c <rand+0x2c>)
   150f6:	681c      	ldr	r4, [r3, #0]
   150f8:	4b09      	ldr	r3, [pc, #36]	; (15120 <rand+0x30>)
   150fa:	34a8      	adds	r4, #168	; 0xa8
   150fc:	6820      	ldr	r0, [r4, #0]
   150fe:	6861      	ldr	r1, [r4, #4]
   15100:	f7fc fd02 	bl	11b08 <__aeabi_lmul>
   15104:	2201      	movs	r2, #1
   15106:	2300      	movs	r3, #0
   15108:	1880      	adds	r0, r0, r2
   1510a:	4159      	adcs	r1, r3
   1510c:	6020      	str	r0, [r4, #0]
   1510e:	6061      	str	r1, [r4, #4]
   15110:	0048      	lsls	r0, r1, #1
   15112:	0840      	lsrs	r0, r0, #1
   15114:	bd10      	pop	{r4, pc}
   15116:	46c0      	nop			; (mov r8, r8)
   15118:	20000064 	.word	0x20000064
   1511c:	4c957f2d 	.word	0x4c957f2d
   15120:	5851f42d 	.word	0x5851f42d

00015124 <_sbrk_r>:
   15124:	2300      	movs	r3, #0
   15126:	b570      	push	{r4, r5, r6, lr}
   15128:	4c06      	ldr	r4, [pc, #24]	; (15144 <_sbrk_r+0x20>)
   1512a:	0005      	movs	r5, r0
   1512c:	0008      	movs	r0, r1
   1512e:	6023      	str	r3, [r4, #0]
   15130:	f7ee f9d0 	bl	34d4 <_sbrk>
   15134:	1c43      	adds	r3, r0, #1
   15136:	d000      	beq.n	1513a <_sbrk_r+0x16>
   15138:	bd70      	pop	{r4, r5, r6, pc}
   1513a:	6823      	ldr	r3, [r4, #0]
   1513c:	2b00      	cmp	r3, #0
   1513e:	d0fb      	beq.n	15138 <_sbrk_r+0x14>
   15140:	602b      	str	r3, [r5, #0]
   15142:	e7f9      	b.n	15138 <_sbrk_r+0x14>
   15144:	20001bf4 	.word	0x20001bf4

00015148 <setbuf>:
   15148:	424a      	negs	r2, r1
   1514a:	414a      	adcs	r2, r1
   1514c:	2380      	movs	r3, #128	; 0x80
   1514e:	b510      	push	{r4, lr}
   15150:	0052      	lsls	r2, r2, #1
   15152:	00db      	lsls	r3, r3, #3
   15154:	f000 f802 	bl	1515c <setvbuf>
   15158:	bd10      	pop	{r4, pc}
   1515a:	46c0      	nop			; (mov r8, r8)

0001515c <setvbuf>:
   1515c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1515e:	4647      	mov	r7, r8
   15160:	46ce      	mov	lr, r9
   15162:	b580      	push	{r7, lr}
   15164:	001f      	movs	r7, r3
   15166:	4b63      	ldr	r3, [pc, #396]	; (152f4 <setvbuf+0x198>)
   15168:	b083      	sub	sp, #12
   1516a:	681d      	ldr	r5, [r3, #0]
   1516c:	0004      	movs	r4, r0
   1516e:	4688      	mov	r8, r1
   15170:	0016      	movs	r6, r2
   15172:	2d00      	cmp	r5, #0
   15174:	d002      	beq.n	1517c <setvbuf+0x20>
   15176:	6bab      	ldr	r3, [r5, #56]	; 0x38
   15178:	2b00      	cmp	r3, #0
   1517a:	d066      	beq.n	1524a <setvbuf+0xee>
   1517c:	2e02      	cmp	r6, #2
   1517e:	d005      	beq.n	1518c <setvbuf+0x30>
   15180:	2e01      	cmp	r6, #1
   15182:	d900      	bls.n	15186 <setvbuf+0x2a>
   15184:	e0a1      	b.n	152ca <setvbuf+0x16e>
   15186:	2f00      	cmp	r7, #0
   15188:	da00      	bge.n	1518c <setvbuf+0x30>
   1518a:	e09e      	b.n	152ca <setvbuf+0x16e>
   1518c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1518e:	07db      	lsls	r3, r3, #31
   15190:	d533      	bpl.n	151fa <setvbuf+0x9e>
   15192:	0021      	movs	r1, r4
   15194:	0028      	movs	r0, r5
   15196:	f002 fe27 	bl	17de8 <_fflush_r>
   1519a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1519c:	2900      	cmp	r1, #0
   1519e:	d008      	beq.n	151b2 <setvbuf+0x56>
   151a0:	0023      	movs	r3, r4
   151a2:	3340      	adds	r3, #64	; 0x40
   151a4:	4299      	cmp	r1, r3
   151a6:	d002      	beq.n	151ae <setvbuf+0x52>
   151a8:	0028      	movs	r0, r5
   151aa:	f002 ff21 	bl	17ff0 <_free_r>
   151ae:	2300      	movs	r3, #0
   151b0:	6323      	str	r3, [r4, #48]	; 0x30
   151b2:	2300      	movs	r3, #0
   151b4:	61a3      	str	r3, [r4, #24]
   151b6:	6063      	str	r3, [r4, #4]
   151b8:	220c      	movs	r2, #12
   151ba:	5ea3      	ldrsh	r3, [r4, r2]
   151bc:	061a      	lsls	r2, r3, #24
   151be:	d43d      	bmi.n	1523c <setvbuf+0xe0>
   151c0:	4a4d      	ldr	r2, [pc, #308]	; (152f8 <setvbuf+0x19c>)
   151c2:	4013      	ands	r3, r2
   151c4:	81a3      	strh	r3, [r4, #12]
   151c6:	2e02      	cmp	r6, #2
   151c8:	d01e      	beq.n	15208 <setvbuf+0xac>
   151ca:	ab01      	add	r3, sp, #4
   151cc:	466a      	mov	r2, sp
   151ce:	0021      	movs	r1, r4
   151d0:	0028      	movs	r0, r5
   151d2:	f003 f9a9 	bl	18528 <__swhatbuf_r>
   151d6:	89a3      	ldrh	r3, [r4, #12]
   151d8:	4318      	orrs	r0, r3
   151da:	81a0      	strh	r0, [r4, #12]
   151dc:	2f00      	cmp	r7, #0
   151de:	d138      	bne.n	15252 <setvbuf+0xf6>
   151e0:	9f00      	ldr	r7, [sp, #0]
   151e2:	0038      	movs	r0, r7
   151e4:	f7ff fbb4 	bl	14950 <malloc>
   151e8:	4680      	mov	r8, r0
   151ea:	2800      	cmp	r0, #0
   151ec:	d100      	bne.n	151f0 <setvbuf+0x94>
   151ee:	e06f      	b.n	152d0 <setvbuf+0x174>
   151f0:	2280      	movs	r2, #128	; 0x80
   151f2:	89a3      	ldrh	r3, [r4, #12]
   151f4:	4313      	orrs	r3, r2
   151f6:	81a3      	strh	r3, [r4, #12]
   151f8:	e02e      	b.n	15258 <setvbuf+0xfc>
   151fa:	89a3      	ldrh	r3, [r4, #12]
   151fc:	059b      	lsls	r3, r3, #22
   151fe:	d4c8      	bmi.n	15192 <setvbuf+0x36>
   15200:	6da0      	ldr	r0, [r4, #88]	; 0x58
   15202:	f003 f98d 	bl	18520 <__retarget_lock_acquire_recursive>
   15206:	e7c4      	b.n	15192 <setvbuf+0x36>
   15208:	2500      	movs	r5, #0
   1520a:	2202      	movs	r2, #2
   1520c:	4313      	orrs	r3, r2
   1520e:	2200      	movs	r2, #0
   15210:	60a2      	str	r2, [r4, #8]
   15212:	0022      	movs	r2, r4
   15214:	3243      	adds	r2, #67	; 0x43
   15216:	6022      	str	r2, [r4, #0]
   15218:	6122      	str	r2, [r4, #16]
   1521a:	2201      	movs	r2, #1
   1521c:	6e61      	ldr	r1, [r4, #100]	; 0x64
   1521e:	81a3      	strh	r3, [r4, #12]
   15220:	6162      	str	r2, [r4, #20]
   15222:	4211      	tst	r1, r2
   15224:	d104      	bne.n	15230 <setvbuf+0xd4>
   15226:	059b      	lsls	r3, r3, #22
   15228:	d402      	bmi.n	15230 <setvbuf+0xd4>
   1522a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1522c:	f003 f97a 	bl	18524 <__retarget_lock_release_recursive>
   15230:	0028      	movs	r0, r5
   15232:	b003      	add	sp, #12
   15234:	bc0c      	pop	{r2, r3}
   15236:	4690      	mov	r8, r2
   15238:	4699      	mov	r9, r3
   1523a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1523c:	6921      	ldr	r1, [r4, #16]
   1523e:	0028      	movs	r0, r5
   15240:	f002 fed6 	bl	17ff0 <_free_r>
   15244:	220c      	movs	r2, #12
   15246:	5ea3      	ldrsh	r3, [r4, r2]
   15248:	e7ba      	b.n	151c0 <setvbuf+0x64>
   1524a:	0028      	movs	r0, r5
   1524c:	f002 fe26 	bl	17e9c <__sinit>
   15250:	e794      	b.n	1517c <setvbuf+0x20>
   15252:	4643      	mov	r3, r8
   15254:	2b00      	cmp	r3, #0
   15256:	d0c4      	beq.n	151e2 <setvbuf+0x86>
   15258:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1525a:	2b00      	cmp	r3, #0
   1525c:	d027      	beq.n	152ae <setvbuf+0x152>
   1525e:	9b00      	ldr	r3, [sp, #0]
   15260:	429f      	cmp	r7, r3
   15262:	d02a      	beq.n	152ba <setvbuf+0x15e>
   15264:	2380      	movs	r3, #128	; 0x80
   15266:	89a2      	ldrh	r2, [r4, #12]
   15268:	011b      	lsls	r3, r3, #4
   1526a:	4313      	orrs	r3, r2
   1526c:	b21b      	sxth	r3, r3
   1526e:	81a3      	strh	r3, [r4, #12]
   15270:	2e01      	cmp	r6, #1
   15272:	d026      	beq.n	152c2 <setvbuf+0x166>
   15274:	4642      	mov	r2, r8
   15276:	6022      	str	r2, [r4, #0]
   15278:	6122      	str	r2, [r4, #16]
   1527a:	2208      	movs	r2, #8
   1527c:	b29b      	uxth	r3, r3
   1527e:	6167      	str	r7, [r4, #20]
   15280:	401a      	ands	r2, r3
   15282:	d00b      	beq.n	1529c <setvbuf+0x140>
   15284:	07da      	lsls	r2, r3, #31
   15286:	d510      	bpl.n	152aa <setvbuf+0x14e>
   15288:	2200      	movs	r2, #0
   1528a:	2501      	movs	r5, #1
   1528c:	60a2      	str	r2, [r4, #8]
   1528e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   15290:	427f      	negs	r7, r7
   15292:	61a7      	str	r7, [r4, #24]
   15294:	4015      	ands	r5, r2
   15296:	d0c6      	beq.n	15226 <setvbuf+0xca>
   15298:	2500      	movs	r5, #0
   1529a:	e7c9      	b.n	15230 <setvbuf+0xd4>
   1529c:	60a2      	str	r2, [r4, #8]
   1529e:	2501      	movs	r5, #1
   152a0:	6e62      	ldr	r2, [r4, #100]	; 0x64
   152a2:	4015      	ands	r5, r2
   152a4:	d0bf      	beq.n	15226 <setvbuf+0xca>
   152a6:	2500      	movs	r5, #0
   152a8:	e7c2      	b.n	15230 <setvbuf+0xd4>
   152aa:	60a7      	str	r7, [r4, #8]
   152ac:	e7f7      	b.n	1529e <setvbuf+0x142>
   152ae:	0028      	movs	r0, r5
   152b0:	f002 fdf4 	bl	17e9c <__sinit>
   152b4:	9b00      	ldr	r3, [sp, #0]
   152b6:	429f      	cmp	r7, r3
   152b8:	d1d4      	bne.n	15264 <setvbuf+0x108>
   152ba:	220c      	movs	r2, #12
   152bc:	5ea3      	ldrsh	r3, [r4, r2]
   152be:	2e01      	cmp	r6, #1
   152c0:	d1d8      	bne.n	15274 <setvbuf+0x118>
   152c2:	2201      	movs	r2, #1
   152c4:	4313      	orrs	r3, r2
   152c6:	81a3      	strh	r3, [r4, #12]
   152c8:	e7d4      	b.n	15274 <setvbuf+0x118>
   152ca:	2501      	movs	r5, #1
   152cc:	426d      	negs	r5, r5
   152ce:	e7af      	b.n	15230 <setvbuf+0xd4>
   152d0:	9b00      	ldr	r3, [sp, #0]
   152d2:	4699      	mov	r9, r3
   152d4:	42bb      	cmp	r3, r7
   152d6:	d005      	beq.n	152e4 <setvbuf+0x188>
   152d8:	0018      	movs	r0, r3
   152da:	f7ff fb39 	bl	14950 <malloc>
   152de:	4680      	mov	r8, r0
   152e0:	2800      	cmp	r0, #0
   152e2:	d104      	bne.n	152ee <setvbuf+0x192>
   152e4:	2501      	movs	r5, #1
   152e6:	220c      	movs	r2, #12
   152e8:	5ea3      	ldrsh	r3, [r4, r2]
   152ea:	426d      	negs	r5, r5
   152ec:	e78d      	b.n	1520a <setvbuf+0xae>
   152ee:	464f      	mov	r7, r9
   152f0:	e77e      	b.n	151f0 <setvbuf+0x94>
   152f2:	46c0      	nop			; (mov r8, r8)
   152f4:	20000064 	.word	0x20000064
   152f8:	fffff35c 	.word	0xfffff35c

000152fc <strlen>:
   152fc:	b510      	push	{r4, lr}
   152fe:	0783      	lsls	r3, r0, #30
   15300:	d025      	beq.n	1534e <strlen+0x52>
   15302:	7803      	ldrb	r3, [r0, #0]
   15304:	2b00      	cmp	r3, #0
   15306:	d024      	beq.n	15352 <strlen+0x56>
   15308:	0003      	movs	r3, r0
   1530a:	2103      	movs	r1, #3
   1530c:	e002      	b.n	15314 <strlen+0x18>
   1530e:	781a      	ldrb	r2, [r3, #0]
   15310:	2a00      	cmp	r2, #0
   15312:	d01a      	beq.n	1534a <strlen+0x4e>
   15314:	3301      	adds	r3, #1
   15316:	420b      	tst	r3, r1
   15318:	d1f9      	bne.n	1530e <strlen+0x12>
   1531a:	6819      	ldr	r1, [r3, #0]
   1531c:	4a0e      	ldr	r2, [pc, #56]	; (15358 <strlen+0x5c>)
   1531e:	4c0f      	ldr	r4, [pc, #60]	; (1535c <strlen+0x60>)
   15320:	188a      	adds	r2, r1, r2
   15322:	438a      	bics	r2, r1
   15324:	4222      	tst	r2, r4
   15326:	d106      	bne.n	15336 <strlen+0x3a>
   15328:	3304      	adds	r3, #4
   1532a:	6819      	ldr	r1, [r3, #0]
   1532c:	4a0a      	ldr	r2, [pc, #40]	; (15358 <strlen+0x5c>)
   1532e:	188a      	adds	r2, r1, r2
   15330:	438a      	bics	r2, r1
   15332:	4222      	tst	r2, r4
   15334:	d0f8      	beq.n	15328 <strlen+0x2c>
   15336:	001a      	movs	r2, r3
   15338:	781b      	ldrb	r3, [r3, #0]
   1533a:	2b00      	cmp	r3, #0
   1533c:	d003      	beq.n	15346 <strlen+0x4a>
   1533e:	3201      	adds	r2, #1
   15340:	7811      	ldrb	r1, [r2, #0]
   15342:	2900      	cmp	r1, #0
   15344:	d1fb      	bne.n	1533e <strlen+0x42>
   15346:	1a10      	subs	r0, r2, r0
   15348:	bd10      	pop	{r4, pc}
   1534a:	1a18      	subs	r0, r3, r0
   1534c:	e7fc      	b.n	15348 <strlen+0x4c>
   1534e:	0003      	movs	r3, r0
   15350:	e7e3      	b.n	1531a <strlen+0x1e>
   15352:	2000      	movs	r0, #0
   15354:	e7f8      	b.n	15348 <strlen+0x4c>
   15356:	46c0      	nop			; (mov r8, r8)
   15358:	fefefeff 	.word	0xfefefeff
   1535c:	80808080 	.word	0x80808080

00015360 <_vfprintf_r>:
   15360:	b5f0      	push	{r4, r5, r6, r7, lr}
   15362:	46de      	mov	lr, fp
   15364:	464e      	mov	r6, r9
   15366:	4645      	mov	r5, r8
   15368:	4657      	mov	r7, sl
   1536a:	b5e0      	push	{r5, r6, r7, lr}
   1536c:	b0c3      	sub	sp, #268	; 0x10c
   1536e:	4689      	mov	r9, r1
   15370:	0014      	movs	r4, r2
   15372:	001d      	movs	r5, r3
   15374:	930f      	str	r3, [sp, #60]	; 0x3c
   15376:	0006      	movs	r6, r0
   15378:	9006      	str	r0, [sp, #24]
   1537a:	f003 f8bf 	bl	184fc <_localeconv_r>
   1537e:	6803      	ldr	r3, [r0, #0]
   15380:	0018      	movs	r0, r3
   15382:	9318      	str	r3, [sp, #96]	; 0x60
   15384:	f7ff ffba 	bl	152fc <strlen>
   15388:	9017      	str	r0, [sp, #92]	; 0x5c
   1538a:	2e00      	cmp	r6, #0
   1538c:	d004      	beq.n	15398 <_vfprintf_r+0x38>
   1538e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   15390:	9307      	str	r3, [sp, #28]
   15392:	2b00      	cmp	r3, #0
   15394:	d100      	bne.n	15398 <_vfprintf_r+0x38>
   15396:	e0a7      	b.n	154e8 <_vfprintf_r+0x188>
   15398:	464b      	mov	r3, r9
   1539a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1539c:	07db      	lsls	r3, r3, #31
   1539e:	d478      	bmi.n	15492 <_vfprintf_r+0x132>
   153a0:	464b      	mov	r3, r9
   153a2:	210c      	movs	r1, #12
   153a4:	5e59      	ldrsh	r1, [r3, r1]
   153a6:	b28b      	uxth	r3, r1
   153a8:	059a      	lsls	r2, r3, #22
   153aa:	d56e      	bpl.n	1548a <_vfprintf_r+0x12a>
   153ac:	2280      	movs	r2, #128	; 0x80
   153ae:	0192      	lsls	r2, r2, #6
   153b0:	4213      	tst	r3, r2
   153b2:	d109      	bne.n	153c8 <_vfprintf_r+0x68>
   153b4:	430a      	orrs	r2, r1
   153b6:	464b      	mov	r3, r9
   153b8:	4649      	mov	r1, r9
   153ba:	819a      	strh	r2, [r3, #12]
   153bc:	6e49      	ldr	r1, [r1, #100]	; 0x64
   153be:	4bcc      	ldr	r3, [pc, #816]	; (156f0 <_vfprintf_r+0x390>)
   153c0:	400b      	ands	r3, r1
   153c2:	4649      	mov	r1, r9
   153c4:	664b      	str	r3, [r1, #100]	; 0x64
   153c6:	b293      	uxth	r3, r2
   153c8:	071a      	lsls	r2, r3, #28
   153ca:	d567      	bpl.n	1549c <_vfprintf_r+0x13c>
   153cc:	464a      	mov	r2, r9
   153ce:	6912      	ldr	r2, [r2, #16]
   153d0:	2a00      	cmp	r2, #0
   153d2:	d063      	beq.n	1549c <_vfprintf_r+0x13c>
   153d4:	221a      	movs	r2, #26
   153d6:	401a      	ands	r2, r3
   153d8:	2a0a      	cmp	r2, #10
   153da:	d100      	bne.n	153de <_vfprintf_r+0x7e>
   153dc:	e088      	b.n	154f0 <_vfprintf_r+0x190>
   153de:	ab32      	add	r3, sp, #200	; 0xc8
   153e0:	9325      	str	r3, [sp, #148]	; 0x94
   153e2:	2300      	movs	r3, #0
   153e4:	46cb      	mov	fp, r9
   153e6:	af25      	add	r7, sp, #148	; 0x94
   153e8:	60bb      	str	r3, [r7, #8]
   153ea:	607b      	str	r3, [r7, #4]
   153ec:	9407      	str	r4, [sp, #28]
   153ee:	9314      	str	r3, [sp, #80]	; 0x50
   153f0:	9316      	str	r3, [sp, #88]	; 0x58
   153f2:	9315      	str	r3, [sp, #84]	; 0x54
   153f4:	ae32      	add	r6, sp, #200	; 0xc8
   153f6:	9319      	str	r3, [sp, #100]	; 0x64
   153f8:	931a      	str	r3, [sp, #104]	; 0x68
   153fa:	930a      	str	r3, [sp, #40]	; 0x28
   153fc:	9c07      	ldr	r4, [sp, #28]
   153fe:	7823      	ldrb	r3, [r4, #0]
   15400:	2b00      	cmp	r3, #0
   15402:	d101      	bne.n	15408 <_vfprintf_r+0xa8>
   15404:	f000 fd9e 	bl	15f44 <_vfprintf_r+0xbe4>
   15408:	2b25      	cmp	r3, #37	; 0x25
   1540a:	d103      	bne.n	15414 <_vfprintf_r+0xb4>
   1540c:	f000 fd9a 	bl	15f44 <_vfprintf_r+0xbe4>
   15410:	2b25      	cmp	r3, #37	; 0x25
   15412:	d003      	beq.n	1541c <_vfprintf_r+0xbc>
   15414:	3401      	adds	r4, #1
   15416:	7823      	ldrb	r3, [r4, #0]
   15418:	2b00      	cmp	r3, #0
   1541a:	d1f9      	bne.n	15410 <_vfprintf_r+0xb0>
   1541c:	9b07      	ldr	r3, [sp, #28]
   1541e:	1ae5      	subs	r5, r4, r3
   15420:	d010      	beq.n	15444 <_vfprintf_r+0xe4>
   15422:	9b07      	ldr	r3, [sp, #28]
   15424:	6075      	str	r5, [r6, #4]
   15426:	6033      	str	r3, [r6, #0]
   15428:	68bb      	ldr	r3, [r7, #8]
   1542a:	195b      	adds	r3, r3, r5
   1542c:	60bb      	str	r3, [r7, #8]
   1542e:	687b      	ldr	r3, [r7, #4]
   15430:	3301      	adds	r3, #1
   15432:	607b      	str	r3, [r7, #4]
   15434:	2b07      	cmp	r3, #7
   15436:	dc4c      	bgt.n	154d2 <_vfprintf_r+0x172>
   15438:	3608      	adds	r6, #8
   1543a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1543c:	469c      	mov	ip, r3
   1543e:	44ac      	add	ip, r5
   15440:	4663      	mov	r3, ip
   15442:	930a      	str	r3, [sp, #40]	; 0x28
   15444:	7823      	ldrb	r3, [r4, #0]
   15446:	2b00      	cmp	r3, #0
   15448:	d101      	bne.n	1544e <_vfprintf_r+0xee>
   1544a:	f000 fc99 	bl	15d80 <_vfprintf_r+0xa20>
   1544e:	1c63      	adds	r3, r4, #1
   15450:	9307      	str	r3, [sp, #28]
   15452:	2300      	movs	r3, #0
   15454:	aa16      	add	r2, sp, #88	; 0x58
   15456:	77d3      	strb	r3, [r2, #31]
   15458:	2201      	movs	r2, #1
   1545a:	4252      	negs	r2, r2
   1545c:	4692      	mov	sl, r2
   1545e:	2200      	movs	r2, #0
   15460:	920b      	str	r2, [sp, #44]	; 0x2c
   15462:	3220      	adds	r2, #32
   15464:	4691      	mov	r9, r2
   15466:	3220      	adds	r2, #32
   15468:	7863      	ldrb	r3, [r4, #1]
   1546a:	2100      	movs	r1, #0
   1546c:	2000      	movs	r0, #0
   1546e:	2400      	movs	r4, #0
   15470:	4694      	mov	ip, r2
   15472:	9a07      	ldr	r2, [sp, #28]
   15474:	3201      	adds	r2, #1
   15476:	9207      	str	r2, [sp, #28]
   15478:	001a      	movs	r2, r3
   1547a:	3a20      	subs	r2, #32
   1547c:	2a58      	cmp	r2, #88	; 0x58
   1547e:	d900      	bls.n	15482 <_vfprintf_r+0x122>
   15480:	e2e7      	b.n	15a52 <_vfprintf_r+0x6f2>
   15482:	4d9c      	ldr	r5, [pc, #624]	; (156f4 <_vfprintf_r+0x394>)
   15484:	0092      	lsls	r2, r2, #2
   15486:	58aa      	ldr	r2, [r5, r2]
   15488:	4697      	mov	pc, r2
   1548a:	464b      	mov	r3, r9
   1548c:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1548e:	f003 f847 	bl	18520 <__retarget_lock_acquire_recursive>
   15492:	464b      	mov	r3, r9
   15494:	210c      	movs	r1, #12
   15496:	5e59      	ldrsh	r1, [r3, r1]
   15498:	b28b      	uxth	r3, r1
   1549a:	e787      	b.n	153ac <_vfprintf_r+0x4c>
   1549c:	4649      	mov	r1, r9
   1549e:	9806      	ldr	r0, [sp, #24]
   154a0:	f001 fb0e 	bl	16ac0 <__swsetup_r>
   154a4:	464b      	mov	r3, r9
   154a6:	2800      	cmp	r0, #0
   154a8:	d03a      	beq.n	15520 <_vfprintf_r+0x1c0>
   154aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   154ac:	07db      	lsls	r3, r3, #31
   154ae:	d405      	bmi.n	154bc <_vfprintf_r+0x15c>
   154b0:	464b      	mov	r3, r9
   154b2:	899b      	ldrh	r3, [r3, #12]
   154b4:	059b      	lsls	r3, r3, #22
   154b6:	d401      	bmi.n	154bc <_vfprintf_r+0x15c>
   154b8:	f000 ffcf 	bl	1645a <_vfprintf_r+0x10fa>
   154bc:	2301      	movs	r3, #1
   154be:	425b      	negs	r3, r3
   154c0:	930a      	str	r3, [sp, #40]	; 0x28
   154c2:	980a      	ldr	r0, [sp, #40]	; 0x28
   154c4:	b043      	add	sp, #268	; 0x10c
   154c6:	bc3c      	pop	{r2, r3, r4, r5}
   154c8:	4690      	mov	r8, r2
   154ca:	4699      	mov	r9, r3
   154cc:	46a2      	mov	sl, r4
   154ce:	46ab      	mov	fp, r5
   154d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   154d2:	003a      	movs	r2, r7
   154d4:	4659      	mov	r1, fp
   154d6:	9806      	ldr	r0, [sp, #24]
   154d8:	f003 fec4 	bl	19264 <__sprint_r>
   154dc:	2800      	cmp	r0, #0
   154de:	d001      	beq.n	154e4 <_vfprintf_r+0x184>
   154e0:	f000 fcce 	bl	15e80 <_vfprintf_r+0xb20>
   154e4:	ae32      	add	r6, sp, #200	; 0xc8
   154e6:	e7a8      	b.n	1543a <_vfprintf_r+0xda>
   154e8:	9806      	ldr	r0, [sp, #24]
   154ea:	f002 fcd7 	bl	17e9c <__sinit>
   154ee:	e753      	b.n	15398 <_vfprintf_r+0x38>
   154f0:	464a      	mov	r2, r9
   154f2:	210e      	movs	r1, #14
   154f4:	5e52      	ldrsh	r2, [r2, r1]
   154f6:	2a00      	cmp	r2, #0
   154f8:	da00      	bge.n	154fc <_vfprintf_r+0x19c>
   154fa:	e770      	b.n	153de <_vfprintf_r+0x7e>
   154fc:	464a      	mov	r2, r9
   154fe:	6e52      	ldr	r2, [r2, #100]	; 0x64
   15500:	07d2      	lsls	r2, r2, #31
   15502:	d405      	bmi.n	15510 <_vfprintf_r+0x1b0>
   15504:	059b      	lsls	r3, r3, #22
   15506:	d403      	bmi.n	15510 <_vfprintf_r+0x1b0>
   15508:	464b      	mov	r3, r9
   1550a:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1550c:	f003 f80a 	bl	18524 <__retarget_lock_release_recursive>
   15510:	002b      	movs	r3, r5
   15512:	0022      	movs	r2, r4
   15514:	4649      	mov	r1, r9
   15516:	9806      	ldr	r0, [sp, #24]
   15518:	f001 fa8e 	bl	16a38 <__sbprintf>
   1551c:	900a      	str	r0, [sp, #40]	; 0x28
   1551e:	e7d0      	b.n	154c2 <_vfprintf_r+0x162>
   15520:	899b      	ldrh	r3, [r3, #12]
   15522:	e757      	b.n	153d4 <_vfprintf_r+0x74>
   15524:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15526:	920f      	str	r2, [sp, #60]	; 0x3c
   15528:	425b      	negs	r3, r3
   1552a:	930b      	str	r3, [sp, #44]	; 0x2c
   1552c:	2304      	movs	r3, #4
   1552e:	431c      	orrs	r4, r3
   15530:	9b07      	ldr	r3, [sp, #28]
   15532:	781b      	ldrb	r3, [r3, #0]
   15534:	e79d      	b.n	15472 <_vfprintf_r+0x112>
   15536:	9b07      	ldr	r3, [sp, #28]
   15538:	2101      	movs	r1, #1
   1553a:	781b      	ldrb	r3, [r3, #0]
   1553c:	202b      	movs	r0, #43	; 0x2b
   1553e:	e798      	b.n	15472 <_vfprintf_r+0x112>
   15540:	9b07      	ldr	r3, [sp, #28]
   15542:	1c5a      	adds	r2, r3, #1
   15544:	781b      	ldrb	r3, [r3, #0]
   15546:	4690      	mov	r8, r2
   15548:	2b2a      	cmp	r3, #42	; 0x2a
   1554a:	d101      	bne.n	15550 <_vfprintf_r+0x1f0>
   1554c:	f001 fa38 	bl	169c0 <_vfprintf_r+0x1660>
   15550:	001a      	movs	r2, r3
   15552:	2500      	movs	r5, #0
   15554:	3a30      	subs	r2, #48	; 0x30
   15556:	46aa      	mov	sl, r5
   15558:	2a09      	cmp	r2, #9
   1555a:	d901      	bls.n	15560 <_vfprintf_r+0x200>
   1555c:	f001 f96d 	bl	1683a <_vfprintf_r+0x14da>
   15560:	0025      	movs	r5, r4
   15562:	4643      	mov	r3, r8
   15564:	4654      	mov	r4, sl
   15566:	4688      	mov	r8, r1
   15568:	4682      	mov	sl, r0
   1556a:	00a1      	lsls	r1, r4, #2
   1556c:	190c      	adds	r4, r1, r4
   1556e:	7818      	ldrb	r0, [r3, #0]
   15570:	0064      	lsls	r4, r4, #1
   15572:	18a4      	adds	r4, r4, r2
   15574:	0002      	movs	r2, r0
   15576:	1c59      	adds	r1, r3, #1
   15578:	3a30      	subs	r2, #48	; 0x30
   1557a:	000b      	movs	r3, r1
   1557c:	2a09      	cmp	r2, #9
   1557e:	d9f4      	bls.n	1556a <_vfprintf_r+0x20a>
   15580:	9107      	str	r1, [sp, #28]
   15582:	0003      	movs	r3, r0
   15584:	4641      	mov	r1, r8
   15586:	4650      	mov	r0, sl
   15588:	46a2      	mov	sl, r4
   1558a:	002c      	movs	r4, r5
   1558c:	e774      	b.n	15478 <_vfprintf_r+0x118>
   1558e:	9312      	str	r3, [sp, #72]	; 0x48
   15590:	2900      	cmp	r1, #0
   15592:	d001      	beq.n	15598 <_vfprintf_r+0x238>
   15594:	f001 fa2e 	bl	169f4 <_vfprintf_r+0x1694>
   15598:	4b57      	ldr	r3, [pc, #348]	; (156f8 <_vfprintf_r+0x398>)
   1559a:	9319      	str	r3, [sp, #100]	; 0x64
   1559c:	06a3      	lsls	r3, r4, #26
   1559e:	d501      	bpl.n	155a4 <_vfprintf_r+0x244>
   155a0:	f000 fe9a 	bl	162d8 <_vfprintf_r+0xf78>
   155a4:	06e3      	lsls	r3, r4, #27
   155a6:	d501      	bpl.n	155ac <_vfprintf_r+0x24c>
   155a8:	f000 fd9a 	bl	160e0 <_vfprintf_r+0xd80>
   155ac:	0663      	lsls	r3, r4, #25
   155ae:	d401      	bmi.n	155b4 <_vfprintf_r+0x254>
   155b0:	f000 fd96 	bl	160e0 <_vfprintf_r+0xd80>
   155b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   155b6:	881a      	ldrh	r2, [r3, #0]
   155b8:	920c      	str	r2, [sp, #48]	; 0x30
   155ba:	2200      	movs	r2, #0
   155bc:	3304      	adds	r3, #4
   155be:	920d      	str	r2, [sp, #52]	; 0x34
   155c0:	930f      	str	r3, [sp, #60]	; 0x3c
   155c2:	07e3      	lsls	r3, r4, #31
   155c4:	d401      	bmi.n	155ca <_vfprintf_r+0x26a>
   155c6:	f000 fd76 	bl	160b6 <_vfprintf_r+0xd56>
   155ca:	990c      	ldr	r1, [sp, #48]	; 0x30
   155cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   155ce:	000b      	movs	r3, r1
   155d0:	4313      	orrs	r3, r2
   155d2:	001a      	movs	r2, r3
   155d4:	2302      	movs	r3, #2
   155d6:	2a00      	cmp	r2, #0
   155d8:	d008      	beq.n	155ec <_vfprintf_r+0x28c>
   155da:	2030      	movs	r0, #48	; 0x30
   155dc:	a91e      	add	r1, sp, #120	; 0x78
   155de:	7008      	strb	r0, [r1, #0]
   155e0:	2548      	movs	r5, #72	; 0x48
   155e2:	4668      	mov	r0, sp
   155e4:	1940      	adds	r0, r0, r5
   155e6:	7800      	ldrb	r0, [r0, #0]
   155e8:	431c      	orrs	r4, r3
   155ea:	7048      	strb	r0, [r1, #1]
   155ec:	2100      	movs	r1, #0
   155ee:	4688      	mov	r8, r1
   155f0:	a816      	add	r0, sp, #88	; 0x58
   155f2:	77c1      	strb	r1, [r0, #31]
   155f4:	4651      	mov	r1, sl
   155f6:	3101      	adds	r1, #1
   155f8:	d100      	bne.n	155fc <_vfprintf_r+0x29c>
   155fa:	e0e6      	b.n	157ca <_vfprintf_r+0x46a>
   155fc:	2180      	movs	r1, #128	; 0x80
   155fe:	0020      	movs	r0, r4
   15600:	4388      	bics	r0, r1
   15602:	9009      	str	r0, [sp, #36]	; 0x24
   15604:	2a00      	cmp	r2, #0
   15606:	d000      	beq.n	1560a <_vfprintf_r+0x2aa>
   15608:	e0e3      	b.n	157d2 <_vfprintf_r+0x472>
   1560a:	4652      	mov	r2, sl
   1560c:	2a00      	cmp	r2, #0
   1560e:	d001      	beq.n	15614 <_vfprintf_r+0x2b4>
   15610:	f000 fc38 	bl	15e84 <_vfprintf_r+0xb24>
   15614:	2b00      	cmp	r3, #0
   15616:	d001      	beq.n	1561c <_vfprintf_r+0x2bc>
   15618:	f000 fd0c 	bl	16034 <_vfprintf_r+0xcd4>
   1561c:	2001      	movs	r0, #1
   1561e:	ab32      	add	r3, sp, #200	; 0xc8
   15620:	4020      	ands	r0, r4
   15622:	900e      	str	r0, [sp, #56]	; 0x38
   15624:	9311      	str	r3, [sp, #68]	; 0x44
   15626:	d008      	beq.n	1563a <_vfprintf_r+0x2da>
   15628:	2327      	movs	r3, #39	; 0x27
   1562a:	2130      	movs	r1, #48	; 0x30
   1562c:	aa28      	add	r2, sp, #160	; 0xa0
   1562e:	54d1      	strb	r1, [r2, r3]
   15630:	aa16      	add	r2, sp, #88	; 0x58
   15632:	4694      	mov	ip, r2
   15634:	3348      	adds	r3, #72	; 0x48
   15636:	4463      	add	r3, ip
   15638:	9311      	str	r3, [sp, #68]	; 0x44
   1563a:	4653      	mov	r3, sl
   1563c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1563e:	9308      	str	r3, [sp, #32]
   15640:	4592      	cmp	sl, r2
   15642:	da00      	bge.n	15646 <_vfprintf_r+0x2e6>
   15644:	9208      	str	r2, [sp, #32]
   15646:	2300      	movs	r3, #0
   15648:	9313      	str	r3, [sp, #76]	; 0x4c
   1564a:	4643      	mov	r3, r8
   1564c:	2b00      	cmp	r3, #0
   1564e:	d002      	beq.n	15656 <_vfprintf_r+0x2f6>
   15650:	9b08      	ldr	r3, [sp, #32]
   15652:	3301      	adds	r3, #1
   15654:	9308      	str	r3, [sp, #32]
   15656:	2302      	movs	r3, #2
   15658:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1565a:	401a      	ands	r2, r3
   1565c:	4691      	mov	r9, r2
   1565e:	d002      	beq.n	15666 <_vfprintf_r+0x306>
   15660:	9b08      	ldr	r3, [sp, #32]
   15662:	3302      	adds	r3, #2
   15664:	9308      	str	r3, [sp, #32]
   15666:	2384      	movs	r3, #132	; 0x84
   15668:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1566a:	401a      	ands	r2, r3
   1566c:	9210      	str	r2, [sp, #64]	; 0x40
   1566e:	d000      	beq.n	15672 <_vfprintf_r+0x312>
   15670:	e207      	b.n	15a82 <_vfprintf_r+0x722>
   15672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15674:	9a08      	ldr	r2, [sp, #32]
   15676:	1a9c      	subs	r4, r3, r2
   15678:	2c00      	cmp	r4, #0
   1567a:	dc00      	bgt.n	1567e <_vfprintf_r+0x31e>
   1567c:	e201      	b.n	15a82 <_vfprintf_r+0x722>
   1567e:	491f      	ldr	r1, [pc, #124]	; (156fc <_vfprintf_r+0x39c>)
   15680:	68ba      	ldr	r2, [r7, #8]
   15682:	687b      	ldr	r3, [r7, #4]
   15684:	4688      	mov	r8, r1
   15686:	2c10      	cmp	r4, #16
   15688:	dd21      	ble.n	156ce <_vfprintf_r+0x36e>
   1568a:	0031      	movs	r1, r6
   1568c:	2510      	movs	r5, #16
   1568e:	465e      	mov	r6, fp
   15690:	e003      	b.n	1569a <_vfprintf_r+0x33a>
   15692:	3c10      	subs	r4, #16
   15694:	3108      	adds	r1, #8
   15696:	2c10      	cmp	r4, #16
   15698:	dd17      	ble.n	156ca <_vfprintf_r+0x36a>
   1569a:	4640      	mov	r0, r8
   1569c:	3210      	adds	r2, #16
   1569e:	3301      	adds	r3, #1
   156a0:	6008      	str	r0, [r1, #0]
   156a2:	604d      	str	r5, [r1, #4]
   156a4:	60ba      	str	r2, [r7, #8]
   156a6:	607b      	str	r3, [r7, #4]
   156a8:	2b07      	cmp	r3, #7
   156aa:	ddf2      	ble.n	15692 <_vfprintf_r+0x332>
   156ac:	003a      	movs	r2, r7
   156ae:	0031      	movs	r1, r6
   156b0:	9806      	ldr	r0, [sp, #24]
   156b2:	f003 fdd7 	bl	19264 <__sprint_r>
   156b6:	2800      	cmp	r0, #0
   156b8:	d001      	beq.n	156be <_vfprintf_r+0x35e>
   156ba:	f000 fccf 	bl	1605c <_vfprintf_r+0xcfc>
   156be:	3c10      	subs	r4, #16
   156c0:	68ba      	ldr	r2, [r7, #8]
   156c2:	687b      	ldr	r3, [r7, #4]
   156c4:	a932      	add	r1, sp, #200	; 0xc8
   156c6:	2c10      	cmp	r4, #16
   156c8:	dce7      	bgt.n	1569a <_vfprintf_r+0x33a>
   156ca:	46b3      	mov	fp, r6
   156cc:	000e      	movs	r6, r1
   156ce:	4641      	mov	r1, r8
   156d0:	6074      	str	r4, [r6, #4]
   156d2:	3301      	adds	r3, #1
   156d4:	18a4      	adds	r4, r4, r2
   156d6:	6031      	str	r1, [r6, #0]
   156d8:	60bc      	str	r4, [r7, #8]
   156da:	607b      	str	r3, [r7, #4]
   156dc:	2b07      	cmp	r3, #7
   156de:	dd01      	ble.n	156e4 <_vfprintf_r+0x384>
   156e0:	f000 fcae 	bl	16040 <_vfprintf_r+0xce0>
   156e4:	ab16      	add	r3, sp, #88	; 0x58
   156e6:	7fdb      	ldrb	r3, [r3, #31]
   156e8:	3608      	adds	r6, #8
   156ea:	4698      	mov	r8, r3
   156ec:	e1ca      	b.n	15a84 <_vfprintf_r+0x724>
   156ee:	46c0      	nop			; (mov r8, r8)
   156f0:	ffffdfff 	.word	0xffffdfff
   156f4:	0001aecc 	.word	0x0001aecc
   156f8:	0001b054 	.word	0x0001b054
   156fc:	0001b070 	.word	0x0001b070
   15700:	2200      	movs	r2, #0
   15702:	9d07      	ldr	r5, [sp, #28]
   15704:	3b30      	subs	r3, #48	; 0x30
   15706:	46a8      	mov	r8, r5
   15708:	920b      	str	r2, [sp, #44]	; 0x2c
   1570a:	001a      	movs	r2, r3
   1570c:	9408      	str	r4, [sp, #32]
   1570e:	002c      	movs	r4, r5
   15710:	4655      	mov	r5, sl
   15712:	4682      	mov	sl, r0
   15714:	4640      	mov	r0, r8
   15716:	4688      	mov	r8, r1
   15718:	0011      	movs	r1, r2
   1571a:	2200      	movs	r2, #0
   1571c:	0093      	lsls	r3, r2, #2
   1571e:	189a      	adds	r2, r3, r2
   15720:	7803      	ldrb	r3, [r0, #0]
   15722:	0052      	lsls	r2, r2, #1
   15724:	188a      	adds	r2, r1, r2
   15726:	0019      	movs	r1, r3
   15728:	3401      	adds	r4, #1
   1572a:	3930      	subs	r1, #48	; 0x30
   1572c:	0020      	movs	r0, r4
   1572e:	2909      	cmp	r1, #9
   15730:	d9f4      	bls.n	1571c <_vfprintf_r+0x3bc>
   15732:	9407      	str	r4, [sp, #28]
   15734:	4650      	mov	r0, sl
   15736:	9c08      	ldr	r4, [sp, #32]
   15738:	920b      	str	r2, [sp, #44]	; 0x2c
   1573a:	4641      	mov	r1, r8
   1573c:	46aa      	mov	sl, r5
   1573e:	e69b      	b.n	15478 <_vfprintf_r+0x118>
   15740:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   15742:	9312      	str	r3, [sp, #72]	; 0x48
   15744:	6813      	ldr	r3, [r2, #0]
   15746:	2120      	movs	r1, #32
   15748:	9308      	str	r3, [sp, #32]
   1574a:	466b      	mov	r3, sp
   1574c:	185b      	adds	r3, r3, r1
   1574e:	781b      	ldrb	r3, [r3, #0]
   15750:	ad28      	add	r5, sp, #160	; 0xa0
   15752:	702b      	strb	r3, [r5, #0]
   15754:	2300      	movs	r3, #0
   15756:	a916      	add	r1, sp, #88	; 0x58
   15758:	77cb      	strb	r3, [r1, #31]
   1575a:	0013      	movs	r3, r2
   1575c:	3304      	adds	r3, #4
   1575e:	930f      	str	r3, [sp, #60]	; 0x3c
   15760:	2300      	movs	r3, #0
   15762:	9409      	str	r4, [sp, #36]	; 0x24
   15764:	4698      	mov	r8, r3
   15766:	3301      	adds	r3, #1
   15768:	9308      	str	r3, [sp, #32]
   1576a:	930e      	str	r3, [sp, #56]	; 0x38
   1576c:	2300      	movs	r3, #0
   1576e:	9511      	str	r5, [sp, #68]	; 0x44
   15770:	469a      	mov	sl, r3
   15772:	9313      	str	r3, [sp, #76]	; 0x4c
   15774:	e76f      	b.n	15656 <_vfprintf_r+0x2f6>
   15776:	9312      	str	r3, [sp, #72]	; 0x48
   15778:	2900      	cmp	r1, #0
   1577a:	d001      	beq.n	15780 <_vfprintf_r+0x420>
   1577c:	f001 f94d 	bl	16a1a <_vfprintf_r+0x16ba>
   15780:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   15782:	06a3      	lsls	r3, r4, #26
   15784:	d501      	bpl.n	1578a <_vfprintf_r+0x42a>
   15786:	f000 fd5a 	bl	1623e <_vfprintf_r+0xede>
   1578a:	06e3      	lsls	r3, r4, #27
   1578c:	d501      	bpl.n	15792 <_vfprintf_r+0x432>
   1578e:	f000 fcab 	bl	160e8 <_vfprintf_r+0xd88>
   15792:	0663      	lsls	r3, r4, #25
   15794:	d401      	bmi.n	1579a <_vfprintf_r+0x43a>
   15796:	f000 fca7 	bl	160e8 <_vfprintf_r+0xd88>
   1579a:	2100      	movs	r1, #0
   1579c:	5e53      	ldrsh	r3, [r2, r1]
   1579e:	930c      	str	r3, [sp, #48]	; 0x30
   157a0:	3204      	adds	r2, #4
   157a2:	17db      	asrs	r3, r3, #31
   157a4:	930d      	str	r3, [sp, #52]	; 0x34
   157a6:	920f      	str	r2, [sp, #60]	; 0x3c
   157a8:	2b00      	cmp	r3, #0
   157aa:	da01      	bge.n	157b0 <_vfprintf_r+0x450>
   157ac:	f000 fdb2 	bl	16314 <_vfprintf_r+0xfb4>
   157b0:	990c      	ldr	r1, [sp, #48]	; 0x30
   157b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   157b4:	0008      	movs	r0, r1
   157b6:	4651      	mov	r1, sl
   157b8:	ab16      	add	r3, sp, #88	; 0x58
   157ba:	7fdb      	ldrb	r3, [r3, #31]
   157bc:	4310      	orrs	r0, r2
   157be:	4698      	mov	r8, r3
   157c0:	0002      	movs	r2, r0
   157c2:	2301      	movs	r3, #1
   157c4:	3101      	adds	r1, #1
   157c6:	d000      	beq.n	157ca <_vfprintf_r+0x46a>
   157c8:	e718      	b.n	155fc <_vfprintf_r+0x29c>
   157ca:	2a00      	cmp	r2, #0
   157cc:	d100      	bne.n	157d0 <_vfprintf_r+0x470>
   157ce:	e35a      	b.n	15e86 <_vfprintf_r+0xb26>
   157d0:	9409      	str	r4, [sp, #36]	; 0x24
   157d2:	2b01      	cmp	r3, #1
   157d4:	d101      	bne.n	157da <_vfprintf_r+0x47a>
   157d6:	f000 fc06 	bl	15fe6 <_vfprintf_r+0xc86>
   157da:	2b02      	cmp	r3, #2
   157dc:	d000      	beq.n	157e0 <_vfprintf_r+0x480>
   157de:	e380      	b.n	15ee2 <_vfprintf_r+0xb82>
   157e0:	9c19      	ldr	r4, [sp, #100]	; 0x64
   157e2:	200f      	movs	r0, #15
   157e4:	46a1      	mov	r9, r4
   157e6:	46b4      	mov	ip, r6
   157e8:	ab32      	add	r3, sp, #200	; 0xc8
   157ea:	0019      	movs	r1, r3
   157ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   157ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   157f0:	0004      	movs	r4, r0
   157f2:	464d      	mov	r5, r9
   157f4:	4014      	ands	r4, r2
   157f6:	5d2c      	ldrb	r4, [r5, r4]
   157f8:	071e      	lsls	r6, r3, #28
   157fa:	0915      	lsrs	r5, r2, #4
   157fc:	3901      	subs	r1, #1
   157fe:	432e      	orrs	r6, r5
   15800:	700c      	strb	r4, [r1, #0]
   15802:	091c      	lsrs	r4, r3, #4
   15804:	0023      	movs	r3, r4
   15806:	0034      	movs	r4, r6
   15808:	0032      	movs	r2, r6
   1580a:	431c      	orrs	r4, r3
   1580c:	d1f0      	bne.n	157f0 <_vfprintf_r+0x490>
   1580e:	920c      	str	r2, [sp, #48]	; 0x30
   15810:	930d      	str	r3, [sp, #52]	; 0x34
   15812:	ab32      	add	r3, sp, #200	; 0xc8
   15814:	1a5b      	subs	r3, r3, r1
   15816:	9111      	str	r1, [sp, #68]	; 0x44
   15818:	4666      	mov	r6, ip
   1581a:	930e      	str	r3, [sp, #56]	; 0x38
   1581c:	e70d      	b.n	1563a <_vfprintf_r+0x2da>
   1581e:	4663      	mov	r3, ip
   15820:	431c      	orrs	r4, r3
   15822:	9b07      	ldr	r3, [sp, #28]
   15824:	781b      	ldrb	r3, [r3, #0]
   15826:	e624      	b.n	15472 <_vfprintf_r+0x112>
   15828:	9b07      	ldr	r3, [sp, #28]
   1582a:	781b      	ldrb	r3, [r3, #0]
   1582c:	2b6c      	cmp	r3, #108	; 0x6c
   1582e:	d101      	bne.n	15834 <_vfprintf_r+0x4d4>
   15830:	f000 fe8c 	bl	1654c <_vfprintf_r+0x11ec>
   15834:	2210      	movs	r2, #16
   15836:	4314      	orrs	r4, r2
   15838:	e61b      	b.n	15472 <_vfprintf_r+0x112>
   1583a:	2900      	cmp	r1, #0
   1583c:	d001      	beq.n	15842 <_vfprintf_r+0x4e2>
   1583e:	f001 f8d5 	bl	169ec <_vfprintf_r+0x168c>
   15842:	06a3      	lsls	r3, r4, #26
   15844:	d501      	bpl.n	1584a <_vfprintf_r+0x4ea>
   15846:	f000 fe76 	bl	16536 <_vfprintf_r+0x11d6>
   1584a:	06e3      	lsls	r3, r4, #27
   1584c:	d500      	bpl.n	15850 <_vfprintf_r+0x4f0>
   1584e:	e110      	b.n	15a72 <_vfprintf_r+0x712>
   15850:	0663      	lsls	r3, r4, #25
   15852:	d400      	bmi.n	15856 <_vfprintf_r+0x4f6>
   15854:	e10d      	b.n	15a72 <_vfprintf_r+0x712>
   15856:	4669      	mov	r1, sp
   15858:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1585a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
   1585c:	681a      	ldr	r2, [r3, #0]
   1585e:	3304      	adds	r3, #4
   15860:	9208      	str	r2, [sp, #32]
   15862:	8011      	strh	r1, [r2, #0]
   15864:	930f      	str	r3, [sp, #60]	; 0x3c
   15866:	e5c9      	b.n	153fc <_vfprintf_r+0x9c>
   15868:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1586a:	2230      	movs	r2, #48	; 0x30
   1586c:	680b      	ldr	r3, [r1, #0]
   1586e:	930c      	str	r3, [sp, #48]	; 0x30
   15870:	2300      	movs	r3, #0
   15872:	930d      	str	r3, [sp, #52]	; 0x34
   15874:	3302      	adds	r3, #2
   15876:	431c      	orrs	r4, r3
   15878:	ab1e      	add	r3, sp, #120	; 0x78
   1587a:	701a      	strb	r2, [r3, #0]
   1587c:	3248      	adds	r2, #72	; 0x48
   1587e:	705a      	strb	r2, [r3, #1]
   15880:	000b      	movs	r3, r1
   15882:	3304      	adds	r3, #4
   15884:	930f      	str	r3, [sp, #60]	; 0x3c
   15886:	4bc1      	ldr	r3, [pc, #772]	; (15b8c <_vfprintf_r+0x82c>)
   15888:	9212      	str	r2, [sp, #72]	; 0x48
   1588a:	9319      	str	r3, [sp, #100]	; 0x64
   1588c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1588e:	2302      	movs	r3, #2
   15890:	e6ac      	b.n	155ec <_vfprintf_r+0x28c>
   15892:	464b      	mov	r3, r9
   15894:	431c      	orrs	r4, r3
   15896:	9b07      	ldr	r3, [sp, #28]
   15898:	781b      	ldrb	r3, [r3, #0]
   1589a:	e5ea      	b.n	15472 <_vfprintf_r+0x112>
   1589c:	9312      	str	r3, [sp, #72]	; 0x48
   1589e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   158a0:	a916      	add	r1, sp, #88	; 0x58
   158a2:	1d1d      	adds	r5, r3, #4
   158a4:	681b      	ldr	r3, [r3, #0]
   158a6:	001a      	movs	r2, r3
   158a8:	9311      	str	r3, [sp, #68]	; 0x44
   158aa:	2300      	movs	r3, #0
   158ac:	77cb      	strb	r3, [r1, #31]
   158ae:	2a00      	cmp	r2, #0
   158b0:	d101      	bne.n	158b6 <_vfprintf_r+0x556>
   158b2:	f000 ff01 	bl	166b8 <_vfprintf_r+0x1358>
   158b6:	4653      	mov	r3, sl
   158b8:	3301      	adds	r3, #1
   158ba:	d101      	bne.n	158c0 <_vfprintf_r+0x560>
   158bc:	f000 fe64 	bl	16588 <_vfprintf_r+0x1228>
   158c0:	4652      	mov	r2, sl
   158c2:	2100      	movs	r1, #0
   158c4:	9811      	ldr	r0, [sp, #68]	; 0x44
   158c6:	f002 fea7 	bl	18618 <memchr>
   158ca:	2800      	cmp	r0, #0
   158cc:	d101      	bne.n	158d2 <_vfprintf_r+0x572>
   158ce:	f000 ff78 	bl	167c2 <_vfprintf_r+0x1462>
   158d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   158d4:	1ac3      	subs	r3, r0, r3
   158d6:	001a      	movs	r2, r3
   158d8:	930e      	str	r3, [sp, #56]	; 0x38
   158da:	43db      	mvns	r3, r3
   158dc:	17db      	asrs	r3, r3, #31
   158de:	401a      	ands	r2, r3
   158e0:	ab16      	add	r3, sp, #88	; 0x58
   158e2:	7fdb      	ldrb	r3, [r3, #31]
   158e4:	9208      	str	r2, [sp, #32]
   158e6:	4698      	mov	r8, r3
   158e8:	2300      	movs	r3, #0
   158ea:	950f      	str	r5, [sp, #60]	; 0x3c
   158ec:	9409      	str	r4, [sp, #36]	; 0x24
   158ee:	469a      	mov	sl, r3
   158f0:	9313      	str	r3, [sp, #76]	; 0x4c
   158f2:	e6aa      	b.n	1564a <_vfprintf_r+0x2ea>
   158f4:	2308      	movs	r3, #8
   158f6:	431c      	orrs	r4, r3
   158f8:	9b07      	ldr	r3, [sp, #28]
   158fa:	781b      	ldrb	r3, [r3, #0]
   158fc:	e5b9      	b.n	15472 <_vfprintf_r+0x112>
   158fe:	9312      	str	r3, [sp, #72]	; 0x48
   15900:	2310      	movs	r3, #16
   15902:	431c      	orrs	r4, r3
   15904:	06a3      	lsls	r3, r4, #26
   15906:	d501      	bpl.n	1590c <_vfprintf_r+0x5ac>
   15908:	f000 fca7 	bl	1625a <_vfprintf_r+0xefa>
   1590c:	06e3      	lsls	r3, r4, #27
   1590e:	d500      	bpl.n	15912 <_vfprintf_r+0x5b2>
   15910:	e3ee      	b.n	160f0 <_vfprintf_r+0xd90>
   15912:	0663      	lsls	r3, r4, #25
   15914:	d400      	bmi.n	15918 <_vfprintf_r+0x5b8>
   15916:	e3eb      	b.n	160f0 <_vfprintf_r+0xd90>
   15918:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1591a:	881a      	ldrh	r2, [r3, #0]
   1591c:	920c      	str	r2, [sp, #48]	; 0x30
   1591e:	2200      	movs	r2, #0
   15920:	3304      	adds	r3, #4
   15922:	920d      	str	r2, [sp, #52]	; 0x34
   15924:	930f      	str	r3, [sp, #60]	; 0x3c
   15926:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15928:	2300      	movs	r3, #0
   1592a:	e65f      	b.n	155ec <_vfprintf_r+0x28c>
   1592c:	9312      	str	r3, [sp, #72]	; 0x48
   1592e:	2310      	movs	r3, #16
   15930:	431c      	orrs	r4, r3
   15932:	06a3      	lsls	r3, r4, #26
   15934:	d501      	bpl.n	1593a <_vfprintf_r+0x5da>
   15936:	f000 fcba 	bl	162ae <_vfprintf_r+0xf4e>
   1593a:	06e3      	lsls	r3, r4, #27
   1593c:	d500      	bpl.n	15940 <_vfprintf_r+0x5e0>
   1593e:	e3da      	b.n	160f6 <_vfprintf_r+0xd96>
   15940:	0663      	lsls	r3, r4, #25
   15942:	d400      	bmi.n	15946 <_vfprintf_r+0x5e6>
   15944:	e3d7      	b.n	160f6 <_vfprintf_r+0xd96>
   15946:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15948:	881a      	ldrh	r2, [r3, #0]
   1594a:	920c      	str	r2, [sp, #48]	; 0x30
   1594c:	2200      	movs	r2, #0
   1594e:	3304      	adds	r3, #4
   15950:	920d      	str	r2, [sp, #52]	; 0x34
   15952:	930f      	str	r3, [sp, #60]	; 0x3c
   15954:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15956:	2301      	movs	r3, #1
   15958:	e648      	b.n	155ec <_vfprintf_r+0x28c>
   1595a:	9312      	str	r3, [sp, #72]	; 0x48
   1595c:	2900      	cmp	r1, #0
   1595e:	d001      	beq.n	15964 <_vfprintf_r+0x604>
   15960:	f001 f857 	bl	16a12 <_vfprintf_r+0x16b2>
   15964:	4b8a      	ldr	r3, [pc, #552]	; (15b90 <_vfprintf_r+0x830>)
   15966:	9319      	str	r3, [sp, #100]	; 0x64
   15968:	e618      	b.n	1559c <_vfprintf_r+0x23c>
   1596a:	2301      	movs	r3, #1
   1596c:	431c      	orrs	r4, r3
   1596e:	9b07      	ldr	r3, [sp, #28]
   15970:	781b      	ldrb	r3, [r3, #0]
   15972:	e57e      	b.n	15472 <_vfprintf_r+0x112>
   15974:	2380      	movs	r3, #128	; 0x80
   15976:	431c      	orrs	r4, r3
   15978:	9b07      	ldr	r3, [sp, #28]
   1597a:	781b      	ldrb	r3, [r3, #0]
   1597c:	e579      	b.n	15472 <_vfprintf_r+0x112>
   1597e:	9b07      	ldr	r3, [sp, #28]
   15980:	781b      	ldrb	r3, [r3, #0]
   15982:	2800      	cmp	r0, #0
   15984:	d000      	beq.n	15988 <_vfprintf_r+0x628>
   15986:	e574      	b.n	15472 <_vfprintf_r+0x112>
   15988:	2101      	movs	r1, #1
   1598a:	3020      	adds	r0, #32
   1598c:	e571      	b.n	15472 <_vfprintf_r+0x112>
   1598e:	9312      	str	r3, [sp, #72]	; 0x48
   15990:	2900      	cmp	r1, #0
   15992:	d001      	beq.n	15998 <_vfprintf_r+0x638>
   15994:	f001 f839 	bl	16a0a <_vfprintf_r+0x16aa>
   15998:	2207      	movs	r2, #7
   1599a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1599c:	3307      	adds	r3, #7
   1599e:	4393      	bics	r3, r2
   159a0:	3201      	adds	r2, #1
   159a2:	4694      	mov	ip, r2
   159a4:	449c      	add	ip, r3
   159a6:	4662      	mov	r2, ip
   159a8:	920f      	str	r2, [sp, #60]	; 0x3c
   159aa:	681a      	ldr	r2, [r3, #0]
   159ac:	9216      	str	r2, [sp, #88]	; 0x58
   159ae:	685b      	ldr	r3, [r3, #4]
   159b0:	2201      	movs	r2, #1
   159b2:	9315      	str	r3, [sp, #84]	; 0x54
   159b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   159b6:	9d16      	ldr	r5, [sp, #88]	; 0x58
   159b8:	005b      	lsls	r3, r3, #1
   159ba:	085b      	lsrs	r3, r3, #1
   159bc:	4698      	mov	r8, r3
   159be:	4252      	negs	r2, r2
   159c0:	4b74      	ldr	r3, [pc, #464]	; (15b94 <_vfprintf_r+0x834>)
   159c2:	0028      	movs	r0, r5
   159c4:	4641      	mov	r1, r8
   159c6:	f003 ff0d 	bl	197e4 <__aeabi_dcmpun>
   159ca:	2800      	cmp	r0, #0
   159cc:	d001      	beq.n	159d2 <_vfprintf_r+0x672>
   159ce:	f000 fcb4 	bl	1633a <_vfprintf_r+0xfda>
   159d2:	2201      	movs	r2, #1
   159d4:	4b6f      	ldr	r3, [pc, #444]	; (15b94 <_vfprintf_r+0x834>)
   159d6:	4252      	negs	r2, r2
   159d8:	0028      	movs	r0, r5
   159da:	4641      	mov	r1, r8
   159dc:	f7fe fe76 	bl	146cc <__aeabi_dcmple>
   159e0:	2800      	cmp	r0, #0
   159e2:	d001      	beq.n	159e8 <_vfprintf_r+0x688>
   159e4:	f000 fca9 	bl	1633a <_vfprintf_r+0xfda>
   159e8:	2200      	movs	r2, #0
   159ea:	2300      	movs	r3, #0
   159ec:	9816      	ldr	r0, [sp, #88]	; 0x58
   159ee:	9915      	ldr	r1, [sp, #84]	; 0x54
   159f0:	f7fe fe62 	bl	146b8 <__aeabi_dcmplt>
   159f4:	2800      	cmp	r0, #0
   159f6:	d001      	beq.n	159fc <_vfprintf_r+0x69c>
   159f8:	f000 fd55 	bl	164a6 <_vfprintf_r+0x1146>
   159fc:	ab16      	add	r3, sp, #88	; 0x58
   159fe:	7fdb      	ldrb	r3, [r3, #31]
   15a00:	4698      	mov	r8, r3
   15a02:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15a04:	2b47      	cmp	r3, #71	; 0x47
   15a06:	dd01      	ble.n	15a0c <_vfprintf_r+0x6ac>
   15a08:	f000 fdb4 	bl	16574 <_vfprintf_r+0x1214>
   15a0c:	4b62      	ldr	r3, [pc, #392]	; (15b98 <_vfprintf_r+0x838>)
   15a0e:	9311      	str	r3, [sp, #68]	; 0x44
   15a10:	2380      	movs	r3, #128	; 0x80
   15a12:	439c      	bics	r4, r3
   15a14:	3b7d      	subs	r3, #125	; 0x7d
   15a16:	9308      	str	r3, [sp, #32]
   15a18:	930e      	str	r3, [sp, #56]	; 0x38
   15a1a:	2300      	movs	r3, #0
   15a1c:	9409      	str	r4, [sp, #36]	; 0x24
   15a1e:	469a      	mov	sl, r3
   15a20:	9313      	str	r3, [sp, #76]	; 0x4c
   15a22:	e612      	b.n	1564a <_vfprintf_r+0x2ea>
   15a24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15a26:	1d1a      	adds	r2, r3, #4
   15a28:	681b      	ldr	r3, [r3, #0]
   15a2a:	930b      	str	r3, [sp, #44]	; 0x2c
   15a2c:	2b00      	cmp	r3, #0
   15a2e:	da00      	bge.n	15a32 <_vfprintf_r+0x6d2>
   15a30:	e578      	b.n	15524 <_vfprintf_r+0x1c4>
   15a32:	9b07      	ldr	r3, [sp, #28]
   15a34:	920f      	str	r2, [sp, #60]	; 0x3c
   15a36:	781b      	ldrb	r3, [r3, #0]
   15a38:	e51b      	b.n	15472 <_vfprintf_r+0x112>
   15a3a:	9312      	str	r3, [sp, #72]	; 0x48
   15a3c:	2900      	cmp	r1, #0
   15a3e:	d001      	beq.n	15a44 <_vfprintf_r+0x6e4>
   15a40:	f000 ffcc 	bl	169dc <_vfprintf_r+0x167c>
   15a44:	2310      	movs	r3, #16
   15a46:	431c      	orrs	r4, r3
   15a48:	e69a      	b.n	15780 <_vfprintf_r+0x420>
   15a4a:	9312      	str	r3, [sp, #72]	; 0x48
   15a4c:	e771      	b.n	15932 <_vfprintf_r+0x5d2>
   15a4e:	9312      	str	r3, [sp, #72]	; 0x48
   15a50:	e758      	b.n	15904 <_vfprintf_r+0x5a4>
   15a52:	9312      	str	r3, [sp, #72]	; 0x48
   15a54:	2900      	cmp	r1, #0
   15a56:	d001      	beq.n	15a5c <_vfprintf_r+0x6fc>
   15a58:	f000 ffd3 	bl	16a02 <_vfprintf_r+0x16a2>
   15a5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15a5e:	2b00      	cmp	r3, #0
   15a60:	d100      	bne.n	15a64 <_vfprintf_r+0x704>
   15a62:	e18d      	b.n	15d80 <_vfprintf_r+0xa20>
   15a64:	ad28      	add	r5, sp, #160	; 0xa0
   15a66:	702b      	strb	r3, [r5, #0]
   15a68:	2300      	movs	r3, #0
   15a6a:	aa16      	add	r2, sp, #88	; 0x58
   15a6c:	77d3      	strb	r3, [r2, #31]
   15a6e:	9409      	str	r4, [sp, #36]	; 0x24
   15a70:	e678      	b.n	15764 <_vfprintf_r+0x404>
   15a72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   15a74:	990a      	ldr	r1, [sp, #40]	; 0x28
   15a76:	6813      	ldr	r3, [r2, #0]
   15a78:	6019      	str	r1, [r3, #0]
   15a7a:	0013      	movs	r3, r2
   15a7c:	3304      	adds	r3, #4
   15a7e:	930f      	str	r3, [sp, #60]	; 0x3c
   15a80:	e4bc      	b.n	153fc <_vfprintf_r+0x9c>
   15a82:	68bc      	ldr	r4, [r7, #8]
   15a84:	4643      	mov	r3, r8
   15a86:	2b00      	cmp	r3, #0
   15a88:	d00f      	beq.n	15aaa <_vfprintf_r+0x74a>
   15a8a:	aa16      	add	r2, sp, #88	; 0x58
   15a8c:	231f      	movs	r3, #31
   15a8e:	4694      	mov	ip, r2
   15a90:	4463      	add	r3, ip
   15a92:	6033      	str	r3, [r6, #0]
   15a94:	2301      	movs	r3, #1
   15a96:	6073      	str	r3, [r6, #4]
   15a98:	687b      	ldr	r3, [r7, #4]
   15a9a:	3401      	adds	r4, #1
   15a9c:	3301      	adds	r3, #1
   15a9e:	60bc      	str	r4, [r7, #8]
   15aa0:	607b      	str	r3, [r7, #4]
   15aa2:	2b07      	cmp	r3, #7
   15aa4:	dd00      	ble.n	15aa8 <_vfprintf_r+0x748>
   15aa6:	e203      	b.n	15eb0 <_vfprintf_r+0xb50>
   15aa8:	3608      	adds	r6, #8
   15aaa:	464b      	mov	r3, r9
   15aac:	2b00      	cmp	r3, #0
   15aae:	d00c      	beq.n	15aca <_vfprintf_r+0x76a>
   15ab0:	ab1e      	add	r3, sp, #120	; 0x78
   15ab2:	6033      	str	r3, [r6, #0]
   15ab4:	2302      	movs	r3, #2
   15ab6:	6073      	str	r3, [r6, #4]
   15ab8:	687b      	ldr	r3, [r7, #4]
   15aba:	3402      	adds	r4, #2
   15abc:	3301      	adds	r3, #1
   15abe:	60bc      	str	r4, [r7, #8]
   15ac0:	607b      	str	r3, [r7, #4]
   15ac2:	2b07      	cmp	r3, #7
   15ac4:	dd00      	ble.n	15ac8 <_vfprintf_r+0x768>
   15ac6:	e1fd      	b.n	15ec4 <_vfprintf_r+0xb64>
   15ac8:	3608      	adds	r6, #8
   15aca:	9b10      	ldr	r3, [sp, #64]	; 0x40
   15acc:	2b80      	cmp	r3, #128	; 0x80
   15ace:	d100      	bne.n	15ad2 <_vfprintf_r+0x772>
   15ad0:	e173      	b.n	15dba <_vfprintf_r+0xa5a>
   15ad2:	4653      	mov	r3, sl
   15ad4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   15ad6:	1a9d      	subs	r5, r3, r2
   15ad8:	2d00      	cmp	r5, #0
   15ada:	dd32      	ble.n	15b42 <_vfprintf_r+0x7e2>
   15adc:	4a2f      	ldr	r2, [pc, #188]	; (15b9c <_vfprintf_r+0x83c>)
   15ade:	687b      	ldr	r3, [r7, #4]
   15ae0:	4691      	mov	r9, r2
   15ae2:	2d10      	cmp	r5, #16
   15ae4:	dd22      	ble.n	15b2c <_vfprintf_r+0x7cc>
   15ae6:	2210      	movs	r2, #16
   15ae8:	4692      	mov	sl, r2
   15aea:	0022      	movs	r2, r4
   15aec:	465c      	mov	r4, fp
   15aee:	e003      	b.n	15af8 <_vfprintf_r+0x798>
   15af0:	3d10      	subs	r5, #16
   15af2:	3608      	adds	r6, #8
   15af4:	2d10      	cmp	r5, #16
   15af6:	dd17      	ble.n	15b28 <_vfprintf_r+0x7c8>
   15af8:	4649      	mov	r1, r9
   15afa:	6031      	str	r1, [r6, #0]
   15afc:	4651      	mov	r1, sl
   15afe:	3210      	adds	r2, #16
   15b00:	3301      	adds	r3, #1
   15b02:	6071      	str	r1, [r6, #4]
   15b04:	60ba      	str	r2, [r7, #8]
   15b06:	607b      	str	r3, [r7, #4]
   15b08:	2b07      	cmp	r3, #7
   15b0a:	ddf1      	ble.n	15af0 <_vfprintf_r+0x790>
   15b0c:	003a      	movs	r2, r7
   15b0e:	0021      	movs	r1, r4
   15b10:	9806      	ldr	r0, [sp, #24]
   15b12:	f003 fba7 	bl	19264 <__sprint_r>
   15b16:	2800      	cmp	r0, #0
   15b18:	d000      	beq.n	15b1c <_vfprintf_r+0x7bc>
   15b1a:	e18a      	b.n	15e32 <_vfprintf_r+0xad2>
   15b1c:	3d10      	subs	r5, #16
   15b1e:	68ba      	ldr	r2, [r7, #8]
   15b20:	687b      	ldr	r3, [r7, #4]
   15b22:	ae32      	add	r6, sp, #200	; 0xc8
   15b24:	2d10      	cmp	r5, #16
   15b26:	dce7      	bgt.n	15af8 <_vfprintf_r+0x798>
   15b28:	46a3      	mov	fp, r4
   15b2a:	0014      	movs	r4, r2
   15b2c:	464a      	mov	r2, r9
   15b2e:	1964      	adds	r4, r4, r5
   15b30:	3301      	adds	r3, #1
   15b32:	6032      	str	r2, [r6, #0]
   15b34:	6075      	str	r5, [r6, #4]
   15b36:	60bc      	str	r4, [r7, #8]
   15b38:	607b      	str	r3, [r7, #4]
   15b3a:	2b07      	cmp	r3, #7
   15b3c:	dd00      	ble.n	15b40 <_vfprintf_r+0x7e0>
   15b3e:	e1ad      	b.n	15e9c <_vfprintf_r+0xb3c>
   15b40:	3608      	adds	r6, #8
   15b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15b44:	05db      	lsls	r3, r3, #23
   15b46:	d500      	bpl.n	15b4a <_vfprintf_r+0x7ea>
   15b48:	e0be      	b.n	15cc8 <_vfprintf_r+0x968>
   15b4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   15b4c:	6033      	str	r3, [r6, #0]
   15b4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15b50:	469c      	mov	ip, r3
   15b52:	6073      	str	r3, [r6, #4]
   15b54:	687b      	ldr	r3, [r7, #4]
   15b56:	4464      	add	r4, ip
   15b58:	3301      	adds	r3, #1
   15b5a:	60bc      	str	r4, [r7, #8]
   15b5c:	607b      	str	r3, [r7, #4]
   15b5e:	2b07      	cmp	r3, #7
   15b60:	dd00      	ble.n	15b64 <_vfprintf_r+0x804>
   15b62:	e0a6      	b.n	15cb2 <_vfprintf_r+0x952>
   15b64:	3608      	adds	r6, #8
   15b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15b68:	075b      	lsls	r3, r3, #29
   15b6a:	d54a      	bpl.n	15c02 <_vfprintf_r+0x8a2>
   15b6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15b6e:	9a08      	ldr	r2, [sp, #32]
   15b70:	1a9d      	subs	r5, r3, r2
   15b72:	2d00      	cmp	r5, #0
   15b74:	dd45      	ble.n	15c02 <_vfprintf_r+0x8a2>
   15b76:	4a0a      	ldr	r2, [pc, #40]	; (15ba0 <_vfprintf_r+0x840>)
   15b78:	687b      	ldr	r3, [r7, #4]
   15b7a:	4690      	mov	r8, r2
   15b7c:	2d10      	cmp	r5, #16
   15b7e:	dd2f      	ble.n	15be0 <_vfprintf_r+0x880>
   15b80:	2210      	movs	r2, #16
   15b82:	4691      	mov	r9, r2
   15b84:	0022      	movs	r2, r4
   15b86:	465c      	mov	r4, fp
   15b88:	e010      	b.n	15bac <_vfprintf_r+0x84c>
   15b8a:	46c0      	nop			; (mov r8, r8)
   15b8c:	0001b054 	.word	0x0001b054
   15b90:	0001b040 	.word	0x0001b040
   15b94:	7fefffff 	.word	0x7fefffff
   15b98:	0001b030 	.word	0x0001b030
   15b9c:	0001b080 	.word	0x0001b080
   15ba0:	0001b070 	.word	0x0001b070
   15ba4:	3d10      	subs	r5, #16
   15ba6:	3608      	adds	r6, #8
   15ba8:	2d10      	cmp	r5, #16
   15baa:	dd17      	ble.n	15bdc <_vfprintf_r+0x87c>
   15bac:	49d1      	ldr	r1, [pc, #836]	; (15ef4 <_vfprintf_r+0xb94>)
   15bae:	3210      	adds	r2, #16
   15bb0:	6031      	str	r1, [r6, #0]
   15bb2:	4649      	mov	r1, r9
   15bb4:	3301      	adds	r3, #1
   15bb6:	6071      	str	r1, [r6, #4]
   15bb8:	60ba      	str	r2, [r7, #8]
   15bba:	607b      	str	r3, [r7, #4]
   15bbc:	2b07      	cmp	r3, #7
   15bbe:	ddf1      	ble.n	15ba4 <_vfprintf_r+0x844>
   15bc0:	003a      	movs	r2, r7
   15bc2:	0021      	movs	r1, r4
   15bc4:	9806      	ldr	r0, [sp, #24]
   15bc6:	f003 fb4d 	bl	19264 <__sprint_r>
   15bca:	2800      	cmp	r0, #0
   15bcc:	d000      	beq.n	15bd0 <_vfprintf_r+0x870>
   15bce:	e130      	b.n	15e32 <_vfprintf_r+0xad2>
   15bd0:	3d10      	subs	r5, #16
   15bd2:	68ba      	ldr	r2, [r7, #8]
   15bd4:	687b      	ldr	r3, [r7, #4]
   15bd6:	ae32      	add	r6, sp, #200	; 0xc8
   15bd8:	2d10      	cmp	r5, #16
   15bda:	dce7      	bgt.n	15bac <_vfprintf_r+0x84c>
   15bdc:	46a3      	mov	fp, r4
   15bde:	0014      	movs	r4, r2
   15be0:	4642      	mov	r2, r8
   15be2:	1964      	adds	r4, r4, r5
   15be4:	3301      	adds	r3, #1
   15be6:	c624      	stmia	r6!, {r2, r5}
   15be8:	60bc      	str	r4, [r7, #8]
   15bea:	607b      	str	r3, [r7, #4]
   15bec:	2b07      	cmp	r3, #7
   15bee:	dd08      	ble.n	15c02 <_vfprintf_r+0x8a2>
   15bf0:	003a      	movs	r2, r7
   15bf2:	4659      	mov	r1, fp
   15bf4:	9806      	ldr	r0, [sp, #24]
   15bf6:	f003 fb35 	bl	19264 <__sprint_r>
   15bfa:	2800      	cmp	r0, #0
   15bfc:	d000      	beq.n	15c00 <_vfprintf_r+0x8a0>
   15bfe:	e13f      	b.n	15e80 <_vfprintf_r+0xb20>
   15c00:	68bc      	ldr	r4, [r7, #8]
   15c02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15c04:	9908      	ldr	r1, [sp, #32]
   15c06:	428b      	cmp	r3, r1
   15c08:	da00      	bge.n	15c0c <_vfprintf_r+0x8ac>
   15c0a:	000b      	movs	r3, r1
   15c0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   15c0e:	4694      	mov	ip, r2
   15c10:	449c      	add	ip, r3
   15c12:	4663      	mov	r3, ip
   15c14:	930a      	str	r3, [sp, #40]	; 0x28
   15c16:	2c00      	cmp	r4, #0
   15c18:	d000      	beq.n	15c1c <_vfprintf_r+0x8bc>
   15c1a:	e129      	b.n	15e70 <_vfprintf_r+0xb10>
   15c1c:	2300      	movs	r3, #0
   15c1e:	ae32      	add	r6, sp, #200	; 0xc8
   15c20:	607b      	str	r3, [r7, #4]
   15c22:	f7ff fbeb 	bl	153fc <_vfprintf_r+0x9c>
   15c26:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15c28:	2b01      	cmp	r3, #1
   15c2a:	dc00      	bgt.n	15c2e <_vfprintf_r+0x8ce>
   15c2c:	e103      	b.n	15e36 <_vfprintf_r+0xad6>
   15c2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   15c30:	3401      	adds	r4, #1
   15c32:	6033      	str	r3, [r6, #0]
   15c34:	2301      	movs	r3, #1
   15c36:	6073      	str	r3, [r6, #4]
   15c38:	687b      	ldr	r3, [r7, #4]
   15c3a:	60bc      	str	r4, [r7, #8]
   15c3c:	3301      	adds	r3, #1
   15c3e:	607b      	str	r3, [r7, #4]
   15c40:	2b07      	cmp	r3, #7
   15c42:	dd00      	ble.n	15c46 <_vfprintf_r+0x8e6>
   15c44:	e2ef      	b.n	16226 <_vfprintf_r+0xec6>
   15c46:	3608      	adds	r6, #8
   15c48:	9a18      	ldr	r2, [sp, #96]	; 0x60
   15c4a:	3301      	adds	r3, #1
   15c4c:	6032      	str	r2, [r6, #0]
   15c4e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   15c50:	4698      	mov	r8, r3
   15c52:	4694      	mov	ip, r2
   15c54:	4464      	add	r4, ip
   15c56:	6072      	str	r2, [r6, #4]
   15c58:	60bc      	str	r4, [r7, #8]
   15c5a:	607b      	str	r3, [r7, #4]
   15c5c:	2b07      	cmp	r3, #7
   15c5e:	dd00      	ble.n	15c62 <_vfprintf_r+0x902>
   15c60:	e318      	b.n	16294 <_vfprintf_r+0xf34>
   15c62:	3608      	adds	r6, #8
   15c64:	2200      	movs	r2, #0
   15c66:	2300      	movs	r3, #0
   15c68:	9816      	ldr	r0, [sp, #88]	; 0x58
   15c6a:	9915      	ldr	r1, [sp, #84]	; 0x54
   15c6c:	f7fe fd1e 	bl	146ac <__aeabi_dcmpeq>
   15c70:	2800      	cmp	r0, #0
   15c72:	d000      	beq.n	15c76 <_vfprintf_r+0x916>
   15c74:	e1f4      	b.n	16060 <_vfprintf_r+0xd00>
   15c76:	9d11      	ldr	r5, [sp, #68]	; 0x44
   15c78:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15c7a:	3501      	adds	r5, #1
   15c7c:	3b01      	subs	r3, #1
   15c7e:	6035      	str	r5, [r6, #0]
   15c80:	6073      	str	r3, [r6, #4]
   15c82:	18e4      	adds	r4, r4, r3
   15c84:	2301      	movs	r3, #1
   15c86:	469c      	mov	ip, r3
   15c88:	44e0      	add	r8, ip
   15c8a:	4643      	mov	r3, r8
   15c8c:	60bc      	str	r4, [r7, #8]
   15c8e:	607b      	str	r3, [r7, #4]
   15c90:	2b07      	cmp	r3, #7
   15c92:	dd00      	ble.n	15c96 <_vfprintf_r+0x936>
   15c94:	e0e0      	b.n	15e58 <_vfprintf_r+0xaf8>
   15c96:	3608      	adds	r6, #8
   15c98:	ab21      	add	r3, sp, #132	; 0x84
   15c9a:	6033      	str	r3, [r6, #0]
   15c9c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   15c9e:	469c      	mov	ip, r3
   15ca0:	6073      	str	r3, [r6, #4]
   15ca2:	4643      	mov	r3, r8
   15ca4:	4464      	add	r4, ip
   15ca6:	3301      	adds	r3, #1
   15ca8:	60bc      	str	r4, [r7, #8]
   15caa:	607b      	str	r3, [r7, #4]
   15cac:	2b07      	cmp	r3, #7
   15cae:	dc00      	bgt.n	15cb2 <_vfprintf_r+0x952>
   15cb0:	e758      	b.n	15b64 <_vfprintf_r+0x804>
   15cb2:	003a      	movs	r2, r7
   15cb4:	4659      	mov	r1, fp
   15cb6:	9806      	ldr	r0, [sp, #24]
   15cb8:	f003 fad4 	bl	19264 <__sprint_r>
   15cbc:	2800      	cmp	r0, #0
   15cbe:	d000      	beq.n	15cc2 <_vfprintf_r+0x962>
   15cc0:	e0de      	b.n	15e80 <_vfprintf_r+0xb20>
   15cc2:	68bc      	ldr	r4, [r7, #8]
   15cc4:	ae32      	add	r6, sp, #200	; 0xc8
   15cc6:	e74e      	b.n	15b66 <_vfprintf_r+0x806>
   15cc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15cca:	2b65      	cmp	r3, #101	; 0x65
   15ccc:	ddab      	ble.n	15c26 <_vfprintf_r+0x8c6>
   15cce:	2200      	movs	r2, #0
   15cd0:	2300      	movs	r3, #0
   15cd2:	9816      	ldr	r0, [sp, #88]	; 0x58
   15cd4:	9915      	ldr	r1, [sp, #84]	; 0x54
   15cd6:	f7fe fce9 	bl	146ac <__aeabi_dcmpeq>
   15cda:	2800      	cmp	r0, #0
   15cdc:	d100      	bne.n	15ce0 <_vfprintf_r+0x980>
   15cde:	e134      	b.n	15f4a <_vfprintf_r+0xbea>
   15ce0:	4b85      	ldr	r3, [pc, #532]	; (15ef8 <_vfprintf_r+0xb98>)
   15ce2:	3401      	adds	r4, #1
   15ce4:	6033      	str	r3, [r6, #0]
   15ce6:	2301      	movs	r3, #1
   15ce8:	6073      	str	r3, [r6, #4]
   15cea:	687b      	ldr	r3, [r7, #4]
   15cec:	60bc      	str	r4, [r7, #8]
   15cee:	3301      	adds	r3, #1
   15cf0:	607b      	str	r3, [r7, #4]
   15cf2:	2b07      	cmp	r3, #7
   15cf4:	dd00      	ble.n	15cf8 <_vfprintf_r+0x998>
   15cf6:	e3dc      	b.n	164b2 <_vfprintf_r+0x1152>
   15cf8:	3608      	adds	r6, #8
   15cfa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15cfc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   15cfe:	4293      	cmp	r3, r2
   15d00:	db03      	blt.n	15d0a <_vfprintf_r+0x9aa>
   15d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15d04:	07db      	lsls	r3, r3, #31
   15d06:	d400      	bmi.n	15d0a <_vfprintf_r+0x9aa>
   15d08:	e3b7      	b.n	1647a <_vfprintf_r+0x111a>
   15d0a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15d0c:	68ba      	ldr	r2, [r7, #8]
   15d0e:	6033      	str	r3, [r6, #0]
   15d10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15d12:	469c      	mov	ip, r3
   15d14:	6073      	str	r3, [r6, #4]
   15d16:	687b      	ldr	r3, [r7, #4]
   15d18:	4462      	add	r2, ip
   15d1a:	3301      	adds	r3, #1
   15d1c:	0014      	movs	r4, r2
   15d1e:	60ba      	str	r2, [r7, #8]
   15d20:	607b      	str	r3, [r7, #4]
   15d22:	2b07      	cmp	r3, #7
   15d24:	dd01      	ble.n	15d2a <_vfprintf_r+0x9ca>
   15d26:	f000 fc19 	bl	1655c <_vfprintf_r+0x11fc>
   15d2a:	3608      	adds	r6, #8
   15d2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15d2e:	1e5d      	subs	r5, r3, #1
   15d30:	2d00      	cmp	r5, #0
   15d32:	dc00      	bgt.n	15d36 <_vfprintf_r+0x9d6>
   15d34:	e717      	b.n	15b66 <_vfprintf_r+0x806>
   15d36:	4a71      	ldr	r2, [pc, #452]	; (15efc <_vfprintf_r+0xb9c>)
   15d38:	687b      	ldr	r3, [r7, #4]
   15d3a:	4691      	mov	r9, r2
   15d3c:	2d10      	cmp	r5, #16
   15d3e:	dc00      	bgt.n	15d42 <_vfprintf_r+0x9e2>
   15d40:	e1c3      	b.n	160ca <_vfprintf_r+0xd6a>
   15d42:	2210      	movs	r2, #16
   15d44:	4690      	mov	r8, r2
   15d46:	0022      	movs	r2, r4
   15d48:	464c      	mov	r4, r9
   15d4a:	46d9      	mov	r9, fp
   15d4c:	e004      	b.n	15d58 <_vfprintf_r+0x9f8>
   15d4e:	3608      	adds	r6, #8
   15d50:	3d10      	subs	r5, #16
   15d52:	2d10      	cmp	r5, #16
   15d54:	dc00      	bgt.n	15d58 <_vfprintf_r+0x9f8>
   15d56:	e37c      	b.n	16452 <_vfprintf_r+0x10f2>
   15d58:	4641      	mov	r1, r8
   15d5a:	3210      	adds	r2, #16
   15d5c:	3301      	adds	r3, #1
   15d5e:	6034      	str	r4, [r6, #0]
   15d60:	6071      	str	r1, [r6, #4]
   15d62:	60ba      	str	r2, [r7, #8]
   15d64:	607b      	str	r3, [r7, #4]
   15d66:	2b07      	cmp	r3, #7
   15d68:	ddf1      	ble.n	15d4e <_vfprintf_r+0x9ee>
   15d6a:	003a      	movs	r2, r7
   15d6c:	4649      	mov	r1, r9
   15d6e:	9806      	ldr	r0, [sp, #24]
   15d70:	f003 fa78 	bl	19264 <__sprint_r>
   15d74:	2800      	cmp	r0, #0
   15d76:	d10b      	bne.n	15d90 <_vfprintf_r+0xa30>
   15d78:	68ba      	ldr	r2, [r7, #8]
   15d7a:	687b      	ldr	r3, [r7, #4]
   15d7c:	ae32      	add	r6, sp, #200	; 0xc8
   15d7e:	e7e7      	b.n	15d50 <_vfprintf_r+0x9f0>
   15d80:	68bb      	ldr	r3, [r7, #8]
   15d82:	46d9      	mov	r9, fp
   15d84:	2b00      	cmp	r3, #0
   15d86:	d001      	beq.n	15d8c <_vfprintf_r+0xa2c>
   15d88:	f000 fd4c 	bl	16824 <_vfprintf_r+0x14c4>
   15d8c:	2300      	movs	r3, #0
   15d8e:	607b      	str	r3, [r7, #4]
   15d90:	464b      	mov	r3, r9
   15d92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   15d94:	07db      	lsls	r3, r3, #31
   15d96:	d40d      	bmi.n	15db4 <_vfprintf_r+0xa54>
   15d98:	464b      	mov	r3, r9
   15d9a:	899b      	ldrh	r3, [r3, #12]
   15d9c:	059a      	lsls	r2, r3, #22
   15d9e:	d505      	bpl.n	15dac <_vfprintf_r+0xa4c>
   15da0:	065b      	lsls	r3, r3, #25
   15da2:	d401      	bmi.n	15da8 <_vfprintf_r+0xa48>
   15da4:	f7ff fb8d 	bl	154c2 <_vfprintf_r+0x162>
   15da8:	f7ff fb88 	bl	154bc <_vfprintf_r+0x15c>
   15dac:	464b      	mov	r3, r9
   15dae:	6d98      	ldr	r0, [r3, #88]	; 0x58
   15db0:	f002 fbb8 	bl	18524 <__retarget_lock_release_recursive>
   15db4:	464b      	mov	r3, r9
   15db6:	899b      	ldrh	r3, [r3, #12]
   15db8:	e7f2      	b.n	15da0 <_vfprintf_r+0xa40>
   15dba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15dbc:	9a08      	ldr	r2, [sp, #32]
   15dbe:	1a9d      	subs	r5, r3, r2
   15dc0:	2d00      	cmp	r5, #0
   15dc2:	dc00      	bgt.n	15dc6 <_vfprintf_r+0xa66>
   15dc4:	e685      	b.n	15ad2 <_vfprintf_r+0x772>
   15dc6:	4a4d      	ldr	r2, [pc, #308]	; (15efc <_vfprintf_r+0xb9c>)
   15dc8:	687b      	ldr	r3, [r7, #4]
   15dca:	4691      	mov	r9, r2
   15dcc:	2d10      	cmp	r5, #16
   15dce:	dd24      	ble.n	15e1a <_vfprintf_r+0xaba>
   15dd0:	2210      	movs	r2, #16
   15dd2:	0021      	movs	r1, r4
   15dd4:	4690      	mov	r8, r2
   15dd6:	465c      	mov	r4, fp
   15dd8:	0032      	movs	r2, r6
   15dda:	464e      	mov	r6, r9
   15ddc:	e003      	b.n	15de6 <_vfprintf_r+0xa86>
   15dde:	3d10      	subs	r5, #16
   15de0:	3208      	adds	r2, #8
   15de2:	2d10      	cmp	r5, #16
   15de4:	dd15      	ble.n	15e12 <_vfprintf_r+0xab2>
   15de6:	4640      	mov	r0, r8
   15de8:	3110      	adds	r1, #16
   15dea:	3301      	adds	r3, #1
   15dec:	6016      	str	r6, [r2, #0]
   15dee:	6050      	str	r0, [r2, #4]
   15df0:	60b9      	str	r1, [r7, #8]
   15df2:	607b      	str	r3, [r7, #4]
   15df4:	2b07      	cmp	r3, #7
   15df6:	ddf2      	ble.n	15dde <_vfprintf_r+0xa7e>
   15df8:	003a      	movs	r2, r7
   15dfa:	0021      	movs	r1, r4
   15dfc:	9806      	ldr	r0, [sp, #24]
   15dfe:	f003 fa31 	bl	19264 <__sprint_r>
   15e02:	2800      	cmp	r0, #0
   15e04:	d115      	bne.n	15e32 <_vfprintf_r+0xad2>
   15e06:	3d10      	subs	r5, #16
   15e08:	68b9      	ldr	r1, [r7, #8]
   15e0a:	687b      	ldr	r3, [r7, #4]
   15e0c:	aa32      	add	r2, sp, #200	; 0xc8
   15e0e:	2d10      	cmp	r5, #16
   15e10:	dce9      	bgt.n	15de6 <_vfprintf_r+0xa86>
   15e12:	46a3      	mov	fp, r4
   15e14:	46b1      	mov	r9, r6
   15e16:	000c      	movs	r4, r1
   15e18:	0016      	movs	r6, r2
   15e1a:	464a      	mov	r2, r9
   15e1c:	1964      	adds	r4, r4, r5
   15e1e:	3301      	adds	r3, #1
   15e20:	6032      	str	r2, [r6, #0]
   15e22:	6075      	str	r5, [r6, #4]
   15e24:	60bc      	str	r4, [r7, #8]
   15e26:	607b      	str	r3, [r7, #4]
   15e28:	2b07      	cmp	r3, #7
   15e2a:	dd00      	ble.n	15e2e <_vfprintf_r+0xace>
   15e2c:	e263      	b.n	162f6 <_vfprintf_r+0xf96>
   15e2e:	3608      	adds	r6, #8
   15e30:	e64f      	b.n	15ad2 <_vfprintf_r+0x772>
   15e32:	46a1      	mov	r9, r4
   15e34:	e7ac      	b.n	15d90 <_vfprintf_r+0xa30>
   15e36:	2301      	movs	r3, #1
   15e38:	9a09      	ldr	r2, [sp, #36]	; 0x24
   15e3a:	4213      	tst	r3, r2
   15e3c:	d000      	beq.n	15e40 <_vfprintf_r+0xae0>
   15e3e:	e6f6      	b.n	15c2e <_vfprintf_r+0x8ce>
   15e40:	6073      	str	r3, [r6, #4]
   15e42:	687b      	ldr	r3, [r7, #4]
   15e44:	9a11      	ldr	r2, [sp, #68]	; 0x44
   15e46:	3301      	adds	r3, #1
   15e48:	3401      	adds	r4, #1
   15e4a:	6032      	str	r2, [r6, #0]
   15e4c:	60bc      	str	r4, [r7, #8]
   15e4e:	4698      	mov	r8, r3
   15e50:	607b      	str	r3, [r7, #4]
   15e52:	2b07      	cmp	r3, #7
   15e54:	dc00      	bgt.n	15e58 <_vfprintf_r+0xaf8>
   15e56:	e71e      	b.n	15c96 <_vfprintf_r+0x936>
   15e58:	003a      	movs	r2, r7
   15e5a:	4659      	mov	r1, fp
   15e5c:	9806      	ldr	r0, [sp, #24]
   15e5e:	f003 fa01 	bl	19264 <__sprint_r>
   15e62:	2800      	cmp	r0, #0
   15e64:	d10c      	bne.n	15e80 <_vfprintf_r+0xb20>
   15e66:	687b      	ldr	r3, [r7, #4]
   15e68:	68bc      	ldr	r4, [r7, #8]
   15e6a:	4698      	mov	r8, r3
   15e6c:	ae32      	add	r6, sp, #200	; 0xc8
   15e6e:	e713      	b.n	15c98 <_vfprintf_r+0x938>
   15e70:	003a      	movs	r2, r7
   15e72:	4659      	mov	r1, fp
   15e74:	9806      	ldr	r0, [sp, #24]
   15e76:	f003 f9f5 	bl	19264 <__sprint_r>
   15e7a:	2800      	cmp	r0, #0
   15e7c:	d100      	bne.n	15e80 <_vfprintf_r+0xb20>
   15e7e:	e6cd      	b.n	15c1c <_vfprintf_r+0x8bc>
   15e80:	46d9      	mov	r9, fp
   15e82:	e785      	b.n	15d90 <_vfprintf_r+0xa30>
   15e84:	9c09      	ldr	r4, [sp, #36]	; 0x24
   15e86:	2b01      	cmp	r3, #1
   15e88:	d100      	bne.n	15e8c <_vfprintf_r+0xb2c>
   15e8a:	e148      	b.n	1611e <_vfprintf_r+0xdbe>
   15e8c:	2b02      	cmp	r3, #2
   15e8e:	d123      	bne.n	15ed8 <_vfprintf_r+0xb78>
   15e90:	9409      	str	r4, [sp, #36]	; 0x24
   15e92:	2300      	movs	r3, #0
   15e94:	2400      	movs	r4, #0
   15e96:	930c      	str	r3, [sp, #48]	; 0x30
   15e98:	940d      	str	r4, [sp, #52]	; 0x34
   15e9a:	e4a1      	b.n	157e0 <_vfprintf_r+0x480>
   15e9c:	003a      	movs	r2, r7
   15e9e:	4659      	mov	r1, fp
   15ea0:	9806      	ldr	r0, [sp, #24]
   15ea2:	f003 f9df 	bl	19264 <__sprint_r>
   15ea6:	2800      	cmp	r0, #0
   15ea8:	d1ea      	bne.n	15e80 <_vfprintf_r+0xb20>
   15eaa:	68bc      	ldr	r4, [r7, #8]
   15eac:	ae32      	add	r6, sp, #200	; 0xc8
   15eae:	e648      	b.n	15b42 <_vfprintf_r+0x7e2>
   15eb0:	003a      	movs	r2, r7
   15eb2:	4659      	mov	r1, fp
   15eb4:	9806      	ldr	r0, [sp, #24]
   15eb6:	f003 f9d5 	bl	19264 <__sprint_r>
   15eba:	2800      	cmp	r0, #0
   15ebc:	d1e0      	bne.n	15e80 <_vfprintf_r+0xb20>
   15ebe:	68bc      	ldr	r4, [r7, #8]
   15ec0:	ae32      	add	r6, sp, #200	; 0xc8
   15ec2:	e5f2      	b.n	15aaa <_vfprintf_r+0x74a>
   15ec4:	003a      	movs	r2, r7
   15ec6:	4659      	mov	r1, fp
   15ec8:	9806      	ldr	r0, [sp, #24]
   15eca:	f003 f9cb 	bl	19264 <__sprint_r>
   15ece:	2800      	cmp	r0, #0
   15ed0:	d1d6      	bne.n	15e80 <_vfprintf_r+0xb20>
   15ed2:	68bc      	ldr	r4, [r7, #8]
   15ed4:	ae32      	add	r6, sp, #200	; 0xc8
   15ed6:	e5f8      	b.n	15aca <_vfprintf_r+0x76a>
   15ed8:	9409      	str	r4, [sp, #36]	; 0x24
   15eda:	2300      	movs	r3, #0
   15edc:	2400      	movs	r4, #0
   15ede:	930c      	str	r3, [sp, #48]	; 0x30
   15ee0:	940d      	str	r4, [sp, #52]	; 0x34
   15ee2:	980c      	ldr	r0, [sp, #48]	; 0x30
   15ee4:	990d      	ldr	r1, [sp, #52]	; 0x34
   15ee6:	4653      	mov	r3, sl
   15ee8:	aa32      	add	r2, sp, #200	; 0xc8
   15eea:	4691      	mov	r9, r2
   15eec:	9308      	str	r3, [sp, #32]
   15eee:	46b2      	mov	sl, r6
   15ef0:	e007      	b.n	15f02 <_vfprintf_r+0xba2>
   15ef2:	46c0      	nop			; (mov r8, r8)
   15ef4:	0001b070 	.word	0x0001b070
   15ef8:	0001aadc 	.word	0x0001aadc
   15efc:	0001b080 	.word	0x0001b080
   15f00:	46a1      	mov	r9, r4
   15f02:	074a      	lsls	r2, r1, #29
   15f04:	4694      	mov	ip, r2
   15f06:	464b      	mov	r3, r9
   15f08:	4665      	mov	r5, ip
   15f0a:	1e5c      	subs	r4, r3, #1
   15f0c:	08c6      	lsrs	r6, r0, #3
   15f0e:	2307      	movs	r3, #7
   15f10:	08ca      	lsrs	r2, r1, #3
   15f12:	4335      	orrs	r5, r6
   15f14:	0011      	movs	r1, r2
   15f16:	002a      	movs	r2, r5
   15f18:	4003      	ands	r3, r0
   15f1a:	3330      	adds	r3, #48	; 0x30
   15f1c:	7023      	strb	r3, [r4, #0]
   15f1e:	0028      	movs	r0, r5
   15f20:	430a      	orrs	r2, r1
   15f22:	d1ed      	bne.n	15f00 <_vfprintf_r+0xba0>
   15f24:	900c      	str	r0, [sp, #48]	; 0x30
   15f26:	910d      	str	r1, [sp, #52]	; 0x34
   15f28:	9908      	ldr	r1, [sp, #32]
   15f2a:	4656      	mov	r6, sl
   15f2c:	468a      	mov	sl, r1
   15f2e:	9909      	ldr	r1, [sp, #36]	; 0x24
   15f30:	464a      	mov	r2, r9
   15f32:	9411      	str	r4, [sp, #68]	; 0x44
   15f34:	07c9      	lsls	r1, r1, #31
   15f36:	d500      	bpl.n	15f3a <_vfprintf_r+0xbda>
   15f38:	e0e0      	b.n	160fc <_vfprintf_r+0xd9c>
   15f3a:	ab32      	add	r3, sp, #200	; 0xc8
   15f3c:	1b1b      	subs	r3, r3, r4
   15f3e:	930e      	str	r3, [sp, #56]	; 0x38
   15f40:	f7ff fb7b 	bl	1563a <_vfprintf_r+0x2da>
   15f44:	9c07      	ldr	r4, [sp, #28]
   15f46:	f7ff fa7d 	bl	15444 <_vfprintf_r+0xe4>
   15f4a:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15f4c:	2800      	cmp	r0, #0
   15f4e:	dc00      	bgt.n	15f52 <_vfprintf_r+0xbf2>
   15f50:	e2b9      	b.n	164c6 <_vfprintf_r+0x1166>
   15f52:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   15f54:	9914      	ldr	r1, [sp, #80]	; 0x50
   15f56:	0013      	movs	r3, r2
   15f58:	4690      	mov	r8, r2
   15f5a:	428b      	cmp	r3, r1
   15f5c:	dd00      	ble.n	15f60 <_vfprintf_r+0xc00>
   15f5e:	4688      	mov	r8, r1
   15f60:	4643      	mov	r3, r8
   15f62:	2b00      	cmp	r3, #0
   15f64:	dd0c      	ble.n	15f80 <_vfprintf_r+0xc20>
   15f66:	9b11      	ldr	r3, [sp, #68]	; 0x44
   15f68:	4444      	add	r4, r8
   15f6a:	6033      	str	r3, [r6, #0]
   15f6c:	4643      	mov	r3, r8
   15f6e:	6073      	str	r3, [r6, #4]
   15f70:	687b      	ldr	r3, [r7, #4]
   15f72:	60bc      	str	r4, [r7, #8]
   15f74:	3301      	adds	r3, #1
   15f76:	607b      	str	r3, [r7, #4]
   15f78:	2b07      	cmp	r3, #7
   15f7a:	dd00      	ble.n	15f7e <_vfprintf_r+0xc1e>
   15f7c:	e389      	b.n	16692 <_vfprintf_r+0x1332>
   15f7e:	3608      	adds	r6, #8
   15f80:	4643      	mov	r3, r8
   15f82:	43db      	mvns	r3, r3
   15f84:	4642      	mov	r2, r8
   15f86:	17db      	asrs	r3, r3, #31
   15f88:	4013      	ands	r3, r2
   15f8a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   15f8c:	1ad3      	subs	r3, r2, r3
   15f8e:	4698      	mov	r8, r3
   15f90:	2b00      	cmp	r3, #0
   15f92:	dc00      	bgt.n	15f96 <_vfprintf_r+0xc36>
   15f94:	e0eb      	b.n	1616e <_vfprintf_r+0xe0e>
   15f96:	2b10      	cmp	r3, #16
   15f98:	dc01      	bgt.n	15f9e <_vfprintf_r+0xc3e>
   15f9a:	f000 fcd9 	bl	16950 <_vfprintf_r+0x15f0>
   15f9e:	4adc      	ldr	r2, [pc, #880]	; (16310 <_vfprintf_r+0xfb0>)
   15fa0:	687b      	ldr	r3, [r7, #4]
   15fa2:	4691      	mov	r9, r2
   15fa4:	2210      	movs	r2, #16
   15fa6:	464d      	mov	r5, r9
   15fa8:	4692      	mov	sl, r2
   15faa:	0022      	movs	r2, r4
   15fac:	4644      	mov	r4, r8
   15fae:	46d8      	mov	r8, fp
   15fb0:	e004      	b.n	15fbc <_vfprintf_r+0xc5c>
   15fb2:	3608      	adds	r6, #8
   15fb4:	3c10      	subs	r4, #16
   15fb6:	2c10      	cmp	r4, #16
   15fb8:	dc00      	bgt.n	15fbc <_vfprintf_r+0xc5c>
   15fba:	e0bf      	b.n	1613c <_vfprintf_r+0xddc>
   15fbc:	4651      	mov	r1, sl
   15fbe:	3210      	adds	r2, #16
   15fc0:	3301      	adds	r3, #1
   15fc2:	6035      	str	r5, [r6, #0]
   15fc4:	6071      	str	r1, [r6, #4]
   15fc6:	60ba      	str	r2, [r7, #8]
   15fc8:	607b      	str	r3, [r7, #4]
   15fca:	2b07      	cmp	r3, #7
   15fcc:	ddf1      	ble.n	15fb2 <_vfprintf_r+0xc52>
   15fce:	003a      	movs	r2, r7
   15fd0:	4641      	mov	r1, r8
   15fd2:	9806      	ldr	r0, [sp, #24]
   15fd4:	f003 f946 	bl	19264 <__sprint_r>
   15fd8:	2800      	cmp	r0, #0
   15fda:	d000      	beq.n	15fde <_vfprintf_r+0xc7e>
   15fdc:	e3b6      	b.n	1674c <_vfprintf_r+0x13ec>
   15fde:	68ba      	ldr	r2, [r7, #8]
   15fe0:	687b      	ldr	r3, [r7, #4]
   15fe2:	ae32      	add	r6, sp, #200	; 0xc8
   15fe4:	e7e6      	b.n	15fb4 <_vfprintf_r+0xc54>
   15fe6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15fe8:	2b00      	cmp	r3, #0
   15fea:	d100      	bne.n	15fee <_vfprintf_r+0xc8e>
   15fec:	e092      	b.n	16114 <_vfprintf_r+0xdb4>
   15fee:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   15ff0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   15ff2:	ab32      	add	r3, sp, #200	; 0xc8
   15ff4:	46b1      	mov	r9, r6
   15ff6:	001e      	movs	r6, r3
   15ff8:	0020      	movs	r0, r4
   15ffa:	0029      	movs	r1, r5
   15ffc:	220a      	movs	r2, #10
   15ffe:	2300      	movs	r3, #0
   16000:	f7fb fd62 	bl	11ac8 <__aeabi_uldivmod>
   16004:	3e01      	subs	r6, #1
   16006:	3230      	adds	r2, #48	; 0x30
   16008:	7032      	strb	r2, [r6, #0]
   1600a:	2300      	movs	r3, #0
   1600c:	0020      	movs	r0, r4
   1600e:	0029      	movs	r1, r5
   16010:	220a      	movs	r2, #10
   16012:	f7fb fd59 	bl	11ac8 <__aeabi_uldivmod>
   16016:	0003      	movs	r3, r0
   16018:	0004      	movs	r4, r0
   1601a:	000d      	movs	r5, r1
   1601c:	430b      	orrs	r3, r1
   1601e:	d1eb      	bne.n	15ff8 <_vfprintf_r+0xc98>
   16020:	0032      	movs	r2, r6
   16022:	ab32      	add	r3, sp, #200	; 0xc8
   16024:	1a9b      	subs	r3, r3, r2
   16026:	9611      	str	r6, [sp, #68]	; 0x44
   16028:	940c      	str	r4, [sp, #48]	; 0x30
   1602a:	950d      	str	r5, [sp, #52]	; 0x34
   1602c:	464e      	mov	r6, r9
   1602e:	930e      	str	r3, [sp, #56]	; 0x38
   16030:	f7ff fb03 	bl	1563a <_vfprintf_r+0x2da>
   16034:	2300      	movs	r3, #0
   16036:	930e      	str	r3, [sp, #56]	; 0x38
   16038:	ab32      	add	r3, sp, #200	; 0xc8
   1603a:	9311      	str	r3, [sp, #68]	; 0x44
   1603c:	f7ff fafd 	bl	1563a <_vfprintf_r+0x2da>
   16040:	003a      	movs	r2, r7
   16042:	4659      	mov	r1, fp
   16044:	9806      	ldr	r0, [sp, #24]
   16046:	f003 f90d 	bl	19264 <__sprint_r>
   1604a:	2800      	cmp	r0, #0
   1604c:	d000      	beq.n	16050 <_vfprintf_r+0xcf0>
   1604e:	e717      	b.n	15e80 <_vfprintf_r+0xb20>
   16050:	ab16      	add	r3, sp, #88	; 0x58
   16052:	7fdb      	ldrb	r3, [r3, #31]
   16054:	68bc      	ldr	r4, [r7, #8]
   16056:	4698      	mov	r8, r3
   16058:	ae32      	add	r6, sp, #200	; 0xc8
   1605a:	e513      	b.n	15a84 <_vfprintf_r+0x724>
   1605c:	46b1      	mov	r9, r6
   1605e:	e697      	b.n	15d90 <_vfprintf_r+0xa30>
   16060:	9b14      	ldr	r3, [sp, #80]	; 0x50
   16062:	1e5d      	subs	r5, r3, #1
   16064:	2d00      	cmp	r5, #0
   16066:	dc00      	bgt.n	1606a <_vfprintf_r+0xd0a>
   16068:	e616      	b.n	15c98 <_vfprintf_r+0x938>
   1606a:	4ba9      	ldr	r3, [pc, #676]	; (16310 <_vfprintf_r+0xfb0>)
   1606c:	4699      	mov	r9, r3
   1606e:	2d10      	cmp	r5, #16
   16070:	dc00      	bgt.n	16074 <_vfprintf_r+0xd14>
   16072:	e10a      	b.n	1628a <_vfprintf_r+0xf2a>
   16074:	2310      	movs	r3, #16
   16076:	0022      	movs	r2, r4
   16078:	469a      	mov	sl, r3
   1607a:	465c      	mov	r4, fp
   1607c:	4643      	mov	r3, r8
   1607e:	e004      	b.n	1608a <_vfprintf_r+0xd2a>
   16080:	3608      	adds	r6, #8
   16082:	3d10      	subs	r5, #16
   16084:	2d10      	cmp	r5, #16
   16086:	dc00      	bgt.n	1608a <_vfprintf_r+0xd2a>
   16088:	e0fc      	b.n	16284 <_vfprintf_r+0xf24>
   1608a:	4649      	mov	r1, r9
   1608c:	6031      	str	r1, [r6, #0]
   1608e:	4651      	mov	r1, sl
   16090:	3210      	adds	r2, #16
   16092:	3301      	adds	r3, #1
   16094:	6071      	str	r1, [r6, #4]
   16096:	60ba      	str	r2, [r7, #8]
   16098:	607b      	str	r3, [r7, #4]
   1609a:	2b07      	cmp	r3, #7
   1609c:	ddf0      	ble.n	16080 <_vfprintf_r+0xd20>
   1609e:	003a      	movs	r2, r7
   160a0:	0021      	movs	r1, r4
   160a2:	9806      	ldr	r0, [sp, #24]
   160a4:	f003 f8de 	bl	19264 <__sprint_r>
   160a8:	2800      	cmp	r0, #0
   160aa:	d000      	beq.n	160ae <_vfprintf_r+0xd4e>
   160ac:	e6c1      	b.n	15e32 <_vfprintf_r+0xad2>
   160ae:	68ba      	ldr	r2, [r7, #8]
   160b0:	687b      	ldr	r3, [r7, #4]
   160b2:	ae32      	add	r6, sp, #200	; 0xc8
   160b4:	e7e5      	b.n	16082 <_vfprintf_r+0xd22>
   160b6:	990c      	ldr	r1, [sp, #48]	; 0x30
   160b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   160ba:	0008      	movs	r0, r1
   160bc:	4310      	orrs	r0, r2
   160be:	2302      	movs	r3, #2
   160c0:	0002      	movs	r2, r0
   160c2:	f7ff fa93 	bl	155ec <_vfprintf_r+0x28c>
   160c6:	46a3      	mov	fp, r4
   160c8:	0014      	movs	r4, r2
   160ca:	464a      	mov	r2, r9
   160cc:	1964      	adds	r4, r4, r5
   160ce:	3301      	adds	r3, #1
   160d0:	6032      	str	r2, [r6, #0]
   160d2:	6075      	str	r5, [r6, #4]
   160d4:	60bc      	str	r4, [r7, #8]
   160d6:	607b      	str	r3, [r7, #4]
   160d8:	2b07      	cmp	r3, #7
   160da:	dc00      	bgt.n	160de <_vfprintf_r+0xd7e>
   160dc:	e542      	b.n	15b64 <_vfprintf_r+0x804>
   160de:	e5e8      	b.n	15cb2 <_vfprintf_r+0x952>
   160e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   160e2:	681a      	ldr	r2, [r3, #0]
   160e4:	f7ff fa68 	bl	155b8 <_vfprintf_r+0x258>
   160e8:	6813      	ldr	r3, [r2, #0]
   160ea:	9308      	str	r3, [sp, #32]
   160ec:	f7ff fb57 	bl	1579e <_vfprintf_r+0x43e>
   160f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   160f2:	681a      	ldr	r2, [r3, #0]
   160f4:	e412      	b.n	1591c <_vfprintf_r+0x5bc>
   160f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   160f8:	681a      	ldr	r2, [r3, #0]
   160fa:	e426      	b.n	1594a <_vfprintf_r+0x5ea>
   160fc:	2b30      	cmp	r3, #48	; 0x30
   160fe:	d100      	bne.n	16102 <_vfprintf_r+0xda2>
   16100:	e23c      	b.n	1657c <_vfprintf_r+0x121c>
   16102:	2330      	movs	r3, #48	; 0x30
   16104:	3a02      	subs	r2, #2
   16106:	7013      	strb	r3, [r2, #0]
   16108:	ab32      	add	r3, sp, #200	; 0xc8
   1610a:	1a9b      	subs	r3, r3, r2
   1610c:	930e      	str	r3, [sp, #56]	; 0x38
   1610e:	9211      	str	r2, [sp, #68]	; 0x44
   16110:	f7ff fa93 	bl	1563a <_vfprintf_r+0x2da>
   16114:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16116:	2b09      	cmp	r3, #9
   16118:	d900      	bls.n	1611c <_vfprintf_r+0xdbc>
   1611a:	e768      	b.n	15fee <_vfprintf_r+0xc8e>
   1611c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1611e:	2227      	movs	r2, #39	; 0x27
   16120:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16122:	a928      	add	r1, sp, #160	; 0xa0
   16124:	3330      	adds	r3, #48	; 0x30
   16126:	548b      	strb	r3, [r1, r2]
   16128:	2301      	movs	r3, #1
   1612a:	aa16      	add	r2, sp, #88	; 0x58
   1612c:	4694      	mov	ip, r2
   1612e:	930e      	str	r3, [sp, #56]	; 0x38
   16130:	336e      	adds	r3, #110	; 0x6e
   16132:	4463      	add	r3, ip
   16134:	9409      	str	r4, [sp, #36]	; 0x24
   16136:	9311      	str	r3, [sp, #68]	; 0x44
   16138:	f7ff fa7f 	bl	1563a <_vfprintf_r+0x2da>
   1613c:	46c3      	mov	fp, r8
   1613e:	46a9      	mov	r9, r5
   16140:	46a0      	mov	r8, r4
   16142:	0014      	movs	r4, r2
   16144:	464a      	mov	r2, r9
   16146:	6032      	str	r2, [r6, #0]
   16148:	4642      	mov	r2, r8
   1614a:	4444      	add	r4, r8
   1614c:	3301      	adds	r3, #1
   1614e:	6072      	str	r2, [r6, #4]
   16150:	60bc      	str	r4, [r7, #8]
   16152:	607b      	str	r3, [r7, #4]
   16154:	2b07      	cmp	r3, #7
   16156:	dc00      	bgt.n	1615a <_vfprintf_r+0xdfa>
   16158:	e18d      	b.n	16476 <_vfprintf_r+0x1116>
   1615a:	003a      	movs	r2, r7
   1615c:	4659      	mov	r1, fp
   1615e:	9806      	ldr	r0, [sp, #24]
   16160:	f003 f880 	bl	19264 <__sprint_r>
   16164:	2800      	cmp	r0, #0
   16166:	d000      	beq.n	1616a <_vfprintf_r+0xe0a>
   16168:	e68a      	b.n	15e80 <_vfprintf_r+0xb20>
   1616a:	68bc      	ldr	r4, [r7, #8]
   1616c:	ae32      	add	r6, sp, #200	; 0xc8
   1616e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16170:	9a14      	ldr	r2, [sp, #80]	; 0x50
   16172:	4293      	cmp	r3, r2
   16174:	db00      	blt.n	16178 <_vfprintf_r+0xe18>
   16176:	e179      	b.n	1646c <_vfprintf_r+0x110c>
   16178:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1617a:	6032      	str	r2, [r6, #0]
   1617c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1617e:	4694      	mov	ip, r2
   16180:	6072      	str	r2, [r6, #4]
   16182:	687a      	ldr	r2, [r7, #4]
   16184:	4464      	add	r4, ip
   16186:	3201      	adds	r2, #1
   16188:	60bc      	str	r4, [r7, #8]
   1618a:	607a      	str	r2, [r7, #4]
   1618c:	2a07      	cmp	r2, #7
   1618e:	dd00      	ble.n	16192 <_vfprintf_r+0xe32>
   16190:	e176      	b.n	16480 <_vfprintf_r+0x1120>
   16192:	3608      	adds	r6, #8
   16194:	9a14      	ldr	r2, [sp, #80]	; 0x50
   16196:	9913      	ldr	r1, [sp, #76]	; 0x4c
   16198:	1ad3      	subs	r3, r2, r3
   1619a:	1a52      	subs	r2, r2, r1
   1619c:	4690      	mov	r8, r2
   1619e:	429a      	cmp	r2, r3
   161a0:	dd00      	ble.n	161a4 <_vfprintf_r+0xe44>
   161a2:	4698      	mov	r8, r3
   161a4:	4642      	mov	r2, r8
   161a6:	2a00      	cmp	r2, #0
   161a8:	dd0f      	ble.n	161ca <_vfprintf_r+0xe6a>
   161aa:	9913      	ldr	r1, [sp, #76]	; 0x4c
   161ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
   161ae:	468c      	mov	ip, r1
   161b0:	4462      	add	r2, ip
   161b2:	6032      	str	r2, [r6, #0]
   161b4:	4642      	mov	r2, r8
   161b6:	6072      	str	r2, [r6, #4]
   161b8:	687a      	ldr	r2, [r7, #4]
   161ba:	4444      	add	r4, r8
   161bc:	3201      	adds	r2, #1
   161be:	60bc      	str	r4, [r7, #8]
   161c0:	607a      	str	r2, [r7, #4]
   161c2:	2a07      	cmp	r2, #7
   161c4:	dd00      	ble.n	161c8 <_vfprintf_r+0xe68>
   161c6:	e289      	b.n	166dc <_vfprintf_r+0x137c>
   161c8:	3608      	adds	r6, #8
   161ca:	4642      	mov	r2, r8
   161cc:	43d5      	mvns	r5, r2
   161ce:	17ed      	asrs	r5, r5, #31
   161d0:	4015      	ands	r5, r2
   161d2:	1b5d      	subs	r5, r3, r5
   161d4:	2d00      	cmp	r5, #0
   161d6:	dc00      	bgt.n	161da <_vfprintf_r+0xe7a>
   161d8:	e4c5      	b.n	15b66 <_vfprintf_r+0x806>
   161da:	4a4d      	ldr	r2, [pc, #308]	; (16310 <_vfprintf_r+0xfb0>)
   161dc:	687b      	ldr	r3, [r7, #4]
   161de:	4691      	mov	r9, r2
   161e0:	2d10      	cmp	r5, #16
   161e2:	dc00      	bgt.n	161e6 <_vfprintf_r+0xe86>
   161e4:	e771      	b.n	160ca <_vfprintf_r+0xd6a>
   161e6:	2210      	movs	r2, #16
   161e8:	4690      	mov	r8, r2
   161ea:	0022      	movs	r2, r4
   161ec:	465c      	mov	r4, fp
   161ee:	e004      	b.n	161fa <_vfprintf_r+0xe9a>
   161f0:	3608      	adds	r6, #8
   161f2:	3d10      	subs	r5, #16
   161f4:	2d10      	cmp	r5, #16
   161f6:	dc00      	bgt.n	161fa <_vfprintf_r+0xe9a>
   161f8:	e765      	b.n	160c6 <_vfprintf_r+0xd66>
   161fa:	4649      	mov	r1, r9
   161fc:	6031      	str	r1, [r6, #0]
   161fe:	4641      	mov	r1, r8
   16200:	3210      	adds	r2, #16
   16202:	3301      	adds	r3, #1
   16204:	6071      	str	r1, [r6, #4]
   16206:	60ba      	str	r2, [r7, #8]
   16208:	607b      	str	r3, [r7, #4]
   1620a:	2b07      	cmp	r3, #7
   1620c:	ddf0      	ble.n	161f0 <_vfprintf_r+0xe90>
   1620e:	003a      	movs	r2, r7
   16210:	0021      	movs	r1, r4
   16212:	9806      	ldr	r0, [sp, #24]
   16214:	f003 f826 	bl	19264 <__sprint_r>
   16218:	2800      	cmp	r0, #0
   1621a:	d000      	beq.n	1621e <_vfprintf_r+0xebe>
   1621c:	e609      	b.n	15e32 <_vfprintf_r+0xad2>
   1621e:	68ba      	ldr	r2, [r7, #8]
   16220:	687b      	ldr	r3, [r7, #4]
   16222:	ae32      	add	r6, sp, #200	; 0xc8
   16224:	e7e5      	b.n	161f2 <_vfprintf_r+0xe92>
   16226:	003a      	movs	r2, r7
   16228:	4659      	mov	r1, fp
   1622a:	9806      	ldr	r0, [sp, #24]
   1622c:	f003 f81a 	bl	19264 <__sprint_r>
   16230:	2800      	cmp	r0, #0
   16232:	d000      	beq.n	16236 <_vfprintf_r+0xed6>
   16234:	e624      	b.n	15e80 <_vfprintf_r+0xb20>
   16236:	68bc      	ldr	r4, [r7, #8]
   16238:	687b      	ldr	r3, [r7, #4]
   1623a:	ae32      	add	r6, sp, #200	; 0xc8
   1623c:	e504      	b.n	15c48 <_vfprintf_r+0x8e8>
   1623e:	2307      	movs	r3, #7
   16240:	3207      	adds	r2, #7
   16242:	439a      	bics	r2, r3
   16244:	3301      	adds	r3, #1
   16246:	469c      	mov	ip, r3
   16248:	4494      	add	ip, r2
   1624a:	4663      	mov	r3, ip
   1624c:	930f      	str	r3, [sp, #60]	; 0x3c
   1624e:	6853      	ldr	r3, [r2, #4]
   16250:	6812      	ldr	r2, [r2, #0]
   16252:	930d      	str	r3, [sp, #52]	; 0x34
   16254:	920c      	str	r2, [sp, #48]	; 0x30
   16256:	f7ff faa7 	bl	157a8 <_vfprintf_r+0x448>
   1625a:	2207      	movs	r2, #7
   1625c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1625e:	3307      	adds	r3, #7
   16260:	4393      	bics	r3, r2
   16262:	3201      	adds	r2, #1
   16264:	4694      	mov	ip, r2
   16266:	449c      	add	ip, r3
   16268:	4662      	mov	r2, ip
   1626a:	920f      	str	r2, [sp, #60]	; 0x3c
   1626c:	681a      	ldr	r2, [r3, #0]
   1626e:	685b      	ldr	r3, [r3, #4]
   16270:	0011      	movs	r1, r2
   16272:	001a      	movs	r2, r3
   16274:	0008      	movs	r0, r1
   16276:	4310      	orrs	r0, r2
   16278:	910c      	str	r1, [sp, #48]	; 0x30
   1627a:	920d      	str	r2, [sp, #52]	; 0x34
   1627c:	2300      	movs	r3, #0
   1627e:	0002      	movs	r2, r0
   16280:	f7ff f9b4 	bl	155ec <_vfprintf_r+0x28c>
   16284:	46a3      	mov	fp, r4
   16286:	4698      	mov	r8, r3
   16288:	0014      	movs	r4, r2
   1628a:	464b      	mov	r3, r9
   1628c:	6075      	str	r5, [r6, #4]
   1628e:	6033      	str	r3, [r6, #0]
   16290:	1964      	adds	r4, r4, r5
   16292:	e4f7      	b.n	15c84 <_vfprintf_r+0x924>
   16294:	003a      	movs	r2, r7
   16296:	4659      	mov	r1, fp
   16298:	9806      	ldr	r0, [sp, #24]
   1629a:	f002 ffe3 	bl	19264 <__sprint_r>
   1629e:	2800      	cmp	r0, #0
   162a0:	d000      	beq.n	162a4 <_vfprintf_r+0xf44>
   162a2:	e5ed      	b.n	15e80 <_vfprintf_r+0xb20>
   162a4:	687b      	ldr	r3, [r7, #4]
   162a6:	68bc      	ldr	r4, [r7, #8]
   162a8:	4698      	mov	r8, r3
   162aa:	ae32      	add	r6, sp, #200	; 0xc8
   162ac:	e4da      	b.n	15c64 <_vfprintf_r+0x904>
   162ae:	2207      	movs	r2, #7
   162b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   162b2:	3307      	adds	r3, #7
   162b4:	4393      	bics	r3, r2
   162b6:	3201      	adds	r2, #1
   162b8:	4694      	mov	ip, r2
   162ba:	449c      	add	ip, r3
   162bc:	4662      	mov	r2, ip
   162be:	920f      	str	r2, [sp, #60]	; 0x3c
   162c0:	681a      	ldr	r2, [r3, #0]
   162c2:	685b      	ldr	r3, [r3, #4]
   162c4:	0011      	movs	r1, r2
   162c6:	001a      	movs	r2, r3
   162c8:	0008      	movs	r0, r1
   162ca:	4310      	orrs	r0, r2
   162cc:	910c      	str	r1, [sp, #48]	; 0x30
   162ce:	920d      	str	r2, [sp, #52]	; 0x34
   162d0:	2301      	movs	r3, #1
   162d2:	0002      	movs	r2, r0
   162d4:	f7ff f98a 	bl	155ec <_vfprintf_r+0x28c>
   162d8:	2207      	movs	r2, #7
   162da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   162dc:	3307      	adds	r3, #7
   162de:	4393      	bics	r3, r2
   162e0:	3201      	adds	r2, #1
   162e2:	4694      	mov	ip, r2
   162e4:	449c      	add	ip, r3
   162e6:	4662      	mov	r2, ip
   162e8:	920f      	str	r2, [sp, #60]	; 0x3c
   162ea:	681a      	ldr	r2, [r3, #0]
   162ec:	685b      	ldr	r3, [r3, #4]
   162ee:	920c      	str	r2, [sp, #48]	; 0x30
   162f0:	930d      	str	r3, [sp, #52]	; 0x34
   162f2:	f7ff f966 	bl	155c2 <_vfprintf_r+0x262>
   162f6:	003a      	movs	r2, r7
   162f8:	4659      	mov	r1, fp
   162fa:	9806      	ldr	r0, [sp, #24]
   162fc:	f002 ffb2 	bl	19264 <__sprint_r>
   16300:	2800      	cmp	r0, #0
   16302:	d000      	beq.n	16306 <_vfprintf_r+0xfa6>
   16304:	e5bc      	b.n	15e80 <_vfprintf_r+0xb20>
   16306:	68bc      	ldr	r4, [r7, #8]
   16308:	ae32      	add	r6, sp, #200	; 0xc8
   1630a:	f7ff fbe2 	bl	15ad2 <_vfprintf_r+0x772>
   1630e:	46c0      	nop			; (mov r8, r8)
   16310:	0001b080 	.word	0x0001b080
   16314:	980c      	ldr	r0, [sp, #48]	; 0x30
   16316:	990d      	ldr	r1, [sp, #52]	; 0x34
   16318:	2300      	movs	r3, #0
   1631a:	4242      	negs	r2, r0
   1631c:	418b      	sbcs	r3, r1
   1631e:	0011      	movs	r1, r2
   16320:	001a      	movs	r2, r3
   16322:	232d      	movs	r3, #45	; 0x2d
   16324:	a816      	add	r0, sp, #88	; 0x58
   16326:	77c3      	strb	r3, [r0, #31]
   16328:	0008      	movs	r0, r1
   1632a:	4310      	orrs	r0, r2
   1632c:	910c      	str	r1, [sp, #48]	; 0x30
   1632e:	920d      	str	r2, [sp, #52]	; 0x34
   16330:	4698      	mov	r8, r3
   16332:	0002      	movs	r2, r0
   16334:	3b2c      	subs	r3, #44	; 0x2c
   16336:	f7ff f95d 	bl	155f4 <_vfprintf_r+0x294>
   1633a:	9916      	ldr	r1, [sp, #88]	; 0x58
   1633c:	9d15      	ldr	r5, [sp, #84]	; 0x54
   1633e:	000a      	movs	r2, r1
   16340:	0008      	movs	r0, r1
   16342:	002b      	movs	r3, r5
   16344:	0029      	movs	r1, r5
   16346:	f003 fa4d 	bl	197e4 <__aeabi_dcmpun>
   1634a:	2800      	cmp	r0, #0
   1634c:	d000      	beq.n	16350 <_vfprintf_r+0xff0>
   1634e:	e2c6      	b.n	168de <_vfprintf_r+0x157e>
   16350:	4653      	mov	r3, sl
   16352:	3301      	adds	r3, #1
   16354:	d100      	bne.n	16358 <_vfprintf_r+0xff8>
   16356:	e09f      	b.n	16498 <_vfprintf_r+0x1138>
   16358:	2320      	movs	r3, #32
   1635a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1635c:	439a      	bics	r2, r3
   1635e:	920e      	str	r2, [sp, #56]	; 0x38
   16360:	2a47      	cmp	r2, #71	; 0x47
   16362:	d100      	bne.n	16366 <_vfprintf_r+0x1006>
   16364:	e1a1      	b.n	166aa <_vfprintf_r+0x134a>
   16366:	2380      	movs	r3, #128	; 0x80
   16368:	005b      	lsls	r3, r3, #1
   1636a:	4323      	orrs	r3, r4
   1636c:	9309      	str	r3, [sp, #36]	; 0x24
   1636e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16370:	2b00      	cmp	r3, #0
   16372:	da00      	bge.n	16376 <_vfprintf_r+0x1016>
   16374:	e1ed      	b.n	16752 <_vfprintf_r+0x13f2>
   16376:	9a16      	ldr	r2, [sp, #88]	; 0x58
   16378:	9308      	str	r3, [sp, #32]
   1637a:	2300      	movs	r3, #0
   1637c:	4691      	mov	r9, r2
   1637e:	9310      	str	r3, [sp, #64]	; 0x40
   16380:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16382:	2b66      	cmp	r3, #102	; 0x66
   16384:	d100      	bne.n	16388 <_vfprintf_r+0x1028>
   16386:	e1b8      	b.n	166fa <_vfprintf_r+0x139a>
   16388:	2b46      	cmp	r3, #70	; 0x46
   1638a:	d100      	bne.n	1638e <_vfprintf_r+0x102e>
   1638c:	e237      	b.n	167fe <_vfprintf_r+0x149e>
   1638e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16390:	9806      	ldr	r0, [sp, #24]
   16392:	3a45      	subs	r2, #69	; 0x45
   16394:	0013      	movs	r3, r2
   16396:	4259      	negs	r1, r3
   16398:	4159      	adcs	r1, r3
   1639a:	ab20      	add	r3, sp, #128	; 0x80
   1639c:	000d      	movs	r5, r1
   1639e:	9303      	str	r3, [sp, #12]
   163a0:	ab1f      	add	r3, sp, #124	; 0x7c
   163a2:	9302      	str	r3, [sp, #8]
   163a4:	2302      	movs	r3, #2
   163a6:	aa23      	add	r2, sp, #140	; 0x8c
   163a8:	4455      	add	r5, sl
   163aa:	921b      	str	r2, [sp, #108]	; 0x6c
   163ac:	9204      	str	r2, [sp, #16]
   163ae:	9300      	str	r3, [sp, #0]
   163b0:	9501      	str	r5, [sp, #4]
   163b2:	9b08      	ldr	r3, [sp, #32]
   163b4:	464a      	mov	r2, r9
   163b6:	f000 fcab 	bl	16d10 <_dtoa_r>
   163ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
   163bc:	9011      	str	r0, [sp, #68]	; 0x44
   163be:	2b67      	cmp	r3, #103	; 0x67
   163c0:	d000      	beq.n	163c4 <_vfprintf_r+0x1064>
   163c2:	e20b      	b.n	167dc <_vfprintf_r+0x147c>
   163c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   163c6:	4698      	mov	r8, r3
   163c8:	44a8      	add	r8, r5
   163ca:	07e3      	lsls	r3, r4, #31
   163cc:	d400      	bmi.n	163d0 <_vfprintf_r+0x1070>
   163ce:	e277      	b.n	168c0 <_vfprintf_r+0x1560>
   163d0:	2300      	movs	r3, #0
   163d2:	2200      	movs	r2, #0
   163d4:	4648      	mov	r0, r9
   163d6:	9908      	ldr	r1, [sp, #32]
   163d8:	f7fe f968 	bl	146ac <__aeabi_dcmpeq>
   163dc:	4643      	mov	r3, r8
   163de:	2800      	cmp	r0, #0
   163e0:	d10a      	bne.n	163f8 <_vfprintf_r+0x1098>
   163e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   163e4:	4543      	cmp	r3, r8
   163e6:	d207      	bcs.n	163f8 <_vfprintf_r+0x1098>
   163e8:	2130      	movs	r1, #48	; 0x30
   163ea:	4640      	mov	r0, r8
   163ec:	1c5a      	adds	r2, r3, #1
   163ee:	9223      	str	r2, [sp, #140]	; 0x8c
   163f0:	7019      	strb	r1, [r3, #0]
   163f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   163f4:	4298      	cmp	r0, r3
   163f6:	d8f9      	bhi.n	163ec <_vfprintf_r+0x108c>
   163f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   163fa:	1a9b      	subs	r3, r3, r2
   163fc:	9314      	str	r3, [sp, #80]	; 0x50
   163fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   16400:	2b47      	cmp	r3, #71	; 0x47
   16402:	d100      	bne.n	16406 <_vfprintf_r+0x10a6>
   16404:	e0d0      	b.n	165a8 <_vfprintf_r+0x1248>
   16406:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16408:	2b65      	cmp	r3, #101	; 0x65
   1640a:	dc00      	bgt.n	1640e <_vfprintf_r+0x10ae>
   1640c:	e2d5      	b.n	169ba <_vfprintf_r+0x165a>
   1640e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16410:	2b66      	cmp	r3, #102	; 0x66
   16412:	d100      	bne.n	16416 <_vfprintf_r+0x10b6>
   16414:	e1c6      	b.n	167a4 <_vfprintf_r+0x1444>
   16416:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16418:	9313      	str	r3, [sp, #76]	; 0x4c
   1641a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1641c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1641e:	0019      	movs	r1, r3
   16420:	4291      	cmp	r1, r2
   16422:	dd00      	ble.n	16426 <_vfprintf_r+0x10c6>
   16424:	e1a0      	b.n	16768 <_vfprintf_r+0x1408>
   16426:	07e3      	lsls	r3, r4, #31
   16428:	d500      	bpl.n	1642c <_vfprintf_r+0x10cc>
   1642a:	e242      	b.n	168b2 <_vfprintf_r+0x1552>
   1642c:	43d3      	mvns	r3, r2
   1642e:	17db      	asrs	r3, r3, #31
   16430:	0011      	movs	r1, r2
   16432:	401a      	ands	r2, r3
   16434:	2367      	movs	r3, #103	; 0x67
   16436:	9208      	str	r2, [sp, #32]
   16438:	910e      	str	r1, [sp, #56]	; 0x38
   1643a:	9312      	str	r3, [sp, #72]	; 0x48
   1643c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1643e:	2b00      	cmp	r3, #0
   16440:	d000      	beq.n	16444 <_vfprintf_r+0x10e4>
   16442:	e0a9      	b.n	16598 <_vfprintf_r+0x1238>
   16444:	ab16      	add	r3, sp, #88	; 0x58
   16446:	7fdb      	ldrb	r3, [r3, #31]
   16448:	4698      	mov	r8, r3
   1644a:	2300      	movs	r3, #0
   1644c:	469a      	mov	sl, r3
   1644e:	f7ff f8fc 	bl	1564a <_vfprintf_r+0x2ea>
   16452:	46cb      	mov	fp, r9
   16454:	46a1      	mov	r9, r4
   16456:	0014      	movs	r4, r2
   16458:	e637      	b.n	160ca <_vfprintf_r+0xd6a>
   1645a:	464b      	mov	r3, r9
   1645c:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1645e:	f002 f861 	bl	18524 <__retarget_lock_release_recursive>
   16462:	2301      	movs	r3, #1
   16464:	425b      	negs	r3, r3
   16466:	930a      	str	r3, [sp, #40]	; 0x28
   16468:	f7ff f82b 	bl	154c2 <_vfprintf_r+0x162>
   1646c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1646e:	07d2      	lsls	r2, r2, #31
   16470:	d400      	bmi.n	16474 <_vfprintf_r+0x1114>
   16472:	e68f      	b.n	16194 <_vfprintf_r+0xe34>
   16474:	e680      	b.n	16178 <_vfprintf_r+0xe18>
   16476:	3608      	adds	r6, #8
   16478:	e679      	b.n	1616e <_vfprintf_r+0xe0e>
   1647a:	68bc      	ldr	r4, [r7, #8]
   1647c:	f7ff fb73 	bl	15b66 <_vfprintf_r+0x806>
   16480:	003a      	movs	r2, r7
   16482:	4659      	mov	r1, fp
   16484:	9806      	ldr	r0, [sp, #24]
   16486:	f002 feed 	bl	19264 <__sprint_r>
   1648a:	2800      	cmp	r0, #0
   1648c:	d000      	beq.n	16490 <_vfprintf_r+0x1130>
   1648e:	e4f7      	b.n	15e80 <_vfprintf_r+0xb20>
   16490:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16492:	68bc      	ldr	r4, [r7, #8]
   16494:	ae32      	add	r6, sp, #200	; 0xc8
   16496:	e67d      	b.n	16194 <_vfprintf_r+0xe34>
   16498:	2320      	movs	r3, #32
   1649a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1649c:	439a      	bics	r2, r3
   1649e:	3b1a      	subs	r3, #26
   164a0:	920e      	str	r2, [sp, #56]	; 0x38
   164a2:	469a      	mov	sl, r3
   164a4:	e75f      	b.n	16366 <_vfprintf_r+0x1006>
   164a6:	232d      	movs	r3, #45	; 0x2d
   164a8:	aa16      	add	r2, sp, #88	; 0x58
   164aa:	77d3      	strb	r3, [r2, #31]
   164ac:	4698      	mov	r8, r3
   164ae:	f7ff faa8 	bl	15a02 <_vfprintf_r+0x6a2>
   164b2:	003a      	movs	r2, r7
   164b4:	4659      	mov	r1, fp
   164b6:	9806      	ldr	r0, [sp, #24]
   164b8:	f002 fed4 	bl	19264 <__sprint_r>
   164bc:	2800      	cmp	r0, #0
   164be:	d000      	beq.n	164c2 <_vfprintf_r+0x1162>
   164c0:	e4de      	b.n	15e80 <_vfprintf_r+0xb20>
   164c2:	ae32      	add	r6, sp, #200	; 0xc8
   164c4:	e419      	b.n	15cfa <_vfprintf_r+0x99a>
   164c6:	4be3      	ldr	r3, [pc, #908]	; (16854 <_vfprintf_r+0x14f4>)
   164c8:	3401      	adds	r4, #1
   164ca:	6033      	str	r3, [r6, #0]
   164cc:	2301      	movs	r3, #1
   164ce:	6073      	str	r3, [r6, #4]
   164d0:	687b      	ldr	r3, [r7, #4]
   164d2:	60bc      	str	r4, [r7, #8]
   164d4:	3301      	adds	r3, #1
   164d6:	607b      	str	r3, [r7, #4]
   164d8:	2b07      	cmp	r3, #7
   164da:	dd00      	ble.n	164de <_vfprintf_r+0x117e>
   164dc:	e155      	b.n	1678a <_vfprintf_r+0x142a>
   164de:	3608      	adds	r6, #8
   164e0:	2800      	cmp	r0, #0
   164e2:	d107      	bne.n	164f4 <_vfprintf_r+0x1194>
   164e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   164e6:	2b00      	cmp	r3, #0
   164e8:	d104      	bne.n	164f4 <_vfprintf_r+0x1194>
   164ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   164ec:	07db      	lsls	r3, r3, #31
   164ee:	d401      	bmi.n	164f4 <_vfprintf_r+0x1194>
   164f0:	f7ff fb39 	bl	15b66 <_vfprintf_r+0x806>
   164f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   164f6:	6033      	str	r3, [r6, #0]
   164f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   164fa:	1919      	adds	r1, r3, r4
   164fc:	6073      	str	r3, [r6, #4]
   164fe:	687b      	ldr	r3, [r7, #4]
   16500:	60b9      	str	r1, [r7, #8]
   16502:	3301      	adds	r3, #1
   16504:	607b      	str	r3, [r7, #4]
   16506:	2b07      	cmp	r3, #7
   16508:	dd00      	ble.n	1650c <_vfprintf_r+0x11ac>
   1650a:	e1c4      	b.n	16896 <_vfprintf_r+0x1536>
   1650c:	0032      	movs	r2, r6
   1650e:	3208      	adds	r2, #8
   16510:	2800      	cmp	r0, #0
   16512:	da00      	bge.n	16516 <_vfprintf_r+0x11b6>
   16514:	e195      	b.n	16842 <_vfprintf_r+0x14e2>
   16516:	9811      	ldr	r0, [sp, #68]	; 0x44
   16518:	3301      	adds	r3, #1
   1651a:	6010      	str	r0, [r2, #0]
   1651c:	9814      	ldr	r0, [sp, #80]	; 0x50
   1651e:	607b      	str	r3, [r7, #4]
   16520:	1844      	adds	r4, r0, r1
   16522:	6050      	str	r0, [r2, #4]
   16524:	60bc      	str	r4, [r7, #8]
   16526:	2b07      	cmp	r3, #7
   16528:	dd01      	ble.n	1652e <_vfprintf_r+0x11ce>
   1652a:	f7ff fbc2 	bl	15cb2 <_vfprintf_r+0x952>
   1652e:	3208      	adds	r2, #8
   16530:	0016      	movs	r6, r2
   16532:	f7ff fb18 	bl	15b66 <_vfprintf_r+0x806>
   16536:	990f      	ldr	r1, [sp, #60]	; 0x3c
   16538:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1653a:	680b      	ldr	r3, [r1, #0]
   1653c:	601a      	str	r2, [r3, #0]
   1653e:	17d2      	asrs	r2, r2, #31
   16540:	605a      	str	r2, [r3, #4]
   16542:	000b      	movs	r3, r1
   16544:	3304      	adds	r3, #4
   16546:	930f      	str	r3, [sp, #60]	; 0x3c
   16548:	f7fe ff58 	bl	153fc <_vfprintf_r+0x9c>
   1654c:	464b      	mov	r3, r9
   1654e:	9a07      	ldr	r2, [sp, #28]
   16550:	431c      	orrs	r4, r3
   16552:	3201      	adds	r2, #1
   16554:	7813      	ldrb	r3, [r2, #0]
   16556:	9207      	str	r2, [sp, #28]
   16558:	f7fe ff8b 	bl	15472 <_vfprintf_r+0x112>
   1655c:	003a      	movs	r2, r7
   1655e:	4659      	mov	r1, fp
   16560:	9806      	ldr	r0, [sp, #24]
   16562:	f002 fe7f 	bl	19264 <__sprint_r>
   16566:	2800      	cmp	r0, #0
   16568:	d000      	beq.n	1656c <_vfprintf_r+0x120c>
   1656a:	e489      	b.n	15e80 <_vfprintf_r+0xb20>
   1656c:	68bc      	ldr	r4, [r7, #8]
   1656e:	ae32      	add	r6, sp, #200	; 0xc8
   16570:	f7ff fbdc 	bl	15d2c <_vfprintf_r+0x9cc>
   16574:	4bb8      	ldr	r3, [pc, #736]	; (16858 <_vfprintf_r+0x14f8>)
   16576:	9311      	str	r3, [sp, #68]	; 0x44
   16578:	f7ff fa4a 	bl	15a10 <_vfprintf_r+0x6b0>
   1657c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1657e:	ab32      	add	r3, sp, #200	; 0xc8
   16580:	1a9b      	subs	r3, r3, r2
   16582:	930e      	str	r3, [sp, #56]	; 0x38
   16584:	f7ff f859 	bl	1563a <_vfprintf_r+0x2da>
   16588:	9811      	ldr	r0, [sp, #68]	; 0x44
   1658a:	f7fe feb7 	bl	152fc <strlen>
   1658e:	0002      	movs	r2, r0
   16590:	900e      	str	r0, [sp, #56]	; 0x38
   16592:	0003      	movs	r3, r0
   16594:	f7ff f9a1 	bl	158da <_vfprintf_r+0x57a>
   16598:	232d      	movs	r3, #45	; 0x2d
   1659a:	aa16      	add	r2, sp, #88	; 0x58
   1659c:	77d3      	strb	r3, [r2, #31]
   1659e:	4698      	mov	r8, r3
   165a0:	2300      	movs	r3, #0
   165a2:	469a      	mov	sl, r3
   165a4:	f7ff f854 	bl	15650 <_vfprintf_r+0x2f0>
   165a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   165aa:	9313      	str	r3, [sp, #76]	; 0x4c
   165ac:	1cda      	adds	r2, r3, #3
   165ae:	db02      	blt.n	165b6 <_vfprintf_r+0x1256>
   165b0:	459a      	cmp	sl, r3
   165b2:	db00      	blt.n	165b6 <_vfprintf_r+0x1256>
   165b4:	e731      	b.n	1641a <_vfprintf_r+0x10ba>
   165b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   165b8:	3b02      	subs	r3, #2
   165ba:	9312      	str	r3, [sp, #72]	; 0x48
   165bc:	222c      	movs	r2, #44	; 0x2c
   165be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   165c0:	2148      	movs	r1, #72	; 0x48
   165c2:	1e5d      	subs	r5, r3, #1
   165c4:	ab16      	add	r3, sp, #88	; 0x58
   165c6:	189b      	adds	r3, r3, r2
   165c8:	466a      	mov	r2, sp
   165ca:	1852      	adds	r2, r2, r1
   165cc:	7812      	ldrb	r2, [r2, #0]
   165ce:	951f      	str	r5, [sp, #124]	; 0x7c
   165d0:	701a      	strb	r2, [r3, #0]
   165d2:	2d00      	cmp	r5, #0
   165d4:	da00      	bge.n	165d8 <_vfprintf_r+0x1278>
   165d6:	e1cb      	b.n	16970 <_vfprintf_r+0x1610>
   165d8:	212d      	movs	r1, #45	; 0x2d
   165da:	232b      	movs	r3, #43	; 0x2b
   165dc:	aa16      	add	r2, sp, #88	; 0x58
   165de:	1852      	adds	r2, r2, r1
   165e0:	7013      	strb	r3, [r2, #0]
   165e2:	2d09      	cmp	r5, #9
   165e4:	dc00      	bgt.n	165e8 <_vfprintf_r+0x1288>
   165e6:	e16d      	b.n	168c4 <_vfprintf_r+0x1564>
   165e8:	aa16      	add	r2, sp, #88	; 0x58
   165ea:	233b      	movs	r3, #59	; 0x3b
   165ec:	4694      	mov	ip, r2
   165ee:	4463      	add	r3, ip
   165f0:	469a      	mov	sl, r3
   165f2:	46b1      	mov	r9, r6
   165f4:	46a0      	mov	r8, r4
   165f6:	4656      	mov	r6, sl
   165f8:	e000      	b.n	165fc <_vfprintf_r+0x129c>
   165fa:	0026      	movs	r6, r4
   165fc:	0028      	movs	r0, r5
   165fe:	210a      	movs	r1, #10
   16600:	f7fb fa22 	bl	11a48 <__aeabi_idivmod>
   16604:	1e74      	subs	r4, r6, #1
   16606:	3130      	adds	r1, #48	; 0x30
   16608:	7021      	strb	r1, [r4, #0]
   1660a:	0028      	movs	r0, r5
   1660c:	210a      	movs	r1, #10
   1660e:	f7fb f935 	bl	1187c <__divsi3>
   16612:	0005      	movs	r5, r0
   16614:	2809      	cmp	r0, #9
   16616:	dcf0      	bgt.n	165fa <_vfprintf_r+0x129a>
   16618:	0023      	movs	r3, r4
   1661a:	4644      	mov	r4, r8
   1661c:	46b0      	mov	r8, r6
   1661e:	464e      	mov	r6, r9
   16620:	4699      	mov	r9, r3
   16622:	0003      	movs	r3, r0
   16624:	3330      	adds	r3, #48	; 0x30
   16626:	b2d8      	uxtb	r0, r3
   16628:	4643      	mov	r3, r8
   1662a:	3b02      	subs	r3, #2
   1662c:	7018      	strb	r0, [r3, #0]
   1662e:	459a      	cmp	sl, r3
   16630:	d800      	bhi.n	16634 <_vfprintf_r+0x12d4>
   16632:	e1f6      	b.n	16a22 <_vfprintf_r+0x16c2>
   16634:	4642      	mov	r2, r8
   16636:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   16638:	4645      	mov	r5, r8
   1663a:	1a99      	subs	r1, r3, r2
   1663c:	2301      	movs	r3, #1
   1663e:	3107      	adds	r1, #7
   16640:	425b      	negs	r3, r3
   16642:	e001      	b.n	16648 <_vfprintf_r+0x12e8>
   16644:	5ce8      	ldrb	r0, [r5, r3]
   16646:	3301      	adds	r3, #1
   16648:	aa21      	add	r2, sp, #132	; 0x84
   1664a:	18d2      	adds	r2, r2, r3
   1664c:	70d0      	strb	r0, [r2, #3]
   1664e:	428b      	cmp	r3, r1
   16650:	d1f8      	bne.n	16644 <_vfprintf_r+0x12e4>
   16652:	a916      	add	r1, sp, #88	; 0x58
   16654:	468c      	mov	ip, r1
   16656:	222e      	movs	r2, #46	; 0x2e
   16658:	464b      	mov	r3, r9
   1665a:	4462      	add	r2, ip
   1665c:	4694      	mov	ip, r2
   1665e:	1afb      	subs	r3, r7, r3
   16660:	4463      	add	r3, ip
   16662:	aa21      	add	r2, sp, #132	; 0x84
   16664:	9914      	ldr	r1, [sp, #80]	; 0x50
   16666:	1a9b      	subs	r3, r3, r2
   16668:	469c      	mov	ip, r3
   1666a:	000a      	movs	r2, r1
   1666c:	4462      	add	r2, ip
   1666e:	931a      	str	r3, [sp, #104]	; 0x68
   16670:	920e      	str	r2, [sp, #56]	; 0x38
   16672:	2901      	cmp	r1, #1
   16674:	dc00      	bgt.n	16678 <_vfprintf_r+0x1318>
   16676:	e170      	b.n	1695a <_vfprintf_r+0x15fa>
   16678:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1667a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1667c:	4694      	mov	ip, r2
   1667e:	4463      	add	r3, ip
   16680:	001a      	movs	r2, r3
   16682:	930e      	str	r3, [sp, #56]	; 0x38
   16684:	43db      	mvns	r3, r3
   16686:	17db      	asrs	r3, r3, #31
   16688:	401a      	ands	r2, r3
   1668a:	2300      	movs	r3, #0
   1668c:	9208      	str	r2, [sp, #32]
   1668e:	9313      	str	r3, [sp, #76]	; 0x4c
   16690:	e6d4      	b.n	1643c <_vfprintf_r+0x10dc>
   16692:	003a      	movs	r2, r7
   16694:	4659      	mov	r1, fp
   16696:	9806      	ldr	r0, [sp, #24]
   16698:	f002 fde4 	bl	19264 <__sprint_r>
   1669c:	2800      	cmp	r0, #0
   1669e:	d001      	beq.n	166a4 <_vfprintf_r+0x1344>
   166a0:	f7ff fbee 	bl	15e80 <_vfprintf_r+0xb20>
   166a4:	68bc      	ldr	r4, [r7, #8]
   166a6:	ae32      	add	r6, sp, #200	; 0xc8
   166a8:	e46a      	b.n	15f80 <_vfprintf_r+0xc20>
   166aa:	4653      	mov	r3, sl
   166ac:	2b00      	cmp	r3, #0
   166ae:	d000      	beq.n	166b2 <_vfprintf_r+0x1352>
   166b0:	e659      	b.n	16366 <_vfprintf_r+0x1006>
   166b2:	3301      	adds	r3, #1
   166b4:	469a      	mov	sl, r3
   166b6:	e656      	b.n	16366 <_vfprintf_r+0x1006>
   166b8:	4653      	mov	r3, sl
   166ba:	9308      	str	r3, [sp, #32]
   166bc:	2b06      	cmp	r3, #6
   166be:	d901      	bls.n	166c4 <_vfprintf_r+0x1364>
   166c0:	2306      	movs	r3, #6
   166c2:	9308      	str	r3, [sp, #32]
   166c4:	9b08      	ldr	r3, [sp, #32]
   166c6:	950f      	str	r5, [sp, #60]	; 0x3c
   166c8:	930e      	str	r3, [sp, #56]	; 0x38
   166ca:	2300      	movs	r3, #0
   166cc:	4698      	mov	r8, r3
   166ce:	469a      	mov	sl, r3
   166d0:	9313      	str	r3, [sp, #76]	; 0x4c
   166d2:	4b62      	ldr	r3, [pc, #392]	; (1685c <_vfprintf_r+0x14fc>)
   166d4:	9409      	str	r4, [sp, #36]	; 0x24
   166d6:	9311      	str	r3, [sp, #68]	; 0x44
   166d8:	f7fe ffbd 	bl	15656 <_vfprintf_r+0x2f6>
   166dc:	003a      	movs	r2, r7
   166de:	4659      	mov	r1, fp
   166e0:	9806      	ldr	r0, [sp, #24]
   166e2:	f002 fdbf 	bl	19264 <__sprint_r>
   166e6:	2800      	cmp	r0, #0
   166e8:	d001      	beq.n	166ee <_vfprintf_r+0x138e>
   166ea:	f7ff fbc9 	bl	15e80 <_vfprintf_r+0xb20>
   166ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
   166f0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   166f2:	68bc      	ldr	r4, [r7, #8]
   166f4:	1a9b      	subs	r3, r3, r2
   166f6:	ae32      	add	r6, sp, #200	; 0xc8
   166f8:	e567      	b.n	161ca <_vfprintf_r+0xe6a>
   166fa:	ab23      	add	r3, sp, #140	; 0x8c
   166fc:	931b      	str	r3, [sp, #108]	; 0x6c
   166fe:	9304      	str	r3, [sp, #16]
   16700:	ab20      	add	r3, sp, #128	; 0x80
   16702:	9303      	str	r3, [sp, #12]
   16704:	ab1f      	add	r3, sp, #124	; 0x7c
   16706:	9302      	str	r3, [sp, #8]
   16708:	4653      	mov	r3, sl
   1670a:	9301      	str	r3, [sp, #4]
   1670c:	2303      	movs	r3, #3
   1670e:	464a      	mov	r2, r9
   16710:	9300      	str	r3, [sp, #0]
   16712:	9806      	ldr	r0, [sp, #24]
   16714:	9b08      	ldr	r3, [sp, #32]
   16716:	f000 fafb 	bl	16d10 <_dtoa_r>
   1671a:	0003      	movs	r3, r0
   1671c:	4453      	add	r3, sl
   1671e:	4698      	mov	r8, r3
   16720:	4655      	mov	r5, sl
   16722:	9011      	str	r0, [sp, #68]	; 0x44
   16724:	9b11      	ldr	r3, [sp, #68]	; 0x44
   16726:	781b      	ldrb	r3, [r3, #0]
   16728:	2b30      	cmp	r3, #48	; 0x30
   1672a:	d002      	beq.n	16732 <_vfprintf_r+0x13d2>
   1672c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1672e:	4498      	add	r8, r3
   16730:	e64e      	b.n	163d0 <_vfprintf_r+0x1070>
   16732:	2200      	movs	r2, #0
   16734:	2300      	movs	r3, #0
   16736:	4648      	mov	r0, r9
   16738:	9908      	ldr	r1, [sp, #32]
   1673a:	f7fd ffb7 	bl	146ac <__aeabi_dcmpeq>
   1673e:	2800      	cmp	r0, #0
   16740:	d1f4      	bne.n	1672c <_vfprintf_r+0x13cc>
   16742:	2301      	movs	r3, #1
   16744:	1b5b      	subs	r3, r3, r5
   16746:	931f      	str	r3, [sp, #124]	; 0x7c
   16748:	4498      	add	r8, r3
   1674a:	e641      	b.n	163d0 <_vfprintf_r+0x1070>
   1674c:	46c1      	mov	r9, r8
   1674e:	f7ff fb1f 	bl	15d90 <_vfprintf_r+0xa30>
   16752:	2280      	movs	r2, #128	; 0x80
   16754:	0612      	lsls	r2, r2, #24
   16756:	4694      	mov	ip, r2
   16758:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1675a:	4699      	mov	r9, r3
   1675c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1675e:	4463      	add	r3, ip
   16760:	9308      	str	r3, [sp, #32]
   16762:	232d      	movs	r3, #45	; 0x2d
   16764:	9310      	str	r3, [sp, #64]	; 0x40
   16766:	e60b      	b.n	16380 <_vfprintf_r+0x1020>
   16768:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1676a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1676c:	4694      	mov	ip, r2
   1676e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   16770:	4463      	add	r3, ip
   16772:	930e      	str	r3, [sp, #56]	; 0x38
   16774:	2a00      	cmp	r2, #0
   16776:	dc00      	bgt.n	1677a <_vfprintf_r+0x141a>
   16778:	e0e3      	b.n	16942 <_vfprintf_r+0x15e2>
   1677a:	001a      	movs	r2, r3
   1677c:	43db      	mvns	r3, r3
   1677e:	17db      	asrs	r3, r3, #31
   16780:	401a      	ands	r2, r3
   16782:	2367      	movs	r3, #103	; 0x67
   16784:	9208      	str	r2, [sp, #32]
   16786:	9312      	str	r3, [sp, #72]	; 0x48
   16788:	e658      	b.n	1643c <_vfprintf_r+0x10dc>
   1678a:	003a      	movs	r2, r7
   1678c:	4659      	mov	r1, fp
   1678e:	9806      	ldr	r0, [sp, #24]
   16790:	f002 fd68 	bl	19264 <__sprint_r>
   16794:	2800      	cmp	r0, #0
   16796:	d001      	beq.n	1679c <_vfprintf_r+0x143c>
   16798:	f7ff fb72 	bl	15e80 <_vfprintf_r+0xb20>
   1679c:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1679e:	68bc      	ldr	r4, [r7, #8]
   167a0:	ae32      	add	r6, sp, #200	; 0xc8
   167a2:	e69d      	b.n	164e0 <_vfprintf_r+0x1180>
   167a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   167a6:	9313      	str	r3, [sp, #76]	; 0x4c
   167a8:	2b00      	cmp	r3, #0
   167aa:	dc00      	bgt.n	167ae <_vfprintf_r+0x144e>
   167ac:	e0f2      	b.n	16994 <_vfprintf_r+0x1634>
   167ae:	4652      	mov	r2, sl
   167b0:	2a00      	cmp	r2, #0
   167b2:	d000      	beq.n	167b6 <_vfprintf_r+0x1456>
   167b4:	e0a0      	b.n	168f8 <_vfprintf_r+0x1598>
   167b6:	07e2      	lsls	r2, r4, #31
   167b8:	d500      	bpl.n	167bc <_vfprintf_r+0x145c>
   167ba:	e09d      	b.n	168f8 <_vfprintf_r+0x1598>
   167bc:	9308      	str	r3, [sp, #32]
   167be:	930e      	str	r3, [sp, #56]	; 0x38
   167c0:	e63c      	b.n	1643c <_vfprintf_r+0x10dc>
   167c2:	ab16      	add	r3, sp, #88	; 0x58
   167c4:	7fdb      	ldrb	r3, [r3, #31]
   167c6:	950f      	str	r5, [sp, #60]	; 0x3c
   167c8:	4698      	mov	r8, r3
   167ca:	4653      	mov	r3, sl
   167cc:	9308      	str	r3, [sp, #32]
   167ce:	930e      	str	r3, [sp, #56]	; 0x38
   167d0:	2300      	movs	r3, #0
   167d2:	9409      	str	r4, [sp, #36]	; 0x24
   167d4:	469a      	mov	sl, r3
   167d6:	9313      	str	r3, [sp, #76]	; 0x4c
   167d8:	f7fe ff37 	bl	1564a <_vfprintf_r+0x2ea>
   167dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   167de:	4698      	mov	r8, r3
   167e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   167e2:	44a8      	add	r8, r5
   167e4:	2b47      	cmp	r3, #71	; 0x47
   167e6:	d000      	beq.n	167ea <_vfprintf_r+0x148a>
   167e8:	e5f2      	b.n	163d0 <_vfprintf_r+0x1070>
   167ea:	07e3      	lsls	r3, r4, #31
   167ec:	d400      	bmi.n	167f0 <_vfprintf_r+0x1490>
   167ee:	e0dc      	b.n	169aa <_vfprintf_r+0x164a>
   167f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   167f2:	4698      	mov	r8, r3
   167f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   167f6:	44a8      	add	r8, r5
   167f8:	2b46      	cmp	r3, #70	; 0x46
   167fa:	d093      	beq.n	16724 <_vfprintf_r+0x13c4>
   167fc:	e5e8      	b.n	163d0 <_vfprintf_r+0x1070>
   167fe:	ab23      	add	r3, sp, #140	; 0x8c
   16800:	931b      	str	r3, [sp, #108]	; 0x6c
   16802:	9304      	str	r3, [sp, #16]
   16804:	ab20      	add	r3, sp, #128	; 0x80
   16806:	9303      	str	r3, [sp, #12]
   16808:	ab1f      	add	r3, sp, #124	; 0x7c
   1680a:	9302      	str	r3, [sp, #8]
   1680c:	4653      	mov	r3, sl
   1680e:	9301      	str	r3, [sp, #4]
   16810:	2303      	movs	r3, #3
   16812:	464a      	mov	r2, r9
   16814:	9300      	str	r3, [sp, #0]
   16816:	9806      	ldr	r0, [sp, #24]
   16818:	9b08      	ldr	r3, [sp, #32]
   1681a:	f000 fa79 	bl	16d10 <_dtoa_r>
   1681e:	4655      	mov	r5, sl
   16820:	9011      	str	r0, [sp, #68]	; 0x44
   16822:	e7e5      	b.n	167f0 <_vfprintf_r+0x1490>
   16824:	003a      	movs	r2, r7
   16826:	4659      	mov	r1, fp
   16828:	9806      	ldr	r0, [sp, #24]
   1682a:	f002 fd1b 	bl	19264 <__sprint_r>
   1682e:	2800      	cmp	r0, #0
   16830:	d101      	bne.n	16836 <_vfprintf_r+0x14d6>
   16832:	f7ff faab 	bl	15d8c <_vfprintf_r+0xa2c>
   16836:	f7ff faab 	bl	15d90 <_vfprintf_r+0xa30>
   1683a:	4642      	mov	r2, r8
   1683c:	9207      	str	r2, [sp, #28]
   1683e:	f7fe fe1b 	bl	15478 <_vfprintf_r+0x118>
   16842:	4244      	negs	r4, r0
   16844:	3010      	adds	r0, #16
   16846:	db00      	blt.n	1684a <_vfprintf_r+0x14ea>
   16848:	e0d8      	b.n	169fc <_vfprintf_r+0x169c>
   1684a:	4805      	ldr	r0, [pc, #20]	; (16860 <_vfprintf_r+0x1500>)
   1684c:	2610      	movs	r6, #16
   1684e:	0005      	movs	r5, r0
   16850:	e00c      	b.n	1686c <_vfprintf_r+0x150c>
   16852:	46c0      	nop			; (mov r8, r8)
   16854:	0001aadc 	.word	0x0001aadc
   16858:	0001b034 	.word	0x0001b034
   1685c:	0001b068 	.word	0x0001b068
   16860:	0001b080 	.word	0x0001b080
   16864:	3208      	adds	r2, #8
   16866:	3c10      	subs	r4, #16
   16868:	2c10      	cmp	r4, #16
   1686a:	dd51      	ble.n	16910 <_vfprintf_r+0x15b0>
   1686c:	3110      	adds	r1, #16
   1686e:	3301      	adds	r3, #1
   16870:	6015      	str	r5, [r2, #0]
   16872:	6056      	str	r6, [r2, #4]
   16874:	60b9      	str	r1, [r7, #8]
   16876:	607b      	str	r3, [r7, #4]
   16878:	2b07      	cmp	r3, #7
   1687a:	ddf3      	ble.n	16864 <_vfprintf_r+0x1504>
   1687c:	003a      	movs	r2, r7
   1687e:	4659      	mov	r1, fp
   16880:	9806      	ldr	r0, [sp, #24]
   16882:	f002 fcef 	bl	19264 <__sprint_r>
   16886:	2800      	cmp	r0, #0
   16888:	d001      	beq.n	1688e <_vfprintf_r+0x152e>
   1688a:	f7ff faf9 	bl	15e80 <_vfprintf_r+0xb20>
   1688e:	68b9      	ldr	r1, [r7, #8]
   16890:	687b      	ldr	r3, [r7, #4]
   16892:	aa32      	add	r2, sp, #200	; 0xc8
   16894:	e7e7      	b.n	16866 <_vfprintf_r+0x1506>
   16896:	003a      	movs	r2, r7
   16898:	4659      	mov	r1, fp
   1689a:	9806      	ldr	r0, [sp, #24]
   1689c:	f002 fce2 	bl	19264 <__sprint_r>
   168a0:	2800      	cmp	r0, #0
   168a2:	d001      	beq.n	168a8 <_vfprintf_r+0x1548>
   168a4:	f7ff faec 	bl	15e80 <_vfprintf_r+0xb20>
   168a8:	981f      	ldr	r0, [sp, #124]	; 0x7c
   168aa:	68b9      	ldr	r1, [r7, #8]
   168ac:	687b      	ldr	r3, [r7, #4]
   168ae:	aa32      	add	r2, sp, #200	; 0xc8
   168b0:	e62e      	b.n	16510 <_vfprintf_r+0x11b0>
   168b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   168b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   168b6:	4694      	mov	ip, r2
   168b8:	4463      	add	r3, ip
   168ba:	001a      	movs	r2, r3
   168bc:	930e      	str	r3, [sp, #56]	; 0x38
   168be:	e75d      	b.n	1677c <_vfprintf_r+0x141c>
   168c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   168c2:	e599      	b.n	163f8 <_vfprintf_r+0x1098>
   168c4:	212e      	movs	r1, #46	; 0x2e
   168c6:	2330      	movs	r3, #48	; 0x30
   168c8:	aa16      	add	r2, sp, #88	; 0x58
   168ca:	1852      	adds	r2, r2, r1
   168cc:	7013      	strb	r3, [r2, #0]
   168ce:	002b      	movs	r3, r5
   168d0:	aa16      	add	r2, sp, #88	; 0x58
   168d2:	3101      	adds	r1, #1
   168d4:	3330      	adds	r3, #48	; 0x30
   168d6:	1852      	adds	r2, r2, r1
   168d8:	7013      	strb	r3, [r2, #0]
   168da:	ab22      	add	r3, sp, #136	; 0x88
   168dc:	e6c1      	b.n	16662 <_vfprintf_r+0x1302>
   168de:	9b15      	ldr	r3, [sp, #84]	; 0x54
   168e0:	2b00      	cmp	r3, #0
   168e2:	db52      	blt.n	1698a <_vfprintf_r+0x162a>
   168e4:	ab16      	add	r3, sp, #88	; 0x58
   168e6:	7fdb      	ldrb	r3, [r3, #31]
   168e8:	4698      	mov	r8, r3
   168ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
   168ec:	2b47      	cmp	r3, #71	; 0x47
   168ee:	dc48      	bgt.n	16982 <_vfprintf_r+0x1622>
   168f0:	4b4e      	ldr	r3, [pc, #312]	; (16a2c <_vfprintf_r+0x16cc>)
   168f2:	9311      	str	r3, [sp, #68]	; 0x44
   168f4:	f7ff f88c 	bl	15a10 <_vfprintf_r+0x6b0>
   168f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   168fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   168fc:	4694      	mov	ip, r2
   168fe:	4463      	add	r3, ip
   16900:	4453      	add	r3, sl
   16902:	001a      	movs	r2, r3
   16904:	930e      	str	r3, [sp, #56]	; 0x38
   16906:	43db      	mvns	r3, r3
   16908:	17db      	asrs	r3, r3, #31
   1690a:	401a      	ands	r2, r3
   1690c:	9208      	str	r2, [sp, #32]
   1690e:	e595      	b.n	1643c <_vfprintf_r+0x10dc>
   16910:	46a9      	mov	r9, r5
   16912:	4648      	mov	r0, r9
   16914:	1909      	adds	r1, r1, r4
   16916:	3301      	adds	r3, #1
   16918:	6010      	str	r0, [r2, #0]
   1691a:	6054      	str	r4, [r2, #4]
   1691c:	60b9      	str	r1, [r7, #8]
   1691e:	3208      	adds	r2, #8
   16920:	607b      	str	r3, [r7, #4]
   16922:	2b07      	cmp	r3, #7
   16924:	dc00      	bgt.n	16928 <_vfprintf_r+0x15c8>
   16926:	e5f6      	b.n	16516 <_vfprintf_r+0x11b6>
   16928:	003a      	movs	r2, r7
   1692a:	4659      	mov	r1, fp
   1692c:	9806      	ldr	r0, [sp, #24]
   1692e:	f002 fc99 	bl	19264 <__sprint_r>
   16932:	2800      	cmp	r0, #0
   16934:	d001      	beq.n	1693a <_vfprintf_r+0x15da>
   16936:	f7ff faa3 	bl	15e80 <_vfprintf_r+0xb20>
   1693a:	68b9      	ldr	r1, [r7, #8]
   1693c:	687b      	ldr	r3, [r7, #4]
   1693e:	aa32      	add	r2, sp, #200	; 0xc8
   16940:	e5e9      	b.n	16516 <_vfprintf_r+0x11b6>
   16942:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   16944:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   16946:	1a98      	subs	r0, r3, r2
   16948:	1c43      	adds	r3, r0, #1
   1694a:	001a      	movs	r2, r3
   1694c:	930e      	str	r3, [sp, #56]	; 0x38
   1694e:	e715      	b.n	1677c <_vfprintf_r+0x141c>
   16950:	4a37      	ldr	r2, [pc, #220]	; (16a30 <_vfprintf_r+0x16d0>)
   16952:	687b      	ldr	r3, [r7, #4]
   16954:	4691      	mov	r9, r2
   16956:	f7ff fbf5 	bl	16144 <_vfprintf_r+0xde4>
   1695a:	2301      	movs	r3, #1
   1695c:	4023      	ands	r3, r4
   1695e:	9313      	str	r3, [sp, #76]	; 0x4c
   16960:	d000      	beq.n	16964 <_vfprintf_r+0x1604>
   16962:	e689      	b.n	16678 <_vfprintf_r+0x1318>
   16964:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16966:	43d3      	mvns	r3, r2
   16968:	17db      	asrs	r3, r3, #31
   1696a:	401a      	ands	r2, r3
   1696c:	9208      	str	r2, [sp, #32]
   1696e:	e565      	b.n	1643c <_vfprintf_r+0x10dc>
   16970:	2301      	movs	r3, #1
   16972:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   16974:	391b      	subs	r1, #27
   16976:	1a9d      	subs	r5, r3, r2
   16978:	aa16      	add	r2, sp, #88	; 0x58
   1697a:	332c      	adds	r3, #44	; 0x2c
   1697c:	1852      	adds	r2, r2, r1
   1697e:	7013      	strb	r3, [r2, #0]
   16980:	e62f      	b.n	165e2 <_vfprintf_r+0x1282>
   16982:	4b2c      	ldr	r3, [pc, #176]	; (16a34 <_vfprintf_r+0x16d4>)
   16984:	9311      	str	r3, [sp, #68]	; 0x44
   16986:	f7ff f843 	bl	15a10 <_vfprintf_r+0x6b0>
   1698a:	232d      	movs	r3, #45	; 0x2d
   1698c:	aa16      	add	r2, sp, #88	; 0x58
   1698e:	77d3      	strb	r3, [r2, #31]
   16990:	4698      	mov	r8, r3
   16992:	e7aa      	b.n	168ea <_vfprintf_r+0x158a>
   16994:	4653      	mov	r3, sl
   16996:	2b00      	cmp	r3, #0
   16998:	d101      	bne.n	1699e <_vfprintf_r+0x163e>
   1699a:	07e3      	lsls	r3, r4, #31
   1699c:	d503      	bpl.n	169a6 <_vfprintf_r+0x1646>
   1699e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   169a0:	1c58      	adds	r0, r3, #1
   169a2:	0003      	movs	r3, r0
   169a4:	e7ac      	b.n	16900 <_vfprintf_r+0x15a0>
   169a6:	2301      	movs	r3, #1
   169a8:	e708      	b.n	167bc <_vfprintf_r+0x145c>
   169aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   169ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
   169ae:	1a9b      	subs	r3, r3, r2
   169b0:	9314      	str	r3, [sp, #80]	; 0x50
   169b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   169b4:	2b47      	cmp	r3, #71	; 0x47
   169b6:	d100      	bne.n	169ba <_vfprintf_r+0x165a>
   169b8:	e5f6      	b.n	165a8 <_vfprintf_r+0x1248>
   169ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   169bc:	9313      	str	r3, [sp, #76]	; 0x4c
   169be:	e5fd      	b.n	165bc <_vfprintf_r+0x125c>
   169c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   169c2:	1d1d      	adds	r5, r3, #4
   169c4:	681b      	ldr	r3, [r3, #0]
   169c6:	46a8      	mov	r8, r5
   169c8:	469a      	mov	sl, r3
   169ca:	2b00      	cmp	r3, #0
   169cc:	db0a      	blt.n	169e4 <_vfprintf_r+0x1684>
   169ce:	4645      	mov	r5, r8
   169d0:	9b07      	ldr	r3, [sp, #28]
   169d2:	950f      	str	r5, [sp, #60]	; 0x3c
   169d4:	785b      	ldrb	r3, [r3, #1]
   169d6:	9207      	str	r2, [sp, #28]
   169d8:	f7fe fd4b 	bl	15472 <_vfprintf_r+0x112>
   169dc:	ab16      	add	r3, sp, #88	; 0x58
   169de:	77d8      	strb	r0, [r3, #31]
   169e0:	f7ff f830 	bl	15a44 <_vfprintf_r+0x6e4>
   169e4:	2301      	movs	r3, #1
   169e6:	425b      	negs	r3, r3
   169e8:	469a      	mov	sl, r3
   169ea:	e7f0      	b.n	169ce <_vfprintf_r+0x166e>
   169ec:	ab16      	add	r3, sp, #88	; 0x58
   169ee:	77d8      	strb	r0, [r3, #31]
   169f0:	f7fe ff27 	bl	15842 <_vfprintf_r+0x4e2>
   169f4:	ab16      	add	r3, sp, #88	; 0x58
   169f6:	77d8      	strb	r0, [r3, #31]
   169f8:	f7fe fdce 	bl	15598 <_vfprintf_r+0x238>
   169fc:	480c      	ldr	r0, [pc, #48]	; (16a30 <_vfprintf_r+0x16d0>)
   169fe:	4681      	mov	r9, r0
   16a00:	e787      	b.n	16912 <_vfprintf_r+0x15b2>
   16a02:	ab16      	add	r3, sp, #88	; 0x58
   16a04:	77d8      	strb	r0, [r3, #31]
   16a06:	f7ff f829 	bl	15a5c <_vfprintf_r+0x6fc>
   16a0a:	ab16      	add	r3, sp, #88	; 0x58
   16a0c:	77d8      	strb	r0, [r3, #31]
   16a0e:	f7fe ffc3 	bl	15998 <_vfprintf_r+0x638>
   16a12:	ab16      	add	r3, sp, #88	; 0x58
   16a14:	77d8      	strb	r0, [r3, #31]
   16a16:	f7fe ffa5 	bl	15964 <_vfprintf_r+0x604>
   16a1a:	ab16      	add	r3, sp, #88	; 0x58
   16a1c:	77d8      	strb	r0, [r3, #31]
   16a1e:	f7fe feaf 	bl	15780 <_vfprintf_r+0x420>
   16a22:	aa16      	add	r2, sp, #88	; 0x58
   16a24:	232e      	movs	r3, #46	; 0x2e
   16a26:	4694      	mov	ip, r2
   16a28:	4463      	add	r3, ip
   16a2a:	e61a      	b.n	16662 <_vfprintf_r+0x1302>
   16a2c:	0001b038 	.word	0x0001b038
   16a30:	0001b080 	.word	0x0001b080
   16a34:	0001b03c 	.word	0x0001b03c

00016a38 <__sbprintf>:
   16a38:	b5f0      	push	{r4, r5, r6, r7, lr}
   16a3a:	0015      	movs	r5, r2
   16a3c:	2202      	movs	r2, #2
   16a3e:	4c1e      	ldr	r4, [pc, #120]	; (16ab8 <__sbprintf+0x80>)
   16a40:	001f      	movs	r7, r3
   16a42:	898b      	ldrh	r3, [r1, #12]
   16a44:	44a5      	add	sp, r4
   16a46:	4393      	bics	r3, r2
   16a48:	466a      	mov	r2, sp
   16a4a:	8193      	strh	r3, [r2, #12]
   16a4c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   16a4e:	0006      	movs	r6, r0
   16a50:	9319      	str	r3, [sp, #100]	; 0x64
   16a52:	89cb      	ldrh	r3, [r1, #14]
   16a54:	a816      	add	r0, sp, #88	; 0x58
   16a56:	81d3      	strh	r3, [r2, #14]
   16a58:	69cb      	ldr	r3, [r1, #28]
   16a5a:	000c      	movs	r4, r1
   16a5c:	9307      	str	r3, [sp, #28]
   16a5e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   16a60:	9309      	str	r3, [sp, #36]	; 0x24
   16a62:	ab1a      	add	r3, sp, #104	; 0x68
   16a64:	9300      	str	r3, [sp, #0]
   16a66:	9304      	str	r3, [sp, #16]
   16a68:	2380      	movs	r3, #128	; 0x80
   16a6a:	00db      	lsls	r3, r3, #3
   16a6c:	9302      	str	r3, [sp, #8]
   16a6e:	9305      	str	r3, [sp, #20]
   16a70:	2300      	movs	r3, #0
   16a72:	9306      	str	r3, [sp, #24]
   16a74:	f001 fd50 	bl	18518 <__retarget_lock_init_recursive>
   16a78:	002a      	movs	r2, r5
   16a7a:	003b      	movs	r3, r7
   16a7c:	4669      	mov	r1, sp
   16a7e:	0030      	movs	r0, r6
   16a80:	f7fe fc6e 	bl	15360 <_vfprintf_r>
   16a84:	1e05      	subs	r5, r0, #0
   16a86:	db05      	blt.n	16a94 <__sbprintf+0x5c>
   16a88:	4669      	mov	r1, sp
   16a8a:	0030      	movs	r0, r6
   16a8c:	f001 f9ac 	bl	17de8 <_fflush_r>
   16a90:	2800      	cmp	r0, #0
   16a92:	d10e      	bne.n	16ab2 <__sbprintf+0x7a>
   16a94:	466b      	mov	r3, sp
   16a96:	899b      	ldrh	r3, [r3, #12]
   16a98:	065b      	lsls	r3, r3, #25
   16a9a:	d503      	bpl.n	16aa4 <__sbprintf+0x6c>
   16a9c:	2240      	movs	r2, #64	; 0x40
   16a9e:	89a3      	ldrh	r3, [r4, #12]
   16aa0:	4313      	orrs	r3, r2
   16aa2:	81a3      	strh	r3, [r4, #12]
   16aa4:	9816      	ldr	r0, [sp, #88]	; 0x58
   16aa6:	f001 fd39 	bl	1851c <__retarget_lock_close_recursive>
   16aaa:	0028      	movs	r0, r5
   16aac:	4b03      	ldr	r3, [pc, #12]	; (16abc <__sbprintf+0x84>)
   16aae:	449d      	add	sp, r3
   16ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16ab2:	2501      	movs	r5, #1
   16ab4:	426d      	negs	r5, r5
   16ab6:	e7ed      	b.n	16a94 <__sbprintf+0x5c>
   16ab8:	fffffb94 	.word	0xfffffb94
   16abc:	0000046c 	.word	0x0000046c

00016ac0 <__swsetup_r>:
   16ac0:	4b33      	ldr	r3, [pc, #204]	; (16b90 <__swsetup_r+0xd0>)
   16ac2:	b570      	push	{r4, r5, r6, lr}
   16ac4:	0005      	movs	r5, r0
   16ac6:	6818      	ldr	r0, [r3, #0]
   16ac8:	000c      	movs	r4, r1
   16aca:	2800      	cmp	r0, #0
   16acc:	d002      	beq.n	16ad4 <__swsetup_r+0x14>
   16ace:	6b83      	ldr	r3, [r0, #56]	; 0x38
   16ad0:	2b00      	cmp	r3, #0
   16ad2:	d03c      	beq.n	16b4e <__swsetup_r+0x8e>
   16ad4:	230c      	movs	r3, #12
   16ad6:	5ee2      	ldrsh	r2, [r4, r3]
   16ad8:	b293      	uxth	r3, r2
   16ada:	0719      	lsls	r1, r3, #28
   16adc:	d50d      	bpl.n	16afa <__swsetup_r+0x3a>
   16ade:	6921      	ldr	r1, [r4, #16]
   16ae0:	2900      	cmp	r1, #0
   16ae2:	d015      	beq.n	16b10 <__swsetup_r+0x50>
   16ae4:	07da      	lsls	r2, r3, #31
   16ae6:	d521      	bpl.n	16b2c <__swsetup_r+0x6c>
   16ae8:	2300      	movs	r3, #0
   16aea:	60a3      	str	r3, [r4, #8]
   16aec:	6963      	ldr	r3, [r4, #20]
   16aee:	2000      	movs	r0, #0
   16af0:	425b      	negs	r3, r3
   16af2:	61a3      	str	r3, [r4, #24]
   16af4:	2900      	cmp	r1, #0
   16af6:	d021      	beq.n	16b3c <__swsetup_r+0x7c>
   16af8:	bd70      	pop	{r4, r5, r6, pc}
   16afa:	06d9      	lsls	r1, r3, #27
   16afc:	d53f      	bpl.n	16b7e <__swsetup_r+0xbe>
   16afe:	075b      	lsls	r3, r3, #29
   16b00:	d428      	bmi.n	16b54 <__swsetup_r+0x94>
   16b02:	6921      	ldr	r1, [r4, #16]
   16b04:	2308      	movs	r3, #8
   16b06:	4313      	orrs	r3, r2
   16b08:	81a3      	strh	r3, [r4, #12]
   16b0a:	b29b      	uxth	r3, r3
   16b0c:	2900      	cmp	r1, #0
   16b0e:	d1e9      	bne.n	16ae4 <__swsetup_r+0x24>
   16b10:	22a0      	movs	r2, #160	; 0xa0
   16b12:	2080      	movs	r0, #128	; 0x80
   16b14:	0092      	lsls	r2, r2, #2
   16b16:	0080      	lsls	r0, r0, #2
   16b18:	401a      	ands	r2, r3
   16b1a:	4282      	cmp	r2, r0
   16b1c:	d0e2      	beq.n	16ae4 <__swsetup_r+0x24>
   16b1e:	0021      	movs	r1, r4
   16b20:	0028      	movs	r0, r5
   16b22:	f001 fd31 	bl	18588 <__smakebuf_r>
   16b26:	89a3      	ldrh	r3, [r4, #12]
   16b28:	6921      	ldr	r1, [r4, #16]
   16b2a:	e7db      	b.n	16ae4 <__swsetup_r+0x24>
   16b2c:	2200      	movs	r2, #0
   16b2e:	079b      	lsls	r3, r3, #30
   16b30:	d400      	bmi.n	16b34 <__swsetup_r+0x74>
   16b32:	6962      	ldr	r2, [r4, #20]
   16b34:	60a2      	str	r2, [r4, #8]
   16b36:	2000      	movs	r0, #0
   16b38:	2900      	cmp	r1, #0
   16b3a:	d1dd      	bne.n	16af8 <__swsetup_r+0x38>
   16b3c:	220c      	movs	r2, #12
   16b3e:	5ea3      	ldrsh	r3, [r4, r2]
   16b40:	061a      	lsls	r2, r3, #24
   16b42:	d5d9      	bpl.n	16af8 <__swsetup_r+0x38>
   16b44:	2240      	movs	r2, #64	; 0x40
   16b46:	4313      	orrs	r3, r2
   16b48:	81a3      	strh	r3, [r4, #12]
   16b4a:	3801      	subs	r0, #1
   16b4c:	e7d4      	b.n	16af8 <__swsetup_r+0x38>
   16b4e:	f001 f9a5 	bl	17e9c <__sinit>
   16b52:	e7bf      	b.n	16ad4 <__swsetup_r+0x14>
   16b54:	6b21      	ldr	r1, [r4, #48]	; 0x30
   16b56:	2900      	cmp	r1, #0
   16b58:	d00a      	beq.n	16b70 <__swsetup_r+0xb0>
   16b5a:	0023      	movs	r3, r4
   16b5c:	3340      	adds	r3, #64	; 0x40
   16b5e:	4299      	cmp	r1, r3
   16b60:	d004      	beq.n	16b6c <__swsetup_r+0xac>
   16b62:	0028      	movs	r0, r5
   16b64:	f001 fa44 	bl	17ff0 <_free_r>
   16b68:	230c      	movs	r3, #12
   16b6a:	5ee2      	ldrsh	r2, [r4, r3]
   16b6c:	2300      	movs	r3, #0
   16b6e:	6323      	str	r3, [r4, #48]	; 0x30
   16b70:	2324      	movs	r3, #36	; 0x24
   16b72:	439a      	bics	r2, r3
   16b74:	2300      	movs	r3, #0
   16b76:	6921      	ldr	r1, [r4, #16]
   16b78:	6063      	str	r3, [r4, #4]
   16b7a:	6021      	str	r1, [r4, #0]
   16b7c:	e7c2      	b.n	16b04 <__swsetup_r+0x44>
   16b7e:	2309      	movs	r3, #9
   16b80:	602b      	str	r3, [r5, #0]
   16b82:	2340      	movs	r3, #64	; 0x40
   16b84:	2001      	movs	r0, #1
   16b86:	431a      	orrs	r2, r3
   16b88:	81a2      	strh	r2, [r4, #12]
   16b8a:	4240      	negs	r0, r0
   16b8c:	e7b4      	b.n	16af8 <__swsetup_r+0x38>
   16b8e:	46c0      	nop			; (mov r8, r8)
   16b90:	20000064 	.word	0x20000064

00016b94 <register_fini>:
   16b94:	4b03      	ldr	r3, [pc, #12]	; (16ba4 <register_fini+0x10>)
   16b96:	b510      	push	{r4, lr}
   16b98:	2b00      	cmp	r3, #0
   16b9a:	d002      	beq.n	16ba2 <register_fini+0xe>
   16b9c:	4802      	ldr	r0, [pc, #8]	; (16ba8 <register_fini+0x14>)
   16b9e:	f000 f805 	bl	16bac <atexit>
   16ba2:	bd10      	pop	{r4, pc}
   16ba4:	00000000 	.word	0x00000000
   16ba8:	00017f1d 	.word	0x00017f1d

00016bac <atexit>:
   16bac:	b510      	push	{r4, lr}
   16bae:	0001      	movs	r1, r0
   16bb0:	2300      	movs	r3, #0
   16bb2:	2200      	movs	r2, #0
   16bb4:	2000      	movs	r0, #0
   16bb6:	f002 fb73 	bl	192a0 <__register_exitproc>
   16bba:	bd10      	pop	{r4, pc}

00016bbc <quorem>:
   16bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   16bbe:	4645      	mov	r5, r8
   16bc0:	4680      	mov	r8, r0
   16bc2:	46de      	mov	lr, fp
   16bc4:	4657      	mov	r7, sl
   16bc6:	464e      	mov	r6, r9
   16bc8:	4642      	mov	r2, r8
   16bca:	b5e0      	push	{r5, r6, r7, lr}
   16bcc:	690c      	ldr	r4, [r1, #16]
   16bce:	6912      	ldr	r2, [r2, #16]
   16bd0:	b085      	sub	sp, #20
   16bd2:	000b      	movs	r3, r1
   16bd4:	9102      	str	r1, [sp, #8]
   16bd6:	2000      	movs	r0, #0
   16bd8:	4294      	cmp	r4, r2
   16bda:	dd00      	ble.n	16bde <quorem+0x22>
   16bdc:	e090      	b.n	16d00 <quorem+0x144>
   16bde:	2214      	movs	r2, #20
   16be0:	4694      	mov	ip, r2
   16be2:	4463      	add	r3, ip
   16be4:	4699      	mov	r9, r3
   16be6:	464a      	mov	r2, r9
   16be8:	3c01      	subs	r4, #1
   16bea:	00a3      	lsls	r3, r4, #2
   16bec:	18d6      	adds	r6, r2, r3
   16bee:	2214      	movs	r2, #20
   16bf0:	4442      	add	r2, r8
   16bf2:	4693      	mov	fp, r2
   16bf4:	449b      	add	fp, r3
   16bf6:	6833      	ldr	r3, [r6, #0]
   16bf8:	0015      	movs	r5, r2
   16bfa:	1c59      	adds	r1, r3, #1
   16bfc:	465b      	mov	r3, fp
   16bfe:	6818      	ldr	r0, [r3, #0]
   16c00:	9201      	str	r2, [sp, #4]
   16c02:	f7fa fdb1 	bl	11768 <__udivsi3>
   16c06:	1e03      	subs	r3, r0, #0
   16c08:	9000      	str	r0, [sp, #0]
   16c0a:	d042      	beq.n	16c92 <quorem+0xd6>
   16c0c:	0029      	movs	r1, r5
   16c0e:	2700      	movs	r7, #0
   16c10:	464d      	mov	r5, r9
   16c12:	2000      	movs	r0, #0
   16c14:	46b1      	mov	r9, r6
   16c16:	46a2      	mov	sl, r4
   16c18:	003e      	movs	r6, r7
   16c1a:	0004      	movs	r4, r0
   16c1c:	469c      	mov	ip, r3
   16c1e:	002f      	movs	r7, r5
   16c20:	0008      	movs	r0, r1
   16c22:	9503      	str	r5, [sp, #12]
   16c24:	4663      	mov	r3, ip
   16c26:	cf04      	ldmia	r7!, {r2}
   16c28:	0415      	lsls	r5, r2, #16
   16c2a:	0c2d      	lsrs	r5, r5, #16
   16c2c:	435d      	muls	r5, r3
   16c2e:	0c12      	lsrs	r2, r2, #16
   16c30:	435a      	muls	r2, r3
   16c32:	19ad      	adds	r5, r5, r6
   16c34:	0c2b      	lsrs	r3, r5, #16
   16c36:	18d2      	adds	r2, r2, r3
   16c38:	6803      	ldr	r3, [r0, #0]
   16c3a:	042d      	lsls	r5, r5, #16
   16c3c:	0419      	lsls	r1, r3, #16
   16c3e:	0c09      	lsrs	r1, r1, #16
   16c40:	1909      	adds	r1, r1, r4
   16c42:	0c16      	lsrs	r6, r2, #16
   16c44:	0c2d      	lsrs	r5, r5, #16
   16c46:	0412      	lsls	r2, r2, #16
   16c48:	1b49      	subs	r1, r1, r5
   16c4a:	0c12      	lsrs	r2, r2, #16
   16c4c:	0c1b      	lsrs	r3, r3, #16
   16c4e:	1a9b      	subs	r3, r3, r2
   16c50:	140a      	asrs	r2, r1, #16
   16c52:	189b      	adds	r3, r3, r2
   16c54:	0409      	lsls	r1, r1, #16
   16c56:	141c      	asrs	r4, r3, #16
   16c58:	0c09      	lsrs	r1, r1, #16
   16c5a:	041b      	lsls	r3, r3, #16
   16c5c:	4319      	orrs	r1, r3
   16c5e:	c002      	stmia	r0!, {r1}
   16c60:	45b9      	cmp	r9, r7
   16c62:	d2df      	bcs.n	16c24 <quorem+0x68>
   16c64:	9b03      	ldr	r3, [sp, #12]
   16c66:	464e      	mov	r6, r9
   16c68:	4699      	mov	r9, r3
   16c6a:	465b      	mov	r3, fp
   16c6c:	681b      	ldr	r3, [r3, #0]
   16c6e:	4654      	mov	r4, sl
   16c70:	2b00      	cmp	r3, #0
   16c72:	d10e      	bne.n	16c92 <quorem+0xd6>
   16c74:	465b      	mov	r3, fp
   16c76:	9a01      	ldr	r2, [sp, #4]
   16c78:	3b04      	subs	r3, #4
   16c7a:	429a      	cmp	r2, r3
   16c7c:	d304      	bcc.n	16c88 <quorem+0xcc>
   16c7e:	e006      	b.n	16c8e <quorem+0xd2>
   16c80:	3b04      	subs	r3, #4
   16c82:	3c01      	subs	r4, #1
   16c84:	429a      	cmp	r2, r3
   16c86:	d202      	bcs.n	16c8e <quorem+0xd2>
   16c88:	6819      	ldr	r1, [r3, #0]
   16c8a:	2900      	cmp	r1, #0
   16c8c:	d0f8      	beq.n	16c80 <quorem+0xc4>
   16c8e:	4643      	mov	r3, r8
   16c90:	611c      	str	r4, [r3, #16]
   16c92:	9902      	ldr	r1, [sp, #8]
   16c94:	4640      	mov	r0, r8
   16c96:	f001 ff83 	bl	18ba0 <__mcmp>
   16c9a:	2800      	cmp	r0, #0
   16c9c:	db2f      	blt.n	16cfe <quorem+0x142>
   16c9e:	464f      	mov	r7, r9
   16ca0:	2000      	movs	r0, #0
   16ca2:	9b00      	ldr	r3, [sp, #0]
   16ca4:	9d01      	ldr	r5, [sp, #4]
   16ca6:	3301      	adds	r3, #1
   16ca8:	9300      	str	r3, [sp, #0]
   16caa:	682b      	ldr	r3, [r5, #0]
   16cac:	cf02      	ldmia	r7!, {r1}
   16cae:	041a      	lsls	r2, r3, #16
   16cb0:	0c12      	lsrs	r2, r2, #16
   16cb2:	1810      	adds	r0, r2, r0
   16cb4:	040a      	lsls	r2, r1, #16
   16cb6:	0c12      	lsrs	r2, r2, #16
   16cb8:	1a82      	subs	r2, r0, r2
   16cba:	0c09      	lsrs	r1, r1, #16
   16cbc:	0c1b      	lsrs	r3, r3, #16
   16cbe:	1a5b      	subs	r3, r3, r1
   16cc0:	1411      	asrs	r1, r2, #16
   16cc2:	185b      	adds	r3, r3, r1
   16cc4:	0412      	lsls	r2, r2, #16
   16cc6:	1418      	asrs	r0, r3, #16
   16cc8:	0c12      	lsrs	r2, r2, #16
   16cca:	041b      	lsls	r3, r3, #16
   16ccc:	4313      	orrs	r3, r2
   16cce:	c508      	stmia	r5!, {r3}
   16cd0:	42be      	cmp	r6, r7
   16cd2:	d2ea      	bcs.n	16caa <quorem+0xee>
   16cd4:	9901      	ldr	r1, [sp, #4]
   16cd6:	00a3      	lsls	r3, r4, #2
   16cd8:	468c      	mov	ip, r1
   16cda:	4463      	add	r3, ip
   16cdc:	681a      	ldr	r2, [r3, #0]
   16cde:	2a00      	cmp	r2, #0
   16ce0:	d10d      	bne.n	16cfe <quorem+0x142>
   16ce2:	3b04      	subs	r3, #4
   16ce4:	000a      	movs	r2, r1
   16ce6:	4299      	cmp	r1, r3
   16ce8:	d304      	bcc.n	16cf4 <quorem+0x138>
   16cea:	e006      	b.n	16cfa <quorem+0x13e>
   16cec:	3b04      	subs	r3, #4
   16cee:	3c01      	subs	r4, #1
   16cf0:	429a      	cmp	r2, r3
   16cf2:	d202      	bcs.n	16cfa <quorem+0x13e>
   16cf4:	6819      	ldr	r1, [r3, #0]
   16cf6:	2900      	cmp	r1, #0
   16cf8:	d0f8      	beq.n	16cec <quorem+0x130>
   16cfa:	4643      	mov	r3, r8
   16cfc:	611c      	str	r4, [r3, #16]
   16cfe:	9800      	ldr	r0, [sp, #0]
   16d00:	b005      	add	sp, #20
   16d02:	bc3c      	pop	{r2, r3, r4, r5}
   16d04:	4690      	mov	r8, r2
   16d06:	4699      	mov	r9, r3
   16d08:	46a2      	mov	sl, r4
   16d0a:	46ab      	mov	fp, r5
   16d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16d0e:	46c0      	nop			; (mov r8, r8)

00016d10 <_dtoa_r>:
   16d10:	b5f0      	push	{r4, r5, r6, r7, lr}
   16d12:	4657      	mov	r7, sl
   16d14:	464e      	mov	r6, r9
   16d16:	4645      	mov	r5, r8
   16d18:	46de      	mov	lr, fp
   16d1a:	b5e0      	push	{r5, r6, r7, lr}
   16d1c:	6c01      	ldr	r1, [r0, #64]	; 0x40
   16d1e:	b099      	sub	sp, #100	; 0x64
   16d20:	4682      	mov	sl, r0
   16d22:	001d      	movs	r5, r3
   16d24:	0016      	movs	r6, r2
   16d26:	001f      	movs	r7, r3
   16d28:	2900      	cmp	r1, #0
   16d2a:	d009      	beq.n	16d40 <_dtoa_r+0x30>
   16d2c:	2301      	movs	r3, #1
   16d2e:	6c42      	ldr	r2, [r0, #68]	; 0x44
   16d30:	4093      	lsls	r3, r2
   16d32:	604a      	str	r2, [r1, #4]
   16d34:	608b      	str	r3, [r1, #8]
   16d36:	f001 fd27 	bl	18788 <_Bfree>
   16d3a:	2300      	movs	r3, #0
   16d3c:	4652      	mov	r2, sl
   16d3e:	6413      	str	r3, [r2, #64]	; 0x40
   16d40:	46b8      	mov	r8, r7
   16d42:	2f00      	cmp	r7, #0
   16d44:	db37      	blt.n	16db6 <_dtoa_r+0xa6>
   16d46:	2300      	movs	r3, #0
   16d48:	9a25      	ldr	r2, [sp, #148]	; 0x94
   16d4a:	6013      	str	r3, [r2, #0]
   16d4c:	4642      	mov	r2, r8
   16d4e:	4bd6      	ldr	r3, [pc, #856]	; (170a8 <_dtoa_r+0x398>)
   16d50:	401a      	ands	r2, r3
   16d52:	429a      	cmp	r2, r3
   16d54:	d018      	beq.n	16d88 <_dtoa_r+0x78>
   16d56:	2200      	movs	r2, #0
   16d58:	2300      	movs	r3, #0
   16d5a:	0030      	movs	r0, r6
   16d5c:	0039      	movs	r1, r7
   16d5e:	f7fd fca5 	bl	146ac <__aeabi_dcmpeq>
   16d62:	2800      	cmp	r0, #0
   16d64:	d02f      	beq.n	16dc6 <_dtoa_r+0xb6>
   16d66:	2301      	movs	r3, #1
   16d68:	9a24      	ldr	r2, [sp, #144]	; 0x90
   16d6a:	6013      	str	r3, [r2, #0]
   16d6c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   16d6e:	2b00      	cmp	r3, #0
   16d70:	d100      	bne.n	16d74 <_dtoa_r+0x64>
   16d72:	e22a      	b.n	171ca <_dtoa_r+0x4ba>
   16d74:	48cd      	ldr	r0, [pc, #820]	; (170ac <_dtoa_r+0x39c>)
   16d76:	6018      	str	r0, [r3, #0]
   16d78:	3801      	subs	r0, #1
   16d7a:	b019      	add	sp, #100	; 0x64
   16d7c:	bc3c      	pop	{r2, r3, r4, r5}
   16d7e:	4690      	mov	r8, r2
   16d80:	4699      	mov	r9, r3
   16d82:	46a2      	mov	sl, r4
   16d84:	46ab      	mov	fp, r5
   16d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16d88:	4bc9      	ldr	r3, [pc, #804]	; (170b0 <_dtoa_r+0x3a0>)
   16d8a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   16d8c:	6013      	str	r3, [r2, #0]
   16d8e:	2e00      	cmp	r6, #0
   16d90:	d10b      	bne.n	16daa <_dtoa_r+0x9a>
   16d92:	4643      	mov	r3, r8
   16d94:	0318      	lsls	r0, r3, #12
   16d96:	d108      	bne.n	16daa <_dtoa_r+0x9a>
   16d98:	9b26      	ldr	r3, [sp, #152]	; 0x98
   16d9a:	48c6      	ldr	r0, [pc, #792]	; (170b4 <_dtoa_r+0x3a4>)
   16d9c:	2b00      	cmp	r3, #0
   16d9e:	d0ec      	beq.n	16d7a <_dtoa_r+0x6a>
   16da0:	0003      	movs	r3, r0
   16da2:	3308      	adds	r3, #8
   16da4:	9a26      	ldr	r2, [sp, #152]	; 0x98
   16da6:	6013      	str	r3, [r2, #0]
   16da8:	e7e7      	b.n	16d7a <_dtoa_r+0x6a>
   16daa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   16dac:	48c2      	ldr	r0, [pc, #776]	; (170b8 <_dtoa_r+0x3a8>)
   16dae:	2b00      	cmp	r3, #0
   16db0:	d0e3      	beq.n	16d7a <_dtoa_r+0x6a>
   16db2:	1cc3      	adds	r3, r0, #3
   16db4:	e7f6      	b.n	16da4 <_dtoa_r+0x94>
   16db6:	2301      	movs	r3, #1
   16db8:	9a25      	ldr	r2, [sp, #148]	; 0x94
   16dba:	0068      	lsls	r0, r5, #1
   16dbc:	6013      	str	r3, [r2, #0]
   16dbe:	0843      	lsrs	r3, r0, #1
   16dc0:	4698      	mov	r8, r3
   16dc2:	001f      	movs	r7, r3
   16dc4:	e7c2      	b.n	16d4c <_dtoa_r+0x3c>
   16dc6:	ab16      	add	r3, sp, #88	; 0x58
   16dc8:	9301      	str	r3, [sp, #4]
   16dca:	ab17      	add	r3, sp, #92	; 0x5c
   16dcc:	9300      	str	r3, [sp, #0]
   16dce:	0032      	movs	r2, r6
   16dd0:	003b      	movs	r3, r7
   16dd2:	4650      	mov	r0, sl
   16dd4:	f001 ff9a 	bl	18d0c <__d2b>
   16dd8:	4643      	mov	r3, r8
   16dda:	4683      	mov	fp, r0
   16ddc:	0d1a      	lsrs	r2, r3, #20
   16dde:	d100      	bne.n	16de2 <_dtoa_r+0xd2>
   16de0:	e1d6      	b.n	17190 <_dtoa_r+0x480>
   16de2:	033b      	lsls	r3, r7, #12
   16de4:	4cb5      	ldr	r4, [pc, #724]	; (170bc <_dtoa_r+0x3ac>)
   16de6:	0b1b      	lsrs	r3, r3, #12
   16de8:	431c      	orrs	r4, r3
   16dea:	4bb5      	ldr	r3, [pc, #724]	; (170c0 <_dtoa_r+0x3b0>)
   16dec:	0030      	movs	r0, r6
   16dee:	4698      	mov	r8, r3
   16df0:	9b16      	ldr	r3, [sp, #88]	; 0x58
   16df2:	0021      	movs	r1, r4
   16df4:	4699      	mov	r9, r3
   16df6:	2300      	movs	r3, #0
   16df8:	4490      	add	r8, r2
   16dfa:	930f      	str	r3, [sp, #60]	; 0x3c
   16dfc:	2200      	movs	r2, #0
   16dfe:	4bb1      	ldr	r3, [pc, #708]	; (170c4 <_dtoa_r+0x3b4>)
   16e00:	f7fc ff5c 	bl	13cbc <__aeabi_dsub>
   16e04:	4ab0      	ldr	r2, [pc, #704]	; (170c8 <_dtoa_r+0x3b8>)
   16e06:	4bb1      	ldr	r3, [pc, #708]	; (170cc <_dtoa_r+0x3bc>)
   16e08:	f7fc fcd8 	bl	137bc <__aeabi_dmul>
   16e0c:	4ab0      	ldr	r2, [pc, #704]	; (170d0 <_dtoa_r+0x3c0>)
   16e0e:	4bb1      	ldr	r3, [pc, #708]	; (170d4 <_dtoa_r+0x3c4>)
   16e10:	f7fb fe90 	bl	12b34 <__aeabi_dadd>
   16e14:	0004      	movs	r4, r0
   16e16:	4640      	mov	r0, r8
   16e18:	000d      	movs	r5, r1
   16e1a:	f7fd fa99 	bl	14350 <__aeabi_i2d>
   16e1e:	4aae      	ldr	r2, [pc, #696]	; (170d8 <_dtoa_r+0x3c8>)
   16e20:	4bae      	ldr	r3, [pc, #696]	; (170dc <_dtoa_r+0x3cc>)
   16e22:	f7fc fccb 	bl	137bc <__aeabi_dmul>
   16e26:	0002      	movs	r2, r0
   16e28:	000b      	movs	r3, r1
   16e2a:	0020      	movs	r0, r4
   16e2c:	0029      	movs	r1, r5
   16e2e:	f7fb fe81 	bl	12b34 <__aeabi_dadd>
   16e32:	0004      	movs	r4, r0
   16e34:	000d      	movs	r5, r1
   16e36:	f7fd fa57 	bl	142e8 <__aeabi_d2iz>
   16e3a:	2200      	movs	r2, #0
   16e3c:	9003      	str	r0, [sp, #12]
   16e3e:	2300      	movs	r3, #0
   16e40:	0020      	movs	r0, r4
   16e42:	0029      	movs	r1, r5
   16e44:	f7fd fc38 	bl	146b8 <__aeabi_dcmplt>
   16e48:	2800      	cmp	r0, #0
   16e4a:	d000      	beq.n	16e4e <_dtoa_r+0x13e>
   16e4c:	e2b1      	b.n	173b2 <_dtoa_r+0x6a2>
   16e4e:	2301      	movs	r3, #1
   16e50:	9c03      	ldr	r4, [sp, #12]
   16e52:	930c      	str	r3, [sp, #48]	; 0x30
   16e54:	2c16      	cmp	r4, #22
   16e56:	d810      	bhi.n	16e7a <_dtoa_r+0x16a>
   16e58:	49a1      	ldr	r1, [pc, #644]	; (170e0 <_dtoa_r+0x3d0>)
   16e5a:	00e3      	lsls	r3, r4, #3
   16e5c:	18c9      	adds	r1, r1, r3
   16e5e:	0032      	movs	r2, r6
   16e60:	6808      	ldr	r0, [r1, #0]
   16e62:	6849      	ldr	r1, [r1, #4]
   16e64:	003b      	movs	r3, r7
   16e66:	f7fd fc3b 	bl	146e0 <__aeabi_dcmpgt>
   16e6a:	2800      	cmp	r0, #0
   16e6c:	d100      	bne.n	16e70 <_dtoa_r+0x160>
   16e6e:	e31d      	b.n	174ac <_dtoa_r+0x79c>
   16e70:	0023      	movs	r3, r4
   16e72:	3b01      	subs	r3, #1
   16e74:	9303      	str	r3, [sp, #12]
   16e76:	2300      	movs	r3, #0
   16e78:	930c      	str	r3, [sp, #48]	; 0x30
   16e7a:	464b      	mov	r3, r9
   16e7c:	4642      	mov	r2, r8
   16e7e:	1a9a      	subs	r2, r3, r2
   16e80:	2300      	movs	r3, #0
   16e82:	9306      	str	r3, [sp, #24]
   16e84:	0013      	movs	r3, r2
   16e86:	3b01      	subs	r3, #1
   16e88:	9304      	str	r3, [sp, #16]
   16e8a:	d500      	bpl.n	16e8e <_dtoa_r+0x17e>
   16e8c:	e2a1      	b.n	173d2 <_dtoa_r+0x6c2>
   16e8e:	9b03      	ldr	r3, [sp, #12]
   16e90:	2b00      	cmp	r3, #0
   16e92:	da00      	bge.n	16e96 <_dtoa_r+0x186>
   16e94:	e284      	b.n	173a0 <_dtoa_r+0x690>
   16e96:	469c      	mov	ip, r3
   16e98:	930d      	str	r3, [sp, #52]	; 0x34
   16e9a:	2300      	movs	r3, #0
   16e9c:	9a04      	ldr	r2, [sp, #16]
   16e9e:	4699      	mov	r9, r3
   16ea0:	0011      	movs	r1, r2
   16ea2:	4461      	add	r1, ip
   16ea4:	9104      	str	r1, [sp, #16]
   16ea6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   16ea8:	2b09      	cmp	r3, #9
   16eaa:	d900      	bls.n	16eae <_dtoa_r+0x19e>
   16eac:	e18f      	b.n	171ce <_dtoa_r+0x4be>
   16eae:	2401      	movs	r4, #1
   16eb0:	2b05      	cmp	r3, #5
   16eb2:	dd02      	ble.n	16eba <_dtoa_r+0x1aa>
   16eb4:	2400      	movs	r4, #0
   16eb6:	3b04      	subs	r3, #4
   16eb8:	9322      	str	r3, [sp, #136]	; 0x88
   16eba:	9b22      	ldr	r3, [sp, #136]	; 0x88
   16ebc:	2b03      	cmp	r3, #3
   16ebe:	d101      	bne.n	16ec4 <_dtoa_r+0x1b4>
   16ec0:	f000 fcce 	bl	17860 <_dtoa_r+0xb50>
   16ec4:	dc01      	bgt.n	16eca <_dtoa_r+0x1ba>
   16ec6:	f000 fc92 	bl	177ee <_dtoa_r+0xade>
   16eca:	9b22      	ldr	r3, [sp, #136]	; 0x88
   16ecc:	2b04      	cmp	r3, #4
   16ece:	d101      	bne.n	16ed4 <_dtoa_r+0x1c4>
   16ed0:	f000 fc40 	bl	17754 <_dtoa_r+0xa44>
   16ed4:	2301      	movs	r3, #1
   16ed6:	930b      	str	r3, [sp, #44]	; 0x2c
   16ed8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   16eda:	2b05      	cmp	r3, #5
   16edc:	d001      	beq.n	16ee2 <_dtoa_r+0x1d2>
   16ede:	f000 fc8b 	bl	177f8 <_dtoa_r+0xae8>
   16ee2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   16ee4:	9b03      	ldr	r3, [sp, #12]
   16ee6:	4694      	mov	ip, r2
   16ee8:	4463      	add	r3, ip
   16eea:	930e      	str	r3, [sp, #56]	; 0x38
   16eec:	3301      	adds	r3, #1
   16eee:	9307      	str	r3, [sp, #28]
   16ef0:	1e1d      	subs	r5, r3, #0
   16ef2:	dc01      	bgt.n	16ef8 <_dtoa_r+0x1e8>
   16ef4:	f000 fd49 	bl	1798a <_dtoa_r+0xc7a>
   16ef8:	9b07      	ldr	r3, [sp, #28]
   16efa:	4698      	mov	r8, r3
   16efc:	2300      	movs	r3, #0
   16efe:	4652      	mov	r2, sl
   16f00:	2100      	movs	r1, #0
   16f02:	6453      	str	r3, [r2, #68]	; 0x44
   16f04:	2d17      	cmp	r5, #23
   16f06:	d90a      	bls.n	16f1e <_dtoa_r+0x20e>
   16f08:	2201      	movs	r2, #1
   16f0a:	3304      	adds	r3, #4
   16f0c:	005b      	lsls	r3, r3, #1
   16f0e:	0018      	movs	r0, r3
   16f10:	3014      	adds	r0, #20
   16f12:	0011      	movs	r1, r2
   16f14:	3201      	adds	r2, #1
   16f16:	4285      	cmp	r5, r0
   16f18:	d2f8      	bcs.n	16f0c <_dtoa_r+0x1fc>
   16f1a:	4653      	mov	r3, sl
   16f1c:	6459      	str	r1, [r3, #68]	; 0x44
   16f1e:	4650      	mov	r0, sl
   16f20:	f001 fc0a 	bl	18738 <_Balloc>
   16f24:	4653      	mov	r3, sl
   16f26:	6418      	str	r0, [r3, #64]	; 0x40
   16f28:	4643      	mov	r3, r8
   16f2a:	900a      	str	r0, [sp, #40]	; 0x28
   16f2c:	2b0e      	cmp	r3, #14
   16f2e:	d900      	bls.n	16f32 <_dtoa_r+0x222>
   16f30:	e161      	b.n	171f6 <_dtoa_r+0x4e6>
   16f32:	2c00      	cmp	r4, #0
   16f34:	d100      	bne.n	16f38 <_dtoa_r+0x228>
   16f36:	e15e      	b.n	171f6 <_dtoa_r+0x4e6>
   16f38:	9610      	str	r6, [sp, #64]	; 0x40
   16f3a:	9711      	str	r7, [sp, #68]	; 0x44
   16f3c:	9e03      	ldr	r6, [sp, #12]
   16f3e:	2e00      	cmp	r6, #0
   16f40:	dc01      	bgt.n	16f46 <_dtoa_r+0x236>
   16f42:	f000 fd25 	bl	17990 <_dtoa_r+0xc80>
   16f46:	0032      	movs	r2, r6
   16f48:	210f      	movs	r1, #15
   16f4a:	4b65      	ldr	r3, [pc, #404]	; (170e0 <_dtoa_r+0x3d0>)
   16f4c:	400a      	ands	r2, r1
   16f4e:	00d2      	lsls	r2, r2, #3
   16f50:	189b      	adds	r3, r3, r2
   16f52:	1136      	asrs	r6, r6, #4
   16f54:	681c      	ldr	r4, [r3, #0]
   16f56:	685d      	ldr	r5, [r3, #4]
   16f58:	06f3      	lsls	r3, r6, #27
   16f5a:	d401      	bmi.n	16f60 <_dtoa_r+0x250>
   16f5c:	f000 fcca 	bl	178f4 <_dtoa_r+0xbe4>
   16f60:	4b60      	ldr	r3, [pc, #384]	; (170e4 <_dtoa_r+0x3d4>)
   16f62:	400e      	ands	r6, r1
   16f64:	6a1a      	ldr	r2, [r3, #32]
   16f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16f68:	9810      	ldr	r0, [sp, #64]	; 0x40
   16f6a:	9911      	ldr	r1, [sp, #68]	; 0x44
   16f6c:	f7fc f8f2 	bl	13154 <__aeabi_ddiv>
   16f70:	2303      	movs	r3, #3
   16f72:	4698      	mov	r8, r3
   16f74:	9008      	str	r0, [sp, #32]
   16f76:	9109      	str	r1, [sp, #36]	; 0x24
   16f78:	2e00      	cmp	r6, #0
   16f7a:	d011      	beq.n	16fa0 <_dtoa_r+0x290>
   16f7c:	4f59      	ldr	r7, [pc, #356]	; (170e4 <_dtoa_r+0x3d4>)
   16f7e:	2301      	movs	r3, #1
   16f80:	4233      	tst	r3, r6
   16f82:	d009      	beq.n	16f98 <_dtoa_r+0x288>
   16f84:	469c      	mov	ip, r3
   16f86:	683a      	ldr	r2, [r7, #0]
   16f88:	687b      	ldr	r3, [r7, #4]
   16f8a:	0020      	movs	r0, r4
   16f8c:	0029      	movs	r1, r5
   16f8e:	44e0      	add	r8, ip
   16f90:	f7fc fc14 	bl	137bc <__aeabi_dmul>
   16f94:	0004      	movs	r4, r0
   16f96:	000d      	movs	r5, r1
   16f98:	1076      	asrs	r6, r6, #1
   16f9a:	3708      	adds	r7, #8
   16f9c:	2e00      	cmp	r6, #0
   16f9e:	d1ee      	bne.n	16f7e <_dtoa_r+0x26e>
   16fa0:	0022      	movs	r2, r4
   16fa2:	9808      	ldr	r0, [sp, #32]
   16fa4:	9909      	ldr	r1, [sp, #36]	; 0x24
   16fa6:	002b      	movs	r3, r5
   16fa8:	f7fc f8d4 	bl	13154 <__aeabi_ddiv>
   16fac:	0006      	movs	r6, r0
   16fae:	000f      	movs	r7, r1
   16fb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16fb2:	2b00      	cmp	r3, #0
   16fb4:	d009      	beq.n	16fca <_dtoa_r+0x2ba>
   16fb6:	2200      	movs	r2, #0
   16fb8:	4b40      	ldr	r3, [pc, #256]	; (170bc <_dtoa_r+0x3ac>)
   16fba:	0030      	movs	r0, r6
   16fbc:	0039      	movs	r1, r7
   16fbe:	f7fd fb7b 	bl	146b8 <__aeabi_dcmplt>
   16fc2:	2800      	cmp	r0, #0
   16fc4:	d001      	beq.n	16fca <_dtoa_r+0x2ba>
   16fc6:	f000 fdc2 	bl	17b4e <_dtoa_r+0xe3e>
   16fca:	4640      	mov	r0, r8
   16fcc:	f7fd f9c0 	bl	14350 <__aeabi_i2d>
   16fd0:	0032      	movs	r2, r6
   16fd2:	003b      	movs	r3, r7
   16fd4:	f7fc fbf2 	bl	137bc <__aeabi_dmul>
   16fd8:	2200      	movs	r2, #0
   16fda:	4b43      	ldr	r3, [pc, #268]	; (170e8 <_dtoa_r+0x3d8>)
   16fdc:	f7fb fdaa 	bl	12b34 <__aeabi_dadd>
   16fe0:	4a42      	ldr	r2, [pc, #264]	; (170ec <_dtoa_r+0x3dc>)
   16fe2:	000b      	movs	r3, r1
   16fe4:	4694      	mov	ip, r2
   16fe6:	4463      	add	r3, ip
   16fe8:	9008      	str	r0, [sp, #32]
   16fea:	9109      	str	r1, [sp, #36]	; 0x24
   16fec:	9309      	str	r3, [sp, #36]	; 0x24
   16fee:	9b07      	ldr	r3, [sp, #28]
   16ff0:	2b00      	cmp	r3, #0
   16ff2:	d101      	bne.n	16ff8 <_dtoa_r+0x2e8>
   16ff4:	f000 fc50 	bl	17898 <_dtoa_r+0xb88>
   16ff8:	9b03      	ldr	r3, [sp, #12]
   16ffa:	9313      	str	r3, [sp, #76]	; 0x4c
   16ffc:	9b07      	ldr	r3, [sp, #28]
   16ffe:	9312      	str	r3, [sp, #72]	; 0x48
   17000:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17002:	2b00      	cmp	r3, #0
   17004:	d101      	bne.n	1700a <_dtoa_r+0x2fa>
   17006:	f000 fd1d 	bl	17a44 <_dtoa_r+0xd34>
   1700a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1700c:	2000      	movs	r0, #0
   1700e:	1e5a      	subs	r2, r3, #1
   17010:	4b33      	ldr	r3, [pc, #204]	; (170e0 <_dtoa_r+0x3d0>)
   17012:	00d2      	lsls	r2, r2, #3
   17014:	189b      	adds	r3, r3, r2
   17016:	681a      	ldr	r2, [r3, #0]
   17018:	685b      	ldr	r3, [r3, #4]
   1701a:	4935      	ldr	r1, [pc, #212]	; (170f0 <_dtoa_r+0x3e0>)
   1701c:	f7fc f89a 	bl	13154 <__aeabi_ddiv>
   17020:	9a08      	ldr	r2, [sp, #32]
   17022:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17024:	f7fc fe4a 	bl	13cbc <__aeabi_dsub>
   17028:	9008      	str	r0, [sp, #32]
   1702a:	9109      	str	r1, [sp, #36]	; 0x24
   1702c:	0039      	movs	r1, r7
   1702e:	0030      	movs	r0, r6
   17030:	f7fd f95a 	bl	142e8 <__aeabi_d2iz>
   17034:	0004      	movs	r4, r0
   17036:	f7fd f98b 	bl	14350 <__aeabi_i2d>
   1703a:	0002      	movs	r2, r0
   1703c:	000b      	movs	r3, r1
   1703e:	0030      	movs	r0, r6
   17040:	0039      	movs	r1, r7
   17042:	f7fc fe3b 	bl	13cbc <__aeabi_dsub>
   17046:	0005      	movs	r5, r0
   17048:	000e      	movs	r6, r1
   1704a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1704c:	3430      	adds	r4, #48	; 0x30
   1704e:	1c51      	adds	r1, r2, #1
   17050:	b2e7      	uxtb	r7, r4
   17052:	9114      	str	r1, [sp, #80]	; 0x50
   17054:	7017      	strb	r7, [r2, #0]
   17056:	0033      	movs	r3, r6
   17058:	9808      	ldr	r0, [sp, #32]
   1705a:	9909      	ldr	r1, [sp, #36]	; 0x24
   1705c:	002a      	movs	r2, r5
   1705e:	f7fd fb3f 	bl	146e0 <__aeabi_dcmpgt>
   17062:	2800      	cmp	r0, #0
   17064:	d001      	beq.n	1706a <_dtoa_r+0x35a>
   17066:	f000 fdfe 	bl	17c66 <_dtoa_r+0xf56>
   1706a:	002a      	movs	r2, r5
   1706c:	0033      	movs	r3, r6
   1706e:	2000      	movs	r0, #0
   17070:	4912      	ldr	r1, [pc, #72]	; (170bc <_dtoa_r+0x3ac>)
   17072:	f7fc fe23 	bl	13cbc <__aeabi_dsub>
   17076:	0002      	movs	r2, r0
   17078:	000b      	movs	r3, r1
   1707a:	9808      	ldr	r0, [sp, #32]
   1707c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1707e:	f7fd fb2f 	bl	146e0 <__aeabi_dcmpgt>
   17082:	2800      	cmp	r0, #0
   17084:	d001      	beq.n	1708a <_dtoa_r+0x37a>
   17086:	f000 fde7 	bl	17c58 <_dtoa_r+0xf48>
   1708a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1708c:	2b01      	cmp	r3, #1
   1708e:	d101      	bne.n	17094 <_dtoa_r+0x384>
   17090:	f000 fc78 	bl	17984 <_dtoa_r+0xc74>
   17094:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   17096:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17098:	4694      	mov	ip, r2
   1709a:	4463      	add	r3, ip
   1709c:	4698      	mov	r8, r3
   1709e:	464b      	mov	r3, r9
   170a0:	9312      	str	r3, [sp, #72]	; 0x48
   170a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   170a4:	4699      	mov	r9, r3
   170a6:	e038      	b.n	1711a <_dtoa_r+0x40a>
   170a8:	7ff00000 	.word	0x7ff00000
   170ac:	0001aadd 	.word	0x0001aadd
   170b0:	0000270f 	.word	0x0000270f
   170b4:	0001b090 	.word	0x0001b090
   170b8:	0001b09c 	.word	0x0001b09c
   170bc:	3ff00000 	.word	0x3ff00000
   170c0:	fffffc01 	.word	0xfffffc01
   170c4:	3ff80000 	.word	0x3ff80000
   170c8:	636f4361 	.word	0x636f4361
   170cc:	3fd287a7 	.word	0x3fd287a7
   170d0:	8b60c8b3 	.word	0x8b60c8b3
   170d4:	3fc68a28 	.word	0x3fc68a28
   170d8:	509f79fb 	.word	0x509f79fb
   170dc:	3fd34413 	.word	0x3fd34413
   170e0:	0001b0c8 	.word	0x0001b0c8
   170e4:	0001b0a0 	.word	0x0001b0a0
   170e8:	401c0000 	.word	0x401c0000
   170ec:	fcc00000 	.word	0xfcc00000
   170f0:	3fe00000 	.word	0x3fe00000
   170f4:	002a      	movs	r2, r5
   170f6:	0033      	movs	r3, r6
   170f8:	2000      	movs	r0, #0
   170fa:	49b9      	ldr	r1, [pc, #740]	; (173e0 <_dtoa_r+0x6d0>)
   170fc:	f7fc fdde 	bl	13cbc <__aeabi_dsub>
   17100:	9a08      	ldr	r2, [sp, #32]
   17102:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17104:	f7fd fad8 	bl	146b8 <__aeabi_dcmplt>
   17108:	2800      	cmp	r0, #0
   1710a:	d001      	beq.n	17110 <_dtoa_r+0x400>
   1710c:	f000 fd74 	bl	17bf8 <_dtoa_r+0xee8>
   17110:	46a1      	mov	r9, r4
   17112:	4544      	cmp	r4, r8
   17114:	d101      	bne.n	1711a <_dtoa_r+0x40a>
   17116:	f000 fc33 	bl	17980 <_dtoa_r+0xc70>
   1711a:	9808      	ldr	r0, [sp, #32]
   1711c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1711e:	2200      	movs	r2, #0
   17120:	4bb0      	ldr	r3, [pc, #704]	; (173e4 <_dtoa_r+0x6d4>)
   17122:	f7fc fb4b 	bl	137bc <__aeabi_dmul>
   17126:	2200      	movs	r2, #0
   17128:	4bae      	ldr	r3, [pc, #696]	; (173e4 <_dtoa_r+0x6d4>)
   1712a:	9008      	str	r0, [sp, #32]
   1712c:	9109      	str	r1, [sp, #36]	; 0x24
   1712e:	0028      	movs	r0, r5
   17130:	0031      	movs	r1, r6
   17132:	f7fc fb43 	bl	137bc <__aeabi_dmul>
   17136:	000d      	movs	r5, r1
   17138:	0004      	movs	r4, r0
   1713a:	f7fd f8d5 	bl	142e8 <__aeabi_d2iz>
   1713e:	0007      	movs	r7, r0
   17140:	f7fd f906 	bl	14350 <__aeabi_i2d>
   17144:	0002      	movs	r2, r0
   17146:	000b      	movs	r3, r1
   17148:	0020      	movs	r0, r4
   1714a:	0029      	movs	r1, r5
   1714c:	f7fc fdb6 	bl	13cbc <__aeabi_dsub>
   17150:	464b      	mov	r3, r9
   17152:	3730      	adds	r7, #48	; 0x30
   17154:	b2ff      	uxtb	r7, r7
   17156:	1c5c      	adds	r4, r3, #1
   17158:	701f      	strb	r7, [r3, #0]
   1715a:	9a08      	ldr	r2, [sp, #32]
   1715c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1715e:	0005      	movs	r5, r0
   17160:	000e      	movs	r6, r1
   17162:	f7fd faa9 	bl	146b8 <__aeabi_dcmplt>
   17166:	2800      	cmp	r0, #0
   17168:	d0c4      	beq.n	170f4 <_dtoa_r+0x3e4>
   1716a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1716c:	9303      	str	r3, [sp, #12]
   1716e:	4659      	mov	r1, fp
   17170:	4650      	mov	r0, sl
   17172:	f001 fb09 	bl	18788 <_Bfree>
   17176:	2300      	movs	r3, #0
   17178:	7023      	strb	r3, [r4, #0]
   1717a:	9b03      	ldr	r3, [sp, #12]
   1717c:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1717e:	3301      	adds	r3, #1
   17180:	6013      	str	r3, [r2, #0]
   17182:	9b26      	ldr	r3, [sp, #152]	; 0x98
   17184:	2b00      	cmp	r3, #0
   17186:	d100      	bne.n	1718a <_dtoa_r+0x47a>
   17188:	e3a8      	b.n	178dc <_dtoa_r+0xbcc>
   1718a:	601c      	str	r4, [r3, #0]
   1718c:	980a      	ldr	r0, [sp, #40]	; 0x28
   1718e:	e5f4      	b.n	16d7a <_dtoa_r+0x6a>
   17190:	9b16      	ldr	r3, [sp, #88]	; 0x58
   17192:	4699      	mov	r9, r3
   17194:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   17196:	444b      	add	r3, r9
   17198:	001c      	movs	r4, r3
   1719a:	4b93      	ldr	r3, [pc, #588]	; (173e8 <_dtoa_r+0x6d8>)
   1719c:	18e3      	adds	r3, r4, r3
   1719e:	2b20      	cmp	r3, #32
   171a0:	dc00      	bgt.n	171a4 <_dtoa_r+0x494>
   171a2:	e17e      	b.n	174a2 <_dtoa_r+0x792>
   171a4:	0031      	movs	r1, r6
   171a6:	4a91      	ldr	r2, [pc, #580]	; (173ec <_dtoa_r+0x6dc>)
   171a8:	4640      	mov	r0, r8
   171aa:	18a2      	adds	r2, r4, r2
   171ac:	40d1      	lsrs	r1, r2
   171ae:	000a      	movs	r2, r1
   171b0:	2140      	movs	r1, #64	; 0x40
   171b2:	1acb      	subs	r3, r1, r3
   171b4:	4098      	lsls	r0, r3
   171b6:	4310      	orrs	r0, r2
   171b8:	f7fd f90c 	bl	143d4 <__aeabi_ui2d>
   171bc:	1e63      	subs	r3, r4, #1
   171be:	4698      	mov	r8, r3
   171c0:	2301      	movs	r3, #1
   171c2:	4d8b      	ldr	r5, [pc, #556]	; (173f0 <_dtoa_r+0x6e0>)
   171c4:	930f      	str	r3, [sp, #60]	; 0x3c
   171c6:	1949      	adds	r1, r1, r5
   171c8:	e618      	b.n	16dfc <_dtoa_r+0xec>
   171ca:	488a      	ldr	r0, [pc, #552]	; (173f4 <_dtoa_r+0x6e4>)
   171cc:	e5d5      	b.n	16d7a <_dtoa_r+0x6a>
   171ce:	2300      	movs	r3, #0
   171d0:	4652      	mov	r2, sl
   171d2:	2100      	movs	r1, #0
   171d4:	6453      	str	r3, [r2, #68]	; 0x44
   171d6:	4650      	mov	r0, sl
   171d8:	f001 faae 	bl	18738 <_Balloc>
   171dc:	4653      	mov	r3, sl
   171de:	6418      	str	r0, [r3, #64]	; 0x40
   171e0:	2301      	movs	r3, #1
   171e2:	425b      	negs	r3, r3
   171e4:	9307      	str	r3, [sp, #28]
   171e6:	930e      	str	r3, [sp, #56]	; 0x38
   171e8:	3302      	adds	r3, #2
   171ea:	2200      	movs	r2, #0
   171ec:	930b      	str	r3, [sp, #44]	; 0x2c
   171ee:	2300      	movs	r3, #0
   171f0:	900a      	str	r0, [sp, #40]	; 0x28
   171f2:	9223      	str	r2, [sp, #140]	; 0x8c
   171f4:	9322      	str	r3, [sp, #136]	; 0x88
   171f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   171f8:	2b00      	cmp	r3, #0
   171fa:	da00      	bge.n	171fe <_dtoa_r+0x4ee>
   171fc:	e0ab      	b.n	17356 <_dtoa_r+0x646>
   171fe:	9a03      	ldr	r2, [sp, #12]
   17200:	2a0e      	cmp	r2, #14
   17202:	dd00      	ble.n	17206 <_dtoa_r+0x4f6>
   17204:	e0a7      	b.n	17356 <_dtoa_r+0x646>
   17206:	4b7c      	ldr	r3, [pc, #496]	; (173f8 <_dtoa_r+0x6e8>)
   17208:	00d2      	lsls	r2, r2, #3
   1720a:	189b      	adds	r3, r3, r2
   1720c:	685c      	ldr	r4, [r3, #4]
   1720e:	681b      	ldr	r3, [r3, #0]
   17210:	9304      	str	r3, [sp, #16]
   17212:	9405      	str	r4, [sp, #20]
   17214:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   17216:	2b00      	cmp	r3, #0
   17218:	da00      	bge.n	1721c <_dtoa_r+0x50c>
   1721a:	e2a7      	b.n	1776c <_dtoa_r+0xa5c>
   1721c:	9c04      	ldr	r4, [sp, #16]
   1721e:	9d05      	ldr	r5, [sp, #20]
   17220:	0030      	movs	r0, r6
   17222:	0022      	movs	r2, r4
   17224:	002b      	movs	r3, r5
   17226:	0039      	movs	r1, r7
   17228:	f7fb ff94 	bl	13154 <__aeabi_ddiv>
   1722c:	f7fd f85c 	bl	142e8 <__aeabi_d2iz>
   17230:	4680      	mov	r8, r0
   17232:	f7fd f88d 	bl	14350 <__aeabi_i2d>
   17236:	0022      	movs	r2, r4
   17238:	002b      	movs	r3, r5
   1723a:	f7fc fabf 	bl	137bc <__aeabi_dmul>
   1723e:	0002      	movs	r2, r0
   17240:	000b      	movs	r3, r1
   17242:	0030      	movs	r0, r6
   17244:	0039      	movs	r1, r7
   17246:	f7fc fd39 	bl	13cbc <__aeabi_dsub>
   1724a:	4643      	mov	r3, r8
   1724c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1724e:	3330      	adds	r3, #48	; 0x30
   17250:	7013      	strb	r3, [r2, #0]
   17252:	9b07      	ldr	r3, [sp, #28]
   17254:	0006      	movs	r6, r0
   17256:	000f      	movs	r7, r1
   17258:	1c54      	adds	r4, r2, #1
   1725a:	2b01      	cmp	r3, #1
   1725c:	d04e      	beq.n	172fc <_dtoa_r+0x5ec>
   1725e:	2200      	movs	r2, #0
   17260:	4b60      	ldr	r3, [pc, #384]	; (173e4 <_dtoa_r+0x6d4>)
   17262:	f7fc faab 	bl	137bc <__aeabi_dmul>
   17266:	2200      	movs	r2, #0
   17268:	2300      	movs	r3, #0
   1726a:	0006      	movs	r6, r0
   1726c:	000f      	movs	r7, r1
   1726e:	f7fd fa1d 	bl	146ac <__aeabi_dcmpeq>
   17272:	2800      	cmp	r0, #0
   17274:	d000      	beq.n	17278 <_dtoa_r+0x568>
   17276:	e77a      	b.n	1716e <_dtoa_r+0x45e>
   17278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1727a:	9a07      	ldr	r2, [sp, #28]
   1727c:	1c9d      	adds	r5, r3, #2
   1727e:	469c      	mov	ip, r3
   17280:	465b      	mov	r3, fp
   17282:	9306      	str	r3, [sp, #24]
   17284:	4653      	mov	r3, sl
   17286:	4462      	add	r2, ip
   17288:	46aa      	mov	sl, r5
   1728a:	9c04      	ldr	r4, [sp, #16]
   1728c:	9d05      	ldr	r5, [sp, #20]
   1728e:	4691      	mov	r9, r2
   17290:	9307      	str	r3, [sp, #28]
   17292:	e00f      	b.n	172b4 <_dtoa_r+0x5a4>
   17294:	2200      	movs	r2, #0
   17296:	4b53      	ldr	r3, [pc, #332]	; (173e4 <_dtoa_r+0x6d4>)
   17298:	f7fc fa90 	bl	137bc <__aeabi_dmul>
   1729c:	2301      	movs	r3, #1
   1729e:	469c      	mov	ip, r3
   172a0:	2200      	movs	r2, #0
   172a2:	2300      	movs	r3, #0
   172a4:	0006      	movs	r6, r0
   172a6:	000f      	movs	r7, r1
   172a8:	44e2      	add	sl, ip
   172aa:	f7fd f9ff 	bl	146ac <__aeabi_dcmpeq>
   172ae:	2800      	cmp	r0, #0
   172b0:	d000      	beq.n	172b4 <_dtoa_r+0x5a4>
   172b2:	e2d9      	b.n	17868 <_dtoa_r+0xb58>
   172b4:	0022      	movs	r2, r4
   172b6:	002b      	movs	r3, r5
   172b8:	0030      	movs	r0, r6
   172ba:	0039      	movs	r1, r7
   172bc:	f7fb ff4a 	bl	13154 <__aeabi_ddiv>
   172c0:	f7fd f812 	bl	142e8 <__aeabi_d2iz>
   172c4:	4680      	mov	r8, r0
   172c6:	f7fd f843 	bl	14350 <__aeabi_i2d>
   172ca:	0022      	movs	r2, r4
   172cc:	002b      	movs	r3, r5
   172ce:	f7fc fa75 	bl	137bc <__aeabi_dmul>
   172d2:	0002      	movs	r2, r0
   172d4:	000b      	movs	r3, r1
   172d6:	0030      	movs	r0, r6
   172d8:	0039      	movs	r1, r7
   172da:	f7fc fcef 	bl	13cbc <__aeabi_dsub>
   172de:	4653      	mov	r3, sl
   172e0:	4642      	mov	r2, r8
   172e2:	3b01      	subs	r3, #1
   172e4:	3230      	adds	r2, #48	; 0x30
   172e6:	0006      	movs	r6, r0
   172e8:	000f      	movs	r7, r1
   172ea:	46d3      	mov	fp, sl
   172ec:	701a      	strb	r2, [r3, #0]
   172ee:	45d1      	cmp	r9, sl
   172f0:	d1d0      	bne.n	17294 <_dtoa_r+0x584>
   172f2:	9b06      	ldr	r3, [sp, #24]
   172f4:	4654      	mov	r4, sl
   172f6:	469b      	mov	fp, r3
   172f8:	9b07      	ldr	r3, [sp, #28]
   172fa:	469a      	mov	sl, r3
   172fc:	0032      	movs	r2, r6
   172fe:	003b      	movs	r3, r7
   17300:	0030      	movs	r0, r6
   17302:	0039      	movs	r1, r7
   17304:	f7fb fc16 	bl	12b34 <__aeabi_dadd>
   17308:	0006      	movs	r6, r0
   1730a:	000f      	movs	r7, r1
   1730c:	0002      	movs	r2, r0
   1730e:	000b      	movs	r3, r1
   17310:	9804      	ldr	r0, [sp, #16]
   17312:	9905      	ldr	r1, [sp, #20]
   17314:	f7fd f9d0 	bl	146b8 <__aeabi_dcmplt>
   17318:	2800      	cmp	r0, #0
   1731a:	d10c      	bne.n	17336 <_dtoa_r+0x626>
   1731c:	9804      	ldr	r0, [sp, #16]
   1731e:	9905      	ldr	r1, [sp, #20]
   17320:	0032      	movs	r2, r6
   17322:	003b      	movs	r3, r7
   17324:	f7fd f9c2 	bl	146ac <__aeabi_dcmpeq>
   17328:	2800      	cmp	r0, #0
   1732a:	d100      	bne.n	1732e <_dtoa_r+0x61e>
   1732c:	e71f      	b.n	1716e <_dtoa_r+0x45e>
   1732e:	4643      	mov	r3, r8
   17330:	07db      	lsls	r3, r3, #31
   17332:	d400      	bmi.n	17336 <_dtoa_r+0x626>
   17334:	e71b      	b.n	1716e <_dtoa_r+0x45e>
   17336:	1e65      	subs	r5, r4, #1
   17338:	782f      	ldrb	r7, [r5, #0]
   1733a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1733c:	e006      	b.n	1734c <_dtoa_r+0x63c>
   1733e:	429d      	cmp	r5, r3
   17340:	d100      	bne.n	17344 <_dtoa_r+0x634>
   17342:	e351      	b.n	179e8 <_dtoa_r+0xcd8>
   17344:	3c02      	subs	r4, #2
   17346:	7827      	ldrb	r7, [r4, #0]
   17348:	002c      	movs	r4, r5
   1734a:	3d01      	subs	r5, #1
   1734c:	2f39      	cmp	r7, #57	; 0x39
   1734e:	d0f6      	beq.n	1733e <_dtoa_r+0x62e>
   17350:	3701      	adds	r7, #1
   17352:	702f      	strb	r7, [r5, #0]
   17354:	e70b      	b.n	1716e <_dtoa_r+0x45e>
   17356:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   17358:	2a00      	cmp	r2, #0
   1735a:	d04f      	beq.n	173fc <_dtoa_r+0x6ec>
   1735c:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1735e:	2a01      	cmp	r2, #1
   17360:	dc00      	bgt.n	17364 <_dtoa_r+0x654>
   17362:	e22c      	b.n	177be <_dtoa_r+0xaae>
   17364:	9b07      	ldr	r3, [sp, #28]
   17366:	1e5c      	subs	r4, r3, #1
   17368:	464b      	mov	r3, r9
   1736a:	45a1      	cmp	r9, r4
   1736c:	da00      	bge.n	17370 <_dtoa_r+0x660>
   1736e:	e2b8      	b.n	178e2 <_dtoa_r+0xbd2>
   17370:	1b1c      	subs	r4, r3, r4
   17372:	9b07      	ldr	r3, [sp, #28]
   17374:	2b00      	cmp	r3, #0
   17376:	da00      	bge.n	1737a <_dtoa_r+0x66a>
   17378:	e3d4      	b.n	17b24 <_dtoa_r+0xe14>
   1737a:	9b06      	ldr	r3, [sp, #24]
   1737c:	9308      	str	r3, [sp, #32]
   1737e:	9b07      	ldr	r3, [sp, #28]
   17380:	9a06      	ldr	r2, [sp, #24]
   17382:	2101      	movs	r1, #1
   17384:	4694      	mov	ip, r2
   17386:	449c      	add	ip, r3
   17388:	4662      	mov	r2, ip
   1738a:	9206      	str	r2, [sp, #24]
   1738c:	9a04      	ldr	r2, [sp, #16]
   1738e:	4650      	mov	r0, sl
   17390:	4694      	mov	ip, r2
   17392:	449c      	add	ip, r3
   17394:	4663      	mov	r3, ip
   17396:	9304      	str	r3, [sp, #16]
   17398:	f001 fa8e 	bl	188b8 <__i2b>
   1739c:	4680      	mov	r8, r0
   1739e:	e032      	b.n	17406 <_dtoa_r+0x6f6>
   173a0:	9a06      	ldr	r2, [sp, #24]
   173a2:	9b03      	ldr	r3, [sp, #12]
   173a4:	1ad2      	subs	r2, r2, r3
   173a6:	425b      	negs	r3, r3
   173a8:	4699      	mov	r9, r3
   173aa:	2300      	movs	r3, #0
   173ac:	9206      	str	r2, [sp, #24]
   173ae:	930d      	str	r3, [sp, #52]	; 0x34
   173b0:	e579      	b.n	16ea6 <_dtoa_r+0x196>
   173b2:	9803      	ldr	r0, [sp, #12]
   173b4:	f7fc ffcc 	bl	14350 <__aeabi_i2d>
   173b8:	000b      	movs	r3, r1
   173ba:	0002      	movs	r2, r0
   173bc:	0029      	movs	r1, r5
   173be:	0020      	movs	r0, r4
   173c0:	f7fd f974 	bl	146ac <__aeabi_dcmpeq>
   173c4:	0002      	movs	r2, r0
   173c6:	4250      	negs	r0, r2
   173c8:	4150      	adcs	r0, r2
   173ca:	9b03      	ldr	r3, [sp, #12]
   173cc:	1a1b      	subs	r3, r3, r0
   173ce:	9303      	str	r3, [sp, #12]
   173d0:	e53d      	b.n	16e4e <_dtoa_r+0x13e>
   173d2:	2301      	movs	r3, #1
   173d4:	1a9b      	subs	r3, r3, r2
   173d6:	9306      	str	r3, [sp, #24]
   173d8:	2300      	movs	r3, #0
   173da:	9304      	str	r3, [sp, #16]
   173dc:	e557      	b.n	16e8e <_dtoa_r+0x17e>
   173de:	46c0      	nop			; (mov r8, r8)
   173e0:	3ff00000 	.word	0x3ff00000
   173e4:	40240000 	.word	0x40240000
   173e8:	00000432 	.word	0x00000432
   173ec:	00000412 	.word	0x00000412
   173f0:	fe100000 	.word	0xfe100000
   173f4:	0001aadc 	.word	0x0001aadc
   173f8:	0001b0c8 	.word	0x0001b0c8
   173fc:	9b06      	ldr	r3, [sp, #24]
   173fe:	464c      	mov	r4, r9
   17400:	9308      	str	r3, [sp, #32]
   17402:	2300      	movs	r3, #0
   17404:	4698      	mov	r8, r3
   17406:	9908      	ldr	r1, [sp, #32]
   17408:	1e0b      	subs	r3, r1, #0
   1740a:	dd0e      	ble.n	1742a <_dtoa_r+0x71a>
   1740c:	9a04      	ldr	r2, [sp, #16]
   1740e:	2a00      	cmp	r2, #0
   17410:	dd0b      	ble.n	1742a <_dtoa_r+0x71a>
   17412:	4293      	cmp	r3, r2
   17414:	dd00      	ble.n	17418 <_dtoa_r+0x708>
   17416:	e187      	b.n	17728 <_dtoa_r+0xa18>
   17418:	9a06      	ldr	r2, [sp, #24]
   1741a:	1ad2      	subs	r2, r2, r3
   1741c:	9206      	str	r2, [sp, #24]
   1741e:	9a08      	ldr	r2, [sp, #32]
   17420:	1ad2      	subs	r2, r2, r3
   17422:	9208      	str	r2, [sp, #32]
   17424:	9a04      	ldr	r2, [sp, #16]
   17426:	1ad3      	subs	r3, r2, r3
   17428:	9304      	str	r3, [sp, #16]
   1742a:	464b      	mov	r3, r9
   1742c:	2b00      	cmp	r3, #0
   1742e:	d01a      	beq.n	17466 <_dtoa_r+0x756>
   17430:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17432:	2b00      	cmp	r3, #0
   17434:	d100      	bne.n	17438 <_dtoa_r+0x728>
   17436:	e1bb      	b.n	177b0 <_dtoa_r+0xaa0>
   17438:	2c00      	cmp	r4, #0
   1743a:	dd10      	ble.n	1745e <_dtoa_r+0x74e>
   1743c:	4641      	mov	r1, r8
   1743e:	0022      	movs	r2, r4
   17440:	4650      	mov	r0, sl
   17442:	f001 faed 	bl	18a20 <__pow5mult>
   17446:	465a      	mov	r2, fp
   17448:	0001      	movs	r1, r0
   1744a:	4680      	mov	r8, r0
   1744c:	4650      	mov	r0, sl
   1744e:	f001 fa3d 	bl	188cc <__multiply>
   17452:	0005      	movs	r5, r0
   17454:	4659      	mov	r1, fp
   17456:	4650      	mov	r0, sl
   17458:	f001 f996 	bl	18788 <_Bfree>
   1745c:	46ab      	mov	fp, r5
   1745e:	464b      	mov	r3, r9
   17460:	1b1a      	subs	r2, r3, r4
   17462:	d000      	beq.n	17466 <_dtoa_r+0x756>
   17464:	e1a5      	b.n	177b2 <_dtoa_r+0xaa2>
   17466:	2101      	movs	r1, #1
   17468:	4650      	mov	r0, sl
   1746a:	f001 fa25 	bl	188b8 <__i2b>
   1746e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   17470:	4681      	mov	r9, r0
   17472:	2b00      	cmp	r3, #0
   17474:	dd1d      	ble.n	174b2 <_dtoa_r+0x7a2>
   17476:	001a      	movs	r2, r3
   17478:	0001      	movs	r1, r0
   1747a:	4650      	mov	r0, sl
   1747c:	f001 fad0 	bl	18a20 <__pow5mult>
   17480:	9b22      	ldr	r3, [sp, #136]	; 0x88
   17482:	4681      	mov	r9, r0
   17484:	2b01      	cmp	r3, #1
   17486:	dc00      	bgt.n	1748a <_dtoa_r+0x77a>
   17488:	e150      	b.n	1772c <_dtoa_r+0xa1c>
   1748a:	2400      	movs	r4, #0
   1748c:	464b      	mov	r3, r9
   1748e:	691b      	ldr	r3, [r3, #16]
   17490:	3303      	adds	r3, #3
   17492:	009b      	lsls	r3, r3, #2
   17494:	444b      	add	r3, r9
   17496:	6858      	ldr	r0, [r3, #4]
   17498:	f001 f9c6 	bl	18828 <__hi0bits>
   1749c:	2320      	movs	r3, #32
   1749e:	1a1b      	subs	r3, r3, r0
   174a0:	e010      	b.n	174c4 <_dtoa_r+0x7b4>
   174a2:	2220      	movs	r2, #32
   174a4:	0030      	movs	r0, r6
   174a6:	1ad3      	subs	r3, r2, r3
   174a8:	4098      	lsls	r0, r3
   174aa:	e685      	b.n	171b8 <_dtoa_r+0x4a8>
   174ac:	2300      	movs	r3, #0
   174ae:	930c      	str	r3, [sp, #48]	; 0x30
   174b0:	e4e3      	b.n	16e7a <_dtoa_r+0x16a>
   174b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   174b4:	2400      	movs	r4, #0
   174b6:	2b01      	cmp	r3, #1
   174b8:	dc00      	bgt.n	174bc <_dtoa_r+0x7ac>
   174ba:	e18b      	b.n	177d4 <_dtoa_r+0xac4>
   174bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   174be:	2301      	movs	r3, #1
   174c0:	2a00      	cmp	r2, #0
   174c2:	d1e3      	bne.n	1748c <_dtoa_r+0x77c>
   174c4:	9904      	ldr	r1, [sp, #16]
   174c6:	201f      	movs	r0, #31
   174c8:	468c      	mov	ip, r1
   174ca:	4463      	add	r3, ip
   174cc:	4018      	ands	r0, r3
   174ce:	d100      	bne.n	174d2 <_dtoa_r+0x7c2>
   174d0:	e0ae      	b.n	17630 <_dtoa_r+0x920>
   174d2:	2320      	movs	r3, #32
   174d4:	1a1b      	subs	r3, r3, r0
   174d6:	2b04      	cmp	r3, #4
   174d8:	dc00      	bgt.n	174dc <_dtoa_r+0x7cc>
   174da:	e3cc      	b.n	17c76 <_dtoa_r+0xf66>
   174dc:	231c      	movs	r3, #28
   174de:	1a18      	subs	r0, r3, r0
   174e0:	9b06      	ldr	r3, [sp, #24]
   174e2:	469c      	mov	ip, r3
   174e4:	4484      	add	ip, r0
   174e6:	4663      	mov	r3, ip
   174e8:	9306      	str	r3, [sp, #24]
   174ea:	9b08      	ldr	r3, [sp, #32]
   174ec:	469c      	mov	ip, r3
   174ee:	4484      	add	ip, r0
   174f0:	4663      	mov	r3, ip
   174f2:	468c      	mov	ip, r1
   174f4:	4484      	add	ip, r0
   174f6:	9308      	str	r3, [sp, #32]
   174f8:	4663      	mov	r3, ip
   174fa:	9304      	str	r3, [sp, #16]
   174fc:	9b06      	ldr	r3, [sp, #24]
   174fe:	2b00      	cmp	r3, #0
   17500:	dd05      	ble.n	1750e <_dtoa_r+0x7fe>
   17502:	4659      	mov	r1, fp
   17504:	001a      	movs	r2, r3
   17506:	4650      	mov	r0, sl
   17508:	f001 faea 	bl	18ae0 <__lshift>
   1750c:	4683      	mov	fp, r0
   1750e:	9b04      	ldr	r3, [sp, #16]
   17510:	2b00      	cmp	r3, #0
   17512:	dd05      	ble.n	17520 <_dtoa_r+0x810>
   17514:	4649      	mov	r1, r9
   17516:	001a      	movs	r2, r3
   17518:	4650      	mov	r0, sl
   1751a:	f001 fae1 	bl	18ae0 <__lshift>
   1751e:	4681      	mov	r9, r0
   17520:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   17522:	2b00      	cmp	r3, #0
   17524:	d000      	beq.n	17528 <_dtoa_r+0x818>
   17526:	e094      	b.n	17652 <_dtoa_r+0x942>
   17528:	9b07      	ldr	r3, [sp, #28]
   1752a:	2b00      	cmp	r3, #0
   1752c:	dc00      	bgt.n	17530 <_dtoa_r+0x820>
   1752e:	e175      	b.n	1781c <_dtoa_r+0xb0c>
   17530:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17532:	2b00      	cmp	r3, #0
   17534:	d100      	bne.n	17538 <_dtoa_r+0x828>
   17536:	e0a6      	b.n	17686 <_dtoa_r+0x976>
   17538:	9b08      	ldr	r3, [sp, #32]
   1753a:	2b00      	cmp	r3, #0
   1753c:	dd05      	ble.n	1754a <_dtoa_r+0x83a>
   1753e:	4641      	mov	r1, r8
   17540:	001a      	movs	r2, r3
   17542:	4650      	mov	r0, sl
   17544:	f001 facc 	bl	18ae0 <__lshift>
   17548:	4680      	mov	r8, r0
   1754a:	4643      	mov	r3, r8
   1754c:	930c      	str	r3, [sp, #48]	; 0x30
   1754e:	2c00      	cmp	r4, #0
   17550:	d000      	beq.n	17554 <_dtoa_r+0x844>
   17552:	e250      	b.n	179f6 <_dtoa_r+0xce6>
   17554:	9c07      	ldr	r4, [sp, #28]
   17556:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   17558:	3c01      	subs	r4, #1
   1755a:	0023      	movs	r3, r4
   1755c:	4694      	mov	ip, r2
   1755e:	4463      	add	r3, ip
   17560:	9308      	str	r3, [sp, #32]
   17562:	2301      	movs	r3, #1
   17564:	4033      	ands	r3, r6
   17566:	9307      	str	r3, [sp, #28]
   17568:	464b      	mov	r3, r9
   1756a:	9306      	str	r3, [sp, #24]
   1756c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1756e:	4657      	mov	r7, sl
   17570:	4645      	mov	r5, r8
   17572:	465e      	mov	r6, fp
   17574:	4692      	mov	sl, r2
   17576:	4698      	mov	r8, r3
   17578:	9b06      	ldr	r3, [sp, #24]
   1757a:	0030      	movs	r0, r6
   1757c:	0019      	movs	r1, r3
   1757e:	4699      	mov	r9, r3
   17580:	f7ff fb1c 	bl	16bbc <quorem>
   17584:	0003      	movs	r3, r0
   17586:	900b      	str	r0, [sp, #44]	; 0x2c
   17588:	3330      	adds	r3, #48	; 0x30
   1758a:	0029      	movs	r1, r5
   1758c:	0030      	movs	r0, r6
   1758e:	9304      	str	r3, [sp, #16]
   17590:	f001 fb06 	bl	18ba0 <__mcmp>
   17594:	4649      	mov	r1, r9
   17596:	0004      	movs	r4, r0
   17598:	4642      	mov	r2, r8
   1759a:	0038      	movs	r0, r7
   1759c:	f001 fb1a 	bl	18bd4 <__mdiff>
   175a0:	68c3      	ldr	r3, [r0, #12]
   175a2:	4681      	mov	r9, r0
   175a4:	2b00      	cmp	r3, #0
   175a6:	d000      	beq.n	175aa <_dtoa_r+0x89a>
   175a8:	e11e      	b.n	177e8 <_dtoa_r+0xad8>
   175aa:	0001      	movs	r1, r0
   175ac:	0030      	movs	r0, r6
   175ae:	f001 faf7 	bl	18ba0 <__mcmp>
   175b2:	4683      	mov	fp, r0
   175b4:	4649      	mov	r1, r9
   175b6:	0038      	movs	r0, r7
   175b8:	f001 f8e6 	bl	18788 <_Bfree>
   175bc:	465b      	mov	r3, fp
   175be:	9a22      	ldr	r2, [sp, #136]	; 0x88
   175c0:	4313      	orrs	r3, r2
   175c2:	d103      	bne.n	175cc <_dtoa_r+0x8bc>
   175c4:	9b07      	ldr	r3, [sp, #28]
   175c6:	2b00      	cmp	r3, #0
   175c8:	d100      	bne.n	175cc <_dtoa_r+0x8bc>
   175ca:	e306      	b.n	17bda <_dtoa_r+0xeca>
   175cc:	2c00      	cmp	r4, #0
   175ce:	da00      	bge.n	175d2 <_dtoa_r+0x8c2>
   175d0:	e1a8      	b.n	17924 <_dtoa_r+0xc14>
   175d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   175d4:	431c      	orrs	r4, r3
   175d6:	d103      	bne.n	175e0 <_dtoa_r+0x8d0>
   175d8:	9b07      	ldr	r3, [sp, #28]
   175da:	2b00      	cmp	r3, #0
   175dc:	d100      	bne.n	175e0 <_dtoa_r+0x8d0>
   175de:	e1a1      	b.n	17924 <_dtoa_r+0xc14>
   175e0:	465b      	mov	r3, fp
   175e2:	2b00      	cmp	r3, #0
   175e4:	dd00      	ble.n	175e8 <_dtoa_r+0x8d8>
   175e6:	e282      	b.n	17aee <_dtoa_r+0xdde>
   175e8:	4669      	mov	r1, sp
   175ea:	4652      	mov	r2, sl
   175ec:	4653      	mov	r3, sl
   175ee:	7c09      	ldrb	r1, [r1, #16]
   175f0:	1c5c      	adds	r4, r3, #1
   175f2:	7011      	strb	r1, [r2, #0]
   175f4:	9a08      	ldr	r2, [sp, #32]
   175f6:	4552      	cmp	r2, sl
   175f8:	d100      	bne.n	175fc <_dtoa_r+0x8ec>
   175fa:	e28a      	b.n	17b12 <_dtoa_r+0xe02>
   175fc:	0031      	movs	r1, r6
   175fe:	2300      	movs	r3, #0
   17600:	220a      	movs	r2, #10
   17602:	0038      	movs	r0, r7
   17604:	f001 f8ca 	bl	1879c <__multadd>
   17608:	2300      	movs	r3, #0
   1760a:	0006      	movs	r6, r0
   1760c:	220a      	movs	r2, #10
   1760e:	0029      	movs	r1, r5
   17610:	0038      	movs	r0, r7
   17612:	4545      	cmp	r5, r8
   17614:	d100      	bne.n	17618 <_dtoa_r+0x908>
   17616:	e0e1      	b.n	177dc <_dtoa_r+0xacc>
   17618:	f001 f8c0 	bl	1879c <__multadd>
   1761c:	4641      	mov	r1, r8
   1761e:	0005      	movs	r5, r0
   17620:	2300      	movs	r3, #0
   17622:	220a      	movs	r2, #10
   17624:	0038      	movs	r0, r7
   17626:	f001 f8b9 	bl	1879c <__multadd>
   1762a:	46a2      	mov	sl, r4
   1762c:	4680      	mov	r8, r0
   1762e:	e7a3      	b.n	17578 <_dtoa_r+0x868>
   17630:	201c      	movs	r0, #28
   17632:	9b06      	ldr	r3, [sp, #24]
   17634:	469c      	mov	ip, r3
   17636:	4484      	add	ip, r0
   17638:	4663      	mov	r3, ip
   1763a:	9306      	str	r3, [sp, #24]
   1763c:	9b08      	ldr	r3, [sp, #32]
   1763e:	469c      	mov	ip, r3
   17640:	4484      	add	ip, r0
   17642:	4663      	mov	r3, ip
   17644:	9308      	str	r3, [sp, #32]
   17646:	9b04      	ldr	r3, [sp, #16]
   17648:	469c      	mov	ip, r3
   1764a:	4484      	add	ip, r0
   1764c:	4663      	mov	r3, ip
   1764e:	9304      	str	r3, [sp, #16]
   17650:	e754      	b.n	174fc <_dtoa_r+0x7ec>
   17652:	4649      	mov	r1, r9
   17654:	4658      	mov	r0, fp
   17656:	f001 faa3 	bl	18ba0 <__mcmp>
   1765a:	2800      	cmp	r0, #0
   1765c:	db00      	blt.n	17660 <_dtoa_r+0x950>
   1765e:	e763      	b.n	17528 <_dtoa_r+0x818>
   17660:	9b03      	ldr	r3, [sp, #12]
   17662:	4659      	mov	r1, fp
   17664:	3b01      	subs	r3, #1
   17666:	9303      	str	r3, [sp, #12]
   17668:	220a      	movs	r2, #10
   1766a:	2300      	movs	r3, #0
   1766c:	4650      	mov	r0, sl
   1766e:	f001 f895 	bl	1879c <__multadd>
   17672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17674:	4683      	mov	fp, r0
   17676:	2b00      	cmp	r3, #0
   17678:	d000      	beq.n	1767c <_dtoa_r+0x96c>
   1767a:	e2ca      	b.n	17c12 <_dtoa_r+0xf02>
   1767c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1767e:	2b00      	cmp	r3, #0
   17680:	dc00      	bgt.n	17684 <_dtoa_r+0x974>
   17682:	e2d8      	b.n	17c36 <_dtoa_r+0xf26>
   17684:	9307      	str	r3, [sp, #28]
   17686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17688:	465d      	mov	r5, fp
   1768a:	2400      	movs	r4, #0
   1768c:	9f07      	ldr	r7, [sp, #28]
   1768e:	469b      	mov	fp, r3
   17690:	e006      	b.n	176a0 <_dtoa_r+0x990>
   17692:	0029      	movs	r1, r5
   17694:	2300      	movs	r3, #0
   17696:	220a      	movs	r2, #10
   17698:	4650      	mov	r0, sl
   1769a:	f001 f87f 	bl	1879c <__multadd>
   1769e:	0005      	movs	r5, r0
   176a0:	4649      	mov	r1, r9
   176a2:	0028      	movs	r0, r5
   176a4:	f7ff fa8a 	bl	16bbc <quorem>
   176a8:	465b      	mov	r3, fp
   176aa:	3030      	adds	r0, #48	; 0x30
   176ac:	5518      	strb	r0, [r3, r4]
   176ae:	3401      	adds	r4, #1
   176b0:	42bc      	cmp	r4, r7
   176b2:	dbee      	blt.n	17692 <_dtoa_r+0x982>
   176b4:	46ab      	mov	fp, r5
   176b6:	0006      	movs	r6, r0
   176b8:	9c07      	ldr	r4, [sp, #28]
   176ba:	2c00      	cmp	r4, #0
   176bc:	dc00      	bgt.n	176c0 <_dtoa_r+0x9b0>
   176be:	e237      	b.n	17b30 <_dtoa_r+0xe20>
   176c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   176c2:	2700      	movs	r7, #0
   176c4:	469c      	mov	ip, r3
   176c6:	4464      	add	r4, ip
   176c8:	4659      	mov	r1, fp
   176ca:	2201      	movs	r2, #1
   176cc:	4650      	mov	r0, sl
   176ce:	f001 fa07 	bl	18ae0 <__lshift>
   176d2:	4649      	mov	r1, r9
   176d4:	4683      	mov	fp, r0
   176d6:	f001 fa63 	bl	18ba0 <__mcmp>
   176da:	2800      	cmp	r0, #0
   176dc:	dc00      	bgt.n	176e0 <_dtoa_r+0x9d0>
   176de:	e144      	b.n	1796a <_dtoa_r+0xc5a>
   176e0:	1e65      	subs	r5, r4, #1
   176e2:	782b      	ldrb	r3, [r5, #0]
   176e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   176e6:	e006      	b.n	176f6 <_dtoa_r+0x9e6>
   176e8:	4295      	cmp	r5, r2
   176ea:	d100      	bne.n	176ee <_dtoa_r+0x9de>
   176ec:	e0b1      	b.n	17852 <_dtoa_r+0xb42>
   176ee:	3c02      	subs	r4, #2
   176f0:	7823      	ldrb	r3, [r4, #0]
   176f2:	002c      	movs	r4, r5
   176f4:	3d01      	subs	r5, #1
   176f6:	2b39      	cmp	r3, #57	; 0x39
   176f8:	d0f6      	beq.n	176e8 <_dtoa_r+0x9d8>
   176fa:	3301      	adds	r3, #1
   176fc:	702b      	strb	r3, [r5, #0]
   176fe:	4649      	mov	r1, r9
   17700:	4650      	mov	r0, sl
   17702:	f001 f841 	bl	18788 <_Bfree>
   17706:	4643      	mov	r3, r8
   17708:	2b00      	cmp	r3, #0
   1770a:	d100      	bne.n	1770e <_dtoa_r+0x9fe>
   1770c:	e52f      	b.n	1716e <_dtoa_r+0x45e>
   1770e:	2f00      	cmp	r7, #0
   17710:	d005      	beq.n	1771e <_dtoa_r+0xa0e>
   17712:	4547      	cmp	r7, r8
   17714:	d003      	beq.n	1771e <_dtoa_r+0xa0e>
   17716:	0039      	movs	r1, r7
   17718:	4650      	mov	r0, sl
   1771a:	f001 f835 	bl	18788 <_Bfree>
   1771e:	4641      	mov	r1, r8
   17720:	4650      	mov	r0, sl
   17722:	f001 f831 	bl	18788 <_Bfree>
   17726:	e522      	b.n	1716e <_dtoa_r+0x45e>
   17728:	0013      	movs	r3, r2
   1772a:	e675      	b.n	17418 <_dtoa_r+0x708>
   1772c:	2e00      	cmp	r6, #0
   1772e:	d000      	beq.n	17732 <_dtoa_r+0xa22>
   17730:	e6ab      	b.n	1748a <_dtoa_r+0x77a>
   17732:	033b      	lsls	r3, r7, #12
   17734:	2400      	movs	r4, #0
   17736:	2b00      	cmp	r3, #0
   17738:	d000      	beq.n	1773c <_dtoa_r+0xa2c>
   1773a:	e6bf      	b.n	174bc <_dtoa_r+0x7ac>
   1773c:	4bba      	ldr	r3, [pc, #744]	; (17a28 <_dtoa_r+0xd18>)
   1773e:	423b      	tst	r3, r7
   17740:	d100      	bne.n	17744 <_dtoa_r+0xa34>
   17742:	e6bb      	b.n	174bc <_dtoa_r+0x7ac>
   17744:	9b06      	ldr	r3, [sp, #24]
   17746:	3401      	adds	r4, #1
   17748:	3301      	adds	r3, #1
   1774a:	9306      	str	r3, [sp, #24]
   1774c:	9b04      	ldr	r3, [sp, #16]
   1774e:	3301      	adds	r3, #1
   17750:	9304      	str	r3, [sp, #16]
   17752:	e6b3      	b.n	174bc <_dtoa_r+0x7ac>
   17754:	2301      	movs	r3, #1
   17756:	930b      	str	r3, [sp, #44]	; 0x2c
   17758:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1775a:	2b00      	cmp	r3, #0
   1775c:	dc00      	bgt.n	17760 <_dtoa_r+0xa50>
   1775e:	e0d1      	b.n	17904 <_dtoa_r+0xbf4>
   17760:	001d      	movs	r5, r3
   17762:	4698      	mov	r8, r3
   17764:	930e      	str	r3, [sp, #56]	; 0x38
   17766:	9307      	str	r3, [sp, #28]
   17768:	f7ff fbc8 	bl	16efc <_dtoa_r+0x1ec>
   1776c:	9b07      	ldr	r3, [sp, #28]
   1776e:	2b00      	cmp	r3, #0
   17770:	dd00      	ble.n	17774 <_dtoa_r+0xa64>
   17772:	e553      	b.n	1721c <_dtoa_r+0x50c>
   17774:	d000      	beq.n	17778 <_dtoa_r+0xa68>
   17776:	e0ad      	b.n	178d4 <_dtoa_r+0xbc4>
   17778:	9804      	ldr	r0, [sp, #16]
   1777a:	9905      	ldr	r1, [sp, #20]
   1777c:	2200      	movs	r2, #0
   1777e:	4bab      	ldr	r3, [pc, #684]	; (17a2c <_dtoa_r+0xd1c>)
   17780:	f7fc f81c 	bl	137bc <__aeabi_dmul>
   17784:	003b      	movs	r3, r7
   17786:	0032      	movs	r2, r6
   17788:	f7fc ffb4 	bl	146f4 <__aeabi_dcmpge>
   1778c:	2300      	movs	r3, #0
   1778e:	4699      	mov	r9, r3
   17790:	4698      	mov	r8, r3
   17792:	2800      	cmp	r0, #0
   17794:	d055      	beq.n	17842 <_dtoa_r+0xb32>
   17796:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   17798:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1779a:	43db      	mvns	r3, r3
   1779c:	9303      	str	r3, [sp, #12]
   1779e:	4649      	mov	r1, r9
   177a0:	4650      	mov	r0, sl
   177a2:	f000 fff1 	bl	18788 <_Bfree>
   177a6:	4643      	mov	r3, r8
   177a8:	2b00      	cmp	r3, #0
   177aa:	d100      	bne.n	177ae <_dtoa_r+0xa9e>
   177ac:	e4df      	b.n	1716e <_dtoa_r+0x45e>
   177ae:	e7b6      	b.n	1771e <_dtoa_r+0xa0e>
   177b0:	464a      	mov	r2, r9
   177b2:	4659      	mov	r1, fp
   177b4:	4650      	mov	r0, sl
   177b6:	f001 f933 	bl	18a20 <__pow5mult>
   177ba:	4683      	mov	fp, r0
   177bc:	e653      	b.n	17466 <_dtoa_r+0x756>
   177be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   177c0:	2a00      	cmp	r2, #0
   177c2:	d100      	bne.n	177c6 <_dtoa_r+0xab6>
   177c4:	e1b6      	b.n	17b34 <_dtoa_r+0xe24>
   177c6:	4a9a      	ldr	r2, [pc, #616]	; (17a30 <_dtoa_r+0xd20>)
   177c8:	464c      	mov	r4, r9
   177ca:	4694      	mov	ip, r2
   177cc:	9a06      	ldr	r2, [sp, #24]
   177ce:	4463      	add	r3, ip
   177d0:	9208      	str	r2, [sp, #32]
   177d2:	e5d5      	b.n	17380 <_dtoa_r+0x670>
   177d4:	2e00      	cmp	r6, #0
   177d6:	d000      	beq.n	177da <_dtoa_r+0xaca>
   177d8:	e670      	b.n	174bc <_dtoa_r+0x7ac>
   177da:	e7aa      	b.n	17732 <_dtoa_r+0xa22>
   177dc:	f000 ffde 	bl	1879c <__multadd>
   177e0:	46a2      	mov	sl, r4
   177e2:	0005      	movs	r5, r0
   177e4:	4680      	mov	r8, r0
   177e6:	e6c7      	b.n	17578 <_dtoa_r+0x868>
   177e8:	2301      	movs	r3, #1
   177ea:	469b      	mov	fp, r3
   177ec:	e6e2      	b.n	175b4 <_dtoa_r+0x8a4>
   177ee:	2300      	movs	r3, #0
   177f0:	930b      	str	r3, [sp, #44]	; 0x2c
   177f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   177f4:	2b02      	cmp	r3, #2
   177f6:	d0af      	beq.n	17758 <_dtoa_r+0xa48>
   177f8:	2400      	movs	r4, #0
   177fa:	4653      	mov	r3, sl
   177fc:	0021      	movs	r1, r4
   177fe:	645c      	str	r4, [r3, #68]	; 0x44
   17800:	4650      	mov	r0, sl
   17802:	f000 ff99 	bl	18738 <_Balloc>
   17806:	4653      	mov	r3, sl
   17808:	6418      	str	r0, [r3, #64]	; 0x40
   1780a:	2301      	movs	r3, #1
   1780c:	425b      	negs	r3, r3
   1780e:	9307      	str	r3, [sp, #28]
   17810:	930e      	str	r3, [sp, #56]	; 0x38
   17812:	3302      	adds	r3, #2
   17814:	900a      	str	r0, [sp, #40]	; 0x28
   17816:	9423      	str	r4, [sp, #140]	; 0x8c
   17818:	930b      	str	r3, [sp, #44]	; 0x2c
   1781a:	e4ec      	b.n	171f6 <_dtoa_r+0x4e6>
   1781c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1781e:	2b02      	cmp	r3, #2
   17820:	dc00      	bgt.n	17824 <_dtoa_r+0xb14>
   17822:	e685      	b.n	17530 <_dtoa_r+0x820>
   17824:	9b07      	ldr	r3, [sp, #28]
   17826:	2b00      	cmp	r3, #0
   17828:	d1b5      	bne.n	17796 <_dtoa_r+0xa86>
   1782a:	4649      	mov	r1, r9
   1782c:	2205      	movs	r2, #5
   1782e:	4650      	mov	r0, sl
   17830:	f000 ffb4 	bl	1879c <__multadd>
   17834:	4681      	mov	r9, r0
   17836:	0001      	movs	r1, r0
   17838:	4658      	mov	r0, fp
   1783a:	f001 f9b1 	bl	18ba0 <__mcmp>
   1783e:	2800      	cmp	r0, #0
   17840:	dda9      	ble.n	17796 <_dtoa_r+0xa86>
   17842:	2331      	movs	r3, #49	; 0x31
   17844:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   17846:	7013      	strb	r3, [r2, #0]
   17848:	9b03      	ldr	r3, [sp, #12]
   1784a:	1c54      	adds	r4, r2, #1
   1784c:	3301      	adds	r3, #1
   1784e:	9303      	str	r3, [sp, #12]
   17850:	e7a5      	b.n	1779e <_dtoa_r+0xa8e>
   17852:	9b03      	ldr	r3, [sp, #12]
   17854:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   17856:	3301      	adds	r3, #1
   17858:	9303      	str	r3, [sp, #12]
   1785a:	2331      	movs	r3, #49	; 0x31
   1785c:	7013      	strb	r3, [r2, #0]
   1785e:	e74e      	b.n	176fe <_dtoa_r+0x9ee>
   17860:	2300      	movs	r3, #0
   17862:	930b      	str	r3, [sp, #44]	; 0x2c
   17864:	f7ff fb3d 	bl	16ee2 <_dtoa_r+0x1d2>
   17868:	9b06      	ldr	r3, [sp, #24]
   1786a:	465c      	mov	r4, fp
   1786c:	469b      	mov	fp, r3
   1786e:	9b07      	ldr	r3, [sp, #28]
   17870:	469a      	mov	sl, r3
   17872:	e47c      	b.n	1716e <_dtoa_r+0x45e>
   17874:	4640      	mov	r0, r8
   17876:	f7fc fd6b 	bl	14350 <__aeabi_i2d>
   1787a:	0032      	movs	r2, r6
   1787c:	003b      	movs	r3, r7
   1787e:	f7fb ff9d 	bl	137bc <__aeabi_dmul>
   17882:	2200      	movs	r2, #0
   17884:	4b6b      	ldr	r3, [pc, #428]	; (17a34 <_dtoa_r+0xd24>)
   17886:	f7fb f955 	bl	12b34 <__aeabi_dadd>
   1788a:	4a6b      	ldr	r2, [pc, #428]	; (17a38 <_dtoa_r+0xd28>)
   1788c:	000b      	movs	r3, r1
   1788e:	4694      	mov	ip, r2
   17890:	4463      	add	r3, ip
   17892:	9008      	str	r0, [sp, #32]
   17894:	9109      	str	r1, [sp, #36]	; 0x24
   17896:	9309      	str	r3, [sp, #36]	; 0x24
   17898:	2200      	movs	r2, #0
   1789a:	4b64      	ldr	r3, [pc, #400]	; (17a2c <_dtoa_r+0xd1c>)
   1789c:	0030      	movs	r0, r6
   1789e:	0039      	movs	r1, r7
   178a0:	f7fc fa0c 	bl	13cbc <__aeabi_dsub>
   178a4:	9e08      	ldr	r6, [sp, #32]
   178a6:	9f09      	ldr	r7, [sp, #36]	; 0x24
   178a8:	0032      	movs	r2, r6
   178aa:	003b      	movs	r3, r7
   178ac:	0004      	movs	r4, r0
   178ae:	000d      	movs	r5, r1
   178b0:	f7fc ff16 	bl	146e0 <__aeabi_dcmpgt>
   178b4:	2800      	cmp	r0, #0
   178b6:	d000      	beq.n	178ba <_dtoa_r+0xbaa>
   178b8:	e0b2      	b.n	17a20 <_dtoa_r+0xd10>
   178ba:	2080      	movs	r0, #128	; 0x80
   178bc:	0600      	lsls	r0, r0, #24
   178be:	4684      	mov	ip, r0
   178c0:	0039      	movs	r1, r7
   178c2:	4461      	add	r1, ip
   178c4:	000b      	movs	r3, r1
   178c6:	0032      	movs	r2, r6
   178c8:	0020      	movs	r0, r4
   178ca:	0029      	movs	r1, r5
   178cc:	f7fc fef4 	bl	146b8 <__aeabi_dcmplt>
   178d0:	2800      	cmp	r0, #0
   178d2:	d057      	beq.n	17984 <_dtoa_r+0xc74>
   178d4:	2300      	movs	r3, #0
   178d6:	4699      	mov	r9, r3
   178d8:	4698      	mov	r8, r3
   178da:	e75c      	b.n	17796 <_dtoa_r+0xa86>
   178dc:	980a      	ldr	r0, [sp, #40]	; 0x28
   178de:	f7ff fa4c 	bl	16d7a <_dtoa_r+0x6a>
   178e2:	1ae2      	subs	r2, r4, r3
   178e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   178e6:	46a1      	mov	r9, r4
   178e8:	469c      	mov	ip, r3
   178ea:	4494      	add	ip, r2
   178ec:	4663      	mov	r3, ip
   178ee:	2400      	movs	r4, #0
   178f0:	930d      	str	r3, [sp, #52]	; 0x34
   178f2:	e53e      	b.n	17372 <_dtoa_r+0x662>
   178f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
   178f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   178f8:	9208      	str	r2, [sp, #32]
   178fa:	9309      	str	r3, [sp, #36]	; 0x24
   178fc:	2302      	movs	r3, #2
   178fe:	4698      	mov	r8, r3
   17900:	f7ff fb3a 	bl	16f78 <_dtoa_r+0x268>
   17904:	2300      	movs	r3, #0
   17906:	4652      	mov	r2, sl
   17908:	2100      	movs	r1, #0
   1790a:	6453      	str	r3, [r2, #68]	; 0x44
   1790c:	4650      	mov	r0, sl
   1790e:	f000 ff13 	bl	18738 <_Balloc>
   17912:	4653      	mov	r3, sl
   17914:	6418      	str	r0, [r3, #64]	; 0x40
   17916:	2301      	movs	r3, #1
   17918:	900a      	str	r0, [sp, #40]	; 0x28
   1791a:	9307      	str	r3, [sp, #28]
   1791c:	9323      	str	r3, [sp, #140]	; 0x8c
   1791e:	930e      	str	r3, [sp, #56]	; 0x38
   17920:	f7ff fb07 	bl	16f32 <_dtoa_r+0x222>
   17924:	4643      	mov	r3, r8
   17926:	930c      	str	r3, [sp, #48]	; 0x30
   17928:	465b      	mov	r3, fp
   1792a:	9a06      	ldr	r2, [sp, #24]
   1792c:	46a8      	mov	r8, r5
   1792e:	46b3      	mov	fp, r6
   17930:	4655      	mov	r5, sl
   17932:	9e04      	ldr	r6, [sp, #16]
   17934:	4691      	mov	r9, r2
   17936:	46ba      	mov	sl, r7
   17938:	2b00      	cmp	r3, #0
   1793a:	dd10      	ble.n	1795e <_dtoa_r+0xc4e>
   1793c:	4659      	mov	r1, fp
   1793e:	2201      	movs	r2, #1
   17940:	0038      	movs	r0, r7
   17942:	f001 f8cd 	bl	18ae0 <__lshift>
   17946:	4649      	mov	r1, r9
   17948:	4683      	mov	fp, r0
   1794a:	f001 f929 	bl	18ba0 <__mcmp>
   1794e:	2800      	cmp	r0, #0
   17950:	dc00      	bgt.n	17954 <_dtoa_r+0xc44>
   17952:	e157      	b.n	17c04 <_dtoa_r+0xef4>
   17954:	2e39      	cmp	r6, #57	; 0x39
   17956:	d100      	bne.n	1795a <_dtoa_r+0xc4a>
   17958:	e122      	b.n	17ba0 <_dtoa_r+0xe90>
   1795a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1795c:	3631      	adds	r6, #49	; 0x31
   1795e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   17960:	4647      	mov	r7, r8
   17962:	1c6c      	adds	r4, r5, #1
   17964:	702e      	strb	r6, [r5, #0]
   17966:	4698      	mov	r8, r3
   17968:	e6c9      	b.n	176fe <_dtoa_r+0x9ee>
   1796a:	2800      	cmp	r0, #0
   1796c:	d103      	bne.n	17976 <_dtoa_r+0xc66>
   1796e:	07f3      	lsls	r3, r6, #31
   17970:	d501      	bpl.n	17976 <_dtoa_r+0xc66>
   17972:	e6b5      	b.n	176e0 <_dtoa_r+0x9d0>
   17974:	001c      	movs	r4, r3
   17976:	1e63      	subs	r3, r4, #1
   17978:	781a      	ldrb	r2, [r3, #0]
   1797a:	2a30      	cmp	r2, #48	; 0x30
   1797c:	d0fa      	beq.n	17974 <_dtoa_r+0xc64>
   1797e:	e6be      	b.n	176fe <_dtoa_r+0x9ee>
   17980:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17982:	4699      	mov	r9, r3
   17984:	9e10      	ldr	r6, [sp, #64]	; 0x40
   17986:	9f11      	ldr	r7, [sp, #68]	; 0x44
   17988:	e435      	b.n	171f6 <_dtoa_r+0x4e6>
   1798a:	2501      	movs	r5, #1
   1798c:	f7ff fab4 	bl	16ef8 <_dtoa_r+0x1e8>
   17990:	9b03      	ldr	r3, [sp, #12]
   17992:	2b00      	cmp	r3, #0
   17994:	d100      	bne.n	17998 <_dtoa_r+0xc88>
   17996:	e0d4      	b.n	17b42 <_dtoa_r+0xe32>
   17998:	9810      	ldr	r0, [sp, #64]	; 0x40
   1799a:	9911      	ldr	r1, [sp, #68]	; 0x44
   1799c:	425c      	negs	r4, r3
   1799e:	230f      	movs	r3, #15
   179a0:	4a26      	ldr	r2, [pc, #152]	; (17a3c <_dtoa_r+0xd2c>)
   179a2:	4023      	ands	r3, r4
   179a4:	00db      	lsls	r3, r3, #3
   179a6:	18d3      	adds	r3, r2, r3
   179a8:	681a      	ldr	r2, [r3, #0]
   179aa:	685b      	ldr	r3, [r3, #4]
   179ac:	f7fb ff06 	bl	137bc <__aeabi_dmul>
   179b0:	1124      	asrs	r4, r4, #4
   179b2:	0006      	movs	r6, r0
   179b4:	000f      	movs	r7, r1
   179b6:	2c00      	cmp	r4, #0
   179b8:	d100      	bne.n	179bc <_dtoa_r+0xcac>
   179ba:	e149      	b.n	17c50 <_dtoa_r+0xf40>
   179bc:	2302      	movs	r3, #2
   179be:	4698      	mov	r8, r3
   179c0:	4d1f      	ldr	r5, [pc, #124]	; (17a40 <_dtoa_r+0xd30>)
   179c2:	2301      	movs	r3, #1
   179c4:	4223      	tst	r3, r4
   179c6:	d009      	beq.n	179dc <_dtoa_r+0xccc>
   179c8:	469c      	mov	ip, r3
   179ca:	682a      	ldr	r2, [r5, #0]
   179cc:	686b      	ldr	r3, [r5, #4]
   179ce:	0030      	movs	r0, r6
   179d0:	0039      	movs	r1, r7
   179d2:	44e0      	add	r8, ip
   179d4:	f7fb fef2 	bl	137bc <__aeabi_dmul>
   179d8:	0006      	movs	r6, r0
   179da:	000f      	movs	r7, r1
   179dc:	1064      	asrs	r4, r4, #1
   179de:	3508      	adds	r5, #8
   179e0:	2c00      	cmp	r4, #0
   179e2:	d1ee      	bne.n	179c2 <_dtoa_r+0xcb2>
   179e4:	f7ff fae4 	bl	16fb0 <_dtoa_r+0x2a0>
   179e8:	9b03      	ldr	r3, [sp, #12]
   179ea:	2730      	movs	r7, #48	; 0x30
   179ec:	3301      	adds	r3, #1
   179ee:	9303      	str	r3, [sp, #12]
   179f0:	2330      	movs	r3, #48	; 0x30
   179f2:	702b      	strb	r3, [r5, #0]
   179f4:	e4ac      	b.n	17350 <_dtoa_r+0x640>
   179f6:	6859      	ldr	r1, [r3, #4]
   179f8:	4650      	mov	r0, sl
   179fa:	f000 fe9d 	bl	18738 <_Balloc>
   179fe:	4643      	mov	r3, r8
   17a00:	4641      	mov	r1, r8
   17a02:	0004      	movs	r4, r0
   17a04:	691b      	ldr	r3, [r3, #16]
   17a06:	310c      	adds	r1, #12
   17a08:	1c9a      	adds	r2, r3, #2
   17a0a:	0092      	lsls	r2, r2, #2
   17a0c:	300c      	adds	r0, #12
   17a0e:	f7fd fa5d 	bl	14ecc <memcpy>
   17a12:	2201      	movs	r2, #1
   17a14:	0021      	movs	r1, r4
   17a16:	4650      	mov	r0, sl
   17a18:	f001 f862 	bl	18ae0 <__lshift>
   17a1c:	900c      	str	r0, [sp, #48]	; 0x30
   17a1e:	e599      	b.n	17554 <_dtoa_r+0x844>
   17a20:	2300      	movs	r3, #0
   17a22:	4699      	mov	r9, r3
   17a24:	4698      	mov	r8, r3
   17a26:	e70c      	b.n	17842 <_dtoa_r+0xb32>
   17a28:	7ff00000 	.word	0x7ff00000
   17a2c:	40140000 	.word	0x40140000
   17a30:	00000433 	.word	0x00000433
   17a34:	401c0000 	.word	0x401c0000
   17a38:	fcc00000 	.word	0xfcc00000
   17a3c:	0001b0c8 	.word	0x0001b0c8
   17a40:	0001b0a0 	.word	0x0001b0a0
   17a44:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17a46:	498f      	ldr	r1, [pc, #572]	; (17c84 <_dtoa_r+0xf74>)
   17a48:	3b01      	subs	r3, #1
   17a4a:	00db      	lsls	r3, r3, #3
   17a4c:	18c9      	adds	r1, r1, r3
   17a4e:	6808      	ldr	r0, [r1, #0]
   17a50:	6849      	ldr	r1, [r1, #4]
   17a52:	9a08      	ldr	r2, [sp, #32]
   17a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17a56:	f7fb feb1 	bl	137bc <__aeabi_dmul>
   17a5a:	9014      	str	r0, [sp, #80]	; 0x50
   17a5c:	9115      	str	r1, [sp, #84]	; 0x54
   17a5e:	0039      	movs	r1, r7
   17a60:	0030      	movs	r0, r6
   17a62:	f7fc fc41 	bl	142e8 <__aeabi_d2iz>
   17a66:	0005      	movs	r5, r0
   17a68:	f7fc fc72 	bl	14350 <__aeabi_i2d>
   17a6c:	0002      	movs	r2, r0
   17a6e:	000b      	movs	r3, r1
   17a70:	0030      	movs	r0, r6
   17a72:	0039      	movs	r1, r7
   17a74:	f7fc f922 	bl	13cbc <__aeabi_dsub>
   17a78:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17a7a:	9008      	str	r0, [sp, #32]
   17a7c:	9109      	str	r1, [sp, #36]	; 0x24
   17a7e:	990a      	ldr	r1, [sp, #40]	; 0x28
   17a80:	001a      	movs	r2, r3
   17a82:	468c      	mov	ip, r1
   17a84:	3530      	adds	r5, #48	; 0x30
   17a86:	4462      	add	r2, ip
   17a88:	1c4c      	adds	r4, r1, #1
   17a8a:	700d      	strb	r5, [r1, #0]
   17a8c:	4690      	mov	r8, r2
   17a8e:	2b01      	cmp	r3, #1
   17a90:	d01b      	beq.n	17aca <_dtoa_r+0xdba>
   17a92:	9808      	ldr	r0, [sp, #32]
   17a94:	9909      	ldr	r1, [sp, #36]	; 0x24
   17a96:	0025      	movs	r5, r4
   17a98:	2200      	movs	r2, #0
   17a9a:	4b7b      	ldr	r3, [pc, #492]	; (17c88 <_dtoa_r+0xf78>)
   17a9c:	f7fb fe8e 	bl	137bc <__aeabi_dmul>
   17aa0:	000f      	movs	r7, r1
   17aa2:	0006      	movs	r6, r0
   17aa4:	f7fc fc20 	bl	142e8 <__aeabi_d2iz>
   17aa8:	0004      	movs	r4, r0
   17aaa:	f7fc fc51 	bl	14350 <__aeabi_i2d>
   17aae:	3430      	adds	r4, #48	; 0x30
   17ab0:	0002      	movs	r2, r0
   17ab2:	000b      	movs	r3, r1
   17ab4:	0030      	movs	r0, r6
   17ab6:	0039      	movs	r1, r7
   17ab8:	f7fc f900 	bl	13cbc <__aeabi_dsub>
   17abc:	702c      	strb	r4, [r5, #0]
   17abe:	3501      	adds	r5, #1
   17ac0:	45a8      	cmp	r8, r5
   17ac2:	d1e9      	bne.n	17a98 <_dtoa_r+0xd88>
   17ac4:	4644      	mov	r4, r8
   17ac6:	9008      	str	r0, [sp, #32]
   17ac8:	9109      	str	r1, [sp, #36]	; 0x24
   17aca:	9814      	ldr	r0, [sp, #80]	; 0x50
   17acc:	9915      	ldr	r1, [sp, #84]	; 0x54
   17ace:	2200      	movs	r2, #0
   17ad0:	4b6e      	ldr	r3, [pc, #440]	; (17c8c <_dtoa_r+0xf7c>)
   17ad2:	f7fb f82f 	bl	12b34 <__aeabi_dadd>
   17ad6:	9a08      	ldr	r2, [sp, #32]
   17ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17ada:	f7fc fded 	bl	146b8 <__aeabi_dcmplt>
   17ade:	2800      	cmp	r0, #0
   17ae0:	d067      	beq.n	17bb2 <_dtoa_r+0xea2>
   17ae2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   17ae4:	1e65      	subs	r5, r4, #1
   17ae6:	9303      	str	r3, [sp, #12]
   17ae8:	782f      	ldrb	r7, [r5, #0]
   17aea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17aec:	e42e      	b.n	1734c <_dtoa_r+0x63c>
   17aee:	4643      	mov	r3, r8
   17af0:	46b3      	mov	fp, r6
   17af2:	930c      	str	r3, [sp, #48]	; 0x30
   17af4:	9e04      	ldr	r6, [sp, #16]
   17af6:	9b06      	ldr	r3, [sp, #24]
   17af8:	46a8      	mov	r8, r5
   17afa:	4699      	mov	r9, r3
   17afc:	4655      	mov	r5, sl
   17afe:	46ba      	mov	sl, r7
   17b00:	2e39      	cmp	r6, #57	; 0x39
   17b02:	d04d      	beq.n	17ba0 <_dtoa_r+0xe90>
   17b04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   17b06:	3601      	adds	r6, #1
   17b08:	4647      	mov	r7, r8
   17b0a:	1c6c      	adds	r4, r5, #1
   17b0c:	702e      	strb	r6, [r5, #0]
   17b0e:	4698      	mov	r8, r3
   17b10:	e5f5      	b.n	176fe <_dtoa_r+0x9ee>
   17b12:	4642      	mov	r2, r8
   17b14:	9b06      	ldr	r3, [sp, #24]
   17b16:	46b3      	mov	fp, r6
   17b18:	46ba      	mov	sl, r7
   17b1a:	9e04      	ldr	r6, [sp, #16]
   17b1c:	4699      	mov	r9, r3
   17b1e:	002f      	movs	r7, r5
   17b20:	4690      	mov	r8, r2
   17b22:	e5d1      	b.n	176c8 <_dtoa_r+0x9b8>
   17b24:	9b06      	ldr	r3, [sp, #24]
   17b26:	9a07      	ldr	r2, [sp, #28]
   17b28:	1a9b      	subs	r3, r3, r2
   17b2a:	9308      	str	r3, [sp, #32]
   17b2c:	2300      	movs	r3, #0
   17b2e:	e427      	b.n	17380 <_dtoa_r+0x670>
   17b30:	2401      	movs	r4, #1
   17b32:	e5c5      	b.n	176c0 <_dtoa_r+0x9b0>
   17b34:	2336      	movs	r3, #54	; 0x36
   17b36:	9a16      	ldr	r2, [sp, #88]	; 0x58
   17b38:	464c      	mov	r4, r9
   17b3a:	1a9b      	subs	r3, r3, r2
   17b3c:	9a06      	ldr	r2, [sp, #24]
   17b3e:	9208      	str	r2, [sp, #32]
   17b40:	e41e      	b.n	17380 <_dtoa_r+0x670>
   17b42:	2302      	movs	r3, #2
   17b44:	9e10      	ldr	r6, [sp, #64]	; 0x40
   17b46:	9f11      	ldr	r7, [sp, #68]	; 0x44
   17b48:	4698      	mov	r8, r3
   17b4a:	f7ff fa31 	bl	16fb0 <_dtoa_r+0x2a0>
   17b4e:	9b07      	ldr	r3, [sp, #28]
   17b50:	2b00      	cmp	r3, #0
   17b52:	d100      	bne.n	17b56 <_dtoa_r+0xe46>
   17b54:	e68e      	b.n	17874 <_dtoa_r+0xb64>
   17b56:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   17b58:	2c00      	cmp	r4, #0
   17b5a:	dc00      	bgt.n	17b5e <_dtoa_r+0xe4e>
   17b5c:	e712      	b.n	17984 <_dtoa_r+0xc74>
   17b5e:	9b03      	ldr	r3, [sp, #12]
   17b60:	2200      	movs	r2, #0
   17b62:	3b01      	subs	r3, #1
   17b64:	9313      	str	r3, [sp, #76]	; 0x4c
   17b66:	0030      	movs	r0, r6
   17b68:	4b47      	ldr	r3, [pc, #284]	; (17c88 <_dtoa_r+0xf78>)
   17b6a:	0039      	movs	r1, r7
   17b6c:	f7fb fe26 	bl	137bc <__aeabi_dmul>
   17b70:	0006      	movs	r6, r0
   17b72:	4640      	mov	r0, r8
   17b74:	000f      	movs	r7, r1
   17b76:	3001      	adds	r0, #1
   17b78:	f7fc fbea 	bl	14350 <__aeabi_i2d>
   17b7c:	0032      	movs	r2, r6
   17b7e:	003b      	movs	r3, r7
   17b80:	f7fb fe1c 	bl	137bc <__aeabi_dmul>
   17b84:	2200      	movs	r2, #0
   17b86:	4b42      	ldr	r3, [pc, #264]	; (17c90 <_dtoa_r+0xf80>)
   17b88:	f7fa ffd4 	bl	12b34 <__aeabi_dadd>
   17b8c:	4a41      	ldr	r2, [pc, #260]	; (17c94 <_dtoa_r+0xf84>)
   17b8e:	000b      	movs	r3, r1
   17b90:	4694      	mov	ip, r2
   17b92:	4463      	add	r3, ip
   17b94:	9008      	str	r0, [sp, #32]
   17b96:	9109      	str	r1, [sp, #36]	; 0x24
   17b98:	9412      	str	r4, [sp, #72]	; 0x48
   17b9a:	9309      	str	r3, [sp, #36]	; 0x24
   17b9c:	f7ff fa30 	bl	17000 <_dtoa_r+0x2f0>
   17ba0:	2339      	movs	r3, #57	; 0x39
   17ba2:	702b      	strb	r3, [r5, #0]
   17ba4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   17ba6:	4647      	mov	r7, r8
   17ba8:	1c6c      	adds	r4, r5, #1
   17baa:	4698      	mov	r8, r3
   17bac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   17bae:	2339      	movs	r3, #57	; 0x39
   17bb0:	e5a1      	b.n	176f6 <_dtoa_r+0x9e6>
   17bb2:	9a14      	ldr	r2, [sp, #80]	; 0x50
   17bb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   17bb6:	2000      	movs	r0, #0
   17bb8:	4934      	ldr	r1, [pc, #208]	; (17c8c <_dtoa_r+0xf7c>)
   17bba:	f7fc f87f 	bl	13cbc <__aeabi_dsub>
   17bbe:	9a08      	ldr	r2, [sp, #32]
   17bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17bc2:	f7fc fd8d 	bl	146e0 <__aeabi_dcmpgt>
   17bc6:	2800      	cmp	r0, #0
   17bc8:	d101      	bne.n	17bce <_dtoa_r+0xebe>
   17bca:	e6db      	b.n	17984 <_dtoa_r+0xc74>
   17bcc:	001c      	movs	r4, r3
   17bce:	1e63      	subs	r3, r4, #1
   17bd0:	781a      	ldrb	r2, [r3, #0]
   17bd2:	2a30      	cmp	r2, #48	; 0x30
   17bd4:	d0fa      	beq.n	17bcc <_dtoa_r+0xebc>
   17bd6:	f7ff fac8 	bl	1716a <_dtoa_r+0x45a>
   17bda:	4643      	mov	r3, r8
   17bdc:	46b3      	mov	fp, r6
   17bde:	930c      	str	r3, [sp, #48]	; 0x30
   17be0:	9e04      	ldr	r6, [sp, #16]
   17be2:	9b06      	ldr	r3, [sp, #24]
   17be4:	46a8      	mov	r8, r5
   17be6:	4699      	mov	r9, r3
   17be8:	4655      	mov	r5, sl
   17bea:	46ba      	mov	sl, r7
   17bec:	2e39      	cmp	r6, #57	; 0x39
   17bee:	d0d7      	beq.n	17ba0 <_dtoa_r+0xe90>
   17bf0:	2c00      	cmp	r4, #0
   17bf2:	dd00      	ble.n	17bf6 <_dtoa_r+0xee6>
   17bf4:	e6b1      	b.n	1795a <_dtoa_r+0xc4a>
   17bf6:	e6b2      	b.n	1795e <_dtoa_r+0xc4e>
   17bf8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   17bfa:	464d      	mov	r5, r9
   17bfc:	9203      	str	r2, [sp, #12]
   17bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17c00:	f7ff fba4 	bl	1734c <_dtoa_r+0x63c>
   17c04:	2800      	cmp	r0, #0
   17c06:	d000      	beq.n	17c0a <_dtoa_r+0xefa>
   17c08:	e6a9      	b.n	1795e <_dtoa_r+0xc4e>
   17c0a:	07f3      	lsls	r3, r6, #31
   17c0c:	d400      	bmi.n	17c10 <_dtoa_r+0xf00>
   17c0e:	e6a6      	b.n	1795e <_dtoa_r+0xc4e>
   17c10:	e6a0      	b.n	17954 <_dtoa_r+0xc44>
   17c12:	2300      	movs	r3, #0
   17c14:	4641      	mov	r1, r8
   17c16:	220a      	movs	r2, #10
   17c18:	4650      	mov	r0, sl
   17c1a:	f000 fdbf 	bl	1879c <__multadd>
   17c1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   17c20:	4680      	mov	r8, r0
   17c22:	2b00      	cmp	r3, #0
   17c24:	dd01      	ble.n	17c2a <_dtoa_r+0xf1a>
   17c26:	9307      	str	r3, [sp, #28]
   17c28:	e486      	b.n	17538 <_dtoa_r+0x828>
   17c2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   17c2c:	2b02      	cmp	r3, #2
   17c2e:	dc1f      	bgt.n	17c70 <_dtoa_r+0xf60>
   17c30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   17c32:	9307      	str	r3, [sp, #28]
   17c34:	e480      	b.n	17538 <_dtoa_r+0x828>
   17c36:	9b22      	ldr	r3, [sp, #136]	; 0x88
   17c38:	2b02      	cmp	r3, #2
   17c3a:	dc19      	bgt.n	17c70 <_dtoa_r+0xf60>
   17c3c:	4649      	mov	r1, r9
   17c3e:	f7fe ffbd 	bl	16bbc <quorem>
   17c42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17c44:	3030      	adds	r0, #48	; 0x30
   17c46:	7018      	strb	r0, [r3, #0]
   17c48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   17c4a:	0006      	movs	r6, r0
   17c4c:	9307      	str	r3, [sp, #28]
   17c4e:	e533      	b.n	176b8 <_dtoa_r+0x9a8>
   17c50:	2302      	movs	r3, #2
   17c52:	4698      	mov	r8, r3
   17c54:	f7ff f9ac 	bl	16fb0 <_dtoa_r+0x2a0>
   17c58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   17c5a:	9c14      	ldr	r4, [sp, #80]	; 0x50
   17c5c:	9303      	str	r3, [sp, #12]
   17c5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17c60:	001d      	movs	r5, r3
   17c62:	f7ff fb73 	bl	1734c <_dtoa_r+0x63c>
   17c66:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   17c68:	9c14      	ldr	r4, [sp, #80]	; 0x50
   17c6a:	9303      	str	r3, [sp, #12]
   17c6c:	f7ff fa7f 	bl	1716e <_dtoa_r+0x45e>
   17c70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   17c72:	9307      	str	r3, [sp, #28]
   17c74:	e5d6      	b.n	17824 <_dtoa_r+0xb14>
   17c76:	2b04      	cmp	r3, #4
   17c78:	d100      	bne.n	17c7c <_dtoa_r+0xf6c>
   17c7a:	e43f      	b.n	174fc <_dtoa_r+0x7ec>
   17c7c:	233c      	movs	r3, #60	; 0x3c
   17c7e:	1a18      	subs	r0, r3, r0
   17c80:	e4d7      	b.n	17632 <_dtoa_r+0x922>
   17c82:	46c0      	nop			; (mov r8, r8)
   17c84:	0001b0c8 	.word	0x0001b0c8
   17c88:	40240000 	.word	0x40240000
   17c8c:	3fe00000 	.word	0x3fe00000
   17c90:	401c0000 	.word	0x401c0000
   17c94:	fcc00000 	.word	0xfcc00000

00017c98 <__sflush_r>:
   17c98:	b5f0      	push	{r4, r5, r6, r7, lr}
   17c9a:	46c6      	mov	lr, r8
   17c9c:	b500      	push	{lr}
   17c9e:	230c      	movs	r3, #12
   17ca0:	5eca      	ldrsh	r2, [r1, r3]
   17ca2:	4680      	mov	r8, r0
   17ca4:	b293      	uxth	r3, r2
   17ca6:	000c      	movs	r4, r1
   17ca8:	0719      	lsls	r1, r3, #28
   17caa:	d440      	bmi.n	17d2e <__sflush_r+0x96>
   17cac:	2380      	movs	r3, #128	; 0x80
   17cae:	011b      	lsls	r3, r3, #4
   17cb0:	4313      	orrs	r3, r2
   17cb2:	6862      	ldr	r2, [r4, #4]
   17cb4:	81a3      	strh	r3, [r4, #12]
   17cb6:	2a00      	cmp	r2, #0
   17cb8:	dc00      	bgt.n	17cbc <__sflush_r+0x24>
   17cba:	e070      	b.n	17d9e <__sflush_r+0x106>
   17cbc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   17cbe:	2e00      	cmp	r6, #0
   17cc0:	d031      	beq.n	17d26 <__sflush_r+0x8e>
   17cc2:	4642      	mov	r2, r8
   17cc4:	4641      	mov	r1, r8
   17cc6:	6815      	ldr	r5, [r2, #0]
   17cc8:	2200      	movs	r2, #0
   17cca:	b29b      	uxth	r3, r3
   17ccc:	600a      	str	r2, [r1, #0]
   17cce:	04da      	lsls	r2, r3, #19
   17cd0:	d400      	bmi.n	17cd4 <__sflush_r+0x3c>
   17cd2:	e069      	b.n	17da8 <__sflush_r+0x110>
   17cd4:	6d22      	ldr	r2, [r4, #80]	; 0x50
   17cd6:	075b      	lsls	r3, r3, #29
   17cd8:	d506      	bpl.n	17ce8 <__sflush_r+0x50>
   17cda:	6863      	ldr	r3, [r4, #4]
   17cdc:	1ad2      	subs	r2, r2, r3
   17cde:	6b23      	ldr	r3, [r4, #48]	; 0x30
   17ce0:	2b00      	cmp	r3, #0
   17ce2:	d001      	beq.n	17ce8 <__sflush_r+0x50>
   17ce4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   17ce6:	1ad2      	subs	r2, r2, r3
   17ce8:	2300      	movs	r3, #0
   17cea:	69e1      	ldr	r1, [r4, #28]
   17cec:	4640      	mov	r0, r8
   17cee:	47b0      	blx	r6
   17cf0:	1c43      	adds	r3, r0, #1
   17cf2:	d03d      	beq.n	17d70 <__sflush_r+0xd8>
   17cf4:	89a3      	ldrh	r3, [r4, #12]
   17cf6:	4a3a      	ldr	r2, [pc, #232]	; (17de0 <__sflush_r+0x148>)
   17cf8:	4013      	ands	r3, r2
   17cfa:	2200      	movs	r2, #0
   17cfc:	6062      	str	r2, [r4, #4]
   17cfe:	6922      	ldr	r2, [r4, #16]
   17d00:	b21b      	sxth	r3, r3
   17d02:	81a3      	strh	r3, [r4, #12]
   17d04:	6022      	str	r2, [r4, #0]
   17d06:	04db      	lsls	r3, r3, #19
   17d08:	d447      	bmi.n	17d9a <__sflush_r+0x102>
   17d0a:	4643      	mov	r3, r8
   17d0c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   17d0e:	601d      	str	r5, [r3, #0]
   17d10:	2900      	cmp	r1, #0
   17d12:	d008      	beq.n	17d26 <__sflush_r+0x8e>
   17d14:	0023      	movs	r3, r4
   17d16:	3340      	adds	r3, #64	; 0x40
   17d18:	4299      	cmp	r1, r3
   17d1a:	d002      	beq.n	17d22 <__sflush_r+0x8a>
   17d1c:	4640      	mov	r0, r8
   17d1e:	f000 f967 	bl	17ff0 <_free_r>
   17d22:	2300      	movs	r3, #0
   17d24:	6323      	str	r3, [r4, #48]	; 0x30
   17d26:	2000      	movs	r0, #0
   17d28:	bc04      	pop	{r2}
   17d2a:	4690      	mov	r8, r2
   17d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17d2e:	6926      	ldr	r6, [r4, #16]
   17d30:	2e00      	cmp	r6, #0
   17d32:	d0f8      	beq.n	17d26 <__sflush_r+0x8e>
   17d34:	6822      	ldr	r2, [r4, #0]
   17d36:	6026      	str	r6, [r4, #0]
   17d38:	1b95      	subs	r5, r2, r6
   17d3a:	2200      	movs	r2, #0
   17d3c:	079b      	lsls	r3, r3, #30
   17d3e:	d100      	bne.n	17d42 <__sflush_r+0xaa>
   17d40:	6962      	ldr	r2, [r4, #20]
   17d42:	60a2      	str	r2, [r4, #8]
   17d44:	2d00      	cmp	r5, #0
   17d46:	dc04      	bgt.n	17d52 <__sflush_r+0xba>
   17d48:	e7ed      	b.n	17d26 <__sflush_r+0x8e>
   17d4a:	1836      	adds	r6, r6, r0
   17d4c:	1a2d      	subs	r5, r5, r0
   17d4e:	2d00      	cmp	r5, #0
   17d50:	dde9      	ble.n	17d26 <__sflush_r+0x8e>
   17d52:	002b      	movs	r3, r5
   17d54:	0032      	movs	r2, r6
   17d56:	69e1      	ldr	r1, [r4, #28]
   17d58:	4640      	mov	r0, r8
   17d5a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   17d5c:	47b8      	blx	r7
   17d5e:	2800      	cmp	r0, #0
   17d60:	dcf3      	bgt.n	17d4a <__sflush_r+0xb2>
   17d62:	2240      	movs	r2, #64	; 0x40
   17d64:	2001      	movs	r0, #1
   17d66:	89a3      	ldrh	r3, [r4, #12]
   17d68:	4240      	negs	r0, r0
   17d6a:	4313      	orrs	r3, r2
   17d6c:	81a3      	strh	r3, [r4, #12]
   17d6e:	e7db      	b.n	17d28 <__sflush_r+0x90>
   17d70:	4643      	mov	r3, r8
   17d72:	6819      	ldr	r1, [r3, #0]
   17d74:	291d      	cmp	r1, #29
   17d76:	d8f4      	bhi.n	17d62 <__sflush_r+0xca>
   17d78:	4b1a      	ldr	r3, [pc, #104]	; (17de4 <__sflush_r+0x14c>)
   17d7a:	2201      	movs	r2, #1
   17d7c:	40cb      	lsrs	r3, r1
   17d7e:	439a      	bics	r2, r3
   17d80:	d1ef      	bne.n	17d62 <__sflush_r+0xca>
   17d82:	89a3      	ldrh	r3, [r4, #12]
   17d84:	4e16      	ldr	r6, [pc, #88]	; (17de0 <__sflush_r+0x148>)
   17d86:	6062      	str	r2, [r4, #4]
   17d88:	4033      	ands	r3, r6
   17d8a:	6922      	ldr	r2, [r4, #16]
   17d8c:	b21b      	sxth	r3, r3
   17d8e:	81a3      	strh	r3, [r4, #12]
   17d90:	6022      	str	r2, [r4, #0]
   17d92:	04db      	lsls	r3, r3, #19
   17d94:	d5b9      	bpl.n	17d0a <__sflush_r+0x72>
   17d96:	2900      	cmp	r1, #0
   17d98:	d1b7      	bne.n	17d0a <__sflush_r+0x72>
   17d9a:	6520      	str	r0, [r4, #80]	; 0x50
   17d9c:	e7b5      	b.n	17d0a <__sflush_r+0x72>
   17d9e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   17da0:	2a00      	cmp	r2, #0
   17da2:	dd00      	ble.n	17da6 <__sflush_r+0x10e>
   17da4:	e78a      	b.n	17cbc <__sflush_r+0x24>
   17da6:	e7be      	b.n	17d26 <__sflush_r+0x8e>
   17da8:	2200      	movs	r2, #0
   17daa:	2301      	movs	r3, #1
   17dac:	69e1      	ldr	r1, [r4, #28]
   17dae:	4640      	mov	r0, r8
   17db0:	47b0      	blx	r6
   17db2:	0002      	movs	r2, r0
   17db4:	1c43      	adds	r3, r0, #1
   17db6:	d002      	beq.n	17dbe <__sflush_r+0x126>
   17db8:	89a3      	ldrh	r3, [r4, #12]
   17dba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   17dbc:	e78b      	b.n	17cd6 <__sflush_r+0x3e>
   17dbe:	4643      	mov	r3, r8
   17dc0:	681b      	ldr	r3, [r3, #0]
   17dc2:	2b00      	cmp	r3, #0
   17dc4:	d0f8      	beq.n	17db8 <__sflush_r+0x120>
   17dc6:	2b1d      	cmp	r3, #29
   17dc8:	d001      	beq.n	17dce <__sflush_r+0x136>
   17dca:	2b16      	cmp	r3, #22
   17dcc:	d103      	bne.n	17dd6 <__sflush_r+0x13e>
   17dce:	4643      	mov	r3, r8
   17dd0:	2000      	movs	r0, #0
   17dd2:	601d      	str	r5, [r3, #0]
   17dd4:	e7a8      	b.n	17d28 <__sflush_r+0x90>
   17dd6:	2140      	movs	r1, #64	; 0x40
   17dd8:	89a3      	ldrh	r3, [r4, #12]
   17dda:	430b      	orrs	r3, r1
   17ddc:	81a3      	strh	r3, [r4, #12]
   17dde:	e7a3      	b.n	17d28 <__sflush_r+0x90>
   17de0:	fffff7ff 	.word	0xfffff7ff
   17de4:	20400001 	.word	0x20400001

00017de8 <_fflush_r>:
   17de8:	b570      	push	{r4, r5, r6, lr}
   17dea:	0005      	movs	r5, r0
   17dec:	000c      	movs	r4, r1
   17dee:	2800      	cmp	r0, #0
   17df0:	d002      	beq.n	17df8 <_fflush_r+0x10>
   17df2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   17df4:	2b00      	cmp	r3, #0
   17df6:	d016      	beq.n	17e26 <_fflush_r+0x3e>
   17df8:	220c      	movs	r2, #12
   17dfa:	5ea3      	ldrsh	r3, [r4, r2]
   17dfc:	2600      	movs	r6, #0
   17dfe:	2b00      	cmp	r3, #0
   17e00:	d00f      	beq.n	17e22 <_fflush_r+0x3a>
   17e02:	6e62      	ldr	r2, [r4, #100]	; 0x64
   17e04:	07d2      	lsls	r2, r2, #31
   17e06:	d401      	bmi.n	17e0c <_fflush_r+0x24>
   17e08:	059b      	lsls	r3, r3, #22
   17e0a:	d513      	bpl.n	17e34 <_fflush_r+0x4c>
   17e0c:	0021      	movs	r1, r4
   17e0e:	0028      	movs	r0, r5
   17e10:	f7ff ff42 	bl	17c98 <__sflush_r>
   17e14:	6e63      	ldr	r3, [r4, #100]	; 0x64
   17e16:	0006      	movs	r6, r0
   17e18:	07db      	lsls	r3, r3, #31
   17e1a:	d402      	bmi.n	17e22 <_fflush_r+0x3a>
   17e1c:	89a3      	ldrh	r3, [r4, #12]
   17e1e:	059b      	lsls	r3, r3, #22
   17e20:	d504      	bpl.n	17e2c <_fflush_r+0x44>
   17e22:	0030      	movs	r0, r6
   17e24:	bd70      	pop	{r4, r5, r6, pc}
   17e26:	f000 f839 	bl	17e9c <__sinit>
   17e2a:	e7e5      	b.n	17df8 <_fflush_r+0x10>
   17e2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   17e2e:	f000 fb79 	bl	18524 <__retarget_lock_release_recursive>
   17e32:	e7f6      	b.n	17e22 <_fflush_r+0x3a>
   17e34:	6da0      	ldr	r0, [r4, #88]	; 0x58
   17e36:	f000 fb73 	bl	18520 <__retarget_lock_acquire_recursive>
   17e3a:	e7e7      	b.n	17e0c <_fflush_r+0x24>

00017e3c <_cleanup_r>:
   17e3c:	b510      	push	{r4, lr}
   17e3e:	4902      	ldr	r1, [pc, #8]	; (17e48 <_cleanup_r+0xc>)
   17e40:	f000 fb36 	bl	184b0 <_fwalk_reent>
   17e44:	bd10      	pop	{r4, pc}
   17e46:	46c0      	nop			; (mov r8, r8)
   17e48:	00019411 	.word	0x00019411

00017e4c <std.isra.0>:
   17e4c:	2300      	movs	r3, #0
   17e4e:	b510      	push	{r4, lr}
   17e50:	0004      	movs	r4, r0
   17e52:	6003      	str	r3, [r0, #0]
   17e54:	6043      	str	r3, [r0, #4]
   17e56:	6083      	str	r3, [r0, #8]
   17e58:	8181      	strh	r1, [r0, #12]
   17e5a:	6643      	str	r3, [r0, #100]	; 0x64
   17e5c:	81c2      	strh	r2, [r0, #14]
   17e5e:	6103      	str	r3, [r0, #16]
   17e60:	6143      	str	r3, [r0, #20]
   17e62:	6183      	str	r3, [r0, #24]
   17e64:	2208      	movs	r2, #8
   17e66:	2100      	movs	r1, #0
   17e68:	305c      	adds	r0, #92	; 0x5c
   17e6a:	f7fd f871 	bl	14f50 <memset>
   17e6e:	0020      	movs	r0, r4
   17e70:	4b06      	ldr	r3, [pc, #24]	; (17e8c <std.isra.0+0x40>)
   17e72:	61e4      	str	r4, [r4, #28]
   17e74:	6223      	str	r3, [r4, #32]
   17e76:	4b06      	ldr	r3, [pc, #24]	; (17e90 <std.isra.0+0x44>)
   17e78:	3058      	adds	r0, #88	; 0x58
   17e7a:	6263      	str	r3, [r4, #36]	; 0x24
   17e7c:	4b05      	ldr	r3, [pc, #20]	; (17e94 <std.isra.0+0x48>)
   17e7e:	62a3      	str	r3, [r4, #40]	; 0x28
   17e80:	4b05      	ldr	r3, [pc, #20]	; (17e98 <std.isra.0+0x4c>)
   17e82:	62e3      	str	r3, [r4, #44]	; 0x2c
   17e84:	f000 fb48 	bl	18518 <__retarget_lock_init_recursive>
   17e88:	bd10      	pop	{r4, pc}
   17e8a:	46c0      	nop			; (mov r8, r8)
   17e8c:	00019145 	.word	0x00019145
   17e90:	0001916d 	.word	0x0001916d
   17e94:	000191a9 	.word	0x000191a9
   17e98:	000191d5 	.word	0x000191d5

00017e9c <__sinit>:
   17e9c:	b570      	push	{r4, r5, r6, lr}
   17e9e:	0004      	movs	r4, r0
   17ea0:	4d14      	ldr	r5, [pc, #80]	; (17ef4 <__sinit+0x58>)
   17ea2:	0028      	movs	r0, r5
   17ea4:	f000 fb3c 	bl	18520 <__retarget_lock_acquire_recursive>
   17ea8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   17eaa:	2b00      	cmp	r3, #0
   17eac:	d11d      	bne.n	17eea <__sinit+0x4e>
   17eae:	4a12      	ldr	r2, [pc, #72]	; (17ef8 <__sinit+0x5c>)
   17eb0:	2104      	movs	r1, #4
   17eb2:	63e2      	str	r2, [r4, #60]	; 0x3c
   17eb4:	22b8      	movs	r2, #184	; 0xb8
   17eb6:	0092      	lsls	r2, r2, #2
   17eb8:	50a3      	str	r3, [r4, r2]
   17eba:	23b9      	movs	r3, #185	; 0xb9
   17ebc:	2203      	movs	r2, #3
   17ebe:	009b      	lsls	r3, r3, #2
   17ec0:	50e2      	str	r2, [r4, r3]
   17ec2:	3308      	adds	r3, #8
   17ec4:	18e2      	adds	r2, r4, r3
   17ec6:	3b04      	subs	r3, #4
   17ec8:	50e2      	str	r2, [r4, r3]
   17eca:	6860      	ldr	r0, [r4, #4]
   17ecc:	2200      	movs	r2, #0
   17ece:	f7ff ffbd 	bl	17e4c <std.isra.0>
   17ed2:	2201      	movs	r2, #1
   17ed4:	2109      	movs	r1, #9
   17ed6:	68a0      	ldr	r0, [r4, #8]
   17ed8:	f7ff ffb8 	bl	17e4c <std.isra.0>
   17edc:	2202      	movs	r2, #2
   17ede:	2112      	movs	r1, #18
   17ee0:	68e0      	ldr	r0, [r4, #12]
   17ee2:	f7ff ffb3 	bl	17e4c <std.isra.0>
   17ee6:	2301      	movs	r3, #1
   17ee8:	63a3      	str	r3, [r4, #56]	; 0x38
   17eea:	0028      	movs	r0, r5
   17eec:	f000 fb1a 	bl	18524 <__retarget_lock_release_recursive>
   17ef0:	bd70      	pop	{r4, r5, r6, pc}
   17ef2:	46c0      	nop			; (mov r8, r8)
   17ef4:	20001bdc 	.word	0x20001bdc
   17ef8:	00017e3d 	.word	0x00017e3d

00017efc <__sfp_lock_acquire>:
   17efc:	b510      	push	{r4, lr}
   17efe:	4802      	ldr	r0, [pc, #8]	; (17f08 <__sfp_lock_acquire+0xc>)
   17f00:	f000 fb0e 	bl	18520 <__retarget_lock_acquire_recursive>
   17f04:	bd10      	pop	{r4, pc}
   17f06:	46c0      	nop			; (mov r8, r8)
   17f08:	20001bf0 	.word	0x20001bf0

00017f0c <__sfp_lock_release>:
   17f0c:	b510      	push	{r4, lr}
   17f0e:	4802      	ldr	r0, [pc, #8]	; (17f18 <__sfp_lock_release+0xc>)
   17f10:	f000 fb08 	bl	18524 <__retarget_lock_release_recursive>
   17f14:	bd10      	pop	{r4, pc}
   17f16:	46c0      	nop			; (mov r8, r8)
   17f18:	20001bf0 	.word	0x20001bf0

00017f1c <__libc_fini_array>:
   17f1c:	b570      	push	{r4, r5, r6, lr}
   17f1e:	4b09      	ldr	r3, [pc, #36]	; (17f44 <__libc_fini_array+0x28>)
   17f20:	4c09      	ldr	r4, [pc, #36]	; (17f48 <__libc_fini_array+0x2c>)
   17f22:	1ae4      	subs	r4, r4, r3
   17f24:	10a4      	asrs	r4, r4, #2
   17f26:	d009      	beq.n	17f3c <__libc_fini_array+0x20>
   17f28:	4a08      	ldr	r2, [pc, #32]	; (17f4c <__libc_fini_array+0x30>)
   17f2a:	18a5      	adds	r5, r4, r2
   17f2c:	00ad      	lsls	r5, r5, #2
   17f2e:	18ed      	adds	r5, r5, r3
   17f30:	682b      	ldr	r3, [r5, #0]
   17f32:	3c01      	subs	r4, #1
   17f34:	4798      	blx	r3
   17f36:	3d04      	subs	r5, #4
   17f38:	2c00      	cmp	r4, #0
   17f3a:	d1f9      	bne.n	17f30 <__libc_fini_array+0x14>
   17f3c:	f003 f9c2 	bl	1b2c4 <_fini>
   17f40:	bd70      	pop	{r4, r5, r6, pc}
   17f42:	46c0      	nop			; (mov r8, r8)
   17f44:	0001b2d0 	.word	0x0001b2d0
   17f48:	0001b2d4 	.word	0x0001b2d4
   17f4c:	3fffffff 	.word	0x3fffffff

00017f50 <_malloc_trim_r>:
   17f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17f52:	000c      	movs	r4, r1
   17f54:	0006      	movs	r6, r0
   17f56:	f7fd f845 	bl	14fe4 <__malloc_lock>
   17f5a:	4f20      	ldr	r7, [pc, #128]	; (17fdc <_malloc_trim_r+0x8c>)
   17f5c:	68bb      	ldr	r3, [r7, #8]
   17f5e:	685d      	ldr	r5, [r3, #4]
   17f60:	2303      	movs	r3, #3
   17f62:	439d      	bics	r5, r3
   17f64:	4b1e      	ldr	r3, [pc, #120]	; (17fe0 <_malloc_trim_r+0x90>)
   17f66:	1b2c      	subs	r4, r5, r4
   17f68:	469c      	mov	ip, r3
   17f6a:	4464      	add	r4, ip
   17f6c:	0b24      	lsrs	r4, r4, #12
   17f6e:	4b1d      	ldr	r3, [pc, #116]	; (17fe4 <_malloc_trim_r+0x94>)
   17f70:	3c01      	subs	r4, #1
   17f72:	0324      	lsls	r4, r4, #12
   17f74:	429c      	cmp	r4, r3
   17f76:	dd07      	ble.n	17f88 <_malloc_trim_r+0x38>
   17f78:	2100      	movs	r1, #0
   17f7a:	0030      	movs	r0, r6
   17f7c:	f7fd f8d2 	bl	15124 <_sbrk_r>
   17f80:	68bb      	ldr	r3, [r7, #8]
   17f82:	195b      	adds	r3, r3, r5
   17f84:	4298      	cmp	r0, r3
   17f86:	d004      	beq.n	17f92 <_malloc_trim_r+0x42>
   17f88:	0030      	movs	r0, r6
   17f8a:	f7fd f833 	bl	14ff4 <__malloc_unlock>
   17f8e:	2000      	movs	r0, #0
   17f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17f92:	4261      	negs	r1, r4
   17f94:	0030      	movs	r0, r6
   17f96:	f7fd f8c5 	bl	15124 <_sbrk_r>
   17f9a:	1c43      	adds	r3, r0, #1
   17f9c:	d00d      	beq.n	17fba <_malloc_trim_r+0x6a>
   17f9e:	2201      	movs	r2, #1
   17fa0:	68bb      	ldr	r3, [r7, #8]
   17fa2:	1b2d      	subs	r5, r5, r4
   17fa4:	4315      	orrs	r5, r2
   17fa6:	605d      	str	r5, [r3, #4]
   17fa8:	4b0f      	ldr	r3, [pc, #60]	; (17fe8 <_malloc_trim_r+0x98>)
   17faa:	0030      	movs	r0, r6
   17fac:	681a      	ldr	r2, [r3, #0]
   17fae:	1b14      	subs	r4, r2, r4
   17fb0:	601c      	str	r4, [r3, #0]
   17fb2:	f7fd f81f 	bl	14ff4 <__malloc_unlock>
   17fb6:	2001      	movs	r0, #1
   17fb8:	e7ea      	b.n	17f90 <_malloc_trim_r+0x40>
   17fba:	2100      	movs	r1, #0
   17fbc:	0030      	movs	r0, r6
   17fbe:	f7fd f8b1 	bl	15124 <_sbrk_r>
   17fc2:	68ba      	ldr	r2, [r7, #8]
   17fc4:	1a83      	subs	r3, r0, r2
   17fc6:	2b0f      	cmp	r3, #15
   17fc8:	ddde      	ble.n	17f88 <_malloc_trim_r+0x38>
   17fca:	4908      	ldr	r1, [pc, #32]	; (17fec <_malloc_trim_r+0x9c>)
   17fcc:	6809      	ldr	r1, [r1, #0]
   17fce:	1a40      	subs	r0, r0, r1
   17fd0:	4905      	ldr	r1, [pc, #20]	; (17fe8 <_malloc_trim_r+0x98>)
   17fd2:	6008      	str	r0, [r1, #0]
   17fd4:	2101      	movs	r1, #1
   17fd6:	430b      	orrs	r3, r1
   17fd8:	6053      	str	r3, [r2, #4]
   17fda:	e7d5      	b.n	17f88 <_malloc_trim_r+0x38>
   17fdc:	20000490 	.word	0x20000490
   17fe0:	00000fef 	.word	0x00000fef
   17fe4:	00000fff 	.word	0x00000fff
   17fe8:	20000ec8 	.word	0x20000ec8
   17fec:	20000898 	.word	0x20000898

00017ff0 <_free_r>:
   17ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17ff2:	0004      	movs	r4, r0
   17ff4:	1e0d      	subs	r5, r1, #0
   17ff6:	d03c      	beq.n	18072 <_free_r+0x82>
   17ff8:	f7fc fff4 	bl	14fe4 <__malloc_lock>
   17ffc:	0029      	movs	r1, r5
   17ffe:	3908      	subs	r1, #8
   18000:	6848      	ldr	r0, [r1, #4]
   18002:	2301      	movs	r3, #1
   18004:	0005      	movs	r5, r0
   18006:	2603      	movs	r6, #3
   18008:	439d      	bics	r5, r3
   1800a:	194a      	adds	r2, r1, r5
   1800c:	469c      	mov	ip, r3
   1800e:	4f61      	ldr	r7, [pc, #388]	; (18194 <_free_r+0x1a4>)
   18010:	6853      	ldr	r3, [r2, #4]
   18012:	43b3      	bics	r3, r6
   18014:	68be      	ldr	r6, [r7, #8]
   18016:	42b2      	cmp	r2, r6
   18018:	d056      	beq.n	180c8 <_free_r+0xd8>
   1801a:	4666      	mov	r6, ip
   1801c:	6053      	str	r3, [r2, #4]
   1801e:	4206      	tst	r6, r0
   18020:	d10a      	bne.n	18038 <_free_r+0x48>
   18022:	003e      	movs	r6, r7
   18024:	6808      	ldr	r0, [r1, #0]
   18026:	3608      	adds	r6, #8
   18028:	1a09      	subs	r1, r1, r0
   1802a:	182d      	adds	r5, r5, r0
   1802c:	6888      	ldr	r0, [r1, #8]
   1802e:	42b0      	cmp	r0, r6
   18030:	d065      	beq.n	180fe <_free_r+0x10e>
   18032:	68ce      	ldr	r6, [r1, #12]
   18034:	60c6      	str	r6, [r0, #12]
   18036:	60b0      	str	r0, [r6, #8]
   18038:	2001      	movs	r0, #1
   1803a:	18d6      	adds	r6, r2, r3
   1803c:	6876      	ldr	r6, [r6, #4]
   1803e:	4206      	tst	r6, r0
   18040:	d033      	beq.n	180aa <_free_r+0xba>
   18042:	4b55      	ldr	r3, [pc, #340]	; (18198 <_free_r+0x1a8>)
   18044:	4328      	orrs	r0, r5
   18046:	6048      	str	r0, [r1, #4]
   18048:	514d      	str	r5, [r1, r5]
   1804a:	429d      	cmp	r5, r3
   1804c:	d812      	bhi.n	18074 <_free_r+0x84>
   1804e:	08ed      	lsrs	r5, r5, #3
   18050:	3bff      	subs	r3, #255	; 0xff
   18052:	10aa      	asrs	r2, r5, #2
   18054:	3bff      	subs	r3, #255	; 0xff
   18056:	4093      	lsls	r3, r2
   18058:	687a      	ldr	r2, [r7, #4]
   1805a:	00ed      	lsls	r5, r5, #3
   1805c:	4313      	orrs	r3, r2
   1805e:	607b      	str	r3, [r7, #4]
   18060:	19ef      	adds	r7, r5, r7
   18062:	68bb      	ldr	r3, [r7, #8]
   18064:	60cf      	str	r7, [r1, #12]
   18066:	608b      	str	r3, [r1, #8]
   18068:	60b9      	str	r1, [r7, #8]
   1806a:	60d9      	str	r1, [r3, #12]
   1806c:	0020      	movs	r0, r4
   1806e:	f7fc ffc1 	bl	14ff4 <__malloc_unlock>
   18072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18074:	0a68      	lsrs	r0, r5, #9
   18076:	2804      	cmp	r0, #4
   18078:	d850      	bhi.n	1811c <_free_r+0x12c>
   1807a:	09a8      	lsrs	r0, r5, #6
   1807c:	0002      	movs	r2, r0
   1807e:	3039      	adds	r0, #57	; 0x39
   18080:	3238      	adds	r2, #56	; 0x38
   18082:	00c0      	lsls	r0, r0, #3
   18084:	1838      	adds	r0, r7, r0
   18086:	3808      	subs	r0, #8
   18088:	6883      	ldr	r3, [r0, #8]
   1808a:	2603      	movs	r6, #3
   1808c:	4298      	cmp	r0, r3
   1808e:	d04c      	beq.n	1812a <_free_r+0x13a>
   18090:	685a      	ldr	r2, [r3, #4]
   18092:	43b2      	bics	r2, r6
   18094:	4295      	cmp	r5, r2
   18096:	d230      	bcs.n	180fa <_free_r+0x10a>
   18098:	689b      	ldr	r3, [r3, #8]
   1809a:	4298      	cmp	r0, r3
   1809c:	d1f8      	bne.n	18090 <_free_r+0xa0>
   1809e:	68c3      	ldr	r3, [r0, #12]
   180a0:	60cb      	str	r3, [r1, #12]
   180a2:	6088      	str	r0, [r1, #8]
   180a4:	6099      	str	r1, [r3, #8]
   180a6:	60c1      	str	r1, [r0, #12]
   180a8:	e7e0      	b.n	1806c <_free_r+0x7c>
   180aa:	18ed      	adds	r5, r5, r3
   180ac:	4e3b      	ldr	r6, [pc, #236]	; (1819c <_free_r+0x1ac>)
   180ae:	6893      	ldr	r3, [r2, #8]
   180b0:	42b3      	cmp	r3, r6
   180b2:	d042      	beq.n	1813a <_free_r+0x14a>
   180b4:	68d2      	ldr	r2, [r2, #12]
   180b6:	4328      	orrs	r0, r5
   180b8:	60da      	str	r2, [r3, #12]
   180ba:	6093      	str	r3, [r2, #8]
   180bc:	4b36      	ldr	r3, [pc, #216]	; (18198 <_free_r+0x1a8>)
   180be:	6048      	str	r0, [r1, #4]
   180c0:	514d      	str	r5, [r1, r5]
   180c2:	429d      	cmp	r5, r3
   180c4:	d8d6      	bhi.n	18074 <_free_r+0x84>
   180c6:	e7c2      	b.n	1804e <_free_r+0x5e>
   180c8:	4662      	mov	r2, ip
   180ca:	18eb      	adds	r3, r5, r3
   180cc:	4202      	tst	r2, r0
   180ce:	d106      	bne.n	180de <_free_r+0xee>
   180d0:	680a      	ldr	r2, [r1, #0]
   180d2:	1a89      	subs	r1, r1, r2
   180d4:	6888      	ldr	r0, [r1, #8]
   180d6:	189b      	adds	r3, r3, r2
   180d8:	68ca      	ldr	r2, [r1, #12]
   180da:	60c2      	str	r2, [r0, #12]
   180dc:	6090      	str	r0, [r2, #8]
   180de:	2201      	movs	r2, #1
   180e0:	431a      	orrs	r2, r3
   180e2:	604a      	str	r2, [r1, #4]
   180e4:	4a2e      	ldr	r2, [pc, #184]	; (181a0 <_free_r+0x1b0>)
   180e6:	60b9      	str	r1, [r7, #8]
   180e8:	6812      	ldr	r2, [r2, #0]
   180ea:	4293      	cmp	r3, r2
   180ec:	d3be      	bcc.n	1806c <_free_r+0x7c>
   180ee:	4b2d      	ldr	r3, [pc, #180]	; (181a4 <_free_r+0x1b4>)
   180f0:	0020      	movs	r0, r4
   180f2:	6819      	ldr	r1, [r3, #0]
   180f4:	f7ff ff2c 	bl	17f50 <_malloc_trim_r>
   180f8:	e7b8      	b.n	1806c <_free_r+0x7c>
   180fa:	0018      	movs	r0, r3
   180fc:	e7cf      	b.n	1809e <_free_r+0xae>
   180fe:	4666      	mov	r6, ip
   18100:	18d0      	adds	r0, r2, r3
   18102:	6840      	ldr	r0, [r0, #4]
   18104:	4230      	tst	r0, r6
   18106:	d13f      	bne.n	18188 <_free_r+0x198>
   18108:	6890      	ldr	r0, [r2, #8]
   1810a:	195d      	adds	r5, r3, r5
   1810c:	68d3      	ldr	r3, [r2, #12]
   1810e:	60c3      	str	r3, [r0, #12]
   18110:	6098      	str	r0, [r3, #8]
   18112:	4663      	mov	r3, ip
   18114:	432b      	orrs	r3, r5
   18116:	604b      	str	r3, [r1, #4]
   18118:	514d      	str	r5, [r1, r5]
   1811a:	e7a7      	b.n	1806c <_free_r+0x7c>
   1811c:	2814      	cmp	r0, #20
   1811e:	d814      	bhi.n	1814a <_free_r+0x15a>
   18120:	0002      	movs	r2, r0
   18122:	305c      	adds	r0, #92	; 0x5c
   18124:	325b      	adds	r2, #91	; 0x5b
   18126:	00c0      	lsls	r0, r0, #3
   18128:	e7ac      	b.n	18084 <_free_r+0x94>
   1812a:	2301      	movs	r3, #1
   1812c:	1092      	asrs	r2, r2, #2
   1812e:	4093      	lsls	r3, r2
   18130:	687a      	ldr	r2, [r7, #4]
   18132:	4313      	orrs	r3, r2
   18134:	607b      	str	r3, [r7, #4]
   18136:	0003      	movs	r3, r0
   18138:	e7b2      	b.n	180a0 <_free_r+0xb0>
   1813a:	4328      	orrs	r0, r5
   1813c:	60d9      	str	r1, [r3, #12]
   1813e:	6099      	str	r1, [r3, #8]
   18140:	60cb      	str	r3, [r1, #12]
   18142:	608b      	str	r3, [r1, #8]
   18144:	6048      	str	r0, [r1, #4]
   18146:	514d      	str	r5, [r1, r5]
   18148:	e790      	b.n	1806c <_free_r+0x7c>
   1814a:	2854      	cmp	r0, #84	; 0x54
   1814c:	d805      	bhi.n	1815a <_free_r+0x16a>
   1814e:	0b28      	lsrs	r0, r5, #12
   18150:	0002      	movs	r2, r0
   18152:	306f      	adds	r0, #111	; 0x6f
   18154:	326e      	adds	r2, #110	; 0x6e
   18156:	00c0      	lsls	r0, r0, #3
   18158:	e794      	b.n	18084 <_free_r+0x94>
   1815a:	22aa      	movs	r2, #170	; 0xaa
   1815c:	0052      	lsls	r2, r2, #1
   1815e:	4290      	cmp	r0, r2
   18160:	d805      	bhi.n	1816e <_free_r+0x17e>
   18162:	0be8      	lsrs	r0, r5, #15
   18164:	0002      	movs	r2, r0
   18166:	3078      	adds	r0, #120	; 0x78
   18168:	3277      	adds	r2, #119	; 0x77
   1816a:	00c0      	lsls	r0, r0, #3
   1816c:	e78a      	b.n	18084 <_free_r+0x94>
   1816e:	4a0e      	ldr	r2, [pc, #56]	; (181a8 <_free_r+0x1b8>)
   18170:	4290      	cmp	r0, r2
   18172:	d805      	bhi.n	18180 <_free_r+0x190>
   18174:	0ca8      	lsrs	r0, r5, #18
   18176:	0002      	movs	r2, r0
   18178:	307d      	adds	r0, #125	; 0x7d
   1817a:	327c      	adds	r2, #124	; 0x7c
   1817c:	00c0      	lsls	r0, r0, #3
   1817e:	e781      	b.n	18084 <_free_r+0x94>
   18180:	20fe      	movs	r0, #254	; 0xfe
   18182:	227e      	movs	r2, #126	; 0x7e
   18184:	0080      	lsls	r0, r0, #2
   18186:	e77d      	b.n	18084 <_free_r+0x94>
   18188:	4663      	mov	r3, ip
   1818a:	432b      	orrs	r3, r5
   1818c:	604b      	str	r3, [r1, #4]
   1818e:	6015      	str	r5, [r2, #0]
   18190:	e76c      	b.n	1806c <_free_r+0x7c>
   18192:	46c0      	nop			; (mov r8, r8)
   18194:	20000490 	.word	0x20000490
   18198:	000001ff 	.word	0x000001ff
   1819c:	20000498 	.word	0x20000498
   181a0:	2000089c 	.word	0x2000089c
   181a4:	20000ef8 	.word	0x20000ef8
   181a8:	00000554 	.word	0x00000554

000181ac <__sfvwrite_r>:
   181ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   181ae:	464e      	mov	r6, r9
   181b0:	46de      	mov	lr, fp
   181b2:	4657      	mov	r7, sl
   181b4:	4645      	mov	r5, r8
   181b6:	b5e0      	push	{r5, r6, r7, lr}
   181b8:	6893      	ldr	r3, [r2, #8]
   181ba:	b083      	sub	sp, #12
   181bc:	9000      	str	r0, [sp, #0]
   181be:	000c      	movs	r4, r1
   181c0:	0016      	movs	r6, r2
   181c2:	2b00      	cmp	r3, #0
   181c4:	d025      	beq.n	18212 <__sfvwrite_r+0x66>
   181c6:	898b      	ldrh	r3, [r1, #12]
   181c8:	071a      	lsls	r2, r3, #28
   181ca:	d52a      	bpl.n	18222 <__sfvwrite_r+0x76>
   181cc:	690a      	ldr	r2, [r1, #16]
   181ce:	2a00      	cmp	r2, #0
   181d0:	d027      	beq.n	18222 <__sfvwrite_r+0x76>
   181d2:	6832      	ldr	r2, [r6, #0]
   181d4:	4693      	mov	fp, r2
   181d6:	079a      	lsls	r2, r3, #30
   181d8:	d52f      	bpl.n	1823a <__sfvwrite_r+0x8e>
   181da:	4bb2      	ldr	r3, [pc, #712]	; (184a4 <__sfvwrite_r+0x2f8>)
   181dc:	2700      	movs	r7, #0
   181de:	2500      	movs	r5, #0
   181e0:	4698      	mov	r8, r3
   181e2:	46b1      	mov	r9, r6
   181e4:	2d00      	cmp	r5, #0
   181e6:	d100      	bne.n	181ea <__sfvwrite_r+0x3e>
   181e8:	e072      	b.n	182d0 <__sfvwrite_r+0x124>
   181ea:	002b      	movs	r3, r5
   181ec:	4545      	cmp	r5, r8
   181ee:	d900      	bls.n	181f2 <__sfvwrite_r+0x46>
   181f0:	4bac      	ldr	r3, [pc, #688]	; (184a4 <__sfvwrite_r+0x2f8>)
   181f2:	003a      	movs	r2, r7
   181f4:	69e1      	ldr	r1, [r4, #28]
   181f6:	9800      	ldr	r0, [sp, #0]
   181f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
   181fa:	47b0      	blx	r6
   181fc:	2800      	cmp	r0, #0
   181fe:	dc00      	bgt.n	18202 <__sfvwrite_r+0x56>
   18200:	e073      	b.n	182ea <__sfvwrite_r+0x13e>
   18202:	464b      	mov	r3, r9
   18204:	689b      	ldr	r3, [r3, #8]
   18206:	183f      	adds	r7, r7, r0
   18208:	1a2d      	subs	r5, r5, r0
   1820a:	1a18      	subs	r0, r3, r0
   1820c:	464b      	mov	r3, r9
   1820e:	6098      	str	r0, [r3, #8]
   18210:	d1e8      	bne.n	181e4 <__sfvwrite_r+0x38>
   18212:	2000      	movs	r0, #0
   18214:	b003      	add	sp, #12
   18216:	bc3c      	pop	{r2, r3, r4, r5}
   18218:	4690      	mov	r8, r2
   1821a:	4699      	mov	r9, r3
   1821c:	46a2      	mov	sl, r4
   1821e:	46ab      	mov	fp, r5
   18220:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18222:	0021      	movs	r1, r4
   18224:	9800      	ldr	r0, [sp, #0]
   18226:	f7fe fc4b 	bl	16ac0 <__swsetup_r>
   1822a:	2800      	cmp	r0, #0
   1822c:	d000      	beq.n	18230 <__sfvwrite_r+0x84>
   1822e:	e130      	b.n	18492 <__sfvwrite_r+0x2e6>
   18230:	6832      	ldr	r2, [r6, #0]
   18232:	89a3      	ldrh	r3, [r4, #12]
   18234:	4693      	mov	fp, r2
   18236:	079a      	lsls	r2, r3, #30
   18238:	d4cf      	bmi.n	181da <__sfvwrite_r+0x2e>
   1823a:	07da      	lsls	r2, r3, #31
   1823c:	d55d      	bpl.n	182fa <__sfvwrite_r+0x14e>
   1823e:	2300      	movs	r3, #0
   18240:	2000      	movs	r0, #0
   18242:	469a      	mov	sl, r3
   18244:	2700      	movs	r7, #0
   18246:	001d      	movs	r5, r3
   18248:	46b1      	mov	r9, r6
   1824a:	e029      	b.n	182a0 <__sfvwrite_r+0xf4>
   1824c:	2800      	cmp	r0, #0
   1824e:	d033      	beq.n	182b8 <__sfvwrite_r+0x10c>
   18250:	46a8      	mov	r8, r5
   18252:	42bd      	cmp	r5, r7
   18254:	d900      	bls.n	18258 <__sfvwrite_r+0xac>
   18256:	46b8      	mov	r8, r7
   18258:	6820      	ldr	r0, [r4, #0]
   1825a:	6922      	ldr	r2, [r4, #16]
   1825c:	4646      	mov	r6, r8
   1825e:	6963      	ldr	r3, [r4, #20]
   18260:	4290      	cmp	r0, r2
   18262:	d907      	bls.n	18274 <__sfvwrite_r+0xc8>
   18264:	68a2      	ldr	r2, [r4, #8]
   18266:	4694      	mov	ip, r2
   18268:	449c      	add	ip, r3
   1826a:	4662      	mov	r2, ip
   1826c:	9201      	str	r2, [sp, #4]
   1826e:	45e0      	cmp	r8, ip
   18270:	dd00      	ble.n	18274 <__sfvwrite_r+0xc8>
   18272:	e0e9      	b.n	18448 <__sfvwrite_r+0x29c>
   18274:	4598      	cmp	r8, r3
   18276:	da00      	bge.n	1827a <__sfvwrite_r+0xce>
   18278:	e08f      	b.n	1839a <__sfvwrite_r+0x1ee>
   1827a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1827c:	4652      	mov	r2, sl
   1827e:	69e1      	ldr	r1, [r4, #28]
   18280:	9800      	ldr	r0, [sp, #0]
   18282:	47b0      	blx	r6
   18284:	1e06      	subs	r6, r0, #0
   18286:	dd30      	ble.n	182ea <__sfvwrite_r+0x13e>
   18288:	1bad      	subs	r5, r5, r6
   1828a:	2001      	movs	r0, #1
   1828c:	2d00      	cmp	r5, #0
   1828e:	d026      	beq.n	182de <__sfvwrite_r+0x132>
   18290:	464b      	mov	r3, r9
   18292:	689b      	ldr	r3, [r3, #8]
   18294:	44b2      	add	sl, r6
   18296:	1bbf      	subs	r7, r7, r6
   18298:	1b9e      	subs	r6, r3, r6
   1829a:	464b      	mov	r3, r9
   1829c:	609e      	str	r6, [r3, #8]
   1829e:	d0b8      	beq.n	18212 <__sfvwrite_r+0x66>
   182a0:	2f00      	cmp	r7, #0
   182a2:	d1d3      	bne.n	1824c <__sfvwrite_r+0xa0>
   182a4:	465b      	mov	r3, fp
   182a6:	681b      	ldr	r3, [r3, #0]
   182a8:	469a      	mov	sl, r3
   182aa:	465b      	mov	r3, fp
   182ac:	685f      	ldr	r7, [r3, #4]
   182ae:	2308      	movs	r3, #8
   182b0:	469c      	mov	ip, r3
   182b2:	44e3      	add	fp, ip
   182b4:	2f00      	cmp	r7, #0
   182b6:	d0f5      	beq.n	182a4 <__sfvwrite_r+0xf8>
   182b8:	003a      	movs	r2, r7
   182ba:	210a      	movs	r1, #10
   182bc:	4650      	mov	r0, sl
   182be:	f000 f9ab 	bl	18618 <memchr>
   182c2:	2800      	cmp	r0, #0
   182c4:	d100      	bne.n	182c8 <__sfvwrite_r+0x11c>
   182c6:	e0e2      	b.n	1848e <__sfvwrite_r+0x2e2>
   182c8:	4653      	mov	r3, sl
   182ca:	3001      	adds	r0, #1
   182cc:	1ac5      	subs	r5, r0, r3
   182ce:	e7bf      	b.n	18250 <__sfvwrite_r+0xa4>
   182d0:	465b      	mov	r3, fp
   182d2:	681f      	ldr	r7, [r3, #0]
   182d4:	685d      	ldr	r5, [r3, #4]
   182d6:	2308      	movs	r3, #8
   182d8:	469c      	mov	ip, r3
   182da:	44e3      	add	fp, ip
   182dc:	e782      	b.n	181e4 <__sfvwrite_r+0x38>
   182de:	0021      	movs	r1, r4
   182e0:	9800      	ldr	r0, [sp, #0]
   182e2:	f7ff fd81 	bl	17de8 <_fflush_r>
   182e6:	2800      	cmp	r0, #0
   182e8:	d0d2      	beq.n	18290 <__sfvwrite_r+0xe4>
   182ea:	220c      	movs	r2, #12
   182ec:	5ea3      	ldrsh	r3, [r4, r2]
   182ee:	2240      	movs	r2, #64	; 0x40
   182f0:	2001      	movs	r0, #1
   182f2:	4313      	orrs	r3, r2
   182f4:	81a3      	strh	r3, [r4, #12]
   182f6:	4240      	negs	r0, r0
   182f8:	e78c      	b.n	18214 <__sfvwrite_r+0x68>
   182fa:	2200      	movs	r2, #0
   182fc:	4691      	mov	r9, r2
   182fe:	464d      	mov	r5, r9
   18300:	2d00      	cmp	r5, #0
   18302:	d023      	beq.n	1834c <__sfvwrite_r+0x1a0>
   18304:	68a2      	ldr	r2, [r4, #8]
   18306:	4690      	mov	r8, r2
   18308:	2280      	movs	r2, #128	; 0x80
   1830a:	0092      	lsls	r2, r2, #2
   1830c:	4213      	tst	r3, r2
   1830e:	d026      	beq.n	1835e <__sfvwrite_r+0x1b2>
   18310:	46c2      	mov	sl, r8
   18312:	4545      	cmp	r5, r8
   18314:	d34d      	bcc.n	183b2 <__sfvwrite_r+0x206>
   18316:	2290      	movs	r2, #144	; 0x90
   18318:	00d2      	lsls	r2, r2, #3
   1831a:	4213      	tst	r3, r2
   1831c:	d14e      	bne.n	183bc <__sfvwrite_r+0x210>
   1831e:	002f      	movs	r7, r5
   18320:	6820      	ldr	r0, [r4, #0]
   18322:	4652      	mov	r2, sl
   18324:	4649      	mov	r1, r9
   18326:	f000 f9b7 	bl	18698 <memmove>
   1832a:	4642      	mov	r2, r8
   1832c:	68a3      	ldr	r3, [r4, #8]
   1832e:	1a98      	subs	r0, r3, r2
   18330:	6823      	ldr	r3, [r4, #0]
   18332:	60a0      	str	r0, [r4, #8]
   18334:	4453      	add	r3, sl
   18336:	6023      	str	r3, [r4, #0]
   18338:	68b3      	ldr	r3, [r6, #8]
   1833a:	44b9      	add	r9, r7
   1833c:	1bed      	subs	r5, r5, r7
   1833e:	1bdf      	subs	r7, r3, r7
   18340:	60b7      	str	r7, [r6, #8]
   18342:	d100      	bne.n	18346 <__sfvwrite_r+0x19a>
   18344:	e765      	b.n	18212 <__sfvwrite_r+0x66>
   18346:	89a3      	ldrh	r3, [r4, #12]
   18348:	2d00      	cmp	r5, #0
   1834a:	d1db      	bne.n	18304 <__sfvwrite_r+0x158>
   1834c:	465a      	mov	r2, fp
   1834e:	6812      	ldr	r2, [r2, #0]
   18350:	4691      	mov	r9, r2
   18352:	465a      	mov	r2, fp
   18354:	6855      	ldr	r5, [r2, #4]
   18356:	2208      	movs	r2, #8
   18358:	4694      	mov	ip, r2
   1835a:	44e3      	add	fp, ip
   1835c:	e7d0      	b.n	18300 <__sfvwrite_r+0x154>
   1835e:	6820      	ldr	r0, [r4, #0]
   18360:	6923      	ldr	r3, [r4, #16]
   18362:	4298      	cmp	r0, r3
   18364:	d802      	bhi.n	1836c <__sfvwrite_r+0x1c0>
   18366:	6967      	ldr	r7, [r4, #20]
   18368:	42bd      	cmp	r5, r7
   1836a:	d259      	bcs.n	18420 <__sfvwrite_r+0x274>
   1836c:	4647      	mov	r7, r8
   1836e:	42af      	cmp	r7, r5
   18370:	d900      	bls.n	18374 <__sfvwrite_r+0x1c8>
   18372:	002f      	movs	r7, r5
   18374:	003a      	movs	r2, r7
   18376:	4649      	mov	r1, r9
   18378:	f000 f98e 	bl	18698 <memmove>
   1837c:	68a3      	ldr	r3, [r4, #8]
   1837e:	6822      	ldr	r2, [r4, #0]
   18380:	1bdb      	subs	r3, r3, r7
   18382:	19d2      	adds	r2, r2, r7
   18384:	60a3      	str	r3, [r4, #8]
   18386:	6022      	str	r2, [r4, #0]
   18388:	2b00      	cmp	r3, #0
   1838a:	d1d5      	bne.n	18338 <__sfvwrite_r+0x18c>
   1838c:	0021      	movs	r1, r4
   1838e:	9800      	ldr	r0, [sp, #0]
   18390:	f7ff fd2a 	bl	17de8 <_fflush_r>
   18394:	2800      	cmp	r0, #0
   18396:	d0cf      	beq.n	18338 <__sfvwrite_r+0x18c>
   18398:	e7a7      	b.n	182ea <__sfvwrite_r+0x13e>
   1839a:	4642      	mov	r2, r8
   1839c:	4651      	mov	r1, sl
   1839e:	f000 f97b 	bl	18698 <memmove>
   183a2:	4642      	mov	r2, r8
   183a4:	68a3      	ldr	r3, [r4, #8]
   183a6:	1a9b      	subs	r3, r3, r2
   183a8:	60a3      	str	r3, [r4, #8]
   183aa:	6823      	ldr	r3, [r4, #0]
   183ac:	4443      	add	r3, r8
   183ae:	6023      	str	r3, [r4, #0]
   183b0:	e76a      	b.n	18288 <__sfvwrite_r+0xdc>
   183b2:	46a8      	mov	r8, r5
   183b4:	6820      	ldr	r0, [r4, #0]
   183b6:	002f      	movs	r7, r5
   183b8:	46aa      	mov	sl, r5
   183ba:	e7b2      	b.n	18322 <__sfvwrite_r+0x176>
   183bc:	6921      	ldr	r1, [r4, #16]
   183be:	6822      	ldr	r2, [r4, #0]
   183c0:	1a52      	subs	r2, r2, r1
   183c2:	4692      	mov	sl, r2
   183c4:	6962      	ldr	r2, [r4, #20]
   183c6:	0057      	lsls	r7, r2, #1
   183c8:	18bf      	adds	r7, r7, r2
   183ca:	0ffa      	lsrs	r2, r7, #31
   183cc:	19d7      	adds	r7, r2, r7
   183ce:	4652      	mov	r2, sl
   183d0:	1c50      	adds	r0, r2, #1
   183d2:	107f      	asrs	r7, r7, #1
   183d4:	1940      	adds	r0, r0, r5
   183d6:	003a      	movs	r2, r7
   183d8:	42b8      	cmp	r0, r7
   183da:	d901      	bls.n	183e0 <__sfvwrite_r+0x234>
   183dc:	0007      	movs	r7, r0
   183de:	0002      	movs	r2, r0
   183e0:	055b      	lsls	r3, r3, #21
   183e2:	d542      	bpl.n	1846a <__sfvwrite_r+0x2be>
   183e4:	0011      	movs	r1, r2
   183e6:	9800      	ldr	r0, [sp, #0]
   183e8:	f7fc fabc 	bl	14964 <_malloc_r>
   183ec:	4680      	mov	r8, r0
   183ee:	1e03      	subs	r3, r0, #0
   183f0:	d052      	beq.n	18498 <__sfvwrite_r+0x2ec>
   183f2:	4652      	mov	r2, sl
   183f4:	6921      	ldr	r1, [r4, #16]
   183f6:	f7fc fd69 	bl	14ecc <memcpy>
   183fa:	89a3      	ldrh	r3, [r4, #12]
   183fc:	4a2a      	ldr	r2, [pc, #168]	; (184a8 <__sfvwrite_r+0x2fc>)
   183fe:	4013      	ands	r3, r2
   18400:	2280      	movs	r2, #128	; 0x80
   18402:	4313      	orrs	r3, r2
   18404:	81a3      	strh	r3, [r4, #12]
   18406:	4643      	mov	r3, r8
   18408:	4640      	mov	r0, r8
   1840a:	6123      	str	r3, [r4, #16]
   1840c:	4653      	mov	r3, sl
   1840e:	4450      	add	r0, sl
   18410:	6167      	str	r7, [r4, #20]
   18412:	1aff      	subs	r7, r7, r3
   18414:	60a7      	str	r7, [r4, #8]
   18416:	6020      	str	r0, [r4, #0]
   18418:	46a8      	mov	r8, r5
   1841a:	002f      	movs	r7, r5
   1841c:	46aa      	mov	sl, r5
   1841e:	e780      	b.n	18322 <__sfvwrite_r+0x176>
   18420:	4b22      	ldr	r3, [pc, #136]	; (184ac <__sfvwrite_r+0x300>)
   18422:	0028      	movs	r0, r5
   18424:	429d      	cmp	r5, r3
   18426:	d900      	bls.n	1842a <__sfvwrite_r+0x27e>
   18428:	0018      	movs	r0, r3
   1842a:	0039      	movs	r1, r7
   1842c:	f7f9 fa26 	bl	1187c <__divsi3>
   18430:	003b      	movs	r3, r7
   18432:	464a      	mov	r2, r9
   18434:	4343      	muls	r3, r0
   18436:	69e1      	ldr	r1, [r4, #28]
   18438:	9800      	ldr	r0, [sp, #0]
   1843a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1843c:	47b8      	blx	r7
   1843e:	2800      	cmp	r0, #0
   18440:	dc00      	bgt.n	18444 <__sfvwrite_r+0x298>
   18442:	e752      	b.n	182ea <__sfvwrite_r+0x13e>
   18444:	0007      	movs	r7, r0
   18446:	e777      	b.n	18338 <__sfvwrite_r+0x18c>
   18448:	4666      	mov	r6, ip
   1844a:	4651      	mov	r1, sl
   1844c:	f000 f924 	bl	18698 <memmove>
   18450:	46b4      	mov	ip, r6
   18452:	6823      	ldr	r3, [r4, #0]
   18454:	0021      	movs	r1, r4
   18456:	4463      	add	r3, ip
   18458:	6023      	str	r3, [r4, #0]
   1845a:	9800      	ldr	r0, [sp, #0]
   1845c:	f7ff fcc4 	bl	17de8 <_fflush_r>
   18460:	2800      	cmp	r0, #0
   18462:	d000      	beq.n	18466 <__sfvwrite_r+0x2ba>
   18464:	e741      	b.n	182ea <__sfvwrite_r+0x13e>
   18466:	9e01      	ldr	r6, [sp, #4]
   18468:	e70e      	b.n	18288 <__sfvwrite_r+0xdc>
   1846a:	9800      	ldr	r0, [sp, #0]
   1846c:	f000 fcac 	bl	18dc8 <_realloc_r>
   18470:	4680      	mov	r8, r0
   18472:	2800      	cmp	r0, #0
   18474:	d1c7      	bne.n	18406 <__sfvwrite_r+0x25a>
   18476:	9d00      	ldr	r5, [sp, #0]
   18478:	6921      	ldr	r1, [r4, #16]
   1847a:	0028      	movs	r0, r5
   1847c:	f7ff fdb8 	bl	17ff0 <_free_r>
   18480:	2280      	movs	r2, #128	; 0x80
   18482:	89a3      	ldrh	r3, [r4, #12]
   18484:	4393      	bics	r3, r2
   18486:	3a74      	subs	r2, #116	; 0x74
   18488:	b21b      	sxth	r3, r3
   1848a:	602a      	str	r2, [r5, #0]
   1848c:	e72f      	b.n	182ee <__sfvwrite_r+0x142>
   1848e:	1c7d      	adds	r5, r7, #1
   18490:	e6de      	b.n	18250 <__sfvwrite_r+0xa4>
   18492:	2001      	movs	r0, #1
   18494:	4240      	negs	r0, r0
   18496:	e6bd      	b.n	18214 <__sfvwrite_r+0x68>
   18498:	9a00      	ldr	r2, [sp, #0]
   1849a:	330c      	adds	r3, #12
   1849c:	6013      	str	r3, [r2, #0]
   1849e:	220c      	movs	r2, #12
   184a0:	5ea3      	ldrsh	r3, [r4, r2]
   184a2:	e724      	b.n	182ee <__sfvwrite_r+0x142>
   184a4:	7ffffc00 	.word	0x7ffffc00
   184a8:	fffffb7f 	.word	0xfffffb7f
   184ac:	7fffffff 	.word	0x7fffffff

000184b0 <_fwalk_reent>:
   184b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   184b2:	4647      	mov	r7, r8
   184b4:	46ce      	mov	lr, r9
   184b6:	b580      	push	{r7, lr}
   184b8:	27b8      	movs	r7, #184	; 0xb8
   184ba:	4680      	mov	r8, r0
   184bc:	00bf      	lsls	r7, r7, #2
   184be:	4447      	add	r7, r8
   184c0:	4689      	mov	r9, r1
   184c2:	2600      	movs	r6, #0
   184c4:	2f00      	cmp	r7, #0
   184c6:	d014      	beq.n	184f2 <_fwalk_reent+0x42>
   184c8:	687b      	ldr	r3, [r7, #4]
   184ca:	68bc      	ldr	r4, [r7, #8]
   184cc:	1e5d      	subs	r5, r3, #1
   184ce:	d40d      	bmi.n	184ec <_fwalk_reent+0x3c>
   184d0:	89a3      	ldrh	r3, [r4, #12]
   184d2:	2b01      	cmp	r3, #1
   184d4:	d907      	bls.n	184e6 <_fwalk_reent+0x36>
   184d6:	220e      	movs	r2, #14
   184d8:	5ea3      	ldrsh	r3, [r4, r2]
   184da:	3301      	adds	r3, #1
   184dc:	d003      	beq.n	184e6 <_fwalk_reent+0x36>
   184de:	0021      	movs	r1, r4
   184e0:	4640      	mov	r0, r8
   184e2:	47c8      	blx	r9
   184e4:	4306      	orrs	r6, r0
   184e6:	3468      	adds	r4, #104	; 0x68
   184e8:	3d01      	subs	r5, #1
   184ea:	d2f1      	bcs.n	184d0 <_fwalk_reent+0x20>
   184ec:	683f      	ldr	r7, [r7, #0]
   184ee:	2f00      	cmp	r7, #0
   184f0:	d1ea      	bne.n	184c8 <_fwalk_reent+0x18>
   184f2:	0030      	movs	r0, r6
   184f4:	bc0c      	pop	{r2, r3}
   184f6:	4690      	mov	r8, r2
   184f8:	4699      	mov	r9, r3
   184fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000184fc <_localeconv_r>:
   184fc:	4b04      	ldr	r3, [pc, #16]	; (18510 <_localeconv_r+0x14>)
   184fe:	681b      	ldr	r3, [r3, #0]
   18500:	6b58      	ldr	r0, [r3, #52]	; 0x34
   18502:	2800      	cmp	r0, #0
   18504:	d001      	beq.n	1850a <_localeconv_r+0xe>
   18506:	30f0      	adds	r0, #240	; 0xf0
   18508:	4770      	bx	lr
   1850a:	4802      	ldr	r0, [pc, #8]	; (18514 <_localeconv_r+0x18>)
   1850c:	e7fb      	b.n	18506 <_localeconv_r+0xa>
   1850e:	46c0      	nop			; (mov r8, r8)
   18510:	20000064 	.word	0x20000064
   18514:	200008a4 	.word	0x200008a4

00018518 <__retarget_lock_init_recursive>:
   18518:	4770      	bx	lr
   1851a:	46c0      	nop			; (mov r8, r8)

0001851c <__retarget_lock_close_recursive>:
   1851c:	4770      	bx	lr
   1851e:	46c0      	nop			; (mov r8, r8)

00018520 <__retarget_lock_acquire_recursive>:
   18520:	4770      	bx	lr
   18522:	46c0      	nop			; (mov r8, r8)

00018524 <__retarget_lock_release_recursive>:
   18524:	4770      	bx	lr
   18526:	46c0      	nop			; (mov r8, r8)

00018528 <__swhatbuf_r>:
   18528:	b570      	push	{r4, r5, r6, lr}
   1852a:	000c      	movs	r4, r1
   1852c:	001e      	movs	r6, r3
   1852e:	230e      	movs	r3, #14
   18530:	5ec9      	ldrsh	r1, [r1, r3]
   18532:	b090      	sub	sp, #64	; 0x40
   18534:	0015      	movs	r5, r2
   18536:	2900      	cmp	r1, #0
   18538:	db15      	blt.n	18566 <__swhatbuf_r+0x3e>
   1853a:	aa01      	add	r2, sp, #4
   1853c:	f001 f848 	bl	195d0 <_fstat_r>
   18540:	2800      	cmp	r0, #0
   18542:	db10      	blt.n	18566 <__swhatbuf_r+0x3e>
   18544:	22f0      	movs	r2, #240	; 0xf0
   18546:	9b02      	ldr	r3, [sp, #8]
   18548:	0212      	lsls	r2, r2, #8
   1854a:	4013      	ands	r3, r2
   1854c:	4a0d      	ldr	r2, [pc, #52]	; (18584 <__swhatbuf_r+0x5c>)
   1854e:	2080      	movs	r0, #128	; 0x80
   18550:	4694      	mov	ip, r2
   18552:	4463      	add	r3, ip
   18554:	425a      	negs	r2, r3
   18556:	4153      	adcs	r3, r2
   18558:	6033      	str	r3, [r6, #0]
   1855a:	2380      	movs	r3, #128	; 0x80
   1855c:	00db      	lsls	r3, r3, #3
   1855e:	602b      	str	r3, [r5, #0]
   18560:	0100      	lsls	r0, r0, #4
   18562:	b010      	add	sp, #64	; 0x40
   18564:	bd70      	pop	{r4, r5, r6, pc}
   18566:	2300      	movs	r3, #0
   18568:	6033      	str	r3, [r6, #0]
   1856a:	89a3      	ldrh	r3, [r4, #12]
   1856c:	061b      	lsls	r3, r3, #24
   1856e:	d503      	bpl.n	18578 <__swhatbuf_r+0x50>
   18570:	2340      	movs	r3, #64	; 0x40
   18572:	2000      	movs	r0, #0
   18574:	602b      	str	r3, [r5, #0]
   18576:	e7f4      	b.n	18562 <__swhatbuf_r+0x3a>
   18578:	2380      	movs	r3, #128	; 0x80
   1857a:	00db      	lsls	r3, r3, #3
   1857c:	602b      	str	r3, [r5, #0]
   1857e:	2000      	movs	r0, #0
   18580:	e7ef      	b.n	18562 <__swhatbuf_r+0x3a>
   18582:	46c0      	nop			; (mov r8, r8)
   18584:	ffffe000 	.word	0xffffe000

00018588 <__smakebuf_r>:
   18588:	b570      	push	{r4, r5, r6, lr}
   1858a:	898b      	ldrh	r3, [r1, #12]
   1858c:	b082      	sub	sp, #8
   1858e:	0006      	movs	r6, r0
   18590:	000c      	movs	r4, r1
   18592:	079b      	lsls	r3, r3, #30
   18594:	d507      	bpl.n	185a6 <__smakebuf_r+0x1e>
   18596:	0023      	movs	r3, r4
   18598:	3343      	adds	r3, #67	; 0x43
   1859a:	6023      	str	r3, [r4, #0]
   1859c:	6123      	str	r3, [r4, #16]
   1859e:	2301      	movs	r3, #1
   185a0:	6163      	str	r3, [r4, #20]
   185a2:	b002      	add	sp, #8
   185a4:	bd70      	pop	{r4, r5, r6, pc}
   185a6:	ab01      	add	r3, sp, #4
   185a8:	466a      	mov	r2, sp
   185aa:	f7ff ffbd 	bl	18528 <__swhatbuf_r>
   185ae:	9900      	ldr	r1, [sp, #0]
   185b0:	0005      	movs	r5, r0
   185b2:	0030      	movs	r0, r6
   185b4:	f7fc f9d6 	bl	14964 <_malloc_r>
   185b8:	2800      	cmp	r0, #0
   185ba:	d01e      	beq.n	185fa <__smakebuf_r+0x72>
   185bc:	2280      	movs	r2, #128	; 0x80
   185be:	4b15      	ldr	r3, [pc, #84]	; (18614 <__smakebuf_r+0x8c>)
   185c0:	63f3      	str	r3, [r6, #60]	; 0x3c
   185c2:	89a3      	ldrh	r3, [r4, #12]
   185c4:	6020      	str	r0, [r4, #0]
   185c6:	4313      	orrs	r3, r2
   185c8:	9a00      	ldr	r2, [sp, #0]
   185ca:	b21b      	sxth	r3, r3
   185cc:	6162      	str	r2, [r4, #20]
   185ce:	9a01      	ldr	r2, [sp, #4]
   185d0:	81a3      	strh	r3, [r4, #12]
   185d2:	6120      	str	r0, [r4, #16]
   185d4:	2a00      	cmp	r2, #0
   185d6:	d102      	bne.n	185de <__smakebuf_r+0x56>
   185d8:	432b      	orrs	r3, r5
   185da:	81a3      	strh	r3, [r4, #12]
   185dc:	e7e1      	b.n	185a2 <__smakebuf_r+0x1a>
   185de:	230e      	movs	r3, #14
   185e0:	5ee1      	ldrsh	r1, [r4, r3]
   185e2:	0030      	movs	r0, r6
   185e4:	f001 f808 	bl	195f8 <_isatty_r>
   185e8:	2800      	cmp	r0, #0
   185ea:	d010      	beq.n	1860e <__smakebuf_r+0x86>
   185ec:	2203      	movs	r2, #3
   185ee:	89a3      	ldrh	r3, [r4, #12]
   185f0:	4393      	bics	r3, r2
   185f2:	2201      	movs	r2, #1
   185f4:	4313      	orrs	r3, r2
   185f6:	b21b      	sxth	r3, r3
   185f8:	e7ee      	b.n	185d8 <__smakebuf_r+0x50>
   185fa:	220c      	movs	r2, #12
   185fc:	5ea3      	ldrsh	r3, [r4, r2]
   185fe:	059a      	lsls	r2, r3, #22
   18600:	d4cf      	bmi.n	185a2 <__smakebuf_r+0x1a>
   18602:	2203      	movs	r2, #3
   18604:	4393      	bics	r3, r2
   18606:	2202      	movs	r2, #2
   18608:	4313      	orrs	r3, r2
   1860a:	81a3      	strh	r3, [r4, #12]
   1860c:	e7c3      	b.n	18596 <__smakebuf_r+0xe>
   1860e:	220c      	movs	r2, #12
   18610:	5ea3      	ldrsh	r3, [r4, r2]
   18612:	e7e1      	b.n	185d8 <__smakebuf_r+0x50>
   18614:	00017e3d 	.word	0x00017e3d

00018618 <memchr>:
   18618:	b570      	push	{r4, r5, r6, lr}
   1861a:	b2cd      	uxtb	r5, r1
   1861c:	0783      	lsls	r3, r0, #30
   1861e:	d034      	beq.n	1868a <memchr+0x72>
   18620:	1e54      	subs	r4, r2, #1
   18622:	2a00      	cmp	r2, #0
   18624:	d01b      	beq.n	1865e <memchr+0x46>
   18626:	7803      	ldrb	r3, [r0, #0]
   18628:	42ab      	cmp	r3, r5
   1862a:	d019      	beq.n	18660 <memchr+0x48>
   1862c:	2203      	movs	r2, #3
   1862e:	e004      	b.n	1863a <memchr+0x22>
   18630:	3c01      	subs	r4, #1
   18632:	d314      	bcc.n	1865e <memchr+0x46>
   18634:	7803      	ldrb	r3, [r0, #0]
   18636:	42ab      	cmp	r3, r5
   18638:	d012      	beq.n	18660 <memchr+0x48>
   1863a:	3001      	adds	r0, #1
   1863c:	4210      	tst	r0, r2
   1863e:	d1f7      	bne.n	18630 <memchr+0x18>
   18640:	2c03      	cmp	r4, #3
   18642:	d80e      	bhi.n	18662 <memchr+0x4a>
   18644:	2c00      	cmp	r4, #0
   18646:	d00a      	beq.n	1865e <memchr+0x46>
   18648:	7803      	ldrb	r3, [r0, #0]
   1864a:	42ab      	cmp	r3, r5
   1864c:	d008      	beq.n	18660 <memchr+0x48>
   1864e:	1904      	adds	r4, r0, r4
   18650:	e002      	b.n	18658 <memchr+0x40>
   18652:	7803      	ldrb	r3, [r0, #0]
   18654:	42ab      	cmp	r3, r5
   18656:	d003      	beq.n	18660 <memchr+0x48>
   18658:	3001      	adds	r0, #1
   1865a:	4284      	cmp	r4, r0
   1865c:	d1f9      	bne.n	18652 <memchr+0x3a>
   1865e:	2000      	movs	r0, #0
   18660:	bd70      	pop	{r4, r5, r6, pc}
   18662:	22ff      	movs	r2, #255	; 0xff
   18664:	060b      	lsls	r3, r1, #24
   18666:	0c1b      	lsrs	r3, r3, #16
   18668:	4011      	ands	r1, r2
   1866a:	4319      	orrs	r1, r3
   1866c:	040b      	lsls	r3, r1, #16
   1866e:	4e08      	ldr	r6, [pc, #32]	; (18690 <memchr+0x78>)
   18670:	4319      	orrs	r1, r3
   18672:	6803      	ldr	r3, [r0, #0]
   18674:	4a07      	ldr	r2, [pc, #28]	; (18694 <memchr+0x7c>)
   18676:	404b      	eors	r3, r1
   18678:	189a      	adds	r2, r3, r2
   1867a:	439a      	bics	r2, r3
   1867c:	4232      	tst	r2, r6
   1867e:	d1e3      	bne.n	18648 <memchr+0x30>
   18680:	3c04      	subs	r4, #4
   18682:	3004      	adds	r0, #4
   18684:	2c03      	cmp	r4, #3
   18686:	d8f4      	bhi.n	18672 <memchr+0x5a>
   18688:	e7dc      	b.n	18644 <memchr+0x2c>
   1868a:	0014      	movs	r4, r2
   1868c:	e7d8      	b.n	18640 <memchr+0x28>
   1868e:	46c0      	nop			; (mov r8, r8)
   18690:	80808080 	.word	0x80808080
   18694:	fefefeff 	.word	0xfefefeff

00018698 <memmove>:
   18698:	b5f0      	push	{r4, r5, r6, r7, lr}
   1869a:	4288      	cmp	r0, r1
   1869c:	d90a      	bls.n	186b4 <memmove+0x1c>
   1869e:	188b      	adds	r3, r1, r2
   186a0:	4298      	cmp	r0, r3
   186a2:	d207      	bcs.n	186b4 <memmove+0x1c>
   186a4:	1e53      	subs	r3, r2, #1
   186a6:	2a00      	cmp	r2, #0
   186a8:	d003      	beq.n	186b2 <memmove+0x1a>
   186aa:	5cca      	ldrb	r2, [r1, r3]
   186ac:	54c2      	strb	r2, [r0, r3]
   186ae:	3b01      	subs	r3, #1
   186b0:	d2fb      	bcs.n	186aa <memmove+0x12>
   186b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   186b4:	0005      	movs	r5, r0
   186b6:	2a0f      	cmp	r2, #15
   186b8:	d808      	bhi.n	186cc <memmove+0x34>
   186ba:	2a00      	cmp	r2, #0
   186bc:	d0f9      	beq.n	186b2 <memmove+0x1a>
   186be:	2300      	movs	r3, #0
   186c0:	5ccc      	ldrb	r4, [r1, r3]
   186c2:	54ec      	strb	r4, [r5, r3]
   186c4:	3301      	adds	r3, #1
   186c6:	4293      	cmp	r3, r2
   186c8:	d1fa      	bne.n	186c0 <memmove+0x28>
   186ca:	e7f2      	b.n	186b2 <memmove+0x1a>
   186cc:	000b      	movs	r3, r1
   186ce:	4303      	orrs	r3, r0
   186d0:	079b      	lsls	r3, r3, #30
   186d2:	d12d      	bne.n	18730 <memmove+0x98>
   186d4:	0015      	movs	r5, r2
   186d6:	000c      	movs	r4, r1
   186d8:	0003      	movs	r3, r0
   186da:	3d10      	subs	r5, #16
   186dc:	092f      	lsrs	r7, r5, #4
   186de:	3701      	adds	r7, #1
   186e0:	013f      	lsls	r7, r7, #4
   186e2:	19c7      	adds	r7, r0, r7
   186e4:	6826      	ldr	r6, [r4, #0]
   186e6:	601e      	str	r6, [r3, #0]
   186e8:	6866      	ldr	r6, [r4, #4]
   186ea:	605e      	str	r6, [r3, #4]
   186ec:	68a6      	ldr	r6, [r4, #8]
   186ee:	609e      	str	r6, [r3, #8]
   186f0:	68e6      	ldr	r6, [r4, #12]
   186f2:	3410      	adds	r4, #16
   186f4:	60de      	str	r6, [r3, #12]
   186f6:	3310      	adds	r3, #16
   186f8:	429f      	cmp	r7, r3
   186fa:	d1f3      	bne.n	186e4 <memmove+0x4c>
   186fc:	240f      	movs	r4, #15
   186fe:	43a5      	bics	r5, r4
   18700:	3510      	adds	r5, #16
   18702:	1949      	adds	r1, r1, r5
   18704:	4014      	ands	r4, r2
   18706:	1945      	adds	r5, r0, r5
   18708:	2c03      	cmp	r4, #3
   1870a:	d913      	bls.n	18734 <memmove+0x9c>
   1870c:	2300      	movs	r3, #0
   1870e:	1f27      	subs	r7, r4, #4
   18710:	08be      	lsrs	r6, r7, #2
   18712:	3601      	adds	r6, #1
   18714:	00b6      	lsls	r6, r6, #2
   18716:	58cc      	ldr	r4, [r1, r3]
   18718:	50ec      	str	r4, [r5, r3]
   1871a:	3304      	adds	r3, #4
   1871c:	42b3      	cmp	r3, r6
   1871e:	d1fa      	bne.n	18716 <memmove+0x7e>
   18720:	2603      	movs	r6, #3
   18722:	43b7      	bics	r7, r6
   18724:	1d3c      	adds	r4, r7, #4
   18726:	1909      	adds	r1, r1, r4
   18728:	192d      	adds	r5, r5, r4
   1872a:	4032      	ands	r2, r6
   1872c:	d1c7      	bne.n	186be <memmove+0x26>
   1872e:	e7c0      	b.n	186b2 <memmove+0x1a>
   18730:	0005      	movs	r5, r0
   18732:	e7c4      	b.n	186be <memmove+0x26>
   18734:	0022      	movs	r2, r4
   18736:	e7c0      	b.n	186ba <memmove+0x22>

00018738 <_Balloc>:
   18738:	b570      	push	{r4, r5, r6, lr}
   1873a:	0004      	movs	r4, r0
   1873c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1873e:	000d      	movs	r5, r1
   18740:	2800      	cmp	r0, #0
   18742:	d00a      	beq.n	1875a <_Balloc+0x22>
   18744:	00ab      	lsls	r3, r5, #2
   18746:	18c3      	adds	r3, r0, r3
   18748:	6818      	ldr	r0, [r3, #0]
   1874a:	2800      	cmp	r0, #0
   1874c:	d00f      	beq.n	1876e <_Balloc+0x36>
   1874e:	6802      	ldr	r2, [r0, #0]
   18750:	601a      	str	r2, [r3, #0]
   18752:	2300      	movs	r3, #0
   18754:	6103      	str	r3, [r0, #16]
   18756:	60c3      	str	r3, [r0, #12]
   18758:	bd70      	pop	{r4, r5, r6, pc}
   1875a:	2221      	movs	r2, #33	; 0x21
   1875c:	2104      	movs	r1, #4
   1875e:	0020      	movs	r0, r4
   18760:	f000 fe18 	bl	19394 <_calloc_r>
   18764:	64e0      	str	r0, [r4, #76]	; 0x4c
   18766:	2800      	cmp	r0, #0
   18768:	d1ec      	bne.n	18744 <_Balloc+0xc>
   1876a:	2000      	movs	r0, #0
   1876c:	e7f4      	b.n	18758 <_Balloc+0x20>
   1876e:	2601      	movs	r6, #1
   18770:	40ae      	lsls	r6, r5
   18772:	1d72      	adds	r2, r6, #5
   18774:	0092      	lsls	r2, r2, #2
   18776:	2101      	movs	r1, #1
   18778:	0020      	movs	r0, r4
   1877a:	f000 fe0b 	bl	19394 <_calloc_r>
   1877e:	2800      	cmp	r0, #0
   18780:	d0f3      	beq.n	1876a <_Balloc+0x32>
   18782:	6045      	str	r5, [r0, #4]
   18784:	6086      	str	r6, [r0, #8]
   18786:	e7e4      	b.n	18752 <_Balloc+0x1a>

00018788 <_Bfree>:
   18788:	2900      	cmp	r1, #0
   1878a:	d006      	beq.n	1879a <_Bfree+0x12>
   1878c:	684b      	ldr	r3, [r1, #4]
   1878e:	009a      	lsls	r2, r3, #2
   18790:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   18792:	189b      	adds	r3, r3, r2
   18794:	681a      	ldr	r2, [r3, #0]
   18796:	600a      	str	r2, [r1, #0]
   18798:	6019      	str	r1, [r3, #0]
   1879a:	4770      	bx	lr

0001879c <__multadd>:
   1879c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1879e:	46ce      	mov	lr, r9
   187a0:	4647      	mov	r7, r8
   187a2:	4681      	mov	r9, r0
   187a4:	0008      	movs	r0, r1
   187a6:	b580      	push	{r7, lr}
   187a8:	000d      	movs	r5, r1
   187aa:	690c      	ldr	r4, [r1, #16]
   187ac:	001f      	movs	r7, r3
   187ae:	2100      	movs	r1, #0
   187b0:	3014      	adds	r0, #20
   187b2:	6803      	ldr	r3, [r0, #0]
   187b4:	3101      	adds	r1, #1
   187b6:	041e      	lsls	r6, r3, #16
   187b8:	0c36      	lsrs	r6, r6, #16
   187ba:	4356      	muls	r6, r2
   187bc:	0c1b      	lsrs	r3, r3, #16
   187be:	4353      	muls	r3, r2
   187c0:	19f6      	adds	r6, r6, r7
   187c2:	0c37      	lsrs	r7, r6, #16
   187c4:	19db      	adds	r3, r3, r7
   187c6:	0436      	lsls	r6, r6, #16
   187c8:	0c1f      	lsrs	r7, r3, #16
   187ca:	0c36      	lsrs	r6, r6, #16
   187cc:	041b      	lsls	r3, r3, #16
   187ce:	199b      	adds	r3, r3, r6
   187d0:	c008      	stmia	r0!, {r3}
   187d2:	428c      	cmp	r4, r1
   187d4:	dced      	bgt.n	187b2 <__multadd+0x16>
   187d6:	2f00      	cmp	r7, #0
   187d8:	d008      	beq.n	187ec <__multadd+0x50>
   187da:	68ab      	ldr	r3, [r5, #8]
   187dc:	429c      	cmp	r4, r3
   187de:	da0a      	bge.n	187f6 <__multadd+0x5a>
   187e0:	1d23      	adds	r3, r4, #4
   187e2:	009b      	lsls	r3, r3, #2
   187e4:	18eb      	adds	r3, r5, r3
   187e6:	3401      	adds	r4, #1
   187e8:	605f      	str	r7, [r3, #4]
   187ea:	612c      	str	r4, [r5, #16]
   187ec:	0028      	movs	r0, r5
   187ee:	bc0c      	pop	{r2, r3}
   187f0:	4690      	mov	r8, r2
   187f2:	4699      	mov	r9, r3
   187f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   187f6:	686b      	ldr	r3, [r5, #4]
   187f8:	4648      	mov	r0, r9
   187fa:	1c59      	adds	r1, r3, #1
   187fc:	f7ff ff9c 	bl	18738 <_Balloc>
   18800:	0029      	movs	r1, r5
   18802:	692b      	ldr	r3, [r5, #16]
   18804:	4680      	mov	r8, r0
   18806:	1c9a      	adds	r2, r3, #2
   18808:	0092      	lsls	r2, r2, #2
   1880a:	310c      	adds	r1, #12
   1880c:	300c      	adds	r0, #12
   1880e:	f7fc fb5d 	bl	14ecc <memcpy>
   18812:	686b      	ldr	r3, [r5, #4]
   18814:	009a      	lsls	r2, r3, #2
   18816:	464b      	mov	r3, r9
   18818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1881a:	189b      	adds	r3, r3, r2
   1881c:	681a      	ldr	r2, [r3, #0]
   1881e:	602a      	str	r2, [r5, #0]
   18820:	601d      	str	r5, [r3, #0]
   18822:	4645      	mov	r5, r8
   18824:	e7dc      	b.n	187e0 <__multadd+0x44>
   18826:	46c0      	nop			; (mov r8, r8)

00018828 <__hi0bits>:
   18828:	0003      	movs	r3, r0
   1882a:	0c02      	lsrs	r2, r0, #16
   1882c:	2000      	movs	r0, #0
   1882e:	2a00      	cmp	r2, #0
   18830:	d101      	bne.n	18836 <__hi0bits+0xe>
   18832:	041b      	lsls	r3, r3, #16
   18834:	3010      	adds	r0, #16
   18836:	0e1a      	lsrs	r2, r3, #24
   18838:	d101      	bne.n	1883e <__hi0bits+0x16>
   1883a:	3008      	adds	r0, #8
   1883c:	021b      	lsls	r3, r3, #8
   1883e:	0f1a      	lsrs	r2, r3, #28
   18840:	d101      	bne.n	18846 <__hi0bits+0x1e>
   18842:	3004      	adds	r0, #4
   18844:	011b      	lsls	r3, r3, #4
   18846:	0f9a      	lsrs	r2, r3, #30
   18848:	d101      	bne.n	1884e <__hi0bits+0x26>
   1884a:	3002      	adds	r0, #2
   1884c:	009b      	lsls	r3, r3, #2
   1884e:	2b00      	cmp	r3, #0
   18850:	db03      	blt.n	1885a <__hi0bits+0x32>
   18852:	3001      	adds	r0, #1
   18854:	005b      	lsls	r3, r3, #1
   18856:	d400      	bmi.n	1885a <__hi0bits+0x32>
   18858:	2020      	movs	r0, #32
   1885a:	4770      	bx	lr

0001885c <__lo0bits>:
   1885c:	6803      	ldr	r3, [r0, #0]
   1885e:	075a      	lsls	r2, r3, #29
   18860:	d009      	beq.n	18876 <__lo0bits+0x1a>
   18862:	2200      	movs	r2, #0
   18864:	07d9      	lsls	r1, r3, #31
   18866:	d404      	bmi.n	18872 <__lo0bits+0x16>
   18868:	079a      	lsls	r2, r3, #30
   1886a:	d420      	bmi.n	188ae <__lo0bits+0x52>
   1886c:	2202      	movs	r2, #2
   1886e:	089b      	lsrs	r3, r3, #2
   18870:	6003      	str	r3, [r0, #0]
   18872:	0010      	movs	r0, r2
   18874:	4770      	bx	lr
   18876:	0419      	lsls	r1, r3, #16
   18878:	2200      	movs	r2, #0
   1887a:	2900      	cmp	r1, #0
   1887c:	d101      	bne.n	18882 <__lo0bits+0x26>
   1887e:	0c1b      	lsrs	r3, r3, #16
   18880:	3210      	adds	r2, #16
   18882:	21ff      	movs	r1, #255	; 0xff
   18884:	4219      	tst	r1, r3
   18886:	d101      	bne.n	1888c <__lo0bits+0x30>
   18888:	3208      	adds	r2, #8
   1888a:	0a1b      	lsrs	r3, r3, #8
   1888c:	0719      	lsls	r1, r3, #28
   1888e:	d101      	bne.n	18894 <__lo0bits+0x38>
   18890:	3204      	adds	r2, #4
   18892:	091b      	lsrs	r3, r3, #4
   18894:	0799      	lsls	r1, r3, #30
   18896:	d101      	bne.n	1889c <__lo0bits+0x40>
   18898:	3202      	adds	r2, #2
   1889a:	089b      	lsrs	r3, r3, #2
   1889c:	07d9      	lsls	r1, r3, #31
   1889e:	d404      	bmi.n	188aa <__lo0bits+0x4e>
   188a0:	085b      	lsrs	r3, r3, #1
   188a2:	d101      	bne.n	188a8 <__lo0bits+0x4c>
   188a4:	2220      	movs	r2, #32
   188a6:	e7e4      	b.n	18872 <__lo0bits+0x16>
   188a8:	3201      	adds	r2, #1
   188aa:	6003      	str	r3, [r0, #0]
   188ac:	e7e1      	b.n	18872 <__lo0bits+0x16>
   188ae:	085b      	lsrs	r3, r3, #1
   188b0:	6003      	str	r3, [r0, #0]
   188b2:	2201      	movs	r2, #1
   188b4:	e7dd      	b.n	18872 <__lo0bits+0x16>
   188b6:	46c0      	nop			; (mov r8, r8)

000188b8 <__i2b>:
   188b8:	b510      	push	{r4, lr}
   188ba:	000c      	movs	r4, r1
   188bc:	2101      	movs	r1, #1
   188be:	f7ff ff3b 	bl	18738 <_Balloc>
   188c2:	2301      	movs	r3, #1
   188c4:	6144      	str	r4, [r0, #20]
   188c6:	6103      	str	r3, [r0, #16]
   188c8:	bd10      	pop	{r4, pc}
   188ca:	46c0      	nop			; (mov r8, r8)

000188cc <__multiply>:
   188cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   188ce:	4657      	mov	r7, sl
   188d0:	464e      	mov	r6, r9
   188d2:	4645      	mov	r5, r8
   188d4:	46de      	mov	lr, fp
   188d6:	b5e0      	push	{r5, r6, r7, lr}
   188d8:	6914      	ldr	r4, [r2, #16]
   188da:	690e      	ldr	r6, [r1, #16]
   188dc:	b085      	sub	sp, #20
   188de:	000f      	movs	r7, r1
   188e0:	0015      	movs	r5, r2
   188e2:	42a6      	cmp	r6, r4
   188e4:	da04      	bge.n	188f0 <__multiply+0x24>
   188e6:	0033      	movs	r3, r6
   188e8:	0017      	movs	r7, r2
   188ea:	0026      	movs	r6, r4
   188ec:	000d      	movs	r5, r1
   188ee:	001c      	movs	r4, r3
   188f0:	1933      	adds	r3, r6, r4
   188f2:	4698      	mov	r8, r3
   188f4:	68bb      	ldr	r3, [r7, #8]
   188f6:	6879      	ldr	r1, [r7, #4]
   188f8:	4598      	cmp	r8, r3
   188fa:	dd00      	ble.n	188fe <__multiply+0x32>
   188fc:	3101      	adds	r1, #1
   188fe:	f7ff ff1b 	bl	18738 <_Balloc>
   18902:	2214      	movs	r2, #20
   18904:	0003      	movs	r3, r0
   18906:	4694      	mov	ip, r2
   18908:	4463      	add	r3, ip
   1890a:	469b      	mov	fp, r3
   1890c:	4643      	mov	r3, r8
   1890e:	009b      	lsls	r3, r3, #2
   18910:	445b      	add	r3, fp
   18912:	0019      	movs	r1, r3
   18914:	9302      	str	r3, [sp, #8]
   18916:	9003      	str	r0, [sp, #12]
   18918:	465b      	mov	r3, fp
   1891a:	2200      	movs	r2, #0
   1891c:	458b      	cmp	fp, r1
   1891e:	d203      	bcs.n	18928 <__multiply+0x5c>
   18920:	9902      	ldr	r1, [sp, #8]
   18922:	c304      	stmia	r3!, {r2}
   18924:	4299      	cmp	r1, r3
   18926:	d8fc      	bhi.n	18922 <__multiply+0x56>
   18928:	2314      	movs	r3, #20
   1892a:	00a4      	lsls	r4, r4, #2
   1892c:	469a      	mov	sl, r3
   1892e:	3714      	adds	r7, #20
   18930:	0023      	movs	r3, r4
   18932:	46bc      	mov	ip, r7
   18934:	44aa      	add	sl, r5
   18936:	00b6      	lsls	r6, r6, #2
   18938:	4453      	add	r3, sl
   1893a:	9700      	str	r7, [sp, #0]
   1893c:	44b4      	add	ip, r6
   1893e:	9301      	str	r3, [sp, #4]
   18940:	459a      	cmp	sl, r3
   18942:	d24f      	bcs.n	189e4 <__multiply+0x118>
   18944:	4653      	mov	r3, sl
   18946:	681b      	ldr	r3, [r3, #0]
   18948:	041e      	lsls	r6, r3, #16
   1894a:	0c36      	lsrs	r6, r6, #16
   1894c:	d020      	beq.n	18990 <__multiply+0xc4>
   1894e:	465c      	mov	r4, fp
   18950:	2700      	movs	r7, #0
   18952:	9d00      	ldr	r5, [sp, #0]
   18954:	0021      	movs	r1, r4
   18956:	cc08      	ldmia	r4!, {r3}
   18958:	cd04      	ldmia	r5!, {r2}
   1895a:	4699      	mov	r9, r3
   1895c:	4648      	mov	r0, r9
   1895e:	0413      	lsls	r3, r2, #16
   18960:	0c1b      	lsrs	r3, r3, #16
   18962:	4373      	muls	r3, r6
   18964:	0400      	lsls	r0, r0, #16
   18966:	0c00      	lsrs	r0, r0, #16
   18968:	181b      	adds	r3, r3, r0
   1896a:	19d8      	adds	r0, r3, r7
   1896c:	0c13      	lsrs	r3, r2, #16
   1896e:	464a      	mov	r2, r9
   18970:	4373      	muls	r3, r6
   18972:	0c12      	lsrs	r2, r2, #16
   18974:	189b      	adds	r3, r3, r2
   18976:	0c02      	lsrs	r2, r0, #16
   18978:	189b      	adds	r3, r3, r2
   1897a:	0402      	lsls	r2, r0, #16
   1897c:	0c1f      	lsrs	r7, r3, #16
   1897e:	0c12      	lsrs	r2, r2, #16
   18980:	041b      	lsls	r3, r3, #16
   18982:	4313      	orrs	r3, r2
   18984:	600b      	str	r3, [r1, #0]
   18986:	45ac      	cmp	ip, r5
   18988:	d8e4      	bhi.n	18954 <__multiply+0x88>
   1898a:	4653      	mov	r3, sl
   1898c:	6027      	str	r7, [r4, #0]
   1898e:	681b      	ldr	r3, [r3, #0]
   18990:	0c1e      	lsrs	r6, r3, #16
   18992:	d020      	beq.n	189d6 <__multiply+0x10a>
   18994:	465b      	mov	r3, fp
   18996:	2100      	movs	r1, #0
   18998:	681b      	ldr	r3, [r3, #0]
   1899a:	465c      	mov	r4, fp
   1899c:	0018      	movs	r0, r3
   1899e:	000f      	movs	r7, r1
   189a0:	4662      	mov	r2, ip
   189a2:	9d00      	ldr	r5, [sp, #0]
   189a4:	8829      	ldrh	r1, [r5, #0]
   189a6:	0c00      	lsrs	r0, r0, #16
   189a8:	4371      	muls	r1, r6
   189aa:	1809      	adds	r1, r1, r0
   189ac:	19c9      	adds	r1, r1, r7
   189ae:	041b      	lsls	r3, r3, #16
   189b0:	0408      	lsls	r0, r1, #16
   189b2:	0c1b      	lsrs	r3, r3, #16
   189b4:	4303      	orrs	r3, r0
   189b6:	6023      	str	r3, [r4, #0]
   189b8:	cd08      	ldmia	r5!, {r3}
   189ba:	6860      	ldr	r0, [r4, #4]
   189bc:	0c1b      	lsrs	r3, r3, #16
   189be:	4373      	muls	r3, r6
   189c0:	0407      	lsls	r7, r0, #16
   189c2:	0c3f      	lsrs	r7, r7, #16
   189c4:	19db      	adds	r3, r3, r7
   189c6:	0c09      	lsrs	r1, r1, #16
   189c8:	185b      	adds	r3, r3, r1
   189ca:	0c1f      	lsrs	r7, r3, #16
   189cc:	3404      	adds	r4, #4
   189ce:	42aa      	cmp	r2, r5
   189d0:	d8e8      	bhi.n	189a4 <__multiply+0xd8>
   189d2:	4694      	mov	ip, r2
   189d4:	6023      	str	r3, [r4, #0]
   189d6:	2304      	movs	r3, #4
   189d8:	4699      	mov	r9, r3
   189da:	9b01      	ldr	r3, [sp, #4]
   189dc:	44ca      	add	sl, r9
   189de:	44cb      	add	fp, r9
   189e0:	4553      	cmp	r3, sl
   189e2:	d8af      	bhi.n	18944 <__multiply+0x78>
   189e4:	4643      	mov	r3, r8
   189e6:	2b00      	cmp	r3, #0
   189e8:	dd0e      	ble.n	18a08 <__multiply+0x13c>
   189ea:	9b02      	ldr	r3, [sp, #8]
   189ec:	3b04      	subs	r3, #4
   189ee:	681a      	ldr	r2, [r3, #0]
   189f0:	2a00      	cmp	r2, #0
   189f2:	d109      	bne.n	18a08 <__multiply+0x13c>
   189f4:	4642      	mov	r2, r8
   189f6:	e003      	b.n	18a00 <__multiply+0x134>
   189f8:	3b04      	subs	r3, #4
   189fa:	6819      	ldr	r1, [r3, #0]
   189fc:	2900      	cmp	r1, #0
   189fe:	d102      	bne.n	18a06 <__multiply+0x13a>
   18a00:	3a01      	subs	r2, #1
   18a02:	2a00      	cmp	r2, #0
   18a04:	d1f8      	bne.n	189f8 <__multiply+0x12c>
   18a06:	4690      	mov	r8, r2
   18a08:	9b03      	ldr	r3, [sp, #12]
   18a0a:	4642      	mov	r2, r8
   18a0c:	0018      	movs	r0, r3
   18a0e:	611a      	str	r2, [r3, #16]
   18a10:	b005      	add	sp, #20
   18a12:	bc3c      	pop	{r2, r3, r4, r5}
   18a14:	4690      	mov	r8, r2
   18a16:	4699      	mov	r9, r3
   18a18:	46a2      	mov	sl, r4
   18a1a:	46ab      	mov	fp, r5
   18a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18a1e:	46c0      	nop			; (mov r8, r8)

00018a20 <__pow5mult>:
   18a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18a22:	4647      	mov	r7, r8
   18a24:	46ce      	mov	lr, r9
   18a26:	2303      	movs	r3, #3
   18a28:	b580      	push	{r7, lr}
   18a2a:	4680      	mov	r8, r0
   18a2c:	000f      	movs	r7, r1
   18a2e:	0014      	movs	r4, r2
   18a30:	4013      	ands	r3, r2
   18a32:	d13a      	bne.n	18aaa <__pow5mult+0x8a>
   18a34:	10a4      	asrs	r4, r4, #2
   18a36:	003e      	movs	r6, r7
   18a38:	2c00      	cmp	r4, #0
   18a3a:	d025      	beq.n	18a88 <__pow5mult+0x68>
   18a3c:	4643      	mov	r3, r8
   18a3e:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   18a40:	2d00      	cmp	r5, #0
   18a42:	d03b      	beq.n	18abc <__pow5mult+0x9c>
   18a44:	003e      	movs	r6, r7
   18a46:	2300      	movs	r3, #0
   18a48:	2701      	movs	r7, #1
   18a4a:	4699      	mov	r9, r3
   18a4c:	4227      	tst	r7, r4
   18a4e:	d107      	bne.n	18a60 <__pow5mult+0x40>
   18a50:	1064      	asrs	r4, r4, #1
   18a52:	d019      	beq.n	18a88 <__pow5mult+0x68>
   18a54:	6828      	ldr	r0, [r5, #0]
   18a56:	2800      	cmp	r0, #0
   18a58:	d01b      	beq.n	18a92 <__pow5mult+0x72>
   18a5a:	0005      	movs	r5, r0
   18a5c:	4227      	tst	r7, r4
   18a5e:	d0f7      	beq.n	18a50 <__pow5mult+0x30>
   18a60:	002a      	movs	r2, r5
   18a62:	0031      	movs	r1, r6
   18a64:	4640      	mov	r0, r8
   18a66:	f7ff ff31 	bl	188cc <__multiply>
   18a6a:	2e00      	cmp	r6, #0
   18a6c:	d01b      	beq.n	18aa6 <__pow5mult+0x86>
   18a6e:	4642      	mov	r2, r8
   18a70:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   18a72:	6873      	ldr	r3, [r6, #4]
   18a74:	4694      	mov	ip, r2
   18a76:	009b      	lsls	r3, r3, #2
   18a78:	4463      	add	r3, ip
   18a7a:	681a      	ldr	r2, [r3, #0]
   18a7c:	1064      	asrs	r4, r4, #1
   18a7e:	6032      	str	r2, [r6, #0]
   18a80:	601e      	str	r6, [r3, #0]
   18a82:	0006      	movs	r6, r0
   18a84:	2c00      	cmp	r4, #0
   18a86:	d1e5      	bne.n	18a54 <__pow5mult+0x34>
   18a88:	0030      	movs	r0, r6
   18a8a:	bc0c      	pop	{r2, r3}
   18a8c:	4690      	mov	r8, r2
   18a8e:	4699      	mov	r9, r3
   18a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18a92:	002a      	movs	r2, r5
   18a94:	0029      	movs	r1, r5
   18a96:	4640      	mov	r0, r8
   18a98:	f7ff ff18 	bl	188cc <__multiply>
   18a9c:	464b      	mov	r3, r9
   18a9e:	6028      	str	r0, [r5, #0]
   18aa0:	6003      	str	r3, [r0, #0]
   18aa2:	0005      	movs	r5, r0
   18aa4:	e7da      	b.n	18a5c <__pow5mult+0x3c>
   18aa6:	0006      	movs	r6, r0
   18aa8:	e7d2      	b.n	18a50 <__pow5mult+0x30>
   18aaa:	4a0b      	ldr	r2, [pc, #44]	; (18ad8 <__pow5mult+0xb8>)
   18aac:	3b01      	subs	r3, #1
   18aae:	009b      	lsls	r3, r3, #2
   18ab0:	589a      	ldr	r2, [r3, r2]
   18ab2:	2300      	movs	r3, #0
   18ab4:	f7ff fe72 	bl	1879c <__multadd>
   18ab8:	0007      	movs	r7, r0
   18aba:	e7bb      	b.n	18a34 <__pow5mult+0x14>
   18abc:	2101      	movs	r1, #1
   18abe:	4640      	mov	r0, r8
   18ac0:	f7ff fe3a 	bl	18738 <_Balloc>
   18ac4:	4b05      	ldr	r3, [pc, #20]	; (18adc <__pow5mult+0xbc>)
   18ac6:	0005      	movs	r5, r0
   18ac8:	6143      	str	r3, [r0, #20]
   18aca:	2301      	movs	r3, #1
   18acc:	6103      	str	r3, [r0, #16]
   18ace:	4643      	mov	r3, r8
   18ad0:	6498      	str	r0, [r3, #72]	; 0x48
   18ad2:	2300      	movs	r3, #0
   18ad4:	6003      	str	r3, [r0, #0]
   18ad6:	e7b5      	b.n	18a44 <__pow5mult+0x24>
   18ad8:	0001b190 	.word	0x0001b190
   18adc:	00000271 	.word	0x00000271

00018ae0 <__lshift>:
   18ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18ae2:	464e      	mov	r6, r9
   18ae4:	4645      	mov	r5, r8
   18ae6:	46de      	mov	lr, fp
   18ae8:	4657      	mov	r7, sl
   18aea:	b5e0      	push	{r5, r6, r7, lr}
   18aec:	000e      	movs	r6, r1
   18aee:	6933      	ldr	r3, [r6, #16]
   18af0:	1154      	asrs	r4, r2, #5
   18af2:	4698      	mov	r8, r3
   18af4:	44a0      	add	r8, r4
   18af6:	4643      	mov	r3, r8
   18af8:	1c5d      	adds	r5, r3, #1
   18afa:	68b3      	ldr	r3, [r6, #8]
   18afc:	4683      	mov	fp, r0
   18afe:	4691      	mov	r9, r2
   18b00:	6849      	ldr	r1, [r1, #4]
   18b02:	429d      	cmp	r5, r3
   18b04:	dd03      	ble.n	18b0e <__lshift+0x2e>
   18b06:	3101      	adds	r1, #1
   18b08:	005b      	lsls	r3, r3, #1
   18b0a:	429d      	cmp	r5, r3
   18b0c:	dcfb      	bgt.n	18b06 <__lshift+0x26>
   18b0e:	4658      	mov	r0, fp
   18b10:	f7ff fe12 	bl	18738 <_Balloc>
   18b14:	0003      	movs	r3, r0
   18b16:	4684      	mov	ip, r0
   18b18:	3314      	adds	r3, #20
   18b1a:	2c00      	cmp	r4, #0
   18b1c:	dd06      	ble.n	18b2c <__lshift+0x4c>
   18b1e:	2100      	movs	r1, #0
   18b20:	00a4      	lsls	r4, r4, #2
   18b22:	001a      	movs	r2, r3
   18b24:	191b      	adds	r3, r3, r4
   18b26:	c202      	stmia	r2!, {r1}
   18b28:	4293      	cmp	r3, r2
   18b2a:	d1fc      	bne.n	18b26 <__lshift+0x46>
   18b2c:	6932      	ldr	r2, [r6, #16]
   18b2e:	4648      	mov	r0, r9
   18b30:	0097      	lsls	r7, r2, #2
   18b32:	0031      	movs	r1, r6
   18b34:	221f      	movs	r2, #31
   18b36:	3114      	adds	r1, #20
   18b38:	4010      	ands	r0, r2
   18b3a:	19cf      	adds	r7, r1, r7
   18b3c:	4681      	mov	r9, r0
   18b3e:	2800      	cmp	r0, #0
   18b40:	d025      	beq.n	18b8e <__lshift+0xae>
   18b42:	2220      	movs	r2, #32
   18b44:	1a12      	subs	r2, r2, r0
   18b46:	4692      	mov	sl, r2
   18b48:	2200      	movs	r2, #0
   18b4a:	4648      	mov	r0, r9
   18b4c:	680c      	ldr	r4, [r1, #0]
   18b4e:	4084      	lsls	r4, r0
   18b50:	4650      	mov	r0, sl
   18b52:	4314      	orrs	r4, r2
   18b54:	601c      	str	r4, [r3, #0]
   18b56:	c904      	ldmia	r1!, {r2}
   18b58:	3304      	adds	r3, #4
   18b5a:	40c2      	lsrs	r2, r0
   18b5c:	428f      	cmp	r7, r1
   18b5e:	d8f4      	bhi.n	18b4a <__lshift+0x6a>
   18b60:	601a      	str	r2, [r3, #0]
   18b62:	2a00      	cmp	r2, #0
   18b64:	d001      	beq.n	18b6a <__lshift+0x8a>
   18b66:	4645      	mov	r5, r8
   18b68:	3502      	adds	r5, #2
   18b6a:	4663      	mov	r3, ip
   18b6c:	3d01      	subs	r5, #1
   18b6e:	611d      	str	r5, [r3, #16]
   18b70:	6873      	ldr	r3, [r6, #4]
   18b72:	4660      	mov	r0, ip
   18b74:	009a      	lsls	r2, r3, #2
   18b76:	465b      	mov	r3, fp
   18b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   18b7a:	189b      	adds	r3, r3, r2
   18b7c:	681a      	ldr	r2, [r3, #0]
   18b7e:	6032      	str	r2, [r6, #0]
   18b80:	601e      	str	r6, [r3, #0]
   18b82:	bc3c      	pop	{r2, r3, r4, r5}
   18b84:	4690      	mov	r8, r2
   18b86:	4699      	mov	r9, r3
   18b88:	46a2      	mov	sl, r4
   18b8a:	46ab      	mov	fp, r5
   18b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18b8e:	c904      	ldmia	r1!, {r2}
   18b90:	c304      	stmia	r3!, {r2}
   18b92:	428f      	cmp	r7, r1
   18b94:	d9e9      	bls.n	18b6a <__lshift+0x8a>
   18b96:	c904      	ldmia	r1!, {r2}
   18b98:	c304      	stmia	r3!, {r2}
   18b9a:	428f      	cmp	r7, r1
   18b9c:	d8f7      	bhi.n	18b8e <__lshift+0xae>
   18b9e:	e7e4      	b.n	18b6a <__lshift+0x8a>

00018ba0 <__mcmp>:
   18ba0:	690a      	ldr	r2, [r1, #16]
   18ba2:	6903      	ldr	r3, [r0, #16]
   18ba4:	b530      	push	{r4, r5, lr}
   18ba6:	0005      	movs	r5, r0
   18ba8:	1a98      	subs	r0, r3, r2
   18baa:	d111      	bne.n	18bd0 <__mcmp+0x30>
   18bac:	0092      	lsls	r2, r2, #2
   18bae:	3514      	adds	r5, #20
   18bb0:	3114      	adds	r1, #20
   18bb2:	18ab      	adds	r3, r5, r2
   18bb4:	1889      	adds	r1, r1, r2
   18bb6:	e001      	b.n	18bbc <__mcmp+0x1c>
   18bb8:	429d      	cmp	r5, r3
   18bba:	d209      	bcs.n	18bd0 <__mcmp+0x30>
   18bbc:	3b04      	subs	r3, #4
   18bbe:	3904      	subs	r1, #4
   18bc0:	681c      	ldr	r4, [r3, #0]
   18bc2:	680a      	ldr	r2, [r1, #0]
   18bc4:	4294      	cmp	r4, r2
   18bc6:	d0f7      	beq.n	18bb8 <__mcmp+0x18>
   18bc8:	4294      	cmp	r4, r2
   18bca:	4180      	sbcs	r0, r0
   18bcc:	2201      	movs	r2, #1
   18bce:	4310      	orrs	r0, r2
   18bd0:	bd30      	pop	{r4, r5, pc}
   18bd2:	46c0      	nop			; (mov r8, r8)

00018bd4 <__mdiff>:
   18bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18bd6:	4645      	mov	r5, r8
   18bd8:	46de      	mov	lr, fp
   18bda:	4657      	mov	r7, sl
   18bdc:	464e      	mov	r6, r9
   18bde:	0014      	movs	r4, r2
   18be0:	690b      	ldr	r3, [r1, #16]
   18be2:	6912      	ldr	r2, [r2, #16]
   18be4:	b5e0      	push	{r5, r6, r7, lr}
   18be6:	4688      	mov	r8, r1
   18be8:	1a9d      	subs	r5, r3, r2
   18bea:	d11a      	bne.n	18c22 <__mdiff+0x4e>
   18bec:	000f      	movs	r7, r1
   18bee:	2114      	movs	r1, #20
   18bf0:	468c      	mov	ip, r1
   18bf2:	0092      	lsls	r2, r2, #2
   18bf4:	3714      	adds	r7, #20
   18bf6:	44a4      	add	ip, r4
   18bf8:	18bb      	adds	r3, r7, r2
   18bfa:	4462      	add	r2, ip
   18bfc:	e002      	b.n	18c04 <__mdiff+0x30>
   18bfe:	429f      	cmp	r7, r3
   18c00:	d300      	bcc.n	18c04 <__mdiff+0x30>
   18c02:	e070      	b.n	18ce6 <__mdiff+0x112>
   18c04:	3b04      	subs	r3, #4
   18c06:	3a04      	subs	r2, #4
   18c08:	681e      	ldr	r6, [r3, #0]
   18c0a:	6811      	ldr	r1, [r2, #0]
   18c0c:	428e      	cmp	r6, r1
   18c0e:	d0f6      	beq.n	18bfe <__mdiff+0x2a>
   18c10:	d300      	bcc.n	18c14 <__mdiff+0x40>
   18c12:	e071      	b.n	18cf8 <__mdiff+0x124>
   18c14:	4643      	mov	r3, r8
   18c16:	003e      	movs	r6, r7
   18c18:	46a0      	mov	r8, r4
   18c1a:	4667      	mov	r7, ip
   18c1c:	001c      	movs	r4, r3
   18c1e:	2501      	movs	r5, #1
   18c20:	e006      	b.n	18c30 <__mdiff+0x5c>
   18c22:	2d00      	cmp	r5, #0
   18c24:	db6a      	blt.n	18cfc <__mdiff+0x128>
   18c26:	4647      	mov	r7, r8
   18c28:	0026      	movs	r6, r4
   18c2a:	2500      	movs	r5, #0
   18c2c:	3714      	adds	r7, #20
   18c2e:	3614      	adds	r6, #20
   18c30:	4643      	mov	r3, r8
   18c32:	6859      	ldr	r1, [r3, #4]
   18c34:	f7ff fd80 	bl	18738 <_Balloc>
   18c38:	4643      	mov	r3, r8
   18c3a:	4681      	mov	r9, r0
   18c3c:	60c5      	str	r5, [r0, #12]
   18c3e:	6918      	ldr	r0, [r3, #16]
   18c40:	464d      	mov	r5, r9
   18c42:	0083      	lsls	r3, r0, #2
   18c44:	469c      	mov	ip, r3
   18c46:	6923      	ldr	r3, [r4, #16]
   18c48:	44bc      	add	ip, r7
   18c4a:	009b      	lsls	r3, r3, #2
   18c4c:	4698      	mov	r8, r3
   18c4e:	2300      	movs	r3, #0
   18c50:	44b0      	add	r8, r6
   18c52:	3514      	adds	r5, #20
   18c54:	469a      	mov	sl, r3
   18c56:	e000      	b.n	18c5a <__mdiff+0x86>
   18c58:	0027      	movs	r7, r4
   18c5a:	ce04      	ldmia	r6!, {r2}
   18c5c:	003c      	movs	r4, r7
   18c5e:	4693      	mov	fp, r2
   18c60:	4659      	mov	r1, fp
   18c62:	cc08      	ldmia	r4!, {r3}
   18c64:	0409      	lsls	r1, r1, #16
   18c66:	041a      	lsls	r2, r3, #16
   18c68:	0c12      	lsrs	r2, r2, #16
   18c6a:	4452      	add	r2, sl
   18c6c:	0c09      	lsrs	r1, r1, #16
   18c6e:	1a52      	subs	r2, r2, r1
   18c70:	0c19      	lsrs	r1, r3, #16
   18c72:	465b      	mov	r3, fp
   18c74:	0c1b      	lsrs	r3, r3, #16
   18c76:	1acb      	subs	r3, r1, r3
   18c78:	1411      	asrs	r1, r2, #16
   18c7a:	185b      	adds	r3, r3, r1
   18c7c:	0412      	lsls	r2, r2, #16
   18c7e:	1419      	asrs	r1, r3, #16
   18c80:	0c12      	lsrs	r2, r2, #16
   18c82:	041b      	lsls	r3, r3, #16
   18c84:	468a      	mov	sl, r1
   18c86:	4313      	orrs	r3, r2
   18c88:	1d29      	adds	r1, r5, #4
   18c8a:	602b      	str	r3, [r5, #0]
   18c8c:	000d      	movs	r5, r1
   18c8e:	45b0      	cmp	r8, r6
   18c90:	d8e2      	bhi.n	18c58 <__mdiff+0x84>
   18c92:	45a4      	cmp	ip, r4
   18c94:	d916      	bls.n	18cc4 <__mdiff+0xf0>
   18c96:	cc08      	ldmia	r4!, {r3}
   18c98:	041a      	lsls	r2, r3, #16
   18c9a:	0c12      	lsrs	r2, r2, #16
   18c9c:	4452      	add	r2, sl
   18c9e:	1416      	asrs	r6, r2, #16
   18ca0:	0c1b      	lsrs	r3, r3, #16
   18ca2:	199b      	adds	r3, r3, r6
   18ca4:	0412      	lsls	r2, r2, #16
   18ca6:	141e      	asrs	r6, r3, #16
   18ca8:	0c12      	lsrs	r2, r2, #16
   18caa:	041b      	lsls	r3, r3, #16
   18cac:	4313      	orrs	r3, r2
   18cae:	46b2      	mov	sl, r6
   18cb0:	c508      	stmia	r5!, {r3}
   18cb2:	45a4      	cmp	ip, r4
   18cb4:	d8ef      	bhi.n	18c96 <__mdiff+0xc2>
   18cb6:	4662      	mov	r2, ip
   18cb8:	2403      	movs	r4, #3
   18cba:	1bd2      	subs	r2, r2, r7
   18cbc:	3a05      	subs	r2, #5
   18cbe:	43a2      	bics	r2, r4
   18cc0:	3204      	adds	r2, #4
   18cc2:	1889      	adds	r1, r1, r2
   18cc4:	3904      	subs	r1, #4
   18cc6:	2b00      	cmp	r3, #0
   18cc8:	d104      	bne.n	18cd4 <__mdiff+0x100>
   18cca:	3904      	subs	r1, #4
   18ccc:	680b      	ldr	r3, [r1, #0]
   18cce:	3801      	subs	r0, #1
   18cd0:	2b00      	cmp	r3, #0
   18cd2:	d0fa      	beq.n	18cca <__mdiff+0xf6>
   18cd4:	464b      	mov	r3, r9
   18cd6:	6118      	str	r0, [r3, #16]
   18cd8:	4648      	mov	r0, r9
   18cda:	bc3c      	pop	{r2, r3, r4, r5}
   18cdc:	4690      	mov	r8, r2
   18cde:	4699      	mov	r9, r3
   18ce0:	46a2      	mov	sl, r4
   18ce2:	46ab      	mov	fp, r5
   18ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18ce6:	2100      	movs	r1, #0
   18ce8:	f7ff fd26 	bl	18738 <_Balloc>
   18cec:	2301      	movs	r3, #1
   18cee:	6103      	str	r3, [r0, #16]
   18cf0:	2300      	movs	r3, #0
   18cf2:	4681      	mov	r9, r0
   18cf4:	6143      	str	r3, [r0, #20]
   18cf6:	e7ef      	b.n	18cd8 <__mdiff+0x104>
   18cf8:	4666      	mov	r6, ip
   18cfa:	e799      	b.n	18c30 <__mdiff+0x5c>
   18cfc:	0027      	movs	r7, r4
   18cfe:	000e      	movs	r6, r1
   18d00:	46a0      	mov	r8, r4
   18d02:	3714      	adds	r7, #20
   18d04:	3614      	adds	r6, #20
   18d06:	000c      	movs	r4, r1
   18d08:	2501      	movs	r5, #1
   18d0a:	e791      	b.n	18c30 <__mdiff+0x5c>

00018d0c <__d2b>:
   18d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   18d0e:	2101      	movs	r1, #1
   18d10:	001c      	movs	r4, r3
   18d12:	b083      	sub	sp, #12
   18d14:	9e08      	ldr	r6, [sp, #32]
   18d16:	0015      	movs	r5, r2
   18d18:	f7ff fd0e 	bl	18738 <_Balloc>
   18d1c:	0323      	lsls	r3, r4, #12
   18d1e:	0064      	lsls	r4, r4, #1
   18d20:	0007      	movs	r7, r0
   18d22:	0b1b      	lsrs	r3, r3, #12
   18d24:	0d64      	lsrs	r4, r4, #21
   18d26:	d002      	beq.n	18d2e <__d2b+0x22>
   18d28:	2280      	movs	r2, #128	; 0x80
   18d2a:	0352      	lsls	r2, r2, #13
   18d2c:	4313      	orrs	r3, r2
   18d2e:	9301      	str	r3, [sp, #4]
   18d30:	2d00      	cmp	r5, #0
   18d32:	d019      	beq.n	18d68 <__d2b+0x5c>
   18d34:	4668      	mov	r0, sp
   18d36:	9500      	str	r5, [sp, #0]
   18d38:	f7ff fd90 	bl	1885c <__lo0bits>
   18d3c:	2800      	cmp	r0, #0
   18d3e:	d130      	bne.n	18da2 <__d2b+0x96>
   18d40:	9b00      	ldr	r3, [sp, #0]
   18d42:	617b      	str	r3, [r7, #20]
   18d44:	9b01      	ldr	r3, [sp, #4]
   18d46:	61bb      	str	r3, [r7, #24]
   18d48:	1e5a      	subs	r2, r3, #1
   18d4a:	4193      	sbcs	r3, r2
   18d4c:	1c5d      	adds	r5, r3, #1
   18d4e:	613d      	str	r5, [r7, #16]
   18d50:	2c00      	cmp	r4, #0
   18d52:	d014      	beq.n	18d7e <__d2b+0x72>
   18d54:	4b19      	ldr	r3, [pc, #100]	; (18dbc <__d2b+0xb0>)
   18d56:	469c      	mov	ip, r3
   18d58:	2335      	movs	r3, #53	; 0x35
   18d5a:	4464      	add	r4, ip
   18d5c:	1824      	adds	r4, r4, r0
   18d5e:	1a18      	subs	r0, r3, r0
   18d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18d62:	6034      	str	r4, [r6, #0]
   18d64:	6018      	str	r0, [r3, #0]
   18d66:	e019      	b.n	18d9c <__d2b+0x90>
   18d68:	a801      	add	r0, sp, #4
   18d6a:	f7ff fd77 	bl	1885c <__lo0bits>
   18d6e:	9b01      	ldr	r3, [sp, #4]
   18d70:	3020      	adds	r0, #32
   18d72:	617b      	str	r3, [r7, #20]
   18d74:	2301      	movs	r3, #1
   18d76:	2501      	movs	r5, #1
   18d78:	613b      	str	r3, [r7, #16]
   18d7a:	2c00      	cmp	r4, #0
   18d7c:	d1ea      	bne.n	18d54 <__d2b+0x48>
   18d7e:	4b10      	ldr	r3, [pc, #64]	; (18dc0 <__d2b+0xb4>)
   18d80:	469c      	mov	ip, r3
   18d82:	4b10      	ldr	r3, [pc, #64]	; (18dc4 <__d2b+0xb8>)
   18d84:	4460      	add	r0, ip
   18d86:	18eb      	adds	r3, r5, r3
   18d88:	009b      	lsls	r3, r3, #2
   18d8a:	18fb      	adds	r3, r7, r3
   18d8c:	6030      	str	r0, [r6, #0]
   18d8e:	6958      	ldr	r0, [r3, #20]
   18d90:	f7ff fd4a 	bl	18828 <__hi0bits>
   18d94:	016b      	lsls	r3, r5, #5
   18d96:	1a18      	subs	r0, r3, r0
   18d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18d9a:	6018      	str	r0, [r3, #0]
   18d9c:	0038      	movs	r0, r7
   18d9e:	b003      	add	sp, #12
   18da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18da2:	9b01      	ldr	r3, [sp, #4]
   18da4:	2220      	movs	r2, #32
   18da6:	0019      	movs	r1, r3
   18da8:	1a12      	subs	r2, r2, r0
   18daa:	4091      	lsls	r1, r2
   18dac:	000a      	movs	r2, r1
   18dae:	40c3      	lsrs	r3, r0
   18db0:	9900      	ldr	r1, [sp, #0]
   18db2:	9301      	str	r3, [sp, #4]
   18db4:	430a      	orrs	r2, r1
   18db6:	617a      	str	r2, [r7, #20]
   18db8:	e7c5      	b.n	18d46 <__d2b+0x3a>
   18dba:	46c0      	nop			; (mov r8, r8)
   18dbc:	fffffbcd 	.word	0xfffffbcd
   18dc0:	fffffbce 	.word	0xfffffbce
   18dc4:	3fffffff 	.word	0x3fffffff

00018dc8 <_realloc_r>:
   18dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   18dca:	464e      	mov	r6, r9
   18dcc:	4645      	mov	r5, r8
   18dce:	46de      	mov	lr, fp
   18dd0:	4657      	mov	r7, sl
   18dd2:	b5e0      	push	{r5, r6, r7, lr}
   18dd4:	b085      	sub	sp, #20
   18dd6:	9001      	str	r0, [sp, #4]
   18dd8:	000e      	movs	r6, r1
   18dda:	0015      	movs	r5, r2
   18ddc:	2900      	cmp	r1, #0
   18dde:	d100      	bne.n	18de2 <_realloc_r+0x1a>
   18de0:	e09e      	b.n	18f20 <_realloc_r+0x158>
   18de2:	0037      	movs	r7, r6
   18de4:	9801      	ldr	r0, [sp, #4]
   18de6:	3f08      	subs	r7, #8
   18de8:	f7fc f8fc 	bl	14fe4 <__malloc_lock>
   18dec:	687a      	ldr	r2, [r7, #4]
   18dee:	2303      	movs	r3, #3
   18df0:	0014      	movs	r4, r2
   18df2:	439c      	bics	r4, r3
   18df4:	002b      	movs	r3, r5
   18df6:	330b      	adds	r3, #11
   18df8:	46b9      	mov	r9, r7
   18dfa:	2b16      	cmp	r3, #22
   18dfc:	d847      	bhi.n	18e8e <_realloc_r+0xc6>
   18dfe:	2110      	movs	r1, #16
   18e00:	2310      	movs	r3, #16
   18e02:	4688      	mov	r8, r1
   18e04:	4545      	cmp	r5, r8
   18e06:	d846      	bhi.n	18e96 <_realloc_r+0xce>
   18e08:	429c      	cmp	r4, r3
   18e0a:	da49      	bge.n	18ea0 <_realloc_r+0xd8>
   18e0c:	49cc      	ldr	r1, [pc, #816]	; (19140 <_realloc_r+0x378>)
   18e0e:	1938      	adds	r0, r7, r4
   18e10:	468b      	mov	fp, r1
   18e12:	6889      	ldr	r1, [r1, #8]
   18e14:	9002      	str	r0, [sp, #8]
   18e16:	4288      	cmp	r0, r1
   18e18:	d100      	bne.n	18e1c <_realloc_r+0x54>
   18e1a:	e0c2      	b.n	18fa2 <_realloc_r+0x1da>
   18e1c:	2101      	movs	r1, #1
   18e1e:	468a      	mov	sl, r1
   18e20:	6840      	ldr	r0, [r0, #4]
   18e22:	0001      	movs	r1, r0
   18e24:	9003      	str	r0, [sp, #12]
   18e26:	4650      	mov	r0, sl
   18e28:	4381      	bics	r1, r0
   18e2a:	468c      	mov	ip, r1
   18e2c:	9902      	ldr	r1, [sp, #8]
   18e2e:	468b      	mov	fp, r1
   18e30:	44dc      	add	ip, fp
   18e32:	4661      	mov	r1, ip
   18e34:	6849      	ldr	r1, [r1, #4]
   18e36:	4201      	tst	r1, r0
   18e38:	d04d      	beq.n	18ed6 <_realloc_r+0x10e>
   18e3a:	4210      	tst	r0, r2
   18e3c:	d100      	bne.n	18e40 <_realloc_r+0x78>
   18e3e:	e0a2      	b.n	18f86 <_realloc_r+0x1be>
   18e40:	0029      	movs	r1, r5
   18e42:	9801      	ldr	r0, [sp, #4]
   18e44:	f7fb fd8e 	bl	14964 <_malloc_r>
   18e48:	1e05      	subs	r5, r0, #0
   18e4a:	d039      	beq.n	18ec0 <_realloc_r+0xf8>
   18e4c:	2301      	movs	r3, #1
   18e4e:	0002      	movs	r2, r0
   18e50:	6879      	ldr	r1, [r7, #4]
   18e52:	3a08      	subs	r2, #8
   18e54:	4399      	bics	r1, r3
   18e56:	187f      	adds	r7, r7, r1
   18e58:	42ba      	cmp	r2, r7
   18e5a:	d100      	bne.n	18e5e <_realloc_r+0x96>
   18e5c:	e12e      	b.n	190bc <_realloc_r+0x2f4>
   18e5e:	1f22      	subs	r2, r4, #4
   18e60:	2a24      	cmp	r2, #36	; 0x24
   18e62:	d900      	bls.n	18e66 <_realloc_r+0x9e>
   18e64:	e114      	b.n	19090 <_realloc_r+0x2c8>
   18e66:	2a13      	cmp	r2, #19
   18e68:	d900      	bls.n	18e6c <_realloc_r+0xa4>
   18e6a:	e0e8      	b.n	1903e <_realloc_r+0x276>
   18e6c:	0003      	movs	r3, r0
   18e6e:	0032      	movs	r2, r6
   18e70:	6811      	ldr	r1, [r2, #0]
   18e72:	6019      	str	r1, [r3, #0]
   18e74:	6851      	ldr	r1, [r2, #4]
   18e76:	6059      	str	r1, [r3, #4]
   18e78:	6892      	ldr	r2, [r2, #8]
   18e7a:	609a      	str	r2, [r3, #8]
   18e7c:	9c01      	ldr	r4, [sp, #4]
   18e7e:	0031      	movs	r1, r6
   18e80:	0020      	movs	r0, r4
   18e82:	f7ff f8b5 	bl	17ff0 <_free_r>
   18e86:	0020      	movs	r0, r4
   18e88:	f7fc f8b4 	bl	14ff4 <__malloc_unlock>
   18e8c:	e01b      	b.n	18ec6 <_realloc_r+0xfe>
   18e8e:	2107      	movs	r1, #7
   18e90:	438b      	bics	r3, r1
   18e92:	4698      	mov	r8, r3
   18e94:	d5b6      	bpl.n	18e04 <_realloc_r+0x3c>
   18e96:	230c      	movs	r3, #12
   18e98:	9a01      	ldr	r2, [sp, #4]
   18e9a:	2500      	movs	r5, #0
   18e9c:	6013      	str	r3, [r2, #0]
   18e9e:	e012      	b.n	18ec6 <_realloc_r+0xfe>
   18ea0:	0035      	movs	r5, r6
   18ea2:	4643      	mov	r3, r8
   18ea4:	1ae3      	subs	r3, r4, r3
   18ea6:	2b0f      	cmp	r3, #15
   18ea8:	d825      	bhi.n	18ef6 <_realloc_r+0x12e>
   18eaa:	464b      	mov	r3, r9
   18eac:	2201      	movs	r2, #1
   18eae:	4649      	mov	r1, r9
   18eb0:	685b      	ldr	r3, [r3, #4]
   18eb2:	4013      	ands	r3, r2
   18eb4:	4323      	orrs	r3, r4
   18eb6:	604b      	str	r3, [r1, #4]
   18eb8:	444c      	add	r4, r9
   18eba:	6863      	ldr	r3, [r4, #4]
   18ebc:	431a      	orrs	r2, r3
   18ebe:	6062      	str	r2, [r4, #4]
   18ec0:	9801      	ldr	r0, [sp, #4]
   18ec2:	f7fc f897 	bl	14ff4 <__malloc_unlock>
   18ec6:	0028      	movs	r0, r5
   18ec8:	b005      	add	sp, #20
   18eca:	bc3c      	pop	{r2, r3, r4, r5}
   18ecc:	4690      	mov	r8, r2
   18ece:	4699      	mov	r9, r3
   18ed0:	46a2      	mov	sl, r4
   18ed2:	46ab      	mov	fp, r5
   18ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18ed6:	2103      	movs	r1, #3
   18ed8:	9803      	ldr	r0, [sp, #12]
   18eda:	468c      	mov	ip, r1
   18edc:	4388      	bics	r0, r1
   18ede:	1821      	adds	r1, r4, r0
   18ee0:	468b      	mov	fp, r1
   18ee2:	4299      	cmp	r1, r3
   18ee4:	db21      	blt.n	18f2a <_realloc_r+0x162>
   18ee6:	9a02      	ldr	r2, [sp, #8]
   18ee8:	0035      	movs	r5, r6
   18eea:	68d3      	ldr	r3, [r2, #12]
   18eec:	6892      	ldr	r2, [r2, #8]
   18eee:	465c      	mov	r4, fp
   18ef0:	60d3      	str	r3, [r2, #12]
   18ef2:	609a      	str	r2, [r3, #8]
   18ef4:	e7d5      	b.n	18ea2 <_realloc_r+0xda>
   18ef6:	464a      	mov	r2, r9
   18ef8:	2001      	movs	r0, #1
   18efa:	4646      	mov	r6, r8
   18efc:	6852      	ldr	r2, [r2, #4]
   18efe:	4649      	mov	r1, r9
   18f00:	4002      	ands	r2, r0
   18f02:	4332      	orrs	r2, r6
   18f04:	464e      	mov	r6, r9
   18f06:	4441      	add	r1, r8
   18f08:	4303      	orrs	r3, r0
   18f0a:	6072      	str	r2, [r6, #4]
   18f0c:	444c      	add	r4, r9
   18f0e:	604b      	str	r3, [r1, #4]
   18f10:	6863      	ldr	r3, [r4, #4]
   18f12:	3108      	adds	r1, #8
   18f14:	4318      	orrs	r0, r3
   18f16:	6060      	str	r0, [r4, #4]
   18f18:	9801      	ldr	r0, [sp, #4]
   18f1a:	f7ff f869 	bl	17ff0 <_free_r>
   18f1e:	e7cf      	b.n	18ec0 <_realloc_r+0xf8>
   18f20:	0011      	movs	r1, r2
   18f22:	f7fb fd1f 	bl	14964 <_malloc_r>
   18f26:	0005      	movs	r5, r0
   18f28:	e7cd      	b.n	18ec6 <_realloc_r+0xfe>
   18f2a:	4651      	mov	r1, sl
   18f2c:	4211      	tst	r1, r2
   18f2e:	d000      	beq.n	18f32 <_realloc_r+0x16a>
   18f30:	e786      	b.n	18e40 <_realloc_r+0x78>
   18f32:	4661      	mov	r1, ip
   18f34:	683a      	ldr	r2, [r7, #0]
   18f36:	1aba      	subs	r2, r7, r2
   18f38:	4692      	mov	sl, r2
   18f3a:	6852      	ldr	r2, [r2, #4]
   18f3c:	438a      	bics	r2, r1
   18f3e:	1880      	adds	r0, r0, r2
   18f40:	4683      	mov	fp, r0
   18f42:	44a3      	add	fp, r4
   18f44:	459b      	cmp	fp, r3
   18f46:	db26      	blt.n	18f96 <_realloc_r+0x1ce>
   18f48:	9a02      	ldr	r2, [sp, #8]
   18f4a:	68d3      	ldr	r3, [r2, #12]
   18f4c:	6892      	ldr	r2, [r2, #8]
   18f4e:	60d3      	str	r3, [r2, #12]
   18f50:	609a      	str	r2, [r3, #8]
   18f52:	4653      	mov	r3, sl
   18f54:	4652      	mov	r2, sl
   18f56:	4655      	mov	r5, sl
   18f58:	6892      	ldr	r2, [r2, #8]
   18f5a:	68db      	ldr	r3, [r3, #12]
   18f5c:	3508      	adds	r5, #8
   18f5e:	60d3      	str	r3, [r2, #12]
   18f60:	609a      	str	r2, [r3, #8]
   18f62:	1f22      	subs	r2, r4, #4
   18f64:	2a24      	cmp	r2, #36	; 0x24
   18f66:	d900      	bls.n	18f6a <_realloc_r+0x1a2>
   18f68:	e096      	b.n	19098 <_realloc_r+0x2d0>
   18f6a:	2a13      	cmp	r2, #19
   18f6c:	d972      	bls.n	19054 <_realloc_r+0x28c>
   18f6e:	4653      	mov	r3, sl
   18f70:	6831      	ldr	r1, [r6, #0]
   18f72:	6099      	str	r1, [r3, #8]
   18f74:	6871      	ldr	r1, [r6, #4]
   18f76:	60d9      	str	r1, [r3, #12]
   18f78:	2a1b      	cmp	r2, #27
   18f7a:	d900      	bls.n	18f7e <_realloc_r+0x1b6>
   18f7c:	e0a4      	b.n	190c8 <_realloc_r+0x300>
   18f7e:	0032      	movs	r2, r6
   18f80:	3310      	adds	r3, #16
   18f82:	3208      	adds	r2, #8
   18f84:	e068      	b.n	19058 <_realloc_r+0x290>
   18f86:	683a      	ldr	r2, [r7, #0]
   18f88:	1aba      	subs	r2, r7, r2
   18f8a:	4692      	mov	sl, r2
   18f8c:	4651      	mov	r1, sl
   18f8e:	2203      	movs	r2, #3
   18f90:	6849      	ldr	r1, [r1, #4]
   18f92:	4391      	bics	r1, r2
   18f94:	000a      	movs	r2, r1
   18f96:	4693      	mov	fp, r2
   18f98:	44a3      	add	fp, r4
   18f9a:	459b      	cmp	fp, r3
   18f9c:	da00      	bge.n	18fa0 <_realloc_r+0x1d8>
   18f9e:	e74f      	b.n	18e40 <_realloc_r+0x78>
   18fa0:	e7d7      	b.n	18f52 <_realloc_r+0x18a>
   18fa2:	2003      	movs	r0, #3
   18fa4:	9902      	ldr	r1, [sp, #8]
   18fa6:	4684      	mov	ip, r0
   18fa8:	6849      	ldr	r1, [r1, #4]
   18faa:	4381      	bics	r1, r0
   18fac:	4640      	mov	r0, r8
   18fae:	1909      	adds	r1, r1, r4
   18fb0:	3010      	adds	r0, #16
   18fb2:	9002      	str	r0, [sp, #8]
   18fb4:	4281      	cmp	r1, r0
   18fb6:	da58      	bge.n	1906a <_realloc_r+0x2a2>
   18fb8:	07d2      	lsls	r2, r2, #31
   18fba:	d500      	bpl.n	18fbe <_realloc_r+0x1f6>
   18fbc:	e740      	b.n	18e40 <_realloc_r+0x78>
   18fbe:	4660      	mov	r0, ip
   18fc0:	683a      	ldr	r2, [r7, #0]
   18fc2:	1aba      	subs	r2, r7, r2
   18fc4:	4692      	mov	sl, r2
   18fc6:	6852      	ldr	r2, [r2, #4]
   18fc8:	4382      	bics	r2, r0
   18fca:	9802      	ldr	r0, [sp, #8]
   18fcc:	1851      	adds	r1, r2, r1
   18fce:	9103      	str	r1, [sp, #12]
   18fd0:	4288      	cmp	r0, r1
   18fd2:	dce0      	bgt.n	18f96 <_realloc_r+0x1ce>
   18fd4:	4653      	mov	r3, sl
   18fd6:	4652      	mov	r2, sl
   18fd8:	4655      	mov	r5, sl
   18fda:	6892      	ldr	r2, [r2, #8]
   18fdc:	68db      	ldr	r3, [r3, #12]
   18fde:	3508      	adds	r5, #8
   18fe0:	60d3      	str	r3, [r2, #12]
   18fe2:	609a      	str	r2, [r3, #8]
   18fe4:	1f22      	subs	r2, r4, #4
   18fe6:	2a24      	cmp	r2, #36	; 0x24
   18fe8:	d900      	bls.n	18fec <_realloc_r+0x224>
   18fea:	e08e      	b.n	1910a <_realloc_r+0x342>
   18fec:	2a13      	cmp	r2, #19
   18fee:	d800      	bhi.n	18ff2 <_realloc_r+0x22a>
   18ff0:	e088      	b.n	19104 <_realloc_r+0x33c>
   18ff2:	4653      	mov	r3, sl
   18ff4:	6831      	ldr	r1, [r6, #0]
   18ff6:	6099      	str	r1, [r3, #8]
   18ff8:	6871      	ldr	r1, [r6, #4]
   18ffa:	60d9      	str	r1, [r3, #12]
   18ffc:	2a1b      	cmp	r2, #27
   18ffe:	d900      	bls.n	19002 <_realloc_r+0x23a>
   19000:	e088      	b.n	19114 <_realloc_r+0x34c>
   19002:	0032      	movs	r2, r6
   19004:	3310      	adds	r3, #16
   19006:	3208      	adds	r2, #8
   19008:	6811      	ldr	r1, [r2, #0]
   1900a:	6019      	str	r1, [r3, #0]
   1900c:	6851      	ldr	r1, [r2, #4]
   1900e:	6059      	str	r1, [r3, #4]
   19010:	6892      	ldr	r2, [r2, #8]
   19012:	609a      	str	r2, [r3, #8]
   19014:	4651      	mov	r1, sl
   19016:	465b      	mov	r3, fp
   19018:	4642      	mov	r2, r8
   1901a:	4441      	add	r1, r8
   1901c:	6099      	str	r1, [r3, #8]
   1901e:	9b03      	ldr	r3, [sp, #12]
   19020:	9801      	ldr	r0, [sp, #4]
   19022:	1a9a      	subs	r2, r3, r2
   19024:	2301      	movs	r3, #1
   19026:	431a      	orrs	r2, r3
   19028:	604a      	str	r2, [r1, #4]
   1902a:	4652      	mov	r2, sl
   1902c:	6852      	ldr	r2, [r2, #4]
   1902e:	4013      	ands	r3, r2
   19030:	4642      	mov	r2, r8
   19032:	4313      	orrs	r3, r2
   19034:	4652      	mov	r2, sl
   19036:	6053      	str	r3, [r2, #4]
   19038:	f7fb ffdc 	bl	14ff4 <__malloc_unlock>
   1903c:	e743      	b.n	18ec6 <_realloc_r+0xfe>
   1903e:	6833      	ldr	r3, [r6, #0]
   19040:	6003      	str	r3, [r0, #0]
   19042:	6873      	ldr	r3, [r6, #4]
   19044:	6043      	str	r3, [r0, #4]
   19046:	2a1b      	cmp	r2, #27
   19048:	d82d      	bhi.n	190a6 <_realloc_r+0x2de>
   1904a:	0003      	movs	r3, r0
   1904c:	0032      	movs	r2, r6
   1904e:	3308      	adds	r3, #8
   19050:	3208      	adds	r2, #8
   19052:	e70d      	b.n	18e70 <_realloc_r+0xa8>
   19054:	002b      	movs	r3, r5
   19056:	0032      	movs	r2, r6
   19058:	6811      	ldr	r1, [r2, #0]
   1905a:	465c      	mov	r4, fp
   1905c:	6019      	str	r1, [r3, #0]
   1905e:	6851      	ldr	r1, [r2, #4]
   19060:	46d1      	mov	r9, sl
   19062:	6059      	str	r1, [r3, #4]
   19064:	6892      	ldr	r2, [r2, #8]
   19066:	609a      	str	r2, [r3, #8]
   19068:	e71b      	b.n	18ea2 <_realloc_r+0xda>
   1906a:	4643      	mov	r3, r8
   1906c:	18fa      	adds	r2, r7, r3
   1906e:	465b      	mov	r3, fp
   19070:	609a      	str	r2, [r3, #8]
   19072:	4643      	mov	r3, r8
   19074:	1ac9      	subs	r1, r1, r3
   19076:	2301      	movs	r3, #1
   19078:	4319      	orrs	r1, r3
   1907a:	6051      	str	r1, [r2, #4]
   1907c:	687a      	ldr	r2, [r7, #4]
   1907e:	9801      	ldr	r0, [sp, #4]
   19080:	4013      	ands	r3, r2
   19082:	4642      	mov	r2, r8
   19084:	4313      	orrs	r3, r2
   19086:	607b      	str	r3, [r7, #4]
   19088:	f7fb ffb4 	bl	14ff4 <__malloc_unlock>
   1908c:	0035      	movs	r5, r6
   1908e:	e71a      	b.n	18ec6 <_realloc_r+0xfe>
   19090:	0031      	movs	r1, r6
   19092:	f7ff fb01 	bl	18698 <memmove>
   19096:	e6f1      	b.n	18e7c <_realloc_r+0xb4>
   19098:	0031      	movs	r1, r6
   1909a:	0028      	movs	r0, r5
   1909c:	f7ff fafc 	bl	18698 <memmove>
   190a0:	465c      	mov	r4, fp
   190a2:	46d1      	mov	r9, sl
   190a4:	e6fd      	b.n	18ea2 <_realloc_r+0xda>
   190a6:	68b3      	ldr	r3, [r6, #8]
   190a8:	6083      	str	r3, [r0, #8]
   190aa:	68f3      	ldr	r3, [r6, #12]
   190ac:	60c3      	str	r3, [r0, #12]
   190ae:	2a24      	cmp	r2, #36	; 0x24
   190b0:	d015      	beq.n	190de <_realloc_r+0x316>
   190b2:	0003      	movs	r3, r0
   190b4:	0032      	movs	r2, r6
   190b6:	3310      	adds	r3, #16
   190b8:	3210      	adds	r2, #16
   190ba:	e6d9      	b.n	18e70 <_realloc_r+0xa8>
   190bc:	6853      	ldr	r3, [r2, #4]
   190be:	2203      	movs	r2, #3
   190c0:	4393      	bics	r3, r2
   190c2:	18e4      	adds	r4, r4, r3
   190c4:	0035      	movs	r5, r6
   190c6:	e6ec      	b.n	18ea2 <_realloc_r+0xda>
   190c8:	4653      	mov	r3, sl
   190ca:	68b1      	ldr	r1, [r6, #8]
   190cc:	6119      	str	r1, [r3, #16]
   190ce:	68f1      	ldr	r1, [r6, #12]
   190d0:	6159      	str	r1, [r3, #20]
   190d2:	2a24      	cmp	r2, #36	; 0x24
   190d4:	d00c      	beq.n	190f0 <_realloc_r+0x328>
   190d6:	0032      	movs	r2, r6
   190d8:	3318      	adds	r3, #24
   190da:	3210      	adds	r2, #16
   190dc:	e7bc      	b.n	19058 <_realloc_r+0x290>
   190de:	6933      	ldr	r3, [r6, #16]
   190e0:	0032      	movs	r2, r6
   190e2:	6103      	str	r3, [r0, #16]
   190e4:	0003      	movs	r3, r0
   190e6:	6971      	ldr	r1, [r6, #20]
   190e8:	3318      	adds	r3, #24
   190ea:	3218      	adds	r2, #24
   190ec:	6141      	str	r1, [r0, #20]
   190ee:	e6bf      	b.n	18e70 <_realloc_r+0xa8>
   190f0:	4653      	mov	r3, sl
   190f2:	6932      	ldr	r2, [r6, #16]
   190f4:	4651      	mov	r1, sl
   190f6:	619a      	str	r2, [r3, #24]
   190f8:	0032      	movs	r2, r6
   190fa:	6970      	ldr	r0, [r6, #20]
   190fc:	3320      	adds	r3, #32
   190fe:	3218      	adds	r2, #24
   19100:	61c8      	str	r0, [r1, #28]
   19102:	e7a9      	b.n	19058 <_realloc_r+0x290>
   19104:	002b      	movs	r3, r5
   19106:	0032      	movs	r2, r6
   19108:	e77e      	b.n	19008 <_realloc_r+0x240>
   1910a:	0031      	movs	r1, r6
   1910c:	0028      	movs	r0, r5
   1910e:	f7ff fac3 	bl	18698 <memmove>
   19112:	e77f      	b.n	19014 <_realloc_r+0x24c>
   19114:	4653      	mov	r3, sl
   19116:	68b1      	ldr	r1, [r6, #8]
   19118:	6119      	str	r1, [r3, #16]
   1911a:	68f1      	ldr	r1, [r6, #12]
   1911c:	6159      	str	r1, [r3, #20]
   1911e:	2a24      	cmp	r2, #36	; 0x24
   19120:	d003      	beq.n	1912a <_realloc_r+0x362>
   19122:	0032      	movs	r2, r6
   19124:	3318      	adds	r3, #24
   19126:	3210      	adds	r2, #16
   19128:	e76e      	b.n	19008 <_realloc_r+0x240>
   1912a:	4653      	mov	r3, sl
   1912c:	6932      	ldr	r2, [r6, #16]
   1912e:	4651      	mov	r1, sl
   19130:	619a      	str	r2, [r3, #24]
   19132:	0032      	movs	r2, r6
   19134:	6970      	ldr	r0, [r6, #20]
   19136:	3320      	adds	r3, #32
   19138:	3218      	adds	r2, #24
   1913a:	61c8      	str	r0, [r1, #28]
   1913c:	e764      	b.n	19008 <_realloc_r+0x240>
   1913e:	46c0      	nop			; (mov r8, r8)
   19140:	20000490 	.word	0x20000490

00019144 <__sread>:
   19144:	b570      	push	{r4, r5, r6, lr}
   19146:	000c      	movs	r4, r1
   19148:	250e      	movs	r5, #14
   1914a:	5f49      	ldrsh	r1, [r1, r5]
   1914c:	f000 faa0 	bl	19690 <_read_r>
   19150:	2800      	cmp	r0, #0
   19152:	db03      	blt.n	1915c <__sread+0x18>
   19154:	6d23      	ldr	r3, [r4, #80]	; 0x50
   19156:	181b      	adds	r3, r3, r0
   19158:	6523      	str	r3, [r4, #80]	; 0x50
   1915a:	bd70      	pop	{r4, r5, r6, pc}
   1915c:	89a3      	ldrh	r3, [r4, #12]
   1915e:	4a02      	ldr	r2, [pc, #8]	; (19168 <__sread+0x24>)
   19160:	4013      	ands	r3, r2
   19162:	81a3      	strh	r3, [r4, #12]
   19164:	e7f9      	b.n	1915a <__sread+0x16>
   19166:	46c0      	nop			; (mov r8, r8)
   19168:	ffffefff 	.word	0xffffefff

0001916c <__swrite>:
   1916c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1916e:	0016      	movs	r6, r2
   19170:	001f      	movs	r7, r3
   19172:	220c      	movs	r2, #12
   19174:	5e8b      	ldrsh	r3, [r1, r2]
   19176:	0005      	movs	r5, r0
   19178:	000c      	movs	r4, r1
   1917a:	05da      	lsls	r2, r3, #23
   1917c:	d507      	bpl.n	1918e <__swrite+0x22>
   1917e:	230e      	movs	r3, #14
   19180:	5ec9      	ldrsh	r1, [r1, r3]
   19182:	2200      	movs	r2, #0
   19184:	2302      	movs	r3, #2
   19186:	f000 fa59 	bl	1963c <_lseek_r>
   1918a:	220c      	movs	r2, #12
   1918c:	5ea3      	ldrsh	r3, [r4, r2]
   1918e:	4a05      	ldr	r2, [pc, #20]	; (191a4 <__swrite+0x38>)
   19190:	0028      	movs	r0, r5
   19192:	4013      	ands	r3, r2
   19194:	81a3      	strh	r3, [r4, #12]
   19196:	0032      	movs	r2, r6
   19198:	230e      	movs	r3, #14
   1919a:	5ee1      	ldrsh	r1, [r4, r3]
   1919c:	003b      	movs	r3, r7
   1919e:	f000 f86b 	bl	19278 <_write_r>
   191a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   191a4:	ffffefff 	.word	0xffffefff

000191a8 <__sseek>:
   191a8:	b570      	push	{r4, r5, r6, lr}
   191aa:	000c      	movs	r4, r1
   191ac:	250e      	movs	r5, #14
   191ae:	5f49      	ldrsh	r1, [r1, r5]
   191b0:	f000 fa44 	bl	1963c <_lseek_r>
   191b4:	1c43      	adds	r3, r0, #1
   191b6:	d006      	beq.n	191c6 <__sseek+0x1e>
   191b8:	2380      	movs	r3, #128	; 0x80
   191ba:	89a2      	ldrh	r2, [r4, #12]
   191bc:	015b      	lsls	r3, r3, #5
   191be:	4313      	orrs	r3, r2
   191c0:	81a3      	strh	r3, [r4, #12]
   191c2:	6520      	str	r0, [r4, #80]	; 0x50
   191c4:	bd70      	pop	{r4, r5, r6, pc}
   191c6:	89a3      	ldrh	r3, [r4, #12]
   191c8:	4a01      	ldr	r2, [pc, #4]	; (191d0 <__sseek+0x28>)
   191ca:	4013      	ands	r3, r2
   191cc:	81a3      	strh	r3, [r4, #12]
   191ce:	e7f9      	b.n	191c4 <__sseek+0x1c>
   191d0:	ffffefff 	.word	0xffffefff

000191d4 <__sclose>:
   191d4:	b510      	push	{r4, lr}
   191d6:	230e      	movs	r3, #14
   191d8:	5ec9      	ldrsh	r1, [r1, r3]
   191da:	f000 f907 	bl	193ec <_close_r>
   191de:	bd10      	pop	{r4, pc}

000191e0 <__sprint_r.part.0>:
   191e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   191e2:	464e      	mov	r6, r9
   191e4:	4645      	mov	r5, r8
   191e6:	46de      	mov	lr, fp
   191e8:	4657      	mov	r7, sl
   191ea:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   191ec:	b5e0      	push	{r5, r6, r7, lr}
   191ee:	4680      	mov	r8, r0
   191f0:	000e      	movs	r6, r1
   191f2:	4691      	mov	r9, r2
   191f4:	049b      	lsls	r3, r3, #18
   191f6:	d531      	bpl.n	1925c <__sprint_r.part.0+0x7c>
   191f8:	6813      	ldr	r3, [r2, #0]
   191fa:	469a      	mov	sl, r3
   191fc:	6893      	ldr	r3, [r2, #8]
   191fe:	2b00      	cmp	r3, #0
   19200:	d02a      	beq.n	19258 <__sprint_r.part.0+0x78>
   19202:	4652      	mov	r2, sl
   19204:	6852      	ldr	r2, [r2, #4]
   19206:	2500      	movs	r5, #0
   19208:	4693      	mov	fp, r2
   1920a:	0897      	lsrs	r7, r2, #2
   1920c:	4652      	mov	r2, sl
   1920e:	6814      	ldr	r4, [r2, #0]
   19210:	d104      	bne.n	1921c <__sprint_r.part.0+0x3c>
   19212:	e016      	b.n	19242 <__sprint_r.part.0+0x62>
   19214:	3501      	adds	r5, #1
   19216:	3404      	adds	r4, #4
   19218:	42af      	cmp	r7, r5
   1921a:	d010      	beq.n	1923e <__sprint_r.part.0+0x5e>
   1921c:	0032      	movs	r2, r6
   1921e:	6821      	ldr	r1, [r4, #0]
   19220:	4640      	mov	r0, r8
   19222:	f000 f9a7 	bl	19574 <_fputwc_r>
   19226:	1c43      	adds	r3, r0, #1
   19228:	d1f4      	bne.n	19214 <__sprint_r.part.0+0x34>
   1922a:	464a      	mov	r2, r9
   1922c:	2300      	movs	r3, #0
   1922e:	6093      	str	r3, [r2, #8]
   19230:	6053      	str	r3, [r2, #4]
   19232:	bc3c      	pop	{r2, r3, r4, r5}
   19234:	4690      	mov	r8, r2
   19236:	4699      	mov	r9, r3
   19238:	46a2      	mov	sl, r4
   1923a:	46ab      	mov	fp, r5
   1923c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1923e:	464b      	mov	r3, r9
   19240:	689b      	ldr	r3, [r3, #8]
   19242:	465a      	mov	r2, fp
   19244:	2103      	movs	r1, #3
   19246:	438a      	bics	r2, r1
   19248:	1a9b      	subs	r3, r3, r2
   1924a:	464a      	mov	r2, r9
   1924c:	6093      	str	r3, [r2, #8]
   1924e:	2208      	movs	r2, #8
   19250:	4694      	mov	ip, r2
   19252:	44e2      	add	sl, ip
   19254:	2b00      	cmp	r3, #0
   19256:	d1d4      	bne.n	19202 <__sprint_r.part.0+0x22>
   19258:	2000      	movs	r0, #0
   1925a:	e7e6      	b.n	1922a <__sprint_r.part.0+0x4a>
   1925c:	f7fe ffa6 	bl	181ac <__sfvwrite_r>
   19260:	e7e3      	b.n	1922a <__sprint_r.part.0+0x4a>
   19262:	46c0      	nop			; (mov r8, r8)

00019264 <__sprint_r>:
   19264:	6893      	ldr	r3, [r2, #8]
   19266:	b510      	push	{r4, lr}
   19268:	2b00      	cmp	r3, #0
   1926a:	d002      	beq.n	19272 <__sprint_r+0xe>
   1926c:	f7ff ffb8 	bl	191e0 <__sprint_r.part.0>
   19270:	bd10      	pop	{r4, pc}
   19272:	6053      	str	r3, [r2, #4]
   19274:	2000      	movs	r0, #0
   19276:	e7fb      	b.n	19270 <__sprint_r+0xc>

00019278 <_write_r>:
   19278:	b570      	push	{r4, r5, r6, lr}
   1927a:	0005      	movs	r5, r0
   1927c:	0008      	movs	r0, r1
   1927e:	0011      	movs	r1, r2
   19280:	2200      	movs	r2, #0
   19282:	4c06      	ldr	r4, [pc, #24]	; (1929c <_write_r+0x24>)
   19284:	6022      	str	r2, [r4, #0]
   19286:	001a      	movs	r2, r3
   19288:	f7ea f8fc 	bl	3484 <_write>
   1928c:	1c43      	adds	r3, r0, #1
   1928e:	d000      	beq.n	19292 <_write_r+0x1a>
   19290:	bd70      	pop	{r4, r5, r6, pc}
   19292:	6823      	ldr	r3, [r4, #0]
   19294:	2b00      	cmp	r3, #0
   19296:	d0fb      	beq.n	19290 <_write_r+0x18>
   19298:	602b      	str	r3, [r5, #0]
   1929a:	e7f9      	b.n	19290 <_write_r+0x18>
   1929c:	20001bf4 	.word	0x20001bf4

000192a0 <__register_exitproc>:
   192a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   192a2:	464e      	mov	r6, r9
   192a4:	4645      	mov	r5, r8
   192a6:	46de      	mov	lr, fp
   192a8:	4657      	mov	r7, sl
   192aa:	b5e0      	push	{r5, r6, r7, lr}
   192ac:	4d36      	ldr	r5, [pc, #216]	; (19388 <__register_exitproc+0xe8>)
   192ae:	b083      	sub	sp, #12
   192b0:	0006      	movs	r6, r0
   192b2:	6828      	ldr	r0, [r5, #0]
   192b4:	4698      	mov	r8, r3
   192b6:	000f      	movs	r7, r1
   192b8:	4691      	mov	r9, r2
   192ba:	f7ff f931 	bl	18520 <__retarget_lock_acquire_recursive>
   192be:	4b33      	ldr	r3, [pc, #204]	; (1938c <__register_exitproc+0xec>)
   192c0:	681c      	ldr	r4, [r3, #0]
   192c2:	23a4      	movs	r3, #164	; 0xa4
   192c4:	005b      	lsls	r3, r3, #1
   192c6:	58e0      	ldr	r0, [r4, r3]
   192c8:	2800      	cmp	r0, #0
   192ca:	d052      	beq.n	19372 <__register_exitproc+0xd2>
   192cc:	6843      	ldr	r3, [r0, #4]
   192ce:	2b1f      	cmp	r3, #31
   192d0:	dc13      	bgt.n	192fa <__register_exitproc+0x5a>
   192d2:	1c5a      	adds	r2, r3, #1
   192d4:	9201      	str	r2, [sp, #4]
   192d6:	2e00      	cmp	r6, #0
   192d8:	d128      	bne.n	1932c <__register_exitproc+0x8c>
   192da:	9a01      	ldr	r2, [sp, #4]
   192dc:	3302      	adds	r3, #2
   192de:	009b      	lsls	r3, r3, #2
   192e0:	6042      	str	r2, [r0, #4]
   192e2:	501f      	str	r7, [r3, r0]
   192e4:	6828      	ldr	r0, [r5, #0]
   192e6:	f7ff f91d 	bl	18524 <__retarget_lock_release_recursive>
   192ea:	2000      	movs	r0, #0
   192ec:	b003      	add	sp, #12
   192ee:	bc3c      	pop	{r2, r3, r4, r5}
   192f0:	4690      	mov	r8, r2
   192f2:	4699      	mov	r9, r3
   192f4:	46a2      	mov	sl, r4
   192f6:	46ab      	mov	fp, r5
   192f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   192fa:	4b25      	ldr	r3, [pc, #148]	; (19390 <__register_exitproc+0xf0>)
   192fc:	2b00      	cmp	r3, #0
   192fe:	d03d      	beq.n	1937c <__register_exitproc+0xdc>
   19300:	20c8      	movs	r0, #200	; 0xc8
   19302:	0040      	lsls	r0, r0, #1
   19304:	f7fb fb24 	bl	14950 <malloc>
   19308:	2800      	cmp	r0, #0
   1930a:	d037      	beq.n	1937c <__register_exitproc+0xdc>
   1930c:	22a4      	movs	r2, #164	; 0xa4
   1930e:	2300      	movs	r3, #0
   19310:	0052      	lsls	r2, r2, #1
   19312:	58a1      	ldr	r1, [r4, r2]
   19314:	6043      	str	r3, [r0, #4]
   19316:	6001      	str	r1, [r0, #0]
   19318:	50a0      	str	r0, [r4, r2]
   1931a:	3240      	adds	r2, #64	; 0x40
   1931c:	5083      	str	r3, [r0, r2]
   1931e:	3204      	adds	r2, #4
   19320:	5083      	str	r3, [r0, r2]
   19322:	3301      	adds	r3, #1
   19324:	9301      	str	r3, [sp, #4]
   19326:	2300      	movs	r3, #0
   19328:	2e00      	cmp	r6, #0
   1932a:	d0d6      	beq.n	192da <__register_exitproc+0x3a>
   1932c:	009a      	lsls	r2, r3, #2
   1932e:	4692      	mov	sl, r2
   19330:	4482      	add	sl, r0
   19332:	464a      	mov	r2, r9
   19334:	2188      	movs	r1, #136	; 0x88
   19336:	4654      	mov	r4, sl
   19338:	5062      	str	r2, [r4, r1]
   1933a:	22c4      	movs	r2, #196	; 0xc4
   1933c:	0052      	lsls	r2, r2, #1
   1933e:	4691      	mov	r9, r2
   19340:	4481      	add	r9, r0
   19342:	464a      	mov	r2, r9
   19344:	3987      	subs	r1, #135	; 0x87
   19346:	4099      	lsls	r1, r3
   19348:	6812      	ldr	r2, [r2, #0]
   1934a:	468b      	mov	fp, r1
   1934c:	430a      	orrs	r2, r1
   1934e:	4694      	mov	ip, r2
   19350:	464a      	mov	r2, r9
   19352:	4661      	mov	r1, ip
   19354:	6011      	str	r1, [r2, #0]
   19356:	2284      	movs	r2, #132	; 0x84
   19358:	4641      	mov	r1, r8
   1935a:	0052      	lsls	r2, r2, #1
   1935c:	50a1      	str	r1, [r4, r2]
   1935e:	2e02      	cmp	r6, #2
   19360:	d1bb      	bne.n	192da <__register_exitproc+0x3a>
   19362:	0002      	movs	r2, r0
   19364:	465c      	mov	r4, fp
   19366:	328d      	adds	r2, #141	; 0x8d
   19368:	32ff      	adds	r2, #255	; 0xff
   1936a:	6811      	ldr	r1, [r2, #0]
   1936c:	430c      	orrs	r4, r1
   1936e:	6014      	str	r4, [r2, #0]
   19370:	e7b3      	b.n	192da <__register_exitproc+0x3a>
   19372:	0020      	movs	r0, r4
   19374:	304d      	adds	r0, #77	; 0x4d
   19376:	30ff      	adds	r0, #255	; 0xff
   19378:	50e0      	str	r0, [r4, r3]
   1937a:	e7a7      	b.n	192cc <__register_exitproc+0x2c>
   1937c:	6828      	ldr	r0, [r5, #0]
   1937e:	f7ff f8d1 	bl	18524 <__retarget_lock_release_recursive>
   19382:	2001      	movs	r0, #1
   19384:	4240      	negs	r0, r0
   19386:	e7b1      	b.n	192ec <__register_exitproc+0x4c>
   19388:	200008a0 	.word	0x200008a0
   1938c:	0001aec4 	.word	0x0001aec4
   19390:	00014951 	.word	0x00014951

00019394 <_calloc_r>:
   19394:	b510      	push	{r4, lr}
   19396:	4351      	muls	r1, r2
   19398:	f7fb fae4 	bl	14964 <_malloc_r>
   1939c:	1e04      	subs	r4, r0, #0
   1939e:	d01c      	beq.n	193da <_calloc_r+0x46>
   193a0:	0003      	movs	r3, r0
   193a2:	3b08      	subs	r3, #8
   193a4:	685a      	ldr	r2, [r3, #4]
   193a6:	2303      	movs	r3, #3
   193a8:	439a      	bics	r2, r3
   193aa:	3a04      	subs	r2, #4
   193ac:	2a24      	cmp	r2, #36	; 0x24
   193ae:	d816      	bhi.n	193de <_calloc_r+0x4a>
   193b0:	0003      	movs	r3, r0
   193b2:	2a13      	cmp	r2, #19
   193b4:	d90d      	bls.n	193d2 <_calloc_r+0x3e>
   193b6:	2100      	movs	r1, #0
   193b8:	3308      	adds	r3, #8
   193ba:	6001      	str	r1, [r0, #0]
   193bc:	6041      	str	r1, [r0, #4]
   193be:	2a1b      	cmp	r2, #27
   193c0:	d907      	bls.n	193d2 <_calloc_r+0x3e>
   193c2:	6081      	str	r1, [r0, #8]
   193c4:	60c1      	str	r1, [r0, #12]
   193c6:	2a24      	cmp	r2, #36	; 0x24
   193c8:	d10d      	bne.n	193e6 <_calloc_r+0x52>
   193ca:	0003      	movs	r3, r0
   193cc:	6101      	str	r1, [r0, #16]
   193ce:	3318      	adds	r3, #24
   193d0:	6141      	str	r1, [r0, #20]
   193d2:	2200      	movs	r2, #0
   193d4:	601a      	str	r2, [r3, #0]
   193d6:	605a      	str	r2, [r3, #4]
   193d8:	609a      	str	r2, [r3, #8]
   193da:	0020      	movs	r0, r4
   193dc:	bd10      	pop	{r4, pc}
   193de:	2100      	movs	r1, #0
   193e0:	f7fb fdb6 	bl	14f50 <memset>
   193e4:	e7f9      	b.n	193da <_calloc_r+0x46>
   193e6:	0003      	movs	r3, r0
   193e8:	3310      	adds	r3, #16
   193ea:	e7f2      	b.n	193d2 <_calloc_r+0x3e>

000193ec <_close_r>:
   193ec:	2300      	movs	r3, #0
   193ee:	b570      	push	{r4, r5, r6, lr}
   193f0:	4c06      	ldr	r4, [pc, #24]	; (1940c <_close_r+0x20>)
   193f2:	0005      	movs	r5, r0
   193f4:	0008      	movs	r0, r1
   193f6:	6023      	str	r3, [r4, #0]
   193f8:	f7ea f87e 	bl	34f8 <_close>
   193fc:	1c43      	adds	r3, r0, #1
   193fe:	d000      	beq.n	19402 <_close_r+0x16>
   19400:	bd70      	pop	{r4, r5, r6, pc}
   19402:	6823      	ldr	r3, [r4, #0]
   19404:	2b00      	cmp	r3, #0
   19406:	d0fb      	beq.n	19400 <_close_r+0x14>
   19408:	602b      	str	r3, [r5, #0]
   1940a:	e7f9      	b.n	19400 <_close_r+0x14>
   1940c:	20001bf4 	.word	0x20001bf4

00019410 <_fclose_r>:
   19410:	b570      	push	{r4, r5, r6, lr}
   19412:	0005      	movs	r5, r0
   19414:	1e0c      	subs	r4, r1, #0
   19416:	d040      	beq.n	1949a <_fclose_r+0x8a>
   19418:	2800      	cmp	r0, #0
   1941a:	d002      	beq.n	19422 <_fclose_r+0x12>
   1941c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1941e:	2b00      	cmp	r3, #0
   19420:	d03e      	beq.n	194a0 <_fclose_r+0x90>
   19422:	2601      	movs	r6, #1
   19424:	6e63      	ldr	r3, [r4, #100]	; 0x64
   19426:	4233      	tst	r3, r6
   19428:	d133      	bne.n	19492 <_fclose_r+0x82>
   1942a:	89a3      	ldrh	r3, [r4, #12]
   1942c:	059b      	lsls	r3, r3, #22
   1942e:	d543      	bpl.n	194b8 <_fclose_r+0xa8>
   19430:	0021      	movs	r1, r4
   19432:	0028      	movs	r0, r5
   19434:	f7fe fc30 	bl	17c98 <__sflush_r>
   19438:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1943a:	0006      	movs	r6, r0
   1943c:	2b00      	cmp	r3, #0
   1943e:	d004      	beq.n	1944a <_fclose_r+0x3a>
   19440:	69e1      	ldr	r1, [r4, #28]
   19442:	0028      	movs	r0, r5
   19444:	4798      	blx	r3
   19446:	2800      	cmp	r0, #0
   19448:	db44      	blt.n	194d4 <_fclose_r+0xc4>
   1944a:	89a3      	ldrh	r3, [r4, #12]
   1944c:	061b      	lsls	r3, r3, #24
   1944e:	d42a      	bmi.n	194a6 <_fclose_r+0x96>
   19450:	6b21      	ldr	r1, [r4, #48]	; 0x30
   19452:	2900      	cmp	r1, #0
   19454:	d008      	beq.n	19468 <_fclose_r+0x58>
   19456:	0023      	movs	r3, r4
   19458:	3340      	adds	r3, #64	; 0x40
   1945a:	4299      	cmp	r1, r3
   1945c:	d002      	beq.n	19464 <_fclose_r+0x54>
   1945e:	0028      	movs	r0, r5
   19460:	f7fe fdc6 	bl	17ff0 <_free_r>
   19464:	2300      	movs	r3, #0
   19466:	6323      	str	r3, [r4, #48]	; 0x30
   19468:	6c61      	ldr	r1, [r4, #68]	; 0x44
   1946a:	2900      	cmp	r1, #0
   1946c:	d004      	beq.n	19478 <_fclose_r+0x68>
   1946e:	0028      	movs	r0, r5
   19470:	f7fe fdbe 	bl	17ff0 <_free_r>
   19474:	2300      	movs	r3, #0
   19476:	6463      	str	r3, [r4, #68]	; 0x44
   19478:	f7fe fd40 	bl	17efc <__sfp_lock_acquire>
   1947c:	2300      	movs	r3, #0
   1947e:	81a3      	strh	r3, [r4, #12]
   19480:	6e63      	ldr	r3, [r4, #100]	; 0x64
   19482:	07db      	lsls	r3, r3, #31
   19484:	d514      	bpl.n	194b0 <_fclose_r+0xa0>
   19486:	6da0      	ldr	r0, [r4, #88]	; 0x58
   19488:	f7ff f848 	bl	1851c <__retarget_lock_close_recursive>
   1948c:	f7fe fd3e 	bl	17f0c <__sfp_lock_release>
   19490:	e004      	b.n	1949c <_fclose_r+0x8c>
   19492:	220c      	movs	r2, #12
   19494:	5ea3      	ldrsh	r3, [r4, r2]
   19496:	2b00      	cmp	r3, #0
   19498:	d1ca      	bne.n	19430 <_fclose_r+0x20>
   1949a:	2600      	movs	r6, #0
   1949c:	0030      	movs	r0, r6
   1949e:	bd70      	pop	{r4, r5, r6, pc}
   194a0:	f7fe fcfc 	bl	17e9c <__sinit>
   194a4:	e7bd      	b.n	19422 <_fclose_r+0x12>
   194a6:	6921      	ldr	r1, [r4, #16]
   194a8:	0028      	movs	r0, r5
   194aa:	f7fe fda1 	bl	17ff0 <_free_r>
   194ae:	e7cf      	b.n	19450 <_fclose_r+0x40>
   194b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   194b2:	f7ff f837 	bl	18524 <__retarget_lock_release_recursive>
   194b6:	e7e6      	b.n	19486 <_fclose_r+0x76>
   194b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   194ba:	f7ff f831 	bl	18520 <__retarget_lock_acquire_recursive>
   194be:	220c      	movs	r2, #12
   194c0:	5ea3      	ldrsh	r3, [r4, r2]
   194c2:	2b00      	cmp	r3, #0
   194c4:	d1b4      	bne.n	19430 <_fclose_r+0x20>
   194c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   194c8:	401e      	ands	r6, r3
   194ca:	d1e6      	bne.n	1949a <_fclose_r+0x8a>
   194cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   194ce:	f7ff f829 	bl	18524 <__retarget_lock_release_recursive>
   194d2:	e7e3      	b.n	1949c <_fclose_r+0x8c>
   194d4:	2601      	movs	r6, #1
   194d6:	4276      	negs	r6, r6
   194d8:	e7b7      	b.n	1944a <_fclose_r+0x3a>
   194da:	46c0      	nop			; (mov r8, r8)

000194dc <__fputwc>:
   194dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   194de:	46ce      	mov	lr, r9
   194e0:	4647      	mov	r7, r8
   194e2:	b580      	push	{r7, lr}
   194e4:	b085      	sub	sp, #20
   194e6:	4680      	mov	r8, r0
   194e8:	4689      	mov	r9, r1
   194ea:	0014      	movs	r4, r2
   194ec:	f000 f896 	bl	1961c <__locale_mb_cur_max>
   194f0:	2801      	cmp	r0, #1
   194f2:	d031      	beq.n	19558 <__fputwc+0x7c>
   194f4:	0023      	movs	r3, r4
   194f6:	af03      	add	r7, sp, #12
   194f8:	335c      	adds	r3, #92	; 0x5c
   194fa:	464a      	mov	r2, r9
   194fc:	0039      	movs	r1, r7
   194fe:	4640      	mov	r0, r8
   19500:	f000 f938 	bl	19774 <_wcrtomb_r>
   19504:	0006      	movs	r6, r0
   19506:	1c43      	adds	r3, r0, #1
   19508:	d021      	beq.n	1954e <__fputwc+0x72>
   1950a:	2800      	cmp	r0, #0
   1950c:	d030      	beq.n	19570 <__fputwc+0x94>
   1950e:	7839      	ldrb	r1, [r7, #0]
   19510:	2500      	movs	r5, #0
   19512:	e007      	b.n	19524 <__fputwc+0x48>
   19514:	6823      	ldr	r3, [r4, #0]
   19516:	1c5a      	adds	r2, r3, #1
   19518:	6022      	str	r2, [r4, #0]
   1951a:	7019      	strb	r1, [r3, #0]
   1951c:	3501      	adds	r5, #1
   1951e:	42b5      	cmp	r5, r6
   19520:	d226      	bcs.n	19570 <__fputwc+0x94>
   19522:	5d79      	ldrb	r1, [r7, r5]
   19524:	68a3      	ldr	r3, [r4, #8]
   19526:	3b01      	subs	r3, #1
   19528:	60a3      	str	r3, [r4, #8]
   1952a:	2b00      	cmp	r3, #0
   1952c:	daf2      	bge.n	19514 <__fputwc+0x38>
   1952e:	69a2      	ldr	r2, [r4, #24]
   19530:	4293      	cmp	r3, r2
   19532:	db01      	blt.n	19538 <__fputwc+0x5c>
   19534:	290a      	cmp	r1, #10
   19536:	d1ed      	bne.n	19514 <__fputwc+0x38>
   19538:	0022      	movs	r2, r4
   1953a:	4640      	mov	r0, r8
   1953c:	f000 f8bc 	bl	196b8 <__swbuf_r>
   19540:	1c43      	adds	r3, r0, #1
   19542:	d1eb      	bne.n	1951c <__fputwc+0x40>
   19544:	b005      	add	sp, #20
   19546:	bc0c      	pop	{r2, r3}
   19548:	4690      	mov	r8, r2
   1954a:	4699      	mov	r9, r3
   1954c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1954e:	2240      	movs	r2, #64	; 0x40
   19550:	89a3      	ldrh	r3, [r4, #12]
   19552:	4313      	orrs	r3, r2
   19554:	81a3      	strh	r3, [r4, #12]
   19556:	e7f5      	b.n	19544 <__fputwc+0x68>
   19558:	464b      	mov	r3, r9
   1955a:	3b01      	subs	r3, #1
   1955c:	2bfe      	cmp	r3, #254	; 0xfe
   1955e:	d8c9      	bhi.n	194f4 <__fputwc+0x18>
   19560:	466a      	mov	r2, sp
   19562:	464b      	mov	r3, r9
   19564:	71d3      	strb	r3, [r2, #7]
   19566:	79d1      	ldrb	r1, [r2, #7]
   19568:	af03      	add	r7, sp, #12
   1956a:	7039      	strb	r1, [r7, #0]
   1956c:	2601      	movs	r6, #1
   1956e:	e7cf      	b.n	19510 <__fputwc+0x34>
   19570:	4648      	mov	r0, r9
   19572:	e7e7      	b.n	19544 <__fputwc+0x68>

00019574 <_fputwc_r>:
   19574:	6e53      	ldr	r3, [r2, #100]	; 0x64
   19576:	b570      	push	{r4, r5, r6, lr}
   19578:	0005      	movs	r5, r0
   1957a:	000e      	movs	r6, r1
   1957c:	0014      	movs	r4, r2
   1957e:	07db      	lsls	r3, r3, #31
   19580:	d41e      	bmi.n	195c0 <_fputwc_r+0x4c>
   19582:	230c      	movs	r3, #12
   19584:	5ed2      	ldrsh	r2, [r2, r3]
   19586:	b291      	uxth	r1, r2
   19588:	058b      	lsls	r3, r1, #22
   1958a:	d516      	bpl.n	195ba <_fputwc_r+0x46>
   1958c:	2380      	movs	r3, #128	; 0x80
   1958e:	019b      	lsls	r3, r3, #6
   19590:	4219      	tst	r1, r3
   19592:	d104      	bne.n	1959e <_fputwc_r+0x2a>
   19594:	431a      	orrs	r2, r3
   19596:	81a2      	strh	r2, [r4, #12]
   19598:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1959a:	4313      	orrs	r3, r2
   1959c:	6663      	str	r3, [r4, #100]	; 0x64
   1959e:	0028      	movs	r0, r5
   195a0:	0022      	movs	r2, r4
   195a2:	0031      	movs	r1, r6
   195a4:	f7ff ff9a 	bl	194dc <__fputwc>
   195a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   195aa:	0005      	movs	r5, r0
   195ac:	07db      	lsls	r3, r3, #31
   195ae:	d402      	bmi.n	195b6 <_fputwc_r+0x42>
   195b0:	89a3      	ldrh	r3, [r4, #12]
   195b2:	059b      	lsls	r3, r3, #22
   195b4:	d508      	bpl.n	195c8 <_fputwc_r+0x54>
   195b6:	0028      	movs	r0, r5
   195b8:	bd70      	pop	{r4, r5, r6, pc}
   195ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
   195bc:	f7fe ffb0 	bl	18520 <__retarget_lock_acquire_recursive>
   195c0:	230c      	movs	r3, #12
   195c2:	5ee2      	ldrsh	r2, [r4, r3]
   195c4:	b291      	uxth	r1, r2
   195c6:	e7e1      	b.n	1958c <_fputwc_r+0x18>
   195c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   195ca:	f7fe ffab 	bl	18524 <__retarget_lock_release_recursive>
   195ce:	e7f2      	b.n	195b6 <_fputwc_r+0x42>

000195d0 <_fstat_r>:
   195d0:	2300      	movs	r3, #0
   195d2:	b570      	push	{r4, r5, r6, lr}
   195d4:	4c07      	ldr	r4, [pc, #28]	; (195f4 <_fstat_r+0x24>)
   195d6:	0005      	movs	r5, r0
   195d8:	0008      	movs	r0, r1
   195da:	0011      	movs	r1, r2
   195dc:	6023      	str	r3, [r4, #0]
   195de:	f7e9 ff8e 	bl	34fe <_fstat>
   195e2:	1c43      	adds	r3, r0, #1
   195e4:	d000      	beq.n	195e8 <_fstat_r+0x18>
   195e6:	bd70      	pop	{r4, r5, r6, pc}
   195e8:	6823      	ldr	r3, [r4, #0]
   195ea:	2b00      	cmp	r3, #0
   195ec:	d0fb      	beq.n	195e6 <_fstat_r+0x16>
   195ee:	602b      	str	r3, [r5, #0]
   195f0:	e7f9      	b.n	195e6 <_fstat_r+0x16>
   195f2:	46c0      	nop			; (mov r8, r8)
   195f4:	20001bf4 	.word	0x20001bf4

000195f8 <_isatty_r>:
   195f8:	2300      	movs	r3, #0
   195fa:	b570      	push	{r4, r5, r6, lr}
   195fc:	4c06      	ldr	r4, [pc, #24]	; (19618 <_isatty_r+0x20>)
   195fe:	0005      	movs	r5, r0
   19600:	0008      	movs	r0, r1
   19602:	6023      	str	r3, [r4, #0]
   19604:	f7e9 ff80 	bl	3508 <_isatty>
   19608:	1c43      	adds	r3, r0, #1
   1960a:	d000      	beq.n	1960e <_isatty_r+0x16>
   1960c:	bd70      	pop	{r4, r5, r6, pc}
   1960e:	6823      	ldr	r3, [r4, #0]
   19610:	2b00      	cmp	r3, #0
   19612:	d0fb      	beq.n	1960c <_isatty_r+0x14>
   19614:	602b      	str	r3, [r5, #0]
   19616:	e7f9      	b.n	1960c <_isatty_r+0x14>
   19618:	20001bf4 	.word	0x20001bf4

0001961c <__locale_mb_cur_max>:
   1961c:	4b05      	ldr	r3, [pc, #20]	; (19634 <__locale_mb_cur_max+0x18>)
   1961e:	681b      	ldr	r3, [r3, #0]
   19620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   19622:	2b00      	cmp	r3, #0
   19624:	d003      	beq.n	1962e <__locale_mb_cur_max+0x12>
   19626:	2294      	movs	r2, #148	; 0x94
   19628:	0052      	lsls	r2, r2, #1
   1962a:	5c98      	ldrb	r0, [r3, r2]
   1962c:	4770      	bx	lr
   1962e:	4b02      	ldr	r3, [pc, #8]	; (19638 <__locale_mb_cur_max+0x1c>)
   19630:	e7f9      	b.n	19626 <__locale_mb_cur_max+0xa>
   19632:	46c0      	nop			; (mov r8, r8)
   19634:	20000064 	.word	0x20000064
   19638:	200008a4 	.word	0x200008a4

0001963c <_lseek_r>:
   1963c:	b570      	push	{r4, r5, r6, lr}
   1963e:	0005      	movs	r5, r0
   19640:	0008      	movs	r0, r1
   19642:	0011      	movs	r1, r2
   19644:	2200      	movs	r2, #0
   19646:	4c06      	ldr	r4, [pc, #24]	; (19660 <_lseek_r+0x24>)
   19648:	6022      	str	r2, [r4, #0]
   1964a:	001a      	movs	r2, r3
   1964c:	f7e9 ff5e 	bl	350c <_lseek>
   19650:	1c43      	adds	r3, r0, #1
   19652:	d000      	beq.n	19656 <_lseek_r+0x1a>
   19654:	bd70      	pop	{r4, r5, r6, pc}
   19656:	6823      	ldr	r3, [r4, #0]
   19658:	2b00      	cmp	r3, #0
   1965a:	d0fb      	beq.n	19654 <_lseek_r+0x18>
   1965c:	602b      	str	r3, [r5, #0]
   1965e:	e7f9      	b.n	19654 <_lseek_r+0x18>
   19660:	20001bf4 	.word	0x20001bf4

00019664 <__ascii_mbtowc>:
   19664:	b082      	sub	sp, #8
   19666:	2900      	cmp	r1, #0
   19668:	d00a      	beq.n	19680 <__ascii_mbtowc+0x1c>
   1966a:	2a00      	cmp	r2, #0
   1966c:	d00b      	beq.n	19686 <__ascii_mbtowc+0x22>
   1966e:	2b00      	cmp	r3, #0
   19670:	d00b      	beq.n	1968a <__ascii_mbtowc+0x26>
   19672:	7813      	ldrb	r3, [r2, #0]
   19674:	600b      	str	r3, [r1, #0]
   19676:	7810      	ldrb	r0, [r2, #0]
   19678:	1e43      	subs	r3, r0, #1
   1967a:	4198      	sbcs	r0, r3
   1967c:	b002      	add	sp, #8
   1967e:	4770      	bx	lr
   19680:	a901      	add	r1, sp, #4
   19682:	2a00      	cmp	r2, #0
   19684:	d1f3      	bne.n	1966e <__ascii_mbtowc+0xa>
   19686:	2000      	movs	r0, #0
   19688:	e7f8      	b.n	1967c <__ascii_mbtowc+0x18>
   1968a:	2002      	movs	r0, #2
   1968c:	4240      	negs	r0, r0
   1968e:	e7f5      	b.n	1967c <__ascii_mbtowc+0x18>

00019690 <_read_r>:
   19690:	b570      	push	{r4, r5, r6, lr}
   19692:	0005      	movs	r5, r0
   19694:	0008      	movs	r0, r1
   19696:	0011      	movs	r1, r2
   19698:	2200      	movs	r2, #0
   1969a:	4c06      	ldr	r4, [pc, #24]	; (196b4 <_read_r+0x24>)
   1969c:	6022      	str	r2, [r4, #0]
   1969e:	001a      	movs	r2, r3
   196a0:	f7e9 fece 	bl	3440 <_read>
   196a4:	1c43      	adds	r3, r0, #1
   196a6:	d000      	beq.n	196aa <_read_r+0x1a>
   196a8:	bd70      	pop	{r4, r5, r6, pc}
   196aa:	6823      	ldr	r3, [r4, #0]
   196ac:	2b00      	cmp	r3, #0
   196ae:	d0fb      	beq.n	196a8 <_read_r+0x18>
   196b0:	602b      	str	r3, [r5, #0]
   196b2:	e7f9      	b.n	196a8 <_read_r+0x18>
   196b4:	20001bf4 	.word	0x20001bf4

000196b8 <__swbuf_r>:
   196b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   196ba:	0006      	movs	r6, r0
   196bc:	000d      	movs	r5, r1
   196be:	0014      	movs	r4, r2
   196c0:	2800      	cmp	r0, #0
   196c2:	d002      	beq.n	196ca <__swbuf_r+0x12>
   196c4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   196c6:	2b00      	cmp	r3, #0
   196c8:	d04e      	beq.n	19768 <__swbuf_r+0xb0>
   196ca:	69a3      	ldr	r3, [r4, #24]
   196cc:	60a3      	str	r3, [r4, #8]
   196ce:	230c      	movs	r3, #12
   196d0:	5ee0      	ldrsh	r0, [r4, r3]
   196d2:	b281      	uxth	r1, r0
   196d4:	070b      	lsls	r3, r1, #28
   196d6:	d53c      	bpl.n	19752 <__swbuf_r+0x9a>
   196d8:	6923      	ldr	r3, [r4, #16]
   196da:	2b00      	cmp	r3, #0
   196dc:	d039      	beq.n	19752 <__swbuf_r+0x9a>
   196de:	22ff      	movs	r2, #255	; 0xff
   196e0:	b2ef      	uxtb	r7, r5
   196e2:	4015      	ands	r5, r2
   196e4:	2280      	movs	r2, #128	; 0x80
   196e6:	0192      	lsls	r2, r2, #6
   196e8:	4211      	tst	r1, r2
   196ea:	d015      	beq.n	19718 <__swbuf_r+0x60>
   196ec:	6822      	ldr	r2, [r4, #0]
   196ee:	6961      	ldr	r1, [r4, #20]
   196f0:	1ad3      	subs	r3, r2, r3
   196f2:	428b      	cmp	r3, r1
   196f4:	da1b      	bge.n	1972e <__swbuf_r+0x76>
   196f6:	3301      	adds	r3, #1
   196f8:	68a1      	ldr	r1, [r4, #8]
   196fa:	3901      	subs	r1, #1
   196fc:	60a1      	str	r1, [r4, #8]
   196fe:	1c51      	adds	r1, r2, #1
   19700:	6021      	str	r1, [r4, #0]
   19702:	7017      	strb	r7, [r2, #0]
   19704:	6962      	ldr	r2, [r4, #20]
   19706:	429a      	cmp	r2, r3
   19708:	d01a      	beq.n	19740 <__swbuf_r+0x88>
   1970a:	89a3      	ldrh	r3, [r4, #12]
   1970c:	07db      	lsls	r3, r3, #31
   1970e:	d501      	bpl.n	19714 <__swbuf_r+0x5c>
   19710:	2d0a      	cmp	r5, #10
   19712:	d015      	beq.n	19740 <__swbuf_r+0x88>
   19714:	0028      	movs	r0, r5
   19716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19718:	4302      	orrs	r2, r0
   1971a:	6e61      	ldr	r1, [r4, #100]	; 0x64
   1971c:	81a2      	strh	r2, [r4, #12]
   1971e:	4a14      	ldr	r2, [pc, #80]	; (19770 <__swbuf_r+0xb8>)
   19720:	400a      	ands	r2, r1
   19722:	6662      	str	r2, [r4, #100]	; 0x64
   19724:	6961      	ldr	r1, [r4, #20]
   19726:	6822      	ldr	r2, [r4, #0]
   19728:	1ad3      	subs	r3, r2, r3
   1972a:	428b      	cmp	r3, r1
   1972c:	dbe3      	blt.n	196f6 <__swbuf_r+0x3e>
   1972e:	0021      	movs	r1, r4
   19730:	0030      	movs	r0, r6
   19732:	f7fe fb59 	bl	17de8 <_fflush_r>
   19736:	2800      	cmp	r0, #0
   19738:	d108      	bne.n	1974c <__swbuf_r+0x94>
   1973a:	6822      	ldr	r2, [r4, #0]
   1973c:	2301      	movs	r3, #1
   1973e:	e7db      	b.n	196f8 <__swbuf_r+0x40>
   19740:	0021      	movs	r1, r4
   19742:	0030      	movs	r0, r6
   19744:	f7fe fb50 	bl	17de8 <_fflush_r>
   19748:	2800      	cmp	r0, #0
   1974a:	d0e3      	beq.n	19714 <__swbuf_r+0x5c>
   1974c:	2501      	movs	r5, #1
   1974e:	426d      	negs	r5, r5
   19750:	e7e0      	b.n	19714 <__swbuf_r+0x5c>
   19752:	0021      	movs	r1, r4
   19754:	0030      	movs	r0, r6
   19756:	f7fd f9b3 	bl	16ac0 <__swsetup_r>
   1975a:	2800      	cmp	r0, #0
   1975c:	d1f6      	bne.n	1974c <__swbuf_r+0x94>
   1975e:	230c      	movs	r3, #12
   19760:	5ee0      	ldrsh	r0, [r4, r3]
   19762:	6923      	ldr	r3, [r4, #16]
   19764:	b281      	uxth	r1, r0
   19766:	e7ba      	b.n	196de <__swbuf_r+0x26>
   19768:	f7fe fb98 	bl	17e9c <__sinit>
   1976c:	e7ad      	b.n	196ca <__swbuf_r+0x12>
   1976e:	46c0      	nop			; (mov r8, r8)
   19770:	ffffdfff 	.word	0xffffdfff

00019774 <_wcrtomb_r>:
   19774:	b570      	push	{r4, r5, r6, lr}
   19776:	001d      	movs	r5, r3
   19778:	4b11      	ldr	r3, [pc, #68]	; (197c0 <_wcrtomb_r+0x4c>)
   1977a:	b084      	sub	sp, #16
   1977c:	681b      	ldr	r3, [r3, #0]
   1977e:	0004      	movs	r4, r0
   19780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   19782:	2900      	cmp	r1, #0
   19784:	d00e      	beq.n	197a4 <_wcrtomb_r+0x30>
   19786:	2b00      	cmp	r3, #0
   19788:	d016      	beq.n	197b8 <_wcrtomb_r+0x44>
   1978a:	20e0      	movs	r0, #224	; 0xe0
   1978c:	581e      	ldr	r6, [r3, r0]
   1978e:	002b      	movs	r3, r5
   19790:	0020      	movs	r0, r4
   19792:	47b0      	blx	r6
   19794:	1c43      	adds	r3, r0, #1
   19796:	d103      	bne.n	197a0 <_wcrtomb_r+0x2c>
   19798:	2300      	movs	r3, #0
   1979a:	602b      	str	r3, [r5, #0]
   1979c:	338a      	adds	r3, #138	; 0x8a
   1979e:	6023      	str	r3, [r4, #0]
   197a0:	b004      	add	sp, #16
   197a2:	bd70      	pop	{r4, r5, r6, pc}
   197a4:	2b00      	cmp	r3, #0
   197a6:	d009      	beq.n	197bc <_wcrtomb_r+0x48>
   197a8:	22e0      	movs	r2, #224	; 0xe0
   197aa:	a901      	add	r1, sp, #4
   197ac:	589e      	ldr	r6, [r3, r2]
   197ae:	0020      	movs	r0, r4
   197b0:	002b      	movs	r3, r5
   197b2:	2200      	movs	r2, #0
   197b4:	47b0      	blx	r6
   197b6:	e7ed      	b.n	19794 <_wcrtomb_r+0x20>
   197b8:	4b02      	ldr	r3, [pc, #8]	; (197c4 <_wcrtomb_r+0x50>)
   197ba:	e7e6      	b.n	1978a <_wcrtomb_r+0x16>
   197bc:	4b01      	ldr	r3, [pc, #4]	; (197c4 <_wcrtomb_r+0x50>)
   197be:	e7f3      	b.n	197a8 <_wcrtomb_r+0x34>
   197c0:	20000064 	.word	0x20000064
   197c4:	200008a4 	.word	0x200008a4

000197c8 <__ascii_wctomb>:
   197c8:	2900      	cmp	r1, #0
   197ca:	d004      	beq.n	197d6 <__ascii_wctomb+0xe>
   197cc:	2aff      	cmp	r2, #255	; 0xff
   197ce:	d804      	bhi.n	197da <__ascii_wctomb+0x12>
   197d0:	2001      	movs	r0, #1
   197d2:	700a      	strb	r2, [r1, #0]
   197d4:	4770      	bx	lr
   197d6:	2000      	movs	r0, #0
   197d8:	e7fc      	b.n	197d4 <__ascii_wctomb+0xc>
   197da:	238a      	movs	r3, #138	; 0x8a
   197dc:	6003      	str	r3, [r0, #0]
   197de:	2001      	movs	r0, #1
   197e0:	4240      	negs	r0, r0
   197e2:	e7f7      	b.n	197d4 <__ascii_wctomb+0xc>

000197e4 <__aeabi_dcmpun>:
   197e4:	b570      	push	{r4, r5, r6, lr}
   197e6:	4e0e      	ldr	r6, [pc, #56]	; (19820 <__aeabi_dcmpun+0x3c>)
   197e8:	030d      	lsls	r5, r1, #12
   197ea:	031c      	lsls	r4, r3, #12
   197ec:	0049      	lsls	r1, r1, #1
   197ee:	005b      	lsls	r3, r3, #1
   197f0:	0b2d      	lsrs	r5, r5, #12
   197f2:	0d49      	lsrs	r1, r1, #21
   197f4:	0b24      	lsrs	r4, r4, #12
   197f6:	0d5b      	lsrs	r3, r3, #21
   197f8:	42b1      	cmp	r1, r6
   197fa:	d004      	beq.n	19806 <__aeabi_dcmpun+0x22>
   197fc:	4908      	ldr	r1, [pc, #32]	; (19820 <__aeabi_dcmpun+0x3c>)
   197fe:	2000      	movs	r0, #0
   19800:	428b      	cmp	r3, r1
   19802:	d008      	beq.n	19816 <__aeabi_dcmpun+0x32>
   19804:	bd70      	pop	{r4, r5, r6, pc}
   19806:	4305      	orrs	r5, r0
   19808:	2001      	movs	r0, #1
   1980a:	2d00      	cmp	r5, #0
   1980c:	d1fa      	bne.n	19804 <__aeabi_dcmpun+0x20>
   1980e:	4904      	ldr	r1, [pc, #16]	; (19820 <__aeabi_dcmpun+0x3c>)
   19810:	2000      	movs	r0, #0
   19812:	428b      	cmp	r3, r1
   19814:	d1f6      	bne.n	19804 <__aeabi_dcmpun+0x20>
   19816:	4314      	orrs	r4, r2
   19818:	0020      	movs	r0, r4
   1981a:	1e44      	subs	r4, r0, #1
   1981c:	41a0      	sbcs	r0, r4
   1981e:	e7f1      	b.n	19804 <__aeabi_dcmpun+0x20>
   19820:	000007ff 	.word	0x000007ff
   19824:	0000045c 	.word	0x0000045c
   19828:	000006a6 	.word	0x000006a6
   1982c:	000006a6 	.word	0x000006a6
   19830:	000006a6 	.word	0x000006a6
   19834:	000006a6 	.word	0x000006a6
   19838:	000006a6 	.word	0x000006a6
   1983c:	000006a6 	.word	0x000006a6
   19840:	000006a6 	.word	0x000006a6
   19844:	000006a6 	.word	0x000006a6
   19848:	000006a6 	.word	0x000006a6
   1984c:	000006a6 	.word	0x000006a6
   19850:	000006a6 	.word	0x000006a6
   19854:	000006a6 	.word	0x000006a6
   19858:	000006a6 	.word	0x000006a6
   1985c:	000006a6 	.word	0x000006a6
   19860:	000006a6 	.word	0x000006a6
   19864:	00000444 	.word	0x00000444
   19868:	000006a6 	.word	0x000006a6
   1986c:	000006a6 	.word	0x000006a6
   19870:	000006a6 	.word	0x000006a6
   19874:	000006a6 	.word	0x000006a6
   19878:	000006a6 	.word	0x000006a6
   1987c:	000006a6 	.word	0x000006a6
   19880:	000006a6 	.word	0x000006a6
   19884:	000006a6 	.word	0x000006a6
   19888:	000006a6 	.word	0x000006a6
   1988c:	000006a6 	.word	0x000006a6
   19890:	000006a6 	.word	0x000006a6
   19894:	000006a6 	.word	0x000006a6
   19898:	000006a6 	.word	0x000006a6
   1989c:	000006a6 	.word	0x000006a6
   198a0:	000006a6 	.word	0x000006a6
   198a4:	00000454 	.word	0x00000454
   198a8:	000006a6 	.word	0x000006a6
   198ac:	000006a6 	.word	0x000006a6
   198b0:	000006a6 	.word	0x000006a6
   198b4:	000006a6 	.word	0x000006a6
   198b8:	000006a6 	.word	0x000006a6
   198bc:	000006a6 	.word	0x000006a6
   198c0:	000006a6 	.word	0x000006a6
   198c4:	000006a6 	.word	0x000006a6
   198c8:	000006a6 	.word	0x000006a6
   198cc:	000006a6 	.word	0x000006a6
   198d0:	000006a6 	.word	0x000006a6
   198d4:	000006a6 	.word	0x000006a6
   198d8:	000006a6 	.word	0x000006a6
   198dc:	000006a6 	.word	0x000006a6
   198e0:	000006a6 	.word	0x000006a6
   198e4:	0000044c 	.word	0x0000044c
   198e8:	00000464 	.word	0x00000464
   198ec:	0000042c 	.word	0x0000042c
   198f0:	0000043c 	.word	0x0000043c
   198f4:	00000434 	.word	0x00000434
   198f8:	0000ffff 	.word	0x0000ffff
   198fc:	0000ffff 	.word	0x0000ffff
   19900:	00000004 	.word	0x00000004
   19904:	00000005 	.word	0x00000005
   19908:	00000006 	.word	0x00000006
   1990c:	00000007 	.word	0x00000007
   19910:	00000020 	.word	0x00000020
   19914:	0000ffff 	.word	0x0000ffff
   19918:	00000022 	.word	0x00000022
   1991c:	00000023 	.word	0x00000023
   19920:	0000ffff 	.word	0x0000ffff
   19924:	0000ffff 	.word	0x0000ffff
   19928:	0000ffff 	.word	0x0000ffff
   1992c:	0000ffff 	.word	0x0000ffff
   19930:	00000008 	.word	0x00000008
   19934:	00000009 	.word	0x00000009
   19938:	0000000a 	.word	0x0000000a
   1993c:	0000000b 	.word	0x0000000b
   19940:	0000ffff 	.word	0x0000ffff
   19944:	0000ffff 	.word	0x0000ffff
   19948:	0000ffff 	.word	0x0000ffff
   1994c:	0000ffff 	.word	0x0000ffff
   19950:	42000000 	.word	0x42000000
   19954:	42000400 	.word	0x42000400
   19958:	42000800 	.word	0x42000800
   1995c:	42000c00 	.word	0x42000c00
   19960:	42001000 	.word	0x42001000
   19964:	43000400 	.word	0x43000400
   19968:	00002626 	.word	0x00002626
   1996c:	00002622 	.word	0x00002622
   19970:	00002622 	.word	0x00002622
   19974:	00002688 	.word	0x00002688
   19978:	00002688 	.word	0x00002688
   1997c:	0000263c 	.word	0x0000263c
   19980:	0000262c 	.word	0x0000262c
   19984:	00002642 	.word	0x00002642
   19988:	00002676 	.word	0x00002676
   1998c:	0000282c 	.word	0x0000282c
   19990:	0000280c 	.word	0x0000280c
   19994:	0000280c 	.word	0x0000280c
   19998:	000028a6 	.word	0x000028a6
   1999c:	0000281e 	.word	0x0000281e
   199a0:	0000283a 	.word	0x0000283a
   199a4:	00002810 	.word	0x00002810
   199a8:	00002848 	.word	0x00002848
   199ac:	0000288a 	.word	0x0000288a
   199b0:	000028e4 	.word	0x000028e4
   199b4:	00002926 	.word	0x00002926
   199b8:	00002926 	.word	0x00002926
   199bc:	00002926 	.word	0x00002926
   199c0:	000028d6 	.word	0x000028d6
   199c4:	000028f2 	.word	0x000028f2
   199c8:	000028c8 	.word	0x000028c8
   199cc:	00002900 	.word	0x00002900
   199d0:	00002916 	.word	0x00002916
   199d4:	00002fe6 	.word	0x00002fe6
   199d8:	000030dc 	.word	0x000030dc
   199dc:	000030e6 	.word	0x000030e6
   199e0:	000030f0 	.word	0x000030f0
   199e4:	000030fa 	.word	0x000030fa
   199e8:	0000312c 	.word	0x0000312c
   199ec:	00003136 	.word	0x00003136
   199f0:	00003140 	.word	0x00003140
   199f4:	0000314a 	.word	0x0000314a
   199f8:	00003154 	.word	0x00003154
   199fc:	42002000 	.word	0x42002000
   19a00:	42002400 	.word	0x42002400
   19a04:	42002800 	.word	0x42002800
   19a08:	42002c00 	.word	0x42002c00
   19a0c:	43000800 	.word	0x43000800
   19a10:	00000002 	.word	0x00000002
   19a14:	00000100 	.word	0x00000100
   19a18:	00000002 	.word	0x00000002
   19a1c:	00000200 	.word	0x00000200
   19a20:	00000002 	.word	0x00000002
   19a24:	00000400 	.word	0x00000400
   19a28:	00000002 	.word	0x00000002
   19a2c:	00000800 	.word	0x00000800
   19a30:	00000003 	.word	0x00000003
   19a34:	00000004 	.word	0x00000004
   19a38:	75640a0d 	.word	0x75640a0d
   19a3c:	20796d6d 	.word	0x20796d6d
   19a40:	646e6168 	.word	0x646e6168
   19a44:	2872656c 	.word	0x2872656c
   19a48:	00000029 	.word	0x00000029

00019a4c <AdvChannels923>:
   19a4c:	3706ea00 3706ea00 ff100100 3709f740     ...7...7....@..7
   19a5c:	3709f740 ff100100                       @..7....

00019a64 <DefaultChannels923>:
   19a64:	50015001                                .P.P

00019a68 <DefaultDrParamsAS>:
   19a68:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   19a78:	0b33000e 01070ac6 3573001a 010709c2     ..3.......s5....
   19a88:	7df20031 010708be f2f20053 010707bc     1..}....S.......
   19a98:	f2f2003c 010807f1 f2f20064 000a00ce     <.......d.......

00019aa8 <SubBandDutyCycle923>:
   19aa8:	00000064                                d...

00019aac <SubBandParams923>:
   19aac:	35c36d80 37502800 00000000              .m.5.(P7....

00019ab8 <DefaultChannels915AU>:
   19ab8:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   19ac8:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   19ad8:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   19ae8:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   19af8:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   19b08:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   19b18:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   19b28:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   19b38:	66016601 66016601 66016601 66016601     .f.f.f.f.f.f.f.f

00019b48 <DefaultDrParamsAU>:
   19b48:	00330008 01070cdf 0033000b 01070bce     ..3.......3.....
   19b58:	00330012 01070ac6 0073001c 010709c2     ..3.......s.....
   19b68:	00f2003d 010708be 00f20053 010707bc     =.......S.......
   19b78:	00f2003d 010908be 00000000 010a0000     =...............
   19b88:	00350007 01090c0c 00810005 01090b06     ..5.............
   19b98:	00f20007 01090a01 00f2000c 010909fe     ................
   19ba8:	00f20016 010908fc 00f2002a 010907fc     ........*.......

00019bb8 <AdvChannels433>:
   19bb8:	19d1b9d8 19d1b9d8 ff0c0101 19d4c718     ................
   19bc8:	19d4c718 ff0c0101 19d7d458 19d7d458     ........X...X...
   19bd8:	ff0c0101                                ....

00019bdc <AdvChannels868>:
   19bdc:	33be27a0 33be27a0 ff100101 33c134e0     .'.3.'.3.....4.3
   19bec:	33c134e0 ff100101 33c44220 33c44220     .4.3.... B.3 B.3
   19bfc:	ff100101                                ....

00019c00 <DefaultChannels433>:
   19c00:	50015001 00005001                       .P.P.P..

00019c08 <DefaultChannels868>:
   19c08:	50015001 00005001                       .P.P.P..

00019c10 <DefaultDrparamsEU>:
   19c10:	00330008 01070cdf 0033000b 01070bd3     ..3.......3.....
   19c20:	00330017 01070acc 0073001c 010709c2     ..3.......s.....
   19c30:	00f2003d 010708be 00f20053 010707bc     =.......S.......
   19c40:	00f2003c 010807f1 00f20064 000a00ce     <.......d.......

00019c50 <SubBandDutyCycle868>:
   19c50:	006403e8 03e80064 0064000a              ..d.d.....d.

00019c5c <SubBandParams433>:
   19c5c:	19cf0e40 19ea8580 00000000              @...........

00019c68 <SubBandParams868>:
   19c68:	337055c0 338eda40 00000000 338eda41     .Up3@..3....A..3
   19c78:	33bca100 00000000 33bca101 33c5c8c0     ...3.......3...3
   19c88:	00000000 33c74f60 33cef080 00000000     ....`O.3...3....
   19c98:	33d1fdc0 33d5ce50 00000000 33d691a0     ...3P..3.......3
   19ca8:	33db2580 00000000                       .%.3....

00019cb0 <AdvChannels865>:
   19cb0:	338fce64 338fce64 ff1e0100 3394fe84     d..3d..3.......3
   19cc0:	3394fe84 ff1e0100 339de1e8 339de1e8     ...3.......3...3
   19cd0:	ff1e0100                                ....

00019cd4 <DefaultChannels865>:
   19cd4:	50015001 00005001                       .P.P.P..

00019cdc <DefaultDrParamsIN>:
   19cdc:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   19cec:	0033000e 01070ac6 0073001a 010709c2     ..3.......s.....
   19cfc:	00f20031 010708be 00f20053 010707bc     1.......S.......
   19d0c:	00000000 010a0000 00f20008 000a00fe     ................

00019d1c <AdvChannels923JP>:
   19d1c:	3706ea00 3706ea00 ff100101 3709f740     ...7...7....@..7
   19d2c:	3709f740 ff100101                       @..7....

00019d34 <DefaultChannels923JP>:
   19d34:	50015001                                .P.P

00019d38 <DefaultDrParamsJP>:
   19d38:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   19d48:	0b33000e 01070ac6 3573001a 010709c2     ..3.......s5....
   19d58:	7df20031 010708be f2f20053 010707bc     1..}....S.......
   19d68:	f2f2003c 010807f1 f2f20064 000a00ce     <.......d.......

00019d78 <SubBandDutyCycleJP923>:
   19d78:	000a0064                                d...

00019d7c <SubBandParamsJP923>:
   19d7c:	36d61600 36f7a7c0 00000000 36fab500     ...6...6.......6
   19d8c:	37502800 00000000                       .(P7....

00019d94 <AdvChannels920KR>:
   19d94:	36f62120 36f62120 ff0e0100 36f92e60      !.6 !.6....`..6
   19da4:	36f92e60 ff0e0100 36fc3ba0 36fc3ba0     `..6.....;.6.;.6
   19db4:	ff0e0100                                ....

00019db8 <DefaultChannels920KR>:
   19db8:	50015001 00005001                       .P.P.P..

00019dc0 <DefaultDrParamsKR>:
   19dc0:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   19dd0:	0033000e 01070ac6 0073001a 010709c2     ..3.......s.....
   19de0:	00f20031 010708be 00f20053 010707bc     1.......S.......

00019df0 <DefaultChannels915>:
   19df0:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   19e00:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   19e10:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   19e20:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   19e30:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   19e40:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   19e50:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   19e60:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   19e70:	44014401 44014401 44014401 44014401     .D.D.D.D.D.D.D.D

00019e80 <DefaultDrParamsNA>:
   19e80:	000b0012 01070ac6 00350005 01070906     ..........5.....
   19e90:	007d0007 01070801 00f2000c 010707fe     ..}.............
   19ea0:	00f20016 010908fc 00000000 010a0000     ................
   19eb0:	00000000 010a0000 00000000 010a0000     ................
   19ec0:	00350023 01090cd5 00810007 01090b06     #.5.............
   19ed0:	00f20007 01090a01 00f2000c 010909fe     ................
   19ee0:	00f20016 010908fc 00f2002a 010907fc     ........*.......
   19ef0:	00005aec 00005aec 00005aec 00005aec     .Z...Z...Z...Z..
   19f00:	00005b52 00005bb8 00005b6a 00005b52     R[...[..j[..R[..

00019f10 <taskHandlers>:
   19f10:	00009905 00010619 0000fc0d 000091fb     ................
   19f20:	0000a971                                q...

00019f24 <tc_interrupt_vectors.13496>:
   19f24:	14131211 00000015 69570a0d 4420646e     ..........Wind D
   19f34:	63657269 6e6f6974 67656428 25203a29     irection(deg): %
   19f44:	0a0d2064 00000000 0000a72c 0000a664     d ......,...d...
   19f54:	0000a66c 0000a674 0000a67c 0000a684     l...t...|.......
   19f64:	0000a68c 0000a694 0000a608 0000a69c     ................
   19f74:	0000a6a4 0000a6ac 0000a6b4 0000a6bc     ................
   19f84:	0000a6c4 0000a6cc 0000a6d4 0000a6dc     ................
   19f94:	0000a6e4 0000a6ec 0000a6f4 0000a6fc     ................
   19fa4:	0000a72c 0000a704 0000a70c 0000a714     ,...............
   19fb4:	0000a71c 0000a72c 0000a72c 0000a72c     ....,...,...,...
   19fc4:	0000a724 0000a75e 0000a766 0000a76e     $...^...f...n...
   19fd4:	0000a776 0000a77e 0000a78e 0000a796     v...~...........
   19fe4:	0000a79e 0000a742 0000a7a6 0000a7ae     ....B...........
   19ff4:	0000a7b6 0000a7be 0000a7c6 0000a7ce     ................
   1a004:	0000a7d6 0000a7de 0000a7e6 0000a7ee     ................
   1a014:	0000a7f6 0000a7fe 0000a806 0000a836     ............6...
   1a024:	0000a80e 0000a816 0000a81e 0000a826     ............&...
   1a034:	0000a786 0000a836 0000a836 0000a82e     ....6...6.......
   1a044:	0000ae60 0000ae70 0000ae78 0000ae80     `...p...x.......
   1a054:	0000ae88 0000ae90 0000ae98 0000aea0     ................
   1a064:	0000aea8 0000ae68 0000aec0 0000aeb8     ....h...........
   1a074:	0000aec0 0000aeb0                       ........

0001a07c <appTaskHandlers>:
   1a07c:	0000a901 0000af09                       ........

0001a084 <bandStrings>:
   1a084:	0001aaa4 0001aab8 0001a570 0001aac0     ........p.......
   1a094:	0001aac8 0001aad0 0001aad8 0001aae0     ................
   1a0a4:	0001aae8 0001aaf4                       ........

0001a0ac <demoMcastAppsKey>:
   1a0ac:	16157e2b a6d2ae28 16157e2b a6d2ae28     +~..(...+~..(...

0001a0bc <demoMcastNwksKey>:
   1a0bc:	27268f3c b7e3bf39 992608bc 4d50d01a     <.&'9.....&...PM
   1a0cc:	202a2a2a 65636552 64657669 204c4420     *** Received DL 
   1a0dc:	61746144 2a2a2a20 00000d0a 6172460a     Data ***.....Fra
   1a0ec:	5220656d 69656365 20646576 70207461     me Received at p
   1a0fc:	2074726f 0d0a6425 00000000 6172460a     ort %d.......Fra
   1a10c:	4c20656d 74676e65 202d2068 0d0a6425     me Length - %d..
   1a11c:	00000000 6464410a 73736572 30202d20     .....Address - 0
   1a12c:	786c2578 00000d0a 7961500a 64616f6c     x%lx.....Payload
   1a13c:	0000203a 00007825 2a2a0a0d 2a2a2a2a     : ..%x....******
   1a14c:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1a15c:	0d2a2a2a 00000000 65636552 64657669     ***.....Received
   1a16c:	4b434120 726f6620 6e6f4320 6d726966      ACK for Confirm
   1a17c:	64206465 0d617461 00000000 41520d0a     ed data.......RA
   1a18c:	5f4f4944 445f4f4e 20415441 00000d0a     DIO_NO_DATA ....
   1a19c:	41520d0a 5f4f4944 41544144 5a49535f     ..RADIO_DATA_SIZ
   1a1ac:	0d0a2045 00000000 41520d0a 5f4f4944     E ........RADIO_
   1a1bc:	41564e49 5f44494c 20514552 00000d0a     INVALID_REQ ....
   1a1cc:	41520d0a 5f4f4944 59535542 000d0a20     ..RADIO_BUSY ...
   1a1dc:	41520d0a 5f4f4944 5f54554f 525f464f     ..RADIO_OUT_OF_R
   1a1ec:	45474e41 000d0a20 41520d0a 5f4f4944     ANGE .....RADIO_
   1a1fc:	55534e55 524f5050 5f444554 52545441     UNSUPPORTED_ATTR
   1a20c:	000d0a20 41520d0a 5f4f4944 4e414843      .....RADIO_CHAN
   1a21c:	5f4c454e 59535542 000d0a20 574e0d0a     NEL_BUSY .....NW
   1a22c:	4f4e5f4b 4f4a5f54 44454e49 000d0a20     K_NOT_JOINED ...
   1a23c:	4e490d0a 494c4156 41505f44 454d4152     ..INVALID_PARAME
   1a24c:	20524554 00000d0a 454b0d0a 4e5f5359     TER ......KEYS_N
   1a25c:	495f544f 4954494e 5a494c41 0a204445     OT_INITIALIZED .
   1a26c:	0000000d 49530d0a 544e454c 4d4d495f     ......SILENT_IMM
   1a27c:	41494445 594c4554 5443415f 0a455649     EDIATELY_ACTIVE.
   1a28c:	0000000d 43460d0a 5f52544e 4f525245     ......FCNTR_ERRO
   1a29c:	45525f52 4e494f4a 45454e5f 20444544     R_REJOIN_NEEDED 
   1a2ac:	00000d0a 4e490d0a 494c4156 55425f44     ......INVALID_BU
   1a2bc:	52454646 4e454c5f 20485447 00000d0a     FFER_LENGTH ....
   1a2cc:	414d0d0a 41505f43 44455355 0d0a2020     ..MAC_PAUSED  ..
   1a2dc:	00000000 4f4e0d0a 4148435f 4c454e4e     ......NO_CHANNEL
   1a2ec:	4f465f53 20444e55 00000d0a 55420d0a     S_FOUND ......BU
   1a2fc:	0d0a5953 00000000 4f4e0d0a 4b43415f     SY........NO_ACK
   1a30c:	000d0a20 4c410d0a 44414552 4f4a2059      .....ALREADY JO
   1a31c:	4e494e49 53492047 204e4920 474f5250     INING IS IN PROG
   1a32c:	53534552 000d0a20 45520d0a 52554f53     RESS .....RESOUR
   1a33c:	555f4543 4156414e 42414c49 0a20454c     CE_UNAVAILABLE .
   1a34c:	0000000d 4e490d0a 494c4156 45525f44     ......INVALID_RE
   1a35c:	53455551 0d0a2054 00000000 43460d0a     QUEST ........FC
   1a36c:	5f52544e 4f525245 0d0a2052 00000000     NTR_ERROR ......
   1a37c:	494d0d0a 52455f43 20524f52 00000d0a     ..MIC_ERROR ....
   1a38c:	4e490d0a 494c4156 544d5f44 20455059     ..INVALID_MTYPE 
   1a39c:	00000d0a 434d0d0a 5f545341 5f524448     ......MCAST_HDR_
   1a3ac:	41564e49 2044494c 00000d0a 4e490d0a     INVALID ......IN
   1a3bc:	494c4156 41505f44 54454b43 000d0a20     VALID_PACKET ...
   1a3cc:	4e4b4e55 204e574f 4f525245 000d0a52     UNKNOWN ERROR...
   1a3dc:	6e617254 73696d73 6e6f6973 63755320     Transmission Suc
   1a3ec:	73736563 0000000d 2078540a 656d6954     cess.....Tx Time
   1a3fc:	0a74756f 0000000d 4e550d0a 574f4e4b     out.......UNKNOW
   1a40c:	5245204e 0a524f52 0000000d 2a2a0d0a     N ERROR.......**
   1a41c:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1a42c:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1a43c:	2a2a2a2a 2a2a2a2a 2a2a2a2a 0a2a2a2a     ***************.
   1a44c:	0000000d 696f4a0a 676e696e 63755320     .....Joining Suc
   1a45c:	73736563 0a6c7566 0000000d 7665440a     cessful......Dev
   1a46c:	72646441 7830203a 0a786c25 0000000d     Addr: 0x%lx.....
   1a47c:	6464410a 73736572 6e6f6320 63696c66     .Address conflic
   1a48c:	65622074 65657774 6544206e 65636976     t between Device
   1a49c:	64644120 73736572 646e6120 6c754d20      Address and Mul
   1a4ac:	61636974 67207473 70756f72 64646120     ticast group add
   1a4bc:	73736572 00000d0a 6f4e200a 65724620     ress..... No Fre
   1a4cc:	68432065 656e6e61 6f66206c 00646e75     e Channel found.
   1a4dc:	494d200a 72452043 00726f72 7254200a     . MIC Error.. Tr
   1a4ec:	6d736e61 69737369 54206e6f 6f656d69     ansmission Timeo
   1a4fc:	00007475 696f4a0a 676e696e 6e654420     ut...Joining Den
   1a50c:	0a646569 0000000d 2a2a0d0a 2a2a2a2a     ied.......******
   1a51c:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1a52c:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1a53c:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1a54c:	000d0a2a 61526f4c 204e4157 74616557     *...LoRaWAN Weat
   1a55c:	20726568 74617453 206e6f69 6f6d6544     her Station Demo
   1a56c:	0000000d 3139414e 00000035 65520a0d     ....NA915.....Re
   1a57c:	6e6f6967 62206c61 20646e61 656c6573     gional band sele
   1a58c:	64657463 20736920 0a0d7325 00000000     cted is %s......
   1a59c:	6f727245 54532072 20455441 65746e45     Error STATE Ente
   1a5ac:	0d646572 00000000 696f4a0a 6170206e     red......Join pa
   1a5bc:	656d6172 73726574 696e6920 6c616974     rameters initial
   1a5cc:	74617a69 206e6f69 6c696166 0d0a6465     ization failed..
   1a5dc:	00000000 736e550a 6f707075 64657472     .....Unsupported
   1a5ec:	76654420 20656369 65707954 00000d0a      Device Type....
   1a5fc:	2a2a2a0a 2a2a2a2a 2a2a2a2a 2a2a2a2a     .***************
   1a60c:	6c707041 74616369 206e6f69 666e6f43     Application Conf
   1a61c:	72756769 6f697461 2a2a2a6e 2a2a2a2a     iguration*******
   1a62c:	2a2a2a2a 2a2a2a2a 00000d0a 7665440a     ********.....Dev
   1a63c:	65707954 00203a20 53414c43 0a412053     Type : .CLASS A.
   1a64c:	0000000d 53414c43 0a432053 0000000d     ....CLASS C.....
   1a65c:	7463410a 74617669 546e6f69 20657079     .ActivationType 
   1a66c:	0000203a 4141544f 00000d0a 6172540a     : ..OTAA.....Tra
   1a67c:	696d736e 6f697373 7954206e 2d206570     nsmission Type -
   1a68c:	00000020 464e4f43 454d5249 000d0a44      ...CONFIRMED...
   1a69c:	6f50460a 2d207472 0a642520 0000000d     .FPort - %d.....
   1a6ac:	2a2a2a0a 2a2a2a2a 2a2a2a2a 2a2a2a2a     .***************
   1a6bc:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1a6cc:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1a6dc:	2a2a2a2a 2a2a2a2a 00000d0a 00007830     ********....0x..
   1a6ec:	78323025 00000000 726f6c0a 6e617761     %02x.....lorawan
   1a6fc:	6375735f 73736563 00000d0a 726f6c0a     _success.....lor
   1a70c:	6e617761 6174735f 3a206574 61747320     awan_state : sta
   1a71c:	425f6b63 0a797375 0000000d 7665640a     ck_Busy......dev
   1a72c:	5f656369 5f746f6e 6e696f6a 745f6465     ice_not_joined_t
   1a73c:	656e5f6f 726f7774 000d0a6b 766e690a     o_network....inv
   1a74c:	64696c61 7261705f 74656d61 0d0a7265     alid_parameter..
   1a75c:	00000000 79656b0a 6f6e5f73 6e695f74     .....keys_not_in
   1a76c:	61697469 657a696c 000d0a64 6c69730a     itialized....sil
   1a77c:	5f746e65 656d6d69 74616964 5f796c65     ent_immediately_
   1a78c:	69746361 0d0a6576 00000000 6172660a     active.......fra
   1a79c:	6f63656d 65746e75 72655f72 5f726f72     mecounter_error_
   1a7ac:	6f6a6572 6e5f6e69 65646565 000d0a64     rejoin_needed...
   1a7bc:	766e690a 64696c61 6675625f 5f726566     .invalid_buffer_
   1a7cc:	676e656c 0d0a6874 00000000 43414d0a     length.......MAC
   1a7dc:	7561705f 0a646573 0000000d 5f6f6e0a     _paused......no_
   1a7ec:	65657266 6168635f 6c656e6e 6f665f73     free_channels_fo
   1a7fc:	0a646e75 0000000d 7165720a 74736575     und......request
   1a80c:	766e695f 64696c61 00000d0a 6572700a     _invalid.....pre
   1a81c:	6f6a5f76 725f6e69 65757165 695f7473     v_join_request_i
   1a82c:	72705f6e 6572676f 0d0a7373 00000000     n_progress......
   1a83c:	7165720a 74736575 6961665f 2064656c     .request_failed 
   1a84c:	0d0a6425 00000000 44500a0d 65525f53     %d........PDS_Re
   1a85c:	726f7473 6f697461 6174536e 3a737574     storationStatus:
   1a86c:	63755320 73736563 0000000d 6e696f6a      Success....join
   1a87c:	74617453 203a7375 6e696f4a 000d6465     Status: Joined..
   1a88c:	6e696f4a 74617453 3a207375 6e654420     JoinStatus : Den
   1a89c:	0d646569 00000000 646e6142 7325203a     ied.....Band: %s
   1a8ac:	00000a0d 74736552 7461726f 206e6f69     ....Restoration 
   1a8bc:	6c696166 000d6465 2078540a 61746144     failed...Tx Data
   1a8cc:	6e655320 000d2074 7465520a 4a207972      Sent ...Retry J
   1a8dc:	2d6e696f 696f4a20 6552206e 73657571     oin- Join Reques
   1a8ec:	65532074 0d0a746e 00000000 2a2a2a0a     t Sent.......***
   1a8fc:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1a90c:	696f4a2a 6150206e 656d6172 73726574     *Join Parameters
   1a91c:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1a92c:	2a2a2a2a 00000d0a 7070410a 73736553     ****.....AppSess
   1a93c:	4b6e6f69 3a207965 00000020 6b774e0a     ionKey : ....Nwk
   1a94c:	73736553 4b6e6f69 3a207965 00000020     SessionKey : ...
   1a95c:	7665440a 20495545 0000203a 7070410a     .DevEUI : ...App
   1a96c:	20495545 0000203a 7070410a 2079654b     EUI : ...AppKey 
   1a97c:	0000203a 2a2a2a0a 2a2a2a2a 2a2a2a2a     : ...***********
   1a98c:	2a2a2a2a 746c754d 73616369 61502074     ****Multicast Pa
   1a99c:	656d6172 73726574 2a2a2a2a 2a2a2a2a     rameters********
   1a9ac:	2a2a2a2a 2a2a2a2a 2a2a2a2a 00000d0a     ************....
   1a9bc:	61634d0a 70417473 73655370 6e6f6973     .McastAppSession
   1a9cc:	2079654b 0000203a 61634d0a 774e7473     Key : ...McastNw
   1a9dc:	7365536b 6e6f6973 2079654b 0000203a     kSessionKey : ..
   1a9ec:	61634d0a 72477473 4170756f 20726464     .McastGroupAddr 
   1a9fc:	7830203a 0a786c25 0000000d 61634d0a     : 0x%lx......Mca
   1aa0c:	72477473 4170756f 53726464 75746174     stGroupAddrStatu
   1aa1c:	203a2073 6c696146 0d0a6465 00000000     s : Failed......
   1aa2c:	6c754d0a 61636974 74537473 73757461     .MulticastStatus
   1aa3c:	45203a20 6c62616e 0d0a6465 00000000      : Enabled......
   1aa4c:	6c754d0a 61636974 74537473 73757461     .MulticastStatus
   1aa5c:	46203a20 656c6961 000d0a64 2a2a2a0a      : Failed....***
   1aa6c:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1aa7c:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1aa8c:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1aa9c:	2a2a2a2a 000d0a2a 74636146 4479726f     *****...FactoryD
   1aaac:	75616665 6552746c 00746573 36385545     efaultReset.EU86
   1aabc:	00000038 31395541 00000035 32395341     8...AU915...AS92
   1aacc:	00000033 394e504a 00003332 3239524b     3...JPN923..KR92
   1aadc:	00000030 38444e49 00003536 61656c43     0...IND865..Clea
   1aaec:	44502072 00000053 65736552 6f422074     r PDS...Reset Bo
   1aafc:	00647261 6c730a0d 5f706565 25206b6f     ard...sleep_ok %
   1ab0c:	6d20646c 000a0d73 74696e49 696c6169     ld ms...Initiali
   1ab1c:	6974617a 6f206e6f 65532066 69727563     zation of Securi
   1ab2c:	6d207974 6c75646f 73692065 69616620     ty module is fai
   1ab3c:	0d64656c 00000000 7473614c 73657220     led.....Last res
   1ab4c:	63207465 65737561 0000203a 74737953     et cause: ..Syst
   1ab5c:	52206d65 74657365 71655220 74736575     em Reset Request
   1ab6c:	0000000d 63746157 676f6468 73655220     ....Watchdog Res
   1ab7c:	000d7465 65747845 6c616e72 73655220     et..External Res
   1ab8c:	000d7465 776f7242 754f206e 33332074     et..Brown Out 33
   1ab9c:	74654420 6f746365 65522072 0d746573      Detector Reset.
   1abac:	00000000 776f7242 754f206e 32312074     ....Brown Out 12
   1abbc:	74654420 6f746365 65522072 0d746573      Detector Reset.
   1abcc:	00000000 65776f50 6e4f2d72 73655220     ....Power-On Res
   1abdc:	000d7465 61720a0d 65532077 726f736e     et....raw Sensor
   1abec:	74614420 7b203a61 00000020 58257830      Data: { ...0x%X
   1abfc:	0000002c 00000d7d 6c532e2e 69706565     ,...}.....Sleepi
   1ac0c:	2e2e676e c180000d                                ng.....

0001ac13 <FskSyncWordBuff>:
   1ac13:	01c194c1                                         ...

0001ac16 <macEndDevCmdReplyLen>:
   1ac16:	02010201 01010203 0c0a0802                       .........

0001ac1f <maxEIRPTable>:
   1ac1f:	0d0c0a08 1412100e 1b1a1815 24211e1d     ..............!$
	...

0001ac30 <pds_mac_fid1_item_list>:
   1ac30:	200018b2 00010000 200018b0 06010100     ... ....... ....
   1ac40:	20001844 0c040200 200018b3 15010300     D.. ....... ....
   1ac50:	200018b4 1b040400 20001904 24040500     ... ....... ...$
   1ac60:	200018e0 2d040600 200018f4 36100700     ... ...-... ...6
   1ac70:	200018e4 4b100800 200018ce 60040900     ... ...K... ...`
   1ac80:	2000189d 69010b00 2000184c 6f010a00     ... ...iL.. ...o
   1ac90:	20001884 75020c00 20001886 7c020d00     ... ...u... ...|
   1aca0:	20001888 83020e00 2000188a 8a020f00     ... ....... ....
   1acb0:	2000188c 91021000 2000188e 98021100     ... ....... ....
   1acc0:	20001890 9f011200 20001891 a5011300     ... ....... ....
   1acd0:	20001896 b1011500 20001895 ab011400     ... ....... ....
   1ace0:	2000183c b7041600                       <.. ....

0001ace8 <pds_mac_fid2_item_list>:
   1ace8:	20001826 00050001 200018aa 0a010101     &.. ....... ....
   1acf8:	200017bc 10010201 200017bd 16040301     ... ....... ....
   1ad08:	200017c1 1f100401 200017d1 34100501     ... ....... ...4
   1ad18:	20001801 49100601 20001811 5e080701     ... ...I... ...^
   1ad28:	20001819 6b080801 20001892 78020901     ... ...k... ...x
   1ad38:	20001840 7f040a01 20001838 88040b01     @.. ....8.. ....
   1ad48:	2000189b 91010c01 2000199c 97010d01     ... ....... ....
   1ad58:	2000199d 9d010e01                       ... ....

0001ad60 <lorawanHandlers>:
   1ad60:	0000fac1 0000f9d5 0000fb95 000000fd     ................

0001ad70 <radioTaskHandlers>:
   1ad70:	0001120d 0001130d 0001102d 000108b1     ........-.......
   1ad80:	00011635 000121fc 000121cc 000121de     5....!...!...!..
   1ad90:	00012120 000121de 000121c2 000121de      !...!...!...!..
   1ada0:	00012120 000121cc 000121cc 000121c2      !...!...!...!..
   1adb0:	00012120 00012128 00012128 00012128      !..(!..(!..(!..
   1adc0:	000121e4 000121cc 000121cc 000121a0     .!...!...!...!..
   1add0:	00012284 000121a0 000121c2 000121a0     ."...!...!...!..
   1ade0:	00012284 000121cc 000121cc 000121c2     ."...!...!...!..
   1adf0:	00012284 00012128 00012128 00012128     ."..(!..(!..(!..
   1ae00:	0001228e 0001257c 000124cc 000124cc     ."..|%...$...$..
   1ae10:	000124ca 0001256e 0001256e 00012564     .$..n%..n%..d%..
   1ae20:	000124ca 0001256e 00012564 0001256e     .$..n%..d%..n%..
   1ae30:	000124ca 00012574 00012574 00012574     .$..t%..t%..t%..
   1ae40:	00012604 0001334c 0001332e 000132e8     .&..L3...3...2..
   1ae50:	00013206 000132e8 00013320 000132e8     .2...2.. 3...2..
   1ae60:	00013206 0001332e 0001332e 00013320     .2...3...3.. 3..
   1ae70:	00013206 000131fe 000131fe 000131fe     .2...1...1...1..
   1ae80:	00013564 000139ac 0001386c 0001386c     d5...9..l8..l8..
   1ae90:	00013868 00013984 00013984 00013976     h8...9...9..v9..
   1aea0:	00013868 00013984 00013976 00013984     h8...9..v9...9..
   1aeb0:	00013868 0001398c 0001398c 0001398c     h8...9...9...9..
   1aec0:	00013b90                                .;..

0001aec4 <_global_impure_ptr>:
   1aec4:	20000068 0000000a 0001597e 00015a52     h.. ....~Y..RZ..
   1aed4:	00015a52 0001596a 00015a52 00015a52     RZ..jY..RZ..RZ..
   1aee4:	00015a52 00015a52 00015a52 00015a52     RZ..RZ..RZ..RZ..
   1aef4:	00015a24 00015536 00015a52 0001552c     $Z..6U..RZ..,U..
   1af04:	00015540 00015a52 00015974 00015700     @U..RZ..tY...W..
   1af14:	00015700 00015700 00015700 00015700     .W...W...W...W..
   1af24:	00015700 00015700 00015700 00015700     .W...W...W...W..
   1af34:	00015a52 00015a52 00015a52 00015a52     RZ..RZ..RZ..RZ..
   1af44:	00015a52 00015a52 00015a52 00015a52     RZ..RZ..RZ..RZ..
   1af54:	00015a52 00015a52 00015a3a 0001598e     RZ..RZ..:Z...Y..
   1af64:	00015a52 0001598e 00015a52 00015a52     RZ...Y..RZ..RZ..
   1af74:	00015a52 00015a52 000158f4 00015a52     RZ..RZ...X..RZ..
   1af84:	00015a52 000158fe 00015a52 00015a52     RZ...X..RZ..RZ..
   1af94:	00015a52 00015a52 00015a52 0001592c     RZ..RZ..RZ..,Y..
   1afa4:	00015a52 00015a52 0001595a 00015a52     RZ..RZ..ZY..RZ..
   1afb4:	00015a52 00015a52 00015a52 00015a52     RZ..RZ..RZ..RZ..
   1afc4:	00015a52 00015a52 00015a52 00015a52     RZ..RZ..RZ..RZ..
   1afd4:	00015a52 00015740 00015776 0001598e     RZ..@W..vW...Y..
   1afe4:	0001598e 0001598e 0001581e 00015776     .Y...Y...X..vW..
   1aff4:	00015a52 00015a52 00015828 00015a52     RZ..RZ..(X..RZ..
   1b004:	0001583a 00015a4e 00015868 00015892     :X..NZ..hX...X..
   1b014:	00015a52 0001589c 00015a52 00015a4a     RZ...X..RZ..JZ..
   1b024:	00015a52 00015a52 0001558e 00464e49     RZ..RZ...U..INF.
   1b034:	00666e69 004e414e 006e616e 33323130     inf.NAN.nan.0123
   1b044:	37363534 42413938 46454443 00000000     456789ABCDEF....
   1b054:	33323130 37363534 62613938 66656463     0123456789abcdef
   1b064:	00000000 6c756e28 0000296c              ....(null)..

0001b070 <blanks.7238>:
   1b070:	20202020 20202020 20202020 20202020                     

0001b080 <zeroes.7239>:
   1b080:	30303030 30303030 30303030 30303030     0000000000000000
   1b090:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

0001b0a0 <__mprec_bigtens>:
   1b0a0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   1b0b0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   1b0c0:	7f73bf3c 75154fdd                       <.s..O.u

0001b0c8 <__mprec_tens>:
   1b0c8:	00000000 3ff00000 00000000 40240000     .......?......$@
   1b0d8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   1b0e8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   1b0f8:	00000000 412e8480 00000000 416312d0     .......A......cA
   1b108:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   1b118:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   1b128:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   1b138:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   1b148:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   1b158:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   1b168:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   1b178:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   1b188:	79d99db4 44ea7843                       ...yCx.D

0001b190 <p05.6055>:
   1b190:	00000005 00000019 0000007d 00000043     ........}...C...
   1b1a0:	49534f50 00000058 0000002e              POSIX.......

0001b1ac <_ctype_>:
   1b1ac:	20202000 20202020 28282020 20282828     .         ((((( 
   1b1bc:	20202020 20202020 20202020 20202020                     
   1b1cc:	10108820 10101010 10101010 10101010      ...............
   1b1dc:	04040410 04040404 10040404 10101010     ................
   1b1ec:	41411010 41414141 01010101 01010101     ..AAAAAA........
   1b1fc:	01010101 01010101 01010101 10101010     ................
   1b20c:	42421010 42424242 02020202 02020202     ..BBBBBB........
   1b21c:	02020202 02020202 02020202 10101010     ................
   1b22c:	00000020 00000000 00000000 00000000      ...............
	...

0001b2b0 <_init>:
   1b2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b2b2:	46c0      	nop			; (mov r8, r8)
   1b2b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1b2b6:	bc08      	pop	{r3}
   1b2b8:	469e      	mov	lr, r3
   1b2ba:	4770      	bx	lr

0001b2bc <__init_array_start>:
   1b2bc:	00016b95 	.word	0x00016b95

0001b2c0 <__frame_dummy_init_array_entry>:
   1b2c0:	000000dd                                ....

0001b2c4 <_fini>:
   1b2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b2c6:	46c0      	nop			; (mov r8, r8)
   1b2c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1b2ca:	bc08      	pop	{r3}
   1b2cc:	469e      	mov	lr, r3
   1b2ce:	4770      	bx	lr

0001b2d0 <__fini_array_start>:
   1b2d0:	000000b5 	.word	0x000000b5
