
APPS_ENDDEVICE_DEMO1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001b67c  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0001b67c  0001b67c  0002b67c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a18  20000000  0001b684  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .lpram        00000000  30000000  30000000  00030a18  2**0
                  CONTENTS
  4 .bss          000011f8  20000a18  0001c0a0  00030a18  2**3
                  ALLOC
  5 .stack        00002000  20001c10  0001d298  00030a18  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  00030a18  2**0
                  CONTENTS, READONLY
  7 .comment      0000008c  00000000  00000000  00030a40  2**0
                  CONTENTS, READONLY
  8 .debug_info   00088f6d  00000000  00000000  00030acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000c7c6  00000000  00000000  000b9a39  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001745c  00000000  00000000  000c61ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001640  00000000  00000000  000dd65b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001cb8  00000000  00000000  000dec9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00031abb  00000000  00000000  000e0953  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00032497  00000000  00000000  0011240e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b0619  00000000  00000000  001448a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004d38  00000000  00000000  001f4ec0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	10 3c 00 20 49 38 00 00 e1 38 00 00 e1 38 00 00     .<. I8...8...8..
	...
      2c:	e1 38 00 00 00 00 00 00 00 00 00 00 e1 38 00 00     .8...........8..
      3c:	e1 38 00 00 e1 38 00 00 e1 38 00 00 c1 12 00 00     .8...8...8......
      4c:	21 0e 00 00 e1 38 00 00 e1 38 00 00 e1 38 00 00     !....8...8...8..
      5c:	e1 38 00 00 79 20 00 00 89 20 00 00 99 20 00 00     .8..y ... ... ..
      6c:	a9 20 00 00 b9 20 00 00 c9 20 00 00 e1 38 00 00     . ... ... ...8..
      7c:	e1 38 00 00 e1 38 00 00 05 34 00 00 15 34 00 00     .8...8...4...4..
      8c:	25 34 00 00 35 34 00 00 45 34 00 00 6d 0b 00 00     %4..54..E4..m...
      9c:	e1 38 00 00 e1 38 00 00 e1 38 00 00 e1 38 00 00     .8...8...8...8..
      ac:	e1 38 00 00 00 00 00 00                             .8......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000a18 	.word	0x20000a18
      d4:	00000000 	.word	0x00000000
      d8:	0001b684 	.word	0x0001b684

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000a1c 	.word	0x20000a1c
     108:	0001b684 	.word	0x0001b684
     10c:	0001b684 	.word	0x0001b684
     110:	00000000 	.word	0x00000000

00000114 <CayenneLPP>:
uint8_t maxsize;
uint8_t cursor;
	
void CayenneLPP(uint8_t size)	
//Initialize the payload buffer with the given maximum size.
{
     114:	b510      	push	{r4, lr}
	buffer = (uint8_t*) malloc(size);
     116:	4b05      	ldr	r3, [pc, #20]	; (12c <CayenneLPP+0x18>)
     118:	4798      	blx	r3
     11a:	4b05      	ldr	r3, [pc, #20]	; (130 <CayenneLPP+0x1c>)
     11c:	6018      	str	r0, [r3, #0]
	cursor = 0;
     11e:	2200      	movs	r2, #0
     120:	4b04      	ldr	r3, [pc, #16]	; (134 <CayenneLPP+0x20>)
     122:	701a      	strb	r2, [r3, #0]
	maxsize = 200;
     124:	32c8      	adds	r2, #200	; 0xc8
     126:	4b04      	ldr	r3, [pc, #16]	; (138 <CayenneLPP+0x24>)
     128:	701a      	strb	r2, [r3, #0]
}
     12a:	bd10      	pop	{r4, pc}
     12c:	00014bf1 	.word	0x00014bf1
     130:	20000f18 	.word	0x20000f18
     134:	20000f15 	.word	0x20000f15
     138:	20000f14 	.word	0x20000f14

0000013c <FreeCayenneLPP>:

void FreeCayenneLPP(void)
{
	cursor = 0;
     13c:	2200      	movs	r2, #0
     13e:	4b01      	ldr	r3, [pc, #4]	; (144 <FreeCayenneLPP+0x8>)
     140:	701a      	strb	r2, [r3, #0]
}
     142:	4770      	bx	lr
     144:	20000f15 	.word	0x20000f15

00000148 <getSize>:

void reset(void){
	cursor = 0;
}
uint8_t getSize(void){
	return cursor;
     148:	4b01      	ldr	r3, [pc, #4]	; (150 <getSize+0x8>)
     14a:	7818      	ldrb	r0, [r3, #0]
}
     14c:	4770      	bx	lr
     14e:	46c0      	nop			; (mov r8, r8)
     150:	20000f15 	.word	0x20000f15

00000154 <getBuffer>:
uint8_t* getBuffer(void){
	return buffer;
     154:	4b01      	ldr	r3, [pc, #4]	; (15c <getBuffer+0x8>)
     156:	6818      	ldr	r0, [r3, #0]
}
     158:	4770      	bx	lr
     15a:	46c0      	nop			; (mov r8, r8)
     15c:	20000f18 	.word	0x20000f18

00000160 <addAnalogInput>:

// Analog voltage
uint8_t addAnalogInput(uint8_t channel, float value){
     160:	b510      	push	{r4, lr}
     162:	0004      	movs	r4, r0
    if ((cursor + LPP_ANALOG_INPUT_SIZE) > maxsize) {
     164:	4b10      	ldr	r3, [pc, #64]	; (1a8 <addAnalogInput+0x48>)
     166:	781a      	ldrb	r2, [r3, #0]
     168:	1d11      	adds	r1, r2, #4
     16a:	4b10      	ldr	r3, [pc, #64]	; (1ac <addAnalogInput+0x4c>)
     16c:	781b      	ldrb	r3, [r3, #0]
	    return 0;
     16e:	2000      	movs	r0, #0
    if ((cursor + LPP_ANALOG_INPUT_SIZE) > maxsize) {
     170:	4299      	cmp	r1, r3
     172:	dc18      	bgt.n	1a6 <addAnalogInput+0x46>
    }
    
    int16_t val = value * 100;
    buffer[cursor++] = channel;
     174:	490e      	ldr	r1, [pc, #56]	; (1b0 <addAnalogInput+0x50>)
     176:	4b0c      	ldr	r3, [pc, #48]	; (1a8 <addAnalogInput+0x48>)
     178:	1c50      	adds	r0, r2, #1
     17a:	7018      	strb	r0, [r3, #0]
     17c:	6808      	ldr	r0, [r1, #0]
     17e:	5484      	strb	r4, [r0, r2]
    buffer[cursor++] = LPP_ANALOG_INPUT;
     180:	781a      	ldrb	r2, [r3, #0]
     182:	1c50      	adds	r0, r2, #1
     184:	7018      	strb	r0, [r3, #0]
     186:	2002      	movs	r0, #2
     188:	680c      	ldr	r4, [r1, #0]
     18a:	54a0      	strb	r0, [r4, r2]
 //   buffer[cursor++] = val >> 8;
 //   buffer[cursor++] = val;
	
	buffer[cursor++] = 128;
     18c:	781a      	ldrb	r2, [r3, #0]
     18e:	1c50      	adds	r0, r2, #1
     190:	7018      	strb	r0, [r3, #0]
     192:	2080      	movs	r0, #128	; 0x80
     194:	680c      	ldr	r4, [r1, #0]
     196:	54a0      	strb	r0, [r4, r2]
	buffer[cursor++] = 1;
     198:	6809      	ldr	r1, [r1, #0]
     19a:	781a      	ldrb	r2, [r3, #0]
     19c:	1c50      	adds	r0, r2, #1
     19e:	7018      	strb	r0, [r3, #0]
     1a0:	2001      	movs	r0, #1
     1a2:	5488      	strb	r0, [r1, r2]

    return cursor;
     1a4:	7818      	ldrb	r0, [r3, #0]
}
     1a6:	bd10      	pop	{r4, pc}
     1a8:	20000f15 	.word	0x20000f15
     1ac:	20000f14 	.word	0x20000f14
     1b0:	20000f18 	.word	0x20000f18

000001b4 <addTemperature>:
// Temperature
uint8_t addTemperature(uint8_t channel, float celsius)
{
     1b4:	b510      	push	{r4, lr}
     1b6:	0004      	movs	r4, r0
	if ((cursor + LPP_TEMPERATURE_SIZE) > maxsize) {
     1b8:	4b10      	ldr	r3, [pc, #64]	; (1fc <addTemperature+0x48>)
     1ba:	781a      	ldrb	r2, [r3, #0]
     1bc:	1d11      	adds	r1, r2, #4
     1be:	4b10      	ldr	r3, [pc, #64]	; (200 <addTemperature+0x4c>)
     1c0:	781b      	ldrb	r3, [r3, #0]
		return 0;
     1c2:	2000      	movs	r0, #0
	if ((cursor + LPP_TEMPERATURE_SIZE) > maxsize) {
     1c4:	4299      	cmp	r1, r3
     1c6:	dc18      	bgt.n	1fa <addTemperature+0x46>
	}
	int16_t val = celsius * 10;
	buffer[cursor++] = channel;
     1c8:	490e      	ldr	r1, [pc, #56]	; (204 <addTemperature+0x50>)
     1ca:	4b0c      	ldr	r3, [pc, #48]	; (1fc <addTemperature+0x48>)
     1cc:	1c50      	adds	r0, r2, #1
     1ce:	7018      	strb	r0, [r3, #0]
     1d0:	6808      	ldr	r0, [r1, #0]
     1d2:	5484      	strb	r4, [r0, r2]
	buffer[cursor++] = LPP_TEMPERATURE;
     1d4:	781a      	ldrb	r2, [r3, #0]
     1d6:	1c50      	adds	r0, r2, #1
     1d8:	7018      	strb	r0, [r3, #0]
     1da:	2067      	movs	r0, #103	; 0x67
     1dc:	680c      	ldr	r4, [r1, #0]
     1de:	54a0      	strb	r0, [r4, r2]
	
//	buffer[cursor++] = val >> 8;
//	buffer[cursor++] = val;

	buffer[cursor++] = 128;
     1e0:	781a      	ldrb	r2, [r3, #0]
     1e2:	1c50      	adds	r0, r2, #1
     1e4:	7018      	strb	r0, [r3, #0]
     1e6:	2080      	movs	r0, #128	; 0x80
     1e8:	680c      	ldr	r4, [r1, #0]
     1ea:	54a0      	strb	r0, [r4, r2]
	buffer[cursor++] = 1;
     1ec:	6809      	ldr	r1, [r1, #0]
     1ee:	781a      	ldrb	r2, [r3, #0]
     1f0:	1c50      	adds	r0, r2, #1
     1f2:	7018      	strb	r0, [r3, #0]
     1f4:	2001      	movs	r0, #1
     1f6:	5488      	strb	r0, [r1, r2]

	return cursor;
     1f8:	7818      	ldrb	r0, [r3, #0]
     1fa:	bd10      	pop	{r4, pc}
     1fc:	20000f15 	.word	0x20000f15
     200:	20000f14 	.word	0x20000f14
     204:	20000f18 	.word	0x20000f18

00000208 <serialGetSensorData>:
	uint8_t identifyByte;
	// Sensor Data + CRC + CheckSum
	int i = 1;
//	identifyByte = sio2host_getchar();
	identifyByte = 0x24;
	rawSensorData[0] = identifyByte;
     208:	4a0d      	ldr	r2, [pc, #52]	; (240 <serialGetSensorData+0x38>)
     20a:	2324      	movs	r3, #36	; 0x24
     20c:	7013      	strb	r3, [r2, #0]
     20e:	3201      	adds	r2, #1
     210:	3b1a      	subs	r3, #26
	
	uint8_t ss = 0;
	for (i = 1; i < 7; i++)
	{
		rawSensorData[i] = i*10;
     212:	7013      	strb	r3, [r2, #0]
     214:	330a      	adds	r3, #10
     216:	b2db      	uxtb	r3, r3
     218:	3201      	adds	r2, #1
	for (i = 1; i < 7; i++)
     21a:	2b46      	cmp	r3, #70	; 0x46
     21c:	d1f9      	bne.n	212 <serialGetSensorData+0xa>
		ss = ss + rawSensorData[i];
	}
	
	rawSensorData[7] = ss + identifyByte;
     21e:	22f6      	movs	r2, #246	; 0xf6
     220:	4b07      	ldr	r3, [pc, #28]	; (240 <serialGetSensorData+0x38>)
     222:	71da      	strb	r2, [r3, #7]
		if (sum == rawSensorData[6])
		return true;
		else return false;
		*/
		
		uint8_t sum = 0;
     224:	2000      	movs	r0, #0
		for (i =0; i < 7; i++)
     226:	2300      	movs	r3, #0
		{
			sum = sum + rawSensorData[i];
     228:	4905      	ldr	r1, [pc, #20]	; (240 <serialGetSensorData+0x38>)
     22a:	5cca      	ldrb	r2, [r1, r3]
     22c:	1880      	adds	r0, r0, r2
     22e:	b2c0      	uxtb	r0, r0
		for (i =0; i < 7; i++)
     230:	3301      	adds	r3, #1
     232:	2b07      	cmp	r3, #7
     234:	d1f9      	bne.n	22a <serialGetSensorData+0x22>
		}
		if (sum == rawSensorData[7])
     236:	38f6      	subs	r0, #246	; 0xf6
     238:	4243      	negs	r3, r0
     23a:	4158      	adcs	r0, r3
     23c:	b2c0      	uxtb	r0, r0
		else return false;
	}
	else
		return false;

}
     23e:	4770      	bx	lr
     240:	20000f20 	.word	0x20000f20

00000244 <extractVoltage>:

uint16_t extractVoltage(void)
{
     244:	b510      	push	{r4, lr}
	uint16_t wd = 0;
	// Voltage (V) is a combination from Nibbles 5th - 7th values
	if (rawSensorData[0] == 0x24)
     246:	4b09      	ldr	r3, [pc, #36]	; (26c <extractVoltage+0x28>)
     248:	781b      	ldrb	r3, [r3, #0]
	uint16_t wd = 0;
     24a:	2400      	movs	r4, #0
	if (rawSensorData[0] == 0x24)
     24c:	2b24      	cmp	r3, #36	; 0x24
     24e:	d001      	beq.n	254 <extractVoltage+0x10>
		#if defined (ENABLE_SENSOR_DEBUG)
		printf("\r\nWind Direction(deg): %d \r\n",wd);
		#endif
	}
	return wd;
}
     250:	0020      	movs	r0, r4
     252:	bd10      	pop	{r4, pc}
		wd = (uint16_t) (rawSensorData[2]) + ((uint16_t) ((rawSensorData[3] & 80)) << 1);
     254:	4a05      	ldr	r2, [pc, #20]	; (26c <extractVoltage+0x28>)
     256:	78d3      	ldrb	r3, [r2, #3]
     258:	005b      	lsls	r3, r3, #1
     25a:	34a0      	adds	r4, #160	; 0xa0
     25c:	4023      	ands	r3, r4
     25e:	7894      	ldrb	r4, [r2, #2]
     260:	18e4      	adds	r4, r4, r3
		printf("\r\nWind Direction(deg): %d \r\n",wd);
     262:	0021      	movs	r1, r4
     264:	4802      	ldr	r0, [pc, #8]	; (270 <extractVoltage+0x2c>)
     266:	4b03      	ldr	r3, [pc, #12]	; (274 <extractVoltage+0x30>)
     268:	4798      	blx	r3
     26a:	e7f1      	b.n	250 <extractVoltage+0xc>
     26c:	20000f20 	.word	0x20000f20
     270:	00019ac4 	.word	0x00019ac4
     274:	000152a5 	.word	0x000152a5

00000278 <extractTemperature>:

extern int transmission_interval;

double extractTemperature(void)
{
     278:	b5d0      	push	{r4, r6, r7, lr}
	double temperature = 0;
	
	// read temperature data
	//temperature = TMP102_readHighTempF();
	temperature = TMP102_readTempC();
     27a:	4b16      	ldr	r3, [pc, #88]	; (2d4 <extractTemperature+0x5c>)
     27c:	4798      	blx	r3
     27e:	1c04      	adds	r4, r0, #0
     280:	4b15      	ldr	r3, [pc, #84]	; (2d8 <extractTemperature+0x60>)
     282:	4798      	blx	r3
     284:	0006      	movs	r6, r0
     286:	000f      	movs	r7, r1
	
	if (temperature <= 24.5 && temperature >= 23.5)
     288:	4914      	ldr	r1, [pc, #80]	; (2dc <extractTemperature+0x64>)
     28a:	1c20      	adds	r0, r4, #0
     28c:	4b14      	ldr	r3, [pc, #80]	; (2e0 <extractTemperature+0x68>)
     28e:	4798      	blx	r3
     290:	2800      	cmp	r0, #0
     292:	d005      	beq.n	2a0 <extractTemperature+0x28>
     294:	4913      	ldr	r1, [pc, #76]	; (2e4 <extractTemperature+0x6c>)
     296:	1c20      	adds	r0, r4, #0
     298:	4b13      	ldr	r3, [pc, #76]	; (2e8 <extractTemperature+0x70>)
     29a:	4798      	blx	r3
     29c:	2800      	cmp	r0, #0
     29e:	d111      	bne.n	2c4 <extractTemperature+0x4c>
		transmission_interval = CUSTOM_APP_SLEEP_TIME_MS_1;
	else if (temperature >= 25.5 && temperature <= 26.5)
     2a0:	4912      	ldr	r1, [pc, #72]	; (2ec <extractTemperature+0x74>)
     2a2:	1c20      	adds	r0, r4, #0
     2a4:	4b10      	ldr	r3, [pc, #64]	; (2e8 <extractTemperature+0x70>)
     2a6:	4798      	blx	r3
     2a8:	2800      	cmp	r0, #0
     2aa:	d005      	beq.n	2b8 <extractTemperature+0x40>
     2ac:	4910      	ldr	r1, [pc, #64]	; (2f0 <extractTemperature+0x78>)
     2ae:	1c20      	adds	r0, r4, #0
     2b0:	4b0b      	ldr	r3, [pc, #44]	; (2e0 <extractTemperature+0x68>)
     2b2:	4798      	blx	r3
     2b4:	2800      	cmp	r0, #0
     2b6:	d109      	bne.n	2cc <extractTemperature+0x54>
		transmission_interval = CUSTOM_APP_SLEEP_TIME_MS_2;
	else
		transmission_interval = DEMO_CONF_DEFAULT_APP_SLEEP_TIME_MS;
     2b8:	4a0e      	ldr	r2, [pc, #56]	; (2f4 <extractTemperature+0x7c>)
     2ba:	4b0f      	ldr	r3, [pc, #60]	; (2f8 <extractTemperature+0x80>)
     2bc:	601a      	str	r2, [r3, #0]
	
	return temperature;
     2be:	0030      	movs	r0, r6
     2c0:	0039      	movs	r1, r7
     2c2:	bdd0      	pop	{r4, r6, r7, pc}
		transmission_interval = CUSTOM_APP_SLEEP_TIME_MS_1;
     2c4:	4a0d      	ldr	r2, [pc, #52]	; (2fc <extractTemperature+0x84>)
     2c6:	4b0c      	ldr	r3, [pc, #48]	; (2f8 <extractTemperature+0x80>)
     2c8:	601a      	str	r2, [r3, #0]
     2ca:	e7f8      	b.n	2be <extractTemperature+0x46>
		transmission_interval = CUSTOM_APP_SLEEP_TIME_MS_2;
     2cc:	4a0c      	ldr	r2, [pc, #48]	; (300 <extractTemperature+0x88>)
     2ce:	4b0a      	ldr	r3, [pc, #40]	; (2f8 <extractTemperature+0x80>)
     2d0:	601a      	str	r2, [r3, #0]
     2d2:	e7f4      	b.n	2be <extractTemperature+0x46>
     2d4:	00000485 	.word	0x00000485
     2d8:	000146e5 	.word	0x000146e5
     2dc:	41c40000 	.word	0x41c40000
     2e0:	00011d2d 	.word	0x00011d2d
     2e4:	41bc0000 	.word	0x41bc0000
     2e8:	00011d55 	.word	0x00011d55
     2ec:	41cc0000 	.word	0x41cc0000
     2f0:	41d40000 	.word	0x41d40000
     2f4:	00001388 	.word	0x00001388
     2f8:	20000064 	.word	0x20000064
     2fc:	00007530 	.word	0x00007530
     300:	00003a98 	.word	0x00003a98

00000304 <configure_i2c_master1>:

struct i2c_master_module i2c_master_instance;
struct i2c_master_packet master_packet;

void   configure_i2c_master1(void)
{
     304:	b530      	push	{r4, r5, lr}
     306:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
     308:	aa01      	add	r2, sp, #4
     30a:	2364      	movs	r3, #100	; 0x64
     30c:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
     30e:	4b21      	ldr	r3, [pc, #132]	; (394 <configure_i2c_master1+0x90>)
     310:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
     312:	2300      	movs	r3, #0
     314:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
     316:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
     318:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
     31a:	2180      	movs	r1, #128	; 0x80
     31c:	0389      	lsls	r1, r1, #14
     31e:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
     320:	2101      	movs	r1, #1
     322:	4249      	negs	r1, r1
     324:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
     326:	3125      	adds	r1, #37	; 0x25
     328:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
     32a:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
     32c:	3108      	adds	r1, #8
     32e:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
     330:	3101      	adds	r1, #1
     332:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
     334:	3101      	adds	r1, #1
     336:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
     338:	33d7      	adds	r3, #215	; 0xd7
     33a:	8613      	strh	r3, [r2, #48]	; 0x30
	/* Create and initialize config structure */
	struct i2c_master_config config_i2c;
	i2c_master_get_config_defaults(&config_i2c);
	
	config_i2c.buffer_timeout = 1000;
     33c:	23fa      	movs	r3, #250	; 0xfa
     33e:	009b      	lsls	r3, r3, #2
     340:	82d3      	strh	r3, [r2, #22]

	/* Change pins */
	config_i2c.pinmux_pad0  = PINMUX_PA16C_SERCOM1_PAD0;
     342:	4b15      	ldr	r3, [pc, #84]	; (398 <configure_i2c_master1+0x94>)
     344:	61d3      	str	r3, [r2, #28]
	config_i2c.pinmux_pad1  = PINMUX_PA17C_SERCOM1_PAD1;
     346:	4b15      	ldr	r3, [pc, #84]	; (39c <configure_i2c_master1+0x98>)
     348:	6213      	str	r3, [r2, #32]

	/* Initialize and enable device with config */
	i2c_master_init(&i2c_master_instance, CONF_I2C_MODULE, &config_i2c);
     34a:	4c15      	ldr	r4, [pc, #84]	; (3a0 <configure_i2c_master1+0x9c>)
     34c:	4915      	ldr	r1, [pc, #84]	; (3a4 <configure_i2c_master1+0xa0>)
     34e:	0020      	movs	r0, r4
     350:	4b15      	ldr	r3, [pc, #84]	; (3a8 <configure_i2c_master1+0xa4>)
     352:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     354:	6824      	ldr	r4, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     356:	2207      	movs	r2, #7
     358:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
     35a:	421a      	tst	r2, r3
     35c:	d1fc      	bne.n	358 <configure_i2c_master1+0x54>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     35e:	6823      	ldr	r3, [r4, #0]
     360:	2202      	movs	r2, #2
     362:	4313      	orrs	r3, r2
     364:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     366:	4d0e      	ldr	r5, [pc, #56]	; (3a0 <configure_i2c_master1+0x9c>)
     368:	6828      	ldr	r0, [r5, #0]
     36a:	4b10      	ldr	r3, [pc, #64]	; (3ac <configure_i2c_master1+0xa8>)
     36c:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     36e:	231f      	movs	r3, #31
     370:	4018      	ands	r0, r3
     372:	3b1e      	subs	r3, #30
     374:	4083      	lsls	r3, r0
     376:	4a0e      	ldr	r2, [pc, #56]	; (3b0 <configure_i2c_master1+0xac>)
     378:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     37a:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
     37c:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     37e:	2110      	movs	r1, #16
     380:	8b62      	ldrh	r2, [r4, #26]
     382:	420a      	tst	r2, r1
     384:	d104      	bne.n	390 <configure_i2c_master1+0x8c>
		timeout_counter++;
     386:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     388:	4283      	cmp	r3, r0
     38a:	d3f9      	bcc.n	380 <configure_i2c_master1+0x7c>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
     38c:	2310      	movs	r3, #16
     38e:	8363      	strh	r3, [r4, #26]

	i2c_master_enable(&i2c_master_instance);
}
     390:	b00f      	add	sp, #60	; 0x3c
     392:	bd30      	pop	{r4, r5, pc}
     394:	00000d48 	.word	0x00000d48
     398:	00100002 	.word	0x00100002
     39c:	00110002 	.word	0x00110002
     3a0:	20001034 	.word	0x20001034
     3a4:	42000400 	.word	0x42000400
     3a8:	00001391 	.word	0x00001391
     3ac:	00002049 	.word	0x00002049
     3b0:	e000e100 	.word	0xe000e100

000003b4 <TMP102_begin>:
	TMP102_setLowTempF(84.0);  // set T_LOW in F
	//sensor0.setLowTempC(26.67); // set T_LOW in C
}

void TMP102_begin(void)
{
     3b4:	b510      	push	{r4, lr}

	configure_i2c_master1();
     3b6:	4b07      	ldr	r3, [pc, #28]	; (3d4 <TMP102_begin+0x20>)
     3b8:	4798      	blx	r3
	
	/** Send the request token */
	master_packet.address         = TMP102_address;
     3ba:	4b07      	ldr	r3, [pc, #28]	; (3d8 <TMP102_begin+0x24>)
     3bc:	2248      	movs	r2, #72	; 0x48
     3be:	801a      	strh	r2, [r3, #0]
	master_packet.data            = write_buffer;
     3c0:	4a06      	ldr	r2, [pc, #24]	; (3dc <TMP102_begin+0x28>)
     3c2:	605a      	str	r2, [r3, #4]
	master_packet.data_length     = sizeof(write_buffer);	
     3c4:	2202      	movs	r2, #2
     3c6:	805a      	strh	r2, [r3, #2]
	master_packet.ten_bit_address = false;
     3c8:	2200      	movs	r2, #0
     3ca:	721a      	strb	r2, [r3, #8]
	master_packet.high_speed      = false;
     3cc:	725a      	strb	r2, [r3, #9]
	master_packet.hs_master_code  = 0x0;
     3ce:	729a      	strb	r2, [r3, #10]
	
}
     3d0:	bd10      	pop	{r4, pc}
     3d2:	46c0      	nop			; (mov r8, r8)
     3d4:	00000305 	.word	0x00000305
     3d8:	20001028 	.word	0x20001028
     3dc:	20000a38 	.word	0x20000a38

000003e0 <TMP102_openPointerRegister>:



void TMP102_openPointerRegister(uint8_t pointerReg)
{
     3e0:	b570      	push	{r4, r5, r6, lr}
	
	write_buffer[0] = pointerReg;
     3e2:	4a0c      	ldr	r2, [pc, #48]	; (414 <TMP102_openPointerRegister+0x34>)
     3e4:	7010      	strb	r0, [r2, #0]
	
	master_packet.address = TMP102_address;
     3e6:	4b0c      	ldr	r3, [pc, #48]	; (418 <TMP102_openPointerRegister+0x38>)
     3e8:	2148      	movs	r1, #72	; 0x48
     3ea:	8019      	strh	r1, [r3, #0]
	master_packet.data = write_buffer;
     3ec:	605a      	str	r2, [r3, #4]
	master_packet.data_length = 1;
     3ee:	2201      	movs	r2, #1
     3f0:	805a      	strh	r2, [r3, #2]
	while (i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &master_packet) != STATUS_OK) {
     3f2:	001d      	movs	r5, r3
     3f4:	4c09      	ldr	r4, [pc, #36]	; (41c <TMP102_openPointerRegister+0x3c>)
     3f6:	4e0a      	ldr	r6, [pc, #40]	; (420 <TMP102_openPointerRegister+0x40>)
     3f8:	0029      	movs	r1, r5
     3fa:	0020      	movs	r0, r4
     3fc:	47b0      	blx	r6
     3fe:	2800      	cmp	r0, #0
     400:	d007      	beq.n	412 <TMP102_openPointerRegister+0x32>
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == TIMEOUT) {
     402:	4a08      	ldr	r2, [pc, #32]	; (424 <TMP102_openPointerRegister+0x44>)
     404:	6813      	ldr	r3, [r2, #0]
     406:	1c59      	adds	r1, r3, #1
     408:	6011      	str	r1, [r2, #0]
     40a:	22fa      	movs	r2, #250	; 0xfa
     40c:	0092      	lsls	r2, r2, #2
     40e:	4293      	cmp	r3, r2
     410:	d1f2      	bne.n	3f8 <TMP102_openPointerRegister+0x18>
			return;
		}
	}
	
}
     412:	bd70      	pop	{r4, r5, r6, pc}
     414:	20000a38 	.word	0x20000a38
     418:	20001028 	.word	0x20001028
     41c:	20001034 	.word	0x20001034
     420:	000019d1 	.word	0x000019d1
     424:	20000a34 	.word	0x20000a34

00000428 <TMP102_readRegister>:


uint8_t TMP102_readRegister(bool registerNumber){
     428:	b5f0      	push	{r4, r5, r6, r7, lr}
     42a:	b083      	sub	sp, #12
     42c:	0006      	movs	r6, r0
	uint8_t registerByte[2];	// We'll store the data from the registers here
	
	master_packet.address = TMP102_address;
     42e:	4b10      	ldr	r3, [pc, #64]	; (470 <TMP102_readRegister+0x48>)
     430:	2248      	movs	r2, #72	; 0x48
     432:	801a      	strh	r2, [r3, #0]
	master_packet.data = read_buffer;
     434:	4a0f      	ldr	r2, [pc, #60]	; (474 <TMP102_readRegister+0x4c>)
     436:	605a      	str	r2, [r3, #4]
	master_packet.data_length = 2;
     438:	2202      	movs	r2, #2
     43a:	805a      	strh	r2, [r3, #2]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &master_packet) != STATUS_OK) {
     43c:	001d      	movs	r5, r3
     43e:	4c0e      	ldr	r4, [pc, #56]	; (478 <TMP102_readRegister+0x50>)
     440:	4f0e      	ldr	r7, [pc, #56]	; (47c <TMP102_readRegister+0x54>)
     442:	0029      	movs	r1, r5
     444:	0020      	movs	r0, r4
     446:	47b8      	blx	r7
     448:	2800      	cmp	r0, #0
     44a:	d008      	beq.n	45e <TMP102_readRegister+0x36>
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == TIMEOUT) {
     44c:	4a0c      	ldr	r2, [pc, #48]	; (480 <TMP102_readRegister+0x58>)
     44e:	6813      	ldr	r3, [r2, #0]
     450:	1c59      	adds	r1, r3, #1
     452:	6011      	str	r1, [r2, #0]
     454:	22fa      	movs	r2, #250	; 0xfa
     456:	0092      	lsls	r2, r2, #2
     458:	4293      	cmp	r3, r2
     45a:	d1f2      	bne.n	442 <TMP102_readRegister+0x1a>
     45c:	e006      	b.n	46c <TMP102_readRegister+0x44>
			return;
		}
	}
	
	registerByte[0] = read_buffer[0];	// Read first byte
     45e:	ab01      	add	r3, sp, #4
     460:	4a04      	ldr	r2, [pc, #16]	; (474 <TMP102_readRegister+0x4c>)
     462:	7811      	ldrb	r1, [r2, #0]
     464:	7019      	strb	r1, [r3, #0]
	registerByte[1] = read_buffer[1];	// Read second byte
     466:	7852      	ldrb	r2, [r2, #1]
     468:	705a      	strb	r2, [r3, #1]
	
	
	return registerByte[registerNumber];
     46a:	5d98      	ldrb	r0, [r3, r6]
}
     46c:	b003      	add	sp, #12
     46e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     470:	20001028 	.word	0x20001028
     474:	2000105c 	.word	0x2000105c
     478:	20001034 	.word	0x20001034
     47c:	000019ad 	.word	0x000019ad
     480:	20000a34 	.word	0x20000a34

00000484 <TMP102_readTempC>:


float TMP102_readTempC(void)
{
     484:	b570      	push	{r4, r5, r6, lr}
	uint8_t registerByte[2];	// Store the data from the register here
	int16_t digitalTemp;  // Temperature stored in TMP102 register
	
	// Read Temperature
	// Change pointer address to temperature register (0)
	TMP102_openPointerRegister(TEMPERATURE_REGISTER);
     486:	2000      	movs	r0, #0
     488:	4b13      	ldr	r3, [pc, #76]	; (4d8 <TMP102_readTempC+0x54>)
     48a:	4798      	blx	r3
	// Read from temperature register
	registerByte[0] = TMP102_readRegister(0);
     48c:	2000      	movs	r0, #0
     48e:	4d13      	ldr	r5, [pc, #76]	; (4dc <TMP102_readTempC+0x58>)
     490:	47a8      	blx	r5
     492:	0004      	movs	r4, r0
	registerByte[1] = TMP102_readRegister(1);
     494:	2001      	movs	r0, #1
     496:	47a8      	blx	r5

	// Bit 0 of second byte will always be 0 in 12-bit readings and 1 in 13-bit
	if(registerByte[1]&0x01)	// 13 bit mode
     498:	07c3      	lsls	r3, r0, #31
     49a:	d50a      	bpl.n	4b2 <TMP102_readTempC+0x2e>
	{
		// Combine bytes to create a signed int
		digitalTemp = ((registerByte[0]) << 5) | (registerByte[1] >> 3);
     49c:	0164      	lsls	r4, r4, #5
     49e:	08c0      	lsrs	r0, r0, #3
     4a0:	b2c0      	uxtb	r0, r0
     4a2:	4320      	orrs	r0, r4
     4a4:	b200      	sxth	r0, r0
		// Temperature data can be + or -, if it should be negative,
		// convert 13 bit to 16 bit and use the 2s compliment.
		if(digitalTemp > 0xFFF)
     4a6:	4b0e      	ldr	r3, [pc, #56]	; (4e0 <TMP102_readTempC+0x5c>)
     4a8:	4298      	cmp	r0, r3
     4aa:	dd0c      	ble.n	4c6 <TMP102_readTempC+0x42>
		{
			digitalTemp |= 0xE000;
     4ac:	4b0d      	ldr	r3, [pc, #52]	; (4e4 <TMP102_readTempC+0x60>)
     4ae:	4318      	orrs	r0, r3
     4b0:	e009      	b.n	4c6 <TMP102_readTempC+0x42>
		}
	}
	else	// 12 bit mode
	{
		// Combine bytes to create a signed int
		digitalTemp = ((registerByte[0]) << 4) | (registerByte[1] >> 4);
     4b2:	0124      	lsls	r4, r4, #4
     4b4:	0900      	lsrs	r0, r0, #4
     4b6:	b2c0      	uxtb	r0, r0
     4b8:	4320      	orrs	r0, r4
     4ba:	b200      	sxth	r0, r0
		// Temperature data can be + or -, if it should be negative,
		// convert 12 bit to 16 bit and use the 2s compliment.
		if(digitalTemp > 0x7FF)
     4bc:	4b0a      	ldr	r3, [pc, #40]	; (4e8 <TMP102_readTempC+0x64>)
     4be:	4298      	cmp	r0, r3
     4c0:	dd01      	ble.n	4c6 <TMP102_readTempC+0x42>
		{
			digitalTemp |= 0xF000;
     4c2:	4b0a      	ldr	r3, [pc, #40]	; (4ec <TMP102_readTempC+0x68>)
     4c4:	4318      	orrs	r0, r3
		}
	}
	// Convert digital reading to analog temperature (1-bit is equal to 0.0625 C)
	return digitalTemp*0.0625;
     4c6:	4b0a      	ldr	r3, [pc, #40]	; (4f0 <TMP102_readTempC+0x6c>)
     4c8:	4798      	blx	r3
     4ca:	2200      	movs	r2, #0
     4cc:	4b09      	ldr	r3, [pc, #36]	; (4f4 <TMP102_readTempC+0x70>)
     4ce:	4c0a      	ldr	r4, [pc, #40]	; (4f8 <TMP102_readTempC+0x74>)
     4d0:	47a0      	blx	r4
     4d2:	4b0a      	ldr	r3, [pc, #40]	; (4fc <TMP102_readTempC+0x78>)
     4d4:	4798      	blx	r3
}
     4d6:	bd70      	pop	{r4, r5, r6, pc}
     4d8:	000003e1 	.word	0x000003e1
     4dc:	00000429 	.word	0x00000429
     4e0:	00000fff 	.word	0x00000fff
     4e4:	ffffe000 	.word	0xffffe000
     4e8:	000007ff 	.word	0x000007ff
     4ec:	fffff000 	.word	0xfffff000
     4f0:	000145f1 	.word	0x000145f1
     4f4:	3fb00000 	.word	0x3fb00000
     4f8:	00013a5d 	.word	0x00013a5d
     4fc:	00014789 	.word	0x00014789

00000500 <TMP102_sleep>:
	}
}


void TMP102_sleep(void)
{
     500:	b570      	push	{r4, r5, r6, lr}
	uint8_t registerByte; // Store the data from the register here

	// Change pointer address to configuration register (0x01)
	TMP102_openPointerRegister(CONFIG_REGISTER);
     502:	2001      	movs	r0, #1
     504:	4b10      	ldr	r3, [pc, #64]	; (548 <TMP102_sleep+0x48>)
     506:	4798      	blx	r3
	
	// Read current configuration register value
	registerByte = TMP102_readRegister(0);
     508:	2000      	movs	r0, #0
     50a:	4b10      	ldr	r3, [pc, #64]	; (54c <TMP102_sleep+0x4c>)
     50c:	4798      	blx	r3

	registerByte |= 0x01;	// Set SD (bit 0 of first byte)

	// Set configuration register	
	write_buffer[0] = CONFIG_REGISTER;
     50e:	4a10      	ldr	r2, [pc, #64]	; (550 <TMP102_sleep+0x50>)
     510:	2301      	movs	r3, #1
     512:	7013      	strb	r3, [r2, #0]
	registerByte |= 0x01;	// Set SD (bit 0 of first byte)
     514:	4318      	orrs	r0, r3
	write_buffer[1] = registerByte;
     516:	7050      	strb	r0, [r2, #1]
	
	master_packet.address = TMP102_address;
     518:	4b0e      	ldr	r3, [pc, #56]	; (554 <TMP102_sleep+0x54>)
     51a:	2148      	movs	r1, #72	; 0x48
     51c:	8019      	strh	r1, [r3, #0]
	master_packet.data = write_buffer;
     51e:	605a      	str	r2, [r3, #4]
	master_packet.data_length = 2;
     520:	2202      	movs	r2, #2
     522:	805a      	strh	r2, [r3, #2]
	while (i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &master_packet) != STATUS_OK) {
     524:	001d      	movs	r5, r3
     526:	4c0c      	ldr	r4, [pc, #48]	; (558 <TMP102_sleep+0x58>)
     528:	4e0c      	ldr	r6, [pc, #48]	; (55c <TMP102_sleep+0x5c>)
     52a:	0029      	movs	r1, r5
     52c:	0020      	movs	r0, r4
     52e:	47b0      	blx	r6
     530:	2800      	cmp	r0, #0
     532:	d007      	beq.n	544 <TMP102_sleep+0x44>
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == TIMEOUT) {
     534:	4a0a      	ldr	r2, [pc, #40]	; (560 <TMP102_sleep+0x60>)
     536:	6813      	ldr	r3, [r2, #0]
     538:	1c59      	adds	r1, r3, #1
     53a:	6011      	str	r1, [r2, #0]
     53c:	22fa      	movs	r2, #250	; 0xfa
     53e:	0092      	lsls	r2, r2, #2
     540:	4293      	cmp	r3, r2
     542:	d1f2      	bne.n	52a <TMP102_sleep+0x2a>
			return;
		}
	}
}
     544:	bd70      	pop	{r4, r5, r6, pc}
     546:	46c0      	nop			; (mov r8, r8)
     548:	000003e1 	.word	0x000003e1
     54c:	00000429 	.word	0x00000429
     550:	20000a38 	.word	0x20000a38
     554:	20001028 	.word	0x20001028
     558:	20001034 	.word	0x20001034
     55c:	000019d1 	.word	0x000019d1
     560:	20000a34 	.word	0x20000a34

00000564 <TMP102_wakeup>:


void TMP102_wakeup(void)
{
     564:	b570      	push	{r4, r5, r6, lr}
	uint8_t registerByte; // Store the data from the register here

	// Change pointer address to configuration register (1)
	TMP102_openPointerRegister(CONFIG_REGISTER);
     566:	2001      	movs	r0, #1
     568:	4b10      	ldr	r3, [pc, #64]	; (5ac <TMP102_wakeup+0x48>)
     56a:	4798      	blx	r3
	
	// Read current configuration register value
	registerByte = TMP102_readRegister(0);
     56c:	2000      	movs	r0, #0
     56e:	4b10      	ldr	r3, [pc, #64]	; (5b0 <TMP102_wakeup+0x4c>)
     570:	4798      	blx	r3

	registerByte &= 0xFE;	// Clear SD (bit 0 of first byte)

	// Set configuration registers	
	write_buffer[0] = CONFIG_REGISTER;
     572:	4a10      	ldr	r2, [pc, #64]	; (5b4 <TMP102_wakeup+0x50>)
     574:	2301      	movs	r3, #1
     576:	7013      	strb	r3, [r2, #0]
	registerByte &= 0xFE;	// Clear SD (bit 0 of first byte)
     578:	4398      	bics	r0, r3
	write_buffer[1] = registerByte;
     57a:	7050      	strb	r0, [r2, #1]
	
	master_packet.address = TMP102_address;
     57c:	4b0e      	ldr	r3, [pc, #56]	; (5b8 <TMP102_wakeup+0x54>)
     57e:	2148      	movs	r1, #72	; 0x48
     580:	8019      	strh	r1, [r3, #0]
	master_packet.data = write_buffer;
     582:	605a      	str	r2, [r3, #4]
	master_packet.data_length = 2;
     584:	2202      	movs	r2, #2
     586:	805a      	strh	r2, [r3, #2]
	while (i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &master_packet) != STATUS_OK) {
     588:	001d      	movs	r5, r3
     58a:	4c0c      	ldr	r4, [pc, #48]	; (5bc <TMP102_wakeup+0x58>)
     58c:	4e0c      	ldr	r6, [pc, #48]	; (5c0 <TMP102_wakeup+0x5c>)
     58e:	0029      	movs	r1, r5
     590:	0020      	movs	r0, r4
     592:	47b0      	blx	r6
     594:	2800      	cmp	r0, #0
     596:	d007      	beq.n	5a8 <TMP102_wakeup+0x44>
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == TIMEOUT) {
     598:	4a0a      	ldr	r2, [pc, #40]	; (5c4 <TMP102_wakeup+0x60>)
     59a:	6813      	ldr	r3, [r2, #0]
     59c:	1c59      	adds	r1, r3, #1
     59e:	6011      	str	r1, [r2, #0]
     5a0:	22fa      	movs	r2, #250	; 0xfa
     5a2:	0092      	lsls	r2, r2, #2
     5a4:	4293      	cmp	r3, r2
     5a6:	d1f2      	bne.n	58e <TMP102_wakeup+0x2a>
			return;
		}
	}
}
     5a8:	bd70      	pop	{r4, r5, r6, pc}
     5aa:	46c0      	nop			; (mov r8, r8)
     5ac:	000003e1 	.word	0x000003e1
     5b0:	00000429 	.word	0x00000429
     5b4:	20000a38 	.word	0x20000a38
     5b8:	20001028 	.word	0x20001028
     5bc:	20001034 	.word	0x20001034
     5c0:	000019d1 	.word	0x000019d1
     5c4:	20000a34 	.word	0x20000a34

000005c8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     5c8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     5ca:	2000      	movs	r0, #0
     5cc:	4b08      	ldr	r3, [pc, #32]	; (5f0 <delay_init+0x28>)
     5ce:	4798      	blx	r3
     5d0:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     5d2:	4c08      	ldr	r4, [pc, #32]	; (5f4 <delay_init+0x2c>)
     5d4:	21fa      	movs	r1, #250	; 0xfa
     5d6:	0089      	lsls	r1, r1, #2
     5d8:	47a0      	blx	r4
     5da:	4b07      	ldr	r3, [pc, #28]	; (5f8 <delay_init+0x30>)
     5dc:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     5de:	4907      	ldr	r1, [pc, #28]	; (5fc <delay_init+0x34>)
     5e0:	0028      	movs	r0, r5
     5e2:	47a0      	blx	r4
     5e4:	4b06      	ldr	r3, [pc, #24]	; (600 <delay_init+0x38>)
     5e6:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     5e8:	2205      	movs	r2, #5
     5ea:	4b06      	ldr	r3, [pc, #24]	; (604 <delay_init+0x3c>)
     5ec:	601a      	str	r2, [r3, #0]
}
     5ee:	bd70      	pop	{r4, r5, r6, pc}
     5f0:	00003135 	.word	0x00003135
     5f4:	00011a09 	.word	0x00011a09
     5f8:	20000000 	.word	0x20000000
     5fc:	000f4240 	.word	0x000f4240
     600:	20000004 	.word	0x20000004
     604:	e000e010 	.word	0xe000e010

00000608 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     608:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     60a:	4b08      	ldr	r3, [pc, #32]	; (62c <delay_cycles_us+0x24>)
     60c:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     60e:	4a08      	ldr	r2, [pc, #32]	; (630 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     610:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     612:	2180      	movs	r1, #128	; 0x80
     614:	0249      	lsls	r1, r1, #9
	while (n--) {
     616:	3801      	subs	r0, #1
     618:	d307      	bcc.n	62a <delay_cycles_us+0x22>
	if (n > 0) {
     61a:	2c00      	cmp	r4, #0
     61c:	d0fb      	beq.n	616 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
     61e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     620:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     622:	6813      	ldr	r3, [r2, #0]
     624:	420b      	tst	r3, r1
     626:	d0fc      	beq.n	622 <delay_cycles_us+0x1a>
     628:	e7f5      	b.n	616 <delay_cycles_us+0xe>
	}
}
     62a:	bd30      	pop	{r4, r5, pc}
     62c:	20000004 	.word	0x20000004
     630:	e000e010 	.word	0xe000e010

00000634 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     634:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     636:	4b08      	ldr	r3, [pc, #32]	; (658 <delay_cycles_ms+0x24>)
     638:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
     63a:	4a08      	ldr	r2, [pc, #32]	; (65c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     63c:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     63e:	2180      	movs	r1, #128	; 0x80
     640:	0249      	lsls	r1, r1, #9
	while (n--) {
     642:	3801      	subs	r0, #1
     644:	d307      	bcc.n	656 <delay_cycles_ms+0x22>
	if (n > 0) {
     646:	2c00      	cmp	r4, #0
     648:	d0fb      	beq.n	642 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     64a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     64c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     64e:	6813      	ldr	r3, [r2, #0]
     650:	420b      	tst	r3, r1
     652:	d0fc      	beq.n	64e <delay_cycles_ms+0x1a>
     654:	e7f5      	b.n	642 <delay_cycles_ms+0xe>
	}
}
     656:	bd30      	pop	{r4, r5, pc}
     658:	20000000 	.word	0x20000000
     65c:	e000e010 	.word	0xe000e010

00000660 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     660:	4b0c      	ldr	r3, [pc, #48]	; (694 <cpu_irq_enter_critical+0x34>)
     662:	681b      	ldr	r3, [r3, #0]
     664:	2b00      	cmp	r3, #0
     666:	d106      	bne.n	676 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     668:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     66c:	2b00      	cmp	r3, #0
     66e:	d007      	beq.n	680 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     670:	2200      	movs	r2, #0
     672:	4b09      	ldr	r3, [pc, #36]	; (698 <cpu_irq_enter_critical+0x38>)
     674:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     676:	4a07      	ldr	r2, [pc, #28]	; (694 <cpu_irq_enter_critical+0x34>)
     678:	6813      	ldr	r3, [r2, #0]
     67a:	3301      	adds	r3, #1
     67c:	6013      	str	r3, [r2, #0]
}
     67e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     680:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     682:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     686:	2200      	movs	r2, #0
     688:	4b04      	ldr	r3, [pc, #16]	; (69c <cpu_irq_enter_critical+0x3c>)
     68a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     68c:	3201      	adds	r2, #1
     68e:	4b02      	ldr	r3, [pc, #8]	; (698 <cpu_irq_enter_critical+0x38>)
     690:	701a      	strb	r2, [r3, #0]
     692:	e7f0      	b.n	676 <cpu_irq_enter_critical+0x16>
     694:	20000a3c 	.word	0x20000a3c
     698:	20000a40 	.word	0x20000a40
     69c:	20000008 	.word	0x20000008

000006a0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     6a0:	4b08      	ldr	r3, [pc, #32]	; (6c4 <cpu_irq_leave_critical+0x24>)
     6a2:	681a      	ldr	r2, [r3, #0]
     6a4:	3a01      	subs	r2, #1
     6a6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     6a8:	681b      	ldr	r3, [r3, #0]
     6aa:	2b00      	cmp	r3, #0
     6ac:	d109      	bne.n	6c2 <cpu_irq_leave_critical+0x22>
     6ae:	4b06      	ldr	r3, [pc, #24]	; (6c8 <cpu_irq_leave_critical+0x28>)
     6b0:	781b      	ldrb	r3, [r3, #0]
     6b2:	2b00      	cmp	r3, #0
     6b4:	d005      	beq.n	6c2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     6b6:	2201      	movs	r2, #1
     6b8:	4b04      	ldr	r3, [pc, #16]	; (6cc <cpu_irq_leave_critical+0x2c>)
     6ba:	701a      	strb	r2, [r3, #0]
     6bc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     6c0:	b662      	cpsie	i
	}
}
     6c2:	4770      	bx	lr
     6c4:	20000a3c 	.word	0x20000a3c
     6c8:	20000a40 	.word	0x20000a40
     6cc:	20000008 	.word	0x20000008

000006d0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     6d0:	b5f0      	push	{r4, r5, r6, r7, lr}
     6d2:	46c6      	mov	lr, r8
     6d4:	b500      	push	{lr}
     6d6:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     6d8:	ac01      	add	r4, sp, #4
     6da:	2501      	movs	r5, #1
     6dc:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     6de:	2300      	movs	r3, #0
     6e0:	4698      	mov	r8, r3
     6e2:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     6e4:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     6e6:	0021      	movs	r1, r4
     6e8:	2013      	movs	r0, #19
     6ea:	4e12      	ldr	r6, [pc, #72]	; (734 <system_board_init+0x64>)
     6ec:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     6ee:	4f12      	ldr	r7, [pc, #72]	; (738 <system_board_init+0x68>)
     6f0:	2380      	movs	r3, #128	; 0x80
     6f2:	031b      	lsls	r3, r3, #12
     6f4:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     6f6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_1_PIN, &pin_conf);
     6f8:	0021      	movs	r1, r4
     6fa:	2012      	movs	r0, #18
     6fc:	47b0      	blx	r6
     6fe:	2380      	movs	r3, #128	; 0x80
     700:	02db      	lsls	r3, r3, #11
     702:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);
#ifdef RFSWITCH_ENABLE
	/* Configure RFSWITCH as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     704:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(RF_SWITCH_PIN, &pin_conf);
     706:	0021      	movs	r1, r4
     708:	200d      	movs	r0, #13
     70a:	47b0      	blx	r6
	} else {
		port_base->OUTCLR.reg = pin_mask;
     70c:	2380      	movs	r3, #128	; 0x80
     70e:	019b      	lsls	r3, r3, #6
     710:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
#endif

#ifdef TCXO_ENABLE
	/* Configure TXPO PWR as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     712:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(TCXO_PWR_PIN, &pin_conf);
     714:	0021      	movs	r1, r4
     716:	2009      	movs	r0, #9
     718:	47b0      	blx	r6
     71a:	2380      	movs	r3, #128	; 0x80
     71c:	009b      	lsls	r3, r3, #2
     71e:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     720:	4643      	mov	r3, r8
     722:	7023      	strb	r3, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     724:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     726:	0021      	movs	r1, r4
     728:	201c      	movs	r0, #28
     72a:	47b0      	blx	r6
		
}
     72c:	b002      	add	sp, #8
     72e:	bc04      	pop	{r2}
     730:	4690      	mov	r8, r2
     732:	bdf0      	pop	{r4, r5, r6, r7, pc}
     734:	00000fb5 	.word	0x00000fb5
     738:	40002800 	.word	0x40002800

0000073c <_adc_get_inst_index>:
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
     73c:	2000      	movs	r0, #0
     73e:	4770      	bx	lr

00000740 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     740:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     742:	2300      	movs	r3, #0
     744:	2200      	movs	r2, #0
     746:	7003      	strb	r3, [r0, #0]
	config->reference                     = ADC_REFERENCE_INTREF;
     748:	7043      	strb	r3, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV2;
     74a:	7083      	strb	r3, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     74c:	70c3      	strb	r3, [r0, #3]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     74e:	2100      	movs	r1, #0
     750:	8303      	strh	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     752:	6203      	str	r3, [r0, #32]
	config->window.window_lower_value     = 0;
     754:	61c3      	str	r3, [r0, #28]
#if SAMR30 || SAMR34 || SAMR35
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6;
     756:	2406      	movs	r4, #6
     758:	7104      	strb	r4, [r0, #4]
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN1;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND;
     75a:	24c0      	movs	r4, #192	; 0xc0
     75c:	0164      	lsls	r4, r4, #5
     75e:	80c4      	strh	r4, [r0, #6]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     760:	7201      	strb	r1, [r0, #8]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     762:	7242      	strb	r2, [r0, #9]
	config->left_adjust                   = false;
     764:	7282      	strb	r2, [r0, #10]
	config->differential_mode             = false;
     766:	72c2      	strb	r2, [r0, #11]
	config->freerunning                   = false;
     768:	7302      	strb	r2, [r0, #12]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     76a:	242a      	movs	r4, #42	; 0x2a
     76c:	5502      	strb	r2, [r0, r4]
	config->run_in_standby                = false;
     76e:	7342      	strb	r2, [r0, #13]
	config->on_demand                     = false;
     770:	7382      	strb	r2, [r0, #14]
	config->sampling_time_compensation_enable  = false;
     772:	73c2      	strb	r2, [r0, #15]
	config->positive_input_sequence_mask_enable = 0;
     774:	6103      	str	r3, [r0, #16]
	config->reference_compensation_enable = false;
     776:	7502      	strb	r2, [r0, #20]
	config->correction.correction_enable  = false;
     778:	3c06      	subs	r4, #6
     77a:	5502      	strb	r2, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     77c:	84c3      	strh	r3, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     77e:	8503      	strh	r3, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     780:	7541      	strb	r1, [r0, #21]
}
     782:	bd10      	pop	{r4, pc}

00000784 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     784:	b5f0      	push	{r4, r5, r6, r7, lr}
     786:	46ce      	mov	lr, r9
     788:	b500      	push	{lr}
     78a:	b098      	sub	sp, #96	; 0x60
     78c:	0005      	movs	r5, r0
     78e:	000c      	movs	r4, r1
     790:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Temporary variable to hold ADC instance number */
	uint8_t instance = _adc_get_inst_index(hw);
     792:	0008      	movs	r0, r1
     794:	4bb2      	ldr	r3, [pc, #712]	; (a60 <adc_init+0x2dc>)
     796:	4798      	blx	r3

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     798:	602c      	str	r4, [r5, #0]

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     79a:	4ab2      	ldr	r2, [pc, #712]	; (a64 <adc_init+0x2e0>)
     79c:	6a13      	ldr	r3, [r2, #32]
     79e:	2108      	movs	r1, #8
     7a0:	430b      	orrs	r3, r1
     7a2:	6213      	str	r3, [r2, #32]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     7a4:	7822      	ldrb	r2, [r4, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     7a6:	2305      	movs	r3, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     7a8:	07d2      	lsls	r2, r2, #31
     7aa:	d504      	bpl.n	7b6 <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(instance, module_inst, config);
}
     7ac:	0018      	movs	r0, r3
     7ae:	b018      	add	sp, #96	; 0x60
     7b0:	bc04      	pop	{r2}
     7b2:	4691      	mov	r9, r2
     7b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     7b6:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
     7b8:	8c13      	ldrh	r3, [r2, #32]
     7ba:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     7bc:	2b00      	cmp	r3, #0
     7be:	d1fb      	bne.n	7b8 <adc_init+0x34>
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     7c0:	7822      	ldrb	r2, [r4, #0]
		return STATUS_ERR_DENIED;
     7c2:	331c      	adds	r3, #28
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     7c4:	0792      	lsls	r2, r2, #30
     7c6:	d4f1      	bmi.n	7ac <adc_init+0x28>
	module_inst->reference = config->reference;
     7c8:	7873      	ldrb	r3, [r6, #1]
     7ca:	712b      	strb	r3, [r5, #4]
	if (module_inst->reference == ADC_REFERENCE_INTREF) {
     7cc:	2b00      	cmp	r3, #0
     7ce:	d104      	bne.n	7da <adc_init+0x56>
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SUPC->VREF.reg |= SUPC_VREF_TSEN;
			break;
		case SYSTEM_VOLTAGE_REFERENCE_OUTPUT:
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
     7d0:	4aa5      	ldr	r2, [pc, #660]	; (a68 <adc_init+0x2e4>)
     7d2:	69d3      	ldr	r3, [r2, #28]
     7d4:	2104      	movs	r1, #4
     7d6:	430b      	orrs	r3, r1
     7d8:	61d3      	str	r3, [r2, #28]
		module_inst->callback[i] = NULL;
     7da:	2300      	movs	r3, #0
     7dc:	60ab      	str	r3, [r5, #8]
     7de:	60eb      	str	r3, [r5, #12]
     7e0:	612b      	str	r3, [r5, #16]
	module_inst->registered_callback_mask = 0;
     7e2:	76ab      	strb	r3, [r5, #26]
	module_inst->enabled_callback_mask = 0;
     7e4:	76eb      	strb	r3, [r5, #27]
	module_inst->remaining_conversions = 0;
     7e6:	832b      	strh	r3, [r5, #24]
	module_inst->job_status = STATUS_OK;
     7e8:	772b      	strb	r3, [r5, #28]
	_adc_instances[instance] = module_inst;
     7ea:	0080      	lsls	r0, r0, #2
     7ec:	4b9f      	ldr	r3, [pc, #636]	; (a6c <adc_init+0x2e8>)
     7ee:	50c5      	str	r5, [r0, r3]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     7f0:	232a      	movs	r3, #42	; 0x2a
     7f2:	5cf3      	ldrb	r3, [r6, r3]
     7f4:	2b00      	cmp	r3, #0
     7f6:	d105      	bne.n	804 <adc_init+0x80>
     7f8:	7b33      	ldrb	r3, [r6, #12]
     7fa:	2b00      	cmp	r3, #0
     7fc:	d102      	bne.n	804 <adc_init+0x80>
		module_inst->software_trigger = true;
     7fe:	3301      	adds	r3, #1
     800:	776b      	strb	r3, [r5, #29]
     802:	e001      	b.n	808 <adc_init+0x84>
		module_inst->software_trigger = false;
     804:	2300      	movs	r3, #0
     806:	776b      	strb	r3, [r5, #29]
	Adc *const adc_module = module_inst->hw;
     808:	682f      	ldr	r7, [r5, #0]
	gclk_chan_conf.source_generator = config->clock_source;
     80a:	7833      	ldrb	r3, [r6, #0]
     80c:	466a      	mov	r2, sp
     80e:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
     810:	4669      	mov	r1, sp
     812:	201e      	movs	r0, #30
     814:	4b96      	ldr	r3, [pc, #600]	; (a70 <adc_init+0x2ec>)
     816:	4798      	blx	r3
	system_gclk_chan_enable(_adc_gclk_ids[index]);
     818:	201e      	movs	r0, #30
     81a:	4b96      	ldr	r3, [pc, #600]	; (a74 <adc_init+0x2f0>)
     81c:	4798      	blx	r3
	_adc_configure_ain_pin(index, config->positive_input);
     81e:	7934      	ldrb	r4, [r6, #4]
	const uint32_t pinmapping[] = {
     820:	2258      	movs	r2, #88	; 0x58
     822:	4995      	ldr	r1, [pc, #596]	; (a78 <adc_init+0x2f4>)
     824:	a802      	add	r0, sp, #8
     826:	4b95      	ldr	r3, [pc, #596]	; (a7c <adc_init+0x2f8>)
     828:	4798      	blx	r3
	if (pin <= _adc_extchannel_msb[index]) {
     82a:	2c13      	cmp	r4, #19
     82c:	d90b      	bls.n	846 <adc_init+0xc2>
	_adc_configure_ain_pin(index, config->negative_input);
     82e:	88f4      	ldrh	r4, [r6, #6]
	const uint32_t pinmapping[] = {
     830:	2258      	movs	r2, #88	; 0x58
     832:	4991      	ldr	r1, [pc, #580]	; (a78 <adc_init+0x2f4>)
     834:	a802      	add	r0, sp, #8
     836:	4b91      	ldr	r3, [pc, #580]	; (a7c <adc_init+0x2f8>)
     838:	4798      	blx	r3
	if (pin <= _adc_extchannel_msb[index]) {
     83a:	2c13      	cmp	r4, #19
     83c:	d911      	bls.n	862 <adc_init+0xde>
     83e:	2400      	movs	r4, #0
	const uint32_t pinmapping[] = {
     840:	4b8e      	ldr	r3, [pc, #568]	; (a7c <adc_init+0x2f8>)
     842:	4699      	mov	r9, r3
     844:	e01e      	b.n	884 <adc_init+0x100>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     846:	00a4      	lsls	r4, r4, #2
     848:	ab02      	add	r3, sp, #8
     84a:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     84c:	a901      	add	r1, sp, #4
     84e:	2300      	movs	r3, #0
     850:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     852:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     854:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     856:	3301      	adds	r3, #1
     858:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     85a:	b2c0      	uxtb	r0, r0
     85c:	4b88      	ldr	r3, [pc, #544]	; (a80 <adc_init+0x2fc>)
     85e:	4798      	blx	r3
     860:	e7e5      	b.n	82e <adc_init+0xaa>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     862:	00a4      	lsls	r4, r4, #2
     864:	ab02      	add	r3, sp, #8
     866:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     868:	a901      	add	r1, sp, #4
     86a:	2300      	movs	r3, #0
     86c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     86e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     870:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     872:	3301      	adds	r3, #1
     874:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     876:	b2c0      	uxtb	r0, r0
     878:	4b81      	ldr	r3, [pc, #516]	; (a80 <adc_init+0x2fc>)
     87a:	4798      	blx	r3
     87c:	e7df      	b.n	83e <adc_init+0xba>
     87e:	3401      	adds	r4, #1
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
     880:	2c14      	cmp	r4, #20
     882:	d018      	beq.n	8b6 <adc_init+0x132>
		if(config->positive_input_sequence_mask_enable & (1 << i)){
     884:	2301      	movs	r3, #1
     886:	40a3      	lsls	r3, r4
     888:	6932      	ldr	r2, [r6, #16]
     88a:	421a      	tst	r2, r3
     88c:	d0f7      	beq.n	87e <adc_init+0xfa>
	const uint32_t pinmapping[] = {
     88e:	2258      	movs	r2, #88	; 0x58
     890:	4979      	ldr	r1, [pc, #484]	; (a78 <adc_init+0x2f4>)
     892:	a802      	add	r0, sp, #8
     894:	47c8      	blx	r9
	if (pin <= _adc_extchannel_msb[index]) {
     896:	2c13      	cmp	r4, #19
     898:	d8f1      	bhi.n	87e <adc_init+0xfa>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     89a:	00a3      	lsls	r3, r4, #2
     89c:	aa02      	add	r2, sp, #8
     89e:	5898      	ldr	r0, [r3, r2]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     8a0:	a901      	add	r1, sp, #4
     8a2:	2300      	movs	r3, #0
     8a4:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     8a6:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     8a8:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     8aa:	3301      	adds	r3, #1
     8ac:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     8ae:	b2c0      	uxtb	r0, r0
     8b0:	4b73      	ldr	r3, [pc, #460]	; (a80 <adc_init+0x2fc>)
     8b2:	4798      	blx	r3
     8b4:	e7e3      	b.n	87e <adc_init+0xfa>
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     8b6:	7b73      	ldrb	r3, [r6, #13]
     8b8:	019b      	lsls	r3, r3, #6
						    | (config->on_demand << ADC_CTRLA_ONDEMAND_Pos)) ;
     8ba:	7bb2      	ldrb	r2, [r6, #14]
     8bc:	01d2      	lsls	r2, r2, #7
     8be:	4313      	orrs	r3, r2
     8c0:	b2db      	uxtb	r3, r3
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     8c2:	703b      	strb	r3, [r7, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos)
     8c4:	7d33      	ldrb	r3, [r6, #20]
     8c6:	01db      	lsls	r3, r3, #7
			| (config->reference);
     8c8:	7872      	ldrb	r2, [r6, #1]
     8ca:	4313      	orrs	r3, r2
     8cc:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     8ce:	70bb      	strb	r3, [r7, #2]
	switch (config->resolution) {
     8d0:	78f3      	ldrb	r3, [r6, #3]
     8d2:	2b34      	cmp	r3, #52	; 0x34
     8d4:	d900      	bls.n	8d8 <adc_init+0x154>
     8d6:	e140      	b.n	b5a <adc_init+0x3d6>
     8d8:	009b      	lsls	r3, r3, #2
     8da:	4a6a      	ldr	r2, [pc, #424]	; (a84 <adc_init+0x300>)
     8dc:	58d3      	ldr	r3, [r2, r3]
     8de:	469f      	mov	pc, r3
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     8e0:	2204      	movs	r2, #4
		resolution = ADC_RESOLUTION_16BIT;
     8e2:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_4;
     8e4:	2102      	movs	r1, #2
     8e6:	e01a      	b.n	91e <adc_init+0x19a>
		adjres = config->divide_result;
     8e8:	7a71      	ldrb	r1, [r6, #9]
		accumulate = config->accumulate_samples;
     8ea:	7a32      	ldrb	r2, [r6, #8]
		resolution = ADC_RESOLUTION_16BIT;
     8ec:	2010      	movs	r0, #16
     8ee:	e016      	b.n	91e <adc_init+0x19a>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     8f0:	2206      	movs	r2, #6
		resolution = ADC_RESOLUTION_16BIT;
     8f2:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_2;
     8f4:	2101      	movs	r1, #1
     8f6:	e012      	b.n	91e <adc_init+0x19a>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     8f8:	2208      	movs	r2, #8
		resolution = ADC_RESOLUTION_16BIT;
     8fa:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     8fc:	2100      	movs	r1, #0
     8fe:	e00e      	b.n	91e <adc_init+0x19a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     900:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_8BIT;
     902:	2030      	movs	r0, #48	; 0x30
	uint8_t adjres = 0;
     904:	2100      	movs	r1, #0
     906:	e00a      	b.n	91e <adc_init+0x19a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     908:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_10BIT;
     90a:	2020      	movs	r0, #32
	uint8_t adjres = 0;
     90c:	2100      	movs	r1, #0
     90e:	e006      	b.n	91e <adc_init+0x19a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     910:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_12BIT;
     912:	2000      	movs	r0, #0
	uint8_t adjres = 0;
     914:	2100      	movs	r1, #0
     916:	e002      	b.n	91e <adc_init+0x19a>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     918:	2202      	movs	r2, #2
		resolution = ADC_RESOLUTION_16BIT;
     91a:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_2;
     91c:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     91e:	0109      	lsls	r1, r1, #4
     920:	2370      	movs	r3, #112	; 0x70
     922:	400b      	ands	r3, r1
     924:	4313      	orrs	r3, r2
     926:	733b      	strb	r3, [r7, #12]
	Adc *const adc_module = module_inst->hw;
     928:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     92a:	8c13      	ldrh	r3, [r2, #32]
     92c:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     92e:	2b00      	cmp	r3, #0
     930:	d1fb      	bne.n	92a <adc_init+0x1a6>
	if (config->sample_length > 63) {
     932:	7d72      	ldrb	r2, [r6, #21]
		return STATUS_ERR_INVALID_ARG;
     934:	3317      	adds	r3, #23
	if (config->sample_length > 63) {
     936:	2a3f      	cmp	r2, #63	; 0x3f
     938:	d900      	bls.n	93c <adc_init+0x1b8>
     93a:	e737      	b.n	7ac <adc_init+0x28>
				| (config->sampling_time_compensation_enable << ADC_SAMPCTRL_OFFCOMP_Pos);
     93c:	7bf3      	ldrb	r3, [r6, #15]
     93e:	01db      	lsls	r3, r3, #7
     940:	431a      	orrs	r2, r3
     942:	b2d2      	uxtb	r2, r2
		adc_module->SAMPCTRL.reg =
     944:	737a      	strb	r2, [r7, #13]
	Adc *const adc_module = module_inst->hw;
     946:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     948:	8c13      	ldrh	r3, [r2, #32]
     94a:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     94c:	2b00      	cmp	r3, #0
     94e:	d1fb      	bne.n	948 <adc_init+0x1c4>
			config->clock_prescaler;
     950:	78b3      	ldrb	r3, [r6, #2]
	adc_module->CTRLB.reg =
     952:	707b      	strb	r3, [r7, #1]
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
     954:	2324      	movs	r3, #36	; 0x24
     956:	5cf3      	ldrb	r3, [r6, r3]
     958:	00db      	lsls	r3, r3, #3
			(config->freerunning << ADC_CTRLC_FREERUN_Pos) |
     95a:	7b32      	ldrb	r2, [r6, #12]
     95c:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     95e:	431a      	orrs	r2, r3
			(config->differential_mode << ADC_CTRLC_DIFFMODE_Pos);
     960:	7af3      	ldrb	r3, [r6, #11]
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     962:	4313      	orrs	r3, r2
     964:	7ab2      	ldrb	r2, [r6, #10]
     966:	0052      	lsls	r2, r2, #1
     968:	4313      	orrs	r3, r2
     96a:	4303      	orrs	r3, r0
	adc_module->CTRLC.reg =
     96c:	817b      	strh	r3, [r7, #10]
	Adc *const adc_module = module_inst->hw;
     96e:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     970:	8c13      	ldrh	r3, [r2, #32]
     972:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     974:	2b00      	cmp	r3, #0
     976:	d1fb      	bne.n	970 <adc_init+0x1ec>
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     978:	8b32      	ldrh	r2, [r6, #24]
     97a:	2a00      	cmp	r2, #0
     97c:	d020      	beq.n	9c0 <adc_init+0x23c>
		switch (resolution) {
     97e:	2810      	cmp	r0, #16
     980:	d100      	bne.n	984 <adc_init+0x200>
     982:	e0c9      	b.n	b18 <adc_init+0x394>
     984:	d800      	bhi.n	988 <adc_init+0x204>
     986:	e083      	b.n	a90 <adc_init+0x30c>
     988:	2820      	cmp	r0, #32
     98a:	d100      	bne.n	98e <adc_init+0x20a>
     98c:	e0a3      	b.n	ad6 <adc_init+0x352>
     98e:	2830      	cmp	r0, #48	; 0x30
     990:	d116      	bne.n	9c0 <adc_init+0x23c>
			if (config->differential_mode &&
     992:	7af3      	ldrb	r3, [r6, #11]
     994:	2b00      	cmp	r3, #0
     996:	d00a      	beq.n	9ae <adc_init+0x22a>
					(config->window.window_lower_value > 127 ||
     998:	69f1      	ldr	r1, [r6, #28]
     99a:	3180      	adds	r1, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     99c:	2317      	movs	r3, #23
			if (config->differential_mode &&
     99e:	29ff      	cmp	r1, #255	; 0xff
     9a0:	d900      	bls.n	9a4 <adc_init+0x220>
     9a2:	e703      	b.n	7ac <adc_init+0x28>
					config->window.window_lower_value < -128 ||
     9a4:	6a31      	ldr	r1, [r6, #32]
     9a6:	3180      	adds	r1, #128	; 0x80
     9a8:	29ff      	cmp	r1, #255	; 0xff
     9aa:	d900      	bls.n	9ae <adc_init+0x22a>
     9ac:	e6fe      	b.n	7ac <adc_init+0x28>
				return STATUS_ERR_INVALID_ARG;
     9ae:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 255 ||
     9b0:	69f1      	ldr	r1, [r6, #28]
     9b2:	29ff      	cmp	r1, #255	; 0xff
     9b4:	dd00      	ble.n	9b8 <adc_init+0x234>
     9b6:	e6f9      	b.n	7ac <adc_init+0x28>
     9b8:	6a31      	ldr	r1, [r6, #32]
     9ba:	29ff      	cmp	r1, #255	; 0xff
     9bc:	dd00      	ble.n	9c0 <adc_init+0x23c>
     9be:	e6f5      	b.n	7ac <adc_init+0x28>
	adc_module->CTRLC.reg |= config->window.window_mode;
     9c0:	897b      	ldrh	r3, [r7, #10]
     9c2:	431a      	orrs	r2, r3
     9c4:	817a      	strh	r2, [r7, #10]
	Adc *const adc_module = module_inst->hw;
     9c6:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     9c8:	8c13      	ldrh	r3, [r2, #32]
     9ca:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     9cc:	2b00      	cmp	r3, #0
     9ce:	d1fb      	bne.n	9c8 <adc_init+0x244>
	adc_module->WINLT.reg =
     9d0:	8bb3      	ldrh	r3, [r6, #28]
     9d2:	81fb      	strh	r3, [r7, #14]
	Adc *const adc_module = module_inst->hw;
     9d4:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     9d6:	8c13      	ldrh	r3, [r2, #32]
     9d8:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     9da:	2b00      	cmp	r3, #0
     9dc:	d1fb      	bne.n	9d6 <adc_init+0x252>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     9de:	8c33      	ldrh	r3, [r6, #32]
     9e0:	823b      	strh	r3, [r7, #16]
	Adc *const adc_module = module_inst->hw;
     9e2:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     9e4:	8c13      	ldrh	r3, [r2, #32]
     9e6:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     9e8:	2b00      	cmp	r3, #0
     9ea:	d1fb      	bne.n	9e4 <adc_init+0x260>
			config->positive_input;
     9ec:	7933      	ldrb	r3, [r6, #4]
			config->negative_input |
     9ee:	88f2      	ldrh	r2, [r6, #6]
     9f0:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     9f2:	813b      	strh	r3, [r7, #8]
	Adc *const adc_module = module_inst->hw;
     9f4:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     9f6:	8c13      	ldrh	r3, [r2, #32]
     9f8:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     9fa:	2b00      	cmp	r3, #0
     9fc:	d1fb      	bne.n	9f6 <adc_init+0x272>
	adc_module->EVCTRL.reg = config->event_action;
     9fe:	332a      	adds	r3, #42	; 0x2a
     a00:	5cf3      	ldrb	r3, [r6, r3]
     a02:	70fb      	strb	r3, [r7, #3]
	adc_module->INTENCLR.reg =
     a04:	2307      	movs	r3, #7
     a06:	713b      	strb	r3, [r7, #4]
	if (config->correction.correction_enable){
     a08:	331d      	adds	r3, #29
     a0a:	5cf3      	ldrb	r3, [r6, r3]
     a0c:	2b00      	cmp	r3, #0
     a0e:	d01b      	beq.n	a48 <adc_init+0x2c4>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     a10:	8cf2      	ldrh	r2, [r6, #38]	; 0x26
     a12:	491d      	ldr	r1, [pc, #116]	; (a88 <adc_init+0x304>)
			return STATUS_ERR_INVALID_ARG;
     a14:	2317      	movs	r3, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     a16:	428a      	cmp	r2, r1
     a18:	d900      	bls.n	a1c <adc_init+0x298>
     a1a:	e6c7      	b.n	7ac <adc_init+0x28>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     a1c:	827a      	strh	r2, [r7, #18]
	Adc *const adc_module = module_inst->hw;
     a1e:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     a20:	8c13      	ldrh	r3, [r2, #32]
     a22:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
     a24:	2b00      	cmp	r3, #0
     a26:	d1fb      	bne.n	a20 <adc_init+0x29c>
		if (config->correction.offset_correction > 2047 ||
     a28:	8d31      	ldrh	r1, [r6, #40]	; 0x28
     a2a:	2380      	movs	r3, #128	; 0x80
     a2c:	011b      	lsls	r3, r3, #4
     a2e:	18ca      	adds	r2, r1, r3
     a30:	4815      	ldr	r0, [pc, #84]	; (a88 <adc_init+0x304>)
     a32:	b292      	uxth	r2, r2
			return STATUS_ERR_INVALID_ARG;
     a34:	2317      	movs	r3, #23
		if (config->correction.offset_correction > 2047 ||
     a36:	4282      	cmp	r2, r0
     a38:	d900      	bls.n	a3c <adc_init+0x2b8>
     a3a:	e6b7      	b.n	7ac <adc_init+0x28>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     a3c:	82b9      	strh	r1, [r7, #20]
	Adc *const adc_module = module_inst->hw;
     a3e:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     a40:	8c13      	ldrh	r3, [r2, #32]
     a42:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
     a44:	2b00      	cmp	r3, #0
     a46:	d1fb      	bne.n	a40 <adc_init+0x2bc>
			ADC_CALIB_BIASREFBUF(
     a48:	4b10      	ldr	r3, [pc, #64]	; (a8c <adc_init+0x308>)
     a4a:	681b      	ldr	r3, [r3, #0]
     a4c:	021a      	lsls	r2, r3, #8
     a4e:	21e0      	movs	r1, #224	; 0xe0
     a50:	00c9      	lsls	r1, r1, #3
     a52:	400a      	ands	r2, r1
			ADC_CALIB_BIASCOMP(
     a54:	069b      	lsls	r3, r3, #26
     a56:	0f5b      	lsrs	r3, r3, #29
			) |
     a58:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     a5a:	85bb      	strh	r3, [r7, #44]	; 0x2c
	return STATUS_OK;
     a5c:	2300      	movs	r3, #0
     a5e:	e6a5      	b.n	7ac <adc_init+0x28>
     a60:	0000073d 	.word	0x0000073d
     a64:	40000400 	.word	0x40000400
     a68:	40001400 	.word	0x40001400
     a6c:	2000115c 	.word	0x2000115c
     a70:	00003211 	.word	0x00003211
     a74:	000031a1 	.word	0x000031a1
     a78:	00019bb8 	.word	0x00019bb8
     a7c:	0001516d 	.word	0x0001516d
     a80:	0000330d 	.word	0x0000330d
     a84:	00019ae4 	.word	0x00019ae4
     a88:	00000fff 	.word	0x00000fff
     a8c:	00806020 	.word	0x00806020
		switch (resolution) {
     a90:	2800      	cmp	r0, #0
     a92:	d195      	bne.n	9c0 <adc_init+0x23c>
			if (config->differential_mode &&
     a94:	7af3      	ldrb	r3, [r6, #11]
     a96:	2b00      	cmp	r3, #0
     a98:	d012      	beq.n	ac0 <adc_init+0x33c>
					(config->window.window_lower_value > 2047 ||
     a9a:	69f3      	ldr	r3, [r6, #28]
     a9c:	2080      	movs	r0, #128	; 0x80
     a9e:	0100      	lsls	r0, r0, #4
     aa0:	4684      	mov	ip, r0
     aa2:	4463      	add	r3, ip
     aa4:	0019      	movs	r1, r3
			if (config->differential_mode &&
     aa6:	482e      	ldr	r0, [pc, #184]	; (b60 <adc_init+0x3dc>)
				return STATUS_ERR_INVALID_ARG;
     aa8:	2317      	movs	r3, #23
			if (config->differential_mode &&
     aaa:	4281      	cmp	r1, r0
     aac:	d900      	bls.n	ab0 <adc_init+0x32c>
     aae:	e67d      	b.n	7ac <adc_init+0x28>
					config->window.window_lower_value < -2048 ||
     ab0:	6a33      	ldr	r3, [r6, #32]
     ab2:	4463      	add	r3, ip
     ab4:	0019      	movs	r1, r3
     ab6:	482a      	ldr	r0, [pc, #168]	; (b60 <adc_init+0x3dc>)
				return STATUS_ERR_INVALID_ARG;
     ab8:	2317      	movs	r3, #23
					config->window.window_lower_value < -2048 ||
     aba:	4281      	cmp	r1, r0
     abc:	d900      	bls.n	ac0 <adc_init+0x33c>
     abe:	e675      	b.n	7ac <adc_init+0x28>
			} else if (config->window.window_lower_value > 4095 ||
     ac0:	4927      	ldr	r1, [pc, #156]	; (b60 <adc_init+0x3dc>)
				return STATUS_ERR_INVALID_ARG;
     ac2:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 4095 ||
     ac4:	69f0      	ldr	r0, [r6, #28]
     ac6:	4288      	cmp	r0, r1
     ac8:	dd00      	ble.n	acc <adc_init+0x348>
     aca:	e66f      	b.n	7ac <adc_init+0x28>
     acc:	6a30      	ldr	r0, [r6, #32]
     ace:	4288      	cmp	r0, r1
     ad0:	dd00      	ble.n	ad4 <adc_init+0x350>
     ad2:	e66b      	b.n	7ac <adc_init+0x28>
     ad4:	e774      	b.n	9c0 <adc_init+0x23c>
			if (config->differential_mode &&
     ad6:	7af3      	ldrb	r3, [r6, #11]
     ad8:	2b00      	cmp	r3, #0
     ada:	d012      	beq.n	b02 <adc_init+0x37e>
					(config->window.window_lower_value > 511 ||
     adc:	69f3      	ldr	r3, [r6, #28]
     ade:	2080      	movs	r0, #128	; 0x80
     ae0:	0080      	lsls	r0, r0, #2
     ae2:	4684      	mov	ip, r0
     ae4:	4463      	add	r3, ip
     ae6:	0019      	movs	r1, r3
			if (config->differential_mode &&
     ae8:	481e      	ldr	r0, [pc, #120]	; (b64 <adc_init+0x3e0>)
				return STATUS_ERR_INVALID_ARG;
     aea:	2317      	movs	r3, #23
			if (config->differential_mode &&
     aec:	4281      	cmp	r1, r0
     aee:	d900      	bls.n	af2 <adc_init+0x36e>
     af0:	e65c      	b.n	7ac <adc_init+0x28>
					config->window.window_lower_value < -512 ||
     af2:	6a33      	ldr	r3, [r6, #32]
     af4:	4463      	add	r3, ip
     af6:	0019      	movs	r1, r3
     af8:	481a      	ldr	r0, [pc, #104]	; (b64 <adc_init+0x3e0>)
				return STATUS_ERR_INVALID_ARG;
     afa:	2317      	movs	r3, #23
					config->window.window_lower_value < -512 ||
     afc:	4281      	cmp	r1, r0
     afe:	d900      	bls.n	b02 <adc_init+0x37e>
     b00:	e654      	b.n	7ac <adc_init+0x28>
			} else if (config->window.window_lower_value > 1023 ||
     b02:	4918      	ldr	r1, [pc, #96]	; (b64 <adc_init+0x3e0>)
				return STATUS_ERR_INVALID_ARG;
     b04:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 1023 ||
     b06:	69f0      	ldr	r0, [r6, #28]
     b08:	4288      	cmp	r0, r1
     b0a:	dd00      	ble.n	b0e <adc_init+0x38a>
     b0c:	e64e      	b.n	7ac <adc_init+0x28>
     b0e:	6a30      	ldr	r0, [r6, #32]
     b10:	4288      	cmp	r0, r1
     b12:	dd00      	ble.n	b16 <adc_init+0x392>
     b14:	e64a      	b.n	7ac <adc_init+0x28>
     b16:	e753      	b.n	9c0 <adc_init+0x23c>
			if (config->differential_mode &&
     b18:	7af3      	ldrb	r3, [r6, #11]
     b1a:	2b00      	cmp	r3, #0
     b1c:	d012      	beq.n	b44 <adc_init+0x3c0>
					(config->window.window_lower_value > 32767 ||
     b1e:	69f3      	ldr	r3, [r6, #28]
     b20:	2080      	movs	r0, #128	; 0x80
     b22:	0200      	lsls	r0, r0, #8
     b24:	4684      	mov	ip, r0
     b26:	4463      	add	r3, ip
     b28:	0019      	movs	r1, r3
			if (config->differential_mode &&
     b2a:	480f      	ldr	r0, [pc, #60]	; (b68 <adc_init+0x3e4>)
				return STATUS_ERR_INVALID_ARG;
     b2c:	2317      	movs	r3, #23
			if (config->differential_mode &&
     b2e:	4281      	cmp	r1, r0
     b30:	d900      	bls.n	b34 <adc_init+0x3b0>
     b32:	e63b      	b.n	7ac <adc_init+0x28>
					config->window.window_lower_value < -32768 ||
     b34:	6a33      	ldr	r3, [r6, #32]
     b36:	4463      	add	r3, ip
     b38:	0019      	movs	r1, r3
     b3a:	480b      	ldr	r0, [pc, #44]	; (b68 <adc_init+0x3e4>)
				return STATUS_ERR_INVALID_ARG;
     b3c:	2317      	movs	r3, #23
					config->window.window_lower_value < -32768 ||
     b3e:	4281      	cmp	r1, r0
     b40:	d900      	bls.n	b44 <adc_init+0x3c0>
     b42:	e633      	b.n	7ac <adc_init+0x28>
			} else if (config->window.window_lower_value > 65535 ||
     b44:	4908      	ldr	r1, [pc, #32]	; (b68 <adc_init+0x3e4>)
				return STATUS_ERR_INVALID_ARG;
     b46:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 65535 ||
     b48:	69f0      	ldr	r0, [r6, #28]
     b4a:	4288      	cmp	r0, r1
     b4c:	dd00      	ble.n	b50 <adc_init+0x3cc>
     b4e:	e62d      	b.n	7ac <adc_init+0x28>
     b50:	6a30      	ldr	r0, [r6, #32]
     b52:	4288      	cmp	r0, r1
     b54:	dd00      	ble.n	b58 <adc_init+0x3d4>
     b56:	e629      	b.n	7ac <adc_init+0x28>
     b58:	e732      	b.n	9c0 <adc_init+0x23c>
		return STATUS_ERR_INVALID_ARG;
     b5a:	2317      	movs	r3, #23
     b5c:	e626      	b.n	7ac <adc_init+0x28>
     b5e:	46c0      	nop			; (mov r8, r8)
     b60:	00000fff 	.word	0x00000fff
     b64:	000003ff 	.word	0x000003ff
     b68:	0000ffff 	.word	0x0000ffff

00000b6c <ADC_Handler>:
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
#else
void ADC_Handler(void)
{
     b6c:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     b6e:	4b2f      	ldr	r3, [pc, #188]	; (c2c <ADC_Handler+0xc0>)
     b70:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     b72:	6823      	ldr	r3, [r4, #0]
     b74:	799a      	ldrb	r2, [r3, #6]
     b76:	795d      	ldrb	r5, [r3, #5]
     b78:	4015      	ands	r5, r2
	if (flags & ADC_INTFLAG_RESRDY) {
     b7a:	07ea      	lsls	r2, r5, #31
     b7c:	d52a      	bpl.n	bd4 <ADC_Handler+0x68>
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     b7e:	2201      	movs	r2, #1
     b80:	719a      	strb	r2, [r3, #6]
		*(module->job_buffer++) = module->hw->RESULT.reg;
     b82:	6962      	ldr	r2, [r4, #20]
     b84:	1c93      	adds	r3, r2, #2
     b86:	6163      	str	r3, [r4, #20]
     b88:	6823      	ldr	r3, [r4, #0]
     b8a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
     b8c:	b29b      	uxth	r3, r3
     b8e:	8013      	strh	r3, [r2, #0]
		if (--module->remaining_conversions > 0) {
     b90:	8b23      	ldrh	r3, [r4, #24]
     b92:	3b01      	subs	r3, #1
     b94:	b29b      	uxth	r3, r3
     b96:	8323      	strh	r3, [r4, #24]
     b98:	2b00      	cmp	r3, #0
     b9a:	d015      	beq.n	bc8 <ADC_Handler+0x5c>
			if (module->software_trigger == true
     b9c:	7f63      	ldrb	r3, [r4, #29]
     b9e:	2b00      	cmp	r3, #0
     ba0:	d018      	beq.n	bd4 <ADC_Handler+0x68>
				&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
     ba2:	6822      	ldr	r2, [r4, #0]
     ba4:	79d3      	ldrb	r3, [r2, #7]
     ba6:	b25b      	sxtb	r3, r3
     ba8:	2b00      	cmp	r3, #0
     baa:	db13      	blt.n	bd4 <ADC_Handler+0x68>
     bac:	8c13      	ldrh	r3, [r2, #32]
     bae:	b29b      	uxth	r3, r3
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
     bb0:	2b00      	cmp	r3, #0
     bb2:	d1fb      	bne.n	bac <ADC_Handler+0x40>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     bb4:	7e13      	ldrb	r3, [r2, #24]
     bb6:	2102      	movs	r1, #2
     bb8:	430b      	orrs	r3, r1
     bba:	7613      	strb	r3, [r2, #24]
	Adc *const adc_module = module_inst->hw;
     bbc:	6822      	ldr	r2, [r4, #0]
	if (adc_module->SYNCBUSY.reg) {
     bbe:	8c13      	ldrh	r3, [r2, #32]
     bc0:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
     bc2:	2b00      	cmp	r3, #0
     bc4:	d1fb      	bne.n	bbe <ADC_Handler+0x52>
     bc6:	e005      	b.n	bd4 <ADC_Handler+0x68>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     bc8:	2301      	movs	r3, #1
     bca:	6822      	ldr	r2, [r4, #0]
     bcc:	7113      	strb	r3, [r2, #4]
			if (module->job_status == STATUS_BUSY) {
     bce:	7f23      	ldrb	r3, [r4, #28]
     bd0:	2b05      	cmp	r3, #5
     bd2:	d016      	beq.n	c02 <ADC_Handler+0x96>
	if (flags & ADC_INTFLAG_WINMON) {
     bd4:	076b      	lsls	r3, r5, #29
     bd6:	d508      	bpl.n	bea <ADC_Handler+0x7e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     bd8:	2304      	movs	r3, #4
     bda:	6822      	ldr	r2, [r4, #0]
     bdc:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     bde:	7ee3      	ldrb	r3, [r4, #27]
     be0:	079b      	lsls	r3, r3, #30
     be2:	d502      	bpl.n	bea <ADC_Handler+0x7e>
     be4:	7ea3      	ldrb	r3, [r4, #26]
     be6:	079b      	lsls	r3, r3, #30
     be8:	d417      	bmi.n	c1a <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
     bea:	07ab      	lsls	r3, r5, #30
     bec:	d508      	bpl.n	c00 <ADC_Handler+0x94>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     bee:	2302      	movs	r3, #2
     bf0:	6822      	ldr	r2, [r4, #0]
     bf2:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     bf4:	7ee3      	ldrb	r3, [r4, #27]
     bf6:	075b      	lsls	r3, r3, #29
     bf8:	d502      	bpl.n	c00 <ADC_Handler+0x94>
     bfa:	7ea3      	ldrb	r3, [r4, #26]
     bfc:	075b      	lsls	r3, r3, #29
     bfe:	d410      	bmi.n	c22 <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
     c00:	bd70      	pop	{r4, r5, r6, pc}
				module->job_status = STATUS_OK;
     c02:	2300      	movs	r3, #0
     c04:	7723      	strb	r3, [r4, #28]
				if ((module->enabled_callback_mask &
     c06:	7ee3      	ldrb	r3, [r4, #27]
     c08:	07db      	lsls	r3, r3, #31
     c0a:	d5e3      	bpl.n	bd4 <ADC_Handler+0x68>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     c0c:	7ea3      	ldrb	r3, [r4, #26]
     c0e:	07db      	lsls	r3, r3, #31
     c10:	d5e0      	bpl.n	bd4 <ADC_Handler+0x68>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     c12:	0020      	movs	r0, r4
     c14:	68a3      	ldr	r3, [r4, #8]
     c16:	4798      	blx	r3
     c18:	e7dc      	b.n	bd4 <ADC_Handler+0x68>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     c1a:	0020      	movs	r0, r4
     c1c:	68e3      	ldr	r3, [r4, #12]
     c1e:	4798      	blx	r3
     c20:	e7e3      	b.n	bea <ADC_Handler+0x7e>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     c22:	6923      	ldr	r3, [r4, #16]
     c24:	0020      	movs	r0, r4
     c26:	4798      	blx	r3
}
     c28:	e7ea      	b.n	c00 <ADC_Handler+0x94>
     c2a:	46c0      	nop			; (mov r8, r8)
     c2c:	2000115c 	.word	0x2000115c

00000c30 <aes_get_config_defaults>:
		struct aes_config *const config)
{

	/* Sanity check arguments */
	Assert(config);
	config->encrypt_mode = AES_ENCRYPTION;
     c30:	2301      	movs	r3, #1
     c32:	7003      	strb	r3, [r0, #0]
	config->key_size = AES_KEY_SIZE_128;
     c34:	2300      	movs	r3, #0
     c36:	7043      	strb	r3, [r0, #1]
	config->start_mode = AES_MANUAL_START;
     c38:	7083      	strb	r3, [r0, #2]
	config->opmode= AES_ECB_MODE;
     c3a:	70c3      	strb	r3, [r0, #3]
	config->cfb_size = AES_CFB_SIZE_128;
     c3c:	7103      	strb	r3, [r0, #4]
	config->ctype = AES_COUNTERMEASURE_TYPE_ALL;
     c3e:	220f      	movs	r2, #15
     c40:	7142      	strb	r2, [r0, #5]
	config->enable_xor_key = false;
     c42:	7183      	strb	r3, [r0, #6]
	config->enable_key_gen = false;
     c44:	71c3      	strb	r3, [r0, #7]
	config->lod = false;
     c46:	7203      	strb	r3, [r0, #8]
}
     c48:	4770      	bx	lr

00000c4a <aes_enable>:
 */
void aes_enable(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLA.reg |= AES_CTRLA_ENABLE;
     c4a:	6802      	ldr	r2, [r0, #0]
     c4c:	6813      	ldr	r3, [r2, #0]
     c4e:	2102      	movs	r1, #2
     c50:	430b      	orrs	r3, r1
     c52:	6013      	str	r3, [r2, #0]

}
     c54:	4770      	bx	lr

00000c56 <aes_disable>:
{
	Assert(module);
	Assert(module->hw);

	/* Disbale interrupt */
	module->hw->INTENCLR.reg = AES_INTENCLR_MASK;
     c56:	2303      	movs	r3, #3
     c58:	6802      	ldr	r2, [r0, #0]
     c5a:	7153      	strb	r3, [r2, #5]
	/* Clear interrupt flag */
	module->hw->INTFLAG.reg = AES_INTFLAG_MASK;
     c5c:	6802      	ldr	r2, [r0, #0]
     c5e:	71d3      	strb	r3, [r2, #7]

	module->hw->CTRLA.reg &= (~AES_CTRLA_ENABLE);
     c60:	6802      	ldr	r2, [r0, #0]
     c62:	6813      	ldr	r3, [r2, #0]
     c64:	2102      	movs	r1, #2
     c66:	438b      	bics	r3, r1
     c68:	6013      	str	r3, [r2, #0]
}
     c6a:	4770      	bx	lr

00000c6c <aes_set_config>:
 */
void aes_set_config(
		struct aes_module *const module,
		Aes *const hw,
		struct aes_config *const config)
{
     c6c:	b570      	push	{r4, r5, r6, lr}
     c6e:	0004      	movs	r4, r0
     c70:	000d      	movs	r5, r1
	/* Validate arguments. */
	Assert(hw);
	Assert(config);
	Assert(module);

	module->opmode = config->opmode;
     c72:	78d3      	ldrb	r3, [r2, #3]
     c74:	7103      	strb	r3, [r0, #4]
	module->hw = hw;
     c76:	6021      	str	r1, [r4, #0]
	module->key_size = config->key_size;
     c78:	7853      	ldrb	r3, [r2, #1]
     c7a:	7143      	strb	r3, [r0, #5]
	module->cfb_size = config->cfb_size;
     c7c:	7913      	ldrb	r3, [r2, #4]
     c7e:	7183      	strb	r3, [r0, #6]

	ul_mode |= (config->encrypt_mode << AES_CTRLA_CIPHER_Pos)
     c80:	7813      	ldrb	r3, [r2, #0]
     c82:	029b      	lsls	r3, r3, #10
			 | (config->start_mode << AES_CTRLA_STARTMODE_Pos)
     c84:	7891      	ldrb	r1, [r2, #2]
     c86:	02c9      	lsls	r1, r1, #11
     c88:	430b      	orrs	r3, r1
			 | (config->key_size << AES_CTRLA_KEYSIZE_Pos)
     c8a:	7851      	ldrb	r1, [r2, #1]
     c8c:	0209      	lsls	r1, r1, #8
     c8e:	430b      	orrs	r3, r1
			 | (config->opmode << AES_CTRLA_AESMODE_Pos)
     c90:	78d1      	ldrb	r1, [r2, #3]
     c92:	0089      	lsls	r1, r1, #2
     c94:	430b      	orrs	r3, r1
			 | (config->cfb_size << AES_CTRLA_CFBS_Pos)
     c96:	7911      	ldrb	r1, [r2, #4]
     c98:	0149      	lsls	r1, r1, #5
     c9a:	430b      	orrs	r3, r1
			 | (AES_CTRLA_CTYPE(config->ctype))
			 | (config->enable_xor_key << AES_CTRLA_XORKEY_Pos)
     c9c:	7991      	ldrb	r1, [r2, #6]
     c9e:	0389      	lsls	r1, r1, #14
			 | (config->enable_key_gen << AES_CTRLA_KEYGEN_Pos)
     ca0:	79d0      	ldrb	r0, [r2, #7]
     ca2:	0340      	lsls	r0, r0, #13
			 | (config->lod << AES_CTRLA_LOD_Pos);
     ca4:	4301      	orrs	r1, r0
     ca6:	7a10      	ldrb	r0, [r2, #8]
     ca8:	0300      	lsls	r0, r0, #12
     caa:	4301      	orrs	r1, r0
			 | (AES_CTRLA_CTYPE(config->ctype))
     cac:	7952      	ldrb	r2, [r2, #5]
     cae:	0412      	lsls	r2, r2, #16
     cb0:	20f0      	movs	r0, #240	; 0xf0
     cb2:	0300      	lsls	r0, r0, #12
     cb4:	4002      	ands	r2, r0
			 | (config->lod << AES_CTRLA_LOD_Pos);
     cb6:	430a      	orrs	r2, r1
     cb8:	4313      	orrs	r3, r2
     cba:	001e      	movs	r6, r3
	if (hw->CTRLA.reg & AES_CTRLA_ENABLE) {
     cbc:	682b      	ldr	r3, [r5, #0]
     cbe:	079b      	lsls	r3, r3, #30
     cc0:	d401      	bmi.n	cc6 <aes_set_config+0x5a>
		aes_disable(module);
		hw->CTRLA.reg = ul_mode;
		aes_enable(module);
	} else {
		hw->CTRLA.reg = ul_mode;
     cc2:	602e      	str	r6, [r5, #0]
	}
}
     cc4:	bd70      	pop	{r4, r5, r6, pc}
		aes_disable(module);
     cc6:	0020      	movs	r0, r4
     cc8:	4b03      	ldr	r3, [pc, #12]	; (cd8 <aes_set_config+0x6c>)
     cca:	4798      	blx	r3
		hw->CTRLA.reg = ul_mode;
     ccc:	602e      	str	r6, [r5, #0]
		aes_enable(module);
     cce:	0020      	movs	r0, r4
     cd0:	4b02      	ldr	r3, [pc, #8]	; (cdc <aes_set_config+0x70>)
     cd2:	4798      	blx	r3
     cd4:	e7f6      	b.n	cc4 <aes_set_config+0x58>
     cd6:	46c0      	nop			; (mov r8, r8)
     cd8:	00000c57 	.word	0x00000c57
     cdc:	00000c4b 	.word	0x00000c4b

00000ce0 <aes_init>:
{
     ce0:	b570      	push	{r4, r5, r6, lr}
			MCLK->APBCMASK.reg |= mask;
     ce2:	4c05      	ldr	r4, [pc, #20]	; (cf8 <aes_init+0x18>)
     ce4:	69e5      	ldr	r5, [r4, #28]
     ce6:	2380      	movs	r3, #128	; 0x80
     ce8:	019b      	lsls	r3, r3, #6
     cea:	432b      	orrs	r3, r5
     cec:	61e3      	str	r3, [r4, #28]
	hw->CTRLA.reg = AES_CTRLA_SWRST;
     cee:	2301      	movs	r3, #1
     cf0:	600b      	str	r3, [r1, #0]
	aes_set_config(module,hw, config);
     cf2:	4b02      	ldr	r3, [pc, #8]	; (cfc <aes_init+0x1c>)
     cf4:	4798      	blx	r3
}
     cf6:	bd70      	pop	{r4, r5, r6, pc}
     cf8:	40000400 	.word	0x40000400
     cfc:	00000c6d 	.word	0x00000c6d

00000d00 <aes_write_key>:
 * \note The key size depends on the current AES configuration.
 */
void aes_write_key(
		struct aes_module *const module,
		const uint32_t *key)
{
     d00:	b570      	push	{r4, r5, r6, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(key);

	switch (module->key_size) {
     d02:	7943      	ldrb	r3, [r0, #5]
     d04:	2b01      	cmp	r3, #1
     d06:	d005      	beq.n	d14 <aes_write_key+0x14>
     d08:	2b00      	cmp	r3, #0
     d0a:	d010      	beq.n	d2e <aes_write_key+0x2e>
     d0c:	2b02      	cmp	r3, #2
     d0e:	d10d      	bne.n	d2c <aes_write_key+0x2c>
	case AES_KEY_SIZE_192:
		key_length = 6;
		break;

	case AES_KEY_SIZE_256:
		key_length = 8;
     d10:	2508      	movs	r5, #8
     d12:	e000      	b.n	d16 <aes_write_key+0x16>
		key_length = 6;
     d14:	2506      	movs	r5, #6
{
     d16:	2300      	movs	r3, #0
	default:
		break;
	}

	for (i = 0; i < key_length; i++) {
		module->hw->KEYWORD[i].reg = *key;
     d18:	c910      	ldmia	r1!, {r4}
     d1a:	1c9a      	adds	r2, r3, #2
     d1c:	0092      	lsls	r2, r2, #2
     d1e:	6806      	ldr	r6, [r0, #0]
     d20:	46b4      	mov	ip, r6
     d22:	4462      	add	r2, ip
     d24:	6054      	str	r4, [r2, #4]
	for (i = 0; i < key_length; i++) {
     d26:	3301      	adds	r3, #1
     d28:	42ab      	cmp	r3, r5
     d2a:	d3f5      	bcc.n	d18 <aes_write_key+0x18>
		key++;
	}
}
     d2c:	bd70      	pop	{r4, r5, r6, pc}
		key_length = 4;
     d2e:	2504      	movs	r5, #4
     d30:	e7f1      	b.n	d16 <aes_write_key+0x16>
	...

00000d34 <aes_write_input_data>:
 * \param[in] input_data_buffer Pointer to an input data buffer
 */
void aes_write_input_data(
		struct aes_module *const module,
		const uint32_t *input_data_buffer)
{
     d34:	b510      	push	{r4, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);;
	Assert(input_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
     d36:	2300      	movs	r3, #0
     d38:	6802      	ldr	r2, [r0, #0]
     d3a:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
     d3c:	4b0f      	ldr	r3, [pc, #60]	; (d7c <aes_write_input_data+0x48>)
     d3e:	6842      	ldr	r2, [r0, #4]
     d40:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
     d42:	4a0f      	ldr	r2, [pc, #60]	; (d80 <aes_write_input_data+0x4c>)
     d44:	4293      	cmp	r3, r2
     d46:	d00a      	beq.n	d5e <aes_write_input_data+0x2a>
		for (i = 0; i < 2; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
			input_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
     d48:	7903      	ldrb	r3, [r0, #4]
     d4a:	2b03      	cmp	r3, #3
     d4c:	d00e      	beq.n	d6c <aes_write_input_data+0x38>
     d4e:	000c      	movs	r4, r1
     d50:	3410      	adds	r4, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		module->hw->INDATA.reg = *input_data_buffer;
	} else {
		for (i = 0; i < 4; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
     d52:	6803      	ldr	r3, [r0, #0]
     d54:	c904      	ldmia	r1!, {r2}
     d56:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < 4; i++) {
     d58:	428c      	cmp	r4, r1
     d5a:	d1fa      	bne.n	d52 <aes_write_input_data+0x1e>
			input_data_buffer++;
		}
	}
}
     d5c:	bd10      	pop	{r4, pc}
			module->hw->INDATA.reg = *input_data_buffer;
     d5e:	6803      	ldr	r3, [r0, #0]
     d60:	680a      	ldr	r2, [r1, #0]
     d62:	639a      	str	r2, [r3, #56]	; 0x38
     d64:	6803      	ldr	r3, [r0, #0]
     d66:	684a      	ldr	r2, [r1, #4]
     d68:	639a      	str	r2, [r3, #56]	; 0x38
     d6a:	e7f7      	b.n	d5c <aes_write_input_data+0x28>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
     d6c:	7983      	ldrb	r3, [r0, #6]
     d6e:	3b02      	subs	r3, #2
     d70:	2b01      	cmp	r3, #1
     d72:	d8ec      	bhi.n	d4e <aes_write_input_data+0x1a>
		module->hw->INDATA.reg = *input_data_buffer;
     d74:	6803      	ldr	r3, [r0, #0]
     d76:	680a      	ldr	r2, [r1, #0]
     d78:	639a      	str	r2, [r3, #56]	; 0x38
     d7a:	e7ef      	b.n	d5c <aes_write_input_data+0x28>
     d7c:	00ff00ff 	.word	0x00ff00ff
     d80:	00010003 	.word	0x00010003

00000d84 <aes_read_output_data>:
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(output_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
     d84:	2300      	movs	r3, #0
     d86:	6802      	ldr	r2, [r0, #0]
     d88:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
     d8a:	4b10      	ldr	r3, [pc, #64]	; (dcc <aes_read_output_data+0x48>)
     d8c:	6842      	ldr	r2, [r0, #4]
     d8e:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
     d90:	4a0f      	ldr	r2, [pc, #60]	; (dd0 <aes_read_output_data+0x4c>)
     d92:	4293      	cmp	r3, r2
     d94:	d00a      	beq.n	dac <aes_read_output_data+0x28>
		for (i = 0; i < 2; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
			output_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
     d96:	7903      	ldrb	r3, [r0, #4]
     d98:	2b03      	cmp	r3, #3
     d9a:	d00e      	beq.n	dba <aes_read_output_data+0x36>
     d9c:	000a      	movs	r2, r1
     d9e:	3210      	adds	r2, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		*output_data_buffer = module->hw->INDATA.reg;
	} else {
		for (i = 0; i < 4; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
     da0:	6803      	ldr	r3, [r0, #0]
     da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     da4:	c108      	stmia	r1!, {r3}
		for (i = 0; i < 4; i++) {
     da6:	428a      	cmp	r2, r1
     da8:	d1fa      	bne.n	da0 <aes_read_output_data+0x1c>
			output_data_buffer++;
		}
	}
}
     daa:	4770      	bx	lr
			*output_data_buffer = module->hw->INDATA.reg;
     dac:	6803      	ldr	r3, [r0, #0]
     dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     db0:	600b      	str	r3, [r1, #0]
     db2:	6803      	ldr	r3, [r0, #0]
     db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     db6:	604b      	str	r3, [r1, #4]
     db8:	e7f7      	b.n	daa <aes_read_output_data+0x26>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
     dba:	7983      	ldrb	r3, [r0, #6]
     dbc:	3b02      	subs	r3, #2
     dbe:	2b01      	cmp	r3, #1
     dc0:	d8ec      	bhi.n	d9c <aes_read_output_data+0x18>
		*output_data_buffer = module->hw->INDATA.reg;
     dc2:	6803      	ldr	r3, [r0, #0]
     dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     dc6:	600b      	str	r3, [r1, #0]
     dc8:	e7ef      	b.n	daa <aes_read_output_data+0x26>
     dca:	46c0      	nop			; (mov r8, r8)
     dcc:	00ff00ff 	.word	0x00ff00ff
     dd0:	00010003 	.word	0x00010003

00000dd4 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     dd4:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     dd6:	2a00      	cmp	r2, #0
     dd8:	d001      	beq.n	dde <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     dda:	0018      	movs	r0, r3
     ddc:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     dde:	008b      	lsls	r3, r1, #2
     de0:	4a06      	ldr	r2, [pc, #24]	; (dfc <extint_register_callback+0x28>)
     de2:	589b      	ldr	r3, [r3, r2]
     de4:	2b00      	cmp	r3, #0
     de6:	d003      	beq.n	df0 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     de8:	4283      	cmp	r3, r0
     dea:	d005      	beq.n	df8 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     dec:	231d      	movs	r3, #29
     dee:	e7f4      	b.n	dda <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     df0:	0089      	lsls	r1, r1, #2
     df2:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     df4:	2300      	movs	r3, #0
     df6:	e7f0      	b.n	dda <extint_register_callback+0x6>
		return STATUS_OK;
     df8:	2300      	movs	r3, #0
     dfa:	e7ee      	b.n	dda <extint_register_callback+0x6>
     dfc:	20001164 	.word	0x20001164

00000e00 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     e00:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     e02:	2900      	cmp	r1, #0
     e04:	d001      	beq.n	e0a <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
     e06:	0018      	movs	r0, r3
     e08:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     e0a:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     e0c:	281f      	cmp	r0, #31
     e0e:	d800      	bhi.n	e12 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
     e10:	4a02      	ldr	r2, [pc, #8]	; (e1c <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
     e12:	2301      	movs	r3, #1
     e14:	4083      	lsls	r3, r0
     e16:	6113      	str	r3, [r2, #16]
	return STATUS_OK;
     e18:	2300      	movs	r3, #0
     e1a:	e7f4      	b.n	e06 <extint_chan_enable_callback+0x6>
     e1c:	40002400 	.word	0x40002400

00000e20 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     e20:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     e22:	2200      	movs	r2, #0
     e24:	4b10      	ldr	r3, [pc, #64]	; (e68 <EIC_Handler+0x48>)
     e26:	701a      	strb	r2, [r3, #0]
     e28:	2300      	movs	r3, #0
     e2a:	4910      	ldr	r1, [pc, #64]	; (e6c <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     e2c:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     e2e:	4e10      	ldr	r6, [pc, #64]	; (e70 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     e30:	4c0d      	ldr	r4, [pc, #52]	; (e68 <EIC_Handler+0x48>)
     e32:	e00a      	b.n	e4a <EIC_Handler+0x2a>
		return eics[eic_index];
     e34:	490d      	ldr	r1, [pc, #52]	; (e6c <EIC_Handler+0x4c>)
     e36:	e008      	b.n	e4a <EIC_Handler+0x2a>
     e38:	7823      	ldrb	r3, [r4, #0]
     e3a:	3301      	adds	r3, #1
     e3c:	b2db      	uxtb	r3, r3
     e3e:	7023      	strb	r3, [r4, #0]
     e40:	2b0f      	cmp	r3, #15
     e42:	d810      	bhi.n	e66 <EIC_Handler+0x46>
		return NULL;
     e44:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     e46:	2b1f      	cmp	r3, #31
     e48:	d9f4      	bls.n	e34 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     e4a:	0028      	movs	r0, r5
     e4c:	4018      	ands	r0, r3
     e4e:	2201      	movs	r2, #1
     e50:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     e52:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
     e54:	4210      	tst	r0, r2
     e56:	d0ef      	beq.n	e38 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     e58:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     e5a:	009b      	lsls	r3, r3, #2
     e5c:	599b      	ldr	r3, [r3, r6]
     e5e:	2b00      	cmp	r3, #0
     e60:	d0ea      	beq.n	e38 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     e62:	4798      	blx	r3
     e64:	e7e8      	b.n	e38 <EIC_Handler+0x18>
			}
		}
	}
}
     e66:	bd70      	pop	{r4, r5, r6, pc}
     e68:	20001160 	.word	0x20001160
     e6c:	40002400 	.word	0x40002400
     e70:	20001164 	.word	0x20001164

00000e74 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
     e74:	4a06      	ldr	r2, [pc, #24]	; (e90 <_extint_enable+0x1c>)
     e76:	7813      	ldrb	r3, [r2, #0]
     e78:	2102      	movs	r1, #2
     e7a:	430b      	orrs	r3, r1
     e7c:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     e7e:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     e80:	6853      	ldr	r3, [r2, #4]
     e82:	4219      	tst	r1, r3
     e84:	d1fc      	bne.n	e80 <_extint_enable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     e86:	6853      	ldr	r3, [r2, #4]
     e88:	4218      	tst	r0, r3
     e8a:	d1f9      	bne.n	e80 <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     e8c:	4770      	bx	lr
     e8e:	46c0      	nop			; (mov r8, r8)
     e90:	40002400 	.word	0x40002400

00000e94 <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
     e94:	4a06      	ldr	r2, [pc, #24]	; (eb0 <_extint_disable+0x1c>)
     e96:	7813      	ldrb	r3, [r2, #0]
     e98:	2102      	movs	r1, #2
     e9a:	438b      	bics	r3, r1
     e9c:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     e9e:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     ea0:	6853      	ldr	r3, [r2, #4]
     ea2:	4219      	tst	r1, r3
     ea4:	d1fc      	bne.n	ea0 <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     ea6:	6853      	ldr	r3, [r2, #4]
     ea8:	4218      	tst	r0, r3
     eaa:	d1f9      	bne.n	ea0 <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     eac:	4770      	bx	lr
     eae:	46c0      	nop			; (mov r8, r8)
     eb0:	40002400 	.word	0x40002400

00000eb4 <_system_extint_init>:
{
     eb4:	b510      	push	{r4, lr}
			MCLK->APBAMASK.reg |= mask;
     eb6:	4a12      	ldr	r2, [pc, #72]	; (f00 <_system_extint_init+0x4c>)
     eb8:	6951      	ldr	r1, [r2, #20]
     eba:	2380      	movs	r3, #128	; 0x80
     ebc:	009b      	lsls	r3, r3, #2
     ebe:	430b      	orrs	r3, r1
     ec0:	6153      	str	r3, [r2, #20]
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
     ec2:	4a10      	ldr	r2, [pc, #64]	; (f04 <_system_extint_init+0x50>)
     ec4:	7813      	ldrb	r3, [r2, #0]
     ec6:	2101      	movs	r1, #1
     ec8:	430b      	orrs	r3, r1
     eca:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     ecc:	3101      	adds	r1, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     ece:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     ed0:	6853      	ldr	r3, [r2, #4]
     ed2:	4219      	tst	r1, r3
     ed4:	d1fc      	bne.n	ed0 <_system_extint_init+0x1c>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     ed6:	6853      	ldr	r3, [r2, #4]
     ed8:	4218      	tst	r0, r3
     eda:	d1f9      	bne.n	ed0 <_system_extint_init+0x1c>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_ULP32K;
     edc:	4a09      	ldr	r2, [pc, #36]	; (f04 <_system_extint_init+0x50>)
     ede:	7813      	ldrb	r3, [r2, #0]
     ee0:	2110      	movs	r1, #16
     ee2:	430b      	orrs	r3, r1
     ee4:	7013      	strb	r3, [r2, #0]
     ee6:	4b08      	ldr	r3, [pc, #32]	; (f08 <_system_extint_init+0x54>)
     ee8:	0019      	movs	r1, r3
     eea:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     eec:	2200      	movs	r2, #0
     eee:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     ef0:	428b      	cmp	r3, r1
     ef2:	d1fc      	bne.n	eee <_system_extint_init+0x3a>
     ef4:	2208      	movs	r2, #8
     ef6:	4b05      	ldr	r3, [pc, #20]	; (f0c <_system_extint_init+0x58>)
     ef8:	601a      	str	r2, [r3, #0]
	_extint_enable();
     efa:	4b05      	ldr	r3, [pc, #20]	; (f10 <_system_extint_init+0x5c>)
     efc:	4798      	blx	r3
}
     efe:	bd10      	pop	{r4, pc}
     f00:	40000400 	.word	0x40000400
     f04:	40002400 	.word	0x40002400
     f08:	20001164 	.word	0x20001164
     f0c:	e000e100 	.word	0xe000e100
     f10:	00000e75 	.word	0x00000e75

00000f14 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     f14:	2300      	movs	r3, #0
     f16:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     f18:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     f1a:	2201      	movs	r2, #1
     f1c:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
     f1e:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     f20:	3201      	adds	r2, #1
     f22:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
     f24:	7243      	strb	r3, [r0, #9]
}
     f26:	4770      	bx	lr

00000f28 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     f28:	b5f0      	push	{r4, r5, r6, r7, lr}
     f2a:	b083      	sub	sp, #12
     f2c:	0005      	movs	r5, r0
     f2e:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
     f30:	4b1c      	ldr	r3, [pc, #112]	; (fa4 <extint_chan_set_config+0x7c>)
     f32:	4798      	blx	r3
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     f34:	a901      	add	r1, sp, #4
     f36:	2300      	movs	r3, #0
     f38:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     f3a:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     f3c:	7923      	ldrb	r3, [r4, #4]
     f3e:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     f40:	7a23      	ldrb	r3, [r4, #8]
     f42:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     f44:	7820      	ldrb	r0, [r4, #0]
     f46:	4b18      	ldr	r3, [pc, #96]	; (fa8 <extint_chan_set_config+0x80>)
     f48:	4798      	blx	r3
		return NULL;
     f4a:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     f4c:	2d1f      	cmp	r5, #31
     f4e:	d800      	bhi.n	f52 <extint_chan_set_config+0x2a>
		return eics[eic_index];
     f50:	4916      	ldr	r1, [pc, #88]	; (fac <extint_chan_set_config+0x84>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     f52:	2207      	movs	r2, #7
     f54:	402a      	ands	r2, r5
     f56:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     f58:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     f5a:	7aa3      	ldrb	r3, [r4, #10]
     f5c:	2b00      	cmp	r3, #0
     f5e:	d001      	beq.n	f64 <extint_chan_set_config+0x3c>
     f60:	2308      	movs	r3, #8
     f62:	431f      	orrs	r7, r3
     f64:	08eb      	lsrs	r3, r5, #3
     f66:	009b      	lsls	r3, r3, #2
     f68:	18cb      	adds	r3, r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     f6a:	69d8      	ldr	r0, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     f6c:	260f      	movs	r6, #15
     f6e:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     f70:	43b0      	bics	r0, r6
			(new_config << config_pos);
     f72:	4097      	lsls	r7, r2
     f74:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     f76:	4302      	orrs	r2, r0
		= (EIC_module->CONFIG[channel / 8].reg &
     f78:	61da      	str	r2, [r3, #28]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30) || (SAMR34) || (SAMR35)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
     f7a:	7a63      	ldrb	r3, [r4, #9]
     f7c:	2b00      	cmp	r3, #0
     f7e:	d10b      	bne.n	f98 <extint_chan_set_config+0x70>
		EIC_module->ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
     f80:	698a      	ldr	r2, [r1, #24]
     f82:	2301      	movs	r3, #1
     f84:	40ab      	lsls	r3, r5
     f86:	43db      	mvns	r3, r3
     f88:	041b      	lsls	r3, r3, #16
     f8a:	0c1b      	lsrs	r3, r3, #16
     f8c:	4013      	ands	r3, r2
     f8e:	618b      	str	r3, [r1, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
     f90:	4b07      	ldr	r3, [pc, #28]	; (fb0 <extint_chan_set_config+0x88>)
     f92:	4798      	blx	r3
}
     f94:	b003      	add	sp, #12
     f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->ASYNCH.reg |= (1UL << channel);
     f98:	698a      	ldr	r2, [r1, #24]
     f9a:	2301      	movs	r3, #1
     f9c:	40ab      	lsls	r3, r5
     f9e:	4313      	orrs	r3, r2
     fa0:	618b      	str	r3, [r1, #24]
     fa2:	e7f5      	b.n	f90 <extint_chan_set_config+0x68>
     fa4:	00000e95 	.word	0x00000e95
     fa8:	0000330d 	.word	0x0000330d
     fac:	40002400 	.word	0x40002400
     fb0:	00000e75 	.word	0x00000e75

00000fb4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     fb4:	b500      	push	{lr}
     fb6:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     fb8:	ab01      	add	r3, sp, #4
     fba:	2280      	movs	r2, #128	; 0x80
     fbc:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     fbe:	780a      	ldrb	r2, [r1, #0]
     fc0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     fc2:	784a      	ldrb	r2, [r1, #1]
     fc4:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     fc6:	788a      	ldrb	r2, [r1, #2]
     fc8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     fca:	0019      	movs	r1, r3
     fcc:	4b01      	ldr	r3, [pc, #4]	; (fd4 <port_pin_set_config+0x20>)
     fce:	4798      	blx	r3
}
     fd0:	b003      	add	sp, #12
     fd2:	bd00      	pop	{pc}
     fd4:	0000330d 	.word	0x0000330d

00000fd8 <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     fd8:	6803      	ldr	r3, [r0, #0]

	if (rtc_module->MODE0.SYNCBUSY.reg) {
     fda:	6918      	ldr	r0, [r3, #16]
     fdc:	1e43      	subs	r3, r0, #1
     fde:	4198      	sbcs	r0, r3
     fe0:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
     fe2:	4770      	bx	lr

00000fe4 <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
     fe4:	b570      	push	{r4, r5, r6, lr}
     fe6:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     fe8:	6806      	ldr	r6, [r0, #0]
     fea:	2204      	movs	r2, #4
     fec:	4b08      	ldr	r3, [pc, #32]	; (1010 <rtc_count_enable+0x2c>)
     fee:	601a      	str	r2, [r3, #0]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     ff0:	4d08      	ldr	r5, [pc, #32]	; (1014 <rtc_count_enable+0x30>)
     ff2:	0020      	movs	r0, r4
     ff4:	47a8      	blx	r5
     ff6:	2800      	cmp	r0, #0
     ff8:	d1fb      	bne.n	ff2 <rtc_count_enable+0xe>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
     ffa:	8833      	ldrh	r3, [r6, #0]
     ffc:	2202      	movs	r2, #2
     ffe:	4313      	orrs	r3, r2
    1000:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
    1002:	4d04      	ldr	r5, [pc, #16]	; (1014 <rtc_count_enable+0x30>)
    1004:	0020      	movs	r0, r4
    1006:	47a8      	blx	r5
    1008:	2800      	cmp	r0, #0
    100a:	d1fb      	bne.n	1004 <rtc_count_enable+0x20>
		/* Wait for synchronization */
	}
}
    100c:	bd70      	pop	{r4, r5, r6, pc}
    100e:	46c0      	nop			; (mov r8, r8)
    1010:	e000e100 	.word	0xe000e100
    1014:	00000fd9 	.word	0x00000fd9

00001018 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
    1018:	b570      	push	{r4, r5, r6, lr}
    101a:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    101c:	6806      	ldr	r6, [r0, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    101e:	2104      	movs	r1, #4
    1020:	2380      	movs	r3, #128	; 0x80
    1022:	4a0a      	ldr	r2, [pc, #40]	; (104c <rtc_count_disable+0x34>)
    1024:	50d1      	str	r1, [r2, r3]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
    1026:	4d0a      	ldr	r5, [pc, #40]	; (1050 <rtc_count_disable+0x38>)
    1028:	0020      	movs	r0, r4
    102a:	47a8      	blx	r5
    102c:	2800      	cmp	r0, #0
    102e:	d1fb      	bne.n	1028 <rtc_count_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
    1030:	4b08      	ldr	r3, [pc, #32]	; (1054 <rtc_count_disable+0x3c>)
    1032:	8133      	strh	r3, [r6, #8]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
    1034:	81b3      	strh	r3, [r6, #12]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    1036:	8833      	ldrh	r3, [r6, #0]
    1038:	2202      	movs	r2, #2
    103a:	4393      	bics	r3, r2
    103c:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
    103e:	4d04      	ldr	r5, [pc, #16]	; (1050 <rtc_count_disable+0x38>)
    1040:	0020      	movs	r0, r4
    1042:	47a8      	blx	r5
    1044:	2800      	cmp	r0, #0
    1046:	d1fb      	bne.n	1040 <rtc_count_disable+0x28>
		/* Wait for synchronization */
	}
}
    1048:	bd70      	pop	{r4, r5, r6, pc}
    104a:	46c0      	nop			; (mov r8, r8)
    104c:	e000e100 	.word	0xe000e100
    1050:	00000fd9 	.word	0x00000fd9
    1054:	ffff81ff 	.word	0xffff81ff

00001058 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
    1058:	b570      	push	{r4, r5, r6, lr}
    105a:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    105c:	6806      	ldr	r6, [r0, #0]

	/* Disable module before reset. */
	rtc_count_disable(module);
    105e:	4b0a      	ldr	r3, [pc, #40]	; (1088 <rtc_count_reset+0x30>)
    1060:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
    1062:	2300      	movs	r3, #0
    1064:	86a3      	strh	r3, [r4, #52]	; 0x34
	module->enabled_callback    = 0;
    1066:	86e3      	strh	r3, [r4, #54]	; 0x36
#endif

	while (rtc_count_is_syncing(module)) {
    1068:	4d08      	ldr	r5, [pc, #32]	; (108c <rtc_count_reset+0x34>)
    106a:	0020      	movs	r0, r4
    106c:	47a8      	blx	r5
    106e:	2800      	cmp	r0, #0
    1070:	d1fb      	bne.n	106a <rtc_count_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    1072:	8833      	ldrh	r3, [r6, #0]
    1074:	2201      	movs	r2, #1
    1076:	4313      	orrs	r3, r2
    1078:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
    107a:	4d04      	ldr	r5, [pc, #16]	; (108c <rtc_count_reset+0x34>)
    107c:	0020      	movs	r0, r4
    107e:	47a8      	blx	r5
    1080:	2800      	cmp	r0, #0
    1082:	d1fb      	bne.n	107c <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}
}
    1084:	bd70      	pop	{r4, r5, r6, pc}
    1086:	46c0      	nop			; (mov r8, r8)
    1088:	00001019 	.word	0x00001019
    108c:	00000fd9 	.word	0x00000fd9

00001090 <rtc_count_set_count>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were provided
 */
enum status_code rtc_count_set_count(
		struct rtc_module *const module,
		const uint32_t count_value)
{
    1090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1092:	0004      	movs	r4, r0
    1094:	000e      	movs	r6, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1096:	6807      	ldr	r7, [r0, #0]

	while (rtc_count_is_syncing(module)) {
    1098:	4d0c      	ldr	r5, [pc, #48]	; (10cc <rtc_count_set_count+0x3c>)
    109a:	0020      	movs	r0, r4
    109c:	47a8      	blx	r5
    109e:	2800      	cmp	r0, #0
    10a0:	d1fb      	bne.n	109a <rtc_count_set_count+0xa>
		/* Wait for synchronization */
	}

	/* Set count according to mode */
	switch(module->mode){
    10a2:	7923      	ldrb	r3, [r4, #4]
    10a4:	2b00      	cmp	r3, #0
    10a6:	d009      	beq.n	10bc <rtc_count_set_count+0x2c>

			break;

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    10a8:	2017      	movs	r0, #23
	switch(module->mode){
    10aa:	2b01      	cmp	r3, #1
    10ac:	d105      	bne.n	10ba <rtc_count_set_count+0x2a>
			rtc_module->MODE0.COUNT.reg = count_value;
    10ae:	61be      	str	r6, [r7, #24]
	}

	while (rtc_count_is_syncing(module)) {
    10b0:	4d06      	ldr	r5, [pc, #24]	; (10cc <rtc_count_set_count+0x3c>)
    10b2:	0020      	movs	r0, r4
    10b4:	47a8      	blx	r5
    10b6:	2800      	cmp	r0, #0
    10b8:	d1fb      	bne.n	10b2 <rtc_count_set_count+0x22>
		/* Wait for synchronization */
	}
	return STATUS_OK;
}
    10ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(count_value > 0xffff){
    10bc:	4b04      	ldr	r3, [pc, #16]	; (10d0 <rtc_count_set_count+0x40>)
				return STATUS_ERR_INVALID_ARG;
    10be:	2017      	movs	r0, #23
			if(count_value > 0xffff){
    10c0:	429e      	cmp	r6, r3
    10c2:	d8fa      	bhi.n	10ba <rtc_count_set_count+0x2a>
			rtc_module->MODE1.COUNT.reg = (uint32_t)count_value;
    10c4:	b2b6      	uxth	r6, r6
    10c6:	833e      	strh	r6, [r7, #24]
			break;
    10c8:	e7f2      	b.n	10b0 <rtc_count_set_count+0x20>
    10ca:	46c0      	nop			; (mov r8, r8)
    10cc:	00000fd9 	.word	0x00000fd9
    10d0:	0000ffff 	.word	0x0000ffff

000010d4 <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
    10d4:	b570      	push	{r4, r5, r6, lr}
    10d6:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    10d8:	6806      	ldr	r6, [r0, #0]

	/* Initialize return value. */
	uint32_t ret_val;

	while (rtc_count_is_syncing(module)) {
    10da:	4d08      	ldr	r5, [pc, #32]	; (10fc <rtc_count_get_count+0x28>)
    10dc:	0020      	movs	r0, r4
    10de:	47a8      	blx	r5
    10e0:	2800      	cmp	r0, #0
    10e2:	d1fb      	bne.n	10dc <rtc_count_get_count+0x8>
		/* Wait for synchronization */
	}

	/* Read value based on mode. */
	switch (module->mode) {
    10e4:	7923      	ldrb	r3, [r4, #4]
    10e6:	2b00      	cmp	r3, #0
    10e8:	d004      	beq.n	10f4 <rtc_count_get_count+0x20>
			break;

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
    10ea:	2000      	movs	r0, #0
	switch (module->mode) {
    10ec:	2b01      	cmp	r3, #1
    10ee:	d100      	bne.n	10f2 <rtc_count_get_count+0x1e>
			ret_val = rtc_module->MODE0.COUNT.reg;
    10f0:	69b0      	ldr	r0, [r6, #24]
			break;
	}

	return ret_val;
}
    10f2:	bd70      	pop	{r4, r5, r6, pc}
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
    10f4:	8b30      	ldrh	r0, [r6, #24]
    10f6:	b280      	uxth	r0, r0
			break;
    10f8:	e7fb      	b.n	10f2 <rtc_count_get_count+0x1e>
    10fa:	46c0      	nop			; (mov r8, r8)
    10fc:	00000fd9 	.word	0x00000fd9

00001100 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
    1100:	b5f0      	push	{r4, r5, r6, r7, lr}
    1102:	b083      	sub	sp, #12
    1104:	0004      	movs	r4, r0
    1106:	9101      	str	r1, [sp, #4]
    1108:	0015      	movs	r5, r2
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    110a:	6806      	ldr	r6, [r0, #0]

	while (rtc_count_is_syncing(module)) {
    110c:	4f13      	ldr	r7, [pc, #76]	; (115c <rtc_count_set_compare+0x5c>)
    110e:	0020      	movs	r0, r4
    1110:	47b8      	blx	r7
    1112:	2800      	cmp	r0, #0
    1114:	d1fb      	bne.n	110e <rtc_count_set_compare+0xe>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
    1116:	7923      	ldrb	r3, [r4, #4]
    1118:	2b00      	cmp	r3, #0
    111a:	d00e      	beq.n	113a <rtc_count_set_compare+0x3a>
    111c:	2b01      	cmp	r3, #1
    111e:	d119      	bne.n	1154 <rtc_count_set_compare+0x54>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
				return STATUS_ERR_INVALID_ARG;
    1120:	3017      	adds	r0, #23
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
    1122:	2d01      	cmp	r5, #1
    1124:	d817      	bhi.n	1156 <rtc_count_set_compare+0x56>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
    1126:	3508      	adds	r5, #8
    1128:	00ad      	lsls	r5, r5, #2
    112a:	9b01      	ldr	r3, [sp, #4]
    112c:	51ab      	str	r3, [r5, r6]
		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	while (rtc_count_is_syncing(module)) {
    112e:	4d0b      	ldr	r5, [pc, #44]	; (115c <rtc_count_set_compare+0x5c>)
    1130:	0020      	movs	r0, r4
    1132:	47a8      	blx	r5
    1134:	2800      	cmp	r0, #0
    1136:	d1fb      	bne.n	1130 <rtc_count_set_compare+0x30>
    1138:	e00d      	b.n	1156 <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
    113a:	2017      	movs	r0, #23
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
    113c:	2d02      	cmp	r5, #2
    113e:	d80a      	bhi.n	1156 <rtc_count_set_compare+0x56>
			if (comp_value > 0xffff) {
    1140:	4b07      	ldr	r3, [pc, #28]	; (1160 <rtc_count_set_compare+0x60>)
    1142:	9a01      	ldr	r2, [sp, #4]
    1144:	429a      	cmp	r2, r3
    1146:	d806      	bhi.n	1156 <rtc_count_set_compare+0x56>
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
    1148:	466b      	mov	r3, sp
    114a:	889b      	ldrh	r3, [r3, #4]
    114c:	3510      	adds	r5, #16
    114e:	006d      	lsls	r5, r5, #1
    1150:	53ab      	strh	r3, [r5, r6]
			break;
    1152:	e7ec      	b.n	112e <rtc_count_set_compare+0x2e>
			return STATUS_ERR_BAD_FORMAT;
    1154:	201a      	movs	r0, #26
		/* Wait for synchronization */
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
}
    1156:	b003      	add	sp, #12
    1158:	bdf0      	pop	{r4, r5, r6, r7, pc}
    115a:	46c0      	nop			; (mov r8, r8)
    115c:	00000fd9 	.word	0x00000fd9
    1160:	0000ffff 	.word	0x0000ffff

00001164 <rtc_count_init>:
{
    1164:	b570      	push	{r4, r5, r6, lr}
    1166:	0004      	movs	r4, r0
    1168:	0015      	movs	r5, r2
	module->hw = hw;
    116a:	6001      	str	r1, [r0, #0]
    116c:	4a1f      	ldr	r2, [pc, #124]	; (11ec <rtc_count_init+0x88>)
    116e:	6951      	ldr	r1, [r2, #20]
    1170:	2380      	movs	r3, #128	; 0x80
    1172:	005b      	lsls	r3, r3, #1
    1174:	430b      	orrs	r3, r1
    1176:	6153      	str	r3, [r2, #20]
	OSC32KCTRL->RTCCTRL.reg = RTC_CLOCK_SOURCE;
    1178:	2205      	movs	r2, #5
    117a:	4b1d      	ldr	r3, [pc, #116]	; (11f0 <rtc_count_init+0x8c>)
    117c:	611a      	str	r2, [r3, #16]
	rtc_count_reset(module);
    117e:	4b1d      	ldr	r3, [pc, #116]	; (11f4 <rtc_count_init+0x90>)
    1180:	4798      	blx	r3
	module->mode                = config->mode;
    1182:	78ab      	ldrb	r3, [r5, #2]
    1184:	7123      	strb	r3, [r4, #4]
	_rtc_instance[0] = module;
    1186:	4b1c      	ldr	r3, [pc, #112]	; (11f8 <rtc_count_init+0x94>)
    1188:	601c      	str	r4, [r3, #0]
	Rtc *const rtc_module = module->hw;
    118a:	6822      	ldr	r2, [r4, #0]
				    | (config->enable_read_sync << RTC_MODE0_CTRLA_COUNTSYNC_Pos)
    118c:	792b      	ldrb	r3, [r5, #4]
    118e:	03db      	lsls	r3, r3, #15
				    | config->prescaler;
    1190:	8829      	ldrh	r1, [r5, #0]
    1192:	430b      	orrs	r3, r1
    1194:	b29b      	uxth	r3, r3
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0)
    1196:	8013      	strh	r3, [r2, #0]
	switch (config->mode) {
    1198:	78ab      	ldrb	r3, [r5, #2]
    119a:	2b00      	cmp	r3, #0
    119c:	d013      	beq.n	11c6 <rtc_count_init+0x62>
			return STATUS_ERR_INVALID_ARG;
    119e:	2017      	movs	r0, #23
	switch (config->mode) {
    11a0:	2b01      	cmp	r3, #1
    11a2:	d10f      	bne.n	11c4 <rtc_count_init+0x60>
			rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MODE(0);
    11a4:	8813      	ldrh	r3, [r2, #0]
    11a6:	b29b      	uxth	r3, r3
    11a8:	8013      	strh	r3, [r2, #0]
			if (config->clear_on_match) {
    11aa:	78eb      	ldrb	r3, [r5, #3]
    11ac:	2b00      	cmp	r3, #0
    11ae:	d003      	beq.n	11b8 <rtc_count_init+0x54>
				rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MATCHCLR;
    11b0:	8813      	ldrh	r3, [r2, #0]
    11b2:	2180      	movs	r1, #128	; 0x80
    11b4:	430b      	orrs	r3, r1
    11b6:	8013      	strh	r3, [r2, #0]
				rtc_count_set_compare(module, config->compare_values[i],
    11b8:	68a9      	ldr	r1, [r5, #8]
    11ba:	2200      	movs	r2, #0
    11bc:	0020      	movs	r0, r4
    11be:	4b0f      	ldr	r3, [pc, #60]	; (11fc <rtc_count_init+0x98>)
    11c0:	4798      	blx	r3
	return STATUS_OK;
    11c2:	2000      	movs	r0, #0
}
    11c4:	bd70      	pop	{r4, r5, r6, pc}
			rtc_module->MODE1.CTRLA.reg |= RTC_MODE1_CTRLA_MODE(1);
    11c6:	8813      	ldrh	r3, [r2, #0]
    11c8:	2104      	movs	r1, #4
    11ca:	430b      	orrs	r3, r1
    11cc:	8013      	strh	r3, [r2, #0]
			if (config->clear_on_match) {
    11ce:	78eb      	ldrb	r3, [r5, #3]
				return STATUS_ERR_INVALID_ARG;
    11d0:	2017      	movs	r0, #23
			if (config->clear_on_match) {
    11d2:	2b00      	cmp	r3, #0
    11d4:	d1f6      	bne.n	11c4 <rtc_count_init+0x60>
				rtc_count_set_compare(module, config->compare_values[i],
    11d6:	2200      	movs	r2, #0
    11d8:	68a9      	ldr	r1, [r5, #8]
    11da:	0020      	movs	r0, r4
    11dc:	4e07      	ldr	r6, [pc, #28]	; (11fc <rtc_count_init+0x98>)
    11de:	47b0      	blx	r6
    11e0:	68e9      	ldr	r1, [r5, #12]
    11e2:	2201      	movs	r2, #1
    11e4:	0020      	movs	r0, r4
    11e6:	47b0      	blx	r6
	return STATUS_OK;
    11e8:	2000      	movs	r0, #0
    11ea:	e7eb      	b.n	11c4 <rtc_count_init+0x60>
    11ec:	40000400 	.word	0x40000400
    11f0:	40001000 	.word	0x40001000
    11f4:	00001059 	.word	0x00001059
    11f8:	200011a4 	.word	0x200011a4
    11fc:	00001101 	.word	0x00001101

00001200 <rtc_count_register_callback>:
{

	enum status_code status = STATUS_OK;

	/* Overflow callback */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW
    1200:	2a0a      	cmp	r2, #10
    1202:	d009      	beq.n	1218 <rtc_count_register_callback+0x18>
#ifdef FEATURE_RTC_TAMPER_DETECTION
		|| callback_type == RTC_COUNT_CALLBACK_TAMPER
#endif
		|| (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    1204:	2a07      	cmp	r2, #7
    1206:	d907      	bls.n	1218 <rtc_count_register_callback+0x18>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7)) {
		status = STATUS_OK;
	} else {
		/* Make sure callback type can be registered */
		switch (module->mode) {
    1208:	7903      	ldrb	r3, [r0, #4]
    120a:	2b00      	cmp	r3, #0
    120c:	d010      	beq.n	1230 <rtc_count_register_callback+0x30>
    120e:	2b01      	cmp	r3, #1
    1210:	d112      	bne.n	1238 <rtc_count_register_callback+0x38>
    1212:	3316      	adds	r3, #22
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (callback_type > (RTC_COMP32_NUM + RTC_PER_NUM)) {
    1214:	2a09      	cmp	r2, #9
    1216:	d809      	bhi.n	122c <rtc_count_register_callback+0x2c>
		}
	}

	if (status == STATUS_OK) {
		/* Register callback */
		module->callbacks[callback_type] = callback;
    1218:	1c93      	adds	r3, r2, #2
    121a:	009b      	lsls	r3, r3, #2
    121c:	5019      	str	r1, [r3, r0]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
    121e:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    1220:	2101      	movs	r1, #1
    1222:	4091      	lsls	r1, r2
    1224:	430b      	orrs	r3, r1
    1226:	b29b      	uxth	r3, r3
    1228:	8683      	strh	r3, [r0, #52]	; 0x34
    122a:	2300      	movs	r3, #0
	}

	return status;
}
    122c:	0018      	movs	r0, r3
    122e:	4770      	bx	lr
    1230:	2317      	movs	r3, #23
			if (callback_type > (RTC_NUM_OF_COMP16 + RTC_PER_NUM)) {
    1232:	2a0a      	cmp	r2, #10
    1234:	d8fa      	bhi.n	122c <rtc_count_register_callback+0x2c>
    1236:	e7ef      	b.n	1218 <rtc_count_register_callback+0x18>
			status = STATUS_ERR_INVALID_ARG;
    1238:	2317      	movs	r3, #23
    123a:	e7f7      	b.n	122c <rtc_count_register_callback+0x2c>

0000123c <rtc_count_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_count_enable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    123c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    123e:	6802      	ldr	r2, [r0, #0]

	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    1240:	290a      	cmp	r1, #10
    1242:	d011      	beq.n	1268 <rtc_count_enable_callback+0x2c>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    1244:	2907      	cmp	r1, #7
    1246:	d912      	bls.n	126e <rtc_count_enable_callback+0x32>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);
	}else {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    1248:	2380      	movs	r3, #128	; 0x80
    124a:	005b      	lsls	r3, r3, #1
    124c:	000c      	movs	r4, r1
    124e:	3c08      	subs	r4, #8
    1250:	40a3      	lsls	r3, r4
    1252:	24c0      	movs	r4, #192	; 0xc0
    1254:	00a4      	lsls	r4, r4, #2
    1256:	4023      	ands	r3, r4
    1258:	8153      	strh	r3, [r2, #10]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
    125a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    125c:	2201      	movs	r2, #1
    125e:	408a      	lsls	r2, r1
    1260:	4313      	orrs	r3, r2
    1262:	b29b      	uxth	r3, r3
    1264:	86c3      	strh	r3, [r0, #54]	; 0x36
}
    1266:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
    1268:	4b04      	ldr	r3, [pc, #16]	; (127c <rtc_count_enable_callback+0x40>)
    126a:	8153      	strh	r3, [r2, #10]
    126c:	e7f5      	b.n	125a <rtc_count_enable_callback+0x1e>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);
    126e:	2401      	movs	r4, #1
    1270:	408c      	lsls	r4, r1
    1272:	23ff      	movs	r3, #255	; 0xff
    1274:	4023      	ands	r3, r4
    1276:	8153      	strh	r3, [r2, #10]
    1278:	e7ef      	b.n	125a <rtc_count_enable_callback+0x1e>
    127a:	46c0      	nop			; (mov r8, r8)
    127c:	ffff8000 	.word	0xffff8000

00001280 <rtc_count_disable_callback>:
 * \param[in]     callback_type Callback type to disable
 */
void rtc_count_disable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    1280:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1282:	6802      	ldr	r2, [r0, #0]

	/* Disable interrupt */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    1284:	290a      	cmp	r1, #10
    1286:	d010      	beq.n	12aa <rtc_count_disable_callback+0x2a>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if(callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    1288:	2907      	cmp	r1, #7
    128a:	d911      	bls.n	12b0 <rtc_count_disable_callback+0x30>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7){
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
	}else {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    128c:	2380      	movs	r3, #128	; 0x80
    128e:	005b      	lsls	r3, r3, #1
    1290:	000c      	movs	r4, r1
    1292:	3c08      	subs	r4, #8
    1294:	40a3      	lsls	r3, r4
    1296:	24c0      	movs	r4, #192	; 0xc0
    1298:	00a4      	lsls	r4, r4, #2
    129a:	4023      	ands	r3, r4
    129c:	8113      	strh	r3, [r2, #8]
	}

	/* Mark callback as disabled. */
	module->enabled_callback &= ~(1 << callback_type);
    129e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    12a0:	2201      	movs	r2, #1
    12a2:	408a      	lsls	r2, r1
    12a4:	4393      	bics	r3, r2
    12a6:	86c3      	strh	r3, [r0, #54]	; 0x36
}
    12a8:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
    12aa:	4b04      	ldr	r3, [pc, #16]	; (12bc <rtc_count_disable_callback+0x3c>)
    12ac:	8113      	strh	r3, [r2, #8]
    12ae:	e7f6      	b.n	129e <rtc_count_disable_callback+0x1e>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
    12b0:	2401      	movs	r4, #1
    12b2:	408c      	lsls	r4, r1
    12b4:	23ff      	movs	r3, #255	; 0xff
    12b6:	4023      	ands	r3, r4
    12b8:	8113      	strh	r3, [r2, #8]
    12ba:	e7f0      	b.n	129e <rtc_count_disable_callback+0x1e>
    12bc:	ffff8000 	.word	0xffff8000

000012c0 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    12c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    12c2:	46de      	mov	lr, fp
    12c4:	4657      	mov	r7, sl
    12c6:	464e      	mov	r6, r9
    12c8:	4645      	mov	r5, r8
    12ca:	b5e0      	push	{r5, r6, r7, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    12cc:	4b2b      	ldr	r3, [pc, #172]	; (137c <RTC_Handler+0xbc>)
    12ce:	681b      	ldr	r3, [r3, #0]
    12d0:	469a      	mov	sl, r3
	Rtc *const rtc_module = module->hw;
    12d2:	681e      	ldr	r6, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
    12d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
	callback_mask &= module->registered_callback;
    12d6:	4652      	mov	r2, sl
    12d8:	8e92      	ldrh	r2, [r2, #52]	; 0x34
    12da:	401a      	ands	r2, r3
    12dc:	4690      	mov	r8, r2
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    12de:	89b2      	ldrh	r2, [r6, #12]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    12e0:	8973      	ldrh	r3, [r6, #10]
    12e2:	4013      	ands	r3, r2
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    12e4:	b21a      	sxth	r2, r3
    12e6:	2a00      	cmp	r2, #0
    12e8:	db08      	blt.n	12fc <RTC_Handler+0x3c>
    12ea:	27ff      	movs	r7, #255	; 0xff
    12ec:	401f      	ands	r7, r3
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
    12ee:	d02a      	beq.n	1346 <RTC_Handler+0x86>
    12f0:	2400      	movs	r4, #0
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    12f2:	2301      	movs	r3, #1
    12f4:	4699      	mov	r9, r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    12f6:	33fe      	adds	r3, #254	; 0xfe
    12f8:	469b      	mov	fp, r3
    12fa:	e014      	b.n	1326 <RTC_Handler+0x66>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    12fc:	4643      	mov	r3, r8
    12fe:	055b      	lsls	r3, r3, #21
    1300:	d407      	bmi.n	1312 <RTC_Handler+0x52>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    1302:	4b1f      	ldr	r3, [pc, #124]	; (1380 <RTC_Handler+0xc0>)
    1304:	81b3      	strh	r3, [r6, #12]
	_rtc_interrupt_handler(0);
}
    1306:	bc3c      	pop	{r2, r3, r4, r5}
    1308:	4690      	mov	r8, r2
    130a:	4699      	mov	r9, r3
    130c:	46a2      	mov	sl, r4
    130e:	46ab      	mov	fp, r5
    1310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    1312:	4653      	mov	r3, sl
    1314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1316:	4798      	blx	r3
    1318:	e7f3      	b.n	1302 <RTC_Handler+0x42>
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    131a:	465b      	mov	r3, fp
    131c:	401d      	ands	r5, r3
    131e:	81b5      	strh	r5, [r6, #12]
    1320:	3401      	adds	r4, #1
		for ( i = 0;i < RTC_PER_NUM;i++) {
    1322:	2c08      	cmp	r4, #8
    1324:	d0ef      	beq.n	1306 <RTC_Handler+0x46>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    1326:	0023      	movs	r3, r4
    1328:	464d      	mov	r5, r9
    132a:	40a5      	lsls	r5, r4
    132c:	422f      	tst	r7, r5
    132e:	d0f4      	beq.n	131a <RTC_Handler+0x5a>
			  && (callback_mask & (1 << i))) {
    1330:	4642      	mov	r2, r8
    1332:	4122      	asrs	r2, r4
    1334:	4649      	mov	r1, r9
    1336:	4211      	tst	r1, r2
    1338:	d0ef      	beq.n	131a <RTC_Handler+0x5a>
				module->callbacks[i]();
    133a:	3302      	adds	r3, #2
    133c:	009b      	lsls	r3, r3, #2
    133e:	4652      	mov	r2, sl
    1340:	589b      	ldr	r3, [r3, r2]
    1342:	4798      	blx	r3
    1344:	e7e9      	b.n	131a <RTC_Handler+0x5a>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    1346:	05da      	lsls	r2, r3, #23
    1348:	d50a      	bpl.n	1360 <RTC_Handler+0xa0>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    134a:	4643      	mov	r3, r8
    134c:	05db      	lsls	r3, r3, #23
    134e:	d403      	bmi.n	1358 <RTC_Handler+0x98>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    1350:	2380      	movs	r3, #128	; 0x80
    1352:	005b      	lsls	r3, r3, #1
    1354:	81b3      	strh	r3, [r6, #12]
    1356:	e7d6      	b.n	1306 <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    1358:	4653      	mov	r3, sl
    135a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    135c:	4798      	blx	r3
    135e:	e7f7      	b.n	1350 <RTC_Handler+0x90>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    1360:	059b      	lsls	r3, r3, #22
    1362:	d5d0      	bpl.n	1306 <RTC_Handler+0x46>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    1364:	4643      	mov	r3, r8
    1366:	059b      	lsls	r3, r3, #22
    1368:	d403      	bmi.n	1372 <RTC_Handler+0xb2>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    136a:	2380      	movs	r3, #128	; 0x80
    136c:	009b      	lsls	r3, r3, #2
    136e:	81b3      	strh	r3, [r6, #12]
}
    1370:	e7c9      	b.n	1306 <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    1372:	4653      	mov	r3, sl
    1374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1376:	4798      	blx	r3
    1378:	e7f7      	b.n	136a <RTC_Handler+0xaa>
    137a:	46c0      	nop			; (mov r8, r8)
    137c:	200011a4 	.word	0x200011a4
    1380:	ffff8000 	.word	0xffff8000

00001384 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    1384:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1386:	2207      	movs	r2, #7
    1388:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    138a:	421a      	tst	r2, r3
    138c:	d1fc      	bne.n	1388 <_i2c_master_wait_for_sync+0x4>
}
    138e:	4770      	bx	lr

00001390 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    1390:	b5f0      	push	{r4, r5, r6, r7, lr}
    1392:	46d6      	mov	lr, sl
    1394:	464f      	mov	r7, r9
    1396:	4646      	mov	r6, r8
    1398:	b5c0      	push	{r6, r7, lr}
    139a:	b08a      	sub	sp, #40	; 0x28
    139c:	0007      	movs	r7, r0
    139e:	000e      	movs	r6, r1
    13a0:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    13a2:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    13a4:	0008      	movs	r0, r1
    13a6:	4ba5      	ldr	r3, [pc, #660]	; (163c <i2c_master_init+0x2ac>)
    13a8:	4798      	blx	r3

#if (SAML22) || (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	if (sercom_index == 5) {
    13aa:	2805      	cmp	r0, #5
    13ac:	d100      	bne.n	13b0 <i2c_master_init+0x20>
    13ae:	e13d      	b.n	162c <i2c_master_init+0x29c>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    13b0:	0005      	movs	r5, r0
    13b2:	3512      	adds	r5, #18
			MCLK->APBCMASK.reg |= mask;
    13b4:	4aa2      	ldr	r2, [pc, #648]	; (1640 <i2c_master_init+0x2b0>)
    13b6:	69d1      	ldr	r1, [r2, #28]
	/* Turn on module in PM */
#if (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	if (sercom_index == 5) {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    13b8:	2301      	movs	r3, #1
    13ba:	4083      	lsls	r3, r0
    13bc:	430b      	orrs	r3, r1
    13be:	61d3      	str	r3, [r2, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    13c0:	a909      	add	r1, sp, #36	; 0x24
    13c2:	7b23      	ldrb	r3, [r4, #12]
    13c4:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    13c6:	b2ed      	uxtb	r5, r5
    13c8:	0028      	movs	r0, r5
    13ca:	4b9e      	ldr	r3, [pc, #632]	; (1644 <i2c_master_init+0x2b4>)
    13cc:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    13ce:	0028      	movs	r0, r5
    13d0:	4b9d      	ldr	r3, [pc, #628]	; (1648 <i2c_master_init+0x2b8>)
    13d2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    13d4:	7b20      	ldrb	r0, [r4, #12]
    13d6:	2100      	movs	r1, #0
    13d8:	4b9c      	ldr	r3, [pc, #624]	; (164c <i2c_master_init+0x2bc>)
    13da:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    13dc:	6833      	ldr	r3, [r6, #0]
		return STATUS_ERR_DENIED;
    13de:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    13e0:	079b      	lsls	r3, r3, #30
    13e2:	d505      	bpl.n	13f0 <i2c_master_init+0x60>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    13e4:	b00a      	add	sp, #40	; 0x28
    13e6:	bc1c      	pop	{r2, r3, r4}
    13e8:	4690      	mov	r8, r2
    13ea:	4699      	mov	r9, r3
    13ec:	46a2      	mov	sl, r4
    13ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    13f0:	6833      	ldr	r3, [r6, #0]
		return STATUS_BUSY;
    13f2:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    13f4:	07db      	lsls	r3, r3, #31
    13f6:	d4f5      	bmi.n	13e4 <i2c_master_init+0x54>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    13f8:	6838      	ldr	r0, [r7, #0]
    13fa:	4b90      	ldr	r3, [pc, #576]	; (163c <i2c_master_init+0x2ac>)
    13fc:	4699      	mov	r9, r3
    13fe:	4798      	blx	r3
    1400:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    1402:	4993      	ldr	r1, [pc, #588]	; (1650 <i2c_master_init+0x2c0>)
    1404:	4b93      	ldr	r3, [pc, #588]	; (1654 <i2c_master_init+0x2c4>)
    1406:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1408:	00ad      	lsls	r5, r5, #2
    140a:	4b93      	ldr	r3, [pc, #588]	; (1658 <i2c_master_init+0x2c8>)
    140c:	50ef      	str	r7, [r5, r3]
	module->registered_callback = 0;
    140e:	2300      	movs	r3, #0
    1410:	763b      	strb	r3, [r7, #24]
	module->enabled_callback = 0;
    1412:	767b      	strb	r3, [r7, #25]
	module->buffer_length = 0;
    1414:	2500      	movs	r5, #0
    1416:	837b      	strh	r3, [r7, #26]
	module->buffer_remaining = 0;
    1418:	83bb      	strh	r3, [r7, #28]
	module->status = STATUS_OK;
    141a:	2225      	movs	r2, #37	; 0x25
    141c:	54bd      	strb	r5, [r7, r2]
	module->buffer = NULL;
    141e:	623b      	str	r3, [r7, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    1420:	3314      	adds	r3, #20
    1422:	6033      	str	r3, [r6, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1424:	683b      	ldr	r3, [r7, #0]
    1426:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    1428:	0018      	movs	r0, r3
    142a:	47c8      	blx	r9
    142c:	4681      	mov	r9, r0
    142e:	2380      	movs	r3, #128	; 0x80
    1430:	aa08      	add	r2, sp, #32
    1432:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1434:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1436:	2301      	movs	r3, #1
    1438:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
    143a:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
    143c:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    143e:	6a26      	ldr	r6, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    1440:	2800      	cmp	r0, #0
    1442:	d100      	bne.n	1446 <i2c_master_init+0xb6>
    1444:	e0af      	b.n	15a6 <i2c_master_init+0x216>
	pin_conf.mux_position = pad0 & 0xFFFF;
    1446:	ab08      	add	r3, sp, #32
    1448:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    144a:	2302      	movs	r3, #2
    144c:	aa08      	add	r2, sp, #32
    144e:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    1450:	0c00      	lsrs	r0, r0, #16
    1452:	b2c0      	uxtb	r0, r0
    1454:	0011      	movs	r1, r2
    1456:	4b81      	ldr	r3, [pc, #516]	; (165c <i2c_master_init+0x2cc>)
    1458:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    145a:	2e00      	cmp	r6, #0
    145c:	d100      	bne.n	1460 <i2c_master_init+0xd0>
    145e:	e0a7      	b.n	15b0 <i2c_master_init+0x220>
	pin_conf.mux_position = pad1 & 0xFFFF;
    1460:	ab08      	add	r3, sp, #32
    1462:	701e      	strb	r6, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    1464:	2302      	movs	r3, #2
    1466:	aa08      	add	r2, sp, #32
    1468:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    146a:	0c36      	lsrs	r6, r6, #16
    146c:	b2f0      	uxtb	r0, r6
    146e:	0011      	movs	r1, r2
    1470:	4b7a      	ldr	r3, [pc, #488]	; (165c <i2c_master_init+0x2cc>)
    1472:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    1474:	8aa3      	ldrh	r3, [r4, #20]
    1476:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
    1478:	8ae3      	ldrh	r3, [r4, #22]
    147a:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    147c:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    147e:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    1480:	2b00      	cmp	r3, #0
    1482:	d104      	bne.n	148e <i2c_master_init+0xfe>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1484:	4b76      	ldr	r3, [pc, #472]	; (1660 <i2c_master_init+0x2d0>)
    1486:	789b      	ldrb	r3, [r3, #2]
    1488:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    148a:	0fdb      	lsrs	r3, r3, #31
    148c:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    148e:	68a1      	ldr	r1, [r4, #8]
    1490:	6923      	ldr	r3, [r4, #16]
    1492:	430b      	orrs	r3, r1
    1494:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    1496:	2224      	movs	r2, #36	; 0x24
    1498:	5ca2      	ldrb	r2, [r4, r2]
    149a:	2a00      	cmp	r2, #0
    149c:	d002      	beq.n	14a4 <i2c_master_init+0x114>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    149e:	2280      	movs	r2, #128	; 0x80
    14a0:	05d2      	lsls	r2, r2, #23
    14a2:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    14a4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    14a6:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    14a8:	222c      	movs	r2, #44	; 0x2c
    14aa:	5ca2      	ldrb	r2, [r4, r2]
    14ac:	2a00      	cmp	r2, #0
    14ae:	d103      	bne.n	14b8 <i2c_master_init+0x128>
    14b0:	2280      	movs	r2, #128	; 0x80
    14b2:	0492      	lsls	r2, r2, #18
    14b4:	4291      	cmp	r1, r2
    14b6:	d102      	bne.n	14be <i2c_master_init+0x12e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    14b8:	2280      	movs	r2, #128	; 0x80
    14ba:	0512      	lsls	r2, r2, #20
    14bc:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    14be:	222d      	movs	r2, #45	; 0x2d
    14c0:	5ca2      	ldrb	r2, [r4, r2]
    14c2:	2a00      	cmp	r2, #0
    14c4:	d002      	beq.n	14cc <i2c_master_init+0x13c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    14c6:	2280      	movs	r2, #128	; 0x80
    14c8:	0412      	lsls	r2, r2, #16
    14ca:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    14cc:	222e      	movs	r2, #46	; 0x2e
    14ce:	5ca2      	ldrb	r2, [r4, r2]
    14d0:	2a00      	cmp	r2, #0
    14d2:	d002      	beq.n	14da <i2c_master_init+0x14a>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    14d4:	2280      	movs	r2, #128	; 0x80
    14d6:	03d2      	lsls	r2, r2, #15
    14d8:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    14da:	4642      	mov	r2, r8
    14dc:	6812      	ldr	r2, [r2, #0]
    14de:	4313      	orrs	r3, r2
    14e0:	4642      	mov	r2, r8
    14e2:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    14e4:	2380      	movs	r3, #128	; 0x80
    14e6:	005b      	lsls	r3, r3, #1
    14e8:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    14ea:	464d      	mov	r5, r9
    14ec:	3512      	adds	r5, #18
    14ee:	b2e8      	uxtb	r0, r5
    14f0:	4b5c      	ldr	r3, [pc, #368]	; (1664 <i2c_master_init+0x2d4>)
    14f2:	4798      	blx	r3
    14f4:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    14f6:	23fa      	movs	r3, #250	; 0xfa
    14f8:	009b      	lsls	r3, r3, #2
    14fa:	6822      	ldr	r2, [r4, #0]
    14fc:	435a      	muls	r2, r3
    14fe:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    1500:	6863      	ldr	r3, [r4, #4]
    1502:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    1504:	4d58      	ldr	r5, [pc, #352]	; (1668 <i2c_master_init+0x2d8>)
    1506:	47a8      	blx	r5
    1508:	9000      	str	r0, [sp, #0]
    150a:	9101      	str	r1, [sp, #4]
    150c:	464b      	mov	r3, r9
    150e:	0058      	lsls	r0, r3, #1
    1510:	47a8      	blx	r5
    1512:	9002      	str	r0, [sp, #8]
    1514:	9103      	str	r1, [sp, #12]
    1516:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    1518:	47a8      	blx	r5
    151a:	9004      	str	r0, [sp, #16]
    151c:	9105      	str	r1, [sp, #20]
    151e:	4f53      	ldr	r7, [pc, #332]	; (166c <i2c_master_init+0x2dc>)
    1520:	4a53      	ldr	r2, [pc, #332]	; (1670 <i2c_master_init+0x2e0>)
    1522:	4b54      	ldr	r3, [pc, #336]	; (1674 <i2c_master_init+0x2e4>)
    1524:	9800      	ldr	r0, [sp, #0]
    1526:	9901      	ldr	r1, [sp, #4]
    1528:	47b8      	blx	r7
    152a:	0002      	movs	r2, r0
    152c:	000b      	movs	r3, r1
    152e:	9804      	ldr	r0, [sp, #16]
    1530:	9905      	ldr	r1, [sp, #20]
    1532:	47b8      	blx	r7
    1534:	4e50      	ldr	r6, [pc, #320]	; (1678 <i2c_master_init+0x2e8>)
    1536:	2200      	movs	r2, #0
    1538:	4b50      	ldr	r3, [pc, #320]	; (167c <i2c_master_init+0x2ec>)
    153a:	47b0      	blx	r6
    153c:	9004      	str	r0, [sp, #16]
    153e:	9105      	str	r1, [sp, #20]
    1540:	4648      	mov	r0, r9
    1542:	47a8      	blx	r5
    1544:	0002      	movs	r2, r0
    1546:	000b      	movs	r3, r1
    1548:	9804      	ldr	r0, [sp, #16]
    154a:	9905      	ldr	r1, [sp, #20]
    154c:	47b8      	blx	r7
    154e:	0002      	movs	r2, r0
    1550:	000b      	movs	r3, r1
    1552:	4d4b      	ldr	r5, [pc, #300]	; (1680 <i2c_master_init+0x2f0>)
    1554:	9800      	ldr	r0, [sp, #0]
    1556:	9901      	ldr	r1, [sp, #4]
    1558:	47a8      	blx	r5
    155a:	9a02      	ldr	r2, [sp, #8]
    155c:	9b03      	ldr	r3, [sp, #12]
    155e:	47b0      	blx	r6
    1560:	2200      	movs	r2, #0
    1562:	4b48      	ldr	r3, [pc, #288]	; (1684 <i2c_master_init+0x2f4>)
    1564:	47a8      	blx	r5
    1566:	9a02      	ldr	r2, [sp, #8]
    1568:	9b03      	ldr	r3, [sp, #12]
    156a:	4d47      	ldr	r5, [pc, #284]	; (1688 <i2c_master_init+0x2f8>)
    156c:	47a8      	blx	r5
    156e:	4b47      	ldr	r3, [pc, #284]	; (168c <i2c_master_init+0x2fc>)
    1570:	4798      	blx	r3
    1572:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    1574:	2380      	movs	r3, #128	; 0x80
    1576:	049b      	lsls	r3, r3, #18
    1578:	68a2      	ldr	r2, [r4, #8]
    157a:	429a      	cmp	r2, r3
    157c:	d01e      	beq.n	15bc <i2c_master_init+0x22c>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    157e:	0003      	movs	r3, r0
    1580:	2040      	movs	r0, #64	; 0x40
    1582:	2dff      	cmp	r5, #255	; 0xff
    1584:	d900      	bls.n	1588 <i2c_master_init+0x1f8>
    1586:	e72d      	b.n	13e4 <i2c_master_init+0x54>
	int32_t tmp_baudlow_hs = 0;
    1588:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    158a:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    158c:	25ff      	movs	r5, #255	; 0xff
    158e:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    1590:	0624      	lsls	r4, r4, #24
    1592:	4325      	orrs	r5, r4
    1594:	0400      	lsls	r0, r0, #16
    1596:	23ff      	movs	r3, #255	; 0xff
    1598:	041b      	lsls	r3, r3, #16
    159a:	4018      	ands	r0, r3
    159c:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    159e:	4643      	mov	r3, r8
    15a0:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    15a2:	2000      	movs	r0, #0
    15a4:	e71e      	b.n	13e4 <i2c_master_init+0x54>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    15a6:	2100      	movs	r1, #0
    15a8:	4640      	mov	r0, r8
    15aa:	4b39      	ldr	r3, [pc, #228]	; (1690 <i2c_master_init+0x300>)
    15ac:	4798      	blx	r3
    15ae:	e74a      	b.n	1446 <i2c_master_init+0xb6>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    15b0:	2101      	movs	r1, #1
    15b2:	4640      	mov	r0, r8
    15b4:	4b36      	ldr	r3, [pc, #216]	; (1690 <i2c_master_init+0x300>)
    15b6:	4798      	blx	r3
    15b8:	0006      	movs	r6, r0
    15ba:	e751      	b.n	1460 <i2c_master_init+0xd0>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    15bc:	26fa      	movs	r6, #250	; 0xfa
    15be:	00b6      	lsls	r6, r6, #2
    15c0:	4653      	mov	r3, sl
    15c2:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    15c4:	9800      	ldr	r0, [sp, #0]
    15c6:	9901      	ldr	r1, [sp, #4]
    15c8:	0002      	movs	r2, r0
    15ca:	000b      	movs	r3, r1
    15cc:	4c2a      	ldr	r4, [pc, #168]	; (1678 <i2c_master_init+0x2e8>)
    15ce:	47a0      	blx	r4
    15d0:	9000      	str	r0, [sp, #0]
    15d2:	9101      	str	r1, [sp, #4]
    15d4:	0030      	movs	r0, r6
    15d6:	4b24      	ldr	r3, [pc, #144]	; (1668 <i2c_master_init+0x2d8>)
    15d8:	4798      	blx	r3
    15da:	2200      	movs	r2, #0
    15dc:	4b2d      	ldr	r3, [pc, #180]	; (1694 <i2c_master_init+0x304>)
    15de:	47b8      	blx	r7
    15e0:	0002      	movs	r2, r0
    15e2:	000b      	movs	r3, r1
    15e4:	9800      	ldr	r0, [sp, #0]
    15e6:	9901      	ldr	r1, [sp, #4]
    15e8:	4c27      	ldr	r4, [pc, #156]	; (1688 <i2c_master_init+0x2f8>)
    15ea:	47a0      	blx	r4
    15ec:	2200      	movs	r2, #0
    15ee:	4b25      	ldr	r3, [pc, #148]	; (1684 <i2c_master_init+0x2f4>)
    15f0:	4c23      	ldr	r4, [pc, #140]	; (1680 <i2c_master_init+0x2f0>)
    15f2:	47a0      	blx	r4
    15f4:	4b25      	ldr	r3, [pc, #148]	; (168c <i2c_master_init+0x2fc>)
    15f6:	4798      	blx	r3
    15f8:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    15fa:	d00c      	beq.n	1616 <i2c_master_init+0x286>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    15fc:	0031      	movs	r1, r6
    15fe:	9807      	ldr	r0, [sp, #28]
    1600:	4b25      	ldr	r3, [pc, #148]	; (1698 <i2c_master_init+0x308>)
    1602:	4798      	blx	r3
    1604:	3802      	subs	r0, #2
    1606:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    1608:	002b      	movs	r3, r5
    160a:	2dff      	cmp	r5, #255	; 0xff
    160c:	d80c      	bhi.n	1628 <i2c_master_init+0x298>
    160e:	28ff      	cmp	r0, #255	; 0xff
    1610:	d9bc      	bls.n	158c <i2c_master_init+0x1fc>
    1612:	2040      	movs	r0, #64	; 0x40
    1614:	e6e6      	b.n	13e4 <i2c_master_init+0x54>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    1616:	0071      	lsls	r1, r6, #1
    1618:	1e48      	subs	r0, r1, #1
    161a:	9b07      	ldr	r3, [sp, #28]
    161c:	469c      	mov	ip, r3
    161e:	4460      	add	r0, ip
    1620:	4b1d      	ldr	r3, [pc, #116]	; (1698 <i2c_master_init+0x308>)
    1622:	4798      	blx	r3
    1624:	3801      	subs	r0, #1
    1626:	e7ef      	b.n	1608 <i2c_master_init+0x278>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    1628:	2040      	movs	r0, #64	; 0x40
    162a:	e6db      	b.n	13e4 <i2c_master_init+0x54>
			MCLK->APBDMASK.reg |= mask;
    162c:	4a04      	ldr	r2, [pc, #16]	; (1640 <i2c_master_init+0x2b0>)
    162e:	6a13      	ldr	r3, [r2, #32]
    1630:	2102      	movs	r1, #2
    1632:	430b      	orrs	r3, r1
    1634:	6213      	str	r3, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    1636:	2518      	movs	r5, #24
    1638:	e6c2      	b.n	13c0 <i2c_master_init+0x30>
    163a:	46c0      	nop			; (mov r8, r8)
    163c:	00001fd1 	.word	0x00001fd1
    1640:	40000400 	.word	0x40000400
    1644:	00003211 	.word	0x00003211
    1648:	000031a1 	.word	0x000031a1
    164c:	00001e29 	.word	0x00001e29
    1650:	00001ac5 	.word	0x00001ac5
    1654:	0000200d 	.word	0x0000200d
    1658:	200011a8 	.word	0x200011a8
    165c:	0000330d 	.word	0x0000330d
    1660:	41002000 	.word	0x41002000
    1664:	00003235 	.word	0x00003235
    1668:	00014675 	.word	0x00014675
    166c:	00013a5d 	.word	0x00013a5d
    1670:	e826d695 	.word	0xe826d695
    1674:	3e112e0b 	.word	0x3e112e0b
    1678:	00012dd5 	.word	0x00012dd5
    167c:	40240000 	.word	0x40240000
    1680:	00013f5d 	.word	0x00013f5d
    1684:	3ff00000 	.word	0x3ff00000
    1688:	000133f5 	.word	0x000133f5
    168c:	00014589 	.word	0x00014589
    1690:	00001e75 	.word	0x00001e75
    1694:	40080000 	.word	0x40080000
    1698:	00011a09 	.word	0x00011a09

0000169c <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    169c:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    169e:	7e1a      	ldrb	r2, [r3, #24]
    16a0:	0792      	lsls	r2, r2, #30
    16a2:	d507      	bpl.n	16b4 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    16a4:	2202      	movs	r2, #2
    16a6:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    16a8:	8b5b      	ldrh	r3, [r3, #26]
    16aa:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    16ac:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    16ae:	17db      	asrs	r3, r3, #31
    16b0:	4018      	ands	r0, r3
}
    16b2:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    16b4:	8b5a      	ldrh	r2, [r3, #26]
    16b6:	0752      	lsls	r2, r2, #29
    16b8:	d506      	bpl.n	16c8 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    16ba:	6859      	ldr	r1, [r3, #4]
    16bc:	22c0      	movs	r2, #192	; 0xc0
    16be:	0292      	lsls	r2, r2, #10
    16c0:	430a      	orrs	r2, r1
    16c2:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    16c4:	2018      	movs	r0, #24
    16c6:	e7f4      	b.n	16b2 <_i2c_master_address_response+0x16>
	return STATUS_OK;
    16c8:	2000      	movs	r0, #0
    16ca:	e7f2      	b.n	16b2 <_i2c_master_address_response+0x16>

000016cc <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    16cc:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    16ce:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    16d0:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    16d2:	2401      	movs	r4, #1
    16d4:	2502      	movs	r5, #2
    16d6:	7e11      	ldrb	r1, [r2, #24]
    16d8:	4221      	tst	r1, r4
    16da:	d10b      	bne.n	16f4 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    16dc:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    16de:	4229      	tst	r1, r5
    16e0:	d106      	bne.n	16f0 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    16e2:	3301      	adds	r3, #1
    16e4:	b29b      	uxth	r3, r3
    16e6:	8901      	ldrh	r1, [r0, #8]
    16e8:	4299      	cmp	r1, r3
    16ea:	d8f4      	bhi.n	16d6 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    16ec:	2012      	movs	r0, #18
    16ee:	e002      	b.n	16f6 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    16f0:	2000      	movs	r0, #0
    16f2:	e000      	b.n	16f6 <_i2c_master_wait_for_bus+0x2a>
    16f4:	2000      	movs	r0, #0
}
    16f6:	bd30      	pop	{r4, r5, pc}

000016f8 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    16f8:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    16fa:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    16fc:	6862      	ldr	r2, [r4, #4]
    16fe:	2380      	movs	r3, #128	; 0x80
    1700:	02db      	lsls	r3, r3, #11
    1702:	4313      	orrs	r3, r2
    1704:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    1706:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1708:	4b02      	ldr	r3, [pc, #8]	; (1714 <_i2c_master_send_hs_master_code+0x1c>)
    170a:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    170c:	2301      	movs	r3, #1
    170e:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    1710:	bd10      	pop	{r4, pc}
    1712:	46c0      	nop			; (mov r8, r8)
    1714:	000016cd 	.word	0x000016cd

00001718 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1718:	b5f0      	push	{r4, r5, r6, r7, lr}
    171a:	46de      	mov	lr, fp
    171c:	4657      	mov	r7, sl
    171e:	464e      	mov	r6, r9
    1720:	4645      	mov	r5, r8
    1722:	b5e0      	push	{r5, r6, r7, lr}
    1724:	b083      	sub	sp, #12
    1726:	0006      	movs	r6, r0
    1728:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    172a:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    172c:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    172e:	682b      	ldr	r3, [r5, #0]
    1730:	011b      	lsls	r3, r3, #4
    1732:	0fdb      	lsrs	r3, r3, #31
    1734:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    1736:	7a4b      	ldrb	r3, [r1, #9]
    1738:	2b00      	cmp	r3, #0
    173a:	d12b      	bne.n	1794 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    173c:	686b      	ldr	r3, [r5, #4]
    173e:	4a58      	ldr	r2, [pc, #352]	; (18a0 <_i2c_master_read_packet+0x188>)
    1740:	4013      	ands	r3, r2
    1742:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    1744:	464b      	mov	r3, r9
    1746:	7a1b      	ldrb	r3, [r3, #8]
    1748:	2b00      	cmp	r3, #0
    174a:	d127      	bne.n	179c <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    174c:	464b      	mov	r3, r9
    174e:	881b      	ldrh	r3, [r3, #0]
    1750:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    1752:	464a      	mov	r2, r9
    1754:	7a52      	ldrb	r2, [r2, #9]
    1756:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1758:	4313      	orrs	r3, r2
    175a:	2201      	movs	r2, #1
    175c:	4313      	orrs	r3, r2
    175e:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1760:	0030      	movs	r0, r6
    1762:	4b50      	ldr	r3, [pc, #320]	; (18a4 <_i2c_master_read_packet+0x18c>)
    1764:	4798      	blx	r3
    1766:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    1768:	4653      	mov	r3, sl
    176a:	2b00      	cmp	r3, #0
    176c:	d003      	beq.n	1776 <_i2c_master_read_packet+0x5e>
    176e:	464b      	mov	r3, r9
    1770:	885b      	ldrh	r3, [r3, #2]
    1772:	2b01      	cmp	r3, #1
    1774:	d03b      	beq.n	17ee <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    1776:	686b      	ldr	r3, [r5, #4]
    1778:	4a49      	ldr	r2, [pc, #292]	; (18a0 <_i2c_master_read_packet+0x188>)
    177a:	4013      	ands	r3, r2
    177c:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    177e:	9b01      	ldr	r3, [sp, #4]
    1780:	2b00      	cmp	r3, #0
    1782:	d03a      	beq.n	17fa <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
    1784:	9801      	ldr	r0, [sp, #4]
    1786:	b003      	add	sp, #12
    1788:	bc3c      	pop	{r2, r3, r4, r5}
    178a:	4690      	mov	r8, r2
    178c:	4699      	mov	r9, r3
    178e:	46a2      	mov	sl, r4
    1790:	46ab      	mov	fp, r5
    1792:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    1794:	7a89      	ldrb	r1, [r1, #10]
    1796:	4b44      	ldr	r3, [pc, #272]	; (18a8 <_i2c_master_read_packet+0x190>)
    1798:	4798      	blx	r3
    179a:	e7cf      	b.n	173c <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
    179c:	464b      	mov	r3, r9
    179e:	881b      	ldrh	r3, [r3, #0]
    17a0:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    17a2:	464a      	mov	r2, r9
    17a4:	7a52      	ldrb	r2, [r2, #9]
    17a6:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    17a8:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    17aa:	2280      	movs	r2, #128	; 0x80
    17ac:	0212      	lsls	r2, r2, #8
    17ae:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    17b0:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    17b2:	0030      	movs	r0, r6
    17b4:	4b3b      	ldr	r3, [pc, #236]	; (18a4 <_i2c_master_read_packet+0x18c>)
    17b6:	4798      	blx	r3
    17b8:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    17ba:	686b      	ldr	r3, [r5, #4]
    17bc:	4a38      	ldr	r2, [pc, #224]	; (18a0 <_i2c_master_read_packet+0x188>)
    17be:	4013      	ands	r3, r2
    17c0:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
    17c2:	2800      	cmp	r0, #0
    17c4:	d1de      	bne.n	1784 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
    17c6:	0030      	movs	r0, r6
    17c8:	4b38      	ldr	r3, [pc, #224]	; (18ac <_i2c_master_read_packet+0x194>)
    17ca:	4798      	blx	r3
    17cc:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
    17ce:	2800      	cmp	r0, #0
    17d0:	d1d8      	bne.n	1784 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    17d2:	464b      	mov	r3, r9
    17d4:	881b      	ldrh	r3, [r3, #0]
    17d6:	0a1b      	lsrs	r3, r3, #8
    17d8:	2278      	movs	r2, #120	; 0x78
    17da:	4313      	orrs	r3, r2
    17dc:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    17de:	464a      	mov	r2, r9
    17e0:	7a52      	ldrb	r2, [r2, #9]
    17e2:	0392      	lsls	r2, r2, #14
    17e4:	2101      	movs	r1, #1
    17e6:	430a      	orrs	r2, r1
    17e8:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    17ea:	626b      	str	r3, [r5, #36]	; 0x24
    17ec:	e7b8      	b.n	1760 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    17ee:	686a      	ldr	r2, [r5, #4]
    17f0:	2380      	movs	r3, #128	; 0x80
    17f2:	02db      	lsls	r3, r3, #11
    17f4:	4313      	orrs	r3, r2
    17f6:	606b      	str	r3, [r5, #4]
    17f8:	e7c1      	b.n	177e <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
    17fa:	0030      	movs	r0, r6
    17fc:	4b2b      	ldr	r3, [pc, #172]	; (18ac <_i2c_master_read_packet+0x194>)
    17fe:	4798      	blx	r3
    1800:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    1802:	2800      	cmp	r0, #0
    1804:	d1be      	bne.n	1784 <_i2c_master_read_packet+0x6c>
    1806:	3c01      	subs	r4, #1
    1808:	b2a4      	uxth	r4, r4
    180a:	4680      	mov	r8, r0
		while (tmp_data_length--) {
    180c:	4b28      	ldr	r3, [pc, #160]	; (18b0 <_i2c_master_read_packet+0x198>)
    180e:	469b      	mov	fp, r3
    1810:	e015      	b.n	183e <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    1812:	2c01      	cmp	r4, #1
    1814:	d020      	beq.n	1858 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
    1816:	0030      	movs	r0, r6
    1818:	4b26      	ldr	r3, [pc, #152]	; (18b4 <_i2c_master_read_packet+0x19c>)
    181a:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    181c:	4643      	mov	r3, r8
    181e:	1c5f      	adds	r7, r3, #1
    1820:	b2bf      	uxth	r7, r7
    1822:	2328      	movs	r3, #40	; 0x28
    1824:	5ceb      	ldrb	r3, [r5, r3]
    1826:	464a      	mov	r2, r9
    1828:	6852      	ldr	r2, [r2, #4]
    182a:	4641      	mov	r1, r8
    182c:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
    182e:	0030      	movs	r0, r6
    1830:	4b1c      	ldr	r3, [pc, #112]	; (18a4 <_i2c_master_read_packet+0x18c>)
    1832:	4798      	blx	r3
    1834:	3c01      	subs	r4, #1
    1836:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
    1838:	2800      	cmp	r0, #0
    183a:	d115      	bne.n	1868 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
    183c:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
    183e:	455c      	cmp	r4, fp
    1840:	d014      	beq.n	186c <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    1842:	8b6b      	ldrh	r3, [r5, #26]
    1844:	069b      	lsls	r3, r3, #26
    1846:	d527      	bpl.n	1898 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    1848:	7af3      	ldrb	r3, [r6, #11]
    184a:	2b00      	cmp	r3, #0
    184c:	d0e3      	beq.n	1816 <_i2c_master_read_packet+0xfe>
    184e:	4653      	mov	r3, sl
    1850:	2b00      	cmp	r3, #0
    1852:	d1de      	bne.n	1812 <_i2c_master_read_packet+0xfa>
    1854:	2c00      	cmp	r4, #0
    1856:	d1de      	bne.n	1816 <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1858:	686a      	ldr	r2, [r5, #4]
    185a:	2380      	movs	r3, #128	; 0x80
    185c:	02db      	lsls	r3, r3, #11
    185e:	4313      	orrs	r3, r2
    1860:	606b      	str	r3, [r5, #4]
    1862:	3c01      	subs	r4, #1
    1864:	b2a4      	uxth	r4, r4
    1866:	e7ea      	b.n	183e <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
    1868:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
    186a:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    186c:	7ab3      	ldrb	r3, [r6, #10]
    186e:	2b00      	cmp	r3, #0
    1870:	d109      	bne.n	1886 <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
    1872:	0030      	movs	r0, r6
    1874:	4b0f      	ldr	r3, [pc, #60]	; (18b4 <_i2c_master_read_packet+0x19c>)
    1876:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    1878:	2328      	movs	r3, #40	; 0x28
    187a:	5cea      	ldrb	r2, [r5, r3]
    187c:	464b      	mov	r3, r9
    187e:	685b      	ldr	r3, [r3, #4]
    1880:	4641      	mov	r1, r8
    1882:	545a      	strb	r2, [r3, r1]
    1884:	e77e      	b.n	1784 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
    1886:	0030      	movs	r0, r6
    1888:	4b0a      	ldr	r3, [pc, #40]	; (18b4 <_i2c_master_read_packet+0x19c>)
    188a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    188c:	686a      	ldr	r2, [r5, #4]
    188e:	23c0      	movs	r3, #192	; 0xc0
    1890:	029b      	lsls	r3, r3, #10
    1892:	4313      	orrs	r3, r2
    1894:	606b      	str	r3, [r5, #4]
    1896:	e7ec      	b.n	1872 <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
    1898:	2341      	movs	r3, #65	; 0x41
    189a:	9301      	str	r3, [sp, #4]
    189c:	e772      	b.n	1784 <_i2c_master_read_packet+0x6c>
    189e:	46c0      	nop			; (mov r8, r8)
    18a0:	fffbffff 	.word	0xfffbffff
    18a4:	000016cd 	.word	0x000016cd
    18a8:	000016f9 	.word	0x000016f9
    18ac:	0000169d 	.word	0x0000169d
    18b0:	0000ffff 	.word	0x0000ffff
    18b4:	00001385 	.word	0x00001385

000018b8 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    18b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    18ba:	46de      	mov	lr, fp
    18bc:	4657      	mov	r7, sl
    18be:	464e      	mov	r6, r9
    18c0:	4645      	mov	r5, r8
    18c2:	b5e0      	push	{r5, r6, r7, lr}
    18c4:	b083      	sub	sp, #12
    18c6:	0006      	movs	r6, r0
    18c8:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    18ca:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    18cc:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    18ce:	4b32      	ldr	r3, [pc, #200]	; (1998 <_i2c_master_write_packet+0xe0>)
    18d0:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    18d2:	7a7b      	ldrb	r3, [r7, #9]
    18d4:	2b00      	cmp	r3, #0
    18d6:	d11d      	bne.n	1914 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    18d8:	686b      	ldr	r3, [r5, #4]
    18da:	4a30      	ldr	r2, [pc, #192]	; (199c <_i2c_master_write_packet+0xe4>)
    18dc:	4013      	ands	r3, r2
    18de:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    18e0:	7a3b      	ldrb	r3, [r7, #8]
    18e2:	2b00      	cmp	r3, #0
    18e4:	d01b      	beq.n	191e <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    18e6:	883b      	ldrh	r3, [r7, #0]
    18e8:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    18ea:	7a7a      	ldrb	r2, [r7, #9]
    18ec:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    18ee:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    18f0:	2280      	movs	r2, #128	; 0x80
    18f2:	0212      	lsls	r2, r2, #8
    18f4:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    18f6:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    18f8:	0030      	movs	r0, r6
    18fa:	4b29      	ldr	r3, [pc, #164]	; (19a0 <_i2c_master_write_packet+0xe8>)
    18fc:	4798      	blx	r3
    18fe:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    1900:	2800      	cmp	r0, #0
    1902:	d013      	beq.n	192c <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    1904:	9801      	ldr	r0, [sp, #4]
    1906:	b003      	add	sp, #12
    1908:	bc3c      	pop	{r2, r3, r4, r5}
    190a:	4690      	mov	r8, r2
    190c:	4699      	mov	r9, r3
    190e:	46a2      	mov	sl, r4
    1910:	46ab      	mov	fp, r5
    1912:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    1914:	7ab9      	ldrb	r1, [r7, #10]
    1916:	0030      	movs	r0, r6
    1918:	4b22      	ldr	r3, [pc, #136]	; (19a4 <_i2c_master_write_packet+0xec>)
    191a:	4798      	blx	r3
    191c:	e7dc      	b.n	18d8 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    191e:	883b      	ldrh	r3, [r7, #0]
    1920:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    1922:	7a7a      	ldrb	r2, [r7, #9]
    1924:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1926:	4313      	orrs	r3, r2
    1928:	626b      	str	r3, [r5, #36]	; 0x24
    192a:	e7e5      	b.n	18f8 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
    192c:	0030      	movs	r0, r6
    192e:	4b1e      	ldr	r3, [pc, #120]	; (19a8 <_i2c_master_write_packet+0xf0>)
    1930:	4798      	blx	r3
    1932:	1e03      	subs	r3, r0, #0
    1934:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    1936:	d1e5      	bne.n	1904 <_i2c_master_write_packet+0x4c>
    1938:	46a0      	mov	r8, r4
    193a:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    193c:	3320      	adds	r3, #32
    193e:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
    1940:	4b15      	ldr	r3, [pc, #84]	; (1998 <_i2c_master_write_packet+0xe0>)
    1942:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
    1944:	4b16      	ldr	r3, [pc, #88]	; (19a0 <_i2c_master_write_packet+0xe8>)
    1946:	469a      	mov	sl, r3
		while (tmp_data_length--) {
    1948:	4544      	cmp	r4, r8
    194a:	d015      	beq.n	1978 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    194c:	8b6b      	ldrh	r3, [r5, #26]
    194e:	464a      	mov	r2, r9
    1950:	4213      	tst	r3, r2
    1952:	d01d      	beq.n	1990 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
    1954:	0030      	movs	r0, r6
    1956:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    1958:	687b      	ldr	r3, [r7, #4]
    195a:	5d1a      	ldrb	r2, [r3, r4]
    195c:	2328      	movs	r3, #40	; 0x28
    195e:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
    1960:	0030      	movs	r0, r6
    1962:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
    1964:	2800      	cmp	r0, #0
    1966:	d106      	bne.n	1976 <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1968:	8b6b      	ldrh	r3, [r5, #26]
    196a:	3401      	adds	r4, #1
    196c:	075b      	lsls	r3, r3, #29
    196e:	d5eb      	bpl.n	1948 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
    1970:	231e      	movs	r3, #30
    1972:	9301      	str	r3, [sp, #4]
    1974:	e000      	b.n	1978 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
    1976:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    1978:	7ab3      	ldrb	r3, [r6, #10]
    197a:	2b00      	cmp	r3, #0
    197c:	d0c2      	beq.n	1904 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
    197e:	0030      	movs	r0, r6
    1980:	4b05      	ldr	r3, [pc, #20]	; (1998 <_i2c_master_write_packet+0xe0>)
    1982:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1984:	686a      	ldr	r2, [r5, #4]
    1986:	23c0      	movs	r3, #192	; 0xc0
    1988:	029b      	lsls	r3, r3, #10
    198a:	4313      	orrs	r3, r2
    198c:	606b      	str	r3, [r5, #4]
    198e:	e7b9      	b.n	1904 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
    1990:	2341      	movs	r3, #65	; 0x41
    1992:	9301      	str	r3, [sp, #4]
    1994:	e7b6      	b.n	1904 <_i2c_master_write_packet+0x4c>
    1996:	46c0      	nop			; (mov r8, r8)
    1998:	00001385 	.word	0x00001385
    199c:	fffbffff 	.word	0xfffbffff
    19a0:	000016cd 	.word	0x000016cd
    19a4:	000016f9 	.word	0x000016f9
    19a8:	0000169d 	.word	0x0000169d

000019ac <i2c_master_read_packet_wait>:
{
    19ac:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
    19ae:	8b83      	ldrh	r3, [r0, #28]
    19b0:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    19b2:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    19b4:	2b00      	cmp	r3, #0
    19b6:	d001      	beq.n	19bc <i2c_master_read_packet_wait+0x10>
}
    19b8:	0010      	movs	r0, r2
    19ba:	bd10      	pop	{r4, pc}
	module->send_stop = true;
    19bc:	3301      	adds	r3, #1
    19be:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    19c0:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    19c2:	4b02      	ldr	r3, [pc, #8]	; (19cc <i2c_master_read_packet_wait+0x20>)
    19c4:	4798      	blx	r3
    19c6:	0002      	movs	r2, r0
    19c8:	e7f6      	b.n	19b8 <i2c_master_read_packet_wait+0xc>
    19ca:	46c0      	nop			; (mov r8, r8)
    19cc:	00001719 	.word	0x00001719

000019d0 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    19d0:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    19d2:	8b83      	ldrh	r3, [r0, #28]
    19d4:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    19d6:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    19d8:	2b00      	cmp	r3, #0
    19da:	d001      	beq.n	19e0 <i2c_master_write_packet_wait_no_stop+0x10>

	module->send_stop = false;
	module->send_nack = true;

	return _i2c_master_write_packet(module, packet);
}
    19dc:	0010      	movs	r0, r2
    19de:	bd10      	pop	{r4, pc}
	module->send_stop = false;
    19e0:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    19e2:	3301      	adds	r3, #1
    19e4:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
    19e6:	4b02      	ldr	r3, [pc, #8]	; (19f0 <i2c_master_write_packet_wait_no_stop+0x20>)
    19e8:	4798      	blx	r3
    19ea:	0002      	movs	r2, r0
    19ec:	e7f6      	b.n	19dc <i2c_master_write_packet_wait_no_stop+0xc>
    19ee:	46c0      	nop			; (mov r8, r8)
    19f0:	000018b9 	.word	0x000018b9

000019f4 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    19f4:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    19f6:	2207      	movs	r2, #7
    19f8:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    19fa:	421a      	tst	r2, r3
    19fc:	d1fc      	bne.n	19f8 <_i2c_master_wait_for_sync+0x4>
}
    19fe:	4770      	bx	lr

00001a00 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    1a00:	b570      	push	{r4, r5, r6, lr}
    1a02:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1a04:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1a06:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    1a08:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
    1a0a:	8b83      	ldrh	r3, [r0, #28]
    1a0c:	1aed      	subs	r5, r5, r3
    1a0e:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
    1a10:	8b83      	ldrh	r3, [r0, #28]
    1a12:	3b01      	subs	r3, #1
    1a14:	b29b      	uxth	r3, r3
    1a16:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
    1a18:	0113      	lsls	r3, r2, #4
    1a1a:	d51d      	bpl.n	1a58 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
    1a1c:	7ac3      	ldrb	r3, [r0, #11]
    1a1e:	2b00      	cmp	r3, #0
    1a20:	d003      	beq.n	1a2a <_i2c_master_read+0x2a>
    1a22:	8b83      	ldrh	r3, [r0, #28]
    1a24:	b29b      	uxth	r3, r3
    1a26:	2b01      	cmp	r3, #1
    1a28:	d010      	beq.n	1a4c <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
    1a2a:	8ba3      	ldrh	r3, [r4, #28]
    1a2c:	b29b      	uxth	r3, r3
    1a2e:	2b00      	cmp	r3, #0
    1a30:	d102      	bne.n	1a38 <_i2c_master_read+0x38>
		if (module->send_stop) {
    1a32:	7aa3      	ldrb	r3, [r4, #10]
    1a34:	2b00      	cmp	r3, #0
    1a36:	d11c      	bne.n	1a72 <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    1a38:	0020      	movs	r0, r4
    1a3a:	4b12      	ldr	r3, [pc, #72]	; (1a84 <_i2c_master_read+0x84>)
    1a3c:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    1a3e:	6a23      	ldr	r3, [r4, #32]
    1a40:	195d      	adds	r5, r3, r5
    1a42:	2328      	movs	r3, #40	; 0x28
    1a44:	5cf3      	ldrb	r3, [r6, r3]
    1a46:	b2db      	uxtb	r3, r3
    1a48:	702b      	strb	r3, [r5, #0]
}
    1a4a:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1a4c:	6872      	ldr	r2, [r6, #4]
    1a4e:	2380      	movs	r3, #128	; 0x80
    1a50:	02db      	lsls	r3, r3, #11
    1a52:	4313      	orrs	r3, r2
    1a54:	6073      	str	r3, [r6, #4]
    1a56:	e7e8      	b.n	1a2a <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
    1a58:	7ac3      	ldrb	r3, [r0, #11]
    1a5a:	2b00      	cmp	r3, #0
    1a5c:	d0e5      	beq.n	1a2a <_i2c_master_read+0x2a>
    1a5e:	8b83      	ldrh	r3, [r0, #28]
    1a60:	b29b      	uxth	r3, r3
    1a62:	2b00      	cmp	r3, #0
    1a64:	d1e1      	bne.n	1a2a <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1a66:	6872      	ldr	r2, [r6, #4]
    1a68:	2380      	movs	r3, #128	; 0x80
    1a6a:	02db      	lsls	r3, r3, #11
    1a6c:	4313      	orrs	r3, r2
    1a6e:	6073      	str	r3, [r6, #4]
    1a70:	e7db      	b.n	1a2a <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
    1a72:	0020      	movs	r0, r4
    1a74:	4b03      	ldr	r3, [pc, #12]	; (1a84 <_i2c_master_read+0x84>)
    1a76:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1a78:	6872      	ldr	r2, [r6, #4]
    1a7a:	23c0      	movs	r3, #192	; 0xc0
    1a7c:	029b      	lsls	r3, r3, #10
    1a7e:	4313      	orrs	r3, r2
    1a80:	6073      	str	r3, [r6, #4]
    1a82:	e7d9      	b.n	1a38 <_i2c_master_read+0x38>
    1a84:	000019f5 	.word	0x000019f5

00001a88 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    1a88:	b570      	push	{r4, r5, r6, lr}
    1a8a:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1a8c:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    1a8e:	8b6b      	ldrh	r3, [r5, #26]
    1a90:	075b      	lsls	r3, r3, #29
    1a92:	d503      	bpl.n	1a9c <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    1a94:	221e      	movs	r2, #30
    1a96:	2325      	movs	r3, #37	; 0x25
    1a98:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
    1a9a:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
    1a9c:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
    1a9e:	8b83      	ldrh	r3, [r0, #28]
    1aa0:	1af6      	subs	r6, r6, r3
    1aa2:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
    1aa4:	8b83      	ldrh	r3, [r0, #28]
    1aa6:	3b01      	subs	r3, #1
    1aa8:	b29b      	uxth	r3, r3
    1aaa:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
    1aac:	4b04      	ldr	r3, [pc, #16]	; (1ac0 <_i2c_master_write+0x38>)
    1aae:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    1ab0:	6a23      	ldr	r3, [r4, #32]
    1ab2:	199e      	adds	r6, r3, r6
    1ab4:	7833      	ldrb	r3, [r6, #0]
    1ab6:	b2db      	uxtb	r3, r3
    1ab8:	2228      	movs	r2, #40	; 0x28
    1aba:	54ab      	strb	r3, [r5, r2]
    1abc:	e7ed      	b.n	1a9a <_i2c_master_write+0x12>
    1abe:	46c0      	nop			; (mov r8, r8)
    1ac0:	000019f5 	.word	0x000019f5

00001ac4 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    1ac4:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
    1ac6:	0080      	lsls	r0, r0, #2
    1ac8:	4b75      	ldr	r3, [pc, #468]	; (1ca0 <_i2c_master_interrupt_handler+0x1dc>)
    1aca:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1acc:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1ace:	682b      	ldr	r3, [r5, #0]
    1ad0:	011b      	lsls	r3, r3, #4
    1ad2:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    1ad4:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
    1ad6:	7e26      	ldrb	r6, [r4, #24]
    1ad8:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    1ada:	8b63      	ldrh	r3, [r4, #26]
    1adc:	b29b      	uxth	r3, r3
    1ade:	2b00      	cmp	r3, #0
    1ae0:	d103      	bne.n	1aea <_i2c_master_interrupt_handler+0x26>
    1ae2:	8ba3      	ldrh	r3, [r4, #28]
    1ae4:	b29b      	uxth	r3, r3
    1ae6:	2b00      	cmp	r3, #0
    1ae8:	d123      	bne.n	1b32 <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1aea:	8b63      	ldrh	r3, [r4, #26]
    1aec:	b29b      	uxth	r3, r3
    1aee:	2b00      	cmp	r3, #0
    1af0:	d008      	beq.n	1b04 <_i2c_master_interrupt_handler+0x40>
    1af2:	8ba3      	ldrh	r3, [r4, #28]
    1af4:	b29b      	uxth	r3, r3
    1af6:	2b00      	cmp	r3, #0
    1af8:	d104      	bne.n	1b04 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
    1afa:	3325      	adds	r3, #37	; 0x25
    1afc:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1afe:	2b05      	cmp	r3, #5
    1b00:	d100      	bne.n	1b04 <_i2c_master_interrupt_handler+0x40>
    1b02:	e06d      	b.n	1be0 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    1b04:	8b63      	ldrh	r3, [r4, #26]
    1b06:	b29b      	uxth	r3, r3
    1b08:	2b00      	cmp	r3, #0
    1b0a:	d024      	beq.n	1b56 <_i2c_master_interrupt_handler+0x92>
    1b0c:	8ba3      	ldrh	r3, [r4, #28]
    1b0e:	b29b      	uxth	r3, r3
    1b10:	2b00      	cmp	r3, #0
    1b12:	d020      	beq.n	1b56 <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    1b14:	8b6b      	ldrh	r3, [r5, #26]
    1b16:	069b      	lsls	r3, r3, #26
    1b18:	d500      	bpl.n	1b1c <_i2c_master_interrupt_handler+0x58>
    1b1a:	e081      	b.n	1c20 <_i2c_master_interrupt_handler+0x15c>
    1b1c:	2a00      	cmp	r2, #0
    1b1e:	d004      	beq.n	1b2a <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    1b20:	8ba3      	ldrh	r3, [r4, #28]
    1b22:	b29b      	uxth	r3, r3
    1b24:	2b01      	cmp	r3, #1
    1b26:	d100      	bne.n	1b2a <_i2c_master_interrupt_handler+0x66>
    1b28:	e07a      	b.n	1c20 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
    1b2a:	2241      	movs	r2, #65	; 0x41
    1b2c:	2325      	movs	r3, #37	; 0x25
    1b2e:	54e2      	strb	r2, [r4, r3]
    1b30:	e011      	b.n	1b56 <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    1b32:	7e2b      	ldrb	r3, [r5, #24]
    1b34:	07db      	lsls	r3, r3, #31
    1b36:	d507      	bpl.n	1b48 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    1b38:	2301      	movs	r3, #1
    1b3a:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1b3c:	8b6b      	ldrh	r3, [r5, #26]
    1b3e:	079b      	lsls	r3, r3, #30
    1b40:	d52e      	bpl.n	1ba0 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
    1b42:	2241      	movs	r2, #65	; 0x41
    1b44:	2325      	movs	r3, #37	; 0x25
    1b46:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
    1b48:	8ba3      	ldrh	r3, [r4, #28]
    1b4a:	b29b      	uxth	r3, r3
    1b4c:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
    1b4e:	2325      	movs	r3, #37	; 0x25
    1b50:	5ce3      	ldrb	r3, [r4, r3]
    1b52:	2b05      	cmp	r3, #5
    1b54:	d038      	beq.n	1bc8 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1b56:	8b63      	ldrh	r3, [r4, #26]
    1b58:	b29b      	uxth	r3, r3
    1b5a:	2b00      	cmp	r3, #0
    1b5c:	d007      	beq.n	1b6e <_i2c_master_interrupt_handler+0xaa>
    1b5e:	8ba3      	ldrh	r3, [r4, #28]
    1b60:	b29b      	uxth	r3, r3
    1b62:	2b00      	cmp	r3, #0
    1b64:	d103      	bne.n	1b6e <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
    1b66:	3325      	adds	r3, #37	; 0x25
    1b68:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1b6a:	2b05      	cmp	r3, #5
    1b6c:	d064      	beq.n	1c38 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    1b6e:	2325      	movs	r3, #37	; 0x25
    1b70:	5ce3      	ldrb	r3, [r4, r3]
    1b72:	2b05      	cmp	r3, #5
    1b74:	d013      	beq.n	1b9e <_i2c_master_interrupt_handler+0xda>
    1b76:	2325      	movs	r3, #37	; 0x25
    1b78:	5ce3      	ldrb	r3, [r4, r3]
    1b7a:	2b00      	cmp	r3, #0
    1b7c:	d00f      	beq.n	1b9e <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    1b7e:	2303      	movs	r3, #3
    1b80:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    1b82:	2300      	movs	r3, #0
    1b84:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
    1b86:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    1b88:	3325      	adds	r3, #37	; 0x25
    1b8a:	5ce3      	ldrb	r3, [r4, r3]
    1b8c:	2b41      	cmp	r3, #65	; 0x41
    1b8e:	d003      	beq.n	1b98 <_i2c_master_interrupt_handler+0xd4>
    1b90:	7aa3      	ldrb	r3, [r4, #10]
    1b92:	2b00      	cmp	r3, #0
    1b94:	d000      	beq.n	1b98 <_i2c_master_interrupt_handler+0xd4>
    1b96:	e075      	b.n	1c84 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    1b98:	0773      	lsls	r3, r6, #29
    1b9a:	d500      	bpl.n	1b9e <_i2c_master_interrupt_handler+0xda>
    1b9c:	e07b      	b.n	1c96 <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
    1b9e:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1ba0:	8b6b      	ldrh	r3, [r5, #26]
    1ba2:	075b      	lsls	r3, r3, #29
    1ba4:	d5d0      	bpl.n	1b48 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    1ba6:	2218      	movs	r2, #24
    1ba8:	2325      	movs	r3, #37	; 0x25
    1baa:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
    1bac:	2300      	movs	r3, #0
    1bae:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
    1bb0:	7aa3      	ldrb	r3, [r4, #10]
    1bb2:	2b00      	cmp	r3, #0
    1bb4:	d0c8      	beq.n	1b48 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
    1bb6:	0020      	movs	r0, r4
    1bb8:	4b3a      	ldr	r3, [pc, #232]	; (1ca4 <_i2c_master_interrupt_handler+0x1e0>)
    1bba:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1bbc:	686a      	ldr	r2, [r5, #4]
    1bbe:	23c0      	movs	r3, #192	; 0xc0
    1bc0:	029b      	lsls	r3, r3, #10
    1bc2:	4313      	orrs	r3, r2
    1bc4:	606b      	str	r3, [r5, #4]
    1bc6:	e7bf      	b.n	1b48 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1bc8:	331f      	adds	r3, #31
    1bca:	5ce3      	ldrb	r3, [r4, r3]
    1bcc:	2b00      	cmp	r3, #0
    1bce:	d003      	beq.n	1bd8 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
    1bd0:	0020      	movs	r0, r4
    1bd2:	4b35      	ldr	r3, [pc, #212]	; (1ca8 <_i2c_master_interrupt_handler+0x1e4>)
    1bd4:	4798      	blx	r3
    1bd6:	e7be      	b.n	1b56 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
    1bd8:	0020      	movs	r0, r4
    1bda:	4b34      	ldr	r3, [pc, #208]	; (1cac <_i2c_master_interrupt_handler+0x1e8>)
    1bdc:	4798      	blx	r3
    1bde:	e7ba      	b.n	1b56 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1be0:	331f      	adds	r3, #31
    1be2:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    1be4:	2b00      	cmp	r3, #0
    1be6:	d000      	beq.n	1bea <_i2c_master_interrupt_handler+0x126>
    1be8:	e78c      	b.n	1b04 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
    1bea:	3303      	adds	r3, #3
    1bec:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    1bee:	2300      	movs	r3, #0
    1bf0:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    1bf2:	3325      	adds	r3, #37	; 0x25
    1bf4:	2200      	movs	r2, #0
    1bf6:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
    1bf8:	7aa3      	ldrb	r3, [r4, #10]
    1bfa:	2b00      	cmp	r3, #0
    1bfc:	d107      	bne.n	1c0e <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1bfe:	2301      	movs	r3, #1
    1c00:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    1c02:	07f3      	lsls	r3, r6, #31
    1c04:	d5a7      	bpl.n	1b56 <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1c06:	68e3      	ldr	r3, [r4, #12]
    1c08:	0020      	movs	r0, r4
    1c0a:	4798      	blx	r3
    1c0c:	e7a3      	b.n	1b56 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
    1c0e:	0020      	movs	r0, r4
    1c10:	4b24      	ldr	r3, [pc, #144]	; (1ca4 <_i2c_master_interrupt_handler+0x1e0>)
    1c12:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1c14:	686a      	ldr	r2, [r5, #4]
    1c16:	23c0      	movs	r3, #192	; 0xc0
    1c18:	029b      	lsls	r3, r3, #10
    1c1a:	4313      	orrs	r3, r2
    1c1c:	606b      	str	r3, [r5, #4]
    1c1e:	e7f0      	b.n	1c02 <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1c20:	2324      	movs	r3, #36	; 0x24
    1c22:	5ce3      	ldrb	r3, [r4, r3]
    1c24:	2b00      	cmp	r3, #0
    1c26:	d103      	bne.n	1c30 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
    1c28:	0020      	movs	r0, r4
    1c2a:	4b20      	ldr	r3, [pc, #128]	; (1cac <_i2c_master_interrupt_handler+0x1e8>)
    1c2c:	4798      	blx	r3
    1c2e:	e792      	b.n	1b56 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
    1c30:	0020      	movs	r0, r4
    1c32:	4b1d      	ldr	r3, [pc, #116]	; (1ca8 <_i2c_master_interrupt_handler+0x1e4>)
    1c34:	4798      	blx	r3
    1c36:	e78e      	b.n	1b56 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    1c38:	331f      	adds	r3, #31
    1c3a:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    1c3c:	2b01      	cmp	r3, #1
    1c3e:	d196      	bne.n	1b6e <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    1c40:	7e2b      	ldrb	r3, [r5, #24]
    1c42:	079b      	lsls	r3, r3, #30
    1c44:	d501      	bpl.n	1c4a <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1c46:	2302      	movs	r3, #2
    1c48:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
    1c4a:	2303      	movs	r3, #3
    1c4c:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    1c4e:	2300      	movs	r3, #0
    1c50:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    1c52:	3325      	adds	r3, #37	; 0x25
    1c54:	2200      	movs	r2, #0
    1c56:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    1c58:	07b3      	lsls	r3, r6, #30
    1c5a:	d503      	bpl.n	1c64 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    1c5c:	2324      	movs	r3, #36	; 0x24
    1c5e:	5ce3      	ldrb	r3, [r4, r3]
    1c60:	2b01      	cmp	r3, #1
    1c62:	d00b      	beq.n	1c7c <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    1c64:	07f3      	lsls	r3, r6, #31
    1c66:	d400      	bmi.n	1c6a <_i2c_master_interrupt_handler+0x1a6>
    1c68:	e781      	b.n	1b6e <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1c6a:	2324      	movs	r3, #36	; 0x24
    1c6c:	5ce3      	ldrb	r3, [r4, r3]
    1c6e:	2b00      	cmp	r3, #0
    1c70:	d000      	beq.n	1c74 <_i2c_master_interrupt_handler+0x1b0>
    1c72:	e77c      	b.n	1b6e <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1c74:	68e3      	ldr	r3, [r4, #12]
    1c76:	0020      	movs	r0, r4
    1c78:	4798      	blx	r3
    1c7a:	e778      	b.n	1b6e <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    1c7c:	6923      	ldr	r3, [r4, #16]
    1c7e:	0020      	movs	r0, r4
    1c80:	4798      	blx	r3
    1c82:	e774      	b.n	1b6e <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
    1c84:	0020      	movs	r0, r4
    1c86:	4b07      	ldr	r3, [pc, #28]	; (1ca4 <_i2c_master_interrupt_handler+0x1e0>)
    1c88:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    1c8a:	686a      	ldr	r2, [r5, #4]
    1c8c:	23e0      	movs	r3, #224	; 0xe0
    1c8e:	02db      	lsls	r3, r3, #11
    1c90:	4313      	orrs	r3, r2
    1c92:	606b      	str	r3, [r5, #4]
    1c94:	e780      	b.n	1b98 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    1c96:	6963      	ldr	r3, [r4, #20]
    1c98:	0020      	movs	r0, r4
    1c9a:	4798      	blx	r3
}
    1c9c:	e77f      	b.n	1b9e <_i2c_master_interrupt_handler+0xda>
    1c9e:	46c0      	nop			; (mov r8, r8)
    1ca0:	200011a8 	.word	0x200011a8
    1ca4:	000019f5 	.word	0x000019f5
    1ca8:	00001a01 	.word	0x00001a01
    1cac:	00001a89 	.word	0x00001a89

00001cb0 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    1cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cb2:	46de      	mov	lr, fp
    1cb4:	4657      	mov	r7, sl
    1cb6:	464e      	mov	r6, r9
    1cb8:	4645      	mov	r5, r8
    1cba:	b5e0      	push	{r5, r6, r7, lr}
    1cbc:	b087      	sub	sp, #28
    1cbe:	4680      	mov	r8, r0
    1cc0:	9104      	str	r1, [sp, #16]
    1cc2:	0016      	movs	r6, r2
    1cc4:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1cc6:	2200      	movs	r2, #0
    1cc8:	2300      	movs	r3, #0
    1cca:	2100      	movs	r1, #0
    1ccc:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    1cce:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1cd0:	2001      	movs	r0, #1
    1cd2:	0021      	movs	r1, r4
    1cd4:	9600      	str	r6, [sp, #0]
    1cd6:	9701      	str	r7, [sp, #4]
    1cd8:	465c      	mov	r4, fp
    1cda:	9403      	str	r4, [sp, #12]
    1cdc:	4644      	mov	r4, r8
    1cde:	9405      	str	r4, [sp, #20]
    1ce0:	e013      	b.n	1d0a <long_division+0x5a>
    1ce2:	2420      	movs	r4, #32
    1ce4:	1a64      	subs	r4, r4, r1
    1ce6:	0005      	movs	r5, r0
    1ce8:	40e5      	lsrs	r5, r4
    1cea:	46a8      	mov	r8, r5
    1cec:	e014      	b.n	1d18 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    1cee:	9c00      	ldr	r4, [sp, #0]
    1cf0:	9d01      	ldr	r5, [sp, #4]
    1cf2:	1b12      	subs	r2, r2, r4
    1cf4:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    1cf6:	465c      	mov	r4, fp
    1cf8:	464d      	mov	r5, r9
    1cfa:	432c      	orrs	r4, r5
    1cfc:	46a3      	mov	fp, r4
    1cfe:	9c03      	ldr	r4, [sp, #12]
    1d00:	4645      	mov	r5, r8
    1d02:	432c      	orrs	r4, r5
    1d04:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    1d06:	3901      	subs	r1, #1
    1d08:	d325      	bcc.n	1d56 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    1d0a:	2420      	movs	r4, #32
    1d0c:	4264      	negs	r4, r4
    1d0e:	190c      	adds	r4, r1, r4
    1d10:	d4e7      	bmi.n	1ce2 <long_division+0x32>
    1d12:	0005      	movs	r5, r0
    1d14:	40a5      	lsls	r5, r4
    1d16:	46a8      	mov	r8, r5
    1d18:	0004      	movs	r4, r0
    1d1a:	408c      	lsls	r4, r1
    1d1c:	46a1      	mov	r9, r4
		r = r << 1;
    1d1e:	1892      	adds	r2, r2, r2
    1d20:	415b      	adcs	r3, r3
    1d22:	0014      	movs	r4, r2
    1d24:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1d26:	9e05      	ldr	r6, [sp, #20]
    1d28:	464f      	mov	r7, r9
    1d2a:	403e      	ands	r6, r7
    1d2c:	46b4      	mov	ip, r6
    1d2e:	9e04      	ldr	r6, [sp, #16]
    1d30:	4647      	mov	r7, r8
    1d32:	403e      	ands	r6, r7
    1d34:	46b2      	mov	sl, r6
    1d36:	4666      	mov	r6, ip
    1d38:	4657      	mov	r7, sl
    1d3a:	433e      	orrs	r6, r7
    1d3c:	d003      	beq.n	1d46 <long_division+0x96>
			r |= 0x01;
    1d3e:	0006      	movs	r6, r0
    1d40:	4326      	orrs	r6, r4
    1d42:	0032      	movs	r2, r6
    1d44:	002b      	movs	r3, r5
		if (r >= d) {
    1d46:	9c00      	ldr	r4, [sp, #0]
    1d48:	9d01      	ldr	r5, [sp, #4]
    1d4a:	429d      	cmp	r5, r3
    1d4c:	d8db      	bhi.n	1d06 <long_division+0x56>
    1d4e:	d1ce      	bne.n	1cee <long_division+0x3e>
    1d50:	4294      	cmp	r4, r2
    1d52:	d8d8      	bhi.n	1d06 <long_division+0x56>
    1d54:	e7cb      	b.n	1cee <long_division+0x3e>
    1d56:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1d58:	4658      	mov	r0, fp
    1d5a:	0019      	movs	r1, r3
    1d5c:	b007      	add	sp, #28
    1d5e:	bc3c      	pop	{r2, r3, r4, r5}
    1d60:	4690      	mov	r8, r2
    1d62:	4699      	mov	r9, r3
    1d64:	46a2      	mov	sl, r4
    1d66:	46ab      	mov	fp, r5
    1d68:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001d6a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1d6a:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1d6c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1d6e:	2340      	movs	r3, #64	; 0x40
    1d70:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1d72:	4281      	cmp	r1, r0
    1d74:	d202      	bcs.n	1d7c <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1d76:	0018      	movs	r0, r3
    1d78:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1d7a:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1d7c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1d7e:	1c63      	adds	r3, r4, #1
    1d80:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1d82:	4288      	cmp	r0, r1
    1d84:	d9f9      	bls.n	1d7a <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1d86:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1d88:	2cff      	cmp	r4, #255	; 0xff
    1d8a:	d8f4      	bhi.n	1d76 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1d8c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1d8e:	2300      	movs	r3, #0
    1d90:	e7f1      	b.n	1d76 <_sercom_get_sync_baud_val+0xc>
	...

00001d94 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1d94:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d96:	b083      	sub	sp, #12
    1d98:	000f      	movs	r7, r1
    1d9a:	0016      	movs	r6, r2
    1d9c:	aa08      	add	r2, sp, #32
    1d9e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1da0:	0004      	movs	r4, r0
    1da2:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1da4:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1da6:	42bc      	cmp	r4, r7
    1da8:	d902      	bls.n	1db0 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1daa:	0010      	movs	r0, r2
    1dac:	b003      	add	sp, #12
    1dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1db0:	2b00      	cmp	r3, #0
    1db2:	d114      	bne.n	1dde <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1db4:	0002      	movs	r2, r0
    1db6:	0008      	movs	r0, r1
    1db8:	2100      	movs	r1, #0
    1dba:	4c19      	ldr	r4, [pc, #100]	; (1e20 <_sercom_get_async_baud_val+0x8c>)
    1dbc:	47a0      	blx	r4
    1dbe:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    1dc0:	003a      	movs	r2, r7
    1dc2:	2300      	movs	r3, #0
    1dc4:	2000      	movs	r0, #0
    1dc6:	4c17      	ldr	r4, [pc, #92]	; (1e24 <_sercom_get_async_baud_val+0x90>)
    1dc8:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1dca:	2200      	movs	r2, #0
    1dcc:	2301      	movs	r3, #1
    1dce:	1a12      	subs	r2, r2, r0
    1dd0:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    1dd2:	0c12      	lsrs	r2, r2, #16
    1dd4:	041b      	lsls	r3, r3, #16
    1dd6:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1dd8:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    1dda:	2200      	movs	r2, #0
    1ddc:	e7e5      	b.n	1daa <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    1dde:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1de0:	2b01      	cmp	r3, #1
    1de2:	d1f9      	bne.n	1dd8 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    1de4:	000a      	movs	r2, r1
    1de6:	2300      	movs	r3, #0
    1de8:	2100      	movs	r1, #0
    1dea:	4c0d      	ldr	r4, [pc, #52]	; (1e20 <_sercom_get_async_baud_val+0x8c>)
    1dec:	47a0      	blx	r4
    1dee:	0002      	movs	r2, r0
    1df0:	000b      	movs	r3, r1
    1df2:	9200      	str	r2, [sp, #0]
    1df4:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    1df6:	0038      	movs	r0, r7
    1df8:	2100      	movs	r1, #0
    1dfa:	4c0a      	ldr	r4, [pc, #40]	; (1e24 <_sercom_get_async_baud_val+0x90>)
    1dfc:	47a0      	blx	r4
    1dfe:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    1e00:	2380      	movs	r3, #128	; 0x80
    1e02:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1e04:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    1e06:	4298      	cmp	r0, r3
    1e08:	d8cf      	bhi.n	1daa <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1e0a:	0f79      	lsrs	r1, r7, #29
    1e0c:	00f8      	lsls	r0, r7, #3
    1e0e:	9a00      	ldr	r2, [sp, #0]
    1e10:	9b01      	ldr	r3, [sp, #4]
    1e12:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1e14:	00ea      	lsls	r2, r5, #3
    1e16:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1e18:	b2d2      	uxtb	r2, r2
    1e1a:	0352      	lsls	r2, r2, #13
    1e1c:	432a      	orrs	r2, r5
    1e1e:	e7db      	b.n	1dd8 <_sercom_get_async_baud_val+0x44>
    1e20:	00011da9 	.word	0x00011da9
    1e24:	00001cb1 	.word	0x00001cb1

00001e28 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1e28:	b510      	push	{r4, lr}
    1e2a:	b082      	sub	sp, #8
    1e2c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1e2e:	4b0e      	ldr	r3, [pc, #56]	; (1e68 <sercom_set_gclk_generator+0x40>)
    1e30:	781b      	ldrb	r3, [r3, #0]
    1e32:	2b00      	cmp	r3, #0
    1e34:	d007      	beq.n	1e46 <sercom_set_gclk_generator+0x1e>
    1e36:	2900      	cmp	r1, #0
    1e38:	d105      	bne.n	1e46 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1e3a:	4b0b      	ldr	r3, [pc, #44]	; (1e68 <sercom_set_gclk_generator+0x40>)
    1e3c:	785b      	ldrb	r3, [r3, #1]
    1e3e:	4283      	cmp	r3, r0
    1e40:	d010      	beq.n	1e64 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1e42:	201d      	movs	r0, #29
    1e44:	e00c      	b.n	1e60 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1e46:	a901      	add	r1, sp, #4
    1e48:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1e4a:	2011      	movs	r0, #17
    1e4c:	4b07      	ldr	r3, [pc, #28]	; (1e6c <sercom_set_gclk_generator+0x44>)
    1e4e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1e50:	2011      	movs	r0, #17
    1e52:	4b07      	ldr	r3, [pc, #28]	; (1e70 <sercom_set_gclk_generator+0x48>)
    1e54:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1e56:	4b04      	ldr	r3, [pc, #16]	; (1e68 <sercom_set_gclk_generator+0x40>)
    1e58:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1e5a:	2201      	movs	r2, #1
    1e5c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1e5e:	2000      	movs	r0, #0
}
    1e60:	b002      	add	sp, #8
    1e62:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1e64:	2000      	movs	r0, #0
    1e66:	e7fb      	b.n	1e60 <sercom_set_gclk_generator+0x38>
    1e68:	20000a44 	.word	0x20000a44
    1e6c:	00003211 	.word	0x00003211
    1e70:	000031a1 	.word	0x000031a1

00001e74 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1e74:	4b3c      	ldr	r3, [pc, #240]	; (1f68 <_sercom_get_default_pad+0xf4>)
    1e76:	4298      	cmp	r0, r3
    1e78:	d032      	beq.n	1ee0 <_sercom_get_default_pad+0x6c>
    1e7a:	d90a      	bls.n	1e92 <_sercom_get_default_pad+0x1e>
    1e7c:	4b3b      	ldr	r3, [pc, #236]	; (1f6c <_sercom_get_default_pad+0xf8>)
    1e7e:	4298      	cmp	r0, r3
    1e80:	d04e      	beq.n	1f20 <_sercom_get_default_pad+0xac>
    1e82:	4b3b      	ldr	r3, [pc, #236]	; (1f70 <_sercom_get_default_pad+0xfc>)
    1e84:	4298      	cmp	r0, r3
    1e86:	d055      	beq.n	1f34 <_sercom_get_default_pad+0xc0>
    1e88:	4b3a      	ldr	r3, [pc, #232]	; (1f74 <_sercom_get_default_pad+0x100>)
    1e8a:	4298      	cmp	r0, r3
    1e8c:	d038      	beq.n	1f00 <_sercom_get_default_pad+0x8c>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1e8e:	2000      	movs	r0, #0
}
    1e90:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1e92:	2384      	movs	r3, #132	; 0x84
    1e94:	05db      	lsls	r3, r3, #23
    1e96:	4298      	cmp	r0, r3
    1e98:	d00c      	beq.n	1eb4 <_sercom_get_default_pad+0x40>
    1e9a:	4b37      	ldr	r3, [pc, #220]	; (1f78 <_sercom_get_default_pad+0x104>)
    1e9c:	4298      	cmp	r0, r3
    1e9e:	d1f6      	bne.n	1e8e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1ea0:	2901      	cmp	r1, #1
    1ea2:	d017      	beq.n	1ed4 <_sercom_get_default_pad+0x60>
    1ea4:	2900      	cmp	r1, #0
    1ea6:	d057      	beq.n	1f58 <_sercom_get_default_pad+0xe4>
    1ea8:	2902      	cmp	r1, #2
    1eaa:	d015      	beq.n	1ed8 <_sercom_get_default_pad+0x64>
    1eac:	2903      	cmp	r1, #3
    1eae:	d015      	beq.n	1edc <_sercom_get_default_pad+0x68>
	return 0;
    1eb0:	2000      	movs	r0, #0
    1eb2:	e7ed      	b.n	1e90 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1eb4:	2901      	cmp	r1, #1
    1eb6:	d007      	beq.n	1ec8 <_sercom_get_default_pad+0x54>
    1eb8:	2900      	cmp	r1, #0
    1eba:	d04b      	beq.n	1f54 <_sercom_get_default_pad+0xe0>
    1ebc:	2902      	cmp	r1, #2
    1ebe:	d005      	beq.n	1ecc <_sercom_get_default_pad+0x58>
    1ec0:	2903      	cmp	r1, #3
    1ec2:	d005      	beq.n	1ed0 <_sercom_get_default_pad+0x5c>
	return 0;
    1ec4:	2000      	movs	r0, #0
    1ec6:	e7e3      	b.n	1e90 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1ec8:	482c      	ldr	r0, [pc, #176]	; (1f7c <_sercom_get_default_pad+0x108>)
    1eca:	e7e1      	b.n	1e90 <_sercom_get_default_pad+0x1c>
    1ecc:	482c      	ldr	r0, [pc, #176]	; (1f80 <_sercom_get_default_pad+0x10c>)
    1ece:	e7df      	b.n	1e90 <_sercom_get_default_pad+0x1c>
    1ed0:	482c      	ldr	r0, [pc, #176]	; (1f84 <_sercom_get_default_pad+0x110>)
    1ed2:	e7dd      	b.n	1e90 <_sercom_get_default_pad+0x1c>
    1ed4:	482c      	ldr	r0, [pc, #176]	; (1f88 <_sercom_get_default_pad+0x114>)
    1ed6:	e7db      	b.n	1e90 <_sercom_get_default_pad+0x1c>
    1ed8:	482c      	ldr	r0, [pc, #176]	; (1f8c <_sercom_get_default_pad+0x118>)
    1eda:	e7d9      	b.n	1e90 <_sercom_get_default_pad+0x1c>
    1edc:	482c      	ldr	r0, [pc, #176]	; (1f90 <_sercom_get_default_pad+0x11c>)
    1ede:	e7d7      	b.n	1e90 <_sercom_get_default_pad+0x1c>
    1ee0:	2901      	cmp	r1, #1
    1ee2:	d007      	beq.n	1ef4 <_sercom_get_default_pad+0x80>
    1ee4:	2900      	cmp	r1, #0
    1ee6:	d039      	beq.n	1f5c <_sercom_get_default_pad+0xe8>
    1ee8:	2902      	cmp	r1, #2
    1eea:	d005      	beq.n	1ef8 <_sercom_get_default_pad+0x84>
    1eec:	2903      	cmp	r1, #3
    1eee:	d005      	beq.n	1efc <_sercom_get_default_pad+0x88>
	return 0;
    1ef0:	2000      	movs	r0, #0
    1ef2:	e7cd      	b.n	1e90 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1ef4:	4827      	ldr	r0, [pc, #156]	; (1f94 <_sercom_get_default_pad+0x120>)
    1ef6:	e7cb      	b.n	1e90 <_sercom_get_default_pad+0x1c>
    1ef8:	4827      	ldr	r0, [pc, #156]	; (1f98 <_sercom_get_default_pad+0x124>)
    1efa:	e7c9      	b.n	1e90 <_sercom_get_default_pad+0x1c>
    1efc:	4827      	ldr	r0, [pc, #156]	; (1f9c <_sercom_get_default_pad+0x128>)
    1efe:	e7c7      	b.n	1e90 <_sercom_get_default_pad+0x1c>
    1f00:	2901      	cmp	r1, #1
    1f02:	d007      	beq.n	1f14 <_sercom_get_default_pad+0xa0>
    1f04:	2900      	cmp	r1, #0
    1f06:	d02b      	beq.n	1f60 <_sercom_get_default_pad+0xec>
    1f08:	2902      	cmp	r1, #2
    1f0a:	d005      	beq.n	1f18 <_sercom_get_default_pad+0xa4>
    1f0c:	2903      	cmp	r1, #3
    1f0e:	d005      	beq.n	1f1c <_sercom_get_default_pad+0xa8>
	return 0;
    1f10:	2000      	movs	r0, #0
    1f12:	e7bd      	b.n	1e90 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1f14:	4822      	ldr	r0, [pc, #136]	; (1fa0 <_sercom_get_default_pad+0x12c>)
    1f16:	e7bb      	b.n	1e90 <_sercom_get_default_pad+0x1c>
    1f18:	4822      	ldr	r0, [pc, #136]	; (1fa4 <_sercom_get_default_pad+0x130>)
    1f1a:	e7b9      	b.n	1e90 <_sercom_get_default_pad+0x1c>
    1f1c:	4822      	ldr	r0, [pc, #136]	; (1fa8 <_sercom_get_default_pad+0x134>)
    1f1e:	e7b7      	b.n	1e90 <_sercom_get_default_pad+0x1c>
    1f20:	2902      	cmp	r1, #2
    1f22:	d003      	beq.n	1f2c <_sercom_get_default_pad+0xb8>
    1f24:	2903      	cmp	r1, #3
    1f26:	d003      	beq.n	1f30 <_sercom_get_default_pad+0xbc>
    1f28:	2000      	movs	r0, #0
    1f2a:	e7b1      	b.n	1e90 <_sercom_get_default_pad+0x1c>
    1f2c:	481f      	ldr	r0, [pc, #124]	; (1fac <_sercom_get_default_pad+0x138>)
    1f2e:	e7af      	b.n	1e90 <_sercom_get_default_pad+0x1c>
    1f30:	481f      	ldr	r0, [pc, #124]	; (1fb0 <_sercom_get_default_pad+0x13c>)
    1f32:	e7ad      	b.n	1e90 <_sercom_get_default_pad+0x1c>
    1f34:	2901      	cmp	r1, #1
    1f36:	d007      	beq.n	1f48 <_sercom_get_default_pad+0xd4>
    1f38:	2900      	cmp	r1, #0
    1f3a:	d013      	beq.n	1f64 <_sercom_get_default_pad+0xf0>
    1f3c:	2902      	cmp	r1, #2
    1f3e:	d005      	beq.n	1f4c <_sercom_get_default_pad+0xd8>
    1f40:	2903      	cmp	r1, #3
    1f42:	d005      	beq.n	1f50 <_sercom_get_default_pad+0xdc>
	return 0;
    1f44:	2000      	movs	r0, #0
    1f46:	e7a3      	b.n	1e90 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1f48:	481a      	ldr	r0, [pc, #104]	; (1fb4 <_sercom_get_default_pad+0x140>)
    1f4a:	e7a1      	b.n	1e90 <_sercom_get_default_pad+0x1c>
    1f4c:	481a      	ldr	r0, [pc, #104]	; (1fb8 <_sercom_get_default_pad+0x144>)
    1f4e:	e79f      	b.n	1e90 <_sercom_get_default_pad+0x1c>
    1f50:	481a      	ldr	r0, [pc, #104]	; (1fbc <_sercom_get_default_pad+0x148>)
    1f52:	e79d      	b.n	1e90 <_sercom_get_default_pad+0x1c>
    1f54:	481a      	ldr	r0, [pc, #104]	; (1fc0 <_sercom_get_default_pad+0x14c>)
    1f56:	e79b      	b.n	1e90 <_sercom_get_default_pad+0x1c>
    1f58:	2003      	movs	r0, #3
    1f5a:	e799      	b.n	1e90 <_sercom_get_default_pad+0x1c>
    1f5c:	4819      	ldr	r0, [pc, #100]	; (1fc4 <_sercom_get_default_pad+0x150>)
    1f5e:	e797      	b.n	1e90 <_sercom_get_default_pad+0x1c>
    1f60:	4819      	ldr	r0, [pc, #100]	; (1fc8 <_sercom_get_default_pad+0x154>)
    1f62:	e795      	b.n	1e90 <_sercom_get_default_pad+0x1c>
    1f64:	4819      	ldr	r0, [pc, #100]	; (1fcc <_sercom_get_default_pad+0x158>)
    1f66:	e793      	b.n	1e90 <_sercom_get_default_pad+0x1c>
    1f68:	42000800 	.word	0x42000800
    1f6c:	42001000 	.word	0x42001000
    1f70:	43000400 	.word	0x43000400
    1f74:	42000c00 	.word	0x42000c00
    1f78:	42000400 	.word	0x42000400
    1f7c:	00050003 	.word	0x00050003
    1f80:	00060003 	.word	0x00060003
    1f84:	00070003 	.word	0x00070003
    1f88:	00010003 	.word	0x00010003
    1f8c:	001e0003 	.word	0x001e0003
    1f90:	001f0003 	.word	0x001f0003
    1f94:	00090003 	.word	0x00090003
    1f98:	000a0003 	.word	0x000a0003
    1f9c:	000b0003 	.word	0x000b0003
    1fa0:	00110003 	.word	0x00110003
    1fa4:	00120003 	.word	0x00120003
    1fa8:	00130003 	.word	0x00130003
    1fac:	000e0003 	.word	0x000e0003
    1fb0:	000f0003 	.word	0x000f0003
    1fb4:	00170003 	.word	0x00170003
    1fb8:	00180003 	.word	0x00180003
    1fbc:	00190003 	.word	0x00190003
    1fc0:	00040003 	.word	0x00040003
    1fc4:	00080003 	.word	0x00080003
    1fc8:	00100003 	.word	0x00100003
    1fcc:	00160003 	.word	0x00160003

00001fd0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1fd0:	b530      	push	{r4, r5, lr}
    1fd2:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1fd4:	4b0b      	ldr	r3, [pc, #44]	; (2004 <STACK_SIZE+0x4>)
    1fd6:	466a      	mov	r2, sp
    1fd8:	cb32      	ldmia	r3!, {r1, r4, r5}
    1fda:	c232      	stmia	r2!, {r1, r4, r5}
    1fdc:	cb32      	ldmia	r3!, {r1, r4, r5}
    1fde:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1fe0:	9b00      	ldr	r3, [sp, #0]
    1fe2:	4283      	cmp	r3, r0
    1fe4:	d00b      	beq.n	1ffe <_sercom_get_sercom_inst_index+0x2e>
    1fe6:	2301      	movs	r3, #1
    1fe8:	009a      	lsls	r2, r3, #2
    1fea:	4669      	mov	r1, sp
    1fec:	5852      	ldr	r2, [r2, r1]
    1fee:	4282      	cmp	r2, r0
    1ff0:	d006      	beq.n	2000 <STACK_SIZE>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1ff2:	3301      	adds	r3, #1
    1ff4:	2b06      	cmp	r3, #6
    1ff6:	d1f7      	bne.n	1fe8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1ff8:	2000      	movs	r0, #0
}
    1ffa:	b007      	add	sp, #28
    1ffc:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1ffe:	2300      	movs	r3, #0
			return i;
    2000:	b2d8      	uxtb	r0, r3
    2002:	e7fa      	b.n	1ffa <_sercom_get_sercom_inst_index+0x2a>
    2004:	00019c10 	.word	0x00019c10

00002008 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2008:	4770      	bx	lr
	...

0000200c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    200c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    200e:	4b0a      	ldr	r3, [pc, #40]	; (2038 <_sercom_set_handler+0x2c>)
    2010:	781b      	ldrb	r3, [r3, #0]
    2012:	2b00      	cmp	r3, #0
    2014:	d10c      	bne.n	2030 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2016:	4f09      	ldr	r7, [pc, #36]	; (203c <_sercom_set_handler+0x30>)
    2018:	4e09      	ldr	r6, [pc, #36]	; (2040 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    201a:	4d0a      	ldr	r5, [pc, #40]	; (2044 <_sercom_set_handler+0x38>)
    201c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    201e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    2020:	195a      	adds	r2, r3, r5
    2022:	6014      	str	r4, [r2, #0]
    2024:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2026:	2b18      	cmp	r3, #24
    2028:	d1f9      	bne.n	201e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    202a:	2201      	movs	r2, #1
    202c:	4b02      	ldr	r3, [pc, #8]	; (2038 <_sercom_set_handler+0x2c>)
    202e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2030:	0080      	lsls	r0, r0, #2
    2032:	4b02      	ldr	r3, [pc, #8]	; (203c <_sercom_set_handler+0x30>)
    2034:	50c1      	str	r1, [r0, r3]
}
    2036:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2038:	20000a46 	.word	0x20000a46
    203c:	20000a48 	.word	0x20000a48
    2040:	00002009 	.word	0x00002009
    2044:	200011a8 	.word	0x200011a8

00002048 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2048:	b500      	push	{lr}
    204a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    204c:	2308      	movs	r3, #8
    204e:	466a      	mov	r2, sp
    2050:	7013      	strb	r3, [r2, #0]
    2052:	3301      	adds	r3, #1
    2054:	7053      	strb	r3, [r2, #1]
    2056:	3301      	adds	r3, #1
    2058:	7093      	strb	r3, [r2, #2]
    205a:	3301      	adds	r3, #1
    205c:	70d3      	strb	r3, [r2, #3]
    205e:	3301      	adds	r3, #1
    2060:	7113      	strb	r3, [r2, #4]
    2062:	3301      	adds	r3, #1
    2064:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    2066:	4b03      	ldr	r3, [pc, #12]	; (2074 <_sercom_get_interrupt_vector+0x2c>)
    2068:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    206a:	466b      	mov	r3, sp
    206c:	5618      	ldrsb	r0, [r3, r0]
}
    206e:	b003      	add	sp, #12
    2070:	bd00      	pop	{pc}
    2072:	46c0      	nop			; (mov r8, r8)
    2074:	00001fd1 	.word	0x00001fd1

00002078 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    2078:	b510      	push	{r4, lr}
    207a:	4b02      	ldr	r3, [pc, #8]	; (2084 <SERCOM0_Handler+0xc>)
    207c:	681b      	ldr	r3, [r3, #0]
    207e:	2000      	movs	r0, #0
    2080:	4798      	blx	r3
    2082:	bd10      	pop	{r4, pc}
    2084:	20000a48 	.word	0x20000a48

00002088 <SERCOM1_Handler>:
    2088:	b510      	push	{r4, lr}
    208a:	4b02      	ldr	r3, [pc, #8]	; (2094 <SERCOM1_Handler+0xc>)
    208c:	685b      	ldr	r3, [r3, #4]
    208e:	2001      	movs	r0, #1
    2090:	4798      	blx	r3
    2092:	bd10      	pop	{r4, pc}
    2094:	20000a48 	.word	0x20000a48

00002098 <SERCOM2_Handler>:
    2098:	b510      	push	{r4, lr}
    209a:	4b02      	ldr	r3, [pc, #8]	; (20a4 <SERCOM2_Handler+0xc>)
    209c:	689b      	ldr	r3, [r3, #8]
    209e:	2002      	movs	r0, #2
    20a0:	4798      	blx	r3
    20a2:	bd10      	pop	{r4, pc}
    20a4:	20000a48 	.word	0x20000a48

000020a8 <SERCOM3_Handler>:
    20a8:	b510      	push	{r4, lr}
    20aa:	4b02      	ldr	r3, [pc, #8]	; (20b4 <SERCOM3_Handler+0xc>)
    20ac:	68db      	ldr	r3, [r3, #12]
    20ae:	2003      	movs	r0, #3
    20b0:	4798      	blx	r3
    20b2:	bd10      	pop	{r4, pc}
    20b4:	20000a48 	.word	0x20000a48

000020b8 <SERCOM4_Handler>:
    20b8:	b510      	push	{r4, lr}
    20ba:	4b02      	ldr	r3, [pc, #8]	; (20c4 <SERCOM4_Handler+0xc>)
    20bc:	691b      	ldr	r3, [r3, #16]
    20be:	2004      	movs	r0, #4
    20c0:	4798      	blx	r3
    20c2:	bd10      	pop	{r4, pc}
    20c4:	20000a48 	.word	0x20000a48

000020c8 <SERCOM5_Handler>:
    20c8:	b510      	push	{r4, lr}
    20ca:	4b02      	ldr	r3, [pc, #8]	; (20d4 <SERCOM5_Handler+0xc>)
    20cc:	695b      	ldr	r3, [r3, #20]
    20ce:	2005      	movs	r0, #5
    20d0:	4798      	blx	r3
    20d2:	bd10      	pop	{r4, pc}
    20d4:	20000a48 	.word	0x20000a48

000020d8 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    20d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    20da:	46d6      	mov	lr, sl
    20dc:	464f      	mov	r7, r9
    20de:	4646      	mov	r6, r8
    20e0:	b5c0      	push	{r6, r7, lr}
    20e2:	b08a      	sub	sp, #40	; 0x28
    20e4:	0006      	movs	r6, r0
    20e6:	000f      	movs	r7, r1
    20e8:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    20ea:	6031      	str	r1, [r6, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    20ec:	680b      	ldr	r3, [r1, #0]
    20ee:	079b      	lsls	r3, r3, #30
    20f0:	d40a      	bmi.n	2108 <spi_init+0x30>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    20f2:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    20f4:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    20f6:	07db      	lsls	r3, r3, #31
    20f8:	d400      	bmi.n	20fc <spi_init+0x24>
    20fa:	e097      	b.n	222c <spi_init+0x154>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    20fc:	b00a      	add	sp, #40	; 0x28
    20fe:	bc1c      	pop	{r2, r3, r4}
    2100:	4690      	mov	r8, r2
    2102:	4699      	mov	r9, r3
    2104:	46a2      	mov	sl, r4
    2106:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    2108:	6a93      	ldr	r3, [r2, #40]	; 0x28
    210a:	9305      	str	r3, [sp, #20]
    210c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    210e:	9306      	str	r3, [sp, #24]
    2110:	6b13      	ldr	r3, [r2, #48]	; 0x30
    2112:	9307      	str	r3, [sp, #28]
    2114:	6b53      	ldr	r3, [r2, #52]	; 0x34
    2116:	9308      	str	r3, [sp, #32]
    2118:	2500      	movs	r5, #0
    211a:	e00a      	b.n	2132 <spi_init+0x5a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    211c:	0038      	movs	r0, r7
    211e:	4b9a      	ldr	r3, [pc, #616]	; (2388 <spi_init+0x2b0>)
    2120:	4798      	blx	r3
    2122:	e00e      	b.n	2142 <spi_init+0x6a>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    2124:	230f      	movs	r3, #15
    2126:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    2128:	4581      	cmp	r9, r0
    212a:	d130      	bne.n	218e <spi_init+0xb6>
    212c:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    212e:	2d04      	cmp	r5, #4
    2130:	d031      	beq.n	2196 <spi_init+0xbe>
    2132:	b2e9      	uxtb	r1, r5
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2134:	00ab      	lsls	r3, r5, #2
    2136:	aa02      	add	r2, sp, #8
    2138:	200c      	movs	r0, #12
    213a:	1812      	adds	r2, r2, r0
    213c:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    213e:	2800      	cmp	r0, #0
    2140:	d0ec      	beq.n	211c <spi_init+0x44>
		if (current_pinmux == PINMUX_UNUSED) {
    2142:	1c43      	adds	r3, r0, #1
    2144:	d0f2      	beq.n	212c <spi_init+0x54>
		if ((current_pinmux & 0xFFFF) !=
    2146:	0401      	lsls	r1, r0, #16
    2148:	0c0b      	lsrs	r3, r1, #16
    214a:	4699      	mov	r9, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    214c:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    214e:	b2c3      	uxtb	r3, r0
    2150:	469c      	mov	ip, r3
		return NULL;
    2152:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2154:	0602      	lsls	r2, r0, #24
    2156:	d405      	bmi.n	2164 <spi_init+0x8c>
		return &(ports[port_index]->Group[group_index]);
    2158:	4663      	mov	r3, ip
    215a:	095b      	lsrs	r3, r3, #5
    215c:	01db      	lsls	r3, r3, #7
    215e:	4a8b      	ldr	r2, [pc, #556]	; (238c <spi_init+0x2b4>)
    2160:	4690      	mov	r8, r2
    2162:	4443      	add	r3, r8
	uint32_t pin_index = (gpio_pin % 32);
    2164:	221f      	movs	r2, #31
    2166:	4660      	mov	r0, ip
    2168:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    216a:	1898      	adds	r0, r3, r2
    216c:	3040      	adds	r0, #64	; 0x40
    216e:	7800      	ldrb	r0, [r0, #0]
    2170:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    2172:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    2174:	4651      	mov	r1, sl
    2176:	07c9      	lsls	r1, r1, #31
    2178:	d5d6      	bpl.n	2128 <spi_init+0x50>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    217a:	0852      	lsrs	r2, r2, #1
    217c:	189b      	adds	r3, r3, r2
    217e:	3330      	adds	r3, #48	; 0x30
    2180:	7818      	ldrb	r0, [r3, #0]
    2182:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    2184:	4663      	mov	r3, ip
    2186:	07db      	lsls	r3, r3, #31
    2188:	d5cc      	bpl.n	2124 <spi_init+0x4c>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    218a:	0900      	lsrs	r0, r0, #4
    218c:	e7cc      	b.n	2128 <spi_init+0x50>
			module->hw = NULL;
    218e:	2300      	movs	r3, #0
    2190:	6033      	str	r3, [r6, #0]
			return STATUS_ERR_DENIED;
    2192:	201c      	movs	r0, #28
    2194:	e7b2      	b.n	20fc <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    2196:	2011      	movs	r0, #17
    2198:	4b7d      	ldr	r3, [pc, #500]	; (2390 <spi_init+0x2b8>)
    219a:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    219c:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    219e:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    21a0:	2a01      	cmp	r2, #1
    21a2:	d026      	beq.n	21f2 <spi_init+0x11a>
	ctrla |= config->mux_setting;
    21a4:	6863      	ldr	r3, [r4, #4]
    21a6:	68a2      	ldr	r2, [r4, #8]
    21a8:	4313      	orrs	r3, r2
    21aa:	68e2      	ldr	r2, [r4, #12]
    21ac:	4313      	orrs	r3, r2
    21ae:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    21b0:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
    21b2:	7c61      	ldrb	r1, [r4, #17]
    21b4:	2900      	cmp	r1, #0
    21b6:	d001      	beq.n	21bc <spi_init+0xe4>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    21b8:	2180      	movs	r1, #128	; 0x80
    21ba:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    21bc:	7ca1      	ldrb	r1, [r4, #18]
    21be:	2900      	cmp	r1, #0
    21c0:	d002      	beq.n	21c8 <spi_init+0xf0>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    21c2:	2180      	movs	r1, #128	; 0x80
    21c4:	0289      	lsls	r1, r1, #10
    21c6:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    21c8:	7ce1      	ldrb	r1, [r4, #19]
    21ca:	2900      	cmp	r1, #0
    21cc:	d002      	beq.n	21d4 <spi_init+0xfc>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    21ce:	2180      	movs	r1, #128	; 0x80
    21d0:	0089      	lsls	r1, r1, #2
    21d2:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    21d4:	7d21      	ldrb	r1, [r4, #20]
    21d6:	2900      	cmp	r1, #0
    21d8:	d002      	beq.n	21e0 <spi_init+0x108>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    21da:	2180      	movs	r1, #128	; 0x80
    21dc:	0189      	lsls	r1, r1, #6
    21de:	430a      	orrs	r2, r1
	if (spi_module->CTRLA.reg == ctrla &&
    21e0:	6839      	ldr	r1, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    21e2:	2002      	movs	r0, #2
    21e4:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
    21e6:	428b      	cmp	r3, r1
    21e8:	d017      	beq.n	221a <spi_init+0x142>
	module->hw = NULL;
    21ea:	2300      	movs	r3, #0
    21ec:	6033      	str	r3, [r6, #0]
	return STATUS_ERR_DENIED;
    21ee:	201c      	movs	r0, #28
    21f0:	e784      	b.n	20fc <spi_init+0x24>
		enum status_code error_code = _sercom_get_sync_baud_val(
    21f2:	aa04      	add	r2, sp, #16
    21f4:	0001      	movs	r1, r0
    21f6:	69a0      	ldr	r0, [r4, #24]
    21f8:	4b66      	ldr	r3, [pc, #408]	; (2394 <spi_init+0x2bc>)
    21fa:	4798      	blx	r3
    21fc:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    21fe:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    2200:	2b00      	cmp	r3, #0
    2202:	d000      	beq.n	2206 <spi_init+0x12e>
    2204:	e77a      	b.n	20fc <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    2206:	7b3b      	ldrb	r3, [r7, #12]
    2208:	b2db      	uxtb	r3, r3
    220a:	aa04      	add	r2, sp, #16
    220c:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    220e:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    2210:	429a      	cmp	r2, r3
    2212:	d000      	beq.n	2216 <spi_init+0x13e>
    2214:	e772      	b.n	20fc <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    2216:	350c      	adds	r5, #12
    2218:	e7c4      	b.n	21a4 <spi_init+0xcc>
			spi_module->CTRLB.reg == ctrlb) {
    221a:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    221c:	4293      	cmp	r3, r2
    221e:	d1e4      	bne.n	21ea <spi_init+0x112>
		module->mode           = config->mode;
    2220:	7823      	ldrb	r3, [r4, #0]
    2222:	7173      	strb	r3, [r6, #5]
		module->character_size = config->character_size;
    2224:	7c23      	ldrb	r3, [r4, #16]
    2226:	71b3      	strb	r3, [r6, #6]
		return STATUS_OK;
    2228:	2000      	movs	r0, #0
    222a:	e767      	b.n	20fc <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    222c:	0008      	movs	r0, r1
    222e:	4b5a      	ldr	r3, [pc, #360]	; (2398 <spi_init+0x2c0>)
    2230:	4798      	blx	r3
	if (sercom_index == 5) {
    2232:	2805      	cmp	r0, #5
    2234:	d100      	bne.n	2238 <spi_init+0x160>
    2236:	e09f      	b.n	2378 <spi_init+0x2a0>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2238:	0003      	movs	r3, r0
    223a:	3312      	adds	r3, #18
			MCLK->APBCMASK.reg |= mask;
    223c:	4957      	ldr	r1, [pc, #348]	; (239c <spi_init+0x2c4>)
    223e:	69cd      	ldr	r5, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    2240:	2201      	movs	r2, #1
    2242:	4082      	lsls	r2, r0
    2244:	432a      	orrs	r2, r5
    2246:	61ca      	str	r2, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    2248:	a909      	add	r1, sp, #36	; 0x24
    224a:	2524      	movs	r5, #36	; 0x24
    224c:	5d62      	ldrb	r2, [r4, r5]
    224e:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2250:	b2db      	uxtb	r3, r3
    2252:	9301      	str	r3, [sp, #4]
    2254:	0018      	movs	r0, r3
    2256:	4b52      	ldr	r3, [pc, #328]	; (23a0 <spi_init+0x2c8>)
    2258:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    225a:	9801      	ldr	r0, [sp, #4]
    225c:	4b51      	ldr	r3, [pc, #324]	; (23a4 <spi_init+0x2cc>)
    225e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2260:	5d60      	ldrb	r0, [r4, r5]
    2262:	2100      	movs	r1, #0
    2264:	4b50      	ldr	r3, [pc, #320]	; (23a8 <spi_init+0x2d0>)
    2266:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    2268:	7823      	ldrb	r3, [r4, #0]
    226a:	2b01      	cmp	r3, #1
    226c:	d019      	beq.n	22a2 <spi_init+0x1ca>
	SercomSpi *const spi_module = &(module->hw->SPI);
    226e:	6833      	ldr	r3, [r6, #0]
    2270:	4698      	mov	r8, r3
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2272:	ab04      	add	r3, sp, #16
    2274:	2280      	movs	r2, #128	; 0x80
    2276:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2278:	2200      	movs	r2, #0
    227a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    227c:	2101      	movs	r1, #1
    227e:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    2280:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    2282:	7823      	ldrb	r3, [r4, #0]
    2284:	2b00      	cmp	r3, #0
    2286:	d101      	bne.n	228c <spi_init+0x1b4>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2288:	ab04      	add	r3, sp, #16
    228a:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    228c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    228e:	9305      	str	r3, [sp, #20]
    2290:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2292:	9306      	str	r3, [sp, #24]
    2294:	6b23      	ldr	r3, [r4, #48]	; 0x30
    2296:	9307      	str	r3, [sp, #28]
    2298:	6b63      	ldr	r3, [r4, #52]	; 0x34
    229a:	9308      	str	r3, [sp, #32]
    229c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    229e:	ad05      	add	r5, sp, #20
    22a0:	e011      	b.n	22c6 <spi_init+0x1ee>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    22a2:	683b      	ldr	r3, [r7, #0]
    22a4:	220c      	movs	r2, #12
    22a6:	4313      	orrs	r3, r2
    22a8:	603b      	str	r3, [r7, #0]
    22aa:	e7e0      	b.n	226e <spi_init+0x196>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    22ac:	4640      	mov	r0, r8
    22ae:	4b36      	ldr	r3, [pc, #216]	; (2388 <spi_init+0x2b0>)
    22b0:	4798      	blx	r3
    22b2:	e00d      	b.n	22d0 <spi_init+0x1f8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    22b4:	a904      	add	r1, sp, #16
    22b6:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    22b8:	0c00      	lsrs	r0, r0, #16
    22ba:	b2c0      	uxtb	r0, r0
    22bc:	4b3b      	ldr	r3, [pc, #236]	; (23ac <spi_init+0x2d4>)
    22be:	4798      	blx	r3
    22c0:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    22c2:	2f04      	cmp	r7, #4
    22c4:	d007      	beq.n	22d6 <spi_init+0x1fe>
    22c6:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    22c8:	00bb      	lsls	r3, r7, #2
    22ca:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    22cc:	2800      	cmp	r0, #0
    22ce:	d0ed      	beq.n	22ac <spi_init+0x1d4>
		if (current_pinmux != PINMUX_UNUSED) {
    22d0:	1c43      	adds	r3, r0, #1
    22d2:	d1ef      	bne.n	22b4 <spi_init+0x1dc>
    22d4:	e7f4      	b.n	22c0 <spi_init+0x1e8>
	module->mode             = config->mode;
    22d6:	7823      	ldrb	r3, [r4, #0]
    22d8:	7173      	strb	r3, [r6, #5]
	module->character_size   = config->character_size;
    22da:	7c23      	ldrb	r3, [r4, #16]
    22dc:	71b3      	strb	r3, [r6, #6]
	module->receiver_enabled = config->receiver_enable;
    22de:	7ca3      	ldrb	r3, [r4, #18]
    22e0:	71f3      	strb	r3, [r6, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    22e2:	7d23      	ldrb	r3, [r4, #20]
    22e4:	7233      	strb	r3, [r6, #8]
	uint16_t baud = 0;
    22e6:	2200      	movs	r2, #0
    22e8:	ab02      	add	r3, sp, #8
    22ea:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    22ec:	7823      	ldrb	r3, [r4, #0]
    22ee:	2b01      	cmp	r3, #1
    22f0:	d02a      	beq.n	2348 <spi_init+0x270>
	ctrla |= config->transfer_mode;
    22f2:	6863      	ldr	r3, [r4, #4]
    22f4:	68a2      	ldr	r2, [r4, #8]
    22f6:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    22f8:	68e2      	ldr	r2, [r4, #12]
    22fa:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    22fc:	7c21      	ldrb	r1, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    22fe:	7c62      	ldrb	r2, [r4, #17]
    2300:	2a00      	cmp	r2, #0
    2302:	d103      	bne.n	230c <spi_init+0x234>
    2304:	4a2a      	ldr	r2, [pc, #168]	; (23b0 <spi_init+0x2d8>)
    2306:	7892      	ldrb	r2, [r2, #2]
    2308:	0792      	lsls	r2, r2, #30
    230a:	d501      	bpl.n	2310 <spi_init+0x238>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    230c:	2280      	movs	r2, #128	; 0x80
    230e:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    2310:	7ca2      	ldrb	r2, [r4, #18]
    2312:	2a00      	cmp	r2, #0
    2314:	d002      	beq.n	231c <spi_init+0x244>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    2316:	2280      	movs	r2, #128	; 0x80
    2318:	0292      	lsls	r2, r2, #10
    231a:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    231c:	7ce2      	ldrb	r2, [r4, #19]
    231e:	2a00      	cmp	r2, #0
    2320:	d002      	beq.n	2328 <spi_init+0x250>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    2322:	2280      	movs	r2, #128	; 0x80
    2324:	0092      	lsls	r2, r2, #2
    2326:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    2328:	7d22      	ldrb	r2, [r4, #20]
    232a:	2a00      	cmp	r2, #0
    232c:	d002      	beq.n	2334 <spi_init+0x25c>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    232e:	2280      	movs	r2, #128	; 0x80
    2330:	0192      	lsls	r2, r2, #6
    2332:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    2334:	4642      	mov	r2, r8
    2336:	6812      	ldr	r2, [r2, #0]
    2338:	4313      	orrs	r3, r2
    233a:	4642      	mov	r2, r8
    233c:	6013      	str	r3, [r2, #0]
	spi_module->CTRLB.reg |= ctrlb;
    233e:	6853      	ldr	r3, [r2, #4]
    2340:	430b      	orrs	r3, r1
    2342:	6053      	str	r3, [r2, #4]
	return STATUS_OK;
    2344:	2000      	movs	r0, #0
    2346:	e6d9      	b.n	20fc <spi_init+0x24>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2348:	6830      	ldr	r0, [r6, #0]
    234a:	4b13      	ldr	r3, [pc, #76]	; (2398 <spi_init+0x2c0>)
    234c:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    234e:	3012      	adds	r0, #18
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    2350:	b2c0      	uxtb	r0, r0
    2352:	4b0f      	ldr	r3, [pc, #60]	; (2390 <spi_init+0x2b8>)
    2354:	4798      	blx	r3
    2356:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    2358:	ab02      	add	r3, sp, #8
    235a:	1d9a      	adds	r2, r3, #6
    235c:	69a0      	ldr	r0, [r4, #24]
    235e:	4b0d      	ldr	r3, [pc, #52]	; (2394 <spi_init+0x2bc>)
    2360:	4798      	blx	r3
    2362:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    2364:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    2366:	2b00      	cmp	r3, #0
    2368:	d000      	beq.n	236c <spi_init+0x294>
    236a:	e6c7      	b.n	20fc <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    236c:	ab02      	add	r3, sp, #8
    236e:	3306      	adds	r3, #6
    2370:	781b      	ldrb	r3, [r3, #0]
    2372:	4642      	mov	r2, r8
    2374:	7313      	strb	r3, [r2, #12]
    2376:	e7bc      	b.n	22f2 <spi_init+0x21a>
			MCLK->APBDMASK.reg |= mask;
    2378:	4a08      	ldr	r2, [pc, #32]	; (239c <spi_init+0x2c4>)
    237a:	6a13      	ldr	r3, [r2, #32]
    237c:	2102      	movs	r1, #2
    237e:	430b      	orrs	r3, r1
    2380:	6213      	str	r3, [r2, #32]
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
    2382:	2318      	movs	r3, #24
    2384:	e760      	b.n	2248 <spi_init+0x170>
    2386:	46c0      	nop			; (mov r8, r8)
    2388:	00001e75 	.word	0x00001e75
    238c:	40002800 	.word	0x40002800
    2390:	00003235 	.word	0x00003235
    2394:	00001d6b 	.word	0x00001d6b
    2398:	00001fd1 	.word	0x00001fd1
    239c:	40000400 	.word	0x40000400
    23a0:	00003211 	.word	0x00003211
    23a4:	000031a1 	.word	0x000031a1
    23a8:	00001e29 	.word	0x00001e29
    23ac:	0000330d 	.word	0x0000330d
    23b0:	41002000 	.word	0x41002000

000023b4 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    23b4:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    23b6:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    23b8:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    23ba:	2c01      	cmp	r4, #1
    23bc:	d001      	beq.n	23c2 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    23be:	0018      	movs	r0, r3
    23c0:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    23c2:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    23c4:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    23c6:	2c00      	cmp	r4, #0
    23c8:	d1f9      	bne.n	23be <spi_select_slave+0xa>
		if (select) {
    23ca:	2a00      	cmp	r2, #0
    23cc:	d058      	beq.n	2480 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    23ce:	784b      	ldrb	r3, [r1, #1]
    23d0:	2b00      	cmp	r3, #0
    23d2:	d044      	beq.n	245e <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    23d4:	6803      	ldr	r3, [r0, #0]
    23d6:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    23d8:	07db      	lsls	r3, r3, #31
    23da:	d410      	bmi.n	23fe <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    23dc:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    23de:	09d1      	lsrs	r1, r2, #7
		return NULL;
    23e0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    23e2:	2900      	cmp	r1, #0
    23e4:	d104      	bne.n	23f0 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    23e6:	0953      	lsrs	r3, r2, #5
    23e8:	01db      	lsls	r3, r3, #7
    23ea:	492e      	ldr	r1, [pc, #184]	; (24a4 <spi_select_slave+0xf0>)
    23ec:	468c      	mov	ip, r1
    23ee:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    23f0:	211f      	movs	r1, #31
    23f2:	4011      	ands	r1, r2
    23f4:	2201      	movs	r2, #1
    23f6:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    23f8:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    23fa:	2305      	movs	r3, #5
    23fc:	e7df      	b.n	23be <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    23fe:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    2400:	09d4      	lsrs	r4, r2, #7
		return NULL;
    2402:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2404:	2c00      	cmp	r4, #0
    2406:	d104      	bne.n	2412 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    2408:	0953      	lsrs	r3, r2, #5
    240a:	01db      	lsls	r3, r3, #7
    240c:	4c25      	ldr	r4, [pc, #148]	; (24a4 <spi_select_slave+0xf0>)
    240e:	46a4      	mov	ip, r4
    2410:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2412:	241f      	movs	r4, #31
    2414:	4014      	ands	r4, r2
    2416:	2201      	movs	r2, #1
    2418:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    241a:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    241c:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    241e:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2420:	07d2      	lsls	r2, r2, #31
    2422:	d501      	bpl.n	2428 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2424:	788a      	ldrb	r2, [r1, #2]
    2426:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    2428:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    242a:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    242c:	2a00      	cmp	r2, #0
    242e:	d1c6      	bne.n	23be <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2430:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    2432:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2434:	7e13      	ldrb	r3, [r2, #24]
    2436:	420b      	tst	r3, r1
    2438:	d0fc      	beq.n	2434 <spi_select_slave+0x80>
    243a:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    243c:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    243e:	0749      	lsls	r1, r1, #29
    2440:	d5bd      	bpl.n	23be <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2442:	8b53      	ldrh	r3, [r2, #26]
    2444:	075b      	lsls	r3, r3, #29
    2446:	d501      	bpl.n	244c <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2448:	2304      	movs	r3, #4
    244a:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    244c:	7983      	ldrb	r3, [r0, #6]
    244e:	2b01      	cmp	r3, #1
    2450:	d002      	beq.n	2458 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2452:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2454:	2300      	movs	r3, #0
    2456:	e7b2      	b.n	23be <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2458:	6a93      	ldr	r3, [r2, #40]	; 0x28
    245a:	2300      	movs	r3, #0
    245c:	e7af      	b.n	23be <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    245e:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    2460:	09d1      	lsrs	r1, r2, #7
		return NULL;
    2462:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2464:	2900      	cmp	r1, #0
    2466:	d104      	bne.n	2472 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    2468:	0953      	lsrs	r3, r2, #5
    246a:	01db      	lsls	r3, r3, #7
    246c:	490d      	ldr	r1, [pc, #52]	; (24a4 <spi_select_slave+0xf0>)
    246e:	468c      	mov	ip, r1
    2470:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2472:	211f      	movs	r1, #31
    2474:	4011      	ands	r1, r2
    2476:	2201      	movs	r2, #1
    2478:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    247a:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    247c:	2300      	movs	r3, #0
    247e:	e79e      	b.n	23be <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    2480:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    2482:	09d1      	lsrs	r1, r2, #7
		return NULL;
    2484:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2486:	2900      	cmp	r1, #0
    2488:	d104      	bne.n	2494 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    248a:	0953      	lsrs	r3, r2, #5
    248c:	01db      	lsls	r3, r3, #7
    248e:	4905      	ldr	r1, [pc, #20]	; (24a4 <spi_select_slave+0xf0>)
    2490:	468c      	mov	ip, r1
    2492:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2494:	211f      	movs	r1, #31
    2496:	4011      	ands	r1, r2
    2498:	2201      	movs	r2, #1
    249a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    249c:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    249e:	2300      	movs	r3, #0
    24a0:	e78d      	b.n	23be <spi_select_slave+0xa>
    24a2:	46c0      	nop			; (mov r8, r8)
    24a4:	40002800 	.word	0x40002800

000024a8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    24a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    24aa:	46de      	mov	lr, fp
    24ac:	4657      	mov	r7, sl
    24ae:	464e      	mov	r6, r9
    24b0:	4645      	mov	r5, r8
    24b2:	b5e0      	push	{r5, r6, r7, lr}
    24b4:	b091      	sub	sp, #68	; 0x44
    24b6:	0005      	movs	r5, r0
    24b8:	000c      	movs	r4, r1
    24ba:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    24bc:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    24be:	0008      	movs	r0, r1
    24c0:	4bc4      	ldr	r3, [pc, #784]	; (27d4 <usart_init+0x32c>)
    24c2:	4798      	blx	r3
    24c4:	0002      	movs	r2, r0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	if (sercom_index == 5) {
    24c6:	2805      	cmp	r0, #5
    24c8:	d00d      	beq.n	24e6 <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    24ca:	0007      	movs	r7, r0
    24cc:	3712      	adds	r7, #18
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    24ce:	0003      	movs	r3, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    24d0:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    24d2:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    24d4:	07c9      	lsls	r1, r1, #31
    24d6:	d509      	bpl.n	24ec <usart_init+0x44>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    24d8:	b011      	add	sp, #68	; 0x44
    24da:	bc3c      	pop	{r2, r3, r4, r5}
    24dc:	4690      	mov	r8, r2
    24de:	4699      	mov	r9, r3
    24e0:	46a2      	mov	sl, r4
    24e2:	46ab      	mov	fp, r5
    24e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    24e6:	2718      	movs	r7, #24
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    24e8:	2301      	movs	r3, #1
    24ea:	e7f1      	b.n	24d0 <usart_init+0x28>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    24ec:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
    24ee:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    24f0:	0789      	lsls	r1, r1, #30
    24f2:	d4f1      	bmi.n	24d8 <usart_init+0x30>
	if (sercom_index == 5) {
    24f4:	2a05      	cmp	r2, #5
    24f6:	d049      	beq.n	258c <usart_init+0xe4>
			MCLK->APBCMASK.reg |= mask;
    24f8:	49b7      	ldr	r1, [pc, #732]	; (27d8 <usart_init+0x330>)
    24fa:	69c8      	ldr	r0, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    24fc:	2201      	movs	r2, #1
    24fe:	409a      	lsls	r2, r3
    2500:	0013      	movs	r3, r2
    2502:	4303      	orrs	r3, r0
    2504:	61cb      	str	r3, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    2506:	a90f      	add	r1, sp, #60	; 0x3c
    2508:	232d      	movs	r3, #45	; 0x2d
    250a:	4698      	mov	r8, r3
    250c:	5cf3      	ldrb	r3, [r6, r3]
    250e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2510:	b2ff      	uxtb	r7, r7
    2512:	0038      	movs	r0, r7
    2514:	4bb1      	ldr	r3, [pc, #708]	; (27dc <usart_init+0x334>)
    2516:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2518:	0038      	movs	r0, r7
    251a:	4bb1      	ldr	r3, [pc, #708]	; (27e0 <usart_init+0x338>)
    251c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    251e:	4643      	mov	r3, r8
    2520:	5cf0      	ldrb	r0, [r6, r3]
    2522:	2100      	movs	r1, #0
    2524:	4baf      	ldr	r3, [pc, #700]	; (27e4 <usart_init+0x33c>)
    2526:	4798      	blx	r3
	module->character_size = config->character_size;
    2528:	7af3      	ldrb	r3, [r6, #11]
    252a:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    252c:	2324      	movs	r3, #36	; 0x24
    252e:	5cf3      	ldrb	r3, [r6, r3]
    2530:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    2532:	2325      	movs	r3, #37	; 0x25
    2534:	5cf3      	ldrb	r3, [r6, r3]
    2536:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    2538:	7ef3      	ldrb	r3, [r6, #27]
    253a:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    253c:	7f33      	ldrb	r3, [r6, #28]
    253e:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2540:	682b      	ldr	r3, [r5, #0]
    2542:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2544:	0018      	movs	r0, r3
    2546:	4ba3      	ldr	r3, [pc, #652]	; (27d4 <usart_init+0x32c>)
    2548:	4798      	blx	r3
	if (sercom_index == 5) {
    254a:	2805      	cmp	r0, #5
    254c:	d026      	beq.n	259c <usart_init+0xf4>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    254e:	3012      	adds	r0, #18
	uint16_t baud  = 0;
    2550:	2200      	movs	r2, #0
    2552:	230e      	movs	r3, #14
    2554:	a906      	add	r1, sp, #24
    2556:	468c      	mov	ip, r1
    2558:	4463      	add	r3, ip
    255a:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    255c:	8a32      	ldrh	r2, [r6, #16]
    255e:	9202      	str	r2, [sp, #8]
    2560:	2380      	movs	r3, #128	; 0x80
    2562:	01db      	lsls	r3, r3, #7
    2564:	429a      	cmp	r2, r3
    2566:	d100      	bne.n	256a <usart_init+0xc2>
    2568:	e0a7      	b.n	26ba <usart_init+0x212>
    256a:	d919      	bls.n	25a0 <usart_init+0xf8>
    256c:	23c0      	movs	r3, #192	; 0xc0
    256e:	01db      	lsls	r3, r3, #7
    2570:	9a02      	ldr	r2, [sp, #8]
    2572:	429a      	cmp	r2, r3
    2574:	d100      	bne.n	2578 <usart_init+0xd0>
    2576:	e09b      	b.n	26b0 <usart_init+0x208>
    2578:	2380      	movs	r3, #128	; 0x80
    257a:	021b      	lsls	r3, r3, #8
    257c:	429a      	cmp	r2, r3
    257e:	d000      	beq.n	2582 <usart_init+0xda>
    2580:	e123      	b.n	27ca <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    2582:	2303      	movs	r3, #3
    2584:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2586:	2300      	movs	r3, #0
    2588:	9307      	str	r3, [sp, #28]
    258a:	e012      	b.n	25b2 <usart_init+0x10a>
			MCLK->APBDMASK.reg |= mask;
    258c:	4992      	ldr	r1, [pc, #584]	; (27d8 <usart_init+0x330>)
    258e:	6a08      	ldr	r0, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    2590:	3a04      	subs	r2, #4
    2592:	409a      	lsls	r2, r3
    2594:	0013      	movs	r3, r2
    2596:	4303      	orrs	r3, r0
    2598:	620b      	str	r3, [r1, #32]
    259a:	e7b4      	b.n	2506 <usart_init+0x5e>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    259c:	2018      	movs	r0, #24
    259e:	e7d7      	b.n	2550 <usart_init+0xa8>
	switch (config->sample_rate) {
    25a0:	2380      	movs	r3, #128	; 0x80
    25a2:	019b      	lsls	r3, r3, #6
    25a4:	429a      	cmp	r2, r3
    25a6:	d000      	beq.n	25aa <usart_init+0x102>
    25a8:	e10f      	b.n	27ca <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    25aa:	2310      	movs	r3, #16
    25ac:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    25ae:	3b0f      	subs	r3, #15
    25b0:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    25b2:	6833      	ldr	r3, [r6, #0]
    25b4:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    25b6:	68f3      	ldr	r3, [r6, #12]
    25b8:	469b      	mov	fp, r3
		config->sample_adjustment |
    25ba:	6973      	ldr	r3, [r6, #20]
    25bc:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    25be:	7e33      	ldrb	r3, [r6, #24]
    25c0:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    25c2:	2326      	movs	r3, #38	; 0x26
    25c4:	5cf3      	ldrb	r3, [r6, r3]
    25c6:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    25c8:	6873      	ldr	r3, [r6, #4]
    25ca:	4699      	mov	r9, r3
	switch (transfer_mode)
    25cc:	2b00      	cmp	r3, #0
    25ce:	d100      	bne.n	25d2 <usart_init+0x12a>
    25d0:	e09b      	b.n	270a <usart_init+0x262>
    25d2:	2380      	movs	r3, #128	; 0x80
    25d4:	055b      	lsls	r3, r3, #21
    25d6:	4599      	cmp	r9, r3
    25d8:	d104      	bne.n	25e4 <usart_init+0x13c>
			if (!config->use_external_clock) {
    25da:	2327      	movs	r3, #39	; 0x27
    25dc:	5cf3      	ldrb	r3, [r6, r3]
    25de:	2b00      	cmp	r3, #0
    25e0:	d100      	bne.n	25e4 <usart_init+0x13c>
    25e2:	e080      	b.n	26e6 <usart_init+0x23e>
	if(config->encoding_format_enable) {
    25e4:	7e73      	ldrb	r3, [r6, #25]
    25e6:	2b00      	cmp	r3, #0
    25e8:	d002      	beq.n	25f0 <usart_init+0x148>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    25ea:	7eb3      	ldrb	r3, [r6, #26]
    25ec:	4642      	mov	r2, r8
    25ee:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    25f0:	230e      	movs	r3, #14
    25f2:	aa06      	add	r2, sp, #24
    25f4:	4694      	mov	ip, r2
    25f6:	4463      	add	r3, ip
    25f8:	881b      	ldrh	r3, [r3, #0]
    25fa:	4642      	mov	r2, r8
    25fc:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    25fe:	9b05      	ldr	r3, [sp, #20]
    2600:	465a      	mov	r2, fp
    2602:	4313      	orrs	r3, r2
    2604:	9a03      	ldr	r2, [sp, #12]
    2606:	4313      	orrs	r3, r2
    2608:	464a      	mov	r2, r9
    260a:	4313      	orrs	r3, r2
    260c:	9f02      	ldr	r7, [sp, #8]
    260e:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2610:	9b04      	ldr	r3, [sp, #16]
    2612:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    2614:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2616:	4653      	mov	r3, sl
    2618:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    261a:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    261c:	2327      	movs	r3, #39	; 0x27
    261e:	5cf3      	ldrb	r3, [r6, r3]
    2620:	2b00      	cmp	r3, #0
    2622:	d101      	bne.n	2628 <usart_init+0x180>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2624:	3304      	adds	r3, #4
    2626:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2628:	7e73      	ldrb	r3, [r6, #25]
    262a:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    262c:	7f32      	ldrb	r2, [r6, #28]
    262e:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2630:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2632:	7f72      	ldrb	r2, [r6, #29]
    2634:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2636:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2638:	2224      	movs	r2, #36	; 0x24
    263a:	5cb2      	ldrb	r2, [r6, r2]
    263c:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    263e:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2640:	2225      	movs	r2, #37	; 0x25
    2642:	5cb2      	ldrb	r2, [r6, r2]
    2644:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2646:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    2648:	7ab1      	ldrb	r1, [r6, #10]
    264a:	7af2      	ldrb	r2, [r6, #11]
    264c:	4311      	orrs	r1, r2
    264e:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    2650:	8933      	ldrh	r3, [r6, #8]
    2652:	2bff      	cmp	r3, #255	; 0xff
    2654:	d07d      	beq.n	2752 <usart_init+0x2aa>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    2656:	2280      	movs	r2, #128	; 0x80
    2658:	0452      	lsls	r2, r2, #17
    265a:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    265c:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    265e:	232c      	movs	r3, #44	; 0x2c
    2660:	5cf3      	ldrb	r3, [r6, r3]
    2662:	2b00      	cmp	r3, #0
    2664:	d103      	bne.n	266e <usart_init+0x1c6>
    2666:	4b60      	ldr	r3, [pc, #384]	; (27e8 <usart_init+0x340>)
    2668:	789b      	ldrb	r3, [r3, #2]
    266a:	079b      	lsls	r3, r3, #30
    266c:	d501      	bpl.n	2672 <usart_init+0x1ca>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    266e:	2380      	movs	r3, #128	; 0x80
    2670:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2672:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2674:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2676:	2b00      	cmp	r3, #0
    2678:	d1fc      	bne.n	2674 <usart_init+0x1cc>
	usart_hw->CTRLB.reg = ctrlb;
    267a:	4643      	mov	r3, r8
    267c:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    267e:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2680:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2682:	2b00      	cmp	r3, #0
    2684:	d1fc      	bne.n	2680 <usart_init+0x1d8>
	usart_hw->CTRLA.reg = ctrla;
    2686:	4643      	mov	r3, r8
    2688:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    268a:	ab0e      	add	r3, sp, #56	; 0x38
    268c:	2280      	movs	r2, #128	; 0x80
    268e:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2690:	2200      	movs	r2, #0
    2692:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    2694:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2696:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    2698:	6b33      	ldr	r3, [r6, #48]	; 0x30
    269a:	930a      	str	r3, [sp, #40]	; 0x28
    269c:	6b73      	ldr	r3, [r6, #52]	; 0x34
    269e:	930b      	str	r3, [sp, #44]	; 0x2c
    26a0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    26a2:	930c      	str	r3, [sp, #48]	; 0x30
    26a4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    26a6:	9302      	str	r3, [sp, #8]
    26a8:	930d      	str	r3, [sp, #52]	; 0x34
    26aa:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    26ac:	ae0a      	add	r6, sp, #40	; 0x28
    26ae:	e05e      	b.n	276e <usart_init+0x2c6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    26b0:	2308      	movs	r3, #8
    26b2:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    26b4:	3b07      	subs	r3, #7
    26b6:	9307      	str	r3, [sp, #28]
    26b8:	e77b      	b.n	25b2 <usart_init+0x10a>
	ctrla = (uint32_t)config->data_order |
    26ba:	6833      	ldr	r3, [r6, #0]
    26bc:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    26be:	68f3      	ldr	r3, [r6, #12]
    26c0:	469b      	mov	fp, r3
		config->sample_adjustment |
    26c2:	6973      	ldr	r3, [r6, #20]
    26c4:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    26c6:	7e33      	ldrb	r3, [r6, #24]
    26c8:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    26ca:	2326      	movs	r3, #38	; 0x26
    26cc:	5cf3      	ldrb	r3, [r6, r3]
    26ce:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    26d0:	6873      	ldr	r3, [r6, #4]
    26d2:	4699      	mov	r9, r3
	switch (transfer_mode)
    26d4:	2b00      	cmp	r3, #0
    26d6:	d014      	beq.n	2702 <usart_init+0x25a>
    26d8:	2380      	movs	r3, #128	; 0x80
    26da:	055b      	lsls	r3, r3, #21
    26dc:	4599      	cmp	r9, r3
    26de:	d100      	bne.n	26e2 <usart_init+0x23a>
    26e0:	e77b      	b.n	25da <usart_init+0x132>
	enum status_code status_code = STATUS_OK;
    26e2:	2000      	movs	r0, #0
    26e4:	e020      	b.n	2728 <usart_init+0x280>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    26e6:	6a33      	ldr	r3, [r6, #32]
    26e8:	001f      	movs	r7, r3
    26ea:	b2c0      	uxtb	r0, r0
    26ec:	4b3f      	ldr	r3, [pc, #252]	; (27ec <usart_init+0x344>)
    26ee:	4798      	blx	r3
    26f0:	0001      	movs	r1, r0
    26f2:	220e      	movs	r2, #14
    26f4:	ab06      	add	r3, sp, #24
    26f6:	469c      	mov	ip, r3
    26f8:	4462      	add	r2, ip
    26fa:	0038      	movs	r0, r7
    26fc:	4b3c      	ldr	r3, [pc, #240]	; (27f0 <usart_init+0x348>)
    26fe:	4798      	blx	r3
    2700:	e012      	b.n	2728 <usart_init+0x280>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2702:	2308      	movs	r3, #8
    2704:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2706:	2300      	movs	r3, #0
    2708:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    270a:	2327      	movs	r3, #39	; 0x27
    270c:	5cf3      	ldrb	r3, [r6, r3]
    270e:	2b00      	cmp	r3, #0
    2710:	d00e      	beq.n	2730 <usart_init+0x288>
				status_code =
    2712:	9b06      	ldr	r3, [sp, #24]
    2714:	9300      	str	r3, [sp, #0]
    2716:	9b07      	ldr	r3, [sp, #28]
    2718:	220e      	movs	r2, #14
    271a:	a906      	add	r1, sp, #24
    271c:	468c      	mov	ip, r1
    271e:	4462      	add	r2, ip
    2720:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    2722:	6a30      	ldr	r0, [r6, #32]
    2724:	4f33      	ldr	r7, [pc, #204]	; (27f4 <usart_init+0x34c>)
    2726:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    2728:	2800      	cmp	r0, #0
    272a:	d000      	beq.n	272e <usart_init+0x286>
    272c:	e6d4      	b.n	24d8 <usart_init+0x30>
    272e:	e759      	b.n	25e4 <usart_init+0x13c>
						_sercom_get_async_baud_val(config->baudrate,
    2730:	6a33      	ldr	r3, [r6, #32]
    2732:	001f      	movs	r7, r3
    2734:	b2c0      	uxtb	r0, r0
    2736:	4b2d      	ldr	r3, [pc, #180]	; (27ec <usart_init+0x344>)
    2738:	4798      	blx	r3
    273a:	0001      	movs	r1, r0
				status_code =
    273c:	9b06      	ldr	r3, [sp, #24]
    273e:	9300      	str	r3, [sp, #0]
    2740:	9b07      	ldr	r3, [sp, #28]
    2742:	220e      	movs	r2, #14
    2744:	a806      	add	r0, sp, #24
    2746:	4684      	mov	ip, r0
    2748:	4462      	add	r2, ip
    274a:	0038      	movs	r0, r7
    274c:	4f29      	ldr	r7, [pc, #164]	; (27f4 <usart_init+0x34c>)
    274e:	47b8      	blx	r7
    2750:	e7ea      	b.n	2728 <usart_init+0x280>
		if(config->lin_slave_enable) {
    2752:	7ef3      	ldrb	r3, [r6, #27]
    2754:	2b00      	cmp	r3, #0
    2756:	d082      	beq.n	265e <usart_init+0x1b6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2758:	2380      	movs	r3, #128	; 0x80
    275a:	04db      	lsls	r3, r3, #19
    275c:	431f      	orrs	r7, r3
    275e:	e77e      	b.n	265e <usart_init+0x1b6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2760:	0020      	movs	r0, r4
    2762:	4b25      	ldr	r3, [pc, #148]	; (27f8 <usart_init+0x350>)
    2764:	4798      	blx	r3
    2766:	e007      	b.n	2778 <usart_init+0x2d0>
    2768:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    276a:	2f04      	cmp	r7, #4
    276c:	d00d      	beq.n	278a <usart_init+0x2e2>
    276e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2770:	00bb      	lsls	r3, r7, #2
    2772:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    2774:	2800      	cmp	r0, #0
    2776:	d0f3      	beq.n	2760 <usart_init+0x2b8>
		if (current_pinmux != PINMUX_UNUSED) {
    2778:	1c43      	adds	r3, r0, #1
    277a:	d0f5      	beq.n	2768 <usart_init+0x2c0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    277c:	a90e      	add	r1, sp, #56	; 0x38
    277e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2780:	0c00      	lsrs	r0, r0, #16
    2782:	b2c0      	uxtb	r0, r0
    2784:	4b1d      	ldr	r3, [pc, #116]	; (27fc <usart_init+0x354>)
    2786:	4798      	blx	r3
    2788:	e7ee      	b.n	2768 <usart_init+0x2c0>
		module->callback[i]            = NULL;
    278a:	2300      	movs	r3, #0
    278c:	60eb      	str	r3, [r5, #12]
    278e:	612b      	str	r3, [r5, #16]
    2790:	616b      	str	r3, [r5, #20]
    2792:	61ab      	str	r3, [r5, #24]
    2794:	61eb      	str	r3, [r5, #28]
    2796:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2798:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    279a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    279c:	2200      	movs	r2, #0
    279e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    27a0:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    27a2:	3330      	adds	r3, #48	; 0x30
    27a4:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    27a6:	3301      	adds	r3, #1
    27a8:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    27aa:	3301      	adds	r3, #1
    27ac:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    27ae:	3301      	adds	r3, #1
    27b0:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    27b2:	6828      	ldr	r0, [r5, #0]
    27b4:	4b07      	ldr	r3, [pc, #28]	; (27d4 <usart_init+0x32c>)
    27b6:	4798      	blx	r3
    27b8:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    27ba:	4911      	ldr	r1, [pc, #68]	; (2800 <usart_init+0x358>)
    27bc:	4b11      	ldr	r3, [pc, #68]	; (2804 <usart_init+0x35c>)
    27be:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    27c0:	00a4      	lsls	r4, r4, #2
    27c2:	4b11      	ldr	r3, [pc, #68]	; (2808 <usart_init+0x360>)
    27c4:	50e5      	str	r5, [r4, r3]
	return status_code;
    27c6:	2000      	movs	r0, #0
    27c8:	e686      	b.n	24d8 <usart_init+0x30>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    27ca:	2310      	movs	r3, #16
    27cc:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    27ce:	2300      	movs	r3, #0
    27d0:	9307      	str	r3, [sp, #28]
    27d2:	e6ee      	b.n	25b2 <usart_init+0x10a>
    27d4:	00001fd1 	.word	0x00001fd1
    27d8:	40000400 	.word	0x40000400
    27dc:	00003211 	.word	0x00003211
    27e0:	000031a1 	.word	0x000031a1
    27e4:	00001e29 	.word	0x00001e29
    27e8:	41002000 	.word	0x41002000
    27ec:	00003235 	.word	0x00003235
    27f0:	00001d6b 	.word	0x00001d6b
    27f4:	00001d95 	.word	0x00001d95
    27f8:	00001e75 	.word	0x00001e75
    27fc:	0000330d 	.word	0x0000330d
    2800:	00002935 	.word	0x00002935
    2804:	0000200d 	.word	0x0000200d
    2808:	200011a8 	.word	0x200011a8

0000280c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    280c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    280e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    2810:	2a00      	cmp	r2, #0
    2812:	d101      	bne.n	2818 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    2814:	0018      	movs	r0, r3
    2816:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    2818:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    281a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    281c:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    281e:	2a00      	cmp	r2, #0
    2820:	d1f8      	bne.n	2814 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2822:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    2824:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    2826:	2102      	movs	r1, #2
    2828:	7e13      	ldrb	r3, [r2, #24]
    282a:	420b      	tst	r3, r1
    282c:	d0fc      	beq.n	2828 <usart_write_wait+0x1c>
	return STATUS_OK;
    282e:	2300      	movs	r3, #0
    2830:	e7f0      	b.n	2814 <usart_write_wait+0x8>

00002832 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2832:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    2834:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    2836:	2a00      	cmp	r2, #0
    2838:	d101      	bne.n	283e <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    283a:	0018      	movs	r0, r3
    283c:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    283e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    2840:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2842:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    2844:	2a00      	cmp	r2, #0
    2846:	d1f8      	bne.n	283a <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2848:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    284a:	7e10      	ldrb	r0, [r2, #24]
    284c:	0740      	lsls	r0, r0, #29
    284e:	d5f4      	bpl.n	283a <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2850:	8b53      	ldrh	r3, [r2, #26]
    2852:	b2db      	uxtb	r3, r3
	if (error_code) {
    2854:	0698      	lsls	r0, r3, #26
    2856:	d01d      	beq.n	2894 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    2858:	0798      	lsls	r0, r3, #30
    285a:	d503      	bpl.n	2864 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    285c:	2302      	movs	r3, #2
    285e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    2860:	3318      	adds	r3, #24
    2862:	e7ea      	b.n	283a <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2864:	0758      	lsls	r0, r3, #29
    2866:	d503      	bpl.n	2870 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2868:	2304      	movs	r3, #4
    286a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    286c:	331a      	adds	r3, #26
    286e:	e7e4      	b.n	283a <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2870:	07d8      	lsls	r0, r3, #31
    2872:	d503      	bpl.n	287c <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2874:	2301      	movs	r3, #1
    2876:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    2878:	3312      	adds	r3, #18
    287a:	e7de      	b.n	283a <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    287c:	06d8      	lsls	r0, r3, #27
    287e:	d503      	bpl.n	2888 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2880:	2310      	movs	r3, #16
    2882:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    2884:	3332      	adds	r3, #50	; 0x32
    2886:	e7d8      	b.n	283a <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2888:	069b      	lsls	r3, r3, #26
    288a:	d503      	bpl.n	2894 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    288c:	2320      	movs	r3, #32
    288e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    2890:	3321      	adds	r3, #33	; 0x21
    2892:	e7d2      	b.n	283a <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    2894:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    2896:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    2898:	2300      	movs	r3, #0
    289a:	e7ce      	b.n	283a <usart_read_wait+0x8>

0000289c <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    289c:	b5f0      	push	{r4, r5, r6, r7, lr}
    289e:	46d6      	mov	lr, sl
    28a0:	b500      	push	{lr}
    28a2:	b084      	sub	sp, #16
    28a4:	0004      	movs	r4, r0
    28a6:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    28a8:	2017      	movs	r0, #23
	if (length == 0) {
    28aa:	2a00      	cmp	r2, #0
    28ac:	d103      	bne.n	28b6 <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    28ae:	b004      	add	sp, #16
    28b0:	bc04      	pop	{r2}
    28b2:	4692      	mov	sl, r2
    28b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    28b6:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    28b8:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    28ba:	2b00      	cmp	r3, #0
    28bc:	d0f7      	beq.n	28ae <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    28be:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    28c0:	3a01      	subs	r2, #1
    28c2:	b293      	uxth	r3, r2
    28c4:	469a      	mov	sl, r3
    28c6:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    28c8:	2704      	movs	r7, #4
    28ca:	e019      	b.n	2900 <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    28cc:	2300      	movs	r3, #0
    28ce:	aa02      	add	r2, sp, #8
    28d0:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    28d2:	1d91      	adds	r1, r2, #6
    28d4:	0020      	movs	r0, r4
    28d6:	4b15      	ldr	r3, [pc, #84]	; (292c <usart_read_buffer_wait+0x90>)
    28d8:	4798      	blx	r3
		if (retval != STATUS_OK) {
    28da:	2800      	cmp	r0, #0
    28dc:	d1e7      	bne.n	28ae <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    28de:	1c69      	adds	r1, r5, #1
    28e0:	b289      	uxth	r1, r1
    28e2:	ab02      	add	r3, sp, #8
    28e4:	88db      	ldrh	r3, [r3, #6]
    28e6:	9a01      	ldr	r2, [sp, #4]
    28e8:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    28ea:	7962      	ldrb	r2, [r4, #5]
    28ec:	2a01      	cmp	r2, #1
    28ee:	d014      	beq.n	291a <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    28f0:	000d      	movs	r5, r1
	while (length--) {
    28f2:	4653      	mov	r3, sl
    28f4:	3b01      	subs	r3, #1
    28f6:	b29b      	uxth	r3, r3
    28f8:	469a      	mov	sl, r3
    28fa:	4b0d      	ldr	r3, [pc, #52]	; (2930 <usart_read_buffer_wait+0x94>)
    28fc:	459a      	cmp	sl, r3
    28fe:	d0d6      	beq.n	28ae <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    2900:	7e33      	ldrb	r3, [r6, #24]
    2902:	423b      	tst	r3, r7
    2904:	d1e2      	bne.n	28cc <usart_read_buffer_wait+0x30>
    2906:	4b0a      	ldr	r3, [pc, #40]	; (2930 <usart_read_buffer_wait+0x94>)
    2908:	7e32      	ldrb	r2, [r6, #24]
    290a:	423a      	tst	r2, r7
    290c:	d1de      	bne.n	28cc <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    290e:	2b01      	cmp	r3, #1
    2910:	d009      	beq.n	2926 <usart_read_buffer_wait+0x8a>
    2912:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    2914:	2b00      	cmp	r3, #0
    2916:	d1f7      	bne.n	2908 <usart_read_buffer_wait+0x6c>
    2918:	e7d8      	b.n	28cc <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    291a:	3502      	adds	r5, #2
    291c:	b2ad      	uxth	r5, r5
    291e:	0a1b      	lsrs	r3, r3, #8
    2920:	9a01      	ldr	r2, [sp, #4]
    2922:	5453      	strb	r3, [r2, r1]
    2924:	e7e5      	b.n	28f2 <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    2926:	2012      	movs	r0, #18
    2928:	e7c1      	b.n	28ae <usart_read_buffer_wait+0x12>
    292a:	46c0      	nop			; (mov r8, r8)
    292c:	00002833 	.word	0x00002833
    2930:	0000ffff 	.word	0x0000ffff

00002934 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2936:	0080      	lsls	r0, r0, #2
    2938:	4b62      	ldr	r3, [pc, #392]	; (2ac4 <_usart_interrupt_handler+0x190>)
    293a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    293c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    293e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2940:	2b00      	cmp	r3, #0
    2942:	d1fc      	bne.n	293e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2944:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    2946:	7da6      	ldrb	r6, [r4, #22]
    2948:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    294a:	2330      	movs	r3, #48	; 0x30
    294c:	5ceb      	ldrb	r3, [r5, r3]
    294e:	2231      	movs	r2, #49	; 0x31
    2950:	5caf      	ldrb	r7, [r5, r2]
    2952:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2954:	07f3      	lsls	r3, r6, #31
    2956:	d522      	bpl.n	299e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2958:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    295a:	b29b      	uxth	r3, r3
    295c:	2b00      	cmp	r3, #0
    295e:	d01c      	beq.n	299a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2960:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2962:	7813      	ldrb	r3, [r2, #0]
    2964:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2966:	1c51      	adds	r1, r2, #1
    2968:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    296a:	7969      	ldrb	r1, [r5, #5]
    296c:	2901      	cmp	r1, #1
    296e:	d00e      	beq.n	298e <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2970:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2972:	05db      	lsls	r3, r3, #23
    2974:	0ddb      	lsrs	r3, r3, #23
    2976:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2978:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    297a:	3b01      	subs	r3, #1
    297c:	b29b      	uxth	r3, r3
    297e:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2980:	2b00      	cmp	r3, #0
    2982:	d10c      	bne.n	299e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2984:	3301      	adds	r3, #1
    2986:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2988:	3301      	adds	r3, #1
    298a:	75a3      	strb	r3, [r4, #22]
    298c:	e007      	b.n	299e <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    298e:	7851      	ldrb	r1, [r2, #1]
    2990:	0209      	lsls	r1, r1, #8
    2992:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2994:	3202      	adds	r2, #2
    2996:	62aa      	str	r2, [r5, #40]	; 0x28
    2998:	e7eb      	b.n	2972 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    299a:	2301      	movs	r3, #1
    299c:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    299e:	07b3      	lsls	r3, r6, #30
    29a0:	d506      	bpl.n	29b0 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    29a2:	2302      	movs	r3, #2
    29a4:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    29a6:	2200      	movs	r2, #0
    29a8:	3331      	adds	r3, #49	; 0x31
    29aa:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    29ac:	07fb      	lsls	r3, r7, #31
    29ae:	d41a      	bmi.n	29e6 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    29b0:	0773      	lsls	r3, r6, #29
    29b2:	d565      	bpl.n	2a80 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    29b4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    29b6:	b29b      	uxth	r3, r3
    29b8:	2b00      	cmp	r3, #0
    29ba:	d05f      	beq.n	2a7c <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    29bc:	8b63      	ldrh	r3, [r4, #26]
    29be:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    29c0:	071a      	lsls	r2, r3, #28
    29c2:	d414      	bmi.n	29ee <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    29c4:	223f      	movs	r2, #63	; 0x3f
    29c6:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    29c8:	2b00      	cmp	r3, #0
    29ca:	d034      	beq.n	2a36 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    29cc:	079a      	lsls	r2, r3, #30
    29ce:	d511      	bpl.n	29f4 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    29d0:	221a      	movs	r2, #26
    29d2:	2332      	movs	r3, #50	; 0x32
    29d4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    29d6:	3b30      	subs	r3, #48	; 0x30
    29d8:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    29da:	077b      	lsls	r3, r7, #29
    29dc:	d550      	bpl.n	2a80 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    29de:	0028      	movs	r0, r5
    29e0:	696b      	ldr	r3, [r5, #20]
    29e2:	4798      	blx	r3
    29e4:	e04c      	b.n	2a80 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    29e6:	0028      	movs	r0, r5
    29e8:	68eb      	ldr	r3, [r5, #12]
    29ea:	4798      	blx	r3
    29ec:	e7e0      	b.n	29b0 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    29ee:	2237      	movs	r2, #55	; 0x37
    29f0:	4013      	ands	r3, r2
    29f2:	e7e9      	b.n	29c8 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    29f4:	075a      	lsls	r2, r3, #29
    29f6:	d505      	bpl.n	2a04 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    29f8:	221e      	movs	r2, #30
    29fa:	2332      	movs	r3, #50	; 0x32
    29fc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    29fe:	3b2e      	subs	r3, #46	; 0x2e
    2a00:	8363      	strh	r3, [r4, #26]
    2a02:	e7ea      	b.n	29da <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2a04:	07da      	lsls	r2, r3, #31
    2a06:	d505      	bpl.n	2a14 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2a08:	2213      	movs	r2, #19
    2a0a:	2332      	movs	r3, #50	; 0x32
    2a0c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2a0e:	3b31      	subs	r3, #49	; 0x31
    2a10:	8363      	strh	r3, [r4, #26]
    2a12:	e7e2      	b.n	29da <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2a14:	06da      	lsls	r2, r3, #27
    2a16:	d505      	bpl.n	2a24 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2a18:	2242      	movs	r2, #66	; 0x42
    2a1a:	2332      	movs	r3, #50	; 0x32
    2a1c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2a1e:	3b22      	subs	r3, #34	; 0x22
    2a20:	8363      	strh	r3, [r4, #26]
    2a22:	e7da      	b.n	29da <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2a24:	2220      	movs	r2, #32
    2a26:	421a      	tst	r2, r3
    2a28:	d0d7      	beq.n	29da <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2a2a:	3221      	adds	r2, #33	; 0x21
    2a2c:	2332      	movs	r3, #50	; 0x32
    2a2e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2a30:	3b12      	subs	r3, #18
    2a32:	8363      	strh	r3, [r4, #26]
    2a34:	e7d1      	b.n	29da <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2a36:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2a38:	05db      	lsls	r3, r3, #23
    2a3a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2a3c:	b2da      	uxtb	r2, r3
    2a3e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2a40:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2a42:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2a44:	1c51      	adds	r1, r2, #1
    2a46:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2a48:	7969      	ldrb	r1, [r5, #5]
    2a4a:	2901      	cmp	r1, #1
    2a4c:	d010      	beq.n	2a70 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2a4e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2a50:	3b01      	subs	r3, #1
    2a52:	b29b      	uxth	r3, r3
    2a54:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2a56:	2b00      	cmp	r3, #0
    2a58:	d112      	bne.n	2a80 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2a5a:	3304      	adds	r3, #4
    2a5c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2a5e:	2200      	movs	r2, #0
    2a60:	332e      	adds	r3, #46	; 0x2e
    2a62:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2a64:	07bb      	lsls	r3, r7, #30
    2a66:	d50b      	bpl.n	2a80 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2a68:	0028      	movs	r0, r5
    2a6a:	692b      	ldr	r3, [r5, #16]
    2a6c:	4798      	blx	r3
    2a6e:	e007      	b.n	2a80 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2a70:	0a1b      	lsrs	r3, r3, #8
    2a72:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2a74:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2a76:	3301      	adds	r3, #1
    2a78:	626b      	str	r3, [r5, #36]	; 0x24
    2a7a:	e7e8      	b.n	2a4e <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2a7c:	2304      	movs	r3, #4
    2a7e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2a80:	06f3      	lsls	r3, r6, #27
    2a82:	d504      	bpl.n	2a8e <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2a84:	2310      	movs	r3, #16
    2a86:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2a88:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2a8a:	06fb      	lsls	r3, r7, #27
    2a8c:	d40e      	bmi.n	2aac <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2a8e:	06b3      	lsls	r3, r6, #26
    2a90:	d504      	bpl.n	2a9c <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2a92:	2320      	movs	r3, #32
    2a94:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2a96:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2a98:	073b      	lsls	r3, r7, #28
    2a9a:	d40b      	bmi.n	2ab4 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2a9c:	0733      	lsls	r3, r6, #28
    2a9e:	d504      	bpl.n	2aaa <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2aa0:	2308      	movs	r3, #8
    2aa2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2aa4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2aa6:	06bb      	lsls	r3, r7, #26
    2aa8:	d408      	bmi.n	2abc <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    2aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2aac:	0028      	movs	r0, r5
    2aae:	69eb      	ldr	r3, [r5, #28]
    2ab0:	4798      	blx	r3
    2ab2:	e7ec      	b.n	2a8e <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2ab4:	0028      	movs	r0, r5
    2ab6:	69ab      	ldr	r3, [r5, #24]
    2ab8:	4798      	blx	r3
    2aba:	e7ef      	b.n	2a9c <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2abc:	6a2b      	ldr	r3, [r5, #32]
    2abe:	0028      	movs	r0, r5
    2ac0:	4798      	blx	r3
}
    2ac2:	e7f2      	b.n	2aaa <_usart_interrupt_handler+0x176>
    2ac4:	200011a8 	.word	0x200011a8

00002ac8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2ac8:	b510      	push	{r4, lr}
	switch (clock_source) {
    2aca:	2808      	cmp	r0, #8
    2acc:	d803      	bhi.n	2ad6 <system_clock_source_get_hz+0xe>
    2ace:	0080      	lsls	r0, r0, #2
    2ad0:	4b1c      	ldr	r3, [pc, #112]	; (2b44 <system_clock_source_get_hz+0x7c>)
    2ad2:	581b      	ldr	r3, [r3, r0]
    2ad4:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    2ad6:	2000      	movs	r0, #0
    2ad8:	e032      	b.n	2b40 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    2ada:	4b1b      	ldr	r3, [pc, #108]	; (2b48 <system_clock_source_get_hz+0x80>)
    2adc:	6918      	ldr	r0, [r3, #16]
    2ade:	e02f      	b.n	2b40 <system_clock_source_get_hz+0x78>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    2ae0:	4b1a      	ldr	r3, [pc, #104]	; (2b4c <system_clock_source_get_hz+0x84>)
    2ae2:	7d18      	ldrb	r0, [r3, #20]
    2ae4:	0700      	lsls	r0, r0, #28
    2ae6:	0f80      	lsrs	r0, r0, #30
    2ae8:	1c43      	adds	r3, r0, #1
    2aea:	4819      	ldr	r0, [pc, #100]	; (2b50 <system_clock_source_get_hz+0x88>)
    2aec:	4358      	muls	r0, r3
    2aee:	e027      	b.n	2b40 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    2af0:	4b15      	ldr	r3, [pc, #84]	; (2b48 <system_clock_source_get_hz+0x80>)
    2af2:	6958      	ldr	r0, [r3, #20]
    2af4:	e024      	b.n	2b40 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    2af6:	4b14      	ldr	r3, [pc, #80]	; (2b48 <system_clock_source_get_hz+0x80>)
    2af8:	681b      	ldr	r3, [r3, #0]
			return 0;
    2afa:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    2afc:	079b      	lsls	r3, r3, #30
    2afe:	d51f      	bpl.n	2b40 <system_clock_source_get_hz+0x78>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    2b00:	4912      	ldr	r1, [pc, #72]	; (2b4c <system_clock_source_get_hz+0x84>)
    2b02:	2280      	movs	r2, #128	; 0x80
    2b04:	0052      	lsls	r2, r2, #1
    2b06:	68cb      	ldr	r3, [r1, #12]
    2b08:	4213      	tst	r3, r2
    2b0a:	d0fc      	beq.n	2b06 <system_clock_source_get_hz+0x3e>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    2b0c:	4b0e      	ldr	r3, [pc, #56]	; (2b48 <system_clock_source_get_hz+0x80>)
    2b0e:	681b      	ldr	r3, [r3, #0]
    2b10:	075b      	lsls	r3, r3, #29
    2b12:	d401      	bmi.n	2b18 <system_clock_source_get_hz+0x50>
		return 48000000UL;
    2b14:	480f      	ldr	r0, [pc, #60]	; (2b54 <system_clock_source_get_hz+0x8c>)
    2b16:	e013      	b.n	2b40 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    2b18:	2000      	movs	r0, #0
    2b1a:	4b0f      	ldr	r3, [pc, #60]	; (2b58 <system_clock_source_get_hz+0x90>)
    2b1c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2b1e:	4b0a      	ldr	r3, [pc, #40]	; (2b48 <system_clock_source_get_hz+0x80>)
    2b20:	689b      	ldr	r3, [r3, #8]
    2b22:	041b      	lsls	r3, r3, #16
    2b24:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    2b26:	4358      	muls	r0, r3
    2b28:	e00a      	b.n	2b40 <system_clock_source_get_hz+0x78>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    2b2a:	2328      	movs	r3, #40	; 0x28
    2b2c:	4a07      	ldr	r2, [pc, #28]	; (2b4c <system_clock_source_get_hz+0x84>)
    2b2e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2b30:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    2b32:	079b      	lsls	r3, r3, #30
    2b34:	d504      	bpl.n	2b40 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    2b36:	4b04      	ldr	r3, [pc, #16]	; (2b48 <system_clock_source_get_hz+0x80>)
    2b38:	68d8      	ldr	r0, [r3, #12]
    2b3a:	e001      	b.n	2b40 <system_clock_source_get_hz+0x78>
		return 32768UL;
    2b3c:	2080      	movs	r0, #128	; 0x80
    2b3e:	0200      	lsls	r0, r0, #8
	}
}
    2b40:	bd10      	pop	{r4, pc}
    2b42:	46c0      	nop			; (mov r8, r8)
    2b44:	00019c28 	.word	0x00019c28
    2b48:	20000a60 	.word	0x20000a60
    2b4c:	40000c00 	.word	0x40000c00
    2b50:	003d0900 	.word	0x003d0900
    2b54:	02dc6c00 	.word	0x02dc6c00
    2b58:	00003235 	.word	0x00003235

00002b5c <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
    2b5c:	b570      	push	{r4, r5, r6, lr}
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
    2b5e:	4c0b      	ldr	r4, [pc, #44]	; (2b8c <system_clock_source_osc16m_set_config+0x30>)
    2b60:	7d23      	ldrb	r3, [r4, #20]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
	temp.bit.ONDEMAND = config->on_demand;
    2b62:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2b64:	7846      	ldrb	r6, [r0, #1]

	OSCCTRL->OSC16MCTRL = temp;
    2b66:	7802      	ldrb	r2, [r0, #0]
    2b68:	2103      	movs	r1, #3
    2b6a:	4011      	ands	r1, r2
    2b6c:	0089      	lsls	r1, r1, #2
    2b6e:	220c      	movs	r2, #12
    2b70:	4393      	bics	r3, r2
    2b72:	430b      	orrs	r3, r1
    2b74:	3a0b      	subs	r2, #11
    2b76:	4032      	ands	r2, r6
    2b78:	0192      	lsls	r2, r2, #6
    2b7a:	2140      	movs	r1, #64	; 0x40
    2b7c:	438b      	bics	r3, r1
    2b7e:	4313      	orrs	r3, r2
    2b80:	01ed      	lsls	r5, r5, #7
    2b82:	227f      	movs	r2, #127	; 0x7f
    2b84:	4013      	ands	r3, r2
    2b86:	432b      	orrs	r3, r5
    2b88:	7523      	strb	r3, [r4, #20]
}
    2b8a:	bd70      	pop	{r4, r5, r6, pc}
    2b8c:	40000c00 	.word	0x40000c00

00002b90 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    2b90:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b92:	46d6      	mov	lr, sl
    2b94:	464f      	mov	r7, r9
    2b96:	4646      	mov	r6, r8
    2b98:	b5c0      	push	{r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    2b9a:	4b20      	ldr	r3, [pc, #128]	; (2c1c <system_clock_source_xosc32k_set_config+0x8c>)
    2b9c:	469a      	mov	sl, r3
    2b9e:	695b      	ldr	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    2ba0:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    2ba2:	7801      	ldrb	r1, [r0, #0]
    2ba4:	424c      	negs	r4, r1
    2ba6:	414c      	adcs	r4, r1
    2ba8:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    2baa:	7881      	ldrb	r1, [r0, #2]
    2bac:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
    2bae:	78c1      	ldrb	r1, [r0, #3]
    2bb0:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
    2bb2:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2bb4:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
    2bb6:	7a84      	ldrb	r4, [r0, #10]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    2bb8:	6840      	ldr	r0, [r0, #4]
    2bba:	4919      	ldr	r1, [pc, #100]	; (2c20 <system_clock_source_xosc32k_set_config+0x90>)
    2bbc:	6148      	str	r0, [r1, #20]

	OSC32KCTRL->XOSC32K = temp;
    2bbe:	2101      	movs	r1, #1
    2bc0:	4648      	mov	r0, r9
    2bc2:	0080      	lsls	r0, r0, #2
    2bc4:	2204      	movs	r2, #4
    2bc6:	4393      	bics	r3, r2
    2bc8:	4303      	orrs	r3, r0
    2bca:	4640      	mov	r0, r8
    2bcc:	4008      	ands	r0, r1
    2bce:	00c0      	lsls	r0, r0, #3
    2bd0:	3204      	adds	r2, #4
    2bd2:	4393      	bics	r3, r2
    2bd4:	4303      	orrs	r3, r0
    2bd6:	4660      	mov	r0, ip
    2bd8:	4008      	ands	r0, r1
    2bda:	0100      	lsls	r0, r0, #4
    2bdc:	3208      	adds	r2, #8
    2bde:	4393      	bics	r3, r2
    2be0:	4303      	orrs	r3, r0
    2be2:	400f      	ands	r7, r1
    2be4:	01bf      	lsls	r7, r7, #6
    2be6:	2040      	movs	r0, #64	; 0x40
    2be8:	4383      	bics	r3, r0
    2bea:	433b      	orrs	r3, r7
    2bec:	400e      	ands	r6, r1
    2bee:	01f6      	lsls	r6, r6, #7
    2bf0:	3040      	adds	r0, #64	; 0x40
    2bf2:	4383      	bics	r3, r0
    2bf4:	4333      	orrs	r3, r6
    2bf6:	3879      	subs	r0, #121	; 0x79
    2bf8:	4005      	ands	r5, r0
    2bfa:	022d      	lsls	r5, r5, #8
    2bfc:	4809      	ldr	r0, [pc, #36]	; (2c24 <system_clock_source_xosc32k_set_config+0x94>)
    2bfe:	4003      	ands	r3, r0
    2c00:	432b      	orrs	r3, r5
    2c02:	4021      	ands	r1, r4
    2c04:	0309      	lsls	r1, r1, #12
    2c06:	4808      	ldr	r0, [pc, #32]	; (2c28 <system_clock_source_xosc32k_set_config+0x98>)
    2c08:	4003      	ands	r3, r0
    2c0a:	430b      	orrs	r3, r1
    2c0c:	4652      	mov	r2, sl
    2c0e:	6153      	str	r3, [r2, #20]
}
    2c10:	bc1c      	pop	{r2, r3, r4}
    2c12:	4690      	mov	r8, r2
    2c14:	4699      	mov	r9, r3
    2c16:	46a2      	mov	sl, r4
    2c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c1a:	46c0      	nop			; (mov r8, r8)
    2c1c:	40001000 	.word	0x40001000
    2c20:	20000a60 	.word	0x20000a60
    2c24:	fffff8ff 	.word	0xfffff8ff
    2c28:	ffffefff 	.word	0xffffefff

00002c2c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2c2c:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2c2e:	7a83      	ldrb	r3, [r0, #10]
    2c30:	069b      	lsls	r3, r3, #26
    2c32:	0c1b      	lsrs	r3, r3, #16
			OSCCTRL_DFLLVAL_FINE(config->fine_value);
    2c34:	8982      	ldrh	r2, [r0, #12]
    2c36:	0592      	lsls	r2, r2, #22
    2c38:	0d92      	lsrs	r2, r2, #22
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2c3a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2c3c:	491a      	ldr	r1, [pc, #104]	; (2ca8 <system_clock_source_dfll_set_config+0x7c>)
    2c3e:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2c40:	7a03      	ldrb	r3, [r0, #8]
    2c42:	7a42      	ldrb	r2, [r0, #9]
    2c44:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    2c46:	8882      	ldrh	r2, [r0, #4]
    2c48:	88c4      	ldrh	r4, [r0, #6]
    2c4a:	4322      	orrs	r2, r4
    2c4c:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    2c4e:	7842      	ldrb	r2, [r0, #1]
    2c50:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    2c52:	4313      	orrs	r3, r2
			((uint32_t)config->run_in_stanby << OSCCTRL_DFLLCTRL_RUNSTDBY_Pos);
    2c54:	7882      	ldrb	r2, [r0, #2]
    2c56:	0192      	lsls	r2, r2, #6
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    2c58:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2c5a:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    2c5c:	7803      	ldrb	r3, [r0, #0]
    2c5e:	2b04      	cmp	r3, #4
    2c60:	d011      	beq.n	2c86 <system_clock_source_dfll_set_config+0x5a>
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2c62:	2b20      	cmp	r3, #32
    2c64:	d10e      	bne.n	2c84 <system_clock_source_dfll_set_config+0x58>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2c66:	7b83      	ldrb	r3, [r0, #14]
    2c68:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    2c6a:	8a42      	ldrh	r2, [r0, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2c6c:	4313      	orrs	r3, r2
    2c6e:	8a02      	ldrh	r2, [r0, #16]
    2c70:	0412      	lsls	r2, r2, #16
    2c72:	490e      	ldr	r1, [pc, #56]	; (2cac <system_clock_source_dfll_set_config+0x80>)
    2c74:	400a      	ands	r2, r1
    2c76:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2c78:	4a0b      	ldr	r2, [pc, #44]	; (2ca8 <system_clock_source_dfll_set_config+0x7c>)
    2c7a:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    2c7c:	6811      	ldr	r1, [r2, #0]
    2c7e:	4b0c      	ldr	r3, [pc, #48]	; (2cb0 <system_clock_source_dfll_set_config+0x84>)
    2c80:	430b      	orrs	r3, r1
    2c82:	6013      	str	r3, [r2, #0]
				OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_BPLCKC;
	}
}
    2c84:	bd10      	pop	{r4, pc}
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2c86:	7b83      	ldrb	r3, [r0, #14]
    2c88:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    2c8a:	8a42      	ldrh	r2, [r0, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2c8c:	4313      	orrs	r3, r2
    2c8e:	8a02      	ldrh	r2, [r0, #16]
    2c90:	0412      	lsls	r2, r2, #16
    2c92:	4906      	ldr	r1, [pc, #24]	; (2cac <system_clock_source_dfll_set_config+0x80>)
    2c94:	400a      	ands	r2, r1
    2c96:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2c98:	4a03      	ldr	r2, [pc, #12]	; (2ca8 <system_clock_source_dfll_set_config+0x7c>)
    2c9a:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    2c9c:	6813      	ldr	r3, [r2, #0]
    2c9e:	2104      	movs	r1, #4
    2ca0:	430b      	orrs	r3, r1
    2ca2:	6013      	str	r3, [r2, #0]
    2ca4:	e7ee      	b.n	2c84 <system_clock_source_dfll_set_config+0x58>
    2ca6:	46c0      	nop			; (mov r8, r8)
    2ca8:	20000a60 	.word	0x20000a60
    2cac:	03ff0000 	.word	0x03ff0000
    2cb0:	00000424 	.word	0x00000424

00002cb4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2cb4:	2808      	cmp	r0, #8
    2cb6:	d803      	bhi.n	2cc0 <system_clock_source_enable+0xc>
    2cb8:	0080      	lsls	r0, r0, #2
    2cba:	4b29      	ldr	r3, [pc, #164]	; (2d60 <system_clock_source_enable+0xac>)
    2cbc:	581b      	ldr	r3, [r3, r0]
    2cbe:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2cc0:	2017      	movs	r0, #23
    2cc2:	e04b      	b.n	2d5c <system_clock_source_enable+0xa8>
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    2cc4:	4a27      	ldr	r2, [pc, #156]	; (2d64 <system_clock_source_enable+0xb0>)
    2cc6:	7d13      	ldrb	r3, [r2, #20]
    2cc8:	2102      	movs	r1, #2
    2cca:	430b      	orrs	r3, r1
    2ccc:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    2cce:	2000      	movs	r0, #0
    2cd0:	e044      	b.n	2d5c <system_clock_source_enable+0xa8>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    2cd2:	4a25      	ldr	r2, [pc, #148]	; (2d68 <system_clock_source_enable+0xb4>)
    2cd4:	6993      	ldr	r3, [r2, #24]
    2cd6:	2102      	movs	r1, #2
    2cd8:	430b      	orrs	r3, r1
    2cda:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2cdc:	2000      	movs	r0, #0
		break;
    2cde:	e03d      	b.n	2d5c <system_clock_source_enable+0xa8>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    2ce0:	4a20      	ldr	r2, [pc, #128]	; (2d64 <system_clock_source_enable+0xb0>)
    2ce2:	8a13      	ldrh	r3, [r2, #16]
    2ce4:	2102      	movs	r1, #2
    2ce6:	430b      	orrs	r3, r1
    2ce8:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2cea:	2000      	movs	r0, #0
		break;
    2cec:	e036      	b.n	2d5c <system_clock_source_enable+0xa8>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    2cee:	4a1e      	ldr	r2, [pc, #120]	; (2d68 <system_clock_source_enable+0xb4>)
    2cf0:	6953      	ldr	r3, [r2, #20]
    2cf2:	2102      	movs	r1, #2
    2cf4:	430b      	orrs	r3, r1
    2cf6:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    2cf8:	2000      	movs	r0, #0
		break;
    2cfa:	e02f      	b.n	2d5c <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    2cfc:	491b      	ldr	r1, [pc, #108]	; (2d6c <system_clock_source_enable+0xb8>)
    2cfe:	680b      	ldr	r3, [r1, #0]
    2d00:	2202      	movs	r2, #2
    2d02:	4313      	orrs	r3, r2
    2d04:	600b      	str	r3, [r1, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    2d06:	4b17      	ldr	r3, [pc, #92]	; (2d64 <system_clock_source_enable+0xb0>)
    2d08:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    2d0a:	0019      	movs	r1, r3
    2d0c:	32fe      	adds	r2, #254	; 0xfe
    2d0e:	68cb      	ldr	r3, [r1, #12]
    2d10:	4213      	tst	r3, r2
    2d12:	d0fc      	beq.n	2d0e <system_clock_source_enable+0x5a>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2d14:	4a15      	ldr	r2, [pc, #84]	; (2d6c <system_clock_source_enable+0xb8>)
    2d16:	6891      	ldr	r1, [r2, #8]
    2d18:	4b12      	ldr	r3, [pc, #72]	; (2d64 <system_clock_source_enable+0xb0>)
    2d1a:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2d1c:	6852      	ldr	r2, [r2, #4]
    2d1e:	61da      	str	r2, [r3, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
    2d20:	2200      	movs	r2, #0
    2d22:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    2d24:	0019      	movs	r1, r3
    2d26:	3201      	adds	r2, #1
    2d28:	32ff      	adds	r2, #255	; 0xff
    2d2a:	68cb      	ldr	r3, [r1, #12]
    2d2c:	4213      	tst	r3, r2
    2d2e:	d0fc      	beq.n	2d2a <system_clock_source_enable+0x76>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2d30:	4b0e      	ldr	r3, [pc, #56]	; (2d6c <system_clock_source_enable+0xb8>)
    2d32:	681b      	ldr	r3, [r3, #0]
    2d34:	b29b      	uxth	r3, r3
    2d36:	4a0b      	ldr	r2, [pc, #44]	; (2d64 <system_clock_source_enable+0xb0>)
    2d38:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    2d3a:	2000      	movs	r0, #0
    2d3c:	e00e      	b.n	2d5c <system_clock_source_enable+0xa8>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    2d3e:	4909      	ldr	r1, [pc, #36]	; (2d64 <system_clock_source_enable+0xb0>)
    2d40:	2228      	movs	r2, #40	; 0x28
    2d42:	5c8b      	ldrb	r3, [r1, r2]
    2d44:	2002      	movs	r0, #2
    2d46:	4303      	orrs	r3, r0
    2d48:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    2d4a:	0008      	movs	r0, r1
    2d4c:	2138      	movs	r1, #56	; 0x38
    2d4e:	3a26      	subs	r2, #38	; 0x26
    2d50:	5c43      	ldrb	r3, [r0, r1]
    2d52:	4213      	tst	r3, r2
    2d54:	d1fc      	bne.n	2d50 <system_clock_source_enable+0x9c>
	return STATUS_OK;
    2d56:	2000      	movs	r0, #0
    2d58:	e000      	b.n	2d5c <system_clock_source_enable+0xa8>
		return STATUS_OK;
    2d5a:	2000      	movs	r0, #0
}
    2d5c:	4770      	bx	lr
    2d5e:	46c0      	nop			; (mov r8, r8)
    2d60:	00019c4c 	.word	0x00019c4c
    2d64:	40000c00 	.word	0x40000c00
    2d68:	40001000 	.word	0x40001000
    2d6c:	20000a60 	.word	0x20000a60

00002d70 <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2d70:	2808      	cmp	r0, #8
    2d72:	d832      	bhi.n	2dda <system_clock_source_disable+0x6a>
    2d74:	0080      	lsls	r0, r0, #2
    2d76:	4b1a      	ldr	r3, [pc, #104]	; (2de0 <system_clock_source_disable+0x70>)
    2d78:	581b      	ldr	r3, [r3, r0]
    2d7a:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    2d7c:	4a19      	ldr	r2, [pc, #100]	; (2de4 <system_clock_source_disable+0x74>)
    2d7e:	7d13      	ldrb	r3, [r2, #20]
    2d80:	2102      	movs	r1, #2
    2d82:	438b      	bics	r3, r1
    2d84:	7513      	strb	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    2d86:	2000      	movs	r0, #0
}
    2d88:	4770      	bx	lr
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    2d8a:	4a17      	ldr	r2, [pc, #92]	; (2de8 <system_clock_source_disable+0x78>)
    2d8c:	6993      	ldr	r3, [r2, #24]
    2d8e:	2102      	movs	r1, #2
    2d90:	438b      	bics	r3, r1
    2d92:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    2d94:	2000      	movs	r0, #0
		break;
    2d96:	e7f7      	b.n	2d88 <system_clock_source_disable+0x18>
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    2d98:	4a12      	ldr	r2, [pc, #72]	; (2de4 <system_clock_source_disable+0x74>)
    2d9a:	8a13      	ldrh	r3, [r2, #16]
    2d9c:	2102      	movs	r1, #2
    2d9e:	438b      	bics	r3, r1
    2da0:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2da2:	2000      	movs	r0, #0
		break;
    2da4:	e7f0      	b.n	2d88 <system_clock_source_disable+0x18>
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    2da6:	4a10      	ldr	r2, [pc, #64]	; (2de8 <system_clock_source_disable+0x78>)
    2da8:	6953      	ldr	r3, [r2, #20]
    2daa:	2102      	movs	r1, #2
    2dac:	438b      	bics	r3, r1
    2dae:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    2db0:	2000      	movs	r0, #0
		break;
    2db2:	e7e9      	b.n	2d88 <system_clock_source_disable+0x18>
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    2db4:	4b0d      	ldr	r3, [pc, #52]	; (2dec <system_clock_source_disable+0x7c>)
    2db6:	681a      	ldr	r2, [r3, #0]
    2db8:	2102      	movs	r1, #2
    2dba:	438a      	bics	r2, r1
    2dbc:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2dbe:	681b      	ldr	r3, [r3, #0]
    2dc0:	b29b      	uxth	r3, r3
    2dc2:	4a08      	ldr	r2, [pc, #32]	; (2de4 <system_clock_source_disable+0x74>)
    2dc4:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    2dc6:	2000      	movs	r0, #0
		break;
    2dc8:	e7de      	b.n	2d88 <system_clock_source_disable+0x18>
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    2dca:	4906      	ldr	r1, [pc, #24]	; (2de4 <system_clock_source_disable+0x74>)
    2dcc:	2228      	movs	r2, #40	; 0x28
    2dce:	5c8b      	ldrb	r3, [r1, r2]
    2dd0:	2002      	movs	r0, #2
    2dd2:	4383      	bics	r3, r0
    2dd4:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2dd6:	2000      	movs	r0, #0
		break;
    2dd8:	e7d6      	b.n	2d88 <system_clock_source_disable+0x18>
		return STATUS_ERR_INVALID_ARG;
    2dda:	2017      	movs	r0, #23
    2ddc:	e7d4      	b.n	2d88 <system_clock_source_disable+0x18>
    2dde:	46c0      	nop			; (mov r8, r8)
    2de0:	00019c70 	.word	0x00019c70
    2de4:	40000c00 	.word	0x40000c00
    2de8:	40001000 	.word	0x40001000
    2dec:	20000a60 	.word	0x20000a60

00002df0 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2df0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2df2:	46ce      	mov	lr, r9
    2df4:	4647      	mov	r7, r8
    2df6:	b580      	push	{r7, lr}
    2df8:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    2dfa:	2280      	movs	r2, #128	; 0x80
    2dfc:	0052      	lsls	r2, r2, #1
    2dfe:	4b76      	ldr	r3, [pc, #472]	; (2fd8 <system_clock_init+0x1e8>)
    2e00:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    2e02:	3afd      	subs	r2, #253	; 0xfd
    2e04:	4b75      	ldr	r3, [pc, #468]	; (2fdc <system_clock_init+0x1ec>)
    2e06:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2e08:	4a75      	ldr	r2, [pc, #468]	; (2fe0 <system_clock_init+0x1f0>)
    2e0a:	6853      	ldr	r3, [r2, #4]
    2e0c:	211e      	movs	r1, #30
    2e0e:	438b      	bics	r3, r1
    2e10:	391a      	subs	r1, #26
    2e12:	430b      	orrs	r3, r1
    2e14:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    2e16:	2380      	movs	r3, #128	; 0x80
    2e18:	05db      	lsls	r3, r3, #23
    2e1a:	789b      	ldrb	r3, [r3, #2]
    2e1c:	2b02      	cmp	r3, #2
    2e1e:	d00f      	beq.n	2e40 <system_clock_init+0x50>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB || SAMR34J || SAMR35J
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    2e20:	2380      	movs	r3, #128	; 0x80
    2e22:	05db      	lsls	r3, r3, #23
    2e24:	789b      	ldrb	r3, [r3, #2]
    2e26:	b25b      	sxtb	r3, r3
    2e28:	2b00      	cmp	r3, #0
    2e2a:	db09      	blt.n	2e40 <system_clock_init+0x50>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    2e2c:	2380      	movs	r3, #128	; 0x80
    2e2e:	05db      	lsls	r3, r3, #23
    2e30:	2201      	movs	r2, #1
    2e32:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    2e34:	3201      	adds	r2, #1
    2e36:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    2e38:	001a      	movs	r2, r3
    2e3a:	7993      	ldrb	r3, [r2, #6]
    2e3c:	2b00      	cmp	r3, #0
    2e3e:	d0fc      	beq.n	2e3a <system_clock_init+0x4a>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    2e40:	a809      	add	r0, sp, #36	; 0x24
    2e42:	2300      	movs	r3, #0
    2e44:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    2e46:	2280      	movs	r2, #128	; 0x80
    2e48:	0212      	lsls	r2, r2, #8
    2e4a:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    2e4c:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    2e4e:	2201      	movs	r2, #1
    2e50:	70c2      	strb	r2, [r0, #3]
	config->run_in_standby      = false;
    2e52:	7203      	strb	r3, [r0, #8]
	config->write_once          = false;
    2e54:	7283      	strb	r3, [r0, #10]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    2e56:	3203      	adds	r2, #3
    2e58:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    2e5a:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    2e5c:	4b61      	ldr	r3, [pc, #388]	; (2fe4 <system_clock_init+0x1f4>)
    2e5e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    2e60:	2005      	movs	r0, #5
    2e62:	4b61      	ldr	r3, [pc, #388]	; (2fe8 <system_clock_init+0x1f8>)
    2e64:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    2e66:	4961      	ldr	r1, [pc, #388]	; (2fec <system_clock_init+0x1fc>)
    2e68:	2201      	movs	r2, #1
    2e6a:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    2e6c:	421a      	tst	r2, r3
    2e6e:	d0fc      	beq.n	2e6a <system_clock_init+0x7a>
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2e70:	a901      	add	r1, sp, #4
    2e72:	2501      	movs	r5, #1
    2e74:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    2e76:	2400      	movs	r4, #0
    2e78:	704c      	strb	r4, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    2e7a:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    2e7c:	724c      	strb	r4, [r1, #9]
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    2e7e:	2303      	movs	r3, #3
    2e80:	700b      	strb	r3, [r1, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    2e82:	2000      	movs	r0, #0
    2e84:	4b5a      	ldr	r3, [pc, #360]	; (2ff0 <system_clock_init+0x200>)
    2e86:	4798      	blx	r3
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    2e88:	2006      	movs	r0, #6
    2e8a:	4b5a      	ldr	r3, [pc, #360]	; (2ff4 <system_clock_init+0x204>)
    2e8c:	4798      	blx	r3
	config->run_in_standby  = false;
    2e8e:	466b      	mov	r3, sp
    2e90:	705c      	strb	r4, [r3, #1]
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    2e92:	701d      	strb	r5, [r3, #0]
	osc16m_conf.on_demand       = 0;
    2e94:	709c      	strb	r4, [r3, #2]
	system_clock_source_osc16m_set_config(&osc16m_conf);
    2e96:	4668      	mov	r0, sp
    2e98:	4b57      	ldr	r3, [pc, #348]	; (2ff8 <system_clock_init+0x208>)
    2e9a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    2e9c:	2006      	movs	r0, #6
    2e9e:	4b52      	ldr	r3, [pc, #328]	; (2fe8 <system_clock_init+0x1f8>)
    2ea0:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    2ea2:	494d      	ldr	r1, [pc, #308]	; (2fd8 <system_clock_init+0x1e8>)
    2ea4:	2210      	movs	r2, #16
    2ea6:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    2ea8:	421a      	tst	r2, r3
    2eaa:	d0fc      	beq.n	2ea6 <system_clock_init+0xb6>
	config->division_factor    = 1;
    2eac:	a901      	add	r1, sp, #4
    2eae:	2301      	movs	r3, #1
    2eb0:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    2eb2:	2400      	movs	r4, #0
    2eb4:	704c      	strb	r4, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    2eb6:	3305      	adds	r3, #5
    2eb8:	700b      	strb	r3, [r1, #0]
	config->run_in_standby     = false;
    2eba:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    2ebc:	724c      	strb	r4, [r1, #9]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    2ebe:	2000      	movs	r0, #0
    2ec0:	4b4b      	ldr	r3, [pc, #300]	; (2ff0 <system_clock_init+0x200>)
    2ec2:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    2ec4:	ab04      	add	r3, sp, #16
    2ec6:	2200      	movs	r2, #0
    2ec8:	809c      	strh	r4, [r3, #4]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    2eca:	80dc      	strh	r4, [r3, #6]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2ecc:	721a      	strb	r2, [r3, #8]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    2ece:	725a      	strb	r2, [r3, #9]
	config->run_in_stanby   = false;
    2ed0:	709a      	strb	r2, [r3, #2]
	config->fine_value      = 0xff / 4; /* Midpoint */
    2ed2:	213f      	movs	r1, #63	; 0x3f
    2ed4:	8199      	strh	r1, [r3, #12]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    2ed6:	393b      	subs	r1, #59	; 0x3b
    2ed8:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    2eda:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    26 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP5)
    2edc:	4b47      	ldr	r3, [pc, #284]	; (2ffc <system_clock_init+0x20c>)
    2ede:	681b      	ldr	r3, [r3, #0]
    2ee0:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the Calibration value is not correct */
	if (coarse == 0x3f) {
    2ee2:	2b3f      	cmp	r3, #63	; 0x3f
    2ee4:	d100      	bne.n	2ee8 <system_clock_init+0xf8>
    2ee6:	e074      	b.n	2fd2 <system_clock_init+0x1e2>
		coarse = 0x1f;
	}

	dfll_conf.coarse_value = coarse;
    2ee8:	a804      	add	r0, sp, #16
    2eea:	7283      	strb	r3, [r0, #10]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    2eec:	23b7      	movs	r3, #183	; 0xb7
    2eee:	00db      	lsls	r3, r3, #3
    2ef0:	8243      	strh	r3, [r0, #18]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    2ef2:	2307      	movs	r3, #7
    2ef4:	7383      	strb	r3, [r0, #14]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    2ef6:	3338      	adds	r3, #56	; 0x38
    2ef8:	8203      	strh	r3, [r0, #16]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    2efa:	4b41      	ldr	r3, [pc, #260]	; (3000 <system_clock_init+0x210>)
    2efc:	4798      	blx	r3
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2efe:	4b41      	ldr	r3, [pc, #260]	; (3004 <system_clock_init+0x214>)
    2f00:	4798      	blx	r3
	config->division_factor    = 1;
    2f02:	ac01      	add	r4, sp, #4
    2f04:	2601      	movs	r6, #1
    2f06:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    2f08:	2500      	movs	r5, #0
    2f0a:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    2f0c:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    2f0e:	2305      	movs	r3, #5
    2f10:	4699      	mov	r9, r3
    2f12:	7023      	strb	r3, [r4, #0]
    2f14:	7226      	strb	r6, [r4, #8]
    2f16:	0021      	movs	r1, r4
    2f18:	2001      	movs	r0, #1
    2f1a:	4b35      	ldr	r3, [pc, #212]	; (2ff0 <system_clock_init+0x200>)
    2f1c:	4698      	mov	r8, r3
    2f1e:	4798      	blx	r3
    2f20:	2001      	movs	r0, #1
    2f22:	4f39      	ldr	r7, [pc, #228]	; (3008 <system_clock_init+0x218>)
    2f24:	47b8      	blx	r7
	config->high_when_disabled = false;
    2f26:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    2f28:	2306      	movs	r3, #6
    2f2a:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    2f2c:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    2f2e:	7265      	strb	r5, [r4, #9]
    2f30:	464b      	mov	r3, r9
    2f32:	6063      	str	r3, [r4, #4]
    2f34:	0021      	movs	r1, r4
    2f36:	2002      	movs	r0, #2
    2f38:	47c0      	blx	r8
    2f3a:	2002      	movs	r0, #2
    2f3c:	47b8      	blx	r7
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    2f3e:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(OSCCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    2f40:	0021      	movs	r1, r4
    2f42:	2000      	movs	r0, #0
    2f44:	4b31      	ldr	r3, [pc, #196]	; (300c <system_clock_init+0x21c>)
    2f46:	4798      	blx	r3
		system_gclk_chan_enable(OSCCTRL_GCLK_ID_DFLL48);
    2f48:	2000      	movs	r0, #0
    2f4a:	4b31      	ldr	r3, [pc, #196]	; (3010 <system_clock_init+0x220>)
    2f4c:	4798      	blx	r3
#  endif
#endif

	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    2f4e:	2007      	movs	r0, #7
    2f50:	4b25      	ldr	r3, [pc, #148]	; (2fe8 <system_clock_init+0x1f8>)
    2f52:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    2f54:	4920      	ldr	r1, [pc, #128]	; (2fd8 <system_clock_init+0x1e8>)
    2f56:	22d0      	movs	r2, #208	; 0xd0
    2f58:	0112      	lsls	r2, r2, #4
    2f5a:	68cb      	ldr	r3, [r1, #12]
    2f5c:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    2f5e:	4293      	cmp	r3, r2
    2f60:	d1fb      	bne.n	2f5a <system_clock_init+0x16a>
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    2f62:	4c2c      	ldr	r4, [pc, #176]	; (3014 <system_clock_init+0x224>)
    2f64:	2301      	movs	r3, #1
    2f66:	71a3      	strb	r3, [r4, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    2f68:	7163      	strb	r3, [r4, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    2f6a:	7123      	strb	r3, [r4, #4]
	config->high_when_disabled = false;
    2f6c:	a901      	add	r1, sp, #4
    2f6e:	2300      	movs	r3, #0
    2f70:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    2f72:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    2f74:	724b      	strb	r3, [r1, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2f76:	3307      	adds	r3, #7
    2f78:	700b      	strb	r3, [r1, #0]
    2f7a:	3b01      	subs	r3, #1
    2f7c:	604b      	str	r3, [r1, #4]
    2f7e:	2000      	movs	r0, #0
    2f80:	4b1b      	ldr	r3, [pc, #108]	; (2ff0 <system_clock_init+0x200>)
    2f82:	4798      	blx	r3
    2f84:	2000      	movs	r0, #0
    2f86:	4b20      	ldr	r3, [pc, #128]	; (3008 <system_clock_init+0x218>)
    2f88:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    2f8a:	2000      	movs	r0, #0
    2f8c:	4b22      	ldr	r3, [pc, #136]	; (3018 <system_clock_init+0x228>)
    2f8e:	4798      	blx	r3
    2f90:	7921      	ldrb	r1, [r4, #4]
    2f92:	b2c9      	uxtb	r1, r1
    2f94:	4b21      	ldr	r3, [pc, #132]	; (301c <system_clock_init+0x22c>)
    2f96:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    2f98:	4b21      	ldr	r3, [pc, #132]	; (3020 <system_clock_init+0x230>)
    2f9a:	4298      	cmp	r0, r3
    2f9c:	d814      	bhi.n	2fc8 <system_clock_init+0x1d8>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    2f9e:	2380      	movs	r3, #128	; 0x80
    2fa0:	05db      	lsls	r3, r3, #23
    2fa2:	789b      	ldrb	r3, [r3, #2]
    2fa4:	2b00      	cmp	r3, #0
    2fa6:	d00f      	beq.n	2fc8 <system_clock_init+0x1d8>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    2fa8:	2380      	movs	r3, #128	; 0x80
    2faa:	05db      	lsls	r3, r3, #23
    2fac:	789b      	ldrb	r3, [r3, #2]
    2fae:	b25b      	sxtb	r3, r3
    2fb0:	2b00      	cmp	r3, #0
    2fb2:	db09      	blt.n	2fc8 <system_clock_init+0x1d8>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    2fb4:	2380      	movs	r3, #128	; 0x80
    2fb6:	05db      	lsls	r3, r3, #23
    2fb8:	2201      	movs	r2, #1
    2fba:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    2fbc:	2200      	movs	r2, #0
    2fbe:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    2fc0:	001a      	movs	r2, r3
    2fc2:	7993      	ldrb	r3, [r2, #6]
    2fc4:	2b00      	cmp	r3, #0
    2fc6:	d0fc      	beq.n	2fc2 <system_clock_init+0x1d2>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    2fc8:	b00d      	add	sp, #52	; 0x34
    2fca:	bc0c      	pop	{r2, r3}
    2fcc:	4690      	mov	r8, r2
    2fce:	4699      	mov	r9, r3
    2fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    2fd2:	3b20      	subs	r3, #32
    2fd4:	e788      	b.n	2ee8 <system_clock_init+0xf8>
    2fd6:	46c0      	nop			; (mov r8, r8)
    2fd8:	40000c00 	.word	0x40000c00
    2fdc:	40001400 	.word	0x40001400
    2fe0:	41004000 	.word	0x41004000
    2fe4:	00002b91 	.word	0x00002b91
    2fe8:	00002cb5 	.word	0x00002cb5
    2fec:	40001000 	.word	0x40001000
    2ff0:	00003049 	.word	0x00003049
    2ff4:	00002d71 	.word	0x00002d71
    2ff8:	00002b5d 	.word	0x00002b5d
    2ffc:	00806020 	.word	0x00806020
    3000:	00002c2d 	.word	0x00002c2d
    3004:	00003025 	.word	0x00003025
    3008:	000030f5 	.word	0x000030f5
    300c:	00003211 	.word	0x00003211
    3010:	000031a1 	.word	0x000031a1
    3014:	40000400 	.word	0x40000400
    3018:	00003135 	.word	0x00003135
    301c:	00011a09 	.word	0x00011a09
    3020:	00b71b00 	.word	0x00b71b00

00003024 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    3024:	4a06      	ldr	r2, [pc, #24]	; (3040 <system_gclk_init+0x1c>)
    3026:	6953      	ldr	r3, [r2, #20]
    3028:	2140      	movs	r1, #64	; 0x40
    302a:	430b      	orrs	r3, r1
    302c:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    302e:	2201      	movs	r2, #1
    3030:	4b04      	ldr	r3, [pc, #16]	; (3044 <system_gclk_init+0x20>)
    3032:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    3034:	0019      	movs	r1, r3
    3036:	780b      	ldrb	r3, [r1, #0]
    3038:	4213      	tst	r3, r2
    303a:	d1fc      	bne.n	3036 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    303c:	4770      	bx	lr
    303e:	46c0      	nop			; (mov r8, r8)
    3040:	40000400 	.word	0x40000400
    3044:	40001800 	.word	0x40001800

00003048 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    3048:	b570      	push	{r4, r5, r6, lr}
    304a:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    304c:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    304e:	784b      	ldrb	r3, [r1, #1]
    3050:	2b00      	cmp	r3, #0
    3052:	d002      	beq.n	305a <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    3054:	2380      	movs	r3, #128	; 0x80
    3056:	00db      	lsls	r3, r3, #3
    3058:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    305a:	7a4b      	ldrb	r3, [r1, #9]
    305c:	2b00      	cmp	r3, #0
    305e:	d002      	beq.n	3066 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    3060:	2380      	movs	r3, #128	; 0x80
    3062:	011b      	lsls	r3, r3, #4
    3064:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    3066:	6848      	ldr	r0, [r1, #4]
    3068:	2801      	cmp	r0, #1
    306a:	d90f      	bls.n	308c <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    306c:	1e43      	subs	r3, r0, #1
    306e:	4218      	tst	r0, r3
    3070:	d131      	bne.n	30d6 <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3072:	2802      	cmp	r0, #2
    3074:	d92d      	bls.n	30d2 <system_gclk_gen_set_config+0x8a>
    3076:	2302      	movs	r3, #2
    3078:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    307a:	3201      	adds	r2, #1
						mask <<= 1) {
    307c:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    307e:	4298      	cmp	r0, r3
    3080:	d8fb      	bhi.n	307a <system_gclk_gen_set_config+0x32>
    3082:	2380      	movs	r3, #128	; 0x80
    3084:	015b      	lsls	r3, r3, #5
    3086:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    3088:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    308a:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    308c:	7a0b      	ldrb	r3, [r1, #8]
    308e:	2b00      	cmp	r3, #0
    3090:	d002      	beq.n	3098 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    3092:	2380      	movs	r3, #128	; 0x80
    3094:	019b      	lsls	r3, r3, #6
    3096:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    3098:	2604      	movs	r6, #4
    309a:	40a6      	lsls	r6, r4
    309c:	4911      	ldr	r1, [pc, #68]	; (30e4 <system_gclk_gen_set_config+0x9c>)
    309e:	4a12      	ldr	r2, [pc, #72]	; (30e8 <system_gclk_gen_set_config+0xa0>)
    30a0:	684b      	ldr	r3, [r1, #4]
    30a2:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    30a4:	421e      	tst	r6, r3
    30a6:	d1fb      	bne.n	30a0 <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    30a8:	4b10      	ldr	r3, [pc, #64]	; (30ec <system_gclk_gen_set_config+0xa4>)
    30aa:	4798      	blx	r3
    30ac:	00a4      	lsls	r4, r4, #2
    30ae:	4b0d      	ldr	r3, [pc, #52]	; (30e4 <system_gclk_gen_set_config+0x9c>)
    30b0:	469c      	mov	ip, r3
    30b2:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    30b4:	6a22      	ldr	r2, [r4, #32]
    30b6:	2380      	movs	r3, #128	; 0x80
    30b8:	005b      	lsls	r3, r3, #1
    30ba:	401a      	ands	r2, r3
    30bc:	432a      	orrs	r2, r5
    30be:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    30c0:	4661      	mov	r1, ip
    30c2:	4a09      	ldr	r2, [pc, #36]	; (30e8 <system_gclk_gen_set_config+0xa0>)
    30c4:	684b      	ldr	r3, [r1, #4]
    30c6:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    30c8:	421e      	tst	r6, r3
    30ca:	d1fb      	bne.n	30c4 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    30cc:	4b08      	ldr	r3, [pc, #32]	; (30f0 <system_gclk_gen_set_config+0xa8>)
    30ce:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    30d0:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    30d2:	2200      	movs	r2, #0
    30d4:	e7d5      	b.n	3082 <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    30d6:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    30d8:	2380      	movs	r3, #128	; 0x80
    30da:	009b      	lsls	r3, r3, #2
    30dc:	4318      	orrs	r0, r3
    30de:	4305      	orrs	r5, r0
    30e0:	e7d4      	b.n	308c <system_gclk_gen_set_config+0x44>
    30e2:	46c0      	nop			; (mov r8, r8)
    30e4:	40001800 	.word	0x40001800
    30e8:	000007fc 	.word	0x000007fc
    30ec:	00000661 	.word	0x00000661
    30f0:	000006a1 	.word	0x000006a1

000030f4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    30f4:	b510      	push	{r4, lr}
    30f6:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    30f8:	2204      	movs	r2, #4
    30fa:	4082      	lsls	r2, r0
    30fc:	4809      	ldr	r0, [pc, #36]	; (3124 <system_gclk_gen_enable+0x30>)
    30fe:	490a      	ldr	r1, [pc, #40]	; (3128 <system_gclk_gen_enable+0x34>)
    3100:	6843      	ldr	r3, [r0, #4]
    3102:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    3104:	421a      	tst	r2, r3
    3106:	d1fb      	bne.n	3100 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    3108:	4b08      	ldr	r3, [pc, #32]	; (312c <system_gclk_gen_enable+0x38>)
    310a:	4798      	blx	r3
    310c:	00a4      	lsls	r4, r4, #2
    310e:	4b05      	ldr	r3, [pc, #20]	; (3124 <system_gclk_gen_enable+0x30>)
    3110:	469c      	mov	ip, r3
    3112:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    3114:	6a22      	ldr	r2, [r4, #32]
    3116:	2380      	movs	r3, #128	; 0x80
    3118:	005b      	lsls	r3, r3, #1
    311a:	4313      	orrs	r3, r2
    311c:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    311e:	4b04      	ldr	r3, [pc, #16]	; (3130 <system_gclk_gen_enable+0x3c>)
    3120:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3122:	bd10      	pop	{r4, pc}
    3124:	40001800 	.word	0x40001800
    3128:	000007fc 	.word	0x000007fc
    312c:	00000661 	.word	0x00000661
    3130:	000006a1 	.word	0x000006a1

00003134 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3136:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    3138:	2204      	movs	r2, #4
    313a:	4082      	lsls	r2, r0
    313c:	4812      	ldr	r0, [pc, #72]	; (3188 <system_gclk_gen_get_hz+0x54>)
    313e:	4913      	ldr	r1, [pc, #76]	; (318c <system_gclk_gen_get_hz+0x58>)
    3140:	6843      	ldr	r3, [r0, #4]
    3142:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    3144:	421a      	tst	r2, r3
    3146:	d1fb      	bne.n	3140 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    3148:	4b11      	ldr	r3, [pc, #68]	; (3190 <system_gclk_gen_get_hz+0x5c>)
    314a:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    314c:	4f0e      	ldr	r7, [pc, #56]	; (3188 <system_gclk_gen_get_hz+0x54>)
    314e:	3408      	adds	r4, #8
    3150:	00a4      	lsls	r4, r4, #2
    3152:	59e0      	ldr	r0, [r4, r7]
    3154:	0700      	lsls	r0, r0, #28
    3156:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
    3158:	4b0e      	ldr	r3, [pc, #56]	; (3194 <system_gclk_gen_get_hz+0x60>)
    315a:	4798      	blx	r3
    315c:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    315e:	59e5      	ldr	r5, [r4, r7]
    3160:	04ed      	lsls	r5, r5, #19
    3162:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    3164:	59e4      	ldr	r4, [r4, r7]
    3166:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    3168:	4b0b      	ldr	r3, [pc, #44]	; (3198 <system_gclk_gen_get_hz+0x64>)
    316a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    316c:	2d00      	cmp	r5, #0
    316e:	d107      	bne.n	3180 <system_gclk_gen_get_hz+0x4c>
    3170:	2c01      	cmp	r4, #1
    3172:	d907      	bls.n	3184 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    3174:	0021      	movs	r1, r4
    3176:	0030      	movs	r0, r6
    3178:	4b08      	ldr	r3, [pc, #32]	; (319c <system_gclk_gen_get_hz+0x68>)
    317a:	4798      	blx	r3
    317c:	0006      	movs	r6, r0
    317e:	e001      	b.n	3184 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    3180:	3401      	adds	r4, #1
    3182:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    3184:	0030      	movs	r0, r6
    3186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3188:	40001800 	.word	0x40001800
    318c:	000007fc 	.word	0x000007fc
    3190:	00000661 	.word	0x00000661
    3194:	00002ac9 	.word	0x00002ac9
    3198:	000006a1 	.word	0x000006a1
    319c:	00011a09 	.word	0x00011a09

000031a0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    31a0:	b510      	push	{r4, lr}
    31a2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    31a4:	4b09      	ldr	r3, [pc, #36]	; (31cc <system_gclk_chan_enable+0x2c>)
    31a6:	4798      	blx	r3
    31a8:	00a0      	lsls	r0, r4, #2
    31aa:	4b09      	ldr	r3, [pc, #36]	; (31d0 <system_gclk_chan_enable+0x30>)
    31ac:	469c      	mov	ip, r3
    31ae:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    31b0:	2280      	movs	r2, #128	; 0x80
    31b2:	5883      	ldr	r3, [r0, r2]
    31b4:	2140      	movs	r1, #64	; 0x40
    31b6:	430b      	orrs	r3, r1
    31b8:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    31ba:	3140      	adds	r1, #64	; 0x40
    31bc:	3a40      	subs	r2, #64	; 0x40
    31be:	5843      	ldr	r3, [r0, r1]
    31c0:	421a      	tst	r2, r3
    31c2:	d0fc      	beq.n	31be <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    31c4:	4b03      	ldr	r3, [pc, #12]	; (31d4 <system_gclk_chan_enable+0x34>)
    31c6:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    31c8:	bd10      	pop	{r4, pc}
    31ca:	46c0      	nop			; (mov r8, r8)
    31cc:	00000661 	.word	0x00000661
    31d0:	40001800 	.word	0x40001800
    31d4:	000006a1 	.word	0x000006a1

000031d8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    31d8:	b510      	push	{r4, lr}
    31da:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    31dc:	4b09      	ldr	r3, [pc, #36]	; (3204 <system_gclk_chan_disable+0x2c>)
    31de:	4798      	blx	r3
    31e0:	00a0      	lsls	r0, r4, #2
    31e2:	4b09      	ldr	r3, [pc, #36]	; (3208 <system_gclk_chan_disable+0x30>)
    31e4:	469c      	mov	ip, r3
    31e6:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    31e8:	2280      	movs	r2, #128	; 0x80
    31ea:	5883      	ldr	r3, [r0, r2]
    31ec:	2140      	movs	r1, #64	; 0x40
    31ee:	438b      	bics	r3, r1
    31f0:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    31f2:	3140      	adds	r1, #64	; 0x40
    31f4:	3a40      	subs	r2, #64	; 0x40
    31f6:	5843      	ldr	r3, [r0, r1]
    31f8:	421a      	tst	r2, r3
    31fa:	d1fc      	bne.n	31f6 <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    31fc:	4b03      	ldr	r3, [pc, #12]	; (320c <system_gclk_chan_disable+0x34>)
    31fe:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    3200:	bd10      	pop	{r4, pc}
    3202:	46c0      	nop			; (mov r8, r8)
    3204:	00000661 	.word	0x00000661
    3208:	40001800 	.word	0x40001800
    320c:	000006a1 	.word	0x000006a1

00003210 <system_gclk_chan_set_config>:
{
    3210:	b570      	push	{r4, r5, r6, lr}
    3212:	0004      	movs	r4, r0
    3214:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    3216:	4b05      	ldr	r3, [pc, #20]	; (322c <system_gclk_chan_set_config+0x1c>)
    3218:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    321a:	782a      	ldrb	r2, [r5, #0]
    321c:	230f      	movs	r3, #15
    321e:	4013      	ands	r3, r2
    3220:	3420      	adds	r4, #32
    3222:	00a4      	lsls	r4, r4, #2
    3224:	4a02      	ldr	r2, [pc, #8]	; (3230 <system_gclk_chan_set_config+0x20>)
    3226:	50a3      	str	r3, [r4, r2]
}
    3228:	bd70      	pop	{r4, r5, r6, pc}
    322a:	46c0      	nop			; (mov r8, r8)
    322c:	000031d9 	.word	0x000031d9
    3230:	40001800 	.word	0x40001800

00003234 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3234:	b510      	push	{r4, lr}
    3236:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3238:	4b06      	ldr	r3, [pc, #24]	; (3254 <system_gclk_chan_get_hz+0x20>)
    323a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    323c:	3420      	adds	r4, #32
    323e:	00a4      	lsls	r4, r4, #2
    3240:	4b05      	ldr	r3, [pc, #20]	; (3258 <system_gclk_chan_get_hz+0x24>)
    3242:	58e4      	ldr	r4, [r4, r3]
    3244:	0724      	lsls	r4, r4, #28
    3246:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    3248:	4b04      	ldr	r3, [pc, #16]	; (325c <system_gclk_chan_get_hz+0x28>)
    324a:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    324c:	0020      	movs	r0, r4
    324e:	4b04      	ldr	r3, [pc, #16]	; (3260 <system_gclk_chan_get_hz+0x2c>)
    3250:	4798      	blx	r3
}
    3252:	bd10      	pop	{r4, pc}
    3254:	00000661 	.word	0x00000661
    3258:	40001800 	.word	0x40001800
    325c:	000006a1 	.word	0x000006a1
    3260:	00003135 	.word	0x00003135

00003264 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    3264:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    3266:	78d3      	ldrb	r3, [r2, #3]
    3268:	2b00      	cmp	r3, #0
    326a:	d135      	bne.n	32d8 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    326c:	7813      	ldrb	r3, [r2, #0]
    326e:	2b80      	cmp	r3, #128	; 0x80
    3270:	d029      	beq.n	32c6 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    3272:	061b      	lsls	r3, r3, #24
    3274:	2480      	movs	r4, #128	; 0x80
    3276:	0264      	lsls	r4, r4, #9
    3278:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    327a:	7854      	ldrb	r4, [r2, #1]
    327c:	2502      	movs	r5, #2
    327e:	43ac      	bics	r4, r5
    3280:	d106      	bne.n	3290 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    3282:	7894      	ldrb	r4, [r2, #2]
    3284:	2c00      	cmp	r4, #0
    3286:	d120      	bne.n	32ca <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    3288:	2480      	movs	r4, #128	; 0x80
    328a:	02a4      	lsls	r4, r4, #10
    328c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    328e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3290:	7854      	ldrb	r4, [r2, #1]
    3292:	3c01      	subs	r4, #1
    3294:	2c01      	cmp	r4, #1
    3296:	d91c      	bls.n	32d2 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3298:	040d      	lsls	r5, r1, #16
    329a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    329c:	24a0      	movs	r4, #160	; 0xa0
    329e:	05e4      	lsls	r4, r4, #23
    32a0:	432c      	orrs	r4, r5
    32a2:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    32a4:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    32a6:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    32a8:	24d0      	movs	r4, #208	; 0xd0
    32aa:	0624      	lsls	r4, r4, #24
    32ac:	432c      	orrs	r4, r5
    32ae:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    32b0:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    32b2:	78d4      	ldrb	r4, [r2, #3]
    32b4:	2c00      	cmp	r4, #0
    32b6:	d122      	bne.n	32fe <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    32b8:	035b      	lsls	r3, r3, #13
    32ba:	d51c      	bpl.n	32f6 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    32bc:	7893      	ldrb	r3, [r2, #2]
    32be:	2b01      	cmp	r3, #1
    32c0:	d01e      	beq.n	3300 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    32c2:	6141      	str	r1, [r0, #20]
    32c4:	e017      	b.n	32f6 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    32c6:	2300      	movs	r3, #0
    32c8:	e7d7      	b.n	327a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    32ca:	24c0      	movs	r4, #192	; 0xc0
    32cc:	02e4      	lsls	r4, r4, #11
    32ce:	4323      	orrs	r3, r4
    32d0:	e7dd      	b.n	328e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    32d2:	4c0d      	ldr	r4, [pc, #52]	; (3308 <_system_pinmux_config+0xa4>)
    32d4:	4023      	ands	r3, r4
    32d6:	e7df      	b.n	3298 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    32d8:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    32da:	040c      	lsls	r4, r1, #16
    32dc:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    32de:	23a0      	movs	r3, #160	; 0xa0
    32e0:	05db      	lsls	r3, r3, #23
    32e2:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    32e4:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    32e6:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    32e8:	23d0      	movs	r3, #208	; 0xd0
    32ea:	061b      	lsls	r3, r3, #24
    32ec:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    32ee:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    32f0:	78d3      	ldrb	r3, [r2, #3]
    32f2:	2b00      	cmp	r3, #0
    32f4:	d103      	bne.n	32fe <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    32f6:	7853      	ldrb	r3, [r2, #1]
    32f8:	3b01      	subs	r3, #1
    32fa:	2b01      	cmp	r3, #1
    32fc:	d902      	bls.n	3304 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    32fe:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    3300:	6181      	str	r1, [r0, #24]
    3302:	e7f8      	b.n	32f6 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    3304:	6081      	str	r1, [r0, #8]
}
    3306:	e7fa      	b.n	32fe <_system_pinmux_config+0x9a>
    3308:	fffbffff 	.word	0xfffbffff

0000330c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    330c:	b510      	push	{r4, lr}
    330e:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    3310:	09c1      	lsrs	r1, r0, #7
		return NULL;
    3312:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3314:	2900      	cmp	r1, #0
    3316:	d104      	bne.n	3322 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    3318:	0943      	lsrs	r3, r0, #5
    331a:	01db      	lsls	r3, r3, #7
    331c:	4905      	ldr	r1, [pc, #20]	; (3334 <system_pinmux_pin_set_config+0x28>)
    331e:	468c      	mov	ip, r1
    3320:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    3322:	241f      	movs	r4, #31
    3324:	4020      	ands	r0, r4
    3326:	2101      	movs	r1, #1
    3328:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    332a:	0018      	movs	r0, r3
    332c:	4b02      	ldr	r3, [pc, #8]	; (3338 <system_pinmux_pin_set_config+0x2c>)
    332e:	4798      	blx	r3
}
    3330:	bd10      	pop	{r4, pc}
    3332:	46c0      	nop			; (mov r8, r8)
    3334:	40002800 	.word	0x40002800
    3338:	00003265 	.word	0x00003265

0000333c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    333c:	4770      	bx	lr
	...

00003340 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3340:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    3342:	4b05      	ldr	r3, [pc, #20]	; (3358 <system_init+0x18>)
    3344:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    3346:	4b05      	ldr	r3, [pc, #20]	; (335c <system_init+0x1c>)
    3348:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    334a:	4b05      	ldr	r3, [pc, #20]	; (3360 <system_init+0x20>)
    334c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    334e:	4b05      	ldr	r3, [pc, #20]	; (3364 <system_init+0x24>)
    3350:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    3352:	4b05      	ldr	r3, [pc, #20]	; (3368 <system_init+0x28>)
    3354:	4798      	blx	r3
}
    3356:	bd10      	pop	{r4, pc}
    3358:	00002df1 	.word	0x00002df1
    335c:	000006d1 	.word	0x000006d1
    3360:	0000333d 	.word	0x0000333d
    3364:	00000eb5 	.word	0x00000eb5
    3368:	0000333d 	.word	0x0000333d

0000336c <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    336c:	1c93      	adds	r3, r2, #2
    336e:	009b      	lsls	r3, r3, #2
    3370:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    3372:	2a02      	cmp	r2, #2
    3374:	d009      	beq.n	338a <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    3376:	2a03      	cmp	r2, #3
    3378:	d00c      	beq.n	3394 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    337a:	2301      	movs	r3, #1
    337c:	4093      	lsls	r3, r2
    337e:	001a      	movs	r2, r3
    3380:	7e03      	ldrb	r3, [r0, #24]
    3382:	4313      	orrs	r3, r2
    3384:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    3386:	2000      	movs	r0, #0
    3388:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    338a:	7e03      	ldrb	r3, [r0, #24]
    338c:	2210      	movs	r2, #16
    338e:	4313      	orrs	r3, r2
    3390:	7603      	strb	r3, [r0, #24]
    3392:	e7f8      	b.n	3386 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    3394:	7e03      	ldrb	r3, [r0, #24]
    3396:	2220      	movs	r2, #32
    3398:	4313      	orrs	r3, r2
    339a:	7603      	strb	r3, [r0, #24]
    339c:	e7f3      	b.n	3386 <tc_register_callback+0x1a>
	...

000033a0 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    33a0:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    33a2:	0080      	lsls	r0, r0, #2
    33a4:	4b16      	ldr	r3, [pc, #88]	; (3400 <_tc_interrupt_handler+0x60>)
    33a6:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    33a8:	6823      	ldr	r3, [r4, #0]
    33aa:	7a9d      	ldrb	r5, [r3, #10]
    33ac:	7e22      	ldrb	r2, [r4, #24]
    33ae:	7e63      	ldrb	r3, [r4, #25]
    33b0:	4013      	ands	r3, r2
    33b2:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    33b4:	07eb      	lsls	r3, r5, #31
    33b6:	d406      	bmi.n	33c6 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    33b8:	07ab      	lsls	r3, r5, #30
    33ba:	d40b      	bmi.n	33d4 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    33bc:	06eb      	lsls	r3, r5, #27
    33be:	d410      	bmi.n	33e2 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    33c0:	06ab      	lsls	r3, r5, #26
    33c2:	d415      	bmi.n	33f0 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    33c4:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    33c6:	0020      	movs	r0, r4
    33c8:	68a3      	ldr	r3, [r4, #8]
    33ca:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    33cc:	2301      	movs	r3, #1
    33ce:	6822      	ldr	r2, [r4, #0]
    33d0:	7293      	strb	r3, [r2, #10]
    33d2:	e7f1      	b.n	33b8 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    33d4:	0020      	movs	r0, r4
    33d6:	68e3      	ldr	r3, [r4, #12]
    33d8:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    33da:	2302      	movs	r3, #2
    33dc:	6822      	ldr	r2, [r4, #0]
    33de:	7293      	strb	r3, [r2, #10]
    33e0:	e7ec      	b.n	33bc <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    33e2:	0020      	movs	r0, r4
    33e4:	6923      	ldr	r3, [r4, #16]
    33e6:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    33e8:	2310      	movs	r3, #16
    33ea:	6822      	ldr	r2, [r4, #0]
    33ec:	7293      	strb	r3, [r2, #10]
    33ee:	e7e7      	b.n	33c0 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    33f0:	0020      	movs	r0, r4
    33f2:	6963      	ldr	r3, [r4, #20]
    33f4:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    33f6:	6823      	ldr	r3, [r4, #0]
    33f8:	2220      	movs	r2, #32
    33fa:	729a      	strb	r2, [r3, #10]
}
    33fc:	e7e2      	b.n	33c4 <_tc_interrupt_handler+0x24>
    33fe:	46c0      	nop			; (mov r8, r8)
    3400:	200011c0 	.word	0x200011c0

00003404 <TC0_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    3404:	b510      	push	{r4, lr}
    3406:	2000      	movs	r0, #0
    3408:	4b01      	ldr	r3, [pc, #4]	; (3410 <TC0_Handler+0xc>)
    340a:	4798      	blx	r3
    340c:	bd10      	pop	{r4, pc}
    340e:	46c0      	nop			; (mov r8, r8)
    3410:	000033a1 	.word	0x000033a1

00003414 <TC1_Handler>:
    3414:	b510      	push	{r4, lr}
    3416:	2001      	movs	r0, #1
    3418:	4b01      	ldr	r3, [pc, #4]	; (3420 <TC1_Handler+0xc>)
    341a:	4798      	blx	r3
    341c:	bd10      	pop	{r4, pc}
    341e:	46c0      	nop			; (mov r8, r8)
    3420:	000033a1 	.word	0x000033a1

00003424 <TC2_Handler>:
    3424:	b510      	push	{r4, lr}
    3426:	2002      	movs	r0, #2
    3428:	4b01      	ldr	r3, [pc, #4]	; (3430 <TC2_Handler+0xc>)
    342a:	4798      	blx	r3
    342c:	bd10      	pop	{r4, pc}
    342e:	46c0      	nop			; (mov r8, r8)
    3430:	000033a1 	.word	0x000033a1

00003434 <TC3_Handler>:
    3434:	b510      	push	{r4, lr}
    3436:	2003      	movs	r0, #3
    3438:	4b01      	ldr	r3, [pc, #4]	; (3440 <TC3_Handler+0xc>)
    343a:	4798      	blx	r3
    343c:	bd10      	pop	{r4, pc}
    343e:	46c0      	nop			; (mov r8, r8)
    3440:	000033a1 	.word	0x000033a1

00003444 <TC4_Handler>:
    3444:	b510      	push	{r4, lr}
    3446:	2004      	movs	r0, #4
    3448:	4b01      	ldr	r3, [pc, #4]	; (3450 <TC4_Handler+0xc>)
    344a:	4798      	blx	r3
    344c:	bd10      	pop	{r4, pc}
    344e:	46c0      	nop			; (mov r8, r8)
    3450:	000033a1 	.word	0x000033a1

00003454 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    3454:	b530      	push	{r4, r5, lr}
    3456:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    3458:	a901      	add	r1, sp, #4
    345a:	4b0c      	ldr	r3, [pc, #48]	; (348c <_tc_get_inst_index+0x38>)
    345c:	000a      	movs	r2, r1
    345e:	cb32      	ldmia	r3!, {r1, r4, r5}
    3460:	c232      	stmia	r2!, {r1, r4, r5}
    3462:	cb12      	ldmia	r3!, {r1, r4}
    3464:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    3466:	9b01      	ldr	r3, [sp, #4]
    3468:	4298      	cmp	r0, r3
    346a:	d00b      	beq.n	3484 <_tc_get_inst_index+0x30>
    346c:	2301      	movs	r3, #1
    346e:	a901      	add	r1, sp, #4
    3470:	009a      	lsls	r2, r3, #2
    3472:	5852      	ldr	r2, [r2, r1]
    3474:	4282      	cmp	r2, r0
    3476:	d006      	beq.n	3486 <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    3478:	3301      	adds	r3, #1
    347a:	2b05      	cmp	r3, #5
    347c:	d1f8      	bne.n	3470 <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    347e:	2000      	movs	r0, #0
}
    3480:	b007      	add	sp, #28
    3482:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    3484:	2300      	movs	r3, #0
			return i;
    3486:	b2d8      	uxtb	r0, r3
    3488:	e7fa      	b.n	3480 <_tc_get_inst_index+0x2c>
    348a:	46c0      	nop			; (mov r8, r8)
    348c:	00019cbc 	.word	0x00019cbc

00003490 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    3490:	b5f0      	push	{r4, r5, r6, r7, lr}
    3492:	46c6      	mov	lr, r8
    3494:	b500      	push	{lr}
    3496:	b08e      	sub	sp, #56	; 0x38
    3498:	0004      	movs	r4, r0
    349a:	000d      	movs	r5, r1
    349c:	0016      	movs	r6, r2
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    349e:	0008      	movs	r0, r1
    34a0:	4bae      	ldr	r3, [pc, #696]	; (375c <tc_init+0x2cc>)
    34a2:	4798      	blx	r3
    34a4:	4680      	mov	r8, r0
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC4};
#elif (SAML21J) || (SAMR34J) || (SAMR35J)
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC2_GCLK_ID, TC3_GCLK_ID, TC4_GCLK_ID};
    34a6:	ab0c      	add	r3, sp, #48	; 0x30
    34a8:	221b      	movs	r2, #27
    34aa:	701a      	strb	r2, [r3, #0]
    34ac:	705a      	strb	r2, [r3, #1]
    34ae:	3201      	adds	r2, #1
    34b0:	709a      	strb	r2, [r3, #2]
    34b2:	70da      	strb	r2, [r3, #3]
    34b4:	3201      	adds	r2, #1
    34b6:	711a      	strb	r2, [r3, #4]
	/* Array of MCLK APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    34b8:	a902      	add	r1, sp, #8
    34ba:	4ba9      	ldr	r3, [pc, #676]	; (3760 <tc_init+0x2d0>)
    34bc:	3314      	adds	r3, #20
    34be:	000a      	movs	r2, r1
    34c0:	cb83      	ldmia	r3!, {r0, r1, r7}
    34c2:	c283      	stmia	r2!, {r0, r1, r7}
    34c4:	cb83      	ldmia	r3!, {r0, r1, r7}
    34c6:	c283      	stmia	r2!, {r0, r1, r7}
    34c8:	cb83      	ldmia	r3!, {r0, r1, r7}
    34ca:	c283      	stmia	r2!, {r0, r1, r7}
    34cc:	681b      	ldr	r3, [r3, #0]
    34ce:	6013      	str	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    34d0:	2300      	movs	r3, #0
    34d2:	60a3      	str	r3, [r4, #8]
    34d4:	60e3      	str	r3, [r4, #12]
    34d6:	6123      	str	r3, [r4, #16]
    34d8:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    34da:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    34dc:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    34de:	4643      	mov	r3, r8
    34e0:	009a      	lsls	r2, r3, #2
    34e2:	4ba0      	ldr	r3, [pc, #640]	; (3764 <tc_init+0x2d4>)
    34e4:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    34e6:	6025      	str	r5, [r4, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    34e8:	2334      	movs	r3, #52	; 0x34
    34ea:	5cf3      	ldrb	r3, [r6, r3]
    34ec:	76a3      	strb	r3, [r4, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    34ee:	78f3      	ldrb	r3, [r6, #3]
    34f0:	2b08      	cmp	r3, #8
    34f2:	d008      	beq.n	3506 <tc_init+0x76>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    34f4:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    34f6:	682b      	ldr	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    34f8:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    34fa:	07db      	lsls	r3, r3, #31
    34fc:	d508      	bpl.n	3510 <tc_init+0x80>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    34fe:	b00e      	add	sp, #56	; 0x38
    3500:	bc04      	pop	{r2}
    3502:	4690      	mov	r8, r2
    3504:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    3506:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    3508:	4642      	mov	r2, r8
    350a:	07d2      	lsls	r2, r2, #31
    350c:	d4f7      	bmi.n	34fe <tc_init+0x6e>
    350e:	e7f1      	b.n	34f4 <tc_init+0x64>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    3510:	7aeb      	ldrb	r3, [r5, #11]
		return STATUS_ERR_DENIED;
    3512:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    3514:	079b      	lsls	r3, r3, #30
    3516:	d4f2      	bmi.n	34fe <tc_init+0x6e>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    3518:	682b      	ldr	r3, [r5, #0]
    351a:	079b      	lsls	r3, r3, #30
    351c:	d4ef      	bmi.n	34fe <tc_init+0x6e>
	if (config->pwm_channel[0].enabled) {
    351e:	7c33      	ldrb	r3, [r6, #16]
    3520:	2b00      	cmp	r3, #0
    3522:	d112      	bne.n	354a <tc_init+0xba>
	if (config->pwm_channel[1].enabled) {
    3524:	7f33      	ldrb	r3, [r6, #28]
    3526:	2b00      	cmp	r3, #0
    3528:	d11b      	bne.n	3562 <tc_init+0xd2>
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    352a:	4643      	mov	r3, r8
    352c:	005a      	lsls	r2, r3, #1
    352e:	a902      	add	r1, sp, #8
    3530:	1c53      	adds	r3, r2, #1
    3532:	009b      	lsls	r3, r3, #2
    3534:	5858      	ldr	r0, [r3, r1]
    3536:	4643      	mov	r3, r8
    3538:	00db      	lsls	r3, r3, #3
    353a:	585b      	ldr	r3, [r3, r1]
	switch (bus) {
    353c:	b2d9      	uxtb	r1, r3
    353e:	2904      	cmp	r1, #4
    3540:	d823      	bhi.n	358a <tc_init+0xfa>
    3542:	008b      	lsls	r3, r1, #2
    3544:	4988      	ldr	r1, [pc, #544]	; (3768 <tc_init+0x2d8>)
    3546:	58cb      	ldr	r3, [r1, r3]
    3548:	469f      	mov	pc, r3
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    354a:	a901      	add	r1, sp, #4
    354c:	2301      	movs	r3, #1
    354e:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    3550:	2200      	movs	r2, #0
    3552:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    3554:	7e32      	ldrb	r2, [r6, #24]
    3556:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    3558:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    355a:	7d30      	ldrb	r0, [r6, #20]
    355c:	4b83      	ldr	r3, [pc, #524]	; (376c <tc_init+0x2dc>)
    355e:	4798      	blx	r3
    3560:	e7e0      	b.n	3524 <tc_init+0x94>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3562:	a901      	add	r1, sp, #4
    3564:	2301      	movs	r3, #1
    3566:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    3568:	2200      	movs	r2, #0
    356a:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    356c:	3224      	adds	r2, #36	; 0x24
    356e:	18b2      	adds	r2, r6, r2
    3570:	7812      	ldrb	r2, [r2, #0]
    3572:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    3574:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    3576:	331f      	adds	r3, #31
    3578:	18f3      	adds	r3, r6, r3
    357a:	7818      	ldrb	r0, [r3, #0]
    357c:	4b7b      	ldr	r3, [pc, #492]	; (376c <tc_init+0x2dc>)
    357e:	4798      	blx	r3
    3580:	e7d3      	b.n	352a <tc_init+0x9a>
			MCLK->APBAMASK.reg |= mask;
    3582:	497b      	ldr	r1, [pc, #492]	; (3770 <tc_init+0x2e0>)
    3584:	694b      	ldr	r3, [r1, #20]
    3586:	4318      	orrs	r0, r3
    3588:	6148      	str	r0, [r1, #20]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    358a:	78f3      	ldrb	r3, [r6, #3]
    358c:	2b08      	cmp	r3, #8
    358e:	d100      	bne.n	3592 <tc_init+0x102>
    3590:	e086      	b.n	36a0 <tc_init+0x210>
	gclk_chan_config.source_generator = config->clock_source;
    3592:	7833      	ldrb	r3, [r6, #0]
    3594:	466a      	mov	r2, sp
    3596:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    3598:	ab0c      	add	r3, sp, #48	; 0x30
    359a:	4642      	mov	r2, r8
    359c:	5c9f      	ldrb	r7, [r3, r2]
    359e:	4669      	mov	r1, sp
    35a0:	0038      	movs	r0, r7
    35a2:	4b74      	ldr	r3, [pc, #464]	; (3774 <tc_init+0x2e4>)
    35a4:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    35a6:	0038      	movs	r0, r7
    35a8:	4b73      	ldr	r3, [pc, #460]	; (3778 <tc_init+0x2e8>)
    35aa:	4798      	blx	r3
			(uint32_t)config->counter_size |
    35ac:	78f3      	ldrb	r3, [r6, #3]
    35ae:	79f2      	ldrb	r2, [r6, #7]
    35b0:	4313      	orrs	r3, r2
			(uint32_t)config->clock_prescaler;
    35b2:	88b2      	ldrh	r2, [r6, #4]
	ctrla_tmp =
    35b4:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    35b6:	7a72      	ldrb	r2, [r6, #9]
    35b8:	2a00      	cmp	r2, #0
    35ba:	d002      	beq.n	35c2 <tc_init+0x132>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    35bc:	2280      	movs	r2, #128	; 0x80
    35be:	0252      	lsls	r2, r2, #9
    35c0:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    35c2:	7ab2      	ldrb	r2, [r6, #10]
    35c4:	2a00      	cmp	r2, #0
    35c6:	d002      	beq.n	35ce <tc_init+0x13e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    35c8:	2280      	movs	r2, #128	; 0x80
    35ca:	0292      	lsls	r2, r2, #10
    35cc:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    35ce:	7af2      	ldrb	r2, [r6, #11]
    35d0:	2a00      	cmp	r2, #0
    35d2:	d002      	beq.n	35da <tc_init+0x14a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    35d4:	2280      	movs	r2, #128	; 0x80
    35d6:	0352      	lsls	r2, r2, #13
    35d8:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    35da:	7b32      	ldrb	r2, [r6, #12]
    35dc:	2a00      	cmp	r2, #0
    35de:	d002      	beq.n	35e6 <tc_init+0x156>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    35e0:	2280      	movs	r2, #128	; 0x80
    35e2:	0392      	lsls	r2, r2, #14
    35e4:	4313      	orrs	r3, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    35e6:	7871      	ldrb	r1, [r6, #1]
    35e8:	0189      	lsls	r1, r1, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    35ea:	78b2      	ldrb	r2, [r6, #2]
    35ec:	01d2      	lsls	r2, r2, #7
    35ee:	4311      	orrs	r1, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    35f0:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    35f2:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	return (tc_module->SYNCBUSY.reg);
    35f4:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    35f6:	2b00      	cmp	r3, #0
    35f8:	d1fc      	bne.n	35f4 <tc_init+0x164>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    35fa:	6029      	str	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    35fc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    35fe:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    3600:	2b00      	cmp	r3, #0
    3602:	d1fc      	bne.n	35fe <tc_init+0x16e>
	hw->COUNT8.WAVE.reg = config->wave_generation;
    3604:	79b3      	ldrb	r3, [r6, #6]
    3606:	732b      	strb	r3, [r5, #12]
	if (config->oneshot) {
    3608:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    360a:	1e4b      	subs	r3, r1, #1
    360c:	4199      	sbcs	r1, r3
    360e:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    3610:	7bb3      	ldrb	r3, [r6, #14]
    3612:	2b00      	cmp	r3, #0
    3614:	d001      	beq.n	361a <tc_init+0x18a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    3616:	2301      	movs	r3, #1
    3618:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    361a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    361c:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    361e:	2b00      	cmp	r3, #0
    3620:	d1fc      	bne.n	361c <tc_init+0x18c>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    3622:	33ff      	adds	r3, #255	; 0xff
    3624:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    3626:	2900      	cmp	r1, #0
    3628:	d004      	beq.n	3634 <tc_init+0x1a4>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    362a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    362c:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
    362e:	2b00      	cmp	r3, #0
    3630:	d1fc      	bne.n	362c <tc_init+0x19c>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    3632:	7169      	strb	r1, [r5, #5]
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    3634:	7a33      	ldrb	r3, [r6, #8]
    3636:	736b      	strb	r3, [r5, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3638:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    363a:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    363c:	2b00      	cmp	r3, #0
    363e:	d1fc      	bne.n	363a <tc_init+0x1aa>
	switch (module_inst->counter_size) {
    3640:	7923      	ldrb	r3, [r4, #4]
    3642:	2b04      	cmp	r3, #4
    3644:	d059      	beq.n	36fa <tc_init+0x26a>
    3646:	2b08      	cmp	r3, #8
    3648:	d074      	beq.n	3734 <tc_init+0x2a4>
	return STATUS_ERR_INVALID_ARG;
    364a:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    364c:	2b00      	cmp	r3, #0
    364e:	d000      	beq.n	3652 <tc_init+0x1c2>
    3650:	e755      	b.n	34fe <tc_init+0x6e>
    3652:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    3654:	2b00      	cmp	r3, #0
    3656:	d1fc      	bne.n	3652 <tc_init+0x1c2>
				= config->counter_16_bit.value;
    3658:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    365a:	82ab      	strh	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    365c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    365e:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    3660:	2b00      	cmp	r3, #0
    3662:	d1fc      	bne.n	365e <tc_init+0x1ce>
					config->counter_16_bit.compare_capture_channel[0];
    3664:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    3666:	83ab      	strh	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3668:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    366a:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    366c:	2b00      	cmp	r3, #0
    366e:	d1fc      	bne.n	366a <tc_init+0x1da>
					config->counter_16_bit.compare_capture_channel[1];
    3670:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    3672:	83eb      	strh	r3, [r5, #30]
			return STATUS_OK;
    3674:	2000      	movs	r0, #0
    3676:	e742      	b.n	34fe <tc_init+0x6e>
			MCLK->APBBMASK.reg |= mask;
    3678:	493d      	ldr	r1, [pc, #244]	; (3770 <tc_init+0x2e0>)
    367a:	698b      	ldr	r3, [r1, #24]
    367c:	4318      	orrs	r0, r3
    367e:	6188      	str	r0, [r1, #24]
    3680:	e783      	b.n	358a <tc_init+0xfa>
			MCLK->APBCMASK.reg |= mask;
    3682:	493b      	ldr	r1, [pc, #236]	; (3770 <tc_init+0x2e0>)
    3684:	69cb      	ldr	r3, [r1, #28]
    3686:	4318      	orrs	r0, r3
    3688:	61c8      	str	r0, [r1, #28]
    368a:	e77e      	b.n	358a <tc_init+0xfa>
			MCLK->APBDMASK.reg |= mask;
    368c:	4938      	ldr	r1, [pc, #224]	; (3770 <tc_init+0x2e0>)
    368e:	6a0b      	ldr	r3, [r1, #32]
    3690:	4318      	orrs	r0, r3
    3692:	6208      	str	r0, [r1, #32]
    3694:	e779      	b.n	358a <tc_init+0xfa>
			MCLK->APBEMASK.reg |= mask;
    3696:	4b36      	ldr	r3, [pc, #216]	; (3770 <tc_init+0x2e0>)
    3698:	6a59      	ldr	r1, [r3, #36]	; 0x24
    369a:	4308      	orrs	r0, r1
    369c:	6258      	str	r0, [r3, #36]	; 0x24
    369e:	e774      	b.n	358a <tc_init+0xfa>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    36a0:	4643      	mov	r3, r8
    36a2:	3301      	adds	r3, #1
    36a4:	2b04      	cmp	r3, #4
    36a6:	dd00      	ble.n	36aa <tc_init+0x21a>
    36a8:	e773      	b.n	3592 <tc_init+0x102>
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    36aa:	ab02      	add	r3, sp, #8
    36ac:	1cd1      	adds	r1, r2, #3
    36ae:	0089      	lsls	r1, r1, #2
    36b0:	58c9      	ldr	r1, [r1, r3]
    36b2:	3202      	adds	r2, #2
    36b4:	0092      	lsls	r2, r2, #2
    36b6:	58d3      	ldr	r3, [r2, r3]
	switch (bus) {
    36b8:	b2da      	uxtb	r2, r3
    36ba:	2a04      	cmp	r2, #4
    36bc:	d900      	bls.n	36c0 <tc_init+0x230>
    36be:	e768      	b.n	3592 <tc_init+0x102>
    36c0:	0093      	lsls	r3, r2, #2
    36c2:	4a2e      	ldr	r2, [pc, #184]	; (377c <tc_init+0x2ec>)
    36c4:	58d3      	ldr	r3, [r2, r3]
    36c6:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    36c8:	4a29      	ldr	r2, [pc, #164]	; (3770 <tc_init+0x2e0>)
    36ca:	6953      	ldr	r3, [r2, #20]
    36cc:	4319      	orrs	r1, r3
    36ce:	6151      	str	r1, [r2, #20]
    36d0:	e75f      	b.n	3592 <tc_init+0x102>
			MCLK->APBBMASK.reg |= mask;
    36d2:	4a27      	ldr	r2, [pc, #156]	; (3770 <tc_init+0x2e0>)
    36d4:	6993      	ldr	r3, [r2, #24]
    36d6:	4319      	orrs	r1, r3
    36d8:	6191      	str	r1, [r2, #24]
    36da:	e75a      	b.n	3592 <tc_init+0x102>
			MCLK->APBCMASK.reg |= mask;
    36dc:	4a24      	ldr	r2, [pc, #144]	; (3770 <tc_init+0x2e0>)
    36de:	69d3      	ldr	r3, [r2, #28]
    36e0:	4319      	orrs	r1, r3
    36e2:	61d1      	str	r1, [r2, #28]
    36e4:	e755      	b.n	3592 <tc_init+0x102>
			MCLK->APBDMASK.reg |= mask;
    36e6:	4a22      	ldr	r2, [pc, #136]	; (3770 <tc_init+0x2e0>)
    36e8:	6a13      	ldr	r3, [r2, #32]
    36ea:	4319      	orrs	r1, r3
    36ec:	6211      	str	r1, [r2, #32]
    36ee:	e750      	b.n	3592 <tc_init+0x102>
			MCLK->APBEMASK.reg |= mask;
    36f0:	4b1f      	ldr	r3, [pc, #124]	; (3770 <tc_init+0x2e0>)
    36f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    36f4:	4311      	orrs	r1, r2
    36f6:	6259      	str	r1, [r3, #36]	; 0x24
    36f8:	e74b      	b.n	3592 <tc_init+0x102>
    36fa:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    36fc:	2b00      	cmp	r3, #0
    36fe:	d1fc      	bne.n	36fa <tc_init+0x26a>
					config->counter_8_bit.value;
    3700:	3328      	adds	r3, #40	; 0x28
    3702:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    3704:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3706:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    3708:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    370a:	2b00      	cmp	r3, #0
    370c:	d1fc      	bne.n	3708 <tc_init+0x278>
					config->counter_8_bit.period;
    370e:	3329      	adds	r3, #41	; 0x29
    3710:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    3712:	76eb      	strb	r3, [r5, #27]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3714:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    3716:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    3718:	2b00      	cmp	r3, #0
    371a:	d1fc      	bne.n	3716 <tc_init+0x286>
					config->counter_8_bit.compare_capture_channel[0];
    371c:	332a      	adds	r3, #42	; 0x2a
    371e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    3720:	772b      	strb	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3722:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    3724:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    3726:	2b00      	cmp	r3, #0
    3728:	d1fc      	bne.n	3724 <tc_init+0x294>
					config->counter_8_bit.compare_capture_channel[1];
    372a:	332b      	adds	r3, #43	; 0x2b
    372c:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    372e:	776b      	strb	r3, [r5, #29]
			return STATUS_OK;
    3730:	2000      	movs	r0, #0
    3732:	e6e4      	b.n	34fe <tc_init+0x6e>
    3734:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    3736:	2b00      	cmp	r3, #0
    3738:	d1fc      	bne.n	3734 <tc_init+0x2a4>
				= config->counter_32_bit.value;
    373a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    373c:	616b      	str	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    373e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    3740:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    3742:	2b00      	cmp	r3, #0
    3744:	d1fc      	bne.n	3740 <tc_init+0x2b0>
			hw->COUNT32.CC[0].reg =
    3746:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    3748:	61eb      	str	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    374a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    374c:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    374e:	2b00      	cmp	r3, #0
    3750:	d1fc      	bne.n	374c <tc_init+0x2bc>
					config->counter_32_bit.compare_capture_channel[1];
    3752:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    3754:	622b      	str	r3, [r5, #32]
			return STATUS_OK;
    3756:	2000      	movs	r0, #0
    3758:	e6d1      	b.n	34fe <tc_init+0x6e>
    375a:	46c0      	nop			; (mov r8, r8)
    375c:	00003455 	.word	0x00003455
    3760:	00019cbc 	.word	0x00019cbc
    3764:	200011c0 	.word	0x200011c0
    3768:	00019c94 	.word	0x00019c94
    376c:	0000330d 	.word	0x0000330d
    3770:	40000400 	.word	0x40000400
    3774:	00003211 	.word	0x00003211
    3778:	000031a1 	.word	0x000031a1
    377c:	00019ca8 	.word	0x00019ca8

00003780 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3780:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    3782:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    3784:	2b00      	cmp	r3, #0
    3786:	d1fc      	bne.n	3782 <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    3788:	7113      	strb	r3, [r2, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    378a:	6801      	ldr	r1, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    378c:	690b      	ldr	r3, [r1, #16]

	while (tc_is_syncing(module_inst)) {
    378e:	2b00      	cmp	r3, #0
    3790:	d1fc      	bne.n	378c <tc_get_count_value+0xc>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_READSYNC_Val);
    3792:	3380      	adds	r3, #128	; 0x80
    3794:	7153      	strb	r3, [r2, #5]

	/* Read synchronization */
	tc_sync_read_count(module_inst);
	
	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    3796:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    3798:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    379a:	2b00      	cmp	r3, #0
    379c:	d1fc      	bne.n	3798 <tc_get_count_value+0x18>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    379e:	7903      	ldrb	r3, [r0, #4]
    37a0:	2b04      	cmp	r3, #4
    37a2:	d005      	beq.n	37b0 <tc_get_count_value+0x30>
    37a4:	2b08      	cmp	r3, #8
    37a6:	d009      	beq.n	37bc <tc_get_count_value+0x3c>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    37a8:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    37aa:	2b00      	cmp	r3, #0
    37ac:	d003      	beq.n	37b6 <tc_get_count_value+0x36>
}
    37ae:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    37b0:	7d10      	ldrb	r0, [r2, #20]
    37b2:	b2c0      	uxtb	r0, r0
    37b4:	e7fb      	b.n	37ae <tc_get_count_value+0x2e>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    37b6:	8a90      	ldrh	r0, [r2, #20]
    37b8:	b280      	uxth	r0, r0
    37ba:	e7f8      	b.n	37ae <tc_get_count_value+0x2e>
			return tc_module->COUNT32.COUNT.reg;
    37bc:	6950      	ldr	r0, [r2, #20]
    37be:	e7f6      	b.n	37ae <tc_get_count_value+0x2e>

000037c0 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    37c0:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(compare);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    37c2:	6804      	ldr	r4, [r0, #0]
    37c4:	6923      	ldr	r3, [r4, #16]

	while (tc_is_syncing(module_inst)) {
    37c6:	2b00      	cmp	r3, #0
    37c8:	d1fc      	bne.n	37c4 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    37ca:	7903      	ldrb	r3, [r0, #4]
    37cc:	2b04      	cmp	r3, #4
    37ce:	d006      	beq.n	37de <tc_set_compare_value+0x1e>
    37d0:	2b08      	cmp	r3, #8
    37d2:	d028      	beq.n	3826 <tc_set_compare_value+0x66>
    37d4:	2b00      	cmp	r3, #0
    37d6:	d013      	beq.n	3800 <tc_set_compare_value+0x40>
				}
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    37d8:	2317      	movs	r3, #23
}
    37da:	0018      	movs	r0, r3
    37dc:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    37de:	2317      	movs	r3, #23
			if (channel_index <
    37e0:	2901      	cmp	r1, #1
    37e2:	d8fa      	bhi.n	37da <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    37e4:	7e83      	ldrb	r3, [r0, #26]
    37e6:	2b00      	cmp	r3, #0
    37e8:	d005      	beq.n	37f6 <tc_set_compare_value+0x36>
							(uint8_t)compare;
    37ea:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CCBUF[channel_index].reg =
    37ec:	1861      	adds	r1, r4, r1
    37ee:	3130      	adds	r1, #48	; 0x30
    37f0:	700a      	strb	r2, [r1, #0]
				return STATUS_OK;
    37f2:	2300      	movs	r3, #0
    37f4:	e7f1      	b.n	37da <tc_set_compare_value+0x1a>
							(uint8_t)compare;
    37f6:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CC[channel_index].reg  =
    37f8:	1864      	adds	r4, r4, r1
    37fa:	7722      	strb	r2, [r4, #28]
				return STATUS_OK;
    37fc:	2300      	movs	r3, #0
    37fe:	e7ec      	b.n	37da <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    3800:	2317      	movs	r3, #23
			if (channel_index <
    3802:	2901      	cmp	r1, #1
    3804:	d8e9      	bhi.n	37da <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    3806:	7e83      	ldrb	r3, [r0, #26]
    3808:	2b00      	cmp	r3, #0
    380a:	d005      	beq.n	3818 <tc_set_compare_value+0x58>
							(uint16_t)compare;
    380c:	b292      	uxth	r2, r2
					tc_module->COUNT16.CCBUF[channel_index].reg =
    380e:	3118      	adds	r1, #24
    3810:	0049      	lsls	r1, r1, #1
    3812:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    3814:	2300      	movs	r3, #0
    3816:	e7e0      	b.n	37da <tc_set_compare_value+0x1a>
							(uint16_t)compare;
    3818:	b292      	uxth	r2, r2
					tc_module->COUNT16.CC[channel_index].reg =
    381a:	310c      	adds	r1, #12
    381c:	0049      	lsls	r1, r1, #1
    381e:	1864      	adds	r4, r4, r1
    3820:	80a2      	strh	r2, [r4, #4]
				return STATUS_OK;
    3822:	2300      	movs	r3, #0
    3824:	e7d9      	b.n	37da <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    3826:	2317      	movs	r3, #23
			if (channel_index <
    3828:	2901      	cmp	r1, #1
    382a:	d8d6      	bhi.n	37da <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    382c:	7e83      	ldrb	r3, [r0, #26]
    382e:	2b00      	cmp	r3, #0
    3830:	d105      	bne.n	383e <tc_set_compare_value+0x7e>
					tc_module->COUNT32.CC[channel_index].reg =
    3832:	3106      	adds	r1, #6
    3834:	0089      	lsls	r1, r1, #2
    3836:	1864      	adds	r4, r4, r1
    3838:	6062      	str	r2, [r4, #4]
				return STATUS_OK;
    383a:	2300      	movs	r3, #0
    383c:	e7cd      	b.n	37da <tc_set_compare_value+0x1a>
					tc_module->COUNT32.CCBUF[channel_index].reg =
    383e:	310c      	adds	r1, #12
    3840:	0089      	lsls	r1, r1, #2
    3842:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    3844:	2300      	movs	r3, #0
    3846:	e7c8      	b.n	37da <tc_set_compare_value+0x1a>

00003848 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    3848:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    384a:	4a1a      	ldr	r2, [pc, #104]	; (38b4 <Reset_Handler+0x6c>)
    384c:	4b1a      	ldr	r3, [pc, #104]	; (38b8 <Reset_Handler+0x70>)
    384e:	429a      	cmp	r2, r3
    3850:	d011      	beq.n	3876 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    3852:	001a      	movs	r2, r3
    3854:	4b19      	ldr	r3, [pc, #100]	; (38bc <Reset_Handler+0x74>)
    3856:	429a      	cmp	r2, r3
    3858:	d20d      	bcs.n	3876 <Reset_Handler+0x2e>
    385a:	4a19      	ldr	r2, [pc, #100]	; (38c0 <Reset_Handler+0x78>)
    385c:	3303      	adds	r3, #3
    385e:	1a9b      	subs	r3, r3, r2
    3860:	089b      	lsrs	r3, r3, #2
    3862:	3301      	adds	r3, #1
    3864:	009b      	lsls	r3, r3, #2
    3866:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    3868:	4813      	ldr	r0, [pc, #76]	; (38b8 <Reset_Handler+0x70>)
    386a:	4912      	ldr	r1, [pc, #72]	; (38b4 <Reset_Handler+0x6c>)
    386c:	588c      	ldr	r4, [r1, r2]
    386e:	5084      	str	r4, [r0, r2]
    3870:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    3872:	429a      	cmp	r2, r3
    3874:	d1fa      	bne.n	386c <Reset_Handler+0x24>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    3876:	4a13      	ldr	r2, [pc, #76]	; (38c4 <Reset_Handler+0x7c>)
    3878:	4b13      	ldr	r3, [pc, #76]	; (38c8 <Reset_Handler+0x80>)
    387a:	429a      	cmp	r2, r3
    387c:	d20a      	bcs.n	3894 <Reset_Handler+0x4c>
    387e:	43d3      	mvns	r3, r2
    3880:	4911      	ldr	r1, [pc, #68]	; (38c8 <Reset_Handler+0x80>)
    3882:	185b      	adds	r3, r3, r1
    3884:	2103      	movs	r1, #3
    3886:	438b      	bics	r3, r1
    3888:	3304      	adds	r3, #4
    388a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    388c:	2100      	movs	r1, #0
    388e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    3890:	4293      	cmp	r3, r2
    3892:	d1fc      	bne.n	388e <Reset_Handler+0x46>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3894:	4a0d      	ldr	r2, [pc, #52]	; (38cc <Reset_Handler+0x84>)
    3896:	21ff      	movs	r1, #255	; 0xff
    3898:	4b0d      	ldr	r3, [pc, #52]	; (38d0 <Reset_Handler+0x88>)
    389a:	438b      	bics	r3, r1
    389c:	6093      	str	r3, [r2, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    389e:	4a0d      	ldr	r2, [pc, #52]	; (38d4 <Reset_Handler+0x8c>)
    38a0:	6853      	ldr	r3, [r2, #4]
    38a2:	397f      	subs	r1, #127	; 0x7f
    38a4:	430b      	orrs	r3, r1
    38a6:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    38a8:	4b0b      	ldr	r3, [pc, #44]	; (38d8 <Reset_Handler+0x90>)
    38aa:	4798      	blx	r3

        /* Branch to main function */
        main();
    38ac:	4b0b      	ldr	r3, [pc, #44]	; (38dc <Reset_Handler+0x94>)
    38ae:	4798      	blx	r3
    38b0:	e7fe      	b.n	38b0 <Reset_Handler+0x68>
    38b2:	46c0      	nop			; (mov r8, r8)
    38b4:	0001b684 	.word	0x0001b684
    38b8:	20000000 	.word	0x20000000
    38bc:	20000a18 	.word	0x20000a18
    38c0:	20000004 	.word	0x20000004
    38c4:	20000a18 	.word	0x20000a18
    38c8:	20001c10 	.word	0x20001c10
    38cc:	e000ed00 	.word	0xe000ed00
    38d0:	00000000 	.word	0x00000000
    38d4:	41004000 	.word	0x41004000
    38d8:	00014ba9 	.word	0x00014ba9
    38dc:	0000b479 	.word	0x0000b479

000038e0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    38e0:	b570      	push	{r4, r5, r6, lr}
        while (1) {
			printf("\r\ndummy handler()");
    38e2:	4d02      	ldr	r5, [pc, #8]	; (38ec <Dummy_Handler+0xc>)
    38e4:	4c02      	ldr	r4, [pc, #8]	; (38f0 <Dummy_Handler+0x10>)
    38e6:	0028      	movs	r0, r5
    38e8:	47a0      	blx	r4
    38ea:	e7fc      	b.n	38e6 <Dummy_Handler+0x6>
    38ec:	00019cf8 	.word	0x00019cf8
    38f0:	000152a5 	.word	0x000152a5

000038f4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    38f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    38f6:	46c6      	mov	lr, r8
    38f8:	b500      	push	{lr}
    38fa:	000c      	movs	r4, r1
    38fc:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    38fe:	2800      	cmp	r0, #0
    3900:	d10f      	bne.n	3922 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    3902:	2a00      	cmp	r2, #0
    3904:	dd11      	ble.n	392a <_read+0x36>
    3906:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    3908:	4e09      	ldr	r6, [pc, #36]	; (3930 <_read+0x3c>)
    390a:	4d0a      	ldr	r5, [pc, #40]	; (3934 <_read+0x40>)
    390c:	6830      	ldr	r0, [r6, #0]
    390e:	0021      	movs	r1, r4
    3910:	682b      	ldr	r3, [r5, #0]
    3912:	4798      	blx	r3
		ptr++;
    3914:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    3916:	42bc      	cmp	r4, r7
    3918:	d1f8      	bne.n	390c <_read+0x18>
		nChars++;
	}
	return nChars;
}
    391a:	4640      	mov	r0, r8
    391c:	bc04      	pop	{r2}
    391e:	4690      	mov	r8, r2
    3920:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    3922:	2301      	movs	r3, #1
    3924:	425b      	negs	r3, r3
    3926:	4698      	mov	r8, r3
    3928:	e7f7      	b.n	391a <_read+0x26>
	for (; len > 0; --len) {
    392a:	4680      	mov	r8, r0
    392c:	e7f5      	b.n	391a <_read+0x26>
    392e:	46c0      	nop			; (mov r8, r8)
    3930:	200011dc 	.word	0x200011dc
    3934:	200011d4 	.word	0x200011d4

00003938 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    3938:	b5f0      	push	{r4, r5, r6, r7, lr}
    393a:	46c6      	mov	lr, r8
    393c:	b500      	push	{lr}
    393e:	000e      	movs	r6, r1
    3940:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    3942:	3801      	subs	r0, #1
    3944:	2802      	cmp	r0, #2
    3946:	d810      	bhi.n	396a <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    3948:	2a00      	cmp	r2, #0
    394a:	d011      	beq.n	3970 <_write+0x38>
    394c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    394e:	4b0c      	ldr	r3, [pc, #48]	; (3980 <_write+0x48>)
    3950:	4698      	mov	r8, r3
    3952:	4f0c      	ldr	r7, [pc, #48]	; (3984 <_write+0x4c>)
    3954:	4643      	mov	r3, r8
    3956:	6818      	ldr	r0, [r3, #0]
    3958:	5d31      	ldrb	r1, [r6, r4]
    395a:	683b      	ldr	r3, [r7, #0]
    395c:	4798      	blx	r3
    395e:	2800      	cmp	r0, #0
    3960:	db08      	blt.n	3974 <_write+0x3c>
			return -1;
		}
		++nChars;
    3962:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    3964:	42a5      	cmp	r5, r4
    3966:	d1f5      	bne.n	3954 <_write+0x1c>
    3968:	e006      	b.n	3978 <_write+0x40>
		return -1;
    396a:	2401      	movs	r4, #1
    396c:	4264      	negs	r4, r4
    396e:	e003      	b.n	3978 <_write+0x40>
	for (; len != 0; --len) {
    3970:	0014      	movs	r4, r2
    3972:	e001      	b.n	3978 <_write+0x40>
			return -1;
    3974:	2401      	movs	r4, #1
    3976:	4264      	negs	r4, r4
	}
	return nChars;
}
    3978:	0020      	movs	r0, r4
    397a:	bc04      	pop	{r2}
    397c:	4690      	mov	r8, r2
    397e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3980:	200011dc 	.word	0x200011dc
    3984:	200011d8 	.word	0x200011d8

00003988 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    3988:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    398a:	4a06      	ldr	r2, [pc, #24]	; (39a4 <_sbrk+0x1c>)
    398c:	6812      	ldr	r2, [r2, #0]
    398e:	2a00      	cmp	r2, #0
    3990:	d004      	beq.n	399c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    3992:	4a04      	ldr	r2, [pc, #16]	; (39a4 <_sbrk+0x1c>)
    3994:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    3996:	18c3      	adds	r3, r0, r3
    3998:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    399a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    399c:	4902      	ldr	r1, [pc, #8]	; (39a8 <_sbrk+0x20>)
    399e:	4a01      	ldr	r2, [pc, #4]	; (39a4 <_sbrk+0x1c>)
    39a0:	6011      	str	r1, [r2, #0]
    39a2:	e7f6      	b.n	3992 <_sbrk+0xa>
    39a4:	20000a78 	.word	0x20000a78
    39a8:	20003c10 	.word	0x20003c10

000039ac <_close>:
}

extern int _close(int file)
{
	return -1;
}
    39ac:	2001      	movs	r0, #1
    39ae:	4240      	negs	r0, r0
    39b0:	4770      	bx	lr

000039b2 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    39b2:	2380      	movs	r3, #128	; 0x80
    39b4:	019b      	lsls	r3, r3, #6
    39b6:	604b      	str	r3, [r1, #4]

	return 0;
}
    39b8:	2000      	movs	r0, #0
    39ba:	4770      	bx	lr

000039bc <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    39bc:	2001      	movs	r0, #1
    39be:	4770      	bx	lr

000039c0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    39c0:	2000      	movs	r0, #0
    39c2:	4770      	bx	lr

000039c4 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    39c4:	b570      	push	{r4, r5, r6, lr}
    39c6:	b082      	sub	sp, #8
    39c8:	0005      	movs	r5, r0
    39ca:	000e      	movs	r6, r1
	uint16_t temp = 0;
    39cc:	2200      	movs	r2, #0
    39ce:	466b      	mov	r3, sp
    39d0:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    39d2:	4c06      	ldr	r4, [pc, #24]	; (39ec <usart_serial_getchar+0x28>)
    39d4:	466b      	mov	r3, sp
    39d6:	1d99      	adds	r1, r3, #6
    39d8:	0028      	movs	r0, r5
    39da:	47a0      	blx	r4
    39dc:	2800      	cmp	r0, #0
    39de:	d1f9      	bne.n	39d4 <usart_serial_getchar+0x10>

	*c = temp;
    39e0:	466b      	mov	r3, sp
    39e2:	3306      	adds	r3, #6
    39e4:	881b      	ldrh	r3, [r3, #0]
    39e6:	7033      	strb	r3, [r6, #0]
}
    39e8:	b002      	add	sp, #8
    39ea:	bd70      	pop	{r4, r5, r6, pc}
    39ec:	00002833 	.word	0x00002833

000039f0 <usart_serial_putchar>:
{
    39f0:	b570      	push	{r4, r5, r6, lr}
    39f2:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    39f4:	b28c      	uxth	r4, r1
    39f6:	4e03      	ldr	r6, [pc, #12]	; (3a04 <usart_serial_putchar+0x14>)
    39f8:	0021      	movs	r1, r4
    39fa:	0028      	movs	r0, r5
    39fc:	47b0      	blx	r6
    39fe:	2800      	cmp	r0, #0
    3a00:	d1fa      	bne.n	39f8 <usart_serial_putchar+0x8>
}
    3a02:	bd70      	pop	{r4, r5, r6, pc}
    3a04:	0000280d 	.word	0x0000280d

00003a08 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    3a08:	b510      	push	{r4, lr}
    3a0a:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    3a0c:	466b      	mov	r3, sp
    3a0e:	1ddc      	adds	r4, r3, #7
    3a10:	2201      	movs	r2, #1
    3a12:	0021      	movs	r1, r4
    3a14:	480f      	ldr	r0, [pc, #60]	; (3a54 <USART_HOST_ISR_VECT+0x4c>)
    3a16:	4b10      	ldr	r3, [pc, #64]	; (3a58 <USART_HOST_ISR_VECT+0x50>)
    3a18:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    3a1a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    3a1c:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    3a20:	2200      	movs	r2, #0
    3a22:	4b0e      	ldr	r3, [pc, #56]	; (3a5c <USART_HOST_ISR_VECT+0x54>)
    3a24:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    3a26:	4b0e      	ldr	r3, [pc, #56]	; (3a60 <USART_HOST_ISR_VECT+0x58>)
    3a28:	781b      	ldrb	r3, [r3, #0]
    3a2a:	7821      	ldrb	r1, [r4, #0]
    3a2c:	4a0d      	ldr	r2, [pc, #52]	; (3a64 <USART_HOST_ISR_VECT+0x5c>)
    3a2e:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    3a30:	2b7f      	cmp	r3, #127	; 0x7f
    3a32:	d00a      	beq.n	3a4a <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    3a34:	3301      	adds	r3, #1
    3a36:	4a0a      	ldr	r2, [pc, #40]	; (3a60 <USART_HOST_ISR_VECT+0x58>)
    3a38:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    3a3a:	2201      	movs	r2, #1
    3a3c:	4b07      	ldr	r3, [pc, #28]	; (3a5c <USART_HOST_ISR_VECT+0x54>)
    3a3e:	701a      	strb	r2, [r3, #0]
    3a40:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3a44:	b662      	cpsie	i
}
    3a46:	b002      	add	sp, #8
    3a48:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    3a4a:	2200      	movs	r2, #0
    3a4c:	4b04      	ldr	r3, [pc, #16]	; (3a60 <USART_HOST_ISR_VECT+0x58>)
    3a4e:	701a      	strb	r2, [r3, #0]
    3a50:	e7f3      	b.n	3a3a <USART_HOST_ISR_VECT+0x32>
    3a52:	46c0      	nop			; (mov r8, r8)
    3a54:	20000a7c 	.word	0x20000a7c
    3a58:	0000289d 	.word	0x0000289d
    3a5c:	20000008 	.word	0x20000008
    3a60:	20000b31 	.word	0x20000b31
    3a64:	20000ab0 	.word	0x20000ab0

00003a68 <sio2host_init>:
{
    3a68:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a6a:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    3a6c:	2380      	movs	r3, #128	; 0x80
    3a6e:	05db      	lsls	r3, r3, #23
    3a70:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    3a72:	2300      	movs	r3, #0
    3a74:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    3a76:	22ff      	movs	r2, #255	; 0xff
    3a78:	4669      	mov	r1, sp
    3a7a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    3a7c:	2200      	movs	r2, #0
    3a7e:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    3a80:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    3a82:	2196      	movs	r1, #150	; 0x96
    3a84:	0189      	lsls	r1, r1, #6
    3a86:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    3a88:	2401      	movs	r4, #1
    3a8a:	2124      	movs	r1, #36	; 0x24
    3a8c:	4668      	mov	r0, sp
    3a8e:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    3a90:	3101      	adds	r1, #1
    3a92:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    3a94:	3101      	adds	r1, #1
    3a96:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    3a98:	3101      	adds	r1, #1
    3a9a:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    3a9c:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    3a9e:	3105      	adds	r1, #5
    3aa0:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    3aa2:	3101      	adds	r1, #1
    3aa4:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    3aa6:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    3aa8:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    3aaa:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    3aac:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    3aae:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    3ab0:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    3ab2:	2313      	movs	r3, #19
    3ab4:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    3ab6:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    3ab8:	2380      	movs	r3, #128	; 0x80
    3aba:	035b      	lsls	r3, r3, #13
    3abc:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    3abe:	4b2e      	ldr	r3, [pc, #184]	; (3b78 <sio2host_init+0x110>)
    3ac0:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    3ac2:	4b2e      	ldr	r3, [pc, #184]	; (3b7c <sio2host_init+0x114>)
    3ac4:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    3ac6:	2301      	movs	r3, #1
    3ac8:	425b      	negs	r3, r3
    3aca:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    3acc:	930f      	str	r3, [sp, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    3ace:	4d2c      	ldr	r5, [pc, #176]	; (3b80 <sio2host_init+0x118>)
    3ad0:	4b2c      	ldr	r3, [pc, #176]	; (3b84 <sio2host_init+0x11c>)
    3ad2:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    3ad4:	4a2c      	ldr	r2, [pc, #176]	; (3b88 <sio2host_init+0x120>)
    3ad6:	4b2d      	ldr	r3, [pc, #180]	; (3b8c <sio2host_init+0x124>)
    3ad8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    3ada:	4a2d      	ldr	r2, [pc, #180]	; (3b90 <sio2host_init+0x128>)
    3adc:	4b2d      	ldr	r3, [pc, #180]	; (3b94 <sio2host_init+0x12c>)
    3ade:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    3ae0:	466a      	mov	r2, sp
    3ae2:	2184      	movs	r1, #132	; 0x84
    3ae4:	05c9      	lsls	r1, r1, #23
    3ae6:	0028      	movs	r0, r5
    3ae8:	4b2b      	ldr	r3, [pc, #172]	; (3b98 <sio2host_init+0x130>)
    3aea:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    3aec:	4f2b      	ldr	r7, [pc, #172]	; (3b9c <sio2host_init+0x134>)
    3aee:	683b      	ldr	r3, [r7, #0]
    3af0:	6898      	ldr	r0, [r3, #8]
    3af2:	2100      	movs	r1, #0
    3af4:	4e2a      	ldr	r6, [pc, #168]	; (3ba0 <sio2host_init+0x138>)
    3af6:	47b0      	blx	r6
	setbuf(stdin, NULL);
    3af8:	683b      	ldr	r3, [r7, #0]
    3afa:	6858      	ldr	r0, [r3, #4]
    3afc:	2100      	movs	r1, #0
    3afe:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3b00:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3b02:	0030      	movs	r0, r6
    3b04:	4b27      	ldr	r3, [pc, #156]	; (3ba4 <sio2host_init+0x13c>)
    3b06:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3b08:	231f      	movs	r3, #31
    3b0a:	4018      	ands	r0, r3
    3b0c:	4084      	lsls	r4, r0
    3b0e:	4b26      	ldr	r3, [pc, #152]	; (3ba8 <sio2host_init+0x140>)
    3b10:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3b12:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    3b14:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    3b16:	2b00      	cmp	r3, #0
    3b18:	d1fc      	bne.n	3b14 <sio2host_init+0xac>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3b1a:	6833      	ldr	r3, [r6, #0]
    3b1c:	2202      	movs	r2, #2
    3b1e:	4313      	orrs	r3, r2
    3b20:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3b22:	4b17      	ldr	r3, [pc, #92]	; (3b80 <sio2host_init+0x118>)
    3b24:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    3b26:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3b28:	2a00      	cmp	r2, #0
    3b2a:	d1fc      	bne.n	3b26 <sio2host_init+0xbe>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    3b2c:	6859      	ldr	r1, [r3, #4]
    3b2e:	2280      	movs	r2, #128	; 0x80
    3b30:	0252      	lsls	r2, r2, #9
    3b32:	430a      	orrs	r2, r1
    3b34:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    3b36:	2101      	movs	r1, #1
    3b38:	4a11      	ldr	r2, [pc, #68]	; (3b80 <sio2host_init+0x118>)
    3b3a:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    3b3c:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3b3e:	2a00      	cmp	r2, #0
    3b40:	d1fc      	bne.n	3b3c <sio2host_init+0xd4>
	return (usart_hw->SYNCBUSY.reg);
    3b42:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3b44:	2a00      	cmp	r2, #0
    3b46:	d1fc      	bne.n	3b42 <sio2host_init+0xda>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    3b48:	6859      	ldr	r1, [r3, #4]
    3b4a:	2280      	movs	r2, #128	; 0x80
    3b4c:	0292      	lsls	r2, r2, #10
    3b4e:	430a      	orrs	r2, r1
    3b50:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    3b52:	2101      	movs	r1, #1
    3b54:	4a0a      	ldr	r2, [pc, #40]	; (3b80 <sio2host_init+0x118>)
    3b56:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    3b58:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3b5a:	2a00      	cmp	r2, #0
    3b5c:	d1fc      	bne.n	3b58 <sio2host_init+0xf0>
	USART_HOST_RX_ISR_ENABLE();
    3b5e:	4913      	ldr	r1, [pc, #76]	; (3bac <sio2host_init+0x144>)
    3b60:	2000      	movs	r0, #0
    3b62:	4b13      	ldr	r3, [pc, #76]	; (3bb0 <sio2host_init+0x148>)
    3b64:	4798      	blx	r3
    3b66:	2204      	movs	r2, #4
    3b68:	2384      	movs	r3, #132	; 0x84
    3b6a:	05db      	lsls	r3, r3, #23
    3b6c:	759a      	strb	r2, [r3, #22]
    3b6e:	32fc      	adds	r2, #252	; 0xfc
    3b70:	4b0d      	ldr	r3, [pc, #52]	; (3ba8 <sio2host_init+0x140>)
    3b72:	601a      	str	r2, [r3, #0]
}
    3b74:	b011      	add	sp, #68	; 0x44
    3b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b78:	00040003 	.word	0x00040003
    3b7c:	00050003 	.word	0x00050003
    3b80:	20000a7c 	.word	0x20000a7c
    3b84:	200011dc 	.word	0x200011dc
    3b88:	000039f1 	.word	0x000039f1
    3b8c:	200011d8 	.word	0x200011d8
    3b90:	000039c5 	.word	0x000039c5
    3b94:	200011d4 	.word	0x200011d4
    3b98:	000024a9 	.word	0x000024a9
    3b9c:	20000068 	.word	0x20000068
    3ba0:	000153e9 	.word	0x000153e9
    3ba4:	00002049 	.word	0x00002049
    3ba8:	e000e100 	.word	0xe000e100
    3bac:	00003a09 	.word	0x00003a09
    3bb0:	0000200d 	.word	0x0000200d

00003bb4 <sio2host_deinit>:
{
    3bb4:	b570      	push	{r4, r5, r6, lr}
	SercomUsart *const usart_hw = &(module->hw->USART);
    3bb6:	4d15      	ldr	r5, [pc, #84]	; (3c0c <sio2host_deinit+0x58>)
    3bb8:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    3bba:	0020      	movs	r0, r4
    3bbc:	4b14      	ldr	r3, [pc, #80]	; (3c10 <sio2host_deinit+0x5c>)
    3bbe:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3bc0:	231f      	movs	r3, #31
    3bc2:	4018      	ands	r0, r3
    3bc4:	3b1e      	subs	r3, #30
    3bc6:	4083      	lsls	r3, r0
    3bc8:	2280      	movs	r2, #128	; 0x80
    3bca:	4912      	ldr	r1, [pc, #72]	; (3c14 <sio2host_deinit+0x60>)
    3bcc:	508b      	str	r3, [r1, r2]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3bce:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    3bd0:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    3bd2:	2b00      	cmp	r3, #0
    3bd4:	d1fc      	bne.n	3bd0 <sio2host_deinit+0x1c>
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    3bd6:	6823      	ldr	r3, [r4, #0]
    3bd8:	2202      	movs	r2, #2
    3bda:	4393      	bics	r3, r2
    3bdc:	6023      	str	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3bde:	4b0b      	ldr	r3, [pc, #44]	; (3c0c <sio2host_deinit+0x58>)
    3be0:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    3be2:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3be4:	2a00      	cmp	r2, #0
    3be6:	d1fc      	bne.n	3be2 <sio2host_deinit+0x2e>
			module->receiver_enabled = false;
			break;

		case USART_TRANSCEIVER_TX:
			/* Disable TX */
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_TXEN;
    3be8:	685a      	ldr	r2, [r3, #4]
    3bea:	490b      	ldr	r1, [pc, #44]	; (3c18 <sio2host_deinit+0x64>)
    3bec:	400a      	ands	r2, r1
    3bee:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = false;
    3bf0:	2100      	movs	r1, #0
    3bf2:	4a06      	ldr	r2, [pc, #24]	; (3c0c <sio2host_deinit+0x58>)
    3bf4:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    3bf6:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3bf8:	2a00      	cmp	r2, #0
    3bfa:	d1fc      	bne.n	3bf6 <sio2host_deinit+0x42>
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_RXEN;
    3bfc:	685a      	ldr	r2, [r3, #4]
    3bfe:	4907      	ldr	r1, [pc, #28]	; (3c1c <sio2host_deinit+0x68>)
    3c00:	400a      	ands	r2, r1
    3c02:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = false;
    3c04:	2200      	movs	r2, #0
    3c06:	4b01      	ldr	r3, [pc, #4]	; (3c0c <sio2host_deinit+0x58>)
    3c08:	719a      	strb	r2, [r3, #6]
}
    3c0a:	bd70      	pop	{r4, r5, r6, pc}
    3c0c:	20000a7c 	.word	0x20000a7c
    3c10:	00002049 	.word	0x00002049
    3c14:	e000e100 	.word	0xe000e100
    3c18:	fffeffff 	.word	0xfffeffff
    3c1c:	fffdffff 	.word	0xfffdffff

00003c20 <sio2host_rx>:
{
    3c20:	b570      	push	{r4, r5, r6, lr}
    3c22:	0002      	movs	r2, r0
	if(serial_rx_buf_tail >= serial_rx_buf_head)
    3c24:	4b1f      	ldr	r3, [pc, #124]	; (3ca4 <sio2host_rx+0x84>)
    3c26:	781c      	ldrb	r4, [r3, #0]
    3c28:	4b1f      	ldr	r3, [pc, #124]	; (3ca8 <sio2host_rx+0x88>)
    3c2a:	781b      	ldrb	r3, [r3, #0]
    3c2c:	429c      	cmp	r4, r3
    3c2e:	d319      	bcc.n	3c64 <sio2host_rx+0x44>
		serial_rx_count = serial_rx_buf_tail - serial_rx_buf_head;
    3c30:	1ae3      	subs	r3, r4, r3
    3c32:	481e      	ldr	r0, [pc, #120]	; (3cac <sio2host_rx+0x8c>)
    3c34:	7003      	strb	r3, [r0, #0]
	if (0 == serial_rx_count) {
    3c36:	4b1d      	ldr	r3, [pc, #116]	; (3cac <sio2host_rx+0x8c>)
    3c38:	7818      	ldrb	r0, [r3, #0]
    3c3a:	2800      	cmp	r0, #0
    3c3c:	d031      	beq.n	3ca2 <sio2host_rx+0x82>
	if (SERIAL_RX_BUF_SIZE_HOST <= serial_rx_count) {
    3c3e:	b243      	sxtb	r3, r0
    3c40:	2b00      	cmp	r3, #0
    3c42:	db15      	blt.n	3c70 <sio2host_rx+0x50>
    3c44:	1c03      	adds	r3, r0, #0
    3c46:	4288      	cmp	r0, r1
    3c48:	d900      	bls.n	3c4c <sio2host_rx+0x2c>
    3c4a:	1c0b      	adds	r3, r1, #0
    3c4c:	b2d8      	uxtb	r0, r3
	while (max_length > 0) {
    3c4e:	2800      	cmp	r0, #0
    3c50:	d027      	beq.n	3ca2 <sio2host_rx+0x82>
    3c52:	4b15      	ldr	r3, [pc, #84]	; (3ca8 <sio2host_rx+0x88>)
    3c54:	781b      	ldrb	r3, [r3, #0]
    3c56:	1e44      	subs	r4, r0, #1
    3c58:	b2e4      	uxtb	r4, r4
    3c5a:	3401      	adds	r4, #1
    3c5c:	1914      	adds	r4, r2, r4
		*data = serial_rx_buf[serial_rx_buf_head];
    3c5e:	4d14      	ldr	r5, [pc, #80]	; (3cb0 <sio2host_rx+0x90>)
			serial_rx_buf_head = 0;
    3c60:	2600      	movs	r6, #0
    3c62:	e014      	b.n	3c8e <sio2host_rx+0x6e>
		serial_rx_count = serial_rx_buf_tail + (SERIAL_RX_BUF_SIZE_HOST - serial_rx_buf_head);
    3c64:	0020      	movs	r0, r4
    3c66:	3880      	subs	r0, #128	; 0x80
    3c68:	1ac3      	subs	r3, r0, r3
    3c6a:	4810      	ldr	r0, [pc, #64]	; (3cac <sio2host_rx+0x8c>)
    3c6c:	7003      	strb	r3, [r0, #0]
    3c6e:	e7e2      	b.n	3c36 <sio2host_rx+0x16>
		serial_rx_buf_head = serial_rx_buf_tail;
    3c70:	4b0d      	ldr	r3, [pc, #52]	; (3ca8 <sio2host_rx+0x88>)
    3c72:	701c      	strb	r4, [r3, #0]
		serial_rx_count = SERIAL_RX_BUF_SIZE_HOST;
    3c74:	2080      	movs	r0, #128	; 0x80
    3c76:	4b0d      	ldr	r3, [pc, #52]	; (3cac <sio2host_rx+0x8c>)
    3c78:	7018      	strb	r0, [r3, #0]
		if (SERIAL_RX_BUF_SIZE_HOST <= max_length) {
    3c7a:	b24b      	sxtb	r3, r1
    3c7c:	2b00      	cmp	r3, #0
    3c7e:	db01      	blt.n	3c84 <sio2host_rx+0x64>
    3c80:	0008      	movs	r0, r1
    3c82:	e7e4      	b.n	3c4e <sio2host_rx+0x2e>
			max_length = SERIAL_RX_BUF_SIZE_HOST;
    3c84:	2080      	movs	r0, #128	; 0x80
    3c86:	e7e4      	b.n	3c52 <sio2host_rx+0x32>
			serial_rx_buf_head = 0;
    3c88:	0033      	movs	r3, r6
	while (max_length > 0) {
    3c8a:	4294      	cmp	r4, r2
    3c8c:	d007      	beq.n	3c9e <sio2host_rx+0x7e>
		*data = serial_rx_buf[serial_rx_buf_head];
    3c8e:	5ce9      	ldrb	r1, [r5, r3]
    3c90:	7011      	strb	r1, [r2, #0]
		data++;
    3c92:	3201      	adds	r2, #1
		if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_head) {
    3c94:	2b7f      	cmp	r3, #127	; 0x7f
    3c96:	d0f7      	beq.n	3c88 <sio2host_rx+0x68>
			serial_rx_buf_head++;
    3c98:	3301      	adds	r3, #1
    3c9a:	b2db      	uxtb	r3, r3
    3c9c:	e7f5      	b.n	3c8a <sio2host_rx+0x6a>
    3c9e:	4a02      	ldr	r2, [pc, #8]	; (3ca8 <sio2host_rx+0x88>)
    3ca0:	7013      	strb	r3, [r2, #0]
}
    3ca2:	bd70      	pop	{r4, r5, r6, pc}
    3ca4:	20000b31 	.word	0x20000b31
    3ca8:	20000b30 	.word	0x20000b30
    3cac:	20000b32 	.word	0x20000b32
    3cb0:	20000ab0 	.word	0x20000ab0

00003cb4 <HAL_SPISend>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    3cb4:	4b13      	ldr	r3, [pc, #76]	; (3d04 <HAL_SPISend+0x50>)
    3cb6:	681b      	ldr	r3, [r3, #0]
static uint8_t HAL_SPISend(uint8_t data)
{
	uint16_t read_val = 0;
	
	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master));
    3cb8:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3cba:	7e1a      	ldrb	r2, [r3, #24]
    3cbc:	420a      	tst	r2, r1
    3cbe:	d0fc      	beq.n	3cba <HAL_SPISend+0x6>
    3cc0:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3cc2:	07d2      	lsls	r2, r2, #31
    3cc4:	d500      	bpl.n	3cc8 <HAL_SPISend+0x14>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3cc6:	6298      	str	r0, [r3, #40]	; 0x28
	spi_write(&master, data);
	while (!spi_is_write_complete(&master));
    3cc8:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3cca:	7e1a      	ldrb	r2, [r3, #24]
    3ccc:	420a      	tst	r2, r1
    3cce:	d0fc      	beq.n	3cca <HAL_SPISend+0x16>
	
	while (!spi_is_ready_to_read(&master));
    3cd0:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3cd2:	7e1a      	ldrb	r2, [r3, #24]
    3cd4:	420a      	tst	r2, r1
    3cd6:	d0fc      	beq.n	3cd2 <HAL_SPISend+0x1e>
    3cd8:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t read_val = 0;
    3cda:	2000      	movs	r0, #0
	if (!spi_is_ready_to_read(module)) {
    3cdc:	0752      	lsls	r2, r2, #29
    3cde:	d50a      	bpl.n	3cf6 <HAL_SPISend+0x42>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3ce0:	8b5a      	ldrh	r2, [r3, #26]
    3ce2:	0752      	lsls	r2, r2, #29
    3ce4:	d501      	bpl.n	3cea <HAL_SPISend+0x36>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3ce6:	2204      	movs	r2, #4
    3ce8:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3cea:	4a06      	ldr	r2, [pc, #24]	; (3d04 <HAL_SPISend+0x50>)
    3cec:	7992      	ldrb	r2, [r2, #6]
    3cee:	2a01      	cmp	r2, #1
    3cf0:	d003      	beq.n	3cfa <HAL_SPISend+0x46>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3cf2:	6a98      	ldr	r0, [r3, #40]	; 0x28
    3cf4:	b2c0      	uxtb	r0, r0
	spi_read(&master, &read_val);
	
	return ((uint8_t)read_val);
    3cf6:	b2c0      	uxtb	r0, r0
}
    3cf8:	4770      	bx	lr
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3cfa:	6a98      	ldr	r0, [r3, #40]	; 0x28
    3cfc:	05c0      	lsls	r0, r0, #23
    3cfe:	0dc0      	lsrs	r0, r0, #23
    3d00:	e7f9      	b.n	3cf6 <HAL_SPISend+0x42>
    3d02:	46c0      	nop			; (mov r8, r8)
    3d04:	20000b40 	.word	0x20000b40

00003d08 <HAL_ResetPinMakeOutput>:
{
    3d08:	b500      	push	{lr}
    3d0a:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    3d0c:	a901      	add	r1, sp, #4
    3d0e:	2301      	movs	r3, #1
    3d10:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    3d12:	2200      	movs	r2, #0
    3d14:	708a      	strb	r2, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    3d16:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    3d18:	202f      	movs	r0, #47	; 0x2f
    3d1a:	4b02      	ldr	r3, [pc, #8]	; (3d24 <HAL_ResetPinMakeOutput+0x1c>)
    3d1c:	4798      	blx	r3
}
    3d1e:	b003      	add	sp, #12
    3d20:	bd00      	pop	{pc}
    3d22:	46c0      	nop			; (mov r8, r8)
    3d24:	00000fb5 	.word	0x00000fb5

00003d28 <HAL_RadioDIO2Callback>:
{
    3d28:	b510      	push	{r4, lr}
  if (interruptHandlerDio2)
    3d2a:	4b05      	ldr	r3, [pc, #20]	; (3d40 <HAL_RadioDIO2Callback+0x18>)
    3d2c:	681b      	ldr	r3, [r3, #0]
    3d2e:	2b00      	cmp	r3, #0
    3d30:	d004      	beq.n	3d3c <HAL_RadioDIO2Callback+0x14>
	PMM_Wakeup();
    3d32:	4b04      	ldr	r3, [pc, #16]	; (3d44 <HAL_RadioDIO2Callback+0x1c>)
    3d34:	4798      	blx	r3
    interruptHandlerDio2();
    3d36:	4b02      	ldr	r3, [pc, #8]	; (3d40 <HAL_RadioDIO2Callback+0x18>)
    3d38:	681b      	ldr	r3, [r3, #0]
    3d3a:	4798      	blx	r3
}
    3d3c:	bd10      	pop	{r4, pc}
    3d3e:	46c0      	nop			; (mov r8, r8)
    3d40:	20000b3c 	.word	0x20000b3c
    3d44:	0000428d 	.word	0x0000428d

00003d48 <HAL_RadioDIO1Callback>:
{
    3d48:	b510      	push	{r4, lr}
  if (interruptHandlerDio1)
    3d4a:	4b05      	ldr	r3, [pc, #20]	; (3d60 <HAL_RadioDIO1Callback+0x18>)
    3d4c:	681b      	ldr	r3, [r3, #0]
    3d4e:	2b00      	cmp	r3, #0
    3d50:	d004      	beq.n	3d5c <HAL_RadioDIO1Callback+0x14>
	PMM_Wakeup();
    3d52:	4b04      	ldr	r3, [pc, #16]	; (3d64 <HAL_RadioDIO1Callback+0x1c>)
    3d54:	4798      	blx	r3
    interruptHandlerDio1();
    3d56:	4b02      	ldr	r3, [pc, #8]	; (3d60 <HAL_RadioDIO1Callback+0x18>)
    3d58:	681b      	ldr	r3, [r3, #0]
    3d5a:	4798      	blx	r3
}
    3d5c:	bd10      	pop	{r4, pc}
    3d5e:	46c0      	nop			; (mov r8, r8)
    3d60:	20000b38 	.word	0x20000b38
    3d64:	0000428d 	.word	0x0000428d

00003d68 <HAL_RadioDIO0Callback>:
{
    3d68:	b510      	push	{r4, lr}
  if (interruptHandlerDio0)
    3d6a:	4b05      	ldr	r3, [pc, #20]	; (3d80 <HAL_RadioDIO0Callback+0x18>)
    3d6c:	681b      	ldr	r3, [r3, #0]
    3d6e:	2b00      	cmp	r3, #0
    3d70:	d004      	beq.n	3d7c <HAL_RadioDIO0Callback+0x14>
	PMM_Wakeup();
    3d72:	4b04      	ldr	r3, [pc, #16]	; (3d84 <HAL_RadioDIO0Callback+0x1c>)
    3d74:	4798      	blx	r3
    interruptHandlerDio0();
    3d76:	4b02      	ldr	r3, [pc, #8]	; (3d80 <HAL_RadioDIO0Callback+0x18>)
    3d78:	681b      	ldr	r3, [r3, #0]
    3d7a:	4798      	blx	r3
}
    3d7c:	bd10      	pop	{r4, pc}
    3d7e:	46c0      	nop			; (mov r8, r8)
    3d80:	20000b34 	.word	0x20000b34
    3d84:	0000428d 	.word	0x0000428d

00003d88 <HAL_SPICSAssert>:
{
    3d88:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, true);
    3d8a:	2201      	movs	r2, #1
    3d8c:	4902      	ldr	r1, [pc, #8]	; (3d98 <HAL_SPICSAssert+0x10>)
    3d8e:	4803      	ldr	r0, [pc, #12]	; (3d9c <HAL_SPICSAssert+0x14>)
    3d90:	4b03      	ldr	r3, [pc, #12]	; (3da0 <HAL_SPICSAssert+0x18>)
    3d92:	4798      	blx	r3
}
    3d94:	bd10      	pop	{r4, pc}
    3d96:	46c0      	nop			; (mov r8, r8)
    3d98:	200011e0 	.word	0x200011e0
    3d9c:	20000b40 	.word	0x20000b40
    3da0:	000023b5 	.word	0x000023b5

00003da4 <HAL_SPICSDeassert>:
{
    3da4:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, false);
    3da6:	2200      	movs	r2, #0
    3da8:	4902      	ldr	r1, [pc, #8]	; (3db4 <HAL_SPICSDeassert+0x10>)
    3daa:	4803      	ldr	r0, [pc, #12]	; (3db8 <HAL_SPICSDeassert+0x14>)
    3dac:	4b03      	ldr	r3, [pc, #12]	; (3dbc <HAL_SPICSDeassert+0x18>)
    3dae:	4798      	blx	r3
}
    3db0:	bd10      	pop	{r4, pc}
    3db2:	46c0      	nop			; (mov r8, r8)
    3db4:	200011e0 	.word	0x200011e0
    3db8:	20000b40 	.word	0x20000b40
    3dbc:	000023b5 	.word	0x000023b5

00003dc0 <HAL_RadioInit>:
{
    3dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dc2:	46d6      	mov	lr, sl
    3dc4:	464f      	mov	r7, r9
    3dc6:	4646      	mov	r6, r8
    3dc8:	b5c0      	push	{r6, r7, lr}
    3dca:	b090      	sub	sp, #64	; 0x40
	config->input_pull = PORT_PIN_PULL_UP;
    3dcc:	ac01      	add	r4, sp, #4
    3dce:	2601      	movs	r6, #1
    3dd0:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    3dd2:	2500      	movs	r5, #0
    3dd4:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    3dd6:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(SX_RF_SPI_SCK, &pin_conf);
    3dd8:	0021      	movs	r1, r4
    3dda:	2052      	movs	r0, #82	; 0x52
    3ddc:	4f52      	ldr	r7, [pc, #328]	; (3f28 <HAL_RadioInit+0x168>)
    3dde:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_MOSI, &pin_conf);
    3de0:	0021      	movs	r1, r4
    3de2:	203e      	movs	r0, #62	; 0x3e
    3de4:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_CS, &pin_conf);
    3de6:	0021      	movs	r1, r4
    3de8:	203f      	movs	r0, #63	; 0x3f
    3dea:	47b8      	blx	r7
	port_pin_set_config(SX_RF_RESET_PIN, &pin_conf);
    3dec:	0021      	movs	r1, r4
    3dee:	202f      	movs	r0, #47	; 0x2f
    3df0:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    3df2:	2280      	movs	r2, #128	; 0x80
    3df4:	02d2      	lsls	r2, r2, #11
    3df6:	4b4d      	ldr	r3, [pc, #308]	; (3f2c <HAL_RadioInit+0x16c>)
    3df8:	619a      	str	r2, [r3, #24]
    3dfa:	4b4d      	ldr	r3, [pc, #308]	; (3f30 <HAL_RadioInit+0x170>)
    3dfc:	2280      	movs	r2, #128	; 0x80
    3dfe:	05d2      	lsls	r2, r2, #23
    3e00:	619a      	str	r2, [r3, #24]
    3e02:	2280      	movs	r2, #128	; 0x80
    3e04:	0612      	lsls	r2, r2, #24
    3e06:	619a      	str	r2, [r3, #24]
    3e08:	2280      	movs	r2, #128	; 0x80
    3e0a:	0212      	lsls	r2, r2, #8
    3e0c:	619a      	str	r2, [r3, #24]
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    3e0e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(SX_RF_SPI_MISO, &pin_conf);
    3e10:	0021      	movs	r1, r4
    3e12:	2053      	movs	r0, #83	; 0x53
    3e14:	47b8      	blx	r7
	extint_chan_get_config_defaults(&config_extint_chan);
    3e16:	ac02      	add	r4, sp, #8
    3e18:	0020      	movs	r0, r4
    3e1a:	4b46      	ldr	r3, [pc, #280]	; (3f34 <HAL_RadioInit+0x174>)
    3e1c:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO0_EIC_PIN;
    3e1e:	2330      	movs	r3, #48	; 0x30
    3e20:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO0_EIC_MUX;
    3e22:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    3e24:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    3e26:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO0_EIC_LINE, &config_extint_chan);
    3e28:	0021      	movs	r1, r4
    3e2a:	2000      	movs	r0, #0
    3e2c:	4b42      	ldr	r3, [pc, #264]	; (3f38 <HAL_RadioInit+0x178>)
    3e2e:	469a      	mov	sl, r3
    3e30:	4798      	blx	r3
	extint_register_callback(HAL_RadioDIO0Callback,DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    3e32:	2200      	movs	r2, #0
    3e34:	2100      	movs	r1, #0
    3e36:	4841      	ldr	r0, [pc, #260]	; (3f3c <HAL_RadioInit+0x17c>)
    3e38:	4b41      	ldr	r3, [pc, #260]	; (3f40 <HAL_RadioInit+0x180>)
    3e3a:	4699      	mov	r9, r3
    3e3c:	4798      	blx	r3
	extint_chan_enable_callback(DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    3e3e:	2100      	movs	r1, #0
    3e40:	2000      	movs	r0, #0
    3e42:	4b40      	ldr	r3, [pc, #256]	; (3f44 <HAL_RadioInit+0x184>)
    3e44:	4698      	mov	r8, r3
    3e46:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO1_EIC_PIN;
    3e48:	230b      	movs	r3, #11
    3e4a:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO1_EIC_MUX;
    3e4c:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    3e4e:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    3e50:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO1_EIC_LINE, &config_extint_chan);
    3e52:	0021      	movs	r1, r4
    3e54:	200b      	movs	r0, #11
    3e56:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO1Callback,DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    3e58:	2200      	movs	r2, #0
    3e5a:	210b      	movs	r1, #11
    3e5c:	483a      	ldr	r0, [pc, #232]	; (3f48 <HAL_RadioInit+0x188>)
    3e5e:	47c8      	blx	r9
	extint_chan_enable_callback(DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    3e60:	2100      	movs	r1, #0
    3e62:	200b      	movs	r0, #11
    3e64:	47c0      	blx	r8
	config_extint_chan.gpio_pin           = DIO2_EIC_PIN;
    3e66:	230c      	movs	r3, #12
    3e68:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO2_EIC_MUX;
    3e6a:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    3e6c:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    3e6e:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO2_EIC_LINE, &config_extint_chan);
    3e70:	0021      	movs	r1, r4
    3e72:	200c      	movs	r0, #12
    3e74:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO2Callback,DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    3e76:	2200      	movs	r2, #0
    3e78:	210c      	movs	r1, #12
    3e7a:	4834      	ldr	r0, [pc, #208]	; (3f4c <HAL_RadioInit+0x18c>)
    3e7c:	47c8      	blx	r9
	extint_chan_enable_callback(DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    3e7e:	2100      	movs	r1, #0
    3e80:	200c      	movs	r0, #12
    3e82:	47c0      	blx	r8
	slave->ss_pin          = config->ss_pin;
    3e84:	4b32      	ldr	r3, [pc, #200]	; (3f50 <HAL_RadioInit+0x190>)
    3e86:	4698      	mov	r8, r3
    3e88:	233f      	movs	r3, #63	; 0x3f
    3e8a:	4642      	mov	r2, r8
    3e8c:	7013      	strb	r3, [r2, #0]
	slave->address_enabled = config->address_enabled;
    3e8e:	7055      	strb	r5, [r2, #1]
	slave->address         = config->address;
    3e90:	7095      	strb	r5, [r2, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    3e92:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    3e94:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    3e96:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    3e98:	0021      	movs	r1, r4
    3e9a:	203f      	movs	r0, #63	; 0x3f
    3e9c:	47b8      	blx	r7
	port_pin_set_output_level(slave->ss_pin, true);
    3e9e:	4643      	mov	r3, r8
    3ea0:	781a      	ldrb	r2, [r3, #0]
	if (port_index < PORT_INST_NUM) {
    3ea2:	09d1      	lsrs	r1, r2, #7
		return NULL;
    3ea4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3ea6:	2900      	cmp	r1, #0
    3ea8:	d104      	bne.n	3eb4 <HAL_RadioInit+0xf4>
		return &(ports[port_index]->Group[group_index]);
    3eaa:	0953      	lsrs	r3, r2, #5
    3eac:	01db      	lsls	r3, r3, #7
    3eae:	4929      	ldr	r1, [pc, #164]	; (3f54 <HAL_RadioInit+0x194>)
    3eb0:	468c      	mov	ip, r1
    3eb2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3eb4:	211f      	movs	r1, #31
    3eb6:	4011      	ands	r1, r2
    3eb8:	2201      	movs	r2, #1
    3eba:	0010      	movs	r0, r2
    3ebc:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    3ebe:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    3ec0:	ac02      	add	r4, sp, #8
    3ec2:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    3ec4:	2300      	movs	r3, #0
    3ec6:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    3ec8:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    3eca:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    3ecc:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    3ece:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    3ed0:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    3ed2:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    3ed4:	3223      	adds	r2, #35	; 0x23
    3ed6:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    3ed8:	3a18      	subs	r2, #24
    3eda:	2100      	movs	r1, #0
    3edc:	a808      	add	r0, sp, #32
    3ede:	4b1e      	ldr	r3, [pc, #120]	; (3f58 <HAL_RadioInit+0x198>)
    3ee0:	4798      	blx	r3
	config_spi_master.mode_specific.master.baudrate = SX_RF_SPI_BAUDRATE;
    3ee2:	4b1e      	ldr	r3, [pc, #120]	; (3f5c <HAL_RadioInit+0x19c>)
    3ee4:	61a3      	str	r3, [r4, #24]
	config_spi_master.mux_setting = SX_RF_SPI_SERCOM_MUX_SETTING;
    3ee6:	2380      	movs	r3, #128	; 0x80
    3ee8:	025b      	lsls	r3, r3, #9
    3eea:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = SX_RF_SPI_SERCOM_PINMUX_PAD0;
    3eec:	4b1c      	ldr	r3, [pc, #112]	; (3f60 <HAL_RadioInit+0x1a0>)
    3eee:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    3ef0:	2301      	movs	r3, #1
    3ef2:	425b      	negs	r3, r3
    3ef4:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = SX_RF_SPI_SERCOM_PINMUX_PAD2;
    3ef6:	4b1b      	ldr	r3, [pc, #108]	; (3f64 <HAL_RadioInit+0x1a4>)
    3ef8:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = SX_RF_SPI_SERCOM_PINMUX_PAD3;
    3efa:	4b1b      	ldr	r3, [pc, #108]	; (3f68 <HAL_RadioInit+0x1a8>)
    3efc:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, SX_RF_SPI, &config_spi_master);	
    3efe:	4d1b      	ldr	r5, [pc, #108]	; (3f6c <HAL_RadioInit+0x1ac>)
    3f00:	0022      	movs	r2, r4
    3f02:	491b      	ldr	r1, [pc, #108]	; (3f70 <HAL_RadioInit+0x1b0>)
    3f04:	0028      	movs	r0, r5
    3f06:	4b1b      	ldr	r3, [pc, #108]	; (3f74 <HAL_RadioInit+0x1b4>)
    3f08:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3f0a:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    3f0c:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    3f0e:	2b00      	cmp	r3, #0
    3f10:	d1fc      	bne.n	3f0c <HAL_RadioInit+0x14c>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3f12:	6813      	ldr	r3, [r2, #0]
    3f14:	2102      	movs	r1, #2
    3f16:	430b      	orrs	r3, r1
    3f18:	6013      	str	r3, [r2, #0]
}
    3f1a:	b010      	add	sp, #64	; 0x40
    3f1c:	bc1c      	pop	{r2, r3, r4}
    3f1e:	4690      	mov	r8, r2
    3f20:	4699      	mov	r9, r3
    3f22:	46a2      	mov	sl, r4
    3f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f26:	46c0      	nop			; (mov r8, r8)
    3f28:	00000fb5 	.word	0x00000fb5
    3f2c:	40002900 	.word	0x40002900
    3f30:	40002880 	.word	0x40002880
    3f34:	00000f15 	.word	0x00000f15
    3f38:	00000f29 	.word	0x00000f29
    3f3c:	00003d69 	.word	0x00003d69
    3f40:	00000dd5 	.word	0x00000dd5
    3f44:	00000e01 	.word	0x00000e01
    3f48:	00003d49 	.word	0x00003d49
    3f4c:	00003d29 	.word	0x00003d29
    3f50:	200011e0 	.word	0x200011e0
    3f54:	40002800 	.word	0x40002800
    3f58:	000151f1 	.word	0x000151f1
    3f5c:	001e8480 	.word	0x001e8480
    3f60:	00530005 	.word	0x00530005
    3f64:	003e0005 	.word	0x003e0005
    3f68:	00520005 	.word	0x00520005
    3f6c:	20000b40 	.word	0x20000b40
    3f70:	42001000 	.word	0x42001000
    3f74:	000020d9 	.word	0x000020d9

00003f78 <HAL_Radio_resources_init>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    3f78:	4b07      	ldr	r3, [pc, #28]	; (3f98 <HAL_Radio_resources_init+0x20>)
    3f7a:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    3f7c:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    3f7e:	2b00      	cmp	r3, #0
    3f80:	d1fc      	bne.n	3f7c <HAL_Radio_resources_init+0x4>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3f82:	6813      	ldr	r3, [r2, #0]
    3f84:	2102      	movs	r1, #2
    3f86:	430b      	orrs	r3, r1
    3f88:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3f8a:	4b03      	ldr	r3, [pc, #12]	; (3f98 <HAL_Radio_resources_init+0x20>)
    3f8c:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    3f8e:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(&master)) {
    3f90:	2b00      	cmp	r3, #0
    3f92:	d1fc      	bne.n	3f8e <HAL_Radio_resources_init+0x16>
}
    3f94:	4770      	bx	lr
    3f96:	46c0      	nop			; (mov r8, r8)
    3f98:	20000b40 	.word	0x20000b40

00003f9c <HAL_RadioDeInit>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    3f9c:	4b06      	ldr	r3, [pc, #24]	; (3fb8 <HAL_RadioDeInit+0x1c>)
    3f9e:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    3fa0:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    3fa2:	2b00      	cmp	r3, #0
    3fa4:	d1fc      	bne.n	3fa0 <HAL_RadioDeInit+0x4>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    3fa6:	338f      	adds	r3, #143	; 0x8f
    3fa8:	7513      	strb	r3, [r2, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    3faa:	7613      	strb	r3, [r2, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    3fac:	6813      	ldr	r3, [r2, #0]
    3fae:	2102      	movs	r1, #2
    3fb0:	438b      	bics	r3, r1
    3fb2:	6013      	str	r3, [r2, #0]
}
    3fb4:	4770      	bx	lr
    3fb6:	46c0      	nop			; (mov r8, r8)
    3fb8:	20000b40 	.word	0x20000b40

00003fbc <RADIO_Reset>:
{
    3fbc:	b570      	push	{r4, r5, r6, lr}
    3fbe:	b082      	sub	sp, #8
	HAL_ResetPinMakeOutput();
    3fc0:	4c0a      	ldr	r4, [pc, #40]	; (3fec <RADIO_Reset+0x30>)
    3fc2:	47a0      	blx	r4
		port_base->OUTCLR.reg = pin_mask;
    3fc4:	4d0a      	ldr	r5, [pc, #40]	; (3ff0 <RADIO_Reset+0x34>)
    3fc6:	2680      	movs	r6, #128	; 0x80
    3fc8:	0236      	lsls	r6, r6, #8
    3fca:	616e      	str	r6, [r5, #20]
	SystemBlockingWaitMs(1);
    3fcc:	2001      	movs	r0, #1
    3fce:	4b09      	ldr	r3, [pc, #36]	; (3ff4 <RADIO_Reset+0x38>)
    3fd0:	4798      	blx	r3
	config->direction  = PORT_PIN_DIR_INPUT;
    3fd2:	a901      	add	r1, sp, #4
    3fd4:	2300      	movs	r3, #0
    3fd6:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    3fd8:	2201      	movs	r2, #1
    3fda:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    3fdc:	708b      	strb	r3, [r1, #2]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    3fde:	202f      	movs	r0, #47	; 0x2f
    3fe0:	4b05      	ldr	r3, [pc, #20]	; (3ff8 <RADIO_Reset+0x3c>)
    3fe2:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    3fe4:	61ae      	str	r6, [r5, #24]
	HAL_ResetPinMakeOutput();
    3fe6:	47a0      	blx	r4
}
    3fe8:	b002      	add	sp, #8
    3fea:	bd70      	pop	{r4, r5, r6, pc}
    3fec:	00003d09 	.word	0x00003d09
    3ff0:	40002880 	.word	0x40002880
    3ff4:	00004259 	.word	0x00004259
    3ff8:	00000fb5 	.word	0x00000fb5

00003ffc <RADIO_RegisterWrite>:
{
    3ffc:	b570      	push	{r4, r5, r6, lr}
    3ffe:	0004      	movs	r4, r0
    4000:	000d      	movs	r5, r1
	HAL_SPICSAssert();
    4002:	4b05      	ldr	r3, [pc, #20]	; (4018 <RADIO_RegisterWrite+0x1c>)
    4004:	4798      	blx	r3
	HAL_SPISend(REG_WRITE_CMD | reg);
    4006:	2080      	movs	r0, #128	; 0x80
    4008:	4320      	orrs	r0, r4
    400a:	4c04      	ldr	r4, [pc, #16]	; (401c <RADIO_RegisterWrite+0x20>)
    400c:	47a0      	blx	r4
	HAL_SPISend(value);
    400e:	0028      	movs	r0, r5
    4010:	47a0      	blx	r4
	HAL_SPICSDeassert();
    4012:	4b03      	ldr	r3, [pc, #12]	; (4020 <RADIO_RegisterWrite+0x24>)
    4014:	4798      	blx	r3
}
    4016:	bd70      	pop	{r4, r5, r6, pc}
    4018:	00003d89 	.word	0x00003d89
    401c:	00003cb5 	.word	0x00003cb5
    4020:	00003da5 	.word	0x00003da5

00004024 <RADIO_RegisterRead>:
{
    4024:	b510      	push	{r4, lr}
    4026:	0004      	movs	r4, r0
	HAL_SPICSAssert();
    4028:	4b06      	ldr	r3, [pc, #24]	; (4044 <RADIO_RegisterRead+0x20>)
    402a:	4798      	blx	r3
	HAL_SPISend(reg);
    402c:	207f      	movs	r0, #127	; 0x7f
    402e:	4020      	ands	r0, r4
    4030:	4c05      	ldr	r4, [pc, #20]	; (4048 <RADIO_RegisterRead+0x24>)
    4032:	47a0      	blx	r4
	readValue = HAL_SPISend(0xFF);
    4034:	20ff      	movs	r0, #255	; 0xff
    4036:	47a0      	blx	r4
    4038:	0004      	movs	r4, r0
	HAL_SPICSDeassert();
    403a:	4b04      	ldr	r3, [pc, #16]	; (404c <RADIO_RegisterRead+0x28>)
    403c:	4798      	blx	r3
}
    403e:	0020      	movs	r0, r4
    4040:	bd10      	pop	{r4, pc}
    4042:	46c0      	nop			; (mov r8, r8)
    4044:	00003d89 	.word	0x00003d89
    4048:	00003cb5 	.word	0x00003cb5
    404c:	00003da5 	.word	0x00003da5

00004050 <RADIO_FrameWrite>:
{
    4050:	b570      	push	{r4, r5, r6, lr}
    4052:	0004      	movs	r4, r0
    4054:	000e      	movs	r6, r1
    4056:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    4058:	4b0a      	ldr	r3, [pc, #40]	; (4084 <RADIO_FrameWrite+0x34>)
    405a:	4798      	blx	r3
    HAL_SPISend(REG_WRITE_CMD | offset);
    405c:	2080      	movs	r0, #128	; 0x80
    405e:	4320      	orrs	r0, r4
    4060:	4b09      	ldr	r3, [pc, #36]	; (4088 <RADIO_FrameWrite+0x38>)
    4062:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    4064:	2d00      	cmp	r5, #0
    4066:	d00a      	beq.n	407e <RADIO_FrameWrite+0x2e>
    4068:	0034      	movs	r4, r6
    406a:	3d01      	subs	r5, #1
    406c:	b2ed      	uxtb	r5, r5
    406e:	3501      	adds	r5, #1
    4070:	1975      	adds	r5, r6, r5
	    HAL_SPISend(buffer[i]);
    4072:	4e05      	ldr	r6, [pc, #20]	; (4088 <RADIO_FrameWrite+0x38>)
    4074:	7820      	ldrb	r0, [r4, #0]
    4076:	47b0      	blx	r6
    4078:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    407a:	42ac      	cmp	r4, r5
    407c:	d1fa      	bne.n	4074 <RADIO_FrameWrite+0x24>
    HAL_SPICSDeassert();
    407e:	4b03      	ldr	r3, [pc, #12]	; (408c <RADIO_FrameWrite+0x3c>)
    4080:	4798      	blx	r3
}
    4082:	bd70      	pop	{r4, r5, r6, pc}
    4084:	00003d89 	.word	0x00003d89
    4088:	00003cb5 	.word	0x00003cb5
    408c:	00003da5 	.word	0x00003da5

00004090 <RADIO_FrameRead>:
{
    4090:	b570      	push	{r4, r5, r6, lr}
    4092:	0004      	movs	r4, r0
    4094:	000e      	movs	r6, r1
    4096:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    4098:	4b0a      	ldr	r3, [pc, #40]	; (40c4 <RADIO_FrameRead+0x34>)
    409a:	4798      	blx	r3
    HAL_SPISend(offset);
    409c:	0020      	movs	r0, r4
    409e:	4b0a      	ldr	r3, [pc, #40]	; (40c8 <RADIO_FrameRead+0x38>)
    40a0:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    40a2:	2d00      	cmp	r5, #0
    40a4:	d00b      	beq.n	40be <RADIO_FrameRead+0x2e>
    40a6:	0034      	movs	r4, r6
    40a8:	3d01      	subs	r5, #1
    40aa:	b2ed      	uxtb	r5, r5
    40ac:	3501      	adds	r5, #1
    40ae:	1975      	adds	r5, r6, r5
	    buffer[i] = HAL_SPISend(0xFF);
    40b0:	4e05      	ldr	r6, [pc, #20]	; (40c8 <RADIO_FrameRead+0x38>)
    40b2:	20ff      	movs	r0, #255	; 0xff
    40b4:	47b0      	blx	r6
    40b6:	7020      	strb	r0, [r4, #0]
    40b8:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    40ba:	42ac      	cmp	r4, r5
    40bc:	d1f9      	bne.n	40b2 <RADIO_FrameRead+0x22>
    HAL_SPICSDeassert();
    40be:	4b03      	ldr	r3, [pc, #12]	; (40cc <RADIO_FrameRead+0x3c>)
    40c0:	4798      	blx	r3
}
    40c2:	bd70      	pop	{r4, r5, r6, pc}
    40c4:	00003d89 	.word	0x00003d89
    40c8:	00003cb5 	.word	0x00003cb5
    40cc:	00003da5 	.word	0x00003da5

000040d0 <HAL_RegisterDioInterruptHandler>:
 * \param[in] dioPin  - DIO pin
 * \param[in] handler - function to be called upon given DIO interrupt
 */
void HAL_RegisterDioInterruptHandler(uint8_t dioPin, DioInterruptHandler_t handler)
{
  switch (dioPin)
    40d0:	2802      	cmp	r0, #2
    40d2:	d007      	beq.n	40e4 <HAL_RegisterDioInterruptHandler+0x14>
    40d4:	2804      	cmp	r0, #4
    40d6:	d008      	beq.n	40ea <HAL_RegisterDioInterruptHandler+0x1a>
    40d8:	2801      	cmp	r0, #1
    40da:	d000      	beq.n	40de <HAL_RegisterDioInterruptHandler+0xe>
#endif

    default:
      break;
  }
}
    40dc:	4770      	bx	lr
      interruptHandlerDio0 = handler;
    40de:	4b04      	ldr	r3, [pc, #16]	; (40f0 <HAL_RegisterDioInterruptHandler+0x20>)
    40e0:	6019      	str	r1, [r3, #0]
      break;
    40e2:	e7fb      	b.n	40dc <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio1 = handler;
    40e4:	4b03      	ldr	r3, [pc, #12]	; (40f4 <HAL_RegisterDioInterruptHandler+0x24>)
    40e6:	6019      	str	r1, [r3, #0]
      break;
    40e8:	e7f8      	b.n	40dc <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio2 = handler;
    40ea:	4b03      	ldr	r3, [pc, #12]	; (40f8 <HAL_RegisterDioInterruptHandler+0x28>)
    40ec:	6019      	str	r1, [r3, #0]
}
    40ee:	e7f5      	b.n	40dc <HAL_RegisterDioInterruptHandler+0xc>
    40f0:	20000b34 	.word	0x20000b34
    40f4:	20000b38 	.word	0x20000b38
    40f8:	20000b3c 	.word	0x20000b3c

000040fc <HAL_EnableRFCtrl>:

void HAL_EnableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
   if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    40fc:	2801      	cmp	r0, #1
    40fe:	d00a      	beq.n	4116 <HAL_EnableRFCtrl+0x1a>
    4100:	2900      	cmp	r1, #0
    4102:	d008      	beq.n	4116 <HAL_EnableRFCtrl+0x1a>
   {
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_ACTIVE);		
   }
   else if ((RFCtrl1 == PA_BOOST) && (RFCtrl2 == TX))
    4104:	2802      	cmp	r0, #2
    4106:	d10a      	bne.n	411e <HAL_EnableRFCtrl+0x22>
    4108:	2901      	cmp	r1, #1
    410a:	d108      	bne.n	411e <HAL_EnableRFCtrl+0x22>
		port_base->OUTCLR.reg = pin_mask;
    410c:	2280      	movs	r2, #128	; 0x80
    410e:	0192      	lsls	r2, r2, #6
    4110:	4b03      	ldr	r3, [pc, #12]	; (4120 <HAL_EnableRFCtrl+0x24>)
    4112:	615a      	str	r2, [r3, #20]
   {
	   port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);
   }
#endif	
}
    4114:	e003      	b.n	411e <HAL_EnableRFCtrl+0x22>
		port_base->OUTSET.reg = pin_mask;
    4116:	2280      	movs	r2, #128	; 0x80
    4118:	0192      	lsls	r2, r2, #6
    411a:	4b01      	ldr	r3, [pc, #4]	; (4120 <HAL_EnableRFCtrl+0x24>)
    411c:	619a      	str	r2, [r3, #24]
    411e:	4770      	bx	lr
    4120:	40002800 	.word	0x40002800

00004124 <HAL_DisableRFCtrl>:

void HAL_DisableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
	if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    4124:	2801      	cmp	r0, #1
    4126:	d001      	beq.n	412c <HAL_DisableRFCtrl+0x8>
    4128:	2900      	cmp	r1, #0
    412a:	d103      	bne.n	4134 <HAL_DisableRFCtrl+0x10>
		port_base->OUTCLR.reg = pin_mask;
    412c:	2280      	movs	r2, #128	; 0x80
    412e:	0192      	lsls	r2, r2, #6
    4130:	4b01      	ldr	r3, [pc, #4]	; (4138 <HAL_DisableRFCtrl+0x14>)
    4132:	615a      	str	r2, [r3, #20]
	{
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
	}
#endif	
}
    4134:	4770      	bx	lr
    4136:	46c0      	nop			; (mov r8, r8)
    4138:	40002800 	.word	0x40002800

0000413c <HAL_GetRadioClkStabilizationDelay>:
 * \param[out] Time value in ms
 */
uint8_t HAL_GetRadioClkStabilizationDelay(void)
{
	return RADIO_CLK_STABILITATION_DELAY;
}
    413c:	2002      	movs	r0, #2
    413e:	4770      	bx	lr

00004140 <HAL_GetRadioClkSrc>:
 * \param[out] Type of clock source TCXO or XTAL
 */
RadioClockSources_t HAL_GetRadioClkSrc(void)
{
	return RADIO_CLK_SRC;
}
    4140:	2000      	movs	r0, #0
    4142:	4770      	bx	lr

00004144 <HAL_TCXOPowerOn>:
 *
 * \param[in] None
 * \param[out] None
 */
void HAL_TCXOPowerOn(void)
{
    4144:	b510      	push	{r4, lr}
		port_base->OUTSET.reg = pin_mask;
    4146:	2280      	movs	r2, #128	; 0x80
    4148:	0092      	lsls	r2, r2, #2
    414a:	4b03      	ldr	r3, [pc, #12]	; (4158 <HAL_TCXOPowerOn+0x14>)
    414c:	619a      	str	r2, [r3, #24]
#ifdef TCXO_ENABLE
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_ACTIVE);
	delay_ms(RADIO_CLK_STABILITATION_DELAY);
    414e:	2002      	movs	r0, #2
    4150:	4b02      	ldr	r3, [pc, #8]	; (415c <HAL_TCXOPowerOn+0x18>)
    4152:	4798      	blx	r3
#endif
}
    4154:	bd10      	pop	{r4, pc}
    4156:	46c0      	nop			; (mov r8, r8)
    4158:	40002800 	.word	0x40002800
    415c:	00000635 	.word	0x00000635

00004160 <HAL_TCXOPowerOff>:
		port_base->OUTCLR.reg = pin_mask;
    4160:	2280      	movs	r2, #128	; 0x80
    4162:	0092      	lsls	r2, r2, #2
    4164:	4b01      	ldr	r3, [pc, #4]	; (416c <HAL_TCXOPowerOff+0xc>)
    4166:	615a      	str	r2, [r3, #20]
#ifdef TCXO_ENABLE
#ifndef TCXO_ALWAYS_ON
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
#endif
}
    4168:	4770      	bx	lr
    416a:	46c0      	nop			; (mov r8, r8)
    416c:	40002800 	.word	0x40002800

00004170 <HAL_Sleep>:
 *
 * \param[in] mode - sleep mode
 */
void HAL_Sleep(HAL_SleepMode_t mode)
{
	switch (mode)
    4170:	2801      	cmp	r0, #1
    4172:	d002      	beq.n	417a <HAL_Sleep+0xa>
    4174:	2802      	cmp	r0, #2
    4176:	d00c      	beq.n	4192 <HAL_Sleep+0x22>
		{
			/* other sleep modes are not implemented currently */
			break;
		}
	}
}
    4178:	4770      	bx	lr
	PM->SLEEPCFG.reg = sleep_mode;
    417a:	2204      	movs	r2, #4
    417c:	2380      	movs	r3, #128	; 0x80
    417e:	05db      	lsls	r3, r3, #23
    4180:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    4182:	001a      	movs	r2, r3
    4184:	7853      	ldrb	r3, [r2, #1]
    4186:	2b04      	cmp	r3, #4
    4188:	d1fc      	bne.n	4184 <HAL_Sleep+0x14>
  __ASM volatile ("dsb 0xF":::"memory");
    418a:	f3bf 8f4f 	dsb	sy
	__WFI();
    418e:	bf30      	wfi
    4190:	e7f2      	b.n	4178 <HAL_Sleep+0x8>
	PM->SLEEPCFG.reg = sleep_mode;
    4192:	2205      	movs	r2, #5
    4194:	2380      	movs	r3, #128	; 0x80
    4196:	05db      	lsls	r3, r3, #23
    4198:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    419a:	001a      	movs	r2, r3
    419c:	7853      	ldrb	r3, [r2, #1]
    419e:	2b05      	cmp	r3, #5
    41a0:	d1fc      	bne.n	419c <HAL_Sleep+0x2c>
    41a2:	f3bf 8f4f 	dsb	sy
	__WFI();
    41a6:	bf30      	wfi
    41a8:	e7e6      	b.n	4178 <HAL_Sleep+0x8>
	...

000041ac <SleepTimerInit>:
/************************************** IMPLEMENTATION************************/
/**
* \brief Initializes the sleep timer module
*/
void SleepTimerInit(void)
{
    41ac:	b510      	push	{r4, lr}
    41ae:	b084      	sub	sp, #16
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
	config->mode                = RTC_COUNT_MODE_32BIT;
    41b0:	2201      	movs	r2, #1
    41b2:	466b      	mov	r3, sp
    41b4:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
    41b6:	2300      	movs	r3, #0
    41b8:	4669      	mov	r1, sp
    41ba:	70cb      	strb	r3, [r1, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	config->enable_read_sync    = true;
    41bc:	710a      	strb	r2, [r1, #4]
	struct rtc_count_config rtc_config;
	rtc_count_get_config_defaults(&rtc_config);
	
	rtc_config.prescaler = RTC_COUNT_PRESCALER_OFF;
    41be:	466a      	mov	r2, sp
    41c0:	800b      	strh	r3, [r1, #0]
	rtc_config.enable_read_sync = true;
	rtc_config.compare_values[0] = COMPARE_COUNT_MAX_VALUE;
    41c2:	3b01      	subs	r3, #1
    41c4:	9302      	str	r3, [sp, #8]
	rtc_config.compare_values[1] = COMPARE_COUNT_MAX_VALUE;
    41c6:	9303      	str	r3, [sp, #12]
	rtc_count_init(&rtc, RTC, &rtc_config);
    41c8:	4c04      	ldr	r4, [pc, #16]	; (41dc <SleepTimerInit+0x30>)
    41ca:	4905      	ldr	r1, [pc, #20]	; (41e0 <SleepTimerInit+0x34>)
    41cc:	0020      	movs	r0, r4
    41ce:	4b05      	ldr	r3, [pc, #20]	; (41e4 <SleepTimerInit+0x38>)
    41d0:	4798      	blx	r3
	rtc_count_enable(&rtc);
    41d2:	0020      	movs	r0, r4
    41d4:	4b04      	ldr	r3, [pc, #16]	; (41e8 <SleepTimerInit+0x3c>)
    41d6:	4798      	blx	r3
}
    41d8:	b004      	add	sp, #16
    41da:	bd10      	pop	{r4, pc}
    41dc:	200011e4 	.word	0x200011e4
    41e0:	40002000 	.word	0x40002000
    41e4:	00001165 	.word	0x00001165
    41e8:	00000fe5 	.word	0x00000fe5

000041ec <SleepTimerGetElapsedTime>:
/**
* \brief Calculate the Elapsed Time from the previous call of this function
* \retval Elapsed time in ticks
*/
uint32_t SleepTimerGetElapsedTime(void)
{
    41ec:	b510      	push	{r4, lr}
	return rtc_count_get_count(&rtc);
    41ee:	4802      	ldr	r0, [pc, #8]	; (41f8 <SleepTimerGetElapsedTime+0xc>)
    41f0:	4b02      	ldr	r3, [pc, #8]	; (41fc <SleepTimerGetElapsedTime+0x10>)
    41f2:	4798      	blx	r3
}
    41f4:	bd10      	pop	{r4, pc}
    41f6:	46c0      	nop			; (mov r8, r8)
    41f8:	200011e4 	.word	0x200011e4
    41fc:	000010d5 	.word	0x000010d5

00004200 <SleepTimerStart>:

/**
* \brief Initializes the sleep timer
*/
void SleepTimerStart(uint32_t sleepTicks, void (*cb)(void))
{
    4200:	b570      	push	{r4, r5, r6, lr}
    4202:	0005      	movs	r5, r0
    4204:	000e      	movs	r6, r1
	rtc_count_set_count(&rtc, 0);
    4206:	4c0a      	ldr	r4, [pc, #40]	; (4230 <SleepTimerStart+0x30>)
    4208:	2100      	movs	r1, #0
    420a:	0020      	movs	r0, r4
    420c:	4b09      	ldr	r3, [pc, #36]	; (4234 <SleepTimerStart+0x34>)
    420e:	4798      	blx	r3
	rtc_count_register_callback(&rtc, cb, RTC_COUNT_CALLBACK_COMPARE_0);
    4210:	2208      	movs	r2, #8
    4212:	0031      	movs	r1, r6
    4214:	0020      	movs	r0, r4
    4216:	4b08      	ldr	r3, [pc, #32]	; (4238 <SleepTimerStart+0x38>)
    4218:	4798      	blx	r3
	rtc_count_set_compare(&rtc, sleepTicks, RTC_COUNT_COMPARE_0);
    421a:	2200      	movs	r2, #0
    421c:	0029      	movs	r1, r5
    421e:	0020      	movs	r0, r4
    4220:	4b06      	ldr	r3, [pc, #24]	; (423c <SleepTimerStart+0x3c>)
    4222:	4798      	blx	r3
	rtc_count_enable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    4224:	2108      	movs	r1, #8
    4226:	0020      	movs	r0, r4
    4228:	4b05      	ldr	r3, [pc, #20]	; (4240 <SleepTimerStart+0x40>)
    422a:	4798      	blx	r3
}
    422c:	bd70      	pop	{r4, r5, r6, pc}
    422e:	46c0      	nop			; (mov r8, r8)
    4230:	200011e4 	.word	0x200011e4
    4234:	00001091 	.word	0x00001091
    4238:	00001201 	.word	0x00001201
    423c:	00001101 	.word	0x00001101
    4240:	0000123d 	.word	0x0000123d

00004244 <SleepTimerStop>:

/**
* \brief Stop the sleep timer
*/
void SleepTimerStop(void)
{
    4244:	b510      	push	{r4, lr}
	rtc_count_disable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    4246:	2108      	movs	r1, #8
    4248:	4801      	ldr	r0, [pc, #4]	; (4250 <SleepTimerStop+0xc>)
    424a:	4b02      	ldr	r3, [pc, #8]	; (4254 <SleepTimerStop+0x10>)
    424c:	4798      	blx	r3
}
    424e:	bd10      	pop	{r4, pc}
    4250:	200011e4 	.word	0x200011e4
    4254:	00001281 	.word	0x00001281

00004258 <SystemBlockingWaitMs>:
 * waiting with the MCU in sleep.
 * Find out how long it takes the MCU to go to and wake up from sleep to see if
 * it makes sense to go to sleep at all 
 */
void SystemBlockingWaitMs(uint32_t ms)
{
    4258:	b510      	push	{r4, lr}
#ifndef UT
    delay_ms(ms);
    425a:	2800      	cmp	r0, #0
    425c:	d103      	bne.n	4266 <SystemBlockingWaitMs+0xe>
    425e:	2001      	movs	r0, #1
    4260:	4b02      	ldr	r3, [pc, #8]	; (426c <SystemBlockingWaitMs+0x14>)
    4262:	4798      	blx	r3
#endif
}
    4264:	bd10      	pop	{r4, pc}
    delay_ms(ms);
    4266:	4b02      	ldr	r3, [pc, #8]	; (4270 <SystemBlockingWaitMs+0x18>)
    4268:	4798      	blx	r3
    426a:	e7fb      	b.n	4264 <SystemBlockingWaitMs+0xc>
    426c:	00000609 	.word	0x00000609
    4270:	00000635 	.word	0x00000635

00004274 <system_enter_critical_section>:
{

}

void system_enter_critical_section(void)
{
    4274:	b510      	push	{r4, lr}
	cpu_irq_enter_critical();
    4276:	4b01      	ldr	r3, [pc, #4]	; (427c <system_enter_critical_section+0x8>)
    4278:	4798      	blx	r3
#ifndef UT
	system_interrupt_enter_critical_section();
#endif
}
    427a:	bd10      	pop	{r4, pc}
    427c:	00000661 	.word	0x00000661

00004280 <system_leave_critical_section>:

void system_leave_critical_section(void)
{
    4280:	b510      	push	{r4, lr}
	cpu_irq_leave_critical();
    4282:	4b01      	ldr	r3, [pc, #4]	; (4288 <system_leave_critical_section+0x8>)
    4284:	4798      	blx	r3
#ifndef UT
	system_interrupt_leave_critical_section();
#endif
}
    4286:	bd10      	pop	{r4, pc}
    4288:	000006a1 	.word	0x000006a1

0000428c <PMM_Wakeup>:

/**
* \brief Wakeup from sleep
*/
void PMM_Wakeup(void)
{
    428c:	b570      	push	{r4, r5, r6, lr}
    uint64_t sleptTimeUs = 0;

    if (PMM_STATE_SLEEP == pmmState)
    428e:	4b16      	ldr	r3, [pc, #88]	; (42e8 <PMM_Wakeup+0x5c>)
    4290:	781b      	ldrb	r3, [r3, #0]
    4292:	2b01      	cmp	r3, #1
    4294:	d000      	beq.n	4298 <PMM_Wakeup+0xc>
        {
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
            sleepReq = NULL;
        }
    }
}
    4296:	bd70      	pop	{r4, r5, r6, pc}
		pmmState = PMM_STATE_ACTIVE;
    4298:	2200      	movs	r2, #0
    429a:	4b13      	ldr	r3, [pc, #76]	; (42e8 <PMM_Wakeup+0x5c>)
    429c:	701a      	strb	r2, [r3, #0]
        sleptTimeUs = SLEEP_TICKS_TO_US(SleepTimerGetElapsedTime());
    429e:	4b13      	ldr	r3, [pc, #76]	; (42ec <PMM_Wakeup+0x60>)
    42a0:	4798      	blx	r3
    42a2:	4b13      	ldr	r3, [pc, #76]	; (42f0 <PMM_Wakeup+0x64>)
    42a4:	4798      	blx	r3
    42a6:	4913      	ldr	r1, [pc, #76]	; (42f4 <PMM_Wakeup+0x68>)
    42a8:	4b13      	ldr	r3, [pc, #76]	; (42f8 <PMM_Wakeup+0x6c>)
    42aa:	4798      	blx	r3
    42ac:	4b13      	ldr	r3, [pc, #76]	; (42fc <PMM_Wakeup+0x70>)
    42ae:	4798      	blx	r3
    42b0:	0004      	movs	r4, r0
    42b2:	000d      	movs	r5, r1
        SleepTimerStop();
    42b4:	4b12      	ldr	r3, [pc, #72]	; (4300 <PMM_Wakeup+0x74>)
    42b6:	4798      	blx	r3
        SystemTimerSync(sleptTimeUs);
    42b8:	0020      	movs	r0, r4
    42ba:	0029      	movs	r1, r5
    42bc:	4b11      	ldr	r3, [pc, #68]	; (4304 <PMM_Wakeup+0x78>)
    42be:	4798      	blx	r3
        if (sleepReq && sleepReq->pmmWakeupCallback)
    42c0:	4b11      	ldr	r3, [pc, #68]	; (4308 <PMM_Wakeup+0x7c>)
    42c2:	681b      	ldr	r3, [r3, #0]
    42c4:	2b00      	cmp	r3, #0
    42c6:	d0e6      	beq.n	4296 <PMM_Wakeup+0xa>
    42c8:	689e      	ldr	r6, [r3, #8]
    42ca:	2e00      	cmp	r6, #0
    42cc:	d0e3      	beq.n	4296 <PMM_Wakeup+0xa>
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
    42ce:	22fa      	movs	r2, #250	; 0xfa
    42d0:	0092      	lsls	r2, r2, #2
    42d2:	2300      	movs	r3, #0
    42d4:	0020      	movs	r0, r4
    42d6:	0029      	movs	r1, r5
    42d8:	4c0c      	ldr	r4, [pc, #48]	; (430c <PMM_Wakeup+0x80>)
    42da:	47a0      	blx	r4
    42dc:	47b0      	blx	r6
            sleepReq = NULL;
    42de:	2200      	movs	r2, #0
    42e0:	4b09      	ldr	r3, [pc, #36]	; (4308 <PMM_Wakeup+0x7c>)
    42e2:	601a      	str	r2, [r3, #0]
}
    42e4:	e7d7      	b.n	4296 <PMM_Wakeup+0xa>
    42e6:	46c0      	nop			; (mov r8, r8)
    42e8:	20000b4c 	.word	0x20000b4c
    42ec:	000041ed 	.word	0x000041ed
    42f0:	00012d49 	.word	0x00012d49
    42f4:	41f423d7 	.word	0x41f423d7
    42f8:	000126f1 	.word	0x000126f1
    42fc:	00011e2d 	.word	0x00011e2d
    4300:	00004245 	.word	0x00004245
    4304:	0000a03d 	.word	0x0000a03d
    4308:	20000b50 	.word	0x20000b50
    430c:	00011d69 	.word	0x00011d69

00004310 <PMM_Sleep>:
{
    4310:	b570      	push	{r4, r5, r6, lr}
    4312:	1e05      	subs	r5, r0, #0
    if ( req && (PMM_STATE_ACTIVE == pmmState) )
    4314:	d059      	beq.n	43ca <PMM_Sleep+0xba>
    4316:	4b33      	ldr	r3, [pc, #204]	; (43e4 <PMM_Sleep+0xd4>)
    4318:	781b      	ldrb	r3, [r3, #0]
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    431a:	2000      	movs	r0, #0
    if ( req && (PMM_STATE_ACTIVE == pmmState) )
    431c:	2b00      	cmp	r3, #0
    431e:	d000      	beq.n	4322 <PMM_Sleep+0x12>
}
    4320:	bd70      	pop	{r4, r5, r6, pc}
        canSleep = SYSTEM_ReadyToSleep();
    4322:	4b31      	ldr	r3, [pc, #196]	; (43e8 <PMM_Sleep+0xd8>)
    4324:	4798      	blx	r3
    4326:	1e04      	subs	r4, r0, #0
        canSleep = canSleep && validateSleepDuration( req->sleepTimeMs );
    4328:	d051      	beq.n	43ce <PMM_Sleep+0xbe>
        (PMM_SLEEPTIME_MAX_MS >= durationMs) && \
    432a:	682b      	ldr	r3, [r5, #0]
    432c:	4a2f      	ldr	r2, [pc, #188]	; (43ec <PMM_Sleep+0xdc>)
    432e:	4694      	mov	ip, r2
    4330:	4463      	add	r3, ip
        canSleep = canSleep && validateSleepDuration( req->sleepTimeMs );
    4332:	2400      	movs	r4, #0
    4334:	4a2e      	ldr	r2, [pc, #184]	; (43f0 <PMM_Sleep+0xe0>)
    4336:	429a      	cmp	r2, r3
    4338:	4164      	adcs	r4, r4
    433a:	b2e4      	uxtb	r4, r4
        if ( SLEEP_MODE_BACKUP == req->sleep_mode )
    433c:	792a      	ldrb	r2, [r5, #4]
    433e:	2a02      	cmp	r2, #2
    4340:	d01e      	beq.n	4380 <PMM_Sleep+0x70>
        else if ( SLEEP_MODE_STANDBY == req->sleep_mode )
    4342:	2a01      	cmp	r2, #1
    4344:	d029      	beq.n	439a <PMM_Sleep+0x8a>
    uint32_t sysSleepTime = ~0u; /* 0xffFFffFF is invalid */
    4346:	2601      	movs	r6, #1
    4348:	4276      	negs	r6, r6
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    434a:	2000      	movs	r0, #0
        if ( canSleep )
    434c:	2c00      	cmp	r4, #0
    434e:	d0e7      	beq.n	4320 <PMM_Sleep+0x10>
            SystemTimerSuspend();
    4350:	4b28      	ldr	r3, [pc, #160]	; (43f4 <PMM_Sleep+0xe4>)
    4352:	4798      	blx	r3
            SleepTimerStart( MS_TO_SLEEP_TICKS( sysSleepTime - PMM_WAKEUPTIME_MS ), PMM_Wakeup );
    4354:	0030      	movs	r0, r6
    4356:	380a      	subs	r0, #10
    4358:	4b27      	ldr	r3, [pc, #156]	; (43f8 <PMM_Sleep+0xe8>)
    435a:	4798      	blx	r3
    435c:	4927      	ldr	r1, [pc, #156]	; (43fc <PMM_Sleep+0xec>)
    435e:	4b28      	ldr	r3, [pc, #160]	; (4400 <PMM_Sleep+0xf0>)
    4360:	4798      	blx	r3
    4362:	4b28      	ldr	r3, [pc, #160]	; (4404 <PMM_Sleep+0xf4>)
    4364:	4798      	blx	r3
    4366:	4928      	ldr	r1, [pc, #160]	; (4408 <PMM_Sleep+0xf8>)
    4368:	4b28      	ldr	r3, [pc, #160]	; (440c <PMM_Sleep+0xfc>)
    436a:	4798      	blx	r3
            pmmState = PMM_STATE_SLEEP;
    436c:	2201      	movs	r2, #1
    436e:	4b1d      	ldr	r3, [pc, #116]	; (43e4 <PMM_Sleep+0xd4>)
    4370:	701a      	strb	r2, [r3, #0]
            sleepReq = req;
    4372:	4b27      	ldr	r3, [pc, #156]	; (4410 <PMM_Sleep+0x100>)
    4374:	601d      	str	r5, [r3, #0]
            HAL_Sleep(req->sleep_mode);
    4376:	7928      	ldrb	r0, [r5, #4]
    4378:	4b26      	ldr	r3, [pc, #152]	; (4414 <PMM_Sleep+0x104>)
    437a:	4798      	blx	r3
            status = PMM_SLEEP_REQ_PROCESSED;
    437c:	2001      	movs	r0, #1
    437e:	e7cf      	b.n	4320 <PMM_Sleep+0x10>
            canSleep = canSleep && ( SWTIMER_INVALID_TIMEOUT == SwTimerNextExpiryDuration() );
    4380:	4a1b      	ldr	r2, [pc, #108]	; (43f0 <PMM_Sleep+0xe0>)
    4382:	2400      	movs	r4, #0
    4384:	4293      	cmp	r3, r2
    4386:	d806      	bhi.n	4396 <PMM_Sleep+0x86>
    4388:	4b23      	ldr	r3, [pc, #140]	; (4418 <PMM_Sleep+0x108>)
    438a:	4798      	blx	r3
    438c:	3001      	adds	r0, #1
    438e:	4244      	negs	r4, r0
    4390:	4144      	adcs	r4, r0
    4392:	e000      	b.n	4396 <PMM_Sleep+0x86>
    4394:	2400      	movs	r4, #0
            sysSleepTime = req->sleepTimeMs;
    4396:	682e      	ldr	r6, [r5, #0]
    4398:	e7d7      	b.n	434a <PMM_Sleep+0x3a>
            sysSleepTime = SwTimerNextExpiryDuration();
    439a:	4b1f      	ldr	r3, [pc, #124]	; (4418 <PMM_Sleep+0x108>)
    439c:	4798      	blx	r3
            sysSleepTime = (SWTIMER_INVALID_TIMEOUT == sysSleepTime) ? PMM_SLEEPTIME_MAX_MS : US_TO_MS( sysSleepTime );
    439e:	1c43      	adds	r3, r0, #1
    43a0:	d01c      	beq.n	43dc <PMM_Sleep+0xcc>
    43a2:	21fa      	movs	r1, #250	; 0xfa
    43a4:	0089      	lsls	r1, r1, #2
    43a6:	4b1d      	ldr	r3, [pc, #116]	; (441c <PMM_Sleep+0x10c>)
    43a8:	4798      	blx	r3
    43aa:	0003      	movs	r3, r0
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    43ac:	2000      	movs	r0, #0
            canSleep = canSleep && validateSleepDuration( sysSleepTime );
    43ae:	2c00      	cmp	r4, #0
    43b0:	d0b6      	beq.n	4320 <PMM_Sleep+0x10>
            if ( canSleep && (req->sleepTimeMs < sysSleepTime) )
    43b2:	490f      	ldr	r1, [pc, #60]	; (43f0 <PMM_Sleep+0xe0>)
    43b4:	4a0d      	ldr	r2, [pc, #52]	; (43ec <PMM_Sleep+0xdc>)
    43b6:	189a      	adds	r2, r3, r2
    43b8:	428a      	cmp	r2, r1
    43ba:	d8b1      	bhi.n	4320 <PMM_Sleep+0x10>
    43bc:	682e      	ldr	r6, [r5, #0]
    43be:	429e      	cmp	r6, r3
    43c0:	d9c6      	bls.n	4350 <PMM_Sleep+0x40>
    43c2:	001e      	movs	r6, r3
    43c4:	e7c4      	b.n	4350 <PMM_Sleep+0x40>
            sysSleepTime = (SWTIMER_INVALID_TIMEOUT == sysSleepTime) ? PMM_SLEEPTIME_MAX_MS : US_TO_MS( sysSleepTime );
    43c6:	4b16      	ldr	r3, [pc, #88]	; (4420 <PMM_Sleep+0x110>)
    43c8:	e7f8      	b.n	43bc <PMM_Sleep+0xac>
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    43ca:	2000      	movs	r0, #0
    43cc:	e7a8      	b.n	4320 <PMM_Sleep+0x10>
        if ( SLEEP_MODE_BACKUP == req->sleep_mode )
    43ce:	792b      	ldrb	r3, [r5, #4]
    43d0:	2b02      	cmp	r3, #2
    43d2:	d0df      	beq.n	4394 <PMM_Sleep+0x84>
        else if ( SLEEP_MODE_STANDBY == req->sleep_mode )
    43d4:	2b01      	cmp	r3, #1
    43d6:	d0e0      	beq.n	439a <PMM_Sleep+0x8a>
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    43d8:	2000      	movs	r0, #0
    return status;
    43da:	e7a1      	b.n	4320 <PMM_Sleep+0x10>
            canSleep = canSleep && validateSleepDuration( sysSleepTime );
    43dc:	2c00      	cmp	r4, #0
    43de:	d1f2      	bne.n	43c6 <PMM_Sleep+0xb6>
            sysSleepTime = (SWTIMER_INVALID_TIMEOUT == sysSleepTime) ? PMM_SLEEPTIME_MAX_MS : US_TO_MS( sysSleepTime );
    43e0:	4e0f      	ldr	r6, [pc, #60]	; (4420 <PMM_Sleep+0x110>)
    43e2:	e7b2      	b.n	434a <PMM_Sleep+0x3a>
    43e4:	20000b4c 	.word	0x20000b4c
    43e8:	0000a1a5 	.word	0x0000a1a5
    43ec:	fffffc18 	.word	0xfffffc18
    43f0:	07cebbc8 	.word	0x07cebbc8
    43f4:	0000a009 	.word	0x0000a009
    43f8:	00012d49 	.word	0x00012d49
    43fc:	42031375 	.word	0x42031375
    4400:	000126f1 	.word	0x000126f1
    4404:	00011dfd 	.word	0x00011dfd
    4408:	0000428d 	.word	0x0000428d
    440c:	00004201 	.word	0x00004201
    4410:	20000b50 	.word	0x20000b50
    4414:	00004171 	.word	0x00004171
    4418:	00009d45 	.word	0x00009d45
    441c:	00011a09 	.word	0x00011a09
    4420:	07cebfb0 	.word	0x07cebfb0

00004424 <LORAReg_InitAS>:
#endif
#endif
/****************************** FUNCTIONS *************************************/

StackRetStatus_t LORAReg_InitAS(IsmBand_t ismBand)
{
    4424:	b570      	push	{r4, r5, r6, lr}
	StackRetStatus_t result = LORAWAN_SUCCESS;
#if(AS_BAND == 1)
	static bool initialized = false;
	
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_AS;
    4426:	4b75      	ldr	r3, [pc, #468]	; (45fc <LORAReg_InitAS+0x1d8>)
    4428:	2103      	movs	r1, #3
    442a:	2226      	movs	r2, #38	; 0x26
    442c:	5499      	strb	r1, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_AS;
    442e:	2410      	movs	r4, #16
    4430:	3204      	adds	r2, #4
    4432:	549c      	strb	r4, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_AS;
    4434:	3a29      	subs	r2, #41	; 0x29
    4436:	3126      	adds	r1, #38	; 0x26
    4438:	545a      	strb	r2, [r3, r1]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_AS;
    443a:	3902      	subs	r1, #2
    443c:	545a      	strb	r2, [r3, r1]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    443e:	001a      	movs	r2, r3
    4440:	3283      	adds	r2, #131	; 0x83
    4442:	2100      	movs	r1, #0
    4444:	711a      	strb	r2, [r3, #4]
    4446:	0a15      	lsrs	r5, r2, #8
    4448:	715d      	strb	r5, [r3, #5]
    444a:	0c15      	lsrs	r5, r2, #16
    444c:	719d      	strb	r5, [r3, #6]
    444e:	0e12      	lsrs	r2, r2, #24
    4450:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    4452:	001a      	movs	r2, r3
    4454:	3243      	adds	r2, #67	; 0x43
    4456:	701a      	strb	r2, [r3, #0]
    4458:	0a15      	lsrs	r5, r2, #8
    445a:	705d      	strb	r5, [r3, #1]
    445c:	0c15      	lsrs	r5, r2, #16
    445e:	709d      	strb	r5, [r3, #2]
    4460:	0e12      	lsrs	r2, r2, #24
    4462:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    4464:	001a      	movs	r2, r3
    4466:	32a3      	adds	r2, #163	; 0xa3
    4468:	721a      	strb	r2, [r3, #8]
    446a:	0a15      	lsrs	r5, r2, #8
    446c:	725d      	strb	r5, [r3, #9]
    446e:	0c15      	lsrs	r5, r2, #16
    4470:	729d      	strb	r5, [r3, #10]
    4472:	0e12      	lsrs	r2, r2, #24
    4474:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    4476:	001a      	movs	r2, r3
    4478:	3264      	adds	r2, #100	; 0x64
    447a:	32ff      	adds	r2, #255	; 0xff
    447c:	741a      	strb	r2, [r3, #16]
    447e:	0a15      	lsrs	r5, r2, #8
    4480:	745d      	strb	r5, [r3, #17]
    4482:	0c15      	lsrs	r5, r2, #16
    4484:	749d      	strb	r5, [r3, #18]
    4486:	0e12      	lsrs	r2, r2, #24
    4488:	74da      	strb	r2, [r3, #19]
	RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    448a:	001a      	movs	r2, r3
    448c:	3234      	adds	r2, #52	; 0x34
    448e:	751a      	strb	r2, [r3, #20]
    4490:	0a15      	lsrs	r5, r2, #8
    4492:	755d      	strb	r5, [r3, #21]
    4494:	0c15      	lsrs	r5, r2, #16
    4496:	759d      	strb	r5, [r3, #22]
    4498:	0e12      	lsrs	r2, r2, #24
    449a:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    449c:	001a      	movs	r2, r3
    449e:	323d      	adds	r2, #61	; 0x3d
    44a0:	761a      	strb	r2, [r3, #24]
    44a2:	0a15      	lsrs	r5, r2, #8
    44a4:	765d      	strb	r5, [r3, #25]
    44a6:	0c15      	lsrs	r5, r2, #16
    44a8:	769d      	strb	r5, [r3, #26]
    44aa:	0e12      	lsrs	r2, r2, #24
    44ac:	76da      	strb	r2, [r3, #27]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    44ae:	001a      	movs	r2, r3
    44b0:	32c4      	adds	r2, #196	; 0xc4
    44b2:	32ff      	adds	r2, #255	; 0xff
    44b4:	731a      	strb	r2, [r3, #12]
    44b6:	0a15      	lsrs	r5, r2, #8
    44b8:	735d      	strb	r5, [r3, #13]
    44ba:	0c15      	lsrs	r5, r2, #16
    44bc:	739d      	strb	r5, [r3, #14]
    44be:	0e12      	lsrs	r2, r2, #24
    44c0:	73da      	strb	r2, [r3, #15]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_AS;
    44c2:	2202      	movs	r2, #2
    44c4:	2522      	movs	r5, #34	; 0x22
    44c6:	555a      	strb	r2, [r3, r5]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_AS;
    44c8:	3501      	adds	r5, #1
    44ca:	555a      	strb	r2, [r3, r5]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_AS;	
    44cc:	2500      	movs	r5, #0
    44ce:	771d      	strb	r5, [r3, #28]
    44d0:	3d16      	subs	r5, #22
    44d2:	775d      	strb	r5, [r3, #29]
    44d4:	351c      	adds	r5, #28
    44d6:	779d      	strb	r5, [r3, #30]
    44d8:	3531      	adds	r5, #49	; 0x31
    44da:	77dd      	strb	r5, [r3, #31]
	RegParams.MinNewChIndex = NEW_CHANNEL_INDEX_AS;
    44dc:	3d16      	subs	r5, #22
    44de:	555a      	strb	r2, [r3, r5]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_AS;
    44e0:	2632      	movs	r6, #50	; 0x32
    44e2:	3d01      	subs	r5, #1
    44e4:	555e      	strb	r6, [r3, r5]
	RegParams.minDataRate = MAC_DATARATE_MIN_AS;
    44e6:	3d19      	subs	r5, #25
    44e8:	3e0e      	subs	r6, #14
    44ea:	559d      	strb	r5, [r3, r6]
	RegParams.maxDataRate = MAC_DATARATE_MAX_AS;
    44ec:	3601      	adds	r6, #1
    44ee:	5599      	strb	r1, [r3, r6]
	RegParams.Rx1DrOffset = 7;
    44f0:	3607      	adds	r6, #7
    44f2:	559d      	strb	r5, [r3, r6]
	RegParams.maxTxPwrIndx = MAX_TX_PWR_INDEX_AS;
    44f4:	3601      	adds	r6, #1
    44f6:	559d      	strb	r5, [r3, r6]
	RegParams.maxTxPwr = DEFAULT_EIRP_AS;
    44f8:	3521      	adds	r5, #33	; 0x21
    44fa:	555c      	strb	r4, [r3, r5]
	RegParams.cmnParams.paramsType2.minNonDefChId = 2;
    44fc:	34b1      	adds	r4, #177	; 0xb1
    44fe:	34ff      	adds	r4, #255	; 0xff
    4500:	551a      	strb	r2, [r3, r4]
	RegParams.pDutyCycleTimer->timerId = regTimerId[0];
    4502:	4a3f      	ldr	r2, [pc, #252]	; (4600 <LORAReg_InitAS+0x1dc>)
    4504:	7815      	ldrb	r5, [r2, #0]
    4506:	2468      	movs	r4, #104	; 0x68
    4508:	34ff      	adds	r4, #255	; 0xff
    450a:	551d      	strb	r5, [r3, r4]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    450c:	7855      	ldrb	r5, [r2, #1]
    450e:	3c2b      	subs	r4, #43	; 0x2b
    4510:	3cff      	subs	r4, #255	; 0xff
    4512:	551d      	strb	r5, [r3, r4]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[2];
    4514:	7894      	ldrb	r4, [r2, #2]
    4516:	223c      	movs	r2, #60	; 0x3c
    4518:	549c      	strb	r4, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime = 0;
    451a:	2400      	movs	r4, #0
    451c:	3a04      	subs	r2, #4
    451e:	549c      	strb	r4, [r3, r2]
    4520:	3201      	adds	r2, #1
    4522:	549c      	strb	r4, [r3, r2]
    4524:	3201      	adds	r2, #1
    4526:	549c      	strb	r4, [r3, r2]
    4528:	3201      	adds	r2, #1
    452a:	549c      	strb	r4, [r3, r2]
	RegParams.joinbccount =0;
    452c:	3207      	adds	r2, #7
    452e:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    4530:	001a      	movs	r2, r3
    4532:	323e      	adds	r2, #62	; 0x3e
    4534:	7011      	strb	r1, [r2, #0]
    4536:	7051      	strb	r1, [r2, #1]
    4538:	7091      	strb	r1, [r2, #2]
    453a:	70d1      	strb	r1, [r2, #3]
	RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime = 1;
    453c:	31c3      	adds	r1, #195	; 0xc3
    453e:	31ff      	adds	r1, #255	; 0xff
    4540:	5c5a      	ldrb	r2, [r3, r1]
    4542:	2401      	movs	r4, #1
    4544:	4322      	orrs	r2, r4
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime = 1;
    4546:	2402      	movs	r4, #2
    4548:	4322      	orrs	r2, r4
    454a:	545a      	strb	r2, [r3, r1]
	
	RegParams.band = ismBand;
    454c:	222e      	movs	r2, #46	; 0x2e
    454e:	5498      	strb	r0, [r3, r2]
	
	if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    4550:	3806      	subs	r0, #6
		PDS_RegFile(PDS_FILE_REG_AS_05_IDX,filemarks);
#endif		
	}
	else
	{
		result =  LORAWAN_INVALID_PARAMETER;
    4552:	240a      	movs	r4, #10
	if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    4554:	2808      	cmp	r0, #8
    4556:	d90e      	bls.n	4576 <LORAReg_InitAS+0x152>
	}
	
	if(!initialized)
    4558:	4b2a      	ldr	r3, [pc, #168]	; (4604 <LORAReg_InitAS+0x1e0>)
    455a:	781b      	ldrb	r3, [r3, #0]
    455c:	2b00      	cmp	r3, #0
    455e:	d102      	bne.n	4566 <LORAReg_InitAS+0x142>
	{
		initialized = true;
    4560:	2201      	movs	r2, #1
    4562:	4b28      	ldr	r3, [pc, #160]	; (4604 <LORAReg_InitAS+0x1e0>)
    4564:	701a      	strb	r2, [r3, #0]
	}

    LORAREG_InitGetAttrFnPtrsAS();	
    4566:	4b28      	ldr	r3, [pc, #160]	; (4608 <LORAReg_InitAS+0x1e4>)
    4568:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsAS();
    456a:	4b28      	ldr	r3, [pc, #160]	; (460c <LORAReg_InitAS+0x1e8>)
    456c:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsAS();
    456e:	4b28      	ldr	r3, [pc, #160]	; (4610 <LORAReg_InitAS+0x1ec>)
    4570:	4798      	blx	r3
	
#else
	result = UNSUPPORTED_BAND;
#endif
	return result;
}
    4572:	0020      	movs	r0, r4
    4574:	bd70      	pop	{r4, r5, r6, pc}
{
	uint8_t i;

	memset (RegParams.pChParams, 0, sizeof(DefaultChannels923) );
	memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels923) );
	memcpy (RegParams.pChParams, DefaultChannels923, sizeof(DefaultChannels923));
    4576:	001c      	movs	r4, r3
    4578:	0018      	movs	r0, r3
    457a:	3083      	adds	r0, #131	; 0x83
    457c:	3a2a      	subs	r2, #42	; 0x2a
    457e:	4925      	ldr	r1, [pc, #148]	; (4614 <LORAReg_InitAS+0x1f0>)
    4580:	4d25      	ldr	r5, [pc, #148]	; (4618 <LORAReg_InitAS+0x1f4>)
    4582:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels923, sizeof(AdvChannels923));
    4584:	0020      	movs	r0, r4
    4586:	30a3      	adds	r0, #163	; 0xa3
    4588:	2218      	movs	r2, #24
    458a:	4924      	ldr	r1, [pc, #144]	; (461c <LORAReg_InitAS+0x1f8>)
    458c:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParams923) );
	memcpy (RegParams.pSubBandParams, SubBandParams923, sizeof(SubBandParams923) );
    458e:	0020      	movs	r0, r4
    4590:	30c4      	adds	r0, #196	; 0xc4
    4592:	30ff      	adds	r0, #255	; 0xff
    4594:	220c      	movs	r2, #12
    4596:	4922      	ldr	r1, [pc, #136]	; (4620 <LORAReg_InitAS+0x1fc>)
    4598:	47a8      	blx	r5
	memset(RegParams.cmnParams.paramsType2.subBandDutyCycle,0,sizeof(SubBandDutyCycle923));
	memcpy(RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycle923,sizeof(SubBandDutyCycle923));
    459a:	0020      	movs	r0, r4
    459c:	30ae      	adds	r0, #174	; 0xae
    459e:	30ff      	adds	r0, #255	; 0xff
    45a0:	2202      	movs	r2, #2
    45a2:	4920      	ldr	r1, [pc, #128]	; (4624 <LORAReg_InitAS+0x200>)
    45a4:	47a8      	blx	r5
    45a6:	2302      	movs	r3, #2
	for (i = 2; i < RegParams.maxChannels; i++)
	{
		RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    45a8:	4814      	ldr	r0, [pc, #80]	; (45fc <LORAReg_InitAS+0x1d8>)
    45aa:	25ff      	movs	r5, #255	; 0xff
	for (i = 2; i < RegParams.maxChannels; i++)
    45ac:	242a      	movs	r4, #42	; 0x2a
		RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    45ae:	7902      	ldrb	r2, [r0, #4]
    45b0:	7941      	ldrb	r1, [r0, #5]
    45b2:	0209      	lsls	r1, r1, #8
    45b4:	4311      	orrs	r1, r2
    45b6:	7982      	ldrb	r2, [r0, #6]
    45b8:	0412      	lsls	r2, r2, #16
    45ba:	4311      	orrs	r1, r2
    45bc:	79c2      	ldrb	r2, [r0, #7]
    45be:	0612      	lsls	r2, r2, #24
    45c0:	430a      	orrs	r2, r1
    45c2:	0059      	lsls	r1, r3, #1
    45c4:	188a      	adds	r2, r1, r2
    45c6:	7055      	strb	r5, [r2, #1]
	for (i = 2; i < RegParams.maxChannels; i++)
    45c8:	3301      	adds	r3, #1
    45ca:	b2db      	uxtb	r3, r3
    45cc:	5702      	ldrsb	r2, [r0, r4]
    45ce:	4293      	cmp	r3, r2
    45d0:	dbed      	blt.n	45ae <LORAReg_InitAS+0x18a>
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = DEFAULT_EIRP_AS;
    45d2:	4a0a      	ldr	r2, [pc, #40]	; (45fc <LORAReg_InitAS+0x1d8>)
    45d4:	2110      	movs	r1, #16
    45d6:	23c2      	movs	r3, #194	; 0xc2
    45d8:	33ff      	adds	r3, #255	; 0xff
    45da:	54d1      	strb	r1, [r2, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsAS, sizeof(DefaultDrParamsAS) );
    45dc:	7810      	ldrb	r0, [r2, #0]
    45de:	7853      	ldrb	r3, [r2, #1]
    45e0:	021b      	lsls	r3, r3, #8
    45e2:	4303      	orrs	r3, r0
    45e4:	7890      	ldrb	r0, [r2, #2]
    45e6:	0400      	lsls	r0, r0, #16
    45e8:	4303      	orrs	r3, r0
    45ea:	78d0      	ldrb	r0, [r2, #3]
    45ec:	0600      	lsls	r0, r0, #24
    45ee:	4318      	orrs	r0, r3
    45f0:	2240      	movs	r2, #64	; 0x40
    45f2:	490d      	ldr	r1, [pc, #52]	; (4628 <LORAReg_InitAS+0x204>)
    45f4:	4b08      	ldr	r3, [pc, #32]	; (4618 <LORAReg_InitAS+0x1f4>)
    45f6:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    45f8:	2408      	movs	r4, #8
    45fa:	e7ad      	b.n	4558 <LORAReg_InitAS+0x134>
    45fc:	20001220 	.word	0x20001220
    4600:	2000121c 	.word	0x2000121c
    4604:	20000b54 	.word	0x20000b54
    4608:	00008521 	.word	0x00008521
    460c:	00008c51 	.word	0x00008c51
    4610:	00008f25 	.word	0x00008f25
    4614:	00019d24 	.word	0x00019d24
    4618:	0001516d 	.word	0x0001516d
    461c:	00019d0c 	.word	0x00019d0c
    4620:	00019d6c 	.word	0x00019d6c
    4624:	00019d68 	.word	0x00019d68
    4628:	00019d28 	.word	0x00019d28

0000462c <LORAReg_InitAU>:


/****************************** FUNCTIONS *************************************/

StackRetStatus_t LORAReg_InitAU(IsmBand_t ismBand)
{
    462c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    462e:	46de      	mov	lr, fp
    4630:	4657      	mov	r7, sl
    4632:	464e      	mov	r6, r9
    4634:	4645      	mov	r5, r8
    4636:	b5e0      	push	{r5, r6, r7, lr}
    4638:	4683      	mov	fp, r0
    StackRetStatus_t result = LORAWAN_SUCCESS;
#if(AU_BAND == 1)
    RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_AU;
    463a:	4c6a      	ldr	r4, [pc, #424]	; (47e4 <LORAReg_InitAU+0x1b8>)
    463c:	2103      	movs	r1, #3
    463e:	2326      	movs	r3, #38	; 0x26
    4640:	54e1      	strb	r1, [r4, r3]
	RegParams.maxChannels = MAX_CHANNELS_AU_NA;
    4642:	3145      	adds	r1, #69	; 0x45
    4644:	3304      	adds	r3, #4
    4646:	54e1      	strb	r1, [r4, r3]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_AU;
    4648:	3941      	subs	r1, #65	; 0x41
    464a:	3b03      	subs	r3, #3
    464c:	54e1      	strb	r1, [r4, r3]
	RegParams.pChParams = &RegParams.cmnParams.paramsType1.chParams[0];
    464e:	0020      	movs	r0, r4
    4650:	30b3      	adds	r0, #179	; 0xb3
    4652:	2500      	movs	r5, #0
    4654:	7120      	strb	r0, [r4, #4]
    4656:	0a03      	lsrs	r3, r0, #8
    4658:	7163      	strb	r3, [r4, #5]
    465a:	0c03      	lsrs	r3, r0, #16
    465c:	71a3      	strb	r3, [r4, #6]
    465e:	0e03      	lsrs	r3, r0, #24
    4660:	71e3      	strb	r3, [r4, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType1.DRParams[0];
    4662:	0026      	movs	r6, r4
    4664:	3643      	adds	r6, #67	; 0x43
    4666:	7026      	strb	r6, [r4, #0]
    4668:	0a33      	lsrs	r3, r6, #8
    466a:	7063      	strb	r3, [r4, #1]
    466c:	0c33      	lsrs	r3, r6, #16
    466e:	70a3      	strb	r3, [r4, #2]
    4670:	0e33      	lsrs	r3, r6, #24
    4672:	70e3      	strb	r3, [r4, #3]
	RegParams.MinNewChIndex = 0xFF;
    4674:	2321      	movs	r3, #33	; 0x21
    4676:	31f8      	adds	r1, #248	; 0xf8
    4678:	54e1      	strb	r1, [r4, r3]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_AU;
    467a:	3b19      	subs	r3, #25
    467c:	2708      	movs	r7, #8
    467e:	39dd      	subs	r1, #221	; 0xdd
    4680:	5463      	strb	r3, [r4, r1]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_AU;
    4682:	3101      	adds	r1, #1
    4684:	5463      	strb	r3, [r4, r1]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_AU;
    4686:	2260      	movs	r2, #96	; 0x60
    4688:	4252      	negs	r2, r2
    468a:	4694      	mov	ip, r2
    468c:	7722      	strb	r2, [r4, #28]
    468e:	314d      	adds	r1, #77	; 0x4d
    4690:	7761      	strb	r1, [r4, #29]
    4692:	77a7      	strb	r7, [r4, #30]
    4694:	3939      	subs	r1, #57	; 0x39
    4696:	77e1      	strb	r1, [r4, #31]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_AU;
    4698:	2220      	movs	r2, #32
    469a:	3101      	adds	r1, #1
    469c:	54a1      	strb	r1, [r4, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_AU;
    469e:	3a1a      	subs	r2, #26
    46a0:	4690      	mov	r8, r2
    46a2:	321e      	adds	r2, #30
    46a4:	4641      	mov	r1, r8
    46a6:	54a1      	strb	r1, [r4, r2]
	RegParams.maxDataRate = MAC_DATARATE_MAX_AU;
    46a8:	3201      	adds	r2, #1
    46aa:	54a5      	strb	r5, [r4, r2]
	RegParams.cmnParams.paramsType1.Max_125khzChan = MAX_CHANNELS_BANDWIDTH_125_AU_NA;
    46ac:	321b      	adds	r2, #27
    46ae:	4692      	mov	sl, r2
    46b0:	2254      	movs	r2, #84	; 0x54
    46b2:	32ff      	adds	r2, #255	; 0xff
    46b4:	4651      	mov	r1, sl
    46b6:	54a1      	strb	r1, [r4, r2]
	RegParams.cmnParams.paramsType1.Max_500khzChan = MAX_CHANNELS_BANDWIDTH_500_AU_NA;
    46b8:	3201      	adds	r2, #1
    46ba:	54a3      	strb	r3, [r4, r2]
	RegParams.cmnParams.paramsType1.minTxDR = DR0;
    46bc:	2250      	movs	r2, #80	; 0x50
    46be:	32ff      	adds	r2, #255	; 0xff
    46c0:	54a5      	strb	r5, [r4, r2]
	RegParams.cmnParams.paramsType1.maxTxDR = DR6;
    46c2:	3201      	adds	r2, #1
    46c4:	4641      	mov	r1, r8
    46c6:	54a1      	strb	r1, [r4, r2]
	RegParams.cmnParams.paramsType1.minRxDR = DR8;
    46c8:	2252      	movs	r2, #82	; 0x52
    46ca:	32ff      	adds	r2, #255	; 0xff
    46cc:	54a3      	strb	r3, [r4, r2]
	RegParams.cmnParams.paramsType1.maxRxDR = DR13;
    46ce:	3a45      	subs	r2, #69	; 0x45
    46d0:	3aff      	subs	r2, #255	; 0xff
    46d2:	4691      	mov	r9, r2
    46d4:	3246      	adds	r2, #70	; 0x46
    46d6:	32ff      	adds	r2, #255	; 0xff
    46d8:	4649      	mov	r1, r9
    46da:	54a1      	strb	r1, [r4, r2]
	RegParams.cmnParams.paramsType1.RxParamWindowOffset1 = 8;
    46dc:	2256      	movs	r2, #86	; 0x56
    46de:	32ff      	adds	r2, #255	; 0xff
    46e0:	54a3      	strb	r3, [r4, r2]
	RegParams.cmnParams.paramsType1.UpStreamCh0Freq = UPSTREAM_CH0_AU;
    46e2:	2300      	movs	r3, #0
    46e4:	4698      	mov	r8, r3
    46e6:	2344      	movs	r3, #68	; 0x44
    46e8:	33ff      	adds	r3, #255	; 0xff
    46ea:	4642      	mov	r2, r8
    46ec:	54e2      	strb	r2, [r4, r3]
    46ee:	0023      	movs	r3, r4
    46f0:	3344      	adds	r3, #68	; 0x44
    46f2:	33ff      	adds	r3, #255	; 0xff
    46f4:	2228      	movs	r2, #40	; 0x28
    46f6:	4252      	negs	r2, r2
    46f8:	705a      	strb	r2, [r3, #1]
    46fa:	2274      	movs	r2, #116	; 0x74
    46fc:	4252      	negs	r2, r2
    46fe:	709a      	strb	r2, [r3, #2]
    4700:	2236      	movs	r2, #54	; 0x36
    4702:	70da      	strb	r2, [r3, #3]
	RegParams.cmnParams.paramsType1.UpStreamCh64Freq = UPSTREAM_CH64_AU;
    4704:	2360      	movs	r3, #96	; 0x60
    4706:	4698      	mov	r8, r3
    4708:	2348      	movs	r3, #72	; 0x48
    470a:	33ff      	adds	r3, #255	; 0xff
    470c:	4642      	mov	r2, r8
    470e:	54e2      	strb	r2, [r4, r3]
    4710:	0023      	movs	r3, r4
    4712:	3348      	adds	r3, #72	; 0x48
    4714:	33ff      	adds	r3, #255	; 0xff
    4716:	227a      	movs	r2, #122	; 0x7a
    4718:	4252      	negs	r2, r2
    471a:	705a      	strb	r2, [r3, #1]
    471c:	2269      	movs	r2, #105	; 0x69
    471e:	4252      	negs	r2, r2
    4720:	709a      	strb	r2, [r3, #2]
    4722:	2236      	movs	r2, #54	; 0x36
    4724:	70da      	strb	r2, [r3, #3]
	RegParams.cmnParams.paramsType1.DownStreamCh0Freq = DOWNSTREAM_CH0_AU;
    4726:	234c      	movs	r3, #76	; 0x4c
    4728:	33ff      	adds	r3, #255	; 0xff
    472a:	4662      	mov	r2, ip
    472c:	54e2      	strb	r2, [r4, r3]
    472e:	0023      	movs	r3, r4
    4730:	334c      	adds	r3, #76	; 0x4c
    4732:	33ff      	adds	r3, #255	; 0xff
    4734:	2270      	movs	r2, #112	; 0x70
    4736:	705a      	strb	r2, [r3, #1]
    4738:	709f      	strb	r7, [r3, #2]
    473a:	2737      	movs	r7, #55	; 0x37
    473c:	70df      	strb	r7, [r3, #3]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    473e:	0023      	movs	r3, r4
    4740:	3334      	adds	r3, #52	; 0x34
    4742:	7523      	strb	r3, [r4, #20]
    4744:	0a1f      	lsrs	r7, r3, #8
    4746:	7567      	strb	r7, [r4, #21]
    4748:	0c1f      	lsrs	r7, r3, #16
    474a:	75a7      	strb	r7, [r4, #22]
    474c:	0e1b      	lsrs	r3, r3, #24
    474e:	75e3      	strb	r3, [r4, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    4750:	0023      	movs	r3, r4
    4752:	333d      	adds	r3, #61	; 0x3d
    4754:	7623      	strb	r3, [r4, #24]
    4756:	0a1f      	lsrs	r7, r3, #8
    4758:	7667      	strb	r7, [r4, #25]
    475a:	0c1f      	lsrs	r7, r3, #16
    475c:	76a7      	strb	r7, [r4, #26]
    475e:	0e1b      	lsrs	r3, r3, #24
    4760:	76e3      	strb	r3, [r4, #27]
    RegParams.Rx1DrOffset = 5;
    4762:	2705      	movs	r7, #5
    4764:	232c      	movs	r3, #44	; 0x2c
    4766:	54e7      	strb	r7, [r4, r3]
	RegParams.maxTxPwrIndx = 10;
    4768:	3705      	adds	r7, #5
    476a:	3301      	adds	r3, #1
    476c:	54e7      	strb	r7, [r4, r3]
	RegParams.maxTxPwr = DEFAULT_EIRP_AU;
    476e:	3714      	adds	r7, #20
    4770:	3b05      	subs	r3, #5
    4772:	54e7      	strb	r7, [r4, r3]
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    4774:	2358      	movs	r3, #88	; 0x58
    4776:	33ff      	adds	r3, #255	; 0xff
    4778:	54e5      	strb	r5, [r4, r3]

	RegParams.pJoinBackoffTimer->timerId = regTimerId[0];	
    477a:	4b1b      	ldr	r3, [pc, #108]	; (47e8 <LORAReg_InitAU+0x1bc>)
    477c:	781a      	ldrb	r2, [r3, #0]
    477e:	371f      	adds	r7, #31
    4780:	55e2      	strb	r2, [r4, r7]
	RegParams.pJoinDutyCycleTimer->timerId = regTimerId[1];
    4782:	785f      	ldrb	r7, [r3, #1]
    4784:	233c      	movs	r3, #60	; 0x3c
    4786:	54e7      	strb	r7, [r4, r3]
	RegParams.pJoinDutyCycleTimer->remainingtime = 0;
    4788:	2300      	movs	r3, #0
    478a:	2238      	movs	r2, #56	; 0x38
    478c:	54a3      	strb	r3, [r4, r2]
    478e:	2100      	movs	r1, #0
    4790:	3339      	adds	r3, #57	; 0x39
    4792:	54e1      	strb	r1, [r4, r3]
    4794:	3301      	adds	r3, #1
    4796:	54e1      	strb	r1, [r4, r3]
    4798:	3301      	adds	r3, #1
    479a:	54e1      	strb	r1, [r4, r3]
	RegParams.joinbccount =0;
    479c:	3307      	adds	r3, #7
    479e:	54e5      	strb	r5, [r4, r3]
	RegParams.joinDutyCycleTimeout =0;
    47a0:	0023      	movs	r3, r4
    47a2:	333e      	adds	r3, #62	; 0x3e
    47a4:	7019      	strb	r1, [r3, #0]
    47a6:	7059      	strb	r1, [r3, #1]
    47a8:	7099      	strb	r1, [r3, #2]
    47aa:	70d9      	strb	r1, [r3, #3]
	
	RegParams.band = ismBand;
    47ac:	232e      	movs	r3, #46	; 0x2e
    47ae:	465a      	mov	r2, fp
    47b0:	54e2      	strb	r2, [r4, r3]
 */
#if(AU_BAND == 1)
static void InitDefault915ChannelsAU (void)
{
	memset (RegParams.pChParams, 0, sizeof(DefaultChannels915AU) );
	memcpy (RegParams.pChParams, DefaultChannels915AU, sizeof(DefaultChannels915AU) );
    47b2:	2290      	movs	r2, #144	; 0x90
    47b4:	490d      	ldr	r1, [pc, #52]	; (47ec <LORAReg_InitAU+0x1c0>)
    47b6:	4f0e      	ldr	r7, [pc, #56]	; (47f0 <LORAReg_InitAU+0x1c4>)
    47b8:	47b8      	blx	r7
	memcpy (RegParams.pDrParams, DefaultDrParamsAU, sizeof(DefaultDrParamsAU) );
    47ba:	2270      	movs	r2, #112	; 0x70
    47bc:	490d      	ldr	r1, [pc, #52]	; (47f4 <LORAReg_InitAU+0x1c8>)
    47be:	0030      	movs	r0, r6
    47c0:	47b8      	blx	r7
	RegParams.cmnParams.paramsType1.alternativeChannel = 0;
    47c2:	23ab      	movs	r3, #171	; 0xab
    47c4:	005b      	lsls	r3, r3, #1
    47c6:	54e5      	strb	r5, [r4, r3]
    LORAREG_InitGetAttrFnPtrsAU();
    47c8:	4b0b      	ldr	r3, [pc, #44]	; (47f8 <LORAReg_InitAU+0x1cc>)
    47ca:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsAU();
    47cc:	4b0b      	ldr	r3, [pc, #44]	; (47fc <LORAReg_InitAU+0x1d0>)
    47ce:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsAU();
    47d0:	4b0b      	ldr	r3, [pc, #44]	; (4800 <LORAReg_InitAU+0x1d4>)
    47d2:	4798      	blx	r3
}
    47d4:	2008      	movs	r0, #8
    47d6:	bc3c      	pop	{r2, r3, r4, r5}
    47d8:	4690      	mov	r8, r2
    47da:	4699      	mov	r9, r3
    47dc:	46a2      	mov	sl, r4
    47de:	46ab      	mov	fp, r5
    47e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    47e2:	46c0      	nop			; (mov r8, r8)
    47e4:	20001220 	.word	0x20001220
    47e8:	2000121c 	.word	0x2000121c
    47ec:	00019d78 	.word	0x00019d78
    47f0:	0001516d 	.word	0x0001516d
    47f4:	00019e08 	.word	0x00019e08
    47f8:	00008669 	.word	0x00008669
    47fc:	00008cbd 	.word	0x00008cbd
    4800:	00008f99 	.word	0x00008f99

00004804 <LORAReg_InitEU>:
#endif

/****************************** FUNCTIONS *************************************/

StackRetStatus_t LORAReg_InitEU(IsmBand_t ismBand)
{
    4804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	StackRetStatus_t status = LORAWAN_SUCCESS;
#if (EU_BAND == 1)
	
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_EU;
    4806:	4b8a      	ldr	r3, [pc, #552]	; (4a30 <LORAReg_InitEU+0x22c>)
    4808:	2103      	movs	r1, #3
    480a:	2226      	movs	r2, #38	; 0x26
    480c:	5499      	strb	r1, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_T2;
    480e:	2510      	movs	r5, #16
    4810:	3204      	adds	r2, #4
    4812:	549d      	strb	r5, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_EU;
    4814:	2406      	movs	r4, #6
    4816:	3a01      	subs	r2, #1
    4818:	549c      	strb	r4, [r3, r2]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_EU;
    481a:	3c05      	subs	r4, #5
    481c:	3a02      	subs	r2, #2
    481e:	549c      	strb	r4, [r3, r2]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    4820:	001a      	movs	r2, r3
    4822:	3283      	adds	r2, #131	; 0x83
    4824:	2400      	movs	r4, #0
    4826:	711a      	strb	r2, [r3, #4]
    4828:	0a16      	lsrs	r6, r2, #8
    482a:	715e      	strb	r6, [r3, #5]
    482c:	0c16      	lsrs	r6, r2, #16
    482e:	719e      	strb	r6, [r3, #6]
    4830:	0e12      	lsrs	r2, r2, #24
    4832:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    4834:	001a      	movs	r2, r3
    4836:	3243      	adds	r2, #67	; 0x43
    4838:	701a      	strb	r2, [r3, #0]
    483a:	0a16      	lsrs	r6, r2, #8
    483c:	705e      	strb	r6, [r3, #1]
    483e:	0c16      	lsrs	r6, r2, #16
    4840:	709e      	strb	r6, [r3, #2]
    4842:	0e12      	lsrs	r2, r2, #24
    4844:	70da      	strb	r2, [r3, #3]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    4846:	001a      	movs	r2, r3
    4848:	32c4      	adds	r2, #196	; 0xc4
    484a:	32ff      	adds	r2, #255	; 0xff
    484c:	731a      	strb	r2, [r3, #12]
    484e:	0a16      	lsrs	r6, r2, #8
    4850:	735e      	strb	r6, [r3, #13]
    4852:	0c16      	lsrs	r6, r2, #16
    4854:	739e      	strb	r6, [r3, #14]
    4856:	0e12      	lsrs	r2, r2, #24
    4858:	73da      	strb	r2, [r3, #15]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    485a:	001a      	movs	r2, r3
    485c:	32a3      	adds	r2, #163	; 0xa3
    485e:	721a      	strb	r2, [r3, #8]
    4860:	0a16      	lsrs	r6, r2, #8
    4862:	725e      	strb	r6, [r3, #9]
    4864:	0c16      	lsrs	r6, r2, #16
    4866:	729e      	strb	r6, [r3, #10]
    4868:	0e12      	lsrs	r2, r2, #24
    486a:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    486c:	001a      	movs	r2, r3
    486e:	3264      	adds	r2, #100	; 0x64
    4870:	32ff      	adds	r2, #255	; 0xff
    4872:	741a      	strb	r2, [r3, #16]
    4874:	0a16      	lsrs	r6, r2, #8
    4876:	745e      	strb	r6, [r3, #17]
    4878:	0c16      	lsrs	r6, r2, #16
    487a:	749e      	strb	r6, [r3, #18]
    487c:	0e12      	lsrs	r2, r2, #24
    487e:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    4880:	001a      	movs	r2, r3
    4882:	3234      	adds	r2, #52	; 0x34
    4884:	751a      	strb	r2, [r3, #20]
    4886:	0a16      	lsrs	r6, r2, #8
    4888:	755e      	strb	r6, [r3, #21]
    488a:	0c16      	lsrs	r6, r2, #16
    488c:	759e      	strb	r6, [r3, #22]
    488e:	0e12      	lsrs	r2, r2, #24
    4890:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    4892:	001a      	movs	r2, r3
    4894:	323d      	adds	r2, #61	; 0x3d
    4896:	761a      	strb	r2, [r3, #24]
    4898:	0a16      	lsrs	r6, r2, #8
    489a:	765e      	strb	r6, [r3, #25]
    489c:	0c16      	lsrs	r6, r2, #16
    489e:	769e      	strb	r6, [r3, #26]
    48a0:	0e12      	lsrs	r2, r2, #24
    48a2:	76da      	strb	r2, [r3, #27]
	RegParams.MinNewChIndex = 3;
    48a4:	2221      	movs	r2, #33	; 0x21
    48a6:	5499      	strb	r1, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_EU;
    48a8:	2622      	movs	r6, #34	; 0x22
    48aa:	3a01      	subs	r2, #1
    48ac:	549e      	strb	r6, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_EU;
    48ae:	3a19      	subs	r2, #25
    48b0:	3602      	adds	r6, #2
    48b2:	559a      	strb	r2, [r3, r6]
	RegParams.maxDataRate = MAC_DATARATE_MAX_EU;
    48b4:	3601      	adds	r6, #1
    48b6:	559c      	strb	r4, [r3, r6]
	RegParams.Rx1DrOffset = 5;
    48b8:	2705      	movs	r7, #5
    48ba:	3607      	adds	r6, #7
    48bc:	559f      	strb	r7, [r3, r6]
	RegParams.maxTxPwrIndx = 7;
    48be:	3601      	adds	r6, #1
    48c0:	559a      	strb	r2, [r3, r6]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    48c2:	32ba      	adds	r2, #186	; 0xba
    48c4:	32ff      	adds	r2, #255	; 0xff
    48c6:	5499      	strb	r1, [r3, r2]
	RegParams.maxTxPwr = DEFAULT_EIRP_EU;
    48c8:	3a99      	subs	r2, #153	; 0x99
    48ca:	3aff      	subs	r2, #255	; 0xff
    48cc:	549d      	strb	r5, [r3, r2]
	RegParams.pDutyCycleTimer->timerId = regTimerId[0];
    48ce:	4a59      	ldr	r2, [pc, #356]	; (4a34 <LORAReg_InitEU+0x230>)
    48d0:	7815      	ldrb	r5, [r2, #0]
    48d2:	2168      	movs	r1, #104	; 0x68
    48d4:	31ff      	adds	r1, #255	; 0xff
    48d6:	545d      	strb	r5, [r3, r1]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    48d8:	7855      	ldrb	r5, [r2, #1]
    48da:	392b      	subs	r1, #43	; 0x2b
    48dc:	39ff      	subs	r1, #255	; 0xff
    48de:	545d      	strb	r5, [r3, r1]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[2];
    48e0:	7891      	ldrb	r1, [r2, #2]
    48e2:	223c      	movs	r2, #60	; 0x3c
    48e4:	5499      	strb	r1, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    48e6:	2100      	movs	r1, #0
    48e8:	3a04      	subs	r2, #4
    48ea:	5499      	strb	r1, [r3, r2]
    48ec:	3201      	adds	r2, #1
    48ee:	5499      	strb	r1, [r3, r2]
    48f0:	3201      	adds	r2, #1
    48f2:	5499      	strb	r1, [r3, r2]
    48f4:	3201      	adds	r2, #1
    48f6:	5499      	strb	r1, [r3, r2]
	RegParams.joinbccount =0;
    48f8:	3207      	adds	r2, #7
    48fa:	549c      	strb	r4, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    48fc:	001a      	movs	r2, r3
    48fe:	323e      	adds	r2, #62	; 0x3e
    4900:	7011      	strb	r1, [r2, #0]
    4902:	7051      	strb	r1, [r2, #1]
    4904:	7091      	strb	r1, [r2, #2]
    4906:	70d1      	strb	r1, [r2, #3]
	
	RegParams.band = ismBand;
    4908:	222e      	movs	r2, #46	; 0x2e
    490a:	5498      	strb	r0, [r3, r2]
	
	if(ismBand == ISM_EU868)
    490c:	2800      	cmp	r0, #0
    490e:	d004      	beq.n	491a <LORAReg_InitEU+0x116>
		RegParams.DefRx2Freq = MAC_433_RX2_WINDOW_FREQ;

	}
	else
	{
		return UNSUPPORTED_BAND;
    4910:	23c6      	movs	r3, #198	; 0xc6
	else if(ismBand == ISM_EU433)
    4912:	2801      	cmp	r0, #1
    4914:	d054      	beq.n	49c0 <LORAReg_InitEU+0x1bc>
	LORAREG_InitSetAttrFnPtrsEU();
#else
    status = UNSUPPORTED_BAND;
#endif
	return status;
}
    4916:	0018      	movs	r0, r3
    4918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
static void InitDefault868Channels (void)
{
    uint8_t i;

    memset (RegParams.pChParams, 0, sizeof(DefaultChannels868) );
    memcpy (RegParams.pChParams, DefaultChannels868, sizeof(DefaultChannels868) );
    491a:	001c      	movs	r4, r3
    491c:	0018      	movs	r0, r3
    491e:	3083      	adds	r0, #131	; 0x83
    4920:	3a28      	subs	r2, #40	; 0x28
    4922:	4945      	ldr	r1, [pc, #276]	; (4a38 <LORAReg_InitEU+0x234>)
    4924:	4d45      	ldr	r5, [pc, #276]	; (4a3c <LORAReg_InitEU+0x238>)
    4926:	47a8      	blx	r5
    memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels868) );
    memcpy (RegParams.pOtherChParams, AdvChannels868, sizeof(AdvChannels868) );	
    4928:	0020      	movs	r0, r4
    492a:	30a3      	adds	r0, #163	; 0xa3
    492c:	2224      	movs	r2, #36	; 0x24
    492e:	4944      	ldr	r1, [pc, #272]	; (4a40 <LORAReg_InitEU+0x23c>)
    4930:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParams868) );
	memcpy (RegParams.pSubBandParams, SubBandParams868, sizeof(SubBandParams868) );
    4932:	0020      	movs	r0, r4
    4934:	30c4      	adds	r0, #196	; 0xc4
    4936:	30ff      	adds	r0, #255	; 0xff
    4938:	2248      	movs	r2, #72	; 0x48
    493a:	4942      	ldr	r1, [pc, #264]	; (4a44 <LORAReg_InitEU+0x240>)
    493c:	47a8      	blx	r5
	memset(RegParams.cmnParams.paramsType2.subBandDutyCycle,0,sizeof(SubBandDutyCycle868));
	memcpy(RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycle868,sizeof(SubBandDutyCycle868));
    493e:	0020      	movs	r0, r4
    4940:	30ae      	adds	r0, #174	; 0xae
    4942:	30ff      	adds	r0, #255	; 0xff
    4944:	220c      	movs	r2, #12
    4946:	4940      	ldr	r1, [pc, #256]	; (4a48 <LORAReg_InitEU+0x244>)
    4948:	47a8      	blx	r5
    494a:	2303      	movs	r3, #3
    for (i = 3; i < RegParams.maxChannels; i++)
    {
        // for undefined channels the duty cycle should be a very big value, and the data range a not-valid value
        //duty cycle 0 means no duty cycle limitation, the bigger the duty cycle value, the greater the limitation
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    494c:	4838      	ldr	r0, [pc, #224]	; (4a30 <LORAReg_InitEU+0x22c>)
    494e:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    4950:	242a      	movs	r4, #42	; 0x2a
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    4952:	7902      	ldrb	r2, [r0, #4]
    4954:	7941      	ldrb	r1, [r0, #5]
    4956:	0209      	lsls	r1, r1, #8
    4958:	4311      	orrs	r1, r2
    495a:	7982      	ldrb	r2, [r0, #6]
    495c:	0412      	lsls	r2, r2, #16
    495e:	4311      	orrs	r1, r2
    4960:	79c2      	ldrb	r2, [r0, #7]
    4962:	0612      	lsls	r2, r2, #24
    4964:	430a      	orrs	r2, r1
    4966:	0059      	lsls	r1, r3, #1
    4968:	188a      	adds	r2, r1, r2
    496a:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    496c:	3301      	adds	r3, #1
    496e:	b2db      	uxtb	r3, r3
    4970:	5702      	ldrsb	r2, [r0, r4]
    4972:	4293      	cmp	r3, r2
    4974:	dbed      	blt.n	4952 <LORAReg_InitEU+0x14e>
		RegParams.DefRx1DataRate = MAC_868_RX1_WINDOW_DATARATE;
    4976:	4b2e      	ldr	r3, [pc, #184]	; (4a30 <LORAReg_InitEU+0x22c>)
    4978:	2200      	movs	r2, #0
    497a:	2122      	movs	r1, #34	; 0x22
    497c:	545a      	strb	r2, [r3, r1]
		RegParams.DefRx2DataRate = MAC_868_RX2_WINDOW_DATARATE;
    497e:	3101      	adds	r1, #1
    4980:	545a      	strb	r2, [r3, r1]
		RegParams.DefRx2Freq = MAC_868_RX2_WINDOW_FREQ;
    4982:	3208      	adds	r2, #8
    4984:	771a      	strb	r2, [r3, #28]
    4986:	3a22      	subs	r2, #34	; 0x22
    4988:	775a      	strb	r2, [r3, #29]
    498a:	3a13      	subs	r2, #19
    498c:	779a      	strb	r2, [r3, #30]
    498e:	3260      	adds	r2, #96	; 0x60
    4990:	77da      	strb	r2, [r3, #31]
	memcpy (RegParams.pDrParams, DefaultDrparamsEU, sizeof(DefaultDrparamsEU) );
    4992:	4a27      	ldr	r2, [pc, #156]	; (4a30 <LORAReg_InitEU+0x22c>)
    4994:	7810      	ldrb	r0, [r2, #0]
    4996:	7853      	ldrb	r3, [r2, #1]
    4998:	021b      	lsls	r3, r3, #8
    499a:	4303      	orrs	r3, r0
    499c:	7890      	ldrb	r0, [r2, #2]
    499e:	0400      	lsls	r0, r0, #16
    49a0:	4303      	orrs	r3, r0
    49a2:	78d0      	ldrb	r0, [r2, #3]
    49a4:	0600      	lsls	r0, r0, #24
    49a6:	4318      	orrs	r0, r3
    49a8:	2240      	movs	r2, #64	; 0x40
    49aa:	4928      	ldr	r1, [pc, #160]	; (4a4c <LORAReg_InitEU+0x248>)
    49ac:	4b23      	ldr	r3, [pc, #140]	; (4a3c <LORAReg_InitEU+0x238>)
    49ae:	4798      	blx	r3
    LORAREG_InitGetAttrFnPtrsEU();
    49b0:	4b27      	ldr	r3, [pc, #156]	; (4a50 <LORAReg_InitEU+0x24c>)
    49b2:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsEU();
    49b4:	4b27      	ldr	r3, [pc, #156]	; (4a54 <LORAReg_InitEU+0x250>)
    49b6:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsEU();
    49b8:	4b27      	ldr	r3, [pc, #156]	; (4a58 <LORAReg_InitEU+0x254>)
    49ba:	4798      	blx	r3
	return status;
    49bc:	2308      	movs	r3, #8
    49be:	e7aa      	b.n	4916 <LORAReg_InitEU+0x112>
static void InitDefault433Channels (void)
{
    uint8_t i;

    memset (RegParams.pChParams, 0, sizeof(DefaultChannels433) );
    memcpy (RegParams.pChParams, DefaultChannels433, sizeof(DefaultChannels433) );
    49c0:	4c1b      	ldr	r4, [pc, #108]	; (4a30 <LORAReg_InitEU+0x22c>)
    49c2:	0020      	movs	r0, r4
    49c4:	3083      	adds	r0, #131	; 0x83
    49c6:	2206      	movs	r2, #6
    49c8:	4924      	ldr	r1, [pc, #144]	; (4a5c <LORAReg_InitEU+0x258>)
    49ca:	4d1c      	ldr	r5, [pc, #112]	; (4a3c <LORAReg_InitEU+0x238>)
    49cc:	47a8      	blx	r5
    memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels433) );
    memcpy (RegParams.pOtherChParams, AdvChannels433, sizeof(AdvChannels433) );
    49ce:	0020      	movs	r0, r4
    49d0:	30a3      	adds	r0, #163	; 0xa3
    49d2:	2224      	movs	r2, #36	; 0x24
    49d4:	4922      	ldr	r1, [pc, #136]	; (4a60 <LORAReg_InitEU+0x25c>)
    49d6:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParams433) );
	memcpy (RegParams.pSubBandParams, SubBandParams433, sizeof(SubBandParams433) );	
    49d8:	0020      	movs	r0, r4
    49da:	30c4      	adds	r0, #196	; 0xc4
    49dc:	30ff      	adds	r0, #255	; 0xff
    49de:	220c      	movs	r2, #12
    49e0:	4920      	ldr	r1, [pc, #128]	; (4a64 <LORAReg_InitEU+0x260>)
    49e2:	47a8      	blx	r5
    49e4:	2303      	movs	r3, #3
	
    for (i = 3; i < RegParams.maxChannels; i++)
    {
        // for undefined channels the duty cycle should be a very big value, and the data range a not-valid value
        //duty cycle 0 means no duty cycle limitation, the bigger the duty cycle value, the greater the limitation
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    49e6:	4812      	ldr	r0, [pc, #72]	; (4a30 <LORAReg_InitEU+0x22c>)
    49e8:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    49ea:	242a      	movs	r4, #42	; 0x2a
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    49ec:	7902      	ldrb	r2, [r0, #4]
    49ee:	7941      	ldrb	r1, [r0, #5]
    49f0:	0209      	lsls	r1, r1, #8
    49f2:	4311      	orrs	r1, r2
    49f4:	7982      	ldrb	r2, [r0, #6]
    49f6:	0412      	lsls	r2, r2, #16
    49f8:	4311      	orrs	r1, r2
    49fa:	79c2      	ldrb	r2, [r0, #7]
    49fc:	0612      	lsls	r2, r2, #24
    49fe:	430a      	orrs	r2, r1
    4a00:	0059      	lsls	r1, r3, #1
    4a02:	188a      	adds	r2, r1, r2
    4a04:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    4a06:	3301      	adds	r3, #1
    4a08:	b2db      	uxtb	r3, r3
    4a0a:	5702      	ldrsb	r2, [r0, r4]
    4a0c:	4293      	cmp	r3, r2
    4a0e:	dbed      	blt.n	49ec <LORAReg_InitEU+0x1e8>
		RegParams.DefRx1DataRate = MAC_433_RX1_WINDOW_DATARATE;
    4a10:	4b07      	ldr	r3, [pc, #28]	; (4a30 <LORAReg_InitEU+0x22c>)
    4a12:	2105      	movs	r1, #5
    4a14:	2222      	movs	r2, #34	; 0x22
    4a16:	5499      	strb	r1, [r3, r2]
		RegParams.DefRx2DataRate = MAC_433_RX2_WINDOW_DATARATE;
    4a18:	2100      	movs	r1, #0
    4a1a:	3201      	adds	r2, #1
    4a1c:	5499      	strb	r1, [r3, r2]
		RegParams.DefRx2Freq = MAC_433_RX2_WINDOW_FREQ;
    4a1e:	3a93      	subs	r2, #147	; 0x93
    4a20:	771a      	strb	r2, [r3, #28]
    4a22:	3241      	adds	r2, #65	; 0x41
    4a24:	775a      	strb	r2, [r3, #29]
    4a26:	3a02      	subs	r2, #2
    4a28:	779a      	strb	r2, [r3, #30]
    4a2a:	324a      	adds	r2, #74	; 0x4a
    4a2c:	77da      	strb	r2, [r3, #31]
    4a2e:	e7b0      	b.n	4992 <LORAReg_InitEU+0x18e>
    4a30:	20001220 	.word	0x20001220
    4a34:	2000121c 	.word	0x2000121c
    4a38:	00019ec8 	.word	0x00019ec8
    4a3c:	0001516d 	.word	0x0001516d
    4a40:	00019e9c 	.word	0x00019e9c
    4a44:	00019f28 	.word	0x00019f28
    4a48:	00019f10 	.word	0x00019f10
    4a4c:	00019ed0 	.word	0x00019ed0
    4a50:	000083d9 	.word	0x000083d9
    4a54:	00008be9 	.word	0x00008be9
    4a58:	00008eb9 	.word	0x00008eb9
    4a5c:	00019ec0 	.word	0x00019ec0
    4a60:	00019e78 	.word	0x00019e78
    4a64:	00019f1c 	.word	0x00019f1c

00004a68 <LORAReg_InitIN>:
#endif

/****************************** FUNCTIONS *************************************/

StackRetStatus_t LORAReg_InitIN(IsmBand_t ismBand)
{
    4a68:	b570      	push	{r4, r5, r6, lr}
	StackRetStatus_t result = LORAWAN_SUCCESS;
#if(IND_BAND == 1)
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_IN;
    4a6a:	4b5f      	ldr	r3, [pc, #380]	; (4be8 <LORAReg_InitIN+0x180>)
    4a6c:	2403      	movs	r4, #3
    4a6e:	2226      	movs	r2, #38	; 0x26
    4a70:	549c      	strb	r4, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_IN;
    4a72:	2110      	movs	r1, #16
    4a74:	3204      	adds	r2, #4
    4a76:	5499      	strb	r1, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_IN;
    4a78:	3a29      	subs	r2, #41	; 0x29
    4a7a:	3119      	adds	r1, #25
    4a7c:	545a      	strb	r2, [r3, r1]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_IN;
    4a7e:	3902      	subs	r1, #2
    4a80:	545a      	strb	r2, [r3, r1]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    4a82:	001a      	movs	r2, r3
    4a84:	3283      	adds	r2, #131	; 0x83
    4a86:	2100      	movs	r1, #0
    4a88:	711a      	strb	r2, [r3, #4]
    4a8a:	0a15      	lsrs	r5, r2, #8
    4a8c:	715d      	strb	r5, [r3, #5]
    4a8e:	0c15      	lsrs	r5, r2, #16
    4a90:	719d      	strb	r5, [r3, #6]
    4a92:	0e12      	lsrs	r2, r2, #24
    4a94:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    4a96:	001a      	movs	r2, r3
    4a98:	3243      	adds	r2, #67	; 0x43
    4a9a:	701a      	strb	r2, [r3, #0]
    4a9c:	0a15      	lsrs	r5, r2, #8
    4a9e:	705d      	strb	r5, [r3, #1]
    4aa0:	0c15      	lsrs	r5, r2, #16
    4aa2:	709d      	strb	r5, [r3, #2]
    4aa4:	0e12      	lsrs	r2, r2, #24
    4aa6:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    4aa8:	001a      	movs	r2, r3
    4aaa:	32a3      	adds	r2, #163	; 0xa3
    4aac:	721a      	strb	r2, [r3, #8]
    4aae:	0a15      	lsrs	r5, r2, #8
    4ab0:	725d      	strb	r5, [r3, #9]
    4ab2:	0c15      	lsrs	r5, r2, #16
    4ab4:	729d      	strb	r5, [r3, #10]
    4ab6:	0e12      	lsrs	r2, r2, #24
    4ab8:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    4aba:	001a      	movs	r2, r3
    4abc:	3264      	adds	r2, #100	; 0x64
    4abe:	32ff      	adds	r2, #255	; 0xff
    4ac0:	741a      	strb	r2, [r3, #16]
    4ac2:	0a15      	lsrs	r5, r2, #8
    4ac4:	745d      	strb	r5, [r3, #17]
    4ac6:	0c15      	lsrs	r5, r2, #16
    4ac8:	749d      	strb	r5, [r3, #18]
    4aca:	0e12      	lsrs	r2, r2, #24
    4acc:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    4ace:	001a      	movs	r2, r3
    4ad0:	3234      	adds	r2, #52	; 0x34
    4ad2:	751a      	strb	r2, [r3, #20]
    4ad4:	0a15      	lsrs	r5, r2, #8
    4ad6:	755d      	strb	r5, [r3, #21]
    4ad8:	0c15      	lsrs	r5, r2, #16
    4ada:	759d      	strb	r5, [r3, #22]
    4adc:	0e12      	lsrs	r2, r2, #24
    4ade:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    4ae0:	001a      	movs	r2, r3
    4ae2:	323d      	adds	r2, #61	; 0x3d
    4ae4:	761a      	strb	r2, [r3, #24]
    4ae6:	0a15      	lsrs	r5, r2, #8
    4ae8:	765d      	strb	r5, [r3, #25]
    4aea:	0c15      	lsrs	r5, r2, #16
    4aec:	769d      	strb	r5, [r3, #26]
    4aee:	0e12      	lsrs	r2, r2, #24
    4af0:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_IN;
    4af2:	2222      	movs	r2, #34	; 0x22
    4af4:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_IN;
    4af6:	2502      	movs	r5, #2
    4af8:	3201      	adds	r2, #1
    4afa:	549d      	strb	r5, [r3, r2]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_IN;	
    4afc:	3a33      	subs	r2, #51	; 0x33
    4afe:	771a      	strb	r2, [r3, #28]
    4b00:	3a70      	subs	r2, #112	; 0x70
    4b02:	775a      	strb	r2, [r3, #29]
    4b04:	3226      	adds	r2, #38	; 0x26
    4b06:	779a      	strb	r2, [r3, #30]
    4b08:	328d      	adds	r2, #141	; 0x8d
    4b0a:	77da      	strb	r2, [r3, #31]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_IN;
    4b0c:	3a12      	subs	r2, #18
    4b0e:	549c      	strb	r4, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_IN;
    4b10:	352e      	adds	r5, #46	; 0x2e
    4b12:	3a01      	subs	r2, #1
    4b14:	549d      	strb	r5, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_IN;
    4b16:	3a19      	subs	r2, #25
    4b18:	3d0c      	subs	r5, #12
    4b1a:	555a      	strb	r2, [r3, r5]
	RegParams.maxDataRate = MAC_DATARATE_MAX_IN;
    4b1c:	3501      	adds	r5, #1
    4b1e:	5559      	strb	r1, [r3, r5]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    4b20:	359c      	adds	r5, #156	; 0x9c
    4b22:	35ff      	adds	r5, #255	; 0xff
    4b24:	555c      	strb	r4, [r3, r5]
	RegParams.Rx1DrOffset = 7;
    4b26:	3429      	adds	r4, #41	; 0x29
    4b28:	551a      	strb	r2, [r3, r4]
	RegParams.maxTxPwrIndx = 10;
    4b2a:	3c22      	subs	r4, #34	; 0x22
    4b2c:	3226      	adds	r2, #38	; 0x26
    4b2e:	549c      	strb	r4, [r3, r2]
	RegParams.maxTxPwr = DEFAULT_EIRP_IN;
    4b30:	3414      	adds	r4, #20
    4b32:	3a05      	subs	r2, #5
    4b34:	549c      	strb	r4, [r3, r2]
	RegParams.pJoinDutyCycleTimer->timerId = regTimerId[0];
    4b36:	4a2d      	ldr	r2, [pc, #180]	; (4bec <LORAReg_InitIN+0x184>)
    4b38:	7815      	ldrb	r5, [r2, #0]
    4b3a:	341e      	adds	r4, #30
    4b3c:	551d      	strb	r5, [r3, r4]
	RegParams.pJoinDutyCycleTimer->remainingtime = 0;
    4b3e:	2500      	movs	r5, #0
    4b40:	3c04      	subs	r4, #4
    4b42:	551d      	strb	r5, [r3, r4]
    4b44:	3401      	adds	r4, #1
    4b46:	551d      	strb	r5, [r3, r4]
    4b48:	3401      	adds	r4, #1
    4b4a:	551d      	strb	r5, [r3, r4]
    4b4c:	3401      	adds	r4, #1
    4b4e:	551d      	strb	r5, [r3, r4]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    4b50:	7854      	ldrb	r4, [r2, #1]
    4b52:	223d      	movs	r2, #61	; 0x3d
    4b54:	549c      	strb	r4, [r3, r2]
	RegParams.joinbccount =0;
    4b56:	3205      	adds	r2, #5
    4b58:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    4b5a:	001a      	movs	r2, r3
    4b5c:	323e      	adds	r2, #62	; 0x3e
    4b5e:	7011      	strb	r1, [r2, #0]
    4b60:	7051      	strb	r1, [r2, #1]
    4b62:	7091      	strb	r1, [r2, #2]
    4b64:	70d1      	strb	r1, [r2, #3]
	
	RegParams.band = ismBand;
    4b66:	222e      	movs	r2, #46	; 0x2e
    4b68:	5498      	strb	r0, [r3, r2]
		PDS_RegFile(PDS_FILE_REG_IND_07_IDX,filemarks);
#endif		
	}
	else
	{
		result = LORAWAN_INVALID_PARAMETER;
    4b6a:	240a      	movs	r4, #10
	if(ismBand == ISM_IND865)
    4b6c:	280f      	cmp	r0, #15
    4b6e:	d007      	beq.n	4b80 <LORAReg_InitIN+0x118>
	}
	
    LORAREG_InitGetAttrFnPtrsIN();
    4b70:	4b1f      	ldr	r3, [pc, #124]	; (4bf0 <LORAReg_InitIN+0x188>)
    4b72:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsIN();
    4b74:	4b1f      	ldr	r3, [pc, #124]	; (4bf4 <LORAReg_InitIN+0x18c>)
    4b76:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsIN();
    4b78:	4b1f      	ldr	r3, [pc, #124]	; (4bf8 <LORAReg_InitIN+0x190>)
    4b7a:	4798      	blx	r3
#else
    result = UNSUPPORTED_BAND;
#endif
	return result;
}
    4b7c:	0020      	movs	r0, r4
    4b7e:	bd70      	pop	{r4, r5, r6, pc}
static void InitDefault865Channels (void)
{
    uint8_t i;
    memset (RegParams.pChParams, 0, sizeof(DefaultChannels865) );
	memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels865) );
    memcpy (RegParams.pChParams, DefaultChannels865, sizeof(DefaultChannels865) );
    4b80:	001c      	movs	r4, r3
    4b82:	0018      	movs	r0, r3
    4b84:	3083      	adds	r0, #131	; 0x83
    4b86:	3a28      	subs	r2, #40	; 0x28
    4b88:	491c      	ldr	r1, [pc, #112]	; (4bfc <LORAReg_InitIN+0x194>)
    4b8a:	4d1d      	ldr	r5, [pc, #116]	; (4c00 <LORAReg_InitIN+0x198>)
    4b8c:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels865, sizeof(AdvChannels865) );
    4b8e:	0020      	movs	r0, r4
    4b90:	30a3      	adds	r0, #163	; 0xa3
    4b92:	2224      	movs	r2, #36	; 0x24
    4b94:	491b      	ldr	r1, [pc, #108]	; (4c04 <LORAReg_InitIN+0x19c>)
    4b96:	47a8      	blx	r5
    4b98:	2006      	movs	r0, #6
    for (i = MIN_CHANNEL_INDEX_IN; i < MAX_CHANNELS_IN; i++)
    {
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    4b9a:	4913      	ldr	r1, [pc, #76]	; (4be8 <LORAReg_InitIN+0x180>)
    4b9c:	24ff      	movs	r4, #255	; 0xff
    4b9e:	790b      	ldrb	r3, [r1, #4]
    4ba0:	794a      	ldrb	r2, [r1, #5]
    4ba2:	0212      	lsls	r2, r2, #8
    4ba4:	431a      	orrs	r2, r3
    4ba6:	798b      	ldrb	r3, [r1, #6]
    4ba8:	041b      	lsls	r3, r3, #16
    4baa:	431a      	orrs	r2, r3
    4bac:	79cb      	ldrb	r3, [r1, #7]
    4bae:	061b      	lsls	r3, r3, #24
    4bb0:	4313      	orrs	r3, r2
    4bb2:	181b      	adds	r3, r3, r0
    4bb4:	705c      	strb	r4, [r3, #1]
    4bb6:	3002      	adds	r0, #2
    for (i = MIN_CHANNEL_INDEX_IN; i < MAX_CHANNELS_IN; i++)
    4bb8:	2820      	cmp	r0, #32
    4bba:	d1f0      	bne.n	4b9e <LORAReg_InitIN+0x136>
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = DEFAULT_EIRP_IN;
    4bbc:	4a0a      	ldr	r2, [pc, #40]	; (4be8 <LORAReg_InitIN+0x180>)
    4bbe:	211e      	movs	r1, #30
    4bc0:	23c2      	movs	r3, #194	; 0xc2
    4bc2:	33ff      	adds	r3, #255	; 0xff
    4bc4:	54d1      	strb	r1, [r2, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsIN, sizeof(DefaultDrParamsIN) );
    4bc6:	7810      	ldrb	r0, [r2, #0]
    4bc8:	7853      	ldrb	r3, [r2, #1]
    4bca:	021b      	lsls	r3, r3, #8
    4bcc:	4303      	orrs	r3, r0
    4bce:	7890      	ldrb	r0, [r2, #2]
    4bd0:	0400      	lsls	r0, r0, #16
    4bd2:	4303      	orrs	r3, r0
    4bd4:	78d0      	ldrb	r0, [r2, #3]
    4bd6:	0600      	lsls	r0, r0, #24
    4bd8:	4318      	orrs	r0, r3
    4bda:	2240      	movs	r2, #64	; 0x40
    4bdc:	490a      	ldr	r1, [pc, #40]	; (4c08 <LORAReg_InitIN+0x1a0>)
    4bde:	4b08      	ldr	r3, [pc, #32]	; (4c00 <LORAReg_InitIN+0x198>)
    4be0:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    4be2:	2408      	movs	r4, #8
    4be4:	e7c4      	b.n	4b70 <LORAReg_InitIN+0x108>
    4be6:	46c0      	nop			; (mov r8, r8)
    4be8:	20001220 	.word	0x20001220
    4bec:	2000121c 	.word	0x2000121c
    4bf0:	000087a5 	.word	0x000087a5
    4bf4:	00008d29 	.word	0x00008d29
    4bf8:	00008fed 	.word	0x00008fed
    4bfc:	00019f94 	.word	0x00019f94
    4c00:	0001516d 	.word	0x0001516d
    4c04:	00019f70 	.word	0x00019f70
    4c08:	00019f9c 	.word	0x00019f9c

00004c0c <LORAReg_InitJP>:
#endif

/****************************** FUNCTIONS *************************************/

StackRetStatus_t LORAReg_InitJP(IsmBand_t ismBand)
{
    4c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c0e:	46c6      	mov	lr, r8
    4c10:	b500      	push	{lr}
	StackRetStatus_t result = LORAWAN_SUCCESS;

#if (JPN_BAND == 1)

	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_JP;
    4c12:	4b84      	ldr	r3, [pc, #528]	; (4e24 <LORAReg_InitJP+0x218>)
    4c14:	2103      	movs	r1, #3
    4c16:	2226      	movs	r2, #38	; 0x26
    4c18:	5499      	strb	r1, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_JP;
    4c1a:	2510      	movs	r5, #16
    4c1c:	3204      	adds	r2, #4
    4c1e:	549d      	strb	r5, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_JP;
    4c20:	3901      	subs	r1, #1
    4c22:	3a01      	subs	r2, #1
    4c24:	5499      	strb	r1, [r3, r2]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_JP;
    4c26:	2401      	movs	r4, #1
    4c28:	3a02      	subs	r2, #2
    4c2a:	549c      	strb	r4, [r3, r2]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    4c2c:	001a      	movs	r2, r3
    4c2e:	3283      	adds	r2, #131	; 0x83
    4c30:	2400      	movs	r4, #0
    4c32:	46a0      	mov	r8, r4
    4c34:	711a      	strb	r2, [r3, #4]
    4c36:	0a16      	lsrs	r6, r2, #8
    4c38:	715e      	strb	r6, [r3, #5]
    4c3a:	0c16      	lsrs	r6, r2, #16
    4c3c:	719e      	strb	r6, [r3, #6]
    4c3e:	0e12      	lsrs	r2, r2, #24
    4c40:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    4c42:	001a      	movs	r2, r3
    4c44:	3243      	adds	r2, #67	; 0x43
    4c46:	701a      	strb	r2, [r3, #0]
    4c48:	0a16      	lsrs	r6, r2, #8
    4c4a:	705e      	strb	r6, [r3, #1]
    4c4c:	0c16      	lsrs	r6, r2, #16
    4c4e:	709e      	strb	r6, [r3, #2]
    4c50:	0e12      	lsrs	r2, r2, #24
    4c52:	70da      	strb	r2, [r3, #3]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    4c54:	001a      	movs	r2, r3
    4c56:	32c4      	adds	r2, #196	; 0xc4
    4c58:	32ff      	adds	r2, #255	; 0xff
    4c5a:	731a      	strb	r2, [r3, #12]
    4c5c:	0a16      	lsrs	r6, r2, #8
    4c5e:	735e      	strb	r6, [r3, #13]
    4c60:	0c16      	lsrs	r6, r2, #16
    4c62:	739e      	strb	r6, [r3, #14]
    4c64:	0e12      	lsrs	r2, r2, #24
    4c66:	73da      	strb	r2, [r3, #15]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    4c68:	001a      	movs	r2, r3
    4c6a:	32a3      	adds	r2, #163	; 0xa3
    4c6c:	721a      	strb	r2, [r3, #8]
    4c6e:	0a16      	lsrs	r6, r2, #8
    4c70:	725e      	strb	r6, [r3, #9]
    4c72:	0c16      	lsrs	r6, r2, #16
    4c74:	729e      	strb	r6, [r3, #10]
    4c76:	0e12      	lsrs	r2, r2, #24
    4c78:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    4c7a:	001a      	movs	r2, r3
    4c7c:	3264      	adds	r2, #100	; 0x64
    4c7e:	32ff      	adds	r2, #255	; 0xff
    4c80:	741a      	strb	r2, [r3, #16]
    4c82:	0a16      	lsrs	r6, r2, #8
    4c84:	745e      	strb	r6, [r3, #17]
    4c86:	0c16      	lsrs	r6, r2, #16
    4c88:	749e      	strb	r6, [r3, #18]
    4c8a:	0e12      	lsrs	r2, r2, #24
    4c8c:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    4c8e:	001a      	movs	r2, r3
    4c90:	3234      	adds	r2, #52	; 0x34
    4c92:	751a      	strb	r2, [r3, #20]
    4c94:	0a16      	lsrs	r6, r2, #8
    4c96:	755e      	strb	r6, [r3, #21]
    4c98:	0c16      	lsrs	r6, r2, #16
    4c9a:	759e      	strb	r6, [r3, #22]
    4c9c:	0e12      	lsrs	r2, r2, #24
    4c9e:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    4ca0:	001a      	movs	r2, r3
    4ca2:	323d      	adds	r2, #61	; 0x3d
    4ca4:	761a      	strb	r2, [r3, #24]
    4ca6:	0a16      	lsrs	r6, r2, #8
    4ca8:	765e      	strb	r6, [r3, #25]
    4caa:	0c16      	lsrs	r6, r2, #16
    4cac:	769e      	strb	r6, [r3, #26]
    4cae:	0e12      	lsrs	r2, r2, #24
    4cb0:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_JP;
    4cb2:	2222      	movs	r2, #34	; 0x22
    4cb4:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_JP;
    4cb6:	3201      	adds	r2, #1
    4cb8:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_JP;	
    4cba:	2200      	movs	r2, #0
    4cbc:	771a      	strb	r2, [r3, #28]
    4cbe:	3a16      	subs	r2, #22
    4cc0:	775a      	strb	r2, [r3, #29]
    4cc2:	321c      	adds	r2, #28
    4cc4:	779a      	strb	r2, [r3, #30]
    4cc6:	3231      	adds	r2, #49	; 0x31
    4cc8:	77da      	strb	r2, [r3, #31]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_JP;
    4cca:	3a16      	subs	r2, #22
    4ccc:	5499      	strb	r1, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_JP;
    4cce:	2636      	movs	r6, #54	; 0x36
    4cd0:	3a01      	subs	r2, #1
    4cd2:	549e      	strb	r6, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_JP;
    4cd4:	3a19      	subs	r2, #25
    4cd6:	3e12      	subs	r6, #18
    4cd8:	559a      	strb	r2, [r3, r6]
	RegParams.maxDataRate = MAC_DATARATE_MAX_JP;
    4cda:	3601      	adds	r6, #1
    4cdc:	559c      	strb	r4, [r3, r6]
	RegParams.cmnParams.paramsType2.LBTScanPeriod = LBT_SCAN_PERIOD_JP;
    4cde:	3e20      	subs	r6, #32
    4ce0:	27be      	movs	r7, #190	; 0xbe
    4ce2:	37ff      	adds	r7, #255	; 0xff
    4ce4:	55de      	strb	r6, [r3, r7]
	RegParams.cmnParams.paramsType2.LBTSignalThreshold = LBT_SIGNAL_THRESHOLD_JP;
    4ce6:	3f0e      	subs	r7, #14
    4ce8:	3fff      	subs	r7, #255	; 0xff
    4cea:	46bc      	mov	ip, r7
    4cec:	370f      	adds	r7, #15
    4cee:	37ff      	adds	r7, #255	; 0xff
    4cf0:	4664      	mov	r4, ip
    4cf2:	55dc      	strb	r4, [r3, r7]
	RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount = LBT_RSSI_SAMPLES_COUNT_JP;
    4cf4:	27c0      	movs	r7, #192	; 0xc0
    4cf6:	37ff      	adds	r7, #255	; 0xff
    4cf8:	55de      	strb	r6, [r3, r7]
	RegParams.cmnParams.paramsType2.minNonDefChId = 2;
    4cfa:	36bc      	adds	r6, #188	; 0xbc
    4cfc:	36ff      	adds	r6, #255	; 0xff
    4cfe:	5599      	strb	r1, [r3, r6]
	RegParams.Rx1DrOffset = 7;
    4d00:	312a      	adds	r1, #42	; 0x2a
    4d02:	545a      	strb	r2, [r3, r1]
	RegParams.maxTxPwrIndx = 7;
    4d04:	3101      	adds	r1, #1
    4d06:	545a      	strb	r2, [r3, r1]
	RegParams.maxTxPwr = DEFAULT_EIRP_JP;
    4d08:	3221      	adds	r2, #33	; 0x21
    4d0a:	549d      	strb	r5, [r3, r2]
	RegParams.cmnParams.paramsType2.LBTTimer.timerId = regTimerId[0];
    4d0c:	4a46      	ldr	r2, [pc, #280]	; (4e28 <LORAReg_InitJP+0x21c>)
    4d0e:	7815      	ldrb	r5, [r2, #0]
    4d10:	3180      	adds	r1, #128	; 0x80
    4d12:	31ff      	adds	r1, #255	; 0xff
    4d14:	545d      	strb	r5, [r3, r1]
	RegParams.pDutyCycleTimer->timerId = regTimerId[1];
    4d16:	7855      	ldrb	r5, [r2, #1]
    4d18:	2168      	movs	r1, #104	; 0x68
    4d1a:	31ff      	adds	r1, #255	; 0xff
    4d1c:	545d      	strb	r5, [r3, r1]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[2];
    4d1e:	7895      	ldrb	r5, [r2, #2]
    4d20:	392b      	subs	r1, #43	; 0x2b
    4d22:	39ff      	subs	r1, #255	; 0xff
    4d24:	545d      	strb	r5, [r3, r1]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[3];
    4d26:	78d1      	ldrb	r1, [r2, #3]
    4d28:	223c      	movs	r2, #60	; 0x3c
    4d2a:	5499      	strb	r1, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    4d2c:	2100      	movs	r1, #0
    4d2e:	3a04      	subs	r2, #4
    4d30:	5499      	strb	r1, [r3, r2]
    4d32:	3201      	adds	r2, #1
    4d34:	5499      	strb	r1, [r3, r2]
    4d36:	3201      	adds	r2, #1
    4d38:	5499      	strb	r1, [r3, r2]
    4d3a:	3201      	adds	r2, #1
    4d3c:	5499      	strb	r1, [r3, r2]
	RegParams.joinbccount =0;
    4d3e:	3207      	adds	r2, #7
    4d40:	4641      	mov	r1, r8
    4d42:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    4d44:	001a      	movs	r2, r3
    4d46:	323e      	adds	r2, #62	; 0x3e
    4d48:	2100      	movs	r1, #0
    4d4a:	7011      	strb	r1, [r2, #0]
    4d4c:	7051      	strb	r1, [r2, #1]
    4d4e:	7091      	strb	r1, [r2, #2]
    4d50:	70d1      	strb	r1, [r2, #3]
	RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime = 1;
    4d52:	31c3      	adds	r1, #195	; 0xc3
    4d54:	31ff      	adds	r1, #255	; 0xff
    4d56:	5c5a      	ldrb	r2, [r3, r1]
    4d58:	2401      	movs	r4, #1
    4d5a:	4322      	orrs	r2, r4
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime = 1;
    4d5c:	2402      	movs	r4, #2
    4d5e:	4322      	orrs	r2, r4
    4d60:	545a      	strb	r2, [r3, r1]
	RegParams.band = ismBand;
    4d62:	222e      	movs	r2, #46	; 0x2e
    4d64:	5498      	strb	r0, [r3, r2]

#endif		
	}
	else
	{
		result = LORAWAN_INVALID_PARAMETER;
    4d66:	240a      	movs	r4, #10
	if(ismBand == ISM_JPN923)
    4d68:	2805      	cmp	r0, #5
    4d6a:	d009      	beq.n	4d80 <LORAReg_InitJP+0x174>
	}
	
	
    LORAREG_InitGetAttrFnPtrsJP();
    4d6c:	4b2f      	ldr	r3, [pc, #188]	; (4e2c <LORAReg_InitJP+0x220>)
    4d6e:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsJP();
    4d70:	4b2f      	ldr	r3, [pc, #188]	; (4e30 <LORAReg_InitJP+0x224>)
    4d72:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsJP();
    4d74:	4b2f      	ldr	r3, [pc, #188]	; (4e34 <LORAReg_InitJP+0x228>)
    4d76:	4798      	blx	r3
#else
    result = UNSUPPORTED_BAND;
#endif
	return result;
}
    4d78:	0020      	movs	r0, r4
    4d7a:	bc04      	pop	{r2}
    4d7c:	4690      	mov	r8, r2
    4d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
static void InitDefault920Channels (void)
{
    uint8_t i;
    memset (RegParams.pChParams, 0, sizeof(DefaultChannels923JP) );
	memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels923JP) );
    memcpy (RegParams.pChParams, DefaultChannels923JP, sizeof(DefaultChannels923JP) );
    4d80:	001c      	movs	r4, r3
    4d82:	0018      	movs	r0, r3
    4d84:	3083      	adds	r0, #131	; 0x83
    4d86:	3a2a      	subs	r2, #42	; 0x2a
    4d88:	492b      	ldr	r1, [pc, #172]	; (4e38 <LORAReg_InitJP+0x22c>)
    4d8a:	4d2c      	ldr	r5, [pc, #176]	; (4e3c <LORAReg_InitJP+0x230>)
    4d8c:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels923JP, sizeof(AdvChannels923JP) );
    4d8e:	0020      	movs	r0, r4
    4d90:	30a3      	adds	r0, #163	; 0xa3
    4d92:	2218      	movs	r2, #24
    4d94:	492a      	ldr	r1, [pc, #168]	; (4e40 <LORAReg_InitJP+0x234>)
    4d96:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParamsJP923) );
	memcpy (RegParams.pSubBandParams, SubBandParamsJP923, sizeof(SubBandParamsJP923) );
    4d98:	0020      	movs	r0, r4
    4d9a:	30c4      	adds	r0, #196	; 0xc4
    4d9c:	30ff      	adds	r0, #255	; 0xff
    4d9e:	2218      	movs	r2, #24
    4da0:	4928      	ldr	r1, [pc, #160]	; (4e44 <LORAReg_InitJP+0x238>)
    4da2:	47a8      	blx	r5
	memset (RegParams.cmnParams.paramsType2.subBandDutyCycle,0,sizeof(SubBandDutyCycleJP923));
	memcpy (RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycleJP923,sizeof(SubBandDutyCycleJP923));
    4da4:	0020      	movs	r0, r4
    4da6:	30ae      	adds	r0, #174	; 0xae
    4da8:	30ff      	adds	r0, #255	; 0xff
    4daa:	2204      	movs	r2, #4
    4dac:	4926      	ldr	r1, [pc, #152]	; (4e48 <LORAReg_InitJP+0x23c>)
    4dae:	47a8      	blx	r5
    4db0:	2302      	movs	r3, #2
    4db2:	2202      	movs	r2, #2
    for (i = 2; i < RegParams.maxChannels; i++)
    {
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    4db4:	491b      	ldr	r1, [pc, #108]	; (4e24 <LORAReg_InitJP+0x218>)
    4db6:	3fc0      	subs	r7, #192	; 0xc0
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    4db8:	2500      	movs	r5, #0
    for (i = 2; i < RegParams.maxChannels; i++)
    4dba:	3e97      	subs	r6, #151	; 0x97
    4dbc:	3eff      	subs	r6, #255	; 0xff
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    4dbe:	7908      	ldrb	r0, [r1, #4]
    4dc0:	794c      	ldrb	r4, [r1, #5]
    4dc2:	0224      	lsls	r4, r4, #8
    4dc4:	4304      	orrs	r4, r0
    4dc6:	7988      	ldrb	r0, [r1, #6]
    4dc8:	0400      	lsls	r0, r0, #16
    4dca:	4304      	orrs	r4, r0
    4dcc:	79c8      	ldrb	r0, [r1, #7]
    4dce:	0600      	lsls	r0, r0, #24
    4dd0:	4320      	orrs	r0, r4
    4dd2:	0054      	lsls	r4, r2, #1
    4dd4:	1820      	adds	r0, r4, r0
    4dd6:	7047      	strb	r7, [r0, #1]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    4dd8:	3358      	adds	r3, #88	; 0x58
    4dda:	009b      	lsls	r3, r3, #2
    4ddc:	18cb      	adds	r3, r1, r3
    4dde:	721d      	strb	r5, [r3, #8]
    4de0:	725d      	strb	r5, [r3, #9]
    4de2:	729d      	strb	r5, [r3, #10]
    4de4:	72dd      	strb	r5, [r3, #11]
    for (i = 2; i < RegParams.maxChannels; i++)
    4de6:	3201      	adds	r2, #1
    4de8:	b2d2      	uxtb	r2, r2
    4dea:	0013      	movs	r3, r2
    4dec:	5788      	ldrsb	r0, [r1, r6]
    4dee:	4282      	cmp	r2, r0
    4df0:	dbe5      	blt.n	4dbe <LORAReg_InitJP+0x1b2>
    }
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    4df2:	4b0c      	ldr	r3, [pc, #48]	; (4e24 <LORAReg_InitJP+0x218>)
    4df4:	21ff      	movs	r1, #255	; 0xff
    4df6:	222f      	movs	r2, #47	; 0x2f
    4df8:	5499      	strb	r1, [r3, r2]
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = DEFAULT_EIRP_JP;//MAX_EIRP_JP;
    4dfa:	39ef      	subs	r1, #239	; 0xef
    4dfc:	22c2      	movs	r2, #194	; 0xc2
    4dfe:	32ff      	adds	r2, #255	; 0xff
    4e00:	5499      	strb	r1, [r3, r2]
		memcpy (RegParams.pDrParams, DefaultDrParamsJP, sizeof(DefaultDrParamsJP) );
    4e02:	7818      	ldrb	r0, [r3, #0]
    4e04:	785a      	ldrb	r2, [r3, #1]
    4e06:	0212      	lsls	r2, r2, #8
    4e08:	4302      	orrs	r2, r0
    4e0a:	7898      	ldrb	r0, [r3, #2]
    4e0c:	0400      	lsls	r0, r0, #16
    4e0e:	4302      	orrs	r2, r0
    4e10:	78d8      	ldrb	r0, [r3, #3]
    4e12:	0600      	lsls	r0, r0, #24
    4e14:	4310      	orrs	r0, r2
    4e16:	2240      	movs	r2, #64	; 0x40
    4e18:	490c      	ldr	r1, [pc, #48]	; (4e4c <LORAReg_InitJP+0x240>)
    4e1a:	4b08      	ldr	r3, [pc, #32]	; (4e3c <LORAReg_InitJP+0x230>)
    4e1c:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    4e1e:	2408      	movs	r4, #8
    4e20:	e7a4      	b.n	4d6c <LORAReg_InitJP+0x160>
    4e22:	46c0      	nop			; (mov r8, r8)
    4e24:	20001220 	.word	0x20001220
    4e28:	2000121c 	.word	0x2000121c
    4e2c:	000088d9 	.word	0x000088d9
    4e30:	00008d91 	.word	0x00008d91
    4e34:	00009051 	.word	0x00009051
    4e38:	00019ff4 	.word	0x00019ff4
    4e3c:	0001516d 	.word	0x0001516d
    4e40:	00019fdc 	.word	0x00019fdc
    4e44:	0001a03c 	.word	0x0001a03c
    4e48:	0001a038 	.word	0x0001a038
    4e4c:	00019ff8 	.word	0x00019ff8

00004e50 <LORAReg_InitKR>:
#endif

/****************************** FUNCTIONS *************************************/

StackRetStatus_t LORAReg_InitKR(IsmBand_t ismBand)
{
    4e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e52:	46de      	mov	lr, fp
    4e54:	4657      	mov	r7, sl
    4e56:	464e      	mov	r6, r9
    4e58:	4645      	mov	r5, r8
    4e5a:	b5e0      	push	{r5, r6, r7, lr}
	StackRetStatus_t result = LORAWAN_SUCCESS;

#if (KR_BAND == 1)
	
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_KR;
    4e5c:	4b96      	ldr	r3, [pc, #600]	; (50b8 <LORAReg_InitKR+0x268>)
    4e5e:	2403      	movs	r4, #3
    4e60:	2226      	movs	r2, #38	; 0x26
    4e62:	549c      	strb	r4, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_KR;
    4e64:	2110      	movs	r1, #16
    4e66:	3204      	adds	r2, #4
    4e68:	5499      	strb	r1, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_KR;
    4e6a:	3a29      	subs	r2, #41	; 0x29
    4e6c:	3119      	adds	r1, #25
    4e6e:	545a      	strb	r2, [r3, r1]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_KR;
    4e70:	3902      	subs	r1, #2
    4e72:	545a      	strb	r2, [r3, r1]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    4e74:	001a      	movs	r2, r3
    4e76:	3283      	adds	r2, #131	; 0x83
    4e78:	2100      	movs	r1, #0
    4e7a:	711a      	strb	r2, [r3, #4]
    4e7c:	0a15      	lsrs	r5, r2, #8
    4e7e:	715d      	strb	r5, [r3, #5]
    4e80:	0c15      	lsrs	r5, r2, #16
    4e82:	719d      	strb	r5, [r3, #6]
    4e84:	0e12      	lsrs	r2, r2, #24
    4e86:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    4e88:	001a      	movs	r2, r3
    4e8a:	3243      	adds	r2, #67	; 0x43
    4e8c:	701a      	strb	r2, [r3, #0]
    4e8e:	0a15      	lsrs	r5, r2, #8
    4e90:	705d      	strb	r5, [r3, #1]
    4e92:	0c15      	lsrs	r5, r2, #16
    4e94:	709d      	strb	r5, [r3, #2]
    4e96:	0e12      	lsrs	r2, r2, #24
    4e98:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    4e9a:	001a      	movs	r2, r3
    4e9c:	32a3      	adds	r2, #163	; 0xa3
    4e9e:	721a      	strb	r2, [r3, #8]
    4ea0:	0a15      	lsrs	r5, r2, #8
    4ea2:	725d      	strb	r5, [r3, #9]
    4ea4:	0c15      	lsrs	r5, r2, #16
    4ea6:	729d      	strb	r5, [r3, #10]
    4ea8:	0e12      	lsrs	r2, r2, #24
    4eaa:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    4eac:	001a      	movs	r2, r3
    4eae:	3264      	adds	r2, #100	; 0x64
    4eb0:	32ff      	adds	r2, #255	; 0xff
    4eb2:	741a      	strb	r2, [r3, #16]
    4eb4:	0a15      	lsrs	r5, r2, #8
    4eb6:	745d      	strb	r5, [r3, #17]
    4eb8:	0c15      	lsrs	r5, r2, #16
    4eba:	749d      	strb	r5, [r3, #18]
    4ebc:	0e12      	lsrs	r2, r2, #24
    4ebe:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    4ec0:	001a      	movs	r2, r3
    4ec2:	3234      	adds	r2, #52	; 0x34
    4ec4:	751a      	strb	r2, [r3, #20]
    4ec6:	0a15      	lsrs	r5, r2, #8
    4ec8:	755d      	strb	r5, [r3, #21]
    4eca:	0c15      	lsrs	r5, r2, #16
    4ecc:	759d      	strb	r5, [r3, #22]
    4ece:	0e12      	lsrs	r2, r2, #24
    4ed0:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    4ed2:	001a      	movs	r2, r3
    4ed4:	323d      	adds	r2, #61	; 0x3d
    4ed6:	761a      	strb	r2, [r3, #24]
    4ed8:	0a15      	lsrs	r5, r2, #8
    4eda:	765d      	strb	r5, [r3, #25]
    4edc:	0c15      	lsrs	r5, r2, #16
    4ede:	769d      	strb	r5, [r3, #26]
    4ee0:	0e12      	lsrs	r2, r2, #24
    4ee2:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_KR;
    4ee4:	2222      	movs	r2, #34	; 0x22
    4ee6:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_KR;
    4ee8:	3201      	adds	r2, #1
    4eea:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_KR;	
    4eec:	3a43      	subs	r2, #67	; 0x43
    4eee:	771a      	strb	r2, [r3, #28]
    4ef0:	3233      	adds	r2, #51	; 0x33
    4ef2:	775a      	strb	r2, [r3, #29]
    4ef4:	3a20      	subs	r2, #32
    4ef6:	779a      	strb	r2, [r3, #30]
    4ef8:	3243      	adds	r2, #67	; 0x43
    4efa:	77da      	strb	r2, [r3, #31]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_KR;
    4efc:	3a15      	subs	r2, #21
    4efe:	549c      	strb	r4, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_KR;
    4f00:	2534      	movs	r5, #52	; 0x34
    4f02:	3a01      	subs	r2, #1
    4f04:	549d      	strb	r5, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_KR;
    4f06:	3a1b      	subs	r2, #27
    4f08:	3d10      	subs	r5, #16
    4f0a:	555a      	strb	r2, [r3, r5]
	RegParams.maxDataRate = MAC_DATARATE_MAX_KR;
    4f0c:	3501      	adds	r5, #1
    4f0e:	5559      	strb	r1, [r3, r5]
	RegParams.cmnParams.paramsType2.LBTScanPeriod = LBT_SCAN_PERIOD_KR;
    4f10:	3d1b      	subs	r5, #27
    4f12:	26be      	movs	r6, #190	; 0xbe
    4f14:	36ff      	adds	r6, #255	; 0xff
    4f16:	559d      	strb	r5, [r3, r6]
	RegParams.cmnParams.paramsType2.LBTSignalThreshold = LBT_SIGNAL_THRESHOLD_KR;
    4f18:	27bf      	movs	r7, #191	; 0xbf
    4f1a:	3601      	adds	r6, #1
    4f1c:	559f      	strb	r7, [r3, r6]
	RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount = LBT_RSSI_SAMPLES_COUNT_KR;
    4f1e:	26c0      	movs	r6, #192	; 0xc0
    4f20:	36ff      	adds	r6, #255	; 0xff
    4f22:	559d      	strb	r5, [r3, r6]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    4f24:	35b7      	adds	r5, #183	; 0xb7
    4f26:	35ff      	adds	r5, #255	; 0xff
    4f28:	555c      	strb	r4, [r3, r5]
	RegParams.Rx1DrOffset = 5;
    4f2a:	3429      	adds	r4, #41	; 0x29
    4f2c:	551a      	strb	r2, [r3, r4]
	RegParams.maxTxPwrIndx = 7;
    4f2e:	3c25      	subs	r4, #37	; 0x25
    4f30:	3228      	adds	r2, #40	; 0x28
    4f32:	549c      	strb	r4, [r3, r2]
	RegParams.maxTxPwr = DEFAULT_EIRP_KR_HF;
    4f34:	3407      	adds	r4, #7
    4f36:	3a05      	subs	r2, #5
    4f38:	549c      	strb	r4, [r3, r2]
	RegParams.cmnParams.paramsType2.LBTTimer.timerId = regTimerId[0];
    4f3a:	4a60      	ldr	r2, [pc, #384]	; (50bc <LORAReg_InitKR+0x26c>)
    4f3c:	7815      	ldrb	r5, [r2, #0]
    4f3e:	349f      	adds	r4, #159	; 0x9f
    4f40:	34ff      	adds	r4, #255	; 0xff
    4f42:	551d      	strb	r5, [r3, r4]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    4f44:	7855      	ldrb	r5, [r2, #1]
    4f46:	3c70      	subs	r4, #112	; 0x70
    4f48:	3cff      	subs	r4, #255	; 0xff
    4f4a:	551d      	strb	r5, [r3, r4]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[2];
    4f4c:	7894      	ldrb	r4, [r2, #2]
    4f4e:	223c      	movs	r2, #60	; 0x3c
    4f50:	549c      	strb	r4, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    4f52:	2400      	movs	r4, #0
    4f54:	3a04      	subs	r2, #4
    4f56:	549c      	strb	r4, [r3, r2]
    4f58:	3201      	adds	r2, #1
    4f5a:	549c      	strb	r4, [r3, r2]
    4f5c:	3201      	adds	r2, #1
    4f5e:	549c      	strb	r4, [r3, r2]
    4f60:	3201      	adds	r2, #1
    4f62:	549c      	strb	r4, [r3, r2]
	RegParams.joinbccount =0;
    4f64:	3207      	adds	r2, #7
    4f66:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    4f68:	001a      	movs	r2, r3
    4f6a:	323e      	adds	r2, #62	; 0x3e
    4f6c:	7011      	strb	r1, [r2, #0]
    4f6e:	7051      	strb	r1, [r2, #1]
    4f70:	7091      	strb	r1, [r2, #2]
    4f72:	70d1      	strb	r1, [r2, #3]
		
	RegParams.band = ismBand;
    4f74:	222e      	movs	r2, #46	; 0x2e
    4f76:	5498      	strb	r0, [r3, r2]
		
#endif
	}
	else
	{
		result = UNSUPPORTED_BAND;
    4f78:	34c6      	adds	r4, #198	; 0xc6
	if(ismBand == ISM_KR920)
    4f7a:	2804      	cmp	r0, #4
    4f7c:	d00c      	beq.n	4f98 <LORAReg_InitKR+0x148>
	}
	
    LORAREG_InitGetAttrFnPtrsKR();
    4f7e:	4b50      	ldr	r3, [pc, #320]	; (50c0 <LORAReg_InitKR+0x270>)
    4f80:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsKR();
    4f82:	4b50      	ldr	r3, [pc, #320]	; (50c4 <LORAReg_InitKR+0x274>)
    4f84:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsKR();
    4f86:	4b50      	ldr	r3, [pc, #320]	; (50c8 <LORAReg_InitKR+0x278>)
    4f88:	4798      	blx	r3
#else
    result = UNSUPPORTED_BAND;
#endif
	return result;
}
    4f8a:	0020      	movs	r0, r4
    4f8c:	bc3c      	pop	{r2, r3, r4, r5}
    4f8e:	4690      	mov	r8, r2
    4f90:	4699      	mov	r9, r3
    4f92:	46a2      	mov	sl, r4
    4f94:	46ab      	mov	fp, r5
    4f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
static void InitDefault920Channels (void)
{
    uint8_t i;
    memset (RegParams.pChParams, 0, sizeof(DefaultChannels920KR) );
	memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels920KR) );
    memcpy (RegParams.pChParams, DefaultChannels920KR, sizeof(DefaultChannels920KR) );
    4f98:	001c      	movs	r4, r3
    4f9a:	0018      	movs	r0, r3
    4f9c:	3083      	adds	r0, #131	; 0x83
    4f9e:	3a28      	subs	r2, #40	; 0x28
    4fa0:	494a      	ldr	r1, [pc, #296]	; (50cc <LORAReg_InitKR+0x27c>)
    4fa2:	4d4b      	ldr	r5, [pc, #300]	; (50d0 <LORAReg_InitKR+0x280>)
    4fa4:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels920KR, sizeof(AdvChannels920KR) );
    4fa6:	0020      	movs	r0, r4
    4fa8:	30a3      	adds	r0, #163	; 0xa3
    4faa:	2224      	movs	r2, #36	; 0x24
    4fac:	4949      	ldr	r1, [pc, #292]	; (50d4 <LORAReg_InitKR+0x284>)
    4fae:	47a8      	blx	r5
    4fb0:	2103      	movs	r1, #3
    4fb2:	2003      	movs	r0, #3
    for (i = 3; i < RegParams.maxChannels; i++)
    {
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    4fb4:	4b40      	ldr	r3, [pc, #256]	; (50b8 <LORAReg_InitKR+0x268>)
    4fb6:	22ff      	movs	r2, #255	; 0xff
    4fb8:	4692      	mov	sl, r2
		RegParams.pChParams[i].status = DISABLED;
    4fba:	2400      	movs	r4, #0
		RegParams.pOtherChParams[i].joinRequestChannel = DISABLED;
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    4fbc:	22c2      	movs	r2, #194	; 0xc2
    4fbe:	32ff      	adds	r2, #255	; 0xff
    4fc0:	4694      	mov	ip, r2
    4fc2:	4657      	mov	r7, sl
    for (i = 3; i < RegParams.maxChannels; i++)
    4fc4:	3a98      	subs	r2, #152	; 0x98
    4fc6:	3aff      	subs	r2, #255	; 0xff
    4fc8:	4693      	mov	fp, r2
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    4fca:	0042      	lsls	r2, r0, #1
    4fcc:	791e      	ldrb	r6, [r3, #4]
    4fce:	46b0      	mov	r8, r6
    4fd0:	795e      	ldrb	r6, [r3, #5]
    4fd2:	0236      	lsls	r6, r6, #8
    4fd4:	46b1      	mov	r9, r6
    4fd6:	4646      	mov	r6, r8
    4fd8:	464d      	mov	r5, r9
    4fda:	432e      	orrs	r6, r5
    4fdc:	799d      	ldrb	r5, [r3, #6]
    4fde:	042d      	lsls	r5, r5, #16
    4fe0:	432e      	orrs	r6, r5
    4fe2:	79dd      	ldrb	r5, [r3, #7]
    4fe4:	062d      	lsls	r5, r5, #24
    4fe6:	432e      	orrs	r6, r5
    4fe8:	46b0      	mov	r8, r6
    4fea:	4490      	add	r8, r2
    4fec:	4645      	mov	r5, r8
    4fee:	4656      	mov	r6, sl
    4ff0:	706e      	strb	r6, [r5, #1]
		RegParams.pChParams[i].status = DISABLED;
    4ff2:	791d      	ldrb	r5, [r3, #4]
    4ff4:	46a8      	mov	r8, r5
    4ff6:	795d      	ldrb	r5, [r3, #5]
    4ff8:	022d      	lsls	r5, r5, #8
    4ffa:	4646      	mov	r6, r8
    4ffc:	432e      	orrs	r6, r5
    4ffe:	799d      	ldrb	r5, [r3, #6]
    5000:	042d      	lsls	r5, r5, #16
    5002:	432e      	orrs	r6, r5
    5004:	79dd      	ldrb	r5, [r3, #7]
    5006:	062d      	lsls	r5, r5, #24
    5008:	432e      	orrs	r6, r5
    500a:	54b4      	strb	r4, [r6, r2]
		RegParams.pOtherChParams[i].joinRequestChannel = DISABLED;
    500c:	7a1d      	ldrb	r5, [r3, #8]
    500e:	46a8      	mov	r8, r5
    5010:	7a5d      	ldrb	r5, [r3, #9]
    5012:	022d      	lsls	r5, r5, #8
    5014:	4646      	mov	r6, r8
    5016:	432e      	orrs	r6, r5
    5018:	7a9d      	ldrb	r5, [r3, #10]
    501a:	042d      	lsls	r5, r5, #16
    501c:	432e      	orrs	r6, r5
    501e:	7add      	ldrb	r5, [r3, #11]
    5020:	062d      	lsls	r5, r5, #24
    5022:	432e      	orrs	r6, r5
    5024:	46b0      	mov	r8, r6
    5026:	1812      	adds	r2, r2, r0
    5028:	0092      	lsls	r2, r2, #2
    502a:	4442      	add	r2, r8
    502c:	7254      	strb	r4, [r2, #9]
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    502e:	4662      	mov	r2, ip
    5030:	549f      	strb	r7, [r3, r2]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    5032:	000a      	movs	r2, r1
    5034:	3258      	adds	r2, #88	; 0x58
    5036:	0092      	lsls	r2, r2, #2
    5038:	189a      	adds	r2, r3, r2
    503a:	7214      	strb	r4, [r2, #8]
    503c:	7254      	strb	r4, [r2, #9]
    503e:	7294      	strb	r4, [r2, #10]
    5040:	72d4      	strb	r4, [r2, #11]
    for (i = 3; i < RegParams.maxChannels; i++)
    5042:	3001      	adds	r0, #1
    5044:	b2c0      	uxtb	r0, r0
    5046:	0001      	movs	r1, r0
    5048:	465a      	mov	r2, fp
    504a:	569a      	ldrsb	r2, [r3, r2]
    504c:	4290      	cmp	r0, r2
    504e:	dbbc      	blt.n	4fca <LORAReg_InitKR+0x17a>
    }
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    5050:	4c19      	ldr	r4, [pc, #100]	; (50b8 <LORAReg_InitKR+0x268>)
    5052:	22ff      	movs	r2, #255	; 0xff
    5054:	232f      	movs	r3, #47	; 0x2f
    5056:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsKR, sizeof(DefaultDrParamsKR) );
    5058:	7820      	ldrb	r0, [r4, #0]
    505a:	7863      	ldrb	r3, [r4, #1]
    505c:	021b      	lsls	r3, r3, #8
    505e:	4303      	orrs	r3, r0
    5060:	78a0      	ldrb	r0, [r4, #2]
    5062:	0400      	lsls	r0, r0, #16
    5064:	4303      	orrs	r3, r0
    5066:	78e0      	ldrb	r0, [r4, #3]
    5068:	0600      	lsls	r0, r0, #24
    506a:	4318      	orrs	r0, r3
    506c:	3acf      	subs	r2, #207	; 0xcf
    506e:	491a      	ldr	r1, [pc, #104]	; (50d8 <LORAReg_InitKR+0x288>)
    5070:	4b17      	ldr	r3, [pc, #92]	; (50d0 <LORAReg_InitKR+0x280>)
    5072:	4798      	blx	r3
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    5074:	2325      	movs	r3, #37	; 0x25
    5076:	5ce3      	ldrb	r3, [r4, r3]
    5078:	2b00      	cmp	r3, #0
    507a:	dd1a      	ble.n	50b2 <LORAReg_InitKR+0x262>
			RegParams.pDrParams[dataRate].modulation = MODULATION_LORA;
    507c:	4a0e      	ldr	r2, [pc, #56]	; (50b8 <LORAReg_InitKR+0x268>)
    507e:	7811      	ldrb	r1, [r2, #0]
    5080:	7853      	ldrb	r3, [r2, #1]
    5082:	021b      	lsls	r3, r3, #8
    5084:	430b      	orrs	r3, r1
    5086:	7891      	ldrb	r1, [r2, #2]
    5088:	0409      	lsls	r1, r1, #16
    508a:	430b      	orrs	r3, r1
    508c:	78d1      	ldrb	r1, [r2, #3]
    508e:	0609      	lsls	r1, r1, #24
    5090:	4319      	orrs	r1, r3
    5092:	2300      	movs	r3, #0
    5094:	2601      	movs	r6, #1
			RegParams.pDrParams[dataRate].bandwidth = BW_125KHZ;
    5096:	2507      	movs	r5, #7
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    5098:	0014      	movs	r4, r2
    509a:	2025      	movs	r0, #37	; 0x25
			RegParams.pDrParams[dataRate].modulation = MODULATION_LORA;
    509c:	00da      	lsls	r2, r3, #3
    509e:	188a      	adds	r2, r1, r2
    50a0:	71d6      	strb	r6, [r2, #7]
			RegParams.pDrParams[dataRate].bandwidth = BW_125KHZ;
    50a2:	7195      	strb	r5, [r2, #6]
    50a4:	3301      	adds	r3, #1
    50a6:	b25b      	sxtb	r3, r3
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    50a8:	5c22      	ldrb	r2, [r4, r0]
    50aa:	4293      	cmp	r3, r2
    50ac:	dbf6      	blt.n	509c <LORAReg_InitKR+0x24c>
	StackRetStatus_t result = LORAWAN_SUCCESS;
    50ae:	2408      	movs	r4, #8
    50b0:	e765      	b.n	4f7e <LORAReg_InitKR+0x12e>
    50b2:	2408      	movs	r4, #8
    50b4:	e763      	b.n	4f7e <LORAReg_InitKR+0x12e>
    50b6:	46c0      	nop			; (mov r8, r8)
    50b8:	20001220 	.word	0x20001220
    50bc:	2000121c 	.word	0x2000121c
    50c0:	00008a35 	.word	0x00008a35
    50c4:	00008dfd 	.word	0x00008dfd
    50c8:	000090d1 	.word	0x000090d1
    50cc:	0001a078 	.word	0x0001a078
    50d0:	0001516d 	.word	0x0001516d
    50d4:	0001a054 	.word	0x0001a054
    50d8:	0001a080 	.word	0x0001a080

000050dc <LORAReg_InitNA>:
#endif

/****************************** FUNCTIONS *************************************/

StackRetStatus_t LORAReg_InitNA(IsmBand_t ismBand)
{
    50dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    50de:	46de      	mov	lr, fp
    50e0:	4657      	mov	r7, sl
    50e2:	464e      	mov	r6, r9
    50e4:	4645      	mov	r5, r8
    50e6:	b5e0      	push	{r5, r6, r7, lr}
    50e8:	b083      	sub	sp, #12
    50ea:	9001      	str	r0, [sp, #4]
	StackRetStatus_t result = LORAWAN_SUCCESS;
#if(NA_BAND == 1)
    RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_NA;
    50ec:	4c6a      	ldr	r4, [pc, #424]	; (5298 <LORAReg_InitNA+0x1bc>)
    50ee:	2326      	movs	r3, #38	; 0x26
    50f0:	2203      	movs	r2, #3
    50f2:	54e2      	strb	r2, [r4, r3]
	RegParams.maxChannels = MAX_CHANNELS_T1;
    50f4:	2248      	movs	r2, #72	; 0x48
    50f6:	3304      	adds	r3, #4
    50f8:	54e2      	strb	r2, [r4, r3]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_NA;
    50fa:	3a43      	subs	r2, #67	; 0x43
    50fc:	3b03      	subs	r3, #3
    50fe:	54e2      	strb	r2, [r4, r3]
	RegParams.maxTxPwr = DEFAULT_EIRP_NA;
    5100:	3219      	adds	r2, #25
    5102:	3301      	adds	r3, #1
    5104:	54e2      	strb	r2, [r4, r3]
	RegParams.pChParams = &RegParams.cmnParams.paramsType1.chParams[0];
    5106:	0023      	movs	r3, r4
    5108:	33b3      	adds	r3, #179	; 0xb3
    510a:	2600      	movs	r6, #0
    510c:	7123      	strb	r3, [r4, #4]
    510e:	0a1a      	lsrs	r2, r3, #8
    5110:	7162      	strb	r2, [r4, #5]
    5112:	0c1a      	lsrs	r2, r3, #16
    5114:	71a2      	strb	r2, [r4, #6]
    5116:	0e1a      	lsrs	r2, r3, #24
    5118:	71e2      	strb	r2, [r4, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType1.DRParams[0];
    511a:	0025      	movs	r5, r4
    511c:	3543      	adds	r5, #67	; 0x43
    511e:	7025      	strb	r5, [r4, #0]
    5120:	0a2a      	lsrs	r2, r5, #8
    5122:	7062      	strb	r2, [r4, #1]
    5124:	0c2a      	lsrs	r2, r5, #16
    5126:	70a2      	strb	r2, [r4, #2]
    5128:	0e2a      	lsrs	r2, r5, #24
    512a:	70e2      	strb	r2, [r4, #3]
	RegParams.MinNewChIndex = 0xFF;
    512c:	2221      	movs	r2, #33	; 0x21
    512e:	20ff      	movs	r0, #255	; 0xff
    5130:	54a0      	strb	r0, [r4, r2]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_NA;
    5132:	38dd      	subs	r0, #221	; 0xdd
    5134:	3a17      	subs	r2, #23
    5136:	5422      	strb	r2, [r4, r0]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_NA;
    5138:	2708      	movs	r7, #8
    513a:	2008      	movs	r0, #8
    513c:	4684      	mov	ip, r0
    513e:	2023      	movs	r0, #35	; 0x23
    5140:	5427      	strb	r7, [r4, r0]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_NA;
    5142:	3883      	subs	r0, #131	; 0x83
    5144:	4680      	mov	r8, r0
    5146:	7720      	strb	r0, [r4, #28]
    5148:	2070      	movs	r0, #112	; 0x70
    514a:	7760      	strb	r0, [r4, #29]
    514c:	4660      	mov	r0, ip
    514e:	77a0      	strb	r0, [r4, #30]
    5150:	2037      	movs	r0, #55	; 0x37
    5152:	77e0      	strb	r0, [r4, #31]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_NA;
    5154:	3001      	adds	r0, #1
    5156:	2220      	movs	r2, #32
    5158:	54a0      	strb	r0, [r4, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_NA;
    515a:	3a1c      	subs	r2, #28
    515c:	4691      	mov	r9, r2
    515e:	3220      	adds	r2, #32
    5160:	4649      	mov	r1, r9
    5162:	54a1      	strb	r1, [r4, r2]
	RegParams.maxDataRate = MAC_DATARATE_MAX_NA;
    5164:	3201      	adds	r2, #1
    5166:	2103      	movs	r1, #3
    5168:	54a1      	strb	r1, [r4, r2]
	RegParams.cmnParams.paramsType1.Max_125khzChan = MAX_CHANNELS_BANDWIDTH_125_AU_NA;
    516a:	321b      	adds	r2, #27
    516c:	4692      	mov	sl, r2
    516e:	2254      	movs	r2, #84	; 0x54
    5170:	32ff      	adds	r2, #255	; 0xff
    5172:	4651      	mov	r1, sl
    5174:	54a1      	strb	r1, [r4, r2]
	RegParams.cmnParams.paramsType1.Max_500khzChan = MAX_CHANNELS_BANDWIDTH_500_AU_NA;
    5176:	3201      	adds	r2, #1
    5178:	54a7      	strb	r7, [r4, r2]
	RegParams.cmnParams.paramsType1.minTxDR = DR0;
    517a:	2250      	movs	r2, #80	; 0x50
    517c:	32ff      	adds	r2, #255	; 0xff
    517e:	54a6      	strb	r6, [r4, r2]
	RegParams.cmnParams.paramsType1.maxTxDR = DR4;
    5180:	3201      	adds	r2, #1
    5182:	4649      	mov	r1, r9
    5184:	54a1      	strb	r1, [r4, r2]
	RegParams.cmnParams.paramsType1.minRxDR = DR8;
    5186:	2252      	movs	r2, #82	; 0x52
    5188:	32ff      	adds	r2, #255	; 0xff
    518a:	54a7      	strb	r7, [r4, r2]
	RegParams.cmnParams.paramsType1.maxRxDR = DR13;
    518c:	3a45      	subs	r2, #69	; 0x45
    518e:	3aff      	subs	r2, #255	; 0xff
    5190:	374b      	adds	r7, #75	; 0x4b
    5192:	37ff      	adds	r7, #255	; 0xff
    5194:	55e2      	strb	r2, [r4, r7]
	RegParams.cmnParams.paramsType1.RxParamWindowOffset1 = 10;
    5196:	2756      	movs	r7, #86	; 0x56
    5198:	37ff      	adds	r7, #255	; 0xff
    519a:	220a      	movs	r2, #10
    519c:	55e2      	strb	r2, [r4, r7]
	RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    519e:	0027      	movs	r7, r4
    51a0:	3734      	adds	r7, #52	; 0x34
    51a2:	7527      	strb	r7, [r4, #20]
    51a4:	0a3a      	lsrs	r2, r7, #8
    51a6:	7562      	strb	r2, [r4, #21]
    51a8:	0c3a      	lsrs	r2, r7, #16
    51aa:	75a2      	strb	r2, [r4, #22]
    51ac:	0e3f      	lsrs	r7, r7, #24
    51ae:	75e7      	strb	r7, [r4, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    51b0:	0027      	movs	r7, r4
    51b2:	373d      	adds	r7, #61	; 0x3d
    51b4:	7627      	strb	r7, [r4, #24]
    51b6:	0a3a      	lsrs	r2, r7, #8
    51b8:	7662      	strb	r2, [r4, #25]
    51ba:	0c3a      	lsrs	r2, r7, #16
    51bc:	76a2      	strb	r2, [r4, #26]
    51be:	0e3f      	lsrs	r7, r7, #24
    51c0:	76e7      	strb	r7, [r4, #27]
	RegParams.cmnParams.paramsType1.UpStreamCh0Freq = UPSTREAM_CH0_NA;
    51c2:	2260      	movs	r2, #96	; 0x60
    51c4:	2744      	movs	r7, #68	; 0x44
    51c6:	37ff      	adds	r7, #255	; 0xff
    51c8:	55e2      	strb	r2, [r4, r7]
    51ca:	0027      	movs	r7, r4
    51cc:	3744      	adds	r7, #68	; 0x44
    51ce:	37ff      	adds	r7, #255	; 0xff
    51d0:	2201      	movs	r2, #1
    51d2:	707a      	strb	r2, [r7, #1]
    51d4:	2238      	movs	r2, #56	; 0x38
    51d6:	4252      	negs	r2, r2
    51d8:	70ba      	strb	r2, [r7, #2]
    51da:	2235      	movs	r2, #53	; 0x35
    51dc:	70fa      	strb	r2, [r7, #3]
	RegParams.cmnParams.paramsType1.UpStreamCh64Freq = UPSTREAM_CH64_NA;
    51de:	2240      	movs	r2, #64	; 0x40
    51e0:	4252      	negs	r2, r2
    51e2:	2748      	movs	r7, #72	; 0x48
    51e4:	37ff      	adds	r7, #255	; 0xff
    51e6:	55e2      	strb	r2, [r4, r7]
    51e8:	0027      	movs	r7, r4
    51ea:	3748      	adds	r7, #72	; 0x48
    51ec:	37ff      	adds	r7, #255	; 0xff
    51ee:	2251      	movs	r2, #81	; 0x51
    51f0:	4252      	negs	r2, r2
    51f2:	707a      	strb	r2, [r7, #1]
    51f4:	222e      	movs	r2, #46	; 0x2e
    51f6:	4252      	negs	r2, r2
    51f8:	70ba      	strb	r2, [r7, #2]
    51fa:	2235      	movs	r2, #53	; 0x35
    51fc:	70fa      	strb	r2, [r7, #3]
	RegParams.cmnParams.paramsType1.DownStreamCh0Freq = DOWNSTREAM_CH0_NA;
    51fe:	274c      	movs	r7, #76	; 0x4c
    5200:	37ff      	adds	r7, #255	; 0xff
    5202:	4642      	mov	r2, r8
    5204:	55e2      	strb	r2, [r4, r7]
    5206:	0027      	movs	r7, r4
    5208:	374c      	adds	r7, #76	; 0x4c
    520a:	37ff      	adds	r7, #255	; 0xff
    520c:	2270      	movs	r2, #112	; 0x70
    520e:	707a      	strb	r2, [r7, #1]
    5210:	4662      	mov	r2, ip
    5212:	70ba      	strb	r2, [r7, #2]
    5214:	2237      	movs	r2, #55	; 0x37
    5216:	70fa      	strb	r2, [r7, #3]
	RegParams.Rx1DrOffset = 3;
    5218:	272c      	movs	r7, #44	; 0x2c
    521a:	2203      	movs	r2, #3
    521c:	55e2      	strb	r2, [r4, r7]
	RegParams.maxTxPwrIndx = 10;
    521e:	212d      	movs	r1, #45	; 0x2d
    5220:	220a      	movs	r2, #10
    5222:	5462      	strb	r2, [r4, r1]
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    5224:	2258      	movs	r2, #88	; 0x58
    5226:	32ff      	adds	r2, #255	; 0xff
    5228:	54a6      	strb	r6, [r4, r2]

	RegParams.pJoinBackoffTimer->timerId = regTimerId[0];
    522a:	4a1c      	ldr	r2, [pc, #112]	; (529c <LORAReg_InitNA+0x1c0>)
    522c:	7817      	ldrb	r7, [r2, #0]
    522e:	3110      	adds	r1, #16
    5230:	5467      	strb	r7, [r4, r1]
	RegParams.pJoinDutyCycleTimer->timerId = regTimerId[1];
    5232:	7851      	ldrb	r1, [r2, #1]
    5234:	223c      	movs	r2, #60	; 0x3c
    5236:	54a1      	strb	r1, [r4, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    5238:	2200      	movs	r2, #0
    523a:	5422      	strb	r2, [r4, r0]
    523c:	2100      	movs	r1, #0
    523e:	3239      	adds	r2, #57	; 0x39
    5240:	54a1      	strb	r1, [r4, r2]
    5242:	3201      	adds	r2, #1
    5244:	54a1      	strb	r1, [r4, r2]
    5246:	3201      	adds	r2, #1
    5248:	54a1      	strb	r1, [r4, r2]
	RegParams.joinbccount =0;
    524a:	3207      	adds	r2, #7
    524c:	54a6      	strb	r6, [r4, r2]
	RegParams.joinDutyCycleTimeout =0;
    524e:	0022      	movs	r2, r4
    5250:	323e      	adds	r2, #62	; 0x3e
    5252:	7011      	strb	r1, [r2, #0]
    5254:	7051      	strb	r1, [r2, #1]
    5256:	7091      	strb	r1, [r2, #2]
    5258:	70d1      	strb	r1, [r2, #3]
	RegParams.band = ismBand;
    525a:	222e      	movs	r2, #46	; 0x2e
    525c:	4669      	mov	r1, sp
    525e:	7909      	ldrb	r1, [r1, #4]
    5260:	54a1      	strb	r1, [r4, r2]
 */
#if(NA_BAND == 1)
static void InitDefault915Channels (void)
{
	memset (RegParams.pChParams, 0, sizeof(DefaultChannels915) );
	memcpy (RegParams.pChParams, DefaultChannels915, sizeof(DefaultChannels915) );
    5262:	3262      	adds	r2, #98	; 0x62
    5264:	490e      	ldr	r1, [pc, #56]	; (52a0 <LORAReg_InitNA+0x1c4>)
    5266:	0018      	movs	r0, r3
    5268:	4f0e      	ldr	r7, [pc, #56]	; (52a4 <LORAReg_InitNA+0x1c8>)
    526a:	47b8      	blx	r7
	memcpy (RegParams.pDrParams, DefaultDrParamsNA, sizeof(DefaultDrParamsNA) );
    526c:	2270      	movs	r2, #112	; 0x70
    526e:	490e      	ldr	r1, [pc, #56]	; (52a8 <LORAReg_InitNA+0x1cc>)
    5270:	0028      	movs	r0, r5
    5272:	47b8      	blx	r7
	RegParams.cmnParams.paramsType1.alternativeChannel = 0;
    5274:	23ab      	movs	r3, #171	; 0xab
    5276:	005b      	lsls	r3, r3, #1
    5278:	54e6      	strb	r6, [r4, r3]
    LORAREG_InitGetAttrFnPtrsNA();
    527a:	4b0c      	ldr	r3, [pc, #48]	; (52ac <LORAReg_InitNA+0x1d0>)
    527c:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsNA();
    527e:	4b0c      	ldr	r3, [pc, #48]	; (52b0 <LORAReg_InitNA+0x1d4>)
    5280:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsNA();
    5282:	4b0c      	ldr	r3, [pc, #48]	; (52b4 <LORAReg_InitNA+0x1d8>)
    5284:	4798      	blx	r3
}
    5286:	2008      	movs	r0, #8
    5288:	b003      	add	sp, #12
    528a:	bc3c      	pop	{r2, r3, r4, r5}
    528c:	4690      	mov	r8, r2
    528e:	4699      	mov	r9, r3
    5290:	46a2      	mov	sl, r4
    5292:	46ab      	mov	fp, r5
    5294:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5296:	46c0      	nop			; (mov r8, r8)
    5298:	20001220 	.word	0x20001220
    529c:	2000121c 	.word	0x2000121c
    52a0:	0001a0b0 	.word	0x0001a0b0
    52a4:	0001516d 	.word	0x0001516d
    52a8:	0001a140 	.word	0x0001a140
    52ac:	0000829d 	.word	0x0000829d
    52b0:	00008b7d 	.word	0x00008b7d
    52b4:	00008e65 	.word	0x00008e65

000052b8 <InValidGetAttr>:
/****************************** FUNCTIONS *************************************/

StackRetStatus_t InValidGetAttr(LorawanRegionalAttributes_t attr, void * attrInput, void * attrOutput)
{
	return LORAWAN_INVALID_REQUEST;
}
    52b8:	2015      	movs	r0, #21
    52ba:	4770      	bx	lr

000052bc <InValidAttr>:

StackRetStatus_t InValidAttr(LorawanRegionalAttributes_t attr, void * attrInput)
{
	return LORAWAN_INVALID_REQUEST;
}
    52bc:	2015      	movs	r0, #21
    52be:	4770      	bx	lr

000052c0 <LORAREG_GetAttr_MaxChannel>:
#endif


static StackRetStatus_t LORAREG_GetAttr_MaxChannel(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.maxChannels;
    52c0:	232a      	movs	r3, #42	; 0x2a
    52c2:	4902      	ldr	r1, [pc, #8]	; (52cc <LORAREG_GetAttr_MaxChannel+0xc>)
    52c4:	5ccb      	ldrb	r3, [r1, r3]
    52c6:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    52c8:	2008      	movs	r0, #8
    52ca:	4770      	bx	lr
    52cc:	20001220 	.word	0x20001220

000052d0 <LORAREG_GetAttr_MinNewChIndex>:


static StackRetStatus_t LORAREG_GetAttr_MinNewChIndex(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	*(uint8_t *)attrOutput = (uint8_t)RegParams.MinNewChIndex;
    52d0:	4905      	ldr	r1, [pc, #20]	; (52e8 <LORAREG_GetAttr_MinNewChIndex+0x18>)
    52d2:	2321      	movs	r3, #33	; 0x21
    52d4:	5cc8      	ldrb	r0, [r1, r3]
    52d6:	7010      	strb	r0, [r2, #0]
	if(RegParams.MinNewChIndex == 0xFF)
    52d8:	5ccb      	ldrb	r3, [r1, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    52da:	2008      	movs	r0, #8
	if(RegParams.MinNewChIndex == 0xFF)
    52dc:	2bff      	cmp	r3, #255	; 0xff
    52de:	d000      	beq.n	52e2 <LORAREG_GetAttr_MinNewChIndex+0x12>
	{
		result = LORAWAN_INVALID_PARAMETER;
	}
	
	return result;
}
    52e0:	4770      	bx	lr
		result = LORAWAN_INVALID_PARAMETER;
    52e2:	3002      	adds	r0, #2
    52e4:	e7fc      	b.n	52e0 <LORAREG_GetAttr_MinNewChIndex+0x10>
    52e6:	46c0      	nop			; (mov r8, r8)
    52e8:	20001220 	.word	0x20001220

000052ec <LORAREG_GetAttr_DefRx1DataRate>:
}
#endif

static StackRetStatus_t LORAREG_GetAttr_DefRx1DataRate(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.DefRx1DataRate;
    52ec:	2322      	movs	r3, #34	; 0x22
    52ee:	4902      	ldr	r1, [pc, #8]	; (52f8 <LORAREG_GetAttr_DefRx1DataRate+0xc>)
    52f0:	5ccb      	ldrb	r3, [r1, r3]
    52f2:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    52f4:	2008      	movs	r0, #8
    52f6:	4770      	bx	lr
    52f8:	20001220 	.word	0x20001220

000052fc <LORAREG_GetAttr_DefRx2DataRate>:

static StackRetStatus_t LORAREG_GetAttr_DefRx2DataRate(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.DefRx2DataRate;
    52fc:	2323      	movs	r3, #35	; 0x23
    52fe:	4902      	ldr	r1, [pc, #8]	; (5308 <LORAREG_GetAttr_DefRx2DataRate+0xc>)
    5300:	5ccb      	ldrb	r3, [r1, r3]
    5302:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    5304:	2008      	movs	r0, #8
    5306:	4770      	bx	lr
    5308:	20001220 	.word	0x20001220

0000530c <LORAREG_GetAttr_RegFeatures>:
	return LORAWAN_SUCCESS;
}

static StackRetStatus_t LORAREG_GetAttr_RegFeatures(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint32_t *)attrOutput = RegParams.FeaturesSupport;
    530c:	2320      	movs	r3, #32
    530e:	4902      	ldr	r1, [pc, #8]	; (5318 <LORAREG_GetAttr_RegFeatures+0xc>)
    5310:	5ccb      	ldrb	r3, [r1, r3]
    5312:	6013      	str	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    5314:	2008      	movs	r0, #8
    5316:	4770      	bx	lr
    5318:	20001220 	.word	0x20001220

0000531c <LORAREG_GetAttr_DataRange>:

static StackRetStatus_t LORAREG_GetAttr_DataRange(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    531c:	b530      	push	{r4, r5, lr}
    531e:	b083      	sub	sp, #12
    5320:	0015      	movs	r5, r2
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint8_t  channelId;
	ValChId_t valChid;
	valChid.channelIndex = *(uint8_t *)attrInput;
    5322:	780c      	ldrb	r4, [r1, #0]
    5324:	a901      	add	r1, sp, #4
    5326:	700c      	strb	r4, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    5328:	2301      	movs	r3, #1
    532a:	704b      	strb	r3, [r1, #1]
	channelId = *(uint8_t *)attrInput;
	if (pValidateAttr[CHANNEL_ID](CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    532c:	4b0d      	ldr	r3, [pc, #52]	; (5364 <LORAREG_GetAttr_DataRange+0x48>)
    532e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    5330:	2015      	movs	r0, #21
    5332:	4798      	blx	r3
    5334:	2808      	cmp	r0, #8
    5336:	d004      	beq.n	5342 <LORAREG_GetAttr_DataRange+0x26>
	{
	    *(uint8_t *)attrOutput = RegParams.pChParams[channelId].dataRange.value;
	}
	else
	{
		*(uint8_t *)attrOutput = 0xFF;
    5338:	23ff      	movs	r3, #255	; 0xff
    533a:	702b      	strb	r3, [r5, #0]
	    result = LORAWAN_INVALID_PARAMETER;
    533c:	200a      	movs	r0, #10
	}
	return result;
}
    533e:	b003      	add	sp, #12
    5340:	bd30      	pop	{r4, r5, pc}
	    *(uint8_t *)attrOutput = RegParams.pChParams[channelId].dataRange.value;
    5342:	4909      	ldr	r1, [pc, #36]	; (5368 <LORAREG_GetAttr_DataRange+0x4c>)
    5344:	790b      	ldrb	r3, [r1, #4]
    5346:	794a      	ldrb	r2, [r1, #5]
    5348:	0212      	lsls	r2, r2, #8
    534a:	4313      	orrs	r3, r2
    534c:	798a      	ldrb	r2, [r1, #6]
    534e:	0412      	lsls	r2, r2, #16
    5350:	431a      	orrs	r2, r3
    5352:	79cb      	ldrb	r3, [r1, #7]
    5354:	061b      	lsls	r3, r3, #24
    5356:	431a      	orrs	r2, r3
    5358:	0063      	lsls	r3, r4, #1
    535a:	189b      	adds	r3, r3, r2
    535c:	785b      	ldrb	r3, [r3, #1]
    535e:	702b      	strb	r3, [r5, #0]
    5360:	e7ed      	b.n	533e <LORAREG_GetAttr_DataRange+0x22>
    5362:	46c0      	nop			; (mov r8, r8)
    5364:	20000d40 	.word	0x20000d40
    5368:	20001220 	.word	0x20001220

0000536c <LORAREG_GetAttr_ChIdStatus>:
}
#endif


static StackRetStatus_t LORAREG_GetAttr_ChIdStatus(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    536c:	b530      	push	{r4, r5, lr}
    536e:	b083      	sub	sp, #12
    5370:	0015      	movs	r5, r2
	StackRetStatus_t result = LORAWAN_SUCCESS;
	ValChId_t val_chid;
	uint8_t  channelId;
	channelId = *(uint8_t *)attrInput;
    5372:	780c      	ldrb	r4, [r1, #0]
	val_chid.channelIndex = *(uint8_t *)attrInput;
    5374:	a901      	add	r1, sp, #4
    5376:	700c      	strb	r4, [r1, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    5378:	2301      	movs	r3, #1
    537a:	704b      	strb	r3, [r1, #1]
	
	if (pValidateAttr[CHANNEL_ID](CHANNEL_ID, &val_chid) == LORAWAN_SUCCESS)
    537c:	4b0c      	ldr	r3, [pc, #48]	; (53b0 <LORAREG_GetAttr_ChIdStatus+0x44>)
    537e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    5380:	2015      	movs	r0, #21
    5382:	4798      	blx	r3
    5384:	2808      	cmp	r0, #8
    5386:	d004      	beq.n	5392 <LORAREG_GetAttr_ChIdStatus+0x26>
	{
		*(uint8_t *)attrOutput = RegParams.pChParams[channelId].status;
	}
	else
	{
		*(uint8_t *)attrOutput = DISABLED;
    5388:	2300      	movs	r3, #0
    538a:	702b      	strb	r3, [r5, #0]
		result = LORAWAN_INVALID_PARAMETER;
    538c:	200a      	movs	r0, #10
	}
	return result;
}
    538e:	b003      	add	sp, #12
    5390:	bd30      	pop	{r4, r5, pc}
		*(uint8_t *)attrOutput = RegParams.pChParams[channelId].status;
    5392:	4908      	ldr	r1, [pc, #32]	; (53b4 <LORAREG_GetAttr_ChIdStatus+0x48>)
    5394:	790a      	ldrb	r2, [r1, #4]
    5396:	794b      	ldrb	r3, [r1, #5]
    5398:	021b      	lsls	r3, r3, #8
    539a:	4313      	orrs	r3, r2
    539c:	798a      	ldrb	r2, [r1, #6]
    539e:	0412      	lsls	r2, r2, #16
    53a0:	4313      	orrs	r3, r2
    53a2:	79ca      	ldrb	r2, [r1, #7]
    53a4:	0612      	lsls	r2, r2, #24
    53a6:	431a      	orrs	r2, r3
    53a8:	0064      	lsls	r4, r4, #1
    53aa:	5ca3      	ldrb	r3, [r4, r2]
    53ac:	702b      	strb	r3, [r5, #0]
    53ae:	e7ee      	b.n	538e <LORAREG_GetAttr_ChIdStatus+0x22>
    53b0:	20000d40 	.word	0x20000d40
    53b4:	20001220 	.word	0x20001220

000053b8 <LORAREG_GetAttr_DutyCycleT1>:

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_DutyCycleT1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = UINT16_MAX;
    53b8:	2301      	movs	r3, #1
    53ba:	425b      	negs	r3, r3
    53bc:	8013      	strh	r3, [r2, #0]
	return LORAWAN_INVALID_PARAMETER;
}
    53be:	200a      	movs	r0, #10
    53c0:	4770      	bx	lr

000053c2 <LORAREG_GetAttr_MinDutyCycleTimer>:
#endif

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_MinDutyCycleTimer(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint32_t *)attrOutput = UINT32_MAX;
    53c2:	2301      	movs	r3, #1
    53c4:	425b      	negs	r3, r3
    53c6:	6013      	str	r3, [r2, #0]
	return LORAWAN_INVALID_PARAMETER;
}
    53c8:	200a      	movs	r0, #10
    53ca:	4770      	bx	lr

000053cc <LORAREG_GetAttr_MacRecvDelay1>:
#endif

static StackRetStatus_t LORAREG_GetAttr_MacRecvDelay1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = RECEIVE_DELAY1;
    53cc:	23fa      	movs	r3, #250	; 0xfa
    53ce:	009b      	lsls	r3, r3, #2
    53d0:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    53d2:	2008      	movs	r0, #8
    53d4:	4770      	bx	lr

000053d6 <LORAREG_GetAttr_MacRecvDelay2>:

static StackRetStatus_t LORAREG_GetAttr_MacRecvDelay2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = RECEIVE_DELAY2;
    53d6:	23fa      	movs	r3, #250	; 0xfa
    53d8:	00db      	lsls	r3, r3, #3
    53da:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    53dc:	2008      	movs	r0, #8
    53de:	4770      	bx	lr

000053e0 <LORAREG_GetAttr_MacJoinAcptDelay1>:

static StackRetStatus_t LORAREG_GetAttr_MacJoinAcptDelay1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = JOIN_ACCEPT_DELAY1;
    53e0:	4b01      	ldr	r3, [pc, #4]	; (53e8 <LORAREG_GetAttr_MacJoinAcptDelay1+0x8>)
    53e2:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    53e4:	2008      	movs	r0, #8
    53e6:	4770      	bx	lr
    53e8:	00001388 	.word	0x00001388

000053ec <LORAREG_GetAttr_MacJoinAcptDelay2>:

static StackRetStatus_t LORAREG_GetAttr_MacJoinAcptDelay2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = JOIN_ACCEPT_DELAY2;
    53ec:	4b01      	ldr	r3, [pc, #4]	; (53f4 <LORAREG_GetAttr_MacJoinAcptDelay2+0x8>)
    53ee:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    53f0:	2008      	movs	r0, #8
    53f2:	4770      	bx	lr
    53f4:	00001770 	.word	0x00001770

000053f8 <LORAREG_GetAttr_MacAckTimeout>:

static StackRetStatus_t LORAREG_GetAttr_MacAckTimeout(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = ACK_TIMEOUT;
    53f8:	23fa      	movs	r3, #250	; 0xfa
    53fa:	00db      	lsls	r3, r3, #3
    53fc:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    53fe:	2008      	movs	r0, #8
    5400:	4770      	bx	lr

00005402 <LORAREG_GetAttr_MacAdrAckDelay>:

static StackRetStatus_t LORAREG_GetAttr_MacAdrAckDelay(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = ADR_ACK_DELAY;
    5402:	2320      	movs	r3, #32
    5404:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    5406:	2008      	movs	r0, #8
    5408:	4770      	bx	lr

0000540a <LORAREG_GetAttr_MacAdrAckLimit>:

static StackRetStatus_t LORAREG_GetAttr_MacAdrAckLimit(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = ADR_ACK_LIMIT;
    540a:	2340      	movs	r3, #64	; 0x40
    540c:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    540e:	2008      	movs	r0, #8
    5410:	4770      	bx	lr

00005412 <LORAREG_GetAttr_MacMaxFcntGap>:

static StackRetStatus_t LORAREG_GetAttr_MacMaxFcntGap(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = MAX_FCNT_GAP;
    5412:	2380      	movs	r3, #128	; 0x80
    5414:	01db      	lsls	r3, r3, #7
    5416:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    5418:	2008      	movs	r0, #8
    541a:	4770      	bx	lr

0000541c <LORAREG_GetAttr_RegDefTxPwr>:

static StackRetStatus_t LORAREG_GetAttr_RegDefTxPwr(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.MacTxPower;
    541c:	2327      	movs	r3, #39	; 0x27
    541e:	4902      	ldr	r1, [pc, #8]	; (5428 <LORAREG_GetAttr_RegDefTxPwr+0xc>)
    5420:	5ccb      	ldrb	r3, [r1, r3]
    5422:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    5424:	2008      	movs	r0, #8
    5426:	4770      	bx	lr
    5428:	20001220 	.word	0x20001220

0000542c <LORAREG_GetAttr_RegDefTxDR>:

static StackRetStatus_t LORAREG_GetAttr_RegDefTxDR(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.TxCurDataRate;
    542c:	2326      	movs	r3, #38	; 0x26
    542e:	4902      	ldr	r1, [pc, #8]	; (5438 <LORAREG_GetAttr_RegDefTxDR+0xc>)
    5430:	5ccb      	ldrb	r3, [r1, r3]
    5432:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    5434:	2008      	movs	r0, #8
    5436:	4770      	bx	lr
    5438:	20001220 	.word	0x20001220

0000543c <LORAREG_GetAttr_CurChIndx>:

static StackRetStatus_t LORAREG_GetAttr_CurChIndx(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.lastUsedChannelIndex;
    543c:	232f      	movs	r3, #47	; 0x2f
    543e:	4902      	ldr	r1, [pc, #8]	; (5448 <LORAREG_GetAttr_CurChIndx+0xc>)
    5440:	5ccb      	ldrb	r3, [r1, r3]
    5442:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    5444:	2008      	movs	r0, #8
    5446:	4770      	bx	lr
    5448:	20001220 	.word	0x20001220

0000544c <LORAREG_GetAttr_DefLBTParams>:
static StackRetStatus_t LORAREG_GetAttr_DefLBTParams(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	LorawanLBTParams_t* lorawanLBTParams;
	lorawanLBTParams = (LorawanLBTParams_t *)attrOutput;
			
	lorawanLBTParams->lbtNumOfSamples	= RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount;
    544c:	4b09      	ldr	r3, [pc, #36]	; (5474 <LORAREG_GetAttr_DefLBTParams+0x28>)
    544e:	21c0      	movs	r1, #192	; 0xc0
    5450:	31ff      	adds	r1, #255	; 0xff
    5452:	5c59      	ldrb	r1, [r3, r1]
    5454:	7191      	strb	r1, [r2, #6]
	lorawanLBTParams->lbtScanPeriod		= RegParams.cmnParams.paramsType2.LBTScanPeriod;
    5456:	21be      	movs	r1, #190	; 0xbe
    5458:	31ff      	adds	r1, #255	; 0xff
    545a:	5c59      	ldrb	r1, [r3, r1]
    545c:	8011      	strh	r1, [r2, #0]
	lorawanLBTParams->lbtThreshold		= RegParams.cmnParams.paramsType2.LBTSignalThreshold;
    545e:	21df      	movs	r1, #223	; 0xdf
    5460:	0049      	lsls	r1, r1, #1
    5462:	565b      	ldrsb	r3, [r3, r1]
    5464:	8053      	strh	r3, [r2, #2]
	lorawanLBTParams->lbtTransmitOn		= LBT_ENABLE;
    5466:	2301      	movs	r3, #1
    5468:	71d3      	strb	r3, [r2, #7]
	lorawanLBTParams->maxRetryChannels	= LBT_MAX_RETRY_CHANNELS;
    546a:	3304      	adds	r3, #4
    546c:	8093      	strh	r3, [r2, #4]
	return 0;
}
    546e:	2000      	movs	r0, #0
    5470:	4770      	bx	lr
    5472:	46c0      	nop			; (mov r8, r8)
    5474:	20001220 	.word	0x20001220

00005478 <LORAREG_GetAttr_FreqT1>:
{
    5478:	b530      	push	{r4, r5, lr}
	channelId = *(uint8_t *)attrInput;
    547a:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels)
    547c:	212a      	movs	r1, #42	; 0x2a
    547e:	4820      	ldr	r0, [pc, #128]	; (5500 <LORAREG_GetAttr_FreqT1+0x88>)
    5480:	5641      	ldrsb	r1, [r0, r1]
		return LORAWAN_INVALID_PARAMETER;
    5482:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels)
    5484:	428b      	cmp	r3, r1
    5486:	dc39      	bgt.n	54fc <LORAREG_GetAttr_FreqT1+0x84>
	if (channelId < RegParams.cmnParams.paramsType1.Max_125khzChan)
    5488:	2054      	movs	r0, #84	; 0x54
    548a:	30ff      	adds	r0, #255	; 0xff
    548c:	4c1c      	ldr	r4, [pc, #112]	; (5500 <LORAREG_GetAttr_FreqT1+0x88>)
    548e:	5c24      	ldrb	r4, [r4, r0]
    5490:	42a3      	cmp	r3, r4
    5492:	d31c      	bcc.n	54ce <LORAREG_GetAttr_FreqT1+0x56>
		result = LORAWAN_INVALID_PARAMETER;
    5494:	200a      	movs	r0, #10
	else if ( (channelId < RegParams.maxChannels) && (channelId >= RegParams.cmnParams.paramsType1.Max_125khzChan) )
    5496:	428b      	cmp	r3, r1
    5498:	da30      	bge.n	54fc <LORAREG_GetAttr_FreqT1+0x84>
static uint32_t GenerateFrequency2 (uint8_t channelIndex)
{
    uint32_t channelFrequency;

    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    549a:	1b1b      	subs	r3, r3, r4
    549c:	4919      	ldr	r1, [pc, #100]	; (5504 <LORAREG_GetAttr_FreqT1+0x8c>)
    549e:	434b      	muls	r3, r1
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    54a0:	4c17      	ldr	r4, [pc, #92]	; (5500 <LORAREG_GetAttr_FreqT1+0x88>)
    54a2:	2148      	movs	r1, #72	; 0x48
    54a4:	31ff      	adds	r1, #255	; 0xff
    54a6:	5c61      	ldrb	r1, [r4, r1]
    54a8:	303f      	adds	r0, #63	; 0x3f
    54aa:	30ff      	adds	r0, #255	; 0xff
    54ac:	5c20      	ldrb	r0, [r4, r0]
    54ae:	0200      	lsls	r0, r0, #8
    54b0:	4301      	orrs	r1, r0
    54b2:	204a      	movs	r0, #74	; 0x4a
    54b4:	30ff      	adds	r0, #255	; 0xff
    54b6:	5c20      	ldrb	r0, [r4, r0]
    54b8:	0400      	lsls	r0, r0, #16
    54ba:	4308      	orrs	r0, r1
    54bc:	21a5      	movs	r1, #165	; 0xa5
    54be:	0049      	lsls	r1, r1, #1
    54c0:	5c61      	ldrb	r1, [r4, r1]
    54c2:	0609      	lsls	r1, r1, #24
    54c4:	4301      	orrs	r1, r0
    54c6:	1859      	adds	r1, r3, r1
		*(uint32_t *)attrOutput = GenerateFrequency2 (channelId);
    54c8:	6011      	str	r1, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    54ca:	2008      	movs	r0, #8
		*(uint32_t *)attrOutput = GenerateFrequency2 (channelId);
    54cc:	e016      	b.n	54fc <LORAREG_GetAttr_FreqT1+0x84>
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    54ce:	4c0c      	ldr	r4, [pc, #48]	; (5500 <LORAREG_GetAttr_FreqT1+0x88>)
    54d0:	2144      	movs	r1, #68	; 0x44
    54d2:	31ff      	adds	r1, #255	; 0xff
    54d4:	5c61      	ldrb	r1, [r4, r1]
    54d6:	380f      	subs	r0, #15
    54d8:	5c20      	ldrb	r0, [r4, r0]
    54da:	0200      	lsls	r0, r0, #8
    54dc:	4308      	orrs	r0, r1
    54de:	2146      	movs	r1, #70	; 0x46
    54e0:	31ff      	adds	r1, #255	; 0xff
    54e2:	5c61      	ldrb	r1, [r4, r1]
    54e4:	0409      	lsls	r1, r1, #16
    54e6:	4308      	orrs	r0, r1
    54e8:	21a3      	movs	r1, #163	; 0xa3
    54ea:	0049      	lsls	r1, r1, #1
    54ec:	5c61      	ldrb	r1, [r4, r1]
    54ee:	0609      	lsls	r1, r1, #24
    54f0:	4301      	orrs	r1, r0
    54f2:	4805      	ldr	r0, [pc, #20]	; (5508 <LORAREG_GetAttr_FreqT1+0x90>)
    54f4:	4343      	muls	r3, r0
    54f6:	18cb      	adds	r3, r1, r3
		*(uint32_t *)attrOutput = GenerateFrequency1 (channelId);
    54f8:	6013      	str	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    54fa:	2008      	movs	r0, #8
}
    54fc:	bd30      	pop	{r4, r5, pc}
    54fe:	46c0      	nop			; (mov r8, r8)
    5500:	20001220 	.word	0x20001220
    5504:	00186a00 	.word	0x00186a00
    5508:	00030d40 	.word	0x00030d40

0000550c <ValidateDataRateTxT1>:
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;

	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    550c:	780a      	ldrb	r2, [r1, #0]
    550e:	23a8      	movs	r3, #168	; 0xa8
    5510:	005b      	lsls	r3, r3, #1
    5512:	4903      	ldr	r1, [pc, #12]	; (5520 <ValidateDataRateTxT1+0x14>)
    5514:	5ccb      	ldrb	r3, [r1, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5516:	2008      	movs	r0, #8
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    5518:	429a      	cmp	r2, r3
    551a:	d900      	bls.n	551e <ValidateDataRateTxT1+0x12>
	{
		result = LORAWAN_INVALID_PARAMETER;
    551c:	3002      	adds	r0, #2
	}
	
	return result;
}
    551e:	4770      	bx	lr
    5520:	20001220 	.word	0x20001220

00005524 <ValidateDataRateTxT2>:
#if (AS_BAND == 1 || JPN_BAND == 1)
static StackRetStatus_t ValidateDataRateTxT2(LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    5524:	780b      	ldrb	r3, [r1, #0]
	
	if(dataRate > RegParams.minDataRate ||
    5526:	2224      	movs	r2, #36	; 0x24
    5528:	4908      	ldr	r1, [pc, #32]	; (554c <ValidateDataRateTxT2+0x28>)
    552a:	5c8a      	ldrb	r2, [r1, r2]
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
	{
		result = LORAWAN_INVALID_PARAMETER;
    552c:	200a      	movs	r0, #10
	if(dataRate > RegParams.minDataRate ||
    552e:	429a      	cmp	r2, r3
    5530:	d30a      	bcc.n	5548 <ValidateDataRateTxT2+0x24>
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    5532:	22e1      	movs	r2, #225	; 0xe1
    5534:	0052      	lsls	r2, r2, #1
    5536:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5538:	3802      	subs	r0, #2
	if(dataRate > RegParams.minDataRate ||
    553a:	07d2      	lsls	r2, r2, #31
    553c:	d504      	bpl.n	5548 <ValidateDataRateTxT2+0x24>
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    553e:	2222      	movs	r2, #34	; 0x22
    5540:	5c8a      	ldrb	r2, [r1, r2]
    5542:	429a      	cmp	r2, r3
    5544:	d900      	bls.n	5548 <ValidateDataRateTxT2+0x24>
		result = LORAWAN_INVALID_PARAMETER;
    5546:	3002      	adds	r0, #2
	}
	
	return result;
}
    5548:	4770      	bx	lr
    554a:	46c0      	nop			; (mov r8, r8)
    554c:	20001220 	.word	0x20001220

00005550 <ValidateDataRateRxT1>:
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateDataRateRxT1 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    5550:	780b      	ldrb	r3, [r1, #0]

	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    5552:	22a9      	movs	r2, #169	; 0xa9
    5554:	0052      	lsls	r2, r2, #1
    5556:	4906      	ldr	r1, [pc, #24]	; (5570 <ValidateDataRateRxT1+0x20>)
    5558:	5c8a      	ldrb	r2, [r1, r2]
	{
		result = LORAWAN_INVALID_PARAMETER;
    555a:	200a      	movs	r0, #10
	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    555c:	429a      	cmp	r2, r3
    555e:	d306      	bcc.n	556e <ValidateDataRateRxT1+0x1e>
    5560:	2252      	movs	r2, #82	; 0x52
    5562:	32ff      	adds	r2, #255	; 0xff
    5564:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5566:	3802      	subs	r0, #2
	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    5568:	429a      	cmp	r2, r3
    556a:	d900      	bls.n	556e <ValidateDataRateRxT1+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    556c:	3002      	adds	r0, #2
	}
	return result;
}
    556e:	4770      	bx	lr
    5570:	20001220 	.word	0x20001220

00005574 <ValidateDataRateRxT2>:
#if (AS_BAND == 1 || JPN_BAND == 1)
static StackRetStatus_t ValidateDataRateRxT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    5574:	780b      	ldrb	r3, [r1, #0]

    if(dataRate > RegParams.minDataRate || (
    5576:	2224      	movs	r2, #36	; 0x24
    5578:	4908      	ldr	r1, [pc, #32]	; (559c <ValidateDataRateRxT2+0x28>)
    557a:	5c8a      	ldrb	r2, [r1, r2]
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
	{
		result = LORAWAN_INVALID_PARAMETER;
    557c:	200a      	movs	r0, #10
    if(dataRate > RegParams.minDataRate || (
    557e:	429a      	cmp	r2, r3
    5580:	d30a      	bcc.n	5598 <ValidateDataRateRxT2+0x24>
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    5582:	22e1      	movs	r2, #225	; 0xe1
    5584:	0052      	lsls	r2, r2, #1
    5586:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5588:	3802      	subs	r0, #2
    if(dataRate > RegParams.minDataRate || (
    558a:	0792      	lsls	r2, r2, #30
    558c:	d504      	bpl.n	5598 <ValidateDataRateRxT2+0x24>
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    558e:	2222      	movs	r2, #34	; 0x22
    5590:	5c8a      	ldrb	r2, [r1, r2]
    5592:	429a      	cmp	r2, r3
    5594:	d900      	bls.n	5598 <ValidateDataRateRxT2+0x24>
		result = LORAWAN_INVALID_PARAMETER;
    5596:	3002      	adds	r0, #2
	}

	return result;
}
    5598:	4770      	bx	lr
    559a:	46c0      	nop			; (mov r8, r8)
    559c:	20001220 	.word	0x20001220

000055a0 <ValidateChannelId>:
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
    uint8_t channelId = *(uint8_t *)attrInput;
	
    if (channelId >= RegParams.maxChannels)
    55a0:	780a      	ldrb	r2, [r1, #0]
    55a2:	232a      	movs	r3, #42	; 0x2a
    55a4:	4903      	ldr	r1, [pc, #12]	; (55b4 <ValidateChannelId+0x14>)
    55a6:	56cb      	ldrsb	r3, [r1, r3]
    StackRetStatus_t result = LORAWAN_SUCCESS;
    55a8:	2008      	movs	r0, #8
    if (channelId >= RegParams.maxChannels)
    55aa:	429a      	cmp	r2, r3
    55ac:	db00      	blt.n	55b0 <ValidateChannelId+0x10>
    {
        result = LORAWAN_INVALID_PARAMETER ;
    55ae:	3002      	adds	r0, #2
    }
	
    return result;
}
    55b0:	4770      	bx	lr
    55b2:	46c0      	nop			; (mov r8, r8)
    55b4:	20001220 	.word	0x20001220

000055b8 <ValidateChannelIdT2>:
static StackRetStatus_t ValidateChannelIdT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
	ValChId_t val_chid;
	
	memcpy(&val_chid,attrInput,sizeof(ValChId_t));
    55b8:	780b      	ldrb	r3, [r1, #0]
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    55ba:	222a      	movs	r2, #42	; 0x2a
    55bc:	4808      	ldr	r0, [pc, #32]	; (55e0 <ValidateChannelIdT2+0x28>)
    55be:	5682      	ldrsb	r2, [r0, r2]
	 val_chid.channelIndex < RegParams.cmnParams.paramsType2.minNonDefChId))
	 {
		 retVal = LORAWAN_INVALID_PARAMETER;
    55c0:	200a      	movs	r0, #10
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    55c2:	4293      	cmp	r3, r2
    55c4:	da0a      	bge.n	55dc <ValidateChannelIdT2+0x24>
    55c6:	784a      	ldrb	r2, [r1, #1]
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    55c8:	3802      	subs	r0, #2
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    55ca:	2a00      	cmp	r2, #0
    55cc:	d106      	bne.n	55dc <ValidateChannelIdT2+0x24>
	 val_chid.channelIndex < RegParams.cmnParams.paramsType2.minNonDefChId))
    55ce:	32c1      	adds	r2, #193	; 0xc1
    55d0:	32ff      	adds	r2, #255	; 0xff
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    55d2:	4903      	ldr	r1, [pc, #12]	; (55e0 <ValidateChannelIdT2+0x28>)
    55d4:	5c8a      	ldrb	r2, [r1, r2]
    55d6:	429a      	cmp	r2, r3
    55d8:	d900      	bls.n	55dc <ValidateChannelIdT2+0x24>
		 retVal = LORAWAN_INVALID_PARAMETER;
    55da:	3002      	adds	r0, #2
	 }
	 return retVal;
}
    55dc:	4770      	bx	lr
    55de:	46c0      	nop			; (mov r8, r8)
    55e0:	20001220 	.word	0x20001220

000055e4 <LORAREG_GetAttr_DutyCycleT2>:
{
    55e4:	b530      	push	{r4, r5, lr}
    55e6:	b083      	sub	sp, #12
    55e8:	0014      	movs	r4, r2
	valChid.channelIndex = *(uint8_t *)attrInput;
    55ea:	780d      	ldrb	r5, [r1, #0]
    55ec:	a901      	add	r1, sp, #4
    55ee:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    55f0:	2301      	movs	r3, #1
    55f2:	704b      	strb	r3, [r1, #1]
    if (ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    55f4:	2015      	movs	r0, #21
    55f6:	4b0b      	ldr	r3, [pc, #44]	; (5624 <LORAREG_GetAttr_DutyCycleT2+0x40>)
    55f8:	4798      	blx	r3
    55fa:	2808      	cmp	r0, #8
    55fc:	d002      	beq.n	5604 <LORAREG_GetAttr_DutyCycleT2+0x20>
	    result = LORAWAN_INVALID_PARAMETER;
    55fe:	200a      	movs	r0, #10
}
    5600:	b003      	add	sp, #12
    5602:	bd30      	pop	{r4, r5, pc}
	    *(uint16_t *)attrOutput = RegParams.cmnParams.paramsType2.subBandDutyCycle[subBandId];
    5604:	4a08      	ldr	r2, [pc, #32]	; (5628 <LORAREG_GetAttr_DutyCycleT2+0x44>)
	    subBandId = RegParams.cmnParams.paramsType2.othChParams[channelId].subBandId;
    5606:	006b      	lsls	r3, r5, #1
    5608:	195b      	adds	r3, r3, r5
    560a:	009b      	lsls	r3, r3, #2
    560c:	18d3      	adds	r3, r2, r3
    560e:	33ab      	adds	r3, #171	; 0xab
	    *(uint16_t *)attrOutput = RegParams.cmnParams.paramsType2.subBandDutyCycle[subBandId];
    5610:	781b      	ldrb	r3, [r3, #0]
    5612:	33d4      	adds	r3, #212	; 0xd4
    5614:	005b      	lsls	r3, r3, #1
    5616:	18d2      	adds	r2, r2, r3
    5618:	7951      	ldrb	r1, [r2, #5]
    561a:	7993      	ldrb	r3, [r2, #6]
    561c:	021b      	lsls	r3, r3, #8
    561e:	430b      	orrs	r3, r1
    5620:	8023      	strh	r3, [r4, #0]
    5622:	e7ed      	b.n	5600 <LORAREG_GetAttr_DutyCycleT2+0x1c>
    5624:	000055b9 	.word	0x000055b9
    5628:	20001220 	.word	0x20001220

0000562c <LORAREG_GetAttr_MinMaxDr>:
{
    562c:	b5f0      	push	{r4, r5, r6, r7, lr}
    562e:	4694      	mov	ip, r2
{
	uint8_t i;
	
	// after updating the data range of a channel we need to check if the minimum dataRange has changed or not.
	// The user cannot set the current data rate outside the range of the data range
	uint8_t minDataRate = RegParams.minDataRate;
    5630:	4b1b      	ldr	r3, [pc, #108]	; (56a0 <LORAREG_GetAttr_MinMaxDr+0x74>)
    5632:	2124      	movs	r1, #36	; 0x24
    5634:	5c5c      	ldrb	r4, [r3, r1]
	uint8_t maxDataRate = RegParams.maxDataRate;
    5636:	3101      	adds	r1, #1
    5638:	5c5f      	ldrb	r7, [r3, r1]

	for (i = 0; i < RegParams.maxChannels; i++)
    563a:	3105      	adds	r1, #5
    563c:	565e      	ldrsb	r6, [r3, r1]
    563e:	2e00      	cmp	r6, #0
    5640:	dd28      	ble.n	5694 <LORAREG_GetAttr_MinMaxDr+0x68>
	{
		if ( (RegParams.pChParams[i].dataRange.min < minDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    5642:	0019      	movs	r1, r3
    5644:	791d      	ldrb	r5, [r3, #4]
    5646:	795b      	ldrb	r3, [r3, #5]
    5648:	021b      	lsls	r3, r3, #8
    564a:	432b      	orrs	r3, r5
    564c:	798d      	ldrb	r5, [r1, #6]
    564e:	042d      	lsls	r5, r5, #16
    5650:	432b      	orrs	r3, r5
    5652:	79cd      	ldrb	r5, [r1, #7]
    5654:	062d      	lsls	r5, r5, #24
    5656:	431d      	orrs	r5, r3
    5658:	2100      	movs	r1, #0
    565a:	e00b      	b.n	5674 <LORAREG_GetAttr_MinMaxDr+0x48>
		{
			minDataRate = RegParams.pChParams[i].dataRange.min;
		}
		if ( (RegParams.pChParams[i].dataRange.max > maxDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    565c:	7843      	ldrb	r3, [r0, #1]
    565e:	091b      	lsrs	r3, r3, #4
    5660:	42bb      	cmp	r3, r7
    5662:	dd03      	ble.n	566c <LORAREG_GetAttr_MinMaxDr+0x40>
    5664:	7800      	ldrb	r0, [r0, #0]
    5666:	2800      	cmp	r0, #0
    5668:	d000      	beq.n	566c <LORAREG_GetAttr_MinMaxDr+0x40>
		{
			maxDataRate = RegParams.pChParams[i].dataRange.max;
    566a:	001f      	movs	r7, r3
	for (i = 0; i < RegParams.maxChannels; i++)
    566c:	3101      	adds	r1, #1
    566e:	b2c9      	uxtb	r1, r1
    5670:	42b1      	cmp	r1, r6
    5672:	da0f      	bge.n	5694 <LORAREG_GetAttr_MinMaxDr+0x68>
		if ( (RegParams.pChParams[i].dataRange.min < minDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    5674:	0048      	lsls	r0, r1, #1
    5676:	1828      	adds	r0, r5, r0
    5678:	7843      	ldrb	r3, [r0, #1]
    567a:	071b      	lsls	r3, r3, #28
    567c:	0f1b      	lsrs	r3, r3, #28
    567e:	42a3      	cmp	r3, r4
    5680:	daec      	bge.n	565c <LORAREG_GetAttr_MinMaxDr+0x30>
    5682:	7802      	ldrb	r2, [r0, #0]
    5684:	2a00      	cmp	r2, #0
    5686:	d0f1      	beq.n	566c <LORAREG_GetAttr_MinMaxDr+0x40>
			minDataRate = RegParams.pChParams[i].dataRange.min;
    5688:	001c      	movs	r4, r3
		if ( (RegParams.pChParams[i].dataRange.max > maxDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    568a:	7843      	ldrb	r3, [r0, #1]
    568c:	091b      	lsrs	r3, r3, #4
    568e:	42bb      	cmp	r3, r7
    5690:	dceb      	bgt.n	566a <LORAREG_GetAttr_MinMaxDr+0x3e>
    5692:	e7eb      	b.n	566c <LORAREG_GetAttr_MinMaxDr+0x40>
	memcpy(attrOutput,&minmaxDr,sizeof(MinMaxDr_t));
    5694:	4663      	mov	r3, ip
    5696:	701c      	strb	r4, [r3, #0]
    5698:	705f      	strb	r7, [r3, #1]
}
    569a:	2008      	movs	r0, #8
    569c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    569e:	46c0      	nop			; (mov r8, r8)
    56a0:	20001220 	.word	0x20001220

000056a4 <ValidateChannelMaskCntl>:
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateChannelMaskCntl (LorawanRegionalAttributes_t attr, void *attrInput)
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t channelMaskCntl = *(uint8_t *)attrInput;
    56a4:	780b      	ldrb	r3, [r1, #0]

    // 5 is RFU for channel mask for US
    if ((channelMaskCntl == 5) || (channelMaskCntl > 7))
    56a6:	2b05      	cmp	r3, #5
    56a8:	d004      	beq.n	56b4 <ValidateChannelMaskCntl+0x10>
    StackRetStatus_t result = LORAWAN_SUCCESS;
    56aa:	2008      	movs	r0, #8
    if ((channelMaskCntl == 5) || (channelMaskCntl > 7))
    56ac:	2b07      	cmp	r3, #7
    56ae:	d900      	bls.n	56b2 <ValidateChannelMaskCntl+0xe>
    {
        result = LORAWAN_INVALID_PARAMETER;
    56b0:	3002      	adds	r0, #2
    }

    return result;
}
    56b2:	4770      	bx	lr
        result = LORAWAN_INVALID_PARAMETER;
    56b4:	200a      	movs	r0, #10
    56b6:	e7fc      	b.n	56b2 <ValidateChannelMaskCntl+0xe>

000056b8 <ValidateTxPower>:
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint8_t txPowerNew = *(uint8_t *)attrInput;
	
	//if ((txPowerNew < 5) || (txPowerNew > 10) || (txPowerNew == 6))
	if (txPowerNew > RegParams.maxTxPwrIndx)
    56b8:	780a      	ldrb	r2, [r1, #0]
    56ba:	232d      	movs	r3, #45	; 0x2d
    56bc:	4903      	ldr	r1, [pc, #12]	; (56cc <ValidateTxPower+0x14>)
    56be:	56cb      	ldrsb	r3, [r1, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    56c0:	2008      	movs	r0, #8
	if (txPowerNew > RegParams.maxTxPwrIndx)
    56c2:	429a      	cmp	r2, r3
    56c4:	dd00      	ble.n	56c8 <ValidateTxPower+0x10>
	{
		result = LORAWAN_INVALID_PARAMETER;
    56c6:	3002      	adds	r0, #2
	}

	return result;
}
    56c8:	4770      	bx	lr
    56ca:	46c0      	nop			; (mov r8, r8)
    56cc:	20001220 	.word	0x20001220

000056d0 <ValidateChannelMask>:
 */
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateChannelMask (LorawanRegionalAttributes_t attr, void *attrInput)
{
	return LORAWAN_SUCCESS;	
}
    56d0:	2008      	movs	r0, #8
    56d2:	4770      	bx	lr

000056d4 <ValidateChannelMaskT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t ValidateChannelMaskT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
    56d4:	b530      	push	{r4, r5, lr}
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
	
	uint16_t channelMask = * (uint16_t *)attrInput;
    56d6:	8809      	ldrh	r1, [r1, #0]
	
	if(channelMask != 0x0000U)
    56d8:	2900      	cmp	r1, #0
    56da:	d020      	beq.n	571e <ValidateChannelMaskT2+0x4a>
	{
		for(uint8_t i = 0; i< RegParams.maxChannels;i++)
    56dc:	232a      	movs	r3, #42	; 0x2a
    56de:	4a11      	ldr	r2, [pc, #68]	; (5724 <ValidateChannelMaskT2+0x50>)
    56e0:	56d0      	ldrsb	r0, [r2, r3]
    56e2:	2800      	cmp	r0, #0
    56e4:	dd1b      	ble.n	571e <ValidateChannelMaskT2+0x4a>
		{
			if(((channelMask && BIT0) == BIT0) && ((RegParams.pOtherChParams[i].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) != (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)))
    56e6:	7a14      	ldrb	r4, [r2, #8]
    56e8:	7a53      	ldrb	r3, [r2, #9]
    56ea:	021b      	lsls	r3, r3, #8
    56ec:	4323      	orrs	r3, r4
    56ee:	7a94      	ldrb	r4, [r2, #10]
    56f0:	0424      	lsls	r4, r4, #16
    56f2:	4323      	orrs	r3, r4
    56f4:	7ad4      	ldrb	r4, [r2, #11]
    56f6:	0624      	lsls	r4, r4, #24
    56f8:	431c      	orrs	r4, r3
    56fa:	2300      	movs	r3, #0
    56fc:	2503      	movs	r5, #3
    56fe:	e004      	b.n	570a <ValidateChannelMaskT2+0x36>
				retVal = LORAWAN_INVALID_PARAMETER;
				break;
			}
			else
			{
				channelMask = channelMask >> SHIFT1;
    5700:	0849      	lsrs	r1, r1, #1
		for(uint8_t i = 0; i< RegParams.maxChannels;i++)
    5702:	3301      	adds	r3, #1
    5704:	b2db      	uxtb	r3, r3
    5706:	4283      	cmp	r3, r0
    5708:	da09      	bge.n	571e <ValidateChannelMaskT2+0x4a>
			if(((channelMask && BIT0) == BIT0) && ((RegParams.pOtherChParams[i].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) != (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)))
    570a:	2900      	cmp	r1, #0
    570c:	d0f8      	beq.n	5700 <ValidateChannelMaskT2+0x2c>
    570e:	005a      	lsls	r2, r3, #1
    5710:	18d2      	adds	r2, r2, r3
    5712:	0092      	lsls	r2, r2, #2
    5714:	18a2      	adds	r2, r4, r2
    5716:	7ad2      	ldrb	r2, [r2, #11]
    5718:	402a      	ands	r2, r5
    571a:	2a03      	cmp	r2, #3
    571c:	d0f0      	beq.n	5700 <ValidateChannelMaskT2+0x2c>
		////ChMask can be set to 0 if ChMaskCtrl is set to 6
		return retVal = LORAWAN_SUCCESS;
	}
	
	return retVal;
}
    571e:	2008      	movs	r0, #8
    5720:	bd30      	pop	{r4, r5, pc}
    5722:	46c0      	nop			; (mov r8, r8)
    5724:	20001220 	.word	0x20001220

00005728 <ValidateChannelMaskCntlT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t ValidateChannelMaskCntlT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	uint8_t channelMaskCntl = * (uint16_t *)attrInput;
    5728:	780b      	ldrb	r3, [r1, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    572a:	2008      	movs	r0, #8
	
    if ( (channelMaskCntl != 0) && (channelMaskCntl != 6) )
    572c:	2b00      	cmp	r3, #0
    572e:	d002      	beq.n	5736 <ValidateChannelMaskCntlT2+0xe>
    5730:	2b06      	cmp	r3, #6
    5732:	d001      	beq.n	5738 <ValidateChannelMaskCntlT2+0x10>
    {
	    result = LORAWAN_INVALID_PARAMETER;
    5734:	3002      	adds	r0, #2
    }
	return result;
}
    5736:	4770      	bx	lr
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5738:	2008      	movs	r0, #8
    573a:	e7fc      	b.n	5736 <ValidateChannelMaskCntlT2+0xe>

0000573c <ValidateChMaskChCntlT2>:
{
    573c:	b510      	push	{r4, lr}
    573e:	b082      	sub	sp, #8
	ValChMaskCntl_t chMaskchCntl = * (ValChMaskCntl_t *)attrInput;
    5740:	ac01      	add	r4, sp, #4
    5742:	2204      	movs	r2, #4
    5744:	0020      	movs	r0, r4
    5746:	4b0f      	ldr	r3, [pc, #60]	; (5784 <ValidateChMaskChCntlT2+0x48>)
    5748:	4798      	blx	r3
    if ( chMaskchCntl.chnlMask || chMaskchCntl.chnlMaskCntl )
    574a:	8863      	ldrh	r3, [r4, #2]
    574c:	2b00      	cmp	r3, #0
    574e:	d104      	bne.n	575a <ValidateChMaskChCntlT2+0x1e>
    5750:	ab01      	add	r3, sp, #4
    5752:	781a      	ldrb	r2, [r3, #0]
		return LORAWAN_INVALID_PARAMETER;
    5754:	230a      	movs	r3, #10
    if ( chMaskchCntl.chnlMask || chMaskchCntl.chnlMaskCntl )
    5756:	2a00      	cmp	r2, #0
    5758:	d007      	beq.n	576a <ValidateChMaskChCntlT2+0x2e>
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    575a:	466b      	mov	r3, sp
    575c:	1d99      	adds	r1, r3, #6
    575e:	201a      	movs	r0, #26
    5760:	4b09      	ldr	r3, [pc, #36]	; (5788 <ValidateChMaskChCntlT2+0x4c>)
    5762:	4798      	blx	r3
			return LORAWAN_INVALID_PARAMETER;
    5764:	230a      	movs	r3, #10
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    5766:	2808      	cmp	r0, #8
    5768:	d002      	beq.n	5770 <ValidateChMaskChCntlT2+0x34>
}
    576a:	0018      	movs	r0, r3
    576c:	b002      	add	sp, #8
    576e:	bd10      	pop	{r4, pc}
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    5770:	a901      	add	r1, sp, #4
    5772:	3013      	adds	r0, #19
    5774:	4b05      	ldr	r3, [pc, #20]	; (578c <ValidateChMaskChCntlT2+0x50>)
    5776:	4798      	blx	r3
    5778:	0003      	movs	r3, r0
    577a:	2808      	cmp	r0, #8
    577c:	d0f5      	beq.n	576a <ValidateChMaskChCntlT2+0x2e>
			return LORAWAN_INVALID_PARAMETER;
    577e:	230a      	movs	r3, #10
    5780:	e7f3      	b.n	576a <ValidateChMaskChCntlT2+0x2e>
    5782:	46c0      	nop			; (mov r8, r8)
    5784:	0001516d 	.word	0x0001516d
    5788:	000056d5 	.word	0x000056d5
    578c:	00005729 	.word	0x00005729

00005790 <ValidateDataRate>:
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;

    if ( dataRate > RegParams.minDataRate )
    5790:	780a      	ldrb	r2, [r1, #0]
    5792:	2324      	movs	r3, #36	; 0x24
    5794:	4903      	ldr	r1, [pc, #12]	; (57a4 <ValidateDataRate+0x14>)
    5796:	5ccb      	ldrb	r3, [r1, r3]
    StackRetStatus_t result = LORAWAN_SUCCESS;
    5798:	2008      	movs	r0, #8
    if ( dataRate > RegParams.minDataRate )
    579a:	429a      	cmp	r2, r3
    579c:	d900      	bls.n	57a0 <ValidateDataRate+0x10>
    {
        result = LORAWAN_INVALID_PARAMETER;
    579e:	3002      	adds	r0, #2
    }

    return result;
}
    57a0:	4770      	bx	lr
    57a2:	46c0      	nop			; (mov r8, r8)
    57a4:	20001220 	.word	0x20001220

000057a8 <ValidateSupportedDr>:
#endif

static StackRetStatus_t ValidateSupportedDr (LorawanRegionalAttributes_t attr, void *attrInput)
{
    57a8:	b570      	push	{r4, r5, r6, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
	uint8_t  dataRate;
	dataRate = *(uint8_t *)attrInput;
    57aa:	780d      	ldrb	r5, [r1, #0]
	
	for(uint8_t i = 0; i <RegParams.maxChannels; i++)
    57ac:	232a      	movs	r3, #42	; 0x2a
    57ae:	4a14      	ldr	r2, [pc, #80]	; (5800 <ValidateSupportedDr+0x58>)
    57b0:	56d4      	ldrsb	r4, [r2, r3]
    57b2:	2c00      	cmp	r4, #0
    57b4:	dd22      	ble.n	57fc <ValidateSupportedDr+0x54>
	{
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    57b6:	7910      	ldrb	r0, [r2, #4]
    57b8:	7953      	ldrb	r3, [r2, #5]
    57ba:	021b      	lsls	r3, r3, #8
    57bc:	4303      	orrs	r3, r0
    57be:	7990      	ldrb	r0, [r2, #6]
    57c0:	0400      	lsls	r0, r0, #16
    57c2:	4303      	orrs	r3, r0
    57c4:	79d0      	ldrb	r0, [r2, #7]
    57c6:	0600      	lsls	r0, r0, #24
    57c8:	4318      	orrs	r0, r3
    57ca:	2300      	movs	r3, #0
    57cc:	002e      	movs	r6, r5
    57ce:	e003      	b.n	57d8 <ValidateSupportedDr+0x30>
	for(uint8_t i = 0; i <RegParams.maxChannels; i++)
    57d0:	3301      	adds	r3, #1
    57d2:	b2db      	uxtb	r3, r3
    57d4:	42a3      	cmp	r3, r4
    57d6:	da0f      	bge.n	57f8 <ValidateSupportedDr+0x50>
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    57d8:	005a      	lsls	r2, r3, #1
    57da:	1882      	adds	r2, r0, r2
    57dc:	7811      	ldrb	r1, [r2, #0]
    57de:	2900      	cmp	r1, #0
    57e0:	d0f6      	beq.n	57d0 <ValidateSupportedDr+0x28>
    57e2:	7851      	ldrb	r1, [r2, #1]
    57e4:	0709      	lsls	r1, r1, #28
    57e6:	0f09      	lsrs	r1, r1, #28
    57e8:	428d      	cmp	r5, r1
    57ea:	dbf1      	blt.n	57d0 <ValidateSupportedDr+0x28>
		   dataRate <= RegParams.pChParams[i].dataRange.max)
    57ec:	7852      	ldrb	r2, [r2, #1]
    57ee:	0912      	lsrs	r2, r2, #4
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    57f0:	4296      	cmp	r6, r2
    57f2:	dced      	bgt.n	57d0 <ValidateSupportedDr+0x28>
		{
			result = LORAWAN_SUCCESS;
    57f4:	2008      	movs	r0, #8
    57f6:	e000      	b.n	57fa <ValidateSupportedDr+0x52>
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    57f8:	200a      	movs	r0, #10
			break;
		}
	}
	return result;	
}
    57fa:	bd70      	pop	{r4, r5, r6, pc}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    57fc:	200a      	movs	r0, #10
    57fe:	e7fc      	b.n	57fa <ValidateSupportedDr+0x52>
    5800:	20001220 	.word	0x20001220

00005804 <ValidateRxFreqT1>:

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateRxFreqT1 (LorawanRegionalAttributes_t attr, void *attrInput)
{
    5804:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint32_t FreqNew = *(uint32_t *)attrInput;
	
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    5806:	6808      	ldr	r0, [r1, #0]
    5808:	4b07      	ldr	r3, [pc, #28]	; (5828 <ValidateRxFreqT1+0x24>)
    580a:	469c      	mov	ip, r3
    580c:	4460      	add	r0, ip
    580e:	4a07      	ldr	r2, [pc, #28]	; (582c <ValidateRxFreqT1+0x28>)
	{
		result = LORAWAN_INVALID_PARAMETER;
    5810:	230a      	movs	r3, #10
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    5812:	4290      	cmp	r0, r2
    5814:	d806      	bhi.n	5824 <ValidateRxFreqT1+0x20>
    5816:	4906      	ldr	r1, [pc, #24]	; (5830 <ValidateRxFreqT1+0x2c>)
    5818:	4b06      	ldr	r3, [pc, #24]	; (5834 <ValidateRxFreqT1+0x30>)
    581a:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    581c:	2308      	movs	r3, #8
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    581e:	2900      	cmp	r1, #0
    5820:	d000      	beq.n	5824 <ValidateRxFreqT1+0x20>
		result = LORAWAN_INVALID_PARAMETER;
    5822:	3302      	adds	r3, #2
	}
	return result;
}
    5824:	0018      	movs	r0, r3
    5826:	bd10      	pop	{r4, pc}
    5828:	c8f78f60 	.word	0xc8f78f60
    582c:	00401640 	.word	0x00401640
    5830:	000927c0 	.word	0x000927c0
    5834:	00011b15 	.word	0x00011b15

00005838 <ValidateRx1DataRateOffset>:
{
	StackRetStatus_t retVal = LORAWAN_INVALID_PARAMETER;
	
	uint8_t rx1DrOffset = *(uint8_t *)attrInput;
	
	if(rx1DrOffset <= RegParams.Rx1DrOffset)
    5838:	780a      	ldrb	r2, [r1, #0]
    583a:	232c      	movs	r3, #44	; 0x2c
    583c:	4903      	ldr	r1, [pc, #12]	; (584c <ValidateRx1DataRateOffset+0x14>)
    583e:	56cb      	ldrsb	r3, [r1, r3]
	StackRetStatus_t retVal = LORAWAN_INVALID_PARAMETER;
    5840:	200a      	movs	r0, #10
	if(rx1DrOffset <= RegParams.Rx1DrOffset)
    5842:	429a      	cmp	r2, r3
    5844:	dc00      	bgt.n	5848 <ValidateRx1DataRateOffset+0x10>
	{
		retVal = LORAWAN_SUCCESS;
    5846:	3802      	subs	r0, #2
	}
	
	return retVal;
}
    5848:	4770      	bx	lr
    584a:	46c0      	nop			; (mov r8, r8)
    584c:	20001220 	.word	0x20001220

00005850 <getSubBandId>:
}
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static uint8_t getSubBandId(uint32_t frequency)
{
    5850:	b530      	push	{r4, r5, lr}
    5852:	0004      	movs	r4, r0
	uint8_t subBandId = 0xFF;
#if (EU_BAND == 1)	|| (JPN_BAND == 1)
	for(uint8_t i = 0; i < RegParams.maxSubBands; i++)
    5854:	2329      	movs	r3, #41	; 0x29
    5856:	4a19      	ldr	r2, [pc, #100]	; (58bc <getSubBandId+0x6c>)
    5858:	5cd5      	ldrb	r5, [r2, r3]
    585a:	2d00      	cmp	r5, #0
    585c:	d02c      	beq.n	58b8 <getSubBandId+0x68>
	{
		if(frequency >= RegParams.pSubBandParams[i].freqMin && frequency <= RegParams.pSubBandParams[i].freqMax)
    585e:	0011      	movs	r1, r2
    5860:	7b13      	ldrb	r3, [r2, #12]
    5862:	7b52      	ldrb	r2, [r2, #13]
    5864:	0212      	lsls	r2, r2, #8
    5866:	431a      	orrs	r2, r3
    5868:	7b8b      	ldrb	r3, [r1, #14]
    586a:	041b      	lsls	r3, r3, #16
    586c:	431a      	orrs	r2, r3
    586e:	7bcb      	ldrb	r3, [r1, #15]
    5870:	061b      	lsls	r3, r3, #24
    5872:	4313      	orrs	r3, r2
    5874:	2000      	movs	r0, #0
    5876:	e004      	b.n	5882 <getSubBandId+0x32>
	for(uint8_t i = 0; i < RegParams.maxSubBands; i++)
    5878:	3001      	adds	r0, #1
    587a:	b2c0      	uxtb	r0, r0
    587c:	330c      	adds	r3, #12
    587e:	42a8      	cmp	r0, r5
    5880:	d018      	beq.n	58b4 <getSubBandId+0x64>
		if(frequency >= RegParams.pSubBandParams[i].freqMin && frequency <= RegParams.pSubBandParams[i].freqMax)
    5882:	781a      	ldrb	r2, [r3, #0]
    5884:	7859      	ldrb	r1, [r3, #1]
    5886:	0209      	lsls	r1, r1, #8
    5888:	4311      	orrs	r1, r2
    588a:	789a      	ldrb	r2, [r3, #2]
    588c:	0412      	lsls	r2, r2, #16
    588e:	4311      	orrs	r1, r2
    5890:	78da      	ldrb	r2, [r3, #3]
    5892:	0612      	lsls	r2, r2, #24
    5894:	430a      	orrs	r2, r1
    5896:	42a2      	cmp	r2, r4
    5898:	d8ee      	bhi.n	5878 <getSubBandId+0x28>
    589a:	791a      	ldrb	r2, [r3, #4]
    589c:	7959      	ldrb	r1, [r3, #5]
    589e:	0209      	lsls	r1, r1, #8
    58a0:	4311      	orrs	r1, r2
    58a2:	799a      	ldrb	r2, [r3, #6]
    58a4:	0412      	lsls	r2, r2, #16
    58a6:	4311      	orrs	r1, r2
    58a8:	79da      	ldrb	r2, [r3, #7]
    58aa:	0612      	lsls	r2, r2, #24
    58ac:	430a      	orrs	r2, r1
    58ae:	4294      	cmp	r4, r2
    58b0:	d8e2      	bhi.n	5878 <getSubBandId+0x28>
    58b2:	e000      	b.n	58b6 <getSubBandId+0x66>
	uint8_t subBandId = 0xFF;
    58b4:	20ff      	movs	r0, #255	; 0xff
#elif (AS_BAND == 1)
	// whole ASIA 923 spectrum is one band
	subBandId = 0;
#endif
	return subBandId;
}
    58b6:	bd30      	pop	{r4, r5, pc}
	uint8_t subBandId = 0xFF;
    58b8:	20ff      	movs	r0, #255	; 0xff
    58ba:	e7fc      	b.n	58b6 <getSubBandId+0x66>
    58bc:	20001220 	.word	0x20001220

000058c0 <ValidateFreq>:
{
    58c0:	b510      	push	{r4, lr}
    if(getSubBandId(frequencyNew) == 0xFF)
    58c2:	6808      	ldr	r0, [r1, #0]
    58c4:	4b04      	ldr	r3, [pc, #16]	; (58d8 <ValidateFreq+0x18>)
    58c6:	4798      	blx	r3
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    58c8:	2308      	movs	r3, #8
    if(getSubBandId(frequencyNew) == 0xFF)
    58ca:	28ff      	cmp	r0, #255	; 0xff
    58cc:	d001      	beq.n	58d2 <ValidateFreq+0x12>
}
    58ce:	0018      	movs	r0, r3
    58d0:	bd10      	pop	{r4, pc}
		retVal = LORAWAN_INVALID_PARAMETER;
    58d2:	3302      	adds	r3, #2
    58d4:	e7fb      	b.n	58ce <ValidateFreq+0xe>
    58d6:	46c0      	nop			; (mov r8, r8)
    58d8:	00005851 	.word	0x00005851

000058dc <UpdateChannelIdStatus>:
}
#endif

#if (NA_BAND == 1 || AU_BAND == 1 || IND_BAND == 1)
static void UpdateChannelIdStatus(uint8_t chid, bool statusNew)
{
    58dc:	b510      	push	{r4, lr}
	if(chid < RegParams.maxChannels || ((((1 << RegParams.band) & (ISM_NAAUBAND)) == 0) && chid >= RegParams.cmnParams.paramsType2.minNonDefChId))
    58de:	232a      	movs	r3, #42	; 0x2a
    58e0:	4a0e      	ldr	r2, [pc, #56]	; (591c <UpdateChannelIdStatus+0x40>)
    58e2:	56d3      	ldrsb	r3, [r2, r3]
    58e4:	4298      	cmp	r0, r3
    58e6:	db0b      	blt.n	5900 <UpdateChannelIdStatus+0x24>
    58e8:	232e      	movs	r3, #46	; 0x2e
    58ea:	5cd2      	ldrb	r2, [r2, r3]
    58ec:	3b22      	subs	r3, #34	; 0x22
    58ee:	4113      	asrs	r3, r2
    58f0:	07db      	lsls	r3, r3, #31
    58f2:	d412      	bmi.n	591a <UpdateChannelIdStatus+0x3e>
    58f4:	23e0      	movs	r3, #224	; 0xe0
    58f6:	005b      	lsls	r3, r3, #1
    58f8:	4a08      	ldr	r2, [pc, #32]	; (591c <UpdateChannelIdStatus+0x40>)
    58fa:	5cd3      	ldrb	r3, [r2, r3]
    58fc:	4283      	cmp	r3, r0
    58fe:	d80c      	bhi.n	591a <UpdateChannelIdStatus+0x3e>
	{
		RegParams.pChParams[chid].status = statusNew;
    5900:	4c06      	ldr	r4, [pc, #24]	; (591c <UpdateChannelIdStatus+0x40>)
    5902:	7923      	ldrb	r3, [r4, #4]
    5904:	7962      	ldrb	r2, [r4, #5]
    5906:	0212      	lsls	r2, r2, #8
    5908:	431a      	orrs	r2, r3
    590a:	79a3      	ldrb	r3, [r4, #6]
    590c:	041b      	lsls	r3, r3, #16
    590e:	431a      	orrs	r2, r3
    5910:	79e3      	ldrb	r3, [r4, #7]
    5912:	061b      	lsls	r3, r3, #24
    5914:	4313      	orrs	r3, r2
    5916:	0040      	lsls	r0, r0, #1
    5918:	54c1      	strb	r1, [r0, r3]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
#endif

		
	}
}
    591a:	bd10      	pop	{r4, pc}
    591c:	20001220 	.word	0x20001220

00005920 <UpdateChannelIdStatusT2>:
#endif

#if ((EU_BAND) == 1)
static void UpdateChannelIdStatusT2(uint8_t chid, bool statusNew)
{
    5920:	b530      	push	{r4, r5, lr}
	if(chid < RegParams.maxChannels && chid >= RegParams.cmnParams.paramsType2.minNonDefChId &&
    5922:	232a      	movs	r3, #42	; 0x2a
    5924:	4a3a      	ldr	r2, [pc, #232]	; (5a10 <UpdateChannelIdStatusT2+0xf0>)
    5926:	56d3      	ldrsb	r3, [r2, r3]
    5928:	4298      	cmp	r0, r3
    592a:	da17      	bge.n	595c <UpdateChannelIdStatusT2+0x3c>
    592c:	23e0      	movs	r3, #224	; 0xe0
    592e:	005b      	lsls	r3, r3, #1
    5930:	5cd3      	ldrb	r3, [r2, r3]
    5932:	4283      	cmp	r3, r0
    5934:	d812      	bhi.n	595c <UpdateChannelIdStatusT2+0x3c>
	   (RegParams.pOtherChParams[chid].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) == (FREQUENCY_DEFINED | DATA_RANGE_DEFINED))
    5936:	0042      	lsls	r2, r0, #1
    5938:	1812      	adds	r2, r2, r0
    593a:	0092      	lsls	r2, r2, #2
    593c:	4d34      	ldr	r5, [pc, #208]	; (5a10 <UpdateChannelIdStatusT2+0xf0>)
    593e:	7a2b      	ldrb	r3, [r5, #8]
    5940:	7a6c      	ldrb	r4, [r5, #9]
    5942:	0224      	lsls	r4, r4, #8
    5944:	431c      	orrs	r4, r3
    5946:	7aab      	ldrb	r3, [r5, #10]
    5948:	041b      	lsls	r3, r3, #16
    594a:	431c      	orrs	r4, r3
    594c:	7aeb      	ldrb	r3, [r5, #11]
    594e:	061b      	lsls	r3, r3, #24
    5950:	4323      	orrs	r3, r4
    5952:	189b      	adds	r3, r3, r2
	if(chid < RegParams.maxChannels && chid >= RegParams.cmnParams.paramsType2.minNonDefChId &&
    5954:	7adb      	ldrb	r3, [r3, #11]
    5956:	43db      	mvns	r3, r3
    5958:	079b      	lsls	r3, r3, #30
    595a:	d000      	beq.n	595e <UpdateChannelIdStatusT2+0x3e>
				 }
			}
			RegParams.pSubBandParams[subBandId].subBandTimeout = 0;
		}
	}
}
    595c:	bd30      	pop	{r4, r5, pc}
		RegParams.pChParams[chid].status = statusNew;
    595e:	002b      	movs	r3, r5
    5960:	792c      	ldrb	r4, [r5, #4]
    5962:	796d      	ldrb	r5, [r5, #5]
    5964:	022d      	lsls	r5, r5, #8
    5966:	4325      	orrs	r5, r4
    5968:	799c      	ldrb	r4, [r3, #6]
    596a:	0424      	lsls	r4, r4, #16
    596c:	4325      	orrs	r5, r4
    596e:	79dc      	ldrb	r4, [r3, #7]
    5970:	0624      	lsls	r4, r4, #24
    5972:	432c      	orrs	r4, r5
    5974:	0040      	lsls	r0, r0, #1
    5976:	5501      	strb	r1, [r0, r4]
		if(((1 << RegParams.band) & (ISM_EUBAND)) != 0 && statusNew == DISABLED)
    5978:	202e      	movs	r0, #46	; 0x2e
    597a:	5c18      	ldrb	r0, [r3, r0]
    597c:	2303      	movs	r3, #3
    597e:	4103      	asrs	r3, r0
    5980:	07db      	lsls	r3, r3, #31
    5982:	d5eb      	bpl.n	595c <UpdateChannelIdStatusT2+0x3c>
    5984:	2900      	cmp	r1, #0
    5986:	d1e9      	bne.n	595c <UpdateChannelIdStatusT2+0x3c>
			subBandId = RegParams.pOtherChParams[chid].subBandId;
    5988:	4b21      	ldr	r3, [pc, #132]	; (5a10 <UpdateChannelIdStatusT2+0xf0>)
    598a:	7a1c      	ldrb	r4, [r3, #8]
    598c:	7a59      	ldrb	r1, [r3, #9]
    598e:	0209      	lsls	r1, r1, #8
    5990:	4321      	orrs	r1, r4
    5992:	7a9c      	ldrb	r4, [r3, #10]
    5994:	0424      	lsls	r4, r4, #16
    5996:	4321      	orrs	r1, r4
    5998:	7adc      	ldrb	r4, [r3, #11]
    599a:	0624      	lsls	r4, r4, #24
    599c:	430c      	orrs	r4, r1
    599e:	18a2      	adds	r2, r4, r2
    59a0:	7a15      	ldrb	r5, [r2, #8]
			for(uint8_t i = 0; i < RegParams.maxChannels; i++)
    59a2:	222a      	movs	r2, #42	; 0x2a
    59a4:	5698      	ldrsb	r0, [r3, r2]
    59a6:	2800      	cmp	r0, #0
    59a8:	dd1c      	ble.n	59e4 <UpdateChannelIdStatusT2+0xc4>
				if(RegParams.pChParams[i].status == ENABLED &&
    59aa:	001a      	movs	r2, r3
    59ac:	7919      	ldrb	r1, [r3, #4]
    59ae:	795b      	ldrb	r3, [r3, #5]
    59b0:	021b      	lsls	r3, r3, #8
    59b2:	430b      	orrs	r3, r1
    59b4:	7991      	ldrb	r1, [r2, #6]
    59b6:	0409      	lsls	r1, r1, #16
    59b8:	430b      	orrs	r3, r1
    59ba:	79d1      	ldrb	r1, [r2, #7]
    59bc:	0609      	lsls	r1, r1, #24
    59be:	4319      	orrs	r1, r3
    59c0:	2300      	movs	r3, #0
    59c2:	e003      	b.n	59cc <UpdateChannelIdStatusT2+0xac>
			for(uint8_t i = 0; i < RegParams.maxChannels; i++)
    59c4:	3301      	adds	r3, #1
    59c6:	b2db      	uxtb	r3, r3
    59c8:	4283      	cmp	r3, r0
    59ca:	da0b      	bge.n	59e4 <UpdateChannelIdStatusT2+0xc4>
				if(RegParams.pChParams[i].status == ENABLED &&
    59cc:	005a      	lsls	r2, r3, #1
    59ce:	5c52      	ldrb	r2, [r2, r1]
    59d0:	2a00      	cmp	r2, #0
    59d2:	d0f7      	beq.n	59c4 <UpdateChannelIdStatusT2+0xa4>
				 subBandId == RegParams.pOtherChParams[i].subBandId)
    59d4:	005a      	lsls	r2, r3, #1
    59d6:	18d2      	adds	r2, r2, r3
    59d8:	0092      	lsls	r2, r2, #2
    59da:	18a2      	adds	r2, r4, r2
				if(RegParams.pChParams[i].status == ENABLED &&
    59dc:	7a12      	ldrb	r2, [r2, #8]
    59de:	42aa      	cmp	r2, r5
    59e0:	d1f0      	bne.n	59c4 <UpdateChannelIdStatusT2+0xa4>
    59e2:	e7bb      	b.n	595c <UpdateChannelIdStatusT2+0x3c>
			RegParams.pSubBandParams[subBandId].subBandTimeout = 0;
    59e4:	490a      	ldr	r1, [pc, #40]	; (5a10 <UpdateChannelIdStatusT2+0xf0>)
    59e6:	7b0a      	ldrb	r2, [r1, #12]
    59e8:	7b4b      	ldrb	r3, [r1, #13]
    59ea:	021b      	lsls	r3, r3, #8
    59ec:	4313      	orrs	r3, r2
    59ee:	7b8a      	ldrb	r2, [r1, #14]
    59f0:	0412      	lsls	r2, r2, #16
    59f2:	4313      	orrs	r3, r2
    59f4:	7bca      	ldrb	r2, [r1, #15]
    59f6:	0612      	lsls	r2, r2, #24
    59f8:	431a      	orrs	r2, r3
    59fa:	006b      	lsls	r3, r5, #1
    59fc:	195d      	adds	r5, r3, r5
    59fe:	00ad      	lsls	r5, r5, #2
    5a00:	18ad      	adds	r5, r5, r2
    5a02:	2300      	movs	r3, #0
    5a04:	722b      	strb	r3, [r5, #8]
    5a06:	726b      	strb	r3, [r5, #9]
    5a08:	72ab      	strb	r3, [r5, #10]
    5a0a:	72eb      	strb	r3, [r5, #11]
    5a0c:	e7a6      	b.n	595c <UpdateChannelIdStatusT2+0x3c>
    5a0e:	46c0      	nop			; (mov r8, r8)
    5a10:	20001220 	.word	0x20001220

00005a14 <setChannelIdStatusT2>:
{
    5a14:	b570      	push	{r4, r5, r6, lr}
    5a16:	b082      	sub	sp, #8
	memcpy(&updateChid,attrInput,sizeof(UpdateChId_t));
    5a18:	780d      	ldrb	r5, [r1, #0]
    5a1a:	784e      	ldrb	r6, [r1, #1]
	valChid.channelIndex = updateChid.channelIndex;
    5a1c:	a901      	add	r1, sp, #4
    5a1e:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = /*WITHOUT_DEFAULT_CHANNELS*/ALL_CHANNELS;
    5a20:	2301      	movs	r3, #1
    5a22:	704b      	strb	r3, [r1, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    5a24:	2015      	movs	r0, #21
    5a26:	4b0c      	ldr	r3, [pc, #48]	; (5a58 <setChannelIdStatusT2+0x44>)
    5a28:	4798      	blx	r3
    5a2a:	0004      	movs	r4, r0
    5a2c:	2808      	cmp	r0, #8
    5a2e:	d003      	beq.n	5a38 <setChannelIdStatusT2+0x24>
		retVal = LORAWAN_INVALID_PARAMETER;
    5a30:	240a      	movs	r4, #10
}
    5a32:	0020      	movs	r0, r4
    5a34:	b002      	add	sp, #8
    5a36:	bd70      	pop	{r4, r5, r6, pc}
		if(RegParams.band ==  ISM_IND865)
    5a38:	232e      	movs	r3, #46	; 0x2e
    5a3a:	4a08      	ldr	r2, [pc, #32]	; (5a5c <setChannelIdStatusT2+0x48>)
    5a3c:	5cd3      	ldrb	r3, [r2, r3]
    5a3e:	2b0f      	cmp	r3, #15
    5a40:	d004      	beq.n	5a4c <setChannelIdStatusT2+0x38>
		    UpdateChannelIdStatusT2(updateChid.channelIndex,updateChid.statusNew);
    5a42:	0031      	movs	r1, r6
    5a44:	0028      	movs	r0, r5
    5a46:	4b06      	ldr	r3, [pc, #24]	; (5a60 <setChannelIdStatusT2+0x4c>)
    5a48:	4798      	blx	r3
    5a4a:	e7f2      	b.n	5a32 <setChannelIdStatusT2+0x1e>
			UpdateChannelIdStatus(updateChid.channelIndex,updateChid.statusNew);
    5a4c:	0031      	movs	r1, r6
    5a4e:	0028      	movs	r0, r5
    5a50:	4b04      	ldr	r3, [pc, #16]	; (5a64 <setChannelIdStatusT2+0x50>)
    5a52:	4798      	blx	r3
    5a54:	e7ed      	b.n	5a32 <setChannelIdStatusT2+0x1e>
    5a56:	46c0      	nop			; (mov r8, r8)
    5a58:	000055b9 	.word	0x000055b9
    5a5c:	20001220 	.word	0x20001220
    5a60:	00005921 	.word	0x00005921
    5a64:	000058dd 	.word	0x000058dd

00005a68 <UpdateChannelIdStatusT3>:
#endif

#if (AS_BAND == 1 || JPN_BAND == 1)
static void UpdateChannelIdStatusT3(uint8_t chid, bool statusNew)
{
    5a68:	b510      	push	{r4, lr}
	RegParams.pChParams[chid].status = statusNew;
    5a6a:	4b0e      	ldr	r3, [pc, #56]	; (5aa4 <UpdateChannelIdStatusT3+0x3c>)
    5a6c:	791a      	ldrb	r2, [r3, #4]
    5a6e:	795c      	ldrb	r4, [r3, #5]
    5a70:	0224      	lsls	r4, r4, #8
    5a72:	4314      	orrs	r4, r2
    5a74:	799a      	ldrb	r2, [r3, #6]
    5a76:	0412      	lsls	r2, r2, #16
    5a78:	4314      	orrs	r4, r2
    5a7a:	79da      	ldrb	r2, [r3, #7]
    5a7c:	0612      	lsls	r2, r2, #24
    5a7e:	4322      	orrs	r2, r4
    5a80:	0044      	lsls	r4, r0, #1
    5a82:	54a1      	strb	r1, [r4, r2]
#endif
	
#if (ENABLE_PDS == 1)
	PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
#endif
	if( RegParams.band == ISM_JPN923)
    5a84:	222e      	movs	r2, #46	; 0x2e
    5a86:	5c9b      	ldrb	r3, [r3, r2]
    5a88:	2b05      	cmp	r3, #5
    5a8a:	d000      	beq.n	5a8e <UpdateChannelIdStatusT3+0x26>
	{
		RegParams.cmnParams.paramsType2.channelTimer[chid] = 0;
	}

}
    5a8c:	bd10      	pop	{r4, pc}
		RegParams.cmnParams.paramsType2.channelTimer[chid] = 0;
    5a8e:	3058      	adds	r0, #88	; 0x58
    5a90:	0080      	lsls	r0, r0, #2
    5a92:	4b04      	ldr	r3, [pc, #16]	; (5aa4 <UpdateChannelIdStatusT3+0x3c>)
    5a94:	1818      	adds	r0, r3, r0
    5a96:	2300      	movs	r3, #0
    5a98:	7203      	strb	r3, [r0, #8]
    5a9a:	7243      	strb	r3, [r0, #9]
    5a9c:	7283      	strb	r3, [r0, #10]
    5a9e:	72c3      	strb	r3, [r0, #11]
}
    5aa0:	e7f4      	b.n	5a8c <UpdateChannelIdStatusT3+0x24>
    5aa2:	46c0      	nop			; (mov r8, r8)
    5aa4:	20001220 	.word	0x20001220

00005aa8 <UpdateChannelIdStatusT4>:
#endif

#if (KR_BAND == 1)
static void UpdateChannelIdStatusT4(uint8_t chid, bool statusNew)
{
    5aa8:	b510      	push	{r4, lr}
	RegParams.pChParams[chid].status = statusNew;
    5aaa:	4c18      	ldr	r4, [pc, #96]	; (5b0c <UpdateChannelIdStatusT4+0x64>)
    5aac:	7923      	ldrb	r3, [r4, #4]
    5aae:	7962      	ldrb	r2, [r4, #5]
    5ab0:	0212      	lsls	r2, r2, #8
    5ab2:	431a      	orrs	r2, r3
    5ab4:	79a3      	ldrb	r3, [r4, #6]
    5ab6:	041b      	lsls	r3, r3, #16
    5ab8:	431a      	orrs	r2, r3
    5aba:	79e3      	ldrb	r3, [r4, #7]
    5abc:	061b      	lsls	r3, r3, #24
    5abe:	4313      	orrs	r3, r2
    5ac0:	0042      	lsls	r2, r0, #1
    5ac2:	54d1      	strb	r1, [r2, r3]
	
#if (ENABLE_PDS == 1)
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
#endif
	
	if(statusNew == ENABLED)
    5ac4:	2900      	cmp	r1, #0
    5ac6:	d01c      	beq.n	5b02 <UpdateChannelIdStatusT4+0x5a>
	{
		if(RegParams.pOtherChParams[chid].ulfrequency < FREQ_922100KHZ)
    5ac8:	7a22      	ldrb	r2, [r4, #8]
    5aca:	7a63      	ldrb	r3, [r4, #9]
    5acc:	021b      	lsls	r3, r3, #8
    5ace:	4313      	orrs	r3, r2
    5ad0:	7aa2      	ldrb	r2, [r4, #10]
    5ad2:	0412      	lsls	r2, r2, #16
    5ad4:	4313      	orrs	r3, r2
    5ad6:	7ae2      	ldrb	r2, [r4, #11]
    5ad8:	0612      	lsls	r2, r2, #24
    5ada:	431a      	orrs	r2, r3
    5adc:	0043      	lsls	r3, r0, #1
    5ade:	1818      	adds	r0, r3, r0
    5ae0:	0080      	lsls	r0, r0, #2
    5ae2:	1810      	adds	r0, r2, r0
    5ae4:	7803      	ldrb	r3, [r0, #0]
    5ae6:	7842      	ldrb	r2, [r0, #1]
    5ae8:	0212      	lsls	r2, r2, #8
    5aea:	431a      	orrs	r2, r3
    5aec:	7883      	ldrb	r3, [r0, #2]
    5aee:	041b      	lsls	r3, r3, #16
    5af0:	431a      	orrs	r2, r3
    5af2:	78c3      	ldrb	r3, [r0, #3]
    5af4:	061b      	lsls	r3, r3, #24
    5af6:	4313      	orrs	r3, r2
    5af8:	4a05      	ldr	r2, [pc, #20]	; (5b10 <UpdateChannelIdStatusT4+0x68>)
    5afa:	4293      	cmp	r3, r2
    5afc:	d902      	bls.n	5b04 <UpdateChannelIdStatusT4+0x5c>
		{
			RegParams.pOtherChParams[chid].maxEIRP = DEFAULT_EIRP_KR_LF;
		}
		else
		{
			RegParams.pOtherChParams[chid].maxEIRP = DEFAULT_EIRP_KR_HF;
    5afe:	230e      	movs	r3, #14
    5b00:	7283      	strb	r3, [r0, #10]
#if (ENABLE_PDS == 1)
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
#endif

	}
}
    5b02:	bd10      	pop	{r4, pc}
			RegParams.pOtherChParams[chid].maxEIRP = DEFAULT_EIRP_KR_LF;
    5b04:	230a      	movs	r3, #10
    5b06:	7283      	strb	r3, [r0, #10]
    5b08:	e7fb      	b.n	5b02 <UpdateChannelIdStatusT4+0x5a>
    5b0a:	46c0      	nop			; (mov r8, r8)
    5b0c:	20001220 	.word	0x20001220
    5b10:	36f6211f 	.word	0x36f6211f

00005b14 <setChannelIdStatusT3>:
{
    5b14:	b570      	push	{r4, r5, r6, lr}
    5b16:	b082      	sub	sp, #8
	memcpy(&updateChid,attrInput,sizeof(UpdateChId_t));
    5b18:	780d      	ldrb	r5, [r1, #0]
    5b1a:	784e      	ldrb	r6, [r1, #1]
	valChid.channelIndex = updateChid.channelIndex;
    5b1c:	a901      	add	r1, sp, #4
    5b1e:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    5b20:	2301      	movs	r3, #1
    5b22:	704b      	strb	r3, [r1, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    5b24:	2015      	movs	r0, #21
    5b26:	4b0c      	ldr	r3, [pc, #48]	; (5b58 <setChannelIdStatusT3+0x44>)
    5b28:	4798      	blx	r3
    5b2a:	0004      	movs	r4, r0
    5b2c:	2808      	cmp	r0, #8
    5b2e:	d003      	beq.n	5b38 <setChannelIdStatusT3+0x24>
		retVal = LORAWAN_INVALID_PARAMETER;
    5b30:	240a      	movs	r4, #10
}
    5b32:	0020      	movs	r0, r4
    5b34:	b002      	add	sp, #8
    5b36:	bd70      	pop	{r4, r5, r6, pc}
		if( RegParams.band == ISM_KR920)
    5b38:	232e      	movs	r3, #46	; 0x2e
    5b3a:	4a08      	ldr	r2, [pc, #32]	; (5b5c <setChannelIdStatusT3+0x48>)
    5b3c:	5cd3      	ldrb	r3, [r2, r3]
    5b3e:	2b04      	cmp	r3, #4
    5b40:	d004      	beq.n	5b4c <setChannelIdStatusT3+0x38>
		    UpdateChannelIdStatusT3(updateChid.channelIndex,updateChid.statusNew);
    5b42:	0031      	movs	r1, r6
    5b44:	0028      	movs	r0, r5
    5b46:	4b06      	ldr	r3, [pc, #24]	; (5b60 <setChannelIdStatusT3+0x4c>)
    5b48:	4798      	blx	r3
    5b4a:	e7f2      	b.n	5b32 <setChannelIdStatusT3+0x1e>
			UpdateChannelIdStatusT4(updateChid.channelIndex,updateChid.statusNew);
    5b4c:	0031      	movs	r1, r6
    5b4e:	0028      	movs	r0, r5
    5b50:	4b04      	ldr	r3, [pc, #16]	; (5b64 <setChannelIdStatusT3+0x50>)
    5b52:	4798      	blx	r3
    5b54:	e7ed      	b.n	5b32 <setChannelIdStatusT3+0x1e>
    5b56:	46c0      	nop			; (mov r8, r8)
    5b58:	000055b9 	.word	0x000055b9
    5b5c:	20001220 	.word	0x20001220
    5b60:	00005a69 	.word	0x00005a69
    5b64:	00005aa9 	.word	0x00005aa9

00005b68 <EnableChannels2>:
#endif

#if ((NA_BAND) == 1 || (AU_BAND) == 1)
static void EnableChannels2(uint8_t startIndx, uint8_t endIndx, uint16_t chMask)
{
    5b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b6a:	46ce      	mov	lr, r9
    5b6c:	4647      	mov	r7, r8
    5b6e:	b580      	push	{r7, lr}
    5b70:	0004      	movs	r4, r0
    5b72:	000f      	movs	r7, r1
    5b74:	0015      	movs	r5, r2
	uint8_t i = 0;
	
	for(i = startIndx; i <= endIndx; i++)
    5b76:	4288      	cmp	r0, r1
    5b78:	d812      	bhi.n	5ba0 <EnableChannels2+0x38>
	{
		if((chMask & (0x0001)) == 0x0001)
    5b7a:	2601      	movs	r6, #1
		{
			UpdateChannelIdStatus(i, ENABLED);
    5b7c:	4b0a      	ldr	r3, [pc, #40]	; (5ba8 <EnableChannels2+0x40>)
    5b7e:	4699      	mov	r9, r3
		}
		else
		{
			UpdateChannelIdStatus(i, DISABLED);
    5b80:	4698      	mov	r8, r3
    5b82:	e007      	b.n	5b94 <EnableChannels2+0x2c>
    5b84:	2100      	movs	r1, #0
    5b86:	0020      	movs	r0, r4
    5b88:	47c0      	blx	r8
		}
		chMask = chMask >> SHIFT1;
    5b8a:	086d      	lsrs	r5, r5, #1
	for(i = startIndx; i <= endIndx; i++)
    5b8c:	3401      	adds	r4, #1
    5b8e:	b2e4      	uxtb	r4, r4
    5b90:	42a7      	cmp	r7, r4
    5b92:	d305      	bcc.n	5ba0 <EnableChannels2+0x38>
		if((chMask & (0x0001)) == 0x0001)
    5b94:	422e      	tst	r6, r5
    5b96:	d0f5      	beq.n	5b84 <EnableChannels2+0x1c>
			UpdateChannelIdStatus(i, ENABLED);
    5b98:	0031      	movs	r1, r6
    5b9a:	0020      	movs	r0, r4
    5b9c:	47c8      	blx	r9
    5b9e:	e7f4      	b.n	5b8a <EnableChannels2+0x22>
	}
}
    5ba0:	bc0c      	pop	{r2, r3}
    5ba2:	4690      	mov	r8, r2
    5ba4:	4699      	mov	r9, r3
    5ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5ba8:	000058dd 	.word	0x000058dd

00005bac <ValidateFrequencyAS>:
 */
#if (AS_BAND == 1)
static StackRetStatus_t ValidateFrequencyAS (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint32_t frequencyNew = * (uint32_t *)attrInput;
    5bac:	680b      	ldr	r3, [r1, #0]

    /*Bands Supporting Freq 923-925MHz*/
    if(RegParams.band == ISM_BRN923 || RegParams.band == ISM_CMB923 || RegParams.band == ISM_INS923 || RegParams.band == ISM_LAOS923)
    5bae:	222e      	movs	r2, #46	; 0x2e
    5bb0:	4919      	ldr	r1, [pc, #100]	; (5c18 <ValidateFrequencyAS+0x6c>)
    5bb2:	5c8a      	ldrb	r2, [r1, r2]
    5bb4:	1f91      	subs	r1, r2, #6
    5bb6:	2903      	cmp	r1, #3
    5bb8:	d808      	bhi.n	5bcc <ValidateFrequencyAS+0x20>
	{
		if ( (frequencyNew < FREQ_923000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    5bba:	4a18      	ldr	r2, [pc, #96]	; (5c1c <ValidateFrequencyAS+0x70>)
    5bbc:	4694      	mov	ip, r2
    5bbe:	4463      	add	r3, ip
    5bc0:	4a17      	ldr	r2, [pc, #92]	; (5c20 <ValidateFrequencyAS+0x74>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5bc2:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_923000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    5bc4:	4293      	cmp	r3, r2
    5bc6:	d900      	bls.n	5bca <ValidateFrequencyAS+0x1e>
		{
			result = LORAWAN_INVALID_PARAMETER;
    5bc8:	3002      	adds	r0, #2
	else
	{
		result = LORAWAN_INVALID_PARAMETER;
	}
	return result;
}
    5bca:	4770      	bx	lr
	else if(RegParams.band == ISM_NZ923)
    5bcc:	2a0a      	cmp	r2, #10
    5bce:	d011      	beq.n	5bf4 <ValidateFrequencyAS+0x48>
	else if(RegParams.band == ISM_SP923 || RegParams.band == ISM_THAI923 || RegParams.band == ISM_VTM923)
    5bd0:	2a0b      	cmp	r2, #11
    5bd2:	d018      	beq.n	5c06 <ValidateFrequencyAS+0x5a>
    5bd4:	0011      	movs	r1, r2
    5bd6:	390d      	subs	r1, #13
    5bd8:	2901      	cmp	r1, #1
    5bda:	d914      	bls.n	5c06 <ValidateFrequencyAS+0x5a>
		result = LORAWAN_INVALID_PARAMETER;
    5bdc:	200a      	movs	r0, #10
	else if(RegParams.band == ISM_TWN923)
    5bde:	2a0c      	cmp	r2, #12
    5be0:	d1f3      	bne.n	5bca <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_922000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    5be2:	4a10      	ldr	r2, [pc, #64]	; (5c24 <ValidateFrequencyAS+0x78>)
    5be4:	4694      	mov	ip, r2
    5be6:	4463      	add	r3, ip
    5be8:	4a0f      	ldr	r2, [pc, #60]	; (5c28 <ValidateFrequencyAS+0x7c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5bea:	3802      	subs	r0, #2
		if ( (frequencyNew < FREQ_922000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    5bec:	4293      	cmp	r3, r2
    5bee:	d9ec      	bls.n	5bca <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    5bf0:	3002      	adds	r0, #2
    5bf2:	e7ea      	b.n	5bca <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_915000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    5bf4:	4a0d      	ldr	r2, [pc, #52]	; (5c2c <ValidateFrequencyAS+0x80>)
    5bf6:	4694      	mov	ip, r2
    5bf8:	4463      	add	r3, ip
    5bfa:	4a0d      	ldr	r2, [pc, #52]	; (5c30 <ValidateFrequencyAS+0x84>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5bfc:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_915000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    5bfe:	4293      	cmp	r3, r2
    5c00:	d9e3      	bls.n	5bca <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    5c02:	3002      	adds	r0, #2
    5c04:	e7e1      	b.n	5bca <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_920000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    5c06:	4a0b      	ldr	r2, [pc, #44]	; (5c34 <ValidateFrequencyAS+0x88>)
    5c08:	4694      	mov	ip, r2
    5c0a:	4463      	add	r3, ip
    5c0c:	4a0a      	ldr	r2, [pc, #40]	; (5c38 <ValidateFrequencyAS+0x8c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5c0e:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_920000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    5c10:	4293      	cmp	r3, r2
    5c12:	d9da      	bls.n	5bca <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    5c14:	3002      	adds	r0, #2
    5c16:	e7d8      	b.n	5bca <ValidateFrequencyAS+0x1e>
    5c18:	20001220 	.word	0x20001220
    5c1c:	c8fc2340 	.word	0xc8fc2340
    5c20:	001e8480 	.word	0x001e8480
    5c24:	c90b6580 	.word	0xc90b6580
    5c28:	005b8d80 	.word	0x005b8d80
    5c2c:	c9763540 	.word	0xc9763540
    5c30:	00c65d40 	.word	0x00c65d40
    5c34:	c929ea00 	.word	0xc929ea00
    5c38:	004c4b40 	.word	0x004c4b40

00005c3c <setTxParams>:
}
#endif

#if ( AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t setTxParams(LorawanRegionalAttributes_t attr, void *attrInput)
{
    5c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
	TxParams_t updateTxParams;

	memcpy(&updateTxParams,attrInput,sizeof(TxParams_t));
    5c3e:	780d      	ldrb	r5, [r1, #0]
    5c40:	7849      	ldrb	r1, [r1, #1]
    5c42:	084a      	lsrs	r2, r1, #1
	
	RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime = updateTxParams.uplinkDwellTime;
    5c44:	4809      	ldr	r0, [pc, #36]	; (5c6c <setTxParams+0x30>)
    5c46:	24e1      	movs	r4, #225	; 0xe1
    5c48:	0064      	lsls	r4, r4, #1
    5c4a:	2601      	movs	r6, #1
    5c4c:	4031      	ands	r1, r6
    5c4e:	5d03      	ldrb	r3, [r0, r4]
    5c50:	2701      	movs	r7, #1
    5c52:	43bb      	bics	r3, r7
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime = updateTxParams.downlinkDwellTime;
    5c54:	4032      	ands	r2, r6
    5c56:	0052      	lsls	r2, r2, #1
    5c58:	430b      	orrs	r3, r1
    5c5a:	2102      	movs	r1, #2
    5c5c:	438b      	bics	r3, r1
    5c5e:	4313      	orrs	r3, r2
    5c60:	5503      	strb	r3, [r0, r4]
	RegParams.maxTxPwr = updateTxParams.maxEIRP;
    5c62:	2328      	movs	r3, #40	; 0x28
    5c64:	54c5      	strb	r5, [r0, r3]
	
	return LORAWAN_SUCCESS;
}
    5c66:	2008      	movs	r0, #8
    5c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c6a:	46c0      	nop			; (mov r8, r8)
    5c6c:	20001220 	.word	0x20001220

00005c70 <setJoinSuccess>:
#if (ENABLE_PDS == 1)
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
#endif
#endif
	return status;
}
    5c70:	2008      	movs	r0, #8
    5c72:	4770      	bx	lr

00005c74 <setEnableAllChs>:
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
	PDS_STORE(RegParams.regParamItems.lastUsedSB);
#endif
#endif	
	return status;
}
    5c74:	2008      	movs	r0, #8
    5c76:	4770      	bx	lr

00005c78 <setChlistDefaultState>:
#endif
#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t setChlistDefaultState(LorawanRegionalAttributes_t attr, void *attrInput)
{
    5c78:	b5f0      	push	{r4, r5, r6, r7, lr}
	StackRetStatus_t status = LORAWAN_SUCCESS;
	/* Traverse the entire channel list and disable the all the Channel status except Default channels */
	for (uint8_t i = 0; i <= RegParams.maxChannels; i++)
    5c7a:	232a      	movs	r3, #42	; 0x2a
    5c7c:	4a17      	ldr	r2, [pc, #92]	; (5cdc <setChlistDefaultState+0x64>)
    5c7e:	5cd3      	ldrb	r3, [r2, r3]
    5c80:	2b7f      	cmp	r3, #127	; 0x7f
    5c82:	d829      	bhi.n	5cd8 <setChlistDefaultState+0x60>
    5c84:	2200      	movs	r2, #0
	{
		if(RegParams.pOtherChParams[i].joinRequestChannel != true)
    5c86:	4815      	ldr	r0, [pc, #84]	; (5cdc <setChlistDefaultState+0x64>)
		{
			RegParams.pChParams[i].status = DISABLED;
    5c88:	0004      	movs	r4, r0
    5c8a:	2700      	movs	r7, #0
	for (uint8_t i = 0; i <= RegParams.maxChannels; i++)
    5c8c:	0006      	movs	r6, r0
    5c8e:	252a      	movs	r5, #42	; 0x2a
    5c90:	e004      	b.n	5c9c <setChlistDefaultState+0x24>
    5c92:	3201      	adds	r2, #1
    5c94:	b2d2      	uxtb	r2, r2
    5c96:	5773      	ldrsb	r3, [r6, r5]
    5c98:	429a      	cmp	r2, r3
    5c9a:	dc1d      	bgt.n	5cd8 <setChlistDefaultState+0x60>
		if(RegParams.pOtherChParams[i].joinRequestChannel != true)
    5c9c:	7a03      	ldrb	r3, [r0, #8]
    5c9e:	7a41      	ldrb	r1, [r0, #9]
    5ca0:	0209      	lsls	r1, r1, #8
    5ca2:	430b      	orrs	r3, r1
    5ca4:	7a81      	ldrb	r1, [r0, #10]
    5ca6:	0409      	lsls	r1, r1, #16
    5ca8:	4319      	orrs	r1, r3
    5caa:	7ac3      	ldrb	r3, [r0, #11]
    5cac:	061b      	lsls	r3, r3, #24
    5cae:	4319      	orrs	r1, r3
    5cb0:	0053      	lsls	r3, r2, #1
    5cb2:	189b      	adds	r3, r3, r2
    5cb4:	009b      	lsls	r3, r3, #2
    5cb6:	185b      	adds	r3, r3, r1
    5cb8:	7a5b      	ldrb	r3, [r3, #9]
    5cba:	2b00      	cmp	r3, #0
    5cbc:	d1e9      	bne.n	5c92 <setChlistDefaultState+0x1a>
			RegParams.pChParams[i].status = DISABLED;
    5cbe:	7923      	ldrb	r3, [r4, #4]
    5cc0:	7961      	ldrb	r1, [r4, #5]
    5cc2:	0209      	lsls	r1, r1, #8
    5cc4:	4319      	orrs	r1, r3
    5cc6:	79a3      	ldrb	r3, [r4, #6]
    5cc8:	041b      	lsls	r3, r3, #16
    5cca:	4319      	orrs	r1, r3
    5ccc:	79e3      	ldrb	r3, [r4, #7]
    5cce:	061b      	lsls	r3, r3, #24
    5cd0:	430b      	orrs	r3, r1
    5cd2:	0051      	lsls	r1, r2, #1
    5cd4:	54cf      	strb	r7, [r1, r3]
    5cd6:	e7dc      	b.n	5c92 <setChlistDefaultState+0x1a>
		}
	}
	return status;
}
    5cd8:	2008      	movs	r0, #8
    5cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5cdc:	20001220 	.word	0x20001220

00005ce0 <SearchAvailableChannel1>:
{
    5ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ce2:	46de      	mov	lr, fp
    5ce4:	4657      	mov	r7, sl
    5ce6:	464e      	mov	r6, r9
    5ce8:	4645      	mov	r5, r8
    5cea:	b5e0      	push	{r5, r6, r7, lr}
    5cec:	b0af      	sub	sp, #188	; 0xbc
    5cee:	000e      	movs	r6, r1
    5cf0:	9206      	str	r2, [sp, #24]
    5cf2:	9309      	str	r3, [sp, #36]	; 0x24
	memset(ChList, 0, (MAX_CHANNELS_BANDWIDTH_125_AU_NA + MAX_CHANNELS_BANDWIDTH_500_AU_NA) * 2);  
    5cf4:	2290      	movs	r2, #144	; 0x90
    5cf6:	2100      	movs	r1, #0
    5cf8:	a80a      	add	r0, sp, #40	; 0x28
    5cfa:	4b59      	ldr	r3, [pc, #356]	; (5e60 <SearchAvailableChannel1+0x180>)
    5cfc:	4798      	blx	r3
	if(transmissionType == false)
    5cfe:	2e00      	cmp	r6, #0
    5d00:	d01d      	beq.n	5d3e <SearchAvailableChannel1+0x5e>
				if (((transmissionType) && (currDr >= RegParams.pChParams[i + j].dataRange.min) && (currDr <= RegParams.pChParams[i + j].dataRange.max) 
    5d02:	4b58      	ldr	r3, [pc, #352]	; (5e64 <SearchAvailableChannel1+0x184>)
    5d04:	7919      	ldrb	r1, [r3, #4]
    5d06:	795a      	ldrb	r2, [r3, #5]
    5d08:	0212      	lsls	r2, r2, #8
    5d0a:	4311      	orrs	r1, r2
    5d0c:	799a      	ldrb	r2, [r3, #6]
    5d0e:	0412      	lsls	r2, r2, #16
    5d10:	430a      	orrs	r2, r1
    5d12:	79d9      	ldrb	r1, [r3, #7]
    5d14:	0609      	lsls	r1, r1, #24
    5d16:	4311      	orrs	r1, r2
    5d18:	9107      	str	r1, [sp, #28]
					&& ((RegParams.pChParams[i + j].status == ENABLED) && ((i+j) != RegParams.lastUsedChannelIndex))) 
    5d1a:	222f      	movs	r2, #47	; 0x2f
    5d1c:	5c9b      	ldrb	r3, [r3, r2]
    5d1e:	9308      	str	r3, [sp, #32]
    5d20:	469b      	mov	fp, r3
    5d22:	9103      	str	r1, [sp, #12]
    5d24:	9104      	str	r1, [sp, #16]
    5d26:	2300      	movs	r3, #0
    5d28:	469c      	mov	ip, r3
    5d2a:	27c9      	movs	r7, #201	; 0xc9
    5d2c:	3301      	adds	r3, #1
    5d2e:	4698      	mov	r8, r3
    5d30:	2500      	movs	r5, #0
				if (((transmissionType) && (currDr >= RegParams.pChParams[i + j].dataRange.min) && (currDr <= RegParams.pChParams[i + j].dataRange.max) 
    5d32:	9a06      	ldr	r2, [sp, #24]
    5d34:	4663      	mov	r3, ip
    5d36:	9305      	str	r3, [sp, #20]
    5d38:	4691      	mov	r9, r2
    5d3a:	4694      	mov	ip, r2
    5d3c:	e05a      	b.n	5df4 <SearchAvailableChannel1+0x114>
		if(RegParams.FeaturesSupport & JOIN_BACKOFF_SUPPORT)
    5d3e:	2320      	movs	r3, #32
    5d40:	4a48      	ldr	r2, [pc, #288]	; (5e64 <SearchAvailableChannel1+0x184>)
    5d42:	5cd3      	ldrb	r3, [r2, r3]
    5d44:	069b      	lsls	r3, r3, #26
    5d46:	d5dc      	bpl.n	5d02 <SearchAvailableChannel1+0x22>
			if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) 
    5d48:	0011      	movs	r1, r2
    5d4a:	7d13      	ldrb	r3, [r2, #20]
    5d4c:	7d52      	ldrb	r2, [r2, #21]
    5d4e:	0212      	lsls	r2, r2, #8
    5d50:	431a      	orrs	r2, r3
    5d52:	7d8b      	ldrb	r3, [r1, #22]
    5d54:	041b      	lsls	r3, r3, #16
    5d56:	431a      	orrs	r2, r3
    5d58:	7dcb      	ldrb	r3, [r1, #23]
    5d5a:	061b      	lsls	r3, r3, #24
    5d5c:	4313      	orrs	r3, r2
    5d5e:	7a18      	ldrb	r0, [r3, #8]
    5d60:	4b41      	ldr	r3, [pc, #260]	; (5e68 <SearchAvailableChannel1+0x188>)
    5d62:	4798      	blx	r3
    5d64:	0003      	movs	r3, r0
					return LORAWAN_NO_CHANNELS_FOUND;
    5d66:	2010      	movs	r0, #16
			if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) 
    5d68:	2b00      	cmp	r3, #0
    5d6a:	d0ca      	beq.n	5d02 <SearchAvailableChannel1+0x22>
    5d6c:	e070      	b.n	5e50 <SearchAvailableChannel1+0x170>
								ChList[num][1] = k + 1;    
    5d6e:	9c01      	ldr	r4, [sp, #4]
    5d70:	0064      	lsls	r4, r4, #1
    5d72:	ad0a      	add	r5, sp, #40	; 0x28
    5d74:	46aa      	mov	sl, r5
    5d76:	4454      	add	r4, sl
    5d78:	4645      	mov	r5, r8
    5d7a:	7065      	strb	r5, [r4, #1]
						num++;
    5d7c:	9d01      	ldr	r5, [sp, #4]
    5d7e:	3501      	adds	r5, #1
    5d80:	b2ec      	uxtb	r4, r5
    5d82:	9401      	str	r4, [sp, #4]
    5d84:	3102      	adds	r1, #2
    5d86:	3002      	adds	r0, #2
    5d88:	3201      	adds	r2, #1
    5d8a:	3301      	adds	r3, #1
    5d8c:	b2db      	uxtb	r3, r3
			for (j = 0; j < NO_OF_CH_IN_SUBBAND; j++)
    5d8e:	42bb      	cmp	r3, r7
    5d90:	d01e      	beq.n	5dd0 <SearchAvailableChannel1+0xf0>
				if (((transmissionType) && (currDr >= RegParams.pChParams[i + j].dataRange.min) && (currDr <= RegParams.pChParams[i + j].dataRange.max) 
    5d92:	2e00      	cmp	r6, #0
    5d94:	d008      	beq.n	5da8 <SearchAvailableChannel1+0xc8>
    5d96:	784c      	ldrb	r4, [r1, #1]
    5d98:	0724      	lsls	r4, r4, #28
    5d9a:	0f24      	lsrs	r4, r4, #28
    5d9c:	45a1      	cmp	r9, r4
    5d9e:	dbf1      	blt.n	5d84 <SearchAvailableChannel1+0xa4>
    5da0:	784c      	ldrb	r4, [r1, #1]
    5da2:	0924      	lsrs	r4, r4, #4
    5da4:	45a4      	cmp	ip, r4
    5da6:	dced      	bgt.n	5d84 <SearchAvailableChannel1+0xa4>
					||
    5da8:	7804      	ldrb	r4, [r0, #0]
    5daa:	2c00      	cmp	r4, #0
    5dac:	d0ea      	beq.n	5d84 <SearchAvailableChannel1+0xa4>
    5dae:	9202      	str	r2, [sp, #8]
					&& ((RegParams.pChParams[i + j].status == ENABLED) && ((i+j) != RegParams.lastUsedChannelIndex))) 
    5db0:	4593      	cmp	fp, r2
    5db2:	d0e7      	beq.n	5d84 <SearchAvailableChannel1+0xa4>
						ChList[num][0] = i+j;
    5db4:	9c01      	ldr	r4, [sp, #4]
    5db6:	0064      	lsls	r4, r4, #1
    5db8:	46a2      	mov	sl, r4
    5dba:	ac0a      	add	r4, sp, #40	; 0x28
    5dbc:	4655      	mov	r5, sl
    5dbe:	552a      	strb	r2, [r5, r4]
						if((i+j) >= MAX_CHANNELS_BANDWIDTH_125_AU_NA)
    5dc0:	2a3f      	cmp	r2, #63	; 0x3f
    5dc2:	ddd4      	ble.n	5d6e <SearchAvailableChannel1+0x8e>
								ChList[num][1] = ((i + j) - MAX_CHANNELS_BANDWIDTH_125_AU_NA + 1);
    5dc4:	4654      	mov	r4, sl
    5dc6:	ad0a      	add	r5, sp, #40	; 0x28
    5dc8:	46aa      	mov	sl, r5
    5dca:	4454      	add	r4, sl
    5dcc:	7063      	strb	r3, [r4, #1]
    5dce:	e7d5      	b.n	5d7c <SearchAvailableChannel1+0x9c>
    5dd0:	9d01      	ldr	r5, [sp, #4]
    5dd2:	4643      	mov	r3, r8
    5dd4:	3301      	adds	r3, #1
    5dd6:	b2db      	uxtb	r3, r3
    5dd8:	4698      	mov	r8, r3
    5dda:	3708      	adds	r7, #8
    5ddc:	b2ff      	uxtb	r7, r7
    5dde:	9b03      	ldr	r3, [sp, #12]
    5de0:	3310      	adds	r3, #16
    5de2:	9303      	str	r3, [sp, #12]
    5de4:	9b04      	ldr	r3, [sp, #16]
    5de6:	3310      	adds	r3, #16
    5de8:	9304      	str	r3, [sp, #16]
    5dea:	9b05      	ldr	r3, [sp, #20]
    5dec:	3308      	adds	r3, #8
    5dee:	9305      	str	r3, [sp, #20]
	for (i = 0, k = 0; i < (MAX_CHANNELS_BANDWIDTH_125_AU_NA + MAX_CHANNELS_BANDWIDTH_500_AU_NA); i += 8, k++)
    5df0:	2f11      	cmp	r7, #17
    5df2:	d007      	beq.n	5e04 <SearchAvailableChannel1+0x124>
    5df4:	003b      	movs	r3, r7
    5df6:	3b08      	subs	r3, #8
    5df8:	b2db      	uxtb	r3, r3
{
    5dfa:	9a05      	ldr	r2, [sp, #20]
    5dfc:	9804      	ldr	r0, [sp, #16]
    5dfe:	9903      	ldr	r1, [sp, #12]
    5e00:	9501      	str	r5, [sp, #4]
    5e02:	e7c6      	b.n	5d92 <SearchAvailableChannel1+0xb2>
	if(0 != num)
    5e04:	2d00      	cmp	r5, #0
    5e06:	d116      	bne.n	5e36 <SearchAvailableChannel1+0x156>
		if ((RegParams.pChParams[RegParams.lastUsedChannelIndex].status == ENABLED) &&
    5e08:	9908      	ldr	r1, [sp, #32]
    5e0a:	004b      	lsls	r3, r1, #1
    5e0c:	9a07      	ldr	r2, [sp, #28]
    5e0e:	4694      	mov	ip, r2
    5e10:	4463      	add	r3, ip
    5e12:	781a      	ldrb	r2, [r3, #0]
			result = LORAWAN_NO_CHANNELS_FOUND;
    5e14:	2010      	movs	r0, #16
		if ((RegParams.pChParams[RegParams.lastUsedChannelIndex].status == ENABLED) &&
    5e16:	2a00      	cmp	r2, #0
    5e18:	d01a      	beq.n	5e50 <SearchAvailableChannel1+0x170>
		(currDr >= RegParams.pChParams[RegParams.lastUsedChannelIndex].dataRange.min) &&
    5e1a:	9f06      	ldr	r7, [sp, #24]
    5e1c:	785a      	ldrb	r2, [r3, #1]
    5e1e:	0712      	lsls	r2, r2, #28
    5e20:	0f12      	lsrs	r2, r2, #28
		if ((RegParams.pChParams[RegParams.lastUsedChannelIndex].status == ENABLED) &&
    5e22:	4297      	cmp	r7, r2
    5e24:	db14      	blt.n	5e50 <SearchAvailableChannel1+0x170>
		(currDr <= RegParams.pChParams[RegParams.lastUsedChannelIndex].dataRange.max))
    5e26:	785b      	ldrb	r3, [r3, #1]
    5e28:	091b      	lsrs	r3, r3, #4
		(currDr >= RegParams.pChParams[RegParams.lastUsedChannelIndex].dataRange.min) &&
    5e2a:	429f      	cmp	r7, r3
    5e2c:	dc10      	bgt.n	5e50 <SearchAvailableChannel1+0x170>
			*channelIndex = RegParams.lastUsedChannelIndex;
    5e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5e30:	7019      	strb	r1, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5e32:	3808      	subs	r0, #8
			*channelIndex = RegParams.lastUsedChannelIndex;
    5e34:	e00c      	b.n	5e50 <SearchAvailableChannel1+0x170>
		randomNumber = rand() % num;
    5e36:	4b0d      	ldr	r3, [pc, #52]	; (5e6c <SearchAvailableChannel1+0x18c>)
    5e38:	4798      	blx	r3
    5e3a:	0029      	movs	r1, r5
    5e3c:	4b0c      	ldr	r3, [pc, #48]	; (5e70 <SearchAvailableChannel1+0x190>)
    5e3e:	4798      	blx	r3
		*channelIndex = ChList[randomNumber][0];
    5e40:	23ff      	movs	r3, #255	; 0xff
    5e42:	400b      	ands	r3, r1
    5e44:	005b      	lsls	r3, r3, #1
    5e46:	aa0a      	add	r2, sp, #40	; 0x28
    5e48:	5c9b      	ldrb	r3, [r3, r2]
    5e4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5e4c:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5e4e:	2008      	movs	r0, #8
}
    5e50:	b02f      	add	sp, #188	; 0xbc
    5e52:	bc3c      	pop	{r2, r3, r4, r5}
    5e54:	4690      	mov	r8, r2
    5e56:	4699      	mov	r9, r3
    5e58:	46a2      	mov	sl, r4
    5e5a:	46ab      	mov	fp, r5
    5e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5e5e:	46c0      	nop			; (mov r8, r8)
    5e60:	000151f1 	.word	0x000151f1
    5e64:	20001220 	.word	0x20001220
    5e68:	00009ced 	.word	0x00009ced
    5e6c:	00015391 	.word	0x00015391
    5e70:	00011ce9 	.word	0x00011ce9

00005e74 <LORAREG_GetAttr_FreeChannel1>:
{
    5e74:	b570      	push	{r4, r5, r6, lr}
	memcpy(&newFreeChannelReq,(NewFreeChannelReq_t *)attrInput,sizeof(NewFreeChannelReq_t));
    5e76:	784c      	ldrb	r4, [r1, #1]
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    5e78:	202a      	movs	r0, #42	; 0x2a
    5e7a:	4d07      	ldr	r5, [pc, #28]	; (5e98 <LORAREG_GetAttr_FreeChannel1+0x24>)
    5e7c:	562d      	ldrsb	r5, [r5, r0]
		return LORAWAN_INVALID_PARAMETER;
    5e7e:	3820      	subs	r0, #32
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    5e80:	42ac      	cmp	r4, r5
    5e82:	dd00      	ble.n	5e86 <LORAREG_GetAttr_FreeChannel1+0x12>
}
    5e84:	bd70      	pop	{r4, r5, r6, pc}
		result = SearchAvailableChannel1(newFreeChannelReq.maxChannels,newFreeChannelReq.transmissionType,newFreeChannelReq.currDr,(uint8_t*)attrOutput);
    5e86:	7888      	ldrb	r0, [r1, #2]
    5e88:	7809      	ldrb	r1, [r1, #0]
    5e8a:	0013      	movs	r3, r2
    5e8c:	0002      	movs	r2, r0
    5e8e:	0020      	movs	r0, r4
    5e90:	4c02      	ldr	r4, [pc, #8]	; (5e9c <LORAREG_GetAttr_FreeChannel1+0x28>)
    5e92:	47a0      	blx	r4
	return result;
    5e94:	e7f6      	b.n	5e84 <LORAREG_GetAttr_FreeChannel1+0x10>
    5e96:	46c0      	nop			; (mov r8, r8)
    5e98:	20001220 	.word	0x20001220
    5e9c:	00005ce1 	.word	0x00005ce1

00005ea0 <LORAREG_GetAttr_JoinDutyCycleRemainingTime>:
{
    5ea0:	b530      	push	{r4, r5, lr}
    5ea2:	b083      	sub	sp, #12
    5ea4:	0014      	movs	r4, r2
	uint32_t timeremaining =0;
    5ea6:	2300      	movs	r3, #0
    5ea8:	9301      	str	r3, [sp, #4]
	if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    5eaa:	4920      	ldr	r1, [pc, #128]	; (5f2c <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x8c>)
    5eac:	7d0b      	ldrb	r3, [r1, #20]
    5eae:	7d4a      	ldrb	r2, [r1, #21]
    5eb0:	0212      	lsls	r2, r2, #8
    5eb2:	431a      	orrs	r2, r3
    5eb4:	7d8b      	ldrb	r3, [r1, #22]
    5eb6:	041b      	lsls	r3, r3, #16
    5eb8:	431a      	orrs	r2, r3
    5eba:	7dcb      	ldrb	r3, [r1, #23]
    5ebc:	061b      	lsls	r3, r3, #24
    5ebe:	4313      	orrs	r3, r2
    5ec0:	7a18      	ldrb	r0, [r3, #8]
    5ec2:	4b1b      	ldr	r3, [pc, #108]	; (5f30 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x90>)
    5ec4:	4798      	blx	r3
    5ec6:	2800      	cmp	r0, #0
    5ec8:	d107      	bne.n	5eda <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x3a>
	memcpy(attrOutput,&timeremaining,sizeof(uint32_t));
    5eca:	2204      	movs	r2, #4
    5ecc:	a901      	add	r1, sp, #4
    5ece:	0020      	movs	r0, r4
    5ed0:	4b18      	ldr	r3, [pc, #96]	; (5f34 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x94>)
    5ed2:	4798      	blx	r3
}
    5ed4:	2008      	movs	r0, #8
    5ed6:	b003      	add	sp, #12
    5ed8:	bd30      	pop	{r4, r5, pc}
		timeremaining = US_TO_MS(SwTimerReadValue (RegParams.pJoinDutyCycleTimer->timerId));
    5eda:	4d14      	ldr	r5, [pc, #80]	; (5f2c <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x8c>)
    5edc:	7d2b      	ldrb	r3, [r5, #20]
    5ede:	7d6a      	ldrb	r2, [r5, #21]
    5ee0:	0212      	lsls	r2, r2, #8
    5ee2:	431a      	orrs	r2, r3
    5ee4:	7dab      	ldrb	r3, [r5, #22]
    5ee6:	041b      	lsls	r3, r3, #16
    5ee8:	431a      	orrs	r2, r3
    5eea:	7deb      	ldrb	r3, [r5, #23]
    5eec:	061b      	lsls	r3, r3, #24
    5eee:	4313      	orrs	r3, r2
    5ef0:	7a18      	ldrb	r0, [r3, #8]
    5ef2:	4b11      	ldr	r3, [pc, #68]	; (5f38 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x98>)
    5ef4:	4798      	blx	r3
		timeremaining = timeremaining + RegParams.pJoinDutyCycleTimer->remainingtime;
    5ef6:	7d2b      	ldrb	r3, [r5, #20]
    5ef8:	7d6a      	ldrb	r2, [r5, #21]
    5efa:	0212      	lsls	r2, r2, #8
    5efc:	431a      	orrs	r2, r3
    5efe:	7dab      	ldrb	r3, [r5, #22]
    5f00:	041b      	lsls	r3, r3, #16
    5f02:	431a      	orrs	r2, r3
    5f04:	7deb      	ldrb	r3, [r5, #23]
    5f06:	061b      	lsls	r3, r3, #24
    5f08:	4313      	orrs	r3, r2
    5f0a:	791d      	ldrb	r5, [r3, #4]
    5f0c:	795a      	ldrb	r2, [r3, #5]
    5f0e:	0212      	lsls	r2, r2, #8
    5f10:	432a      	orrs	r2, r5
    5f12:	799d      	ldrb	r5, [r3, #6]
    5f14:	042d      	lsls	r5, r5, #16
    5f16:	432a      	orrs	r2, r5
    5f18:	79dd      	ldrb	r5, [r3, #7]
    5f1a:	062d      	lsls	r5, r5, #24
    5f1c:	4315      	orrs	r5, r2
		timeremaining = US_TO_MS(SwTimerReadValue (RegParams.pJoinDutyCycleTimer->timerId));
    5f1e:	21fa      	movs	r1, #250	; 0xfa
    5f20:	0089      	lsls	r1, r1, #2
    5f22:	4b06      	ldr	r3, [pc, #24]	; (5f3c <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x9c>)
    5f24:	4798      	blx	r3
		timeremaining = timeremaining + RegParams.pJoinDutyCycleTimer->remainingtime;
    5f26:	182d      	adds	r5, r5, r0
    5f28:	9501      	str	r5, [sp, #4]
    5f2a:	e7ce      	b.n	5eca <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x2a>
    5f2c:	20001220 	.word	0x20001220
    5f30:	00009ced 	.word	0x00009ced
    5f34:	0001516d 	.word	0x0001516d
    5f38:	00009d01 	.word	0x00009d01
    5f3c:	00011a09 	.word	0x00011a09

00005f40 <LORAREG_GetAttr_Rx1WindowparamsType1>:
{
    5f40:	b510      	push	{r4, lr}
    5f42:	b082      	sub	sp, #8
    5f44:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    5f46:	784c      	ldrb	r4, [r1, #1]
    5f48:	788b      	ldrb	r3, [r1, #2]
	if(rx1WindowParamReq->joining)
    5f4a:	780a      	ldrb	r2, [r1, #0]
    5f4c:	2a00      	cmp	r2, #0
    5f4e:	d007      	beq.n	5f60 <LORAREG_GetAttr_Rx1WindowparamsType1+0x20>
		if (RegParams.lastUsedChannelIndex <= MAX_CHANNELS_BANDWIDTH_125_AU_NA) 
    5f50:	232f      	movs	r3, #47	; 0x2f
    5f52:	4a23      	ldr	r2, [pc, #140]	; (5fe0 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    5f54:	5cd3      	ldrb	r3, [r2, r3]
    5f56:	2b40      	cmp	r3, #64	; 0x40
    5f58:	d819      	bhi.n	5f8e <LORAREG_GetAttr_Rx1WindowparamsType1+0x4e>
			rx1WindowParamReq->currDr = RegParams.cmnParams.paramsType1.minTxDR;
    5f5a:	2350      	movs	r3, #80	; 0x50
    5f5c:	33ff      	adds	r3, #255	; 0xff
    5f5e:	5cd3      	ldrb	r3, [r2, r3]
		            RegParams.cmnParams.paramsType1.RxParamWindowOffset1 - rx1WindowParamReq->drOffset;
    5f60:	491f      	ldr	r1, [pc, #124]	; (5fe0 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    5f62:	2256      	movs	r2, #86	; 0x56
    5f64:	32ff      	adds	r2, #255	; 0xff
    5f66:	5c8a      	ldrb	r2, [r1, r2]
    5f68:	1b12      	subs	r2, r2, r4
    5f6a:	189b      	adds	r3, r3, r2
    5f6c:	b2db      	uxtb	r3, r3
	rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr + 
    5f6e:	466a      	mov	r2, sp
    5f70:	7113      	strb	r3, [r2, #4]
	if(rx1WindowParams->rx1Dr > RegParams.cmnParams.paramsType1.maxRxDR)
    5f72:	22a9      	movs	r2, #169	; 0xa9
    5f74:	0052      	lsls	r2, r2, #1
    5f76:	5c8a      	ldrb	r2, [r1, r2]
    5f78:	4293      	cmp	r3, r2
    5f7a:	d80d      	bhi.n	5f98 <LORAREG_GetAttr_Rx1WindowparamsType1+0x58>
	else if(rx1WindowParams->rx1Dr < RegParams.cmnParams.paramsType1.minRxDR)
    5f7c:	2252      	movs	r2, #82	; 0x52
    5f7e:	32ff      	adds	r2, #255	; 0xff
    5f80:	4917      	ldr	r1, [pc, #92]	; (5fe0 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    5f82:	5c8a      	ldrb	r2, [r1, r2]
    5f84:	4293      	cmp	r3, r2
    5f86:	d209      	bcs.n	5f9c <LORAREG_GetAttr_Rx1WindowparamsType1+0x5c>
		rx1WindowParams->rx1Dr = RegParams.cmnParams.paramsType1.minRxDR;
    5f88:	466b      	mov	r3, sp
    5f8a:	711a      	strb	r2, [r3, #4]
    5f8c:	e006      	b.n	5f9c <LORAREG_GetAttr_Rx1WindowparamsType1+0x5c>
			rx1WindowParamReq->currDr = RegParams.cmnParams.paramsType1.maxTxDR;
    5f8e:	23a8      	movs	r3, #168	; 0xa8
    5f90:	005b      	lsls	r3, r3, #1
    5f92:	4a13      	ldr	r2, [pc, #76]	; (5fe0 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    5f94:	5cd3      	ldrb	r3, [r2, r3]
    5f96:	e7e3      	b.n	5f60 <LORAREG_GetAttr_Rx1WindowparamsType1+0x20>
		rx1WindowParams->rx1Dr = RegParams.cmnParams.paramsType1.maxRxDR;
    5f98:	466b      	mov	r3, sp
    5f9a:	711a      	strb	r2, [r3, #4]
	rx1WindowParams->rx1Freq = GenerateFrequencyReception(RegParams.lastUsedChannelIndex % 8);
    5f9c:	4910      	ldr	r1, [pc, #64]	; (5fe0 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    5f9e:	232f      	movs	r3, #47	; 0x2f
    5fa0:	5ccc      	ldrb	r4, [r1, r3]
	channelFrequency = RegParams.cmnParams.paramsType1.DownStreamCh0Freq + FREQ_600KHZ * channelIndex;
    5fa2:	3b28      	subs	r3, #40	; 0x28
    5fa4:	4023      	ands	r3, r4
    5fa6:	4c0f      	ldr	r4, [pc, #60]	; (5fe4 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa4>)
    5fa8:	435c      	muls	r4, r3
    5faa:	234c      	movs	r3, #76	; 0x4c
    5fac:	33ff      	adds	r3, #255	; 0xff
    5fae:	5ccb      	ldrb	r3, [r1, r3]
    5fb0:	22a6      	movs	r2, #166	; 0xa6
    5fb2:	0052      	lsls	r2, r2, #1
    5fb4:	5c8a      	ldrb	r2, [r1, r2]
    5fb6:	0212      	lsls	r2, r2, #8
    5fb8:	4313      	orrs	r3, r2
    5fba:	224e      	movs	r2, #78	; 0x4e
    5fbc:	32ff      	adds	r2, #255	; 0xff
    5fbe:	5c8a      	ldrb	r2, [r1, r2]
    5fc0:	0412      	lsls	r2, r2, #16
    5fc2:	431a      	orrs	r2, r3
    5fc4:	23a7      	movs	r3, #167	; 0xa7
    5fc6:	005b      	lsls	r3, r3, #1
    5fc8:	5ccb      	ldrb	r3, [r1, r3]
    5fca:	061b      	lsls	r3, r3, #24
    5fcc:	4313      	orrs	r3, r2
    5fce:	18e3      	adds	r3, r4, r3
	rx1WindowParams->rx1Freq = GenerateFrequencyReception(RegParams.lastUsedChannelIndex % 8);
    5fd0:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    5fd2:	2208      	movs	r2, #8
    5fd4:	4669      	mov	r1, sp
    5fd6:	4b04      	ldr	r3, [pc, #16]	; (5fe8 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa8>)
    5fd8:	4798      	blx	r3
}
    5fda:	2008      	movs	r0, #8
    5fdc:	b002      	add	sp, #8
    5fde:	bd10      	pop	{r4, pc}
    5fe0:	20001220 	.word	0x20001220
    5fe4:	000927c0 	.word	0x000927c0
    5fe8:	0001516d 	.word	0x0001516d

00005fec <LORAREG_GetAttr_DRangeChBandT1>:
{
    5fec:	b5f0      	push	{r4, r5, r6, r7, lr}
    5fee:	46c6      	mov	lr, r8
    5ff0:	b500      	push	{lr}
    5ff2:	b084      	sub	sp, #16
    5ff4:	9201      	str	r2, [sp, #4]
	memcpy(&bandDrReq,(BandDrReq_t *)attrInput,sizeof(BandDrReq_t));
    5ff6:	2204      	movs	r2, #4
    5ff8:	a803      	add	r0, sp, #12
    5ffa:	4b43      	ldr	r3, [pc, #268]	; (6108 <LORAREG_GetAttr_DRangeChBandT1+0x11c>)
    5ffc:	4798      	blx	r3
	if(ValidateChannelMaskCntl(CHANNEL_MASK_CNTL, (void *)&bandDrReq.chnlMaskCntl)	!= LORAWAN_SUCCESS)
    5ffe:	a903      	add	r1, sp, #12
    6000:	201b      	movs	r0, #27
    6002:	4b42      	ldr	r3, [pc, #264]	; (610c <LORAREG_GetAttr_DRangeChBandT1+0x120>)
    6004:	4798      	blx	r3
    6006:	2808      	cmp	r0, #8
    6008:	d004      	beq.n	6014 <LORAREG_GetAttr_DRangeChBandT1+0x28>
		result = LORAWAN_INVALID_PARAMETER;
    600a:	200a      	movs	r0, #10
}
    600c:	b004      	add	sp, #16
    600e:	bc04      	pop	{r2}
    6010:	4690      	mov	r8, r2
    6012:	bdf0      	pop	{r4, r5, r6, r7, pc}
		chBandDr = getChBandDrT1(bandDrReq.chnlMaskCntl,bandDrReq.chnlMask);
    6014:	aa03      	add	r2, sp, #12
    6016:	7813      	ldrb	r3, [r2, #0]
    6018:	8857      	ldrh	r7, [r2, #2]
	if( RegParams.band == ISM_AU915)
    601a:	222e      	movs	r2, #46	; 0x2e
    601c:	493c      	ldr	r1, [pc, #240]	; (6110 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    601e:	5c89      	ldrb	r1, [r1, r2]
		auxMinDataRate = DR6;
    6020:	3903      	subs	r1, #3
    6022:	1e4a      	subs	r2, r1, #1
    6024:	4191      	sbcs	r1, r2
    6026:	3106      	adds	r1, #6
	switch (chMaskCntl)
    6028:	2b07      	cmp	r3, #7
    602a:	d869      	bhi.n	6100 <LORAREG_GetAttr_DRangeChBandT1+0x114>
    602c:	009a      	lsls	r2, r3, #2
    602e:	4d39      	ldr	r5, [pc, #228]	; (6114 <LORAREG_GetAttr_DRangeChBandT1+0x128>)
    6030:	58aa      	ldr	r2, [r5, r2]
    6032:	4697      	mov	pc, r2
			startingIndex = chMaskCntl << SHIFT4;
    6034:	011b      	lsls	r3, r3, #4
    6036:	b2db      	uxtb	r3, r3
			endingIndex = startingIndex + 16;
    6038:	001a      	movs	r2, r3
    603a:	3210      	adds	r2, #16
    603c:	b2d2      	uxtb	r2, r2
    603e:	4690      	mov	r8, r2
			for (i = startingIndex; i < endingIndex; i++)
    6040:	4293      	cmp	r3, r2
    6042:	d25f      	bcs.n	6104 <LORAREG_GetAttr_DRangeChBandT1+0x118>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    6044:	4e32      	ldr	r6, [pc, #200]	; (6110 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    6046:	7935      	ldrb	r5, [r6, #4]
    6048:	7972      	ldrb	r2, [r6, #5]
    604a:	0212      	lsls	r2, r2, #8
    604c:	4315      	orrs	r5, r2
    604e:	79b2      	ldrb	r2, [r6, #6]
    6050:	0412      	lsls	r2, r2, #16
    6052:	432a      	orrs	r2, r5
    6054:	79f5      	ldrb	r5, [r6, #7]
    6056:	062d      	lsls	r5, r5, #24
    6058:	4315      	orrs	r5, r2
    605a:	46ac      	mov	ip, r5
    605c:	2500      	movs	r5, #0
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    605e:	2401      	movs	r4, #1
    6060:	e00c      	b.n	607c <LORAREG_GetAttr_DRangeChBandT1+0x90>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    6062:	0011      	movs	r1, r2
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    6064:	7872      	ldrb	r2, [r6, #1]
    6066:	0912      	lsrs	r2, r2, #4
    6068:	42aa      	cmp	r2, r5
    606a:	dd02      	ble.n	6072 <LORAREG_GetAttr_DRangeChBandT1+0x86>
    606c:	423c      	tst	r4, r7
    606e:	d011      	beq.n	6094 <LORAREG_GetAttr_DRangeChBandT1+0xa8>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    6070:	0015      	movs	r5, r2
				auxChannelMask = auxChannelMask >> SHIFT1;
    6072:	087f      	lsrs	r7, r7, #1
			for (i = startingIndex; i < endingIndex; i++)
    6074:	3301      	adds	r3, #1
    6076:	b2db      	uxtb	r3, r3
    6078:	4598      	cmp	r8, r3
    607a:	d013      	beq.n	60a4 <LORAREG_GetAttr_DRangeChBandT1+0xb8>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    607c:	005e      	lsls	r6, r3, #1
    607e:	4466      	add	r6, ip
    6080:	7872      	ldrb	r2, [r6, #1]
    6082:	0712      	lsls	r2, r2, #28
    6084:	0f12      	lsrs	r2, r2, #28
    6086:	428a      	cmp	r2, r1
    6088:	daec      	bge.n	6064 <LORAREG_GetAttr_DRangeChBandT1+0x78>
    608a:	423c      	tst	r4, r7
    608c:	d1e9      	bne.n	6062 <LORAREG_GetAttr_DRangeChBandT1+0x76>
    608e:	2f00      	cmp	r7, #0
    6090:	d1ef      	bne.n	6072 <LORAREG_GetAttr_DRangeChBandT1+0x86>
    6092:	e7e6      	b.n	6062 <LORAREG_GetAttr_DRangeChBandT1+0x76>
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    6094:	2f00      	cmp	r7, #0
    6096:	d0eb      	beq.n	6070 <LORAREG_GetAttr_DRangeChBandT1+0x84>
    6098:	e7eb      	b.n	6072 <LORAREG_GetAttr_DRangeChBandT1+0x86>
			auxMinDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    609a:	23a8      	movs	r3, #168	; 0xa8
    609c:	005b      	lsls	r3, r3, #1
    609e:	4a1c      	ldr	r2, [pc, #112]	; (6110 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    60a0:	5cd1      	ldrb	r1, [r2, r3]
			auxMaxDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    60a2:	000d      	movs	r5, r1
    60a4:	012d      	lsls	r5, r5, #4
    60a6:	230f      	movs	r3, #15
    60a8:	4019      	ands	r1, r3
    60aa:	430d      	orrs	r5, r1
		memcpy(attrOutput,&chBandDr,sizeof(DataRange_t));
    60ac:	9b01      	ldr	r3, [sp, #4]
    60ae:	701d      	strb	r5, [r3, #0]
    60b0:	e7ac      	b.n	600c <LORAREG_GetAttr_DRangeChBandT1+0x20>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    60b2:	4d17      	ldr	r5, [pc, #92]	; (6110 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    60b4:	792b      	ldrb	r3, [r5, #4]
    60b6:	796a      	ldrb	r2, [r5, #5]
    60b8:	0212      	lsls	r2, r2, #8
    60ba:	431a      	orrs	r2, r3
    60bc:	79ab      	ldrb	r3, [r5, #6]
    60be:	041b      	lsls	r3, r3, #16
    60c0:	431a      	orrs	r2, r3
    60c2:	79eb      	ldrb	r3, [r5, #7]
    60c4:	061b      	lsls	r3, r3, #24
    60c6:	4313      	orrs	r3, r2
    60c8:	001a      	movs	r2, r3
    60ca:	3380      	adds	r3, #128	; 0x80
    60cc:	001c      	movs	r4, r3
    60ce:	2500      	movs	r5, #0
    60d0:	e002      	b.n	60d8 <LORAREG_GetAttr_DRangeChBandT1+0xec>
    60d2:	3202      	adds	r2, #2
			for (i = 0; i < 64; i++)
    60d4:	42a2      	cmp	r2, r4
    60d6:	d00c      	beq.n	60f2 <LORAREG_GetAttr_DRangeChBandT1+0x106>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    60d8:	0016      	movs	r6, r2
    60da:	7853      	ldrb	r3, [r2, #1]
    60dc:	071b      	lsls	r3, r3, #28
    60de:	0f1b      	lsrs	r3, r3, #28
    60e0:	428b      	cmp	r3, r1
    60e2:	da00      	bge.n	60e6 <LORAREG_GetAttr_DRangeChBandT1+0xfa>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    60e4:	0019      	movs	r1, r3
				if (RegParams.pChParams[i].dataRange.max > auxMaxDataRate)
    60e6:	7873      	ldrb	r3, [r6, #1]
    60e8:	091b      	lsrs	r3, r3, #4
    60ea:	42ab      	cmp	r3, r5
    60ec:	ddf1      	ble.n	60d2 <LORAREG_GetAttr_DRangeChBandT1+0xe6>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    60ee:	001d      	movs	r5, r3
    60f0:	e7ef      	b.n	60d2 <LORAREG_GetAttr_DRangeChBandT1+0xe6>
			if (channelMask != 0)    // if there is at least one channel enabled with DR4
    60f2:	2f00      	cmp	r7, #0
    60f4:	d0d6      	beq.n	60a4 <LORAREG_GetAttr_DRangeChBandT1+0xb8>
				auxMaxDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    60f6:	23a8      	movs	r3, #168	; 0xa8
    60f8:	005b      	lsls	r3, r3, #1
    60fa:	4a05      	ldr	r2, [pc, #20]	; (6110 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    60fc:	5cd5      	ldrb	r5, [r2, r3]
    60fe:	e7d1      	b.n	60a4 <LORAREG_GetAttr_DRangeChBandT1+0xb8>
	uint8_t auxMinDataRate = DR7, auxMaxDataRate = DR0, i;
    6100:	2500      	movs	r5, #0
    6102:	e7cf      	b.n	60a4 <LORAREG_GetAttr_DRangeChBandT1+0xb8>
    6104:	2500      	movs	r5, #0
    6106:	e7cd      	b.n	60a4 <LORAREG_GetAttr_DRangeChBandT1+0xb8>
    6108:	0001516d 	.word	0x0001516d
    610c:	000056a5 	.word	0x000056a5
    6110:	20001220 	.word	0x20001220
    6114:	0001a1b0 	.word	0x0001a1b0

00006118 <LORAREG_GetAttr_DefRx2Freq>:
{
    6118:	b510      	push	{r4, lr}
    611a:	0010      	movs	r0, r2
	memcpy(attrOutput,&RegParams.DefRx2Freq,sizeof(uint32_t));
    611c:	2204      	movs	r2, #4
    611e:	4902      	ldr	r1, [pc, #8]	; (6128 <LORAREG_GetAttr_DefRx2Freq+0x10>)
    6120:	4b02      	ldr	r3, [pc, #8]	; (612c <LORAREG_GetAttr_DefRx2Freq+0x14>)
    6122:	4798      	blx	r3
}
    6124:	2008      	movs	r0, #8
    6126:	bd10      	pop	{r4, pc}
    6128:	2000123c 	.word	0x2000123c
    612c:	0001516d 	.word	0x0001516d

00006130 <LORAREG_GetAttr_DlFrequency>:
{
    6130:	b510      	push	{r4, lr}
    6132:	0013      	movs	r3, r2
	channelId = *(uint8_t *)attrInput;
    6134:	780a      	ldrb	r2, [r1, #0]
	if (channelId > RegParams.maxChannels)
    6136:	212a      	movs	r1, #42	; 0x2a
    6138:	480d      	ldr	r0, [pc, #52]	; (6170 <LORAREG_GetAttr_DlFrequency+0x40>)
    613a:	5641      	ldrsb	r1, [r0, r1]
		result = LORAWAN_INVALID_PARAMETER;
    613c:	200a      	movs	r0, #10
	if (channelId > RegParams.maxChannels)
    613e:	428a      	cmp	r2, r1
    6140:	dd00      	ble.n	6144 <LORAREG_GetAttr_DlFrequency+0x14>
}
    6142:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,&(RegParams.pOtherChParams[channelId].rx1Frequency),sizeof(uint32_t));
    6144:	4c0a      	ldr	r4, [pc, #40]	; (6170 <LORAREG_GetAttr_DlFrequency+0x40>)
    6146:	7a21      	ldrb	r1, [r4, #8]
    6148:	7a60      	ldrb	r0, [r4, #9]
    614a:	0200      	lsls	r0, r0, #8
    614c:	4308      	orrs	r0, r1
    614e:	7aa1      	ldrb	r1, [r4, #10]
    6150:	0409      	lsls	r1, r1, #16
    6152:	4308      	orrs	r0, r1
    6154:	7ae1      	ldrb	r1, [r4, #11]
    6156:	0609      	lsls	r1, r1, #24
    6158:	4301      	orrs	r1, r0
    615a:	0050      	lsls	r0, r2, #1
    615c:	1882      	adds	r2, r0, r2
    615e:	0092      	lsls	r2, r2, #2
    6160:	1889      	adds	r1, r1, r2
    6162:	3104      	adds	r1, #4
    6164:	2204      	movs	r2, #4
    6166:	0018      	movs	r0, r3
    6168:	4b02      	ldr	r3, [pc, #8]	; (6174 <LORAREG_GetAttr_DlFrequency+0x44>)
    616a:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    616c:	2008      	movs	r0, #8
    616e:	e7e8      	b.n	6142 <LORAREG_GetAttr_DlFrequency+0x12>
    6170:	20001220 	.word	0x20001220
    6174:	0001516d 	.word	0x0001516d

00006178 <LORAREG_GetAttr_DutyCycleTimer>:
{
    6178:	b5f0      	push	{r4, r5, r6, r7, lr}
    617a:	46d6      	mov	lr, sl
    617c:	464f      	mov	r7, r9
    617e:	4646      	mov	r6, r8
    6180:	b5c0      	push	{r6, r7, lr}
    6182:	b084      	sub	sp, #16
    6184:	9200      	str	r2, [sp, #0]
    currentDataRate = *(uint8_t *)attrInput;
    6186:	780b      	ldrb	r3, [r1, #0]
    6188:	469c      	mov	ip, r3
    for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    618a:	232a      	movs	r3, #42	; 0x2a
    618c:	4a5b      	ldr	r2, [pc, #364]	; (62fc <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    618e:	56d6      	ldrsb	r6, [r2, r3]
    6190:	2e00      	cmp	r6, #0
    6192:	dd66      	ble.n	6262 <LORAREG_GetAttr_DutyCycleTimer+0xea>
	    if ( (RegParams.pChParams[i].status == ENABLED) )
    6194:	0013      	movs	r3, r2
    6196:	7910      	ldrb	r0, [r2, #4]
    6198:	7952      	ldrb	r2, [r2, #5]
    619a:	0212      	lsls	r2, r2, #8
    619c:	4302      	orrs	r2, r0
    619e:	7998      	ldrb	r0, [r3, #6]
    61a0:	0400      	lsls	r0, r0, #16
    61a2:	4302      	orrs	r2, r0
    61a4:	79d8      	ldrb	r0, [r3, #7]
    61a6:	0600      	lsls	r0, r0, #24
    61a8:	4310      	orrs	r0, r2
		    if((RegParams.pSubBandParams[bandId].subBandTimeout != 0) && 
    61aa:	7b1f      	ldrb	r7, [r3, #12]
    61ac:	7b5a      	ldrb	r2, [r3, #13]
    61ae:	0212      	lsls	r2, r2, #8
    61b0:	433a      	orrs	r2, r7
    61b2:	7b9f      	ldrb	r7, [r3, #14]
    61b4:	043f      	lsls	r7, r7, #16
    61b6:	433a      	orrs	r2, r7
    61b8:	7bdf      	ldrb	r7, [r3, #15]
    61ba:	063f      	lsls	r7, r7, #24
    61bc:	4317      	orrs	r7, r2
    61be:	2500      	movs	r5, #0
    61c0:	2300      	movs	r3, #0
    61c2:	2201      	movs	r2, #1
    61c4:	4252      	negs	r2, r2
    61c6:	4691      	mov	r9, r2
		    bandId = RegParams.cmnParams.paramsType2.othChParams[i].subBandId;
    61c8:	4a4c      	ldr	r2, [pc, #304]	; (62fc <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    61ca:	4690      	mov	r8, r2
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    61cc:	4662      	mov	r2, ip
    61ce:	9201      	str	r2, [sp, #4]
    61d0:	e004      	b.n	61dc <LORAREG_GetAttr_DutyCycleTimer+0x64>
    for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    61d2:	3301      	adds	r3, #1
    61d4:	b2db      	uxtb	r3, r3
    61d6:	001d      	movs	r5, r3
    61d8:	42b3      	cmp	r3, r6
    61da:	da27      	bge.n	622c <LORAREG_GetAttr_DutyCycleTimer+0xb4>
	    if ( (RegParams.pChParams[i].status == ENABLED) )
    61dc:	0059      	lsls	r1, r3, #1
    61de:	1841      	adds	r1, r0, r1
    61e0:	780a      	ldrb	r2, [r1, #0]
    61e2:	2a00      	cmp	r2, #0
    61e4:	d0f5      	beq.n	61d2 <LORAREG_GetAttr_DutyCycleTimer+0x5a>
		    bandId = RegParams.cmnParams.paramsType2.othChParams[i].subBandId;
    61e6:	006a      	lsls	r2, r5, #1
    61e8:	1952      	adds	r2, r2, r5
    61ea:	0092      	lsls	r2, r2, #2
    61ec:	4442      	add	r2, r8
    61ee:	32ab      	adds	r2, #171	; 0xab
		    if((RegParams.pSubBandParams[bandId].subBandTimeout != 0) && 
    61f0:	7815      	ldrb	r5, [r2, #0]
    61f2:	006a      	lsls	r2, r5, #1
    61f4:	1952      	adds	r2, r2, r5
    61f6:	0092      	lsls	r2, r2, #2
    61f8:	18ba      	adds	r2, r7, r2
    61fa:	7a15      	ldrb	r5, [r2, #8]
    61fc:	7a54      	ldrb	r4, [r2, #9]
    61fe:	0224      	lsls	r4, r4, #8
    6200:	4325      	orrs	r5, r4
    6202:	7a94      	ldrb	r4, [r2, #10]
    6204:	0424      	lsls	r4, r4, #16
    6206:	4325      	orrs	r5, r4
    6208:	7ad2      	ldrb	r2, [r2, #11]
    620a:	0612      	lsls	r2, r2, #24
    620c:	432a      	orrs	r2, r5
    620e:	d0e0      	beq.n	61d2 <LORAREG_GetAttr_DutyCycleTimer+0x5a>
    6210:	454a      	cmp	r2, r9
    6212:	d8de      	bhi.n	61d2 <LORAREG_GetAttr_DutyCycleTimer+0x5a>
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    6214:	784d      	ldrb	r5, [r1, #1]
    6216:	072d      	lsls	r5, r5, #28
    6218:	0f2d      	lsrs	r5, r5, #28
			   (RegParams.pSubBandParams[bandId].subBandTimeout <= minimSubBandTimer) && 
    621a:	45ac      	cmp	ip, r5
    621c:	dbd9      	blt.n	61d2 <LORAREG_GetAttr_DutyCycleTimer+0x5a>
			   (currentDataRate <= RegParams.pChParams[i].dataRange.max) )
    621e:	7849      	ldrb	r1, [r1, #1]
    6220:	0909      	lsrs	r1, r1, #4
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    6222:	9c01      	ldr	r4, [sp, #4]
    6224:	428c      	cmp	r4, r1
    6226:	dcd4      	bgt.n	61d2 <LORAREG_GetAttr_DutyCycleTimer+0x5a>
			    minimSubBandTimer = RegParams.pSubBandParams[bandId].subBandTimeout;
    6228:	4691      	mov	r9, r2
    622a:	e7d2      	b.n	61d2 <LORAREG_GetAttr_DutyCycleTimer+0x5a>
    if((UINT32_MAX != minimSubBandTimer) && (minimSubBandTimer >= RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout))
    622c:	464b      	mov	r3, r9
    622e:	3301      	adds	r3, #1
    6230:	d017      	beq.n	6262 <LORAREG_GetAttr_DutyCycleTimer+0xea>
    6232:	4932      	ldr	r1, [pc, #200]	; (62fc <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    6234:	23ba      	movs	r3, #186	; 0xba
    6236:	33ff      	adds	r3, #255	; 0xff
    6238:	5ccb      	ldrb	r3, [r1, r3]
    623a:	22dd      	movs	r2, #221	; 0xdd
    623c:	0052      	lsls	r2, r2, #1
    623e:	5c8a      	ldrb	r2, [r1, r2]
    6240:	0212      	lsls	r2, r2, #8
    6242:	431a      	orrs	r2, r3
    6244:	23bc      	movs	r3, #188	; 0xbc
    6246:	33ff      	adds	r3, #255	; 0xff
    6248:	5ccb      	ldrb	r3, [r1, r3]
    624a:	041b      	lsls	r3, r3, #16
    624c:	431a      	orrs	r2, r3
    624e:	23de      	movs	r3, #222	; 0xde
    6250:	005b      	lsls	r3, r3, #1
    6252:	5ccb      	ldrb	r3, [r1, r3]
    6254:	061b      	lsls	r3, r3, #24
    6256:	4313      	orrs	r3, r2
    6258:	4599      	cmp	r9, r3
    625a:	d302      	bcc.n	6262 <LORAREG_GetAttr_DutyCycleTimer+0xea>
	    minDutyCycleTimer = minimSubBandTimer;
    625c:	464b      	mov	r3, r9
    625e:	9303      	str	r3, [sp, #12]
    6260:	e013      	b.n	628a <LORAREG_GetAttr_DutyCycleTimer+0x112>
	    minDutyCycleTimer = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout;
    6262:	4926      	ldr	r1, [pc, #152]	; (62fc <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    6264:	23ba      	movs	r3, #186	; 0xba
    6266:	33ff      	adds	r3, #255	; 0xff
    6268:	5ccb      	ldrb	r3, [r1, r3]
    626a:	22dd      	movs	r2, #221	; 0xdd
    626c:	0052      	lsls	r2, r2, #1
    626e:	5c8a      	ldrb	r2, [r1, r2]
    6270:	0212      	lsls	r2, r2, #8
    6272:	431a      	orrs	r2, r3
    6274:	23bc      	movs	r3, #188	; 0xbc
    6276:	33ff      	adds	r3, #255	; 0xff
    6278:	5ccb      	ldrb	r3, [r1, r3]
    627a:	041b      	lsls	r3, r3, #16
    627c:	431a      	orrs	r2, r3
    627e:	23de      	movs	r3, #222	; 0xde
    6280:	005b      	lsls	r3, r3, #1
    6282:	5ccb      	ldrb	r3, [r1, r3]
    6284:	061b      	lsls	r3, r3, #24
    6286:	4313      	orrs	r3, r2
    6288:	9303      	str	r3, [sp, #12]
    ticks = SwTimerReadValue (RegParams.pDutyCycleTimer->timerId);
    628a:	491c      	ldr	r1, [pc, #112]	; (62fc <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    628c:	7c0b      	ldrb	r3, [r1, #16]
    628e:	7c4a      	ldrb	r2, [r1, #17]
    6290:	0212      	lsls	r2, r2, #8
    6292:	431a      	orrs	r2, r3
    6294:	7c8b      	ldrb	r3, [r1, #18]
    6296:	041b      	lsls	r3, r3, #16
    6298:	431a      	orrs	r2, r3
    629a:	7ccb      	ldrb	r3, [r1, #19]
    629c:	061b      	lsls	r3, r3, #24
    629e:	4313      	orrs	r3, r2
    62a0:	7918      	ldrb	r0, [r3, #4]
    62a2:	4b17      	ldr	r3, [pc, #92]	; (6300 <LORAREG_GetAttr_DutyCycleTimer+0x188>)
    62a4:	4798      	blx	r3
	if( minDutyCycleTimer != 0)
    62a6:	9e03      	ldr	r6, [sp, #12]
    62a8:	2e00      	cmp	r6, #0
    62aa:	d01b      	beq.n	62e4 <LORAREG_GetAttr_DutyCycleTimer+0x16c>
    delta = RegParams.pDutyCycleTimer->lastTimerValue - US_TO_MS(ticks);
    62ac:	4913      	ldr	r1, [pc, #76]	; (62fc <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    62ae:	7c0b      	ldrb	r3, [r1, #16]
    62b0:	7c4a      	ldrb	r2, [r1, #17]
    62b2:	0212      	lsls	r2, r2, #8
    62b4:	431a      	orrs	r2, r3
    62b6:	7c8b      	ldrb	r3, [r1, #18]
    62b8:	041b      	lsls	r3, r3, #16
    62ba:	431a      	orrs	r2, r3
    62bc:	7ccb      	ldrb	r3, [r1, #19]
    62be:	061b      	lsls	r3, r3, #24
    62c0:	4313      	orrs	r3, r2
    62c2:	781d      	ldrb	r5, [r3, #0]
    62c4:	785a      	ldrb	r2, [r3, #1]
    62c6:	0212      	lsls	r2, r2, #8
    62c8:	432a      	orrs	r2, r5
    62ca:	789d      	ldrb	r5, [r3, #2]
    62cc:	042d      	lsls	r5, r5, #16
    62ce:	432a      	orrs	r2, r5
    62d0:	78dd      	ldrb	r5, [r3, #3]
    62d2:	062d      	lsls	r5, r5, #24
    62d4:	4315      	orrs	r5, r2
    62d6:	21fa      	movs	r1, #250	; 0xfa
    62d8:	0089      	lsls	r1, r1, #2
    62da:	4b0a      	ldr	r3, [pc, #40]	; (6304 <LORAREG_GetAttr_DutyCycleTimer+0x18c>)
    62dc:	4798      	blx	r3
    62de:	1a2d      	subs	r5, r5, r0
		minDutyCycleTimer = minDutyCycleTimer - delta; //Logically delta will not be greater than minDcTimer
    62e0:	1b75      	subs	r5, r6, r5
    62e2:	9503      	str	r5, [sp, #12]
    memcpy(attrOutput,&minDutyCycleTimer,sizeof(uint32_t));
    62e4:	2204      	movs	r2, #4
    62e6:	a903      	add	r1, sp, #12
    62e8:	9800      	ldr	r0, [sp, #0]
    62ea:	4b07      	ldr	r3, [pc, #28]	; (6308 <LORAREG_GetAttr_DutyCycleTimer+0x190>)
    62ec:	4798      	blx	r3
}
    62ee:	2008      	movs	r0, #8
    62f0:	b004      	add	sp, #16
    62f2:	bc1c      	pop	{r2, r3, r4}
    62f4:	4690      	mov	r8, r2
    62f6:	4699      	mov	r9, r3
    62f8:	46a2      	mov	sl, r4
    62fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    62fc:	20001220 	.word	0x20001220
    6300:	00009d01 	.word	0x00009d01
    6304:	00011a09 	.word	0x00011a09
    6308:	0001516d 	.word	0x0001516d

0000630c <LORAREG_GetAttr_Rx1WindowparamsType2>:
{
    630c:	b500      	push	{lr}
    630e:	b083      	sub	sp, #12
    6310:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    6312:	784a      	ldrb	r2, [r1, #1]
    6314:	788b      	ldrb	r3, [r1, #2]
    if (rx1WindowParamReq->currDr >= rx1WindowParamReq->drOffset)
    6316:	429a      	cmp	r2, r3
    6318:	d925      	bls.n	6366 <LORAREG_GetAttr_Rx1WindowparamsType2+0x5a>
        rx1WindowParams->rx1Dr = DR0;
    631a:	2300      	movs	r3, #0
    631c:	466a      	mov	r2, sp
    631e:	7113      	strb	r3, [r2, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;			
    6320:	4913      	ldr	r1, [pc, #76]	; (6370 <LORAREG_GetAttr_Rx1WindowparamsType2+0x64>)
    6322:	7a0b      	ldrb	r3, [r1, #8]
    6324:	7a4a      	ldrb	r2, [r1, #9]
    6326:	0212      	lsls	r2, r2, #8
    6328:	4313      	orrs	r3, r2
    632a:	7a8a      	ldrb	r2, [r1, #10]
    632c:	0412      	lsls	r2, r2, #16
    632e:	431a      	orrs	r2, r3
    6330:	7acb      	ldrb	r3, [r1, #11]
    6332:	061b      	lsls	r3, r3, #24
    6334:	431a      	orrs	r2, r3
    6336:	232f      	movs	r3, #47	; 0x2f
    6338:	5cc9      	ldrb	r1, [r1, r3]
    633a:	004b      	lsls	r3, r1, #1
    633c:	185b      	adds	r3, r3, r1
    633e:	009b      	lsls	r3, r3, #2
    6340:	189b      	adds	r3, r3, r2
    6342:	7919      	ldrb	r1, [r3, #4]
    6344:	795a      	ldrb	r2, [r3, #5]
    6346:	0212      	lsls	r2, r2, #8
    6348:	4311      	orrs	r1, r2
    634a:	799a      	ldrb	r2, [r3, #6]
    634c:	0412      	lsls	r2, r2, #16
    634e:	430a      	orrs	r2, r1
    6350:	79db      	ldrb	r3, [r3, #7]
    6352:	061b      	lsls	r3, r3, #24
    6354:	4313      	orrs	r3, r2
    6356:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    6358:	2208      	movs	r2, #8
    635a:	4669      	mov	r1, sp
    635c:	4b05      	ldr	r3, [pc, #20]	; (6374 <LORAREG_GetAttr_Rx1WindowparamsType2+0x68>)
    635e:	4798      	blx	r3
}
    6360:	2008      	movs	r0, #8
    6362:	b003      	add	sp, #12
    6364:	bd00      	pop	{pc}
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - rx1WindowParamReq->drOffset;
    6366:	1a9b      	subs	r3, r3, r2
    6368:	466a      	mov	r2, sp
    636a:	7113      	strb	r3, [r2, #4]
    636c:	e7d8      	b.n	6320 <LORAREG_GetAttr_Rx1WindowparamsType2+0x14>
    636e:	46c0      	nop			; (mov r8, r8)
    6370:	20001220 	.word	0x20001220
    6374:	0001516d 	.word	0x0001516d

00006378 <LORAREG_GetAttr_DRangeChBandT2>:
{
    6378:	b5f0      	push	{r4, r5, r6, r7, lr}
    637a:	46c6      	mov	lr, r8
    637c:	b500      	push	{lr}
    637e:	b082      	sub	sp, #8
    6380:	4690      	mov	r8, r2
	memcpy(&bandDrReq,(BandDrReq_t *)attrInput,sizeof(BandDrReq_t));
    6382:	ad01      	add	r5, sp, #4
    6384:	2204      	movs	r2, #4
    6386:	0028      	movs	r0, r5
    6388:	4b38      	ldr	r3, [pc, #224]	; (646c <LORAREG_GetAttr_DRangeChBandT2+0xf4>)
    638a:	4798      	blx	r3
	switch (chMaskCntl)
    638c:	782b      	ldrb	r3, [r5, #0]
    638e:	2b00      	cmp	r3, #0
    6390:	d017      	beq.n	63c2 <LORAREG_GetAttr_DRangeChBandT2+0x4a>
    6392:	2b06      	cmp	r3, #6
    6394:	d159      	bne.n	644a <LORAREG_GetAttr_DRangeChBandT2+0xd2>
			for (i = 0; i < RegParams.maxChannels; i++)
    6396:	3324      	adds	r3, #36	; 0x24
    6398:	4a35      	ldr	r2, [pc, #212]	; (6470 <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    639a:	56d7      	ldrsb	r7, [r2, r3]
    639c:	2000      	movs	r0, #0
    639e:	2507      	movs	r5, #7
    63a0:	2f00      	cmp	r7, #0
    63a2:	dd54      	ble.n	644e <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    63a4:	4a32      	ldr	r2, [pc, #200]	; (6470 <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    63a6:	7916      	ldrb	r6, [r2, #4]
    63a8:	7953      	ldrb	r3, [r2, #5]
    63aa:	021b      	lsls	r3, r3, #8
    63ac:	4333      	orrs	r3, r6
    63ae:	7996      	ldrb	r6, [r2, #6]
    63b0:	0436      	lsls	r6, r6, #16
    63b2:	4333      	orrs	r3, r6
    63b4:	79d6      	ldrb	r6, [r2, #7]
    63b6:	0636      	lsls	r6, r6, #24
    63b8:	431e      	orrs	r6, r3
    63ba:	2000      	movs	r0, #0
    63bc:	2507      	movs	r5, #7
    63be:	2200      	movs	r2, #0
    63c0:	e035      	b.n	642e <LORAREG_GetAttr_DRangeChBandT2+0xb6>
			for (i = 0; i < RegParams.maxChannels; i++)
    63c2:	232a      	movs	r3, #42	; 0x2a
    63c4:	4a2a      	ldr	r2, [pc, #168]	; (6470 <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    63c6:	56d3      	ldrsb	r3, [r2, r3]
    63c8:	469c      	mov	ip, r3
    63ca:	2b00      	cmp	r3, #0
    63cc:	dd4a      	ble.n	6464 <LORAREG_GetAttr_DRangeChBandT2+0xec>
		chBandDr = getChBandDrT2(bandDrReq.chnlMaskCntl,bandDrReq.chnlMask);
    63ce:	ab01      	add	r3, sp, #4
    63d0:	885e      	ldrh	r6, [r3, #2]
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    63d2:	7917      	ldrb	r7, [r2, #4]
    63d4:	7953      	ldrb	r3, [r2, #5]
    63d6:	021b      	lsls	r3, r3, #8
    63d8:	433b      	orrs	r3, r7
    63da:	7997      	ldrb	r7, [r2, #6]
    63dc:	043f      	lsls	r7, r7, #16
    63de:	433b      	orrs	r3, r7
    63e0:	79d7      	ldrb	r7, [r2, #7]
    63e2:	063f      	lsls	r7, r7, #24
    63e4:	431f      	orrs	r7, r3
    63e6:	2000      	movs	r0, #0
    63e8:	2507      	movs	r5, #7
    63ea:	2200      	movs	r2, #0
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    63ec:	2401      	movs	r4, #1
    63ee:	e00b      	b.n	6408 <LORAREG_GetAttr_DRangeChBandT2+0x90>
    63f0:	784b      	ldrb	r3, [r1, #1]
    63f2:	091b      	lsrs	r3, r3, #4
    63f4:	4283      	cmp	r3, r0
    63f6:	dd02      	ble.n	63fe <LORAREG_GetAttr_DRangeChBandT2+0x86>
    63f8:	4234      	tst	r4, r6
    63fa:	d000      	beq.n	63fe <LORAREG_GetAttr_DRangeChBandT2+0x86>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    63fc:	0018      	movs	r0, r3
				auxChannelMask = auxChannelMask >> SHIFT1;
    63fe:	0876      	lsrs	r6, r6, #1
			for (i = 0; i < RegParams.maxChannels; i++)
    6400:	3201      	adds	r2, #1
    6402:	b2d2      	uxtb	r2, r2
    6404:	4562      	cmp	r2, ip
    6406:	da22      	bge.n	644e <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    6408:	0051      	lsls	r1, r2, #1
    640a:	1879      	adds	r1, r7, r1
    640c:	784b      	ldrb	r3, [r1, #1]
    640e:	071b      	lsls	r3, r3, #28
    6410:	0f1b      	lsrs	r3, r3, #28
    6412:	42ab      	cmp	r3, r5
    6414:	daec      	bge.n	63f0 <LORAREG_GetAttr_DRangeChBandT2+0x78>
    6416:	4234      	tst	r4, r6
    6418:	d0f1      	beq.n	63fe <LORAREG_GetAttr_DRangeChBandT2+0x86>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    641a:	001d      	movs	r5, r3
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    641c:	784b      	ldrb	r3, [r1, #1]
    641e:	091b      	lsrs	r3, r3, #4
    6420:	4298      	cmp	r0, r3
    6422:	dbeb      	blt.n	63fc <LORAREG_GetAttr_DRangeChBandT2+0x84>
    6424:	e7eb      	b.n	63fe <LORAREG_GetAttr_DRangeChBandT2+0x86>
			for (i = 0; i < RegParams.maxChannels; i++)
    6426:	3201      	adds	r2, #1
    6428:	b2d2      	uxtb	r2, r2
    642a:	42ba      	cmp	r2, r7
    642c:	da0f      	bge.n	644e <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    642e:	0051      	lsls	r1, r2, #1
    6430:	1871      	adds	r1, r6, r1
    6432:	784b      	ldrb	r3, [r1, #1]
    6434:	071b      	lsls	r3, r3, #28
    6436:	0f1b      	lsrs	r3, r3, #28
    6438:	42ab      	cmp	r3, r5
    643a:	da00      	bge.n	643e <LORAREG_GetAttr_DRangeChBandT2+0xc6>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    643c:	001d      	movs	r5, r3
				if (RegParams.pChParams[i].dataRange.max > auxMaxDataRate)
    643e:	784b      	ldrb	r3, [r1, #1]
    6440:	091b      	lsrs	r3, r3, #4
    6442:	4283      	cmp	r3, r0
    6444:	ddef      	ble.n	6426 <LORAREG_GetAttr_DRangeChBandT2+0xae>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    6446:	0018      	movs	r0, r3
    6448:	e7ed      	b.n	6426 <LORAREG_GetAttr_DRangeChBandT2+0xae>
			auxMaxDataRate = 0xFF;
    644a:	20ff      	movs	r0, #255	; 0xff
			auxMinDataRate = 0xFF;
    644c:	25ff      	movs	r5, #255	; 0xff
    644e:	0100      	lsls	r0, r0, #4
    6450:	230f      	movs	r3, #15
    6452:	401d      	ands	r5, r3
    6454:	4328      	orrs	r0, r5
		memcpy(attrOutput,&chBandDr,sizeof(DataRange_t));
    6456:	4643      	mov	r3, r8
    6458:	7018      	strb	r0, [r3, #0]
}
    645a:	2008      	movs	r0, #8
    645c:	b002      	add	sp, #8
    645e:	bc04      	pop	{r2}
    6460:	4690      	mov	r8, r2
    6462:	bdf0      	pop	{r4, r5, r6, r7, pc}
			for (i = 0; i < RegParams.maxChannels; i++)
    6464:	2000      	movs	r0, #0
    6466:	2507      	movs	r5, #7
    6468:	e7f1      	b.n	644e <LORAREG_GetAttr_DRangeChBandT2+0xd6>
    646a:	46c0      	nop			; (mov r8, r8)
    646c:	0001516d 	.word	0x0001516d
    6470:	20001220 	.word	0x20001220

00006474 <LORAREG_GetAttr_FreqT2>:
{
    6474:	b510      	push	{r4, lr}
    6476:	0014      	movs	r4, r2
	channelId = *(uint8_t *)attrInput;
    6478:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels)
    647a:	222a      	movs	r2, #42	; 0x2a
    647c:	490d      	ldr	r1, [pc, #52]	; (64b4 <LORAREG_GetAttr_FreqT2+0x40>)
    647e:	568a      	ldrsb	r2, [r1, r2]
		return LORAWAN_INVALID_PARAMETER;
    6480:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels)
    6482:	4293      	cmp	r3, r2
    6484:	dd00      	ble.n	6488 <LORAREG_GetAttr_FreqT2+0x14>
}
    6486:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,(&RegParams.pOtherChParams[channelId].ulfrequency),sizeof(uint32_t));
    6488:	0008      	movs	r0, r1
    648a:	7a09      	ldrb	r1, [r1, #8]
    648c:	7a42      	ldrb	r2, [r0, #9]
    648e:	0212      	lsls	r2, r2, #8
    6490:	430a      	orrs	r2, r1
    6492:	7a81      	ldrb	r1, [r0, #10]
    6494:	0409      	lsls	r1, r1, #16
    6496:	430a      	orrs	r2, r1
    6498:	7ac1      	ldrb	r1, [r0, #11]
    649a:	0609      	lsls	r1, r1, #24
    649c:	4311      	orrs	r1, r2
    649e:	005a      	lsls	r2, r3, #1
    64a0:	18d3      	adds	r3, r2, r3
    64a2:	009b      	lsls	r3, r3, #2
    64a4:	18c9      	adds	r1, r1, r3
    64a6:	2204      	movs	r2, #4
    64a8:	0020      	movs	r0, r4
    64aa:	4b03      	ldr	r3, [pc, #12]	; (64b8 <LORAREG_GetAttr_FreqT2+0x44>)
    64ac:	4798      	blx	r3
	return result;
    64ae:	2008      	movs	r0, #8
    64b0:	e7e9      	b.n	6486 <LORAREG_GetAttr_FreqT2+0x12>
    64b2:	46c0      	nop			; (mov r8, r8)
    64b4:	20001220 	.word	0x20001220
    64b8:	0001516d 	.word	0x0001516d

000064bc <LORAREG_GetAttr_Rx1WindowparamsType4>:
{
    64bc:	b510      	push	{r4, lr}
    64be:	b082      	sub	sp, #8
    64c0:	0010      	movs	r0, r2
	if((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923)) != 0) &&  rx1WindowParamReq->joining)
    64c2:	232e      	movs	r3, #46	; 0x2e
    64c4:	4a37      	ldr	r2, [pc, #220]	; (65a4 <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    64c6:	5cd2      	ldrb	r2, [r2, r3]
    64c8:	4b37      	ldr	r3, [pc, #220]	; (65a8 <LORAREG_GetAttr_Rx1WindowparamsType4+0xec>)
    64ca:	4113      	asrs	r3, r2
    64cc:	07db      	lsls	r3, r3, #31
    64ce:	d502      	bpl.n	64d6 <LORAREG_GetAttr_Rx1WindowparamsType4+0x1a>
    64d0:	780b      	ldrb	r3, [r1, #0]
    64d2:	2b00      	cmp	r3, #0
    64d4:	d116      	bne.n	6504 <LORAREG_GetAttr_Rx1WindowparamsType4+0x48>
	if(RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1)
    64d6:	23e1      	movs	r3, #225	; 0xe1
    64d8:	005b      	lsls	r3, r3, #1
    64da:	4a32      	ldr	r2, [pc, #200]	; (65a4 <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    64dc:	5cd4      	ldrb	r4, [r2, r3]
		minDR = DR2;
    64de:	3bc1      	subs	r3, #193	; 0xc1
    64e0:	3bff      	subs	r3, #255	; 0xff
    64e2:	401c      	ands	r4, r3
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    64e4:	784b      	ldrb	r3, [r1, #1]
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    64e6:	2b05      	cmp	r3, #5
    64e8:	d92c      	bls.n	6544 <LORAREG_GetAttr_Rx1WindowparamsType4+0x88>
    64ea:	2205      	movs	r2, #5
    64ec:	1ad3      	subs	r3, r2, r3
    64ee:	b25b      	sxtb	r3, r3
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    64f0:	788a      	ldrb	r2, [r1, #2]
	if (rx1WindowParamReq->currDr >= effectiveDROffset)
    64f2:	429a      	cmp	r2, r3
    64f4:	db31      	blt.n	655a <LORAREG_GetAttr_Rx1WindowparamsType4+0x9e>
		rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    64f6:	1ad3      	subs	r3, r2, r3
    64f8:	b2db      	uxtb	r3, r3
		if(rx1WindowParams->rx1Dr < minDR)
    64fa:	42a3      	cmp	r3, r4
    64fc:	d224      	bcs.n	6548 <LORAREG_GetAttr_Rx1WindowparamsType4+0x8c>
			rx1WindowParams->rx1Dr = minDR;
    64fe:	466b      	mov	r3, sp
    6500:	711c      	strb	r4, [r3, #4]
    6502:	e02c      	b.n	655e <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
		rx1WindowParams->rx1Dr = DR2;
    6504:	2302      	movs	r3, #2
    6506:	466a      	mov	r2, sp
    6508:	7113      	strb	r3, [r2, #4]
		rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;
    650a:	4926      	ldr	r1, [pc, #152]	; (65a4 <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    650c:	7a0b      	ldrb	r3, [r1, #8]
    650e:	7a4a      	ldrb	r2, [r1, #9]
    6510:	0212      	lsls	r2, r2, #8
    6512:	4313      	orrs	r3, r2
    6514:	7a8a      	ldrb	r2, [r1, #10]
    6516:	0412      	lsls	r2, r2, #16
    6518:	431a      	orrs	r2, r3
    651a:	7acb      	ldrb	r3, [r1, #11]
    651c:	061b      	lsls	r3, r3, #24
    651e:	431a      	orrs	r2, r3
    6520:	232f      	movs	r3, #47	; 0x2f
    6522:	5cc9      	ldrb	r1, [r1, r3]
    6524:	004b      	lsls	r3, r1, #1
    6526:	185b      	adds	r3, r3, r1
    6528:	009b      	lsls	r3, r3, #2
    652a:	189b      	adds	r3, r3, r2
    652c:	7919      	ldrb	r1, [r3, #4]
    652e:	795a      	ldrb	r2, [r3, #5]
    6530:	0212      	lsls	r2, r2, #8
    6532:	4311      	orrs	r1, r2
    6534:	799a      	ldrb	r2, [r3, #6]
    6536:	0412      	lsls	r2, r2, #16
    6538:	430a      	orrs	r2, r1
    653a:	79db      	ldrb	r3, [r3, #7]
    653c:	061b      	lsls	r3, r3, #24
    653e:	4313      	orrs	r3, r2
    6540:	9300      	str	r3, [sp, #0]
    6542:	e028      	b.n	6596 <LORAREG_GetAttr_Rx1WindowparamsType4+0xda>
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    6544:	b25b      	sxtb	r3, r3
    6546:	e7d3      	b.n	64f0 <LORAREG_GetAttr_Rx1WindowparamsType4+0x34>
		else if(rx1WindowParams->rx1Dr > maxDR)
    6548:	2b05      	cmp	r3, #5
    654a:	d802      	bhi.n	6552 <LORAREG_GetAttr_Rx1WindowparamsType4+0x96>
		rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    654c:	466a      	mov	r2, sp
    654e:	7113      	strb	r3, [r2, #4]
    6550:	e005      	b.n	655e <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
			rx1WindowParams->rx1Dr = maxDR;
    6552:	2305      	movs	r3, #5
    6554:	466a      	mov	r2, sp
    6556:	7113      	strb	r3, [r2, #4]
    6558:	e001      	b.n	655e <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
		rx1WindowParams->rx1Dr = minDR;
    655a:	466b      	mov	r3, sp
    655c:	711c      	strb	r4, [r3, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;
    655e:	4911      	ldr	r1, [pc, #68]	; (65a4 <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    6560:	7a0b      	ldrb	r3, [r1, #8]
    6562:	7a4a      	ldrb	r2, [r1, #9]
    6564:	0212      	lsls	r2, r2, #8
    6566:	4313      	orrs	r3, r2
    6568:	7a8a      	ldrb	r2, [r1, #10]
    656a:	0412      	lsls	r2, r2, #16
    656c:	431a      	orrs	r2, r3
    656e:	7acb      	ldrb	r3, [r1, #11]
    6570:	061b      	lsls	r3, r3, #24
    6572:	431a      	orrs	r2, r3
    6574:	232f      	movs	r3, #47	; 0x2f
    6576:	5cc9      	ldrb	r1, [r1, r3]
    6578:	004b      	lsls	r3, r1, #1
    657a:	185b      	adds	r3, r3, r1
    657c:	009b      	lsls	r3, r3, #2
    657e:	189b      	adds	r3, r3, r2
    6580:	7919      	ldrb	r1, [r3, #4]
    6582:	795a      	ldrb	r2, [r3, #5]
    6584:	0212      	lsls	r2, r2, #8
    6586:	4311      	orrs	r1, r2
    6588:	799a      	ldrb	r2, [r3, #6]
    658a:	0412      	lsls	r2, r2, #16
    658c:	430a      	orrs	r2, r1
    658e:	79db      	ldrb	r3, [r3, #7]
    6590:	061b      	lsls	r3, r3, #24
    6592:	4313      	orrs	r3, r2
    6594:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    6596:	2208      	movs	r2, #8
    6598:	4669      	mov	r1, sp
    659a:	4b04      	ldr	r3, [pc, #16]	; (65ac <LORAREG_GetAttr_Rx1WindowparamsType4+0xf0>)
    659c:	4798      	blx	r3
}
    659e:	2008      	movs	r0, #8
    65a0:	b002      	add	sp, #8
    65a2:	bd10      	pop	{r4, pc}
    65a4:	20001220 	.word	0x20001220
    65a8:	00007fe0 	.word	0x00007fe0
    65ac:	0001516d 	.word	0x0001516d

000065b0 <LORAREG_GetAttr_FreqT3>:
{
    65b0:	b510      	push	{r4, lr}
    65b2:	0014      	movs	r4, r2
	channelId = *(uint8_t *)attrInput;
    65b4:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels) 
    65b6:	222a      	movs	r2, #42	; 0x2a
    65b8:	490d      	ldr	r1, [pc, #52]	; (65f0 <LORAREG_GetAttr_FreqT3+0x40>)
    65ba:	568a      	ldrsb	r2, [r1, r2]
		result = LORAWAN_INVALID_PARAMETER;
    65bc:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels) 
    65be:	4293      	cmp	r3, r2
    65c0:	dd00      	ble.n	65c4 <LORAREG_GetAttr_FreqT3+0x14>
}
    65c2:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,(&RegParams.pOtherChParams[channelId].ulfrequency),sizeof(uint32_t));
    65c4:	0008      	movs	r0, r1
    65c6:	7a09      	ldrb	r1, [r1, #8]
    65c8:	7a42      	ldrb	r2, [r0, #9]
    65ca:	0212      	lsls	r2, r2, #8
    65cc:	430a      	orrs	r2, r1
    65ce:	7a81      	ldrb	r1, [r0, #10]
    65d0:	0409      	lsls	r1, r1, #16
    65d2:	430a      	orrs	r2, r1
    65d4:	7ac1      	ldrb	r1, [r0, #11]
    65d6:	0609      	lsls	r1, r1, #24
    65d8:	4311      	orrs	r1, r2
    65da:	005a      	lsls	r2, r3, #1
    65dc:	18d3      	adds	r3, r2, r3
    65de:	009b      	lsls	r3, r3, #2
    65e0:	18c9      	adds	r1, r1, r3
    65e2:	2204      	movs	r2, #4
    65e4:	0020      	movs	r0, r4
    65e6:	4b03      	ldr	r3, [pc, #12]	; (65f4 <LORAREG_GetAttr_FreqT3+0x44>)
    65e8:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    65ea:	2008      	movs	r0, #8
    65ec:	e7e9      	b.n	65c2 <LORAREG_GetAttr_FreqT3+0x12>
    65ee:	46c0      	nop			; (mov r8, r8)
    65f0:	20001220 	.word	0x20001220
    65f4:	0001516d 	.word	0x0001516d

000065f8 <LORAREG_GetAttr_Rx1WindowparamsType3>:
{
    65f8:	b500      	push	{lr}
    65fa:	b083      	sub	sp, #12
    65fc:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    65fe:	784b      	ldrb	r3, [r1, #1]
    6600:	788a      	ldrb	r2, [r1, #2]
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    6602:	2b05      	cmp	r3, #5
    6604:	d90b      	bls.n	661e <LORAREG_GetAttr_Rx1WindowparamsType3+0x26>
    6606:	2105      	movs	r1, #5
    6608:	1acb      	subs	r3, r1, r3
    660a:	b25b      	sxtb	r3, r3
    if (rx1WindowParamReq->currDr >= effectiveDROffset)
    660c:	429a      	cmp	r2, r3
    660e:	db0c      	blt.n	662a <LORAREG_GetAttr_Rx1WindowparamsType3+0x32>
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    6610:	1ad3      	subs	r3, r2, r3
    6612:	b2db      	uxtb	r3, r3
		else if(rx1WindowParams->rx1Dr > maxDR)
    6614:	2b05      	cmp	r3, #5
    6616:	d804      	bhi.n	6622 <LORAREG_GetAttr_Rx1WindowparamsType3+0x2a>
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    6618:	466a      	mov	r2, sp
    661a:	7113      	strb	r3, [r2, #4]
    661c:	e008      	b.n	6630 <LORAREG_GetAttr_Rx1WindowparamsType3+0x38>
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    661e:	b25b      	sxtb	r3, r3
    6620:	e7f4      	b.n	660c <LORAREG_GetAttr_Rx1WindowparamsType3+0x14>
			rx1WindowParams->rx1Dr = maxDR;
    6622:	2305      	movs	r3, #5
    6624:	466a      	mov	r2, sp
    6626:	7113      	strb	r3, [r2, #4]
    6628:	e002      	b.n	6630 <LORAREG_GetAttr_Rx1WindowparamsType3+0x38>
        rx1WindowParams->rx1Dr = minDR;
    662a:	2300      	movs	r3, #0
    662c:	466a      	mov	r2, sp
    662e:	7113      	strb	r3, [r2, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;			
    6630:	4911      	ldr	r1, [pc, #68]	; (6678 <LORAREG_GetAttr_Rx1WindowparamsType3+0x80>)
    6632:	7a0b      	ldrb	r3, [r1, #8]
    6634:	7a4a      	ldrb	r2, [r1, #9]
    6636:	0212      	lsls	r2, r2, #8
    6638:	4313      	orrs	r3, r2
    663a:	7a8a      	ldrb	r2, [r1, #10]
    663c:	0412      	lsls	r2, r2, #16
    663e:	431a      	orrs	r2, r3
    6640:	7acb      	ldrb	r3, [r1, #11]
    6642:	061b      	lsls	r3, r3, #24
    6644:	431a      	orrs	r2, r3
    6646:	232f      	movs	r3, #47	; 0x2f
    6648:	5cc9      	ldrb	r1, [r1, r3]
    664a:	004b      	lsls	r3, r1, #1
    664c:	185b      	adds	r3, r3, r1
    664e:	009b      	lsls	r3, r3, #2
    6650:	189b      	adds	r3, r3, r2
    6652:	7919      	ldrb	r1, [r3, #4]
    6654:	795a      	ldrb	r2, [r3, #5]
    6656:	0212      	lsls	r2, r2, #8
    6658:	4311      	orrs	r1, r2
    665a:	799a      	ldrb	r2, [r3, #6]
    665c:	0412      	lsls	r2, r2, #16
    665e:	430a      	orrs	r2, r1
    6660:	79db      	ldrb	r3, [r3, #7]
    6662:	061b      	lsls	r3, r3, #24
    6664:	4313      	orrs	r3, r2
    6666:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    6668:	2208      	movs	r2, #8
    666a:	4669      	mov	r1, sp
    666c:	4b03      	ldr	r3, [pc, #12]	; (667c <LORAREG_GetAttr_Rx1WindowparamsType3+0x84>)
    666e:	4798      	blx	r3
}
    6670:	2008      	movs	r0, #8
    6672:	b003      	add	sp, #12
    6674:	bd00      	pop	{pc}
    6676:	46c0      	nop			; (mov r8, r8)
    6678:	20001220 	.word	0x20001220
    667c:	0001516d 	.word	0x0001516d

00006680 <LORAREG_GetAttr_minLBTChPauseTimer>:
{
    6680:	b5f0      	push	{r4, r5, r6, r7, lr}
    6682:	46de      	mov	lr, fp
    6684:	4657      	mov	r7, sl
    6686:	464e      	mov	r6, r9
    6688:	4645      	mov	r5, r8
    668a:	b5e0      	push	{r5, r6, r7, lr}
    668c:	b085      	sub	sp, #20
    668e:	9200      	str	r2, [sp, #0]
	uint32_t minim = UINT32_MAX;
    6690:	2301      	movs	r3, #1
    6692:	425b      	negs	r3, r3
    6694:	9303      	str	r3, [sp, #12]
	currentDataRate = *(uint8_t *)attrInput;
    6696:	780b      	ldrb	r3, [r1, #0]
    6698:	4699      	mov	r9, r3
	for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    669a:	232a      	movs	r3, #42	; 0x2a
    669c:	4a2a      	ldr	r2, [pc, #168]	; (6748 <LORAREG_GetAttr_minLBTChPauseTimer+0xc8>)
    669e:	56d7      	ldrsb	r7, [r2, r3]
    66a0:	2f00      	cmp	r7, #0
    66a2:	dd40      	ble.n	6726 <LORAREG_GetAttr_minLBTChPauseTimer+0xa6>
		if ( (RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) 
    66a4:	7916      	ldrb	r6, [r2, #4]
    66a6:	7953      	ldrb	r3, [r2, #5]
    66a8:	021b      	lsls	r3, r3, #8
    66aa:	4333      	orrs	r3, r6
    66ac:	7996      	ldrb	r6, [r2, #6]
    66ae:	0436      	lsls	r6, r6, #16
    66b0:	4333      	orrs	r3, r6
    66b2:	79d6      	ldrb	r6, [r2, #7]
    66b4:	0636      	lsls	r6, r6, #24
    66b6:	431e      	orrs	r6, r3
    66b8:	2300      	movs	r3, #0
    66ba:	469a      	mov	sl, r3
    66bc:	3b01      	subs	r3, #1
    66be:	4698      	mov	r8, r3
    66c0:	2300      	movs	r3, #0
    66c2:	2100      	movs	r1, #0
    66c4:	4694      	mov	ip, r2
			 && (currentDataRate >= RegParams.pChParams[i].dataRange.min) 
    66c6:	464a      	mov	r2, r9
    66c8:	9201      	str	r2, [sp, #4]
    66ca:	46c3      	mov	fp, r8
    66cc:	e004      	b.n	66d8 <LORAREG_GetAttr_minLBTChPauseTimer+0x58>
	for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    66ce:	3101      	adds	r1, #1
    66d0:	b2c9      	uxtb	r1, r1
    66d2:	000b      	movs	r3, r1
    66d4:	42b9      	cmp	r1, r7
    66d6:	da23      	bge.n	6720 <LORAREG_GetAttr_minLBTChPauseTimer+0xa0>
		if ( (RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) 
    66d8:	004a      	lsls	r2, r1, #1
    66da:	18b2      	adds	r2, r6, r2
    66dc:	7814      	ldrb	r4, [r2, #0]
    66de:	2c00      	cmp	r4, #0
    66e0:	d0f5      	beq.n	66ce <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    66e2:	3358      	adds	r3, #88	; 0x58
    66e4:	009b      	lsls	r3, r3, #2
    66e6:	4463      	add	r3, ip
    66e8:	7a18      	ldrb	r0, [r3, #8]
    66ea:	4680      	mov	r8, r0
    66ec:	7a58      	ldrb	r0, [r3, #9]
    66ee:	0200      	lsls	r0, r0, #8
    66f0:	4645      	mov	r5, r8
    66f2:	4305      	orrs	r5, r0
    66f4:	7a98      	ldrb	r0, [r3, #10]
    66f6:	0400      	lsls	r0, r0, #16
    66f8:	4328      	orrs	r0, r5
    66fa:	7adb      	ldrb	r3, [r3, #11]
    66fc:	061b      	lsls	r3, r3, #24
    66fe:	4303      	orrs	r3, r0
    6700:	d0e5      	beq.n	66ce <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
		     && (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) 
    6702:	459b      	cmp	fp, r3
    6704:	d3e3      	bcc.n	66ce <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
			 && (currentDataRate >= RegParams.pChParams[i].dataRange.min) 
    6706:	7850      	ldrb	r0, [r2, #1]
    6708:	0700      	lsls	r0, r0, #28
    670a:	0f00      	lsrs	r0, r0, #28
    670c:	4581      	cmp	r9, r0
    670e:	dbde      	blt.n	66ce <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
			 && (currentDataRate <= RegParams.pChParams[i].dataRange.max) )
    6710:	7852      	ldrb	r2, [r2, #1]
    6712:	0912      	lsrs	r2, r2, #4
    6714:	9801      	ldr	r0, [sp, #4]
    6716:	4290      	cmp	r0, r2
    6718:	dcd9      	bgt.n	66ce <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    671a:	46a2      	mov	sl, r4
			minim = RegParams.cmnParams.paramsType2.channelTimer[i];
    671c:	469b      	mov	fp, r3
    671e:	e7d6      	b.n	66ce <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    6720:	4653      	mov	r3, sl
    6722:	2b00      	cmp	r3, #0
    6724:	d10c      	bne.n	6740 <LORAREG_GetAttr_minLBTChPauseTimer+0xc0>
	memcpy(attrOutput,&minim,sizeof(uint32_t));
    6726:	2204      	movs	r2, #4
    6728:	a903      	add	r1, sp, #12
    672a:	9800      	ldr	r0, [sp, #0]
    672c:	4b07      	ldr	r3, [pc, #28]	; (674c <LORAREG_GetAttr_minLBTChPauseTimer+0xcc>)
    672e:	4798      	blx	r3
}
    6730:	2008      	movs	r0, #8
    6732:	b005      	add	sp, #20
    6734:	bc3c      	pop	{r2, r3, r4, r5}
    6736:	4690      	mov	r8, r2
    6738:	4699      	mov	r9, r3
    673a:	46a2      	mov	sl, r4
    673c:	46ab      	mov	fp, r5
    673e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6740:	465b      	mov	r3, fp
    6742:	9303      	str	r3, [sp, #12]
    6744:	e7ef      	b.n	6726 <LORAREG_GetAttr_minLBTChPauseTimer+0xa6>
    6746:	46c0      	nop			; (mov r8, r8)
    6748:	20001220 	.word	0x20001220
    674c:	0001516d 	.word	0x0001516d

00006750 <ValidateTxFreqT2>:
{
    6750:	b500      	push	{lr}
    6752:	b083      	sub	sp, #12
	memcpy(&val_freqTx,attrInput,sizeof(ValUpdateFreqTx_t));
    6754:	2208      	movs	r2, #8
    6756:	4668      	mov	r0, sp
    6758:	4b04      	ldr	r3, [pc, #16]	; (676c <ValidateTxFreqT2+0x1c>)
    675a:	4798      	blx	r3
	retVal = pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,(void *)&val_freqTx.frequencyNew);
    675c:	4b04      	ldr	r3, [pc, #16]	; (6770 <ValidateTxFreqT2+0x20>)
    675e:	685b      	ldr	r3, [r3, #4]
    6760:	4669      	mov	r1, sp
    6762:	2001      	movs	r0, #1
    6764:	4798      	blx	r3
}
    6766:	b003      	add	sp, #12
    6768:	bd00      	pop	{pc}
    676a:	46c0      	nop			; (mov r8, r8)
    676c:	0001516d 	.word	0x0001516d
    6770:	20000d40 	.word	0x20000d40

00006774 <ValidateFreqIN>:
{
    6774:	b500      	push	{lr}
    6776:	b083      	sub	sp, #12
	memcpy(&newFreq,attrInput,sizeof(uint32_t));
    6778:	2204      	movs	r2, #4
    677a:	a801      	add	r0, sp, #4
    677c:	4b06      	ldr	r3, [pc, #24]	; (6798 <ValidateFreqIN+0x24>)
    677e:	4798      	blx	r3
	if(newFreq > FREQ_867000KHZ || newFreq < FREQ_865000KHZ)
    6780:	9b01      	ldr	r3, [sp, #4]
    6782:	4a06      	ldr	r2, [pc, #24]	; (679c <ValidateFreqIN+0x28>)
    6784:	4694      	mov	ip, r2
    6786:	4463      	add	r3, ip
    6788:	4a05      	ldr	r2, [pc, #20]	; (67a0 <ValidateFreqIN+0x2c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    678a:	2008      	movs	r0, #8
	if(newFreq > FREQ_867000KHZ || newFreq < FREQ_865000KHZ)
    678c:	4293      	cmp	r3, r2
    678e:	d900      	bls.n	6792 <ValidateFreqIN+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    6790:	3002      	adds	r0, #2
}
    6792:	b003      	add	sp, #12
    6794:	bd00      	pop	{pc}
    6796:	46c0      	nop			; (mov r8, r8)
    6798:	0001516d 	.word	0x0001516d
    679c:	cc7125c0 	.word	0xcc7125c0
    67a0:	001e8480 	.word	0x001e8480

000067a4 <ValidateFreqJP>:
{
    67a4:	b500      	push	{lr}
    67a6:	b083      	sub	sp, #12
	memcpy(&newFreq,attrInput,sizeof(uint32_t));
    67a8:	2204      	movs	r2, #4
    67aa:	a801      	add	r0, sp, #4
    67ac:	4b06      	ldr	r3, [pc, #24]	; (67c8 <ValidateFreqJP+0x24>)
    67ae:	4798      	blx	r3
	if(newFreq > FREQ_928000KHZ || newFreq < FREQ_920000KHZ)
    67b0:	9b01      	ldr	r3, [sp, #4]
    67b2:	4a06      	ldr	r2, [pc, #24]	; (67cc <ValidateFreqJP+0x28>)
    67b4:	4694      	mov	ip, r2
    67b6:	4463      	add	r3, ip
    67b8:	4a05      	ldr	r2, [pc, #20]	; (67d0 <ValidateFreqJP+0x2c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    67ba:	2008      	movs	r0, #8
	if(newFreq > FREQ_928000KHZ || newFreq < FREQ_920000KHZ)
    67bc:	4293      	cmp	r3, r2
    67be:	d900      	bls.n	67c2 <ValidateFreqJP+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    67c0:	3002      	adds	r0, #2
}
    67c2:	b003      	add	sp, #12
    67c4:	bd00      	pop	{pc}
    67c6:	46c0      	nop			; (mov r8, r8)
    67c8:	0001516d 	.word	0x0001516d
    67cc:	c929ea00 	.word	0xc929ea00
    67d0:	007a1200 	.word	0x007a1200

000067d4 <ValidateFreqKR>:
{
    67d4:	b500      	push	{lr}
    67d6:	b083      	sub	sp, #12
	memcpy(&freqNew,attrInput,sizeof(uint32_t));
    67d8:	2204      	movs	r2, #4
    67da:	a801      	add	r0, sp, #4
    67dc:	4b0a      	ldr	r3, [pc, #40]	; (6808 <ValidateFreqKR+0x34>)
    67de:	4798      	blx	r3
		if(freq == freqNew)
    67e0:	9a01      	ldr	r2, [sp, #4]
    67e2:	4b0a      	ldr	r3, [pc, #40]	; (680c <ValidateFreqKR+0x38>)
    67e4:	429a      	cmp	r2, r3
    67e6:	d00b      	beq.n	6800 <ValidateFreqKR+0x2c>
    67e8:	4b09      	ldr	r3, [pc, #36]	; (6810 <ValidateFreqKR+0x3c>)
	for(freq = FREQ_920900KHZ; freq <= FREQ_923300KHZ; freq += freqwidth)
    67ea:	490a      	ldr	r1, [pc, #40]	; (6814 <ValidateFreqKR+0x40>)
		if(freq == freqNew)
    67ec:	429a      	cmp	r2, r3
    67ee:	d009      	beq.n	6804 <ValidateFreqKR+0x30>
	for(freq = FREQ_920900KHZ; freq <= FREQ_923300KHZ; freq += freqwidth)
    67f0:	4809      	ldr	r0, [pc, #36]	; (6818 <ValidateFreqKR+0x44>)
    67f2:	4684      	mov	ip, r0
    67f4:	4463      	add	r3, ip
    67f6:	428b      	cmp	r3, r1
    67f8:	d1f8      	bne.n	67ec <ValidateFreqKR+0x18>
    StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    67fa:	200a      	movs	r0, #10
}
    67fc:	b003      	add	sp, #12
    67fe:	bd00      	pop	{pc}
			result = LORAWAN_SUCCESS;
    6800:	2008      	movs	r0, #8
    6802:	e7fb      	b.n	67fc <ValidateFreqKR+0x28>
    6804:	2008      	movs	r0, #8
    6806:	e7f9      	b.n	67fc <ValidateFreqKR+0x28>
    6808:	0001516d 	.word	0x0001516d
    680c:	36e3d1a0 	.word	0x36e3d1a0
    6810:	36e6dee0 	.word	0x36e6dee0
    6814:	370b7de0 	.word	0x370b7de0
    6818:	00030d40 	.word	0x00030d40

0000681c <setNewChannelsT1>:
{
    681c:	b5f0      	push	{r4, r5, r6, r7, lr}
    681e:	b083      	sub	sp, #12
	memcpy(&updateNewCh,attrInput,sizeof(UpdateNewCh_t));
    6820:	ac01      	add	r4, sp, #4
    6822:	2204      	movs	r2, #4
    6824:	0020      	movs	r0, r4
    6826:	4b1f      	ldr	r3, [pc, #124]	; (68a4 <setNewChannelsT1+0x88>)
    6828:	4798      	blx	r3
	chMask = updateNewCh.channelMask;
    682a:	8827      	ldrh	r7, [r4, #0]
	chMaskCtrl = updateNewCh.channelMaskCntl;
    682c:	78a6      	ldrb	r6, [r4, #2]
    682e:	466b      	mov	r3, sp
    6830:	1cd9      	adds	r1, r3, #3
    6832:	700e      	strb	r6, [r1, #0]
	if(ValidateChannelMaskCntl(CHANNEL_MASK_CNTL, &chMaskCtrl) == LORAWAN_SUCCESS)
    6834:	201b      	movs	r0, #27
    6836:	4b1c      	ldr	r3, [pc, #112]	; (68a8 <setNewChannelsT1+0x8c>)
    6838:	4798      	blx	r3
    683a:	0005      	movs	r5, r0
    683c:	2808      	cmp	r0, #8
    683e:	d003      	beq.n	6848 <setNewChannelsT1+0x2c>
		retVal = LORAWAN_INVALID_PARAMETER;
    6840:	250a      	movs	r5, #10
}
    6842:	0028      	movs	r0, r5
    6844:	b003      	add	sp, #12
    6846:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch(chMaskCtrl)
    6848:	2e06      	cmp	r6, #6
    684a:	d01c      	beq.n	6886 <setNewChannelsT1+0x6a>
    684c:	d80a      	bhi.n	6864 <setNewChannelsT1+0x48>
    684e:	2e04      	cmp	r6, #4
    6850:	d8f7      	bhi.n	6842 <setNewChannelsT1+0x26>
		channel = chMaskCtrl << SHIFT4;
    6852:	0136      	lsls	r6, r6, #4
    6854:	b2f0      	uxtb	r0, r6
				EnableChannels2(channel, channel + 15, chMask);
    6856:	0001      	movs	r1, r0
    6858:	310f      	adds	r1, #15
    685a:	b2c9      	uxtb	r1, r1
    685c:	003a      	movs	r2, r7
    685e:	4b13      	ldr	r3, [pc, #76]	; (68ac <setNewChannelsT1+0x90>)
    6860:	4798      	blx	r3
				break;
    6862:	e7ee      	b.n	6842 <setNewChannelsT1+0x26>
		switch(chMaskCtrl)
    6864:	2400      	movs	r4, #0
    6866:	2e07      	cmp	r6, #7
    6868:	d1eb      	bne.n	6842 <setNewChannelsT1+0x26>
					UpdateChannelIdStatus(i, DISABLED);
    686a:	4e11      	ldr	r6, [pc, #68]	; (68b0 <setNewChannelsT1+0x94>)
    686c:	2100      	movs	r1, #0
    686e:	0020      	movs	r0, r4
    6870:	47b0      	blx	r6
				for(i = 0; i< 63; i++)
    6872:	3401      	adds	r4, #1
    6874:	b2e4      	uxtb	r4, r4
    6876:	2c3f      	cmp	r4, #63	; 0x3f
    6878:	d1f8      	bne.n	686c <setNewChannelsT1+0x50>
				EnableChannels2(64, 71, chMask);
    687a:	003a      	movs	r2, r7
    687c:	2147      	movs	r1, #71	; 0x47
    687e:	2040      	movs	r0, #64	; 0x40
    6880:	4b0a      	ldr	r3, [pc, #40]	; (68ac <setNewChannelsT1+0x90>)
    6882:	4798      	blx	r3
				break;
    6884:	e7dd      	b.n	6842 <setNewChannelsT1+0x26>
		switch(chMaskCtrl)
    6886:	2400      	movs	r4, #0
					UpdateChannelIdStatus(i, ENABLED);
    6888:	4e09      	ldr	r6, [pc, #36]	; (68b0 <setNewChannelsT1+0x94>)
    688a:	2101      	movs	r1, #1
    688c:	0020      	movs	r0, r4
    688e:	47b0      	blx	r6
				for(i = 0; i < 63; i++)
    6890:	3401      	adds	r4, #1
    6892:	b2e4      	uxtb	r4, r4
    6894:	2c3f      	cmp	r4, #63	; 0x3f
    6896:	d1f8      	bne.n	688a <setNewChannelsT1+0x6e>
				EnableChannels2(64, 71, chMask);
    6898:	003a      	movs	r2, r7
    689a:	2147      	movs	r1, #71	; 0x47
    689c:	2040      	movs	r0, #64	; 0x40
    689e:	4b03      	ldr	r3, [pc, #12]	; (68ac <setNewChannelsT1+0x90>)
    68a0:	4798      	blx	r3
			    break;
    68a2:	e7ce      	b.n	6842 <setNewChannelsT1+0x26>
    68a4:	0001516d 	.word	0x0001516d
    68a8:	000056a5 	.word	0x000056a5
    68ac:	00005b69 	.word	0x00005b69
    68b0:	000058dd 	.word	0x000058dd

000068b4 <setDlFrequency>:
{
    68b4:	b510      	push	{r4, lr}
    68b6:	b084      	sub	sp, #16
	memcpy(&updateDlFreq,attrInput,sizeof(ValUpdateFreqTx_t));
    68b8:	ac02      	add	r4, sp, #8
    68ba:	2208      	movs	r2, #8
    68bc:	0020      	movs	r0, r4
    68be:	4b1a      	ldr	r3, [pc, #104]	; (6928 <setDlFrequency+0x74>)
    68c0:	4798      	blx	r3
	Chid.channelIndex = updateDlFreq.channelIndex;
    68c2:	ab01      	add	r3, sp, #4
    68c4:	7922      	ldrb	r2, [r4, #4]
    68c6:	701a      	strb	r2, [r3, #0]
		Chid.allowedForDefaultChannels = ALL_CHANNELS;
    68c8:	2201      	movs	r2, #1
    68ca:	705a      	strb	r2, [r3, #1]
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    68cc:	4b17      	ldr	r3, [pc, #92]	; (692c <setDlFrequency+0x78>)
    68ce:	685b      	ldr	r3, [r3, #4]
    68d0:	0021      	movs	r1, r4
    68d2:	2001      	movs	r0, #1
    68d4:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    68d6:	230a      	movs	r3, #10
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    68d8:	2808      	cmp	r0, #8
    68da:	d002      	beq.n	68e2 <setDlFrequency+0x2e>
}
    68dc:	0018      	movs	r0, r3
    68de:	b004      	add	sp, #16
    68e0:	bd10      	pop	{r4, pc}
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    68e2:	a901      	add	r1, sp, #4
    68e4:	300d      	adds	r0, #13
    68e6:	4b12      	ldr	r3, [pc, #72]	; (6930 <setDlFrequency+0x7c>)
    68e8:	4798      	blx	r3
    68ea:	0003      	movs	r3, r0
    68ec:	2808      	cmp	r0, #8
    68ee:	d001      	beq.n	68f4 <setDlFrequency+0x40>
		result = LORAWAN_INVALID_PARAMETER;
    68f0:	230a      	movs	r3, #10
    68f2:	e7f3      	b.n	68dc <setDlFrequency+0x28>
		RegParams.pOtherChParams[updateDlFreq.channelIndex].rx1Frequency = updateDlFreq.frequencyNew;
    68f4:	490f      	ldr	r1, [pc, #60]	; (6934 <setDlFrequency+0x80>)
    68f6:	7a0a      	ldrb	r2, [r1, #8]
    68f8:	7a48      	ldrb	r0, [r1, #9]
    68fa:	0200      	lsls	r0, r0, #8
    68fc:	4302      	orrs	r2, r0
    68fe:	7a88      	ldrb	r0, [r1, #10]
    6900:	0400      	lsls	r0, r0, #16
    6902:	4310      	orrs	r0, r2
    6904:	7aca      	ldrb	r2, [r1, #11]
    6906:	0612      	lsls	r2, r2, #24
    6908:	4310      	orrs	r0, r2
    690a:	a902      	add	r1, sp, #8
    690c:	790c      	ldrb	r4, [r1, #4]
    690e:	0062      	lsls	r2, r4, #1
    6910:	1912      	adds	r2, r2, r4
    6912:	0092      	lsls	r2, r2, #2
    6914:	1812      	adds	r2, r2, r0
    6916:	7808      	ldrb	r0, [r1, #0]
    6918:	7110      	strb	r0, [r2, #4]
    691a:	7848      	ldrb	r0, [r1, #1]
    691c:	7150      	strb	r0, [r2, #5]
    691e:	7888      	ldrb	r0, [r1, #2]
    6920:	7190      	strb	r0, [r2, #6]
    6922:	78c9      	ldrb	r1, [r1, #3]
    6924:	71d1      	strb	r1, [r2, #7]
    6926:	e7d9      	b.n	68dc <setDlFrequency+0x28>
    6928:	0001516d 	.word	0x0001516d
    692c:	20000d40 	.word	0x20000d40
    6930:	000055b9 	.word	0x000055b9
    6934:	20001220 	.word	0x20001220

00006938 <setFrequency>:
{
    6938:	b570      	push	{r4, r5, r6, lr}
    693a:	b084      	sub	sp, #16
	memcpy(&updateTxFreq,attrInput,sizeof(ValUpdateFreqTx_t));
    693c:	ac02      	add	r4, sp, #8
    693e:	2208      	movs	r2, #8
    6940:	0020      	movs	r0, r4
    6942:	4b39      	ldr	r3, [pc, #228]	; (6a28 <setFrequency+0xf0>)
    6944:	4798      	blx	r3
	valChid.channelIndex = updateTxFreq.channelIndex;
    6946:	ab01      	add	r3, sp, #4
    6948:	7922      	ldrb	r2, [r4, #4]
    694a:	701a      	strb	r2, [r3, #0]
	valChid.allowedForDefaultChannels = WITHOUT_DEFAULT_CHANNELS;
    694c:	2200      	movs	r2, #0
    694e:	705a      	strb	r2, [r3, #1]
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    6950:	4b36      	ldr	r3, [pc, #216]	; (6a2c <setFrequency+0xf4>)
    6952:	685b      	ldr	r3, [r3, #4]
    6954:	0021      	movs	r1, r4
    6956:	2001      	movs	r0, #1
    6958:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    695a:	240a      	movs	r4, #10
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    695c:	2808      	cmp	r0, #8
    695e:	d002      	beq.n	6966 <setFrequency+0x2e>
}
    6960:	0020      	movs	r0, r4
    6962:	b004      	add	sp, #16
    6964:	bd70      	pop	{r4, r5, r6, pc}
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    6966:	a901      	add	r1, sp, #4
    6968:	300d      	adds	r0, #13
    696a:	4b31      	ldr	r3, [pc, #196]	; (6a30 <setFrequency+0xf8>)
    696c:	4798      	blx	r3
    696e:	0004      	movs	r4, r0
    6970:	2808      	cmp	r0, #8
    6972:	d001      	beq.n	6978 <setFrequency+0x40>
		result = LORAWAN_INVALID_PARAMETER;
    6974:	240a      	movs	r4, #10
    6976:	e7f3      	b.n	6960 <setFrequency+0x28>
		uint8_t chIndx = updateTxFreq.channelIndex;
    6978:	ab02      	add	r3, sp, #8
    697a:	791d      	ldrb	r5, [r3, #4]
		if((((1 << RegParams.band) & ((ISM_EUBAND) | (1 << ISM_JPN923))) != 0))
    697c:	232e      	movs	r3, #46	; 0x2e
    697e:	4a2d      	ldr	r2, [pc, #180]	; (6a34 <setFrequency+0xfc>)
    6980:	5cd2      	ldrb	r2, [r2, r3]
    6982:	3b0b      	subs	r3, #11
    6984:	4113      	asrs	r3, r2
    6986:	07db      	lsls	r3, r3, #31
    6988:	d43a      	bmi.n	6a00 <setFrequency+0xc8>
		RegParams.pOtherChParams[chIndx].ulfrequency = updateTxFreq.frequencyNew;
    698a:	006b      	lsls	r3, r5, #1
    698c:	195b      	adds	r3, r3, r5
    698e:	0098      	lsls	r0, r3, #2
    6990:	a902      	add	r1, sp, #8
    6992:	9d02      	ldr	r5, [sp, #8]
    6994:	4b27      	ldr	r3, [pc, #156]	; (6a34 <setFrequency+0xfc>)
    6996:	7a1a      	ldrb	r2, [r3, #8]
    6998:	7a5e      	ldrb	r6, [r3, #9]
    699a:	0236      	lsls	r6, r6, #8
    699c:	4316      	orrs	r6, r2
    699e:	7a9a      	ldrb	r2, [r3, #10]
    69a0:	0412      	lsls	r2, r2, #16
    69a2:	4316      	orrs	r6, r2
    69a4:	7ada      	ldrb	r2, [r3, #11]
    69a6:	0612      	lsls	r2, r2, #24
    69a8:	4332      	orrs	r2, r6
    69aa:	5415      	strb	r5, [r2, r0]
    69ac:	0a2e      	lsrs	r6, r5, #8
    69ae:	1812      	adds	r2, r2, r0
    69b0:	7056      	strb	r6, [r2, #1]
    69b2:	0c2e      	lsrs	r6, r5, #16
    69b4:	7096      	strb	r6, [r2, #2]
    69b6:	0e2d      	lsrs	r5, r5, #24
    69b8:	70d5      	strb	r5, [r2, #3]
		RegParams.pOtherChParams[chIndx].rx1Frequency = updateTxFreq.frequencyNew;
    69ba:	7a1a      	ldrb	r2, [r3, #8]
    69bc:	7a5d      	ldrb	r5, [r3, #9]
    69be:	022d      	lsls	r5, r5, #8
    69c0:	4315      	orrs	r5, r2
    69c2:	7a9a      	ldrb	r2, [r3, #10]
    69c4:	0412      	lsls	r2, r2, #16
    69c6:	4315      	orrs	r5, r2
    69c8:	7ada      	ldrb	r2, [r3, #11]
    69ca:	0612      	lsls	r2, r2, #24
    69cc:	432a      	orrs	r2, r5
    69ce:	1812      	adds	r2, r2, r0
    69d0:	780d      	ldrb	r5, [r1, #0]
    69d2:	7115      	strb	r5, [r2, #4]
    69d4:	784d      	ldrb	r5, [r1, #1]
    69d6:	7155      	strb	r5, [r2, #5]
    69d8:	788d      	ldrb	r5, [r1, #2]
    69da:	7195      	strb	r5, [r2, #6]
    69dc:	78c9      	ldrb	r1, [r1, #3]
    69de:	71d1      	strb	r1, [r2, #7]
		RegParams.pOtherChParams[chIndx].parametersDefined |= FREQUENCY_DEFINED;
    69e0:	7a19      	ldrb	r1, [r3, #8]
    69e2:	7a5a      	ldrb	r2, [r3, #9]
    69e4:	0212      	lsls	r2, r2, #8
    69e6:	4311      	orrs	r1, r2
    69e8:	7a9a      	ldrb	r2, [r3, #10]
    69ea:	0412      	lsls	r2, r2, #16
    69ec:	430a      	orrs	r2, r1
    69ee:	7adb      	ldrb	r3, [r3, #11]
    69f0:	061b      	lsls	r3, r3, #24
    69f2:	4313      	orrs	r3, r2
    69f4:	181b      	adds	r3, r3, r0
    69f6:	7ada      	ldrb	r2, [r3, #11]
    69f8:	2101      	movs	r1, #1
    69fa:	430a      	orrs	r2, r1
    69fc:	72da      	strb	r2, [r3, #11]
    69fe:	e7af      	b.n	6960 <setFrequency+0x28>
		    RegParams.pOtherChParams[chIndx].subBandId = getSubBandId(updateTxFreq.frequencyNew);
    6a00:	4a0c      	ldr	r2, [pc, #48]	; (6a34 <setFrequency+0xfc>)
    6a02:	7a16      	ldrb	r6, [r2, #8]
    6a04:	7a53      	ldrb	r3, [r2, #9]
    6a06:	021b      	lsls	r3, r3, #8
    6a08:	4333      	orrs	r3, r6
    6a0a:	7a96      	ldrb	r6, [r2, #10]
    6a0c:	0436      	lsls	r6, r6, #16
    6a0e:	4333      	orrs	r3, r6
    6a10:	7ad6      	ldrb	r6, [r2, #11]
    6a12:	0636      	lsls	r6, r6, #24
    6a14:	431e      	orrs	r6, r3
    6a16:	006b      	lsls	r3, r5, #1
    6a18:	195b      	adds	r3, r3, r5
    6a1a:	009b      	lsls	r3, r3, #2
    6a1c:	18f6      	adds	r6, r6, r3
    6a1e:	9802      	ldr	r0, [sp, #8]
    6a20:	4b05      	ldr	r3, [pc, #20]	; (6a38 <setFrequency+0x100>)
    6a22:	4798      	blx	r3
    6a24:	7230      	strb	r0, [r6, #8]
    6a26:	e7b0      	b.n	698a <setFrequency+0x52>
    6a28:	0001516d 	.word	0x0001516d
    6a2c:	20000d40 	.word	0x20000d40
    6a30:	000055b9 	.word	0x000055b9
    6a34:	20001220 	.word	0x20001220
    6a38:	00005851 	.word	0x00005851

00006a3c <setDutyCycle>:
{
    6a3c:	b570      	push	{r4, r5, r6, lr}
    6a3e:	b082      	sub	sp, #8
    memcpy(&updateDCycle,attrInput,sizeof(UpdateDutyCycle_t));
    6a40:	ac01      	add	r4, sp, #4
    6a42:	2204      	movs	r2, #4
    6a44:	0020      	movs	r0, r4
    6a46:	4b26      	ldr	r3, [pc, #152]	; (6ae0 <setDutyCycle+0xa4>)
    6a48:	4798      	blx	r3
	val_chid.channelIndex = updateDCycle.channelIndex;
    6a4a:	78a4      	ldrb	r4, [r4, #2]
    6a4c:	466b      	mov	r3, sp
    6a4e:	701c      	strb	r4, [r3, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    6a50:	2301      	movs	r3, #1
    6a52:	466a      	mov	r2, sp
    6a54:	7053      	strb	r3, [r2, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &val_chid) == LORAWAN_SUCCESS)
    6a56:	4669      	mov	r1, sp
    6a58:	2015      	movs	r0, #21
    6a5a:	4b22      	ldr	r3, [pc, #136]	; (6ae4 <setDutyCycle+0xa8>)
    6a5c:	4798      	blx	r3
    6a5e:	2808      	cmp	r0, #8
    6a60:	d002      	beq.n	6a68 <setDutyCycle+0x2c>
		result = LORAWAN_INVALID_PARAMETER;
    6a62:	200a      	movs	r0, #10
}
    6a64:	b002      	add	sp, #8
    6a66:	bd70      	pop	{r4, r5, r6, pc}
		bandId = RegParams.pOtherChParams[updateDCycle.channelIndex].subBandId;
    6a68:	0063      	lsls	r3, r4, #1
    6a6a:	191b      	adds	r3, r3, r4
    6a6c:	0099      	lsls	r1, r3, #2
    6a6e:	4b1e      	ldr	r3, [pc, #120]	; (6ae8 <setDutyCycle+0xac>)
    6a70:	7a1a      	ldrb	r2, [r3, #8]
    6a72:	7a5c      	ldrb	r4, [r3, #9]
    6a74:	0224      	lsls	r4, r4, #8
    6a76:	4314      	orrs	r4, r2
    6a78:	7a9a      	ldrb	r2, [r3, #10]
    6a7a:	0412      	lsls	r2, r2, #16
    6a7c:	4314      	orrs	r4, r2
    6a7e:	7ada      	ldrb	r2, [r3, #11]
    6a80:	0612      	lsls	r2, r2, #24
    6a82:	4322      	orrs	r2, r4
    6a84:	1852      	adds	r2, r2, r1
    6a86:	7a15      	ldrb	r5, [r2, #8]
		RegParams.cmnParams.paramsType2.subBandDutyCycle[bandId] = updateDCycle.dutyCycleNew;
    6a88:	002c      	movs	r4, r5
    6a8a:	34d4      	adds	r4, #212	; 0xd4
    6a8c:	0064      	lsls	r4, r4, #1
    6a8e:	aa01      	add	r2, sp, #4
    6a90:	191c      	adds	r4, r3, r4
    6a92:	7816      	ldrb	r6, [r2, #0]
    6a94:	7166      	strb	r6, [r4, #5]
    6a96:	7852      	ldrb	r2, [r2, #1]
    6a98:	71a2      	strb	r2, [r4, #6]
		RegParams.pSubBandParams[bandId].subBandTimeout = 0;
    6a9a:	7b1c      	ldrb	r4, [r3, #12]
    6a9c:	7b5a      	ldrb	r2, [r3, #13]
    6a9e:	0212      	lsls	r2, r2, #8
    6aa0:	4322      	orrs	r2, r4
    6aa2:	7b9c      	ldrb	r4, [r3, #14]
    6aa4:	0424      	lsls	r4, r4, #16
    6aa6:	4322      	orrs	r2, r4
    6aa8:	7bdc      	ldrb	r4, [r3, #15]
    6aaa:	0624      	lsls	r4, r4, #24
    6aac:	4314      	orrs	r4, r2
    6aae:	006a      	lsls	r2, r5, #1
    6ab0:	1952      	adds	r2, r2, r5
    6ab2:	0092      	lsls	r2, r2, #2
    6ab4:	1912      	adds	r2, r2, r4
    6ab6:	2400      	movs	r4, #0
    6ab8:	7214      	strb	r4, [r2, #8]
    6aba:	7254      	strb	r4, [r2, #9]
    6abc:	7294      	strb	r4, [r2, #10]
    6abe:	72d4      	strb	r4, [r2, #11]
		RegParams.pOtherChParams[updateDCycle.channelIndex].parametersDefined |= DUTY_CYCLE_DEFINED;
    6ac0:	7a1c      	ldrb	r4, [r3, #8]
    6ac2:	7a5a      	ldrb	r2, [r3, #9]
    6ac4:	0212      	lsls	r2, r2, #8
    6ac6:	4314      	orrs	r4, r2
    6ac8:	7a9a      	ldrb	r2, [r3, #10]
    6aca:	0412      	lsls	r2, r2, #16
    6acc:	4322      	orrs	r2, r4
    6ace:	7adb      	ldrb	r3, [r3, #11]
    6ad0:	061b      	lsls	r3, r3, #24
    6ad2:	4313      	orrs	r3, r2
    6ad4:	185b      	adds	r3, r3, r1
    6ad6:	7ada      	ldrb	r2, [r3, #11]
    6ad8:	2104      	movs	r1, #4
    6ada:	430a      	orrs	r2, r1
    6adc:	72da      	strb	r2, [r3, #11]
    6ade:	e7c1      	b.n	6a64 <setDutyCycle+0x28>
    6ae0:	0001516d 	.word	0x0001516d
    6ae4:	000055b9 	.word	0x000055b9
    6ae8:	20001220 	.word	0x20001220

00006aec <SearchAvailableChannel2>:
{
    6aec:	b5f0      	push	{r4, r5, r6, r7, lr}
    6aee:	46de      	mov	lr, fp
    6af0:	4657      	mov	r7, sl
    6af2:	464e      	mov	r6, r9
    6af4:	4645      	mov	r5, r8
    6af6:	b5e0      	push	{r5, r6, r7, lr}
    6af8:	b087      	sub	sp, #28
    6afa:	af00      	add	r7, sp, #0
    6afc:	0004      	movs	r4, r0
    6afe:	4688      	mov	r8, r1
    6b00:	60f9      	str	r1, [r7, #12]
    6b02:	0015      	movs	r5, r2
    6b04:	607b      	str	r3, [r7, #4]
	uint8_t ChList[maxChannels];
    6b06:	1dc3      	adds	r3, r0, #7
    6b08:	08db      	lsrs	r3, r3, #3
    6b0a:	00db      	lsls	r3, r3, #3
    6b0c:	466a      	mov	r2, sp
    6b0e:	1ad3      	subs	r3, r2, r3
    6b10:	469d      	mov	sp, r3
    6b12:	613b      	str	r3, [r7, #16]
	memset(ChList, 0, sizeof(ChList));
    6b14:	0002      	movs	r2, r0
    6b16:	2100      	movs	r1, #0
    6b18:	4668      	mov	r0, sp
    6b1a:	4b5c      	ldr	r3, [pc, #368]	; (6c8c <SearchAvailableChannel2+0x1a0>)
    6b1c:	4798      	blx	r3
	bool bandWithoutDutyCycle = (((1 << RegParams.band) & (ISM_EUBAND | ISM_ASBAND | (1 << ISM_JPN923))) == 0);
    6b1e:	232e      	movs	r3, #46	; 0x2e
    6b20:	4a5b      	ldr	r2, [pc, #364]	; (6c90 <SearchAvailableChannel2+0x1a4>)
    6b22:	5cd6      	ldrb	r6, [r2, r3]
    if(transmissionType == false)
    6b24:	4643      	mov	r3, r8
    6b26:	2b00      	cmp	r3, #0
    6b28:	d148      	bne.n	6bbc <SearchAvailableChannel2+0xd0>
	    if(RegParams.FeaturesSupport & JOIN_BACKOFF_SUPPORT)
    6b2a:	3320      	adds	r3, #32
    6b2c:	5cd3      	ldrb	r3, [r2, r3]
    6b2e:	069b      	lsls	r3, r3, #26
    6b30:	d431      	bmi.n	6b96 <SearchAvailableChannel2+0xaa>
		result = LORAWAN_NO_CHANNELS_FOUND;
    6b32:	2010      	movs	r0, #16
	for (i = 0; i < maxChannels; i++)
    6b34:	2c00      	cmp	r4, #0
    6b36:	d100      	bne.n	6b3a <SearchAvailableChannel2+0x4e>
    6b38:	e093      	b.n	6c62 <SearchAvailableChannel2+0x176>
	bool bandWithoutDutyCycle = (((1 << RegParams.band) & (ISM_EUBAND | ISM_ASBAND | (1 << ISM_JPN923))) == 0);
    6b3a:	4b56      	ldr	r3, [pc, #344]	; (6c94 <SearchAvailableChannel2+0x1a8>)
    6b3c:	4133      	asrs	r3, r6
    6b3e:	2201      	movs	r2, #1
    6b40:	401a      	ands	r2, r3
    6b42:	4690      	mov	r8, r2
				(bandWithoutDutyCycle || RegParams.pSubBandParams[RegParams.pOtherChParams[i].subBandId].subBandTimeout == 0))
    6b44:	4b52      	ldr	r3, [pc, #328]	; (6c90 <SearchAvailableChannel2+0x1a4>)
    6b46:	7b19      	ldrb	r1, [r3, #12]
    6b48:	7b5a      	ldrb	r2, [r3, #13]
    6b4a:	0212      	lsls	r2, r2, #8
    6b4c:	4311      	orrs	r1, r2
    6b4e:	7b9a      	ldrb	r2, [r3, #14]
    6b50:	0412      	lsls	r2, r2, #16
    6b52:	430a      	orrs	r2, r1
    6b54:	7bd9      	ldrb	r1, [r3, #15]
    6b56:	0609      	lsls	r1, r1, #24
    6b58:	4311      	orrs	r1, r2
    6b5a:	468c      	mov	ip, r1
    6b5c:	7a18      	ldrb	r0, [r3, #8]
    6b5e:	7a5a      	ldrb	r2, [r3, #9]
    6b60:	0212      	lsls	r2, r2, #8
    6b62:	4302      	orrs	r2, r0
    6b64:	7a98      	ldrb	r0, [r3, #10]
    6b66:	0400      	lsls	r0, r0, #16
    6b68:	4302      	orrs	r2, r0
    6b6a:	7ad8      	ldrb	r0, [r3, #11]
    6b6c:	0600      	lsls	r0, r0, #24
    6b6e:	4310      	orrs	r0, r2
			if ((RegParams.pChParams[i].status == ENABLED) &&
    6b70:	791a      	ldrb	r2, [r3, #4]
    6b72:	7959      	ldrb	r1, [r3, #5]
    6b74:	0209      	lsls	r1, r1, #8
    6b76:	4311      	orrs	r1, r2
    6b78:	799a      	ldrb	r2, [r3, #6]
    6b7a:	0412      	lsls	r2, r2, #16
    6b7c:	4311      	orrs	r1, r2
    6b7e:	79da      	ldrb	r2, [r3, #7]
    6b80:	0612      	lsls	r2, r2, #24
    6b82:	430a      	orrs	r2, r1
    6b84:	0006      	movs	r6, r0
    6b86:	3608      	adds	r6, #8
    6b88:	3009      	adds	r0, #9
				(bandWithoutDutyCycle || RegParams.pSubBandParams[RegParams.pOtherChParams[i].subBandId].subBandTimeout == 0))
    6b8a:	2300      	movs	r3, #0
    6b8c:	617b      	str	r3, [r7, #20]
				(currDr >= RegParams.pChParams[i].dataRange.min) &&
    6b8e:	46aa      	mov	sl, r5
    6b90:	46a9      	mov	r9, r5
    6b92:	0025      	movs	r5, r4
    6b94:	e036      	b.n	6c04 <SearchAvailableChannel2+0x118>
		    if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) //check timerrunning
    6b96:	0011      	movs	r1, r2
    6b98:	7d13      	ldrb	r3, [r2, #20]
    6b9a:	7d52      	ldrb	r2, [r2, #21]
    6b9c:	0212      	lsls	r2, r2, #8
    6b9e:	431a      	orrs	r2, r3
    6ba0:	7d8b      	ldrb	r3, [r1, #22]
    6ba2:	041b      	lsls	r3, r3, #16
    6ba4:	431a      	orrs	r2, r3
    6ba6:	7dcb      	ldrb	r3, [r1, #23]
    6ba8:	061b      	lsls	r3, r3, #24
    6baa:	4313      	orrs	r3, r2
    6bac:	7a18      	ldrb	r0, [r3, #8]
    6bae:	4b3a      	ldr	r3, [pc, #232]	; (6c98 <SearchAvailableChannel2+0x1ac>)
    6bb0:	4798      	blx	r3
    6bb2:	0003      	movs	r3, r0
			    return LORAWAN_NO_CHANNELS_FOUND;
    6bb4:	2010      	movs	r0, #16
		    if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) //check timerrunning
    6bb6:	2b00      	cmp	r3, #0
    6bb8:	d0bb      	beq.n	6b32 <SearchAvailableChannel2+0x46>
    6bba:	e052      	b.n	6c62 <SearchAvailableChannel2+0x176>
	    if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout)
    6bbc:	4934      	ldr	r1, [pc, #208]	; (6c90 <SearchAvailableChannel2+0x1a4>)
    6bbe:	23ba      	movs	r3, #186	; 0xba
    6bc0:	33ff      	adds	r3, #255	; 0xff
    6bc2:	5ccb      	ldrb	r3, [r1, r3]
    6bc4:	22dd      	movs	r2, #221	; 0xdd
    6bc6:	0052      	lsls	r2, r2, #1
    6bc8:	5c8a      	ldrb	r2, [r1, r2]
    6bca:	0212      	lsls	r2, r2, #8
    6bcc:	431a      	orrs	r2, r3
    6bce:	23bc      	movs	r3, #188	; 0xbc
    6bd0:	33ff      	adds	r3, #255	; 0xff
    6bd2:	5ccb      	ldrb	r3, [r1, r3]
    6bd4:	041b      	lsls	r3, r3, #16
    6bd6:	431a      	orrs	r2, r3
    6bd8:	23de      	movs	r3, #222	; 0xde
    6bda:	005b      	lsls	r3, r3, #1
    6bdc:	5ccb      	ldrb	r3, [r1, r3]
    6bde:	061b      	lsls	r3, r3, #24
    6be0:	4313      	orrs	r3, r2
		    return LORAWAN_NO_CHANNELS_FOUND;
    6be2:	2010      	movs	r0, #16
	    if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout)
    6be4:	2b00      	cmp	r3, #0
    6be6:	d0a4      	beq.n	6b32 <SearchAvailableChannel2+0x46>
    6be8:	e03b      	b.n	6c62 <SearchAvailableChannel2+0x176>
					ChList[num] = i;
    6bea:	693c      	ldr	r4, [r7, #16]
    6bec:	6979      	ldr	r1, [r7, #20]
    6bee:	5463      	strb	r3, [r4, r1]
					num++;
    6bf0:	3101      	adds	r1, #1
    6bf2:	b2c9      	uxtb	r1, r1
    6bf4:	6179      	str	r1, [r7, #20]
	for (i = 0; i < maxChannels; i++)
    6bf6:	3301      	adds	r3, #1
    6bf8:	b2db      	uxtb	r3, r3
    6bfa:	3202      	adds	r2, #2
    6bfc:	360c      	adds	r6, #12
    6bfe:	300c      	adds	r0, #12
    6c00:	429d      	cmp	r5, r3
    6c02:	d02a      	beq.n	6c5a <SearchAvailableChannel2+0x16e>
			if ((RegParams.pChParams[i].status == ENABLED) &&
    6c04:	7811      	ldrb	r1, [r2, #0]
    6c06:	2900      	cmp	r1, #0
    6c08:	d0f5      	beq.n	6bf6 <SearchAvailableChannel2+0x10a>
				(currDr >= RegParams.pChParams[i].dataRange.min) &&
    6c0a:	7851      	ldrb	r1, [r2, #1]
    6c0c:	0709      	lsls	r1, r1, #28
    6c0e:	0f09      	lsrs	r1, r1, #28
			if ((RegParams.pChParams[i].status == ENABLED) &&
    6c10:	4589      	cmp	r9, r1
    6c12:	dbf0      	blt.n	6bf6 <SearchAvailableChannel2+0x10a>
				(currDr <= RegParams.pChParams[i].dataRange.max)&&
    6c14:	7851      	ldrb	r1, [r2, #1]
    6c16:	0909      	lsrs	r1, r1, #4
				(currDr >= RegParams.pChParams[i].dataRange.min) &&
    6c18:	458a      	cmp	sl, r1
    6c1a:	dcec      	bgt.n	6bf6 <SearchAvailableChannel2+0x10a>
				(currDr <= RegParams.pChParams[i].dataRange.max)&&
    6c1c:	4641      	mov	r1, r8
    6c1e:	2900      	cmp	r1, #0
    6c20:	d014      	beq.n	6c4c <SearchAvailableChannel2+0x160>
				(bandWithoutDutyCycle || RegParams.pSubBandParams[RegParams.pOtherChParams[i].subBandId].subBandTimeout == 0))
    6c22:	7834      	ldrb	r4, [r6, #0]
    6c24:	0061      	lsls	r1, r4, #1
    6c26:	1909      	adds	r1, r1, r4
    6c28:	0089      	lsls	r1, r1, #2
    6c2a:	4461      	add	r1, ip
    6c2c:	7a0c      	ldrb	r4, [r1, #8]
    6c2e:	46a3      	mov	fp, r4
    6c30:	60b9      	str	r1, [r7, #8]
    6c32:	7a4c      	ldrb	r4, [r1, #9]
    6c34:	0224      	lsls	r4, r4, #8
    6c36:	4659      	mov	r1, fp
    6c38:	430c      	orrs	r4, r1
    6c3a:	68b9      	ldr	r1, [r7, #8]
    6c3c:	7a89      	ldrb	r1, [r1, #10]
    6c3e:	0409      	lsls	r1, r1, #16
    6c40:	430c      	orrs	r4, r1
    6c42:	68b9      	ldr	r1, [r7, #8]
    6c44:	7ac9      	ldrb	r1, [r1, #11]
    6c46:	0609      	lsls	r1, r1, #24
    6c48:	4321      	orrs	r1, r4
    6c4a:	d1d4      	bne.n	6bf6 <SearchAvailableChannel2+0x10a>
				if(((transmissionType == 0)  && (RegParams.pOtherChParams[i].joinRequestChannel == 1)) || (transmissionType != 0)) 
    6c4c:	68f9      	ldr	r1, [r7, #12]
    6c4e:	2900      	cmp	r1, #0
    6c50:	d1cb      	bne.n	6bea <SearchAvailableChannel2+0xfe>
    6c52:	7801      	ldrb	r1, [r0, #0]
    6c54:	2900      	cmp	r1, #0
    6c56:	d0ce      	beq.n	6bf6 <SearchAvailableChannel2+0x10a>
    6c58:	e7c7      	b.n	6bea <SearchAvailableChannel2+0xfe>
		result = LORAWAN_NO_CHANNELS_FOUND;
    6c5a:	2010      	movs	r0, #16
	if(0 != num)
    6c5c:	697c      	ldr	r4, [r7, #20]
    6c5e:	2c00      	cmp	r4, #0
    6c60:	d107      	bne.n	6c72 <SearchAvailableChannel2+0x186>
}
    6c62:	46bd      	mov	sp, r7
    6c64:	b007      	add	sp, #28
    6c66:	bc3c      	pop	{r2, r3, r4, r5}
    6c68:	4690      	mov	r8, r2
    6c6a:	4699      	mov	r9, r3
    6c6c:	46a2      	mov	sl, r4
    6c6e:	46ab      	mov	fp, r5
    6c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		randomNumber = rand() % num;
    6c72:	4b0a      	ldr	r3, [pc, #40]	; (6c9c <SearchAvailableChannel2+0x1b0>)
    6c74:	4798      	blx	r3
    6c76:	0021      	movs	r1, r4
    6c78:	4b09      	ldr	r3, [pc, #36]	; (6ca0 <SearchAvailableChannel2+0x1b4>)
    6c7a:	4798      	blx	r3
		*channelIndex = ChList[randomNumber];
    6c7c:	23ff      	movs	r3, #255	; 0xff
    6c7e:	4019      	ands	r1, r3
    6c80:	693b      	ldr	r3, [r7, #16]
    6c82:	5c5b      	ldrb	r3, [r3, r1]
    6c84:	687a      	ldr	r2, [r7, #4]
    6c86:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    6c88:	2008      	movs	r0, #8
    6c8a:	e7ea      	b.n	6c62 <SearchAvailableChannel2+0x176>
    6c8c:	000151f1 	.word	0x000151f1
    6c90:	20001220 	.word	0x20001220
    6c94:	00007fe3 	.word	0x00007fe3
    6c98:	00009ced 	.word	0x00009ced
    6c9c:	00015391 	.word	0x00015391
    6ca0:	00011ce9 	.word	0x00011ce9

00006ca4 <LORAREG_GetAttr_FreeChannel2>:
{
    6ca4:	b570      	push	{r4, r5, r6, lr}
	memcpy(&newFreeChannelReq,(NewFreeChannelReq_t *)attrInput,sizeof(NewFreeChannelReq_t));
    6ca6:	784c      	ldrb	r4, [r1, #1]
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    6ca8:	202a      	movs	r0, #42	; 0x2a
    6caa:	4d07      	ldr	r5, [pc, #28]	; (6cc8 <LORAREG_GetAttr_FreeChannel2+0x24>)
    6cac:	562d      	ldrsb	r5, [r5, r0]
		return LORAWAN_INVALID_PARAMETER;
    6cae:	3820      	subs	r0, #32
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    6cb0:	42ac      	cmp	r4, r5
    6cb2:	dd00      	ble.n	6cb6 <LORAREG_GetAttr_FreeChannel2+0x12>
}
    6cb4:	bd70      	pop	{r4, r5, r6, pc}
		result = SearchAvailableChannel2(newFreeChannelReq.maxChannels,newFreeChannelReq.transmissionType,newFreeChannelReq.currDr,(uint8_t*)attrOutput);
    6cb6:	7888      	ldrb	r0, [r1, #2]
    6cb8:	7809      	ldrb	r1, [r1, #0]
    6cba:	0013      	movs	r3, r2
    6cbc:	0002      	movs	r2, r0
    6cbe:	0020      	movs	r0, r4
    6cc0:	4c02      	ldr	r4, [pc, #8]	; (6ccc <LORAREG_GetAttr_FreeChannel2+0x28>)
    6cc2:	47a0      	blx	r4
	return result;
    6cc4:	e7f6      	b.n	6cb4 <LORAREG_GetAttr_FreeChannel2+0x10>
    6cc6:	46c0      	nop			; (mov r8, r8)
    6cc8:	20001220 	.word	0x20001220
    6ccc:	00006aed 	.word	0x00006aed

00006cd0 <setJoinBackoffCntl>:
{   
    6cd0:	b500      	push	{lr}
    6cd2:	b083      	sub	sp, #12
	memcpy(&joinbackoffcntl,attrInput,sizeof(bool));
    6cd4:	780b      	ldrb	r3, [r1, #0]
    6cd6:	466a      	mov	r2, sp
    6cd8:	71d3      	strb	r3, [r2, #7]
	if(joinbackoffcntl == false)
    6cda:	2b00      	cmp	r3, #0
    6cdc:	d145      	bne.n	6d6a <setJoinBackoffCntl+0x9a>
		if(RegParams.FeaturesSupport & JOIN_BACKOFF_SUPPORT)
    6cde:	3320      	adds	r3, #32
    6ce0:	4a26      	ldr	r2, [pc, #152]	; (6d7c <setJoinBackoffCntl+0xac>)
    6ce2:	5cd3      	ldrb	r3, [r2, r3]
    6ce4:	069a      	lsls	r2, r3, #26
    6ce6:	d546      	bpl.n	6d76 <setJoinBackoffCntl+0xa6>
			RegParams.FeaturesSupport &= ~JOIN_BACKOFF_SUPPORT;
    6ce8:	4924      	ldr	r1, [pc, #144]	; (6d7c <setJoinBackoffCntl+0xac>)
    6cea:	2220      	movs	r2, #32
    6cec:	4393      	bics	r3, r2
    6cee:	548b      	strb	r3, [r1, r2]
			if (SwTimerIsRunning(RegParams.pJoinBackoffTimer->timerId))
    6cf0:	7e0b      	ldrb	r3, [r1, #24]
    6cf2:	7e4a      	ldrb	r2, [r1, #25]
    6cf4:	0212      	lsls	r2, r2, #8
    6cf6:	431a      	orrs	r2, r3
    6cf8:	7e8b      	ldrb	r3, [r1, #26]
    6cfa:	041b      	lsls	r3, r3, #16
    6cfc:	431a      	orrs	r2, r3
    6cfe:	7ecb      	ldrb	r3, [r1, #27]
    6d00:	061b      	lsls	r3, r3, #24
    6d02:	4313      	orrs	r3, r2
    6d04:	7818      	ldrb	r0, [r3, #0]
    6d06:	4b1e      	ldr	r3, [pc, #120]	; (6d80 <setJoinBackoffCntl+0xb0>)
    6d08:	4798      	blx	r3
    6d0a:	2800      	cmp	r0, #0
    6d0c:	d11e      	bne.n	6d4c <setJoinBackoffCntl+0x7c>
			if (SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    6d0e:	491b      	ldr	r1, [pc, #108]	; (6d7c <setJoinBackoffCntl+0xac>)
    6d10:	7d0b      	ldrb	r3, [r1, #20]
    6d12:	7d4a      	ldrb	r2, [r1, #21]
    6d14:	0212      	lsls	r2, r2, #8
    6d16:	431a      	orrs	r2, r3
    6d18:	7d8b      	ldrb	r3, [r1, #22]
    6d1a:	041b      	lsls	r3, r3, #16
    6d1c:	431a      	orrs	r2, r3
    6d1e:	7dcb      	ldrb	r3, [r1, #23]
    6d20:	061b      	lsls	r3, r3, #24
    6d22:	4313      	orrs	r3, r2
    6d24:	7a18      	ldrb	r0, [r3, #8]
    6d26:	4b16      	ldr	r3, [pc, #88]	; (6d80 <setJoinBackoffCntl+0xb0>)
    6d28:	4798      	blx	r3
    6d2a:	2800      	cmp	r0, #0
    6d2c:	d023      	beq.n	6d76 <setJoinBackoffCntl+0xa6>
				SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    6d2e:	4913      	ldr	r1, [pc, #76]	; (6d7c <setJoinBackoffCntl+0xac>)
    6d30:	7d0b      	ldrb	r3, [r1, #20]
    6d32:	7d4a      	ldrb	r2, [r1, #21]
    6d34:	0212      	lsls	r2, r2, #8
    6d36:	431a      	orrs	r2, r3
    6d38:	7d8b      	ldrb	r3, [r1, #22]
    6d3a:	041b      	lsls	r3, r3, #16
    6d3c:	431a      	orrs	r2, r3
    6d3e:	7dcb      	ldrb	r3, [r1, #23]
    6d40:	061b      	lsls	r3, r3, #24
    6d42:	4313      	orrs	r3, r2
    6d44:	7a18      	ldrb	r0, [r3, #8]
    6d46:	4b0f      	ldr	r3, [pc, #60]	; (6d84 <setJoinBackoffCntl+0xb4>)
    6d48:	4798      	blx	r3
    6d4a:	e014      	b.n	6d76 <setJoinBackoffCntl+0xa6>
				SwTimerStop(RegParams.pJoinBackoffTimer->timerId);
    6d4c:	490b      	ldr	r1, [pc, #44]	; (6d7c <setJoinBackoffCntl+0xac>)
    6d4e:	7e0b      	ldrb	r3, [r1, #24]
    6d50:	7e4a      	ldrb	r2, [r1, #25]
    6d52:	0212      	lsls	r2, r2, #8
    6d54:	431a      	orrs	r2, r3
    6d56:	7e8b      	ldrb	r3, [r1, #26]
    6d58:	041b      	lsls	r3, r3, #16
    6d5a:	431a      	orrs	r2, r3
    6d5c:	7ecb      	ldrb	r3, [r1, #27]
    6d5e:	061b      	lsls	r3, r3, #24
    6d60:	4313      	orrs	r3, r2
    6d62:	7818      	ldrb	r0, [r3, #0]
    6d64:	4b07      	ldr	r3, [pc, #28]	; (6d84 <setJoinBackoffCntl+0xb4>)
    6d66:	4798      	blx	r3
    6d68:	e7d1      	b.n	6d0e <setJoinBackoffCntl+0x3e>
		RegParams.FeaturesSupport |= JOIN_BACKOFF_SUPPORT;
    6d6a:	4904      	ldr	r1, [pc, #16]	; (6d7c <setJoinBackoffCntl+0xac>)
    6d6c:	2220      	movs	r2, #32
    6d6e:	5c8b      	ldrb	r3, [r1, r2]
    6d70:	2020      	movs	r0, #32
    6d72:	4303      	orrs	r3, r0
    6d74:	548b      	strb	r3, [r1, r2]
}
    6d76:	2008      	movs	r0, #8
    6d78:	b003      	add	sp, #12
    6d7a:	bd00      	pop	{pc}
    6d7c:	20001220 	.word	0x20001220
    6d80:	00009ced 	.word	0x00009ced
    6d84:	00009e61 	.word	0x00009e61

00006d88 <setJoinBackOffTimer>:
{
    6d88:	b510      	push	{r4, lr}
    6d8a:	b084      	sub	sp, #16
	memcpy(&startJoinBackOffTimer,attrInput,sizeof(bool));
    6d8c:	780b      	ldrb	r3, [r1, #0]
    6d8e:	220f      	movs	r2, #15
    6d90:	446a      	add	r2, sp
    6d92:	7013      	strb	r3, [r2, #0]
	if(startJoinBackOffTimer == true)
    6d94:	2b00      	cmp	r3, #0
    6d96:	d113      	bne.n	6dc0 <setJoinBackOffTimer+0x38>
		SwTimerStop(RegParams.pJoinBackoffTimer->timerId);
    6d98:	4c13      	ldr	r4, [pc, #76]	; (6de8 <setJoinBackOffTimer+0x60>)
    6d9a:	7e23      	ldrb	r3, [r4, #24]
    6d9c:	7e62      	ldrb	r2, [r4, #25]
    6d9e:	0212      	lsls	r2, r2, #8
    6da0:	431a      	orrs	r2, r3
    6da2:	7ea3      	ldrb	r3, [r4, #26]
    6da4:	041b      	lsls	r3, r3, #16
    6da6:	431a      	orrs	r2, r3
    6da8:	7ee3      	ldrb	r3, [r4, #27]
    6daa:	061b      	lsls	r3, r3, #24
    6dac:	4313      	orrs	r3, r2
    6dae:	7818      	ldrb	r0, [r3, #0]
    6db0:	4b0e      	ldr	r3, [pc, #56]	; (6dec <setJoinBackOffTimer+0x64>)
    6db2:	4798      	blx	r3
		RegParams.joinbccount = 0;
    6db4:	2200      	movs	r2, #0
    6db6:	2342      	movs	r3, #66	; 0x42
    6db8:	54e2      	strb	r2, [r4, r3]
}
    6dba:	2008      	movs	r0, #8
    6dbc:	b004      	add	sp, #16
    6dbe:	bd10      	pop	{r4, pc}
		SwTimerStart (RegParams.pJoinBackoffTimer->timerId, MS_TO_US(BACKOFF_BASE_TIME_IN_MS), SW_TIMEOUT_RELATIVE, (void *)JoinBackoffCallback, NULL);
    6dc0:	4909      	ldr	r1, [pc, #36]	; (6de8 <setJoinBackOffTimer+0x60>)
    6dc2:	7e0b      	ldrb	r3, [r1, #24]
    6dc4:	7e4a      	ldrb	r2, [r1, #25]
    6dc6:	0212      	lsls	r2, r2, #8
    6dc8:	431a      	orrs	r2, r3
    6dca:	7e8b      	ldrb	r3, [r1, #26]
    6dcc:	041b      	lsls	r3, r3, #16
    6dce:	431a      	orrs	r2, r3
    6dd0:	7ecb      	ldrb	r3, [r1, #27]
    6dd2:	061b      	lsls	r3, r3, #24
    6dd4:	4313      	orrs	r3, r2
    6dd6:	7818      	ldrb	r0, [r3, #0]
    6dd8:	2300      	movs	r3, #0
    6dda:	9300      	str	r3, [sp, #0]
    6ddc:	4b04      	ldr	r3, [pc, #16]	; (6df0 <setJoinBackOffTimer+0x68>)
    6dde:	2200      	movs	r2, #0
    6de0:	4904      	ldr	r1, [pc, #16]	; (6df4 <setJoinBackOffTimer+0x6c>)
    6de2:	4c05      	ldr	r4, [pc, #20]	; (6df8 <setJoinBackOffTimer+0x70>)
    6de4:	47a0      	blx	r4
    6de6:	e7e8      	b.n	6dba <setJoinBackOffTimer+0x32>
    6de8:	20001220 	.word	0x20001220
    6dec:	00009e61 	.word	0x00009e61
    6df0:	00007a09 	.word	0x00007a09
    6df4:	6b49d200 	.word	0x6b49d200
    6df8:	00009b55 	.word	0x00009b55

00006dfc <setJoinDutyCycleTimer>:
{
    6dfc:	b530      	push	{r4, r5, lr}
    6dfe:	b085      	sub	sp, #20
	memcpy(&UpdateJoinDutyCycleTimer,attrInput,sizeof(UpdateJoinDutyCycleTimer_t));
    6e00:	ac02      	add	r4, sp, #8
    6e02:	2208      	movs	r2, #8
    6e04:	0020      	movs	r0, r4
    6e06:	4b93      	ldr	r3, [pc, #588]	; (7054 <setJoinDutyCycleTimer+0x258>)
    6e08:	4798      	blx	r3
	if(UpdateJoinDutyCycleTimer.startJoinDutyCycleTimer == true)
    6e0a:	7923      	ldrb	r3, [r4, #4]
    6e0c:	2b00      	cmp	r3, #0
    6e0e:	d100      	bne.n	6e12 <setJoinDutyCycleTimer+0x16>
    6e10:	e0f8      	b.n	7004 <setJoinDutyCycleTimer+0x208>
			if(RegParams.joinbccount < AGGREGATEDTIME_1HR)
    6e12:	2342      	movs	r3, #66	; 0x42
    6e14:	4a90      	ldr	r2, [pc, #576]	; (7058 <setJoinDutyCycleTimer+0x25c>)
    6e16:	5cd3      	ldrb	r3, [r2, r3]
    6e18:	2b01      	cmp	r3, #1
    6e1a:	d800      	bhi.n	6e1e <setJoinDutyCycleTimer+0x22>
    6e1c:	e081      	b.n	6f22 <setJoinDutyCycleTimer+0x126>
			else if (RegParams.joinbccount < AGGREGATEDTIME_10HR)
    6e1e:	2b13      	cmp	r3, #19
    6e20:	d900      	bls.n	6e24 <setJoinDutyCycleTimer+0x28>
    6e22:	e08d      	b.n	6f40 <setJoinDutyCycleTimer+0x144>
				RegParams.joinDutyCycleTimeout = (uint32_t)UpdateJoinDutyCycleTimer.joinreqTimeonAir * (JOIN_BACKOFF_PRESCALAR_10HR - 1);
    6e24:	4b8d      	ldr	r3, [pc, #564]	; (705c <setJoinDutyCycleTimer+0x260>)
    6e26:	9a02      	ldr	r2, [sp, #8]
    6e28:	4353      	muls	r3, r2
    6e2a:	4a8b      	ldr	r2, [pc, #556]	; (7058 <setJoinDutyCycleTimer+0x25c>)
    6e2c:	323e      	adds	r2, #62	; 0x3e
    6e2e:	7013      	strb	r3, [r2, #0]
    6e30:	0a19      	lsrs	r1, r3, #8
    6e32:	7051      	strb	r1, [r2, #1]
    6e34:	0c19      	lsrs	r1, r3, #16
    6e36:	7091      	strb	r1, [r2, #2]
    6e38:	0e1b      	lsrs	r3, r3, #24
    6e3a:	70d3      	strb	r3, [r2, #3]
		if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    6e3c:	4986      	ldr	r1, [pc, #536]	; (7058 <setJoinDutyCycleTimer+0x25c>)
    6e3e:	7d0b      	ldrb	r3, [r1, #20]
    6e40:	7d4a      	ldrb	r2, [r1, #21]
    6e42:	0212      	lsls	r2, r2, #8
    6e44:	431a      	orrs	r2, r3
    6e46:	7d8b      	ldrb	r3, [r1, #22]
    6e48:	041b      	lsls	r3, r3, #16
    6e4a:	431a      	orrs	r2, r3
    6e4c:	7dcb      	ldrb	r3, [r1, #23]
    6e4e:	061b      	lsls	r3, r3, #24
    6e50:	4313      	orrs	r3, r2
    6e52:	7a18      	ldrb	r0, [r3, #8]
    6e54:	4b82      	ldr	r3, [pc, #520]	; (7060 <setJoinDutyCycleTimer+0x264>)
    6e56:	4798      	blx	r3
	uint32_t delta = 0,ticks;
    6e58:	2400      	movs	r4, #0
		if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    6e5a:	2800      	cmp	r0, #0
    6e5c:	d17d      	bne.n	6f5a <setJoinDutyCycleTimer+0x15e>
		if(RegParams.joinDutyCycleTimeout != 0)
    6e5e:	4b7e      	ldr	r3, [pc, #504]	; (7058 <setJoinDutyCycleTimer+0x25c>)
    6e60:	213e      	movs	r1, #62	; 0x3e
    6e62:	5c59      	ldrb	r1, [r3, r1]
    6e64:	203f      	movs	r0, #63	; 0x3f
    6e66:	5c18      	ldrb	r0, [r3, r0]
    6e68:	0200      	lsls	r0, r0, #8
    6e6a:	4308      	orrs	r0, r1
    6e6c:	2140      	movs	r1, #64	; 0x40
    6e6e:	5c59      	ldrb	r1, [r3, r1]
    6e70:	0409      	lsls	r1, r1, #16
    6e72:	4308      	orrs	r0, r1
    6e74:	2141      	movs	r1, #65	; 0x41
    6e76:	5c59      	ldrb	r1, [r3, r1]
    6e78:	0609      	lsls	r1, r1, #24
    6e7a:	4301      	orrs	r1, r0
    6e7c:	d100      	bne.n	6e80 <setJoinDutyCycleTimer+0x84>
    6e7e:	e0e5      	b.n	704c <setJoinDutyCycleTimer+0x250>
			if(RegParams.joinDutyCycleTimeout > delta)
    6e80:	428c      	cmp	r4, r1
    6e82:	d300      	bcc.n	6e86 <setJoinDutyCycleTimer+0x8a>
    6e84:	e0b6      	b.n	6ff4 <setJoinDutyCycleTimer+0x1f8>
				RegParams.joinDutyCycleTimeout = RegParams.joinDutyCycleTimeout - delta;
    6e86:	1b09      	subs	r1, r1, r4
    6e88:	333e      	adds	r3, #62	; 0x3e
    6e8a:	7019      	strb	r1, [r3, #0]
    6e8c:	0a0a      	lsrs	r2, r1, #8
    6e8e:	705a      	strb	r2, [r3, #1]
    6e90:	0c0a      	lsrs	r2, r1, #16
    6e92:	709a      	strb	r2, [r3, #2]
    6e94:	0e0a      	lsrs	r2, r1, #24
    6e96:	70da      	strb	r2, [r3, #3]
				if(RegParams.joinDutyCycleTimeout > US_TO_MS(SWTIMER_MAX_TIMEOUT))
    6e98:	4b72      	ldr	r3, [pc, #456]	; (7064 <setJoinDutyCycleTimer+0x268>)
    6e9a:	4299      	cmp	r1, r3
    6e9c:	d800      	bhi.n	6ea0 <setJoinDutyCycleTimer+0xa4>
    6e9e:	e093      	b.n	6fc8 <setJoinDutyCycleTimer+0x1cc>
					RegParams.pJoinDutyCycleTimer->remainingtime =RegParams.joinDutyCycleTimeout - (US_TO_MS(SWTIMER_MAX_TIMEOUT)) ;
    6ea0:	4c6d      	ldr	r4, [pc, #436]	; (7058 <setJoinDutyCycleTimer+0x25c>)
    6ea2:	7d23      	ldrb	r3, [r4, #20]
    6ea4:	7d62      	ldrb	r2, [r4, #21]
    6ea6:	0212      	lsls	r2, r2, #8
    6ea8:	431a      	orrs	r2, r3
    6eaa:	7da3      	ldrb	r3, [r4, #22]
    6eac:	041b      	lsls	r3, r3, #16
    6eae:	431a      	orrs	r2, r3
    6eb0:	7de3      	ldrb	r3, [r4, #23]
    6eb2:	061b      	lsls	r3, r3, #24
    6eb4:	4313      	orrs	r3, r2
    6eb6:	4a6c      	ldr	r2, [pc, #432]	; (7068 <setJoinDutyCycleTimer+0x26c>)
    6eb8:	4694      	mov	ip, r2
    6eba:	4461      	add	r1, ip
    6ebc:	7119      	strb	r1, [r3, #4]
    6ebe:	0a0a      	lsrs	r2, r1, #8
    6ec0:	715a      	strb	r2, [r3, #5]
    6ec2:	0c0a      	lsrs	r2, r1, #16
    6ec4:	719a      	strb	r2, [r3, #6]
    6ec6:	0e09      	lsrs	r1, r1, #24
    6ec8:	71d9      	strb	r1, [r3, #7]
					SwTimerStart(RegParams.pJoinDutyCycleTimer->timerId, SWTIMER_MAX_TIMEOUT, SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    6eca:	7d23      	ldrb	r3, [r4, #20]
    6ecc:	7d62      	ldrb	r2, [r4, #21]
    6ece:	0212      	lsls	r2, r2, #8
    6ed0:	431a      	orrs	r2, r3
    6ed2:	7da3      	ldrb	r3, [r4, #22]
    6ed4:	041b      	lsls	r3, r3, #16
    6ed6:	431a      	orrs	r2, r3
    6ed8:	7de3      	ldrb	r3, [r4, #23]
    6eda:	061b      	lsls	r3, r3, #24
    6edc:	4313      	orrs	r3, r2
    6ede:	7a18      	ldrb	r0, [r3, #8]
    6ee0:	2300      	movs	r3, #0
    6ee2:	9300      	str	r3, [sp, #0]
    6ee4:	4b61      	ldr	r3, [pc, #388]	; (706c <setJoinDutyCycleTimer+0x270>)
    6ee6:	2200      	movs	r2, #0
    6ee8:	4961      	ldr	r1, [pc, #388]	; (7070 <setJoinDutyCycleTimer+0x274>)
    6eea:	4d62      	ldr	r5, [pc, #392]	; (7074 <setJoinDutyCycleTimer+0x278>)
    6eec:	47a8      	blx	r5
					RegParams.joinDutyCycleTimeout = RegParams.joinDutyCycleTimeout - (US_TO_MS(SWTIMER_MAX_TIMEOUT));
    6eee:	233e      	movs	r3, #62	; 0x3e
    6ef0:	5ce3      	ldrb	r3, [r4, r3]
    6ef2:	223f      	movs	r2, #63	; 0x3f
    6ef4:	5ca2      	ldrb	r2, [r4, r2]
    6ef6:	0212      	lsls	r2, r2, #8
    6ef8:	431a      	orrs	r2, r3
    6efa:	2340      	movs	r3, #64	; 0x40
    6efc:	5ce3      	ldrb	r3, [r4, r3]
    6efe:	041b      	lsls	r3, r3, #16
    6f00:	431a      	orrs	r2, r3
    6f02:	2341      	movs	r3, #65	; 0x41
    6f04:	5ce3      	ldrb	r3, [r4, r3]
    6f06:	061b      	lsls	r3, r3, #24
    6f08:	4313      	orrs	r3, r2
    6f0a:	4a57      	ldr	r2, [pc, #348]	; (7068 <setJoinDutyCycleTimer+0x26c>)
    6f0c:	4694      	mov	ip, r2
    6f0e:	4463      	add	r3, ip
    6f10:	343e      	adds	r4, #62	; 0x3e
    6f12:	7023      	strb	r3, [r4, #0]
    6f14:	0a1a      	lsrs	r2, r3, #8
    6f16:	7062      	strb	r2, [r4, #1]
    6f18:	0c1a      	lsrs	r2, r3, #16
    6f1a:	70a2      	strb	r2, [r4, #2]
    6f1c:	0e1b      	lsrs	r3, r3, #24
    6f1e:	70e3      	strb	r3, [r4, #3]
    6f20:	e094      	b.n	704c <setJoinDutyCycleTimer+0x250>
				RegParams.joinDutyCycleTimeout = (uint32_t)UpdateJoinDutyCycleTimer.joinreqTimeonAir * (JOIN_BACKOFF_PRESCALAR_1HR - 1);
    6f22:	9a02      	ldr	r2, [sp, #8]
    6f24:	0053      	lsls	r3, r2, #1
    6f26:	189b      	adds	r3, r3, r2
    6f28:	015a      	lsls	r2, r3, #5
    6f2a:	189b      	adds	r3, r3, r2
    6f2c:	4a4a      	ldr	r2, [pc, #296]	; (7058 <setJoinDutyCycleTimer+0x25c>)
    6f2e:	323e      	adds	r2, #62	; 0x3e
    6f30:	7013      	strb	r3, [r2, #0]
    6f32:	0a19      	lsrs	r1, r3, #8
    6f34:	7051      	strb	r1, [r2, #1]
    6f36:	0c19      	lsrs	r1, r3, #16
    6f38:	7091      	strb	r1, [r2, #2]
    6f3a:	0e1b      	lsrs	r3, r3, #24
    6f3c:	70d3      	strb	r3, [r2, #3]
    6f3e:	e77d      	b.n	6e3c <setJoinDutyCycleTimer+0x40>
				RegParams.joinDutyCycleTimeout = (uint32_t)UpdateJoinDutyCycleTimer.joinreqTimeonAir * (JOIN_BACKOFF_PRESCALAR_24HR - 1);
    6f40:	4b4d      	ldr	r3, [pc, #308]	; (7078 <setJoinDutyCycleTimer+0x27c>)
    6f42:	9a02      	ldr	r2, [sp, #8]
    6f44:	4353      	muls	r3, r2
    6f46:	4a44      	ldr	r2, [pc, #272]	; (7058 <setJoinDutyCycleTimer+0x25c>)
    6f48:	323e      	adds	r2, #62	; 0x3e
    6f4a:	7013      	strb	r3, [r2, #0]
    6f4c:	0a19      	lsrs	r1, r3, #8
    6f4e:	7051      	strb	r1, [r2, #1]
    6f50:	0c19      	lsrs	r1, r3, #16
    6f52:	7091      	strb	r1, [r2, #2]
    6f54:	0e1b      	lsrs	r3, r3, #24
    6f56:	70d3      	strb	r3, [r2, #3]
    6f58:	e770      	b.n	6e3c <setJoinDutyCycleTimer+0x40>
			ticks = SwTimerReadValue(RegParams.pJoinDutyCycleTimer->timerId);
    6f5a:	4c3f      	ldr	r4, [pc, #252]	; (7058 <setJoinDutyCycleTimer+0x25c>)
    6f5c:	7d23      	ldrb	r3, [r4, #20]
    6f5e:	7d62      	ldrb	r2, [r4, #21]
    6f60:	0212      	lsls	r2, r2, #8
    6f62:	431a      	orrs	r2, r3
    6f64:	7da3      	ldrb	r3, [r4, #22]
    6f66:	041b      	lsls	r3, r3, #16
    6f68:	431a      	orrs	r2, r3
    6f6a:	7de3      	ldrb	r3, [r4, #23]
    6f6c:	061b      	lsls	r3, r3, #24
    6f6e:	4313      	orrs	r3, r2
    6f70:	7a18      	ldrb	r0, [r3, #8]
    6f72:	4b42      	ldr	r3, [pc, #264]	; (707c <setJoinDutyCycleTimer+0x280>)
    6f74:	4798      	blx	r3
    6f76:	0005      	movs	r5, r0
			SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    6f78:	7d23      	ldrb	r3, [r4, #20]
    6f7a:	7d62      	ldrb	r2, [r4, #21]
    6f7c:	0212      	lsls	r2, r2, #8
    6f7e:	431a      	orrs	r2, r3
    6f80:	7da3      	ldrb	r3, [r4, #22]
    6f82:	041b      	lsls	r3, r3, #16
    6f84:	431a      	orrs	r2, r3
    6f86:	7de3      	ldrb	r3, [r4, #23]
    6f88:	061b      	lsls	r3, r3, #24
    6f8a:	4313      	orrs	r3, r2
    6f8c:	7a18      	ldrb	r0, [r3, #8]
    6f8e:	4b3c      	ldr	r3, [pc, #240]	; (7080 <setJoinDutyCycleTimer+0x284>)
    6f90:	4798      	blx	r3
			delta = RegParams.pJoinDutyCycleTimer->lastTimerInterval- US_TO_MS(ticks);
    6f92:	7d23      	ldrb	r3, [r4, #20]
    6f94:	7d62      	ldrb	r2, [r4, #21]
    6f96:	0212      	lsls	r2, r2, #8
    6f98:	431a      	orrs	r2, r3
    6f9a:	7da3      	ldrb	r3, [r4, #22]
    6f9c:	041b      	lsls	r3, r3, #16
    6f9e:	431a      	orrs	r2, r3
    6fa0:	7de3      	ldrb	r3, [r4, #23]
    6fa2:	061b      	lsls	r3, r3, #24
    6fa4:	4313      	orrs	r3, r2
    6fa6:	781a      	ldrb	r2, [r3, #0]
    6fa8:	785c      	ldrb	r4, [r3, #1]
    6faa:	0224      	lsls	r4, r4, #8
    6fac:	4322      	orrs	r2, r4
    6fae:	789c      	ldrb	r4, [r3, #2]
    6fb0:	0424      	lsls	r4, r4, #16
    6fb2:	4314      	orrs	r4, r2
    6fb4:	78da      	ldrb	r2, [r3, #3]
    6fb6:	0612      	lsls	r2, r2, #24
    6fb8:	4314      	orrs	r4, r2
    6fba:	21fa      	movs	r1, #250	; 0xfa
    6fbc:	0089      	lsls	r1, r1, #2
    6fbe:	0028      	movs	r0, r5
    6fc0:	4b30      	ldr	r3, [pc, #192]	; (7084 <setJoinDutyCycleTimer+0x288>)
    6fc2:	4798      	blx	r3
    6fc4:	1a24      	subs	r4, r4, r0
    6fc6:	e74a      	b.n	6e5e <setJoinDutyCycleTimer+0x62>
				SwTimerStart (RegParams.pJoinDutyCycleTimer->timerId, MS_TO_US(RegParams.joinDutyCycleTimeout), SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    6fc8:	20fa      	movs	r0, #250	; 0xfa
    6fca:	0080      	lsls	r0, r0, #2
    6fcc:	4341      	muls	r1, r0
    6fce:	4c22      	ldr	r4, [pc, #136]	; (7058 <setJoinDutyCycleTimer+0x25c>)
    6fd0:	7d23      	ldrb	r3, [r4, #20]
    6fd2:	7d62      	ldrb	r2, [r4, #21]
    6fd4:	0212      	lsls	r2, r2, #8
    6fd6:	431a      	orrs	r2, r3
    6fd8:	7da3      	ldrb	r3, [r4, #22]
    6fda:	041b      	lsls	r3, r3, #16
    6fdc:	431a      	orrs	r2, r3
    6fde:	7de3      	ldrb	r3, [r4, #23]
    6fe0:	061b      	lsls	r3, r3, #24
    6fe2:	4313      	orrs	r3, r2
    6fe4:	7a18      	ldrb	r0, [r3, #8]
    6fe6:	2300      	movs	r3, #0
    6fe8:	9300      	str	r3, [sp, #0]
    6fea:	4b20      	ldr	r3, [pc, #128]	; (706c <setJoinDutyCycleTimer+0x270>)
    6fec:	2200      	movs	r2, #0
    6fee:	4c21      	ldr	r4, [pc, #132]	; (7074 <setJoinDutyCycleTimer+0x278>)
    6ff0:	47a0      	blx	r4
    6ff2:	e02b      	b.n	704c <setJoinDutyCycleTimer+0x250>
				RegParams.joinDutyCycleTimeout = 0;
    6ff4:	4b18      	ldr	r3, [pc, #96]	; (7058 <setJoinDutyCycleTimer+0x25c>)
    6ff6:	333e      	adds	r3, #62	; 0x3e
    6ff8:	2200      	movs	r2, #0
    6ffa:	701a      	strb	r2, [r3, #0]
    6ffc:	705a      	strb	r2, [r3, #1]
    6ffe:	709a      	strb	r2, [r3, #2]
    7000:	70da      	strb	r2, [r3, #3]
    7002:	e023      	b.n	704c <setJoinDutyCycleTimer+0x250>
		SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    7004:	4c14      	ldr	r4, [pc, #80]	; (7058 <setJoinDutyCycleTimer+0x25c>)
    7006:	7d23      	ldrb	r3, [r4, #20]
    7008:	7d62      	ldrb	r2, [r4, #21]
    700a:	0212      	lsls	r2, r2, #8
    700c:	431a      	orrs	r2, r3
    700e:	7da3      	ldrb	r3, [r4, #22]
    7010:	041b      	lsls	r3, r3, #16
    7012:	431a      	orrs	r2, r3
    7014:	7de3      	ldrb	r3, [r4, #23]
    7016:	061b      	lsls	r3, r3, #24
    7018:	4313      	orrs	r3, r2
    701a:	7a18      	ldrb	r0, [r3, #8]
    701c:	4b18      	ldr	r3, [pc, #96]	; (7080 <setJoinDutyCycleTimer+0x284>)
    701e:	4798      	blx	r3
		RegParams.joinDutyCycleTimeout = 0;
    7020:	0023      	movs	r3, r4
    7022:	333e      	adds	r3, #62	; 0x3e
    7024:	2200      	movs	r2, #0
    7026:	701a      	strb	r2, [r3, #0]
    7028:	705a      	strb	r2, [r3, #1]
    702a:	709a      	strb	r2, [r3, #2]
    702c:	70da      	strb	r2, [r3, #3]
		RegParams.pJoinDutyCycleTimer->remainingtime =0;
    702e:	7d23      	ldrb	r3, [r4, #20]
    7030:	7d62      	ldrb	r2, [r4, #21]
    7032:	0212      	lsls	r2, r2, #8
    7034:	431a      	orrs	r2, r3
    7036:	7da3      	ldrb	r3, [r4, #22]
    7038:	041b      	lsls	r3, r3, #16
    703a:	431a      	orrs	r2, r3
    703c:	7de3      	ldrb	r3, [r4, #23]
    703e:	061b      	lsls	r3, r3, #24
    7040:	4313      	orrs	r3, r2
    7042:	2200      	movs	r2, #0
    7044:	711a      	strb	r2, [r3, #4]
    7046:	715a      	strb	r2, [r3, #5]
    7048:	719a      	strb	r2, [r3, #6]
    704a:	71da      	strb	r2, [r3, #7]
}
    704c:	2008      	movs	r0, #8
    704e:	b005      	add	sp, #20
    7050:	bd30      	pop	{r4, r5, pc}
    7052:	46c0      	nop			; (mov r8, r8)
    7054:	0001516d 	.word	0x0001516d
    7058:	20001220 	.word	0x20001220
    705c:	000003e7 	.word	0x000003e7
    7060:	00009ced 	.word	0x00009ced
    7064:	0020c49b 	.word	0x0020c49b
    7068:	ffdf3b65 	.word	0xffdf3b65
    706c:	0000792d 	.word	0x0000792d
    7070:	7fffffff 	.word	0x7fffffff
    7074:	00009b55 	.word	0x00009b55
    7078:	0000270f 	.word	0x0000270f
    707c:	00009d01 	.word	0x00009d01
    7080:	00009e61 	.word	0x00009e61
    7084:	00011a09 	.word	0x00011a09

00007088 <setDutyCycleTimer>:
{
    7088:	b5f0      	push	{r4, r5, r6, r7, lr}
    708a:	46de      	mov	lr, fp
    708c:	4657      	mov	r7, sl
    708e:	464e      	mov	r6, r9
    7090:	4645      	mov	r5, r8
    7092:	b5e0      	push	{r5, r6, r7, lr}
    7094:	b087      	sub	sp, #28
	memcpy(&updateDCTimer,attrInput,sizeof(UpdateDutyCycleTimer_t));
    7096:	2206      	movs	r2, #6
    7098:	a804      	add	r0, sp, #16
    709a:	4bc9      	ldr	r3, [pc, #804]	; (73c0 <setDutyCycleTimer+0x338>)
    709c:	4798      	blx	r3
    bandId = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].subBandId;
    709e:	49c9      	ldr	r1, [pc, #804]	; (73c4 <setDutyCycleTimer+0x33c>)
    70a0:	7a0b      	ldrb	r3, [r1, #8]
    70a2:	7a4a      	ldrb	r2, [r1, #9]
    70a4:	0212      	lsls	r2, r2, #8
    70a6:	4313      	orrs	r3, r2
    70a8:	7a8a      	ldrb	r2, [r1, #10]
    70aa:	0412      	lsls	r2, r2, #16
    70ac:	431a      	orrs	r2, r3
    70ae:	7acb      	ldrb	r3, [r1, #11]
    70b0:	061b      	lsls	r3, r3, #24
    70b2:	431a      	orrs	r2, r3
    70b4:	232f      	movs	r3, #47	; 0x2f
    70b6:	5cc9      	ldrb	r1, [r1, r3]
    70b8:	004b      	lsls	r3, r1, #1
    70ba:	185b      	adds	r3, r3, r1
    70bc:	009b      	lsls	r3, r3, #2
    70be:	189b      	adds	r3, r3, r2
    70c0:	7a1e      	ldrb	r6, [r3, #8]
	if (bandId == 0 && RegParams.band == ISM_JPN923)
    70c2:	2e00      	cmp	r6, #0
    70c4:	d105      	bne.n	70d2 <setDutyCycleTimer+0x4a>
    70c6:	232e      	movs	r3, #46	; 0x2e
    70c8:	4abe      	ldr	r2, [pc, #760]	; (73c4 <setDutyCycleTimer+0x33c>)
    70ca:	5cd3      	ldrb	r3, [r2, r3]
    70cc:	2b05      	cmp	r3, #5
    70ce:	d100      	bne.n	70d2 <setDutyCycleTimer+0x4a>
    70d0:	e162      	b.n	7398 <setDutyCycleTimer+0x310>
	if(updateDCTimer.joining != 1)
    70d2:	ab04      	add	r3, sp, #16
    70d4:	791b      	ldrb	r3, [r3, #4]
    70d6:	2b00      	cmp	r3, #0
    70d8:	d16a      	bne.n	71b0 <setDutyCycleTimer+0x128>
		RegParams.pSubBandParams[bandId].subBandTimeout = ((uint32_t)updateDCTimer.timeOnAir * ((uint32_t)RegParams.cmnParams.paramsType2.subBandDutyCycle[bandId] - 1));
    70da:	a904      	add	r1, sp, #16
    70dc:	880a      	ldrh	r2, [r1, #0]
    70de:	48b9      	ldr	r0, [pc, #740]	; (73c4 <setDutyCycleTimer+0x33c>)
    70e0:	7b07      	ldrb	r7, [r0, #12]
    70e2:	7b43      	ldrb	r3, [r0, #13]
    70e4:	021b      	lsls	r3, r3, #8
    70e6:	433b      	orrs	r3, r7
    70e8:	7b87      	ldrb	r7, [r0, #14]
    70ea:	043f      	lsls	r7, r7, #16
    70ec:	431f      	orrs	r7, r3
    70ee:	7bc4      	ldrb	r4, [r0, #15]
    70f0:	0624      	lsls	r4, r4, #24
    70f2:	4327      	orrs	r7, r4
    70f4:	0074      	lsls	r4, r6, #1
    70f6:	19a4      	adds	r4, r4, r6
    70f8:	00a4      	lsls	r4, r4, #2
    70fa:	0035      	movs	r5, r6
    70fc:	35d4      	adds	r5, #212	; 0xd4
    70fe:	006d      	lsls	r5, r5, #1
    7100:	1945      	adds	r5, r0, r5
    7102:	796b      	ldrb	r3, [r5, #5]
    7104:	469c      	mov	ip, r3
    7106:	79ab      	ldrb	r3, [r5, #6]
    7108:	021b      	lsls	r3, r3, #8
    710a:	4665      	mov	r5, ip
    710c:	432b      	orrs	r3, r5
    710e:	3b01      	subs	r3, #1
    7110:	4353      	muls	r3, r2
    7112:	19e4      	adds	r4, r4, r7
    7114:	7223      	strb	r3, [r4, #8]
    7116:	0a1d      	lsrs	r5, r3, #8
    7118:	7265      	strb	r5, [r4, #9]
    711a:	0c1d      	lsrs	r5, r3, #16
    711c:	72a5      	strb	r5, [r4, #10]
    711e:	0e1b      	lsrs	r3, r3, #24
    7120:	72e3      	strb	r3, [r4, #11]
		RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = (uint32_t)updateDCTimer.timeOnAir * ((uint32_t) updateDCTimer.aggDutyCycle - 1);
    7122:	884b      	ldrh	r3, [r1, #2]
    7124:	3b01      	subs	r3, #1
    7126:	435a      	muls	r2, r3
    7128:	23ba      	movs	r3, #186	; 0xba
    712a:	33ff      	adds	r3, #255	; 0xff
    712c:	54c2      	strb	r2, [r0, r3]
    712e:	0a11      	lsrs	r1, r2, #8
    7130:	18c0      	adds	r0, r0, r3
    7132:	7041      	strb	r1, [r0, #1]
    7134:	0c11      	lsrs	r1, r2, #16
    7136:	7081      	strb	r1, [r0, #2]
    7138:	0e12      	lsrs	r2, r2, #24
    713a:	70c2      	strb	r2, [r0, #3]
	if(SwTimerIsRunning(RegParams.pDutyCycleTimer->timerId))
    713c:	49a1      	ldr	r1, [pc, #644]	; (73c4 <setDutyCycleTimer+0x33c>)
    713e:	7c0b      	ldrb	r3, [r1, #16]
    7140:	7c4a      	ldrb	r2, [r1, #17]
    7142:	0212      	lsls	r2, r2, #8
    7144:	431a      	orrs	r2, r3
    7146:	7c8b      	ldrb	r3, [r1, #18]
    7148:	041b      	lsls	r3, r3, #16
    714a:	431a      	orrs	r2, r3
    714c:	7ccb      	ldrb	r3, [r1, #19]
    714e:	061b      	lsls	r3, r3, #24
    7150:	4313      	orrs	r3, r2
    7152:	7918      	ldrb	r0, [r3, #4]
    7154:	4b9c      	ldr	r3, [pc, #624]	; (73c8 <setDutyCycleTimer+0x340>)
    7156:	4798      	blx	r3
    uint32_t delta = 0, minimSubBandTimer = UINT32_MAX, ticks,nextTimer;
    7158:	2300      	movs	r3, #0
    715a:	4699      	mov	r9, r3
	if(SwTimerIsRunning(RegParams.pDutyCycleTimer->timerId))
    715c:	2800      	cmp	r0, #0
    715e:	d136      	bne.n	71ce <setDutyCycleTimer+0x146>
	minimSubBandTimer = RegParams.pSubBandParams[bandId].subBandTimeout;
    7160:	4a98      	ldr	r2, [pc, #608]	; (73c4 <setDutyCycleTimer+0x33c>)
    7162:	7b13      	ldrb	r3, [r2, #12]
    7164:	7b51      	ldrb	r1, [r2, #13]
    7166:	0209      	lsls	r1, r1, #8
    7168:	430b      	orrs	r3, r1
    716a:	7b91      	ldrb	r1, [r2, #14]
    716c:	0409      	lsls	r1, r1, #16
    716e:	4319      	orrs	r1, r3
    7170:	7bd3      	ldrb	r3, [r2, #15]
    7172:	061b      	lsls	r3, r3, #24
    7174:	4319      	orrs	r1, r3
    7176:	0073      	lsls	r3, r6, #1
    7178:	199b      	adds	r3, r3, r6
    717a:	009b      	lsls	r3, r3, #2
    717c:	185b      	adds	r3, r3, r1
    717e:	7a18      	ldrb	r0, [r3, #8]
    7180:	7a59      	ldrb	r1, [r3, #9]
    7182:	0209      	lsls	r1, r1, #8
    7184:	4301      	orrs	r1, r0
    7186:	7a98      	ldrb	r0, [r3, #10]
    7188:	0400      	lsls	r0, r0, #16
    718a:	4301      	orrs	r1, r0
    718c:	7ad8      	ldrb	r0, [r3, #11]
    718e:	0600      	lsls	r0, r0, #24
    7190:	4308      	orrs	r0, r1
    7192:	9003      	str	r0, [sp, #12]
	for(i = 0; i < RegParams.maxSubBands; i++)
    7194:	2329      	movs	r3, #41	; 0x29
    7196:	5cd3      	ldrb	r3, [r2, r3]
    7198:	2b00      	cmp	r3, #0
    719a:	d100      	bne.n	719e <setDutyCycleTimer+0x116>
    719c:	e09c      	b.n	72d8 <setDutyCycleTimer+0x250>
    719e:	2200      	movs	r2, #0
		if((i != bandId) && (RegParams.pSubBandParams[i].subBandTimeout != 0))
    71a0:	4d88      	ldr	r5, [pc, #544]	; (73c4 <setDutyCycleTimer+0x33c>)
			if(RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer && RegParams.pSubBandParams[i].subBandTimeout != 0)
    71a2:	002f      	movs	r7, r5
				RegParams.pSubBandParams[i].subBandTimeout = 0;
    71a4:	2300      	movs	r3, #0
    71a6:	469a      	mov	sl, r3
	for(i = 0; i < RegParams.maxSubBands; i++)
    71a8:	46a8      	mov	r8, r5
    71aa:	2329      	movs	r3, #41	; 0x29
    71ac:	469c      	mov	ip, r3
    71ae:	e051      	b.n	7254 <setDutyCycleTimer+0x1cc>
		RegParams.joinDutyCycleTimeout = (uint32_t)updateDCTimer.timeOnAir * ((uint32_t) updateDCTimer.aggDutyCycle - 1);
    71b0:	a904      	add	r1, sp, #16
    71b2:	884a      	ldrh	r2, [r1, #2]
    71b4:	3a01      	subs	r2, #1
    71b6:	880b      	ldrh	r3, [r1, #0]
    71b8:	4353      	muls	r3, r2
    71ba:	4a82      	ldr	r2, [pc, #520]	; (73c4 <setDutyCycleTimer+0x33c>)
    71bc:	323e      	adds	r2, #62	; 0x3e
    71be:	7013      	strb	r3, [r2, #0]
    71c0:	0a19      	lsrs	r1, r3, #8
    71c2:	7051      	strb	r1, [r2, #1]
    71c4:	0c19      	lsrs	r1, r3, #16
    71c6:	7091      	strb	r1, [r2, #2]
    71c8:	0e1b      	lsrs	r3, r3, #24
    71ca:	70d3      	strb	r3, [r2, #3]
    71cc:	e7b6      	b.n	713c <setDutyCycleTimer+0xb4>
		SwTimerStop(RegParams.pDutyCycleTimer->timerId);
    71ce:	4c7d      	ldr	r4, [pc, #500]	; (73c4 <setDutyCycleTimer+0x33c>)
    71d0:	7c23      	ldrb	r3, [r4, #16]
    71d2:	7c62      	ldrb	r2, [r4, #17]
    71d4:	0212      	lsls	r2, r2, #8
    71d6:	431a      	orrs	r2, r3
    71d8:	7ca3      	ldrb	r3, [r4, #18]
    71da:	041b      	lsls	r3, r3, #16
    71dc:	431a      	orrs	r2, r3
    71de:	7ce3      	ldrb	r3, [r4, #19]
    71e0:	061b      	lsls	r3, r3, #24
    71e2:	4313      	orrs	r3, r2
    71e4:	7918      	ldrb	r0, [r3, #4]
    71e6:	4b79      	ldr	r3, [pc, #484]	; (73cc <setDutyCycleTimer+0x344>)
    71e8:	4798      	blx	r3
		ticks = SwTimerReadValue(RegParams.pDutyCycleTimer->timerId);
    71ea:	7c23      	ldrb	r3, [r4, #16]
    71ec:	7c62      	ldrb	r2, [r4, #17]
    71ee:	0212      	lsls	r2, r2, #8
    71f0:	431a      	orrs	r2, r3
    71f2:	7ca3      	ldrb	r3, [r4, #18]
    71f4:	041b      	lsls	r3, r3, #16
    71f6:	431a      	orrs	r2, r3
    71f8:	7ce3      	ldrb	r3, [r4, #19]
    71fa:	061b      	lsls	r3, r3, #24
    71fc:	4313      	orrs	r3, r2
    71fe:	7918      	ldrb	r0, [r3, #4]
    7200:	4b73      	ldr	r3, [pc, #460]	; (73d0 <setDutyCycleTimer+0x348>)
    7202:	4798      	blx	r3
		delta = RegParams.pDutyCycleTimer->lastTimerValue - US_TO_MS(ticks);
    7204:	7c23      	ldrb	r3, [r4, #16]
    7206:	7c62      	ldrb	r2, [r4, #17]
    7208:	0212      	lsls	r2, r2, #8
    720a:	431a      	orrs	r2, r3
    720c:	7ca3      	ldrb	r3, [r4, #18]
    720e:	041b      	lsls	r3, r3, #16
    7210:	431a      	orrs	r2, r3
    7212:	7ce3      	ldrb	r3, [r4, #19]
    7214:	061b      	lsls	r3, r3, #24
    7216:	4313      	orrs	r3, r2
    7218:	781c      	ldrb	r4, [r3, #0]
    721a:	785a      	ldrb	r2, [r3, #1]
    721c:	0212      	lsls	r2, r2, #8
    721e:	4322      	orrs	r2, r4
    7220:	789c      	ldrb	r4, [r3, #2]
    7222:	0424      	lsls	r4, r4, #16
    7224:	4322      	orrs	r2, r4
    7226:	78dc      	ldrb	r4, [r3, #3]
    7228:	0624      	lsls	r4, r4, #24
    722a:	4314      	orrs	r4, r2
    722c:	21fa      	movs	r1, #250	; 0xfa
    722e:	0089      	lsls	r1, r1, #2
    7230:	4b68      	ldr	r3, [pc, #416]	; (73d4 <setDutyCycleTimer+0x34c>)
    7232:	4798      	blx	r3
    7234:	1a23      	subs	r3, r4, r0
    7236:	4699      	mov	r9, r3
    7238:	e792      	b.n	7160 <setDutyCycleTimer+0xd8>
				RegParams.pSubBandParams[i].subBandTimeout = 0;
    723a:	4651      	mov	r1, sl
    723c:	7219      	strb	r1, [r3, #8]
    723e:	7259      	strb	r1, [r3, #9]
    7240:	7299      	strb	r1, [r3, #10]
    7242:	72d9      	strb	r1, [r3, #11]
    7244:	e02c      	b.n	72a0 <setDutyCycleTimer+0x218>
	for(i = 0; i < RegParams.maxSubBands; i++)
    7246:	3201      	adds	r2, #1
    7248:	b2d2      	uxtb	r2, r2
    724a:	4643      	mov	r3, r8
    724c:	4661      	mov	r1, ip
    724e:	5c5b      	ldrb	r3, [r3, r1]
    7250:	4293      	cmp	r3, r2
    7252:	d941      	bls.n	72d8 <setDutyCycleTimer+0x250>
		if((i != bandId) && (RegParams.pSubBandParams[i].subBandTimeout != 0))
    7254:	4296      	cmp	r6, r2
    7256:	d0f6      	beq.n	7246 <setDutyCycleTimer+0x1be>
    7258:	0054      	lsls	r4, r2, #1
    725a:	18a4      	adds	r4, r4, r2
    725c:	00a4      	lsls	r4, r4, #2
    725e:	7b2b      	ldrb	r3, [r5, #12]
    7260:	7b69      	ldrb	r1, [r5, #13]
    7262:	0209      	lsls	r1, r1, #8
    7264:	4319      	orrs	r1, r3
    7266:	7bab      	ldrb	r3, [r5, #14]
    7268:	041b      	lsls	r3, r3, #16
    726a:	4319      	orrs	r1, r3
    726c:	7beb      	ldrb	r3, [r5, #15]
    726e:	061b      	lsls	r3, r3, #24
    7270:	430b      	orrs	r3, r1
    7272:	191b      	adds	r3, r3, r4
    7274:	7a18      	ldrb	r0, [r3, #8]
    7276:	7a59      	ldrb	r1, [r3, #9]
    7278:	0209      	lsls	r1, r1, #8
    727a:	4301      	orrs	r1, r0
    727c:	7a98      	ldrb	r0, [r3, #10]
    727e:	0400      	lsls	r0, r0, #16
    7280:	4308      	orrs	r0, r1
    7282:	7ad9      	ldrb	r1, [r3, #11]
    7284:	0609      	lsls	r1, r1, #24
    7286:	4301      	orrs	r1, r0
    7288:	d0dd      	beq.n	7246 <setDutyCycleTimer+0x1be>
			if(RegParams.pSubBandParams[i].subBandTimeout > delta)
    728a:	4589      	cmp	r9, r1
    728c:	d2d5      	bcs.n	723a <setDutyCycleTimer+0x1b2>
				          RegParams.pSubBandParams[i].subBandTimeout - delta;
    728e:	4648      	mov	r0, r9
    7290:	1a09      	subs	r1, r1, r0
				RegParams.pSubBandParams[i].subBandTimeout = 
    7292:	7219      	strb	r1, [r3, #8]
    7294:	0a08      	lsrs	r0, r1, #8
    7296:	7258      	strb	r0, [r3, #9]
    7298:	0c08      	lsrs	r0, r1, #16
    729a:	7298      	strb	r0, [r3, #10]
    729c:	0e09      	lsrs	r1, r1, #24
    729e:	72d9      	strb	r1, [r3, #11]
			if(RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer && RegParams.pSubBandParams[i].subBandTimeout != 0)
    72a0:	7b3b      	ldrb	r3, [r7, #12]
    72a2:	7b79      	ldrb	r1, [r7, #13]
    72a4:	0209      	lsls	r1, r1, #8
    72a6:	4319      	orrs	r1, r3
    72a8:	7bbb      	ldrb	r3, [r7, #14]
    72aa:	041b      	lsls	r3, r3, #16
    72ac:	4319      	orrs	r1, r3
    72ae:	7bfb      	ldrb	r3, [r7, #15]
    72b0:	061b      	lsls	r3, r3, #24
    72b2:	430b      	orrs	r3, r1
    72b4:	191c      	adds	r4, r3, r4
    72b6:	7a23      	ldrb	r3, [r4, #8]
    72b8:	7a61      	ldrb	r1, [r4, #9]
    72ba:	0209      	lsls	r1, r1, #8
    72bc:	4319      	orrs	r1, r3
    72be:	7aa3      	ldrb	r3, [r4, #10]
    72c0:	041b      	lsls	r3, r3, #16
    72c2:	4319      	orrs	r1, r3
    72c4:	7ae3      	ldrb	r3, [r4, #11]
    72c6:	061b      	lsls	r3, r3, #24
    72c8:	430b      	orrs	r3, r1
    72ca:	9903      	ldr	r1, [sp, #12]
    72cc:	428b      	cmp	r3, r1
    72ce:	d8ba      	bhi.n	7246 <setDutyCycleTimer+0x1be>
    72d0:	2b00      	cmp	r3, #0
    72d2:	d0b8      	beq.n	7246 <setDutyCycleTimer+0x1be>
				minimSubBandTimer = RegParams.pSubBandParams[i].subBandTimeout;
    72d4:	9303      	str	r3, [sp, #12]
    72d6:	e7b6      	b.n	7246 <setDutyCycleTimer+0x1be>
	if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout != 0)
    72d8:	493a      	ldr	r1, [pc, #232]	; (73c4 <setDutyCycleTimer+0x33c>)
    72da:	23ba      	movs	r3, #186	; 0xba
    72dc:	33ff      	adds	r3, #255	; 0xff
    72de:	5ccb      	ldrb	r3, [r1, r3]
    72e0:	22dd      	movs	r2, #221	; 0xdd
    72e2:	0052      	lsls	r2, r2, #1
    72e4:	5c8a      	ldrb	r2, [r1, r2]
    72e6:	0212      	lsls	r2, r2, #8
    72e8:	431a      	orrs	r2, r3
    72ea:	23bc      	movs	r3, #188	; 0xbc
    72ec:	33ff      	adds	r3, #255	; 0xff
    72ee:	5ccb      	ldrb	r3, [r1, r3]
    72f0:	041b      	lsls	r3, r3, #16
    72f2:	431a      	orrs	r2, r3
    72f4:	23de      	movs	r3, #222	; 0xde
    72f6:	005b      	lsls	r3, r3, #1
    72f8:	5ccb      	ldrb	r3, [r1, r3]
    72fa:	061b      	lsls	r3, r3, #24
    72fc:	4313      	orrs	r3, r2
    72fe:	d00f      	beq.n	7320 <setDutyCycleTimer+0x298>
		if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout > delta)
    7300:	4599      	cmp	r9, r3
    7302:	d251      	bcs.n	73a8 <setDutyCycleTimer+0x320>
			RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout - delta;
    7304:	000a      	movs	r2, r1
    7306:	4649      	mov	r1, r9
    7308:	1a5b      	subs	r3, r3, r1
    730a:	21ba      	movs	r1, #186	; 0xba
    730c:	31ff      	adds	r1, #255	; 0xff
    730e:	5453      	strb	r3, [r2, r1]
    7310:	0a19      	lsrs	r1, r3, #8
    7312:	32ba      	adds	r2, #186	; 0xba
    7314:	32ff      	adds	r2, #255	; 0xff
    7316:	7051      	strb	r1, [r2, #1]
    7318:	0c19      	lsrs	r1, r3, #16
    731a:	7091      	strb	r1, [r2, #2]
    731c:	0e1b      	lsrs	r3, r3, #24
    731e:	70d3      	strb	r3, [r2, #3]
		if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout >= minimSubBandTimer)
    7320:	4a28      	ldr	r2, [pc, #160]	; (73c4 <setDutyCycleTimer+0x33c>)
    7322:	23ba      	movs	r3, #186	; 0xba
    7324:	33ff      	adds	r3, #255	; 0xff
    7326:	5cd1      	ldrb	r1, [r2, r3]
    7328:	3301      	adds	r3, #1
    732a:	5cd3      	ldrb	r3, [r2, r3]
    732c:	021b      	lsls	r3, r3, #8
    732e:	430b      	orrs	r3, r1
    7330:	21bc      	movs	r1, #188	; 0xbc
    7332:	31ff      	adds	r1, #255	; 0xff
    7334:	5c51      	ldrb	r1, [r2, r1]
    7336:	0409      	lsls	r1, r1, #16
    7338:	430b      	orrs	r3, r1
    733a:	21de      	movs	r1, #222	; 0xde
    733c:	0049      	lsls	r1, r1, #1
    733e:	5c51      	ldrb	r1, [r2, r1]
    7340:	0609      	lsls	r1, r1, #24
    7342:	4319      	orrs	r1, r3
    7344:	9a03      	ldr	r2, [sp, #12]
    7346:	4291      	cmp	r1, r2
    7348:	d200      	bcs.n	734c <setDutyCycleTimer+0x2c4>
    734a:	0011      	movs	r1, r2
		RegParams.pDutyCycleTimer->lastTimerValue = nextTimer;
    734c:	4b1d      	ldr	r3, [pc, #116]	; (73c4 <setDutyCycleTimer+0x33c>)
    734e:	7c1a      	ldrb	r2, [r3, #16]
    7350:	7c58      	ldrb	r0, [r3, #17]
    7352:	0200      	lsls	r0, r0, #8
    7354:	4310      	orrs	r0, r2
    7356:	7c9a      	ldrb	r2, [r3, #18]
    7358:	0412      	lsls	r2, r2, #16
    735a:	4310      	orrs	r0, r2
    735c:	7cda      	ldrb	r2, [r3, #19]
    735e:	0612      	lsls	r2, r2, #24
    7360:	4302      	orrs	r2, r0
    7362:	7011      	strb	r1, [r2, #0]
    7364:	0a08      	lsrs	r0, r1, #8
    7366:	7050      	strb	r0, [r2, #1]
    7368:	0c08      	lsrs	r0, r1, #16
    736a:	7090      	strb	r0, [r2, #2]
    736c:	0e08      	lsrs	r0, r1, #24
    736e:	70d0      	strb	r0, [r2, #3]
		SwTimerStart (RegParams.pDutyCycleTimer->timerId, MS_TO_US(nextTimer), SW_TIMEOUT_RELATIVE, (void *)DutyCycleCallback, NULL);
    7370:	22fa      	movs	r2, #250	; 0xfa
    7372:	0092      	lsls	r2, r2, #2
    7374:	4351      	muls	r1, r2
    7376:	7c18      	ldrb	r0, [r3, #16]
    7378:	7c5a      	ldrb	r2, [r3, #17]
    737a:	0212      	lsls	r2, r2, #8
    737c:	4310      	orrs	r0, r2
    737e:	7c9a      	ldrb	r2, [r3, #18]
    7380:	0412      	lsls	r2, r2, #16
    7382:	4302      	orrs	r2, r0
    7384:	7cdb      	ldrb	r3, [r3, #19]
    7386:	061b      	lsls	r3, r3, #24
    7388:	4313      	orrs	r3, r2
    738a:	7918      	ldrb	r0, [r3, #4]
    738c:	2300      	movs	r3, #0
    738e:	9300      	str	r3, [sp, #0]
    7390:	4b11      	ldr	r3, [pc, #68]	; (73d8 <setDutyCycleTimer+0x350>)
    7392:	2200      	movs	r2, #0
    7394:	4c11      	ldr	r4, [pc, #68]	; (73dc <setDutyCycleTimer+0x354>)
    7396:	47a0      	blx	r4
}
    7398:	2008      	movs	r0, #8
    739a:	b007      	add	sp, #28
    739c:	bc3c      	pop	{r2, r3, r4, r5}
    739e:	4690      	mov	r8, r2
    73a0:	4699      	mov	r9, r3
    73a2:	46a2      	mov	sl, r4
    73a4:	46ab      	mov	fp, r5
    73a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = 0;
    73a8:	4b06      	ldr	r3, [pc, #24]	; (73c4 <setDutyCycleTimer+0x33c>)
    73aa:	2100      	movs	r1, #0
    73ac:	22ba      	movs	r2, #186	; 0xba
    73ae:	32ff      	adds	r2, #255	; 0xff
    73b0:	5499      	strb	r1, [r3, r2]
    73b2:	189b      	adds	r3, r3, r2
    73b4:	2200      	movs	r2, #0
    73b6:	705a      	strb	r2, [r3, #1]
    73b8:	709a      	strb	r2, [r3, #2]
    73ba:	70da      	strb	r2, [r3, #3]
    73bc:	e7b0      	b.n	7320 <setDutyCycleTimer+0x298>
    73be:	46c0      	nop			; (mov r8, r8)
    73c0:	0001516d 	.word	0x0001516d
    73c4:	20001220 	.word	0x20001220
    73c8:	00009ced 	.word	0x00009ced
    73cc:	00009e61 	.word	0x00009e61
    73d0:	00009d01 	.word	0x00009d01
    73d4:	00011a09 	.word	0x00011a09
    73d8:	000073e1 	.word	0x000073e1
    73dc:	00009b55 	.word	0x00009b55

000073e0 <DutyCycleCallback>:
{
    73e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    73e2:	46de      	mov	lr, fp
    73e4:	4657      	mov	r7, sl
    73e6:	464e      	mov	r6, r9
    73e8:	4645      	mov	r5, r8
    73ea:	b5e0      	push	{r5, r6, r7, lr}
    73ec:	b087      	sub	sp, #28
	uint32_t DutyCycleTimeout = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout;
    73ee:	4980      	ldr	r1, [pc, #512]	; (75f0 <DutyCycleCallback+0x210>)
    73f0:	23ba      	movs	r3, #186	; 0xba
    73f2:	33ff      	adds	r3, #255	; 0xff
    73f4:	5cca      	ldrb	r2, [r1, r3]
    73f6:	3301      	adds	r3, #1
    73f8:	5ccb      	ldrb	r3, [r1, r3]
    73fa:	021b      	lsls	r3, r3, #8
    73fc:	431a      	orrs	r2, r3
    73fe:	23bc      	movs	r3, #188	; 0xbc
    7400:	33ff      	adds	r3, #255	; 0xff
    7402:	5ccb      	ldrb	r3, [r1, r3]
    7404:	041b      	lsls	r3, r3, #16
    7406:	4313      	orrs	r3, r2
    7408:	22de      	movs	r2, #222	; 0xde
    740a:	0052      	lsls	r2, r2, #1
    740c:	5c8a      	ldrb	r2, [r1, r2]
    740e:	0612      	lsls	r2, r2, #24
    7410:	431a      	orrs	r2, r3
    7412:	9205      	str	r2, [sp, #20]
    for (i=0; i < RegParams.maxSubBands; i++)
    7414:	2329      	movs	r3, #41	; 0x29
    7416:	5ccb      	ldrb	r3, [r1, r3]
    7418:	2b00      	cmp	r3, #0
    741a:	d100      	bne.n	741e <DutyCycleCallback+0x3e>
    741c:	e0df      	b.n	75de <DutyCycleCallback+0x1fe>
    741e:	2600      	movs	r6, #0
    7420:	2300      	movs	r3, #0
    7422:	9304      	str	r3, [sp, #16]
    7424:	3b01      	subs	r3, #1
    7426:	9303      	str	r3, [sp, #12]
        if (( RegParams.pSubBandParams[i].subBandTimeout != 0 ))
    7428:	000f      	movs	r7, r1
            if ( RegParams.pSubBandParams[i].subBandTimeout > RegParams.pDutyCycleTimer->lastTimerValue )
    742a:	4688      	mov	r8, r1
            if ( (RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer) && (RegParams.pSubBandParams[i].subBandTimeout != 0) )
    742c:	468c      	mov	ip, r1
                RegParams.pSubBandParams[i].subBandTimeout = 0;
    742e:	2300      	movs	r3, #0
    7430:	469b      	mov	fp, r3
    for (i=0; i < RegParams.maxSubBands; i++)
    7432:	468a      	mov	sl, r1
    7434:	2329      	movs	r3, #41	; 0x29
    7436:	4699      	mov	r9, r3
    7438:	e00c      	b.n	7454 <DutyCycleCallback+0x74>
                RegParams.pSubBandParams[i].subBandTimeout = 0;
    743a:	465a      	mov	r2, fp
    743c:	721a      	strb	r2, [r3, #8]
    743e:	725a      	strb	r2, [r3, #9]
    7440:	729a      	strb	r2, [r3, #10]
    7442:	72da      	strb	r2, [r3, #11]
    7444:	e03f      	b.n	74c6 <DutyCycleCallback+0xe6>
    for (i=0; i < RegParams.maxSubBands; i++)
    7446:	3601      	adds	r6, #1
    7448:	b2f6      	uxtb	r6, r6
    744a:	4653      	mov	r3, sl
    744c:	464a      	mov	r2, r9
    744e:	5c9b      	ldrb	r3, [r3, r2]
    7450:	42b3      	cmp	r3, r6
    7452:	d95a      	bls.n	750a <DutyCycleCallback+0x12a>
        if (( RegParams.pSubBandParams[i].subBandTimeout != 0 ))
    7454:	0071      	lsls	r1, r6, #1
    7456:	1989      	adds	r1, r1, r6
    7458:	0089      	lsls	r1, r1, #2
    745a:	7b3b      	ldrb	r3, [r7, #12]
    745c:	7b7a      	ldrb	r2, [r7, #13]
    745e:	0212      	lsls	r2, r2, #8
    7460:	431a      	orrs	r2, r3
    7462:	7bbb      	ldrb	r3, [r7, #14]
    7464:	041b      	lsls	r3, r3, #16
    7466:	431a      	orrs	r2, r3
    7468:	7bfb      	ldrb	r3, [r7, #15]
    746a:	061b      	lsls	r3, r3, #24
    746c:	4313      	orrs	r3, r2
    746e:	185b      	adds	r3, r3, r1
    7470:	7a1a      	ldrb	r2, [r3, #8]
    7472:	7a58      	ldrb	r0, [r3, #9]
    7474:	0200      	lsls	r0, r0, #8
    7476:	4310      	orrs	r0, r2
    7478:	7a9a      	ldrb	r2, [r3, #10]
    747a:	0412      	lsls	r2, r2, #16
    747c:	4310      	orrs	r0, r2
    747e:	7ada      	ldrb	r2, [r3, #11]
    7480:	0612      	lsls	r2, r2, #24
    7482:	4302      	orrs	r2, r0
    7484:	d0df      	beq.n	7446 <DutyCycleCallback+0x66>
            if ( RegParams.pSubBandParams[i].subBandTimeout > RegParams.pDutyCycleTimer->lastTimerValue )
    7486:	4640      	mov	r0, r8
    7488:	7c05      	ldrb	r5, [r0, #16]
    748a:	7c44      	ldrb	r4, [r0, #17]
    748c:	0224      	lsls	r4, r4, #8
    748e:	4325      	orrs	r5, r4
    7490:	7c80      	ldrb	r0, [r0, #18]
    7492:	0400      	lsls	r0, r0, #16
    7494:	4305      	orrs	r5, r0
    7496:	4640      	mov	r0, r8
    7498:	7cc0      	ldrb	r0, [r0, #19]
    749a:	0600      	lsls	r0, r0, #24
    749c:	4328      	orrs	r0, r5
    749e:	7804      	ldrb	r4, [r0, #0]
    74a0:	7845      	ldrb	r5, [r0, #1]
    74a2:	022d      	lsls	r5, r5, #8
    74a4:	4325      	orrs	r5, r4
    74a6:	7884      	ldrb	r4, [r0, #2]
    74a8:	0424      	lsls	r4, r4, #16
    74aa:	4325      	orrs	r5, r4
    74ac:	78c4      	ldrb	r4, [r0, #3]
    74ae:	0624      	lsls	r4, r4, #24
    74b0:	432c      	orrs	r4, r5
    74b2:	42a2      	cmp	r2, r4
    74b4:	d9c1      	bls.n	743a <DutyCycleCallback+0x5a>
                RegParams.pSubBandParams[i].subBandTimeout = RegParams.pSubBandParams[i].subBandTimeout - RegParams.pDutyCycleTimer->lastTimerValue;
    74b6:	1b12      	subs	r2, r2, r4
    74b8:	721a      	strb	r2, [r3, #8]
    74ba:	0a10      	lsrs	r0, r2, #8
    74bc:	7258      	strb	r0, [r3, #9]
    74be:	0c10      	lsrs	r0, r2, #16
    74c0:	7298      	strb	r0, [r3, #10]
    74c2:	0e12      	lsrs	r2, r2, #24
    74c4:	72da      	strb	r2, [r3, #11]
            if ( (RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer) && (RegParams.pSubBandParams[i].subBandTimeout != 0) )
    74c6:	4663      	mov	r3, ip
    74c8:	7b1b      	ldrb	r3, [r3, #12]
    74ca:	4662      	mov	r2, ip
    74cc:	7b52      	ldrb	r2, [r2, #13]
    74ce:	0212      	lsls	r2, r2, #8
    74d0:	431a      	orrs	r2, r3
    74d2:	4663      	mov	r3, ip
    74d4:	7b9b      	ldrb	r3, [r3, #14]
    74d6:	041b      	lsls	r3, r3, #16
    74d8:	431a      	orrs	r2, r3
    74da:	4663      	mov	r3, ip
    74dc:	7bdb      	ldrb	r3, [r3, #15]
    74de:	061b      	lsls	r3, r3, #24
    74e0:	4313      	orrs	r3, r2
    74e2:	1859      	adds	r1, r3, r1
    74e4:	7a0b      	ldrb	r3, [r1, #8]
    74e6:	7a4a      	ldrb	r2, [r1, #9]
    74e8:	0212      	lsls	r2, r2, #8
    74ea:	431a      	orrs	r2, r3
    74ec:	7a8b      	ldrb	r3, [r1, #10]
    74ee:	041b      	lsls	r3, r3, #16
    74f0:	431a      	orrs	r2, r3
    74f2:	7acb      	ldrb	r3, [r1, #11]
    74f4:	061b      	lsls	r3, r3, #24
    74f6:	4313      	orrs	r3, r2
    74f8:	9a03      	ldr	r2, [sp, #12]
    74fa:	4293      	cmp	r3, r2
    74fc:	d8a3      	bhi.n	7446 <DutyCycleCallback+0x66>
    74fe:	2b00      	cmp	r3, #0
    7500:	d0a1      	beq.n	7446 <DutyCycleCallback+0x66>
                minimSubBandTimer  = RegParams.pSubBandParams[i].subBandTimeout;
    7502:	9303      	str	r3, [sp, #12]
                found = 1;
    7504:	2301      	movs	r3, #1
    7506:	9304      	str	r3, [sp, #16]
    7508:	e79d      	b.n	7446 <DutyCycleCallback+0x66>
    if (( DutyCycleTimeout != 0 ))
    750a:	9b05      	ldr	r3, [sp, #20]
    750c:	2b00      	cmp	r3, #0
    750e:	d031      	beq.n	7574 <DutyCycleCallback+0x194>
	    if (DutyCycleTimeout > RegParams.pDutyCycleTimer->lastTimerValue)
    7510:	4937      	ldr	r1, [pc, #220]	; (75f0 <DutyCycleCallback+0x210>)
    7512:	7c0b      	ldrb	r3, [r1, #16]
    7514:	7c4a      	ldrb	r2, [r1, #17]
    7516:	0212      	lsls	r2, r2, #8
    7518:	431a      	orrs	r2, r3
    751a:	7c8b      	ldrb	r3, [r1, #18]
    751c:	041b      	lsls	r3, r3, #16
    751e:	431a      	orrs	r2, r3
    7520:	7ccb      	ldrb	r3, [r1, #19]
    7522:	061b      	lsls	r3, r3, #24
    7524:	4313      	orrs	r3, r2
    7526:	7819      	ldrb	r1, [r3, #0]
    7528:	785a      	ldrb	r2, [r3, #1]
    752a:	0212      	lsls	r2, r2, #8
    752c:	430a      	orrs	r2, r1
    752e:	7899      	ldrb	r1, [r3, #2]
    7530:	0409      	lsls	r1, r1, #16
    7532:	430a      	orrs	r2, r1
    7534:	78d9      	ldrb	r1, [r3, #3]
    7536:	0609      	lsls	r1, r1, #24
    7538:	4311      	orrs	r1, r2
    753a:	9a05      	ldr	r2, [sp, #20]
    753c:	428a      	cmp	r2, r1
    753e:	d90f      	bls.n	7560 <DutyCycleCallback+0x180>
		    RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = DutyCycleTimeout - RegParams.pDutyCycleTimer->lastTimerValue;
    7540:	1a51      	subs	r1, r2, r1
    7542:	4b2b      	ldr	r3, [pc, #172]	; (75f0 <DutyCycleCallback+0x210>)
    7544:	22ba      	movs	r2, #186	; 0xba
    7546:	32ff      	adds	r2, #255	; 0xff
    7548:	5499      	strb	r1, [r3, r2]
    754a:	0a0a      	lsrs	r2, r1, #8
    754c:	33ba      	adds	r3, #186	; 0xba
    754e:	33ff      	adds	r3, #255	; 0xff
    7550:	705a      	strb	r2, [r3, #1]
    7552:	0c0a      	lsrs	r2, r1, #16
    7554:	709a      	strb	r2, [r3, #2]
    7556:	0e0a      	lsrs	r2, r1, #24
    7558:	70da      	strb	r2, [r3, #3]
		if(DutyCycleTimeout)
    755a:	2900      	cmp	r1, #0
    755c:	d10e      	bne.n	757c <DutyCycleCallback+0x19c>
    755e:	e009      	b.n	7574 <DutyCycleCallback+0x194>
		    RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = 0;
    7560:	4b23      	ldr	r3, [pc, #140]	; (75f0 <DutyCycleCallback+0x210>)
    7562:	2100      	movs	r1, #0
    7564:	22ba      	movs	r2, #186	; 0xba
    7566:	32ff      	adds	r2, #255	; 0xff
    7568:	5499      	strb	r1, [r3, r2]
    756a:	189b      	adds	r3, r3, r2
    756c:	2200      	movs	r2, #0
    756e:	705a      	strb	r2, [r3, #1]
    7570:	709a      	strb	r2, [r3, #2]
    7572:	70da      	strb	r2, [r3, #3]
    if ( found == 1 )
    7574:	9b04      	ldr	r3, [sp, #16]
    7576:	2b00      	cmp	r3, #0
    7578:	d02a      	beq.n	75d0 <DutyCycleCallback+0x1f0>
    757a:	2100      	movs	r1, #0
    757c:	9a03      	ldr	r2, [sp, #12]
    757e:	4291      	cmp	r1, r2
    7580:	d200      	bcs.n	7584 <DutyCycleCallback+0x1a4>
    7582:	0011      	movs	r1, r2
        RegParams.pDutyCycleTimer->lastTimerValue = nextTimer;
    7584:	4b1a      	ldr	r3, [pc, #104]	; (75f0 <DutyCycleCallback+0x210>)
    7586:	7c1a      	ldrb	r2, [r3, #16]
    7588:	7c58      	ldrb	r0, [r3, #17]
    758a:	0200      	lsls	r0, r0, #8
    758c:	4310      	orrs	r0, r2
    758e:	7c9a      	ldrb	r2, [r3, #18]
    7590:	0412      	lsls	r2, r2, #16
    7592:	4310      	orrs	r0, r2
    7594:	7cda      	ldrb	r2, [r3, #19]
    7596:	0612      	lsls	r2, r2, #24
    7598:	4302      	orrs	r2, r0
    759a:	7011      	strb	r1, [r2, #0]
    759c:	0a08      	lsrs	r0, r1, #8
    759e:	7050      	strb	r0, [r2, #1]
    75a0:	0c08      	lsrs	r0, r1, #16
    75a2:	7090      	strb	r0, [r2, #2]
    75a4:	0e08      	lsrs	r0, r1, #24
    75a6:	70d0      	strb	r0, [r2, #3]
		SwTimerStart (RegParams.pDutyCycleTimer->timerId, MS_TO_US(nextTimer), SW_TIMEOUT_RELATIVE, (void *)DutyCycleCallback, NULL);
    75a8:	22fa      	movs	r2, #250	; 0xfa
    75aa:	0092      	lsls	r2, r2, #2
    75ac:	4351      	muls	r1, r2
    75ae:	7c18      	ldrb	r0, [r3, #16]
    75b0:	7c5a      	ldrb	r2, [r3, #17]
    75b2:	0212      	lsls	r2, r2, #8
    75b4:	4310      	orrs	r0, r2
    75b6:	7c9a      	ldrb	r2, [r3, #18]
    75b8:	0412      	lsls	r2, r2, #16
    75ba:	4302      	orrs	r2, r0
    75bc:	7cdb      	ldrb	r3, [r3, #19]
    75be:	061b      	lsls	r3, r3, #24
    75c0:	4313      	orrs	r3, r2
    75c2:	7918      	ldrb	r0, [r3, #4]
    75c4:	2300      	movs	r3, #0
    75c6:	9300      	str	r3, [sp, #0]
    75c8:	4b0a      	ldr	r3, [pc, #40]	; (75f4 <DutyCycleCallback+0x214>)
    75ca:	2200      	movs	r2, #0
    75cc:	4c0a      	ldr	r4, [pc, #40]	; (75f8 <DutyCycleCallback+0x218>)
    75ce:	47a0      	blx	r4
}
    75d0:	b007      	add	sp, #28
    75d2:	bc3c      	pop	{r2, r3, r4, r5}
    75d4:	4690      	mov	r8, r2
    75d6:	4699      	mov	r9, r3
    75d8:	46a2      	mov	sl, r4
    75da:	46ab      	mov	fp, r5
    75dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (( DutyCycleTimeout != 0 ))
    75de:	9b05      	ldr	r3, [sp, #20]
    75e0:	2b00      	cmp	r3, #0
    75e2:	d0f5      	beq.n	75d0 <DutyCycleCallback+0x1f0>
    bool found = 0;
    75e4:	2300      	movs	r3, #0
    75e6:	9304      	str	r3, [sp, #16]
    uint32_t minimSubBandTimer = UINT32_MAX;
    75e8:	3b01      	subs	r3, #1
    75ea:	9303      	str	r3, [sp, #12]
    75ec:	e790      	b.n	7510 <DutyCycleCallback+0x130>
    75ee:	46c0      	nop			; (mov r8, r8)
    75f0:	20001220 	.word	0x20001220
    75f4:	000073e1 	.word	0x000073e1
    75f8:	00009b55 	.word	0x00009b55

000075fc <setLBTTimer>:
{
    75fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    75fe:	46de      	mov	lr, fp
    7600:	4657      	mov	r7, sl
    7602:	464e      	mov	r6, r9
    7604:	4645      	mov	r5, r8
    7606:	b5e0      	push	{r5, r6, r7, lr}
    7608:	b085      	sub	sp, #20
    i = RegParams.lastUsedChannelIndex;
    760a:	4a70      	ldr	r2, [pc, #448]	; (77cc <setLBTTimer+0x1d0>)
    760c:	232f      	movs	r3, #47	; 0x2f
	RegParams.cmnParams.paramsType2.channelTimer[i] = LBT_TRANSMIT_CHANNEL_PAUSE_DURATION;
    760e:	5cd4      	ldrb	r4, [r2, r3]
    7610:	0023      	movs	r3, r4
    7612:	3358      	adds	r3, #88	; 0x58
    7614:	009b      	lsls	r3, r3, #2
    7616:	18d3      	adds	r3, r2, r3
    7618:	2132      	movs	r1, #50	; 0x32
    761a:	7219      	strb	r1, [r3, #8]
    761c:	2100      	movs	r1, #0
    761e:	7259      	strb	r1, [r3, #9]
    7620:	7299      	strb	r1, [r3, #10]
    7622:	72d9      	strb	r1, [r3, #11]
	if(SwTimerIsRunning(pLBTTimer->timerId))
    7624:	23d6      	movs	r3, #214	; 0xd6
    7626:	005b      	lsls	r3, r3, #1
    7628:	5cd0      	ldrb	r0, [r2, r3]
    762a:	4b69      	ldr	r3, [pc, #420]	; (77d0 <setLBTTimer+0x1d4>)
    762c:	4798      	blx	r3
    762e:	2800      	cmp	r0, #0
    7630:	d12f      	bne.n	7692 <setLBTTimer+0x96>
		minim = RegParams.cmnParams.paramsType2.channelTimer[i];
    7632:	4866      	ldr	r0, [pc, #408]	; (77cc <setLBTTimer+0x1d0>)
    7634:	0023      	movs	r3, r4
    7636:	3358      	adds	r3, #88	; 0x58
    7638:	009b      	lsls	r3, r3, #2
    763a:	18c3      	adds	r3, r0, r3
    763c:	7a19      	ldrb	r1, [r3, #8]
    763e:	7a5a      	ldrb	r2, [r3, #9]
    7640:	0212      	lsls	r2, r2, #8
    7642:	4311      	orrs	r1, r2
    7644:	7a9a      	ldrb	r2, [r3, #10]
    7646:	0412      	lsls	r2, r2, #16
    7648:	430a      	orrs	r2, r1
    764a:	7ad9      	ldrb	r1, [r3, #11]
    764c:	0609      	lsls	r1, r1, #24
    764e:	4311      	orrs	r1, r2
    7650:	4689      	mov	r9, r1
	for(i = 0; i < RegParams.maxChannels; i++)
    7652:	232a      	movs	r3, #42	; 0x2a
    7654:	56c3      	ldrsb	r3, [r0, r3]
    7656:	4698      	mov	r8, r3
    7658:	2b00      	cmp	r3, #0
    765a:	dc00      	bgt.n	765e <setLBTTimer+0x62>
    765c:	e08b      	b.n	7776 <setLBTTimer+0x17a>
    uint32_t delta = 0, minim = UINT32_MAX, ticks;
    765e:	2300      	movs	r3, #0
    7660:	469a      	mov	sl, r3
		found = 1;
    7662:	3301      	adds	r3, #1
    7664:	9303      	str	r3, [sp, #12]
		if(i != RegParams.lastUsedChannelIndex)
    7666:	4a59      	ldr	r2, [pc, #356]	; (77cc <setLBTTimer+0x1d0>)
    7668:	232f      	movs	r3, #47	; 0x2f
    766a:	5cd0      	ldrb	r0, [r2, r3]
			if((RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    766c:	7911      	ldrb	r1, [r2, #4]
    766e:	7953      	ldrb	r3, [r2, #5]
    7670:	021b      	lsls	r3, r3, #8
    7672:	430b      	orrs	r3, r1
    7674:	7991      	ldrb	r1, [r2, #6]
    7676:	0409      	lsls	r1, r1, #16
    7678:	430b      	orrs	r3, r1
    767a:	79d1      	ldrb	r1, [r2, #7]
    767c:	0609      	lsls	r1, r1, #24
    767e:	4319      	orrs	r1, r3
    7680:	2600      	movs	r6, #0
    7682:	2200      	movs	r2, #0
					RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    7684:	2300      	movs	r3, #0
    7686:	469c      	mov	ip, r3
					RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - delta;
    7688:	4653      	mov	r3, sl
    768a:	9302      	str	r3, [sp, #8]
    768c:	468b      	mov	fp, r1
    768e:	4645      	mov	r5, r8
    7690:	e03b      	b.n	770a <setLBTTimer+0x10e>
		SwTimerStop(pLBTTimer->timerId);
    7692:	4c4e      	ldr	r4, [pc, #312]	; (77cc <setLBTTimer+0x1d0>)
    7694:	25d6      	movs	r5, #214	; 0xd6
    7696:	006d      	lsls	r5, r5, #1
    7698:	5d60      	ldrb	r0, [r4, r5]
    769a:	4b4e      	ldr	r3, [pc, #312]	; (77d4 <setLBTTimer+0x1d8>)
    769c:	4798      	blx	r3
		ticks = SwTimerReadValue(pLBTTimer->timerId);
    769e:	5d60      	ldrb	r0, [r4, r5]
    76a0:	4b4d      	ldr	r3, [pc, #308]	; (77d8 <setLBTTimer+0x1dc>)
    76a2:	4798      	blx	r3
	for(i = 0; i < RegParams.maxChannels; i++)
    76a4:	232a      	movs	r3, #42	; 0x2a
    76a6:	56e3      	ldrsb	r3, [r4, r3]
    76a8:	4698      	mov	r8, r3
    76aa:	2b00      	cmp	r3, #0
    76ac:	dd66      	ble.n	777c <setLBTTimer+0x180>
		delta = pLBTTimer->lastTimerValue - US_TO_MS(ticks);
    76ae:	4a47      	ldr	r2, [pc, #284]	; (77cc <setLBTTimer+0x1d0>)
    76b0:	23d4      	movs	r3, #212	; 0xd4
    76b2:	005b      	lsls	r3, r3, #1
    76b4:	5cd4      	ldrb	r4, [r2, r3]
    76b6:	23aa      	movs	r3, #170	; 0xaa
    76b8:	33ff      	adds	r3, #255	; 0xff
    76ba:	5cd3      	ldrb	r3, [r2, r3]
    76bc:	021b      	lsls	r3, r3, #8
    76be:	4323      	orrs	r3, r4
    76c0:	21d5      	movs	r1, #213	; 0xd5
    76c2:	0049      	lsls	r1, r1, #1
    76c4:	5c54      	ldrb	r4, [r2, r1]
    76c6:	0424      	lsls	r4, r4, #16
    76c8:	4323      	orrs	r3, r4
    76ca:	21ac      	movs	r1, #172	; 0xac
    76cc:	31ff      	adds	r1, #255	; 0xff
    76ce:	5c54      	ldrb	r4, [r2, r1]
    76d0:	0624      	lsls	r4, r4, #24
    76d2:	431c      	orrs	r4, r3
    76d4:	21fa      	movs	r1, #250	; 0xfa
    76d6:	0089      	lsls	r1, r1, #2
    76d8:	4b40      	ldr	r3, [pc, #256]	; (77dc <setLBTTimer+0x1e0>)
    76da:	4798      	blx	r3
    76dc:	1a23      	subs	r3, r4, r0
    76de:	469a      	mov	sl, r3
    uint32_t delta = 0, minim = UINT32_MAX, ticks;
    76e0:	2301      	movs	r3, #1
    76e2:	425b      	negs	r3, r3
    76e4:	4699      	mov	r9, r3
    bool found = 0;
    76e6:	2300      	movs	r3, #0
    76e8:	9303      	str	r3, [sp, #12]
    76ea:	e7bc      	b.n	7666 <setLBTTimer+0x6a>
					RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    76ec:	3658      	adds	r6, #88	; 0x58
    76ee:	00b6      	lsls	r6, r6, #2
    76f0:	4b36      	ldr	r3, [pc, #216]	; (77cc <setLBTTimer+0x1d0>)
    76f2:	4698      	mov	r8, r3
    76f4:	4446      	add	r6, r8
    76f6:	4663      	mov	r3, ip
    76f8:	7233      	strb	r3, [r6, #8]
    76fa:	7273      	strb	r3, [r6, #9]
    76fc:	72b3      	strb	r3, [r6, #10]
    76fe:	72f3      	strb	r3, [r6, #11]
	for(i = 0; i < RegParams.maxChannels; i++)
    7700:	3201      	adds	r2, #1
    7702:	b2d2      	uxtb	r2, r2
    7704:	0016      	movs	r6, r2
    7706:	42aa      	cmp	r2, r5
    7708:	da32      	bge.n	7770 <setLBTTimer+0x174>
		if(i != RegParams.lastUsedChannelIndex)
    770a:	4290      	cmp	r0, r2
    770c:	d0f8      	beq.n	7700 <setLBTTimer+0x104>
			if((RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    770e:	0053      	lsls	r3, r2, #1
    7710:	4659      	mov	r1, fp
    7712:	5c5c      	ldrb	r4, [r3, r1]
    7714:	2c00      	cmp	r4, #0
    7716:	d0f3      	beq.n	7700 <setLBTTimer+0x104>
    7718:	0033      	movs	r3, r6
    771a:	3358      	adds	r3, #88	; 0x58
    771c:	009b      	lsls	r3, r3, #2
    771e:	4f2b      	ldr	r7, [pc, #172]	; (77cc <setLBTTimer+0x1d0>)
    7720:	46b8      	mov	r8, r7
    7722:	4443      	add	r3, r8
    7724:	7a1f      	ldrb	r7, [r3, #8]
    7726:	46ba      	mov	sl, r7
    7728:	7a5f      	ldrb	r7, [r3, #9]
    772a:	023f      	lsls	r7, r7, #8
    772c:	46b8      	mov	r8, r7
    772e:	4657      	mov	r7, sl
    7730:	4641      	mov	r1, r8
    7732:	430f      	orrs	r7, r1
    7734:	7a99      	ldrb	r1, [r3, #10]
    7736:	0409      	lsls	r1, r1, #16
    7738:	430f      	orrs	r7, r1
    773a:	7adb      	ldrb	r3, [r3, #11]
    773c:	061b      	lsls	r3, r3, #24
    773e:	433b      	orrs	r3, r7
    7740:	d0de      	beq.n	7700 <setLBTTimer+0x104>
				if(RegParams.cmnParams.paramsType2.channelTimer[i] > delta)
    7742:	9f02      	ldr	r7, [sp, #8]
    7744:	42bb      	cmp	r3, r7
    7746:	d9d1      	bls.n	76ec <setLBTTimer+0xf0>
					RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - delta;
    7748:	1bdb      	subs	r3, r3, r7
    774a:	3658      	adds	r6, #88	; 0x58
    774c:	00b6      	lsls	r6, r6, #2
    774e:	491f      	ldr	r1, [pc, #124]	; (77cc <setLBTTimer+0x1d0>)
    7750:	4688      	mov	r8, r1
    7752:	4446      	add	r6, r8
    7754:	7233      	strb	r3, [r6, #8]
    7756:	0a19      	lsrs	r1, r3, #8
    7758:	7271      	strb	r1, [r6, #9]
    775a:	0c19      	lsrs	r1, r3, #16
    775c:	72b1      	strb	r1, [r6, #10]
    775e:	0e19      	lsrs	r1, r3, #24
    7760:	72f1      	strb	r1, [r6, #11]
				if((RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    7762:	454b      	cmp	r3, r9
    7764:	d8cc      	bhi.n	7700 <setLBTTimer+0x104>
    7766:	2b00      	cmp	r3, #0
    7768:	d0ca      	beq.n	7700 <setLBTTimer+0x104>
    776a:	4699      	mov	r9, r3
					found = 1;
    776c:	9403      	str	r4, [sp, #12]
    776e:	e7c7      	b.n	7700 <setLBTTimer+0x104>
	if((found == 1) && minim)
    7770:	9b03      	ldr	r3, [sp, #12]
    7772:	2b00      	cmp	r3, #0
    7774:	d002      	beq.n	777c <setLBTTimer+0x180>
    7776:	464b      	mov	r3, r9
    7778:	2b00      	cmp	r3, #0
    777a:	d107      	bne.n	778c <setLBTTimer+0x190>
}
    777c:	2008      	movs	r0, #8
    777e:	b005      	add	sp, #20
    7780:	bc3c      	pop	{r2, r3, r4, r5}
    7782:	4690      	mov	r8, r2
    7784:	4699      	mov	r9, r3
    7786:	46a2      	mov	sl, r4
    7788:	46ab      	mov	fp, r5
    778a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pLBTTimer->lastTimerValue = minim;
    778c:	4b0f      	ldr	r3, [pc, #60]	; (77cc <setLBTTimer+0x1d0>)
    778e:	22d4      	movs	r2, #212	; 0xd4
    7790:	0052      	lsls	r2, r2, #1
    7792:	4649      	mov	r1, r9
    7794:	5499      	strb	r1, [r3, r2]
    7796:	464a      	mov	r2, r9
    7798:	0a11      	lsrs	r1, r2, #8
    779a:	001a      	movs	r2, r3
    779c:	32a9      	adds	r2, #169	; 0xa9
    779e:	32ff      	adds	r2, #255	; 0xff
    77a0:	7051      	strb	r1, [r2, #1]
    77a2:	4649      	mov	r1, r9
    77a4:	0c09      	lsrs	r1, r1, #16
    77a6:	7091      	strb	r1, [r2, #2]
    77a8:	4649      	mov	r1, r9
    77aa:	0e09      	lsrs	r1, r1, #24
    77ac:	70d1      	strb	r1, [r2, #3]
		SwTimerStart (pLBTTimer->timerId, MS_TO_US(minim), SW_TIMEOUT_RELATIVE, (void *)LBTChannelPauseCallback, NULL);
    77ae:	21fa      	movs	r1, #250	; 0xfa
    77b0:	0089      	lsls	r1, r1, #2
    77b2:	464a      	mov	r2, r9
    77b4:	4351      	muls	r1, r2
    77b6:	22d6      	movs	r2, #214	; 0xd6
    77b8:	0052      	lsls	r2, r2, #1
    77ba:	5c98      	ldrb	r0, [r3, r2]
    77bc:	2300      	movs	r3, #0
    77be:	9300      	str	r3, [sp, #0]
    77c0:	4b07      	ldr	r3, [pc, #28]	; (77e0 <setLBTTimer+0x1e4>)
    77c2:	2200      	movs	r2, #0
    77c4:	4c07      	ldr	r4, [pc, #28]	; (77e4 <setLBTTimer+0x1e8>)
    77c6:	47a0      	blx	r4
    77c8:	e7d8      	b.n	777c <setLBTTimer+0x180>
    77ca:	46c0      	nop			; (mov r8, r8)
    77cc:	20001220 	.word	0x20001220
    77d0:	00009ced 	.word	0x00009ced
    77d4:	00009e61 	.word	0x00009e61
    77d8:	00009d01 	.word	0x00009d01
    77dc:	00011a09 	.word	0x00011a09
    77e0:	000077e9 	.word	0x000077e9
    77e4:	00009b55 	.word	0x00009b55

000077e8 <LBTChannelPauseCallback>:
{
    77e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    77ea:	46de      	mov	lr, fp
    77ec:	4657      	mov	r7, sl
    77ee:	464e      	mov	r6, r9
    77f0:	4645      	mov	r5, r8
    77f2:	b5e0      	push	{r5, r6, r7, lr}
    77f4:	b085      	sub	sp, #20
    for (i=0; i < RegParams.maxChannels; i++)
    77f6:	232a      	movs	r3, #42	; 0x2a
    77f8:	4a49      	ldr	r2, [pc, #292]	; (7920 <LBTChannelPauseCallback+0x138>)
    77fa:	56d6      	ldrsb	r6, [r2, r3]
    77fc:	2e00      	cmp	r6, #0
    77fe:	dd68      	ble.n	78d2 <LBTChannelPauseCallback+0xea>
        if ((RegParams.pChParams[i].status == ENABLED) && ( RegParams.cmnParams.paramsType2.channelTimer[i] != 0 ))
    7800:	0013      	movs	r3, r2
    7802:	7915      	ldrb	r5, [r2, #4]
    7804:	7952      	ldrb	r2, [r2, #5]
    7806:	0212      	lsls	r2, r2, #8
    7808:	432a      	orrs	r2, r5
    780a:	799d      	ldrb	r5, [r3, #6]
    780c:	042d      	lsls	r5, r5, #16
    780e:	432a      	orrs	r2, r5
    7810:	79dd      	ldrb	r5, [r3, #7]
    7812:	062d      	lsls	r5, r5, #24
    7814:	4315      	orrs	r5, r2
            if ( RegParams.cmnParams.paramsType2.channelTimer[i] > pLBTTimer->lastTimerValue)
    7816:	22d4      	movs	r2, #212	; 0xd4
    7818:	0052      	lsls	r2, r2, #1
    781a:	5c9f      	ldrb	r7, [r3, r2]
    781c:	22aa      	movs	r2, #170	; 0xaa
    781e:	32ff      	adds	r2, #255	; 0xff
    7820:	5c9a      	ldrb	r2, [r3, r2]
    7822:	0212      	lsls	r2, r2, #8
    7824:	433a      	orrs	r2, r7
    7826:	21d5      	movs	r1, #213	; 0xd5
    7828:	0049      	lsls	r1, r1, #1
    782a:	5c5f      	ldrb	r7, [r3, r1]
    782c:	043f      	lsls	r7, r7, #16
    782e:	433a      	orrs	r2, r7
    7830:	21ac      	movs	r1, #172	; 0xac
    7832:	31ff      	adds	r1, #255	; 0xff
    7834:	5c5f      	ldrb	r7, [r3, r1]
    7836:	063f      	lsls	r7, r7, #24
    7838:	4317      	orrs	r7, r2
    783a:	9703      	str	r7, [sp, #12]
    783c:	2000      	movs	r0, #0
    783e:	2300      	movs	r3, #0
    7840:	2200      	movs	r2, #0
    7842:	4691      	mov	r9, r2
    7844:	3a01      	subs	r2, #1
    7846:	4690      	mov	r8, r2
                RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    7848:	2200      	movs	r2, #0
    784a:	4694      	mov	ip, r2
    784c:	e00e      	b.n	786c <LBTChannelPauseCallback+0x84>
    784e:	3058      	adds	r0, #88	; 0x58
    7850:	0080      	lsls	r0, r0, #2
    7852:	4a33      	ldr	r2, [pc, #204]	; (7920 <LBTChannelPauseCallback+0x138>)
    7854:	4692      	mov	sl, r2
    7856:	4450      	add	r0, sl
    7858:	4662      	mov	r2, ip
    785a:	7202      	strb	r2, [r0, #8]
    785c:	7242      	strb	r2, [r0, #9]
    785e:	7282      	strb	r2, [r0, #10]
    7860:	72c2      	strb	r2, [r0, #11]
    for (i=0; i < RegParams.maxChannels; i++)
    7862:	3301      	adds	r3, #1
    7864:	b2db      	uxtb	r3, r3
    7866:	0018      	movs	r0, r3
    7868:	42b3      	cmp	r3, r6
    786a:	da2f      	bge.n	78cc <LBTChannelPauseCallback+0xe4>
        if ((RegParams.pChParams[i].status == ENABLED) && ( RegParams.cmnParams.paramsType2.channelTimer[i] != 0 ))
    786c:	005a      	lsls	r2, r3, #1
    786e:	5d54      	ldrb	r4, [r2, r5]
    7870:	2c00      	cmp	r4, #0
    7872:	d0f6      	beq.n	7862 <LBTChannelPauseCallback+0x7a>
    7874:	0002      	movs	r2, r0
    7876:	3258      	adds	r2, #88	; 0x58
    7878:	0092      	lsls	r2, r2, #2
    787a:	4929      	ldr	r1, [pc, #164]	; (7920 <LBTChannelPauseCallback+0x138>)
    787c:	468a      	mov	sl, r1
    787e:	4452      	add	r2, sl
    7880:	7a17      	ldrb	r7, [r2, #8]
    7882:	46bb      	mov	fp, r7
    7884:	7a57      	ldrb	r7, [r2, #9]
    7886:	023f      	lsls	r7, r7, #8
    7888:	46ba      	mov	sl, r7
    788a:	465f      	mov	r7, fp
    788c:	4651      	mov	r1, sl
    788e:	430f      	orrs	r7, r1
    7890:	7a91      	ldrb	r1, [r2, #10]
    7892:	0409      	lsls	r1, r1, #16
    7894:	430f      	orrs	r7, r1
    7896:	7ad2      	ldrb	r2, [r2, #11]
    7898:	0612      	lsls	r2, r2, #24
    789a:	433a      	orrs	r2, r7
    789c:	d0e1      	beq.n	7862 <LBTChannelPauseCallback+0x7a>
            if ( RegParams.cmnParams.paramsType2.channelTimer[i] > pLBTTimer->lastTimerValue)
    789e:	9f03      	ldr	r7, [sp, #12]
    78a0:	42ba      	cmp	r2, r7
    78a2:	d9d4      	bls.n	784e <LBTChannelPauseCallback+0x66>
                RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - pLBTTimer->lastTimerValue;
    78a4:	1bd2      	subs	r2, r2, r7
    78a6:	3058      	adds	r0, #88	; 0x58
    78a8:	0080      	lsls	r0, r0, #2
    78aa:	491d      	ldr	r1, [pc, #116]	; (7920 <LBTChannelPauseCallback+0x138>)
    78ac:	468a      	mov	sl, r1
    78ae:	4450      	add	r0, sl
    78b0:	7202      	strb	r2, [r0, #8]
    78b2:	0a11      	lsrs	r1, r2, #8
    78b4:	7241      	strb	r1, [r0, #9]
    78b6:	0c11      	lsrs	r1, r2, #16
    78b8:	7281      	strb	r1, [r0, #10]
    78ba:	0e11      	lsrs	r1, r2, #24
    78bc:	72c1      	strb	r1, [r0, #11]
            if ( (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) )
    78be:	4542      	cmp	r2, r8
    78c0:	d8cf      	bhi.n	7862 <LBTChannelPauseCallback+0x7a>
    78c2:	2a00      	cmp	r2, #0
    78c4:	d0cd      	beq.n	7862 <LBTChannelPauseCallback+0x7a>
                found = 1;
    78c6:	46a1      	mov	r9, r4
            if ( (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) )
    78c8:	4690      	mov	r8, r2
    78ca:	e7ca      	b.n	7862 <LBTChannelPauseCallback+0x7a>
    if ( found == 1 )
    78cc:	464b      	mov	r3, r9
    78ce:	2b00      	cmp	r3, #0
    78d0:	d106      	bne.n	78e0 <LBTChannelPauseCallback+0xf8>
}
    78d2:	b005      	add	sp, #20
    78d4:	bc3c      	pop	{r2, r3, r4, r5}
    78d6:	4690      	mov	r8, r2
    78d8:	4699      	mov	r9, r3
    78da:	46a2      	mov	sl, r4
    78dc:	46ab      	mov	fp, r5
    78de:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pLBTTimer->lastTimerValue = minim;
    78e0:	4b0f      	ldr	r3, [pc, #60]	; (7920 <LBTChannelPauseCallback+0x138>)
    78e2:	22d4      	movs	r2, #212	; 0xd4
    78e4:	0052      	lsls	r2, r2, #1
    78e6:	4641      	mov	r1, r8
    78e8:	5499      	strb	r1, [r3, r2]
    78ea:	4642      	mov	r2, r8
    78ec:	0a11      	lsrs	r1, r2, #8
    78ee:	001a      	movs	r2, r3
    78f0:	32a9      	adds	r2, #169	; 0xa9
    78f2:	32ff      	adds	r2, #255	; 0xff
    78f4:	7051      	strb	r1, [r2, #1]
    78f6:	4641      	mov	r1, r8
    78f8:	0c09      	lsrs	r1, r1, #16
    78fa:	7091      	strb	r1, [r2, #2]
    78fc:	4641      	mov	r1, r8
    78fe:	0e09      	lsrs	r1, r1, #24
    7900:	70d1      	strb	r1, [r2, #3]
        SwTimerStart (pLBTTimer->timerId, MS_TO_US(minim), SW_TIMEOUT_RELATIVE, (void *)LBTChannelPauseCallback, NULL);
    7902:	21fa      	movs	r1, #250	; 0xfa
    7904:	0089      	lsls	r1, r1, #2
    7906:	4642      	mov	r2, r8
    7908:	4351      	muls	r1, r2
    790a:	22d6      	movs	r2, #214	; 0xd6
    790c:	0052      	lsls	r2, r2, #1
    790e:	5c98      	ldrb	r0, [r3, r2]
    7910:	2300      	movs	r3, #0
    7912:	9300      	str	r3, [sp, #0]
    7914:	4b03      	ldr	r3, [pc, #12]	; (7924 <LBTChannelPauseCallback+0x13c>)
    7916:	2200      	movs	r2, #0
    7918:	4c03      	ldr	r4, [pc, #12]	; (7928 <LBTChannelPauseCallback+0x140>)
    791a:	47a0      	blx	r4
}
    791c:	e7d9      	b.n	78d2 <LBTChannelPauseCallback+0xea>
    791e:	46c0      	nop			; (mov r8, r8)
    7920:	20001220 	.word	0x20001220
    7924:	000077e9 	.word	0x000077e9
    7928:	00009b55 	.word	0x00009b55

0000792c <JoinDutyCycleCallback>:
{   
    792c:	b510      	push	{r4, lr}
    792e:	b082      	sub	sp, #8
	if(RegParams.pJoinDutyCycleTimer->remainingtime!=0)
    7930:	492e      	ldr	r1, [pc, #184]	; (79ec <JoinDutyCycleCallback+0xc0>)
    7932:	7d0b      	ldrb	r3, [r1, #20]
    7934:	7d4a      	ldrb	r2, [r1, #21]
    7936:	0212      	lsls	r2, r2, #8
    7938:	431a      	orrs	r2, r3
    793a:	7d8b      	ldrb	r3, [r1, #22]
    793c:	041b      	lsls	r3, r3, #16
    793e:	431a      	orrs	r2, r3
    7940:	7dcb      	ldrb	r3, [r1, #23]
    7942:	061b      	lsls	r3, r3, #24
    7944:	4313      	orrs	r3, r2
    7946:	7919      	ldrb	r1, [r3, #4]
    7948:	795a      	ldrb	r2, [r3, #5]
    794a:	0212      	lsls	r2, r2, #8
    794c:	430a      	orrs	r2, r1
    794e:	7999      	ldrb	r1, [r3, #6]
    7950:	0409      	lsls	r1, r1, #16
    7952:	430a      	orrs	r2, r1
    7954:	79d9      	ldrb	r1, [r3, #7]
    7956:	0609      	lsls	r1, r1, #24
    7958:	4311      	orrs	r1, r2
    795a:	d03c      	beq.n	79d6 <JoinDutyCycleCallback+0xaa>
		if(RegParams.pJoinDutyCycleTimer->remainingtime>US_TO_MS(SWTIMER_MAX_TIMEOUT))
    795c:	4a24      	ldr	r2, [pc, #144]	; (79f0 <JoinDutyCycleCallback+0xc4>)
    795e:	4291      	cmp	r1, r2
    7960:	d91e      	bls.n	79a0 <JoinDutyCycleCallback+0x74>
			RegParams.pJoinDutyCycleTimer->remainingtime = RegParams.pJoinDutyCycleTimer->remainingtime-(US_TO_MS(SWTIMER_MAX_TIMEOUT));
    7962:	4a24      	ldr	r2, [pc, #144]	; (79f4 <JoinDutyCycleCallback+0xc8>)
    7964:	4694      	mov	ip, r2
    7966:	4461      	add	r1, ip
    7968:	7119      	strb	r1, [r3, #4]
    796a:	0a0a      	lsrs	r2, r1, #8
    796c:	715a      	strb	r2, [r3, #5]
    796e:	0c0a      	lsrs	r2, r1, #16
    7970:	719a      	strb	r2, [r3, #6]
    7972:	0e09      	lsrs	r1, r1, #24
    7974:	71d9      	strb	r1, [r3, #7]
			SwTimerStart(RegParams.pJoinDutyCycleTimer->timerId, SWTIMER_MAX_TIMEOUT, SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    7976:	491d      	ldr	r1, [pc, #116]	; (79ec <JoinDutyCycleCallback+0xc0>)
    7978:	7d0b      	ldrb	r3, [r1, #20]
    797a:	7d4a      	ldrb	r2, [r1, #21]
    797c:	0212      	lsls	r2, r2, #8
    797e:	431a      	orrs	r2, r3
    7980:	7d8b      	ldrb	r3, [r1, #22]
    7982:	041b      	lsls	r3, r3, #16
    7984:	431a      	orrs	r2, r3
    7986:	7dcb      	ldrb	r3, [r1, #23]
    7988:	061b      	lsls	r3, r3, #24
    798a:	4313      	orrs	r3, r2
    798c:	7a18      	ldrb	r0, [r3, #8]
    798e:	2300      	movs	r3, #0
    7990:	9300      	str	r3, [sp, #0]
    7992:	4b19      	ldr	r3, [pc, #100]	; (79f8 <JoinDutyCycleCallback+0xcc>)
    7994:	2200      	movs	r2, #0
    7996:	4919      	ldr	r1, [pc, #100]	; (79fc <JoinDutyCycleCallback+0xd0>)
    7998:	4c19      	ldr	r4, [pc, #100]	; (7a00 <JoinDutyCycleCallback+0xd4>)
    799a:	47a0      	blx	r4
}
    799c:	b002      	add	sp, #8
    799e:	bd10      	pop	{r4, pc}
			SwTimerStart(RegParams.pJoinDutyCycleTimer->timerId, MS_TO_US(RegParams.pJoinDutyCycleTimer->remainingtime), SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    79a0:	22fa      	movs	r2, #250	; 0xfa
    79a2:	0092      	lsls	r2, r2, #2
    79a4:	4351      	muls	r1, r2
    79a6:	7a18      	ldrb	r0, [r3, #8]
    79a8:	2300      	movs	r3, #0
    79aa:	9300      	str	r3, [sp, #0]
    79ac:	4b12      	ldr	r3, [pc, #72]	; (79f8 <JoinDutyCycleCallback+0xcc>)
    79ae:	2200      	movs	r2, #0
    79b0:	4c13      	ldr	r4, [pc, #76]	; (7a00 <JoinDutyCycleCallback+0xd4>)
    79b2:	47a0      	blx	r4
			RegParams.pJoinDutyCycleTimer->remainingtime =0;
    79b4:	490d      	ldr	r1, [pc, #52]	; (79ec <JoinDutyCycleCallback+0xc0>)
    79b6:	7d0b      	ldrb	r3, [r1, #20]
    79b8:	7d4a      	ldrb	r2, [r1, #21]
    79ba:	0212      	lsls	r2, r2, #8
    79bc:	431a      	orrs	r2, r3
    79be:	7d8b      	ldrb	r3, [r1, #22]
    79c0:	041b      	lsls	r3, r3, #16
    79c2:	431a      	orrs	r2, r3
    79c4:	7dcb      	ldrb	r3, [r1, #23]
    79c6:	061b      	lsls	r3, r3, #24
    79c8:	4313      	orrs	r3, r2
    79ca:	2200      	movs	r2, #0
    79cc:	711a      	strb	r2, [r3, #4]
    79ce:	715a      	strb	r2, [r3, #5]
    79d0:	719a      	strb	r2, [r3, #6]
    79d2:	71da      	strb	r2, [r3, #7]
    79d4:	e7e2      	b.n	799c <JoinDutyCycleCallback+0x70>
	SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    79d6:	7a18      	ldrb	r0, [r3, #8]
    79d8:	4b0a      	ldr	r3, [pc, #40]	; (7a04 <JoinDutyCycleCallback+0xd8>)
    79da:	4798      	blx	r3
	RegParams.joinDutyCycleTimeout = 0;
    79dc:	4b03      	ldr	r3, [pc, #12]	; (79ec <JoinDutyCycleCallback+0xc0>)
    79de:	333e      	adds	r3, #62	; 0x3e
    79e0:	2200      	movs	r2, #0
    79e2:	701a      	strb	r2, [r3, #0]
    79e4:	705a      	strb	r2, [r3, #1]
    79e6:	709a      	strb	r2, [r3, #2]
    79e8:	70da      	strb	r2, [r3, #3]
}
    79ea:	e7d7      	b.n	799c <JoinDutyCycleCallback+0x70>
    79ec:	20001220 	.word	0x20001220
    79f0:	0020c49b 	.word	0x0020c49b
    79f4:	ffdf3b65 	.word	0xffdf3b65
    79f8:	0000792d 	.word	0x0000792d
    79fc:	7fffffff 	.word	0x7fffffff
    7a00:	00009b55 	.word	0x00009b55
    7a04:	00009e61 	.word	0x00009e61

00007a08 <JoinBackoffCallback>:
{
    7a08:	b510      	push	{r4, lr}
    7a0a:	b082      	sub	sp, #8
	RegParams.joinbccount ++;
    7a0c:	4b0c      	ldr	r3, [pc, #48]	; (7a40 <JoinBackoffCallback+0x38>)
    7a0e:	2142      	movs	r1, #66	; 0x42
    7a10:	5c5a      	ldrb	r2, [r3, r1]
    7a12:	3201      	adds	r2, #1
    7a14:	545a      	strb	r2, [r3, r1]
	SwTimerStart (RegParams.pJoinBackoffTimer->timerId, MS_TO_US(BACKOFF_BASE_TIME_IN_MS), SW_TIMEOUT_RELATIVE, (void *)JoinBackoffCallback, NULL);
    7a16:	7e19      	ldrb	r1, [r3, #24]
    7a18:	7e5a      	ldrb	r2, [r3, #25]
    7a1a:	0212      	lsls	r2, r2, #8
    7a1c:	4311      	orrs	r1, r2
    7a1e:	7e9a      	ldrb	r2, [r3, #26]
    7a20:	0412      	lsls	r2, r2, #16
    7a22:	430a      	orrs	r2, r1
    7a24:	7edb      	ldrb	r3, [r3, #27]
    7a26:	061b      	lsls	r3, r3, #24
    7a28:	4313      	orrs	r3, r2
    7a2a:	7818      	ldrb	r0, [r3, #0]
    7a2c:	2300      	movs	r3, #0
    7a2e:	9300      	str	r3, [sp, #0]
    7a30:	4b04      	ldr	r3, [pc, #16]	; (7a44 <JoinBackoffCallback+0x3c>)
    7a32:	2200      	movs	r2, #0
    7a34:	4904      	ldr	r1, [pc, #16]	; (7a48 <JoinBackoffCallback+0x40>)
    7a36:	4c05      	ldr	r4, [pc, #20]	; (7a4c <JoinBackoffCallback+0x44>)
    7a38:	47a0      	blx	r4
}
    7a3a:	b002      	add	sp, #8
    7a3c:	bd10      	pop	{r4, pc}
    7a3e:	46c0      	nop			; (mov r8, r8)
    7a40:	20001220 	.word	0x20001220
    7a44:	00007a09 	.word	0x00007a09
    7a48:	6b49d200 	.word	0x6b49d200
    7a4c:	00009b55 	.word	0x00009b55

00007a50 <ValidateDataRangeT2>:
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    7a50:	784a      	ldrb	r2, [r1, #1]
	dataRateMin = val_drange.dataRangeNew & LAST_NIBBLE;
    7a52:	230f      	movs	r3, #15
    7a54:	4013      	ands	r3, r2
    if ( dataRate > RegParams.minDataRate )
    7a56:	2124      	movs	r1, #36	; 0x24
    7a58:	4807      	ldr	r0, [pc, #28]	; (7a78 <ValidateDataRangeT2+0x28>)
    7a5a:	5c41      	ldrb	r1, [r0, r1]
		retVal = LORAWAN_INVALID_PARAMETER;
    7a5c:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    7a5e:	428b      	cmp	r3, r1
    7a60:	d900      	bls.n	7a64 <ValidateDataRangeT2+0x14>
}
    7a62:	4770      	bx	lr
	dataRateMax = (val_drange.dataRangeNew & FIRST_NIBBLE) >> SHIFT4;
    7a64:	0912      	lsrs	r2, r2, #4
		retVal = LORAWAN_INVALID_PARAMETER;
    7a66:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    7a68:	428a      	cmp	r2, r1
    7a6a:	d8fa      	bhi.n	7a62 <ValidateDataRangeT2+0x12>
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    7a6c:	3802      	subs	r0, #2
	   || (dataRateMax < dataRateMin) )
    7a6e:	4293      	cmp	r3, r2
    7a70:	d9f7      	bls.n	7a62 <ValidateDataRangeT2+0x12>
		retVal = LORAWAN_INVALID_PARAMETER;
    7a72:	3002      	adds	r0, #2
	return retVal;
    7a74:	e7f5      	b.n	7a62 <ValidateDataRangeT2+0x12>
    7a76:	46c0      	nop			; (mov r8, r8)
    7a78:	20001220 	.word	0x20001220

00007a7c <setDataRangeT2>:
{
    7a7c:	b530      	push	{r4, r5, lr}
    7a7e:	b083      	sub	sp, #12
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    7a80:	780c      	ldrb	r4, [r1, #0]
    7a82:	784d      	ldrb	r5, [r1, #1]
	val_chid.channelIndex = update_dr.channelIndex;
    7a84:	ab01      	add	r3, sp, #4
    7a86:	701c      	strb	r4, [r3, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    7a88:	2201      	movs	r2, #1
    7a8a:	705a      	strb	r2, [r3, #1]
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    7a8c:	2012      	movs	r0, #18
    7a8e:	4b18      	ldr	r3, [pc, #96]	; (7af0 <setDataRangeT2+0x74>)
    7a90:	4798      	blx	r3
		retVal = LORAWAN_INVALID_PARAMETER;
    7a92:	230a      	movs	r3, #10
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    7a94:	2808      	cmp	r0, #8
    7a96:	d002      	beq.n	7a9e <setDataRangeT2+0x22>
}
    7a98:	0018      	movs	r0, r3
    7a9a:	b003      	add	sp, #12
    7a9c:	bd30      	pop	{r4, r5, pc}
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    7a9e:	a901      	add	r1, sp, #4
    7aa0:	300d      	adds	r0, #13
    7aa2:	4b14      	ldr	r3, [pc, #80]	; (7af4 <setDataRangeT2+0x78>)
    7aa4:	4798      	blx	r3
    7aa6:	0003      	movs	r3, r0
    7aa8:	2808      	cmp	r0, #8
    7aaa:	d001      	beq.n	7ab0 <setDataRangeT2+0x34>
		retVal = LORAWAN_INVALID_PARAMETER;
    7aac:	230a      	movs	r3, #10
    7aae:	e7f3      	b.n	7a98 <setDataRangeT2+0x1c>
		RegParams.pChParams[update_dr.channelIndex].dataRange.value = update_dr.dataRangeNew;
    7ab0:	4911      	ldr	r1, [pc, #68]	; (7af8 <setDataRangeT2+0x7c>)
    7ab2:	790a      	ldrb	r2, [r1, #4]
    7ab4:	7948      	ldrb	r0, [r1, #5]
    7ab6:	0200      	lsls	r0, r0, #8
    7ab8:	4310      	orrs	r0, r2
    7aba:	798a      	ldrb	r2, [r1, #6]
    7abc:	0412      	lsls	r2, r2, #16
    7abe:	4310      	orrs	r0, r2
    7ac0:	79ca      	ldrb	r2, [r1, #7]
    7ac2:	0612      	lsls	r2, r2, #24
    7ac4:	4302      	orrs	r2, r0
    7ac6:	0060      	lsls	r0, r4, #1
    7ac8:	1882      	adds	r2, r0, r2
    7aca:	7055      	strb	r5, [r2, #1]
		RegParams.pOtherChParams[update_dr.channelIndex].parametersDefined |= DATA_RANGE_DEFINED;
    7acc:	7a0a      	ldrb	r2, [r1, #8]
    7ace:	7a4d      	ldrb	r5, [r1, #9]
    7ad0:	022d      	lsls	r5, r5, #8
    7ad2:	4315      	orrs	r5, r2
    7ad4:	7a8a      	ldrb	r2, [r1, #10]
    7ad6:	0412      	lsls	r2, r2, #16
    7ad8:	4315      	orrs	r5, r2
    7ada:	7aca      	ldrb	r2, [r1, #11]
    7adc:	0612      	lsls	r2, r2, #24
    7ade:	432a      	orrs	r2, r5
    7ae0:	1904      	adds	r4, r0, r4
    7ae2:	00a4      	lsls	r4, r4, #2
    7ae4:	1914      	adds	r4, r2, r4
    7ae6:	7ae2      	ldrb	r2, [r4, #11]
    7ae8:	2102      	movs	r1, #2
    7aea:	430a      	orrs	r2, r1
    7aec:	72e2      	strb	r2, [r4, #11]
    7aee:	e7d3      	b.n	7a98 <setDataRangeT2+0x1c>
    7af0:	00007a51 	.word	0x00007a51
    7af4:	000055b9 	.word	0x000055b9
    7af8:	20001220 	.word	0x20001220

00007afc <LORAREG_GetAttr_MaxPayloadT3>:
{
    7afc:	b530      	push	{r4, r5, lr}
	dataRate = *(uint8_t *)attrInput;
    7afe:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    7b00:	2124      	movs	r1, #36	; 0x24
    7b02:	4816      	ldr	r0, [pc, #88]	; (7b5c <LORAREG_GetAttr_MaxPayloadT3+0x60>)
    7b04:	5c41      	ldrb	r1, [r0, r1]
		result =  LORAWAN_INVALID_PARAMETER;
    7b06:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    7b08:	4299      	cmp	r1, r3
    7b0a:	d215      	bcs.n	7b38 <LORAREG_GetAttr_MaxPayloadT3+0x3c>
	if(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1)
    7b0c:	21e1      	movs	r1, #225	; 0xe1
    7b0e:	0049      	lsls	r1, r1, #1
    7b10:	4c12      	ldr	r4, [pc, #72]	; (7b5c <LORAREG_GetAttr_MaxPayloadT3+0x60>)
    7b12:	5c61      	ldrb	r1, [r4, r1]
    7b14:	07c9      	lsls	r1, r1, #31
    7b16:	d411      	bmi.n	7b3c <LORAREG_GetAttr_MaxPayloadT3+0x40>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    7b18:	4d10      	ldr	r5, [pc, #64]	; (7b5c <LORAREG_GetAttr_MaxPayloadT3+0x60>)
    7b1a:	7829      	ldrb	r1, [r5, #0]
    7b1c:	786c      	ldrb	r4, [r5, #1]
    7b1e:	0224      	lsls	r4, r4, #8
    7b20:	430c      	orrs	r4, r1
    7b22:	78a9      	ldrb	r1, [r5, #2]
    7b24:	0409      	lsls	r1, r1, #16
    7b26:	430c      	orrs	r4, r1
    7b28:	78e9      	ldrb	r1, [r5, #3]
    7b2a:	0609      	lsls	r1, r1, #24
    7b2c:	4321      	orrs	r1, r4
    7b2e:	00db      	lsls	r3, r3, #3
    7b30:	185b      	adds	r3, r3, r1
    7b32:	789b      	ldrb	r3, [r3, #2]
    7b34:	7013      	strb	r3, [r2, #0]
}
    7b36:	bd30      	pop	{r4, r5, pc}
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7b38:	3802      	subs	r0, #2
    7b3a:	e7e7      	b.n	7b0c <LORAREG_GetAttr_MaxPayloadT3+0x10>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt1;
    7b3c:	0025      	movs	r5, r4
    7b3e:	7821      	ldrb	r1, [r4, #0]
    7b40:	7864      	ldrb	r4, [r4, #1]
    7b42:	0224      	lsls	r4, r4, #8
    7b44:	430c      	orrs	r4, r1
    7b46:	78a9      	ldrb	r1, [r5, #2]
    7b48:	0409      	lsls	r1, r1, #16
    7b4a:	430c      	orrs	r4, r1
    7b4c:	78e9      	ldrb	r1, [r5, #3]
    7b4e:	0609      	lsls	r1, r1, #24
    7b50:	4321      	orrs	r1, r4
    7b52:	00db      	lsls	r3, r3, #3
    7b54:	1859      	adds	r1, r3, r1
    7b56:	78cb      	ldrb	r3, [r1, #3]
    7b58:	7013      	strb	r3, [r2, #0]
    7b5a:	e7ec      	b.n	7b36 <LORAREG_GetAttr_MaxPayloadT3+0x3a>
    7b5c:	20001220 	.word	0x20001220

00007b60 <LORAREG_GetAttr_RxWindowSizeT2>:
{
    7b60:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    7b62:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    7b64:	2124      	movs	r1, #36	; 0x24
    7b66:	480d      	ldr	r0, [pc, #52]	; (7b9c <LORAREG_GetAttr_RxWindowSizeT2+0x3c>)
    7b68:	5c41      	ldrb	r1, [r0, r1]
		return LORAWAN_INVALID_PARAMETER;
    7b6a:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    7b6c:	4299      	cmp	r1, r3
    7b6e:	d200      	bcs.n	7b72 <LORAREG_GetAttr_RxWindowSizeT2+0x12>
}
    7b70:	bd10      	pop	{r4, pc}
		*(uint16_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowSize;
    7b72:	4c0a      	ldr	r4, [pc, #40]	; (7b9c <LORAREG_GetAttr_RxWindowSizeT2+0x3c>)
    7b74:	7821      	ldrb	r1, [r4, #0]
    7b76:	7860      	ldrb	r0, [r4, #1]
    7b78:	0200      	lsls	r0, r0, #8
    7b7a:	4308      	orrs	r0, r1
    7b7c:	78a1      	ldrb	r1, [r4, #2]
    7b7e:	0409      	lsls	r1, r1, #16
    7b80:	4308      	orrs	r0, r1
    7b82:	78e1      	ldrb	r1, [r4, #3]
    7b84:	0609      	lsls	r1, r1, #24
    7b86:	4301      	orrs	r1, r0
    7b88:	00db      	lsls	r3, r3, #3
    7b8a:	5c58      	ldrb	r0, [r3, r1]
    7b8c:	185b      	adds	r3, r3, r1
    7b8e:	785b      	ldrb	r3, [r3, #1]
    7b90:	021b      	lsls	r3, r3, #8
    7b92:	4303      	orrs	r3, r0
    7b94:	8013      	strh	r3, [r2, #0]
	return result;
    7b96:	2008      	movs	r0, #8
    7b98:	e7ea      	b.n	7b70 <LORAREG_GetAttr_RxWindowSizeT2+0x10>
    7b9a:	46c0      	nop			; (mov r8, r8)
    7b9c:	20001220 	.word	0x20001220

00007ba0 <LORAREG_GetAttr_RxWindowOffsetT2>:
{
    7ba0:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    7ba2:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    7ba4:	2124      	movs	r1, #36	; 0x24
    7ba6:	480c      	ldr	r0, [pc, #48]	; (7bd8 <LORAREG_GetAttr_RxWindowOffsetT2+0x38>)
    7ba8:	5c41      	ldrb	r1, [r0, r1]
		return LORAWAN_INVALID_PARAMETER;
    7baa:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    7bac:	4299      	cmp	r1, r3
    7bae:	d200      	bcs.n	7bb2 <LORAREG_GetAttr_RxWindowOffsetT2+0x12>
}
    7bb0:	bd10      	pop	{r4, pc}
		*(int8_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowOffset;
    7bb2:	4c09      	ldr	r4, [pc, #36]	; (7bd8 <LORAREG_GetAttr_RxWindowOffsetT2+0x38>)
    7bb4:	7821      	ldrb	r1, [r4, #0]
    7bb6:	7860      	ldrb	r0, [r4, #1]
    7bb8:	0200      	lsls	r0, r0, #8
    7bba:	4308      	orrs	r0, r1
    7bbc:	78a1      	ldrb	r1, [r4, #2]
    7bbe:	0409      	lsls	r1, r1, #16
    7bc0:	4308      	orrs	r0, r1
    7bc2:	78e1      	ldrb	r1, [r4, #3]
    7bc4:	0609      	lsls	r1, r1, #24
    7bc6:	4301      	orrs	r1, r0
    7bc8:	00db      	lsls	r3, r3, #3
    7bca:	185b      	adds	r3, r3, r1
    7bcc:	791b      	ldrb	r3, [r3, #4]
    7bce:	b25b      	sxtb	r3, r3
    7bd0:	7013      	strb	r3, [r2, #0]
	return result;
    7bd2:	2008      	movs	r0, #8
    7bd4:	e7ec      	b.n	7bb0 <LORAREG_GetAttr_RxWindowOffsetT2+0x10>
    7bd6:	46c0      	nop			; (mov r8, r8)
    7bd8:	20001220 	.word	0x20001220

00007bdc <LORAREG_GetAttr_MaxPayloadT2>:
{
    7bdc:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    7bde:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    7be0:	2124      	movs	r1, #36	; 0x24
    7be2:	480b      	ldr	r0, [pc, #44]	; (7c10 <LORAREG_GetAttr_MaxPayloadT2+0x34>)
    7be4:	5c41      	ldrb	r1, [r0, r1]
		result =  LORAWAN_INVALID_PARAMETER;
    7be6:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    7be8:	4299      	cmp	r1, r3
    7bea:	d200      	bcs.n	7bee <LORAREG_GetAttr_MaxPayloadT2+0x12>
}
    7bec:	bd10      	pop	{r4, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    7bee:	4c08      	ldr	r4, [pc, #32]	; (7c10 <LORAREG_GetAttr_MaxPayloadT2+0x34>)
    7bf0:	7821      	ldrb	r1, [r4, #0]
    7bf2:	7860      	ldrb	r0, [r4, #1]
    7bf4:	0200      	lsls	r0, r0, #8
    7bf6:	4308      	orrs	r0, r1
    7bf8:	78a1      	ldrb	r1, [r4, #2]
    7bfa:	0409      	lsls	r1, r1, #16
    7bfc:	4308      	orrs	r0, r1
    7bfe:	78e1      	ldrb	r1, [r4, #3]
    7c00:	0609      	lsls	r1, r1, #24
    7c02:	4301      	orrs	r1, r0
    7c04:	00db      	lsls	r3, r3, #3
    7c06:	185b      	adds	r3, r3, r1
    7c08:	789b      	ldrb	r3, [r3, #2]
    7c0a:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7c0c:	2008      	movs	r0, #8
	return result;
    7c0e:	e7ed      	b.n	7bec <LORAREG_GetAttr_MaxPayloadT2+0x10>
    7c10:	20001220 	.word	0x20001220

00007c14 <LORAREG_GetAttr_ModulationAttrT2>:
{
    7c14:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    7c16:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    7c18:	2124      	movs	r1, #36	; 0x24
    7c1a:	480b      	ldr	r0, [pc, #44]	; (7c48 <LORAREG_GetAttr_ModulationAttrT2+0x34>)
    7c1c:	5c41      	ldrb	r1, [r0, r1]
		result = LORAWAN_INVALID_PARAMETER;
    7c1e:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    7c20:	4299      	cmp	r1, r3
    7c22:	d200      	bcs.n	7c26 <LORAREG_GetAttr_ModulationAttrT2+0x12>
}
    7c24:	bd10      	pop	{r4, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].modulation;
    7c26:	4c08      	ldr	r4, [pc, #32]	; (7c48 <LORAREG_GetAttr_ModulationAttrT2+0x34>)
    7c28:	7821      	ldrb	r1, [r4, #0]
    7c2a:	7860      	ldrb	r0, [r4, #1]
    7c2c:	0200      	lsls	r0, r0, #8
    7c2e:	4308      	orrs	r0, r1
    7c30:	78a1      	ldrb	r1, [r4, #2]
    7c32:	0409      	lsls	r1, r1, #16
    7c34:	4308      	orrs	r0, r1
    7c36:	78e1      	ldrb	r1, [r4, #3]
    7c38:	0609      	lsls	r1, r1, #24
    7c3a:	4301      	orrs	r1, r0
    7c3c:	00db      	lsls	r3, r3, #3
    7c3e:	185b      	adds	r3, r3, r1
    7c40:	79db      	ldrb	r3, [r3, #7]
    7c42:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7c44:	2008      	movs	r0, #8
	return result;
    7c46:	e7ed      	b.n	7c24 <LORAREG_GetAttr_ModulationAttrT2+0x10>
    7c48:	20001220 	.word	0x20001220

00007c4c <LORAREG_GetAttr_BandwidthAttrT2>:
{
    7c4c:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    7c4e:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    7c50:	2124      	movs	r1, #36	; 0x24
    7c52:	480b      	ldr	r0, [pc, #44]	; (7c80 <LORAREG_GetAttr_BandwidthAttrT2+0x34>)
    7c54:	5c41      	ldrb	r1, [r0, r1]
		result = LORAWAN_INVALID_PARAMETER;
    7c56:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    7c58:	4299      	cmp	r1, r3
    7c5a:	d200      	bcs.n	7c5e <LORAREG_GetAttr_BandwidthAttrT2+0x12>
}
    7c5c:	bd10      	pop	{r4, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].bandwidth;
    7c5e:	4c08      	ldr	r4, [pc, #32]	; (7c80 <LORAREG_GetAttr_BandwidthAttrT2+0x34>)
    7c60:	7821      	ldrb	r1, [r4, #0]
    7c62:	7860      	ldrb	r0, [r4, #1]
    7c64:	0200      	lsls	r0, r0, #8
    7c66:	4308      	orrs	r0, r1
    7c68:	78a1      	ldrb	r1, [r4, #2]
    7c6a:	0409      	lsls	r1, r1, #16
    7c6c:	4308      	orrs	r0, r1
    7c6e:	78e1      	ldrb	r1, [r4, #3]
    7c70:	0609      	lsls	r1, r1, #24
    7c72:	4301      	orrs	r1, r0
    7c74:	00db      	lsls	r3, r3, #3
    7c76:	185b      	adds	r3, r3, r1
    7c78:	799b      	ldrb	r3, [r3, #6]
    7c7a:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7c7c:	2008      	movs	r0, #8
	return result;
    7c7e:	e7ed      	b.n	7c5c <LORAREG_GetAttr_BandwidthAttrT2+0x10>
    7c80:	20001220 	.word	0x20001220

00007c84 <LORAREG_GetAttr_SpreadFactorT2>:
{
    7c84:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    7c86:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    7c88:	2124      	movs	r1, #36	; 0x24
    7c8a:	480b      	ldr	r0, [pc, #44]	; (7cb8 <LORAREG_GetAttr_SpreadFactorT2+0x34>)
    7c8c:	5c41      	ldrb	r1, [r0, r1]
		result =  LORAWAN_INVALID_PARAMETER;
    7c8e:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    7c90:	4299      	cmp	r1, r3
    7c92:	d200      	bcs.n	7c96 <LORAREG_GetAttr_SpreadFactorT2+0x12>
}
    7c94:	bd10      	pop	{r4, pc}
		*(RadioDataRate_t *)attrOutput = RegParams.pDrParams[dataRate].spreadingFactor;
    7c96:	4c08      	ldr	r4, [pc, #32]	; (7cb8 <LORAREG_GetAttr_SpreadFactorT2+0x34>)
    7c98:	7821      	ldrb	r1, [r4, #0]
    7c9a:	7860      	ldrb	r0, [r4, #1]
    7c9c:	0200      	lsls	r0, r0, #8
    7c9e:	4308      	orrs	r0, r1
    7ca0:	78a1      	ldrb	r1, [r4, #2]
    7ca2:	0409      	lsls	r1, r1, #16
    7ca4:	4308      	orrs	r0, r1
    7ca6:	78e1      	ldrb	r1, [r4, #3]
    7ca8:	0609      	lsls	r1, r1, #24
    7caa:	4301      	orrs	r1, r0
    7cac:	00db      	lsls	r3, r3, #3
    7cae:	185b      	adds	r3, r3, r1
    7cb0:	795b      	ldrb	r3, [r3, #5]
    7cb2:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7cb4:	2008      	movs	r0, #8
	return result;
    7cb6:	e7ed      	b.n	7c94 <LORAREG_GetAttr_SpreadFactorT2+0x10>
    7cb8:	20001220 	.word	0x20001220

00007cbc <ValidateChMaskChCntl>:
{
    7cbc:	b510      	push	{r4, lr}
    7cbe:	b082      	sub	sp, #8
	ValChMaskCntl_t chMaskchCntl = * (ValChMaskCntl_t *)attrInput;
    7cc0:	ac01      	add	r4, sp, #4
    7cc2:	2204      	movs	r2, #4
    7cc4:	0020      	movs	r0, r4
    7cc6:	4b09      	ldr	r3, [pc, #36]	; (7cec <ValidateChMaskChCntl+0x30>)
    7cc8:	4798      	blx	r3
    if(chMaskchCntl.chnlMask == 0 && chMaskchCntl.chnlMaskCntl == 7)
    7cca:	8863      	ldrh	r3, [r4, #2]
    7ccc:	2b00      	cmp	r3, #0
    7cce:	d104      	bne.n	7cda <ValidateChMaskChCntl+0x1e>
    7cd0:	ab01      	add	r3, sp, #4
    7cd2:	781b      	ldrb	r3, [r3, #0]
        result = LORAWAN_INVALID_PARAMETER;
    7cd4:	200a      	movs	r0, #10
    if(chMaskchCntl.chnlMask == 0 && chMaskchCntl.chnlMaskCntl == 7)
    7cd6:	2b07      	cmp	r3, #7
    7cd8:	d006      	beq.n	7ce8 <ValidateChMaskChCntl+0x2c>
		result = ((ValidateChannelMask(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) | (ValidateChannelMaskCntl(CHANNEL_MASK_CNTL,  (void *)&chMaskchCntl.chnlMaskCntl)));
    7cda:	a901      	add	r1, sp, #4
    7cdc:	201b      	movs	r0, #27
    7cde:	4b04      	ldr	r3, [pc, #16]	; (7cf0 <ValidateChMaskChCntl+0x34>)
    7ce0:	4798      	blx	r3
    7ce2:	2308      	movs	r3, #8
    7ce4:	4318      	orrs	r0, r3
    7ce6:	b2c0      	uxtb	r0, r0
}
    7ce8:	b002      	add	sp, #8
    7cea:	bd10      	pop	{r4, pc}
    7cec:	0001516d 	.word	0x0001516d
    7cf0:	000056a5 	.word	0x000056a5

00007cf4 <LORAREG_GetAttr_NewTxChConfigT2>:
{
    7cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7cf6:	b083      	sub	sp, #12
    7cf8:	0015      	movs	r5, r2
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    7cfa:	788c      	ldrb	r4, [r1, #2]
    if ( dataRate > RegParams.minDataRate )
    7cfc:	2324      	movs	r3, #36	; 0x24
    7cfe:	4a2e      	ldr	r2, [pc, #184]	; (7db8 <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    7d00:	5cd3      	ldrb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    7d02:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    7d04:	42a3      	cmp	r3, r4
    7d06:	d205      	bcs.n	7d14 <LORAREG_GetAttr_NewTxChConfigT2+0x20>
}
    7d08:	b003      	add	sp, #12
    7d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923))) != 0) && (transmissionType == 0))
    7d0c:	2900      	cmp	r1, #0
    7d0e:	d10f      	bne.n	7d30 <LORAREG_GetAttr_NewTxChConfigT2+0x3c>
		currDr = DR2;
    7d10:	2402      	movs	r4, #2
    7d12:	e00d      	b.n	7d30 <LORAREG_GetAttr_NewTxChConfigT2+0x3c>
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    7d14:	784e      	ldrb	r6, [r1, #1]
	if (txPowerNew > RegParams.maxTxPwrIndx)
    7d16:	232d      	movs	r3, #45	; 0x2d
    7d18:	4a27      	ldr	r2, [pc, #156]	; (7db8 <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    7d1a:	56d3      	ldrsb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    7d1c:	200a      	movs	r0, #10
	if (txPowerNew > RegParams.maxTxPwrIndx)
    7d1e:	429e      	cmp	r6, r3
    7d20:	dcf2      	bgt.n	7d08 <LORAREG_GetAttr_NewTxChConfigT2+0x14>
		result = GetTxChannelConfig2(newTxChannelReq.transmissionType,newTxChannelReq.txPwr,newTxChannelReq.currDr,(radioConfig_t*)attrOutput);
    7d22:	7809      	ldrb	r1, [r1, #0]
	if(((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923))) != 0) && (transmissionType == 0))
    7d24:	232e      	movs	r3, #46	; 0x2e
    7d26:	5cd2      	ldrb	r2, [r2, r3]
    7d28:	4b24      	ldr	r3, [pc, #144]	; (7dbc <LORAREG_GetAttr_NewTxChConfigT2+0xc8>)
    7d2a:	4113      	asrs	r3, r2
    7d2c:	07db      	lsls	r3, r3, #31
    7d2e:	d4ed      	bmi.n	7d0c <LORAREG_GetAttr_NewTxChConfigT2+0x18>
	result = SearchAvailableChannel2 (RegParams.maxChannels, transmissionType,currDr, &channelIndex);
    7d30:	232a      	movs	r3, #42	; 0x2a
    7d32:	4a21      	ldr	r2, [pc, #132]	; (7db8 <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    7d34:	5cd0      	ldrb	r0, [r2, r3]
    7d36:	466b      	mov	r3, sp
    7d38:	3307      	adds	r3, #7
    7d3a:	0022      	movs	r2, r4
    7d3c:	4f20      	ldr	r7, [pc, #128]	; (7dc0 <LORAREG_GetAttr_NewTxChConfigT2+0xcc>)
    7d3e:	47b8      	blx	r7
	if (result == LORAWAN_SUCCESS)
    7d40:	2808      	cmp	r0, #8
    7d42:	d1e1      	bne.n	7d08 <LORAREG_GetAttr_NewTxChConfigT2+0x14>
		RegParams.lastUsedChannelIndex = channelIndex;
    7d44:	466b      	mov	r3, sp
    7d46:	79df      	ldrb	r7, [r3, #7]
    7d48:	4b1b      	ldr	r3, [pc, #108]	; (7db8 <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    7d4a:	222f      	movs	r2, #47	; 0x2f
    7d4c:	549f      	strb	r7, [r3, r2]
		radioConfig->frequency = RegParams.pOtherChParams[channelIndex].ulfrequency;
    7d4e:	7a19      	ldrb	r1, [r3, #8]
    7d50:	7a5a      	ldrb	r2, [r3, #9]
    7d52:	0212      	lsls	r2, r2, #8
    7d54:	430a      	orrs	r2, r1
    7d56:	7a99      	ldrb	r1, [r3, #10]
    7d58:	0409      	lsls	r1, r1, #16
    7d5a:	430a      	orrs	r2, r1
    7d5c:	7ad9      	ldrb	r1, [r3, #11]
    7d5e:	0609      	lsls	r1, r1, #24
    7d60:	4311      	orrs	r1, r2
    7d62:	007a      	lsls	r2, r7, #1
    7d64:	19d2      	adds	r2, r2, r7
    7d66:	0092      	lsls	r2, r2, #2
    7d68:	5c57      	ldrb	r7, [r2, r1]
    7d6a:	1852      	adds	r2, r2, r1
    7d6c:	7851      	ldrb	r1, [r2, #1]
    7d6e:	0209      	lsls	r1, r1, #8
    7d70:	430f      	orrs	r7, r1
    7d72:	7891      	ldrb	r1, [r2, #2]
    7d74:	0409      	lsls	r1, r1, #16
    7d76:	4339      	orrs	r1, r7
    7d78:	78d2      	ldrb	r2, [r2, #3]
    7d7a:	0612      	lsls	r2, r2, #24
    7d7c:	430a      	orrs	r2, r1
    7d7e:	602a      	str	r2, [r5, #0]
		radioConfig->txPower = RegParams.maxTxPwr - 2 *txPwrIndx;
    7d80:	0076      	lsls	r6, r6, #1
    7d82:	2228      	movs	r2, #40	; 0x28
    7d84:	5c9a      	ldrb	r2, [r3, r2]
    7d86:	1b96      	subs	r6, r2, r6
    7d88:	722e      	strb	r6, [r5, #8]
		radioConfig->freq_hop_period = DISABLED ;
    7d8a:	2200      	movs	r2, #0
    7d8c:	80aa      	strh	r2, [r5, #4]
		radioConfig->modulation = RegParams.pDrParams[currDr].modulation;
    7d8e:	7819      	ldrb	r1, [r3, #0]
    7d90:	785a      	ldrb	r2, [r3, #1]
    7d92:	0212      	lsls	r2, r2, #8
    7d94:	4311      	orrs	r1, r2
    7d96:	789a      	ldrb	r2, [r3, #2]
    7d98:	0412      	lsls	r2, r2, #16
    7d9a:	430a      	orrs	r2, r1
    7d9c:	78db      	ldrb	r3, [r3, #3]
    7d9e:	061b      	lsls	r3, r3, #24
    7da0:	4313      	orrs	r3, r2
    7da2:	00e4      	lsls	r4, r4, #3
    7da4:	191c      	adds	r4, r3, r4
    7da6:	79e3      	ldrb	r3, [r4, #7]
    7da8:	726b      	strb	r3, [r5, #9]
		radioConfig->bandwidth = RegParams.pDrParams[currDr].bandwidth;
    7daa:	79a3      	ldrb	r3, [r4, #6]
    7dac:	72ab      	strb	r3, [r5, #10]
		radioConfig->sf = RegParams.pDrParams[currDr].spreadingFactor;
    7dae:	7963      	ldrb	r3, [r4, #5]
    7db0:	72eb      	strb	r3, [r5, #11]
		radioConfig->ecrConfig.override = false;
    7db2:	2300      	movs	r3, #0
    7db4:	71eb      	strb	r3, [r5, #7]
    7db6:	e7a7      	b.n	7d08 <LORAREG_GetAttr_NewTxChConfigT2+0x14>
    7db8:	20001220 	.word	0x20001220
    7dbc:	00007fe0 	.word	0x00007fe0
    7dc0:	00006aed 	.word	0x00006aed

00007dc4 <setChannelIdStatus>:
{
    7dc4:	b510      	push	{r4, lr}
    uint8_t channelId = *(uint8_t *)attrInput;
    7dc6:	7808      	ldrb	r0, [r1, #0]
    if (channelId >= RegParams.maxChannels)
    7dc8:	232a      	movs	r3, #42	; 0x2a
    7dca:	4a05      	ldr	r2, [pc, #20]	; (7de0 <setChannelIdStatus+0x1c>)
    7dcc:	56d3      	ldrsb	r3, [r2, r3]
    7dce:	4298      	cmp	r0, r3
    7dd0:	db01      	blt.n	7dd6 <setChannelIdStatus+0x12>
		retVal = LORAWAN_INVALID_PARAMETER;
    7dd2:	200a      	movs	r0, #10
}
    7dd4:	bd10      	pop	{r4, pc}
		UpdateChannelIdStatus(updateChid.channelIndex,updateChid.statusNew);
    7dd6:	7849      	ldrb	r1, [r1, #1]
    7dd8:	4b02      	ldr	r3, [pc, #8]	; (7de4 <setChannelIdStatus+0x20>)
    7dda:	4798      	blx	r3
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    7ddc:	2008      	movs	r0, #8
	return retVal;
    7dde:	e7f9      	b.n	7dd4 <setChannelIdStatus+0x10>
    7de0:	20001220 	.word	0x20001220
    7de4:	000058dd 	.word	0x000058dd

00007de8 <ValidateDataRange>:
{
    7de8:	b530      	push	{r4, r5, lr}
	uint8_t maxTxDR = RegParams.cmnParams.paramsType1.maxTxDR;
    7dea:	23a8      	movs	r3, #168	; 0xa8
    7dec:	005b      	lsls	r3, r3, #1
    7dee:	4a17      	ldr	r2, [pc, #92]	; (7e4c <ValidateDataRange+0x64>)
    7df0:	5cd3      	ldrb	r3, [r2, r3]
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    7df2:	784a      	ldrb	r2, [r1, #1]
	dataRateMax = (val_drange.dataRangeNew & FIRST_NIBBLE) >> SHIFT4;
    7df4:	0914      	lsrs	r4, r2, #4
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    7df6:	200a      	movs	r0, #10
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    7df8:	42a3      	cmp	r3, r4
    7dfa:	d213      	bcs.n	7e24 <ValidateDataRange+0x3c>
}
    7dfc:	bd30      	pop	{r4, r5, pc}
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    7dfe:	202a      	movs	r0, #42	; 0x2a
    7e00:	4d12      	ldr	r5, [pc, #72]	; (7e4c <ValidateDataRange+0x64>)
    7e02:	562d      	ldrsb	r5, [r5, r0]
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    7e04:	3822      	subs	r0, #34	; 0x22
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    7e06:	42a9      	cmp	r1, r5
    7e08:	daf8      	bge.n	7dfc <ValidateDataRange+0x14>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    7e0a:	3002      	adds	r0, #2
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    7e0c:	4293      	cmp	r3, r2
    7e0e:	d1f5      	bne.n	7dfc <ValidateDataRange+0x14>
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMax != maxTxDR)))
    7e10:	42a3      	cmp	r3, r4
    7e12:	d005      	beq.n	7e20 <ValidateDataRange+0x38>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    7e14:	200a      	movs	r0, #10
	return retVal;
    7e16:	e7f1      	b.n	7dfc <ValidateDataRange+0x14>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    7e18:	200a      	movs	r0, #10
    7e1a:	e7ef      	b.n	7dfc <ValidateDataRange+0x14>
    7e1c:	200a      	movs	r0, #10
    7e1e:	e7ed      	b.n	7dfc <ValidateDataRange+0x14>
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    7e20:	2008      	movs	r0, #8
    7e22:	e7eb      	b.n	7dfc <ValidateDataRange+0x14>
	dataRateMin = val_drange.dataRangeNew & LAST_NIBBLE;
    7e24:	200f      	movs	r0, #15
    7e26:	4002      	ands	r2, r0
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    7e28:	3805      	subs	r0, #5
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    7e2a:	4293      	cmp	r3, r2
    7e2c:	d3e6      	bcc.n	7dfc <ValidateDataRange+0x14>
	if((ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMax) != LORAWAN_SUCCESS ) || (ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMin) != LORAWAN_SUCCESS ) || dataRateMax < dataRateMin || 
    7e2e:	42a2      	cmp	r2, r4
    7e30:	d8e4      	bhi.n	7dfc <ValidateDataRange+0x14>
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    7e32:	7809      	ldrb	r1, [r1, #0]
	   ((chId < RegParams.cmnParams.paramsType1.Max_125khzChan) && ((dataRateMin == maxTxDR) || (dataRateMax == maxTxDR))) || 
    7e34:	2054      	movs	r0, #84	; 0x54
    7e36:	30ff      	adds	r0, #255	; 0xff
	if((ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMax) != LORAWAN_SUCCESS ) || (ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMin) != LORAWAN_SUCCESS ) || dataRateMax < dataRateMin || 
    7e38:	4d04      	ldr	r5, [pc, #16]	; (7e4c <ValidateDataRange+0x64>)
    7e3a:	5c28      	ldrb	r0, [r5, r0]
    7e3c:	4288      	cmp	r0, r1
    7e3e:	d9de      	bls.n	7dfe <ValidateDataRange+0x16>
	   ((chId < RegParams.cmnParams.paramsType1.Max_125khzChan) && ((dataRateMin == maxTxDR) || (dataRateMax == maxTxDR))) || 
    7e40:	4293      	cmp	r3, r2
    7e42:	d0e9      	beq.n	7e18 <ValidateDataRange+0x30>
    7e44:	42a3      	cmp	r3, r4
    7e46:	d0e9      	beq.n	7e1c <ValidateDataRange+0x34>
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    7e48:	2008      	movs	r0, #8
    7e4a:	e7d7      	b.n	7dfc <ValidateDataRange+0x14>
    7e4c:	20001220 	.word	0x20001220

00007e50 <setDataRange>:
{
    7e50:	b570      	push	{r4, r5, r6, lr}
    7e52:	000c      	movs	r4, r1
	if((ValidateDataRange(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelId(CHANNEL_ID, &update_dr.channelIndex) != LORAWAN_SUCCESS))
    7e54:	2012      	movs	r0, #18
    7e56:	4b0f      	ldr	r3, [pc, #60]	; (7e94 <setDataRange+0x44>)
    7e58:	4798      	blx	r3
    7e5a:	2808      	cmp	r0, #8
    7e5c:	d001      	beq.n	7e62 <setDataRange+0x12>
		retVal = LORAWAN_INVALID_PARAMETER;
    7e5e:	200a      	movs	r0, #10
}
    7e60:	bd70      	pop	{r4, r5, r6, pc}
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    7e62:	7823      	ldrb	r3, [r4, #0]
    if (channelId >= RegParams.maxChannels)
    7e64:	222a      	movs	r2, #42	; 0x2a
    7e66:	490c      	ldr	r1, [pc, #48]	; (7e98 <setDataRange+0x48>)
    7e68:	568a      	ldrsb	r2, [r1, r2]
    7e6a:	4293      	cmp	r3, r2
    7e6c:	db01      	blt.n	7e72 <setDataRange+0x22>
		retVal = LORAWAN_INVALID_PARAMETER;
    7e6e:	3002      	adds	r0, #2
    7e70:	e7f6      	b.n	7e60 <setDataRange+0x10>
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    7e72:	7864      	ldrb	r4, [r4, #1]
		RegParams.pChParams[update_dr.channelIndex].dataRange.value = update_dr.dataRangeNew;
    7e74:	4d08      	ldr	r5, [pc, #32]	; (7e98 <setDataRange+0x48>)
    7e76:	792a      	ldrb	r2, [r5, #4]
    7e78:	7969      	ldrb	r1, [r5, #5]
    7e7a:	0209      	lsls	r1, r1, #8
    7e7c:	4311      	orrs	r1, r2
    7e7e:	79aa      	ldrb	r2, [r5, #6]
    7e80:	0412      	lsls	r2, r2, #16
    7e82:	4311      	orrs	r1, r2
    7e84:	79ea      	ldrb	r2, [r5, #7]
    7e86:	0612      	lsls	r2, r2, #24
    7e88:	430a      	orrs	r2, r1
    7e8a:	005b      	lsls	r3, r3, #1
    7e8c:	189b      	adds	r3, r3, r2
    7e8e:	705c      	strb	r4, [r3, #1]
	return retVal;
    7e90:	e7e6      	b.n	7e60 <setDataRange+0x10>
    7e92:	46c0      	nop			; (mov r8, r8)
    7e94:	00007de9 	.word	0x00007de9
    7e98:	20001220 	.word	0x20001220

00007e9c <LORAREG_GetAttr_RxWindowSizeT1>:
{
    7e9c:	b570      	push	{r4, r5, r6, lr}
    7e9e:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    7ea0:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    7ea2:	23a8      	movs	r3, #168	; 0xa8
    7ea4:	005b      	lsls	r3, r3, #1
    7ea6:	4a0f      	ldr	r2, [pc, #60]	; (7ee4 <LORAREG_GetAttr_RxWindowSizeT1+0x48>)
    7ea8:	5cd3      	ldrb	r3, [r2, r3]
    7eaa:	42a3      	cmp	r3, r4
    7eac:	d205      	bcs.n	7eba <LORAREG_GetAttr_RxWindowSizeT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7eae:	200f      	movs	r0, #15
    7eb0:	4b0d      	ldr	r3, [pc, #52]	; (7ee8 <LORAREG_GetAttr_RxWindowSizeT1+0x4c>)
    7eb2:	4798      	blx	r3
		return LORAWAN_INVALID_PARAMETER;
    7eb4:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7eb6:	2808      	cmp	r0, #8
    7eb8:	d112      	bne.n	7ee0 <LORAREG_GetAttr_RxWindowSizeT1+0x44>
	    *(uint16_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowSize;	
    7eba:	490a      	ldr	r1, [pc, #40]	; (7ee4 <LORAREG_GetAttr_RxWindowSizeT1+0x48>)
    7ebc:	780b      	ldrb	r3, [r1, #0]
    7ebe:	784a      	ldrb	r2, [r1, #1]
    7ec0:	0212      	lsls	r2, r2, #8
    7ec2:	431a      	orrs	r2, r3
    7ec4:	788b      	ldrb	r3, [r1, #2]
    7ec6:	041b      	lsls	r3, r3, #16
    7ec8:	431a      	orrs	r2, r3
    7eca:	78cb      	ldrb	r3, [r1, #3]
    7ecc:	061b      	lsls	r3, r3, #24
    7ece:	4313      	orrs	r3, r2
    7ed0:	00e4      	lsls	r4, r4, #3
    7ed2:	5ce2      	ldrb	r2, [r4, r3]
    7ed4:	18e4      	adds	r4, r4, r3
    7ed6:	7863      	ldrb	r3, [r4, #1]
    7ed8:	021b      	lsls	r3, r3, #8
    7eda:	4313      	orrs	r3, r2
    7edc:	802b      	strh	r3, [r5, #0]
	return result;
    7ede:	2308      	movs	r3, #8
}
    7ee0:	0018      	movs	r0, r3
    7ee2:	bd70      	pop	{r4, r5, r6, pc}
    7ee4:	20001220 	.word	0x20001220
    7ee8:	00005551 	.word	0x00005551

00007eec <LORAREG_GetAttr_RxWindowOffsetT1>:
{
    7eec:	b570      	push	{r4, r5, r6, lr}
    7eee:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    7ef0:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    7ef2:	23a8      	movs	r3, #168	; 0xa8
    7ef4:	005b      	lsls	r3, r3, #1
    7ef6:	4a0e      	ldr	r2, [pc, #56]	; (7f30 <LORAREG_GetAttr_RxWindowOffsetT1+0x44>)
    7ef8:	5cd3      	ldrb	r3, [r2, r3]
    7efa:	42a3      	cmp	r3, r4
    7efc:	d205      	bcs.n	7f0a <LORAREG_GetAttr_RxWindowOffsetT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7efe:	200f      	movs	r0, #15
    7f00:	4b0c      	ldr	r3, [pc, #48]	; (7f34 <LORAREG_GetAttr_RxWindowOffsetT1+0x48>)
    7f02:	4798      	blx	r3
		return LORAWAN_INVALID_PARAMETER;
    7f04:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7f06:	2808      	cmp	r0, #8
    7f08:	d110      	bne.n	7f2c <LORAREG_GetAttr_RxWindowOffsetT1+0x40>
		*(int8_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowOffset;
    7f0a:	4909      	ldr	r1, [pc, #36]	; (7f30 <LORAREG_GetAttr_RxWindowOffsetT1+0x44>)
    7f0c:	780b      	ldrb	r3, [r1, #0]
    7f0e:	784a      	ldrb	r2, [r1, #1]
    7f10:	0212      	lsls	r2, r2, #8
    7f12:	431a      	orrs	r2, r3
    7f14:	788b      	ldrb	r3, [r1, #2]
    7f16:	041b      	lsls	r3, r3, #16
    7f18:	431a      	orrs	r2, r3
    7f1a:	78cb      	ldrb	r3, [r1, #3]
    7f1c:	061b      	lsls	r3, r3, #24
    7f1e:	4313      	orrs	r3, r2
    7f20:	00e4      	lsls	r4, r4, #3
    7f22:	18e3      	adds	r3, r4, r3
    7f24:	791b      	ldrb	r3, [r3, #4]
    7f26:	b25b      	sxtb	r3, r3
    7f28:	702b      	strb	r3, [r5, #0]
	return result;
    7f2a:	2308      	movs	r3, #8
}
    7f2c:	0018      	movs	r0, r3
    7f2e:	bd70      	pop	{r4, r5, r6, pc}
    7f30:	20001220 	.word	0x20001220
    7f34:	00005551 	.word	0x00005551

00007f38 <LORAREG_GetAttr_MaxPayloadT1>:
{
    7f38:	b570      	push	{r4, r5, r6, lr}
    7f3a:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    7f3c:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    7f3e:	23a8      	movs	r3, #168	; 0xa8
    7f40:	005b      	lsls	r3, r3, #1
    7f42:	4a0e      	ldr	r2, [pc, #56]	; (7f7c <LORAREG_GetAttr_MaxPayloadT1+0x44>)
    7f44:	5cd3      	ldrb	r3, [r2, r3]
    7f46:	42a3      	cmp	r3, r4
    7f48:	d205      	bcs.n	7f56 <LORAREG_GetAttr_MaxPayloadT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7f4a:	200f      	movs	r0, #15
    7f4c:	4b0c      	ldr	r3, [pc, #48]	; (7f80 <LORAREG_GetAttr_MaxPayloadT1+0x48>)
    7f4e:	4798      	blx	r3
		result =  LORAWAN_INVALID_PARAMETER;
    7f50:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7f52:	2808      	cmp	r0, #8
    7f54:	d10f      	bne.n	7f76 <LORAREG_GetAttr_MaxPayloadT1+0x3e>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    7f56:	4909      	ldr	r1, [pc, #36]	; (7f7c <LORAREG_GetAttr_MaxPayloadT1+0x44>)
    7f58:	780b      	ldrb	r3, [r1, #0]
    7f5a:	784a      	ldrb	r2, [r1, #1]
    7f5c:	0212      	lsls	r2, r2, #8
    7f5e:	431a      	orrs	r2, r3
    7f60:	788b      	ldrb	r3, [r1, #2]
    7f62:	041b      	lsls	r3, r3, #16
    7f64:	431a      	orrs	r2, r3
    7f66:	78cb      	ldrb	r3, [r1, #3]
    7f68:	061b      	lsls	r3, r3, #24
    7f6a:	4313      	orrs	r3, r2
    7f6c:	00e4      	lsls	r4, r4, #3
    7f6e:	18e3      	adds	r3, r4, r3
    7f70:	789b      	ldrb	r3, [r3, #2]
    7f72:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7f74:	2308      	movs	r3, #8
}
    7f76:	0018      	movs	r0, r3
    7f78:	bd70      	pop	{r4, r5, r6, pc}
    7f7a:	46c0      	nop			; (mov r8, r8)
    7f7c:	20001220 	.word	0x20001220
    7f80:	00005551 	.word	0x00005551

00007f84 <LORAREG_GetAttr_ModulationAttrT1>:
{
    7f84:	b570      	push	{r4, r5, r6, lr}
    7f86:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    7f88:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    7f8a:	23a8      	movs	r3, #168	; 0xa8
    7f8c:	005b      	lsls	r3, r3, #1
    7f8e:	4a0e      	ldr	r2, [pc, #56]	; (7fc8 <LORAREG_GetAttr_ModulationAttrT1+0x44>)
    7f90:	5cd3      	ldrb	r3, [r2, r3]
    7f92:	42a3      	cmp	r3, r4
    7f94:	d205      	bcs.n	7fa2 <LORAREG_GetAttr_ModulationAttrT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7f96:	200f      	movs	r0, #15
    7f98:	4b0c      	ldr	r3, [pc, #48]	; (7fcc <LORAREG_GetAttr_ModulationAttrT1+0x48>)
    7f9a:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    7f9c:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7f9e:	2808      	cmp	r0, #8
    7fa0:	d10f      	bne.n	7fc2 <LORAREG_GetAttr_ModulationAttrT1+0x3e>
	    *(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].modulation;
    7fa2:	4909      	ldr	r1, [pc, #36]	; (7fc8 <LORAREG_GetAttr_ModulationAttrT1+0x44>)
    7fa4:	780b      	ldrb	r3, [r1, #0]
    7fa6:	784a      	ldrb	r2, [r1, #1]
    7fa8:	0212      	lsls	r2, r2, #8
    7faa:	431a      	orrs	r2, r3
    7fac:	788b      	ldrb	r3, [r1, #2]
    7fae:	041b      	lsls	r3, r3, #16
    7fb0:	431a      	orrs	r2, r3
    7fb2:	78cb      	ldrb	r3, [r1, #3]
    7fb4:	061b      	lsls	r3, r3, #24
    7fb6:	4313      	orrs	r3, r2
    7fb8:	00e4      	lsls	r4, r4, #3
    7fba:	18e3      	adds	r3, r4, r3
    7fbc:	79db      	ldrb	r3, [r3, #7]
    7fbe:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7fc0:	2308      	movs	r3, #8
}
    7fc2:	0018      	movs	r0, r3
    7fc4:	bd70      	pop	{r4, r5, r6, pc}
    7fc6:	46c0      	nop			; (mov r8, r8)
    7fc8:	20001220 	.word	0x20001220
    7fcc:	00005551 	.word	0x00005551

00007fd0 <LORAREG_GetAttr_BandwidthAttrT1>:
{
    7fd0:	b570      	push	{r4, r5, r6, lr}
    7fd2:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    7fd4:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    7fd6:	23a8      	movs	r3, #168	; 0xa8
    7fd8:	005b      	lsls	r3, r3, #1
    7fda:	4a0e      	ldr	r2, [pc, #56]	; (8014 <LORAREG_GetAttr_BandwidthAttrT1+0x44>)
    7fdc:	5cd3      	ldrb	r3, [r2, r3]
    7fde:	42a3      	cmp	r3, r4
    7fe0:	d205      	bcs.n	7fee <LORAREG_GetAttr_BandwidthAttrT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7fe2:	200f      	movs	r0, #15
    7fe4:	4b0c      	ldr	r3, [pc, #48]	; (8018 <LORAREG_GetAttr_BandwidthAttrT1+0x48>)
    7fe6:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    7fe8:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7fea:	2808      	cmp	r0, #8
    7fec:	d10f      	bne.n	800e <LORAREG_GetAttr_BandwidthAttrT1+0x3e>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].bandwidth;
    7fee:	4909      	ldr	r1, [pc, #36]	; (8014 <LORAREG_GetAttr_BandwidthAttrT1+0x44>)
    7ff0:	780b      	ldrb	r3, [r1, #0]
    7ff2:	784a      	ldrb	r2, [r1, #1]
    7ff4:	0212      	lsls	r2, r2, #8
    7ff6:	431a      	orrs	r2, r3
    7ff8:	788b      	ldrb	r3, [r1, #2]
    7ffa:	041b      	lsls	r3, r3, #16
    7ffc:	431a      	orrs	r2, r3
    7ffe:	78cb      	ldrb	r3, [r1, #3]
    8000:	061b      	lsls	r3, r3, #24
    8002:	4313      	orrs	r3, r2
    8004:	00e4      	lsls	r4, r4, #3
    8006:	18e3      	adds	r3, r4, r3
    8008:	799b      	ldrb	r3, [r3, #6]
    800a:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    800c:	2308      	movs	r3, #8
}
    800e:	0018      	movs	r0, r3
    8010:	bd70      	pop	{r4, r5, r6, pc}
    8012:	46c0      	nop			; (mov r8, r8)
    8014:	20001220 	.word	0x20001220
    8018:	00005551 	.word	0x00005551

0000801c <LORAREG_GetAttr_SpreadFactorT1>:
{
    801c:	b570      	push	{r4, r5, r6, lr}
    801e:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    8020:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    8022:	23a8      	movs	r3, #168	; 0xa8
    8024:	005b      	lsls	r3, r3, #1
    8026:	4a0e      	ldr	r2, [pc, #56]	; (8060 <LORAREG_GetAttr_SpreadFactorT1+0x44>)
    8028:	5cd3      	ldrb	r3, [r2, r3]
    802a:	42a3      	cmp	r3, r4
    802c:	d205      	bcs.n	803a <LORAREG_GetAttr_SpreadFactorT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    802e:	200f      	movs	r0, #15
    8030:	4b0c      	ldr	r3, [pc, #48]	; (8064 <LORAREG_GetAttr_SpreadFactorT1+0x48>)
    8032:	4798      	blx	r3
		result =  LORAWAN_INVALID_PARAMETER;
    8034:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    8036:	2808      	cmp	r0, #8
    8038:	d10f      	bne.n	805a <LORAREG_GetAttr_SpreadFactorT1+0x3e>
		*(RadioDataRate_t *)attrOutput = RegParams.pDrParams[dataRate].spreadingFactor;
    803a:	4909      	ldr	r1, [pc, #36]	; (8060 <LORAREG_GetAttr_SpreadFactorT1+0x44>)
    803c:	780b      	ldrb	r3, [r1, #0]
    803e:	784a      	ldrb	r2, [r1, #1]
    8040:	0212      	lsls	r2, r2, #8
    8042:	431a      	orrs	r2, r3
    8044:	788b      	ldrb	r3, [r1, #2]
    8046:	041b      	lsls	r3, r3, #16
    8048:	431a      	orrs	r2, r3
    804a:	78cb      	ldrb	r3, [r1, #3]
    804c:	061b      	lsls	r3, r3, #24
    804e:	4313      	orrs	r3, r2
    8050:	00e4      	lsls	r4, r4, #3
    8052:	18e3      	adds	r3, r4, r3
    8054:	795b      	ldrb	r3, [r3, #5]
    8056:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    8058:	2308      	movs	r3, #8
}
    805a:	0018      	movs	r0, r3
    805c:	bd70      	pop	{r4, r5, r6, pc}
    805e:	46c0      	nop			; (mov r8, r8)
    8060:	20001220 	.word	0x20001220
    8064:	00005551 	.word	0x00005551

00008068 <ValidateTxFreqT1>:
{
    8068:	b530      	push	{r4, r5, lr}
    806a:	b083      	sub	sp, #12
	memcpy(&val_freqTx,attrInput,sizeof(ValUpdateFreqTx_t));
    806c:	2208      	movs	r2, #8
    806e:	4668      	mov	r0, sp
    8070:	4b20      	ldr	r3, [pc, #128]	; (80f4 <ValidateTxFreqT1+0x8c>)
    8072:	4798      	blx	r3
	if(ChIndex > RegParams.maxChannels)
    8074:	466b      	mov	r3, sp
    8076:	7919      	ldrb	r1, [r3, #4]
    8078:	232a      	movs	r3, #42	; 0x2a
    807a:	4a1f      	ldr	r2, [pc, #124]	; (80f8 <ValidateTxFreqT1+0x90>)
    807c:	56d3      	ldrsb	r3, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    807e:	2008      	movs	r0, #8
	if(ChIndex > RegParams.maxChannels)
    8080:	4299      	cmp	r1, r3
    8082:	dd00      	ble.n	8086 <ValidateTxFreqT1+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    8084:	3002      	adds	r0, #2
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    8086:	9c00      	ldr	r4, [sp, #0]
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    8088:	4d1b      	ldr	r5, [pc, #108]	; (80f8 <ValidateTxFreqT1+0x90>)
    808a:	2344      	movs	r3, #68	; 0x44
    808c:	33ff      	adds	r3, #255	; 0xff
    808e:	5ceb      	ldrb	r3, [r5, r3]
    8090:	22a2      	movs	r2, #162	; 0xa2
    8092:	0052      	lsls	r2, r2, #1
    8094:	5caa      	ldrb	r2, [r5, r2]
    8096:	0212      	lsls	r2, r2, #8
    8098:	431a      	orrs	r2, r3
    809a:	2346      	movs	r3, #70	; 0x46
    809c:	33ff      	adds	r3, #255	; 0xff
    809e:	5ceb      	ldrb	r3, [r5, r3]
    80a0:	041b      	lsls	r3, r3, #16
    80a2:	431a      	orrs	r2, r3
    80a4:	23a3      	movs	r3, #163	; 0xa3
    80a6:	005b      	lsls	r3, r3, #1
    80a8:	5ceb      	ldrb	r3, [r5, r3]
    80aa:	061b      	lsls	r3, r3, #24
    80ac:	4313      	orrs	r3, r2
    80ae:	4a13      	ldr	r2, [pc, #76]	; (80fc <ValidateTxFreqT1+0x94>)
    80b0:	434a      	muls	r2, r1
    80b2:	189b      	adds	r3, r3, r2
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    80b4:	429c      	cmp	r4, r3
    80b6:	d01b      	beq.n	80f0 <ValidateTxFreqT1+0x88>
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    80b8:	2354      	movs	r3, #84	; 0x54
    80ba:	33ff      	adds	r3, #255	; 0xff
    80bc:	5ceb      	ldrb	r3, [r5, r3]
    80be:	1ac9      	subs	r1, r1, r3
    80c0:	4b0f      	ldr	r3, [pc, #60]	; (8100 <ValidateTxFreqT1+0x98>)
    80c2:	4359      	muls	r1, r3
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    80c4:	2348      	movs	r3, #72	; 0x48
    80c6:	33ff      	adds	r3, #255	; 0xff
    80c8:	5ceb      	ldrb	r3, [r5, r3]
    80ca:	22a4      	movs	r2, #164	; 0xa4
    80cc:	0052      	lsls	r2, r2, #1
    80ce:	5caa      	ldrb	r2, [r5, r2]
    80d0:	0212      	lsls	r2, r2, #8
    80d2:	4313      	orrs	r3, r2
    80d4:	224a      	movs	r2, #74	; 0x4a
    80d6:	32ff      	adds	r2, #255	; 0xff
    80d8:	5caa      	ldrb	r2, [r5, r2]
    80da:	0412      	lsls	r2, r2, #16
    80dc:	431a      	orrs	r2, r3
    80de:	23a5      	movs	r3, #165	; 0xa5
    80e0:	005b      	lsls	r3, r3, #1
    80e2:	5ceb      	ldrb	r3, [r5, r3]
    80e4:	061b      	lsls	r3, r3, #24
    80e6:	4313      	orrs	r3, r2
    80e8:	18cb      	adds	r3, r1, r3
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    80ea:	429c      	cmp	r4, r3
    80ec:	d000      	beq.n	80f0 <ValidateTxFreqT1+0x88>
		result = LORAWAN_INVALID_PARAMETER;
    80ee:	200a      	movs	r0, #10
}
    80f0:	b003      	add	sp, #12
    80f2:	bd30      	pop	{r4, r5, pc}
    80f4:	0001516d 	.word	0x0001516d
    80f8:	20001220 	.word	0x20001220
    80fc:	00030d40 	.word	0x00030d40
    8100:	00186a00 	.word	0x00186a00

00008104 <LORAREG_GetAttr_NewTxChConfigT1>:
{
    8104:	b5f0      	push	{r4, r5, r6, r7, lr}
    8106:	46d6      	mov	lr, sl
    8108:	464f      	mov	r7, r9
    810a:	4646      	mov	r6, r8
    810c:	b5c0      	push	{r6, r7, lr}
    810e:	b082      	sub	sp, #8
    8110:	0015      	movs	r5, r2
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    8112:	788c      	ldrb	r4, [r1, #2]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    8114:	23a8      	movs	r3, #168	; 0xa8
    8116:	005b      	lsls	r3, r3, #1
    8118:	4a5c      	ldr	r2, [pc, #368]	; (828c <LORAREG_GetAttr_NewTxChConfigT1+0x188>)
    811a:	5cd3      	ldrb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    811c:	200a      	movs	r0, #10
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    811e:	42a3      	cmp	r3, r4
    8120:	d300      	bcc.n	8124 <LORAREG_GetAttr_NewTxChConfigT1+0x20>
    8122:	e08d      	b.n	8240 <LORAREG_GetAttr_NewTxChConfigT1+0x13c>
}
    8124:	b002      	add	sp, #8
    8126:	bc1c      	pop	{r2, r3, r4}
    8128:	4690      	mov	r8, r2
    812a:	4699      	mov	r9, r3
    812c:	46a2      	mov	sl, r4
    812e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		result = SearchAvailableChannel1 (RegParams.maxChannels, transmissionType,currDr, &channelIndex);
    8130:	4b56      	ldr	r3, [pc, #344]	; (828c <LORAREG_GetAttr_NewTxChConfigT1+0x188>)
    8132:	4698      	mov	r8, r3
    8134:	232a      	movs	r3, #42	; 0x2a
    8136:	4642      	mov	r2, r8
    8138:	5cd0      	ldrb	r0, [r2, r3]
    813a:	466b      	mov	r3, sp
    813c:	3307      	adds	r3, #7
    813e:	0022      	movs	r2, r4
    8140:	2101      	movs	r1, #1
    8142:	4f53      	ldr	r7, [pc, #332]	; (8290 <LORAREG_GetAttr_NewTxChConfigT1+0x18c>)
    8144:	47b8      	blx	r7
		radioConfig->sf = RegParams.pDrParams[currDr].spreadingFactor;
    8146:	4643      	mov	r3, r8
    8148:	781b      	ldrb	r3, [r3, #0]
    814a:	4642      	mov	r2, r8
    814c:	7852      	ldrb	r2, [r2, #1]
    814e:	0212      	lsls	r2, r2, #8
    8150:	431a      	orrs	r2, r3
    8152:	4643      	mov	r3, r8
    8154:	789b      	ldrb	r3, [r3, #2]
    8156:	041b      	lsls	r3, r3, #16
    8158:	431a      	orrs	r2, r3
    815a:	4643      	mov	r3, r8
    815c:	78db      	ldrb	r3, [r3, #3]
    815e:	061b      	lsls	r3, r3, #24
    8160:	4313      	orrs	r3, r2
    8162:	00e4      	lsls	r4, r4, #3
    8164:	18e3      	adds	r3, r4, r3
    8166:	795b      	ldrb	r3, [r3, #5]
    8168:	72eb      	strb	r3, [r5, #11]
	if (result == LORAWAN_SUCCESS)
    816a:	2808      	cmp	r0, #8
    816c:	d1da      	bne.n	8124 <LORAREG_GetAttr_NewTxChConfigT1+0x20>
	uint8_t txPower = RegParams.maxTxPwr - 2 * txPwrIndx;
    816e:	0076      	lsls	r6, r6, #1
    8170:	4653      	mov	r3, sl
    8172:	1b9f      	subs	r7, r3, r6
    8174:	b2ff      	uxtb	r7, r7
		if (channelIndex < RegParams.cmnParams.paramsType1.Max_125khzChan)
    8176:	466b      	mov	r3, sp
    8178:	3307      	adds	r3, #7
    817a:	781b      	ldrb	r3, [r3, #0]
    817c:	2254      	movs	r2, #84	; 0x54
    817e:	32ff      	adds	r2, #255	; 0xff
    8180:	4942      	ldr	r1, [pc, #264]	; (828c <LORAREG_GetAttr_NewTxChConfigT1+0x188>)
    8182:	5c8a      	ldrb	r2, [r1, r2]
    8184:	429a      	cmp	r2, r3
    8186:	d930      	bls.n	81ea <LORAREG_GetAttr_NewTxChConfigT1+0xe6>
			radioConfig->bandwidth = BW_125KHZ;
    8188:	2207      	movs	r2, #7
    818a:	72aa      	strb	r2, [r5, #10]
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    818c:	2244      	movs	r2, #68	; 0x44
    818e:	32ff      	adds	r2, #255	; 0xff
    8190:	5c8a      	ldrb	r2, [r1, r2]
    8192:	24a2      	movs	r4, #162	; 0xa2
    8194:	0064      	lsls	r4, r4, #1
    8196:	5d0c      	ldrb	r4, [r1, r4]
    8198:	0224      	lsls	r4, r4, #8
    819a:	4314      	orrs	r4, r2
    819c:	2246      	movs	r2, #70	; 0x46
    819e:	32ff      	adds	r2, #255	; 0xff
    81a0:	5c8a      	ldrb	r2, [r1, r2]
    81a2:	0412      	lsls	r2, r2, #16
    81a4:	4314      	orrs	r4, r2
    81a6:	22a3      	movs	r2, #163	; 0xa3
    81a8:	0052      	lsls	r2, r2, #1
    81aa:	5c8a      	ldrb	r2, [r1, r2]
    81ac:	0612      	lsls	r2, r2, #24
    81ae:	4322      	orrs	r2, r4
    81b0:	4c38      	ldr	r4, [pc, #224]	; (8294 <LORAREG_GetAttr_NewTxChConfigT1+0x190>)
    81b2:	4363      	muls	r3, r4
    81b4:	18d3      	adds	r3, r2, r3
			radioConfig->frequency = GenerateFrequency1 (channelIndex);
    81b6:	602b      	str	r3, [r5, #0]
			radioConfig->txPower = txPower;
    81b8:	722f      	strb	r7, [r5, #8]
			if(RegParams.band == ISM_NA915)
    81ba:	232e      	movs	r3, #46	; 0x2e
    81bc:	5ccb      	ldrb	r3, [r1, r3]
    81be:	2b02      	cmp	r3, #2
    81c0:	d00f      	beq.n	81e2 <LORAREG_GetAttr_NewTxChConfigT1+0xde>
		radioConfig->freq_hop_period = DISABLED;
    81c2:	2300      	movs	r3, #0
    81c4:	80ab      	strh	r3, [r5, #4]
		radioConfig->modulation = MODULATION_LORA;
    81c6:	3301      	adds	r3, #1
    81c8:	726b      	strb	r3, [r5, #9]
		RegParams.lastUsedChannelIndex = channelIndex;
    81ca:	466b      	mov	r3, sp
    81cc:	79d9      	ldrb	r1, [r3, #7]
    81ce:	232f      	movs	r3, #47	; 0x2f
    81d0:	4a2e      	ldr	r2, [pc, #184]	; (828c <LORAREG_GetAttr_NewTxChConfigT1+0x188>)
    81d2:	54d1      	strb	r1, [r2, r3]
    81d4:	e7a6      	b.n	8124 <LORAREG_GetAttr_NewTxChConfigT1+0x20>
				radioConfig->sf = SF_10;
    81d6:	3308      	adds	r3, #8
    81d8:	72eb      	strb	r3, [r5, #11]
    81da:	e7c6      	b.n	816a <LORAREG_GetAttr_NewTxChConfigT1+0x66>
			radioConfig->sf = SF_8;
    81dc:	2308      	movs	r3, #8
    81de:	72eb      	strb	r3, [r5, #11]
    81e0:	e7c3      	b.n	816a <LORAREG_GetAttr_NewTxChConfigT1+0x66>
    			radioConfig->ecrConfig.override = true;
    81e2:	3b01      	subs	r3, #1
    81e4:	71eb      	strb	r3, [r5, #7]
			    radioConfig->ecrConfig.ecr = CR_4_5;	 
    81e6:	71ab      	strb	r3, [r5, #6]
    81e8:	e7eb      	b.n	81c2 <LORAREG_GetAttr_NewTxChConfigT1+0xbe>
			radioConfig->bandwidth = BW_500KHZ;
    81ea:	2209      	movs	r2, #9
    81ec:	72aa      	strb	r2, [r5, #10]
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    81ee:	4a27      	ldr	r2, [pc, #156]	; (828c <LORAREG_GetAttr_NewTxChConfigT1+0x188>)
    81f0:	2154      	movs	r1, #84	; 0x54
    81f2:	31ff      	adds	r1, #255	; 0xff
    81f4:	5c51      	ldrb	r1, [r2, r1]
    81f6:	1a5b      	subs	r3, r3, r1
    81f8:	4927      	ldr	r1, [pc, #156]	; (8298 <LORAREG_GetAttr_NewTxChConfigT1+0x194>)
    81fa:	434b      	muls	r3, r1
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    81fc:	2148      	movs	r1, #72	; 0x48
    81fe:	31ff      	adds	r1, #255	; 0xff
    8200:	5c51      	ldrb	r1, [r2, r1]
    8202:	24a4      	movs	r4, #164	; 0xa4
    8204:	0064      	lsls	r4, r4, #1
    8206:	5d14      	ldrb	r4, [r2, r4]
    8208:	0224      	lsls	r4, r4, #8
    820a:	430c      	orrs	r4, r1
    820c:	214a      	movs	r1, #74	; 0x4a
    820e:	31ff      	adds	r1, #255	; 0xff
    8210:	5c51      	ldrb	r1, [r2, r1]
    8212:	0409      	lsls	r1, r1, #16
    8214:	430c      	orrs	r4, r1
    8216:	21a5      	movs	r1, #165	; 0xa5
    8218:	0049      	lsls	r1, r1, #1
    821a:	5c51      	ldrb	r1, [r2, r1]
    821c:	0609      	lsls	r1, r1, #24
    821e:	4321      	orrs	r1, r4
    8220:	185b      	adds	r3, r3, r1
			radioConfig->frequency = GenerateFrequency2 (channelIndex);
    8222:	602b      	str	r3, [r5, #0]
			if( RegParams.band == ISM_NA915)
    8224:	232e      	movs	r3, #46	; 0x2e
    8226:	5cd3      	ldrb	r3, [r2, r3]
    8228:	2b02      	cmp	r3, #2
    822a:	d003      	beq.n	8234 <LORAREG_GetAttr_NewTxChConfigT1+0x130>
			if (txPower <= 26)
    822c:	2f1a      	cmp	r7, #26
    822e:	d804      	bhi.n	823a <LORAREG_GetAttr_NewTxChConfigT1+0x136>
				radioConfig->txPower = txPower;
    8230:	722f      	strb	r7, [r5, #8]
    8232:	e7c6      	b.n	81c2 <LORAREG_GetAttr_NewTxChConfigT1+0xbe>
			    radioConfig->ecrConfig.override = false;
    8234:	2300      	movs	r3, #0
    8236:	71eb      	strb	r3, [r5, #7]
    8238:	e7f8      	b.n	822c <LORAREG_GetAttr_NewTxChConfigT1+0x128>
				radioConfig->txPower = 26;
    823a:	231a      	movs	r3, #26
    823c:	722b      	strb	r3, [r5, #8]
    823e:	e7c0      	b.n	81c2 <LORAREG_GetAttr_NewTxChConfigT1+0xbe>
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    8240:	784e      	ldrb	r6, [r1, #1]
	if (txPowerNew > RegParams.maxTxPwrIndx)
    8242:	232d      	movs	r3, #45	; 0x2d
    8244:	4a11      	ldr	r2, [pc, #68]	; (828c <LORAREG_GetAttr_NewTxChConfigT1+0x188>)
    8246:	56d3      	ldrsb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    8248:	200a      	movs	r0, #10
	if (txPowerNew > RegParams.maxTxPwrIndx)
    824a:	429e      	cmp	r6, r3
    824c:	dd00      	ble.n	8250 <LORAREG_GetAttr_NewTxChConfigT1+0x14c>
    824e:	e769      	b.n	8124 <LORAREG_GetAttr_NewTxChConfigT1+0x20>
	uint8_t txPower = RegParams.maxTxPwr - 2 * txPwrIndx;
    8250:	2328      	movs	r3, #40	; 0x28
    8252:	5cd3      	ldrb	r3, [r2, r3]
    8254:	469a      	mov	sl, r3
	if (transmissionType == 1) // data message (not join request), it should search in all
    8256:	780b      	ldrb	r3, [r1, #0]
    8258:	2b00      	cmp	r3, #0
    825a:	d000      	beq.n	825e <LORAREG_GetAttr_NewTxChConfigT1+0x15a>
    825c:	e768      	b.n	8130 <LORAREG_GetAttr_NewTxChConfigT1+0x2c>
		result = SearchAvailableChannel1 (RegParams.cmnParams.paramsType1.Max_125khzChan, transmissionType,DR0, &channelIndex);
    825e:	466b      	mov	r3, sp
    8260:	1ddc      	adds	r4, r3, #7
    8262:	2354      	movs	r3, #84	; 0x54
    8264:	33ff      	adds	r3, #255	; 0xff
    8266:	4a09      	ldr	r2, [pc, #36]	; (828c <LORAREG_GetAttr_NewTxChConfigT1+0x188>)
    8268:	5cd0      	ldrb	r0, [r2, r3]
    826a:	0023      	movs	r3, r4
    826c:	2200      	movs	r2, #0
    826e:	2100      	movs	r1, #0
    8270:	4f07      	ldr	r7, [pc, #28]	; (8290 <LORAREG_GetAttr_NewTxChConfigT1+0x18c>)
    8272:	47b8      	blx	r7
		if(channelIndex < MAX_CHANNELS_BANDWIDTH_125_AU_NA)
    8274:	7823      	ldrb	r3, [r4, #0]
    8276:	2b3f      	cmp	r3, #63	; 0x3f
    8278:	d8b0      	bhi.n	81dc <LORAREG_GetAttr_NewTxChConfigT1+0xd8>
			if( RegParams.band == ISM_NA915)
    827a:	232e      	movs	r3, #46	; 0x2e
    827c:	4a03      	ldr	r2, [pc, #12]	; (828c <LORAREG_GetAttr_NewTxChConfigT1+0x188>)
    827e:	5cd3      	ldrb	r3, [r2, r3]
    8280:	2b02      	cmp	r3, #2
    8282:	d0a8      	beq.n	81d6 <LORAREG_GetAttr_NewTxChConfigT1+0xd2>
				radioConfig->sf = SF_12;
    8284:	230c      	movs	r3, #12
    8286:	72eb      	strb	r3, [r5, #11]
    8288:	e76f      	b.n	816a <LORAREG_GetAttr_NewTxChConfigT1+0x66>
    828a:	46c0      	nop			; (mov r8, r8)
    828c:	20001220 	.word	0x20001220
    8290:	00005ce1 	.word	0x00005ce1
    8294:	00030d40 	.word	0x00030d40
    8298:	00186a00 	.word	0x00186a00

0000829c <LORAREG_InitGetAttrFnPtrsNA>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT1;
    829c:	4b2b      	ldr	r3, [pc, #172]	; (834c <LORAREG_InitGetAttrFnPtrsNA+0xb0>)
    829e:	4a2c      	ldr	r2, [pc, #176]	; (8350 <LORAREG_InitGetAttrFnPtrsNA+0xb4>)
    82a0:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT1;
    82a2:	4a2c      	ldr	r2, [pc, #176]	; (8354 <LORAREG_InitGetAttrFnPtrsNA+0xb8>)
    82a4:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT1;
    82a6:	4a2c      	ldr	r2, [pc, #176]	; (8358 <LORAREG_InitGetAttrFnPtrsNA+0xbc>)
    82a8:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT1;
    82aa:	4a2c      	ldr	r2, [pc, #176]	; (835c <LORAREG_InitGetAttrFnPtrsNA+0xc0>)
    82ac:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    82ae:	4a2c      	ldr	r2, [pc, #176]	; (8360 <LORAREG_InitGetAttrFnPtrsNA+0xc4>)
    82b0:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    82b2:	4a2c      	ldr	r2, [pc, #176]	; (8364 <LORAREG_InitGetAttrFnPtrsNA+0xc8>)
    82b4:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    82b6:	4a2c      	ldr	r2, [pc, #176]	; (8368 <LORAREG_InitGetAttrFnPtrsNA+0xcc>)
    82b8:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    82ba:	4a2c      	ldr	r2, [pc, #176]	; (836c <LORAREG_InitGetAttrFnPtrsNA+0xd0>)
    82bc:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    82be:	4a2c      	ldr	r2, [pc, #176]	; (8370 <LORAREG_InitGetAttrFnPtrsNA+0xd4>)
    82c0:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    82c2:	4a2c      	ldr	r2, [pc, #176]	; (8374 <LORAREG_InitGetAttrFnPtrsNA+0xd8>)
    82c4:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    82c6:	4a2c      	ldr	r2, [pc, #176]	; (8378 <LORAREG_InitGetAttrFnPtrsNA+0xdc>)
    82c8:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT1;
    82ca:	4a2c      	ldr	r2, [pc, #176]	; (837c <LORAREG_InitGetAttrFnPtrsNA+0xe0>)
    82cc:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    82ce:	4a2c      	ldr	r2, [pc, #176]	; (8380 <LORAREG_InitGetAttrFnPtrsNA+0xe4>)
    82d0:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    82d2:	4a2c      	ldr	r2, [pc, #176]	; (8384 <LORAREG_InitGetAttrFnPtrsNA+0xe8>)
    82d4:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType1;
    82d6:	4a2c      	ldr	r2, [pc, #176]	; (8388 <LORAREG_InitGetAttrFnPtrsNA+0xec>)
    82d8:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    82da:	492c      	ldr	r1, [pc, #176]	; (838c <LORAREG_InitGetAttrFnPtrsNA+0xf0>)
    82dc:	2280      	movs	r2, #128	; 0x80
    82de:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT1;
    82e0:	4a2b      	ldr	r2, [pc, #172]	; (8390 <LORAREG_InitGetAttrFnPtrsNA+0xf4>)
    82e2:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT1;
    82e4:	492b      	ldr	r1, [pc, #172]	; (8394 <LORAREG_InitGetAttrFnPtrsNA+0xf8>)
    82e6:	228c      	movs	r2, #140	; 0x8c
    82e8:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT1;
    82ea:	492b      	ldr	r1, [pc, #172]	; (8398 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    82ec:	3204      	adds	r2, #4
    82ee:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT1;
    82f0:	492a      	ldr	r1, [pc, #168]	; (839c <LORAREG_InitGetAttrFnPtrsNA+0x100>)
    82f2:	3204      	adds	r2, #4
    82f4:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_MinDutyCycleTimer;
    82f6:	492a      	ldr	r1, [pc, #168]	; (83a0 <LORAREG_InitGetAttrFnPtrsNA+0x104>)
    82f8:	3204      	adds	r2, #4
    82fa:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    82fc:	4929      	ldr	r1, [pc, #164]	; (83a4 <LORAREG_InitGetAttrFnPtrsNA+0x108>)
    82fe:	3204      	adds	r2, #4
    8300:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    8302:	4929      	ldr	r1, [pc, #164]	; (83a8 <LORAREG_InitGetAttrFnPtrsNA+0x10c>)
    8304:	3204      	adds	r2, #4
    8306:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    8308:	4928      	ldr	r1, [pc, #160]	; (83ac <LORAREG_InitGetAttrFnPtrsNA+0x110>)
    830a:	3204      	adds	r2, #4
    830c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    830e:	4928      	ldr	r1, [pc, #160]	; (83b0 <LORAREG_InitGetAttrFnPtrsNA+0x114>)
    8310:	3204      	adds	r2, #4
    8312:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    8314:	4927      	ldr	r1, [pc, #156]	; (83b4 <LORAREG_InitGetAttrFnPtrsNA+0x118>)
    8316:	3204      	adds	r2, #4
    8318:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    831a:	4927      	ldr	r1, [pc, #156]	; (83b8 <LORAREG_InitGetAttrFnPtrsNA+0x11c>)
    831c:	3204      	adds	r2, #4
    831e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    8320:	4926      	ldr	r1, [pc, #152]	; (83bc <LORAREG_InitGetAttrFnPtrsNA+0x120>)
    8322:	3204      	adds	r2, #4
    8324:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    8326:	4926      	ldr	r1, [pc, #152]	; (83c0 <LORAREG_InitGetAttrFnPtrsNA+0x124>)
    8328:	3204      	adds	r2, #4
    832a:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT1;
    832c:	4925      	ldr	r1, [pc, #148]	; (83c4 <LORAREG_InitGetAttrFnPtrsNA+0x128>)
    832e:	3204      	adds	r2, #4
    8330:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel1;
    8332:	4925      	ldr	r1, [pc, #148]	; (83c8 <LORAREG_InitGetAttrFnPtrsNA+0x12c>)
    8334:	3204      	adds	r2, #4
    8336:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    8338:	4924      	ldr	r1, [pc, #144]	; (83cc <LORAREG_InitGetAttrFnPtrsNA+0x130>)
    833a:	3204      	adds	r2, #4
    833c:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    833e:	4924      	ldr	r1, [pc, #144]	; (83d0 <LORAREG_InitGetAttrFnPtrsNA+0x134>)
    8340:	3214      	adds	r2, #20
    8342:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    8344:	4923      	ldr	r1, [pc, #140]	; (83d4 <LORAREG_InitGetAttrFnPtrsNA+0x138>)
    8346:	3204      	adds	r2, #4
    8348:	5099      	str	r1, [r3, r2]
}
    834a:	4770      	bx	lr
    834c:	20000b58 	.word	0x20000b58
    8350:	00005479 	.word	0x00005479
    8354:	00007e9d 	.word	0x00007e9d
    8358:	00007eed 	.word	0x00007eed
    835c:	00007f39 	.word	0x00007f39
    8360:	000052c1 	.word	0x000052c1
    8364:	000052d1 	.word	0x000052d1
    8368:	000052ed 	.word	0x000052ed
    836c:	000052fd 	.word	0x000052fd
    8370:	00006119 	.word	0x00006119
    8374:	0000530d 	.word	0x0000530d
    8378:	0000531d 	.word	0x0000531d
    837c:	00005fed 	.word	0x00005fed
    8380:	0000562d 	.word	0x0000562d
    8384:	0000536d 	.word	0x0000536d
    8388:	00005f41 	.word	0x00005f41
    838c:	00005ea1 	.word	0x00005ea1
    8390:	000053b9 	.word	0x000053b9
    8394:	00007f85 	.word	0x00007f85
    8398:	00007fd1 	.word	0x00007fd1
    839c:	0000801d 	.word	0x0000801d
    83a0:	000053c3 	.word	0x000053c3
    83a4:	000053cd 	.word	0x000053cd
    83a8:	000053d7 	.word	0x000053d7
    83ac:	000053e1 	.word	0x000053e1
    83b0:	000053ed 	.word	0x000053ed
    83b4:	000053f9 	.word	0x000053f9
    83b8:	00005403 	.word	0x00005403
    83bc:	0000540b 	.word	0x0000540b
    83c0:	00005413 	.word	0x00005413
    83c4:	00008105 	.word	0x00008105
    83c8:	00005e75 	.word	0x00005e75
    83cc:	0000543d 	.word	0x0000543d
    83d0:	0000541d 	.word	0x0000541d
    83d4:	0000542d 	.word	0x0000542d

000083d8 <LORAREG_InitGetAttrFnPtrsEU>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    83d8:	4b2d      	ldr	r3, [pc, #180]	; (8490 <LORAREG_InitGetAttrFnPtrsEU+0xb8>)
    83da:	4a2e      	ldr	r2, [pc, #184]	; (8494 <LORAREG_InitGetAttrFnPtrsEU+0xbc>)
    83dc:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    83de:	4a2e      	ldr	r2, [pc, #184]	; (8498 <LORAREG_InitGetAttrFnPtrsEU+0xc0>)
    83e0:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    83e2:	4a2e      	ldr	r2, [pc, #184]	; (849c <LORAREG_InitGetAttrFnPtrsEU+0xc4>)
    83e4:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    83e6:	4a2e      	ldr	r2, [pc, #184]	; (84a0 <LORAREG_InitGetAttrFnPtrsEU+0xc8>)
    83e8:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    83ea:	4a2e      	ldr	r2, [pc, #184]	; (84a4 <LORAREG_InitGetAttrFnPtrsEU+0xcc>)
    83ec:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    83ee:	4a2e      	ldr	r2, [pc, #184]	; (84a8 <LORAREG_InitGetAttrFnPtrsEU+0xd0>)
    83f0:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    83f2:	4a2e      	ldr	r2, [pc, #184]	; (84ac <LORAREG_InitGetAttrFnPtrsEU+0xd4>)
    83f4:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    83f6:	4a2e      	ldr	r2, [pc, #184]	; (84b0 <LORAREG_InitGetAttrFnPtrsEU+0xd8>)
    83f8:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    83fa:	4a2e      	ldr	r2, [pc, #184]	; (84b4 <LORAREG_InitGetAttrFnPtrsEU+0xdc>)
    83fc:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    83fe:	4a2e      	ldr	r2, [pc, #184]	; (84b8 <LORAREG_InitGetAttrFnPtrsEU+0xe0>)
    8400:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    8402:	4a2e      	ldr	r2, [pc, #184]	; (84bc <LORAREG_InitGetAttrFnPtrsEU+0xe4>)
    8404:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    8406:	4a2e      	ldr	r2, [pc, #184]	; (84c0 <LORAREG_InitGetAttrFnPtrsEU+0xe8>)
    8408:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    840a:	4a2e      	ldr	r2, [pc, #184]	; (84c4 <LORAREG_InitGetAttrFnPtrsEU+0xec>)
    840c:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    840e:	4a2e      	ldr	r2, [pc, #184]	; (84c8 <LORAREG_InitGetAttrFnPtrsEU+0xf0>)
    8410:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType2;
    8412:	4a2e      	ldr	r2, [pc, #184]	; (84cc <LORAREG_InitGetAttrFnPtrsEU+0xf4>)
    8414:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    8416:	492e      	ldr	r1, [pc, #184]	; (84d0 <LORAREG_InitGetAttrFnPtrsEU+0xf8>)
    8418:	2280      	movs	r2, #128	; 0x80
    841a:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT2;
    841c:	4a2d      	ldr	r2, [pc, #180]	; (84d4 <LORAREG_InitGetAttrFnPtrsEU+0xfc>)
    841e:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    8420:	492d      	ldr	r1, [pc, #180]	; (84d8 <LORAREG_InitGetAttrFnPtrsEU+0x100>)
    8422:	228c      	movs	r2, #140	; 0x8c
    8424:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    8426:	492d      	ldr	r1, [pc, #180]	; (84dc <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    8428:	3204      	adds	r2, #4
    842a:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    842c:	492c      	ldr	r1, [pc, #176]	; (84e0 <LORAREG_InitGetAttrFnPtrsEU+0x108>)
    842e:	3204      	adds	r2, #4
    8430:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_DutyCycleTimer;
    8432:	492c      	ldr	r1, [pc, #176]	; (84e4 <LORAREG_InitGetAttrFnPtrsEU+0x10c>)
    8434:	3204      	adds	r2, #4
    8436:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    8438:	492b      	ldr	r1, [pc, #172]	; (84e8 <LORAREG_InitGetAttrFnPtrsEU+0x110>)
    843a:	3204      	adds	r2, #4
    843c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    843e:	492b      	ldr	r1, [pc, #172]	; (84ec <LORAREG_InitGetAttrFnPtrsEU+0x114>)
    8440:	3204      	adds	r2, #4
    8442:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    8444:	492a      	ldr	r1, [pc, #168]	; (84f0 <LORAREG_InitGetAttrFnPtrsEU+0x118>)
    8446:	3204      	adds	r2, #4
    8448:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    844a:	492a      	ldr	r1, [pc, #168]	; (84f4 <LORAREG_InitGetAttrFnPtrsEU+0x11c>)
    844c:	3204      	adds	r2, #4
    844e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    8450:	4929      	ldr	r1, [pc, #164]	; (84f8 <LORAREG_InitGetAttrFnPtrsEU+0x120>)
    8452:	3204      	adds	r2, #4
    8454:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    8456:	4929      	ldr	r1, [pc, #164]	; (84fc <LORAREG_InitGetAttrFnPtrsEU+0x124>)
    8458:	3204      	adds	r2, #4
    845a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    845c:	4928      	ldr	r1, [pc, #160]	; (8500 <LORAREG_InitGetAttrFnPtrsEU+0x128>)
    845e:	3204      	adds	r2, #4
    8460:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    8462:	4928      	ldr	r1, [pc, #160]	; (8504 <LORAREG_InitGetAttrFnPtrsEU+0x12c>)
    8464:	3204      	adds	r2, #4
    8466:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    8468:	4927      	ldr	r1, [pc, #156]	; (8508 <LORAREG_InitGetAttrFnPtrsEU+0x130>)
    846a:	3204      	adds	r2, #4
    846c:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    846e:	4927      	ldr	r1, [pc, #156]	; (850c <LORAREG_InitGetAttrFnPtrsEU+0x134>)
    8470:	3204      	adds	r2, #4
    8472:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    8474:	4926      	ldr	r1, [pc, #152]	; (8510 <LORAREG_InitGetAttrFnPtrsEU+0x138>)
    8476:	3204      	adds	r2, #4
    8478:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    847a:	4926      	ldr	r1, [pc, #152]	; (8514 <LORAREG_InitGetAttrFnPtrsEU+0x13c>)
    847c:	320c      	adds	r2, #12
    847e:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    8480:	4925      	ldr	r1, [pc, #148]	; (8518 <LORAREG_InitGetAttrFnPtrsEU+0x140>)
    8482:	3208      	adds	r2, #8
    8484:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    8486:	4925      	ldr	r1, [pc, #148]	; (851c <LORAREG_InitGetAttrFnPtrsEU+0x144>)
    8488:	3204      	adds	r2, #4
    848a:	5099      	str	r1, [r3, r2]
}
    848c:	4770      	bx	lr
    848e:	46c0      	nop			; (mov r8, r8)
    8490:	20000b58 	.word	0x20000b58
    8494:	00006475 	.word	0x00006475
    8498:	00007b61 	.word	0x00007b61
    849c:	00007ba1 	.word	0x00007ba1
    84a0:	00007bdd 	.word	0x00007bdd
    84a4:	000052c1 	.word	0x000052c1
    84a8:	000052d1 	.word	0x000052d1
    84ac:	000052ed 	.word	0x000052ed
    84b0:	000052fd 	.word	0x000052fd
    84b4:	00006119 	.word	0x00006119
    84b8:	0000530d 	.word	0x0000530d
    84bc:	0000531d 	.word	0x0000531d
    84c0:	00006379 	.word	0x00006379
    84c4:	0000562d 	.word	0x0000562d
    84c8:	0000536d 	.word	0x0000536d
    84cc:	0000630d 	.word	0x0000630d
    84d0:	00005ea1 	.word	0x00005ea1
    84d4:	000055e5 	.word	0x000055e5
    84d8:	00007c15 	.word	0x00007c15
    84dc:	00007c4d 	.word	0x00007c4d
    84e0:	00007c85 	.word	0x00007c85
    84e4:	00006179 	.word	0x00006179
    84e8:	000053cd 	.word	0x000053cd
    84ec:	000053d7 	.word	0x000053d7
    84f0:	000053e1 	.word	0x000053e1
    84f4:	000053ed 	.word	0x000053ed
    84f8:	000053f9 	.word	0x000053f9
    84fc:	00005403 	.word	0x00005403
    8500:	0000540b 	.word	0x0000540b
    8504:	00005413 	.word	0x00005413
    8508:	00007cf5 	.word	0x00007cf5
    850c:	00006ca5 	.word	0x00006ca5
    8510:	0000543d 	.word	0x0000543d
    8514:	00006131 	.word	0x00006131
    8518:	0000541d 	.word	0x0000541d
    851c:	0000542d 	.word	0x0000542d

00008520 <LORAREG_InitGetAttrFnPtrsAS>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT3;
    8520:	4b2d      	ldr	r3, [pc, #180]	; (85d8 <LORAREG_InitGetAttrFnPtrsAS+0xb8>)
    8522:	4a2e      	ldr	r2, [pc, #184]	; (85dc <LORAREG_InitGetAttrFnPtrsAS+0xbc>)
    8524:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    8526:	4a2e      	ldr	r2, [pc, #184]	; (85e0 <LORAREG_InitGetAttrFnPtrsAS+0xc0>)
    8528:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    852a:	4a2e      	ldr	r2, [pc, #184]	; (85e4 <LORAREG_InitGetAttrFnPtrsAS+0xc4>)
    852c:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT3;
    852e:	4a2e      	ldr	r2, [pc, #184]	; (85e8 <LORAREG_InitGetAttrFnPtrsAS+0xc8>)
    8530:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    8532:	4a2e      	ldr	r2, [pc, #184]	; (85ec <LORAREG_InitGetAttrFnPtrsAS+0xcc>)
    8534:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    8536:	4a2e      	ldr	r2, [pc, #184]	; (85f0 <LORAREG_InitGetAttrFnPtrsAS+0xd0>)
    8538:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    853a:	4a2e      	ldr	r2, [pc, #184]	; (85f4 <LORAREG_InitGetAttrFnPtrsAS+0xd4>)
    853c:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    853e:	4a2e      	ldr	r2, [pc, #184]	; (85f8 <LORAREG_InitGetAttrFnPtrsAS+0xd8>)
    8540:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    8542:	4a2e      	ldr	r2, [pc, #184]	; (85fc <LORAREG_InitGetAttrFnPtrsAS+0xdc>)
    8544:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    8546:	4a2e      	ldr	r2, [pc, #184]	; (8600 <LORAREG_InitGetAttrFnPtrsAS+0xe0>)
    8548:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    854a:	4a2e      	ldr	r2, [pc, #184]	; (8604 <LORAREG_InitGetAttrFnPtrsAS+0xe4>)
    854c:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    854e:	4a2e      	ldr	r2, [pc, #184]	; (8608 <LORAREG_InitGetAttrFnPtrsAS+0xe8>)
    8550:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    8552:	4a2e      	ldr	r2, [pc, #184]	; (860c <LORAREG_InitGetAttrFnPtrsAS+0xec>)
    8554:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    8556:	4a2e      	ldr	r2, [pc, #184]	; (8610 <LORAREG_InitGetAttrFnPtrsAS+0xf0>)
    8558:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType4;
    855a:	4a2e      	ldr	r2, [pc, #184]	; (8614 <LORAREG_InitGetAttrFnPtrsAS+0xf4>)
    855c:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    855e:	492e      	ldr	r1, [pc, #184]	; (8618 <LORAREG_InitGetAttrFnPtrsAS+0xf8>)
    8560:	2280      	movs	r2, #128	; 0x80
    8562:	5099      	str	r1, [r3, r2]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    8564:	492d      	ldr	r1, [pc, #180]	; (861c <LORAREG_InitGetAttrFnPtrsAS+0xfc>)
    8566:	320c      	adds	r2, #12
    8568:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    856a:	492d      	ldr	r1, [pc, #180]	; (8620 <LORAREG_InitGetAttrFnPtrsAS+0x100>)
    856c:	3204      	adds	r2, #4
    856e:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    8570:	492c      	ldr	r1, [pc, #176]	; (8624 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    8572:	3204      	adds	r2, #4
    8574:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    8576:	492c      	ldr	r1, [pc, #176]	; (8628 <LORAREG_InitGetAttrFnPtrsAS+0x108>)
    8578:	3208      	adds	r2, #8
    857a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    857c:	492b      	ldr	r1, [pc, #172]	; (862c <LORAREG_InitGetAttrFnPtrsAS+0x10c>)
    857e:	3204      	adds	r2, #4
    8580:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    8582:	492b      	ldr	r1, [pc, #172]	; (8630 <LORAREG_InitGetAttrFnPtrsAS+0x110>)
    8584:	3204      	adds	r2, #4
    8586:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    8588:	492a      	ldr	r1, [pc, #168]	; (8634 <LORAREG_InitGetAttrFnPtrsAS+0x114>)
    858a:	3204      	adds	r2, #4
    858c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    858e:	492a      	ldr	r1, [pc, #168]	; (8638 <LORAREG_InitGetAttrFnPtrsAS+0x118>)
    8590:	3204      	adds	r2, #4
    8592:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    8594:	4929      	ldr	r1, [pc, #164]	; (863c <LORAREG_InitGetAttrFnPtrsAS+0x11c>)
    8596:	3204      	adds	r2, #4
    8598:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    859a:	4929      	ldr	r1, [pc, #164]	; (8640 <LORAREG_InitGetAttrFnPtrsAS+0x120>)
    859c:	3204      	adds	r2, #4
    859e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    85a0:	4928      	ldr	r1, [pc, #160]	; (8644 <LORAREG_InitGetAttrFnPtrsAS+0x124>)
    85a2:	3204      	adds	r2, #4
    85a4:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    85a6:	4928      	ldr	r1, [pc, #160]	; (8648 <LORAREG_InitGetAttrFnPtrsAS+0x128>)
    85a8:	3204      	adds	r2, #4
    85aa:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    85ac:	4927      	ldr	r1, [pc, #156]	; (864c <LORAREG_InitGetAttrFnPtrsAS+0x12c>)
    85ae:	3204      	adds	r2, #4
    85b0:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    85b2:	4927      	ldr	r1, [pc, #156]	; (8650 <LORAREG_InitGetAttrFnPtrsAS+0x130>)
    85b4:	3204      	adds	r2, #4
    85b6:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    85b8:	4926      	ldr	r1, [pc, #152]	; (8654 <LORAREG_InitGetAttrFnPtrsAS+0x134>)
    85ba:	320c      	adds	r2, #12
    85bc:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    85be:	4926      	ldr	r1, [pc, #152]	; (8658 <LORAREG_InitGetAttrFnPtrsAS+0x138>)
    85c0:	3208      	adds	r2, #8
    85c2:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    85c4:	4925      	ldr	r1, [pc, #148]	; (865c <LORAREG_InitGetAttrFnPtrsAS+0x13c>)
    85c6:	3204      	adds	r2, #4
    85c8:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT2;
    85ca:	4a25      	ldr	r2, [pc, #148]	; (8660 <LORAREG_InitGetAttrFnPtrsAS+0x140>)
    85cc:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_DutyCycleTimer;
    85ce:	4925      	ldr	r1, [pc, #148]	; (8664 <LORAREG_InitGetAttrFnPtrsAS+0x144>)
    85d0:	2298      	movs	r2, #152	; 0x98
    85d2:	5099      	str	r1, [r3, r2]
}
    85d4:	4770      	bx	lr
    85d6:	46c0      	nop			; (mov r8, r8)
    85d8:	20000b58 	.word	0x20000b58
    85dc:	000065b1 	.word	0x000065b1
    85e0:	00007b61 	.word	0x00007b61
    85e4:	00007ba1 	.word	0x00007ba1
    85e8:	00007afd 	.word	0x00007afd
    85ec:	000052c1 	.word	0x000052c1
    85f0:	000052d1 	.word	0x000052d1
    85f4:	000052ed 	.word	0x000052ed
    85f8:	000052fd 	.word	0x000052fd
    85fc:	00006119 	.word	0x00006119
    8600:	0000530d 	.word	0x0000530d
    8604:	0000531d 	.word	0x0000531d
    8608:	00006379 	.word	0x00006379
    860c:	0000562d 	.word	0x0000562d
    8610:	0000536d 	.word	0x0000536d
    8614:	000064bd 	.word	0x000064bd
    8618:	00005ea1 	.word	0x00005ea1
    861c:	00007c15 	.word	0x00007c15
    8620:	00007c4d 	.word	0x00007c4d
    8624:	00007c85 	.word	0x00007c85
    8628:	000053cd 	.word	0x000053cd
    862c:	000053d7 	.word	0x000053d7
    8630:	000053e1 	.word	0x000053e1
    8634:	000053ed 	.word	0x000053ed
    8638:	000053f9 	.word	0x000053f9
    863c:	00005403 	.word	0x00005403
    8640:	0000540b 	.word	0x0000540b
    8644:	00005413 	.word	0x00005413
    8648:	00007cf5 	.word	0x00007cf5
    864c:	00006ca5 	.word	0x00006ca5
    8650:	0000543d 	.word	0x0000543d
    8654:	00006131 	.word	0x00006131
    8658:	0000541d 	.word	0x0000541d
    865c:	0000542d 	.word	0x0000542d
    8660:	000055e5 	.word	0x000055e5
    8664:	00006179 	.word	0x00006179

00008668 <LORAREG_InitGetAttrFnPtrsAU>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT1;
    8668:	4b2b      	ldr	r3, [pc, #172]	; (8718 <LORAREG_InitGetAttrFnPtrsAU+0xb0>)
    866a:	4a2c      	ldr	r2, [pc, #176]	; (871c <LORAREG_InitGetAttrFnPtrsAU+0xb4>)
    866c:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT1;
    866e:	4a2c      	ldr	r2, [pc, #176]	; (8720 <LORAREG_InitGetAttrFnPtrsAU+0xb8>)
    8670:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT1;
    8672:	4a2c      	ldr	r2, [pc, #176]	; (8724 <LORAREG_InitGetAttrFnPtrsAU+0xbc>)
    8674:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT1;
    8676:	4a2c      	ldr	r2, [pc, #176]	; (8728 <LORAREG_InitGetAttrFnPtrsAU+0xc0>)
    8678:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    867a:	4a2c      	ldr	r2, [pc, #176]	; (872c <LORAREG_InitGetAttrFnPtrsAU+0xc4>)
    867c:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    867e:	4a2c      	ldr	r2, [pc, #176]	; (8730 <LORAREG_InitGetAttrFnPtrsAU+0xc8>)
    8680:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    8682:	4a2c      	ldr	r2, [pc, #176]	; (8734 <LORAREG_InitGetAttrFnPtrsAU+0xcc>)
    8684:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    8686:	4a2c      	ldr	r2, [pc, #176]	; (8738 <LORAREG_InitGetAttrFnPtrsAU+0xd0>)
    8688:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    868a:	4a2c      	ldr	r2, [pc, #176]	; (873c <LORAREG_InitGetAttrFnPtrsAU+0xd4>)
    868c:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    868e:	4a2c      	ldr	r2, [pc, #176]	; (8740 <LORAREG_InitGetAttrFnPtrsAU+0xd8>)
    8690:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    8692:	4a2c      	ldr	r2, [pc, #176]	; (8744 <LORAREG_InitGetAttrFnPtrsAU+0xdc>)
    8694:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT1;
    8696:	4a2c      	ldr	r2, [pc, #176]	; (8748 <LORAREG_InitGetAttrFnPtrsAU+0xe0>)
    8698:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    869a:	4a2c      	ldr	r2, [pc, #176]	; (874c <LORAREG_InitGetAttrFnPtrsAU+0xe4>)
    869c:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    869e:	4a2c      	ldr	r2, [pc, #176]	; (8750 <LORAREG_InitGetAttrFnPtrsAU+0xe8>)
    86a0:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType1;
    86a2:	4a2c      	ldr	r2, [pc, #176]	; (8754 <LORAREG_InitGetAttrFnPtrsAU+0xec>)
    86a4:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    86a6:	492c      	ldr	r1, [pc, #176]	; (8758 <LORAREG_InitGetAttrFnPtrsAU+0xf0>)
    86a8:	2280      	movs	r2, #128	; 0x80
    86aa:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT1;
    86ac:	4a2b      	ldr	r2, [pc, #172]	; (875c <LORAREG_InitGetAttrFnPtrsAU+0xf4>)
    86ae:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[DUTY_CYCLE_TIMER] = LORAREG_GetAttr_MinDutyCycleTimer;	
    86b0:	4a2b      	ldr	r2, [pc, #172]	; (8760 <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    86b2:	67da      	str	r2, [r3, #124]	; 0x7c
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT1;
    86b4:	492b      	ldr	r1, [pc, #172]	; (8764 <LORAREG_InitGetAttrFnPtrsAU+0xfc>)
    86b6:	228c      	movs	r2, #140	; 0x8c
    86b8:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT1;
    86ba:	492b      	ldr	r1, [pc, #172]	; (8768 <LORAREG_InitGetAttrFnPtrsAU+0x100>)
    86bc:	3204      	adds	r2, #4
    86be:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT1;
    86c0:	492a      	ldr	r1, [pc, #168]	; (876c <LORAREG_InitGetAttrFnPtrsAU+0x104>)
    86c2:	3204      	adds	r2, #4
    86c4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    86c6:	492a      	ldr	r1, [pc, #168]	; (8770 <LORAREG_InitGetAttrFnPtrsAU+0x108>)
    86c8:	3208      	adds	r2, #8
    86ca:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    86cc:	4929      	ldr	r1, [pc, #164]	; (8774 <LORAREG_InitGetAttrFnPtrsAU+0x10c>)
    86ce:	3204      	adds	r2, #4
    86d0:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    86d2:	4929      	ldr	r1, [pc, #164]	; (8778 <LORAREG_InitGetAttrFnPtrsAU+0x110>)
    86d4:	3204      	adds	r2, #4
    86d6:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    86d8:	4928      	ldr	r1, [pc, #160]	; (877c <LORAREG_InitGetAttrFnPtrsAU+0x114>)
    86da:	3204      	adds	r2, #4
    86dc:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    86de:	4928      	ldr	r1, [pc, #160]	; (8780 <LORAREG_InitGetAttrFnPtrsAU+0x118>)
    86e0:	3204      	adds	r2, #4
    86e2:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    86e4:	4927      	ldr	r1, [pc, #156]	; (8784 <LORAREG_InitGetAttrFnPtrsAU+0x11c>)
    86e6:	3204      	adds	r2, #4
    86e8:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    86ea:	4927      	ldr	r1, [pc, #156]	; (8788 <LORAREG_InitGetAttrFnPtrsAU+0x120>)
    86ec:	3204      	adds	r2, #4
    86ee:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    86f0:	4926      	ldr	r1, [pc, #152]	; (878c <LORAREG_InitGetAttrFnPtrsAU+0x124>)
    86f2:	3204      	adds	r2, #4
    86f4:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT1;
    86f6:	4926      	ldr	r1, [pc, #152]	; (8790 <LORAREG_InitGetAttrFnPtrsAU+0x128>)
    86f8:	3204      	adds	r2, #4
    86fa:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel1;
    86fc:	4925      	ldr	r1, [pc, #148]	; (8794 <LORAREG_InitGetAttrFnPtrsAU+0x12c>)
    86fe:	3204      	adds	r2, #4
    8700:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    8702:	4925      	ldr	r1, [pc, #148]	; (8798 <LORAREG_InitGetAttrFnPtrsAU+0x130>)
    8704:	3204      	adds	r2, #4
    8706:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    8708:	4924      	ldr	r1, [pc, #144]	; (879c <LORAREG_InitGetAttrFnPtrsAU+0x134>)
    870a:	3214      	adds	r2, #20
    870c:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    870e:	4924      	ldr	r1, [pc, #144]	; (87a0 <LORAREG_InitGetAttrFnPtrsAU+0x138>)
    8710:	3204      	adds	r2, #4
    8712:	5099      	str	r1, [r3, r2]
}
    8714:	4770      	bx	lr
    8716:	46c0      	nop			; (mov r8, r8)
    8718:	20000b58 	.word	0x20000b58
    871c:	00005479 	.word	0x00005479
    8720:	00007e9d 	.word	0x00007e9d
    8724:	00007eed 	.word	0x00007eed
    8728:	00007f39 	.word	0x00007f39
    872c:	000052c1 	.word	0x000052c1
    8730:	000052d1 	.word	0x000052d1
    8734:	000052ed 	.word	0x000052ed
    8738:	000052fd 	.word	0x000052fd
    873c:	00006119 	.word	0x00006119
    8740:	0000530d 	.word	0x0000530d
    8744:	0000531d 	.word	0x0000531d
    8748:	00005fed 	.word	0x00005fed
    874c:	0000562d 	.word	0x0000562d
    8750:	0000536d 	.word	0x0000536d
    8754:	00005f41 	.word	0x00005f41
    8758:	00005ea1 	.word	0x00005ea1
    875c:	000053b9 	.word	0x000053b9
    8760:	000053c3 	.word	0x000053c3
    8764:	00007f85 	.word	0x00007f85
    8768:	00007fd1 	.word	0x00007fd1
    876c:	0000801d 	.word	0x0000801d
    8770:	000053cd 	.word	0x000053cd
    8774:	000053d7 	.word	0x000053d7
    8778:	000053e1 	.word	0x000053e1
    877c:	000053ed 	.word	0x000053ed
    8780:	000053f9 	.word	0x000053f9
    8784:	00005403 	.word	0x00005403
    8788:	0000540b 	.word	0x0000540b
    878c:	00005413 	.word	0x00005413
    8790:	00008105 	.word	0x00008105
    8794:	00005e75 	.word	0x00005e75
    8798:	0000543d 	.word	0x0000543d
    879c:	0000541d 	.word	0x0000541d
    87a0:	0000542d 	.word	0x0000542d

000087a4 <LORAREG_InitGetAttrFnPtrsIN>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    87a4:	4b2a      	ldr	r3, [pc, #168]	; (8850 <LORAREG_InitGetAttrFnPtrsIN+0xac>)
    87a6:	4a2b      	ldr	r2, [pc, #172]	; (8854 <LORAREG_InitGetAttrFnPtrsIN+0xb0>)
    87a8:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    87aa:	4a2b      	ldr	r2, [pc, #172]	; (8858 <LORAREG_InitGetAttrFnPtrsIN+0xb4>)
    87ac:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    87ae:	4a2b      	ldr	r2, [pc, #172]	; (885c <LORAREG_InitGetAttrFnPtrsIN+0xb8>)
    87b0:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    87b2:	4a2b      	ldr	r2, [pc, #172]	; (8860 <LORAREG_InitGetAttrFnPtrsIN+0xbc>)
    87b4:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    87b6:	4a2b      	ldr	r2, [pc, #172]	; (8864 <LORAREG_InitGetAttrFnPtrsIN+0xc0>)
    87b8:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    87ba:	4a2b      	ldr	r2, [pc, #172]	; (8868 <LORAREG_InitGetAttrFnPtrsIN+0xc4>)
    87bc:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    87be:	4a2b      	ldr	r2, [pc, #172]	; (886c <LORAREG_InitGetAttrFnPtrsIN+0xc8>)
    87c0:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    87c2:	4a2b      	ldr	r2, [pc, #172]	; (8870 <LORAREG_InitGetAttrFnPtrsIN+0xcc>)
    87c4:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    87c6:	4a2b      	ldr	r2, [pc, #172]	; (8874 <LORAREG_InitGetAttrFnPtrsIN+0xd0>)
    87c8:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    87ca:	4a2b      	ldr	r2, [pc, #172]	; (8878 <LORAREG_InitGetAttrFnPtrsIN+0xd4>)
    87cc:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    87ce:	4a2b      	ldr	r2, [pc, #172]	; (887c <LORAREG_InitGetAttrFnPtrsIN+0xd8>)
    87d0:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    87d2:	4a2b      	ldr	r2, [pc, #172]	; (8880 <LORAREG_InitGetAttrFnPtrsIN+0xdc>)
    87d4:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    87d6:	4a2b      	ldr	r2, [pc, #172]	; (8884 <LORAREG_InitGetAttrFnPtrsIN+0xe0>)
    87d8:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    87da:	4a2b      	ldr	r2, [pc, #172]	; (8888 <LORAREG_InitGetAttrFnPtrsIN+0xe4>)
    87dc:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType3;
    87de:	4a2b      	ldr	r2, [pc, #172]	; (888c <LORAREG_InitGetAttrFnPtrsIN+0xe8>)
    87e0:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    87e2:	492b      	ldr	r1, [pc, #172]	; (8890 <LORAREG_InitGetAttrFnPtrsIN+0xec>)
    87e4:	2280      	movs	r2, #128	; 0x80
    87e6:	5099      	str	r1, [r3, r2]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    87e8:	492a      	ldr	r1, [pc, #168]	; (8894 <LORAREG_InitGetAttrFnPtrsIN+0xf0>)
    87ea:	320c      	adds	r2, #12
    87ec:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    87ee:	492a      	ldr	r1, [pc, #168]	; (8898 <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    87f0:	3204      	adds	r2, #4
    87f2:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    87f4:	4929      	ldr	r1, [pc, #164]	; (889c <LORAREG_InitGetAttrFnPtrsIN+0xf8>)
    87f6:	3204      	adds	r2, #4
    87f8:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    87fa:	4929      	ldr	r1, [pc, #164]	; (88a0 <LORAREG_InitGetAttrFnPtrsIN+0xfc>)
    87fc:	3208      	adds	r2, #8
    87fe:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    8800:	4928      	ldr	r1, [pc, #160]	; (88a4 <LORAREG_InitGetAttrFnPtrsIN+0x100>)
    8802:	3204      	adds	r2, #4
    8804:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    8806:	4928      	ldr	r1, [pc, #160]	; (88a8 <LORAREG_InitGetAttrFnPtrsIN+0x104>)
    8808:	3204      	adds	r2, #4
    880a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    880c:	4927      	ldr	r1, [pc, #156]	; (88ac <LORAREG_InitGetAttrFnPtrsIN+0x108>)
    880e:	3204      	adds	r2, #4
    8810:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    8812:	4927      	ldr	r1, [pc, #156]	; (88b0 <LORAREG_InitGetAttrFnPtrsIN+0x10c>)
    8814:	3204      	adds	r2, #4
    8816:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    8818:	4926      	ldr	r1, [pc, #152]	; (88b4 <LORAREG_InitGetAttrFnPtrsIN+0x110>)
    881a:	3204      	adds	r2, #4
    881c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    881e:	4926      	ldr	r1, [pc, #152]	; (88b8 <LORAREG_InitGetAttrFnPtrsIN+0x114>)
    8820:	3204      	adds	r2, #4
    8822:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    8824:	4925      	ldr	r1, [pc, #148]	; (88bc <LORAREG_InitGetAttrFnPtrsIN+0x118>)
    8826:	3204      	adds	r2, #4
    8828:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    882a:	4925      	ldr	r1, [pc, #148]	; (88c0 <LORAREG_InitGetAttrFnPtrsIN+0x11c>)
    882c:	3204      	adds	r2, #4
    882e:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    8830:	4924      	ldr	r1, [pc, #144]	; (88c4 <LORAREG_InitGetAttrFnPtrsIN+0x120>)
    8832:	3204      	adds	r2, #4
    8834:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    8836:	4924      	ldr	r1, [pc, #144]	; (88c8 <LORAREG_InitGetAttrFnPtrsIN+0x124>)
    8838:	3204      	adds	r2, #4
    883a:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    883c:	4923      	ldr	r1, [pc, #140]	; (88cc <LORAREG_InitGetAttrFnPtrsIN+0x128>)
    883e:	320c      	adds	r2, #12
    8840:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    8842:	4923      	ldr	r1, [pc, #140]	; (88d0 <LORAREG_InitGetAttrFnPtrsIN+0x12c>)
    8844:	3208      	adds	r2, #8
    8846:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    8848:	4922      	ldr	r1, [pc, #136]	; (88d4 <LORAREG_InitGetAttrFnPtrsIN+0x130>)
    884a:	3204      	adds	r2, #4
    884c:	5099      	str	r1, [r3, r2]
}
    884e:	4770      	bx	lr
    8850:	20000b58 	.word	0x20000b58
    8854:	00006475 	.word	0x00006475
    8858:	00007b61 	.word	0x00007b61
    885c:	00007ba1 	.word	0x00007ba1
    8860:	00007bdd 	.word	0x00007bdd
    8864:	000052c1 	.word	0x000052c1
    8868:	000052d1 	.word	0x000052d1
    886c:	000052ed 	.word	0x000052ed
    8870:	000052fd 	.word	0x000052fd
    8874:	00006119 	.word	0x00006119
    8878:	0000530d 	.word	0x0000530d
    887c:	0000531d 	.word	0x0000531d
    8880:	00006379 	.word	0x00006379
    8884:	0000562d 	.word	0x0000562d
    8888:	0000536d 	.word	0x0000536d
    888c:	000065f9 	.word	0x000065f9
    8890:	00005ea1 	.word	0x00005ea1
    8894:	00007c15 	.word	0x00007c15
    8898:	00007c4d 	.word	0x00007c4d
    889c:	00007c85 	.word	0x00007c85
    88a0:	000053cd 	.word	0x000053cd
    88a4:	000053d7 	.word	0x000053d7
    88a8:	000053e1 	.word	0x000053e1
    88ac:	000053ed 	.word	0x000053ed
    88b0:	000053f9 	.word	0x000053f9
    88b4:	00005403 	.word	0x00005403
    88b8:	0000540b 	.word	0x0000540b
    88bc:	00005413 	.word	0x00005413
    88c0:	00007cf5 	.word	0x00007cf5
    88c4:	00006ca5 	.word	0x00006ca5
    88c8:	0000543d 	.word	0x0000543d
    88cc:	00006131 	.word	0x00006131
    88d0:	0000541d 	.word	0x0000541d
    88d4:	0000542d 	.word	0x0000542d

000088d8 <LORAREG_InitGetAttrFnPtrsJP>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT3;
    88d8:	4b30      	ldr	r3, [pc, #192]	; (899c <LORAREG_InitGetAttrFnPtrsJP+0xc4>)
    88da:	4a31      	ldr	r2, [pc, #196]	; (89a0 <LORAREG_InitGetAttrFnPtrsJP+0xc8>)
    88dc:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    88de:	4a31      	ldr	r2, [pc, #196]	; (89a4 <LORAREG_InitGetAttrFnPtrsJP+0xcc>)
    88e0:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    88e2:	4a31      	ldr	r2, [pc, #196]	; (89a8 <LORAREG_InitGetAttrFnPtrsJP+0xd0>)
    88e4:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT3;
    88e6:	4a31      	ldr	r2, [pc, #196]	; (89ac <LORAREG_InitGetAttrFnPtrsJP+0xd4>)
    88e8:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    88ea:	4a31      	ldr	r2, [pc, #196]	; (89b0 <LORAREG_InitGetAttrFnPtrsJP+0xd8>)
    88ec:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    88ee:	4a31      	ldr	r2, [pc, #196]	; (89b4 <LORAREG_InitGetAttrFnPtrsJP+0xdc>)
    88f0:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    88f2:	4a31      	ldr	r2, [pc, #196]	; (89b8 <LORAREG_InitGetAttrFnPtrsJP+0xe0>)
    88f4:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    88f6:	4a31      	ldr	r2, [pc, #196]	; (89bc <LORAREG_InitGetAttrFnPtrsJP+0xe4>)
    88f8:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    88fa:	4a31      	ldr	r2, [pc, #196]	; (89c0 <LORAREG_InitGetAttrFnPtrsJP+0xe8>)
    88fc:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    88fe:	4a31      	ldr	r2, [pc, #196]	; (89c4 <LORAREG_InitGetAttrFnPtrsJP+0xec>)
    8900:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    8902:	4a31      	ldr	r2, [pc, #196]	; (89c8 <LORAREG_InitGetAttrFnPtrsJP+0xf0>)
    8904:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    8906:	4a31      	ldr	r2, [pc, #196]	; (89cc <LORAREG_InitGetAttrFnPtrsJP+0xf4>)
    8908:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    890a:	4a31      	ldr	r2, [pc, #196]	; (89d0 <LORAREG_InitGetAttrFnPtrsJP+0xf8>)
    890c:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    890e:	4a31      	ldr	r2, [pc, #196]	; (89d4 <LORAREG_InitGetAttrFnPtrsJP+0xfc>)
    8910:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType4;
    8912:	4a31      	ldr	r2, [pc, #196]	; (89d8 <LORAREG_InitGetAttrFnPtrsJP+0x100>)
    8914:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    8916:	4931      	ldr	r1, [pc, #196]	; (89dc <LORAREG_InitGetAttrFnPtrsJP+0x104>)
    8918:	2280      	movs	r2, #128	; 0x80
    891a:	5099      	str	r1, [r3, r2]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    891c:	4930      	ldr	r1, [pc, #192]	; (89e0 <LORAREG_InitGetAttrFnPtrsJP+0x108>)
    891e:	320c      	adds	r2, #12
    8920:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    8922:	4930      	ldr	r1, [pc, #192]	; (89e4 <LORAREG_InitGetAttrFnPtrsJP+0x10c>)
    8924:	3204      	adds	r2, #4
    8926:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    8928:	492f      	ldr	r1, [pc, #188]	; (89e8 <LORAREG_InitGetAttrFnPtrsJP+0x110>)
    892a:	3204      	adds	r2, #4
    892c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    892e:	492f      	ldr	r1, [pc, #188]	; (89ec <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    8930:	3208      	adds	r2, #8
    8932:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    8934:	492e      	ldr	r1, [pc, #184]	; (89f0 <LORAREG_InitGetAttrFnPtrsJP+0x118>)
    8936:	3204      	adds	r2, #4
    8938:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    893a:	492e      	ldr	r1, [pc, #184]	; (89f4 <LORAREG_InitGetAttrFnPtrsJP+0x11c>)
    893c:	3204      	adds	r2, #4
    893e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    8940:	492d      	ldr	r1, [pc, #180]	; (89f8 <LORAREG_InitGetAttrFnPtrsJP+0x120>)
    8942:	3204      	adds	r2, #4
    8944:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    8946:	492d      	ldr	r1, [pc, #180]	; (89fc <LORAREG_InitGetAttrFnPtrsJP+0x124>)
    8948:	3204      	adds	r2, #4
    894a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    894c:	492c      	ldr	r1, [pc, #176]	; (8a00 <LORAREG_InitGetAttrFnPtrsJP+0x128>)
    894e:	3204      	adds	r2, #4
    8950:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    8952:	492c      	ldr	r1, [pc, #176]	; (8a04 <LORAREG_InitGetAttrFnPtrsJP+0x12c>)
    8954:	3204      	adds	r2, #4
    8956:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    8958:	492b      	ldr	r1, [pc, #172]	; (8a08 <LORAREG_InitGetAttrFnPtrsJP+0x130>)
    895a:	3204      	adds	r2, #4
    895c:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    895e:	492b      	ldr	r1, [pc, #172]	; (8a0c <LORAREG_InitGetAttrFnPtrsJP+0x134>)
    8960:	3204      	adds	r2, #4
    8962:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    8964:	492a      	ldr	r1, [pc, #168]	; (8a10 <LORAREG_InitGetAttrFnPtrsJP+0x138>)
    8966:	3204      	adds	r2, #4
    8968:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    896a:	492a      	ldr	r1, [pc, #168]	; (8a14 <LORAREG_InitGetAttrFnPtrsJP+0x13c>)
    896c:	3204      	adds	r2, #4
    896e:	5099      	str	r1, [r3, r2]
    pGetAttr[DEFAULT_LBT_PARAMS] = LORAREG_GetAttr_DefLBTParams;
    8970:	4929      	ldr	r1, [pc, #164]	; (8a18 <LORAREG_InitGetAttrFnPtrsJP+0x140>)
    8972:	3204      	adds	r2, #4
    8974:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_LBT_CHANNEL_PAUSE_TIMER] = LORAREG_GetAttr_minLBTChPauseTimer;
    8976:	4929      	ldr	r1, [pc, #164]	; (8a1c <LORAREG_InitGetAttrFnPtrsJP+0x144>)
    8978:	3204      	adds	r2, #4
    897a:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    897c:	4928      	ldr	r1, [pc, #160]	; (8a20 <LORAREG_InitGetAttrFnPtrsJP+0x148>)
    897e:	3204      	adds	r2, #4
    8980:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    8982:	4928      	ldr	r1, [pc, #160]	; (8a24 <LORAREG_InitGetAttrFnPtrsJP+0x14c>)
    8984:	3208      	adds	r2, #8
    8986:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    8988:	4927      	ldr	r1, [pc, #156]	; (8a28 <LORAREG_InitGetAttrFnPtrsJP+0x150>)
    898a:	3204      	adds	r2, #4
    898c:	5099      	str	r1, [r3, r2]
	pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT2;
    898e:	4a27      	ldr	r2, [pc, #156]	; (8a2c <LORAREG_InitGetAttrFnPtrsJP+0x154>)
    8990:	679a      	str	r2, [r3, #120]	; 0x78
	pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_DutyCycleTimer;
    8992:	4927      	ldr	r1, [pc, #156]	; (8a30 <LORAREG_InitGetAttrFnPtrsJP+0x158>)
    8994:	2298      	movs	r2, #152	; 0x98
    8996:	5099      	str	r1, [r3, r2]
}
    8998:	4770      	bx	lr
    899a:	46c0      	nop			; (mov r8, r8)
    899c:	20000b58 	.word	0x20000b58
    89a0:	000065b1 	.word	0x000065b1
    89a4:	00007b61 	.word	0x00007b61
    89a8:	00007ba1 	.word	0x00007ba1
    89ac:	00007afd 	.word	0x00007afd
    89b0:	000052c1 	.word	0x000052c1
    89b4:	000052d1 	.word	0x000052d1
    89b8:	000052ed 	.word	0x000052ed
    89bc:	000052fd 	.word	0x000052fd
    89c0:	00006119 	.word	0x00006119
    89c4:	0000530d 	.word	0x0000530d
    89c8:	0000531d 	.word	0x0000531d
    89cc:	00006379 	.word	0x00006379
    89d0:	0000562d 	.word	0x0000562d
    89d4:	0000536d 	.word	0x0000536d
    89d8:	000064bd 	.word	0x000064bd
    89dc:	00005ea1 	.word	0x00005ea1
    89e0:	00007c15 	.word	0x00007c15
    89e4:	00007c4d 	.word	0x00007c4d
    89e8:	00007c85 	.word	0x00007c85
    89ec:	000053cd 	.word	0x000053cd
    89f0:	000053d7 	.word	0x000053d7
    89f4:	000053e1 	.word	0x000053e1
    89f8:	000053ed 	.word	0x000053ed
    89fc:	000053f9 	.word	0x000053f9
    8a00:	00005403 	.word	0x00005403
    8a04:	0000540b 	.word	0x0000540b
    8a08:	00005413 	.word	0x00005413
    8a0c:	00007cf5 	.word	0x00007cf5
    8a10:	00006ca5 	.word	0x00006ca5
    8a14:	0000543d 	.word	0x0000543d
    8a18:	0000544d 	.word	0x0000544d
    8a1c:	00006681 	.word	0x00006681
    8a20:	00006131 	.word	0x00006131
    8a24:	0000541d 	.word	0x0000541d
    8a28:	0000542d 	.word	0x0000542d
    8a2c:	000055e5 	.word	0x000055e5
    8a30:	00006179 	.word	0x00006179

00008a34 <LORAREG_InitGetAttrFnPtrsKR>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    8a34:	4b2d      	ldr	r3, [pc, #180]	; (8aec <LORAREG_InitGetAttrFnPtrsKR+0xb8>)
    8a36:	4a2e      	ldr	r2, [pc, #184]	; (8af0 <LORAREG_InitGetAttrFnPtrsKR+0xbc>)
    8a38:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    8a3a:	4a2e      	ldr	r2, [pc, #184]	; (8af4 <LORAREG_InitGetAttrFnPtrsKR+0xc0>)
    8a3c:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    8a3e:	4a2e      	ldr	r2, [pc, #184]	; (8af8 <LORAREG_InitGetAttrFnPtrsKR+0xc4>)
    8a40:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    8a42:	4a2e      	ldr	r2, [pc, #184]	; (8afc <LORAREG_InitGetAttrFnPtrsKR+0xc8>)
    8a44:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    8a46:	4a2e      	ldr	r2, [pc, #184]	; (8b00 <LORAREG_InitGetAttrFnPtrsKR+0xcc>)
    8a48:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    8a4a:	4a2e      	ldr	r2, [pc, #184]	; (8b04 <LORAREG_InitGetAttrFnPtrsKR+0xd0>)
    8a4c:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    8a4e:	4a2e      	ldr	r2, [pc, #184]	; (8b08 <LORAREG_InitGetAttrFnPtrsKR+0xd4>)
    8a50:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    8a52:	4a2e      	ldr	r2, [pc, #184]	; (8b0c <LORAREG_InitGetAttrFnPtrsKR+0xd8>)
    8a54:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    8a56:	4a2e      	ldr	r2, [pc, #184]	; (8b10 <LORAREG_InitGetAttrFnPtrsKR+0xdc>)
    8a58:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    8a5a:	4a2e      	ldr	r2, [pc, #184]	; (8b14 <LORAREG_InitGetAttrFnPtrsKR+0xe0>)
    8a5c:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    8a5e:	4a2e      	ldr	r2, [pc, #184]	; (8b18 <LORAREG_InitGetAttrFnPtrsKR+0xe4>)
    8a60:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    8a62:	4a2e      	ldr	r2, [pc, #184]	; (8b1c <LORAREG_InitGetAttrFnPtrsKR+0xe8>)
    8a64:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    8a66:	4a2e      	ldr	r2, [pc, #184]	; (8b20 <LORAREG_InitGetAttrFnPtrsKR+0xec>)
    8a68:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    8a6a:	4a2e      	ldr	r2, [pc, #184]	; (8b24 <LORAREG_InitGetAttrFnPtrsKR+0xf0>)
    8a6c:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType2;
    8a6e:	4a2e      	ldr	r2, [pc, #184]	; (8b28 <LORAREG_InitGetAttrFnPtrsKR+0xf4>)
    8a70:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]=LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    8a72:	492e      	ldr	r1, [pc, #184]	; (8b2c <LORAREG_InitGetAttrFnPtrsKR+0xf8>)
    8a74:	2280      	movs	r2, #128	; 0x80
    8a76:	5099      	str	r1, [r3, r2]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    8a78:	492d      	ldr	r1, [pc, #180]	; (8b30 <LORAREG_InitGetAttrFnPtrsKR+0xfc>)
    8a7a:	320c      	adds	r2, #12
    8a7c:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    8a7e:	492d      	ldr	r1, [pc, #180]	; (8b34 <LORAREG_InitGetAttrFnPtrsKR+0x100>)
    8a80:	3204      	adds	r2, #4
    8a82:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    8a84:	492c      	ldr	r1, [pc, #176]	; (8b38 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    8a86:	3204      	adds	r2, #4
    8a88:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    8a8a:	492c      	ldr	r1, [pc, #176]	; (8b3c <LORAREG_InitGetAttrFnPtrsKR+0x108>)
    8a8c:	3208      	adds	r2, #8
    8a8e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    8a90:	492b      	ldr	r1, [pc, #172]	; (8b40 <LORAREG_InitGetAttrFnPtrsKR+0x10c>)
    8a92:	3204      	adds	r2, #4
    8a94:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    8a96:	492b      	ldr	r1, [pc, #172]	; (8b44 <LORAREG_InitGetAttrFnPtrsKR+0x110>)
    8a98:	3204      	adds	r2, #4
    8a9a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    8a9c:	492a      	ldr	r1, [pc, #168]	; (8b48 <LORAREG_InitGetAttrFnPtrsKR+0x114>)
    8a9e:	3204      	adds	r2, #4
    8aa0:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    8aa2:	492a      	ldr	r1, [pc, #168]	; (8b4c <LORAREG_InitGetAttrFnPtrsKR+0x118>)
    8aa4:	3204      	adds	r2, #4
    8aa6:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    8aa8:	4929      	ldr	r1, [pc, #164]	; (8b50 <LORAREG_InitGetAttrFnPtrsKR+0x11c>)
    8aaa:	3204      	adds	r2, #4
    8aac:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    8aae:	4929      	ldr	r1, [pc, #164]	; (8b54 <LORAREG_InitGetAttrFnPtrsKR+0x120>)
    8ab0:	3204      	adds	r2, #4
    8ab2:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    8ab4:	4928      	ldr	r1, [pc, #160]	; (8b58 <LORAREG_InitGetAttrFnPtrsKR+0x124>)
    8ab6:	3204      	adds	r2, #4
    8ab8:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    8aba:	4928      	ldr	r1, [pc, #160]	; (8b5c <LORAREG_InitGetAttrFnPtrsKR+0x128>)
    8abc:	3204      	adds	r2, #4
    8abe:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    8ac0:	4927      	ldr	r1, [pc, #156]	; (8b60 <LORAREG_InitGetAttrFnPtrsKR+0x12c>)
    8ac2:	3204      	adds	r2, #4
    8ac4:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    8ac6:	4927      	ldr	r1, [pc, #156]	; (8b64 <LORAREG_InitGetAttrFnPtrsKR+0x130>)
    8ac8:	3204      	adds	r2, #4
    8aca:	5099      	str	r1, [r3, r2]
    pGetAttr[DEFAULT_LBT_PARAMS] = LORAREG_GetAttr_DefLBTParams;
    8acc:	4926      	ldr	r1, [pc, #152]	; (8b68 <LORAREG_InitGetAttrFnPtrsKR+0x134>)
    8ace:	3204      	adds	r2, #4
    8ad0:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_LBT_CHANNEL_PAUSE_TIMER] = LORAREG_GetAttr_minLBTChPauseTimer;
    8ad2:	4926      	ldr	r1, [pc, #152]	; (8b6c <LORAREG_InitGetAttrFnPtrsKR+0x138>)
    8ad4:	3204      	adds	r2, #4
    8ad6:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    8ad8:	4925      	ldr	r1, [pc, #148]	; (8b70 <LORAREG_InitGetAttrFnPtrsKR+0x13c>)
    8ada:	3204      	adds	r2, #4
    8adc:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    8ade:	4925      	ldr	r1, [pc, #148]	; (8b74 <LORAREG_InitGetAttrFnPtrsKR+0x140>)
    8ae0:	3208      	adds	r2, #8
    8ae2:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    8ae4:	4924      	ldr	r1, [pc, #144]	; (8b78 <LORAREG_InitGetAttrFnPtrsKR+0x144>)
    8ae6:	3204      	adds	r2, #4
    8ae8:	5099      	str	r1, [r3, r2]
}
    8aea:	4770      	bx	lr
    8aec:	20000b58 	.word	0x20000b58
    8af0:	00006475 	.word	0x00006475
    8af4:	00007b61 	.word	0x00007b61
    8af8:	00007ba1 	.word	0x00007ba1
    8afc:	00007bdd 	.word	0x00007bdd
    8b00:	000052c1 	.word	0x000052c1
    8b04:	000052d1 	.word	0x000052d1
    8b08:	000052ed 	.word	0x000052ed
    8b0c:	000052fd 	.word	0x000052fd
    8b10:	00006119 	.word	0x00006119
    8b14:	0000530d 	.word	0x0000530d
    8b18:	0000531d 	.word	0x0000531d
    8b1c:	00006379 	.word	0x00006379
    8b20:	0000562d 	.word	0x0000562d
    8b24:	0000536d 	.word	0x0000536d
    8b28:	0000630d 	.word	0x0000630d
    8b2c:	00005ea1 	.word	0x00005ea1
    8b30:	00007c15 	.word	0x00007c15
    8b34:	00007c4d 	.word	0x00007c4d
    8b38:	00007c85 	.word	0x00007c85
    8b3c:	000053cd 	.word	0x000053cd
    8b40:	000053d7 	.word	0x000053d7
    8b44:	000053e1 	.word	0x000053e1
    8b48:	000053ed 	.word	0x000053ed
    8b4c:	000053f9 	.word	0x000053f9
    8b50:	00005403 	.word	0x00005403
    8b54:	0000540b 	.word	0x0000540b
    8b58:	00005413 	.word	0x00005413
    8b5c:	00007cf5 	.word	0x00007cf5
    8b60:	00006ca5 	.word	0x00006ca5
    8b64:	0000543d 	.word	0x0000543d
    8b68:	0000544d 	.word	0x0000544d
    8b6c:	00006681 	.word	0x00006681
    8b70:	00006131 	.word	0x00006131
    8b74:	0000541d 	.word	0x0000541d
    8b78:	0000542d 	.word	0x0000542d

00008b7c <LORAREG_InitValidateAttrFnPtrsNA>:
    pValidateAttr[RX_FREQUENCY] = ValidateRxFreqT1;
    8b7c:	4b0d      	ldr	r3, [pc, #52]	; (8bb4 <LORAREG_InitValidateAttrFnPtrsNA+0x38>)
    8b7e:	4a0e      	ldr	r2, [pc, #56]	; (8bb8 <LORAREG_InitValidateAttrFnPtrsNA+0x3c>)
    8b80:	605a      	str	r2, [r3, #4]
    pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT1;
    8b82:	4a0e      	ldr	r2, [pc, #56]	; (8bbc <LORAREG_InitValidateAttrFnPtrsNA+0x40>)
    8b84:	609a      	str	r2, [r3, #8]
    pValidateAttr[RX_DATARATE] = ValidateDataRateRxT1;
    8b86:	4a0e      	ldr	r2, [pc, #56]	; (8bc0 <LORAREG_InitValidateAttrFnPtrsNA+0x44>)
    8b88:	63da      	str	r2, [r3, #60]	; 0x3c
    pValidateAttr[TX_DATARATE] = ValidateDataRateTxT1;
    8b8a:	490e      	ldr	r1, [pc, #56]	; (8bc4 <LORAREG_InitValidateAttrFnPtrsNA+0x48>)
    8b8c:	6419      	str	r1, [r3, #64]	; 0x40
    pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    8b8e:	490e      	ldr	r1, [pc, #56]	; (8bc8 <LORAREG_InitValidateAttrFnPtrsNA+0x4c>)
    8b90:	6459      	str	r1, [r3, #68]	; 0x44
    pValidateAttr[DATA_RANGE] = ValidateDataRange;
    8b92:	490e      	ldr	r1, [pc, #56]	; (8bcc <LORAREG_InitValidateAttrFnPtrsNA+0x50>)
    8b94:	6499      	str	r1, [r3, #72]	; 0x48
    pValidateAttr[CHANNEL_ID] = ValidateChannelId;
    8b96:	490e      	ldr	r1, [pc, #56]	; (8bd0 <LORAREG_InitValidateAttrFnPtrsNA+0x54>)
    8b98:	6559      	str	r1, [r3, #84]	; 0x54
    pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT1;
    8b9a:	65da      	str	r2, [r3, #92]	; 0x5c
    pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    8b9c:	4a0d      	ldr	r2, [pc, #52]	; (8bd4 <LORAREG_InitValidateAttrFnPtrsNA+0x58>)
    8b9e:	661a      	str	r2, [r3, #96]	; 0x60
    pValidateAttr[CHANNEL_MASK] = ValidateChannelMask;
    8ba0:	4a0d      	ldr	r2, [pc, #52]	; (8bd8 <LORAREG_InitValidateAttrFnPtrsNA+0x5c>)
    8ba2:	669a      	str	r2, [r3, #104]	; 0x68
    pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntl;
    8ba4:	4a0d      	ldr	r2, [pc, #52]	; (8bdc <LORAREG_InitValidateAttrFnPtrsNA+0x60>)
    8ba6:	66da      	str	r2, [r3, #108]	; 0x6c
    pValidateAttr[TX_PWR] = ValidateTxPower;
    8ba8:	4a0d      	ldr	r2, [pc, #52]	; (8be0 <LORAREG_InitValidateAttrFnPtrsNA+0x64>)
    8baa:	675a      	str	r2, [r3, #116]	; 0x74
    pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntl;
    8bac:	490d      	ldr	r1, [pc, #52]	; (8be4 <LORAREG_InitValidateAttrFnPtrsNA+0x68>)
    8bae:	22e0      	movs	r2, #224	; 0xe0
    8bb0:	5099      	str	r1, [r3, r2]
}
    8bb2:	4770      	bx	lr
    8bb4:	20000d40 	.word	0x20000d40
    8bb8:	00005805 	.word	0x00005805
    8bbc:	00008069 	.word	0x00008069
    8bc0:	00005551 	.word	0x00005551
    8bc4:	0000550d 	.word	0x0000550d
    8bc8:	000057a9 	.word	0x000057a9
    8bcc:	00007de9 	.word	0x00007de9
    8bd0:	000055a1 	.word	0x000055a1
    8bd4:	00005839 	.word	0x00005839
    8bd8:	000056d1 	.word	0x000056d1
    8bdc:	000056a5 	.word	0x000056a5
    8be0:	000056b9 	.word	0x000056b9
    8be4:	00007cbd 	.word	0x00007cbd

00008be8 <LORAREG_InitValidateAttrFnPtrsEU>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreq;
    8be8:	4b0d      	ldr	r3, [pc, #52]	; (8c20 <LORAREG_InitValidateAttrFnPtrsEU+0x38>)
    8bea:	4a0e      	ldr	r2, [pc, #56]	; (8c24 <LORAREG_InitValidateAttrFnPtrsEU+0x3c>)
    8bec:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    8bee:	4a0e      	ldr	r2, [pc, #56]	; (8c28 <LORAREG_InitValidateAttrFnPtrsEU+0x40>)
    8bf0:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    8bf2:	4a0e      	ldr	r2, [pc, #56]	; (8c2c <LORAREG_InitValidateAttrFnPtrsEU+0x44>)
    8bf4:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    8bf6:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    8bf8:	490d      	ldr	r1, [pc, #52]	; (8c30 <LORAREG_InitValidateAttrFnPtrsEU+0x48>)
    8bfa:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    8bfc:	490d      	ldr	r1, [pc, #52]	; (8c34 <LORAREG_InitValidateAttrFnPtrsEU+0x4c>)
    8bfe:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    8c00:	490d      	ldr	r1, [pc, #52]	; (8c38 <LORAREG_InitValidateAttrFnPtrsEU+0x50>)
    8c02:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    8c04:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    8c06:	4a0d      	ldr	r2, [pc, #52]	; (8c3c <LORAREG_InitValidateAttrFnPtrsEU+0x54>)
    8c08:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    8c0a:	4a0d      	ldr	r2, [pc, #52]	; (8c40 <LORAREG_InitValidateAttrFnPtrsEU+0x58>)
    8c0c:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    8c0e:	4a0d      	ldr	r2, [pc, #52]	; (8c44 <LORAREG_InitValidateAttrFnPtrsEU+0x5c>)
    8c10:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    8c12:	4a0d      	ldr	r2, [pc, #52]	; (8c48 <LORAREG_InitValidateAttrFnPtrsEU+0x60>)
    8c14:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    8c16:	490d      	ldr	r1, [pc, #52]	; (8c4c <LORAREG_InitValidateAttrFnPtrsEU+0x64>)
    8c18:	22e0      	movs	r2, #224	; 0xe0
    8c1a:	5099      	str	r1, [r3, r2]
}
    8c1c:	4770      	bx	lr
    8c1e:	46c0      	nop			; (mov r8, r8)
    8c20:	20000d40 	.word	0x20000d40
    8c24:	000058c1 	.word	0x000058c1
    8c28:	00006751 	.word	0x00006751
    8c2c:	00005791 	.word	0x00005791
    8c30:	000057a9 	.word	0x000057a9
    8c34:	00007a51 	.word	0x00007a51
    8c38:	000055b9 	.word	0x000055b9
    8c3c:	00005839 	.word	0x00005839
    8c40:	000056d5 	.word	0x000056d5
    8c44:	00005729 	.word	0x00005729
    8c48:	000056b9 	.word	0x000056b9
    8c4c:	0000573d 	.word	0x0000573d

00008c50 <LORAREG_InitValidateAttrFnPtrsAS>:
	pValidateAttr[RX_FREQUENCY] = ValidateFrequencyAS;
    8c50:	4b0d      	ldr	r3, [pc, #52]	; (8c88 <LORAREG_InitValidateAttrFnPtrsAS+0x38>)
    8c52:	4a0e      	ldr	r2, [pc, #56]	; (8c8c <LORAREG_InitValidateAttrFnPtrsAS+0x3c>)
    8c54:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    8c56:	4a0e      	ldr	r2, [pc, #56]	; (8c90 <LORAREG_InitValidateAttrFnPtrsAS+0x40>)
    8c58:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT2;
    8c5a:	4a0e      	ldr	r2, [pc, #56]	; (8c94 <LORAREG_InitValidateAttrFnPtrsAS+0x44>)
    8c5c:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT2;
    8c5e:	490e      	ldr	r1, [pc, #56]	; (8c98 <LORAREG_InitValidateAttrFnPtrsAS+0x48>)
    8c60:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    8c62:	490e      	ldr	r1, [pc, #56]	; (8c9c <LORAREG_InitValidateAttrFnPtrsAS+0x4c>)
    8c64:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    8c66:	490e      	ldr	r1, [pc, #56]	; (8ca0 <LORAREG_InitValidateAttrFnPtrsAS+0x50>)
    8c68:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    8c6a:	490e      	ldr	r1, [pc, #56]	; (8ca4 <LORAREG_InitValidateAttrFnPtrsAS+0x54>)
    8c6c:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT2;
    8c6e:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    8c70:	4a0d      	ldr	r2, [pc, #52]	; (8ca8 <LORAREG_InitValidateAttrFnPtrsAS+0x58>)
    8c72:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    8c74:	4a0d      	ldr	r2, [pc, #52]	; (8cac <LORAREG_InitValidateAttrFnPtrsAS+0x5c>)
    8c76:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    8c78:	4a0d      	ldr	r2, [pc, #52]	; (8cb0 <LORAREG_InitValidateAttrFnPtrsAS+0x60>)
    8c7a:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    8c7c:	4a0d      	ldr	r2, [pc, #52]	; (8cb4 <LORAREG_InitValidateAttrFnPtrsAS+0x64>)
    8c7e:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    8c80:	490d      	ldr	r1, [pc, #52]	; (8cb8 <LORAREG_InitValidateAttrFnPtrsAS+0x68>)
    8c82:	22e0      	movs	r2, #224	; 0xe0
    8c84:	5099      	str	r1, [r3, r2]
}
    8c86:	4770      	bx	lr
    8c88:	20000d40 	.word	0x20000d40
    8c8c:	00005bad 	.word	0x00005bad
    8c90:	00006751 	.word	0x00006751
    8c94:	00005575 	.word	0x00005575
    8c98:	00005525 	.word	0x00005525
    8c9c:	000057a9 	.word	0x000057a9
    8ca0:	00007a51 	.word	0x00007a51
    8ca4:	000055b9 	.word	0x000055b9
    8ca8:	00005839 	.word	0x00005839
    8cac:	000056d5 	.word	0x000056d5
    8cb0:	00005729 	.word	0x00005729
    8cb4:	000056b9 	.word	0x000056b9
    8cb8:	0000573d 	.word	0x0000573d

00008cbc <LORAREG_InitValidateAttrFnPtrsAU>:
	pValidateAttr[RX_FREQUENCY] = ValidateRxFreqT1;
    8cbc:	4b0d      	ldr	r3, [pc, #52]	; (8cf4 <LORAREG_InitValidateAttrFnPtrsAU+0x38>)
    8cbe:	4a0e      	ldr	r2, [pc, #56]	; (8cf8 <LORAREG_InitValidateAttrFnPtrsAU+0x3c>)
    8cc0:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT1;
    8cc2:	4a0e      	ldr	r2, [pc, #56]	; (8cfc <LORAREG_InitValidateAttrFnPtrsAU+0x40>)
    8cc4:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT1;
    8cc6:	4a0e      	ldr	r2, [pc, #56]	; (8d00 <LORAREG_InitValidateAttrFnPtrsAU+0x44>)
    8cc8:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT1;
    8cca:	490e      	ldr	r1, [pc, #56]	; (8d04 <LORAREG_InitValidateAttrFnPtrsAU+0x48>)
    8ccc:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    8cce:	490e      	ldr	r1, [pc, #56]	; (8d08 <LORAREG_InitValidateAttrFnPtrsAU+0x4c>)
    8cd0:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRange;
    8cd2:	490e      	ldr	r1, [pc, #56]	; (8d0c <LORAREG_InitValidateAttrFnPtrsAU+0x50>)
    8cd4:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelId;
    8cd6:	490e      	ldr	r1, [pc, #56]	; (8d10 <LORAREG_InitValidateAttrFnPtrsAU+0x54>)
    8cd8:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT1;
    8cda:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    8cdc:	4a0d      	ldr	r2, [pc, #52]	; (8d14 <LORAREG_InitValidateAttrFnPtrsAU+0x58>)
    8cde:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMask;
    8ce0:	4a0d      	ldr	r2, [pc, #52]	; (8d18 <LORAREG_InitValidateAttrFnPtrsAU+0x5c>)
    8ce2:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntl;
    8ce4:	4a0d      	ldr	r2, [pc, #52]	; (8d1c <LORAREG_InitValidateAttrFnPtrsAU+0x60>)
    8ce6:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    8ce8:	4a0d      	ldr	r2, [pc, #52]	; (8d20 <LORAREG_InitValidateAttrFnPtrsAU+0x64>)
    8cea:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntl;
    8cec:	490d      	ldr	r1, [pc, #52]	; (8d24 <LORAREG_InitValidateAttrFnPtrsAU+0x68>)
    8cee:	22e0      	movs	r2, #224	; 0xe0
    8cf0:	5099      	str	r1, [r3, r2]
}
    8cf2:	4770      	bx	lr
    8cf4:	20000d40 	.word	0x20000d40
    8cf8:	00005805 	.word	0x00005805
    8cfc:	00008069 	.word	0x00008069
    8d00:	00005551 	.word	0x00005551
    8d04:	0000550d 	.word	0x0000550d
    8d08:	000057a9 	.word	0x000057a9
    8d0c:	00007de9 	.word	0x00007de9
    8d10:	000055a1 	.word	0x000055a1
    8d14:	00005839 	.word	0x00005839
    8d18:	000056d1 	.word	0x000056d1
    8d1c:	000056a5 	.word	0x000056a5
    8d20:	000056b9 	.word	0x000056b9
    8d24:	00007cbd 	.word	0x00007cbd

00008d28 <LORAREG_InitValidateAttrFnPtrsIN>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqIN;
    8d28:	4b0d      	ldr	r3, [pc, #52]	; (8d60 <LORAREG_InitValidateAttrFnPtrsIN+0x38>)
    8d2a:	4a0e      	ldr	r2, [pc, #56]	; (8d64 <LORAREG_InitValidateAttrFnPtrsIN+0x3c>)
    8d2c:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    8d2e:	4a0e      	ldr	r2, [pc, #56]	; (8d68 <LORAREG_InitValidateAttrFnPtrsIN+0x40>)
    8d30:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    8d32:	4a0e      	ldr	r2, [pc, #56]	; (8d6c <LORAREG_InitValidateAttrFnPtrsIN+0x44>)
    8d34:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    8d36:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    8d38:	490d      	ldr	r1, [pc, #52]	; (8d70 <LORAREG_InitValidateAttrFnPtrsIN+0x48>)
    8d3a:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    8d3c:	490d      	ldr	r1, [pc, #52]	; (8d74 <LORAREG_InitValidateAttrFnPtrsIN+0x4c>)
    8d3e:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    8d40:	490d      	ldr	r1, [pc, #52]	; (8d78 <LORAREG_InitValidateAttrFnPtrsIN+0x50>)
    8d42:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    8d44:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    8d46:	4a0d      	ldr	r2, [pc, #52]	; (8d7c <LORAREG_InitValidateAttrFnPtrsIN+0x54>)
    8d48:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    8d4a:	4a0d      	ldr	r2, [pc, #52]	; (8d80 <LORAREG_InitValidateAttrFnPtrsIN+0x58>)
    8d4c:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    8d4e:	4a0d      	ldr	r2, [pc, #52]	; (8d84 <LORAREG_InitValidateAttrFnPtrsIN+0x5c>)
    8d50:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    8d52:	4a0d      	ldr	r2, [pc, #52]	; (8d88 <LORAREG_InitValidateAttrFnPtrsIN+0x60>)
    8d54:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    8d56:	490d      	ldr	r1, [pc, #52]	; (8d8c <LORAREG_InitValidateAttrFnPtrsIN+0x64>)
    8d58:	22e0      	movs	r2, #224	; 0xe0
    8d5a:	5099      	str	r1, [r3, r2]
}
    8d5c:	4770      	bx	lr
    8d5e:	46c0      	nop			; (mov r8, r8)
    8d60:	20000d40 	.word	0x20000d40
    8d64:	00006775 	.word	0x00006775
    8d68:	00006751 	.word	0x00006751
    8d6c:	00005791 	.word	0x00005791
    8d70:	000057a9 	.word	0x000057a9
    8d74:	00007a51 	.word	0x00007a51
    8d78:	000055b9 	.word	0x000055b9
    8d7c:	00005839 	.word	0x00005839
    8d80:	000056d5 	.word	0x000056d5
    8d84:	00005729 	.word	0x00005729
    8d88:	000056b9 	.word	0x000056b9
    8d8c:	0000573d 	.word	0x0000573d

00008d90 <LORAREG_InitValidateAttrFnPtrsJP>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqJP;
    8d90:	4b0d      	ldr	r3, [pc, #52]	; (8dc8 <LORAREG_InitValidateAttrFnPtrsJP+0x38>)
    8d92:	4a0e      	ldr	r2, [pc, #56]	; (8dcc <LORAREG_InitValidateAttrFnPtrsJP+0x3c>)
    8d94:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    8d96:	4a0e      	ldr	r2, [pc, #56]	; (8dd0 <LORAREG_InitValidateAttrFnPtrsJP+0x40>)
    8d98:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT2;
    8d9a:	4a0e      	ldr	r2, [pc, #56]	; (8dd4 <LORAREG_InitValidateAttrFnPtrsJP+0x44>)
    8d9c:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT2;
    8d9e:	490e      	ldr	r1, [pc, #56]	; (8dd8 <LORAREG_InitValidateAttrFnPtrsJP+0x48>)
    8da0:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    8da2:	490e      	ldr	r1, [pc, #56]	; (8ddc <LORAREG_InitValidateAttrFnPtrsJP+0x4c>)
    8da4:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    8da6:	490e      	ldr	r1, [pc, #56]	; (8de0 <LORAREG_InitValidateAttrFnPtrsJP+0x50>)
    8da8:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    8daa:	490e      	ldr	r1, [pc, #56]	; (8de4 <LORAREG_InitValidateAttrFnPtrsJP+0x54>)
    8dac:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT2;
    8dae:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    8db0:	4a0d      	ldr	r2, [pc, #52]	; (8de8 <LORAREG_InitValidateAttrFnPtrsJP+0x58>)
    8db2:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    8db4:	4a0d      	ldr	r2, [pc, #52]	; (8dec <LORAREG_InitValidateAttrFnPtrsJP+0x5c>)
    8db6:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    8db8:	4a0d      	ldr	r2, [pc, #52]	; (8df0 <LORAREG_InitValidateAttrFnPtrsJP+0x60>)
    8dba:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    8dbc:	4a0d      	ldr	r2, [pc, #52]	; (8df4 <LORAREG_InitValidateAttrFnPtrsJP+0x64>)
    8dbe:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    8dc0:	490d      	ldr	r1, [pc, #52]	; (8df8 <LORAREG_InitValidateAttrFnPtrsJP+0x68>)
    8dc2:	22e0      	movs	r2, #224	; 0xe0
    8dc4:	5099      	str	r1, [r3, r2]
}
    8dc6:	4770      	bx	lr
    8dc8:	20000d40 	.word	0x20000d40
    8dcc:	000067a5 	.word	0x000067a5
    8dd0:	00006751 	.word	0x00006751
    8dd4:	00005575 	.word	0x00005575
    8dd8:	00005525 	.word	0x00005525
    8ddc:	000057a9 	.word	0x000057a9
    8de0:	00007a51 	.word	0x00007a51
    8de4:	000055b9 	.word	0x000055b9
    8de8:	00005839 	.word	0x00005839
    8dec:	000056d5 	.word	0x000056d5
    8df0:	00005729 	.word	0x00005729
    8df4:	000056b9 	.word	0x000056b9
    8df8:	0000573d 	.word	0x0000573d

00008dfc <LORAREG_InitValidateAttrFnPtrsKR>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqKR;
    8dfc:	4b0d      	ldr	r3, [pc, #52]	; (8e34 <LORAREG_InitValidateAttrFnPtrsKR+0x38>)
    8dfe:	4a0e      	ldr	r2, [pc, #56]	; (8e38 <LORAREG_InitValidateAttrFnPtrsKR+0x3c>)
    8e00:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    8e02:	4a0e      	ldr	r2, [pc, #56]	; (8e3c <LORAREG_InitValidateAttrFnPtrsKR+0x40>)
    8e04:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    8e06:	4a0e      	ldr	r2, [pc, #56]	; (8e40 <LORAREG_InitValidateAttrFnPtrsKR+0x44>)
    8e08:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    8e0a:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    8e0c:	490d      	ldr	r1, [pc, #52]	; (8e44 <LORAREG_InitValidateAttrFnPtrsKR+0x48>)
    8e0e:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    8e10:	490d      	ldr	r1, [pc, #52]	; (8e48 <LORAREG_InitValidateAttrFnPtrsKR+0x4c>)
    8e12:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    8e14:	490d      	ldr	r1, [pc, #52]	; (8e4c <LORAREG_InitValidateAttrFnPtrsKR+0x50>)
    8e16:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    8e18:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    8e1a:	4a0d      	ldr	r2, [pc, #52]	; (8e50 <LORAREG_InitValidateAttrFnPtrsKR+0x54>)
    8e1c:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    8e1e:	4a0d      	ldr	r2, [pc, #52]	; (8e54 <LORAREG_InitValidateAttrFnPtrsKR+0x58>)
    8e20:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    8e22:	4a0d      	ldr	r2, [pc, #52]	; (8e58 <LORAREG_InitValidateAttrFnPtrsKR+0x5c>)
    8e24:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    8e26:	4a0d      	ldr	r2, [pc, #52]	; (8e5c <LORAREG_InitValidateAttrFnPtrsKR+0x60>)
    8e28:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    8e2a:	490d      	ldr	r1, [pc, #52]	; (8e60 <LORAREG_InitValidateAttrFnPtrsKR+0x64>)
    8e2c:	22e0      	movs	r2, #224	; 0xe0
    8e2e:	5099      	str	r1, [r3, r2]
}
    8e30:	4770      	bx	lr
    8e32:	46c0      	nop			; (mov r8, r8)
    8e34:	20000d40 	.word	0x20000d40
    8e38:	000067d5 	.word	0x000067d5
    8e3c:	00006751 	.word	0x00006751
    8e40:	00005791 	.word	0x00005791
    8e44:	000057a9 	.word	0x000057a9
    8e48:	00007a51 	.word	0x00007a51
    8e4c:	000055b9 	.word	0x000055b9
    8e50:	00005839 	.word	0x00005839
    8e54:	000056d5 	.word	0x000056d5
    8e58:	00005729 	.word	0x00005729
    8e5c:	000056b9 	.word	0x000056b9
    8e60:	0000573d 	.word	0x0000573d

00008e64 <LORAREG_InitSetAttrFnPtrsNA>:
	pSetAttr[DATA_RANGE] = setDataRange;
    8e64:	4b0b      	ldr	r3, [pc, #44]	; (8e94 <LORAREG_InitSetAttrFnPtrsNA+0x30>)
    8e66:	4a0c      	ldr	r2, [pc, #48]	; (8e98 <LORAREG_InitSetAttrFnPtrsNA+0x34>)
    8e68:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatus;
    8e6a:	4a0c      	ldr	r2, [pc, #48]	; (8e9c <LORAREG_InitSetAttrFnPtrsNA+0x38>)
    8e6c:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[NEW_CHANNELS] = setNewChannelsT1;
    8e6e:	4a0c      	ldr	r2, [pc, #48]	; (8ea0 <LORAREG_InitSetAttrFnPtrsNA+0x3c>)
    8e70:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[REG_JOIN_SUCCESS] = setJoinSuccess;
    8e72:	490c      	ldr	r1, [pc, #48]	; (8ea4 <LORAREG_InitSetAttrFnPtrsNA+0x40>)
    8e74:	22e8      	movs	r2, #232	; 0xe8
    8e76:	5099      	str	r1, [r3, r2]
	pSetAttr[REG_JOIN_ENABLE_ALL] = setEnableAllChs;
    8e78:	490b      	ldr	r1, [pc, #44]	; (8ea8 <LORAREG_InitSetAttrFnPtrsNA+0x44>)
    8e7a:	3204      	adds	r2, #4
    8e7c:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_DUTY_CYCLE_TIMER] = setJoinDutyCycleTimer;
    8e7e:	490b      	ldr	r1, [pc, #44]	; (8eac <LORAREG_InitSetAttrFnPtrsNA+0x48>)
    8e80:	3a6c      	subs	r2, #108	; 0x6c
    8e82:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    8e84:	490a      	ldr	r1, [pc, #40]	; (8eb0 <LORAREG_InitSetAttrFnPtrsNA+0x4c>)
    8e86:	3204      	adds	r2, #4
    8e88:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    8e8a:	490a      	ldr	r1, [pc, #40]	; (8eb4 <LORAREG_InitSetAttrFnPtrsNA+0x50>)
    8e8c:	3260      	adds	r2, #96	; 0x60
    8e8e:	5099      	str	r1, [r3, r2]
}
    8e90:	4770      	bx	lr
    8e92:	46c0      	nop			; (mov r8, r8)
    8e94:	20000c4c 	.word	0x20000c4c
    8e98:	00007e51 	.word	0x00007e51
    8e9c:	00007dc5 	.word	0x00007dc5
    8ea0:	0000681d 	.word	0x0000681d
    8ea4:	00005c71 	.word	0x00005c71
    8ea8:	00005c75 	.word	0x00005c75
    8eac:	00006dfd 	.word	0x00006dfd
    8eb0:	00006d89 	.word	0x00006d89
    8eb4:	00006cd1 	.word	0x00006cd1

00008eb8 <LORAREG_InitSetAttrFnPtrsEU>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    8eb8:	4b0e      	ldr	r3, [pc, #56]	; (8ef4 <LORAREG_InitSetAttrFnPtrsEU+0x3c>)
    8eba:	4a0f      	ldr	r2, [pc, #60]	; (8ef8 <LORAREG_InitSetAttrFnPtrsEU+0x40>)
    8ebc:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT2;
    8ebe:	4a0f      	ldr	r2, [pc, #60]	; (8efc <LORAREG_InitSetAttrFnPtrsEU+0x44>)
    8ec0:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[DUTY_CYCLE] = setDutyCycle;
    8ec2:	4a0f      	ldr	r2, [pc, #60]	; (8f00 <LORAREG_InitSetAttrFnPtrsEU+0x48>)
    8ec4:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = setDutyCycleTimer;
    8ec6:	4a0f      	ldr	r2, [pc, #60]	; (8f04 <LORAREG_InitSetAttrFnPtrsEU+0x4c>)
    8ec8:	67da      	str	r2, [r3, #124]	; 0x7c
	pSetAttr[FREQUENCY] = setFrequency;
    8eca:	4a0f      	ldr	r2, [pc, #60]	; (8f08 <LORAREG_InitSetAttrFnPtrsEU+0x50>)
    8ecc:	601a      	str	r2, [r3, #0]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    8ece:	4a0f      	ldr	r2, [pc, #60]	; (8f0c <LORAREG_InitSetAttrFnPtrsEU+0x54>)
    8ed0:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    8ed2:	490f      	ldr	r1, [pc, #60]	; (8f10 <LORAREG_InitSetAttrFnPtrsEU+0x58>)
    8ed4:	2280      	movs	r2, #128	; 0x80
    8ed6:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    8ed8:	490e      	ldr	r1, [pc, #56]	; (8f14 <LORAREG_InitSetAttrFnPtrsEU+0x5c>)
    8eda:	3204      	adds	r2, #4
    8edc:	5099      	str	r1, [r3, r2]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    8ede:	490e      	ldr	r1, [pc, #56]	; (8f18 <LORAREG_InitSetAttrFnPtrsEU+0x60>)
    8ee0:	324c      	adds	r2, #76	; 0x4c
    8ee2:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    8ee4:	490d      	ldr	r1, [pc, #52]	; (8f1c <LORAREG_InitSetAttrFnPtrsEU+0x64>)
    8ee6:	3214      	adds	r2, #20
    8ee8:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    8eea:	490d      	ldr	r1, [pc, #52]	; (8f20 <LORAREG_InitSetAttrFnPtrsEU+0x68>)
    8eec:	320c      	adds	r2, #12
    8eee:	5099      	str	r1, [r3, r2]
}
    8ef0:	4770      	bx	lr
    8ef2:	46c0      	nop			; (mov r8, r8)
    8ef4:	20000c4c 	.word	0x20000c4c
    8ef8:	00007a7d 	.word	0x00007a7d
    8efc:	00005a15 	.word	0x00005a15
    8f00:	00006a3d 	.word	0x00006a3d
    8f04:	00007089 	.word	0x00007089
    8f08:	00006939 	.word	0x00006939
    8f0c:	00009179 	.word	0x00009179
    8f10:	00006dfd 	.word	0x00006dfd
    8f14:	00006d89 	.word	0x00006d89
    8f18:	000068b5 	.word	0x000068b5
    8f1c:	00006cd1 	.word	0x00006cd1
    8f20:	00005c79 	.word	0x00005c79

00008f24 <LORAREG_InitSetAttrFnPtrsAS>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    8f24:	4b0f      	ldr	r3, [pc, #60]	; (8f64 <LORAREG_InitSetAttrFnPtrsAS+0x40>)
    8f26:	4a10      	ldr	r2, [pc, #64]	; (8f68 <LORAREG_InitSetAttrFnPtrsAS+0x44>)
    8f28:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    8f2a:	4a10      	ldr	r2, [pc, #64]	; (8f6c <LORAREG_InitSetAttrFnPtrsAS+0x48>)
    8f2c:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[FREQUENCY] = setFrequency;
    8f2e:	4a10      	ldr	r2, [pc, #64]	; (8f70 <LORAREG_InitSetAttrFnPtrsAS+0x4c>)
    8f30:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    8f32:	4910      	ldr	r1, [pc, #64]	; (8f74 <LORAREG_InitSetAttrFnPtrsAS+0x50>)
    8f34:	22d0      	movs	r2, #208	; 0xd0
    8f36:	5099      	str	r1, [r3, r2]
    pSetAttr[NEW_CHANNELS] = setNewChannel;
    8f38:	4a0f      	ldr	r2, [pc, #60]	; (8f78 <LORAREG_InitSetAttrFnPtrsAS+0x54>)
    8f3a:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER] = setJoinDutyCycleTimer;
    8f3c:	490f      	ldr	r1, [pc, #60]	; (8f7c <LORAREG_InitSetAttrFnPtrsAS+0x58>)
    8f3e:	2280      	movs	r2, #128	; 0x80
    8f40:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    8f42:	490f      	ldr	r1, [pc, #60]	; (8f80 <LORAREG_InitSetAttrFnPtrsAS+0x5c>)
    8f44:	3204      	adds	r2, #4
    8f46:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    8f48:	490e      	ldr	r1, [pc, #56]	; (8f84 <LORAREG_InitSetAttrFnPtrsAS+0x60>)
    8f4a:	3250      	adds	r2, #80	; 0x50
    8f4c:	5099      	str	r1, [r3, r2]
	pSetAttr[DUTY_CYCLE] = setDutyCycle;
    8f4e:	4a0e      	ldr	r2, [pc, #56]	; (8f88 <LORAREG_InitSetAttrFnPtrsAS+0x64>)
    8f50:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = setDutyCycleTimer;
    8f52:	4a0e      	ldr	r2, [pc, #56]	; (8f8c <LORAREG_InitSetAttrFnPtrsAS+0x68>)
    8f54:	67da      	str	r2, [r3, #124]	; 0x7c
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    8f56:	490e      	ldr	r1, [pc, #56]	; (8f90 <LORAREG_InitSetAttrFnPtrsAS+0x6c>)
    8f58:	22e4      	movs	r2, #228	; 0xe4
    8f5a:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    8f5c:	490d      	ldr	r1, [pc, #52]	; (8f94 <LORAREG_InitSetAttrFnPtrsAS+0x70>)
    8f5e:	320c      	adds	r2, #12
    8f60:	5099      	str	r1, [r3, r2]
}
    8f62:	4770      	bx	lr
    8f64:	20000c4c 	.word	0x20000c4c
    8f68:	00007a7d 	.word	0x00007a7d
    8f6c:	00005b15 	.word	0x00005b15
    8f70:	00006939 	.word	0x00006939
    8f74:	000068b5 	.word	0x000068b5
    8f78:	00009179 	.word	0x00009179
    8f7c:	00006dfd 	.word	0x00006dfd
    8f80:	00006d89 	.word	0x00006d89
    8f84:	00005c3d 	.word	0x00005c3d
    8f88:	00006a3d 	.word	0x00006a3d
    8f8c:	00007089 	.word	0x00007089
    8f90:	00006cd1 	.word	0x00006cd1
    8f94:	00005c79 	.word	0x00005c79

00008f98 <LORAREG_InitSetAttrFnPtrsAU>:
	pSetAttr[DATA_RANGE] = setDataRange;
    8f98:	4b0b      	ldr	r3, [pc, #44]	; (8fc8 <LORAREG_InitSetAttrFnPtrsAU+0x30>)
    8f9a:	4a0c      	ldr	r2, [pc, #48]	; (8fcc <LORAREG_InitSetAttrFnPtrsAU+0x34>)
    8f9c:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatus;
    8f9e:	4a0c      	ldr	r2, [pc, #48]	; (8fd0 <LORAREG_InitSetAttrFnPtrsAU+0x38>)
    8fa0:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[NEW_CHANNELS] = setNewChannelsT1;
    8fa2:	4a0c      	ldr	r2, [pc, #48]	; (8fd4 <LORAREG_InitSetAttrFnPtrsAU+0x3c>)
    8fa4:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[REG_JOIN_SUCCESS] = setJoinSuccess;
    8fa6:	490c      	ldr	r1, [pc, #48]	; (8fd8 <LORAREG_InitSetAttrFnPtrsAU+0x40>)
    8fa8:	22e8      	movs	r2, #232	; 0xe8
    8faa:	5099      	str	r1, [r3, r2]
	pSetAttr[REG_JOIN_ENABLE_ALL] = setEnableAllChs;
    8fac:	490b      	ldr	r1, [pc, #44]	; (8fdc <LORAREG_InitSetAttrFnPtrsAU+0x44>)
    8fae:	3204      	adds	r2, #4
    8fb0:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    8fb2:	490b      	ldr	r1, [pc, #44]	; (8fe0 <LORAREG_InitSetAttrFnPtrsAU+0x48>)
    8fb4:	3a6c      	subs	r2, #108	; 0x6c
    8fb6:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    8fb8:	490a      	ldr	r1, [pc, #40]	; (8fe4 <LORAREG_InitSetAttrFnPtrsAU+0x4c>)
    8fba:	3204      	adds	r2, #4
    8fbc:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    8fbe:	490a      	ldr	r1, [pc, #40]	; (8fe8 <LORAREG_InitSetAttrFnPtrsAU+0x50>)
    8fc0:	3260      	adds	r2, #96	; 0x60
    8fc2:	5099      	str	r1, [r3, r2]
}
    8fc4:	4770      	bx	lr
    8fc6:	46c0      	nop			; (mov r8, r8)
    8fc8:	20000c4c 	.word	0x20000c4c
    8fcc:	00007e51 	.word	0x00007e51
    8fd0:	00007dc5 	.word	0x00007dc5
    8fd4:	0000681d 	.word	0x0000681d
    8fd8:	00005c71 	.word	0x00005c71
    8fdc:	00005c75 	.word	0x00005c75
    8fe0:	00006dfd 	.word	0x00006dfd
    8fe4:	00006d89 	.word	0x00006d89
    8fe8:	00006cd1 	.word	0x00006cd1

00008fec <LORAREG_InitSetAttrFnPtrsIN>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    8fec:	4b0d      	ldr	r3, [pc, #52]	; (9024 <LORAREG_InitSetAttrFnPtrsIN+0x38>)
    8fee:	4a0e      	ldr	r2, [pc, #56]	; (9028 <LORAREG_InitSetAttrFnPtrsIN+0x3c>)
    8ff0:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT2;
    8ff2:	4a0e      	ldr	r2, [pc, #56]	; (902c <LORAREG_InitSetAttrFnPtrsIN+0x40>)
    8ff4:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[FREQUENCY] = setFrequency;
    8ff6:	4a0e      	ldr	r2, [pc, #56]	; (9030 <LORAREG_InitSetAttrFnPtrsIN+0x44>)
    8ff8:	601a      	str	r2, [r3, #0]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    8ffa:	4a0e      	ldr	r2, [pc, #56]	; (9034 <LORAREG_InitSetAttrFnPtrsIN+0x48>)
    8ffc:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    8ffe:	490e      	ldr	r1, [pc, #56]	; (9038 <LORAREG_InitSetAttrFnPtrsIN+0x4c>)
    9000:	2280      	movs	r2, #128	; 0x80
    9002:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    9004:	490d      	ldr	r1, [pc, #52]	; (903c <LORAREG_InitSetAttrFnPtrsIN+0x50>)
    9006:	3204      	adds	r2, #4
    9008:	5099      	str	r1, [r3, r2]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    900a:	490d      	ldr	r1, [pc, #52]	; (9040 <LORAREG_InitSetAttrFnPtrsIN+0x54>)
    900c:	324c      	adds	r2, #76	; 0x4c
    900e:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    9010:	490c      	ldr	r1, [pc, #48]	; (9044 <LORAREG_InitSetAttrFnPtrsIN+0x58>)
    9012:	3204      	adds	r2, #4
    9014:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    9016:	490c      	ldr	r1, [pc, #48]	; (9048 <LORAREG_InitSetAttrFnPtrsIN+0x5c>)
    9018:	3210      	adds	r2, #16
    901a:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    901c:	490b      	ldr	r1, [pc, #44]	; (904c <LORAREG_InitSetAttrFnPtrsIN+0x60>)
    901e:	320c      	adds	r2, #12
    9020:	5099      	str	r1, [r3, r2]
}
    9022:	4770      	bx	lr
    9024:	20000c4c 	.word	0x20000c4c
    9028:	00007a7d 	.word	0x00007a7d
    902c:	00005a15 	.word	0x00005a15
    9030:	00006939 	.word	0x00006939
    9034:	00009179 	.word	0x00009179
    9038:	00006dfd 	.word	0x00006dfd
    903c:	00006d89 	.word	0x00006d89
    9040:	000068b5 	.word	0x000068b5
    9044:	00005c3d 	.word	0x00005c3d
    9048:	00006cd1 	.word	0x00006cd1
    904c:	00005c79 	.word	0x00005c79

00009050 <LORAREG_InitSetAttrFnPtrsJP>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    9050:	4b11      	ldr	r3, [pc, #68]	; (9098 <LORAREG_InitSetAttrFnPtrsJP+0x48>)
    9052:	4a12      	ldr	r2, [pc, #72]	; (909c <LORAREG_InitSetAttrFnPtrsJP+0x4c>)
    9054:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    9056:	4a12      	ldr	r2, [pc, #72]	; (90a0 <LORAREG_InitSetAttrFnPtrsJP+0x50>)
    9058:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[LBT_TIMER] = setLBTTimer;
    905a:	4912      	ldr	r1, [pc, #72]	; (90a4 <LORAREG_InitSetAttrFnPtrsJP+0x54>)
    905c:	2288      	movs	r2, #136	; 0x88
    905e:	5099      	str	r1, [r3, r2]
	pSetAttr[FREQUENCY] = setFrequency;
    9060:	4a11      	ldr	r2, [pc, #68]	; (90a8 <LORAREG_InitSetAttrFnPtrsJP+0x58>)
    9062:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    9064:	4911      	ldr	r1, [pc, #68]	; (90ac <LORAREG_InitSetAttrFnPtrsJP+0x5c>)
    9066:	22d0      	movs	r2, #208	; 0xd0
    9068:	5099      	str	r1, [r3, r2]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    906a:	4a11      	ldr	r2, [pc, #68]	; (90b0 <LORAREG_InitSetAttrFnPtrsJP+0x60>)
    906c:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    906e:	4911      	ldr	r1, [pc, #68]	; (90b4 <LORAREG_InitSetAttrFnPtrsJP+0x64>)
    9070:	2280      	movs	r2, #128	; 0x80
    9072:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    9074:	4910      	ldr	r1, [pc, #64]	; (90b8 <LORAREG_InitSetAttrFnPtrsJP+0x68>)
    9076:	3204      	adds	r2, #4
    9078:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    907a:	4910      	ldr	r1, [pc, #64]	; (90bc <LORAREG_InitSetAttrFnPtrsJP+0x6c>)
    907c:	3250      	adds	r2, #80	; 0x50
    907e:	5099      	str	r1, [r3, r2]
	pSetAttr[DUTY_CYCLE] = setDutyCycle;
    9080:	4a0f      	ldr	r2, [pc, #60]	; (90c0 <LORAREG_InitSetAttrFnPtrsJP+0x70>)
    9082:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = setDutyCycleTimer;
    9084:	4a0f      	ldr	r2, [pc, #60]	; (90c4 <LORAREG_InitSetAttrFnPtrsJP+0x74>)
    9086:	67da      	str	r2, [r3, #124]	; 0x7c
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    9088:	490f      	ldr	r1, [pc, #60]	; (90c8 <LORAREG_InitSetAttrFnPtrsJP+0x78>)
    908a:	22e4      	movs	r2, #228	; 0xe4
    908c:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    908e:	490f      	ldr	r1, [pc, #60]	; (90cc <LORAREG_InitSetAttrFnPtrsJP+0x7c>)
    9090:	320c      	adds	r2, #12
    9092:	5099      	str	r1, [r3, r2]
}
    9094:	4770      	bx	lr
    9096:	46c0      	nop			; (mov r8, r8)
    9098:	20000c4c 	.word	0x20000c4c
    909c:	00007a7d 	.word	0x00007a7d
    90a0:	00005b15 	.word	0x00005b15
    90a4:	000075fd 	.word	0x000075fd
    90a8:	00006939 	.word	0x00006939
    90ac:	000068b5 	.word	0x000068b5
    90b0:	00009179 	.word	0x00009179
    90b4:	00006dfd 	.word	0x00006dfd
    90b8:	00006d89 	.word	0x00006d89
    90bc:	00005c3d 	.word	0x00005c3d
    90c0:	00006a3d 	.word	0x00006a3d
    90c4:	00007089 	.word	0x00007089
    90c8:	00006cd1 	.word	0x00006cd1
    90cc:	00005c79 	.word	0x00005c79

000090d0 <LORAREG_InitSetAttrFnPtrsKR>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    90d0:	4b0f      	ldr	r3, [pc, #60]	; (9110 <LORAREG_InitSetAttrFnPtrsKR+0x40>)
    90d2:	4a10      	ldr	r2, [pc, #64]	; (9114 <LORAREG_InitSetAttrFnPtrsKR+0x44>)
    90d4:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    90d6:	4a10      	ldr	r2, [pc, #64]	; (9118 <LORAREG_InitSetAttrFnPtrsKR+0x48>)
    90d8:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[LBT_TIMER] = setLBTTimer;
    90da:	4910      	ldr	r1, [pc, #64]	; (911c <LORAREG_InitSetAttrFnPtrsKR+0x4c>)
    90dc:	2288      	movs	r2, #136	; 0x88
    90de:	5099      	str	r1, [r3, r2]
	pSetAttr[FREQUENCY] = setFrequency;
    90e0:	4a0f      	ldr	r2, [pc, #60]	; (9120 <LORAREG_InitSetAttrFnPtrsKR+0x50>)
    90e2:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    90e4:	490f      	ldr	r1, [pc, #60]	; (9124 <LORAREG_InitSetAttrFnPtrsKR+0x54>)
    90e6:	22d0      	movs	r2, #208	; 0xd0
    90e8:	5099      	str	r1, [r3, r2]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    90ea:	4a0f      	ldr	r2, [pc, #60]	; (9128 <LORAREG_InitSetAttrFnPtrsKR+0x58>)
    90ec:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    90ee:	490f      	ldr	r1, [pc, #60]	; (912c <LORAREG_InitSetAttrFnPtrsKR+0x5c>)
    90f0:	2280      	movs	r2, #128	; 0x80
    90f2:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    90f4:	490e      	ldr	r1, [pc, #56]	; (9130 <LORAREG_InitSetAttrFnPtrsKR+0x60>)
    90f6:	3204      	adds	r2, #4
    90f8:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    90fa:	490e      	ldr	r1, [pc, #56]	; (9134 <LORAREG_InitSetAttrFnPtrsKR+0x64>)
    90fc:	3250      	adds	r2, #80	; 0x50
    90fe:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    9100:	490d      	ldr	r1, [pc, #52]	; (9138 <LORAREG_InitSetAttrFnPtrsKR+0x68>)
    9102:	3210      	adds	r2, #16
    9104:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    9106:	490d      	ldr	r1, [pc, #52]	; (913c <LORAREG_InitSetAttrFnPtrsKR+0x6c>)
    9108:	320c      	adds	r2, #12
    910a:	5099      	str	r1, [r3, r2]
}
    910c:	4770      	bx	lr
    910e:	46c0      	nop			; (mov r8, r8)
    9110:	20000c4c 	.word	0x20000c4c
    9114:	00007a7d 	.word	0x00007a7d
    9118:	00005b15 	.word	0x00005b15
    911c:	000075fd 	.word	0x000075fd
    9120:	00006939 	.word	0x00006939
    9124:	000068b5 	.word	0x000068b5
    9128:	00009179 	.word	0x00009179
    912c:	00006dfd 	.word	0x00006dfd
    9130:	00006d89 	.word	0x00006d89
    9134:	00005c3d 	.word	0x00005c3d
    9138:	00006cd1 	.word	0x00006cd1
    913c:	00005c79 	.word	0x00005c79

00009140 <LORAREG_GetAttr>:
{
    9140:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    9142:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    9144:	283c      	cmp	r0, #60	; 0x3c
    9146:	d901      	bls.n	914c <LORAREG_GetAttr+0xc>
}
    9148:	0018      	movs	r0, r3
    914a:	bd10      	pop	{r4, pc}
	    result = pGetAttr[attrType](attrType, attrInput,attrOutput);	
    914c:	0084      	lsls	r4, r0, #2
    914e:	4b02      	ldr	r3, [pc, #8]	; (9158 <LORAREG_GetAttr+0x18>)
    9150:	58e3      	ldr	r3, [r4, r3]
    9152:	4798      	blx	r3
    9154:	0003      	movs	r3, r0
    9156:	e7f7      	b.n	9148 <LORAREG_GetAttr+0x8>
    9158:	20000b58 	.word	0x20000b58

0000915c <LORAREG_ValidateAttr>:
{
    915c:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    915e:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    9160:	283c      	cmp	r0, #60	; 0x3c
    9162:	d901      	bls.n	9168 <LORAREG_ValidateAttr+0xc>
}
    9164:	0018      	movs	r0, r3
    9166:	bd10      	pop	{r4, pc}
	    result = pValidateAttr[attrType](attrType, attrInput);		
    9168:	0082      	lsls	r2, r0, #2
    916a:	4b02      	ldr	r3, [pc, #8]	; (9174 <LORAREG_ValidateAttr+0x18>)
    916c:	58d3      	ldr	r3, [r2, r3]
    916e:	4798      	blx	r3
    9170:	0003      	movs	r3, r0
    9172:	e7f7      	b.n	9164 <LORAREG_ValidateAttr+0x8>
    9174:	20000d40 	.word	0x20000d40

00009178 <setNewChannel>:
{
    9178:	b5f0      	push	{r4, r5, r6, r7, lr}
    917a:	46d6      	mov	lr, sl
    917c:	464f      	mov	r7, r9
    917e:	b580      	push	{r7, lr}
    9180:	b085      	sub	sp, #20
	if(((ISM_ASBAND) & (1 << RegParams.band)) != 0 || ((ISM_JPN923) == RegParams.band))
    9182:	232e      	movs	r3, #46	; 0x2e
    9184:	4a30      	ldr	r2, [pc, #192]	; (9248 <setNewChannel+0xd0>)
    9186:	5cd2      	ldrb	r2, [r2, r3]
    9188:	4b30      	ldr	r3, [pc, #192]	; (924c <setNewChannel+0xd4>)
    918a:	4113      	asrs	r3, r2
    918c:	07db      	lsls	r3, r3, #31
    918e:	d407      	bmi.n	91a0 <setNewChannel+0x28>
    9190:	2a05      	cmp	r2, #5
    9192:	d020      	beq.n	91d6 <setNewChannel+0x5e>
	else if( ISM_KR920 == RegParams.band)
    9194:	2a04      	cmp	r2, #4
    9196:	d020      	beq.n	91da <setNewChannel+0x62>
	else if( ISM_IND865 == RegParams.band)
    9198:	2a0f      	cmp	r2, #15
    919a:	d020      	beq.n	91de <setNewChannel+0x66>
		pUpdateChidStatus = UpdateChannelIdStatusT2;
    919c:	4e2c      	ldr	r6, [pc, #176]	; (9250 <setNewChannel+0xd8>)
    919e:	e000      	b.n	91a2 <setNewChannel+0x2a>
		pUpdateChidStatus = UpdateChannelIdStatusT3;
    91a0:	4e2c      	ldr	r6, [pc, #176]	; (9254 <setNewChannel+0xdc>)
	memcpy(&newCh, attrInput,sizeof(UpdateNewCh_t));
    91a2:	ac03      	add	r4, sp, #12
    91a4:	2204      	movs	r2, #4
    91a6:	0020      	movs	r0, r4
    91a8:	4b2b      	ldr	r3, [pc, #172]	; (9258 <setNewChannel+0xe0>)
    91aa:	4798      	blx	r3
	valchMaskCntl.chnlMask = newCh.channelMask;
    91ac:	8823      	ldrh	r3, [r4, #0]
    91ae:	aa02      	add	r2, sp, #8
    91b0:	8053      	strh	r3, [r2, #2]
	valchMaskCntl.chnlMaskCntl = newCh.channelMaskCntl;
    91b2:	78a4      	ldrb	r4, [r4, #2]
    91b4:	7014      	strb	r4, [r2, #0]
	if(LORAREG_ValidateAttr(CHMASK_CHCNTL,&valchMaskCntl) != LORAWAN_SUCCESS)
    91b6:	0011      	movs	r1, r2
    91b8:	2038      	movs	r0, #56	; 0x38
    91ba:	4b28      	ldr	r3, [pc, #160]	; (925c <setNewChannel+0xe4>)
    91bc:	4798      	blx	r3
    91be:	0003      	movs	r3, r0
    91c0:	9001      	str	r0, [sp, #4]
    91c2:	2808      	cmp	r0, #8
    91c4:	d00d      	beq.n	91e2 <setNewChannel+0x6a>
		result = LORAWAN_INVALID_PARAMETER;
    91c6:	230a      	movs	r3, #10
    91c8:	9301      	str	r3, [sp, #4]
}
    91ca:	9801      	ldr	r0, [sp, #4]
    91cc:	b005      	add	sp, #20
    91ce:	bc0c      	pop	{r2, r3}
    91d0:	4691      	mov	r9, r2
    91d2:	469a      	mov	sl, r3
    91d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pUpdateChidStatus = UpdateChannelIdStatusT3;
    91d6:	4e1f      	ldr	r6, [pc, #124]	; (9254 <setNewChannel+0xdc>)
    91d8:	e7e3      	b.n	91a2 <setNewChannel+0x2a>
		pUpdateChidStatus = UpdateChannelIdStatusT4;
    91da:	4e21      	ldr	r6, [pc, #132]	; (9260 <setNewChannel+0xe8>)
    91dc:	e7e1      	b.n	91a2 <setNewChannel+0x2a>
		pUpdateChidStatus = UpdateChannelIdStatus;
    91de:	4e21      	ldr	r6, [pc, #132]	; (9264 <setNewChannel+0xec>)
    91e0:	e7df      	b.n	91a2 <setNewChannel+0x2a>
		if(newCh.channelMaskCntl == 6)
    91e2:	2c06      	cmp	r4, #6
    91e4:	d00b      	beq.n	91fe <setNewChannel+0x86>
		else if(newCh.channelMaskCntl == 0)
    91e6:	2c00      	cmp	r4, #0
    91e8:	d1ef      	bne.n	91ca <setNewChannel+0x52>
			for(i = 0; i < RegParams.maxChannels; i++)
    91ea:	232a      	movs	r3, #42	; 0x2a
    91ec:	4a16      	ldr	r2, [pc, #88]	; (9248 <setNewChannel+0xd0>)
    91ee:	56d3      	ldrsb	r3, [r2, r3]
    91f0:	2b00      	cmp	r3, #0
    91f2:	ddea      	ble.n	91ca <setNewChannel+0x52>
				if((newCh.channelMask & BIT0) == BIT0)
    91f4:	af03      	add	r7, sp, #12
    91f6:	2301      	movs	r3, #1
    91f8:	4699      	mov	r9, r3
			for(i = 0; i < RegParams.maxChannels; i++)
    91fa:	4692      	mov	sl, r2
    91fc:	e01c      	b.n	9238 <setNewChannel+0xc0>
			for(i = 0; i < RegParams.maxChannels; i++)
    91fe:	3322      	adds	r3, #34	; 0x22
    9200:	4a11      	ldr	r2, [pc, #68]	; (9248 <setNewChannel+0xd0>)
    9202:	56d3      	ldrsb	r3, [r2, r3]
    9204:	2b00      	cmp	r3, #0
    9206:	dde0      	ble.n	91ca <setNewChannel+0x52>
    9208:	2400      	movs	r4, #0
    920a:	0017      	movs	r7, r2
    920c:	252a      	movs	r5, #42	; 0x2a
				pUpdateChidStatus(i,ENABLED);
    920e:	2101      	movs	r1, #1
    9210:	0020      	movs	r0, r4
    9212:	47b0      	blx	r6
			for(i = 0; i < RegParams.maxChannels; i++)
    9214:	3401      	adds	r4, #1
    9216:	b2e4      	uxtb	r4, r4
    9218:	577b      	ldrsb	r3, [r7, r5]
    921a:	429c      	cmp	r4, r3
    921c:	dbf7      	blt.n	920e <setNewChannel+0x96>
    921e:	e7d4      	b.n	91ca <setNewChannel+0x52>
					pUpdateChidStatus(i,DISABLED);
    9220:	2100      	movs	r1, #0
    9222:	0020      	movs	r0, r4
    9224:	47b0      	blx	r6
				newCh.channelMask = newCh.channelMask >> SHIFT1;
    9226:	086d      	lsrs	r5, r5, #1
    9228:	803d      	strh	r5, [r7, #0]
			for(i = 0; i < RegParams.maxChannels; i++)
    922a:	3401      	adds	r4, #1
    922c:	b2e4      	uxtb	r4, r4
    922e:	232a      	movs	r3, #42	; 0x2a
    9230:	4652      	mov	r2, sl
    9232:	56d3      	ldrsb	r3, [r2, r3]
    9234:	429c      	cmp	r4, r3
    9236:	dac8      	bge.n	91ca <setNewChannel+0x52>
				if((newCh.channelMask & BIT0) == BIT0)
    9238:	883d      	ldrh	r5, [r7, #0]
    923a:	464b      	mov	r3, r9
    923c:	422b      	tst	r3, r5
    923e:	d0ef      	beq.n	9220 <setNewChannel+0xa8>
					pUpdateChidStatus(i, ENABLED);
    9240:	4649      	mov	r1, r9
    9242:	0020      	movs	r0, r4
    9244:	47b0      	blx	r6
    9246:	e7ee      	b.n	9226 <setNewChannel+0xae>
    9248:	20001220 	.word	0x20001220
    924c:	00007fc0 	.word	0x00007fc0
    9250:	00005921 	.word	0x00005921
    9254:	00005a69 	.word	0x00005a69
    9258:	0001516d 	.word	0x0001516d
    925c:	0000915d 	.word	0x0000915d
    9260:	00005aa9 	.word	0x00005aa9
    9264:	000058dd 	.word	0x000058dd

00009268 <LORAREG_SetAttr>:
{
    9268:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    926a:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    926c:	283c      	cmp	r0, #60	; 0x3c
    926e:	d901      	bls.n	9274 <LORAREG_SetAttr+0xc>
}
    9270:	0018      	movs	r0, r3
    9272:	bd10      	pop	{r4, pc}
	    result = pSetAttr[attrType](attrType, attrInput);		
    9274:	0082      	lsls	r2, r0, #2
    9276:	4b02      	ldr	r3, [pc, #8]	; (9280 <LORAREG_SetAttr+0x18>)
    9278:	58d3      	ldr	r3, [r2, r3]
    927a:	4798      	blx	r3
    927c:	0003      	movs	r3, r0
    927e:	e7f7      	b.n	9270 <LORAREG_SetAttr+0x8>
    9280:	20000c4c 	.word	0x20000c4c

00009284 <CreateAllRegSoftwareTimers>:
{
    9284:	b510      	push	{r4, lr}
			status = SwTimerCreate(&regTimerId[i]);
    9286:	4809      	ldr	r0, [pc, #36]	; (92ac <CreateAllRegSoftwareTimers+0x28>)
    9288:	4b09      	ldr	r3, [pc, #36]	; (92b0 <CreateAllRegSoftwareTimers+0x2c>)
    928a:	4798      	blx	r3
		if(LORAWAN_SUCCESS == status)
    928c:	2808      	cmp	r0, #8
    928e:	d10c      	bne.n	92aa <CreateAllRegSoftwareTimers+0x26>
			status = SwTimerCreate(&regTimerId[i]);
    9290:	4808      	ldr	r0, [pc, #32]	; (92b4 <CreateAllRegSoftwareTimers+0x30>)
    9292:	4b07      	ldr	r3, [pc, #28]	; (92b0 <CreateAllRegSoftwareTimers+0x2c>)
    9294:	4798      	blx	r3
		if(LORAWAN_SUCCESS == status)
    9296:	2808      	cmp	r0, #8
    9298:	d107      	bne.n	92aa <CreateAllRegSoftwareTimers+0x26>
			status = SwTimerCreate(&regTimerId[i]);
    929a:	4807      	ldr	r0, [pc, #28]	; (92b8 <CreateAllRegSoftwareTimers+0x34>)
    929c:	4b04      	ldr	r3, [pc, #16]	; (92b0 <CreateAllRegSoftwareTimers+0x2c>)
    929e:	4798      	blx	r3
		if(LORAWAN_SUCCESS == status)
    92a0:	2808      	cmp	r0, #8
    92a2:	d102      	bne.n	92aa <CreateAllRegSoftwareTimers+0x26>
			status = SwTimerCreate(&regTimerId[i]);
    92a4:	4805      	ldr	r0, [pc, #20]	; (92bc <CreateAllRegSoftwareTimers+0x38>)
    92a6:	4b02      	ldr	r3, [pc, #8]	; (92b0 <CreateAllRegSoftwareTimers+0x2c>)
    92a8:	4798      	blx	r3
}
    92aa:	bd10      	pop	{r4, pc}
    92ac:	2000121c 	.word	0x2000121c
    92b0:	00009b21 	.word	0x00009b21
    92b4:	2000121d 	.word	0x2000121d
    92b8:	2000121e 	.word	0x2000121e
    92bc:	2000121f 	.word	0x2000121f

000092c0 <StopAllRegSoftwareTimers>:
{
    92c0:	b570      	push	{r4, r5, r6, lr}
    92c2:	2400      	movs	r4, #0
		SwTimerStop(regTimerId[i]);
    92c4:	4e03      	ldr	r6, [pc, #12]	; (92d4 <StopAllRegSoftwareTimers+0x14>)
    92c6:	4d04      	ldr	r5, [pc, #16]	; (92d8 <StopAllRegSoftwareTimers+0x18>)
    92c8:	5d30      	ldrb	r0, [r6, r4]
    92ca:	47a8      	blx	r5
    92cc:	3401      	adds	r4, #1
	for (uint8_t i=0; i< REG_PARAMS_TIMERS_COUNT; i++)
    92ce:	2c04      	cmp	r4, #4
    92d0:	d1fa      	bne.n	92c8 <StopAllRegSoftwareTimers+0x8>
}
    92d2:	bd70      	pop	{r4, r5, r6, pc}
    92d4:	2000121c 	.word	0x2000121c
    92d8:	00009e61 	.word	0x00009e61

000092dc <LORAREG_Init>:
{	
    92dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    92de:	0007      	movs	r7, r0
	if(!initialized)
    92e0:	4b24      	ldr	r3, [pc, #144]	; (9374 <LORAREG_Init+0x98>)
    92e2:	781b      	ldrb	r3, [r3, #0]
    92e4:	2b00      	cmp	r3, #0
    92e6:	d109      	bne.n	92fc <LORAREG_Init+0x20>
		if (LORAWAN_SUCCESS == CreateAllRegSoftwareTimers())
    92e8:	4b23      	ldr	r3, [pc, #140]	; (9378 <LORAREG_Init+0x9c>)
    92ea:	4798      	blx	r3
    92ec:	2808      	cmp	r0, #8
    92ee:	d001      	beq.n	92f4 <LORAREG_Init+0x18>
			result = LORAWAN_RESOURCE_UNAVAILABLE;
    92f0:	2014      	movs	r0, #20
    92f2:	e006      	b.n	9302 <LORAREG_Init+0x26>
			initialized = true;
    92f4:	2201      	movs	r2, #1
    92f6:	4b1f      	ldr	r3, [pc, #124]	; (9374 <LORAREG_Init+0x98>)
    92f8:	701a      	strb	r2, [r3, #0]
    92fa:	e002      	b.n	9302 <LORAREG_Init+0x26>
		StopAllRegSoftwareTimers();	
    92fc:	4b1f      	ldr	r3, [pc, #124]	; (937c <LORAREG_Init+0xa0>)
    92fe:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9300:	2008      	movs	r0, #8
    9302:	2300      	movs	r3, #0
		pGetAttr[i] = InValidGetAttr;
    9304:	4e1e      	ldr	r6, [pc, #120]	; (9380 <LORAREG_Init+0xa4>)
    9306:	4d1f      	ldr	r5, [pc, #124]	; (9384 <LORAREG_Init+0xa8>)
		pValidateAttr[i] = InValidAttr;
    9308:	4c1f      	ldr	r4, [pc, #124]	; (9388 <LORAREG_Init+0xac>)
    930a:	4a20      	ldr	r2, [pc, #128]	; (938c <LORAREG_Init+0xb0>)
		pSetAttr[i] = InValidAttr;
    930c:	4920      	ldr	r1, [pc, #128]	; (9390 <LORAREG_Init+0xb4>)
		pGetAttr[i] = InValidGetAttr;
    930e:	519d      	str	r5, [r3, r6]
		pValidateAttr[i] = InValidAttr;
    9310:	511a      	str	r2, [r3, r4]
		pSetAttr[i] = InValidAttr;
    9312:	505a      	str	r2, [r3, r1]
    9314:	3304      	adds	r3, #4
	for(int i = 0; i < REG_NUM_ATTRIBUTES; i++)
    9316:	2bf4      	cmp	r3, #244	; 0xf4
    9318:	d1f9      	bne.n	930e <LORAREG_Init+0x32>
	if(ismBand == ISM_NA915)
    931a:	2f02      	cmp	r7, #2
    931c:	d00d      	beq.n	933a <LORAREG_Init+0x5e>
	else if(ismBand == ISM_EU868 || ismBand == ISM_EU433)
    931e:	2f01      	cmp	r7, #1
    9320:	d90f      	bls.n	9342 <LORAREG_Init+0x66>
	else if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    9322:	1fbb      	subs	r3, r7, #6
    9324:	2b08      	cmp	r3, #8
    9326:	d910      	bls.n	934a <LORAREG_Init+0x6e>
	else if(ismBand == ISM_AU915)
    9328:	2f03      	cmp	r7, #3
    932a:	d012      	beq.n	9352 <LORAREG_Init+0x76>
	else if(ismBand == ISM_IND865)
    932c:	2f0f      	cmp	r7, #15
    932e:	d014      	beq.n	935a <LORAREG_Init+0x7e>
	else if(ismBand == ISM_JPN923)
    9330:	2f05      	cmp	r7, #5
    9332:	d016      	beq.n	9362 <LORAREG_Init+0x86>
	else if(ismBand == ISM_KR920)
    9334:	2f04      	cmp	r7, #4
    9336:	d018      	beq.n	936a <LORAREG_Init+0x8e>
}
    9338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    result = LORAReg_InitNA(ismBand);
    933a:	2002      	movs	r0, #2
    933c:	4b15      	ldr	r3, [pc, #84]	; (9394 <LORAREG_Init+0xb8>)
    933e:	4798      	blx	r3
    9340:	e7fa      	b.n	9338 <LORAREG_Init+0x5c>
	    result = LORAReg_InitEU(ismBand);		
    9342:	0038      	movs	r0, r7
    9344:	4b14      	ldr	r3, [pc, #80]	; (9398 <LORAREG_Init+0xbc>)
    9346:	4798      	blx	r3
    9348:	e7f6      	b.n	9338 <LORAREG_Init+0x5c>
		result = LORAReg_InitAS(ismBand);
    934a:	0038      	movs	r0, r7
    934c:	4b13      	ldr	r3, [pc, #76]	; (939c <LORAREG_Init+0xc0>)
    934e:	4798      	blx	r3
    9350:	e7f2      	b.n	9338 <LORAREG_Init+0x5c>
		result = LORAReg_InitAU(ismBand);
    9352:	2003      	movs	r0, #3
    9354:	4b12      	ldr	r3, [pc, #72]	; (93a0 <LORAREG_Init+0xc4>)
    9356:	4798      	blx	r3
    9358:	e7ee      	b.n	9338 <LORAREG_Init+0x5c>
		result = LORAReg_InitIN(ismBand);
    935a:	200f      	movs	r0, #15
    935c:	4b11      	ldr	r3, [pc, #68]	; (93a4 <LORAREG_Init+0xc8>)
    935e:	4798      	blx	r3
    9360:	e7ea      	b.n	9338 <LORAREG_Init+0x5c>
		result = LORAReg_InitJP(ismBand);
    9362:	2005      	movs	r0, #5
    9364:	4b10      	ldr	r3, [pc, #64]	; (93a8 <LORAREG_Init+0xcc>)
    9366:	4798      	blx	r3
    9368:	e7e6      	b.n	9338 <LORAREG_Init+0x5c>
		result = LORAReg_InitKR(ismBand);
    936a:	2004      	movs	r0, #4
    936c:	4b0f      	ldr	r3, [pc, #60]	; (93ac <LORAREG_Init+0xd0>)
    936e:	4798      	blx	r3
    9370:	e7e2      	b.n	9338 <LORAREG_Init+0x5c>
    9372:	46c0      	nop			; (mov r8, r8)
    9374:	20000b55 	.word	0x20000b55
    9378:	00009285 	.word	0x00009285
    937c:	000092c1 	.word	0x000092c1
    9380:	20000b58 	.word	0x20000b58
    9384:	000052b9 	.word	0x000052b9
    9388:	20000d40 	.word	0x20000d40
    938c:	000052bd 	.word	0x000052bd
    9390:	20000c4c 	.word	0x20000c4c
    9394:	000050dd 	.word	0x000050dd
    9398:	00004805 	.word	0x00004805
    939c:	00004425 	.word	0x00004425
    93a0:	0000462d 	.word	0x0000462d
    93a4:	00004a69 	.word	0x00004a69
    93a8:	00004c0d 	.word	0x00004c0d
    93ac:	00004e51 	.word	0x00004e51

000093b0 <LORAREG_SupportedBands>:
	*bands = value;
    93b0:	2301      	movs	r3, #1
    93b2:	425b      	negs	r3, r3
    93b4:	8003      	strh	r3, [r0, #0]
}
    93b6:	2008      	movs	r0, #8
    93b8:	4770      	bx	lr
	...

000093bc <LORAREG_UnInit>:
{
    93bc:	b510      	push	{r4, lr}
	StopAllRegSoftwareTimers();
    93be:	4b04      	ldr	r3, [pc, #16]	; (93d0 <LORAREG_UnInit+0x14>)
    93c0:	4798      	blx	r3
	memset(&RegParams,0,sizeof(RegParams_t));
    93c2:	4a04      	ldr	r2, [pc, #16]	; (93d4 <LORAREG_UnInit+0x18>)
    93c4:	2100      	movs	r1, #0
    93c6:	4804      	ldr	r0, [pc, #16]	; (93d8 <LORAREG_UnInit+0x1c>)
    93c8:	4b04      	ldr	r3, [pc, #16]	; (93dc <LORAREG_UnInit+0x20>)
    93ca:	4798      	blx	r3
}
    93cc:	200a      	movs	r0, #10
    93ce:	bd10      	pop	{r4, pc}
    93d0:	000092c1 	.word	0x000092c1
    93d4:	0000020b 	.word	0x0000020b
    93d8:	20001220 	.word	0x20001220
    93dc:	000151f1 	.word	0x000151f1

000093e0 <sal_FillSubKey>:
		}
	}
}

static void sal_FillSubKey( uint8_t *source, uint8_t *key, uint8_t size)
{
    93e0:	b530      	push	{r4, r5, lr}
	uint8_t i = 0;
	uint8_t carry = 0;

	i=size;

	while(i--)
    93e2:	1e53      	subs	r3, r2, #1
    93e4:	b2db      	uxtb	r3, r3
    93e6:	2a00      	cmp	r2, #0
    93e8:	d00b      	beq.n	9402 <sal_FillSubKey+0x22>
    93ea:	2400      	movs	r4, #0
	{
		key[i] = (source[i] << 1) | carry;
    93ec:	18c5      	adds	r5, r0, r3
    93ee:	782a      	ldrb	r2, [r5, #0]
    93f0:	0052      	lsls	r2, r2, #1
    93f2:	4322      	orrs	r2, r4
    93f4:	54ca      	strb	r2, [r1, r3]
		carry = !!(source[i] & 0x80);
    93f6:	782c      	ldrb	r4, [r5, #0]
    93f8:	09e4      	lsrs	r4, r4, #7
	while(i--)
    93fa:	3b01      	subs	r3, #1
    93fc:	b2db      	uxtb	r3, r3
    93fe:	2bff      	cmp	r3, #255	; 0xff
    9400:	d1f4      	bne.n	93ec <sal_FillSubKey+0xc>
	}
}
    9402:	bd30      	pop	{r4, r5, pc}

00009404 <SAL_Init>:
{
    9404:	b510      	push	{r4, lr}
	AESInit();
    9406:	4b02      	ldr	r3, [pc, #8]	; (9410 <SAL_Init+0xc>)
    9408:	4798      	blx	r3
}
    940a:	2000      	movs	r0, #0
    940c:	bd10      	pop	{r4, pc}
    940e:	46c0      	nop			; (mov r8, r8)
    9410:	000096f1 	.word	0x000096f1

00009414 <SAL_AESEncode>:
{
    9414:	b510      	push	{r4, lr}
    9416:	b084      	sub	sp, #16
    9418:	0004      	movs	r4, r0
    941a:	0011      	movs	r1, r2
	memcpy(useKey, key, sizeof(useKey));
    941c:	2210      	movs	r2, #16
    941e:	4668      	mov	r0, sp
    9420:	4b04      	ldr	r3, [pc, #16]	; (9434 <SAL_AESEncode+0x20>)
    9422:	4798      	blx	r3
	AESEncode(buffer, useKey);
    9424:	4669      	mov	r1, sp
    9426:	0020      	movs	r0, r4
    9428:	4b03      	ldr	r3, [pc, #12]	; (9438 <SAL_AESEncode+0x24>)
    942a:	4798      	blx	r3
}
    942c:	2000      	movs	r0, #0
    942e:	b004      	add	sp, #16
    9430:	bd10      	pop	{r4, pc}
    9432:	46c0      	nop			; (mov r8, r8)
    9434:	0001516d 	.word	0x0001516d
    9438:	00009615 	.word	0x00009615

0000943c <SAL_DeriveSessionKey>:
{
    943c:	b510      	push	{r4, lr}
	sal_status = SAL_AESEncode(block, src_key, key);
    943e:	4b01      	ldr	r3, [pc, #4]	; (9444 <SAL_DeriveSessionKey+0x8>)
    9440:	4798      	blx	r3
}
    9442:	bd10      	pop	{r4, pc}
    9444:	00009415 	.word	0x00009415

00009448 <SAL_Read>:
}
    9448:	2000      	movs	r0, #0
    944a:	4770      	bx	lr

0000944c <SAL_AESCmac>:
{
    944c:	b5f0      	push	{r4, r5, r6, r7, lr}
    944e:	46d6      	mov	lr, sl
    9450:	464f      	mov	r7, r9
    9452:	4646      	mov	r6, r8
    9454:	b5c0      	push	{r6, r7, lr}
    9456:	b0a4      	sub	sp, #144	; 0x90
    9458:	9001      	str	r0, [sp, #4]
    945a:	000f      	movs	r7, r1
    945c:	9102      	str	r1, [sp, #8]
    945e:	9203      	str	r2, [sp, #12]
    9460:	469a      	mov	sl, r3
    9462:	ab2c      	add	r3, sp, #176	; 0xb0
    9464:	781c      	ldrb	r4, [r3, #0]
	uint8_t const_Rb[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    9466:	ae08      	add	r6, sp, #32
    9468:	2210      	movs	r2, #16
    946a:	2100      	movs	r1, #0
    946c:	0030      	movs	r0, r6
    946e:	4d65      	ldr	r5, [pc, #404]	; (9604 <SAL_AESCmac+0x1b8>)
    9470:	47a8      	blx	r5
    9472:	2387      	movs	r3, #135	; 0x87
    9474:	73f3      	strb	r3, [r6, #15]
	memset(l, 0, sizeof(l));
    9476:	2210      	movs	r2, #16
    9478:	2100      	movs	r1, #0
    947a:	a804      	add	r0, sp, #16
    947c:	47a8      	blx	r5
	SAL_AESEncode(l, key_type, key);
    947e:	9a01      	ldr	r2, [sp, #4]
    9480:	0039      	movs	r1, r7
    9482:	a804      	add	r0, sp, #16
    9484:	4b60      	ldr	r3, [pc, #384]	; (9608 <SAL_AESCmac+0x1bc>)
    9486:	4798      	blx	r3
	if ( (l[0] & 0x80) == 0x00 )  // MSB( bufferLocal[0] ) is '0'
    9488:	ab04      	add	r3, sp, #16
    948a:	781b      	ldrb	r3, [r3, #0]
    948c:	2b7f      	cmp	r3, #127	; 0x7f
    948e:	d82e      	bhi.n	94ee <SAL_AESCmac+0xa2>
		sal_FillSubKey( l, k1, (sizeof(l) ) );
    9490:	2210      	movs	r2, #16
    9492:	a920      	add	r1, sp, #128	; 0x80
    9494:	a804      	add	r0, sp, #16
    9496:	4b5d      	ldr	r3, [pc, #372]	; (960c <SAL_AESCmac+0x1c0>)
    9498:	4798      	blx	r3
	if ( (k1[0] & 0x80) == 0x00 )   // MSB( k1[0] ) is '0'
    949a:	ab20      	add	r3, sp, #128	; 0x80
    949c:	781b      	ldrb	r3, [r3, #0]
    949e:	2b7f      	cmp	r3, #127	; 0x7f
    94a0:	d835      	bhi.n	950e <SAL_AESCmac+0xc2>
		sal_FillSubKey( k1, k2, (sizeof(l)) );
    94a2:	2210      	movs	r2, #16
    94a4:	a91c      	add	r1, sp, #112	; 0x70
    94a6:	a820      	add	r0, sp, #128	; 0x80
    94a8:	4b58      	ldr	r3, [pc, #352]	; (960c <SAL_AESCmac+0x1c0>)
    94aa:	4798      	blx	r3
	n = (size + 15) >> 4;
    94ac:	0023      	movs	r3, r4
    94ae:	330f      	adds	r3, #15
    94b0:	111d      	asrs	r5, r3, #4
    94b2:	b2ea      	uxtb	r2, r5
    94b4:	4690      	mov	r8, r2
	if (n == 0)
    94b6:	2a00      	cmp	r2, #0
    94b8:	d039      	beq.n	952e <SAL_AESCmac+0xe2>
	if ( flag == 1 )
    94ba:	0722      	lsls	r2, r4, #28
    94bc:	d139      	bne.n	9532 <SAL_AESCmac+0xe6>
		for (i=((n-1) << 4); i<(n << 4); i++)
    94be:	4642      	mov	r2, r8
    94c0:	3a01      	subs	r2, #1
    94c2:	0112      	lsls	r2, r2, #4
    94c4:	b2d6      	uxtb	r6, r2
    94c6:	27ff      	movs	r7, #255	; 0xff
    94c8:	013f      	lsls	r7, r7, #4
    94ca:	401f      	ands	r7, r3
    94cc:	42be      	cmp	r6, r7
    94ce:	da54      	bge.n	957a <SAL_AESCmac+0x12e>
    94d0:	0033      	movs	r3, r6
			mLast[j] = input[i] ^ k1[j];
    94d2:	a910      	add	r1, sp, #64	; 0x40
    94d4:	aa20      	add	r2, sp, #128	; 0x80
    94d6:	1b98      	subs	r0, r3, r6
    94d8:	b2c0      	uxtb	r0, r0
    94da:	4654      	mov	r4, sl
    94dc:	5ce4      	ldrb	r4, [r4, r3]
    94de:	5c15      	ldrb	r5, [r2, r0]
    94e0:	406c      	eors	r4, r5
    94e2:	540c      	strb	r4, [r1, r0]
		for (i=((n-1) << 4); i<(n << 4); i++)
    94e4:	3301      	adds	r3, #1
    94e6:	b2db      	uxtb	r3, r3
    94e8:	42bb      	cmp	r3, r7
    94ea:	dbf4      	blt.n	94d6 <SAL_AESCmac+0x8a>
    94ec:	e045      	b.n	957a <SAL_AESCmac+0x12e>
		sal_FillSubKey( l, k1, (sizeof(l) ) );
    94ee:	2210      	movs	r2, #16
    94f0:	a920      	add	r1, sp, #128	; 0x80
    94f2:	a804      	add	r0, sp, #16
    94f4:	4b45      	ldr	r3, [pc, #276]	; (960c <SAL_AESCmac+0x1c0>)
    94f6:	4798      	blx	r3
    94f8:	2300      	movs	r3, #0
			k1[i] ^= const_Rb[i];
    94fa:	aa20      	add	r2, sp, #128	; 0x80
    94fc:	a908      	add	r1, sp, #32
    94fe:	5c98      	ldrb	r0, [r3, r2]
    9500:	5c5d      	ldrb	r5, [r3, r1]
    9502:	4068      	eors	r0, r5
    9504:	5498      	strb	r0, [r3, r2]
    9506:	3301      	adds	r3, #1
		for (i=0; i<sizeof(l); i++)
    9508:	2b10      	cmp	r3, #16
    950a:	d1f8      	bne.n	94fe <SAL_AESCmac+0xb2>
    950c:	e7c5      	b.n	949a <SAL_AESCmac+0x4e>
		sal_FillSubKey( k1, k2, (sizeof(l) ) );
    950e:	2210      	movs	r2, #16
    9510:	a91c      	add	r1, sp, #112	; 0x70
    9512:	a820      	add	r0, sp, #128	; 0x80
    9514:	4b3d      	ldr	r3, [pc, #244]	; (960c <SAL_AESCmac+0x1c0>)
    9516:	4798      	blx	r3
    9518:	2300      	movs	r3, #0
			k2[i] = k2[i] ^ const_Rb[i];
    951a:	aa1c      	add	r2, sp, #112	; 0x70
    951c:	a908      	add	r1, sp, #32
    951e:	5c98      	ldrb	r0, [r3, r2]
    9520:	5c5d      	ldrb	r5, [r3, r1]
    9522:	4068      	eors	r0, r5
    9524:	5498      	strb	r0, [r3, r2]
    9526:	3301      	adds	r3, #1
		for (i=0; i<sizeof(l); i++)
    9528:	2b10      	cmp	r3, #16
    952a:	d1f8      	bne.n	951e <SAL_AESCmac+0xd2>
    952c:	e7be      	b.n	94ac <SAL_AESCmac+0x60>
		n = 1;
    952e:	2301      	movs	r3, #1
    9530:	4698      	mov	r8, r3
		ptr = &input[size - (size%16)];
    9532:	230f      	movs	r3, #15
    9534:	0020      	movs	r0, r4
    9536:	4398      	bics	r0, r3
    9538:	2300      	movs	r3, #0
			if ( i < (size%16) )
    953a:	220f      	movs	r2, #15
    953c:	4014      	ands	r4, r2
					padded[i] = 0x00;
    953e:	a90c      	add	r1, sp, #48	; 0x30
    9540:	2700      	movs	r7, #0
					padded[i] = 0x80;
    9542:	2680      	movs	r6, #128	; 0x80
				padded[i] = ptr[i];
    9544:	4450      	add	r0, sl
    9546:	e005      	b.n	9554 <SAL_AESCmac+0x108>
				if ( i == (size%16) )
    9548:	4294      	cmp	r4, r2
    954a:	d009      	beq.n	9560 <SAL_AESCmac+0x114>
					padded[i] = 0x00;
    954c:	545f      	strb	r7, [r3, r1]
    954e:	3301      	adds	r3, #1
		for (i=0; i<16; i++)
    9550:	2b10      	cmp	r3, #16
    9552:	d007      	beq.n	9564 <SAL_AESCmac+0x118>
    9554:	b2da      	uxtb	r2, r3
			if ( i < (size%16) )
    9556:	4294      	cmp	r4, r2
    9558:	d9f6      	bls.n	9548 <SAL_AESCmac+0xfc>
				padded[i] = ptr[i];
    955a:	5cc2      	ldrb	r2, [r0, r3]
    955c:	545a      	strb	r2, [r3, r1]
    955e:	e7f6      	b.n	954e <SAL_AESCmac+0x102>
					padded[i] = 0x80;
    9560:	545e      	strb	r6, [r3, r1]
    9562:	e7f4      	b.n	954e <SAL_AESCmac+0x102>
    9564:	2300      	movs	r3, #0
			mLast[i] = padded[i] ^ k2[i];
    9566:	a810      	add	r0, sp, #64	; 0x40
    9568:	a90c      	add	r1, sp, #48	; 0x30
    956a:	aa1c      	add	r2, sp, #112	; 0x70
    956c:	5c5c      	ldrb	r4, [r3, r1]
    956e:	5c9d      	ldrb	r5, [r3, r2]
    9570:	406c      	eors	r4, r5
    9572:	541c      	strb	r4, [r3, r0]
    9574:	3301      	adds	r3, #1
		for (i=0; i<sizeof(mLast); i++)
    9576:	2b10      	cmp	r3, #16
    9578:	d1f8      	bne.n	956c <SAL_AESCmac+0x120>
	memset(x, 0, sizeof(x));
    957a:	2210      	movs	r2, #16
    957c:	2100      	movs	r1, #0
    957e:	a818      	add	r0, sp, #96	; 0x60
    9580:	4b20      	ldr	r3, [pc, #128]	; (9604 <SAL_AESCmac+0x1b8>)
    9582:	4798      	blx	r3
	for (i=0; i<(n-1); i++)
    9584:	2301      	movs	r3, #1
    9586:	425b      	negs	r3, r3
    9588:	4443      	add	r3, r8
    958a:	4699      	mov	r9, r3
    958c:	2000      	movs	r0, #0
    958e:	2700      	movs	r7, #0
    9590:	2b00      	cmp	r3, #0
    9592:	dd1a      	ble.n	95ca <SAL_AESCmac+0x17e>
			y[j] = x[j] ^ input[(i << 4)+j];
    9594:	ad14      	add	r5, sp, #80	; 0x50
    9596:	ac18      	add	r4, sp, #96	; 0x60
		memcpy(x, y, sizeof(y));
    9598:	4e1d      	ldr	r6, [pc, #116]	; (9610 <SAL_AESCmac+0x1c4>)
			y[j] = x[j] ^ input[(i << 4)+j];
    959a:	0100      	lsls	r0, r0, #4
    959c:	2300      	movs	r3, #0
    959e:	4450      	add	r0, sl
    95a0:	5cc2      	ldrb	r2, [r0, r3]
    95a2:	5d19      	ldrb	r1, [r3, r4]
    95a4:	404a      	eors	r2, r1
    95a6:	555a      	strb	r2, [r3, r5]
    95a8:	3301      	adds	r3, #1
		for (j=0; j<16; j++)
    95aa:	2b10      	cmp	r3, #16
    95ac:	d1f8      	bne.n	95a0 <SAL_AESCmac+0x154>
		memcpy(x, y, sizeof(y));
    95ae:	2210      	movs	r2, #16
    95b0:	0029      	movs	r1, r5
    95b2:	0020      	movs	r0, r4
    95b4:	47b0      	blx	r6
		SAL_AESEncode(x, key_type, key);
    95b6:	9a01      	ldr	r2, [sp, #4]
    95b8:	9902      	ldr	r1, [sp, #8]
    95ba:	0020      	movs	r0, r4
    95bc:	4b12      	ldr	r3, [pc, #72]	; (9608 <SAL_AESCmac+0x1bc>)
    95be:	4798      	blx	r3
	for (i=0; i<(n-1); i++)
    95c0:	3701      	adds	r7, #1
    95c2:	b2ff      	uxtb	r7, r7
    95c4:	0038      	movs	r0, r7
    95c6:	454f      	cmp	r7, r9
    95c8:	dbe7      	blt.n	959a <SAL_AESCmac+0x14e>
    95ca:	2300      	movs	r3, #0
		y[i] = x[i] ^ mLast[i];
    95cc:	ac14      	add	r4, sp, #80	; 0x50
    95ce:	a818      	add	r0, sp, #96	; 0x60
    95d0:	a910      	add	r1, sp, #64	; 0x40
    95d2:	5c1a      	ldrb	r2, [r3, r0]
    95d4:	5c5d      	ldrb	r5, [r3, r1]
    95d6:	406a      	eors	r2, r5
    95d8:	551a      	strb	r2, [r3, r4]
    95da:	3301      	adds	r3, #1
	for (i=0; i<sizeof(x); i++)
    95dc:	2b10      	cmp	r3, #16
    95de:	d1f8      	bne.n	95d2 <SAL_AESCmac+0x186>
	SAL_AESEncode(y, key_type, key);
    95e0:	9a01      	ldr	r2, [sp, #4]
    95e2:	9902      	ldr	r1, [sp, #8]
    95e4:	a814      	add	r0, sp, #80	; 0x50
    95e6:	4b08      	ldr	r3, [pc, #32]	; (9608 <SAL_AESCmac+0x1bc>)
    95e8:	4798      	blx	r3
	memcpy(output, y, sizeof(y));
    95ea:	2210      	movs	r2, #16
    95ec:	a914      	add	r1, sp, #80	; 0x50
    95ee:	9803      	ldr	r0, [sp, #12]
    95f0:	4b07      	ldr	r3, [pc, #28]	; (9610 <SAL_AESCmac+0x1c4>)
    95f2:	4798      	blx	r3
}
    95f4:	2000      	movs	r0, #0
    95f6:	b024      	add	sp, #144	; 0x90
    95f8:	bc1c      	pop	{r2, r3, r4}
    95fa:	4690      	mov	r8, r2
    95fc:	4699      	mov	r9, r3
    95fe:	46a2      	mov	sl, r4
    9600:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9602:	46c0      	nop			; (mov r8, r8)
    9604:	000151f1 	.word	0x000151f1
    9608:	00009415 	.word	0x00009415
    960c:	000093e1 	.word	0x000093e1
    9610:	0001516d 	.word	0x0001516d

00009614 <AESEncode>:
 * \brief Encrypts the given block of data
 * \param[in,out] block Block of input data to be encrypted
 * \param[in] key Cryptographic key to be used in AES encryption
 */
void AESEncode(unsigned char* block, unsigned char* masterKey)
{
    9614:	b5f0      	push	{r4, r5, r6, r7, lr}
    9616:	b083      	sub	sp, #12
    9618:	0004      	movs	r4, r0
    961a:	000e      	movs	r6, r1
#ifndef UT	
	
	/* Configure the AES. */
	g_aes_cfg.encrypt_mode = AES_ENCRYPTION;
    961c:	4a2b      	ldr	r2, [pc, #172]	; (96cc <AESEncode+0xb8>)
    961e:	2101      	movs	r1, #1
    9620:	7011      	strb	r1, [r2, #0]
	g_aes_cfg.key_size = AES_KEY_SIZE_128;
    9622:	2300      	movs	r3, #0
    9624:	7053      	strb	r3, [r2, #1]
	g_aes_cfg.start_mode = AES_AUTO_START;
    9626:	7091      	strb	r1, [r2, #2]
	g_aes_cfg.opmode = AES_ECB_MODE;
    9628:	70d3      	strb	r3, [r2, #3]
	g_aes_cfg.cfb_size = AES_CFB_SIZE_128;
    962a:	7113      	strb	r3, [r2, #4]
	g_aes_cfg.lod = false;
    962c:	7213      	strb	r3, [r2, #8]
	aes_set_config(&aes_instance,AES, &g_aes_cfg);
    962e:	4928      	ldr	r1, [pc, #160]	; (96d0 <AESEncode+0xbc>)
    9630:	4828      	ldr	r0, [pc, #160]	; (96d4 <AESEncode+0xc0>)
    9632:	4b29      	ldr	r3, [pc, #164]	; (96d8 <AESEncode+0xc4>)
    9634:	4798      	blx	r3
    9636:	2100      	movs	r1, #0
		uint8_t u8[4];
	}long_addr;
	uint8_t index;
	for (index = 0; index < 4; index++)
	{
		long_addr.u8[index] = *data++;
    9638:	ad01      	add	r5, sp, #4
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(masterKey+(i*(sizeof(uint32_t))));
    963a:	4f28      	ldr	r7, [pc, #160]	; (96dc <AESEncode+0xc8>)
    963c:	1870      	adds	r0, r6, r1
    963e:	2300      	movs	r3, #0
    9640:	5cc2      	ldrb	r2, [r0, r3]
    9642:	555a      	strb	r2, [r3, r5]
    9644:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    9646:	2b04      	cmp	r3, #4
    9648:	d1fa      	bne.n	9640 <AESEncode+0x2c>
    964a:	9b01      	ldr	r3, [sp, #4]
    964c:	51cb      	str	r3, [r1, r7]
    964e:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    9650:	2910      	cmp	r1, #16
    9652:	d1f3      	bne.n	963c <AESEncode+0x28>
	}
	
	/* Set the cryptographic key. */
	aes_write_key(&aes_instance, io_data);
    9654:	4d1f      	ldr	r5, [pc, #124]	; (96d4 <AESEncode+0xc0>)
    9656:	4921      	ldr	r1, [pc, #132]	; (96dc <AESEncode+0xc8>)
    9658:	0028      	movs	r0, r5
    965a:	4b21      	ldr	r3, [pc, #132]	; (96e0 <AESEncode+0xcc>)
    965c:	4798      	blx	r3
 */
static inline void aes_set_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg |= AES_CTRLB_NEWMSG;
    965e:	682a      	ldr	r2, [r5, #0]
    9660:	7913      	ldrb	r3, [r2, #4]
    9662:	2102      	movs	r1, #2
    9664:	430b      	orrs	r3, r1
    9666:	7113      	strb	r3, [r2, #4]
    9668:	2100      	movs	r1, #0
		long_addr.u8[index] = *data++;
    966a:	ad01      	add	r5, sp, #4
	
	aes_set_new_message(&aes_instance);
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(block+(i*(sizeof(uint32_t))));			
    966c:	4e1b      	ldr	r6, [pc, #108]	; (96dc <AESEncode+0xc8>)
    966e:	1860      	adds	r0, r4, r1
    9670:	2300      	movs	r3, #0
    9672:	5cc2      	ldrb	r2, [r0, r3]
    9674:	555a      	strb	r2, [r3, r5]
    9676:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    9678:	2b04      	cmp	r3, #4
    967a:	d1fa      	bne.n	9672 <AESEncode+0x5e>
    967c:	9b01      	ldr	r3, [sp, #4]
    967e:	518b      	str	r3, [r1, r6]
    9680:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    9682:	2910      	cmp	r1, #16
    9684:	d1f3      	bne.n	966e <AESEncode+0x5a>
	}
		
	/* Write the data to be ciphered to the input data registers. */
	aes_write_input_data(&aes_instance, io_data);
    9686:	4d13      	ldr	r5, [pc, #76]	; (96d4 <AESEncode+0xc0>)
    9688:	4914      	ldr	r1, [pc, #80]	; (96dc <AESEncode+0xc8>)
    968a:	0028      	movs	r0, r5
    968c:	4b15      	ldr	r3, [pc, #84]	; (96e4 <AESEncode+0xd0>)
    968e:	4798      	blx	r3
 */
static inline void aes_clear_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg &= ~AES_CTRLB_NEWMSG;
    9690:	682d      	ldr	r5, [r5, #0]
    9692:	792b      	ldrb	r3, [r5, #4]
    9694:	2202      	movs	r2, #2
    9696:	4393      	bics	r3, r2
    9698:	712b      	strb	r3, [r5, #4]
	Assert(module->hw);

	uint32_t int_flags = module->hw->INTFLAG.reg;
	uint32_t status_flags = 0;

	if (int_flags & AES_INTFLAG_ENCCMP) {
    969a:	2101      	movs	r1, #1
		status_flags |= AES_ENCRYPTION_COMPLETE;
	}

	if (int_flags & AES_INTFLAG_GFMCMP) {
    969c:	2002      	movs	r0, #2
    969e:	e001      	b.n	96a4 <AESEncode+0x90>
	aes_clear_new_message(&aes_instance);
	/* Wait for the end of the encryption process. */
	while (!(aes_get_status(&aes_instance) & AES_ENCRYPTION_COMPLETE)) {
    96a0:	4211      	tst	r1, r2
    96a2:	d107      	bne.n	96b4 <AESEncode+0xa0>
	uint32_t int_flags = module->hw->INTFLAG.reg;
    96a4:	79eb      	ldrb	r3, [r5, #7]
    96a6:	b2db      	uxtb	r3, r3
	if (int_flags & AES_INTFLAG_ENCCMP) {
    96a8:	000a      	movs	r2, r1
    96aa:	401a      	ands	r2, r3
	if (int_flags & AES_INTFLAG_GFMCMP) {
    96ac:	4218      	tst	r0, r3
    96ae:	d0f7      	beq.n	96a0 <AESEncode+0x8c>
		status_flags |= AES_GF_MULTI_COMPLETE;
    96b0:	4302      	orrs	r2, r0
    96b2:	e7f5      	b.n	96a0 <AESEncode+0x8c>
	}
	aes_read_output_data(&aes_instance,io_data);
    96b4:	4d09      	ldr	r5, [pc, #36]	; (96dc <AESEncode+0xc8>)
    96b6:	0029      	movs	r1, r5
    96b8:	4806      	ldr	r0, [pc, #24]	; (96d4 <AESEncode+0xc0>)
    96ba:	4b0b      	ldr	r3, [pc, #44]	; (96e8 <AESEncode+0xd4>)
    96bc:	4798      	blx	r3
	
	memcpy(block,io_data,BLOCKSIZE);
    96be:	2210      	movs	r2, #16
    96c0:	0029      	movs	r1, r5
    96c2:	0020      	movs	r0, r4
    96c4:	4b09      	ldr	r3, [pc, #36]	; (96ec <AESEncode+0xd8>)
    96c6:	4798      	blx	r3
#endif	
}
    96c8:	b003      	add	sp, #12
    96ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    96cc:	2000142c 	.word	0x2000142c
    96d0:	42003400 	.word	0x42003400
    96d4:	20001438 	.word	0x20001438
    96d8:	00000c6d 	.word	0x00000c6d
    96dc:	20000e34 	.word	0x20000e34
    96e0:	00000d01 	.word	0x00000d01
    96e4:	00000d35 	.word	0x00000d35
    96e8:	00000d85 	.word	0x00000d85
    96ec:	0001516d 	.word	0x0001516d

000096f0 <AESInit>:

/**
 * \brief Initializes the AES Engine.
 */
void AESInit(void)
{
    96f0:	b570      	push	{r4, r5, r6, lr}
#ifndef UT	
	//! [setup_config]
	aes_get_config_defaults(&g_aes_cfg);
    96f2:	4d07      	ldr	r5, [pc, #28]	; (9710 <AESInit+0x20>)
    96f4:	0028      	movs	r0, r5
    96f6:	4b07      	ldr	r3, [pc, #28]	; (9714 <AESInit+0x24>)
    96f8:	4798      	blx	r3
	//! [setup_config]

	//! [setup_config_defaults]
	aes_init(&aes_instance,AES, &g_aes_cfg);
    96fa:	4c07      	ldr	r4, [pc, #28]	; (9718 <AESInit+0x28>)
    96fc:	002a      	movs	r2, r5
    96fe:	4907      	ldr	r1, [pc, #28]	; (971c <AESInit+0x2c>)
    9700:	0020      	movs	r0, r4
    9702:	4b07      	ldr	r3, [pc, #28]	; (9720 <AESInit+0x30>)
    9704:	4798      	blx	r3
	//! [setup_config_defaults]
	//! [module_enable]
	aes_enable(&aes_instance);
    9706:	0020      	movs	r0, r4
    9708:	4b06      	ldr	r3, [pc, #24]	; (9724 <AESInit+0x34>)
    970a:	4798      	blx	r3
#endif	
}
    970c:	bd70      	pop	{r4, r5, r6, pc}
    970e:	46c0      	nop			; (mov r8, r8)
    9710:	2000142c 	.word	0x2000142c
    9714:	00000c31 	.word	0x00000c31
    9718:	20001438 	.word	0x20001438
    971c:	42003400 	.word	0x42003400
    9720:	00000ce1 	.word	0x00000ce1
    9724:	00000c4b 	.word	0x00000c4b

00009728 <PDS_Store>:
			status = PDS_INVLIAD_FILE_IDX;
		}
	}
#endif	
	return status; 
}
    9728:	2000      	movs	r0, #0
    972a:	4770      	bx	lr

0000972c <PDS_IsRestorable>:
		}
	}
	return_status = true;
#endif
	return return_status;
}
    972c:	2000      	movs	r0, #0
    972e:	4770      	bx	lr

00009730 <PDS_RestoreAll>:
			}
		}
	}
#endif	
	return status;
}
    9730:	2000      	movs	r0, #0
    9732:	4770      	bx	lr

00009734 <PDS_StoreAll>:
		}
		pdsPostTask(PDS_STORE_DELETE_TASK_ID);
	}
#endif	
	return PDS_OK;
}
    9734:	2000      	movs	r0, #0
    9736:	4770      	bx	lr

00009738 <PDS_RegFile>:

\param[in] argFileId - The file id to register file to PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_RegFile(PdsFileItemIdx_t argFileId, PdsFileMarks_t argFileMarks)
{
    9738:	b084      	sub	sp, #16
    973a:	9101      	str	r1, [sp, #4]
    973c:	9202      	str	r2, [sp, #8]
    973e:	9303      	str	r3, [sp, #12]
			status = PDS_INVLIAD_FILE_IDX;
		}
	}
#endif	
	return status;
}
    9740:	2000      	movs	r0, #0
    9742:	b004      	add	sp, #16
    9744:	4770      	bx	lr

00009746 <PDS_TaskHandler>:
            }
        }
    }
#endif
    return SYSTEM_TASK_SUCCESS;
}
    9746:	2000      	movs	r0, #0
    9748:	4770      	bx	lr
	...

0000974c <set_LED_data>:

int32_t set_LED_data(const uint8_t resrc,const uint8_t * data)
{
    int8_t status = 0;
    int8_t ledPin = -1;
    uint8_t value = *data;
    974c:	780b      	ldrb	r3, [r1, #0]

#if (AMBER_LED == 1)
    if(resrc == LED_AMBER)
    974e:	2802      	cmp	r0, #2
    9750:	d020      	beq.n	9794 <set_LED_data+0x48>
        ledPin = LED_0_PIN;
    }
    else
#endif
#if (GREEN_LED == 1)
    if(resrc == LED_GREEN)
    9752:	2803      	cmp	r0, #3
    9754:	d010      	beq.n	9778 <set_LED_data+0x2c>
            LED_Toggle(ledPin);
            break;
        }
        default:
        {
            status = UNSUPPORTED_RESOURCE;
    9756:	2001      	movs	r0, #1
    9758:	4240      	negs	r0, r0
            break;
        }
    }

    return status;
}
    975a:	4770      	bx	lr
            LED_Off(ledPin);
    975c:	2212      	movs	r2, #18
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    975e:	2301      	movs	r3, #1
    9760:	4093      	lsls	r3, r2
		port_base->OUTSET.reg = pin_mask;
    9762:	4a15      	ldr	r2, [pc, #84]	; (97b8 <set_LED_data+0x6c>)
    9764:	6193      	str	r3, [r2, #24]
    int8_t status = 0;
    9766:	2000      	movs	r0, #0
    9768:	e7f7      	b.n	975a <set_LED_data+0xe>
            LED_Off(ledPin);
    976a:	2213      	movs	r2, #19
    976c:	e7f7      	b.n	975e <set_LED_data+0x12>
            LED_On(ledPin);
    976e:	2212      	movs	r2, #18
    9770:	e013      	b.n	979a <set_LED_data+0x4e>
            status = UNSUPPORTED_RESOURCE;
    9772:	2001      	movs	r0, #1
    9774:	4240      	negs	r0, r0
    9776:	e7f0      	b.n	975a <set_LED_data+0xe>
    switch(value)
    9778:	2b01      	cmp	r3, #1
    977a:	d0f8      	beq.n	976e <set_LED_data+0x22>
    977c:	2b00      	cmp	r3, #0
    977e:	d0ed      	beq.n	975c <set_LED_data+0x10>
        ledPin = LED_1_PIN;
    9780:	2112      	movs	r1, #18
    switch(value)
    9782:	2b02      	cmp	r3, #2
    9784:	d1f5      	bne.n	9772 <set_LED_data+0x26>
            LED_Toggle(ledPin);
    9786:	b2c9      	uxtb	r1, r1
    9788:	4b0b      	ldr	r3, [pc, #44]	; (97b8 <set_LED_data+0x6c>)
 */
static inline void port_pin_toggle_output_level(
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    978a:	2201      	movs	r2, #1
    978c:	408a      	lsls	r2, r1

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    978e:	61da      	str	r2, [r3, #28]
    int8_t status = 0;
    9790:	2000      	movs	r0, #0
    9792:	e7e2      	b.n	975a <set_LED_data+0xe>
            LED_On(ledPin);
    9794:	2213      	movs	r2, #19
    switch(value)
    9796:	2b01      	cmp	r3, #1
    9798:	d105      	bne.n	97a6 <set_LED_data+0x5a>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    979a:	2301      	movs	r3, #1
    979c:	4093      	lsls	r3, r2
		port_base->OUTCLR.reg = pin_mask;
    979e:	4a06      	ldr	r2, [pc, #24]	; (97b8 <set_LED_data+0x6c>)
    97a0:	6153      	str	r3, [r2, #20]
    int8_t status = 0;
    97a2:	2000      	movs	r0, #0
    97a4:	e7d9      	b.n	975a <set_LED_data+0xe>
    switch(value)
    97a6:	2b00      	cmp	r3, #0
    97a8:	d0df      	beq.n	976a <set_LED_data+0x1e>
        ledPin = LED_0_PIN;
    97aa:	2113      	movs	r1, #19
    switch(value)
    97ac:	2b02      	cmp	r3, #2
    97ae:	d0ea      	beq.n	9786 <set_LED_data+0x3a>
            status = UNSUPPORTED_RESOURCE;
    97b0:	2001      	movs	r0, #1
    97b2:	4240      	negs	r0, r0
    return status;
    97b4:	e7d1      	b.n	975a <set_LED_data+0xe>
    97b6:	46c0      	nop			; (mov r8, r8)
    97b8:	40002800 	.word	0x40002800

000097bc <resource_init>:
}
/*********************************************************************//**
 \brief      Function to initialize different resources
*************************************************************************/
void resource_init(void)
{
    97bc:	b510      	push	{r4, lr}
    temp_sensor_init();
    97be:	4b01      	ldr	r3, [pc, #4]	; (97c4 <resource_init+0x8>)
    97c0:	4798      	blx	r3
    //LED_init();
}
    97c2:	bd10      	pop	{r4, pc}
    97c4:	000097c9 	.word	0x000097c9

000097c8 <temp_sensor_init>:
* NEGATIVE INPUT	-> GND
* SAMPLES			-> 4
* SAMPLE_LENGTH		-> 4
*/
void temp_sensor_init(void)
{
    97c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    97ca:	b08d      	sub	sp, #52	; 0x34
	struct adc_config conf_adc;
	
	adc_get_config_defaults(&conf_adc);
    97cc:	ac01      	add	r4, sp, #4
    97ce:	0020      	movs	r0, r4
    97d0:	4b1b      	ldr	r3, [pc, #108]	; (9840 <temp_sensor_init+0x78>)
    97d2:	4798      	blx	r3
	
	conf_adc.clock_source = GCLK_GENERATOR_2;
    97d4:	2602      	movs	r6, #2
    97d6:	7026      	strb	r6, [r4, #0]
	conf_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV2;
    97d8:	2300      	movs	r3, #0
    97da:	70a3      	strb	r3, [r4, #2]
	conf_adc.reference = ADC_REFCTRL_REFSEL_INTREF;
    97dc:	7063      	strb	r3, [r4, #1]
	conf_adc.positive_input = ADC_POSITIVE_INPUT_TEMP;
    97de:	3318      	adds	r3, #24
    97e0:	7123      	strb	r3, [r4, #4]
	conf_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
    97e2:	23c0      	movs	r3, #192	; 0xc0
    97e4:	015b      	lsls	r3, r3, #5
    97e6:	80e3      	strh	r3, [r4, #6]
	conf_adc.sample_length = ADC_TEMP_SAMPLE_LENGTH;
    97e8:	233f      	movs	r3, #63	; 0x3f
    97ea:	7563      	strb	r3, [r4, #21]
	
	adc_init(&adc_instance, ADC, &conf_adc);
    97ec:	4f15      	ldr	r7, [pc, #84]	; (9844 <temp_sensor_init+0x7c>)
    97ee:	4d16      	ldr	r5, [pc, #88]	; (9848 <temp_sensor_init+0x80>)
    97f0:	0022      	movs	r2, r4
    97f2:	0039      	movs	r1, r7
    97f4:	0028      	movs	r0, r5
    97f6:	4b15      	ldr	r3, [pc, #84]	; (984c <temp_sensor_init+0x84>)
    97f8:	4798      	blx	r3
	
	ADC->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(2) | ADC_AVGCTRL_SAMPLENUM_4;
    97fa:	2322      	movs	r3, #34	; 0x22
    97fc:	733b      	strb	r3, [r7, #12]
			SUPC->VREF.reg |= SUPC_VREF_TSEN;
    97fe:	4b14      	ldr	r3, [pc, #80]	; (9850 <temp_sensor_init+0x88>)
    9800:	69da      	ldr	r2, [r3, #28]
    9802:	4332      	orrs	r2, r6
    9804:	61da      	str	r2, [r3, #28]
			SUPC->VREF.reg &= ~SUPC_VREF_VREFOE;
    9806:	69da      	ldr	r2, [r3, #28]
    9808:	2104      	movs	r1, #4
    980a:	438a      	bics	r2, r1
    980c:	61da      	str	r2, [r3, #28]
	Adc *const adc_module = module_inst->hw;
    980e:	682a      	ldr	r2, [r5, #0]
    9810:	8c13      	ldrh	r3, [r2, #32]
    9812:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    9814:	2b00      	cmp	r3, #0
    9816:	d1fb      	bne.n	9810 <temp_sensor_init+0x48>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    9818:	2180      	movs	r1, #128	; 0x80
    981a:	03c9      	lsls	r1, r1, #15
    981c:	4b0d      	ldr	r3, [pc, #52]	; (9854 <temp_sensor_init+0x8c>)
    981e:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    9820:	2307      	movs	r3, #7
    9822:	7113      	strb	r3, [r2, #4]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    9824:	7193      	strb	r3, [r2, #6]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    9826:	7813      	ldrb	r3, [r2, #0]
    9828:	2102      	movs	r1, #2
    982a:	430b      	orrs	r3, r1
    982c:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    982e:	4b06      	ldr	r3, [pc, #24]	; (9848 <temp_sensor_init+0x80>)
    9830:	681a      	ldr	r2, [r3, #0]
	if (adc_module->SYNCBUSY.reg) {
    9832:	8c13      	ldrh	r3, [r2, #32]
    9834:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    9836:	2b00      	cmp	r3, #0
    9838:	d1fb      	bne.n	9832 <temp_sensor_init+0x6a>
	
	system_voltage_reference_disable(SYSTEM_VOLTAGE_REFERENCE_OUTPUT);
	
	adc_enable(&adc_instance);
	
}
    983a:	b00d      	add	sp, #52	; 0x34
    983c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    983e:	46c0      	nop			; (mov r8, r8)
    9840:	00000741 	.word	0x00000741
    9844:	43000c00 	.word	0x43000c00
    9848:	20001440 	.word	0x20001440
    984c:	00000785 	.word	0x00000785
    9850:	40001400 	.word	0x40001400
    9854:	e000e100 	.word	0xe000e100

00009858 <hwTimerExpiryCallback>:
    swtimerProcessOverflow();
}

/* ISR to handle CC0 interrupt from TC0 */
static void hwTimerExpiryCallback(void)
{
    9858:	b510      	push	{r4, lr}
    if (0 < runningTimers)
    985a:	4b06      	ldr	r3, [pc, #24]	; (9874 <hwTimerExpiryCallback+0x1c>)
    985c:	781b      	ldrb	r3, [r3, #0]
    985e:	2b00      	cmp	r3, #0
    9860:	d100      	bne.n	9864 <hwTimerExpiryCallback+0xc>
    {
        isTimerTriggered = true;
        SYSTEM_PostTask(TIMER_TASK_ID);
    }
}
    9862:	bd10      	pop	{r4, pc}
        isTimerTriggered = true;
    9864:	2201      	movs	r2, #1
    9866:	4b04      	ldr	r3, [pc, #16]	; (9878 <hwTimerExpiryCallback+0x20>)
    9868:	701a      	strb	r2, [r3, #0]
        SYSTEM_PostTask(TIMER_TASK_ID);
    986a:	2001      	movs	r0, #1
    986c:	4b03      	ldr	r3, [pc, #12]	; (987c <hwTimerExpiryCallback+0x24>)
    986e:	4798      	blx	r3
}
    9870:	e7f7      	b.n	9862 <hwTimerExpiryCallback+0xa>
    9872:	46c0      	nop			; (mov r8, r8)
    9874:	20000e54 	.word	0x20000e54
    9878:	200015f2 	.word	0x200015f2
    987c:	0000a181 	.word	0x0000a181

00009880 <hwTimerOverflowCallback>:
{
    9880:	b510      	push	{r4, lr}
    9882:	b082      	sub	sp, #8
    uint16_t temp = sysTime;
    9884:	4924      	ldr	r1, [pc, #144]	; (9918 <hwTimerOverflowCallback+0x98>)
    9886:	880a      	ldrh	r2, [r1, #0]
    9888:	b292      	uxth	r2, r2
    if (++sysTime < temp)
    988a:	880b      	ldrh	r3, [r1, #0]
    988c:	3301      	adds	r3, #1
    988e:	b29b      	uxth	r3, r3
    9890:	800b      	strh	r3, [r1, #0]
    9892:	429a      	cmp	r2, r3
    9894:	d903      	bls.n	989e <hwTimerOverflowCallback+0x1e>
        sysTimeOvf++;
    9896:	4a21      	ldr	r2, [pc, #132]	; (991c <hwTimerOverflowCallback+0x9c>)
    9898:	6813      	ldr	r3, [r2, #0]
    989a:	3301      	adds	r3, #1
    989c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    989e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    98a2:	425a      	negs	r2, r3
    98a4:	4153      	adcs	r3, r2
    98a6:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    98a8:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    98aa:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    98ae:	2200      	movs	r2, #0
    98b0:	4b1b      	ldr	r3, [pc, #108]	; (9920 <hwTimerOverflowCallback+0xa0>)
    98b2:	701a      	strb	r2, [r3, #0]
	return flags;
    98b4:	9c01      	ldr	r4, [sp, #4]
{
    uint32_t tmo32;
    uint16_t tmoHigh16, tmoLow16;
    uint8_t flags = cpu_irq_save();

    if (SWTIMER_INVALID != runningTimerQueueHead && !swTimers[runningTimerQueueHead].loaded)
    98b6:	4b1b      	ldr	r3, [pc, #108]	; (9924 <hwTimerOverflowCallback+0xa4>)
    98b8:	681b      	ldr	r3, [r3, #0]
    98ba:	2bff      	cmp	r3, #255	; 0xff
    98bc:	d00d      	beq.n	98da <hwTimerOverflowCallback+0x5a>
    98be:	0119      	lsls	r1, r3, #4
    98c0:	4a19      	ldr	r2, [pc, #100]	; (9928 <hwTimerOverflowCallback+0xa8>)
    98c2:	1852      	adds	r2, r2, r1
    98c4:	7b52      	ldrb	r2, [r2, #13]
    98c6:	2a00      	cmp	r2, #0
    98c8:	d107      	bne.n	98da <hwTimerOverflowCallback+0x5a>
    {
        tmo32 = swTimers[runningTimerQueueHead].absoluteExpiryTime;
    98ca:	4a17      	ldr	r2, [pc, #92]	; (9928 <hwTimerOverflowCallback+0xa8>)
    98cc:	5888      	ldr	r0, [r1, r2]
        tmoHigh16 = (uint16_t)(tmo32 >> SWTIMER_SYSTIME_SHIFTMASK);

        if (tmoHigh16 == sysTime)
    98ce:	4b12      	ldr	r3, [pc, #72]	; (9918 <hwTimerOverflowCallback+0x98>)
    98d0:	881b      	ldrh	r3, [r3, #0]
    98d2:	b29b      	uxth	r3, r3
    98d4:	0c02      	lsrs	r2, r0, #16
    98d6:	429a      	cmp	r2, r3
    98d8:	d00a      	beq.n	98f0 <hwTimerOverflowCallback+0x70>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    98da:	23ff      	movs	r3, #255	; 0xff
    98dc:	4223      	tst	r3, r4
    98de:	d005      	beq.n	98ec <hwTimerOverflowCallback+0x6c>
		cpu_irq_enable();
    98e0:	2201      	movs	r2, #1
    98e2:	4b0f      	ldr	r3, [pc, #60]	; (9920 <hwTimerOverflowCallback+0xa0>)
    98e4:	701a      	strb	r2, [r3, #0]
    98e6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    98ea:	b662      	cpsie	i
}
    98ec:	b002      	add	sp, #8
    98ee:	bd10      	pop	{r4, pc}
        {
            tmoLow16 = (uint16_t)(tmo32 & SWTIMER_HWTIME_MASK);
    98f0:	b280      	uxth	r0, r0
            if (SWTIMER_MIN_TIMEOUT < tmoLow16)
    98f2:	28ff      	cmp	r0, #255	; 0xff
    98f4:	d909      	bls.n	990a <hwTimerOverflowCallback+0x8a>
            {
                common_tc_delay(tmoLow16);
    98f6:	4b0d      	ldr	r3, [pc, #52]	; (992c <hwTimerOverflowCallback+0xac>)
    98f8:	4798      	blx	r3
                swTimers[runningTimerQueueHead].loaded = true;
    98fa:	4b0a      	ldr	r3, [pc, #40]	; (9924 <hwTimerOverflowCallback+0xa4>)
    98fc:	681a      	ldr	r2, [r3, #0]
    98fe:	0112      	lsls	r2, r2, #4
    9900:	4b09      	ldr	r3, [pc, #36]	; (9928 <hwTimerOverflowCallback+0xa8>)
    9902:	189b      	adds	r3, r3, r2
    9904:	2201      	movs	r2, #1
    9906:	735a      	strb	r2, [r3, #13]
    9908:	e7e7      	b.n	98da <hwTimerOverflowCallback+0x5a>
            }
            else
            {
                isTimerTriggered = true;
    990a:	2201      	movs	r2, #1
    990c:	4b08      	ldr	r3, [pc, #32]	; (9930 <hwTimerOverflowCallback+0xb0>)
    990e:	701a      	strb	r2, [r3, #0]
                SYSTEM_PostTask(TIMER_TASK_ID);
    9910:	2001      	movs	r0, #1
    9912:	4b08      	ldr	r3, [pc, #32]	; (9934 <hwTimerOverflowCallback+0xb4>)
    9914:	4798      	blx	r3
    9916:	e7e0      	b.n	98da <hwTimerOverflowCallback+0x5a>
    9918:	200015f0 	.word	0x200015f0
    991c:	200015f4 	.word	0x200015f4
    9920:	20000008 	.word	0x20000008
    9924:	20000e50 	.word	0x20000e50
    9928:	20001460 	.word	0x20001460
    992c:	0000b7c5 	.word	0x0000b7c5
    9930:	200015f2 	.word	0x200015f2
    9934:	0000a181 	.word	0x0000a181

00009938 <loadHwTimer>:
{
    9938:	b570      	push	{r4, r5, r6, lr}
    993a:	0004      	movs	r4, r0
    if (SWTIMER_INVALID != timerId)
    993c:	28ff      	cmp	r0, #255	; 0xff
    993e:	d030      	beq.n	99a2 <loadHwTimer+0x6a>
    time |= ((uint64_t) sysTimeOvf) << 32;
    9940:	4b19      	ldr	r3, [pc, #100]	; (99a8 <loadHwTimer+0x70>)
    9942:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    9944:	4b19      	ldr	r3, [pc, #100]	; (99ac <loadHwTimer+0x74>)
    9946:	881d      	ldrh	r5, [r3, #0]
    9948:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    994a:	4b19      	ldr	r3, [pc, #100]	; (99b0 <loadHwTimer+0x78>)
    994c:	4798      	blx	r3
        uint32_t expiryTime = swTimers[timerId].absoluteExpiryTime;
    994e:	0123      	lsls	r3, r4, #4
    time |= (uint64_t) common_tc_read_count();
    9950:	4328      	orrs	r0, r5
    return ((t2 - t1) < INT32_MAX);
    9952:	4a18      	ldr	r2, [pc, #96]	; (99b4 <loadHwTimer+0x7c>)
    9954:	589b      	ldr	r3, [r3, r2]
    9956:	1a18      	subs	r0, r3, r0
        if (swtimerCompareTime(now, expiryTime))
    9958:	4b17      	ldr	r3, [pc, #92]	; (99b8 <loadHwTimer+0x80>)
    995a:	4298      	cmp	r0, r3
    995c:	d81a      	bhi.n	9994 <loadHwTimer+0x5c>
            if (!swTimers[timerId].loaded)
    995e:	0122      	lsls	r2, r4, #4
    9960:	4b14      	ldr	r3, [pc, #80]	; (99b4 <loadHwTimer+0x7c>)
    9962:	189b      	adds	r3, r3, r2
    9964:	7b5b      	ldrb	r3, [r3, #13]
    9966:	2b00      	cmp	r3, #0
    9968:	d11d      	bne.n	99a6 <loadHwTimer+0x6e>
                if (SWTIMER_MIN_TIMEOUT >= timeDiff)
    996a:	28ff      	cmp	r0, #255	; 0xff
    996c:	d90b      	bls.n	9986 <loadHwTimer+0x4e>
                else  if ((uint32_t)TIMER_PERIOD >= timeDiff)
    996e:	4b13      	ldr	r3, [pc, #76]	; (99bc <loadHwTimer+0x84>)
    9970:	4298      	cmp	r0, r3
    9972:	d818      	bhi.n	99a6 <loadHwTimer+0x6e>
                    common_tc_delay((uint16_t)timeDiff);
    9974:	b280      	uxth	r0, r0
    9976:	4b12      	ldr	r3, [pc, #72]	; (99c0 <loadHwTimer+0x88>)
    9978:	4798      	blx	r3
                    swTimers[timerId].loaded = true;
    997a:	0124      	lsls	r4, r4, #4
    997c:	4b0d      	ldr	r3, [pc, #52]	; (99b4 <loadHwTimer+0x7c>)
    997e:	191c      	adds	r4, r3, r4
    9980:	2301      	movs	r3, #1
    9982:	7363      	strb	r3, [r4, #13]
    9984:	e00f      	b.n	99a6 <loadHwTimer+0x6e>
                    isTimerTriggered = true;
    9986:	2201      	movs	r2, #1
    9988:	4b0e      	ldr	r3, [pc, #56]	; (99c4 <loadHwTimer+0x8c>)
    998a:	701a      	strb	r2, [r3, #0]
                    SYSTEM_PostTask(TIMER_TASK_ID);
    998c:	2001      	movs	r0, #1
    998e:	4b0e      	ldr	r3, [pc, #56]	; (99c8 <loadHwTimer+0x90>)
    9990:	4798      	blx	r3
    9992:	e008      	b.n	99a6 <loadHwTimer+0x6e>
            isTimerTriggered = true;
    9994:	2201      	movs	r2, #1
    9996:	4b0b      	ldr	r3, [pc, #44]	; (99c4 <loadHwTimer+0x8c>)
    9998:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    999a:	2001      	movs	r0, #1
    999c:	4b0a      	ldr	r3, [pc, #40]	; (99c8 <loadHwTimer+0x90>)
    999e:	4798      	blx	r3
    99a0:	e001      	b.n	99a6 <loadHwTimer+0x6e>
        common_tc_compare_stop();
    99a2:	4b0a      	ldr	r3, [pc, #40]	; (99cc <loadHwTimer+0x94>)
    99a4:	4798      	blx	r3
}
    99a6:	bd70      	pop	{r4, r5, r6, pc}
    99a8:	200015f4 	.word	0x200015f4
    99ac:	200015f0 	.word	0x200015f0
    99b0:	0000b71d 	.word	0x0000b71d
    99b4:	20001460 	.word	0x20001460
    99b8:	7ffffffe 	.word	0x7ffffffe
    99bc:	0000ffff 	.word	0x0000ffff
    99c0:	0000b7c5 	.word	0x0000b7c5
    99c4:	200015f2 	.word	0x200015f2
    99c8:	0000a181 	.word	0x0000a181
    99cc:	0000b769 	.word	0x0000b769

000099d0 <swtimerInternalHandler>:

/**************************************************************************//**
\brief Internal handler for the timer trigger
******************************************************************************/
static void swtimerInternalHandler(void)
{
    99d0:	b510      	push	{r4, lr}
    if (isTimerTriggered)
    99d2:	4b1d      	ldr	r3, [pc, #116]	; (9a48 <swtimerInternalHandler+0x78>)
    99d4:	781b      	ldrb	r3, [r3, #0]
    99d6:	2b00      	cmp	r3, #0
    99d8:	d027      	beq.n	9a2a <swtimerInternalHandler+0x5a>
    {
        isTimerTriggered = false;
    99da:	2200      	movs	r2, #0
    99dc:	4b1a      	ldr	r3, [pc, #104]	; (9a48 <swtimerInternalHandler+0x78>)
    99de:	701a      	strb	r2, [r3, #0]

        if (0 < runningTimers)
    99e0:	4b1a      	ldr	r3, [pc, #104]	; (9a4c <swtimerInternalHandler+0x7c>)
    99e2:	781b      	ldrb	r3, [r3, #0]
    99e4:	2b00      	cmp	r3, #0
    99e6:	d020      	beq.n	9a2a <swtimerInternalHandler+0x5a>
        { /* Holds the number of running timers */
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    99e8:	4b19      	ldr	r3, [pc, #100]	; (9a50 <swtimerInternalHandler+0x80>)
    99ea:	681b      	ldr	r3, [r3, #0]
    99ec:	2bff      	cmp	r3, #255	; 0xff
    99ee:	d01d      	beq.n	9a2c <swtimerInternalHandler+0x5c>
                expiredTimerQueueHead = runningTimerQueueHead;
                expiredTimerQueueTail = runningTimerQueueHead;
            }
            else
            { /* there were already some timers expired before this one */
                swTimers[expiredTimerQueueTail].nextTimer = runningTimerQueueHead;
    99f0:	4b18      	ldr	r3, [pc, #96]	; (9a54 <swtimerInternalHandler+0x84>)
    99f2:	6818      	ldr	r0, [r3, #0]
    99f4:	4918      	ldr	r1, [pc, #96]	; (9a58 <swtimerInternalHandler+0x88>)
    99f6:	680b      	ldr	r3, [r1, #0]
    99f8:	011a      	lsls	r2, r3, #4
    99fa:	4b18      	ldr	r3, [pc, #96]	; (9a5c <swtimerInternalHandler+0x8c>)
    99fc:	189b      	adds	r3, r3, r2
    99fe:	7318      	strb	r0, [r3, #12]
                expiredTimerQueueTail = runningTimerQueueHead;
    9a00:	6008      	str	r0, [r1, #0]
            }

            runningTimerQueueHead = swTimers[runningTimerQueueHead].nextTimer;
    9a02:	4a16      	ldr	r2, [pc, #88]	; (9a5c <swtimerInternalHandler+0x8c>)
    9a04:	4913      	ldr	r1, [pc, #76]	; (9a54 <swtimerInternalHandler+0x84>)
    9a06:	680b      	ldr	r3, [r1, #0]
    9a08:	011b      	lsls	r3, r3, #4
    9a0a:	18d3      	adds	r3, r2, r3
    9a0c:	7b18      	ldrb	r0, [r3, #12]
    9a0e:	6008      	str	r0, [r1, #0]

            swTimers[expiredTimerQueueTail].nextTimer = SWTIMER_INVALID;
    9a10:	4b11      	ldr	r3, [pc, #68]	; (9a58 <swtimerInternalHandler+0x88>)
    9a12:	681b      	ldr	r3, [r3, #0]
    9a14:	011b      	lsls	r3, r3, #4
    9a16:	18d2      	adds	r2, r2, r3
    9a18:	23ff      	movs	r3, #255	; 0xff
    9a1a:	7313      	strb	r3, [r2, #12]

            if ((--runningTimers) > 0)
    9a1c:	4a0b      	ldr	r2, [pc, #44]	; (9a4c <swtimerInternalHandler+0x7c>)
    9a1e:	7813      	ldrb	r3, [r2, #0]
    9a20:	3b01      	subs	r3, #1
    9a22:	b2db      	uxtb	r3, r3
    9a24:	7013      	strb	r3, [r2, #0]
    9a26:	2b00      	cmp	r3, #0
    9a28:	d10b      	bne.n	9a42 <swtimerInternalHandler+0x72>
            { /* keep the ball rolling! load the next head timer from the queue */
                loadHwTimer(runningTimerQueueHead);
            }
        }
    }
}
    9a2a:	bd10      	pop	{r4, pc}
                (expiredTimerQueueTail == SWTIMER_INVALID))
    9a2c:	4b0a      	ldr	r3, [pc, #40]	; (9a58 <swtimerInternalHandler+0x88>)
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    9a2e:	681b      	ldr	r3, [r3, #0]
    9a30:	2bff      	cmp	r3, #255	; 0xff
    9a32:	d1dd      	bne.n	99f0 <swtimerInternalHandler+0x20>
                expiredTimerQueueHead = runningTimerQueueHead;
    9a34:	4b07      	ldr	r3, [pc, #28]	; (9a54 <swtimerInternalHandler+0x84>)
    9a36:	681b      	ldr	r3, [r3, #0]
    9a38:	4a05      	ldr	r2, [pc, #20]	; (9a50 <swtimerInternalHandler+0x80>)
    9a3a:	6013      	str	r3, [r2, #0]
                expiredTimerQueueTail = runningTimerQueueHead;
    9a3c:	4a06      	ldr	r2, [pc, #24]	; (9a58 <swtimerInternalHandler+0x88>)
    9a3e:	6013      	str	r3, [r2, #0]
    9a40:	e7df      	b.n	9a02 <swtimerInternalHandler+0x32>
                loadHwTimer(runningTimerQueueHead);
    9a42:	4b07      	ldr	r3, [pc, #28]	; (9a60 <swtimerInternalHandler+0x90>)
    9a44:	4798      	blx	r3
}
    9a46:	e7f0      	b.n	9a2a <swtimerInternalHandler+0x5a>
    9a48:	200015f2 	.word	0x200015f2
    9a4c:	20000e54 	.word	0x20000e54
    9a50:	20000e48 	.word	0x20000e48
    9a54:	20000e50 	.word	0x20000e50
    9a58:	20000e4c 	.word	0x20000e4c
    9a5c:	20001460 	.word	0x20001460
    9a60:	00009939 	.word	0x00009939

00009a64 <SwTimerReset>:
    /*
    * Initialize the timer resources like timer arrays queues, timer registers
    */
    uint8_t index;

    runningTimers = 0u;
    9a64:	2300      	movs	r3, #0
    9a66:	4a0d      	ldr	r2, [pc, #52]	; (9a9c <SwTimerReset+0x38>)
    9a68:	7013      	strb	r3, [r2, #0]
    isTimerTriggered = false;
    9a6a:	4a0d      	ldr	r2, [pc, #52]	; (9aa0 <SwTimerReset+0x3c>)
    9a6c:	7013      	strb	r3, [r2, #0]

    runningTimerQueueHead = SWTIMER_INVALID;
    9a6e:	33ff      	adds	r3, #255	; 0xff
    9a70:	4a0c      	ldr	r2, [pc, #48]	; (9aa4 <SwTimerReset+0x40>)
    9a72:	6013      	str	r3, [r2, #0]
    expiredTimerQueueHead = SWTIMER_INVALID;
    9a74:	4a0c      	ldr	r2, [pc, #48]	; (9aa8 <SwTimerReset+0x44>)
    9a76:	6013      	str	r3, [r2, #0]
    expiredTimerQueueTail = SWTIMER_INVALID;
    9a78:	4a0c      	ldr	r2, [pc, #48]	; (9aac <SwTimerReset+0x48>)
    9a7a:	6013      	str	r3, [r2, #0]
    9a7c:	4b0c      	ldr	r3, [pc, #48]	; (9ab0 <SwTimerReset+0x4c>)
    9a7e:	0018      	movs	r0, r3
    9a80:	3091      	adds	r0, #145	; 0x91
    9a82:	30ff      	adds	r0, #255	; 0xff

    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    {
        swTimers[index].nextTimer = SWTIMER_INVALID;
    9a84:	21ff      	movs	r1, #255	; 0xff
        swTimers[index].timerCb = NULL;
    9a86:	2200      	movs	r2, #0
        swTimers[index].nextTimer = SWTIMER_INVALID;
    9a88:	7219      	strb	r1, [r3, #8]
        swTimers[index].timerCb = NULL;
    9a8a:	601a      	str	r2, [r3, #0]
    9a8c:	3310      	adds	r3, #16
    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    9a8e:	4283      	cmp	r3, r0
    9a90:	d1fa      	bne.n	9a88 <SwTimerReset+0x24>
    }

    allocatedTimerId = 0u;
    9a92:	2200      	movs	r2, #0
    9a94:	4b07      	ldr	r3, [pc, #28]	; (9ab4 <SwTimerReset+0x50>)
    9a96:	701a      	strb	r2, [r3, #0]
}
    9a98:	4770      	bx	lr
    9a9a:	46c0      	nop			; (mov r8, r8)
    9a9c:	20000e54 	.word	0x20000e54
    9aa0:	200015f2 	.word	0x200015f2
    9aa4:	20000e50 	.word	0x20000e50
    9aa8:	20000e48 	.word	0x20000e48
    9aac:	20000e4c 	.word	0x20000e4c
    9ab0:	20001464 	.word	0x20001464
    9ab4:	20000e44 	.word	0x20000e44

00009ab8 <SystemTimerInit>:

/**************************************************************************//**
\brief Initializes the Software Timer module
******************************************************************************/
void SystemTimerInit(void)
{
    9ab8:	b510      	push	{r4, lr}
    SwTimerReset();
    9aba:	4b08      	ldr	r3, [pc, #32]	; (9adc <SystemTimerInit+0x24>)
    9abc:	4798      	blx	r3

    /* initialize system time parameters */
    sysTimeOvf = sysTime = 0u;
    9abe:	2300      	movs	r3, #0
    9ac0:	4a07      	ldr	r2, [pc, #28]	; (9ae0 <SystemTimerInit+0x28>)
    9ac2:	8013      	strh	r3, [r2, #0]
    9ac4:	4a07      	ldr	r2, [pc, #28]	; (9ae4 <SystemTimerInit+0x2c>)
    9ac6:	6013      	str	r3, [r2, #0]

    common_tc_init();
    9ac8:	4b07      	ldr	r3, [pc, #28]	; (9ae8 <SystemTimerInit+0x30>)
    9aca:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    9acc:	4807      	ldr	r0, [pc, #28]	; (9aec <SystemTimerInit+0x34>)
    9ace:	4b08      	ldr	r3, [pc, #32]	; (9af0 <SystemTimerInit+0x38>)
    9ad0:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    9ad2:	4808      	ldr	r0, [pc, #32]	; (9af4 <SystemTimerInit+0x3c>)
    9ad4:	4b08      	ldr	r3, [pc, #32]	; (9af8 <SystemTimerInit+0x40>)
    9ad6:	4798      	blx	r3
}
    9ad8:	bd10      	pop	{r4, pc}
    9ada:	46c0      	nop			; (mov r8, r8)
    9adc:	00009a65 	.word	0x00009a65
    9ae0:	200015f0 	.word	0x200015f0
    9ae4:	200015f4 	.word	0x200015f4
    9ae8:	0000b831 	.word	0x0000b831
    9aec:	00009881 	.word	0x00009881
    9af0:	0000b8b5 	.word	0x0000b8b5
    9af4:	00009859 	.word	0x00009859
    9af8:	0000b8c1 	.word	0x0000b8c1

00009afc <SwTimerGetTime>:
/**************************************************************************//**
\brief Get current system time.
\return Returns current system time in microseconds
******************************************************************************/
uint64_t SwTimerGetTime(void)
{
    9afc:	b570      	push	{r4, r5, r6, lr}
    time |= ((uint64_t) sysTimeOvf) << 32;
    9afe:	4b05      	ldr	r3, [pc, #20]	; (9b14 <SwTimerGetTime+0x18>)
    9b00:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    9b02:	4b05      	ldr	r3, [pc, #20]	; (9b18 <SwTimerGetTime+0x1c>)
    9b04:	881d      	ldrh	r5, [r3, #0]
    9b06:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    9b08:	4b04      	ldr	r3, [pc, #16]	; (9b1c <SwTimerGetTime+0x20>)
    9b0a:	4798      	blx	r3
    9b0c:	4328      	orrs	r0, r5
    return gettime();
}
    9b0e:	0021      	movs	r1, r4
    9b10:	bd70      	pop	{r4, r5, r6, pc}
    9b12:	46c0      	nop			; (mov r8, r8)
    9b14:	200015f4 	.word	0x200015f4
    9b18:	200015f0 	.word	0x200015f0
    9b1c:	0000b71d 	.word	0x0000b71d

00009b20 <SwTimerCreate>:

\return LORAWAN_SUCCESS if new timerId is allocated
        LORAWAN_RESOURCE_UNAVAILABLE if there is no more timerId to allocate
******************************************************************************/
StackRetStatus_t SwTimerCreate(uint8_t *timerId)
{
    9b20:	b510      	push	{r4, lr}
    9b22:	0004      	movs	r4, r0
    StackRetStatus_t retVal = LORAWAN_SUCCESS;

    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    9b24:	4b08      	ldr	r3, [pc, #32]	; (9b48 <SwTimerCreate+0x28>)
    9b26:	781b      	ldrb	r3, [r3, #0]
        * If you reach this spot it means the TOTAL_NUMBER_OF_SW_TIMERS
        * is #defined to a lower value than the number of timers that have
        * been SwTimerCreate()
        */
        SYS_ASSERT_FATAL(ASSERT_HAL_TIMERID_EXHAUSTED);
        retVal = LORAWAN_RESOURCE_UNAVAILABLE;
    9b28:	2014      	movs	r0, #20
    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    9b2a:	2b18      	cmp	r3, #24
    9b2c:	d900      	bls.n	9b30 <SwTimerCreate+0x10>
    }

    return retVal;
}
    9b2e:	bd10      	pop	{r4, pc}
        ATOMIC_SECTION_ENTER
    9b30:	4b06      	ldr	r3, [pc, #24]	; (9b4c <SwTimerCreate+0x2c>)
    9b32:	4798      	blx	r3
        *timerId = allocatedTimerId;
    9b34:	4a04      	ldr	r2, [pc, #16]	; (9b48 <SwTimerCreate+0x28>)
    9b36:	7813      	ldrb	r3, [r2, #0]
    9b38:	7023      	strb	r3, [r4, #0]
        allocatedTimerId++;
    9b3a:	3301      	adds	r3, #1
    9b3c:	7013      	strb	r3, [r2, #0]
        ATOMIC_SECTION_EXIT
    9b3e:	4b04      	ldr	r3, [pc, #16]	; (9b50 <SwTimerCreate+0x30>)
    9b40:	4798      	blx	r3
    StackRetStatus_t retVal = LORAWAN_SUCCESS;
    9b42:	2008      	movs	r0, #8
    9b44:	e7f3      	b.n	9b2e <SwTimerCreate+0xe>
    9b46:	46c0      	nop			; (mov r8, r8)
    9b48:	20000e44 	.word	0x20000e44
    9b4c:	00004275 	.word	0x00004275
    9b50:	00004281 	.word	0x00004281

00009b54 <SwTimerStart>:
        LORAWAN_INVALID_REQUEST if \timerId is already running
        LORAWAN_SUCCESS if \timerId is successfully queued for running
******************************************************************************/
StackRetStatus_t SwTimerStart(uint8_t timerId, uint32_t timerCount,
    SwTimeoutType_t timeoutType, void *timerCb, void *paramCb)
{
    9b54:	b5f0      	push	{r4, r5, r6, r7, lr}
    9b56:	46d6      	mov	lr, sl
    9b58:	464f      	mov	r7, r9
    9b5a:	4646      	mov	r6, r8
    9b5c:	b5c0      	push	{r6, r7, lr}
    9b5e:	b084      	sub	sp, #16
    9b60:	0007      	movs	r7, r0
    9b62:	000d      	movs	r5, r1
    9b64:	0016      	movs	r6, r2
    9b66:	001c      	movs	r4, r3
    uint32_t pointInTime;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    9b68:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    9b6a:	2f18      	cmp	r7, #24
    9b6c:	d809      	bhi.n	9b82 <SwTimerStart+0x2e>
    9b6e:	2b00      	cmp	r3, #0
    9b70:	d100      	bne.n	9b74 <SwTimerStart+0x20>
    9b72:	e08c      	b.n	9c8e <SwTimerStart+0x13a>
    }

    if (NULL != swTimers[timerId].timerCb)
    9b74:	013a      	lsls	r2, r7, #4
    9b76:	4b52      	ldr	r3, [pc, #328]	; (9cc0 <SwTimerStart+0x16c>)
    9b78:	189b      	adds	r3, r3, r2
    9b7a:	685b      	ldr	r3, [r3, #4]
        /*
        * Timer is already running if the callback function of the
        * corresponding timer index in the timer array is not NULL.
        */
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_REQUEST;
    9b7c:	300b      	adds	r0, #11
    if (NULL != swTimers[timerId].timerCb)
    9b7e:	2b00      	cmp	r3, #0
    9b80:	d005      	beq.n	9b8e <SwTimerStart+0x3a>
        }
    }

    swtimerStartAbsoluteTimer(timerId, pointInTime, timerCb, paramCb);
    return LORAWAN_SUCCESS;
}
    9b82:	b004      	add	sp, #16
    9b84:	bc1c      	pop	{r2, r3, r4}
    9b86:	4690      	mov	r8, r2
    9b88:	4699      	mov	r9, r3
    9b8a:	46a2      	mov	sl, r4
    9b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    time |= ((uint64_t) sysTimeOvf) << 32;
    9b8e:	4b4d      	ldr	r3, [pc, #308]	; (9cc4 <SwTimerStart+0x170>)
    9b90:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    9b92:	4b4d      	ldr	r3, [pc, #308]	; (9cc8 <SwTimerStart+0x174>)
    9b94:	8818      	ldrh	r0, [r3, #0]
    9b96:	0403      	lsls	r3, r0, #16
    9b98:	4698      	mov	r8, r3
    time |= (uint64_t) common_tc_read_count();
    9b9a:	4b4c      	ldr	r3, [pc, #304]	; (9ccc <SwTimerStart+0x178>)
    9b9c:	4798      	blx	r3
    9b9e:	4643      	mov	r3, r8
    9ba0:	4303      	orrs	r3, r0
    switch (timeoutType)
    9ba2:	2e00      	cmp	r6, #0
    9ba4:	d003      	beq.n	9bae <SwTimerStart+0x5a>
    9ba6:	2e01      	cmp	r6, #1
    9ba8:	d038      	beq.n	9c1c <SwTimerStart+0xc8>
            return LORAWAN_INVALID_PARAMETER;
    9baa:	200a      	movs	r0, #10
    9bac:	e7e9      	b.n	9b82 <SwTimerStart+0x2e>
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    9bae:	4948      	ldr	r1, [pc, #288]	; (9cd0 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    9bb0:	200a      	movs	r0, #10
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    9bb2:	002a      	movs	r2, r5
    9bb4:	3aff      	subs	r2, #255	; 0xff
            pointInTime = ADD_TIME(timerCount, now);
    9bb6:	18ed      	adds	r5, r5, r3
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    9bb8:	428a      	cmp	r2, r1
    9bba:	d8e2      	bhi.n	9b82 <SwTimerStart+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    9bbc:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    9bc0:	425a      	negs	r2, r3
    9bc2:	4153      	adcs	r3, r2
    9bc4:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    9bc6:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    9bc8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    9bcc:	2600      	movs	r6, #0
    9bce:	4b41      	ldr	r3, [pc, #260]	; (9cd4 <SwTimerStart+0x180>)
    9bd0:	701e      	strb	r6, [r3, #0]
	return flags;
    9bd2:	9b03      	ldr	r3, [sp, #12]
    9bd4:	4699      	mov	r9, r3
    swtimerInternalHandler();
    9bd6:	4b40      	ldr	r3, [pc, #256]	; (9cd8 <SwTimerStart+0x184>)
    9bd8:	4798      	blx	r3
    swTimers[timerId].absoluteExpiryTime = pointInTime;
    9bda:	4b39      	ldr	r3, [pc, #228]	; (9cc0 <SwTimerStart+0x16c>)
    9bdc:	013a      	lsls	r2, r7, #4
    9bde:	50d5      	str	r5, [r2, r3]
    swTimers[timerId].timerCb = (void (*)(void*))handlerCb;
    9be0:	189b      	adds	r3, r3, r2
    9be2:	605c      	str	r4, [r3, #4]
    swTimers[timerId].paramCb = parameter;
    9be4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9be6:	609a      	str	r2, [r3, #8]
    swTimers[timerId].loaded = false;
    9be8:	735e      	strb	r6, [r3, #13]
    runningTimers++;
    9bea:	4a3c      	ldr	r2, [pc, #240]	; (9cdc <SwTimerStart+0x188>)
    9bec:	7813      	ldrb	r3, [r2, #0]
    9bee:	3301      	adds	r3, #1
    9bf0:	b2db      	uxtb	r3, r3
    9bf2:	7013      	strb	r3, [r2, #0]
    if (SWTIMER_INVALID == runningTimerQueueHead)
    9bf4:	4b3a      	ldr	r3, [pc, #232]	; (9ce0 <SwTimerStart+0x18c>)
    9bf6:	681b      	ldr	r3, [r3, #0]
    9bf8:	469a      	mov	sl, r3
    9bfa:	2bff      	cmp	r3, #255	; 0xff
    9bfc:	d016      	beq.n	9c2c <SwTimerStart+0xd8>
        uint8_t currIndex = runningTimerQueueHead;
    9bfe:	466a      	mov	r2, sp
    9c00:	7013      	strb	r3, [r2, #0]
    9c02:	7812      	ldrb	r2, [r2, #0]
        for (index = 0; index < runningTimers; index++)
    9c04:	4b35      	ldr	r3, [pc, #212]	; (9cdc <SwTimerStart+0x188>)
    9c06:	781b      	ldrb	r3, [r3, #0]
    9c08:	2b00      	cmp	r3, #0
    9c0a:	d042      	beq.n	9c92 <SwTimerStart+0x13e>
    9c0c:	9200      	str	r2, [sp, #0]
    9c0e:	2300      	movs	r3, #0
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    9c10:	492b      	ldr	r1, [pc, #172]	; (9cc0 <SwTimerStart+0x16c>)
    9c12:	4688      	mov	r8, r1
    9c14:	4833      	ldr	r0, [pc, #204]	; (9ce4 <SwTimerStart+0x190>)
                    currIndex = swTimers[currIndex].nextTimer;
    9c16:	468c      	mov	ip, r1
        for (index = 0; index < runningTimers; index++)
    9c18:	4c30      	ldr	r4, [pc, #192]	; (9cdc <SwTimerStart+0x188>)
    9c1a:	e02a      	b.n	9c72 <SwTimerStart+0x11e>
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    9c1c:	0028      	movs	r0, r5
    9c1e:	38ff      	subs	r0, #255	; 0xff
    9c20:	1ac3      	subs	r3, r0, r3
    9c22:	4a2b      	ldr	r2, [pc, #172]	; (9cd0 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    9c24:	200a      	movs	r0, #10
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    9c26:	4293      	cmp	r3, r2
    9c28:	d9c8      	bls.n	9bbc <SwTimerStart+0x68>
    9c2a:	e7aa      	b.n	9b82 <SwTimerStart+0x2e>
        runningTimerQueueHead = timerId;
    9c2c:	4b2c      	ldr	r3, [pc, #176]	; (9ce0 <SwTimerStart+0x18c>)
    9c2e:	601f      	str	r7, [r3, #0]
        loadHwTimer(runningTimerQueueHead);
    9c30:	0038      	movs	r0, r7
    9c32:	4b2d      	ldr	r3, [pc, #180]	; (9ce8 <SwTimerStart+0x194>)
    9c34:	4798      	blx	r3
    9c36:	e036      	b.n	9ca6 <SwTimerStart+0x152>
                    swTimers[timerId].nextTimer = currIndex;
    9c38:	4b21      	ldr	r3, [pc, #132]	; (9cc0 <SwTimerStart+0x16c>)
    9c3a:	013c      	lsls	r4, r7, #4
    9c3c:	191c      	adds	r4, r3, r4
    9c3e:	7322      	strb	r2, [r4, #12]
                    swTimers[currIndex].loaded = false;
    9c40:	9901      	ldr	r1, [sp, #4]
    9c42:	0109      	lsls	r1, r1, #4
    9c44:	1859      	adds	r1, r3, r1
    9c46:	2300      	movs	r3, #0
    9c48:	734b      	strb	r3, [r1, #13]
                    if (runningTimerQueueHead == currIndex)
    9c4a:	4592      	cmp	sl, r2
    9c4c:	d005      	beq.n	9c5a <SwTimerStart+0x106>
                        swTimers[prevIndex].nextTimer = timerId;
    9c4e:	9b00      	ldr	r3, [sp, #0]
    9c50:	0118      	lsls	r0, r3, #4
    9c52:	4b1b      	ldr	r3, [pc, #108]	; (9cc0 <SwTimerStart+0x16c>)
    9c54:	1818      	adds	r0, r3, r0
    9c56:	7307      	strb	r7, [r0, #12]
    9c58:	e025      	b.n	9ca6 <SwTimerStart+0x152>
                        runningTimerQueueHead = timerId;
    9c5a:	4b21      	ldr	r3, [pc, #132]	; (9ce0 <SwTimerStart+0x18c>)
    9c5c:	601f      	str	r7, [r3, #0]
                        loadHwTimer(runningTimerQueueHead);
    9c5e:	0038      	movs	r0, r7
    9c60:	4b21      	ldr	r3, [pc, #132]	; (9ce8 <SwTimerStart+0x194>)
    9c62:	4798      	blx	r3
    9c64:	e01f      	b.n	9ca6 <SwTimerStart+0x152>
        for (index = 0; index < runningTimers; index++)
    9c66:	3301      	adds	r3, #1
    9c68:	b2db      	uxtb	r3, r3
    9c6a:	7821      	ldrb	r1, [r4, #0]
    9c6c:	b2c9      	uxtb	r1, r1
    9c6e:	428b      	cmp	r3, r1
    9c70:	d210      	bcs.n	9c94 <SwTimerStart+0x140>
            if (SWTIMER_INVALID != currIndex)
    9c72:	2aff      	cmp	r2, #255	; 0xff
    9c74:	d0f7      	beq.n	9c66 <SwTimerStart+0x112>
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    9c76:	9201      	str	r2, [sp, #4]
    9c78:	0111      	lsls	r1, r2, #4
    return ((t2 - t1) < INT32_MAX);
    9c7a:	4646      	mov	r6, r8
    9c7c:	5989      	ldr	r1, [r1, r6]
    9c7e:	1a69      	subs	r1, r5, r1
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    9c80:	4281      	cmp	r1, r0
    9c82:	d8d9      	bhi.n	9c38 <SwTimerStart+0xe4>
                    currIndex = swTimers[currIndex].nextTimer;
    9c84:	0111      	lsls	r1, r2, #4
    9c86:	4461      	add	r1, ip
    9c88:	9200      	str	r2, [sp, #0]
    9c8a:	7b0a      	ldrb	r2, [r1, #12]
    9c8c:	e7eb      	b.n	9c66 <SwTimerStart+0x112>
        return LORAWAN_INVALID_PARAMETER;
    9c8e:	200a      	movs	r0, #10
    9c90:	e777      	b.n	9b82 <SwTimerStart+0x2e>
        uint8_t prevIndex = runningTimerQueueHead;
    9c92:	9200      	str	r2, [sp, #0]
            swTimers[prevIndex].nextTimer = timerId;
    9c94:	4b0a      	ldr	r3, [pc, #40]	; (9cc0 <SwTimerStart+0x16c>)
    9c96:	9a00      	ldr	r2, [sp, #0]
    9c98:	0110      	lsls	r0, r2, #4
    9c9a:	1818      	adds	r0, r3, r0
    9c9c:	7307      	strb	r7, [r0, #12]
            swTimers[timerId].nextTimer = SWTIMER_INVALID;
    9c9e:	013f      	lsls	r7, r7, #4
    9ca0:	19df      	adds	r7, r3, r7
    9ca2:	23ff      	movs	r3, #255	; 0xff
    9ca4:	733b      	strb	r3, [r7, #12]
	if (cpu_irq_is_enabled_flags(flags))
    9ca6:	23ff      	movs	r3, #255	; 0xff
    return LORAWAN_SUCCESS;
    9ca8:	2008      	movs	r0, #8
    9caa:	464a      	mov	r2, r9
    9cac:	4213      	tst	r3, r2
    9cae:	d100      	bne.n	9cb2 <SwTimerStart+0x15e>
    9cb0:	e767      	b.n	9b82 <SwTimerStart+0x2e>
		cpu_irq_enable();
    9cb2:	2201      	movs	r2, #1
    9cb4:	4b07      	ldr	r3, [pc, #28]	; (9cd4 <SwTimerStart+0x180>)
    9cb6:	701a      	strb	r2, [r3, #0]
    9cb8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    9cbc:	b662      	cpsie	i
    9cbe:	e760      	b.n	9b82 <SwTimerStart+0x2e>
    9cc0:	20001460 	.word	0x20001460
    9cc4:	200015f4 	.word	0x200015f4
    9cc8:	200015f0 	.word	0x200015f0
    9ccc:	0000b71d 	.word	0x0000b71d
    9cd0:	7fffff00 	.word	0x7fffff00
    9cd4:	20000008 	.word	0x20000008
    9cd8:	000099d1 	.word	0x000099d1
    9cdc:	20000e54 	.word	0x20000e54
    9ce0:	20000e50 	.word	0x20000e50
    9ce4:	7ffffffe 	.word	0x7ffffffe
    9ce8:	00009939 	.word	0x00009939

00009cec <SwTimerIsRunning>:
\param[in] timerId Timer ID to be checked for running
\return True if the timer is running else False
******************************************************************************/
bool SwTimerIsRunning(uint8_t timerId)
{
    if (NULL == swTimers[timerId].timerCb)
    9cec:	0103      	lsls	r3, r0, #4
    9cee:	4803      	ldr	r0, [pc, #12]	; (9cfc <SwTimerIsRunning+0x10>)
    9cf0:	18c0      	adds	r0, r0, r3
    9cf2:	6840      	ldr	r0, [r0, #4]
    9cf4:	1e43      	subs	r3, r0, #1
    9cf6:	4198      	sbcs	r0, r3
    9cf8:	b2c0      	uxtb	r0, r0
    {
        return false;
    }

    return true;
}
    9cfa:	4770      	bx	lr
    9cfc:	20001460 	.word	0x20001460

00009d00 <SwTimerReadValue>:
\brief Returns the remaining timeout for the given timerId
\param[in] timerId Timer ID to get the remaining time
\return Remaining time until expiry in microseconds
******************************************************************************/
uint32_t SwTimerReadValue(uint8_t timerId)
{
    9d00:	b570      	push	{r4, r5, r6, lr}
    uint32_t remainingTime = 0u;
    uint32_t timerExpiryTime = 0u;
    uint32_t currentSysTime = 0u;
    
    if ( NULL != swTimers[timerId].timerCb )
    9d02:	0102      	lsls	r2, r0, #4
    9d04:	4b0b      	ldr	r3, [pc, #44]	; (9d34 <SwTimerReadValue+0x34>)
    9d06:	189b      	adds	r3, r3, r2
    9d08:	685b      	ldr	r3, [r3, #4]
    9d0a:	2b00      	cmp	r3, #0
    9d0c:	d010      	beq.n	9d30 <SwTimerReadValue+0x30>
    {
	    timerExpiryTime = swTimers[timerId].absoluteExpiryTime;
    9d0e:	4b09      	ldr	r3, [pc, #36]	; (9d34 <SwTimerReadValue+0x34>)
    9d10:	58d4      	ldr	r4, [r2, r3]
    time |= ((uint64_t) sysTimeOvf) << 32;
    9d12:	4b09      	ldr	r3, [pc, #36]	; (9d38 <SwTimerReadValue+0x38>)
    9d14:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    9d16:	4b09      	ldr	r3, [pc, #36]	; (9d3c <SwTimerReadValue+0x3c>)
    9d18:	881d      	ldrh	r5, [r3, #0]
    9d1a:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    9d1c:	4b08      	ldr	r3, [pc, #32]	; (9d40 <SwTimerReadValue+0x40>)
    9d1e:	4798      	blx	r3
    9d20:	4328      	orrs	r0, r5
	    currentSysTime = (uint32_t) gettime();

	    if ( currentSysTime <= timerExpiryTime )
    9d22:	4284      	cmp	r4, r0
    9d24:	d202      	bcs.n	9d2c <SwTimerReadValue+0x2c>
	    {
		    remainingTime = timerExpiryTime - currentSysTime;
	    }
	    else if ( currentSysTime > timerExpiryTime )
	    {
		    remainingTime = (UINT32_MAX - currentSysTime) + timerExpiryTime;
    9d26:	3c01      	subs	r4, #1
    9d28:	1a20      	subs	r0, r4, r0
	    }
    }
    
    return remainingTime;
}
    9d2a:	bd70      	pop	{r4, r5, r6, pc}
		    remainingTime = timerExpiryTime - currentSysTime;
    9d2c:	1a20      	subs	r0, r4, r0
    9d2e:	e7fc      	b.n	9d2a <SwTimerReadValue+0x2a>
    uint32_t remainingTime = 0u;
    9d30:	2000      	movs	r0, #0
    return remainingTime;
    9d32:	e7fa      	b.n	9d2a <SwTimerReadValue+0x2a>
    9d34:	20001460 	.word	0x20001460
    9d38:	200015f4 	.word	0x200015f4
    9d3c:	200015f0 	.word	0x200015f0
    9d40:	0000b71d 	.word	0x0000b71d

00009d44 <SwTimerNextExpiryDuration>:
/**************************************************************************//**
\brief Returns the duration until the next timer expiry
\return Returns the duration until the next timeout in microseconds
******************************************************************************/
uint32_t SwTimerNextExpiryDuration(void)
{
    9d44:	b510      	push	{r4, lr}
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;

    if (SWTIMER_INVALID != runningTimerQueueHead)
    9d46:	4b05      	ldr	r3, [pc, #20]	; (9d5c <SwTimerNextExpiryDuration+0x18>)
    9d48:	6818      	ldr	r0, [r3, #0]
    9d4a:	28ff      	cmp	r0, #255	; 0xff
    9d4c:	d102      	bne.n	9d54 <SwTimerNextExpiryDuration+0x10>
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;
    9d4e:	2001      	movs	r0, #1
    9d50:	4240      	negs	r0, r0
    {
        duration = SwTimerReadValue(runningTimerQueueHead);
    }

    return duration;
}
    9d52:	bd10      	pop	{r4, pc}
        duration = SwTimerReadValue(runningTimerQueueHead);
    9d54:	b2c0      	uxtb	r0, r0
    9d56:	4b02      	ldr	r3, [pc, #8]	; (9d60 <SwTimerNextExpiryDuration+0x1c>)
    9d58:	4798      	blx	r3
    9d5a:	e7fa      	b.n	9d52 <SwTimerNextExpiryDuration+0xe>
    9d5c:	20000e50 	.word	0x20000e50
    9d60:	00009d01 	.word	0x00009d01

00009d64 <SwTimersExecute>:

/**************************************************************************//**
\brief Handles Queues and Callbacks for Expired Timers
******************************************************************************/
void SwTimersExecute(void)
{
    9d64:	b5f0      	push	{r4, r5, r6, r7, lr}
    9d66:	46de      	mov	lr, fp
    9d68:	4657      	mov	r7, sl
    9d6a:	464e      	mov	r6, r9
    9d6c:	4645      	mov	r5, r8
    9d6e:	b5e0      	push	{r5, r6, r7, lr}
    9d70:	b083      	sub	sp, #12
    time |= ((uint64_t) sysTimeOvf) << 32;
    9d72:	4b2f      	ldr	r3, [pc, #188]	; (9e30 <SwTimersExecute+0xcc>)
    9d74:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    9d76:	4b2f      	ldr	r3, [pc, #188]	; (9e34 <SwTimersExecute+0xd0>)
    9d78:	881b      	ldrh	r3, [r3, #0]
    time |= (uint64_t) common_tc_read_count();
    9d7a:	4b2f      	ldr	r3, [pc, #188]	; (9e38 <SwTimersExecute+0xd4>)
    9d7c:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    9d7e:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    9d82:	4253      	negs	r3, r2
    9d84:	4153      	adcs	r3, r2
    9d86:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    9d88:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    9d8a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    9d8e:	2200      	movs	r2, #0
    9d90:	4b2a      	ldr	r3, [pc, #168]	; (9e3c <SwTimersExecute+0xd8>)
    9d92:	701a      	strb	r2, [r3, #0]
	return flags;
    9d94:	9c00      	ldr	r4, [sp, #0]
    uint64_t now = gettime();

    uint8_t flags = cpu_irq_save();
    swtimerInternalHandler();
    9d96:	4b2a      	ldr	r3, [pc, #168]	; (9e40 <SwTimersExecute+0xdc>)
    9d98:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    9d9a:	23ff      	movs	r3, #255	; 0xff
    9d9c:	4223      	tst	r3, r4
    9d9e:	d005      	beq.n	9dac <SwTimersExecute+0x48>
		cpu_irq_enable();
    9da0:	2201      	movs	r2, #1
    9da2:	4b26      	ldr	r3, [pc, #152]	; (9e3c <SwTimersExecute+0xd8>)
    9da4:	701a      	strb	r2, [r3, #0]
    9da6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    9daa:	b662      	cpsie	i
	cpu_irq_disable();
    9dac:	4b23      	ldr	r3, [pc, #140]	; (9e3c <SwTimersExecute+0xd8>)
    9dae:	469a      	mov	sl, r3
        /* Expired timer if any will be processed here */
        while (SWTIMER_INVALID != expiredTimerQueueHead)
        {
            flags = cpu_irq_save();

            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    9db0:	4c24      	ldr	r4, [pc, #144]	; (9e44 <SwTimersExecute+0xe0>)
    9db2:	4b25      	ldr	r3, [pc, #148]	; (9e48 <SwTimersExecute+0xe4>)
    9db4:	4699      	mov	r9, r3
    9db6:	2200      	movs	r2, #0

            /*
            * The expired timer's structure elements are updated
            * and the timer is taken out of expired timer queue
            */
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    9db8:	20ff      	movs	r0, #255	; 0xff
            */
            expiredTimerQueueHead = nextExpiredTimer;

            if (SWTIMER_INVALID == expiredTimerQueueHead)
            {
                expiredTimerQueueTail = SWTIMER_INVALID;
    9dba:	4b24      	ldr	r3, [pc, #144]	; (9e4c <SwTimersExecute+0xe8>)
    9dbc:	4698      	mov	r8, r3
		cpu_irq_enable();
    9dbe:	4b1f      	ldr	r3, [pc, #124]	; (9e3c <SwTimersExecute+0xd8>)
    9dc0:	469c      	mov	ip, r3
    9dc2:	e004      	b.n	9dce <SwTimersExecute+0x6a>
    9dc4:	4643      	mov	r3, r8
    9dc6:	6018      	str	r0, [r3, #0]
    9dc8:	e01e      	b.n	9e08 <SwTimersExecute+0xa4>
            }

            cpu_irq_restore(flags);

            if (NULL != callback)
    9dca:	2e00      	cmp	r6, #0
    9dcc:	d125      	bne.n	9e1a <SwTimersExecute+0xb6>
        while (SWTIMER_INVALID != expiredTimerQueueHead)
    9dce:	4b1d      	ldr	r3, [pc, #116]	; (9e44 <SwTimersExecute+0xe0>)
    9dd0:	681b      	ldr	r3, [r3, #0]
    9dd2:	2bff      	cmp	r3, #255	; 0xff
    9dd4:	d024      	beq.n	9e20 <SwTimersExecute+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    9dd6:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    9dda:	424b      	negs	r3, r1
    9ddc:	414b      	adcs	r3, r1
    9dde:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    9de0:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    9de2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    9de6:	4653      	mov	r3, sl
    9de8:	701a      	strb	r2, [r3, #0]
	return flags;
    9dea:	9f01      	ldr	r7, [sp, #4]
            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    9dec:	6823      	ldr	r3, [r4, #0]
    9dee:	011b      	lsls	r3, r3, #4
    9df0:	444b      	add	r3, r9
    9df2:	7b19      	ldrb	r1, [r3, #12]
            callback = (SwTimerCallbackFunc_t)swTimers[expiredTimerQueueHead].timerCb;
    9df4:	685e      	ldr	r6, [r3, #4]
            cbParam = swTimers[expiredTimerQueueHead].paramCb;
    9df6:	689d      	ldr	r5, [r3, #8]
    9df8:	46ab      	mov	fp, r5
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    9dfa:	7318      	strb	r0, [r3, #12]
            swTimers[expiredTimerQueueHead].timerCb = NULL;
    9dfc:	605a      	str	r2, [r3, #4]
            swTimers[expiredTimerQueueHead].paramCb = NULL;
    9dfe:	609a      	str	r2, [r3, #8]
            swTimers[expiredTimerQueueHead].loaded = false;
    9e00:	735a      	strb	r2, [r3, #13]
            expiredTimerQueueHead = nextExpiredTimer;
    9e02:	6021      	str	r1, [r4, #0]
            if (SWTIMER_INVALID == expiredTimerQueueHead)
    9e04:	29ff      	cmp	r1, #255	; 0xff
    9e06:	d0dd      	beq.n	9dc4 <SwTimersExecute+0x60>
	if (cpu_irq_is_enabled_flags(flags))
    9e08:	4238      	tst	r0, r7
    9e0a:	d0de      	beq.n	9dca <SwTimersExecute+0x66>
		cpu_irq_enable();
    9e0c:	2301      	movs	r3, #1
    9e0e:	4661      	mov	r1, ip
    9e10:	700b      	strb	r3, [r1, #0]
    9e12:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    9e16:	b662      	cpsie	i
    9e18:	e7d7      	b.n	9dca <SwTimersExecute+0x66>
            {
                /* Callback function is called */
                callback(cbParam);
    9e1a:	4658      	mov	r0, fp
    9e1c:	47b0      	blx	r6
    9e1e:	e7ca      	b.n	9db6 <SwTimersExecute+0x52>
                (void)now;
            }
        }
    }
}
    9e20:	b003      	add	sp, #12
    9e22:	bc3c      	pop	{r2, r3, r4, r5}
    9e24:	4690      	mov	r8, r2
    9e26:	4699      	mov	r9, r3
    9e28:	46a2      	mov	sl, r4
    9e2a:	46ab      	mov	fp, r5
    9e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9e2e:	46c0      	nop			; (mov r8, r8)
    9e30:	200015f4 	.word	0x200015f4
    9e34:	200015f0 	.word	0x200015f0
    9e38:	0000b71d 	.word	0x0000b71d
    9e3c:	20000008 	.word	0x20000008
    9e40:	000099d1 	.word	0x000099d1
    9e44:	20000e48 	.word	0x20000e48
    9e48:	20001460 	.word	0x20001460
    9e4c:	20000e4c 	.word	0x20000e4c

00009e50 <TIMER_TaskHandler>:
{
    9e50:	b510      	push	{r4, lr}
    SwTimersExecute();
    9e52:	4b02      	ldr	r3, [pc, #8]	; (9e5c <TIMER_TaskHandler+0xc>)
    9e54:	4798      	blx	r3
}
    9e56:	2000      	movs	r0, #0
    9e58:	bd10      	pop	{r4, pc}
    9e5a:	46c0      	nop			; (mov r8, r8)
    9e5c:	00009d65 	.word	0x00009d65

00009e60 <SwTimerStop>:
        LORAWAN_INVALID_PARAMETER if timerId is not valid
        LORAWAN_INVALID_REQUEST if timerId was not started before
        LORAWAN_SUCCESS if it is successfully stopped
******************************************************************************/
StackRetStatus_t SwTimerStop(uint8_t timerId)
{
    9e60:	b570      	push	{r4, r5, r6, lr}
    9e62:	b082      	sub	sp, #8
    9e64:	0004      	movs	r4, r0
    uint8_t prevIndex;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    9e66:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    9e68:	2c18      	cmp	r4, #24
    9e6a:	d901      	bls.n	9e70 <SwTimerStop+0x10>
        return LORAWAN_SUCCESS;
    }

    SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
    return LORAWAN_INVALID_REQUEST;
}
    9e6c:	b002      	add	sp, #8
    9e6e:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    9e70:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    9e74:	425a      	negs	r2, r3
    9e76:	4153      	adcs	r3, r2
    9e78:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    9e7a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    9e7c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    9e80:	2200      	movs	r2, #0
    9e82:	4b47      	ldr	r3, [pc, #284]	; (9fa0 <SwTimerStop+0x140>)
    9e84:	701a      	strb	r2, [r3, #0]
	return flags;
    9e86:	9d01      	ldr	r5, [sp, #4]
    swtimerInternalHandler();
    9e88:	4b46      	ldr	r3, [pc, #280]	; (9fa4 <SwTimerStop+0x144>)
    9e8a:	4798      	blx	r3
    if (runningTimers > 0)
    9e8c:	4b46      	ldr	r3, [pc, #280]	; (9fa8 <SwTimerStop+0x148>)
    9e8e:	781b      	ldrb	r3, [r3, #0]
    9e90:	2b00      	cmp	r3, #0
    9e92:	d040      	beq.n	9f16 <SwTimerStop+0xb6>
        uint8_t timer_count = runningTimers;
    9e94:	4b44      	ldr	r3, [pc, #272]	; (9fa8 <SwTimerStop+0x148>)
    9e96:	781b      	ldrb	r3, [r3, #0]
    9e98:	b2db      	uxtb	r3, r3
        prevIndex = currIndex = runningTimerQueueHead;
    9e9a:	4a44      	ldr	r2, [pc, #272]	; (9fac <SwTimerStop+0x14c>)
    9e9c:	6816      	ldr	r6, [r2, #0]
    9e9e:	b2f1      	uxtb	r1, r6
        while (timer_count > 0)
    9ea0:	2b00      	cmp	r3, #0
    9ea2:	d038      	beq.n	9f16 <SwTimerStop+0xb6>
            if (timerId == currIndex)
    9ea4:	428c      	cmp	r4, r1
    9ea6:	d00b      	beq.n	9ec0 <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    9ea8:	4841      	ldr	r0, [pc, #260]	; (9fb0 <SwTimerStop+0x150>)
    9eaa:	010a      	lsls	r2, r1, #4
    9eac:	1882      	adds	r2, r0, r2
    9eae:	7b12      	ldrb	r2, [r2, #12]
            timer_count--;
    9eb0:	3b01      	subs	r3, #1
    9eb2:	b2db      	uxtb	r3, r3
        while (timer_count > 0)
    9eb4:	2b00      	cmp	r3, #0
    9eb6:	d02e      	beq.n	9f16 <SwTimerStop+0xb6>
            if (timerId == currIndex)
    9eb8:	4294      	cmp	r4, r2
    9eba:	d001      	beq.n	9ec0 <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    9ebc:	0011      	movs	r1, r2
    9ebe:	e7f4      	b.n	9eaa <SwTimerStop+0x4a>
                if (timerId == runningTimerQueueHead)
    9ec0:	42a6      	cmp	r6, r4
    9ec2:	d01d      	beq.n	9f00 <SwTimerStop+0xa0>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    9ec4:	4b3a      	ldr	r3, [pc, #232]	; (9fb0 <SwTimerStop+0x150>)
    9ec6:	0122      	lsls	r2, r4, #4
    9ec8:	189a      	adds	r2, r3, r2
    9eca:	7b12      	ldrb	r2, [r2, #12]
    9ecc:	0109      	lsls	r1, r1, #4
    9ece:	1859      	adds	r1, r3, r1
    9ed0:	730a      	strb	r2, [r1, #12]
                swTimers[timerId].nextTimer  = SWTIMER_INVALID;
    9ed2:	0122      	lsls	r2, r4, #4
    9ed4:	4b36      	ldr	r3, [pc, #216]	; (9fb0 <SwTimerStop+0x150>)
    9ed6:	189b      	adds	r3, r3, r2
    9ed8:	22ff      	movs	r2, #255	; 0xff
    9eda:	731a      	strb	r2, [r3, #12]
            runningTimers--;
    9edc:	4a32      	ldr	r2, [pc, #200]	; (9fa8 <SwTimerStop+0x148>)
    9ede:	7813      	ldrb	r3, [r2, #0]
    9ee0:	3b01      	subs	r3, #1
    9ee2:	b2db      	uxtb	r3, r3
    9ee4:	7013      	strb	r3, [r2, #0]
        swTimers[timerId].timerCb = NULL;
    9ee6:	0124      	lsls	r4, r4, #4
    9ee8:	4b31      	ldr	r3, [pc, #196]	; (9fb0 <SwTimerStop+0x150>)
    9eea:	191c      	adds	r4, r3, r4
    9eec:	2300      	movs	r3, #0
    9eee:	6063      	str	r3, [r4, #4]
        swTimers[timerId].paramCb = NULL;
    9ef0:	60a3      	str	r3, [r4, #8]
        swTimers[timerId].loaded = false;
    9ef2:	7363      	strb	r3, [r4, #13]
	if (cpu_irq_is_enabled_flags(flags))
    9ef4:	33ff      	adds	r3, #255	; 0xff
        return LORAWAN_SUCCESS;
    9ef6:	2008      	movs	r0, #8
    9ef8:	422b      	tst	r3, r5
    9efa:	d0b7      	beq.n	9e6c <SwTimerStop+0xc>
    9efc:	2301      	movs	r3, #1
    9efe:	e040      	b.n	9f82 <SwTimerStop+0x122>
                    common_tc_compare_stop();
    9f00:	4b2c      	ldr	r3, [pc, #176]	; (9fb4 <SwTimerStop+0x154>)
    9f02:	4798      	blx	r3
                    runningTimerQueueHead = swTimers[timerId].nextTimer;
    9f04:	0122      	lsls	r2, r4, #4
    9f06:	4b2a      	ldr	r3, [pc, #168]	; (9fb0 <SwTimerStop+0x150>)
    9f08:	189b      	adds	r3, r3, r2
    9f0a:	7b18      	ldrb	r0, [r3, #12]
    9f0c:	4b27      	ldr	r3, [pc, #156]	; (9fac <SwTimerStop+0x14c>)
    9f0e:	6018      	str	r0, [r3, #0]
                    loadHwTimer(runningTimerQueueHead);
    9f10:	4b29      	ldr	r3, [pc, #164]	; (9fb8 <SwTimerStop+0x158>)
    9f12:	4798      	blx	r3
    9f14:	e7dd      	b.n	9ed2 <SwTimerStop+0x72>
        prevIndex = currIndex = expiredTimerQueueHead;
    9f16:	4b29      	ldr	r3, [pc, #164]	; (9fbc <SwTimerStop+0x15c>)
    9f18:	6818      	ldr	r0, [r3, #0]
    9f1a:	b2c2      	uxtb	r2, r0
        while (SWTIMER_INVALID != currIndex)
    9f1c:	2aff      	cmp	r2, #255	; 0xff
    9f1e:	d02c      	beq.n	9f7a <SwTimerStop+0x11a>
            if (timerId == currIndex)
    9f20:	4294      	cmp	r4, r2
    9f22:	d009      	beq.n	9f38 <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    9f24:	4922      	ldr	r1, [pc, #136]	; (9fb0 <SwTimerStop+0x150>)
    9f26:	0113      	lsls	r3, r2, #4
    9f28:	18cb      	adds	r3, r1, r3
    9f2a:	7b1b      	ldrb	r3, [r3, #12]
        while (SWTIMER_INVALID != currIndex)
    9f2c:	2bff      	cmp	r3, #255	; 0xff
    9f2e:	d024      	beq.n	9f7a <SwTimerStop+0x11a>
            if (timerId == currIndex)
    9f30:	429c      	cmp	r4, r3
    9f32:	d001      	beq.n	9f38 <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    9f34:	001a      	movs	r2, r3
    9f36:	e7f6      	b.n	9f26 <SwTimerStop+0xc6>
                if (timerId == expiredTimerQueueHead)
    9f38:	42a0      	cmp	r0, r4
    9f3a:	d00d      	beq.n	9f58 <SwTimerStop+0xf8>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    9f3c:	4b1c      	ldr	r3, [pc, #112]	; (9fb0 <SwTimerStop+0x150>)
    9f3e:	0121      	lsls	r1, r4, #4
    9f40:	1859      	adds	r1, r3, r1
    9f42:	7b09      	ldrb	r1, [r1, #12]
    9f44:	0110      	lsls	r0, r2, #4
    9f46:	181b      	adds	r3, r3, r0
    9f48:	7319      	strb	r1, [r3, #12]
                    if (timerId == expiredTimerQueueTail)
    9f4a:	4b1d      	ldr	r3, [pc, #116]	; (9fc0 <SwTimerStop+0x160>)
    9f4c:	681b      	ldr	r3, [r3, #0]
    9f4e:	429c      	cmp	r4, r3
    9f50:	d1c9      	bne.n	9ee6 <SwTimerStop+0x86>
                        expiredTimerQueueTail = prevIndex;
    9f52:	4b1b      	ldr	r3, [pc, #108]	; (9fc0 <SwTimerStop+0x160>)
    9f54:	601a      	str	r2, [r3, #0]
    9f56:	e7c6      	b.n	9ee6 <SwTimerStop+0x86>
                    if (expiredTimerQueueHead == expiredTimerQueueTail)
    9f58:	4b19      	ldr	r3, [pc, #100]	; (9fc0 <SwTimerStop+0x160>)
    9f5a:	681b      	ldr	r3, [r3, #0]
    9f5c:	4298      	cmp	r0, r3
    9f5e:	d006      	beq.n	9f6e <SwTimerStop+0x10e>
                        expiredTimerQueueHead = swTimers[expiredTimerQueueHead].nextTimer;
    9f60:	0100      	lsls	r0, r0, #4
    9f62:	4b13      	ldr	r3, [pc, #76]	; (9fb0 <SwTimerStop+0x150>)
    9f64:	1818      	adds	r0, r3, r0
    9f66:	7b02      	ldrb	r2, [r0, #12]
    9f68:	4b14      	ldr	r3, [pc, #80]	; (9fbc <SwTimerStop+0x15c>)
    9f6a:	601a      	str	r2, [r3, #0]
    9f6c:	e7bb      	b.n	9ee6 <SwTimerStop+0x86>
                        expiredTimerQueueHead = expiredTimerQueueTail = SWTIMER_INVALID;
    9f6e:	23ff      	movs	r3, #255	; 0xff
    9f70:	4a13      	ldr	r2, [pc, #76]	; (9fc0 <SwTimerStop+0x160>)
    9f72:	6013      	str	r3, [r2, #0]
    9f74:	4a11      	ldr	r2, [pc, #68]	; (9fbc <SwTimerStop+0x15c>)
    9f76:	6013      	str	r3, [r2, #0]
    9f78:	e7b5      	b.n	9ee6 <SwTimerStop+0x86>
    9f7a:	23ff      	movs	r3, #255	; 0xff
    9f7c:	422b      	tst	r3, r5
    9f7e:	d00a      	beq.n	9f96 <SwTimerStop+0x136>
    9f80:	2300      	movs	r3, #0
		cpu_irq_enable();
    9f82:	2101      	movs	r1, #1
    9f84:	4a06      	ldr	r2, [pc, #24]	; (9fa0 <SwTimerStop+0x140>)
    9f86:	7011      	strb	r1, [r2, #0]
    9f88:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    9f8c:	b662      	cpsie	i
    if (timerStopReqStatus)
    9f8e:	2b00      	cmp	r3, #0
    9f90:	d103      	bne.n	9f9a <SwTimerStop+0x13a>
    return LORAWAN_INVALID_REQUEST;
    9f92:	2015      	movs	r0, #21
    9f94:	e76a      	b.n	9e6c <SwTimerStop+0xc>
    9f96:	2015      	movs	r0, #21
    9f98:	e768      	b.n	9e6c <SwTimerStop+0xc>
        return LORAWAN_SUCCESS;
    9f9a:	2008      	movs	r0, #8
    9f9c:	e766      	b.n	9e6c <SwTimerStop+0xc>
    9f9e:	46c0      	nop			; (mov r8, r8)
    9fa0:	20000008 	.word	0x20000008
    9fa4:	000099d1 	.word	0x000099d1
    9fa8:	20000e54 	.word	0x20000e54
    9fac:	20000e50 	.word	0x20000e50
    9fb0:	20001460 	.word	0x20001460
    9fb4:	0000b769 	.word	0x0000b769
    9fb8:	00009939 	.word	0x00009939
    9fbc:	20000e48 	.word	0x20000e48
    9fc0:	20000e4c 	.word	0x20000e4c

00009fc4 <SwTimerRunRemainingTime>:
{
    9fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    9fc6:	b083      	sub	sp, #12
    9fc8:	0005      	movs	r5, r0
    void * timerCb = (void*)(swTimers[runningTimerQueueHead].timerCb);
    9fca:	4b0b      	ldr	r3, [pc, #44]	; (9ff8 <SwTimerRunRemainingTime+0x34>)
    9fcc:	681c      	ldr	r4, [r3, #0]
    9fce:	0122      	lsls	r2, r4, #4
    9fd0:	4b0a      	ldr	r3, [pc, #40]	; (9ffc <SwTimerRunRemainingTime+0x38>)
    9fd2:	189b      	adds	r3, r3, r2
    9fd4:	685e      	ldr	r6, [r3, #4]
    void *paramCb = swTimers[runningTimerQueueHead].paramCb;
    9fd6:	689f      	ldr	r7, [r3, #8]
    uint8_t timerId = runningTimerQueueHead;
    9fd8:	b2e4      	uxtb	r4, r4
    if (LORAWAN_SUCCESS == SwTimerStop(runningTimerQueueHead))
    9fda:	0020      	movs	r0, r4
    9fdc:	4b08      	ldr	r3, [pc, #32]	; (a000 <SwTimerRunRemainingTime+0x3c>)
    9fde:	4798      	blx	r3
    9fe0:	2808      	cmp	r0, #8
    9fe2:	d001      	beq.n	9fe8 <SwTimerRunRemainingTime+0x24>
}
    9fe4:	b003      	add	sp, #12
    9fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        SwTimerStart(timerId, offset, SW_TIMEOUT_RELATIVE, timerCb, paramCb);
    9fe8:	9700      	str	r7, [sp, #0]
    9fea:	0033      	movs	r3, r6
    9fec:	2200      	movs	r2, #0
    9fee:	0029      	movs	r1, r5
    9ff0:	0020      	movs	r0, r4
    9ff2:	4c04      	ldr	r4, [pc, #16]	; (a004 <SwTimerRunRemainingTime+0x40>)
    9ff4:	47a0      	blx	r4
}
    9ff6:	e7f5      	b.n	9fe4 <SwTimerRunRemainingTime+0x20>
    9ff8:	20000e50 	.word	0x20000e50
    9ffc:	20001460 	.word	0x20001460
    a000:	00009e61 	.word	0x00009e61
    a004:	00009b55 	.word	0x00009b55

0000a008 <SystemTimerSuspend>:

/**************************************************************************//**
\brief Suspends the software timer
******************************************************************************/
void SystemTimerSuspend(void)
{
    a008:	b570      	push	{r4, r5, r6, lr}
    time |= ((uint64_t) sysTimeOvf) << 32;
    a00a:	4b07      	ldr	r3, [pc, #28]	; (a028 <SystemTimerSuspend+0x20>)
    a00c:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    a00e:	4b07      	ldr	r3, [pc, #28]	; (a02c <SystemTimerSuspend+0x24>)
    a010:	881d      	ldrh	r5, [r3, #0]
    a012:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    a014:	4b06      	ldr	r3, [pc, #24]	; (a030 <SystemTimerSuspend+0x28>)
    a016:	4798      	blx	r3
    sysTimeLastKnown = gettime();
    a018:	4b06      	ldr	r3, [pc, #24]	; (a034 <SystemTimerSuspend+0x2c>)
    time |= (uint64_t) common_tc_read_count();
    a01a:	4328      	orrs	r0, r5
    a01c:	6018      	str	r0, [r3, #0]
    a01e:	605c      	str	r4, [r3, #4]
    common_tc_stop();
    a020:	4b05      	ldr	r3, [pc, #20]	; (a038 <SystemTimerSuspend+0x30>)
    a022:	4798      	blx	r3
}
    a024:	bd70      	pop	{r4, r5, r6, pc}
    a026:	46c0      	nop			; (mov r8, r8)
    a028:	200015f4 	.word	0x200015f4
    a02c:	200015f0 	.word	0x200015f0
    a030:	0000b71d 	.word	0x0000b71d
    a034:	20000e58 	.word	0x20000e58
    a038:	0000b7a9 	.word	0x0000b7a9

0000a03c <SystemTimerSync>:
/**************************************************************************//**
\brief Resumes the software timer by offseting it with given time
\param[in] timeToSync Amount of duration to offset from known system time
******************************************************************************/
void SystemTimerSync(uint64_t timeToSync)
{
    a03c:	b570      	push	{r4, r5, r6, lr}
    uint8_t timerId;
    uint16_t adjustOffset;

    sysTimeLastKnown += timeToSync;
    a03e:	4b22      	ldr	r3, [pc, #136]	; (a0c8 <SystemTimerSync+0x8c>)
    a040:	681c      	ldr	r4, [r3, #0]
    a042:	685d      	ldr	r5, [r3, #4]
    a044:	1900      	adds	r0, r0, r4
    a046:	4169      	adcs	r1, r5
    a048:	6018      	str	r0, [r3, #0]
    a04a:	6059      	str	r1, [r3, #4]

    /* 1. Update system time */
    sysTimeOvf = (uint32_t) (sysTimeLastKnown >> 32);
    a04c:	4b1f      	ldr	r3, [pc, #124]	; (a0cc <SystemTimerSync+0x90>)
    a04e:	6019      	str	r1, [r3, #0]
    sysTime = (uint16_t) ((sysTimeLastKnown >> SWTIMER_SYSTIME_SHIFTMASK) & 0xffff);
    a050:	0c02      	lsrs	r2, r0, #16
    a052:	4b1f      	ldr	r3, [pc, #124]	; (a0d0 <SystemTimerSync+0x94>)
    a054:	801a      	strh	r2, [r3, #0]

    /* 2. Adjust expiration of running timers */
    adjustOffset = (uint16_t) sysTimeLastKnown;
    a056:	b280      	uxth	r0, r0
    timerId = runningTimerQueueHead;
    a058:	4b1e      	ldr	r3, [pc, #120]	; (a0d4 <SystemTimerSync+0x98>)
    a05a:	781b      	ldrb	r3, [r3, #0]
    for (uint8_t index = 0; index < runningTimers; index++)
    a05c:	4a1e      	ldr	r2, [pc, #120]	; (a0d8 <SystemTimerSync+0x9c>)
    a05e:	7812      	ldrb	r2, [r2, #0]
    a060:	2a00      	cmp	r2, #0
    a062:	d012      	beq.n	a08a <SystemTimerSync+0x4e>
    a064:	2200      	movs	r2, #0
    {
        if (SWTIMER_INVALID != timerId)
        {
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    a066:	4c1d      	ldr	r4, [pc, #116]	; (a0dc <SystemTimerSync+0xa0>)
    for (uint8_t index = 0; index < runningTimers; index++)
    a068:	4d1b      	ldr	r5, [pc, #108]	; (a0d8 <SystemTimerSync+0x9c>)
    a06a:	e005      	b.n	a078 <SystemTimerSync+0x3c>
    a06c:	3201      	adds	r2, #1
    a06e:	b2d2      	uxtb	r2, r2
    a070:	7829      	ldrb	r1, [r5, #0]
    a072:	b2c9      	uxtb	r1, r1
    a074:	4291      	cmp	r1, r2
    a076:	d908      	bls.n	a08a <SystemTimerSync+0x4e>
        if (SWTIMER_INVALID != timerId)
    a078:	2bff      	cmp	r3, #255	; 0xff
    a07a:	d0f7      	beq.n	a06c <SystemTimerSync+0x30>
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    a07c:	011b      	lsls	r3, r3, #4
    a07e:	5919      	ldr	r1, [r3, r4]
    a080:	1a09      	subs	r1, r1, r0
    a082:	5119      	str	r1, [r3, r4]
            timerId = swTimers[timerId].nextTimer;
    a084:	18e3      	adds	r3, r4, r3
    a086:	7b1b      	ldrb	r3, [r3, #12]
    a088:	e7f0      	b.n	a06c <SystemTimerSync+0x30>
        }
    }

    /* 3. Start hardware timer */
    common_tc_init();
    a08a:	4b15      	ldr	r3, [pc, #84]	; (a0e0 <SystemTimerSync+0xa4>)
    a08c:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    a08e:	4815      	ldr	r0, [pc, #84]	; (a0e4 <SystemTimerSync+0xa8>)
    a090:	4b15      	ldr	r3, [pc, #84]	; (a0e8 <SystemTimerSync+0xac>)
    a092:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    a094:	4815      	ldr	r0, [pc, #84]	; (a0ec <SystemTimerSync+0xb0>)
    a096:	4b16      	ldr	r3, [pc, #88]	; (a0f0 <SystemTimerSync+0xb4>)
    a098:	4798      	blx	r3

    /* 4. Resume timer queue operations */
    if (runningTimers && (SWTIMER_INVALID != runningTimerQueueHead))
    a09a:	4b0f      	ldr	r3, [pc, #60]	; (a0d8 <SystemTimerSync+0x9c>)
    a09c:	781b      	ldrb	r3, [r3, #0]
    a09e:	2b00      	cmp	r3, #0
    a0a0:	d009      	beq.n	a0b6 <SystemTimerSync+0x7a>
    a0a2:	4b0c      	ldr	r3, [pc, #48]	; (a0d4 <SystemTimerSync+0x98>)
    a0a4:	681b      	ldr	r3, [r3, #0]
    a0a6:	2bff      	cmp	r3, #255	; 0xff
    a0a8:	d005      	beq.n	a0b6 <SystemTimerSync+0x7a>
    {
        uint32_t remainingTime = SwTimerNextExpiryDuration();
    a0aa:	4b12      	ldr	r3, [pc, #72]	; (a0f4 <SystemTimerSync+0xb8>)
    a0ac:	4798      	blx	r3

        if (SWTIMER_MIN_TIMEOUT > remainingTime)
    a0ae:	28fe      	cmp	r0, #254	; 0xfe
    a0b0:	d902      	bls.n	a0b8 <SystemTimerSync+0x7c>
        else
        {
            /*
            * There is some time left in head timer, so restart it.
            */
            SwTimerRunRemainingTime(remainingTime);
    a0b2:	4b11      	ldr	r3, [pc, #68]	; (a0f8 <SystemTimerSync+0xbc>)
    a0b4:	4798      	blx	r3
        }
    }
}
    a0b6:	bd70      	pop	{r4, r5, r6, pc}
            isTimerTriggered = true;
    a0b8:	2201      	movs	r2, #1
    a0ba:	4b10      	ldr	r3, [pc, #64]	; (a0fc <SystemTimerSync+0xc0>)
    a0bc:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    a0be:	2001      	movs	r0, #1
    a0c0:	4b0f      	ldr	r3, [pc, #60]	; (a100 <SystemTimerSync+0xc4>)
    a0c2:	4798      	blx	r3
    a0c4:	e7f7      	b.n	a0b6 <SystemTimerSync+0x7a>
    a0c6:	46c0      	nop			; (mov r8, r8)
    a0c8:	20000e58 	.word	0x20000e58
    a0cc:	200015f4 	.word	0x200015f4
    a0d0:	200015f0 	.word	0x200015f0
    a0d4:	20000e50 	.word	0x20000e50
    a0d8:	20000e54 	.word	0x20000e54
    a0dc:	20001460 	.word	0x20001460
    a0e0:	0000b831 	.word	0x0000b831
    a0e4:	00009881 	.word	0x00009881
    a0e8:	0000b8b5 	.word	0x0000b8b5
    a0ec:	00009859 	.word	0x00009859
    a0f0:	0000b8c1 	.word	0x0000b8c1
    a0f4:	00009d45 	.word	0x00009d45
    a0f8:	00009fc5 	.word	0x00009fc5
    a0fc:	200015f2 	.word	0x200015f2
    a100:	0000a181 	.word	0x0000a181

0000a104 <Stack_Init>:
/**************************************************************************//**
\brief Initializes the system. This is the first stack function to be called
       by the application in the main() function.
******************************************************************************/
void Stack_Init(void)
{
    a104:	b510      	push	{r4, lr}
	
	/* LORAWAN_Init() should have been called form here, 
	   but parser application has a round-about way to call it now */
 
	/* Post application task to initiate the execution from there */
	SYSTEM_PostTask(APP_TASK_ID);
    a106:	2010      	movs	r0, #16
    a108:	4b01      	ldr	r3, [pc, #4]	; (a110 <Stack_Init+0xc>)
    a10a:	4798      	blx	r3
}
    a10c:	bd10      	pop	{r4, pc}
    a10e:	46c0      	nop			; (mov r8, r8)
    a110:	0000a181 	.word	0x0000a181

0000a114 <SYSTEM_RunTasks>:
/************************************************************************/
/*********************************************************************//**
\brief System tasks execution entry point
*************************************************************************/
void SYSTEM_RunTasks(void)
{
    a114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((1 << SYSTEM_TASK_ID_COUNT) > sysTaskFlag)
    a116:	4b16      	ldr	r3, [pc, #88]	; (a170 <SYSTEM_RunTasks+0x5c>)
    a118:	881b      	ldrh	r3, [r3, #0]
    a11a:	b29b      	uxth	r3, r3
    a11c:	2b1f      	cmp	r3, #31
    a11e:	d922      	bls.n	a166 <SYSTEM_RunTasks+0x52>
    a120:	e7fe      	b.n	a120 <SYSTEM_RunTasks+0xc>
    { /* Only valid task bits are set */
        while (sysTaskFlag)
        { /* One or more task are pending to execute */
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
            {
                if ((1 << taskId) & sysTaskFlag)
    a122:	2500      	movs	r5, #0
                    /*
                    * Reset the task bit since it is to be executed now.
                    * It is done inside atomic section to avoid any interrupt context
                    * corrupting the bits.
                    */
                    ATOMIC_SECTION_ENTER
    a124:	4b13      	ldr	r3, [pc, #76]	; (a174 <SYSTEM_RunTasks+0x60>)
    a126:	4798      	blx	r3
                    sysTaskFlag &= ~(1 << taskId);
    a128:	4911      	ldr	r1, [pc, #68]	; (a170 <SYSTEM_RunTasks+0x5c>)
    a12a:	880b      	ldrh	r3, [r1, #0]
    a12c:	2201      	movs	r2, #1
    a12e:	40aa      	lsls	r2, r5
    a130:	4393      	bics	r3, r2
    a132:	800b      	strh	r3, [r1, #0]
                    ATOMIC_SECTION_EXIT
    a134:	4b10      	ldr	r3, [pc, #64]	; (a178 <SYSTEM_RunTasks+0x64>)
    a136:	4798      	blx	r3

                    /* Return value is not used now, can be used later */
                    taskHandlers[taskId]();
    a138:	00ad      	lsls	r5, r5, #2
    a13a:	4b10      	ldr	r3, [pc, #64]	; (a17c <SYSTEM_RunTasks+0x68>)
    a13c:	58eb      	ldr	r3, [r5, r3]
    a13e:	4798      	blx	r3
                if ((1 << taskId) & sysTaskFlag)
    a140:	2101      	movs	r1, #1
        while (sysTaskFlag)
    a142:	883b      	ldrh	r3, [r7, #0]
    a144:	b29b      	uxth	r3, r3
    a146:	2b00      	cmp	r3, #0
    a148:	d011      	beq.n	a16e <SYSTEM_RunTasks+0x5a>
                if ((1 << taskId) & sysTaskFlag)
    a14a:	8823      	ldrh	r3, [r4, #0]
    a14c:	420b      	tst	r3, r1
    a14e:	d1e8      	bne.n	a122 <SYSTEM_RunTasks+0xe>
    a150:	2201      	movs	r2, #1
    a152:	8833      	ldrh	r3, [r6, #0]
    a154:	b29b      	uxth	r3, r3
    a156:	0015      	movs	r5, r2
    a158:	4113      	asrs	r3, r2
    a15a:	4219      	tst	r1, r3
    a15c:	d1e2      	bne.n	a124 <SYSTEM_RunTasks+0x10>
    a15e:	3201      	adds	r2, #1
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
    a160:	2a05      	cmp	r2, #5
    a162:	d1f6      	bne.n	a152 <SYSTEM_RunTasks+0x3e>
    a164:	e7ed      	b.n	a142 <SYSTEM_RunTasks+0x2e>
        while (sysTaskFlag)
    a166:	4f02      	ldr	r7, [pc, #8]	; (a170 <SYSTEM_RunTasks+0x5c>)
                if ((1 << taskId) & sysTaskFlag)
    a168:	003c      	movs	r4, r7
    a16a:	003e      	movs	r6, r7
    a16c:	e7e8      	b.n	a140 <SYSTEM_RunTasks+0x2c>
        * Can happen only due to corruption, so halt
        * TODO : replace this with assert implementation
        */
        while(1);
    }
}
    a16e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a170:	20000e60 	.word	0x20000e60
    a174:	00004275 	.word	0x00004275
    a178:	00004281 	.word	0x00004281
    a17c:	0001a1d0 	.word	0x0001a1d0

0000a180 <SYSTEM_PostTask>:

\param[in] task - ID of the posted task.
*************************************************************************/

void SYSTEM_PostTask(SYSTEM_Task_t task)
{
    a180:	b510      	push	{r4, lr}
    a182:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    a184:	4b04      	ldr	r3, [pc, #16]	; (a198 <SYSTEM_PostTask+0x18>)
    a186:	4798      	blx	r3
    sysTaskFlag |= task;
    a188:	4b04      	ldr	r3, [pc, #16]	; (a19c <SYSTEM_PostTask+0x1c>)
    a18a:	8818      	ldrh	r0, [r3, #0]
    a18c:	4320      	orrs	r0, r4
    a18e:	8018      	strh	r0, [r3, #0]
    ATOMIC_SECTION_EXIT
    a190:	4b03      	ldr	r3, [pc, #12]	; (a1a0 <SYSTEM_PostTask+0x20>)
    a192:	4798      	blx	r3
}
    a194:	bd10      	pop	{r4, pc}
    a196:	46c0      	nop			; (mov r8, r8)
    a198:	00004275 	.word	0x00004275
    a19c:	20000e60 	.word	0x20000e60
    a1a0:	00004281 	.word	0x00004281

0000a1a4 <SYSTEM_ReadyToSleep>:

\return 'true' if the system is ready, 'false' otherwise
*************************************************************************/
bool SYSTEM_ReadyToSleep(void)
{
    return !(sysTaskFlag & 0xffff);
    a1a4:	4b03      	ldr	r3, [pc, #12]	; (a1b4 <SYSTEM_ReadyToSleep+0x10>)
    a1a6:	8818      	ldrh	r0, [r3, #0]
    a1a8:	b280      	uxth	r0, r0
    a1aa:	4243      	negs	r3, r0
    a1ac:	4158      	adcs	r0, r3
    a1ae:	b2c0      	uxtb	r0, r0
}
    a1b0:	4770      	bx	lr
    a1b2:	46c0      	nop			; (mov r8, r8)
    a1b4:	20000e60 	.word	0x20000e60

0000a1b8 <Radio_WriteMode>:
\param newModulation	- Sets the modulation.
\param blocking			- Sets if its blocking call or not.
\return					- none.
*************************************************************************/
void Radio_WriteMode(RadioMode_t newMode, RadioModulation_t newModulation, uint8_t blocking)
{
    a1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a1ba:	46d6      	mov	lr, sl
    a1bc:	464f      	mov	r7, r9
    a1be:	b580      	push	{r7, lr}
    a1c0:	b083      	sub	sp, #12
    a1c2:	9201      	str	r2, [sp, #4]
    uint8_t opMode;
    uint8_t dioMapping;
    RadioModulation_t currentModulation;
    RadioMode_t currentMode;

    if ((MODULATION_FSK == newModulation) &&
    a1c4:	2900      	cmp	r1, #0
    a1c6:	d102      	bne.n	a1ce <Radio_WriteMode+0x16>
    a1c8:	1f83      	subs	r3, r0, #6
    a1ca:	2b01      	cmp	r3, #1
    a1cc:	d92a      	bls.n	a224 <Radio_WriteMode+0x6c>
        // Unavailable modes for FSK. Just return.
        return;
    }

    // Sanity enforcement on parameters
    newMode &= 0x07;
    a1ce:	2307      	movs	r3, #7
    a1d0:	4699      	mov	r9, r3
    a1d2:	001c      	movs	r4, r3
    a1d4:	4004      	ands	r4, r0
    newModulation &= 0x01;
    a1d6:	2601      	movs	r6, #1
    a1d8:	400e      	ands	r6, r1

    opMode = RADIO_RegisterRead(REG_OPMODE);
    a1da:	2001      	movs	r0, #1
    a1dc:	4b2b      	ldr	r3, [pc, #172]	; (a28c <Radio_WriteMode+0xd4>)
    a1de:	4798      	blx	r3
    a1e0:	0005      	movs	r5, r0
    a1e2:	0007      	movs	r7, r0

    if ((opMode & 0x80) != 0)
    a1e4:	b243      	sxtb	r3, r0
    a1e6:	469a      	mov	sl, r3
    else
    {
        currentModulation = MODULATION_FSK;
    }

    currentMode = opMode & 0x07;
    a1e8:	464b      	mov	r3, r9
    a1ea:	4003      	ands	r3, r0

    // If we need to change modulation, we need to do this in sleep mode.
    // Otherwise, we can go straight to changing the current mode to newMode.
    if (newModulation != currentModulation)
    a1ec:	4652      	mov	r2, sl
    a1ee:	0fd2      	lsrs	r2, r2, #31
    a1f0:	4296      	cmp	r6, r2
    a1f2:	d00a      	beq.n	a20a <Radio_WriteMode+0x52>
    {
        // Go to sleep
        if (MODE_SLEEP != currentMode)
    a1f4:	2b00      	cmp	r3, #0
    a1f6:	d11a      	bne.n	a22e <Radio_WriteMode+0x76>
            // Clear mode bits, effectively going to sleep
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
            currentMode = MODE_SLEEP;
        }
        // Change modulation
        if (MODULATION_FSK == newModulation)
    a1f8:	2e00      	cmp	r6, #0
    a1fa:	d11e      	bne.n	a23a <Radio_WriteMode+0x82>
        {
            // Clear MSB and sleep bits to make it stay in sleep
            opMode = opMode & (~0x87);
    a1fc:	2778      	movs	r7, #120	; 0x78
    a1fe:	402f      	ands	r7, r5
        else
        {
            // LoRa mode. Set MSB and clear sleep bits to make it stay in sleep
            opMode = 0x80 | (opMode & (~0x87));
        }
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    a200:	0039      	movs	r1, r7
    a202:	2001      	movs	r0, #1
    a204:	4b22      	ldr	r3, [pc, #136]	; (a290 <Radio_WriteMode+0xd8>)
    a206:	4798      	blx	r3
    a208:	2300      	movs	r3, #0

    // From here on currentModulation is no longer current, we will use
    // newModulation instead as it reflects the chip configuration.
    // opMode reflects the actual configuration of the chip.

    if (newMode != currentMode)
    a20a:	42a3      	cmp	r3, r4
    a20c:	d00a      	beq.n	a224 <Radio_WriteMode+0x6c>
    {
        // If we need to block until the mode switch is ready, configure the
        // DIO5 pin to relay this information.
        if ((MODE_SLEEP != newMode) && (1 == blocking))
    a20e:	2c00      	cmp	r4, #0
    a210:	d030      	beq.n	a274 <Radio_WriteMode+0xbc>
    a212:	9b01      	ldr	r3, [sp, #4]
    a214:	2b01      	cmp	r3, #1
    a216:	d016      	beq.n	a246 <Radio_WriteMode+0x8e>
            }
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
        }

        // Do the actual mode switch.
        opMode &= ~0x07;                // Clear old mode bits
    a218:	21f8      	movs	r1, #248	; 0xf8
    a21a:	4039      	ands	r1, r7
        opMode |= newMode;              // Set new mode bits
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    a21c:	4321      	orrs	r1, r4
    a21e:	2001      	movs	r0, #1
    a220:	4b1b      	ldr	r3, [pc, #108]	; (a290 <Radio_WriteMode+0xd8>)
    a222:	4798      	blx	r3
                SystemBlockingWaitMs(1);
            }
        }
    }
#endif
}
    a224:	b003      	add	sp, #12
    a226:	bc0c      	pop	{r2, r3}
    a228:	4691      	mov	r9, r2
    a22a:	469a      	mov	sl, r3
    a22c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
    a22e:	21f8      	movs	r1, #248	; 0xf8
    a230:	4001      	ands	r1, r0
    a232:	2001      	movs	r0, #1
    a234:	4b16      	ldr	r3, [pc, #88]	; (a290 <Radio_WriteMode+0xd8>)
    a236:	4798      	blx	r3
    a238:	e7de      	b.n	a1f8 <Radio_WriteMode+0x40>
            opMode = 0x80 | (opMode & (~0x87));
    a23a:	2778      	movs	r7, #120	; 0x78
    a23c:	4653      	mov	r3, sl
    a23e:	401f      	ands	r7, r3
    a240:	2180      	movs	r1, #128	; 0x80
    a242:	430f      	orrs	r7, r1
    a244:	e7dc      	b.n	a200 <Radio_WriteMode+0x48>
            dioMapping = RADIO_RegisterRead(REG_DIOMAPPING2);
    a246:	2041      	movs	r0, #65	; 0x41
    a248:	4b10      	ldr	r3, [pc, #64]	; (a28c <Radio_WriteMode+0xd4>)
    a24a:	4798      	blx	r3
            if (MODULATION_FSK == newModulation)
    a24c:	2e00      	cmp	r6, #0
    a24e:	d10e      	bne.n	a26e <Radio_WriteMode+0xb6>
                dioMapping |= 0x30;     // DIO5 = 11 means ModeReady in FSK mode
    a250:	2130      	movs	r1, #48	; 0x30
    a252:	4301      	orrs	r1, r0
    a254:	b2c9      	uxtb	r1, r1
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
    a256:	2041      	movs	r0, #65	; 0x41
    a258:	4d0d      	ldr	r5, [pc, #52]	; (a290 <Radio_WriteMode+0xd8>)
    a25a:	47a8      	blx	r5
        opMode &= ~0x07;                // Clear old mode bits
    a25c:	21f8      	movs	r1, #248	; 0xf8
    a25e:	4039      	ands	r1, r7
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    a260:	4321      	orrs	r1, r4
    a262:	2001      	movs	r0, #1
    a264:	47a8      	blx	r5
			   delay_ms(1);
    a266:	2001      	movs	r0, #1
    a268:	4b0a      	ldr	r3, [pc, #40]	; (a294 <Radio_WriteMode+0xdc>)
    a26a:	4798      	blx	r3
    a26c:	e7da      	b.n	a224 <Radio_WriteMode+0x6c>
                dioMapping &= ~0x30;    // DIO5 = 00 means ModeReady in LoRa mode
    a26e:	21cf      	movs	r1, #207	; 0xcf
    a270:	4001      	ands	r1, r0
    a272:	e7f0      	b.n	a256 <Radio_WriteMode+0x9e>
        opMode &= ~0x07;                // Clear old mode bits
    a274:	21f8      	movs	r1, #248	; 0xf8
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    a276:	4039      	ands	r1, r7
    a278:	2001      	movs	r0, #1
    a27a:	4b05      	ldr	r3, [pc, #20]	; (a290 <Radio_WriteMode+0xd8>)
    a27c:	4798      	blx	r3
        if (1 == blocking)
    a27e:	9b01      	ldr	r3, [sp, #4]
    a280:	2b01      	cmp	r3, #1
    a282:	d1cf      	bne.n	a224 <Radio_WriteMode+0x6c>
                SystemBlockingWaitMs(1);
    a284:	2001      	movs	r0, #1
    a286:	4b04      	ldr	r3, [pc, #16]	; (a298 <Radio_WriteMode+0xe0>)
    a288:	4798      	blx	r3
    a28a:	e7cb      	b.n	a224 <Radio_WriteMode+0x6c>
    a28c:	00004025 	.word	0x00004025
    a290:	00003ffd 	.word	0x00003ffd
    a294:	00000635 	.word	0x00000635
    a298:	00004259 	.word	0x00004259

0000a29c <RADIO_FHSSChangeChannel>:

\param		- none	
\return		- none.
*************************************************************************/
void RADIO_FHSSChangeChannel(void)
{
    a29c:	b500      	push	{lr}
    a29e:	b083      	sub	sp, #12
    uint32_t freq;
    RADIO_RegisterRead(REG_LORA_IRQFLAGS);
    a2a0:	2012      	movs	r0, #18
    a2a2:	4b0d      	ldr	r3, [pc, #52]	; (a2d8 <RADIO_FHSSChangeChannel+0x3c>)
    a2a4:	4798      	blx	r3

    if (radioConfiguration.frequencyHopPeriod)
    a2a6:	4b0d      	ldr	r3, [pc, #52]	; (a2dc <RADIO_FHSSChangeChannel+0x40>)
    a2a8:	8adb      	ldrh	r3, [r3, #22]
    a2aa:	2b00      	cmp	r3, #0
    a2ac:	d007      	beq.n	a2be <RADIO_FHSSChangeChannel+0x22>
    {
        if ((radioConfiguration.radioCallback) &&
    a2ae:	4b0b      	ldr	r3, [pc, #44]	; (a2dc <RADIO_FHSSChangeChannel+0x40>)
    a2b0:	691b      	ldr	r3, [r3, #16]
    a2b2:	2b00      	cmp	r3, #0
    a2b4:	d003      	beq.n	a2be <RADIO_FHSSChangeChannel+0x22>
            (1 == radioCallbackMask.BitMask.radioFhssfreqCallback))
    a2b6:	4a0a      	ldr	r2, [pc, #40]	; (a2e0 <RADIO_FHSSChangeChannel+0x44>)
    a2b8:	7812      	ldrb	r2, [r2, #0]
        if ((radioConfiguration.radioCallback) &&
    a2ba:	0692      	lsls	r2, r2, #26
    a2bc:	d405      	bmi.n	a2ca <RADIO_FHSSChangeChannel+0x2e>
            Radio_WriteFrequency(freq);
        }
    }

    // Clear FHSSChangeChannel interrupt
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 1 << SHIFT1);
    a2be:	2102      	movs	r1, #2
    a2c0:	2012      	movs	r0, #18
    a2c2:	4b08      	ldr	r3, [pc, #32]	; (a2e4 <RADIO_FHSSChangeChannel+0x48>)
    a2c4:	4798      	blx	r3
}
    a2c6:	b003      	add	sp, #12
    a2c8:	bd00      	pop	{pc}
            radioConfiguration.radioCallback(RADIO_FHSS_NEXT_FREQ_CALLBACK, (void *)&freq);
    a2ca:	a901      	add	r1, sp, #4
    a2cc:	2020      	movs	r0, #32
    a2ce:	4798      	blx	r3
            Radio_WriteFrequency(freq);
    a2d0:	9801      	ldr	r0, [sp, #4]
    a2d2:	4b05      	ldr	r3, [pc, #20]	; (a2e8 <RADIO_FHSSChangeChannel+0x4c>)
    a2d4:	4798      	blx	r3
    a2d6:	e7f2      	b.n	a2be <RADIO_FHSSChangeChannel+0x22>
    a2d8:	00004025 	.word	0x00004025
    a2dc:	200015f8 	.word	0x200015f8
    a2e0:	20001be6 	.word	0x20001be6
    a2e4:	00003ffd 	.word	0x00003ffd
    a2e8:	00010261 	.word	0x00010261

0000a2ec <RADIO_ReadRandom>:

\param		- none	
\return		- returns the random number generated.
*************************************************************************/
uint16_t RADIO_ReadRandom(void)
{
    a2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
    uint16_t retVal;
    retVal = 0;
	
	// Turn on the RF switch.
	Radio_EnableRfControl(RADIO_RFCTRL_RX); 
    a2ee:	2000      	movs	r0, #0
    a2f0:	4b1a      	ldr	r3, [pc, #104]	; (a35c <RADIO_ReadRandom+0x70>)
    a2f2:	4798      	blx	r3
	// Enabling Radio Clock
	Radio_SetClockInput();
    a2f4:	4b1a      	ldr	r3, [pc, #104]	; (a360 <RADIO_ReadRandom+0x74>)
    a2f6:	4798      	blx	r3
	
    // Mask all interrupts, do many measurements of RSSI
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    a2f8:	2201      	movs	r2, #1
    a2fa:	2101      	movs	r1, #1
    a2fc:	2000      	movs	r0, #0
    a2fe:	4c19      	ldr	r4, [pc, #100]	; (a364 <RADIO_ReadRandom+0x78>)
    a300:	47a0      	blx	r4
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0xFF);
    a302:	21ff      	movs	r1, #255	; 0xff
    a304:	2011      	movs	r0, #17
    a306:	4b18      	ldr	r3, [pc, #96]	; (a368 <RADIO_ReadRandom+0x7c>)
    a308:	4798      	blx	r3
    Radio_WriteMode(MODE_RXCONT, MODULATION_LORA, 1);
    a30a:	2201      	movs	r2, #1
    a30c:	2101      	movs	r1, #1
    a30e:	2005      	movs	r0, #5
    a310:	47a0      	blx	r4
    a312:	2410      	movs	r4, #16
    retVal = 0;
    a314:	2500      	movs	r5, #0
    for (i = 0; i < 16; i++)
    {
        SystemBlockingWaitMs(1);
    a316:	4f15      	ldr	r7, [pc, #84]	; (a36c <RADIO_ReadRandom+0x80>)
        retVal <<= SHIFT1;
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    a318:	4e15      	ldr	r6, [pc, #84]	; (a370 <RADIO_ReadRandom+0x84>)
        SystemBlockingWaitMs(1);
    a31a:	2001      	movs	r0, #1
    a31c:	47b8      	blx	r7
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    a31e:	202c      	movs	r0, #44	; 0x2c
    a320:	47b0      	blx	r6
    a322:	2301      	movs	r3, #1
    a324:	4018      	ands	r0, r3
        retVal <<= SHIFT1;
    a326:	006d      	lsls	r5, r5, #1
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    a328:	4305      	orrs	r5, r0
    a32a:	b2ad      	uxth	r5, r5
    a32c:	3c01      	subs	r4, #1
    a32e:	b2e4      	uxtb	r4, r4
    for (i = 0; i < 16; i++)
    a330:	2c00      	cmp	r4, #0
    a332:	d1f2      	bne.n	a31a <RADIO_ReadRandom+0x2e>
    }
	
	// Turning off the RF switch now.
	Radio_DisableRfControl(RADIO_RFCTRL_RX);
    a334:	2000      	movs	r0, #0
    a336:	4b0f      	ldr	r3, [pc, #60]	; (a374 <RADIO_ReadRandom+0x88>)
    a338:	4798      	blx	r3
	
    // Return radio to sleep
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    a33a:	2201      	movs	r2, #1
    a33c:	2101      	movs	r1, #1
    a33e:	2000      	movs	r0, #0
    a340:	4b08      	ldr	r3, [pc, #32]	; (a364 <RADIO_ReadRandom+0x78>)
    a342:	4798      	blx	r3
    // Clear interrupts in case any have been generated
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 0xFF);
    a344:	21ff      	movs	r1, #255	; 0xff
    a346:	2012      	movs	r0, #18
    a348:	4c07      	ldr	r4, [pc, #28]	; (a368 <RADIO_ReadRandom+0x7c>)
    a34a:	47a0      	blx	r4
    // Unmask all interrupts
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0x00);
    a34c:	2100      	movs	r1, #0
    a34e:	2011      	movs	r0, #17
    a350:	47a0      	blx	r4
	// Disabling Radio Clock save power
	Radio_ResetClockInput();
    a352:	4b09      	ldr	r3, [pc, #36]	; (a378 <RADIO_ReadRandom+0x8c>)
    a354:	4798      	blx	r3
	
    return retVal;
}
    a356:	0028      	movs	r0, r5
    a358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a35a:	46c0      	nop			; (mov r8, r8)
    a35c:	00010b1d 	.word	0x00010b1d
    a360:	00010fcd 	.word	0x00010fcd
    a364:	0000a1b9 	.word	0x0000a1b9
    a368:	00003ffd 	.word	0x00003ffd
    a36c:	00004259 	.word	0x00004259
    a370:	00004025 	.word	0x00004025
    a374:	00010c45 	.word	0x00010c45
    a378:	00011001 	.word	0x00011001

0000a37c <Radio_ReadFSKRssi>:

\param rssi	- The RSSI measured in the channel.
\return		- ERR_NONE. Other types are not used now.
*************************************************************************/
RadioError_t Radio_ReadFSKRssi(int16_t *rssi)
{	
    a37c:	b510      	push	{r4, lr}
    a37e:	0004      	movs	r4, r0
#ifdef UT
	*rssi = testRssi;
#else // UT
	*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
    a380:	2011      	movs	r0, #17
    a382:	4b04      	ldr	r3, [pc, #16]	; (a394 <Radio_ReadFSKRssi+0x18>)
    a384:	4798      	blx	r3
    a386:	0840      	lsrs	r0, r0, #1
    a388:	b2c0      	uxtb	r0, r0
    a38a:	4240      	negs	r0, r0
    a38c:	8020      	strh	r0, [r4, #0]
#endif // UT
	
	return ERR_NONE;
}
    a38e:	2000      	movs	r0, #0
    a390:	bd10      	pop	{r4, pc}
    a392:	46c0      	nop			; (mov r8, r8)
    a394:	00004025 	.word	0x00004025

0000a398 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    a398:	b510      	push	{r4, lr}
	tmr_cca_callback();
    a39a:	4b01      	ldr	r3, [pc, #4]	; (a3a0 <tc_cca_callback+0x8>)
    a39c:	4798      	blx	r3
}
    a39e:	bd10      	pop	{r4, pc}
    a3a0:	0000b899 	.word	0x0000b899

0000a3a4 <tc_ovf_callback>:
{
    a3a4:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    a3a6:	4b01      	ldr	r3, [pc, #4]	; (a3ac <tc_ovf_callback+0x8>)
    a3a8:	4798      	blx	r3
}
    a3aa:	bd10      	pop	{r4, pc}
    a3ac:	0000b851 	.word	0x0000b851

0000a3b0 <tmr_read_count>:
{
    a3b0:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    a3b2:	4802      	ldr	r0, [pc, #8]	; (a3bc <tmr_read_count+0xc>)
    a3b4:	4b02      	ldr	r3, [pc, #8]	; (a3c0 <tmr_read_count+0x10>)
    a3b6:	4798      	blx	r3
    a3b8:	b280      	uxth	r0, r0
}
    a3ba:	bd10      	pop	{r4, pc}
    a3bc:	2000168c 	.word	0x2000168c
    a3c0:	00003781 	.word	0x00003781

0000a3c4 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    a3c4:	4b03      	ldr	r3, [pc, #12]	; (a3d4 <tmr_disable_cc_interrupt+0x10>)
    a3c6:	2110      	movs	r1, #16
    a3c8:	681a      	ldr	r2, [r3, #0]
    a3ca:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    a3cc:	7e5a      	ldrb	r2, [r3, #25]
    a3ce:	438a      	bics	r2, r1
    a3d0:	765a      	strb	r2, [r3, #25]
}
    a3d2:	4770      	bx	lr
    a3d4:	2000168c 	.word	0x2000168c

0000a3d8 <tmr_enable_cc_interrupt>:
{
    a3d8:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    a3da:	4c0b      	ldr	r4, [pc, #44]	; (a408 <tmr_enable_cc_interrupt+0x30>)
	if (status_flags & TC_STATUS_COUNT_OVERFLOW) {
		int_flags |= TC_INTFLAG_OVF;
	}

	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = int_flags;
    a3dc:	2510      	movs	r5, #16
    a3de:	6823      	ldr	r3, [r4, #0]
    a3e0:	729d      	strb	r5, [r3, #10]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    a3e2:	0018      	movs	r0, r3
    a3e4:	4b09      	ldr	r3, [pc, #36]	; (a40c <tmr_enable_cc_interrupt+0x34>)
    a3e6:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    a3e8:	4b09      	ldr	r3, [pc, #36]	; (a410 <tmr_enable_cc_interrupt+0x38>)
    a3ea:	5c1b      	ldrb	r3, [r3, r0]
    a3ec:	221f      	movs	r2, #31
    a3ee:	401a      	ands	r2, r3
    a3f0:	2301      	movs	r3, #1
    a3f2:	4093      	lsls	r3, r2
    a3f4:	4a07      	ldr	r2, [pc, #28]	; (a414 <tmr_enable_cc_interrupt+0x3c>)
    a3f6:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    a3f8:	7e63      	ldrb	r3, [r4, #25]
    a3fa:	2210      	movs	r2, #16
    a3fc:	4313      	orrs	r3, r2
    a3fe:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    a400:	6823      	ldr	r3, [r4, #0]
    a402:	725d      	strb	r5, [r3, #9]
}
    a404:	bd70      	pop	{r4, r5, r6, pc}
    a406:	46c0      	nop			; (mov r8, r8)
    a408:	2000168c 	.word	0x2000168c
    a40c:	00003455 	.word	0x00003455
    a410:	0001a1e4 	.word	0x0001a1e4
    a414:	e000e100 	.word	0xe000e100

0000a418 <tmr_disable_ovf_interrupt>:
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(2);
		module->enable_callback_mask &= ~TC_INTFLAG_MC(2);
	}
	else {
		module->hw->COUNT8.INTENCLR.reg = (1 << callback_type);
    a418:	4b03      	ldr	r3, [pc, #12]	; (a428 <tmr_disable_ovf_interrupt+0x10>)
    a41a:	2101      	movs	r1, #1
    a41c:	681a      	ldr	r2, [r3, #0]
    a41e:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~(1 << callback_type);
    a420:	7e5a      	ldrb	r2, [r3, #25]
    a422:	438a      	bics	r2, r1
    a424:	765a      	strb	r2, [r3, #25]
}
    a426:	4770      	bx	lr
    a428:	2000168c 	.word	0x2000168c

0000a42c <tmr_stop>:
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    a42c:	4b06      	ldr	r3, [pc, #24]	; (a448 <tmr_stop+0x1c>)
    a42e:	681a      	ldr	r2, [r3, #0]
	return (tc_module->SYNCBUSY.reg);
    a430:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    a432:	2b00      	cmp	r3, #0
    a434:	d1fc      	bne.n	a430 <tmr_stop+0x4>
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    a436:	3333      	adds	r3, #51	; 0x33
    a438:	7213      	strb	r3, [r2, #8]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    a43a:	7293      	strb	r3, [r2, #10]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    a43c:	6813      	ldr	r3, [r2, #0]
    a43e:	2102      	movs	r1, #2
    a440:	438b      	bics	r3, r1
    a442:	6013      	str	r3, [r2, #0]
}
    a444:	4770      	bx	lr
    a446:	46c0      	nop			; (mov r8, r8)
    a448:	2000168c 	.word	0x2000168c

0000a44c <tmr_write_cmpreg>:
{
    a44c:	b510      	push	{r4, lr}
    a44e:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    a450:	2100      	movs	r1, #0
    a452:	4802      	ldr	r0, [pc, #8]	; (a45c <tmr_write_cmpreg+0x10>)
    a454:	4b02      	ldr	r3, [pc, #8]	; (a460 <tmr_write_cmpreg+0x14>)
    a456:	4798      	blx	r3
}
    a458:	bd10      	pop	{r4, pc}
    a45a:	46c0      	nop			; (mov r8, r8)
    a45c:	2000168c 	.word	0x2000168c
    a460:	000037c1 	.word	0x000037c1

0000a464 <save_cpu_interrupt>:
{
    a464:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    a466:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    a46a:	425a      	negs	r2, r3
    a46c:	4153      	adcs	r3, r2
    a46e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    a470:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    a472:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    a476:	2200      	movs	r2, #0
    a478:	4b02      	ldr	r3, [pc, #8]	; (a484 <save_cpu_interrupt+0x20>)
    a47a:	701a      	strb	r2, [r3, #0]
	return flags;
    a47c:	9801      	ldr	r0, [sp, #4]
	return cpu_irq_save();
    a47e:	b2c0      	uxtb	r0, r0
}
    a480:	b002      	add	sp, #8
    a482:	4770      	bx	lr
    a484:	20000008 	.word	0x20000008

0000a488 <restore_cpu_interrupt>:
	if (cpu_irq_is_enabled_flags(flags))
    a488:	2800      	cmp	r0, #0
    a48a:	d005      	beq.n	a498 <restore_cpu_interrupt+0x10>
		cpu_irq_enable();
    a48c:	2201      	movs	r2, #1
    a48e:	4b03      	ldr	r3, [pc, #12]	; (a49c <restore_cpu_interrupt+0x14>)
    a490:	701a      	strb	r2, [r3, #0]
    a492:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    a496:	b662      	cpsie	i
}
    a498:	4770      	bx	lr
    a49a:	46c0      	nop			; (mov r8, r8)
    a49c:	20000008 	.word	0x20000008

0000a4a0 <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    a4a0:	b570      	push	{r4, r5, r6, lr}
	config->clock_source               = GCLK_GENERATOR_0;
    a4a2:	4a33      	ldr	r2, [pc, #204]	; (a570 <tmr_init+0xd0>)
    a4a4:	2100      	movs	r1, #0
    a4a6:	2300      	movs	r3, #0
    a4a8:	7011      	strb	r1, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    a4aa:	70d1      	strb	r1, [r2, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    a4ac:	2000      	movs	r0, #0
    a4ae:	8091      	strh	r1, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    a4b0:	7190      	strb	r0, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    a4b2:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = false;
    a4b4:	7053      	strb	r3, [r2, #1]
	config->on_demand                  = false;
    a4b6:	7093      	strb	r3, [r2, #2]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    a4b8:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    a4ba:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    a4bc:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    a4be:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    a4c0:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    a4c2:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    a4c4:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    a4c6:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    a4c8:	6151      	str	r1, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    a4ca:	6191      	str	r1, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    a4cc:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    a4ce:	6211      	str	r1, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    a4d0:	6251      	str	r1, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    a4d2:	8511      	strh	r1, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    a4d4:	8591      	strh	r1, [r2, #44]	; 0x2c
	config->double_buffering_enabled = false;
    a4d6:	2334      	movs	r3, #52	; 0x34
    a4d8:	54d0      	strb	r0, [r2, r3]
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    a4da:	3b35      	subs	r3, #53	; 0x35
    a4dc:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    a4de:	4c25      	ldr	r4, [pc, #148]	; (a574 <tmr_init+0xd4>)
    a4e0:	4925      	ldr	r1, [pc, #148]	; (a578 <tmr_init+0xd8>)
    a4e2:	0020      	movs	r0, r4
    a4e4:	4b25      	ldr	r3, [pc, #148]	; (a57c <tmr_init+0xdc>)
    a4e6:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    a4e8:	2200      	movs	r2, #0
    a4ea:	4925      	ldr	r1, [pc, #148]	; (a580 <tmr_init+0xe0>)
    a4ec:	0020      	movs	r0, r4
    a4ee:	4d25      	ldr	r5, [pc, #148]	; (a584 <tmr_init+0xe4>)
    a4f0:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    a4f2:	2202      	movs	r2, #2
    a4f4:	4924      	ldr	r1, [pc, #144]	; (a588 <tmr_init+0xe8>)
    a4f6:	0020      	movs	r0, r4
    a4f8:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    a4fa:	6820      	ldr	r0, [r4, #0]
    a4fc:	4b23      	ldr	r3, [pc, #140]	; (a58c <tmr_init+0xec>)
    a4fe:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    a500:	4b23      	ldr	r3, [pc, #140]	; (a590 <tmr_init+0xf0>)
    a502:	5c1a      	ldrb	r2, [r3, r0]
    a504:	231f      	movs	r3, #31
    a506:	4013      	ands	r3, r2
    a508:	2101      	movs	r1, #1
    a50a:	000a      	movs	r2, r1
    a50c:	409a      	lsls	r2, r3
    a50e:	4b21      	ldr	r3, [pc, #132]	; (a594 <tmr_init+0xf4>)
    a510:	601a      	str	r2, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    a512:	7e63      	ldrb	r3, [r4, #25]
    a514:	2201      	movs	r2, #1
    a516:	4313      	orrs	r3, r2
    a518:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    a51a:	6822      	ldr	r2, [r4, #0]
    a51c:	7251      	strb	r1, [r2, #9]
	return (tc_module->SYNCBUSY.reg);
    a51e:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    a520:	2b00      	cmp	r3, #0
    a522:	d1fc      	bne.n	a51e <tmr_init+0x7e>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    a524:	6813      	ldr	r3, [r2, #0]
    a526:	2102      	movs	r1, #2
    a528:	430b      	orrs	r3, r1
    a52a:	6013      	str	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;	
    a52c:	2000      	movs	r0, #0
    a52e:	4b1a      	ldr	r3, [pc, #104]	; (a598 <tmr_init+0xf8>)
    a530:	4798      	blx	r3
    a532:	4d1a      	ldr	r5, [pc, #104]	; (a59c <tmr_init+0xfc>)
    a534:	47a8      	blx	r5
    a536:	491a      	ldr	r1, [pc, #104]	; (a5a0 <tmr_init+0x100>)
    a538:	4b1a      	ldr	r3, [pc, #104]	; (a5a4 <tmr_init+0x104>)
    a53a:	4798      	blx	r3
    a53c:	1c04      	adds	r4, r0, #0
	#endif
	
	if ((timer_multiplier - (uint32_t)timer_multiplier) >= 0.5f)
    a53e:	4b1a      	ldr	r3, [pc, #104]	; (a5a8 <tmr_init+0x108>)
    a540:	4798      	blx	r3
    a542:	47a8      	blx	r5
    a544:	1c01      	adds	r1, r0, #0
    a546:	1c20      	adds	r0, r4, #0
    a548:	4b18      	ldr	r3, [pc, #96]	; (a5ac <tmr_init+0x10c>)
    a54a:	4798      	blx	r3
    a54c:	21fc      	movs	r1, #252	; 0xfc
    a54e:	0589      	lsls	r1, r1, #22
    a550:	4b17      	ldr	r3, [pc, #92]	; (a5b0 <tmr_init+0x110>)
    a552:	4798      	blx	r3
    a554:	2800      	cmp	r0, #0
    a556:	d005      	beq.n	a564 <tmr_init+0xc4>
	{
		timer_multiplier += 1.0f;
    a558:	21fe      	movs	r1, #254	; 0xfe
    a55a:	0589      	lsls	r1, r1, #22
    a55c:	1c20      	adds	r0, r4, #0
    a55e:	4b15      	ldr	r3, [pc, #84]	; (a5b4 <tmr_init+0x114>)
    a560:	4798      	blx	r3
    a562:	1c04      	adds	r4, r0, #0
	}
	
	return (uint8_t) timer_multiplier;
    a564:	1c20      	adds	r0, r4, #0
    a566:	4b10      	ldr	r3, [pc, #64]	; (a5a8 <tmr_init+0x108>)
    a568:	4798      	blx	r3
    a56a:	b2c0      	uxtb	r0, r0
}
    a56c:	bd70      	pop	{r4, r5, r6, pc}
    a56e:	46c0      	nop			; (mov r8, r8)
    a570:	20001654 	.word	0x20001654
    a574:	2000168c 	.word	0x2000168c
    a578:	42002000 	.word	0x42002000
    a57c:	00003491 	.word	0x00003491
    a580:	0000a3a5 	.word	0x0000a3a5
    a584:	0000336d 	.word	0x0000336d
    a588:	0000a399 	.word	0x0000a399
    a58c:	00003455 	.word	0x00003455
    a590:	0001a1e4 	.word	0x0001a1e4
    a594:	e000e100 	.word	0xe000e100
    a598:	00003135 	.word	0x00003135
    a59c:	00012d49 	.word	0x00012d49
    a5a0:	49742400 	.word	0x49742400
    a5a4:	00012311 	.word	0x00012311
    a5a8:	00011dfd 	.word	0x00011dfd
    a5ac:	00012931 	.word	0x00012931
    a5b0:	00011d55 	.word	0x00011d55
    a5b4:	00011fed 	.word	0x00011fed

0000a5b8 <lTimerCb>:
    //appPostTask(DISPLAY_TASK_HANDLER);
	appPostTask(PROCESS_TASK_HANDLER);
}

void lTimerCb(void *data)
{
    a5b8:	b510      	push	{r4, lr}
    a5ba:	b082      	sub	sp, #8
    SwTimerStart(lTimerId,MS_TO_US(100),SW_TIMEOUT_RELATIVE,(void *)lTimerCb,NULL);
    a5bc:	4b07      	ldr	r3, [pc, #28]	; (a5dc <lTimerCb+0x24>)
    a5be:	7818      	ldrb	r0, [r3, #0]
    a5c0:	2300      	movs	r3, #0
    a5c2:	9300      	str	r3, [sp, #0]
    a5c4:	4b06      	ldr	r3, [pc, #24]	; (a5e0 <lTimerCb+0x28>)
    a5c6:	2200      	movs	r2, #0
    a5c8:	4906      	ldr	r1, [pc, #24]	; (a5e4 <lTimerCb+0x2c>)
    a5ca:	4c07      	ldr	r4, [pc, #28]	; (a5e8 <lTimerCb+0x30>)
    a5cc:	47a0      	blx	r4
    set_LED_data(LED_GREEN,&toggle);
    a5ce:	4907      	ldr	r1, [pc, #28]	; (a5ec <lTimerCb+0x34>)
    a5d0:	2003      	movs	r0, #3
    a5d2:	4b07      	ldr	r3, [pc, #28]	; (a5f0 <lTimerCb+0x38>)
    a5d4:	4798      	blx	r3
}
    a5d6:	b002      	add	sp, #8
    a5d8:	bd10      	pop	{r4, pc}
    a5da:	46c0      	nop			; (mov r8, r8)
    a5dc:	20000060 	.word	0x20000060
    a5e0:	0000a5b9 	.word	0x0000a5b9
    a5e4:	000186a0 	.word	0x000186a0
    a5e8:	00009b55 	.word	0x00009b55
    a5ec:	2000005e 	.word	0x2000005e
    a5f0:	0000974d 	.word	0x0000974d

0000a5f4 <appPostTask>:
 \brief      App Post Task
 \param[in]  Id of the application to be posted
 ************************************************************************/

void appPostTask(AppTaskIds_t id)
{
    a5f4:	b510      	push	{r4, lr}
    a5f6:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    a5f8:	4b07      	ldr	r3, [pc, #28]	; (a618 <appPostTask+0x24>)
    a5fa:	4798      	blx	r3
    appTaskFlags |= (1 << id);
    a5fc:	4907      	ldr	r1, [pc, #28]	; (a61c <appPostTask+0x28>)
    a5fe:	780b      	ldrb	r3, [r1, #0]
    a600:	2201      	movs	r2, #1
    a602:	40a2      	lsls	r2, r4
    a604:	4313      	orrs	r3, r2
    a606:	b2db      	uxtb	r3, r3
    a608:	700b      	strb	r3, [r1, #0]
    ATOMIC_SECTION_EXIT
    a60a:	4b05      	ldr	r3, [pc, #20]	; (a620 <appPostTask+0x2c>)
    a60c:	4798      	blx	r3

    /* Also post a APP task to the system */
    SYSTEM_PostTask(APP_TASK_ID);
    a60e:	2010      	movs	r0, #16
    a610:	4b04      	ldr	r3, [pc, #16]	; (a624 <appPostTask+0x30>)
    a612:	4798      	blx	r3
}
    a614:	bd10      	pop	{r4, pc}
    a616:	46c0      	nop			; (mov r8, r8)
    a618:	00004275 	.word	0x00004275
    a61c:	20000e62 	.word	0x20000e62
    a620:	00004281 	.word	0x00004281
    a624:	0000a181 	.word	0x0000a181

0000a628 <mote_demo_init>:
{
    a628:	b530      	push	{r4, r5, lr}
    a62a:	b083      	sub	sp, #12
    resource_init();
    a62c:	4b2a      	ldr	r3, [pc, #168]	; (a6d8 <mote_demo_init+0xb0>)
    a62e:	4798      	blx	r3
	startReceiving = false;
    a630:	2200      	movs	r2, #0
    a632:	4b2a      	ldr	r3, [pc, #168]	; (a6dc <mote_demo_init+0xb4>)
    a634:	701a      	strb	r2, [r3, #0]
    LORAWAN_Init(demo_appdata_callback, demo_joindata_callback);
    a636:	492a      	ldr	r1, [pc, #168]	; (a6e0 <mote_demo_init+0xb8>)
    a638:	482a      	ldr	r0, [pc, #168]	; (a6e4 <mote_demo_init+0xbc>)
    a63a:	4b2b      	ldr	r3, [pc, #172]	; (a6e8 <mote_demo_init+0xc0>)
    a63c:	4798      	blx	r3
    printf("\n\n\r*******************************************************\n\r");
    a63e:	482b      	ldr	r0, [pc, #172]	; (a6ec <mote_demo_init+0xc4>)
    a640:	4c2b      	ldr	r4, [pc, #172]	; (a6f0 <mote_demo_init+0xc8>)
    a642:	47a0      	blx	r4
    printf("\n\rMicrochip LoRaWAN Stack %s\r\n",STACK_VER);
    a644:	492b      	ldr	r1, [pc, #172]	; (a6f4 <mote_demo_init+0xcc>)
    a646:	482c      	ldr	r0, [pc, #176]	; (a6f8 <mote_demo_init+0xd0>)
    a648:	47a0      	blx	r4
    printf("\r\nInit - Successful\r\n");
    a64a:	482c      	ldr	r0, [pc, #176]	; (a6fc <mote_demo_init+0xd4>)
    a64c:	4b2c      	ldr	r3, [pc, #176]	; (a700 <mote_demo_init+0xd8>)
    a64e:	4798      	blx	r3
    status = PDS_IsRestorable();
    a650:	4b2c      	ldr	r3, [pc, #176]	; (a704 <mote_demo_init+0xdc>)
    a652:	4798      	blx	r3
    if(status)
    a654:	2800      	cmp	r0, #0
    a656:	d037      	beq.n	a6c8 <mote_demo_init+0xa0>
        PDS_RestoreAll();
    a658:	4b2b      	ldr	r3, [pc, #172]	; (a708 <mote_demo_init+0xe0>)
    a65a:	4798      	blx	r3
        LORAWAN_GetAttr(ISMBAND,NULL,&prevBand);
    a65c:	4c2b      	ldr	r4, [pc, #172]	; (a70c <mote_demo_init+0xe4>)
    a65e:	0022      	movs	r2, r4
    a660:	2100      	movs	r1, #0
    a662:	2023      	movs	r0, #35	; 0x23
    a664:	4b2a      	ldr	r3, [pc, #168]	; (a710 <mote_demo_init+0xe8>)
    a666:	4798      	blx	r3
            if(bandTable[i] == prevBand)
    a668:	7821      	ldrb	r1, [r4, #0]
    a66a:	4b2a      	ldr	r3, [pc, #168]	; (a714 <mote_demo_init+0xec>)
    a66c:	781b      	ldrb	r3, [r3, #0]
    a66e:	428b      	cmp	r3, r1
    a670:	d027      	beq.n	a6c2 <mote_demo_init+0x9a>
    a672:	2401      	movs	r4, #1
    a674:	4827      	ldr	r0, [pc, #156]	; (a714 <mote_demo_init+0xec>)
    a676:	5c22      	ldrb	r2, [r4, r0]
    a678:	428a      	cmp	r2, r1
    a67a:	d023      	beq.n	a6c4 <mote_demo_init+0x9c>
        for (uint32_t i = 0; i < sizeof(bandTable) -1; i++)
    a67c:	3401      	adds	r4, #1
    a67e:	2c09      	cmp	r4, #9
    a680:	d1f9      	bne.n	a676 <mote_demo_init+0x4e>
        uint8_t prevChoice = 0xFF;
    a682:	34f6      	adds	r4, #246	; 0xf6
        memset(rxchar,0,sizeof(rxchar));
    a684:	4d24      	ldr	r5, [pc, #144]	; (a718 <mote_demo_init+0xf0>)
    a686:	220b      	movs	r2, #11
    a688:	2100      	movs	r1, #0
    a68a:	0028      	movs	r0, r5
    a68c:	4b23      	ldr	r3, [pc, #140]	; (a71c <mote_demo_init+0xf4>)
    a68e:	4798      	blx	r3
        sio2host_rx(rxchar,10);
    a690:	210a      	movs	r1, #10
    a692:	0028      	movs	r0, r5
    a694:	4b22      	ldr	r3, [pc, #136]	; (a720 <mote_demo_init+0xf8>)
    a696:	4798      	blx	r3
        printf ("Last configured Regional band %s\r\n",bandStrings[prevChoice]);
    a698:	00a4      	lsls	r4, r4, #2
    a69a:	4a22      	ldr	r2, [pc, #136]	; (a724 <mote_demo_init+0xfc>)
    a69c:	58a5      	ldr	r5, [r4, r2]
    a69e:	0029      	movs	r1, r5
    a6a0:	4821      	ldr	r0, [pc, #132]	; (a728 <mote_demo_init+0x100>)
    a6a2:	4c13      	ldr	r4, [pc, #76]	; (a6f0 <mote_demo_init+0xc8>)
    a6a4:	47a0      	blx	r4
        printf("Press any key to change band\r\n Continuing in %s in ", bandStrings[prevChoice]);
    a6a6:	0029      	movs	r1, r5
    a6a8:	4820      	ldr	r0, [pc, #128]	; (a72c <mote_demo_init+0x104>)
    a6aa:	47a0      	blx	r4
        SwTimerStart(demoTimerId,MS_TO_US(1000),SW_TIMEOUT_RELATIVE,(void *)demoTimerCb,NULL);
    a6ac:	4b20      	ldr	r3, [pc, #128]	; (a730 <mote_demo_init+0x108>)
    a6ae:	7818      	ldrb	r0, [r3, #0]
    a6b0:	2300      	movs	r3, #0
    a6b2:	9300      	str	r3, [sp, #0]
    a6b4:	4b1f      	ldr	r3, [pc, #124]	; (a734 <mote_demo_init+0x10c>)
    a6b6:	2200      	movs	r2, #0
    a6b8:	491f      	ldr	r1, [pc, #124]	; (a738 <mote_demo_init+0x110>)
    a6ba:	4c20      	ldr	r4, [pc, #128]	; (a73c <mote_demo_init+0x114>)
    a6bc:	47a0      	blx	r4
}
    a6be:	b003      	add	sp, #12
    a6c0:	bd30      	pop	{r4, r5, pc}
        for (uint32_t i = 0; i < sizeof(bandTable) -1; i++)
    a6c2:	2400      	movs	r4, #0
                prevChoice = i;
    a6c4:	b2e4      	uxtb	r4, r4
                break;
    a6c6:	e7dd      	b.n	a684 <mote_demo_init+0x5c>
		appTaskState = DEMO_CERT_APP_STATE;
    a6c8:	2201      	movs	r2, #1
    a6ca:	4b1d      	ldr	r3, [pc, #116]	; (a740 <mote_demo_init+0x118>)
    a6cc:	701a      	strb	r2, [r3, #0]
		appPostTask(PROCESS_TASK_HANDLER);
    a6ce:	2001      	movs	r0, #1
    a6d0:	4b1c      	ldr	r3, [pc, #112]	; (a744 <mote_demo_init+0x11c>)
    a6d2:	4798      	blx	r3
}
    a6d4:	e7f3      	b.n	a6be <mote_demo_init+0x96>
    a6d6:	46c0      	nop			; (mov r8, r8)
    a6d8:	000097bd 	.word	0x000097bd
    a6dc:	20000e7f 	.word	0x20000e7f
    a6e0:	0000af11 	.word	0x0000af11
    a6e4:	0000a835 	.word	0x0000a835
    a6e8:	0000be69 	.word	0x0000be69
    a6ec:	0001a85c 	.word	0x0001a85c
    a6f0:	000152a5 	.word	0x000152a5
    a6f4:	0001a89c 	.word	0x0001a89c
    a6f8:	0001a8ac 	.word	0x0001a8ac
    a6fc:	0001a8cc 	.word	0x0001a8cc
    a700:	00015369 	.word	0x00015369
    a704:	0000972d 	.word	0x0000972d
    a708:	00009731 	.word	0x00009731
    a70c:	2000005d 	.word	0x2000005d
    a710:	0000d2f1 	.word	0x0000d2f1
    a714:	2000000c 	.word	0x2000000c
    a718:	20000e74 	.word	0x20000e74
    a71c:	000151f1 	.word	0x000151f1
    a720:	00003c21 	.word	0x00003c21
    a724:	0001a324 	.word	0x0001a324
    a728:	0001a8e4 	.word	0x0001a8e4
    a72c:	0001a908 	.word	0x0001a908
    a730:	2000005f 	.word	0x2000005f
    a734:	0000a749 	.word	0x0000a749
    a738:	000f4240 	.word	0x000f4240
    a73c:	00009b55 	.word	0x00009b55
    a740:	20000e63 	.word	0x20000e63
    a744:	0000a5f5 	.word	0x0000a5f5

0000a748 <demoTimerCb>:
{
    a748:	b510      	push	{r4, lr}
    a74a:	b082      	sub	sp, #8
    printf("%d..",count);
    a74c:	4c2b      	ldr	r4, [pc, #172]	; (a7fc <demoTimerCb+0xb4>)
    a74e:	7821      	ldrb	r1, [r4, #0]
    a750:	b2c9      	uxtb	r1, r1
    a752:	482b      	ldr	r0, [pc, #172]	; (a800 <demoTimerCb+0xb8>)
    a754:	4b2b      	ldr	r3, [pc, #172]	; (a804 <demoTimerCb+0xbc>)
    a756:	4798      	blx	r3
    count--;
    a758:	7823      	ldrb	r3, [r4, #0]
    a75a:	3b01      	subs	r3, #1
    a75c:	b2db      	uxtb	r3, r3
    a75e:	7023      	strb	r3, [r4, #0]
	startReceiving = false;
    a760:	2200      	movs	r2, #0
    a762:	4b29      	ldr	r3, [pc, #164]	; (a808 <demoTimerCb+0xc0>)
    a764:	701a      	strb	r2, [r3, #0]
    sio2host_rx(rxchar,10);
    a766:	4c29      	ldr	r4, [pc, #164]	; (a80c <demoTimerCb+0xc4>)
    a768:	210a      	movs	r1, #10
    a76a:	0020      	movs	r0, r4
    a76c:	4b28      	ldr	r3, [pc, #160]	; (a810 <demoTimerCb+0xc8>)
    a76e:	4798      	blx	r3
    a770:	0023      	movs	r3, r4
    a772:	0020      	movs	r0, r4
    a774:	300b      	adds	r0, #11
    a776:	e002      	b.n	a77e <demoTimerCb+0x36>
    a778:	3301      	adds	r3, #1
    for(i = 0;i<=10;i++)
    a77a:	4283      	cmp	r3, r0
    a77c:	d006      	beq.n	a78c <demoTimerCb+0x44>
        if(rxchar[i] != 13 && rxchar[i] != 10)
    a77e:	781c      	ldrb	r4, [r3, #0]
    a780:	2c0d      	cmp	r4, #13
    a782:	d0f9      	beq.n	a778 <demoTimerCb+0x30>
    a784:	2c0a      	cmp	r4, #10
    a786:	d0f7      	beq.n	a778 <demoTimerCb+0x30>
            rxdata = rxchar[i];
    a788:	b264      	sxtb	r4, r4
            break;
    a78a:	e000      	b.n	a78e <demoTimerCb+0x46>
    int8_t rxdata = 0;
    a78c:	2400      	movs	r4, #0
    if(!count)
    a78e:	4b1b      	ldr	r3, [pc, #108]	; (a7fc <demoTimerCb+0xb4>)
    a790:	781b      	ldrb	r3, [r3, #0]
    a792:	2b00      	cmp	r3, #0
    a794:	d00d      	beq.n	a7b2 <demoTimerCb+0x6a>
    if(count > 0 && (!rxdata))
    a796:	4b19      	ldr	r3, [pc, #100]	; (a7fc <demoTimerCb+0xb4>)
    a798:	781b      	ldrb	r3, [r3, #0]
    a79a:	2b00      	cmp	r3, #0
    a79c:	d017      	beq.n	a7ce <demoTimerCb+0x86>
    a79e:	2c00      	cmp	r4, #0
    a7a0:	d00b      	beq.n	a7ba <demoTimerCb+0x72>
    else if(count == 0 && (!rxdata))
    a7a2:	4b16      	ldr	r3, [pc, #88]	; (a7fc <demoTimerCb+0xb4>)
    a7a4:	781b      	ldrb	r3, [r3, #0]
    a7a6:	2b00      	cmp	r3, #0
    a7a8:	d017      	beq.n	a7da <demoTimerCb+0x92>
    else if(rxdata)
    a7aa:	2c00      	cmp	r4, #0
    a7ac:	d115      	bne.n	a7da <demoTimerCb+0x92>
}
    a7ae:	b002      	add	sp, #8
    a7b0:	bd10      	pop	{r4, pc}
        printf("\r\n");
    a7b2:	4818      	ldr	r0, [pc, #96]	; (a814 <demoTimerCb+0xcc>)
    a7b4:	4b18      	ldr	r3, [pc, #96]	; (a818 <demoTimerCb+0xd0>)
    a7b6:	4798      	blx	r3
    a7b8:	e7ed      	b.n	a796 <demoTimerCb+0x4e>
        SwTimerStart(demoTimerId,MS_TO_US(1000),SW_TIMEOUT_RELATIVE,(void *)demoTimerCb,NULL);
    a7ba:	4b18      	ldr	r3, [pc, #96]	; (a81c <demoTimerCb+0xd4>)
    a7bc:	7818      	ldrb	r0, [r3, #0]
    a7be:	2300      	movs	r3, #0
    a7c0:	9300      	str	r3, [sp, #0]
    a7c2:	4b17      	ldr	r3, [pc, #92]	; (a820 <demoTimerCb+0xd8>)
    a7c4:	2200      	movs	r2, #0
    a7c6:	4917      	ldr	r1, [pc, #92]	; (a824 <demoTimerCb+0xdc>)
    a7c8:	4c17      	ldr	r4, [pc, #92]	; (a828 <demoTimerCb+0xe0>)
    a7ca:	47a0      	blx	r4
    a7cc:	e7ef      	b.n	a7ae <demoTimerCb+0x66>
    else if(count == 0 && (!rxdata))
    a7ce:	4b0b      	ldr	r3, [pc, #44]	; (a7fc <demoTimerCb+0xb4>)
    a7d0:	781b      	ldrb	r3, [r3, #0]
    a7d2:	2b00      	cmp	r3, #0
    a7d4:	d1e9      	bne.n	a7aa <demoTimerCb+0x62>
    a7d6:	2c00      	cmp	r4, #0
    a7d8:	d009      	beq.n	a7ee <demoTimerCb+0xa6>
        printf("\r\n");
    a7da:	480e      	ldr	r0, [pc, #56]	; (a814 <demoTimerCb+0xcc>)
    a7dc:	4b0e      	ldr	r3, [pc, #56]	; (a818 <demoTimerCb+0xd0>)
    a7de:	4798      	blx	r3
		appTaskState = DEMO_CERT_APP_STATE;
    a7e0:	2201      	movs	r2, #1
    a7e2:	4b12      	ldr	r3, [pc, #72]	; (a82c <demoTimerCb+0xe4>)
    a7e4:	701a      	strb	r2, [r3, #0]
        appPostTask(DISPLAY_TASK_HANDLER);
    a7e6:	2000      	movs	r0, #0
    a7e8:	4b11      	ldr	r3, [pc, #68]	; (a830 <demoTimerCb+0xe8>)
    a7ea:	4798      	blx	r3
}
    a7ec:	e7df      	b.n	a7ae <demoTimerCb+0x66>
		appTaskState = RESTORE_BAND_STATE;
    a7ee:	2200      	movs	r2, #0
    a7f0:	4b0e      	ldr	r3, [pc, #56]	; (a82c <demoTimerCb+0xe4>)
    a7f2:	701a      	strb	r2, [r3, #0]
        appPostTask(DISPLAY_TASK_HANDLER);
    a7f4:	2000      	movs	r0, #0
    a7f6:	4b0e      	ldr	r3, [pc, #56]	; (a830 <demoTimerCb+0xe8>)
    a7f8:	4798      	blx	r3
    a7fa:	e7d8      	b.n	a7ae <demoTimerCb+0x66>
    a7fc:	20000016 	.word	0x20000016
    a800:	0001a36c 	.word	0x0001a36c
    a804:	000152a5 	.word	0x000152a5
    a808:	20000e7f 	.word	0x20000e7f
    a80c:	20000e74 	.word	0x20000e74
    a810:	00003c21 	.word	0x00003c21
    a814:	0001a514 	.word	0x0001a514
    a818:	00015369 	.word	0x00015369
    a81c:	2000005f 	.word	0x2000005f
    a820:	0000a749 	.word	0x0000a749
    a824:	000f4240 	.word	0x000f4240
    a828:	00009b55 	.word	0x00009b55
    a82c:	20000e63 	.word	0x20000e63
    a830:	0000a5f5 	.word	0x0000a5f5

0000a834 <demo_appdata_callback>:
{
    a834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (LORAWAN_EVT_RX_DATA_AVAILABLE == appdata->evt)
    a836:	780b      	ldrb	r3, [r1, #0]
    a838:	2b02      	cmp	r3, #2
    a83a:	d011      	beq.n	a860 <demo_appdata_callback+0x2c>
    else if(LORAWAN_EVT_TRANSACTION_COMPLETE == appdata->evt)
    a83c:	2b04      	cmp	r3, #4
    a83e:	d100      	bne.n	a842 <demo_appdata_callback+0xe>
    a840:	e0ac      	b.n	a99c <demo_appdata_callback+0x168>
    SwTimerStop(lTimerId);
    a842:	4b99      	ldr	r3, [pc, #612]	; (aaa8 <demo_appdata_callback+0x274>)
    a844:	7818      	ldrb	r0, [r3, #0]
    a846:	4b99      	ldr	r3, [pc, #612]	; (aaac <demo_appdata_callback+0x278>)
    a848:	4798      	blx	r3
        set_LED_data(LED_AMBER,&on);
    a84a:	4999      	ldr	r1, [pc, #612]	; (aab0 <demo_appdata_callback+0x27c>)
    a84c:	2002      	movs	r0, #2
    a84e:	4b99      	ldr	r3, [pc, #612]	; (aab4 <demo_appdata_callback+0x280>)
    a850:	4798      	blx	r3
	appTaskState = JOIN_SEND_STATE;
    a852:	2203      	movs	r2, #3
    a854:	4b98      	ldr	r3, [pc, #608]	; (aab8 <demo_appdata_callback+0x284>)
    a856:	701a      	strb	r2, [r3, #0]
    appPostTask(DISPLAY_TASK_HANDLER);
    a858:	2000      	movs	r0, #0
    a85a:	4b98      	ldr	r3, [pc, #608]	; (aabc <demo_appdata_callback+0x288>)
    a85c:	4798      	blx	r3
}
    a85e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        status = appdata->param.rxData.status;
    a860:	7b4c      	ldrb	r4, [r1, #13]
        switch(status)
    a862:	2c1e      	cmp	r4, #30
    a864:	d900      	bls.n	a868 <demo_appdata_callback+0x34>
    a866:	e095      	b.n	a994 <demo_appdata_callback+0x160>
    a868:	00a3      	lsls	r3, r4, #2
    a86a:	4a95      	ldr	r2, [pc, #596]	; (aac0 <demo_appdata_callback+0x28c>)
    a86c:	58d3      	ldr	r3, [r2, r3]
    a86e:	469f      	mov	pc, r3
    uint8_t dataLength = appdata->param.rxData.dataLength;
    a870:	7b0e      	ldrb	r6, [r1, #12]
    if((dataLength > 0U) && (NULL != pData))
    a872:	2e00      	cmp	r6, #0
    a874:	d022      	beq.n	a8bc <demo_appdata_callback+0x88>
    uint8_t *pData = appdata->param.rxData.pData;
    a876:	688f      	ldr	r7, [r1, #8]
    if((dataLength > 0U) && (NULL != pData))
    a878:	2f00      	cmp	r7, #0
    a87a:	d01f      	beq.n	a8bc <demo_appdata_callback+0x88>
    uint32_t devAddress = appdata->param.rxData.devAddr;
    a87c:	684d      	ldr	r5, [r1, #4]
        printf("*** Received DL Data ***\n\r");
    a87e:	4891      	ldr	r0, [pc, #580]	; (aac4 <demo_appdata_callback+0x290>)
    a880:	4c91      	ldr	r4, [pc, #580]	; (aac8 <demo_appdata_callback+0x294>)
    a882:	47a0      	blx	r4
        printf("\nFrame Received at port %d\n\r",pData[0]);
    a884:	7839      	ldrb	r1, [r7, #0]
    a886:	4891      	ldr	r0, [pc, #580]	; (aacc <demo_appdata_callback+0x298>)
    a888:	47a0      	blx	r4
        printf("\nFrame Length - %d\n\r",dataLength);
    a88a:	0031      	movs	r1, r6
    a88c:	4890      	ldr	r0, [pc, #576]	; (aad0 <demo_appdata_callback+0x29c>)
    a88e:	47a0      	blx	r4
        printf("\nAddress - 0x%lx\n\r", devAddress);
    a890:	0029      	movs	r1, r5
    a892:	4890      	ldr	r0, [pc, #576]	; (aad4 <demo_appdata_callback+0x2a0>)
    a894:	47a0      	blx	r4
        printf ("\nPayload: ");
    a896:	4890      	ldr	r0, [pc, #576]	; (aad8 <demo_appdata_callback+0x2a4>)
    a898:	47a0      	blx	r4
        for (uint8_t i =0; i<dataLength - 1; i++)
    a89a:	3e01      	subs	r6, #1
    a89c:	2e00      	cmp	r6, #0
    a89e:	dd09      	ble.n	a8b4 <demo_appdata_callback+0x80>
    a8a0:	2400      	movs	r4, #0
            printf("%x",pData[i+1]);
    a8a2:	4d89      	ldr	r5, [pc, #548]	; (aac8 <demo_appdata_callback+0x294>)
    a8a4:	193b      	adds	r3, r7, r4
    a8a6:	7859      	ldrb	r1, [r3, #1]
    a8a8:	488c      	ldr	r0, [pc, #560]	; (aadc <demo_appdata_callback+0x2a8>)
    a8aa:	47a8      	blx	r5
        for (uint8_t i =0; i<dataLength - 1; i++)
    a8ac:	3401      	adds	r4, #1
    a8ae:	b2e4      	uxtb	r4, r4
    a8b0:	42b4      	cmp	r4, r6
    a8b2:	dbf7      	blt.n	a8a4 <demo_appdata_callback+0x70>
        printf("\r\n*************************\r\n");
    a8b4:	488a      	ldr	r0, [pc, #552]	; (aae0 <demo_appdata_callback+0x2ac>)
    a8b6:	4b8b      	ldr	r3, [pc, #556]	; (aae4 <demo_appdata_callback+0x2b0>)
    a8b8:	4798      	blx	r3
    a8ba:	e002      	b.n	a8c2 <demo_appdata_callback+0x8e>
        printf("Received ACK for Confirmed data\r\n");
    a8bc:	488a      	ldr	r0, [pc, #552]	; (aae8 <demo_appdata_callback+0x2b4>)
    a8be:	4b89      	ldr	r3, [pc, #548]	; (aae4 <demo_appdata_callback+0x2b0>)
    a8c0:	4798      	blx	r3
    SwTimerStop(lTimerId);
    a8c2:	4b79      	ldr	r3, [pc, #484]	; (aaa8 <demo_appdata_callback+0x274>)
    a8c4:	7818      	ldrb	r0, [r3, #0]
    a8c6:	4b79      	ldr	r3, [pc, #484]	; (aaac <demo_appdata_callback+0x278>)
    a8c8:	4798      	blx	r3
    a8ca:	e7c2      	b.n	a852 <demo_appdata_callback+0x1e>
                printf("\n\rRADIO_NO_DATA \n\r");
    a8cc:	4887      	ldr	r0, [pc, #540]	; (aaec <demo_appdata_callback+0x2b8>)
    a8ce:	4b7e      	ldr	r3, [pc, #504]	; (aac8 <demo_appdata_callback+0x294>)
    a8d0:	4798      	blx	r3
            break;
    a8d2:	e7b6      	b.n	a842 <demo_appdata_callback+0xe>
                printf("\n\rRADIO_DATA_SIZE \n\r");
    a8d4:	4886      	ldr	r0, [pc, #536]	; (aaf0 <demo_appdata_callback+0x2bc>)
    a8d6:	4b7c      	ldr	r3, [pc, #496]	; (aac8 <demo_appdata_callback+0x294>)
    a8d8:	4798      	blx	r3
            break;
    a8da:	e7b2      	b.n	a842 <demo_appdata_callback+0xe>
                printf("\n\rRADIO_INVALID_REQ \n\r");
    a8dc:	4885      	ldr	r0, [pc, #532]	; (aaf4 <demo_appdata_callback+0x2c0>)
    a8de:	4b7a      	ldr	r3, [pc, #488]	; (aac8 <demo_appdata_callback+0x294>)
    a8e0:	4798      	blx	r3
            break;
    a8e2:	e7ae      	b.n	a842 <demo_appdata_callback+0xe>
                printf("\n\rRADIO_BUSY \n\r");
    a8e4:	4884      	ldr	r0, [pc, #528]	; (aaf8 <demo_appdata_callback+0x2c4>)
    a8e6:	4b78      	ldr	r3, [pc, #480]	; (aac8 <demo_appdata_callback+0x294>)
    a8e8:	4798      	blx	r3
            break;
    a8ea:	e7aa      	b.n	a842 <demo_appdata_callback+0xe>
                printf("\n\rRADIO_OUT_OF_RANGE \n\r");
    a8ec:	4883      	ldr	r0, [pc, #524]	; (aafc <demo_appdata_callback+0x2c8>)
    a8ee:	4b76      	ldr	r3, [pc, #472]	; (aac8 <demo_appdata_callback+0x294>)
    a8f0:	4798      	blx	r3
            break;
    a8f2:	e7a6      	b.n	a842 <demo_appdata_callback+0xe>
                printf("\n\rRADIO_UNSUPPORTED_ATTR \n\r");
    a8f4:	4882      	ldr	r0, [pc, #520]	; (ab00 <demo_appdata_callback+0x2cc>)
    a8f6:	4b74      	ldr	r3, [pc, #464]	; (aac8 <demo_appdata_callback+0x294>)
    a8f8:	4798      	blx	r3
            break;
    a8fa:	e7a2      	b.n	a842 <demo_appdata_callback+0xe>
                printf("\n\rRADIO_CHANNEL_BUSY \n\r");
    a8fc:	4881      	ldr	r0, [pc, #516]	; (ab04 <demo_appdata_callback+0x2d0>)
    a8fe:	4b72      	ldr	r3, [pc, #456]	; (aac8 <demo_appdata_callback+0x294>)
    a900:	4798      	blx	r3
            break;
    a902:	e79e      	b.n	a842 <demo_appdata_callback+0xe>
                printf("\n\rNWK_NOT_JOINED \n\r");
    a904:	4880      	ldr	r0, [pc, #512]	; (ab08 <demo_appdata_callback+0x2d4>)
    a906:	4b70      	ldr	r3, [pc, #448]	; (aac8 <demo_appdata_callback+0x294>)
    a908:	4798      	blx	r3
            break;
    a90a:	e79a      	b.n	a842 <demo_appdata_callback+0xe>
                printf("\n\rINVALID_PARAMETER \n\r");
    a90c:	487f      	ldr	r0, [pc, #508]	; (ab0c <demo_appdata_callback+0x2d8>)
    a90e:	4b6e      	ldr	r3, [pc, #440]	; (aac8 <demo_appdata_callback+0x294>)
    a910:	4798      	blx	r3
            break;
    a912:	e796      	b.n	a842 <demo_appdata_callback+0xe>
                printf("\n\rKEYS_NOT_INITIALIZED \n\r");
    a914:	487e      	ldr	r0, [pc, #504]	; (ab10 <demo_appdata_callback+0x2dc>)
    a916:	4b6c      	ldr	r3, [pc, #432]	; (aac8 <demo_appdata_callback+0x294>)
    a918:	4798      	blx	r3
            break;
    a91a:	e792      	b.n	a842 <demo_appdata_callback+0xe>
                printf("\n\rSILENT_IMMEDIATELY_ACTIVE\n\r");
    a91c:	487d      	ldr	r0, [pc, #500]	; (ab14 <demo_appdata_callback+0x2e0>)
    a91e:	4b6a      	ldr	r3, [pc, #424]	; (aac8 <demo_appdata_callback+0x294>)
    a920:	4798      	blx	r3
            break;
    a922:	e78e      	b.n	a842 <demo_appdata_callback+0xe>
                printf("\n\rFCNTR_ERROR_REJOIN_NEEDED \n\r");
    a924:	487c      	ldr	r0, [pc, #496]	; (ab18 <demo_appdata_callback+0x2e4>)
    a926:	4b68      	ldr	r3, [pc, #416]	; (aac8 <demo_appdata_callback+0x294>)
    a928:	4798      	blx	r3
            break;
    a92a:	e78a      	b.n	a842 <demo_appdata_callback+0xe>
                printf("\n\rINVALID_BUFFER_LENGTH \n\r");
    a92c:	487b      	ldr	r0, [pc, #492]	; (ab1c <demo_appdata_callback+0x2e8>)
    a92e:	4b66      	ldr	r3, [pc, #408]	; (aac8 <demo_appdata_callback+0x294>)
    a930:	4798      	blx	r3
            break;
    a932:	e786      	b.n	a842 <demo_appdata_callback+0xe>
                printf("\n\rMAC_PAUSED  \n\r");
    a934:	487a      	ldr	r0, [pc, #488]	; (ab20 <demo_appdata_callback+0x2ec>)
    a936:	4b64      	ldr	r3, [pc, #400]	; (aac8 <demo_appdata_callback+0x294>)
    a938:	4798      	blx	r3
            break;
    a93a:	e782      	b.n	a842 <demo_appdata_callback+0xe>
                printf("\n\rNO_CHANNELS_FOUND \n\r");
    a93c:	4879      	ldr	r0, [pc, #484]	; (ab24 <demo_appdata_callback+0x2f0>)
    a93e:	4b62      	ldr	r3, [pc, #392]	; (aac8 <demo_appdata_callback+0x294>)
    a940:	4798      	blx	r3
            break;
    a942:	e77e      	b.n	a842 <demo_appdata_callback+0xe>
                printf("\n\rBUSY\n\r");
    a944:	4878      	ldr	r0, [pc, #480]	; (ab28 <demo_appdata_callback+0x2f4>)
    a946:	4b60      	ldr	r3, [pc, #384]	; (aac8 <demo_appdata_callback+0x294>)
    a948:	4798      	blx	r3
            break;
    a94a:	e77a      	b.n	a842 <demo_appdata_callback+0xe>
                printf("\n\rNO_ACK \n\r");
    a94c:	4877      	ldr	r0, [pc, #476]	; (ab2c <demo_appdata_callback+0x2f8>)
    a94e:	4b5e      	ldr	r3, [pc, #376]	; (aac8 <demo_appdata_callback+0x294>)
    a950:	4798      	blx	r3
            break;
    a952:	e776      	b.n	a842 <demo_appdata_callback+0xe>
                printf("\n\rALREADY JOINING IS IN PROGRESS \n\r");
    a954:	4876      	ldr	r0, [pc, #472]	; (ab30 <demo_appdata_callback+0x2fc>)
    a956:	4b5c      	ldr	r3, [pc, #368]	; (aac8 <demo_appdata_callback+0x294>)
    a958:	4798      	blx	r3
            break;
    a95a:	e772      	b.n	a842 <demo_appdata_callback+0xe>
                printf("\n\rRESOURCE_UNAVAILABLE \n\r");
    a95c:	4875      	ldr	r0, [pc, #468]	; (ab34 <demo_appdata_callback+0x300>)
    a95e:	4b5a      	ldr	r3, [pc, #360]	; (aac8 <demo_appdata_callback+0x294>)
    a960:	4798      	blx	r3
            break;
    a962:	e76e      	b.n	a842 <demo_appdata_callback+0xe>
                printf("\n\rINVALID_REQUEST \n\r");
    a964:	4874      	ldr	r0, [pc, #464]	; (ab38 <demo_appdata_callback+0x304>)
    a966:	4b58      	ldr	r3, [pc, #352]	; (aac8 <demo_appdata_callback+0x294>)
    a968:	4798      	blx	r3
            break;
    a96a:	e76a      	b.n	a842 <demo_appdata_callback+0xe>
                printf("\n\rFCNTR_ERROR \n\r");
    a96c:	4873      	ldr	r0, [pc, #460]	; (ab3c <demo_appdata_callback+0x308>)
    a96e:	4b56      	ldr	r3, [pc, #344]	; (aac8 <demo_appdata_callback+0x294>)
    a970:	4798      	blx	r3
            break;
    a972:	e766      	b.n	a842 <demo_appdata_callback+0xe>
                printf("\n\rMIC_ERROR \n\r");
    a974:	4872      	ldr	r0, [pc, #456]	; (ab40 <demo_appdata_callback+0x30c>)
    a976:	4b54      	ldr	r3, [pc, #336]	; (aac8 <demo_appdata_callback+0x294>)
    a978:	4798      	blx	r3
            break;
    a97a:	e762      	b.n	a842 <demo_appdata_callback+0xe>
                printf("\n\rINVALID_MTYPE \n\r");
    a97c:	4871      	ldr	r0, [pc, #452]	; (ab44 <demo_appdata_callback+0x310>)
    a97e:	4b52      	ldr	r3, [pc, #328]	; (aac8 <demo_appdata_callback+0x294>)
    a980:	4798      	blx	r3
            break;
    a982:	e75e      	b.n	a842 <demo_appdata_callback+0xe>
                printf("\n\rMCAST_HDR_INVALID \n\r");
    a984:	4870      	ldr	r0, [pc, #448]	; (ab48 <demo_appdata_callback+0x314>)
    a986:	4b50      	ldr	r3, [pc, #320]	; (aac8 <demo_appdata_callback+0x294>)
    a988:	4798      	blx	r3
            break;
    a98a:	e75a      	b.n	a842 <demo_appdata_callback+0xe>
				printf("\n\rINVALID_PACKET \n\r");
    a98c:	486f      	ldr	r0, [pc, #444]	; (ab4c <demo_appdata_callback+0x318>)
    a98e:	4b4e      	ldr	r3, [pc, #312]	; (aac8 <demo_appdata_callback+0x294>)
    a990:	4798      	blx	r3
			break;
    a992:	e756      	b.n	a842 <demo_appdata_callback+0xe>
                printf("UNKNOWN ERROR\n\r");
    a994:	486e      	ldr	r0, [pc, #440]	; (ab50 <demo_appdata_callback+0x31c>)
    a996:	4b4c      	ldr	r3, [pc, #304]	; (aac8 <demo_appdata_callback+0x294>)
    a998:	4798      	blx	r3
            break;
    a99a:	e00c      	b.n	a9b6 <demo_appdata_callback+0x182>
        switch(status = appdata->param.transCmpl.status)
    a99c:	790c      	ldrb	r4, [r1, #4]
    a99e:	2c1e      	cmp	r4, #30
    a9a0:	d87d      	bhi.n	aa9e <demo_appdata_callback+0x26a>
    a9a2:	00a3      	lsls	r3, r4, #2
    a9a4:	4a6b      	ldr	r2, [pc, #428]	; (ab54 <demo_appdata_callback+0x320>)
    a9a6:	58d3      	ldr	r3, [r2, r3]
    a9a8:	469f      	mov	pc, r3
                printf("Transmission Success\r\n");
    a9aa:	486b      	ldr	r0, [pc, #428]	; (ab58 <demo_appdata_callback+0x324>)
    a9ac:	4b4d      	ldr	r3, [pc, #308]	; (aae4 <demo_appdata_callback+0x2b0>)
    a9ae:	4798      	blx	r3
        printf("\n\r*************************************************\n\r");
    a9b0:	486a      	ldr	r0, [pc, #424]	; (ab5c <demo_appdata_callback+0x328>)
    a9b2:	4b45      	ldr	r3, [pc, #276]	; (aac8 <demo_appdata_callback+0x294>)
    a9b4:	4798      	blx	r3
    SwTimerStop(lTimerId);
    a9b6:	4b3c      	ldr	r3, [pc, #240]	; (aaa8 <demo_appdata_callback+0x274>)
    a9b8:	7818      	ldrb	r0, [r3, #0]
    a9ba:	4b3c      	ldr	r3, [pc, #240]	; (aaac <demo_appdata_callback+0x278>)
    a9bc:	4798      	blx	r3
    if(status != LORAWAN_SUCCESS)
    a9be:	2c08      	cmp	r4, #8
    a9c0:	d100      	bne.n	a9c4 <demo_appdata_callback+0x190>
    a9c2:	e746      	b.n	a852 <demo_appdata_callback+0x1e>
    a9c4:	e741      	b.n	a84a <demo_appdata_callback+0x16>
                printf("Transmission Success\r\n");
    a9c6:	4864      	ldr	r0, [pc, #400]	; (ab58 <demo_appdata_callback+0x324>)
    a9c8:	4b46      	ldr	r3, [pc, #280]	; (aae4 <demo_appdata_callback+0x2b0>)
    a9ca:	4798      	blx	r3
            break;
    a9cc:	e7f0      	b.n	a9b0 <demo_appdata_callback+0x17c>
                printf("\n\rRADIO_NO_DATA \n\r");
    a9ce:	4847      	ldr	r0, [pc, #284]	; (aaec <demo_appdata_callback+0x2b8>)
    a9d0:	4b3d      	ldr	r3, [pc, #244]	; (aac8 <demo_appdata_callback+0x294>)
    a9d2:	4798      	blx	r3
            break;
    a9d4:	e7ec      	b.n	a9b0 <demo_appdata_callback+0x17c>
                printf("\n\rRADIO_DATA_SIZE \n\r");
    a9d6:	4846      	ldr	r0, [pc, #280]	; (aaf0 <demo_appdata_callback+0x2bc>)
    a9d8:	4b3b      	ldr	r3, [pc, #236]	; (aac8 <demo_appdata_callback+0x294>)
    a9da:	4798      	blx	r3
            break;
    a9dc:	e7e8      	b.n	a9b0 <demo_appdata_callback+0x17c>
                printf("\n\rRADIO_INVALID_REQ \n\r");
    a9de:	4845      	ldr	r0, [pc, #276]	; (aaf4 <demo_appdata_callback+0x2c0>)
    a9e0:	4b39      	ldr	r3, [pc, #228]	; (aac8 <demo_appdata_callback+0x294>)
    a9e2:	4798      	blx	r3
            break;
    a9e4:	e7e4      	b.n	a9b0 <demo_appdata_callback+0x17c>
                printf("\n\rRADIO_BUSY \n\r");
    a9e6:	4844      	ldr	r0, [pc, #272]	; (aaf8 <demo_appdata_callback+0x2c4>)
    a9e8:	4b37      	ldr	r3, [pc, #220]	; (aac8 <demo_appdata_callback+0x294>)
    a9ea:	4798      	blx	r3
            break;
    a9ec:	e7e0      	b.n	a9b0 <demo_appdata_callback+0x17c>
                printf("\nTx Timeout\n\r");
    a9ee:	485c      	ldr	r0, [pc, #368]	; (ab60 <demo_appdata_callback+0x32c>)
    a9f0:	4b35      	ldr	r3, [pc, #212]	; (aac8 <demo_appdata_callback+0x294>)
    a9f2:	4798      	blx	r3
            break;
    a9f4:	e7dc      	b.n	a9b0 <demo_appdata_callback+0x17c>
                printf("\n\rRADIO_OUT_OF_RANGE \n\r");
    a9f6:	4841      	ldr	r0, [pc, #260]	; (aafc <demo_appdata_callback+0x2c8>)
    a9f8:	4b33      	ldr	r3, [pc, #204]	; (aac8 <demo_appdata_callback+0x294>)
    a9fa:	4798      	blx	r3
            break;
    a9fc:	e7d8      	b.n	a9b0 <demo_appdata_callback+0x17c>
                printf("\n\rRADIO_UNSUPPORTED_ATTR \n\r");
    a9fe:	4840      	ldr	r0, [pc, #256]	; (ab00 <demo_appdata_callback+0x2cc>)
    aa00:	4b31      	ldr	r3, [pc, #196]	; (aac8 <demo_appdata_callback+0x294>)
    aa02:	4798      	blx	r3
            break;
    aa04:	e7d4      	b.n	a9b0 <demo_appdata_callback+0x17c>
                printf("\n\rRADIO_CHANNEL_BUSY \n\r");
    aa06:	483f      	ldr	r0, [pc, #252]	; (ab04 <demo_appdata_callback+0x2d0>)
    aa08:	4b2f      	ldr	r3, [pc, #188]	; (aac8 <demo_appdata_callback+0x294>)
    aa0a:	4798      	blx	r3
            break;
    aa0c:	e7d0      	b.n	a9b0 <demo_appdata_callback+0x17c>
                printf("\n\rNWK_NOT_JOINED \n\r");
    aa0e:	483e      	ldr	r0, [pc, #248]	; (ab08 <demo_appdata_callback+0x2d4>)
    aa10:	4b2d      	ldr	r3, [pc, #180]	; (aac8 <demo_appdata_callback+0x294>)
    aa12:	4798      	blx	r3
            break;
    aa14:	e7cc      	b.n	a9b0 <demo_appdata_callback+0x17c>
                printf("\n\rINVALID_PARAMETER \n\r");
    aa16:	483d      	ldr	r0, [pc, #244]	; (ab0c <demo_appdata_callback+0x2d8>)
    aa18:	4b2b      	ldr	r3, [pc, #172]	; (aac8 <demo_appdata_callback+0x294>)
    aa1a:	4798      	blx	r3
            break;
    aa1c:	e7c8      	b.n	a9b0 <demo_appdata_callback+0x17c>
                printf("\n\rKEYS_NOT_INITIALIZED \n\r");
    aa1e:	483c      	ldr	r0, [pc, #240]	; (ab10 <demo_appdata_callback+0x2dc>)
    aa20:	4b29      	ldr	r3, [pc, #164]	; (aac8 <demo_appdata_callback+0x294>)
    aa22:	4798      	blx	r3
            break;
    aa24:	e7c4      	b.n	a9b0 <demo_appdata_callback+0x17c>
                printf("\n\rSILENT_IMMEDIATELY_ACTIVE\n\r");
    aa26:	483b      	ldr	r0, [pc, #236]	; (ab14 <demo_appdata_callback+0x2e0>)
    aa28:	4b27      	ldr	r3, [pc, #156]	; (aac8 <demo_appdata_callback+0x294>)
    aa2a:	4798      	blx	r3
            break;
    aa2c:	e7c0      	b.n	a9b0 <demo_appdata_callback+0x17c>
                printf("\n\rFCNTR_ERROR_REJOIN_NEEDED \n\r");
    aa2e:	483a      	ldr	r0, [pc, #232]	; (ab18 <demo_appdata_callback+0x2e4>)
    aa30:	4b25      	ldr	r3, [pc, #148]	; (aac8 <demo_appdata_callback+0x294>)
    aa32:	4798      	blx	r3
            break;
    aa34:	e7bc      	b.n	a9b0 <demo_appdata_callback+0x17c>
                printf("\n\rINVALID_BUFFER_LENGTH \n\r");
    aa36:	4839      	ldr	r0, [pc, #228]	; (ab1c <demo_appdata_callback+0x2e8>)
    aa38:	4b23      	ldr	r3, [pc, #140]	; (aac8 <demo_appdata_callback+0x294>)
    aa3a:	4798      	blx	r3
            break;
    aa3c:	e7b8      	b.n	a9b0 <demo_appdata_callback+0x17c>
                printf("\n\rMAC_PAUSED  \n\r");
    aa3e:	4838      	ldr	r0, [pc, #224]	; (ab20 <demo_appdata_callback+0x2ec>)
    aa40:	4b21      	ldr	r3, [pc, #132]	; (aac8 <demo_appdata_callback+0x294>)
    aa42:	4798      	blx	r3
            break;
    aa44:	e7b4      	b.n	a9b0 <demo_appdata_callback+0x17c>
                printf("\n\rNO_CHANNELS_FOUND \n\r");
    aa46:	4837      	ldr	r0, [pc, #220]	; (ab24 <demo_appdata_callback+0x2f0>)
    aa48:	4b1f      	ldr	r3, [pc, #124]	; (aac8 <demo_appdata_callback+0x294>)
    aa4a:	4798      	blx	r3
            break;
    aa4c:	e7b0      	b.n	a9b0 <demo_appdata_callback+0x17c>
                printf("\n\rBUSY\n\r");
    aa4e:	4836      	ldr	r0, [pc, #216]	; (ab28 <demo_appdata_callback+0x2f4>)
    aa50:	4b1d      	ldr	r3, [pc, #116]	; (aac8 <demo_appdata_callback+0x294>)
    aa52:	4798      	blx	r3
            break;
    aa54:	e7ac      	b.n	a9b0 <demo_appdata_callback+0x17c>
                printf("\n\rNO_ACK \n\r");
    aa56:	4835      	ldr	r0, [pc, #212]	; (ab2c <demo_appdata_callback+0x2f8>)
    aa58:	4b1b      	ldr	r3, [pc, #108]	; (aac8 <demo_appdata_callback+0x294>)
    aa5a:	4798      	blx	r3
            break;
    aa5c:	e7a8      	b.n	a9b0 <demo_appdata_callback+0x17c>
                printf("\n\rALREADY JOINING IS IN PROGRESS \n\r");
    aa5e:	4834      	ldr	r0, [pc, #208]	; (ab30 <demo_appdata_callback+0x2fc>)
    aa60:	4b19      	ldr	r3, [pc, #100]	; (aac8 <demo_appdata_callback+0x294>)
    aa62:	4798      	blx	r3
            break;
    aa64:	e7a4      	b.n	a9b0 <demo_appdata_callback+0x17c>
                printf("\n\rRESOURCE_UNAVAILABLE \n\r");
    aa66:	4833      	ldr	r0, [pc, #204]	; (ab34 <demo_appdata_callback+0x300>)
    aa68:	4b17      	ldr	r3, [pc, #92]	; (aac8 <demo_appdata_callback+0x294>)
    aa6a:	4798      	blx	r3
            break;
    aa6c:	e7a0      	b.n	a9b0 <demo_appdata_callback+0x17c>
                printf("\n\rINVALID_REQUEST \n\r");
    aa6e:	4832      	ldr	r0, [pc, #200]	; (ab38 <demo_appdata_callback+0x304>)
    aa70:	4b15      	ldr	r3, [pc, #84]	; (aac8 <demo_appdata_callback+0x294>)
    aa72:	4798      	blx	r3
            break;
    aa74:	e79c      	b.n	a9b0 <demo_appdata_callback+0x17c>
                printf("\n\rFCNTR_ERROR \n\r");
    aa76:	4831      	ldr	r0, [pc, #196]	; (ab3c <demo_appdata_callback+0x308>)
    aa78:	4b13      	ldr	r3, [pc, #76]	; (aac8 <demo_appdata_callback+0x294>)
    aa7a:	4798      	blx	r3
            break;
    aa7c:	e798      	b.n	a9b0 <demo_appdata_callback+0x17c>
                printf("\n\rMIC_ERROR \n\r");
    aa7e:	4830      	ldr	r0, [pc, #192]	; (ab40 <demo_appdata_callback+0x30c>)
    aa80:	4b11      	ldr	r3, [pc, #68]	; (aac8 <demo_appdata_callback+0x294>)
    aa82:	4798      	blx	r3
            break;
    aa84:	e794      	b.n	a9b0 <demo_appdata_callback+0x17c>
                printf("\n\rINVALID_MTYPE \n\r");
    aa86:	482f      	ldr	r0, [pc, #188]	; (ab44 <demo_appdata_callback+0x310>)
    aa88:	4b0f      	ldr	r3, [pc, #60]	; (aac8 <demo_appdata_callback+0x294>)
    aa8a:	4798      	blx	r3
            break;
    aa8c:	e790      	b.n	a9b0 <demo_appdata_callback+0x17c>
                printf("\n\rMCAST_HDR_INVALID \n\r");
    aa8e:	482e      	ldr	r0, [pc, #184]	; (ab48 <demo_appdata_callback+0x314>)
    aa90:	4b0d      	ldr	r3, [pc, #52]	; (aac8 <demo_appdata_callback+0x294>)
    aa92:	4798      	blx	r3
            break;
    aa94:	e78c      	b.n	a9b0 <demo_appdata_callback+0x17c>
				printf("\n\rINVALID_PACKET \n\r");
    aa96:	482d      	ldr	r0, [pc, #180]	; (ab4c <demo_appdata_callback+0x318>)
    aa98:	4b0b      	ldr	r3, [pc, #44]	; (aac8 <demo_appdata_callback+0x294>)
    aa9a:	4798      	blx	r3
			break;
    aa9c:	e788      	b.n	a9b0 <demo_appdata_callback+0x17c>
                printf("\n\rUNKNOWN ERROR\n\r");
    aa9e:	4831      	ldr	r0, [pc, #196]	; (ab64 <demo_appdata_callback+0x330>)
    aaa0:	4b09      	ldr	r3, [pc, #36]	; (aac8 <demo_appdata_callback+0x294>)
    aaa2:	4798      	blx	r3
            break;
    aaa4:	e784      	b.n	a9b0 <demo_appdata_callback+0x17c>
    aaa6:	46c0      	nop			; (mov r8, r8)
    aaa8:	20000060 	.word	0x20000060
    aaac:	00009e61 	.word	0x00009e61
    aab0:	2000005c 	.word	0x2000005c
    aab4:	0000974d 	.word	0x0000974d
    aab8:	20000e63 	.word	0x20000e63
    aabc:	0000a5f5 	.word	0x0000a5f5
    aac0:	0001a1ec 	.word	0x0001a1ec
    aac4:	0001a374 	.word	0x0001a374
    aac8:	000152a5 	.word	0x000152a5
    aacc:	0001a390 	.word	0x0001a390
    aad0:	0001a3b0 	.word	0x0001a3b0
    aad4:	0001a3c8 	.word	0x0001a3c8
    aad8:	0001a3dc 	.word	0x0001a3dc
    aadc:	0001a3e8 	.word	0x0001a3e8
    aae0:	0001a3ec 	.word	0x0001a3ec
    aae4:	00015369 	.word	0x00015369
    aae8:	0001a40c 	.word	0x0001a40c
    aaec:	0001a430 	.word	0x0001a430
    aaf0:	0001a444 	.word	0x0001a444
    aaf4:	0001a45c 	.word	0x0001a45c
    aaf8:	0001a474 	.word	0x0001a474
    aafc:	0001a484 	.word	0x0001a484
    ab00:	0001a49c 	.word	0x0001a49c
    ab04:	0001a4b8 	.word	0x0001a4b8
    ab08:	0001a4d0 	.word	0x0001a4d0
    ab0c:	0001a4e4 	.word	0x0001a4e4
    ab10:	0001a4fc 	.word	0x0001a4fc
    ab14:	0001a518 	.word	0x0001a518
    ab18:	0001a538 	.word	0x0001a538
    ab1c:	0001a558 	.word	0x0001a558
    ab20:	0001a574 	.word	0x0001a574
    ab24:	0001a588 	.word	0x0001a588
    ab28:	0001a5a0 	.word	0x0001a5a0
    ab2c:	0001a5ac 	.word	0x0001a5ac
    ab30:	0001a5b8 	.word	0x0001a5b8
    ab34:	0001a5dc 	.word	0x0001a5dc
    ab38:	0001a5f8 	.word	0x0001a5f8
    ab3c:	0001a610 	.word	0x0001a610
    ab40:	0001a624 	.word	0x0001a624
    ab44:	0001a634 	.word	0x0001a634
    ab48:	0001a648 	.word	0x0001a648
    ab4c:	0001a660 	.word	0x0001a660
    ab50:	0001a674 	.word	0x0001a674
    ab54:	0001a268 	.word	0x0001a268
    ab58:	0001a684 	.word	0x0001a684
    ab5c:	0001a6c0 	.word	0x0001a6c0
    ab60:	0001a69c 	.word	0x0001a69c
    ab64:	0001a6ac 	.word	0x0001a6ac

0000ab68 <displayTask>:
{
    ab68:	b510      	push	{r4, lr}
	switch(appTaskState)
    ab6a:	4b13      	ldr	r3, [pc, #76]	; (abb8 <displayTask+0x50>)
    ab6c:	781b      	ldrb	r3, [r3, #0]
    ab6e:	2b01      	cmp	r3, #1
    ab70:	d00e      	beq.n	ab90 <displayTask+0x28>
    ab72:	2b00      	cmp	r3, #0
    ab74:	d007      	beq.n	ab86 <displayTask+0x1e>
    ab76:	2b02      	cmp	r3, #2
    ab78:	d011      	beq.n	ab9e <displayTask+0x36>
    ab7a:	2b03      	cmp	r3, #3
    ab7c:	d017      	beq.n	abae <displayTask+0x46>
			printf("Error STATE Entered\r\n");
    ab7e:	480f      	ldr	r0, [pc, #60]	; (abbc <displayTask+0x54>)
    ab80:	4b0f      	ldr	r3, [pc, #60]	; (abc0 <displayTask+0x58>)
    ab82:	4798      	blx	r3
			break;
    ab84:	e002      	b.n	ab8c <displayTask+0x24>
	appPostTask(PROCESS_TASK_HANDLER);
    ab86:	2001      	movs	r0, #1
    ab88:	4b0e      	ldr	r3, [pc, #56]	; (abc4 <displayTask+0x5c>)
    ab8a:	4798      	blx	r3
}
    ab8c:	2000      	movs	r0, #0
    ab8e:	bd10      	pop	{r4, pc}
	printf("LoRaWAN Weather Station Demo\r\n");
    ab90:	480d      	ldr	r0, [pc, #52]	; (abc8 <displayTask+0x60>)
    ab92:	4b0b      	ldr	r3, [pc, #44]	; (abc0 <displayTask+0x58>)
    ab94:	4798      	blx	r3
	appPostTask(PROCESS_TASK_HANDLER);
    ab96:	2001      	movs	r0, #1
    ab98:	4b0a      	ldr	r3, [pc, #40]	; (abc4 <displayTask+0x5c>)
    ab9a:	4798      	blx	r3
    ab9c:	e7f6      	b.n	ab8c <displayTask+0x24>
    printf("\r\nRegional band selected is %s\r\n", bandStrings[BAND_NUM]);
    ab9e:	490b      	ldr	r1, [pc, #44]	; (abcc <displayTask+0x64>)
    aba0:	480b      	ldr	r0, [pc, #44]	; (abd0 <displayTask+0x68>)
    aba2:	4b0c      	ldr	r3, [pc, #48]	; (abd4 <displayTask+0x6c>)
    aba4:	4798      	blx	r3
	appPostTask(PROCESS_TASK_HANDLER);
    aba6:	2001      	movs	r0, #1
    aba8:	4b06      	ldr	r3, [pc, #24]	; (abc4 <displayTask+0x5c>)
    abaa:	4798      	blx	r3
    abac:	e7ee      	b.n	ab8c <displayTask+0x24>
	appPostTask(PROCESS_TASK_HANDLER);
    abae:	2001      	movs	r0, #1
    abb0:	4b04      	ldr	r3, [pc, #16]	; (abc4 <displayTask+0x5c>)
    abb2:	4798      	blx	r3
    abb4:	e7ea      	b.n	ab8c <displayTask+0x24>
    abb6:	46c0      	nop			; (mov r8, r8)
    abb8:	20000e63 	.word	0x20000e63
    abbc:	0001a844 	.word	0x0001a844
    abc0:	00015369 	.word	0x00015369
    abc4:	0000a5f5 	.word	0x0000a5f5
    abc8:	0001a7f8 	.word	0x0001a7f8
    abcc:	0001a818 	.word	0x0001a818
    abd0:	0001a820 	.word	0x0001a820
    abd4:	000152a5 	.word	0x000152a5

0000abd8 <APP_TaskHandler>:
/*********************************************************************//*
 \brief      Application Task Handler
 ************************************************************************/

SYSTEM_TaskStatus_t APP_TaskHandler(void)
{
    abd8:	b570      	push	{r4, r5, r6, lr}

    if (appTaskFlags)
    abda:	4b12      	ldr	r3, [pc, #72]	; (ac24 <APP_TaskHandler+0x4c>)
    abdc:	781b      	ldrb	r3, [r3, #0]
    abde:	2b00      	cmp	r3, #0
    abe0:	d008      	beq.n	abf4 <APP_TaskHandler+0x1c>
    {
        for (uint16_t taskId = 0; taskId < APP_TASKS_COUNT; taskId++)
        {
            if ((1 << taskId) & (appTaskFlags))
    abe2:	4b10      	ldr	r3, [pc, #64]	; (ac24 <APP_TaskHandler+0x4c>)
    abe4:	781b      	ldrb	r3, [r3, #0]
    abe6:	07db      	lsls	r3, r3, #31
    abe8:	d406      	bmi.n	abf8 <APP_TaskHandler+0x20>
    abea:	4b0e      	ldr	r3, [pc, #56]	; (ac24 <APP_TaskHandler+0x4c>)
    abec:	781c      	ldrb	r4, [r3, #0]
    abee:	07a4      	lsls	r4, r4, #30
    abf0:	0fe4      	lsrs	r4, r4, #31
    abf2:	d102      	bne.n	abfa <APP_TaskHandler+0x22>
            }
        }
    }

    return SYSTEM_TASK_SUCCESS;
}
    abf4:	2000      	movs	r0, #0
    abf6:	bd70      	pop	{r4, r5, r6, pc}
            if ((1 << taskId) & (appTaskFlags))
    abf8:	2400      	movs	r4, #0
                ATOMIC_SECTION_ENTER
    abfa:	4b0b      	ldr	r3, [pc, #44]	; (ac28 <APP_TaskHandler+0x50>)
    abfc:	4798      	blx	r3
                appTaskFlags &= ~(1 << taskId);
    abfe:	4d09      	ldr	r5, [pc, #36]	; (ac24 <APP_TaskHandler+0x4c>)
    ac00:	782b      	ldrb	r3, [r5, #0]
    ac02:	2201      	movs	r2, #1
    ac04:	40a2      	lsls	r2, r4
    ac06:	4393      	bics	r3, r2
    ac08:	702b      	strb	r3, [r5, #0]
                ATOMIC_SECTION_EXIT
    ac0a:	4b08      	ldr	r3, [pc, #32]	; (ac2c <APP_TaskHandler+0x54>)
    ac0c:	4798      	blx	r3
                appTaskHandlers[taskId]();
    ac0e:	00a4      	lsls	r4, r4, #2
    ac10:	4b07      	ldr	r3, [pc, #28]	; (ac30 <APP_TaskHandler+0x58>)
    ac12:	58e3      	ldr	r3, [r4, r3]
    ac14:	4798      	blx	r3
                if (appTaskFlags)
    ac16:	782b      	ldrb	r3, [r5, #0]
    ac18:	2b00      	cmp	r3, #0
    ac1a:	d0eb      	beq.n	abf4 <APP_TaskHandler+0x1c>
                    SYSTEM_PostTask(APP_TASK_ID);
    ac1c:	2010      	movs	r0, #16
    ac1e:	4b05      	ldr	r3, [pc, #20]	; (ac34 <APP_TaskHandler+0x5c>)
    ac20:	4798      	blx	r3
    ac22:	e7e7      	b.n	abf4 <APP_TaskHandler+0x1c>
    ac24:	20000e62 	.word	0x20000e62
    ac28:	00004275 	.word	0x00004275
    ac2c:	00004281 	.word	0x00004281
    ac30:	0001a31c 	.word	0x0001a31c
    ac34:	0000a181 	.word	0x0000a181

0000ac38 <print_array>:
 \brief      Function to Print array of characters
 \param[in]  *array  - Pointer of the array to be printed
 \param[in]   length - Length of the array
 ************************************************************************/
void print_array (uint8_t *array, uint8_t length)
{
    ac38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ac3a:	0004      	movs	r4, r0
    ac3c:	000d      	movs	r5, r1
    printf("0x");
    ac3e:	480a      	ldr	r0, [pc, #40]	; (ac68 <print_array+0x30>)
    ac40:	4b0a      	ldr	r3, [pc, #40]	; (ac6c <print_array+0x34>)
    ac42:	4798      	blx	r3
    for (uint8_t i =0; i < length; i++)
    ac44:	2d00      	cmp	r5, #0
    ac46:	d00b      	beq.n	ac60 <print_array+0x28>
    ac48:	3d01      	subs	r5, #1
    ac4a:	b2ed      	uxtb	r5, r5
    ac4c:	3501      	adds	r5, #1
    ac4e:	1965      	adds	r5, r4, r5
    {
        printf("%02x", *array);
    ac50:	4e07      	ldr	r6, [pc, #28]	; (ac70 <print_array+0x38>)
    ac52:	4f06      	ldr	r7, [pc, #24]	; (ac6c <print_array+0x34>)
    ac54:	7821      	ldrb	r1, [r4, #0]
    ac56:	0030      	movs	r0, r6
    ac58:	47b8      	blx	r7
        array++;
    ac5a:	3401      	adds	r4, #1
    for (uint8_t i =0; i < length; i++)
    ac5c:	42ac      	cmp	r4, r5
    ac5e:	d1f9      	bne.n	ac54 <print_array+0x1c>
    }
    printf("\n\r");
    ac60:	4804      	ldr	r0, [pc, #16]	; (ac74 <print_array+0x3c>)
    ac62:	4b02      	ldr	r3, [pc, #8]	; (ac6c <print_array+0x34>)
    ac64:	4798      	blx	r3
}
    ac66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ac68:	0001aa8c 	.word	0x0001aa8c
    ac6c:	000152a5 	.word	0x000152a5
    ac70:	0001aa90 	.word	0x0001aa90
    ac74:	0001a440 	.word	0x0001a440

0000ac78 <set_join_parameters>:
{
    ac78:	b510      	push	{r4, lr}
    ac7a:	0004      	movs	r4, r0
    printf("\n********************Join Parameters********************\n\r");
    ac7c:	482a      	ldr	r0, [pc, #168]	; (ad28 <set_join_parameters+0xb0>)
    ac7e:	4b2b      	ldr	r3, [pc, #172]	; (ad2c <set_join_parameters+0xb4>)
    ac80:	4798      	blx	r3
    if(ACTIVATION_BY_PERSONALIZATION == activation_type)
    ac82:	2c01      	cmp	r4, #1
    ac84:	d008      	beq.n	ac98 <set_join_parameters+0x20>
        status = LORAWAN_SetAttr (DEV_EUI, demoDevEui);
    ac86:	492a      	ldr	r1, [pc, #168]	; (ad30 <set_join_parameters+0xb8>)
    ac88:	2000      	movs	r0, #0
    ac8a:	4b2a      	ldr	r3, [pc, #168]	; (ad34 <set_join_parameters+0xbc>)
    ac8c:	4798      	blx	r3
    ac8e:	0004      	movs	r4, r0
        if (LORAWAN_SUCCESS == status)
    ac90:	2808      	cmp	r0, #8
    ac92:	d025      	beq.n	ace0 <set_join_parameters+0x68>
}
    ac94:	0020      	movs	r0, r4
    ac96:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr (DEV_ADDR, &demoDevAddr);
    ac98:	4927      	ldr	r1, [pc, #156]	; (ad38 <set_join_parameters+0xc0>)
    ac9a:	2002      	movs	r0, #2
    ac9c:	4b25      	ldr	r3, [pc, #148]	; (ad34 <set_join_parameters+0xbc>)
    ac9e:	4798      	blx	r3
    aca0:	0004      	movs	r4, r0
        if (LORAWAN_SUCCESS == status)
    aca2:	2808      	cmp	r0, #8
    aca4:	d1f6      	bne.n	ac94 <set_join_parameters+0x1c>
            status = LORAWAN_SetAttr (APPS_KEY, demoAppsKey);
    aca6:	4925      	ldr	r1, [pc, #148]	; (ad3c <set_join_parameters+0xc4>)
    aca8:	2005      	movs	r0, #5
    acaa:	4b22      	ldr	r3, [pc, #136]	; (ad34 <set_join_parameters+0xbc>)
    acac:	4798      	blx	r3
    acae:	0004      	movs	r4, r0
        if (LORAWAN_SUCCESS == status)
    acb0:	2808      	cmp	r0, #8
    acb2:	d1ef      	bne.n	ac94 <set_join_parameters+0x1c>
            printf("\nAppSessionKey : ");
    acb4:	4822      	ldr	r0, [pc, #136]	; (ad40 <set_join_parameters+0xc8>)
    acb6:	4b1d      	ldr	r3, [pc, #116]	; (ad2c <set_join_parameters+0xb4>)
    acb8:	4798      	blx	r3
            print_array((uint8_t *)&demoAppsKey, sizeof(demoAppsKey));
    acba:	2110      	movs	r1, #16
    acbc:	481f      	ldr	r0, [pc, #124]	; (ad3c <set_join_parameters+0xc4>)
    acbe:	4b21      	ldr	r3, [pc, #132]	; (ad44 <set_join_parameters+0xcc>)
    acc0:	4798      	blx	r3
            status = LORAWAN_SetAttr (NWKS_KEY, demoNwksKey);
    acc2:	4921      	ldr	r1, [pc, #132]	; (ad48 <set_join_parameters+0xd0>)
    acc4:	2004      	movs	r0, #4
    acc6:	4b1b      	ldr	r3, [pc, #108]	; (ad34 <set_join_parameters+0xbc>)
    acc8:	4798      	blx	r3
    acca:	0004      	movs	r4, r0
        if (LORAWAN_SUCCESS == status)
    accc:	2808      	cmp	r0, #8
    acce:	d1e1      	bne.n	ac94 <set_join_parameters+0x1c>
            printf("\nNwkSessionKey : ");
    acd0:	481e      	ldr	r0, [pc, #120]	; (ad4c <set_join_parameters+0xd4>)
    acd2:	4b16      	ldr	r3, [pc, #88]	; (ad2c <set_join_parameters+0xb4>)
    acd4:	4798      	blx	r3
            print_array((uint8_t *)&demoNwksKey, sizeof(demoNwksKey));
    acd6:	2110      	movs	r1, #16
    acd8:	481b      	ldr	r0, [pc, #108]	; (ad48 <set_join_parameters+0xd0>)
    acda:	4b1a      	ldr	r3, [pc, #104]	; (ad44 <set_join_parameters+0xcc>)
    acdc:	4798      	blx	r3
    acde:	e7d9      	b.n	ac94 <set_join_parameters+0x1c>
            printf("\nDevEUI : ");
    ace0:	481b      	ldr	r0, [pc, #108]	; (ad50 <set_join_parameters+0xd8>)
    ace2:	4b12      	ldr	r3, [pc, #72]	; (ad2c <set_join_parameters+0xb4>)
    ace4:	4798      	blx	r3
            print_array((uint8_t *)&demoDevEui, sizeof(demoDevEui));
    ace6:	2108      	movs	r1, #8
    ace8:	4811      	ldr	r0, [pc, #68]	; (ad30 <set_join_parameters+0xb8>)
    acea:	4b16      	ldr	r3, [pc, #88]	; (ad44 <set_join_parameters+0xcc>)
    acec:	4798      	blx	r3
            status = LORAWAN_SetAttr (APP_EUI, demoAppEui);
    acee:	4919      	ldr	r1, [pc, #100]	; (ad54 <set_join_parameters+0xdc>)
    acf0:	2001      	movs	r0, #1
    acf2:	4b10      	ldr	r3, [pc, #64]	; (ad34 <set_join_parameters+0xbc>)
    acf4:	4798      	blx	r3
    acf6:	0004      	movs	r4, r0
        if (LORAWAN_SUCCESS == status)
    acf8:	2808      	cmp	r0, #8
    acfa:	d1cb      	bne.n	ac94 <set_join_parameters+0x1c>
            printf("\nAppEUI : ");
    acfc:	4816      	ldr	r0, [pc, #88]	; (ad58 <set_join_parameters+0xe0>)
    acfe:	4b0b      	ldr	r3, [pc, #44]	; (ad2c <set_join_parameters+0xb4>)
    ad00:	4798      	blx	r3
            print_array((uint8_t *)&demoAppEui, sizeof(demoAppEui));
    ad02:	2108      	movs	r1, #8
    ad04:	4813      	ldr	r0, [pc, #76]	; (ad54 <set_join_parameters+0xdc>)
    ad06:	4b0f      	ldr	r3, [pc, #60]	; (ad44 <set_join_parameters+0xcc>)
    ad08:	4798      	blx	r3
			status = LORAWAN_SetAttr (APP_KEY, demoAppKey);          
    ad0a:	4914      	ldr	r1, [pc, #80]	; (ad5c <set_join_parameters+0xe4>)
    ad0c:	2003      	movs	r0, #3
    ad0e:	4b09      	ldr	r3, [pc, #36]	; (ad34 <set_join_parameters+0xbc>)
    ad10:	4798      	blx	r3
    ad12:	0004      	movs	r4, r0
        if (LORAWAN_SUCCESS == status)
    ad14:	2808      	cmp	r0, #8
    ad16:	d1bd      	bne.n	ac94 <set_join_parameters+0x1c>
            printf("\nAppKey : ");
    ad18:	4811      	ldr	r0, [pc, #68]	; (ad60 <set_join_parameters+0xe8>)
    ad1a:	4b04      	ldr	r3, [pc, #16]	; (ad2c <set_join_parameters+0xb4>)
    ad1c:	4798      	blx	r3
            print_array((uint8_t *)&demoAppKey, sizeof(demoAppKey));
    ad1e:	2110      	movs	r1, #16
    ad20:	480e      	ldr	r0, [pc, #56]	; (ad5c <set_join_parameters+0xe4>)
    ad22:	4b08      	ldr	r3, [pc, #32]	; (ad44 <set_join_parameters+0xcc>)
    ad24:	4798      	blx	r3
    ad26:	e7b5      	b.n	ac94 <set_join_parameters+0x1c>
    ad28:	0001ac9c 	.word	0x0001ac9c
    ad2c:	000152a5 	.word	0x000152a5
    ad30:	20000044 	.word	0x20000044
    ad34:	0000ef59 	.word	0x0000ef59
    ad38:	20000040 	.word	0x20000040
    ad3c:	20000030 	.word	0x20000030
    ad40:	0001acd8 	.word	0x0001acd8
    ad44:	0000ac39 	.word	0x0000ac39
    ad48:	2000004c 	.word	0x2000004c
    ad4c:	0001acec 	.word	0x0001acec
    ad50:	0001ad00 	.word	0x0001ad00
    ad54:	20000018 	.word	0x20000018
    ad58:	0001ad0c 	.word	0x0001ad0c
    ad5c:	20000020 	.word	0x20000020
    ad60:	0001ad18 	.word	0x0001ad18

0000ad64 <set_multicast_params>:
{
    ad64:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad66:	b08f      	sub	sp, #60	; 0x3c
    printf("\n***************Multicast Parameters********************\n\r");
    ad68:	482a      	ldr	r0, [pc, #168]	; (ae14 <set_multicast_params+0xb0>)
    ad6a:	4b2b      	ldr	r3, [pc, #172]	; (ae18 <set_multicast_params+0xb4>)
    ad6c:	4798      	blx	r3
    dMcastDevAddr.groupId = demoMcastGroupId;
    ad6e:	af0c      	add	r7, sp, #48	; 0x30
    ad70:	2300      	movs	r3, #0
    ad72:	703b      	strb	r3, [r7, #0]
    mcastAppSKey.groupId  = demoMcastGroupId;
    ad74:	ac07      	add	r4, sp, #28
    ad76:	7023      	strb	r3, [r4, #0]
    mcastNwkSKey.groupId  = demoMcastGroupId;
    ad78:	aa02      	add	r2, sp, #8
    ad7a:	7013      	strb	r3, [r2, #0]
    mcastStatus.groupId   = demoMcastGroupId;
    ad7c:	ad01      	add	r5, sp, #4
    ad7e:	702b      	strb	r3, [r5, #0]
    memcpy(&(mcastAppSKey.mcastAppSKey), &demoMcastAppsKey,LORAWAN_SESSIONKEY_LENGTH);
    ad80:	2210      	movs	r2, #16
    ad82:	4926      	ldr	r1, [pc, #152]	; (ae1c <set_multicast_params+0xb8>)
    ad84:	201d      	movs	r0, #29
    ad86:	4468      	add	r0, sp
    ad88:	4e25      	ldr	r6, [pc, #148]	; (ae20 <set_multicast_params+0xbc>)
    ad8a:	47b0      	blx	r6
    dMcastDevAddr.mcast_dev_addr = demoMcastDevAddr;
    ad8c:	4b25      	ldr	r3, [pc, #148]	; (ae24 <set_multicast_params+0xc0>)
    ad8e:	607b      	str	r3, [r7, #4]
    memcpy(&(mcastNwkSKey.mcastNwkSKey), &demoMcastNwksKey,LORAWAN_SESSIONKEY_LENGTH);
    ad90:	2210      	movs	r2, #16
    ad92:	4925      	ldr	r1, [pc, #148]	; (ae28 <set_multicast_params+0xc4>)
    ad94:	2009      	movs	r0, #9
    ad96:	4468      	add	r0, sp
    ad98:	47b0      	blx	r6
    memcpy(&(mcastStatus.status),&demoMcastEnable,sizeof(demoMcastEnable));
    ad9a:	2301      	movs	r3, #1
    ad9c:	706b      	strb	r3, [r5, #1]
    status = LORAWAN_SetAttr(MCAST_APPS_KEY, &mcastAppSKey);
    ad9e:	0021      	movs	r1, r4
    ada0:	202b      	movs	r0, #43	; 0x2b
    ada2:	4b22      	ldr	r3, [pc, #136]	; (ae2c <set_multicast_params+0xc8>)
    ada4:	4798      	blx	r3
    if (status == LORAWAN_SUCCESS)
    ada6:	2808      	cmp	r0, #8
    ada8:	d00a      	beq.n	adc0 <set_multicast_params+0x5c>
	    printf("\nMcastGroupAddrStatus : Failed\n\r");
    adaa:	4821      	ldr	r0, [pc, #132]	; (ae30 <set_multicast_params+0xcc>)
    adac:	4b1a      	ldr	r3, [pc, #104]	; (ae18 <set_multicast_params+0xb4>)
    adae:	4798      	blx	r3
	    printf("\nMulticastStatus : Failed\n\r");
    adb0:	4820      	ldr	r0, [pc, #128]	; (ae34 <set_multicast_params+0xd0>)
    adb2:	4b19      	ldr	r3, [pc, #100]	; (ae18 <set_multicast_params+0xb4>)
    adb4:	4798      	blx	r3
	 printf("\n********************************************************\n\r");
    adb6:	4820      	ldr	r0, [pc, #128]	; (ae38 <set_multicast_params+0xd4>)
    adb8:	4b17      	ldr	r3, [pc, #92]	; (ae18 <set_multicast_params+0xb4>)
    adba:	4798      	blx	r3
}
    adbc:	b00f      	add	sp, #60	; 0x3c
    adbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    printf("\nMcastAppSessionKey : ");
    adc0:	481e      	ldr	r0, [pc, #120]	; (ae3c <set_multicast_params+0xd8>)
    adc2:	4b15      	ldr	r3, [pc, #84]	; (ae18 <set_multicast_params+0xb4>)
    adc4:	4798      	blx	r3
	    print_array((uint8_t *)&(mcastAppSKey.mcastAppSKey), LORAWAN_SESSIONKEY_LENGTH);
    adc6:	2110      	movs	r1, #16
    adc8:	201d      	movs	r0, #29
    adca:	4468      	add	r0, sp
    adcc:	4b1c      	ldr	r3, [pc, #112]	; (ae40 <set_multicast_params+0xdc>)
    adce:	4798      	blx	r3
	    status = LORAWAN_SetAttr(MCAST_NWKS_KEY, &mcastNwkSKey);
    add0:	a902      	add	r1, sp, #8
    add2:	202a      	movs	r0, #42	; 0x2a
    add4:	4b15      	ldr	r3, [pc, #84]	; (ae2c <set_multicast_params+0xc8>)
    add6:	4798      	blx	r3
    if(status == LORAWAN_SUCCESS)
    add8:	2808      	cmp	r0, #8
    adda:	d1e6      	bne.n	adaa <set_multicast_params+0x46>
	    printf("\nMcastNwkSessionKey : ");
    addc:	4819      	ldr	r0, [pc, #100]	; (ae44 <set_multicast_params+0xe0>)
    adde:	4b0e      	ldr	r3, [pc, #56]	; (ae18 <set_multicast_params+0xb4>)
    ade0:	4798      	blx	r3
	    print_array((uint8_t *)&(mcastNwkSKey.mcastNwkSKey), LORAWAN_SESSIONKEY_LENGTH);
    ade2:	2110      	movs	r1, #16
    ade4:	2009      	movs	r0, #9
    ade6:	4468      	add	r0, sp
    ade8:	4b15      	ldr	r3, [pc, #84]	; (ae40 <set_multicast_params+0xdc>)
    adea:	4798      	blx	r3
	    status = LORAWAN_SetAttr(MCAST_GROUP_ADDR, &dMcastDevAddr);
    adec:	a90c      	add	r1, sp, #48	; 0x30
    adee:	2029      	movs	r0, #41	; 0x29
    adf0:	4b0e      	ldr	r3, [pc, #56]	; (ae2c <set_multicast_params+0xc8>)
    adf2:	4798      	blx	r3
    if (status == LORAWAN_SUCCESS)
    adf4:	2808      	cmp	r0, #8
    adf6:	d1d8      	bne.n	adaa <set_multicast_params+0x46>
	    printf("\nMcastGroupAddr : 0x%lx\n\r", dMcastDevAddr.mcast_dev_addr);
    adf8:	990d      	ldr	r1, [sp, #52]	; 0x34
    adfa:	4813      	ldr	r0, [pc, #76]	; (ae48 <set_multicast_params+0xe4>)
    adfc:	4b06      	ldr	r3, [pc, #24]	; (ae18 <set_multicast_params+0xb4>)
    adfe:	4798      	blx	r3
	    status = LORAWAN_SetAttr(MCAST_ENABLE, &mcastStatus);
    ae00:	a901      	add	r1, sp, #4
    ae02:	2028      	movs	r0, #40	; 0x28
    ae04:	4b09      	ldr	r3, [pc, #36]	; (ae2c <set_multicast_params+0xc8>)
    ae06:	4798      	blx	r3
    if (status == LORAWAN_SUCCESS)
    ae08:	2808      	cmp	r0, #8
    ae0a:	d1d1      	bne.n	adb0 <set_multicast_params+0x4c>
	    printf("\nMulticastStatus : Enabled\n\r");
    ae0c:	480f      	ldr	r0, [pc, #60]	; (ae4c <set_multicast_params+0xe8>)
    ae0e:	4b02      	ldr	r3, [pc, #8]	; (ae18 <set_multicast_params+0xb4>)
    ae10:	4798      	blx	r3
    ae12:	e7d0      	b.n	adb6 <set_multicast_params+0x52>
    ae14:	0001ad24 	.word	0x0001ad24
    ae18:	000152a5 	.word	0x000152a5
    ae1c:	0001a34c 	.word	0x0001a34c
    ae20:	0001516d 	.word	0x0001516d
    ae24:	0037cc56 	.word	0x0037cc56
    ae28:	0001a35c 	.word	0x0001a35c
    ae2c:	0000ef59 	.word	0x0000ef59
    ae30:	0001adac 	.word	0x0001adac
    ae34:	0001adf0 	.word	0x0001adf0
    ae38:	0001ae0c 	.word	0x0001ae0c
    ae3c:	0001ad60 	.word	0x0001ad60
    ae40:	0000ac39 	.word	0x0000ac39
    ae44:	0001ad78 	.word	0x0001ad78
    ae48:	0001ad90 	.word	0x0001ad90
    ae4c:	0001add0 	.word	0x0001add0

0000ae50 <set_device_type>:
{
    ae50:	b510      	push	{r4, lr}
    ae52:	b082      	sub	sp, #8
    ae54:	466b      	mov	r3, sp
    ae56:	1dd9      	adds	r1, r3, #7
    ae58:	7008      	strb	r0, [r1, #0]
    status = LORAWAN_SetAttr(EDCLASS, &ed_class);
    ae5a:	2019      	movs	r0, #25
    ae5c:	4b08      	ldr	r3, [pc, #32]	; (ae80 <set_device_type+0x30>)
    ae5e:	4798      	blx	r3
    ae60:	0004      	movs	r4, r0
    if((LORAWAN_SUCCESS == status) && ((CLASS_C | CLASS_B) & ed_class) && (true == DEMO_APP_MCAST_ENABLE))
    ae62:	2808      	cmp	r0, #8
    ae64:	d002      	beq.n	ae6c <set_device_type+0x1c>
}
    ae66:	0020      	movs	r0, r4
    ae68:	b002      	add	sp, #8
    ae6a:	bd10      	pop	{r4, pc}
    if((LORAWAN_SUCCESS == status) && ((CLASS_C | CLASS_B) & ed_class) && (true == DEMO_APP_MCAST_ENABLE))
    ae6c:	466b      	mov	r3, sp
    ae6e:	3307      	adds	r3, #7
    ae70:	781b      	ldrb	r3, [r3, #0]
    ae72:	2206      	movs	r2, #6
    ae74:	421a      	tst	r2, r3
    ae76:	d0f6      	beq.n	ae66 <set_device_type+0x16>
        set_multicast_params();
    ae78:	4b02      	ldr	r3, [pc, #8]	; (ae84 <set_device_type+0x34>)
    ae7a:	4798      	blx	r3
    ae7c:	e7f3      	b.n	ae66 <set_device_type+0x16>
    ae7e:	46c0      	nop			; (mov r8, r8)
    ae80:	0000ef59 	.word	0x0000ef59
    ae84:	0000ad65 	.word	0x0000ad65

0000ae88 <print_application_config>:

/*********************************************************************//*
 \brief      Function to Print application configuration
 ************************************************************************/
void  print_application_config (void)
{
    ae88:	b530      	push	{r4, r5, lr}
    ae8a:	b083      	sub	sp, #12
    EdClass_t edClass;
    printf("\n***************Application Configuration***************\n\r");
    ae8c:	4814      	ldr	r0, [pc, #80]	; (aee0 <print_application_config+0x58>)
    ae8e:	4d15      	ldr	r5, [pc, #84]	; (aee4 <print_application_config+0x5c>)
    ae90:	47a8      	blx	r5
    LORAWAN_GetAttr(EDCLASS, NULL, &edClass);
    ae92:	466b      	mov	r3, sp
    ae94:	1ddc      	adds	r4, r3, #7
    ae96:	0022      	movs	r2, r4
    ae98:	2100      	movs	r1, #0
    ae9a:	2019      	movs	r0, #25
    ae9c:	4b12      	ldr	r3, [pc, #72]	; (aee8 <print_application_config+0x60>)
    ae9e:	4798      	blx	r3
    printf("\nDevType : ");
    aea0:	4812      	ldr	r0, [pc, #72]	; (aeec <print_application_config+0x64>)
    aea2:	47a8      	blx	r5

    if(edClass == CLASS_A)
    aea4:	7823      	ldrb	r3, [r4, #0]
    aea6:	2b01      	cmp	r3, #1
    aea8:	d011      	beq.n	aece <print_application_config+0x46>
    {
        printf("CLASS A\n\r");
    }
    else if(edClass == CLASS_C)
    aeaa:	2b04      	cmp	r3, #4
    aeac:	d013      	beq.n	aed6 <print_application_config+0x4e>
    {
        printf("CLASS C\n\r");
    }

    printf("\nActivationType : ");
    aeae:	4810      	ldr	r0, [pc, #64]	; (aef0 <print_application_config+0x68>)
    aeb0:	4c0c      	ldr	r4, [pc, #48]	; (aee4 <print_application_config+0x5c>)
    aeb2:	47a0      	blx	r4

    if(DEMO_APP_ACTIVATION_TYPE == OVER_THE_AIR_ACTIVATION)
    {
        printf("OTAA\n\r");
    aeb4:	480f      	ldr	r0, [pc, #60]	; (aef4 <print_application_config+0x6c>)
    aeb6:	47a0      	blx	r4
    else if(DEMO_APP_ACTIVATION_TYPE == ACTIVATION_BY_PERSONALIZATION)
    {
        printf("ABP\n\r");
    }

    printf("\nTransmission Type - ");
    aeb8:	480f      	ldr	r0, [pc, #60]	; (aef8 <print_application_config+0x70>)
    aeba:	47a0      	blx	r4

    if(DEMO_APP_TRANSMISSION_TYPE == CONFIRMED)
    {
        printf("CONFIRMED\n\r");
    aebc:	480f      	ldr	r0, [pc, #60]	; (aefc <print_application_config+0x74>)
    aebe:	47a0      	blx	r4
    else if(DEMO_APP_TRANSMISSION_TYPE == UNCONFIRMED)
    {
        printf("UNCONFIRMED\n\r");
    }

    printf("\nFPort - %d\n\r", DEMO_APP_FPORT);
    aec0:	2101      	movs	r1, #1
    aec2:	480f      	ldr	r0, [pc, #60]	; (af00 <print_application_config+0x78>)
    aec4:	47a0      	blx	r4

    printf("\n*******************************************************\n\r");
    aec6:	480f      	ldr	r0, [pc, #60]	; (af04 <print_application_config+0x7c>)
    aec8:	47a0      	blx	r4
}
    aeca:	b003      	add	sp, #12
    aecc:	bd30      	pop	{r4, r5, pc}
        printf("CLASS A\n\r");
    aece:	480e      	ldr	r0, [pc, #56]	; (af08 <print_application_config+0x80>)
    aed0:	4b04      	ldr	r3, [pc, #16]	; (aee4 <print_application_config+0x5c>)
    aed2:	4798      	blx	r3
    aed4:	e7eb      	b.n	aeae <print_application_config+0x26>
        printf("CLASS C\n\r");
    aed6:	480d      	ldr	r0, [pc, #52]	; (af0c <print_application_config+0x84>)
    aed8:	4b02      	ldr	r3, [pc, #8]	; (aee4 <print_application_config+0x5c>)
    aeda:	4798      	blx	r3
    aedc:	e7e7      	b.n	aeae <print_application_config+0x26>
    aede:	46c0      	nop			; (mov r8, r8)
    aee0:	0001a9a0 	.word	0x0001a9a0
    aee4:	000152a5 	.word	0x000152a5
    aee8:	0000d2f1 	.word	0x0000d2f1
    aeec:	0001a9dc 	.word	0x0001a9dc
    aef0:	0001aa00 	.word	0x0001aa00
    aef4:	0001aa14 	.word	0x0001aa14
    aef8:	0001aa1c 	.word	0x0001aa1c
    aefc:	0001aa34 	.word	0x0001aa34
    af00:	0001aa40 	.word	0x0001aa40
    af04:	0001aa50 	.word	0x0001aa50
    af08:	0001a9e8 	.word	0x0001a9e8
    af0c:	0001a9f4 	.word	0x0001a9f4

0000af10 <demo_joindata_callback>:
{
    af10:	b510      	push	{r4, lr}
    af12:	b082      	sub	sp, #8
    if(LORAWAN_SUCCESS == status)
    af14:	2808      	cmp	r0, #8
    af16:	d018      	beq.n	af4a <demo_joindata_callback+0x3a>
	else if(LORAWAN_NO_CHANNELS_FOUND == status)
    af18:	2810      	cmp	r0, #16
    af1a:	d039      	beq.n	af90 <demo_joindata_callback+0x80>
	else if (LORAWAN_MIC_ERROR == status)
    af1c:	2818      	cmp	r0, #24
    af1e:	d03e      	beq.n	af9e <demo_joindata_callback+0x8e>
	else if (LORAWAN_TX_TIMEOUT == status)
    af20:	281b      	cmp	r0, #27
    af22:	d043      	beq.n	afac <demo_joindata_callback+0x9c>
        joined = false;
    af24:	2200      	movs	r2, #0
    af26:	4b25      	ldr	r3, [pc, #148]	; (afbc <demo_joindata_callback+0xac>)
    af28:	701a      	strb	r2, [r3, #0]
        printf("\nJoining Denied\n\r");
    af2a:	4825      	ldr	r0, [pc, #148]	; (afc0 <demo_joindata_callback+0xb0>)
    af2c:	4b25      	ldr	r3, [pc, #148]	; (afc4 <demo_joindata_callback+0xb4>)
    af2e:	4798      	blx	r3
    printf("\n\r*******************************************************\n\r");
    af30:	4825      	ldr	r0, [pc, #148]	; (afc8 <demo_joindata_callback+0xb8>)
    af32:	4b24      	ldr	r3, [pc, #144]	; (afc4 <demo_joindata_callback+0xb4>)
    af34:	4798      	blx	r3
    PDS_StoreAll();
    af36:	4b25      	ldr	r3, [pc, #148]	; (afcc <demo_joindata_callback+0xbc>)
    af38:	4798      	blx	r3
	appTaskState = JOIN_SEND_STATE;
    af3a:	2203      	movs	r2, #3
    af3c:	4b24      	ldr	r3, [pc, #144]	; (afd0 <demo_joindata_callback+0xc0>)
    af3e:	701a      	strb	r2, [r3, #0]
	appPostTask(PROCESS_TASK_HANDLER);
    af40:	2001      	movs	r0, #1
    af42:	4b24      	ldr	r3, [pc, #144]	; (afd4 <demo_joindata_callback+0xc4>)
    af44:	4798      	blx	r3
}
    af46:	b002      	add	sp, #8
    af48:	bd10      	pop	{r4, pc}
        joined = true;
    af4a:	2201      	movs	r2, #1
    af4c:	4b1b      	ldr	r3, [pc, #108]	; (afbc <demo_joindata_callback+0xac>)
    af4e:	701a      	strb	r2, [r3, #0]
        printf("\nJoining Successful\n\r");
    af50:	4821      	ldr	r0, [pc, #132]	; (afd8 <demo_joindata_callback+0xc8>)
    af52:	4b1c      	ldr	r3, [pc, #112]	; (afc4 <demo_joindata_callback+0xb4>)
    af54:	4798      	blx	r3
        LORAWAN_GetAttr(DEV_ADDR, NULL, &devAddress);
    af56:	aa01      	add	r2, sp, #4
    af58:	2100      	movs	r1, #0
    af5a:	2002      	movs	r0, #2
    af5c:	4c1f      	ldr	r4, [pc, #124]	; (afdc <demo_joindata_callback+0xcc>)
    af5e:	47a0      	blx	r4
        LORAWAN_GetAttr(MCAST_ENABLE, NULL, &mcastEnabled);
    af60:	466b      	mov	r3, sp
    af62:	1cda      	adds	r2, r3, #3
    af64:	2100      	movs	r1, #0
    af66:	2028      	movs	r0, #40	; 0x28
    af68:	47a0      	blx	r4
        if (devAddress != DEMO_APP_MCAST_GROUP_ADDRESS)
    af6a:	9901      	ldr	r1, [sp, #4]
    af6c:	4b1c      	ldr	r3, [pc, #112]	; (afe0 <demo_joindata_callback+0xd0>)
    af6e:	4299      	cmp	r1, r3
    af70:	d005      	beq.n	af7e <demo_joindata_callback+0x6e>
            printf("\nDevAddr: 0x%lx\n\r", devAddress);
    af72:	481c      	ldr	r0, [pc, #112]	; (afe4 <demo_joindata_callback+0xd4>)
    af74:	4b13      	ldr	r3, [pc, #76]	; (afc4 <demo_joindata_callback+0xb4>)
    af76:	4798      	blx	r3
        print_application_config();
    af78:	4b1b      	ldr	r3, [pc, #108]	; (afe8 <demo_joindata_callback+0xd8>)
    af7a:	4798      	blx	r3
    af7c:	e7d8      	b.n	af30 <demo_joindata_callback+0x20>
        else if ((devAddress == DEMO_APP_MCAST_GROUP_ADDRESS) && (true == mcastEnabled))
    af7e:	466b      	mov	r3, sp
    af80:	3303      	adds	r3, #3
    af82:	781b      	ldrb	r3, [r3, #0]
    af84:	2b00      	cmp	r3, #0
    af86:	d0f7      	beq.n	af78 <demo_joindata_callback+0x68>
            printf("\nAddress conflict between Device Address and Multicast group address\n\r");
    af88:	4818      	ldr	r0, [pc, #96]	; (afec <demo_joindata_callback+0xdc>)
    af8a:	4b0e      	ldr	r3, [pc, #56]	; (afc4 <demo_joindata_callback+0xb4>)
    af8c:	4798      	blx	r3
    af8e:	e7f3      	b.n	af78 <demo_joindata_callback+0x68>
		joined = false;
    af90:	2200      	movs	r2, #0
    af92:	4b0a      	ldr	r3, [pc, #40]	; (afbc <demo_joindata_callback+0xac>)
    af94:	701a      	strb	r2, [r3, #0]
		printf("\n No Free Channel found");
    af96:	4816      	ldr	r0, [pc, #88]	; (aff0 <demo_joindata_callback+0xe0>)
    af98:	4b0a      	ldr	r3, [pc, #40]	; (afc4 <demo_joindata_callback+0xb4>)
    af9a:	4798      	blx	r3
    af9c:	e7c8      	b.n	af30 <demo_joindata_callback+0x20>
		joined = false;
    af9e:	2200      	movs	r2, #0
    afa0:	4b06      	ldr	r3, [pc, #24]	; (afbc <demo_joindata_callback+0xac>)
    afa2:	701a      	strb	r2, [r3, #0]
		printf("\n MIC Error");
    afa4:	4813      	ldr	r0, [pc, #76]	; (aff4 <demo_joindata_callback+0xe4>)
    afa6:	4b07      	ldr	r3, [pc, #28]	; (afc4 <demo_joindata_callback+0xb4>)
    afa8:	4798      	blx	r3
    afaa:	e7c1      	b.n	af30 <demo_joindata_callback+0x20>
		joined = false;
    afac:	2200      	movs	r2, #0
    afae:	4b03      	ldr	r3, [pc, #12]	; (afbc <demo_joindata_callback+0xac>)
    afb0:	701a      	strb	r2, [r3, #0]
		printf("\n Transmission Timeout");
    afb2:	4811      	ldr	r0, [pc, #68]	; (aff8 <demo_joindata_callback+0xe8>)
    afb4:	4b03      	ldr	r3, [pc, #12]	; (afc4 <demo_joindata_callback+0xb4>)
    afb6:	4798      	blx	r3
    afb8:	e7ba      	b.n	af30 <demo_joindata_callback+0x20>
    afba:	46c0      	nop			; (mov r8, r8)
    afbc:	20000e82 	.word	0x20000e82
    afc0:	0001a7a8 	.word	0x0001a7a8
    afc4:	000152a5 	.word	0x000152a5
    afc8:	0001a7bc 	.word	0x0001a7bc
    afcc:	00009735 	.word	0x00009735
    afd0:	20000e63 	.word	0x20000e63
    afd4:	0000a5f5 	.word	0x0000a5f5
    afd8:	0001a6f8 	.word	0x0001a6f8
    afdc:	0000d2f1 	.word	0x0000d2f1
    afe0:	0037cc56 	.word	0x0037cc56
    afe4:	0001a710 	.word	0x0001a710
    afe8:	0000ae89 	.word	0x0000ae89
    afec:	0001a724 	.word	0x0001a724
    aff0:	0001a76c 	.word	0x0001a76c
    aff4:	0001a784 	.word	0x0001a784
    aff8:	0001a790 	.word	0x0001a790

0000affc <print_stack_status>:
/*********************************************************************//*
 \brief      Function to Print stack return status
 \param[in]  status - Status from the stack
 ************************************************************************/
void print_stack_status(StackRetStatus_t status)
{
    affc:	b510      	push	{r4, lr}
    switch(status)
    affe:	0003      	movs	r3, r0
    b000:	3b08      	subs	r3, #8
    b002:	b2da      	uxtb	r2, r3
    b004:	2a0d      	cmp	r2, #13
    b006:	d833      	bhi.n	b070 <print_stack_status+0x74>
    b008:	0093      	lsls	r3, r2, #2
    b00a:	4a1c      	ldr	r2, [pc, #112]	; (b07c <print_stack_status+0x80>)
    b00c:	58d3      	ldr	r3, [r2, r3]
    b00e:	469f      	mov	pc, r3
    {
        case LORAWAN_SUCCESS:
             printf("\nlorawan_success\n\r");
    b010:	481b      	ldr	r0, [pc, #108]	; (b080 <print_stack_status+0x84>)
    b012:	4b1c      	ldr	r3, [pc, #112]	; (b084 <print_stack_status+0x88>)
    b014:	4798      	blx	r3
        break;
        default:
           printf("\nrequest_failed %d\n\r",status);
        break;
    }
}
    b016:	bd10      	pop	{r4, pc}
             printf("\nlorawan_state : stack_Busy\n\r");
    b018:	481b      	ldr	r0, [pc, #108]	; (b088 <print_stack_status+0x8c>)
    b01a:	4b1a      	ldr	r3, [pc, #104]	; (b084 <print_stack_status+0x88>)
    b01c:	4798      	blx	r3
        break;
    b01e:	e7fa      	b.n	b016 <print_stack_status+0x1a>
            printf("\ndevice_not_joined_to_network\n\r");
    b020:	481a      	ldr	r0, [pc, #104]	; (b08c <print_stack_status+0x90>)
    b022:	4b18      	ldr	r3, [pc, #96]	; (b084 <print_stack_status+0x88>)
    b024:	4798      	blx	r3
        break;
    b026:	e7f6      	b.n	b016 <print_stack_status+0x1a>
            printf("\ninvalid_parameter\n\r");
    b028:	4819      	ldr	r0, [pc, #100]	; (b090 <print_stack_status+0x94>)
    b02a:	4b16      	ldr	r3, [pc, #88]	; (b084 <print_stack_status+0x88>)
    b02c:	4798      	blx	r3
        break;
    b02e:	e7f2      	b.n	b016 <print_stack_status+0x1a>
            printf("\nkeys_not_initialized\n\r");
    b030:	4818      	ldr	r0, [pc, #96]	; (b094 <print_stack_status+0x98>)
    b032:	4b14      	ldr	r3, [pc, #80]	; (b084 <print_stack_status+0x88>)
    b034:	4798      	blx	r3
        break;
    b036:	e7ee      	b.n	b016 <print_stack_status+0x1a>
            printf("\nsilent_immediately_active\n\r");
    b038:	4817      	ldr	r0, [pc, #92]	; (b098 <print_stack_status+0x9c>)
    b03a:	4b12      	ldr	r3, [pc, #72]	; (b084 <print_stack_status+0x88>)
    b03c:	4798      	blx	r3
        break;
    b03e:	e7ea      	b.n	b016 <print_stack_status+0x1a>
            printf("\nframecounter_error_rejoin_needed\n\r");
    b040:	4816      	ldr	r0, [pc, #88]	; (b09c <print_stack_status+0xa0>)
    b042:	4b10      	ldr	r3, [pc, #64]	; (b084 <print_stack_status+0x88>)
    b044:	4798      	blx	r3
        break;
    b046:	e7e6      	b.n	b016 <print_stack_status+0x1a>
            printf("\ninvalid_buffer_length\n\r");
    b048:	4815      	ldr	r0, [pc, #84]	; (b0a0 <print_stack_status+0xa4>)
    b04a:	4b0e      	ldr	r3, [pc, #56]	; (b084 <print_stack_status+0x88>)
    b04c:	4798      	blx	r3
        break;
    b04e:	e7e2      	b.n	b016 <print_stack_status+0x1a>
            printf("\nMAC_paused\n\r");
    b050:	4814      	ldr	r0, [pc, #80]	; (b0a4 <print_stack_status+0xa8>)
    b052:	4b0c      	ldr	r3, [pc, #48]	; (b084 <print_stack_status+0x88>)
    b054:	4798      	blx	r3
        break;
    b056:	e7de      	b.n	b016 <print_stack_status+0x1a>
            printf("\nno_free_channels_found\n\r");
    b058:	4813      	ldr	r0, [pc, #76]	; (b0a8 <print_stack_status+0xac>)
    b05a:	4b0a      	ldr	r3, [pc, #40]	; (b084 <print_stack_status+0x88>)
    b05c:	4798      	blx	r3
        break;
    b05e:	e7da      	b.n	b016 <print_stack_status+0x1a>
            printf("\nrequest_invalid\n\r");
    b060:	4812      	ldr	r0, [pc, #72]	; (b0ac <print_stack_status+0xb0>)
    b062:	4b08      	ldr	r3, [pc, #32]	; (b084 <print_stack_status+0x88>)
    b064:	4798      	blx	r3
        break;
    b066:	e7d6      	b.n	b016 <print_stack_status+0x1a>
            printf("\nprev_join_request_in_progress\n\r");
    b068:	4811      	ldr	r0, [pc, #68]	; (b0b0 <print_stack_status+0xb4>)
    b06a:	4b06      	ldr	r3, [pc, #24]	; (b084 <print_stack_status+0x88>)
    b06c:	4798      	blx	r3
        break;
    b06e:	e7d2      	b.n	b016 <print_stack_status+0x1a>
           printf("\nrequest_failed %d\n\r",status);
    b070:	0001      	movs	r1, r0
    b072:	4810      	ldr	r0, [pc, #64]	; (b0b4 <print_stack_status+0xb8>)
    b074:	4b03      	ldr	r3, [pc, #12]	; (b084 <print_stack_status+0x88>)
    b076:	4798      	blx	r3
}
    b078:	e7cd      	b.n	b016 <print_stack_status+0x1a>
    b07a:	46c0      	nop			; (mov r8, r8)
    b07c:	0001a2e4 	.word	0x0001a2e4
    b080:	0001aa98 	.word	0x0001aa98
    b084:	000152a5 	.word	0x000152a5
    b088:	0001aaac 	.word	0x0001aaac
    b08c:	0001aacc 	.word	0x0001aacc
    b090:	0001aaec 	.word	0x0001aaec
    b094:	0001ab04 	.word	0x0001ab04
    b098:	0001ab1c 	.word	0x0001ab1c
    b09c:	0001ab3c 	.word	0x0001ab3c
    b0a0:	0001ab60 	.word	0x0001ab60
    b0a4:	0001ab7c 	.word	0x0001ab7c
    b0a8:	0001ab8c 	.word	0x0001ab8c
    b0ac:	0001aba8 	.word	0x0001aba8
    b0b0:	0001abbc 	.word	0x0001abbc
    b0b4:	0001abe0 	.word	0x0001abe0

0000b0b8 <mote_set_parameters>:
{
    b0b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b0ba:	b085      	sub	sp, #20
    b0bc:	0004      	movs	r4, r0
    b0be:	000d      	movs	r5, r1
    bool joinBackoffEnable = false;
    b0c0:	2200      	movs	r2, #0
    b0c2:	230f      	movs	r3, #15
    b0c4:	446b      	add	r3, sp
    b0c6:	701a      	strb	r2, [r3, #0]
    LORAWAN_Reset(ismBand);
    b0c8:	4b2a      	ldr	r3, [pc, #168]	; (b174 <mote_set_parameters+0xbc>)
    b0ca:	4798      	blx	r3
    if ((ismBand == ISM_NA915) || (ismBand == ISM_AU915))
    b0cc:	3c02      	subs	r4, #2
    b0ce:	2c01      	cmp	r4, #1
    b0d0:	d910      	bls.n	b0f4 <mote_set_parameters+0x3c>
    LORAWAN_SetAttr(JOIN_BACKOFF_ENABLE,&joinBackoffEnable);
    b0d2:	210f      	movs	r1, #15
    b0d4:	4469      	add	r1, sp
    b0d6:	202e      	movs	r0, #46	; 0x2e
    b0d8:	4b27      	ldr	r3, [pc, #156]	; (b178 <mote_set_parameters+0xc0>)
    b0da:	4798      	blx	r3
    status = set_join_parameters(DEMO_APP_ACTIVATION_TYPE);
    b0dc:	2000      	movs	r0, #0
    b0de:	4b27      	ldr	r3, [pc, #156]	; (b17c <mote_set_parameters+0xc4>)
    b0e0:	4798      	blx	r3
    b0e2:	0004      	movs	r4, r0
    if (LORAWAN_SUCCESS != status)
    b0e4:	2808      	cmp	r0, #8
    b0e6:	d023      	beq.n	b130 <mote_set_parameters+0x78>
        printf("\nJoin parameters initialization failed\n\r");
    b0e8:	4825      	ldr	r0, [pc, #148]	; (b180 <mote_set_parameters+0xc8>)
    b0ea:	4b26      	ldr	r3, [pc, #152]	; (b184 <mote_set_parameters+0xcc>)
    b0ec:	4798      	blx	r3
}
    b0ee:	0020      	movs	r0, r4
    b0f0:	b005      	add	sp, #20
    b0f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for (ch_params.channelId = 0; ch_params.channelId < MAX_NA_CHANNELS; ch_params.channelId++)
    b0f4:	2200      	movs	r2, #0
    b0f6:	ab01      	add	r3, sp, #4
    b0f8:	701a      	strb	r2, [r3, #0]
    b0fa:	2300      	movs	r3, #0
                ch_params.channelAttr.status = false;
    b0fc:	ac01      	add	r4, sp, #4
    b0fe:	2700      	movs	r7, #0
            LORAWAN_SetAttr(CH_PARAM_STATUS, &ch_params);
    b100:	4e1d      	ldr	r6, [pc, #116]	; (b178 <mote_set_parameters+0xc0>)
    b102:	e00b      	b.n	b11c <mote_set_parameters+0x64>
            else if(ch_params.channelId == allowed_500khz_channel)
    b104:	2b41      	cmp	r3, #65	; 0x41
    b106:	d010      	beq.n	b12a <mote_set_parameters+0x72>
                ch_params.channelAttr.status = false;
    b108:	7127      	strb	r7, [r4, #4]
            LORAWAN_SetAttr(CH_PARAM_STATUS, &ch_params);
    b10a:	0021      	movs	r1, r4
    b10c:	201c      	movs	r0, #28
    b10e:	47b0      	blx	r6
        for (ch_params.channelId = 0; ch_params.channelId < MAX_NA_CHANNELS; ch_params.channelId++)
    b110:	7823      	ldrb	r3, [r4, #0]
    b112:	3301      	adds	r3, #1
    b114:	b2db      	uxtb	r3, r3
    b116:	7023      	strb	r3, [r4, #0]
    b118:	2b47      	cmp	r3, #71	; 0x47
    b11a:	d8da      	bhi.n	b0d2 <mote_set_parameters+0x1a>
            if((ch_params.channelId >= allowed_min_125khz_ch) && (ch_params.channelId <= allowed_max_125khz_ch))
    b11c:	001a      	movs	r2, r3
    b11e:	3a08      	subs	r2, #8
    b120:	2a07      	cmp	r2, #7
    b122:	d8ef      	bhi.n	b104 <mote_set_parameters+0x4c>
                ch_params.channelAttr.status = true;
    b124:	2301      	movs	r3, #1
    b126:	7123      	strb	r3, [r4, #4]
    b128:	e7ef      	b.n	b10a <mote_set_parameters+0x52>
                ch_params.channelAttr.status = true;
    b12a:	3b40      	subs	r3, #64	; 0x40
    b12c:	7123      	strb	r3, [r4, #4]
    b12e:	e7ec      	b.n	b10a <mote_set_parameters+0x52>
    status = set_device_type(DEMO_APP_ENDDEVICE_CLASS);
    b130:	2001      	movs	r0, #1
    b132:	4b15      	ldr	r3, [pc, #84]	; (b188 <mote_set_parameters+0xd0>)
    b134:	4798      	blx	r3
    b136:	0004      	movs	r4, r0
    if (LORAWAN_SUCCESS != status)
    b138:	2808      	cmp	r0, #8
    b13a:	d003      	beq.n	b144 <mote_set_parameters+0x8c>
        printf("\nUnsupported Device Type\n\r");
    b13c:	4813      	ldr	r0, [pc, #76]	; (b18c <mote_set_parameters+0xd4>)
    b13e:	4b11      	ldr	r3, [pc, #68]	; (b184 <mote_set_parameters+0xcc>)
    b140:	4798      	blx	r3
        return status;
    b142:	e7d4      	b.n	b0ee <mote_set_parameters+0x36>
    status = LORAWAN_Join(DEMO_APP_ACTIVATION_TYPE);
    b144:	2000      	movs	r0, #0
    b146:	4b12      	ldr	r3, [pc, #72]	; (b190 <mote_set_parameters+0xd8>)
    b148:	4798      	blx	r3
    b14a:	0004      	movs	r4, r0
    if (LORAWAN_SUCCESS == status && index < sizeof(bandTable))
    b14c:	2808      	cmp	r0, #8
    b14e:	d008      	beq.n	b162 <mote_set_parameters+0xaa>
        print_stack_status(status);
    b150:	4b10      	ldr	r3, [pc, #64]	; (b194 <mote_set_parameters+0xdc>)
    b152:	4798      	blx	r3
		appTaskState = JOIN_SEND_STATE;
    b154:	2203      	movs	r2, #3
    b156:	4b10      	ldr	r3, [pc, #64]	; (b198 <mote_set_parameters+0xe0>)
    b158:	701a      	strb	r2, [r3, #0]
		appPostTask(PROCESS_TASK_HANDLER);
    b15a:	2001      	movs	r0, #1
    b15c:	4b0f      	ldr	r3, [pc, #60]	; (b19c <mote_set_parameters+0xe4>)
    b15e:	4798      	blx	r3
    b160:	e7c5      	b.n	b0ee <mote_set_parameters+0x36>
    if (LORAWAN_SUCCESS == status && index < sizeof(bandTable))
    b162:	2d09      	cmp	r5, #9
    b164:	d8f4      	bhi.n	b150 <mote_set_parameters+0x98>
        printf("\nJoin Request Sent for %s\n\r",bandStrings[index]);
    b166:	00ad      	lsls	r5, r5, #2
    b168:	4b0d      	ldr	r3, [pc, #52]	; (b1a0 <mote_set_parameters+0xe8>)
    b16a:	58e9      	ldr	r1, [r5, r3]
    b16c:	480d      	ldr	r0, [pc, #52]	; (b1a4 <mote_set_parameters+0xec>)
    b16e:	4b05      	ldr	r3, [pc, #20]	; (b184 <mote_set_parameters+0xcc>)
    b170:	4798      	blx	r3
    b172:	e7bc      	b.n	b0ee <mote_set_parameters+0x36>
    b174:	0000f439 	.word	0x0000f439
    b178:	0000ef59 	.word	0x0000ef59
    b17c:	0000ac79 	.word	0x0000ac79
    b180:	0001a93c 	.word	0x0001a93c
    b184:	000152a5 	.word	0x000152a5
    b188:	0000ae51 	.word	0x0000ae51
    b18c:	0001a968 	.word	0x0001a968
    b190:	0000cc29 	.word	0x0000cc29
    b194:	0000affd 	.word	0x0000affd
    b198:	20000e63 	.word	0x20000e63
    b19c:	0000a5f5 	.word	0x0000a5f5
    b1a0:	0001a324 	.word	0x0001a324
    b1a4:	0001a984 	.word	0x0001a984

0000b1a8 <processTask>:
{
    b1a8:	b530      	push	{r4, r5, lr}
    b1aa:	b085      	sub	sp, #20
	switch(appTaskState)
    b1ac:	4b75      	ldr	r3, [pc, #468]	; (b384 <processTask+0x1dc>)
    b1ae:	781b      	ldrb	r3, [r3, #0]
    b1b0:	2b01      	cmp	r3, #1
    b1b2:	d100      	bne.n	b1b6 <processTask+0xe>
    b1b4:	e080      	b.n	b2b8 <processTask+0x110>
    b1b6:	2b00      	cmp	r3, #0
    b1b8:	d009      	beq.n	b1ce <processTask+0x26>
    b1ba:	2b02      	cmp	r3, #2
    b1bc:	d100      	bne.n	b1c0 <processTask+0x18>
    b1be:	e084      	b.n	b2ca <processTask+0x122>
    b1c0:	2b03      	cmp	r3, #3
    b1c2:	d100      	bne.n	b1c6 <processTask+0x1e>
    b1c4:	e090      	b.n	b2e8 <processTask+0x140>
			printf("Error STATE Entered\r\n");
    b1c6:	4870      	ldr	r0, [pc, #448]	; (b388 <processTask+0x1e0>)
    b1c8:	4b70      	ldr	r3, [pc, #448]	; (b38c <processTask+0x1e4>)
    b1ca:	4798      	blx	r3
	return SYSTEM_TASK_SUCCESS;
    b1cc:	e07a      	b.n	b2c4 <processTask+0x11c>
	uint8_t prevBand = 0xff;
    b1ce:	240a      	movs	r4, #10
    b1d0:	446c      	add	r4, sp
    b1d2:	23ff      	movs	r3, #255	; 0xff
    b1d4:	7023      	strb	r3, [r4, #0]
	bool joinBackoffEnable = false;
    b1d6:	2200      	movs	r2, #0
    b1d8:	3bf4      	subs	r3, #244	; 0xf4
    b1da:	446b      	add	r3, sp
    b1dc:	701a      	strb	r2, [r3, #0]
	PDS_RestoreAll();
    b1de:	4b6c      	ldr	r3, [pc, #432]	; (b390 <processTask+0x1e8>)
    b1e0:	4798      	blx	r3
	LORAWAN_GetAttr(ISMBAND,NULL,&prevBand);
    b1e2:	0022      	movs	r2, r4
    b1e4:	2100      	movs	r1, #0
    b1e6:	2023      	movs	r0, #35	; 0x23
    b1e8:	4b6a      	ldr	r3, [pc, #424]	; (b394 <processTask+0x1ec>)
    b1ea:	4798      	blx	r3
		if(bandTable[i] == prevBand)
    b1ec:	7821      	ldrb	r1, [r4, #0]
    b1ee:	4b6a      	ldr	r3, [pc, #424]	; (b398 <processTask+0x1f0>)
    b1f0:	781b      	ldrb	r3, [r3, #0]
    b1f2:	428b      	cmp	r3, r1
    b1f4:	d100      	bne.n	b1f8 <processTask+0x50>
    b1f6:	e0be      	b.n	b376 <processTask+0x1ce>
    b1f8:	2301      	movs	r3, #1
    b1fa:	4867      	ldr	r0, [pc, #412]	; (b398 <processTask+0x1f0>)
    b1fc:	5c1a      	ldrb	r2, [r3, r0]
    b1fe:	428a      	cmp	r2, r1
    b200:	d014      	beq.n	b22c <processTask+0x84>
	for (uint32_t i = 0; i < sizeof(bandTable)-1; i++)
    b202:	3301      	adds	r3, #1
    b204:	2b09      	cmp	r3, #9
    b206:	d1f9      	bne.n	b1fc <processTask+0x54>
    LORAWAN_SetAttr(JOIN_BACKOFF_ENABLE,&joinBackoffEnable);
    b208:	210b      	movs	r1, #11
    b20a:	4469      	add	r1, sp
    b20c:	202e      	movs	r0, #46	; 0x2e
    b20e:	4b63      	ldr	r3, [pc, #396]	; (b39c <processTask+0x1f4>)
    b210:	4798      	blx	r3
	uint8_t choice = 0xff;
    b212:	24ff      	movs	r4, #255	; 0xff
	if(status == LORAWAN_SUCCESS && choice < sizeof(bandTable)-1)
    b214:	2c08      	cmp	r4, #8
    b216:	d91d      	bls.n	b254 <processTask+0xac>
		printf("Restoration failed\r\n");
    b218:	4861      	ldr	r0, [pc, #388]	; (b3a0 <processTask+0x1f8>)
    b21a:	4b5c      	ldr	r3, [pc, #368]	; (b38c <processTask+0x1e4>)
    b21c:	4798      	blx	r3
		appTaskState = DEMO_APP_STATE;
    b21e:	2202      	movs	r2, #2
    b220:	4b58      	ldr	r3, [pc, #352]	; (b384 <processTask+0x1dc>)
    b222:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
    b224:	2000      	movs	r0, #0
    b226:	4b5f      	ldr	r3, [pc, #380]	; (b3a4 <processTask+0x1fc>)
    b228:	4798      	blx	r3
    b22a:	e04b      	b.n	b2c4 <processTask+0x11c>
			choice = i;
    b22c:	b2dc      	uxtb	r4, r3
	if(choice >0 && choice < sizeof(bandTable)-1)
    b22e:	1e62      	subs	r2, r4, #1
    b230:	2a07      	cmp	r2, #7
    b232:	d900      	bls.n	b236 <processTask+0x8e>
    b234:	e0a0      	b.n	b378 <processTask+0x1d0>
		status = LORAWAN_Reset(bandTable[choice]);
    b236:	22ff      	movs	r2, #255	; 0xff
    b238:	4013      	ands	r3, r2
    b23a:	4a57      	ldr	r2, [pc, #348]	; (b398 <processTask+0x1f0>)
    b23c:	5cd0      	ldrb	r0, [r2, r3]
    b23e:	4b5a      	ldr	r3, [pc, #360]	; (b3a8 <processTask+0x200>)
    b240:	4798      	blx	r3
    b242:	0005      	movs	r5, r0
    LORAWAN_SetAttr(JOIN_BACKOFF_ENABLE,&joinBackoffEnable);
    b244:	210b      	movs	r1, #11
    b246:	4469      	add	r1, sp
    b248:	202e      	movs	r0, #46	; 0x2e
    b24a:	4b54      	ldr	r3, [pc, #336]	; (b39c <processTask+0x1f4>)
    b24c:	4798      	blx	r3
	if(status == LORAWAN_SUCCESS && choice < sizeof(bandTable)-1)
    b24e:	2d08      	cmp	r5, #8
    b250:	d1e2      	bne.n	b218 <processTask+0x70>
    b252:	e7df      	b.n	b214 <processTask+0x6c>
		uint32_t joinStatus = 0;
    b254:	2300      	movs	r3, #0
    b256:	9303      	str	r3, [sp, #12]
		PDS_RestoreAll();
    b258:	4b4d      	ldr	r3, [pc, #308]	; (b390 <processTask+0x1e8>)
    b25a:	4798      	blx	r3
		LORAWAN_GetAttr(LORAWAN_STATUS,NULL, &joinStatus);
    b25c:	aa03      	add	r2, sp, #12
    b25e:	2100      	movs	r1, #0
    b260:	2020      	movs	r0, #32
    b262:	4b4c      	ldr	r3, [pc, #304]	; (b394 <processTask+0x1ec>)
    b264:	4798      	blx	r3
		printf("\r\nPDS_RestorationStatus: Success\r\n" );
    b266:	4851      	ldr	r0, [pc, #324]	; (b3ac <processTask+0x204>)
    b268:	4b48      	ldr	r3, [pc, #288]	; (b38c <processTask+0x1e4>)
    b26a:	4798      	blx	r3
		if(joinStatus & LORAWAN_NW_JOINED)
    b26c:	9b03      	ldr	r3, [sp, #12]
    b26e:	07db      	lsls	r3, r3, #31
    b270:	d514      	bpl.n	b29c <processTask+0xf4>
			joined = true;
    b272:	2201      	movs	r2, #1
    b274:	4b4e      	ldr	r3, [pc, #312]	; (b3b0 <processTask+0x208>)
    b276:	701a      	strb	r2, [r3, #0]
			printf("joinStatus: Joined\r\n");
    b278:	484e      	ldr	r0, [pc, #312]	; (b3b4 <processTask+0x20c>)
    b27a:	4b44      	ldr	r3, [pc, #272]	; (b38c <processTask+0x1e4>)
    b27c:	4798      	blx	r3
		printf("Band: %s\r\n",bandStrings[choice]);
    b27e:	00a4      	lsls	r4, r4, #2
    b280:	4b4d      	ldr	r3, [pc, #308]	; (b3b8 <processTask+0x210>)
    b282:	58e1      	ldr	r1, [r4, r3]
    b284:	484d      	ldr	r0, [pc, #308]	; (b3bc <processTask+0x214>)
    b286:	4b4e      	ldr	r3, [pc, #312]	; (b3c0 <processTask+0x218>)
    b288:	4798      	blx	r3
		print_application_config();
    b28a:	4b4e      	ldr	r3, [pc, #312]	; (b3c4 <processTask+0x21c>)
    b28c:	4798      	blx	r3
		appTaskState = JOIN_SEND_STATE;
    b28e:	2203      	movs	r2, #3
    b290:	4b3c      	ldr	r3, [pc, #240]	; (b384 <processTask+0x1dc>)
    b292:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
    b294:	2000      	movs	r0, #0
    b296:	4b43      	ldr	r3, [pc, #268]	; (b3a4 <processTask+0x1fc>)
    b298:	4798      	blx	r3
    b29a:	e013      	b.n	b2c4 <processTask+0x11c>
			joined = false;
    b29c:	2200      	movs	r2, #0
    b29e:	4b44      	ldr	r3, [pc, #272]	; (b3b0 <processTask+0x208>)
    b2a0:	701a      	strb	r2, [r3, #0]
			printf("JoinStatus : Denied\r\n");
    b2a2:	4849      	ldr	r0, [pc, #292]	; (b3c8 <processTask+0x220>)
    b2a4:	4b39      	ldr	r3, [pc, #228]	; (b38c <processTask+0x1e4>)
    b2a6:	4798      	blx	r3
			set_LED_data(LED_AMBER,&on);
    b2a8:	4948      	ldr	r1, [pc, #288]	; (b3cc <processTask+0x224>)
    b2aa:	2002      	movs	r0, #2
    b2ac:	4b48      	ldr	r3, [pc, #288]	; (b3d0 <processTask+0x228>)
    b2ae:	4798      	blx	r3
			SYSTEM_PostTask(APP_TASK_ID);
    b2b0:	2010      	movs	r0, #16
    b2b2:	4b48      	ldr	r3, [pc, #288]	; (b3d4 <processTask+0x22c>)
    b2b4:	4798      	blx	r3
    b2b6:	e7e2      	b.n	b27e <processTask+0xd6>
	appTaskState = DEMO_APP_STATE;
    b2b8:	2202      	movs	r2, #2
    b2ba:	4b32      	ldr	r3, [pc, #200]	; (b384 <processTask+0x1dc>)
    b2bc:	701a      	strb	r2, [r3, #0]
	appPostTask(PROCESS_TASK_HANDLER);
    b2be:	2001      	movs	r0, #1
    b2c0:	4b38      	ldr	r3, [pc, #224]	; (b3a4 <processTask+0x1fc>)
    b2c2:	4798      	blx	r3
}
    b2c4:	2000      	movs	r0, #0
    b2c6:	b005      	add	sp, #20
    b2c8:	bd30      	pop	{r4, r5, pc}
	LORAWAN_Reset(bandTable[BAND_NUM]);
    b2ca:	4c33      	ldr	r4, [pc, #204]	; (b398 <processTask+0x1f0>)
    b2cc:	78a0      	ldrb	r0, [r4, #2]
    b2ce:	4b36      	ldr	r3, [pc, #216]	; (b3a8 <processTask+0x200>)
    b2d0:	4798      	blx	r3
	mote_set_parameters(bandTable[BAND_NUM], 1);
    b2d2:	78a0      	ldrb	r0, [r4, #2]
    b2d4:	2101      	movs	r1, #1
    b2d6:	4b40      	ldr	r3, [pc, #256]	; (b3d8 <processTask+0x230>)
    b2d8:	4798      	blx	r3
	appTaskState = JOIN_SEND_STATE;
    b2da:	2203      	movs	r2, #3
    b2dc:	4b29      	ldr	r3, [pc, #164]	; (b384 <processTask+0x1dc>)
    b2de:	701a      	strb	r2, [r3, #0]
	appPostTask(PROCESS_TASK_HANDLER);
    b2e0:	2001      	movs	r0, #1
    b2e2:	4b30      	ldr	r3, [pc, #192]	; (b3a4 <processTask+0x1fc>)
    b2e4:	4798      	blx	r3
    b2e6:	e7ed      	b.n	b2c4 <processTask+0x11c>
	if (joined && txDataReady)
    b2e8:	4b31      	ldr	r3, [pc, #196]	; (b3b0 <processTask+0x208>)
    b2ea:	781b      	ldrb	r3, [r3, #0]
    b2ec:	2b00      	cmp	r3, #0
    b2ee:	d02d      	beq.n	b34c <processTask+0x1a4>
    b2f0:	4b3a      	ldr	r3, [pc, #232]	; (b3dc <processTask+0x234>)
    b2f2:	781b      	ldrb	r3, [r3, #0]
    b2f4:	2b00      	cmp	r3, #0
    b2f6:	d0e5      	beq.n	b2c4 <processTask+0x11c>
    lorawanSendReq.buffer = getBuffer();//&temp_sen_str;
    b2f8:	4b39      	ldr	r3, [pc, #228]	; (b3e0 <processTask+0x238>)
    b2fa:	4798      	blx	r3
    b2fc:	4c39      	ldr	r4, [pc, #228]	; (b3e4 <processTask+0x23c>)
    b2fe:	6060      	str	r0, [r4, #4]
    lorawanSendReq.bufferLength = getSize();//data_len - 1;
    b300:	4b39      	ldr	r3, [pc, #228]	; (b3e8 <processTask+0x240>)
    b302:	4798      	blx	r3
    b304:	7220      	strb	r0, [r4, #8]
    lorawanSendReq.confirmed = DEMO_APP_TRANSMISSION_TYPE;
    b306:	2501      	movs	r5, #1
    b308:	7025      	strb	r5, [r4, #0]
    lorawanSendReq.port = DEMO_APP_FPORT;
    b30a:	7065      	strb	r5, [r4, #1]
    status = LORAWAN_Send(&lorawanSendReq);
    b30c:	0020      	movs	r0, r4
    b30e:	4b37      	ldr	r3, [pc, #220]	; (b3ec <processTask+0x244>)
    b310:	4798      	blx	r3
	txDataReady = false;
    b312:	2200      	movs	r2, #0
    b314:	4b31      	ldr	r3, [pc, #196]	; (b3dc <processTask+0x234>)
    b316:	701a      	strb	r2, [r3, #0]
	dataSent = true;
    b318:	4b35      	ldr	r3, [pc, #212]	; (b3f0 <processTask+0x248>)
    b31a:	701d      	strb	r5, [r3, #0]
    if (LORAWAN_SUCCESS == status)
    b31c:	2808      	cmp	r0, #8
    b31e:	d008      	beq.n	b332 <processTask+0x18a>
        print_stack_status(status);
    b320:	4b34      	ldr	r3, [pc, #208]	; (b3f4 <processTask+0x24c>)
    b322:	4798      	blx	r3
		appTaskState = JOIN_SEND_STATE;
    b324:	2203      	movs	r2, #3
    b326:	4b17      	ldr	r3, [pc, #92]	; (b384 <processTask+0x1dc>)
    b328:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
    b32a:	2000      	movs	r0, #0
    b32c:	4b1d      	ldr	r3, [pc, #116]	; (b3a4 <processTask+0x1fc>)
    b32e:	4798      	blx	r3
    b330:	e7c8      	b.n	b2c4 <processTask+0x11c>
        printf("\nTx Data Sent \r\n");
    b332:	4831      	ldr	r0, [pc, #196]	; (b3f8 <processTask+0x250>)
    b334:	4b15      	ldr	r3, [pc, #84]	; (b38c <processTask+0x1e4>)
    b336:	4798      	blx	r3
        SwTimerStart(lTimerId,MS_TO_US(100),SW_TIMEOUT_RELATIVE,(void *)lTimerCb,NULL);
    b338:	4b30      	ldr	r3, [pc, #192]	; (b3fc <processTask+0x254>)
    b33a:	7818      	ldrb	r0, [r3, #0]
    b33c:	2300      	movs	r3, #0
    b33e:	9300      	str	r3, [sp, #0]
    b340:	4b2f      	ldr	r3, [pc, #188]	; (b400 <processTask+0x258>)
    b342:	2200      	movs	r2, #0
    b344:	492f      	ldr	r1, [pc, #188]	; (b404 <processTask+0x25c>)
    b346:	4c30      	ldr	r4, [pc, #192]	; (b408 <processTask+0x260>)
    b348:	47a0      	blx	r4
    b34a:	e7bb      	b.n	b2c4 <processTask+0x11c>
		status = LORAWAN_Join(DEMO_APP_ACTIVATION_TYPE);
    b34c:	2000      	movs	r0, #0
    b34e:	4b2f      	ldr	r3, [pc, #188]	; (b40c <processTask+0x264>)
    b350:	4798      	blx	r3
		if (LORAWAN_SUCCESS == (StackRetStatus_t)status)
    b352:	2808      	cmp	r0, #8
    b354:	d008      	beq.n	b368 <processTask+0x1c0>
			print_stack_status(status);
    b356:	4b27      	ldr	r3, [pc, #156]	; (b3f4 <processTask+0x24c>)
    b358:	4798      	blx	r3
			appTaskState = JOIN_SEND_STATE;
    b35a:	2203      	movs	r2, #3
    b35c:	4b09      	ldr	r3, [pc, #36]	; (b384 <processTask+0x1dc>)
    b35e:	701a      	strb	r2, [r3, #0]
			appPostTask(PROCESS_TASK_HANDLER);
    b360:	2001      	movs	r0, #1
    b362:	4b10      	ldr	r3, [pc, #64]	; (b3a4 <processTask+0x1fc>)
    b364:	4798      	blx	r3
    b366:	e7ad      	b.n	b2c4 <processTask+0x11c>
			printf("\nRetry Join- Join Request Sent\n\r");
    b368:	4829      	ldr	r0, [pc, #164]	; (b410 <processTask+0x268>)
    b36a:	4b15      	ldr	r3, [pc, #84]	; (b3c0 <processTask+0x218>)
    b36c:	4798      	blx	r3
			print_stack_status(status);
    b36e:	2008      	movs	r0, #8
    b370:	4b20      	ldr	r3, [pc, #128]	; (b3f4 <processTask+0x24c>)
    b372:	4798      	blx	r3
    b374:	e7a6      	b.n	b2c4 <processTask+0x11c>
			choice = i;
    b376:	2400      	movs	r4, #0
    LORAWAN_SetAttr(JOIN_BACKOFF_ENABLE,&joinBackoffEnable);
    b378:	210b      	movs	r1, #11
    b37a:	4469      	add	r1, sp
    b37c:	202e      	movs	r0, #46	; 0x2e
    b37e:	4b07      	ldr	r3, [pc, #28]	; (b39c <processTask+0x1f4>)
    b380:	4798      	blx	r3
    b382:	e747      	b.n	b214 <processTask+0x6c>
    b384:	20000e63 	.word	0x20000e63
    b388:	0001a844 	.word	0x0001a844
    b38c:	00015369 	.word	0x00015369
    b390:	00009731 	.word	0x00009731
    b394:	0000d2f1 	.word	0x0000d2f1
    b398:	2000000c 	.word	0x2000000c
    b39c:	0000ef59 	.word	0x0000ef59
    b3a0:	0001ac54 	.word	0x0001ac54
    b3a4:	0000a5f5 	.word	0x0000a5f5
    b3a8:	0000f439 	.word	0x0000f439
    b3ac:	0001abf8 	.word	0x0001abf8
    b3b0:	20000e82 	.word	0x20000e82
    b3b4:	0001ac1c 	.word	0x0001ac1c
    b3b8:	0001a324 	.word	0x0001a324
    b3bc:	0001ac48 	.word	0x0001ac48
    b3c0:	000152a5 	.word	0x000152a5
    b3c4:	0000ae89 	.word	0x0000ae89
    b3c8:	0001ac30 	.word	0x0001ac30
    b3cc:	2000005c 	.word	0x2000005c
    b3d0:	0000974d 	.word	0x0000974d
    b3d4:	0000a181 	.word	0x0000a181
    b3d8:	0000b0b9 	.word	0x0000b0b9
    b3dc:	20000e90 	.word	0x20000e90
    b3e0:	00000155 	.word	0x00000155
    b3e4:	20000e68 	.word	0x20000e68
    b3e8:	00000149 	.word	0x00000149
    b3ec:	0000bfe1 	.word	0x0000bfe1
    b3f0:	20000e80 	.word	0x20000e80
    b3f4:	0000affd 	.word	0x0000affd
    b3f8:	0001ac68 	.word	0x0001ac68
    b3fc:	20000060 	.word	0x20000060
    b400:	0000a5b9 	.word	0x0000a5b9
    b404:	000186a0 	.word	0x000186a0
    b408:	00009b55 	.word	0x00009b55
    b40c:	0000cc29 	.word	0x0000cc29
    b410:	0001ac78 	.word	0x0001ac78

0000b414 <dev_eui_read>:
		/* Set EUI addr in EDBG if there */
		memcpy(demoDevEui, EDBGDevEUI, sizeof(demoDevEui));
	}
#endif
#endif
}
    b414:	4770      	bx	lr
	...

0000b418 <appWakeup>:
    }
}

#ifdef CONF_PMM_ENABLE
static void appWakeup(uint32_t sleptDuration)
{
    b418:	b510      	push	{r4, lr}
    b41a:	0004      	movs	r4, r0
    HAL_Radio_resources_init();
    b41c:	4b04      	ldr	r3, [pc, #16]	; (b430 <appWakeup+0x18>)
    b41e:	4798      	blx	r3
    sio2host_init();
    b420:	4b04      	ldr	r3, [pc, #16]	; (b434 <appWakeup+0x1c>)
    b422:	4798      	blx	r3
    printf("\r\nsleep_ok %ld ms\r\n", sleptDuration);
    b424:	0021      	movs	r1, r4
    b426:	4804      	ldr	r0, [pc, #16]	; (b438 <appWakeup+0x20>)
    b428:	4b04      	ldr	r3, [pc, #16]	; (b43c <appWakeup+0x24>)
    b42a:	4798      	blx	r3

}
    b42c:	bd10      	pop	{r4, pc}
    b42e:	46c0      	nop			; (mov r8, r8)
    b430:	00003f79 	.word	0x00003f79
    b434:	00003a69 	.word	0x00003a69
    b438:	0001aea4 	.word	0x0001aea4
    b43c:	000152a5 	.word	0x000152a5

0000b440 <app_resources_uninit>:
#endif /* #if (_DEBUG_ == 1) */

void app_resources_uninit(void);
#ifdef CONF_PMM_ENABLE
void app_resources_uninit(void)
{
    b440:	b530      	push	{r4, r5, lr}
    b442:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    b444:	ac01      	add	r4, sp, #4
    b446:	2300      	movs	r3, #0
    b448:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    b44a:	3301      	adds	r3, #1
    b44c:	7063      	strb	r3, [r4, #1]
	/* Disable USART TX and RX Pins */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
	pin_conf.powersave  = true;
    b44e:	70a3      	strb	r3, [r4, #2]
	port_pin_set_config(HOST_SERCOM_PAD0_PIN, &pin_conf);
    b450:	0021      	movs	r1, r4
    b452:	2004      	movs	r0, #4
    b454:	4d05      	ldr	r5, [pc, #20]	; (b46c <app_resources_uninit+0x2c>)
    b456:	47a8      	blx	r5
	port_pin_set_config(HOST_SERCOM_PAD1_PIN, &pin_conf);
    b458:	0021      	movs	r1, r4
    b45a:	2005      	movs	r0, #5
    b45c:	47a8      	blx	r5
	/* Disable UART module */
	sio2host_deinit();
    b45e:	4b04      	ldr	r3, [pc, #16]	; (b470 <app_resources_uninit+0x30>)
    b460:	4798      	blx	r3
	/* Disable Transceiver SPI Module */
	HAL_RadioDeInit();
    b462:	4b04      	ldr	r3, [pc, #16]	; (b474 <app_resources_uninit+0x34>)
    b464:	4798      	blx	r3
}
    b466:	b003      	add	sp, #12
    b468:	bd30      	pop	{r4, r5, pc}
    b46a:	46c0      	nop			; (mov r8, r8)
    b46c:	00000fb5 	.word	0x00000fb5
    b470:	00003bb5 	.word	0x00003bb5
    b474:	00003f9d 	.word	0x00003f9d

0000b478 <main>:
 * This is the reference manual for the LORAWAN Demo Application of EU Band
 */

bool txDataReady = false;
int main(void)
{
    b478:	b5f0      	push	{r4, r5, r6, r7, lr}
    b47a:	46d6      	mov	lr, sl
    b47c:	464f      	mov	r7, r9
    b47e:	4646      	mov	r6, r8
    b480:	b5c0      	push	{r6, r7, lr}
    b482:	b084      	sub	sp, #16
	
    /* System Initialization */
    system_init();
    b484:	4b69      	ldr	r3, [pc, #420]	; (b62c <main+0x1b4>)
    b486:	4798      	blx	r3
    /* Initialize the delay driver */
    delay_init();
    b488:	4b69      	ldr	r3, [pc, #420]	; (b630 <main+0x1b8>)
    b48a:	4798      	blx	r3
    /* Initialize the board target resources */
    board_init();
    b48c:	4b69      	ldr	r3, [pc, #420]	; (b634 <main+0x1bc>)
    b48e:	4798      	blx	r3

    INTERRUPT_GlobalInterruptEnable();
    b490:	2201      	movs	r2, #1
    b492:	4b69      	ldr	r3, [pc, #420]	; (b638 <main+0x1c0>)
    b494:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    b496:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    b49a:	b662      	cpsie	i
	/* Initialize the Serial Interface */
	sio2host_init();
    b49c:	4b67      	ldr	r3, [pc, #412]	; (b63c <main+0x1c4>)
    b49e:	4798      	blx	r3
	
	// I
	LORAREG_Init(ISM_NA915);
    b4a0:	2002      	movs	r0, #2
    b4a2:	4b67      	ldr	r3, [pc, #412]	; (b640 <main+0x1c8>)
    b4a4:	4798      	blx	r3
	
	// TMP102 sensor init and setting parameters with I2C module
	TMP102_begin();
    b4a6:	4b67      	ldr	r3, [pc, #412]	; (b644 <main+0x1cc>)
    b4a8:	4798      	blx	r3
	//TMP102_init();
	
	
#ifndef CRYPTO_DEV_ENABLED
 	/* Read DEV EUI from EDBG */
    dev_eui_read();
    b4aa:	4b67      	ldr	r3, [pc, #412]	; (b648 <main+0x1d0>)
    b4ac:	4798      	blx	r3
/* Initializes all the hardware and software modules used for Stack operation */
static void driver_init(void)
{
	SalStatus_t sal_status = SAL_SUCCESS;
    /* Initialize the Radio Hardware */
    HAL_RadioInit();
    b4ae:	4b67      	ldr	r3, [pc, #412]	; (b64c <main+0x1d4>)
    b4b0:	4798      	blx	r3
    /* Initialize the Software Timer Module */
    SystemTimerInit();
    b4b2:	4b67      	ldr	r3, [pc, #412]	; (b650 <main+0x1d8>)
    b4b4:	4798      	blx	r3
#ifdef CONF_PMM_ENABLE
    /* Initialize the Sleep Timer Module */
    SleepTimerInit();
    b4b6:	4b67      	ldr	r3, [pc, #412]	; (b654 <main+0x1dc>)
    b4b8:	4798      	blx	r3
#if (ENABLE_PDS == 1)
    /* PDS Module Init */
    PDS_Init();
#endif
	/* Initializes the Security modules */
	sal_status = SAL_Init();
    b4ba:	4b67      	ldr	r3, [pc, #412]	; (b658 <main+0x1e0>)
    b4bc:	4798      	blx	r3
	
	if (SAL_SUCCESS != sal_status)
    b4be:	2800      	cmp	r0, #0
    b4c0:	d139      	bne.n	b536 <main+0xbe>
    delay_ms(5);
    b4c2:	2005      	movs	r0, #5
    b4c4:	4b65      	ldr	r3, [pc, #404]	; (b65c <main+0x1e4>)
    b4c6:	4798      	blx	r3
 *
 * \return An enum value indicating the cause of the last system reset.
 */
static inline enum system_reset_cause system_get_reset_cause(void)
{
	return (enum system_reset_cause)RSTC->RCAUSE.reg;
    b4c8:	4b65      	ldr	r3, [pc, #404]	; (b660 <main+0x1e8>)
    b4ca:	781c      	ldrb	r4, [r3, #0]
    b4cc:	b2e4      	uxtb	r4, r4
    printf("Last reset cause: ");
    b4ce:	4865      	ldr	r0, [pc, #404]	; (b664 <main+0x1ec>)
    b4d0:	4b65      	ldr	r3, [pc, #404]	; (b668 <main+0x1f0>)
    b4d2:	4798      	blx	r3
    if(rcause & (1 << 6)) {
    b4d4:	0663      	lsls	r3, r4, #25
    b4d6:	d502      	bpl.n	b4de <main+0x66>
        printf("System Reset Request\r\n");
    b4d8:	4864      	ldr	r0, [pc, #400]	; (b66c <main+0x1f4>)
    b4da:	4b65      	ldr	r3, [pc, #404]	; (b670 <main+0x1f8>)
    b4dc:	4798      	blx	r3
    if(rcause & (1 << 5)) {
    b4de:	06a3      	lsls	r3, r4, #26
    b4e0:	d502      	bpl.n	b4e8 <main+0x70>
        printf("Watchdog Reset\r\n");
    b4e2:	4864      	ldr	r0, [pc, #400]	; (b674 <main+0x1fc>)
    b4e4:	4b62      	ldr	r3, [pc, #392]	; (b670 <main+0x1f8>)
    b4e6:	4798      	blx	r3
    if(rcause & (1 << 4)) {
    b4e8:	06e3      	lsls	r3, r4, #27
    b4ea:	d502      	bpl.n	b4f2 <main+0x7a>
        printf("External Reset\r\n");
    b4ec:	4862      	ldr	r0, [pc, #392]	; (b678 <main+0x200>)
    b4ee:	4b60      	ldr	r3, [pc, #384]	; (b670 <main+0x1f8>)
    b4f0:	4798      	blx	r3
    if(rcause & (1 << 2)) {
    b4f2:	0763      	lsls	r3, r4, #29
    b4f4:	d502      	bpl.n	b4fc <main+0x84>
        printf("Brown Out 33 Detector Reset\r\n");
    b4f6:	4861      	ldr	r0, [pc, #388]	; (b67c <main+0x204>)
    b4f8:	4b5d      	ldr	r3, [pc, #372]	; (b670 <main+0x1f8>)
    b4fa:	4798      	blx	r3
    if(rcause & (1 << 1)) {
    b4fc:	07a3      	lsls	r3, r4, #30
    b4fe:	d502      	bpl.n	b506 <main+0x8e>
        printf("Brown Out 12 Detector Reset\r\n");
    b500:	485f      	ldr	r0, [pc, #380]	; (b680 <main+0x208>)
    b502:	4b5b      	ldr	r3, [pc, #364]	; (b670 <main+0x1f8>)
    b504:	4798      	blx	r3
    if(rcause & (1 << 0)) {
    b506:	07e3      	lsls	r3, r4, #31
    b508:	d502      	bpl.n	b510 <main+0x98>
        printf("Power-On Reset\r\n");
    b50a:	485e      	ldr	r0, [pc, #376]	; (b684 <main+0x20c>)
    b50c:	4b58      	ldr	r3, [pc, #352]	; (b670 <main+0x1f8>)
    b50e:	4798      	blx	r3
    Stack_Init();
    b510:	4b5d      	ldr	r3, [pc, #372]	; (b688 <main+0x210>)
    b512:	4798      	blx	r3
    SwTimerCreate(&demoTimerId);
    b514:	485d      	ldr	r0, [pc, #372]	; (b68c <main+0x214>)
    b516:	4c5e      	ldr	r4, [pc, #376]	; (b690 <main+0x218>)
    b518:	47a0      	blx	r4
    SwTimerCreate(&lTimerId);
    b51a:	485e      	ldr	r0, [pc, #376]	; (b694 <main+0x21c>)
    b51c:	47a0      	blx	r4
    mote_demo_init();
    b51e:	4b5e      	ldr	r3, [pc, #376]	; (b698 <main+0x220>)
    b520:	4798      	blx	r3
	CayenneLPP(60); // Initialize the Payload Size 		
    b522:	203c      	movs	r0, #60	; 0x3c
    b524:	4b5d      	ldr	r3, [pc, #372]	; (b69c <main+0x224>)
    b526:	4798      	blx	r3
		if (joined)
    b528:	4b5d      	ldr	r3, [pc, #372]	; (b6a0 <main+0x228>)
    b52a:	4698      	mov	r8, r3
			if (dataSent == false && txDataReady != true)
    b52c:	4b5d      	ldr	r3, [pc, #372]	; (b6a4 <main+0x22c>)
    b52e:	469a      	mov	sl, r3
			if (validDataAvail)
    b530:	4b5d      	ldr	r3, [pc, #372]	; (b6a8 <main+0x230>)
    b532:	4699      	mov	r9, r3
    b534:	e043      	b.n	b5be <main+0x146>
	{
		printf("Initialization of Security module is failed\r\n");
    b536:	485d      	ldr	r0, [pc, #372]	; (b6ac <main+0x234>)
    b538:	4b4d      	ldr	r3, [pc, #308]	; (b670 <main+0x1f8>)
    b53a:	4798      	blx	r3
    b53c:	e7fe      	b.n	b53c <main+0xc4>
			if (validDataAvail)
    b53e:	464b      	mov	r3, r9
    b540:	781b      	ldrb	r3, [r3, #0]
    b542:	2b00      	cmp	r3, #0
    b544:	d031      	beq.n	b5aa <main+0x132>
				TMP102_sleep();
    b546:	4b5a      	ldr	r3, [pc, #360]	; (b6b0 <main+0x238>)
    b548:	4798      	blx	r3
				temp = 0;
    b54a:	2000      	movs	r0, #0
    b54c:	2100      	movs	r1, #0
    b54e:	4b59      	ldr	r3, [pc, #356]	; (b6b4 <main+0x23c>)
    b550:	6018      	str	r0, [r3, #0]
    b552:	6059      	str	r1, [r3, #4]
					printf("\r\nraw Sensor Data: { ");
    b554:	4858      	ldr	r0, [pc, #352]	; (b6b8 <main+0x240>)
    b556:	4b44      	ldr	r3, [pc, #272]	; (b668 <main+0x1f0>)
    b558:	4798      	blx	r3
						for (int p = 0 ; p < 7; p++)
    b55a:	2400      	movs	r4, #0
							printf("0x%X,", rawSensorData[p]);
    b55c:	4f57      	ldr	r7, [pc, #348]	; (b6bc <main+0x244>)
    b55e:	4e58      	ldr	r6, [pc, #352]	; (b6c0 <main+0x248>)
    b560:	4d41      	ldr	r5, [pc, #260]	; (b668 <main+0x1f0>)
    b562:	5d39      	ldrb	r1, [r7, r4]
    b564:	0030      	movs	r0, r6
    b566:	47a8      	blx	r5
						for (int p = 0 ; p < 7; p++)
    b568:	3401      	adds	r4, #1
    b56a:	2c07      	cmp	r4, #7
    b56c:	d1f9      	bne.n	b562 <main+0xea>
					printf("}\r\n");
    b56e:	4855      	ldr	r0, [pc, #340]	; (b6c4 <main+0x24c>)
    b570:	4b3f      	ldr	r3, [pc, #252]	; (b670 <main+0x1f8>)
    b572:	4798      	blx	r3
				FreeCayenneLPP(); 
    b574:	4b54      	ldr	r3, [pc, #336]	; (b6c8 <main+0x250>)
    b576:	4798      	blx	r3
				addAnalogInput(1, extractVoltage()); // voltage		
    b578:	4b54      	ldr	r3, [pc, #336]	; (b6cc <main+0x254>)
    b57a:	4798      	blx	r3
    b57c:	4b54      	ldr	r3, [pc, #336]	; (b6d0 <main+0x258>)
    b57e:	4798      	blx	r3
    b580:	1c01      	adds	r1, r0, #0
    b582:	2001      	movs	r0, #1
    b584:	4b53      	ldr	r3, [pc, #332]	; (b6d4 <main+0x25c>)
    b586:	4798      	blx	r3
				addTemperature(2, extractTemperature());   // temperature			
    b588:	4b53      	ldr	r3, [pc, #332]	; (b6d8 <main+0x260>)
    b58a:	4798      	blx	r3
    b58c:	4b53      	ldr	r3, [pc, #332]	; (b6dc <main+0x264>)
    b58e:	4798      	blx	r3
    b590:	1c01      	adds	r1, r0, #0
    b592:	2002      	movs	r0, #2
    b594:	4b52      	ldr	r3, [pc, #328]	; (b6e0 <main+0x268>)
    b596:	4798      	blx	r3
				validDataAvail = false;
    b598:	2200      	movs	r2, #0
    b59a:	4b43      	ldr	r3, [pc, #268]	; (b6a8 <main+0x230>)
    b59c:	701a      	strb	r2, [r3, #0]
				txDataReady = true;
    b59e:	3201      	adds	r2, #1
    b5a0:	4b50      	ldr	r3, [pc, #320]	; (b6e4 <main+0x26c>)
    b5a2:	701a      	strb	r2, [r3, #0]
				appPostTask(PROCESS_TASK_HANDLER);
    b5a4:	2001      	movs	r0, #1
    b5a6:	4b50      	ldr	r3, [pc, #320]	; (b6e8 <main+0x270>)
    b5a8:	4798      	blx	r3
        SYSTEM_RunTasks();
    b5aa:	4b50      	ldr	r3, [pc, #320]	; (b6ec <main+0x274>)
    b5ac:	4798      	blx	r3
        if (false == certAppEnabled)
    b5ae:	4b50      	ldr	r3, [pc, #320]	; (b6f0 <main+0x278>)
    b5b0:	781b      	ldrb	r3, [r3, #0]
    b5b2:	2b00      	cmp	r3, #0
    b5b4:	d103      	bne.n	b5be <main+0x146>
            if(dataSent == true)
    b5b6:	4b3b      	ldr	r3, [pc, #236]	; (b6a4 <main+0x22c>)
    b5b8:	781b      	ldrb	r3, [r3, #0]
    b5ba:	2b00      	cmp	r3, #0
    b5bc:	d112      	bne.n	b5e4 <main+0x16c>
		if (joined)
    b5be:	4643      	mov	r3, r8
    b5c0:	781b      	ldrb	r3, [r3, #0]
    b5c2:	2b00      	cmp	r3, #0
    b5c4:	d0f1      	beq.n	b5aa <main+0x132>
			if (dataSent == false && txDataReady != true)
    b5c6:	4653      	mov	r3, sl
    b5c8:	781b      	ldrb	r3, [r3, #0]
    b5ca:	2b00      	cmp	r3, #0
    b5cc:	d1b7      	bne.n	b53e <main+0xc6>
    b5ce:	4b45      	ldr	r3, [pc, #276]	; (b6e4 <main+0x26c>)
    b5d0:	781b      	ldrb	r3, [r3, #0]
    b5d2:	2b00      	cmp	r3, #0
    b5d4:	d1b3      	bne.n	b53e <main+0xc6>
				TMP102_wakeup();	
    b5d6:	4b47      	ldr	r3, [pc, #284]	; (b6f4 <main+0x27c>)
    b5d8:	4798      	blx	r3
				validDataAvail = serialGetSensorData();
    b5da:	4b47      	ldr	r3, [pc, #284]	; (b6f8 <main+0x280>)
    b5dc:	4798      	blx	r3
    b5de:	4b32      	ldr	r3, [pc, #200]	; (b6a8 <main+0x230>)
    b5e0:	7018      	strb	r0, [r3, #0]
    b5e2:	e7ac      	b.n	b53e <main+0xc6>
				sleepReq.sleepTimeMs = transmission_interval;
    b5e4:	ab01      	add	r3, sp, #4
    b5e6:	4a45      	ldr	r2, [pc, #276]	; (b6fc <main+0x284>)
    b5e8:	6812      	ldr	r2, [r2, #0]
    b5ea:	9201      	str	r2, [sp, #4]
                sleepReq.pmmWakeupCallback = appWakeup;
    b5ec:	4a44      	ldr	r2, [pc, #272]	; (b700 <main+0x288>)
    b5ee:	9203      	str	r2, [sp, #12]
                sleepReq.sleep_mode = CONF_PMM_SLEEPMODE_WHEN_IDLE;
    b5f0:	2201      	movs	r2, #1
    b5f2:	711a      	strb	r2, [r3, #4]
                    deviceResetsForWakeup = false;
    b5f4:	2200      	movs	r2, #0
    b5f6:	4b43      	ldr	r3, [pc, #268]	; (b704 <main+0x28c>)
    b5f8:	701a      	strb	r2, [r3, #0]
                if (true == LORAWAN_ReadyToSleep(deviceResetsForWakeup))
    b5fa:	2000      	movs	r0, #0
    b5fc:	4b42      	ldr	r3, [pc, #264]	; (b708 <main+0x290>)
    b5fe:	4798      	blx	r3
    b600:	2800      	cmp	r0, #0
    b602:	d0dc      	beq.n	b5be <main+0x146>
					printf("..Sleeping..\r\n");
    b604:	4841      	ldr	r0, [pc, #260]	; (b70c <main+0x294>)
    b606:	4b1a      	ldr	r3, [pc, #104]	; (b670 <main+0x1f8>)
    b608:	4798      	blx	r3
                    app_resources_uninit();
    b60a:	4b41      	ldr	r3, [pc, #260]	; (b710 <main+0x298>)
    b60c:	4798      	blx	r3
                    if (PMM_SLEEP_REQ_DENIED == PMM_Sleep(&sleepReq))
    b60e:	a801      	add	r0, sp, #4
    b610:	4b40      	ldr	r3, [pc, #256]	; (b714 <main+0x29c>)
    b612:	4798      	blx	r3
    b614:	2800      	cmp	r0, #0
    b616:	d003      	beq.n	b620 <main+0x1a8>
					dataSent = false;
    b618:	2200      	movs	r2, #0
    b61a:	4b22      	ldr	r3, [pc, #136]	; (b6a4 <main+0x22c>)
    b61c:	701a      	strb	r2, [r3, #0]
    b61e:	e7ce      	b.n	b5be <main+0x146>
                        HAL_Radio_resources_init();
    b620:	4b3d      	ldr	r3, [pc, #244]	; (b718 <main+0x2a0>)
    b622:	4798      	blx	r3
                        sio2host_init();
    b624:	4b05      	ldr	r3, [pc, #20]	; (b63c <main+0x1c4>)
    b626:	4798      	blx	r3
    b628:	e7f6      	b.n	b618 <main+0x1a0>
    b62a:	46c0      	nop			; (mov r8, r8)
    b62c:	00003341 	.word	0x00003341
    b630:	000005c9 	.word	0x000005c9
    b634:	000006d1 	.word	0x000006d1
    b638:	20000008 	.word	0x20000008
    b63c:	00003a69 	.word	0x00003a69
    b640:	000092dd 	.word	0x000092dd
    b644:	000003b5 	.word	0x000003b5
    b648:	0000b415 	.word	0x0000b415
    b64c:	00003dc1 	.word	0x00003dc1
    b650:	00009ab9 	.word	0x00009ab9
    b654:	000041ad 	.word	0x000041ad
    b658:	00009405 	.word	0x00009405
    b65c:	00000635 	.word	0x00000635
    b660:	40000800 	.word	0x40000800
    b664:	0001aee8 	.word	0x0001aee8
    b668:	000152a5 	.word	0x000152a5
    b66c:	0001aefc 	.word	0x0001aefc
    b670:	00015369 	.word	0x00015369
    b674:	0001af14 	.word	0x0001af14
    b678:	0001af24 	.word	0x0001af24
    b67c:	0001af34 	.word	0x0001af34
    b680:	0001af54 	.word	0x0001af54
    b684:	0001af74 	.word	0x0001af74
    b688:	0000a105 	.word	0x0000a105
    b68c:	2000005f 	.word	0x2000005f
    b690:	00009b21 	.word	0x00009b21
    b694:	20000060 	.word	0x20000060
    b698:	0000a629 	.word	0x0000a629
    b69c:	00000115 	.word	0x00000115
    b6a0:	20000e82 	.word	0x20000e82
    b6a4:	20000e80 	.word	0x20000e80
    b6a8:	20000e91 	.word	0x20000e91
    b6ac:	0001aeb8 	.word	0x0001aeb8
    b6b0:	00000501 	.word	0x00000501
    b6b4:	20000e88 	.word	0x20000e88
    b6b8:	0001af84 	.word	0x0001af84
    b6bc:	20000f20 	.word	0x20000f20
    b6c0:	0001af9c 	.word	0x0001af9c
    b6c4:	0001afa4 	.word	0x0001afa4
    b6c8:	0000013d 	.word	0x0000013d
    b6cc:	00000245 	.word	0x00000245
    b6d0:	00012d49 	.word	0x00012d49
    b6d4:	00000161 	.word	0x00000161
    b6d8:	00000279 	.word	0x00000279
    b6dc:	00014789 	.word	0x00014789
    b6e0:	000001b5 	.word	0x000001b5
    b6e4:	20000e90 	.word	0x20000e90
    b6e8:	0000a5f5 	.word	0x0000a5f5
    b6ec:	0000a115 	.word	0x0000a115
    b6f0:	20000e64 	.word	0x20000e64
    b6f4:	00000565 	.word	0x00000565
    b6f8:	00000209 	.word	0x00000209
    b6fc:	20000064 	.word	0x20000064
    b700:	0000b419 	.word	0x0000b419
    b704:	20000e81 	.word	0x20000e81
    b708:	0000f6ad 	.word	0x0000f6ad
    b70c:	0001afa8 	.word	0x0001afa8
    b710:	0000b441 	.word	0x0000b441
    b714:	00004311 	.word	0x00004311
    b718:	00003f79 	.word	0x00003f79

0000b71c <common_tc_read_count>:
    b71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b71e:	4b0d      	ldr	r3, [pc, #52]	; (b754 <common_tc_read_count+0x38>)
    b720:	4798      	blx	r3
    b722:	4b0d      	ldr	r3, [pc, #52]	; (b758 <common_tc_read_count+0x3c>)
    b724:	781b      	ldrb	r3, [r3, #0]
    b726:	2b00      	cmp	r3, #0
    b728:	d00e      	beq.n	b748 <common_tc_read_count+0x2c>
    b72a:	4b0c      	ldr	r3, [pc, #48]	; (b75c <common_tc_read_count+0x40>)
    b72c:	781d      	ldrb	r5, [r3, #0]
    b72e:	4b0a      	ldr	r3, [pc, #40]	; (b758 <common_tc_read_count+0x3c>)
    b730:	781f      	ldrb	r7, [r3, #0]
    b732:	4c0b      	ldr	r4, [pc, #44]	; (b760 <common_tc_read_count+0x44>)
    b734:	1c29      	adds	r1, r5, #0
    b736:	47a0      	blx	r4
    b738:	1c06      	adds	r6, r0, #0
    b73a:	480a      	ldr	r0, [pc, #40]	; (b764 <common_tc_read_count+0x48>)
    b73c:	1c29      	adds	r1, r5, #0
    b73e:	47a0      	blx	r4
    b740:	4378      	muls	r0, r7
    b742:	1830      	adds	r0, r6, r0
    b744:	b280      	uxth	r0, r0
    b746:	e004      	b.n	b752 <common_tc_read_count+0x36>
    b748:	4b04      	ldr	r3, [pc, #16]	; (b75c <common_tc_read_count+0x40>)
    b74a:	7819      	ldrb	r1, [r3, #0]
    b74c:	4b04      	ldr	r3, [pc, #16]	; (b760 <common_tc_read_count+0x44>)
    b74e:	4798      	blx	r3
    b750:	b280      	uxth	r0, r0
    b752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b754:	0000a3b1 	.word	0x0000a3b1
    b758:	20000e94 	.word	0x20000e94
    b75c:	200016a8 	.word	0x200016a8
    b760:	00011b1d 	.word	0x00011b1d
    b764:	0000ffff 	.word	0x0000ffff

0000b768 <common_tc_compare_stop>:
    b768:	b508      	push	{r3, lr}
    b76a:	4b05      	ldr	r3, [pc, #20]	; (b780 <common_tc_compare_stop+0x18>)
    b76c:	4798      	blx	r3
    b76e:	4b05      	ldr	r3, [pc, #20]	; (b784 <common_tc_compare_stop+0x1c>)
    b770:	4798      	blx	r3
    b772:	4b05      	ldr	r3, [pc, #20]	; (b788 <common_tc_compare_stop+0x20>)
    b774:	2200      	movs	r2, #0
    b776:	605a      	str	r2, [r3, #4]
    b778:	811a      	strh	r2, [r3, #8]
    b77a:	4b04      	ldr	r3, [pc, #16]	; (b78c <common_tc_compare_stop+0x24>)
    b77c:	4798      	blx	r3
    b77e:	bd08      	pop	{r3, pc}
    b780:	0000a3c5 	.word	0x0000a3c5
    b784:	0000a465 	.word	0x0000a465
    b788:	20000e94 	.word	0x20000e94
    b78c:	0000a489 	.word	0x0000a489

0000b790 <common_tc_overflow_stop>:
    b790:	b508      	push	{r3, lr}
    b792:	4b03      	ldr	r3, [pc, #12]	; (b7a0 <common_tc_overflow_stop+0x10>)
    b794:	4798      	blx	r3
    b796:	2200      	movs	r2, #0
    b798:	4b02      	ldr	r3, [pc, #8]	; (b7a4 <common_tc_overflow_stop+0x14>)
    b79a:	701a      	strb	r2, [r3, #0]
    b79c:	bd08      	pop	{r3, pc}
    b79e:	46c0      	nop			; (mov r8, r8)
    b7a0:	0000a419 	.word	0x0000a419
    b7a4:	20000e94 	.word	0x20000e94

0000b7a8 <common_tc_stop>:
    b7a8:	b508      	push	{r3, lr}
    b7aa:	4b03      	ldr	r3, [pc, #12]	; (b7b8 <common_tc_stop+0x10>)
    b7ac:	4798      	blx	r3
    b7ae:	4b03      	ldr	r3, [pc, #12]	; (b7bc <common_tc_stop+0x14>)
    b7b0:	4798      	blx	r3
    b7b2:	4b03      	ldr	r3, [pc, #12]	; (b7c0 <common_tc_stop+0x18>)
    b7b4:	4798      	blx	r3
    b7b6:	bd08      	pop	{r3, pc}
    b7b8:	0000b769 	.word	0x0000b769
    b7bc:	0000b791 	.word	0x0000b791
    b7c0:	0000a42d 	.word	0x0000a42d

0000b7c4 <common_tc_delay>:
    b7c4:	b510      	push	{r4, lr}
    b7c6:	1c04      	adds	r4, r0, #0
    b7c8:	4b13      	ldr	r3, [pc, #76]	; (b818 <common_tc_delay+0x54>)
    b7ca:	4798      	blx	r3
    b7cc:	4b13      	ldr	r3, [pc, #76]	; (b81c <common_tc_delay+0x58>)
    b7ce:	781a      	ldrb	r2, [r3, #0]
    b7d0:	4362      	muls	r2, r4
    b7d2:	1881      	adds	r1, r0, r2
    b7d4:	4b12      	ldr	r3, [pc, #72]	; (b820 <common_tc_delay+0x5c>)
    b7d6:	6059      	str	r1, [r3, #4]
    b7d8:	6859      	ldr	r1, [r3, #4]
    b7da:	0c09      	lsrs	r1, r1, #16
    b7dc:	6059      	str	r1, [r3, #4]
    b7de:	685b      	ldr	r3, [r3, #4]
    b7e0:	2b00      	cmp	r3, #0
    b7e2:	d007      	beq.n	b7f4 <common_tc_delay+0x30>
    b7e4:	4b0e      	ldr	r3, [pc, #56]	; (b820 <common_tc_delay+0x5c>)
    b7e6:	6859      	ldr	r1, [r3, #4]
    b7e8:	3201      	adds	r2, #1
    b7ea:	1880      	adds	r0, r0, r2
    b7ec:	8118      	strh	r0, [r3, #8]
    b7ee:	4b0d      	ldr	r3, [pc, #52]	; (b824 <common_tc_delay+0x60>)
    b7f0:	4798      	blx	r3
    b7f2:	e004      	b.n	b7fe <common_tc_delay+0x3a>
    b7f4:	1882      	adds	r2, r0, r2
    b7f6:	4b0a      	ldr	r3, [pc, #40]	; (b820 <common_tc_delay+0x5c>)
    b7f8:	811a      	strh	r2, [r3, #8]
    b7fa:	4b0b      	ldr	r3, [pc, #44]	; (b828 <common_tc_delay+0x64>)
    b7fc:	4798      	blx	r3
    b7fe:	4b08      	ldr	r3, [pc, #32]	; (b820 <common_tc_delay+0x5c>)
    b800:	891b      	ldrh	r3, [r3, #8]
    b802:	2b63      	cmp	r3, #99	; 0x63
    b804:	d802      	bhi.n	b80c <common_tc_delay+0x48>
    b806:	3364      	adds	r3, #100	; 0x64
    b808:	4a05      	ldr	r2, [pc, #20]	; (b820 <common_tc_delay+0x5c>)
    b80a:	8113      	strh	r3, [r2, #8]
    b80c:	4b04      	ldr	r3, [pc, #16]	; (b820 <common_tc_delay+0x5c>)
    b80e:	8918      	ldrh	r0, [r3, #8]
    b810:	4b06      	ldr	r3, [pc, #24]	; (b82c <common_tc_delay+0x68>)
    b812:	4798      	blx	r3
    b814:	bd10      	pop	{r4, pc}
    b816:	46c0      	nop			; (mov r8, r8)
    b818:	0000a3b1 	.word	0x0000a3b1
    b81c:	200016a8 	.word	0x200016a8
    b820:	20000e94 	.word	0x20000e94
    b824:	0000a3c5 	.word	0x0000a3c5
    b828:	0000a3d9 	.word	0x0000a3d9
    b82c:	0000a44d 	.word	0x0000a44d

0000b830 <common_tc_init>:
    b830:	b508      	push	{r3, lr}
    b832:	2200      	movs	r2, #0
    b834:	4b03      	ldr	r3, [pc, #12]	; (b844 <common_tc_init+0x14>)
    b836:	701a      	strb	r2, [r3, #0]
    b838:	4b03      	ldr	r3, [pc, #12]	; (b848 <common_tc_init+0x18>)
    b83a:	4798      	blx	r3
    b83c:	4b03      	ldr	r3, [pc, #12]	; (b84c <common_tc_init+0x1c>)
    b83e:	7018      	strb	r0, [r3, #0]
    b840:	bd08      	pop	{r3, pc}
    b842:	46c0      	nop			; (mov r8, r8)
    b844:	20000e94 	.word	0x20000e94
    b848:	0000a4a1 	.word	0x0000a4a1
    b84c:	200016a8 	.word	0x200016a8

0000b850 <tmr_ovf_callback>:
    b850:	b508      	push	{r3, lr}
    b852:	4b0e      	ldr	r3, [pc, #56]	; (b88c <tmr_ovf_callback+0x3c>)
    b854:	685b      	ldr	r3, [r3, #4]
    b856:	2b00      	cmp	r3, #0
    b858:	d007      	beq.n	b86a <tmr_ovf_callback+0x1a>
    b85a:	4a0c      	ldr	r2, [pc, #48]	; (b88c <tmr_ovf_callback+0x3c>)
    b85c:	6853      	ldr	r3, [r2, #4]
    b85e:	3b01      	subs	r3, #1
    b860:	6053      	str	r3, [r2, #4]
    b862:	2b00      	cmp	r3, #0
    b864:	d101      	bne.n	b86a <tmr_ovf_callback+0x1a>
    b866:	4b0a      	ldr	r3, [pc, #40]	; (b890 <tmr_ovf_callback+0x40>)
    b868:	4798      	blx	r3
    b86a:	4a08      	ldr	r2, [pc, #32]	; (b88c <tmr_ovf_callback+0x3c>)
    b86c:	7813      	ldrb	r3, [r2, #0]
    b86e:	3301      	adds	r3, #1
    b870:	b2db      	uxtb	r3, r3
    b872:	7013      	strb	r3, [r2, #0]
    b874:	4a07      	ldr	r2, [pc, #28]	; (b894 <tmr_ovf_callback+0x44>)
    b876:	7812      	ldrb	r2, [r2, #0]
    b878:	429a      	cmp	r2, r3
    b87a:	d806      	bhi.n	b88a <tmr_ovf_callback+0x3a>
    b87c:	4b03      	ldr	r3, [pc, #12]	; (b88c <tmr_ovf_callback+0x3c>)
    b87e:	2200      	movs	r2, #0
    b880:	701a      	strb	r2, [r3, #0]
    b882:	68db      	ldr	r3, [r3, #12]
    b884:	2b00      	cmp	r3, #0
    b886:	d000      	beq.n	b88a <tmr_ovf_callback+0x3a>
    b888:	4798      	blx	r3
    b88a:	bd08      	pop	{r3, pc}
    b88c:	20000e94 	.word	0x20000e94
    b890:	0000a3d9 	.word	0x0000a3d9
    b894:	200016a8 	.word	0x200016a8

0000b898 <tmr_cca_callback>:
    b898:	b508      	push	{r3, lr}
    b89a:	4b04      	ldr	r3, [pc, #16]	; (b8ac <tmr_cca_callback+0x14>)
    b89c:	4798      	blx	r3
    b89e:	4b04      	ldr	r3, [pc, #16]	; (b8b0 <tmr_cca_callback+0x18>)
    b8a0:	691b      	ldr	r3, [r3, #16]
    b8a2:	2b00      	cmp	r3, #0
    b8a4:	d000      	beq.n	b8a8 <tmr_cca_callback+0x10>
    b8a6:	4798      	blx	r3
    b8a8:	bd08      	pop	{r3, pc}
    b8aa:	46c0      	nop			; (mov r8, r8)
    b8ac:	0000a3c5 	.word	0x0000a3c5
    b8b0:	20000e94 	.word	0x20000e94

0000b8b4 <set_common_tc_overflow_callback>:
    b8b4:	4b01      	ldr	r3, [pc, #4]	; (b8bc <set_common_tc_overflow_callback+0x8>)
    b8b6:	60d8      	str	r0, [r3, #12]
    b8b8:	4770      	bx	lr
    b8ba:	46c0      	nop			; (mov r8, r8)
    b8bc:	20000e94 	.word	0x20000e94

0000b8c0 <set_common_tc_expiry_callback>:
    b8c0:	4b01      	ldr	r3, [pc, #4]	; (b8c8 <set_common_tc_expiry_callback+0x8>)
    b8c2:	6118      	str	r0, [r3, #16]
    b8c4:	4770      	bx	lr
    b8c6:	46c0      	nop			; (mov r8, r8)
    b8c8:	20000e94 	.word	0x20000e94

0000b8cc <MacClearCommands>:
    b8cc:	490e      	ldr	r1, [pc, #56]	; (b908 <MacClearCommands+0x3c>)
    b8ce:	b570      	push	{r4, r5, r6, lr}
    b8d0:	000b      	movs	r3, r1
    b8d2:	33d8      	adds	r3, #216	; 0xd8
    b8d4:	7818      	ldrb	r0, [r3, #0]
    b8d6:	2303      	movs	r3, #3
    b8d8:	25a4      	movs	r5, #164	; 0xa4
    b8da:	4343      	muls	r3, r0
    b8dc:	2401      	movs	r4, #1
    b8de:	20ff      	movs	r0, #255	; 0xff
    b8e0:	3391      	adds	r3, #145	; 0x91
    b8e2:	4a0a      	ldr	r2, [pc, #40]	; (b90c <MacClearCommands+0x40>)
    b8e4:	185b      	adds	r3, r3, r1
    b8e6:	00ed      	lsls	r5, r5, #3
    b8e8:	429a      	cmp	r2, r3
    b8ea:	d100      	bne.n	b8ee <MacClearCommands+0x22>
    b8ec:	bd70      	pop	{r4, r5, r6, pc}
    b8ee:	7811      	ldrb	r1, [r2, #0]
    b8f0:	29ff      	cmp	r1, #255	; 0xff
    b8f2:	d006      	beq.n	b902 <MacClearCommands+0x36>
    b8f4:	290a      	cmp	r1, #10
    b8f6:	d803      	bhi.n	b900 <MacClearCommands+0x34>
    b8f8:	0026      	movs	r6, r4
    b8fa:	408e      	lsls	r6, r1
    b8fc:	422e      	tst	r6, r5
    b8fe:	d100      	bne.n	b902 <MacClearCommands+0x36>
    b900:	7010      	strb	r0, [r2, #0]
    b902:	3203      	adds	r2, #3
    b904:	e7f0      	b.n	b8e8 <MacClearCommands+0x1c>
    b906:	46c0      	nop			; (mov r8, r8)
    b908:	200017d4 	.word	0x200017d4
    b90c:	20001865 	.word	0x20001865

0000b910 <CountfOptsLength>:
    b910:	2200      	movs	r2, #0
    b912:	490d      	ldr	r1, [pc, #52]	; (b948 <CountfOptsLength+0x38>)
    b914:	b570      	push	{r4, r5, r6, lr}
    b916:	000b      	movs	r3, r1
    b918:	0010      	movs	r0, r2
    b91a:	2503      	movs	r5, #3
    b91c:	33d8      	adds	r3, #216	; 0xd8
    b91e:	781c      	ldrb	r4, [r3, #0]
    b920:	4e0a      	ldr	r6, [pc, #40]	; (b94c <CountfOptsLength+0x3c>)
    b922:	b2d3      	uxtb	r3, r2
    b924:	429c      	cmp	r4, r3
    b926:	d800      	bhi.n	b92a <CountfOptsLength+0x1a>
    b928:	bd70      	pop	{r4, r5, r6, pc}
    b92a:	002b      	movs	r3, r5
    b92c:	4353      	muls	r3, r2
    b92e:	3391      	adds	r3, #145	; 0x91
    b930:	5ccb      	ldrb	r3, [r1, r3]
    b932:	2bff      	cmp	r3, #255	; 0xff
    b934:	d006      	beq.n	b944 <CountfOptsLength+0x34>
    b936:	18f3      	adds	r3, r6, r3
    b938:	3b02      	subs	r3, #2
    b93a:	781b      	ldrb	r3, [r3, #0]
    b93c:	18c3      	adds	r3, r0, r3
    b93e:	2b0f      	cmp	r3, #15
    b940:	dcf2      	bgt.n	b928 <CountfOptsLength+0x18>
    b942:	b2d8      	uxtb	r0, r3
    b944:	3201      	adds	r2, #1
    b946:	e7ec      	b.n	b922 <CountfOptsLength+0x12>
    b948:	200017d4 	.word	0x200017d4
    b94c:	0001afba 	.word	0x0001afba

0000b950 <StopAllSoftwareTimers>:
    b950:	b570      	push	{r4, r5, r6, lr}
    b952:	4c17      	ldr	r4, [pc, #92]	; (b9b0 <StopAllSoftwareTimers+0x60>)
    b954:	4d17      	ldr	r5, [pc, #92]	; (b9b4 <StopAllSoftwareTimers+0x64>)
    b956:	0023      	movs	r3, r4
    b958:	33e2      	adds	r3, #226	; 0xe2
    b95a:	7818      	ldrb	r0, [r3, #0]
    b95c:	47a8      	blx	r5
    b95e:	0023      	movs	r3, r4
    b960:	33e3      	adds	r3, #227	; 0xe3
    b962:	7818      	ldrb	r0, [r3, #0]
    b964:	47a8      	blx	r5
    b966:	0023      	movs	r3, r4
    b968:	33e7      	adds	r3, #231	; 0xe7
    b96a:	7818      	ldrb	r0, [r3, #0]
    b96c:	47a8      	blx	r5
    b96e:	0023      	movs	r3, r4
    b970:	33e4      	adds	r3, #228	; 0xe4
    b972:	7818      	ldrb	r0, [r3, #0]
    b974:	47a8      	blx	r5
    b976:	0023      	movs	r3, r4
    b978:	33e5      	adds	r3, #229	; 0xe5
    b97a:	7818      	ldrb	r0, [r3, #0]
    b97c:	47a8      	blx	r5
    b97e:	0023      	movs	r3, r4
    b980:	33e8      	adds	r3, #232	; 0xe8
    b982:	7818      	ldrb	r0, [r3, #0]
    b984:	47a8      	blx	r5
    b986:	0023      	movs	r3, r4
    b988:	33e6      	adds	r3, #230	; 0xe6
    b98a:	7818      	ldrb	r0, [r3, #0]
    b98c:	47a8      	blx	r5
    b98e:	0023      	movs	r3, r4
    b990:	33e9      	adds	r3, #233	; 0xe9
    b992:	7818      	ldrb	r0, [r3, #0]
    b994:	47a8      	blx	r5
    b996:	0023      	movs	r3, r4
    b998:	33f2      	adds	r3, #242	; 0xf2
    b99a:	7818      	ldrb	r0, [r3, #0]
    b99c:	47a8      	blx	r5
    b99e:	0023      	movs	r3, r4
    b9a0:	33f3      	adds	r3, #243	; 0xf3
    b9a2:	7818      	ldrb	r0, [r3, #0]
    b9a4:	34ff      	adds	r4, #255	; 0xff
    b9a6:	47a8      	blx	r5
    b9a8:	7f60      	ldrb	r0, [r4, #29]
    b9aa:	47a8      	blx	r5
    b9ac:	bd70      	pop	{r4, r5, r6, pc}
    b9ae:	46c0      	nop			; (mov r8, r8)
    b9b0:	200017d4 	.word	0x200017d4
    b9b4:	00009e61 	.word	0x00009e61

0000b9b8 <LorawanGetMaxPayloadSize>:
    b9b8:	b513      	push	{r0, r1, r4, lr}
    b9ba:	466b      	mov	r3, sp
    b9bc:	1ddc      	adds	r4, r3, #7
    b9be:	2300      	movs	r3, #0
    b9c0:	0022      	movs	r2, r4
    b9c2:	7023      	strb	r3, [r4, #0]
    b9c4:	4902      	ldr	r1, [pc, #8]	; (b9d0 <LorawanGetMaxPayloadSize+0x18>)
    b9c6:	4b03      	ldr	r3, [pc, #12]	; (b9d4 <LorawanGetMaxPayloadSize+0x1c>)
    b9c8:	2005      	movs	r0, #5
    b9ca:	4798      	blx	r3
    b9cc:	7820      	ldrb	r0, [r4, #0]
    b9ce:	bd16      	pop	{r1, r2, r4, pc}
    b9d0:	200018b3 	.word	0x200018b3
    b9d4:	00009141 	.word	0x00009141

0000b9d8 <UpdateReceiveDelays>:
    b9d8:	23fa      	movs	r3, #250	; 0xfa
    b9da:	b570      	push	{r4, r5, r6, lr}
    b9dc:	009b      	lsls	r3, r3, #2
    b9de:	4c0b      	ldr	r4, [pc, #44]	; (ba0c <UpdateReceiveDelays+0x34>)
    b9e0:	2800      	cmp	r0, #0
    b9e2:	d000      	beq.n	b9e6 <UpdateReceiveDelays+0xe>
    b9e4:	4343      	muls	r3, r0
    b9e6:	0022      	movs	r2, r4
    b9e8:	4d09      	ldr	r5, [pc, #36]	; (ba10 <UpdateReceiveDelays+0x38>)
    b9ea:	32c8      	adds	r2, #200	; 0xc8
    b9ec:	210c      	movs	r1, #12
    b9ee:	2000      	movs	r0, #0
    b9f0:	8013      	strh	r3, [r2, #0]
    b9f2:	47a8      	blx	r5
    b9f4:	0023      	movs	r3, r4
    b9f6:	22fa      	movs	r2, #250	; 0xfa
    b9f8:	33c8      	adds	r3, #200	; 0xc8
    b9fa:	881b      	ldrh	r3, [r3, #0]
    b9fc:	0092      	lsls	r2, r2, #2
    b9fe:	189b      	adds	r3, r3, r2
    ba00:	34ca      	adds	r4, #202	; 0xca
    ba02:	210d      	movs	r1, #13
    ba04:	2000      	movs	r0, #0
    ba06:	8023      	strh	r3, [r4, #0]
    ba08:	47a8      	blx	r5
    ba0a:	bd70      	pop	{r4, r5, r6, pc}
    ba0c:	200017d4 	.word	0x200017d4
    ba10:	00009729 	.word	0x00009729

0000ba14 <IncludeMacCommandsResponse>:
    ba14:	b5f0      	push	{r4, r5, r6, r7, lr}
    ba16:	0005      	movs	r5, r0
    ba18:	2600      	movs	r6, #0
    ba1a:	b087      	sub	sp, #28
    ba1c:	880c      	ldrh	r4, [r1, #0]
    ba1e:	9101      	str	r1, [sp, #4]
    ba20:	9203      	str	r2, [sp, #12]
    ba22:	4a67      	ldr	r2, [pc, #412]	; (bbc0 <IncludeMacCommandsResponse+0x1ac>)
    ba24:	0013      	movs	r3, r2
    ba26:	33d8      	adds	r3, #216	; 0xd8
    ba28:	781b      	ldrb	r3, [r3, #0]
    ba2a:	42b3      	cmp	r3, r6
    ba2c:	d913      	bls.n	ba56 <IncludeMacCommandsResponse+0x42>
    ba2e:	9b03      	ldr	r3, [sp, #12]
    ba30:	2b00      	cmp	r3, #0
    ba32:	d019      	beq.n	ba68 <IncludeMacCommandsResponse+0x54>
    ba34:	2303      	movs	r3, #3
    ba36:	4373      	muls	r3, r6
    ba38:	18d3      	adds	r3, r2, r3
    ba3a:	3391      	adds	r3, #145	; 0x91
    ba3c:	7818      	ldrb	r0, [r3, #0]
    ba3e:	28ff      	cmp	r0, #255	; 0xff
    ba40:	d012      	beq.n	ba68 <IncludeMacCommandsResponse+0x54>
    ba42:	9b01      	ldr	r3, [sp, #4]
    ba44:	8819      	ldrh	r1, [r3, #0]
    ba46:	4b5f      	ldr	r3, [pc, #380]	; (bbc4 <IncludeMacCommandsResponse+0x1b0>)
    ba48:	1a61      	subs	r1, r4, r1
    ba4a:	181b      	adds	r3, r3, r0
    ba4c:	3b02      	subs	r3, #2
    ba4e:	781b      	ldrb	r3, [r3, #0]
    ba50:	18cb      	adds	r3, r1, r3
    ba52:	2b0f      	cmp	r3, #15
    ba54:	dd08      	ble.n	ba68 <IncludeMacCommandsResponse+0x54>
    ba56:	2207      	movs	r2, #7
    ba58:	2100      	movs	r1, #0
    ba5a:	4b5b      	ldr	r3, [pc, #364]	; (bbc8 <IncludeMacCommandsResponse+0x1b4>)
    ba5c:	485b      	ldr	r0, [pc, #364]	; (bbcc <IncludeMacCommandsResponse+0x1b8>)
    ba5e:	4798      	blx	r3
    ba60:	9b01      	ldr	r3, [sp, #4]
    ba62:	801c      	strh	r4, [r3, #0]
    ba64:	b007      	add	sp, #28
    ba66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ba68:	2303      	movs	r3, #3
    ba6a:	4373      	muls	r3, r6
    ba6c:	18d3      	adds	r3, r2, r3
    ba6e:	3391      	adds	r3, #145	; 0x91
    ba70:	7819      	ldrb	r1, [r3, #0]
    ba72:	1e88      	subs	r0, r1, #2
    ba74:	2808      	cmp	r0, #8
    ba76:	d862      	bhi.n	bb3e <IncludeMacCommandsResponse+0x12a>
    ba78:	1c63      	adds	r3, r4, #1
    ba7a:	f005 ffb1 	bl	119e0 <__gnu_thumb1_case_uqi>
    ba7e:	0594      	.short	0x0594
    ba80:	6646269e 	.word	0x6646269e
    ba84:	7b9e      	.short	0x7b9e
    ba86:	7f          	.byte	0x7f
    ba87:	00          	.byte	0x00
    ba88:	2203      	movs	r2, #3
    ba8a:	20d8      	movs	r0, #216	; 0xd8
    ba8c:	552a      	strb	r2, [r5, r4]
    ba8e:	2200      	movs	r2, #0
    ba90:	b29b      	uxth	r3, r3
    ba92:	18eb      	adds	r3, r5, r3
    ba94:	4f4a      	ldr	r7, [pc, #296]	; (bbc0 <IncludeMacCommandsResponse+0x1ac>)
    ba96:	701a      	strb	r2, [r3, #0]
    ba98:	30ff      	adds	r0, #255	; 0xff
    ba9a:	5c39      	ldrb	r1, [r7, r0]
    ba9c:	3201      	adds	r2, #1
    ba9e:	4011      	ands	r1, r2
    baa0:	466a      	mov	r2, sp
    baa2:	9102      	str	r1, [sp, #8]
    baa4:	7a12      	ldrb	r2, [r2, #8]
    baa6:	701a      	strb	r2, [r3, #0]
    baa8:	5c3a      	ldrb	r2, [r7, r0]
    baaa:	4694      	mov	ip, r2
    baac:	2202      	movs	r2, #2
    baae:	4661      	mov	r1, ip
    bab0:	4211      	tst	r1, r2
    bab2:	d002      	beq.n	baba <IncludeMacCommandsResponse+0xa6>
    bab4:	9902      	ldr	r1, [sp, #8]
    bab6:	430a      	orrs	r2, r1
    bab8:	701a      	strb	r2, [r3, #0]
    baba:	2204      	movs	r2, #4
    babc:	5c39      	ldrb	r1, [r7, r0]
    babe:	4211      	tst	r1, r2
    bac0:	d06e      	beq.n	bba0 <IncludeMacCommandsResponse+0x18c>
    bac2:	7819      	ldrb	r1, [r3, #0]
    bac4:	430a      	orrs	r2, r1
    bac6:	701a      	strb	r2, [r3, #0]
    bac8:	e06a      	b.n	bba0 <IncludeMacCommandsResponse+0x18c>
    baca:	2205      	movs	r2, #5
    bacc:	2103      	movs	r1, #3
    bace:	552a      	strb	r2, [r5, r4]
    bad0:	2200      	movs	r2, #0
    bad2:	b29b      	uxth	r3, r3
    bad4:	4371      	muls	r1, r6
    bad6:	18eb      	adds	r3, r5, r3
    bad8:	701a      	strb	r2, [r3, #0]
    bada:	4a39      	ldr	r2, [pc, #228]	; (bbc0 <IncludeMacCommandsResponse+0x1ac>)
    badc:	1851      	adds	r1, r2, r1
    bade:	3190      	adds	r1, #144	; 0x90
    bae0:	7888      	ldrb	r0, [r1, #2]
    bae2:	0700      	lsls	r0, r0, #28
    bae4:	0fc0      	lsrs	r0, r0, #31
    bae6:	7018      	strb	r0, [r3, #0]
    bae8:	7889      	ldrb	r1, [r1, #2]
    baea:	b2c7      	uxtb	r7, r0
    baec:	06c9      	lsls	r1, r1, #27
    baee:	d502      	bpl.n	baf6 <IncludeMacCommandsResponse+0xe2>
    baf0:	2102      	movs	r1, #2
    baf2:	4339      	orrs	r1, r7
    baf4:	7019      	strb	r1, [r3, #0]
    baf6:	2103      	movs	r1, #3
    baf8:	4371      	muls	r1, r6
    bafa:	1852      	adds	r2, r2, r1
    bafc:	3290      	adds	r2, #144	; 0x90
    bafe:	7892      	ldrb	r2, [r2, #2]
    bb00:	0692      	lsls	r2, r2, #26
    bb02:	d54d      	bpl.n	bba0 <IncludeMacCommandsResponse+0x18c>
    bb04:	7819      	ldrb	r1, [r3, #0]
    bb06:	2204      	movs	r2, #4
    bb08:	e7dc      	b.n	bac4 <IncludeMacCommandsResponse+0xb0>
    bb0a:	ab04      	add	r3, sp, #16
    bb0c:	1ddf      	adds	r7, r3, #7
    bb0e:	0039      	movs	r1, r7
    bb10:	4b2f      	ldr	r3, [pc, #188]	; (bbd0 <IncludeMacCommandsResponse+0x1bc>)
    bb12:	200e      	movs	r0, #14
    bb14:	4798      	blx	r3
    bb16:	2306      	movs	r3, #6
    bb18:	4a29      	ldr	r2, [pc, #164]	; (bbc0 <IncludeMacCommandsResponse+0x1ac>)
    bb1a:	552b      	strb	r3, [r5, r4]
    bb1c:	32e0      	adds	r2, #224	; 0xe0
    bb1e:	7811      	ldrb	r1, [r2, #0]
    bb20:	1c62      	adds	r2, r4, #1
    bb22:	b292      	uxth	r2, r2
    bb24:	54a9      	strb	r1, [r5, r2]
    bb26:	783a      	ldrb	r2, [r7, #0]
    bb28:	1ca3      	adds	r3, r4, #2
    bb2a:	0011      	movs	r1, r2
    bb2c:	3120      	adds	r1, #32
    bb2e:	3403      	adds	r4, #3
    bb30:	b2c9      	uxtb	r1, r1
    bb32:	b29b      	uxth	r3, r3
    bb34:	b2a4      	uxth	r4, r4
    bb36:	293f      	cmp	r1, #63	; 0x3f
    bb38:	d904      	bls.n	bb44 <IncludeMacCommandsResponse+0x130>
    bb3a:	2220      	movs	r2, #32
    bb3c:	54ea      	strb	r2, [r5, r3]
    bb3e:	3601      	adds	r6, #1
    bb40:	b2f6      	uxtb	r6, r6
    bb42:	e76e      	b.n	ba22 <IncludeMacCommandsResponse+0xe>
    bb44:	213f      	movs	r1, #63	; 0x3f
    bb46:	400a      	ands	r2, r1
    bb48:	e7f8      	b.n	bb3c <IncludeMacCommandsResponse+0x128>
    bb4a:	2207      	movs	r2, #7
    bb4c:	2103      	movs	r1, #3
    bb4e:	552a      	strb	r2, [r5, r4]
    bb50:	2200      	movs	r2, #0
    bb52:	4371      	muls	r1, r6
    bb54:	b29b      	uxth	r3, r3
    bb56:	18eb      	adds	r3, r5, r3
    bb58:	701a      	strb	r2, [r3, #0]
    bb5a:	4a19      	ldr	r2, [pc, #100]	; (bbc0 <IncludeMacCommandsResponse+0x1ac>)
    bb5c:	1852      	adds	r2, r2, r1
    bb5e:	3290      	adds	r2, #144	; 0x90
    bb60:	7891      	ldrb	r1, [r2, #2]
    bb62:	09c9      	lsrs	r1, r1, #7
    bb64:	7019      	strb	r1, [r3, #0]
    bb66:	7892      	ldrb	r2, [r2, #2]
    bb68:	b2c8      	uxtb	r0, r1
    bb6a:	0652      	lsls	r2, r2, #25
    bb6c:	d518      	bpl.n	bba0 <IncludeMacCommandsResponse+0x18c>
    bb6e:	2202      	movs	r2, #2
    bb70:	4302      	orrs	r2, r0
    bb72:	e7a8      	b.n	bac6 <IncludeMacCommandsResponse+0xb2>
    bb74:	2209      	movs	r2, #9
    bb76:	552a      	strb	r2, [r5, r4]
    bb78:	b29c      	uxth	r4, r3
    bb7a:	e7e0      	b.n	bb3e <IncludeMacCommandsResponse+0x12a>
    bb7c:	220a      	movs	r2, #10
    bb7e:	2103      	movs	r1, #3
    bb80:	552a      	strb	r2, [r5, r4]
    bb82:	2200      	movs	r2, #0
    bb84:	4371      	muls	r1, r6
    bb86:	b29b      	uxth	r3, r3
    bb88:	18eb      	adds	r3, r5, r3
    bb8a:	701a      	strb	r2, [r3, #0]
    bb8c:	4a0c      	ldr	r2, [pc, #48]	; (bbc0 <IncludeMacCommandsResponse+0x1ac>)
    bb8e:	1852      	adds	r2, r2, r1
    bb90:	3290      	adds	r2, #144	; 0x90
    bb92:	7891      	ldrb	r1, [r2, #2]
    bb94:	09c9      	lsrs	r1, r1, #7
    bb96:	7019      	strb	r1, [r3, #0]
    bb98:	78d2      	ldrb	r2, [r2, #3]
    bb9a:	b2c8      	uxtb	r0, r1
    bb9c:	07d2      	lsls	r2, r2, #31
    bb9e:	d4e6      	bmi.n	bb6e <IncludeMacCommandsResponse+0x15a>
    bba0:	3402      	adds	r4, #2
    bba2:	b2a4      	uxth	r4, r4
    bba4:	e7cb      	b.n	bb3e <IncludeMacCommandsResponse+0x12a>
    bba6:	0013      	movs	r3, r2
    bba8:	21ff      	movs	r1, #255	; 0xff
    bbaa:	33dd      	adds	r3, #221	; 0xdd
    bbac:	7019      	strb	r1, [r3, #0]
    bbae:	2300      	movs	r3, #0
    bbb0:	32de      	adds	r2, #222	; 0xde
    bbb2:	7013      	strb	r3, [r2, #0]
    bbb4:	1c63      	adds	r3, r4, #1
    bbb6:	2202      	movs	r2, #2
    bbb8:	e7dd      	b.n	bb76 <IncludeMacCommandsResponse+0x162>
    bbba:	5529      	strb	r1, [r5, r4]
    bbbc:	e7dc      	b.n	bb78 <IncludeMacCommandsResponse+0x164>
    bbbe:	46c0      	nop			; (mov r8, r8)
    bbc0:	200017d4 	.word	0x200017d4
    bbc4:	0001afba 	.word	0x0001afba
    bbc8:	000151f1 	.word	0x000151f1
    bbcc:	200019ab 	.word	0x200019ab
    bbd0:	0000fefd 	.word	0x0000fefd

0000bbd4 <UpdateJoinSuccessState>:
    bbd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    bbd6:	4c35      	ldr	r4, [pc, #212]	; (bcac <UpdateJoinSuccessState+0xd8>)
    bbd8:	2104      	movs	r1, #4
    bbda:	0022      	movs	r2, r4
    bbdc:	328c      	adds	r2, #140	; 0x8c
    bbde:	7813      	ldrb	r3, [r2, #0]
    bbe0:	2001      	movs	r0, #1
    bbe2:	438b      	bics	r3, r1
    bbe4:	7013      	strb	r3, [r2, #0]
    bbe6:	0022      	movs	r2, r4
    bbe8:	2500      	movs	r5, #0
    bbea:	327c      	adds	r2, #124	; 0x7c
    bbec:	7813      	ldrb	r3, [r2, #0]
    bbee:	b087      	sub	sp, #28
    bbf0:	4303      	orrs	r3, r0
    bbf2:	3107      	adds	r1, #7
    bbf4:	4f2e      	ldr	r7, [pc, #184]	; (bcb0 <UpdateJoinSuccessState+0xdc>)
    bbf6:	7013      	strb	r3, [r2, #0]
    bbf8:	47b8      	blx	r7
    bbfa:	1d23      	adds	r3, r4, #4
    bbfc:	2116      	movs	r1, #22
    bbfe:	0028      	movs	r0, r5
    bc00:	67dd      	str	r5, [r3, #124]	; 0x7c
    bc02:	47b8      	blx	r7
    bc04:	0023      	movs	r3, r4
    bc06:	2020      	movs	r0, #32
    bc08:	33ff      	adds	r3, #255	; 0xff
    bc0a:	7c5b      	ldrb	r3, [r3, #17]
    bc0c:	4e29      	ldr	r6, [pc, #164]	; (bcb4 <UpdateJoinSuccessState+0xe0>)
    bc0e:	4203      	tst	r3, r0
    bc10:	d014      	beq.n	bc3c <UpdateJoinSuccessState+0x68>
    bc12:	0023      	movs	r3, r4
    bc14:	337b      	adds	r3, #123	; 0x7b
    bc16:	701d      	strb	r5, [r3, #0]
    bc18:	0023      	movs	r3, r4
    bc1a:	a904      	add	r1, sp, #16
    bc1c:	336f      	adds	r3, #111	; 0x6f
    bc1e:	710d      	strb	r5, [r1, #4]
    bc20:	701d      	strb	r5, [r3, #0]
    bc22:	705d      	strb	r5, [r3, #1]
    bc24:	709d      	strb	r5, [r3, #2]
    bc26:	70dd      	strb	r5, [r3, #3]
    bc28:	711d      	strb	r5, [r3, #4]
    bc2a:	715d      	strb	r5, [r3, #5]
    bc2c:	719d      	strb	r5, [r3, #6]
    bc2e:	71dd      	strb	r5, [r3, #7]
    bc30:	47b0      	blx	r6
    bc32:	210f      	movs	r1, #15
    bc34:	2021      	movs	r0, #33	; 0x21
    bc36:	4469      	add	r1, sp
    bc38:	700d      	strb	r5, [r1, #0]
    bc3a:	47b0      	blx	r6
    bc3c:	0023      	movs	r3, r4
    bc3e:	2500      	movs	r5, #0
    bc40:	3308      	adds	r3, #8
    bc42:	210a      	movs	r1, #10
    bc44:	2001      	movs	r0, #1
    bc46:	67dd      	str	r5, [r3, #124]	; 0x7c
    bc48:	47b8      	blx	r7
    bc4a:	0023      	movs	r3, r4
    bc4c:	33c2      	adds	r3, #194	; 0xc2
    bc4e:	801d      	strh	r5, [r3, #0]
    bc50:	0022      	movs	r2, r4
    bc52:	0023      	movs	r3, r4
    bc54:	210e      	movs	r1, #14
    bc56:	327c      	adds	r2, #124	; 0x7c
    bc58:	33ed      	adds	r3, #237	; 0xed
    bc5a:	701d      	strb	r5, [r3, #0]
    bc5c:	7813      	ldrb	r3, [r2, #0]
    bc5e:	203a      	movs	r0, #58	; 0x3a
    bc60:	438b      	bics	r3, r1
    bc62:	0029      	movs	r1, r5
    bc64:	7013      	strb	r3, [r2, #0]
    bc66:	47b0      	blx	r6
    bc68:	0023      	movs	r3, r4
    bc6a:	337d      	adds	r3, #125	; 0x7d
    bc6c:	781b      	ldrb	r3, [r3, #0]
    bc6e:	079b      	lsls	r3, r3, #30
    bc70:	d50c      	bpl.n	bc8c <UpdateJoinSuccessState+0xb8>
    bc72:	0023      	movs	r3, r4
    bc74:	21fa      	movs	r1, #250	; 0xfa
    bc76:	3388      	adds	r3, #136	; 0x88
    bc78:	681b      	ldr	r3, [r3, #0]
    bc7a:	34e7      	adds	r4, #231	; 0xe7
    bc7c:	0089      	lsls	r1, r1, #2
    bc7e:	7820      	ldrb	r0, [r4, #0]
    bc80:	4359      	muls	r1, r3
    bc82:	9500      	str	r5, [sp, #0]
    bc84:	4b0c      	ldr	r3, [pc, #48]	; (bcb8 <UpdateJoinSuccessState+0xe4>)
    bc86:	002a      	movs	r2, r5
    bc88:	4c0c      	ldr	r4, [pc, #48]	; (bcbc <UpdateJoinSuccessState+0xe8>)
    bc8a:	47a0      	blx	r4
    bc8c:	490c      	ldr	r1, [pc, #48]	; (bcc0 <UpdateJoinSuccessState+0xec>)
    bc8e:	794a      	ldrb	r2, [r1, #5]
    bc90:	790b      	ldrb	r3, [r1, #4]
    bc92:	0212      	lsls	r2, r2, #8
    bc94:	431a      	orrs	r2, r3
    bc96:	798b      	ldrb	r3, [r1, #6]
    bc98:	041b      	lsls	r3, r3, #16
    bc9a:	431a      	orrs	r2, r3
    bc9c:	79cb      	ldrb	r3, [r1, #7]
    bc9e:	061b      	lsls	r3, r3, #24
    bca0:	4313      	orrs	r3, r2
    bca2:	d001      	beq.n	bca8 <UpdateJoinSuccessState+0xd4>
    bca4:	2008      	movs	r0, #8
    bca6:	4798      	blx	r3
    bca8:	b007      	add	sp, #28
    bcaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bcac:	200017d4 	.word	0x200017d4
    bcb0:	00009729 	.word	0x00009729
    bcb4:	00009269 	.word	0x00009269
    bcb8:	0000be01 	.word	0x0000be01
    bcbc:	00009b55 	.word	0x00009b55
    bcc0:	20001acc 	.word	0x20001acc

0000bcc4 <PrepareSessionKeys>:
    bcc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bcc6:	0004      	movs	r4, r0
    bcc8:	2603      	movs	r6, #3
    bcca:	000d      	movs	r5, r1
    bccc:	0017      	movs	r7, r2
    bcce:	4b09      	ldr	r3, [pc, #36]	; (bcf4 <PrepareSessionKeys+0x30>)
    bcd0:	2210      	movs	r2, #16
    bcd2:	2100      	movs	r1, #0
    bcd4:	4798      	blx	r3
    bcd6:	0032      	movs	r2, r6
    bcd8:	0029      	movs	r1, r5
    bcda:	1c60      	adds	r0, r4, #1
    bcdc:	4d06      	ldr	r5, [pc, #24]	; (bcf8 <PrepareSessionKeys+0x34>)
    bcde:	47a8      	blx	r5
    bce0:	0032      	movs	r2, r6
    bce2:	0039      	movs	r1, r7
    bce4:	1d20      	adds	r0, r4, #4
    bce6:	47a8      	blx	r5
    bce8:	1de0      	adds	r0, r4, #7
    bcea:	2202      	movs	r2, #2
    bcec:	4903      	ldr	r1, [pc, #12]	; (bcfc <PrepareSessionKeys+0x38>)
    bcee:	47a8      	blx	r5
    bcf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bcf2:	46c0      	nop			; (mov r8, r8)
    bcf4:	000151f1 	.word	0x000151f1
    bcf8:	0001516d 	.word	0x0001516d
    bcfc:	20001898 	.word	0x20001898

0000bd00 <AssembleEncryptionBlock>:
    bd00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    bd02:	001e      	movs	r6, r3
    bd04:	4c0b      	ldr	r4, [pc, #44]	; (bd34 <AssembleEncryptionBlock+0x34>)
    bd06:	0017      	movs	r7, r2
    bd08:	4b0b      	ldr	r3, [pc, #44]	; (bd38 <AssembleEncryptionBlock+0x38>)
    bd0a:	0005      	movs	r5, r0
    bd0c:	9101      	str	r1, [sp, #4]
    bd0e:	2210      	movs	r2, #16
    bd10:	2100      	movs	r1, #0
    bd12:	0020      	movs	r0, r4
    bd14:	4798      	blx	r3
    bd16:	7026      	strb	r6, [r4, #0]
    bd18:	2604      	movs	r6, #4
    bd1a:	7165      	strb	r5, [r4, #5]
    bd1c:	0032      	movs	r2, r6
    bd1e:	4d07      	ldr	r5, [pc, #28]	; (bd3c <AssembleEncryptionBlock+0x3c>)
    bd20:	a908      	add	r1, sp, #32
    bd22:	1da0      	adds	r0, r4, #6
    bd24:	47a8      	blx	r5
    bd26:	0020      	movs	r0, r4
    bd28:	0032      	movs	r2, r6
    bd2a:	a901      	add	r1, sp, #4
    bd2c:	300a      	adds	r0, #10
    bd2e:	47a8      	blx	r5
    bd30:	73e7      	strb	r7, [r4, #15]
    bd32:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    bd34:	20000ea8 	.word	0x20000ea8
    bd38:	000151f1 	.word	0x000151f1
    bd3c:	0001516d 	.word	0x0001516d

0000bd40 <ConfigureRadio>:
    bd40:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bd42:	0001      	movs	r1, r0
    bd44:	0005      	movs	r5, r0
    bd46:	4c11      	ldr	r4, [pc, #68]	; (bd8c <ConfigureRadio+0x4c>)
    bd48:	3109      	adds	r1, #9
    bd4a:	2009      	movs	r0, #9
    bd4c:	47a0      	blx	r4
    bd4e:	0029      	movs	r1, r5
    bd50:	2001      	movs	r0, #1
    bd52:	47a0      	blx	r4
    bd54:	1d29      	adds	r1, r5, #4
    bd56:	200a      	movs	r0, #10
    bd58:	47a0      	blx	r4
    bd5a:	7a6b      	ldrb	r3, [r5, #9]
    bd5c:	2b01      	cmp	r3, #1
    bd5e:	d10b      	bne.n	bd78 <ConfigureRadio+0x38>
    bd60:	0029      	movs	r1, r5
    bd62:	2016      	movs	r0, #22
    bd64:	310b      	adds	r1, #11
    bd66:	47a0      	blx	r4
    bd68:	0029      	movs	r1, r5
    bd6a:	2007      	movs	r0, #7
    bd6c:	310a      	adds	r1, #10
    bd6e:	47a0      	blx	r4
    bd70:	2000      	movs	r0, #0
    bd72:	4907      	ldr	r1, [pc, #28]	; (bd90 <ConfigureRadio+0x50>)
    bd74:	47a0      	blx	r4
    bd76:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    bd78:	466b      	mov	r3, sp
    bd7a:	1dd9      	adds	r1, r3, #7
    bd7c:	2303      	movs	r3, #3
    bd7e:	2013      	movs	r0, #19
    bd80:	700b      	strb	r3, [r1, #0]
    bd82:	47a0      	blx	r4
    bd84:	4903      	ldr	r1, [pc, #12]	; (bd94 <ConfigureRadio+0x54>)
    bd86:	2012      	movs	r0, #18
    bd88:	e7f4      	b.n	bd74 <ConfigureRadio+0x34>
    bd8a:	46c0      	nop			; (mov r8, r8)
    bd8c:	0000ffed 	.word	0x0000ffed
    bd90:	200018cb 	.word	0x200018cb
    bd94:	0001afb7 	.word	0x0001afb7

0000bd98 <StopReceiveWindow2Timer>:
    bd98:	b510      	push	{r4, lr}
    bd9a:	4c0b      	ldr	r4, [pc, #44]	; (bdc8 <StopReceiveWindow2Timer+0x30>)
    bd9c:	0022      	movs	r2, r4
    bd9e:	32f4      	adds	r2, #244	; 0xf4
    bda0:	7812      	ldrb	r2, [r2, #0]
    bda2:	2a01      	cmp	r2, #1
    bda4:	d10e      	bne.n	bdc4 <StopReceiveWindow2Timer+0x2c>
    bda6:	0021      	movs	r1, r4
    bda8:	200e      	movs	r0, #14
    bdaa:	317c      	adds	r1, #124	; 0x7c
    bdac:	780a      	ldrb	r2, [r1, #0]
    bdae:	34e5      	adds	r4, #229	; 0xe5
    bdb0:	4382      	bics	r2, r0
    bdb2:	700a      	strb	r2, [r1, #0]
    bdb4:	7820      	ldrb	r0, [r4, #0]
    bdb6:	4b05      	ldr	r3, [pc, #20]	; (bdcc <StopReceiveWindow2Timer+0x34>)
    bdb8:	4798      	blx	r3
    bdba:	2800      	cmp	r0, #0
    bdbc:	d002      	beq.n	bdc4 <StopReceiveWindow2Timer+0x2c>
    bdbe:	7820      	ldrb	r0, [r4, #0]
    bdc0:	4b03      	ldr	r3, [pc, #12]	; (bdd0 <StopReceiveWindow2Timer+0x38>)
    bdc2:	4798      	blx	r3
    bdc4:	bd10      	pop	{r4, pc}
    bdc6:	46c0      	nop			; (mov r8, r8)
    bdc8:	200017d4 	.word	0x200017d4
    bdcc:	00009ced 	.word	0x00009ced
    bdd0:	00009e61 	.word	0x00009e61

0000bdd4 <LorawanLinkCheckCallback.part.1>:
    bdd4:	4b07      	ldr	r3, [pc, #28]	; (bdf4 <LorawanLinkCheckCallback.part.1+0x20>)
    bdd6:	b513      	push	{r0, r1, r4, lr}
    bdd8:	001a      	movs	r2, r3
    bdda:	21fa      	movs	r1, #250	; 0xfa
    bddc:	3288      	adds	r2, #136	; 0x88
    bdde:	6812      	ldr	r2, [r2, #0]
    bde0:	0089      	lsls	r1, r1, #2
    bde2:	4351      	muls	r1, r2
    bde4:	2200      	movs	r2, #0
    bde6:	33e7      	adds	r3, #231	; 0xe7
    bde8:	7818      	ldrb	r0, [r3, #0]
    bdea:	4c03      	ldr	r4, [pc, #12]	; (bdf8 <LorawanLinkCheckCallback.part.1+0x24>)
    bdec:	9200      	str	r2, [sp, #0]
    bdee:	4b03      	ldr	r3, [pc, #12]	; (bdfc <LorawanLinkCheckCallback.part.1+0x28>)
    bdf0:	47a0      	blx	r4
    bdf2:	bd13      	pop	{r0, r1, r4, pc}
    bdf4:	200017d4 	.word	0x200017d4
    bdf8:	00009b55 	.word	0x00009b55
    bdfc:	0000be01 	.word	0x0000be01

0000be00 <LorawanLinkCheckCallback>:
    be00:	4b17      	ldr	r3, [pc, #92]	; (be60 <LorawanLinkCheckCallback+0x60>)
    be02:	20a0      	movs	r0, #160	; 0xa0
    be04:	001a      	movs	r2, r3
    be06:	2180      	movs	r1, #128	; 0x80
    be08:	b510      	push	{r4, lr}
    be0a:	327c      	adds	r2, #124	; 0x7c
    be0c:	8812      	ldrh	r2, [r2, #0]
    be0e:	0080      	lsls	r0, r0, #2
    be10:	0089      	lsls	r1, r1, #2
    be12:	4002      	ands	r2, r0
    be14:	428a      	cmp	r2, r1
    be16:	d11c      	bne.n	be52 <LorawanLinkCheckCallback+0x52>
    be18:	001a      	movs	r2, r3
    be1a:	32d8      	adds	r2, #216	; 0xd8
    be1c:	7810      	ldrb	r0, [r2, #0]
    be1e:	2403      	movs	r4, #3
    be20:	2200      	movs	r2, #0
    be22:	b2d1      	uxtb	r1, r2
    be24:	4281      	cmp	r1, r0
    be26:	d30d      	bcc.n	be44 <LorawanLinkCheckCallback+0x44>
    be28:	d113      	bne.n	be52 <LorawanLinkCheckCallback+0x52>
    be2a:	2203      	movs	r2, #3
    be2c:	434a      	muls	r2, r1
    be2e:	2102      	movs	r1, #2
    be30:	189a      	adds	r2, r3, r2
    be32:	3291      	adds	r2, #145	; 0x91
    be34:	7011      	strb	r1, [r2, #0]
    be36:	280f      	cmp	r0, #15
    be38:	d80b      	bhi.n	be52 <LorawanLinkCheckCallback+0x52>
    be3a:	001a      	movs	r2, r3
    be3c:	3001      	adds	r0, #1
    be3e:	32d8      	adds	r2, #216	; 0xd8
    be40:	7010      	strb	r0, [r2, #0]
    be42:	e006      	b.n	be52 <LorawanLinkCheckCallback+0x52>
    be44:	0021      	movs	r1, r4
    be46:	3201      	adds	r2, #1
    be48:	4351      	muls	r1, r2
    be4a:	318e      	adds	r1, #142	; 0x8e
    be4c:	5c59      	ldrb	r1, [r3, r1]
    be4e:	2902      	cmp	r1, #2
    be50:	d1e7      	bne.n	be22 <LorawanLinkCheckCallback+0x22>
    be52:	337d      	adds	r3, #125	; 0x7d
    be54:	781b      	ldrb	r3, [r3, #0]
    be56:	079b      	lsls	r3, r3, #30
    be58:	d501      	bpl.n	be5e <LorawanLinkCheckCallback+0x5e>
    be5a:	4b02      	ldr	r3, [pc, #8]	; (be64 <LorawanLinkCheckCallback+0x64>)
    be5c:	4798      	blx	r3
    be5e:	bd10      	pop	{r4, pc}
    be60:	200017d4 	.word	0x200017d4
    be64:	0000bdd5 	.word	0x0000bdd5

0000be68 <LORAWAN_Init>:
    be68:	2270      	movs	r2, #112	; 0x70
    be6a:	b5f0      	push	{r4, r5, r6, r7, lr}
    be6c:	4b3e      	ldr	r3, [pc, #248]	; (bf68 <LORAWAN_Init+0x100>)
    be6e:	b087      	sub	sp, #28
    be70:	781b      	ldrb	r3, [r3, #0]
    be72:	0005      	movs	r5, r0
    be74:	011b      	lsls	r3, r3, #4
    be76:	4013      	ands	r3, r2
    be78:	4a3c      	ldr	r2, [pc, #240]	; (bf6c <LORAWAN_Init+0x104>)
    be7a:	000e      	movs	r6, r1
    be7c:	7812      	ldrb	r2, [r2, #0]
    be7e:	0912      	lsrs	r2, r2, #4
    be80:	4313      	orrs	r3, r2
    be82:	2b1f      	cmp	r3, #31
    be84:	d000      	beq.n	be88 <LORAWAN_Init+0x20>
    be86:	e7fe      	b.n	be86 <LORAWAN_Init+0x1e>
    be88:	4f39      	ldr	r7, [pc, #228]	; (bf70 <LORAWAN_Init+0x108>)
    be8a:	003b      	movs	r3, r7
    be8c:	33ef      	adds	r3, #239	; 0xef
    be8e:	781b      	ldrb	r3, [r3, #0]
    be90:	2b00      	cmp	r3, #0
    be92:	d166      	bne.n	bf62 <LORAWAN_Init+0xfa>
    be94:	4837      	ldr	r0, [pc, #220]	; (bf74 <LORAWAN_Init+0x10c>)
    be96:	4c38      	ldr	r4, [pc, #224]	; (bf78 <LORAWAN_Init+0x110>)
    be98:	47a0      	blx	r4
    be9a:	2808      	cmp	r0, #8
    be9c:	d034      	beq.n	bf08 <LORAWAN_Init+0xa0>
    be9e:	4b37      	ldr	r3, [pc, #220]	; (bf7c <LORAWAN_Init+0x114>)
    bea0:	4798      	blx	r3
    bea2:	37ef      	adds	r7, #239	; 0xef
    bea4:	783b      	ldrb	r3, [r7, #0]
    bea6:	2b00      	cmp	r3, #0
    bea8:	d018      	beq.n	bedc <LORAWAN_Init+0x74>
    beaa:	4b35      	ldr	r3, [pc, #212]	; (bf80 <LORAWAN_Init+0x118>)
    beac:	0a2a      	lsrs	r2, r5, #8
    beae:	705a      	strb	r2, [r3, #1]
    beb0:	0c2a      	lsrs	r2, r5, #16
    beb2:	709a      	strb	r2, [r3, #2]
    beb4:	0a32      	lsrs	r2, r6, #8
    beb6:	701d      	strb	r5, [r3, #0]
    beb8:	711e      	strb	r6, [r3, #4]
    beba:	715a      	strb	r2, [r3, #5]
    bebc:	0e2d      	lsrs	r5, r5, #24
    bebe:	0c32      	lsrs	r2, r6, #16
    bec0:	0e36      	lsrs	r6, r6, #24
    bec2:	719a      	strb	r2, [r3, #6]
    bec4:	70dd      	strb	r5, [r3, #3]
    bec6:	71de      	strb	r6, [r3, #7]
    bec8:	4b2e      	ldr	r3, [pc, #184]	; (bf84 <LORAWAN_Init+0x11c>)
    beca:	4798      	blx	r3
    becc:	492e      	ldr	r1, [pc, #184]	; (bf88 <LORAWAN_Init+0x120>)
    bece:	4b2f      	ldr	r3, [pc, #188]	; (bf8c <LORAWAN_Init+0x124>)
    bed0:	201a      	movs	r0, #26
    bed2:	4798      	blx	r3
    bed4:	4b2e      	ldr	r3, [pc, #184]	; (bf90 <LORAWAN_Init+0x128>)
    bed6:	4798      	blx	r3
    bed8:	4b2e      	ldr	r3, [pc, #184]	; (bf94 <LORAWAN_Init+0x12c>)
    beda:	4798      	blx	r3
    bedc:	2317      	movs	r3, #23
    bede:	ac02      	add	r4, sp, #8
    bee0:	7123      	strb	r3, [r4, #4]
    bee2:	4b2d      	ldr	r3, [pc, #180]	; (bf98 <LORAWAN_Init+0x130>)
    bee4:	9a03      	ldr	r2, [sp, #12]
    bee6:	9300      	str	r3, [sp, #0]
    bee8:	4d2c      	ldr	r5, [pc, #176]	; (bf9c <LORAWAN_Init+0x134>)
    beea:	492d      	ldr	r1, [pc, #180]	; (bfa0 <LORAWAN_Init+0x138>)
    beec:	4b2d      	ldr	r3, [pc, #180]	; (bfa4 <LORAWAN_Init+0x13c>)
    beee:	2000      	movs	r0, #0
    bef0:	47a8      	blx	r5
    bef2:	230f      	movs	r3, #15
    bef4:	7123      	strb	r3, [r4, #4]
    bef6:	4b2c      	ldr	r3, [pc, #176]	; (bfa8 <LORAWAN_Init+0x140>)
    bef8:	492c      	ldr	r1, [pc, #176]	; (bfac <LORAWAN_Init+0x144>)
    befa:	9300      	str	r3, [sp, #0]
    befc:	6862      	ldr	r2, [r4, #4]
    befe:	4b2c      	ldr	r3, [pc, #176]	; (bfb0 <LORAWAN_Init+0x148>)
    bf00:	2001      	movs	r0, #1
    bf02:	47a8      	blx	r5
    bf04:	b007      	add	sp, #28
    bf06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bf08:	482a      	ldr	r0, [pc, #168]	; (bfb4 <LORAWAN_Init+0x14c>)
    bf0a:	47a0      	blx	r4
    bf0c:	2808      	cmp	r0, #8
    bf0e:	d1c6      	bne.n	be9e <LORAWAN_Init+0x36>
    bf10:	4829      	ldr	r0, [pc, #164]	; (bfb8 <LORAWAN_Init+0x150>)
    bf12:	47a0      	blx	r4
    bf14:	2808      	cmp	r0, #8
    bf16:	d1c2      	bne.n	be9e <LORAWAN_Init+0x36>
    bf18:	4828      	ldr	r0, [pc, #160]	; (bfbc <LORAWAN_Init+0x154>)
    bf1a:	47a0      	blx	r4
    bf1c:	2808      	cmp	r0, #8
    bf1e:	d1be      	bne.n	be9e <LORAWAN_Init+0x36>
    bf20:	4827      	ldr	r0, [pc, #156]	; (bfc0 <LORAWAN_Init+0x158>)
    bf22:	47a0      	blx	r4
    bf24:	2808      	cmp	r0, #8
    bf26:	d1ba      	bne.n	be9e <LORAWAN_Init+0x36>
    bf28:	4826      	ldr	r0, [pc, #152]	; (bfc4 <LORAWAN_Init+0x15c>)
    bf2a:	47a0      	blx	r4
    bf2c:	2808      	cmp	r0, #8
    bf2e:	d1b6      	bne.n	be9e <LORAWAN_Init+0x36>
    bf30:	4825      	ldr	r0, [pc, #148]	; (bfc8 <LORAWAN_Init+0x160>)
    bf32:	47a0      	blx	r4
    bf34:	2808      	cmp	r0, #8
    bf36:	d1b2      	bne.n	be9e <LORAWAN_Init+0x36>
    bf38:	4824      	ldr	r0, [pc, #144]	; (bfcc <LORAWAN_Init+0x164>)
    bf3a:	47a0      	blx	r4
    bf3c:	2808      	cmp	r0, #8
    bf3e:	d1ae      	bne.n	be9e <LORAWAN_Init+0x36>
    bf40:	4823      	ldr	r0, [pc, #140]	; (bfd0 <LORAWAN_Init+0x168>)
    bf42:	47a0      	blx	r4
    bf44:	2808      	cmp	r0, #8
    bf46:	d1aa      	bne.n	be9e <LORAWAN_Init+0x36>
    bf48:	4822      	ldr	r0, [pc, #136]	; (bfd4 <LORAWAN_Init+0x16c>)
    bf4a:	47a0      	blx	r4
    bf4c:	2808      	cmp	r0, #8
    bf4e:	d1a6      	bne.n	be9e <LORAWAN_Init+0x36>
    bf50:	4821      	ldr	r0, [pc, #132]	; (bfd8 <LORAWAN_Init+0x170>)
    bf52:	47a0      	blx	r4
    bf54:	2808      	cmp	r0, #8
    bf56:	d1a2      	bne.n	be9e <LORAWAN_Init+0x36>
    bf58:	003b      	movs	r3, r7
    bf5a:	2201      	movs	r2, #1
    bf5c:	33ef      	adds	r3, #239	; 0xef
    bf5e:	701a      	strb	r2, [r3, #0]
    bf60:	e79f      	b.n	bea2 <LORAWAN_Init+0x3a>
    bf62:	4b1e      	ldr	r3, [pc, #120]	; (bfdc <LORAWAN_Init+0x174>)
    bf64:	4798      	blx	r3
    bf66:	e79c      	b.n	bea2 <LORAWAN_Init+0x3a>
    bf68:	41003fe8 	.word	0x41003fe8
    bf6c:	41003fe4 	.word	0x41003fe4
    bf70:	200017d4 	.word	0x200017d4
    bf74:	200018b6 	.word	0x200018b6
    bf78:	00009b21 	.word	0x00009b21
    bf7c:	00009a65 	.word	0x00009a65
    bf80:	20001acc 	.word	0x20001acc
    bf84:	00010209 	.word	0x00010209
    bf88:	0000db0d 	.word	0x0000db0d
    bf8c:	0000ffed 	.word	0x0000ffed
    bf90:	0000a2ed 	.word	0x0000a2ed
    bf94:	0001537d 	.word	0x0001537d
    bf98:	0000fbbd 	.word	0x0000fbbd
    bf9c:	00009739 	.word	0x00009739
    bfa0:	200017bb 	.word	0x200017bb
    bfa4:	0001afd4 	.word	0x0001afd4
    bfa8:	0000fbc1 	.word	0x0000fbc1
    bfac:	200016ac 	.word	0x200016ac
    bfb0:	0001b08c 	.word	0x0001b08c
    bfb4:	200018b7 	.word	0x200018b7
    bfb8:	200018b8 	.word	0x200018b8
    bfbc:	200018b9 	.word	0x200018b9
    bfc0:	200018bb 	.word	0x200018bb
    bfc4:	200018bc 	.word	0x200018bc
    bfc8:	200018ba 	.word	0x200018ba
    bfcc:	200018bd 	.word	0x200018bd
    bfd0:	200018c6 	.word	0x200018c6
    bfd4:	200018c7 	.word	0x200018c7
    bfd8:	200018f0 	.word	0x200018f0
    bfdc:	0000b951 	.word	0x0000b951

0000bfe0 <LORAWAN_Send>:
    bfe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    bfe2:	4c37      	ldr	r4, [pc, #220]	; (c0c0 <LORAWAN_Send+0xe0>)
    bfe4:	0006      	movs	r6, r0
    bfe6:	0023      	movs	r3, r4
    bfe8:	337c      	adds	r3, #124	; 0x7c
    bfea:	781b      	ldrb	r3, [r3, #0]
    bfec:	250f      	movs	r5, #15
    bfee:	b25a      	sxtb	r2, r3
    bff0:	2a00      	cmp	r2, #0
    bff2:	db0b      	blt.n	c00c <LORAWAN_Send+0x2c>
    bff4:	3d03      	subs	r5, #3
    bff6:	065a      	lsls	r2, r3, #25
    bff8:	d408      	bmi.n	c00c <LORAWAN_Send+0x2c>
    bffa:	3d03      	subs	r5, #3
    bffc:	07db      	lsls	r3, r3, #31
    bffe:	d505      	bpl.n	c00c <LORAWAN_Send+0x2c>
    c000:	23ea      	movs	r3, #234	; 0xea
    c002:	005b      	lsls	r3, r3, #1
    c004:	5ce7      	ldrb	r7, [r4, r3]
    c006:	2f00      	cmp	r7, #0
    c008:	d102      	bne.n	c010 <LORAWAN_Send+0x30>
    c00a:	2511      	movs	r5, #17
    c00c:	0028      	movs	r0, r5
    c00e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    c010:	2800      	cmp	r0, #0
    c012:	d10e      	bne.n	c032 <LORAWAN_Send+0x52>
    c014:	2700      	movs	r7, #0
    c016:	1d23      	adds	r3, r4, #4
    c018:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    c01a:	3301      	adds	r3, #1
    c01c:	d123      	bne.n	c066 <LORAWAN_Send+0x86>
    c01e:	2001      	movs	r0, #1
    c020:	347c      	adds	r4, #124	; 0x7c
    c022:	78a3      	ldrb	r3, [r4, #2]
    c024:	210b      	movs	r1, #11
    c026:	4303      	orrs	r3, r0
    c028:	70a3      	strb	r3, [r4, #2]
    c02a:	4b26      	ldr	r3, [pc, #152]	; (c0c4 <LORAWAN_Send+0xe4>)
    c02c:	4798      	blx	r3
    c02e:	250d      	movs	r5, #13
    c030:	e7ec      	b.n	c00c <LORAWAN_Send+0x2c>
    c032:	7843      	ldrb	r3, [r0, #1]
    c034:	7a02      	ldrb	r2, [r0, #8]
    c036:	3b01      	subs	r3, #1
    c038:	b2db      	uxtb	r3, r3
    c03a:	9201      	str	r2, [sp, #4]
    c03c:	2bdf      	cmp	r3, #223	; 0xdf
    c03e:	d902      	bls.n	c046 <LORAWAN_Send+0x66>
    c040:	250a      	movs	r5, #10
    c042:	2a00      	cmp	r2, #0
    c044:	d1e2      	bne.n	c00c <LORAWAN_Send+0x2c>
    c046:	4b20      	ldr	r3, [pc, #128]	; (c0c8 <LORAWAN_Send+0xe8>)
    c048:	4798      	blx	r3
    c04a:	4684      	mov	ip, r0
    c04c:	9b01      	ldr	r3, [sp, #4]
    c04e:	9000      	str	r0, [sp, #0]
    c050:	4463      	add	r3, ip
    c052:	001d      	movs	r5, r3
    c054:	4b1d      	ldr	r3, [pc, #116]	; (c0cc <LORAWAN_Send+0xec>)
    c056:	4798      	blx	r3
    c058:	4285      	cmp	r5, r0
    c05a:	dddb      	ble.n	c014 <LORAWAN_Send+0x34>
    c05c:	9b00      	ldr	r3, [sp, #0]
    c05e:	250e      	movs	r5, #14
    c060:	2b00      	cmp	r3, #0
    c062:	d0d3      	beq.n	c00c <LORAWAN_Send+0x2c>
    c064:	e7d7      	b.n	c016 <LORAWAN_Send+0x36>
    c066:	0023      	movs	r3, r4
    c068:	33f4      	adds	r3, #244	; 0xf4
    c06a:	781b      	ldrb	r3, [r3, #0]
    c06c:	2b04      	cmp	r3, #4
    c06e:	d01d      	beq.n	c0ac <LORAWAN_Send+0xcc>
    c070:	0023      	movs	r3, r4
    c072:	33f4      	adds	r3, #244	; 0xf4
    c074:	781b      	ldrb	r3, [r3, #0]
    c076:	2b01      	cmp	r3, #1
    c078:	d105      	bne.n	c086 <LORAWAN_Send+0xa6>
    c07a:	0023      	movs	r3, r4
    c07c:	337c      	adds	r3, #124	; 0x7c
    c07e:	781a      	ldrb	r2, [r3, #0]
    c080:	230e      	movs	r3, #14
    c082:	421a      	tst	r2, r3
    c084:	d1c1      	bne.n	c00a <LORAWAN_Send+0x2a>
    c086:	0023      	movs	r3, r4
    c088:	33fc      	adds	r3, #252	; 0xfc
    c08a:	2f00      	cmp	r7, #0
    c08c:	d113      	bne.n	c0b6 <LORAWAN_Send+0xd6>
    c08e:	2508      	movs	r5, #8
    c090:	601e      	str	r6, [r3, #0]
    c092:	23ea      	movs	r3, #234	; 0xea
    c094:	2200      	movs	r2, #0
    c096:	005b      	lsls	r3, r3, #1
    c098:	54e2      	strb	r2, [r4, r3]
    c09a:	2001      	movs	r0, #1
    c09c:	4b0c      	ldr	r3, [pc, #48]	; (c0d0 <LORAWAN_Send+0xf0>)
    c09e:	4798      	blx	r3
    c0a0:	2320      	movs	r3, #32
    c0a2:	348c      	adds	r4, #140	; 0x8c
    c0a4:	7822      	ldrb	r2, [r4, #0]
    c0a6:	4313      	orrs	r3, r2
    c0a8:	7023      	strb	r3, [r4, #0]
    c0aa:	e7af      	b.n	c00c <LORAWAN_Send+0x2c>
    c0ac:	4b09      	ldr	r3, [pc, #36]	; (c0d4 <LORAWAN_Send+0xf4>)
    c0ae:	4798      	blx	r3
    c0b0:	2808      	cmp	r0, #8
    c0b2:	d1aa      	bne.n	c00a <LORAWAN_Send+0x2a>
    c0b4:	e7dc      	b.n	c070 <LORAWAN_Send+0x90>
    c0b6:	2200      	movs	r2, #0
    c0b8:	2511      	movs	r5, #17
    c0ba:	601a      	str	r2, [r3, #0]
    c0bc:	e7e9      	b.n	c092 <LORAWAN_Send+0xb2>
    c0be:	46c0      	nop			; (mov r8, r8)
    c0c0:	200017d4 	.word	0x200017d4
    c0c4:	00009729 	.word	0x00009729
    c0c8:	0000b911 	.word	0x0000b911
    c0cc:	0000b9b9 	.word	0x0000b9b9
    c0d0:	0000fe79 	.word	0x0000fe79
    c0d4:	0000f6e9 	.word	0x0000f6e9

0000c0d8 <AutomaticReplyCallback>:
    c0d8:	b510      	push	{r4, lr}
    c0da:	4c0d      	ldr	r4, [pc, #52]	; (c110 <AutomaticReplyCallback+0x38>)
    c0dc:	0023      	movs	r3, r4
    c0de:	33f4      	adds	r3, #244	; 0xf4
    c0e0:	781b      	ldrb	r3, [r3, #0]
    c0e2:	2b01      	cmp	r3, #1
    c0e4:	d10e      	bne.n	c104 <AutomaticReplyCallback+0x2c>
    c0e6:	0022      	movs	r2, r4
    c0e8:	210e      	movs	r1, #14
    c0ea:	327c      	adds	r2, #124	; 0x7c
    c0ec:	7813      	ldrb	r3, [r2, #0]
    c0ee:	438b      	bics	r3, r1
    c0f0:	7013      	strb	r3, [r2, #0]
    c0f2:	4b08      	ldr	r3, [pc, #32]	; (c114 <AutomaticReplyCallback+0x3c>)
    c0f4:	2000      	movs	r0, #0
    c0f6:	4798      	blx	r3
    c0f8:	2208      	movs	r2, #8
    c0fa:	348c      	adds	r4, #140	; 0x8c
    c0fc:	7823      	ldrb	r3, [r4, #0]
    c0fe:	4393      	bics	r3, r2
    c100:	7023      	strb	r3, [r4, #0]
    c102:	bd10      	pop	{r4, pc}
    c104:	2b04      	cmp	r3, #4
    c106:	d1f4      	bne.n	c0f2 <AutomaticReplyCallback+0x1a>
    c108:	4b03      	ldr	r3, [pc, #12]	; (c118 <AutomaticReplyCallback+0x40>)
    c10a:	4798      	blx	r3
    c10c:	e7f1      	b.n	c0f2 <AutomaticReplyCallback+0x1a>
    c10e:	46c0      	nop			; (mov r8, r8)
    c110:	200017d4 	.word	0x200017d4
    c114:	0000bfe1 	.word	0x0000bfe1
    c118:	00010921 	.word	0x00010921

0000c11c <LorawanLinkCheckConfigure>:
    c11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c11e:	23fa      	movs	r3, #250	; 0xfa
    c120:	4c21      	ldr	r4, [pc, #132]	; (c1a8 <LorawanLinkCheckConfigure+0x8c>)
    c122:	009b      	lsls	r3, r3, #2
    c124:	0022      	movs	r2, r4
    c126:	0025      	movs	r5, r4
    c128:	4343      	muls	r3, r0
    c12a:	3288      	adds	r2, #136	; 0x88
    c12c:	0006      	movs	r6, r0
    c12e:	2102      	movs	r1, #2
    c130:	2000      	movs	r0, #0
    c132:	4f1e      	ldr	r7, [pc, #120]	; (c1ac <LorawanLinkCheckConfigure+0x90>)
    c134:	6013      	str	r3, [r2, #0]
    c136:	357c      	adds	r5, #124	; 0x7c
    c138:	47b8      	blx	r7
    c13a:	2e00      	cmp	r6, #0
    c13c:	d127      	bne.n	c18e <LorawanLinkCheckConfigure+0x72>
    c13e:	0023      	movs	r3, r4
    c140:	33e7      	adds	r3, #231	; 0xe7
    c142:	7818      	ldrb	r0, [r3, #0]
    c144:	4b1a      	ldr	r3, [pc, #104]	; (c1b0 <LorawanLinkCheckConfigure+0x94>)
    c146:	4798      	blx	r3
    c148:	2202      	movs	r2, #2
    c14a:	786b      	ldrb	r3, [r5, #1]
    c14c:	210b      	movs	r1, #11
    c14e:	4393      	bics	r3, r2
    c150:	706b      	strb	r3, [r5, #1]
    c152:	2001      	movs	r0, #1
    c154:	47b8      	blx	r7
    c156:	0023      	movs	r3, r4
    c158:	2701      	movs	r7, #1
    c15a:	33d8      	adds	r3, #216	; 0xd8
    c15c:	781b      	ldrb	r3, [r3, #0]
    c15e:	0030      	movs	r0, r6
    c160:	0032      	movs	r2, r6
    c162:	36ff      	adds	r6, #255	; 0xff
    c164:	429a      	cmp	r2, r3
    c166:	d304      	bcc.n	c172 <LorawanLinkCheckConfigure+0x56>
    c168:	2800      	cmp	r0, #0
    c16a:	d001      	beq.n	c170 <LorawanLinkCheckConfigure+0x54>
    c16c:	34d8      	adds	r4, #216	; 0xd8
    c16e:	7023      	strb	r3, [r4, #0]
    c170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c172:	2103      	movs	r1, #3
    c174:	4351      	muls	r1, r2
    c176:	1861      	adds	r1, r4, r1
    c178:	3191      	adds	r1, #145	; 0x91
    c17a:	780d      	ldrb	r5, [r1, #0]
    c17c:	2d02      	cmp	r5, #2
    c17e:	d103      	bne.n	c188 <LorawanLinkCheckConfigure+0x6c>
    c180:	0038      	movs	r0, r7
    c182:	3b01      	subs	r3, #1
    c184:	700e      	strb	r6, [r1, #0]
    c186:	b2db      	uxtb	r3, r3
    c188:	3201      	adds	r2, #1
    c18a:	b2d2      	uxtb	r2, r2
    c18c:	e7ea      	b.n	c164 <LorawanLinkCheckConfigure+0x48>
    c18e:	2302      	movs	r3, #2
    c190:	786a      	ldrb	r2, [r5, #1]
    c192:	210b      	movs	r1, #11
    c194:	4313      	orrs	r3, r2
    c196:	706b      	strb	r3, [r5, #1]
    c198:	2001      	movs	r0, #1
    c19a:	47b8      	blx	r7
    c19c:	782b      	ldrb	r3, [r5, #0]
    c19e:	07db      	lsls	r3, r3, #31
    c1a0:	d5e6      	bpl.n	c170 <LorawanLinkCheckConfigure+0x54>
    c1a2:	4b04      	ldr	r3, [pc, #16]	; (c1b4 <LorawanLinkCheckConfigure+0x98>)
    c1a4:	4798      	blx	r3
    c1a6:	e7e3      	b.n	c170 <LorawanLinkCheckConfigure+0x54>
    c1a8:	200017d4 	.word	0x200017d4
    c1ac:	00009729 	.word	0x00009729
    c1b0:	00009e61 	.word	0x00009e61
    c1b4:	0000bdd5 	.word	0x0000bdd5

0000c1b8 <UpdateCurrentDataRate>:
    c1b8:	b510      	push	{r4, lr}
    c1ba:	4b04      	ldr	r3, [pc, #16]	; (c1cc <UpdateCurrentDataRate+0x14>)
    c1bc:	210c      	movs	r1, #12
    c1be:	33df      	adds	r3, #223	; 0xdf
    c1c0:	7018      	strb	r0, [r3, #0]
    c1c2:	2001      	movs	r0, #1
    c1c4:	4b02      	ldr	r3, [pc, #8]	; (c1d0 <UpdateCurrentDataRate+0x18>)
    c1c6:	4798      	blx	r3
    c1c8:	bd10      	pop	{r4, pc}
    c1ca:	46c0      	nop			; (mov r8, r8)
    c1cc:	200017d4 	.word	0x200017d4
    c1d0:	00009729 	.word	0x00009729

0000c1d4 <UpdateDLSettings>:
    c1d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    c1d6:	466b      	mov	r3, sp
    c1d8:	1dde      	adds	r6, r3, #7
    c1da:	1d9c      	adds	r4, r3, #6
    c1dc:	71d8      	strb	r0, [r3, #7]
    c1de:	7021      	strb	r1, [r4, #0]
    c1e0:	2017      	movs	r0, #23
    c1e2:	0031      	movs	r1, r6
    c1e4:	4d0c      	ldr	r5, [pc, #48]	; (c218 <UpdateDLSettings+0x44>)
    c1e6:	47a8      	blx	r5
    c1e8:	2808      	cmp	r0, #8
    c1ea:	d107      	bne.n	c1fc <UpdateDLSettings+0x28>
    c1ec:	4b0b      	ldr	r3, [pc, #44]	; (c21c <UpdateDLSettings+0x48>)
    c1ee:	7832      	ldrb	r2, [r6, #0]
    c1f0:	336e      	adds	r3, #110	; 0x6e
    c1f2:	701a      	strb	r2, [r3, #0]
    c1f4:	2100      	movs	r1, #0
    c1f6:	3807      	subs	r0, #7
    c1f8:	4b09      	ldr	r3, [pc, #36]	; (c220 <UpdateDLSettings+0x4c>)
    c1fa:	4798      	blx	r3
    c1fc:	0021      	movs	r1, r4
    c1fe:	2018      	movs	r0, #24
    c200:	47a8      	blx	r5
    c202:	2808      	cmp	r0, #8
    c204:	d107      	bne.n	c216 <UpdateDLSettings+0x42>
    c206:	2101      	movs	r1, #1
    c208:	4b04      	ldr	r3, [pc, #16]	; (c21c <UpdateDLSettings+0x48>)
    c20a:	7822      	ldrb	r2, [r4, #0]
    c20c:	33ee      	adds	r3, #238	; 0xee
    c20e:	701a      	strb	r2, [r3, #0]
    c210:	0008      	movs	r0, r1
    c212:	4b03      	ldr	r3, [pc, #12]	; (c220 <UpdateDLSettings+0x4c>)
    c214:	4798      	blx	r3
    c216:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    c218:	0000915d 	.word	0x0000915d
    c21c:	200017d4 	.word	0x200017d4
    c220:	00009729 	.word	0x00009729

0000c224 <UpdateTxPower>:
    c224:	b510      	push	{r4, lr}
    c226:	4b04      	ldr	r3, [pc, #16]	; (c238 <UpdateTxPower+0x14>)
    c228:	210a      	movs	r1, #10
    c22a:	33e1      	adds	r3, #225	; 0xe1
    c22c:	7018      	strb	r0, [r3, #0]
    c22e:	2000      	movs	r0, #0
    c230:	4b02      	ldr	r3, [pc, #8]	; (c23c <UpdateTxPower+0x18>)
    c232:	4798      	blx	r3
    c234:	bd10      	pop	{r4, pc}
    c236:	46c0      	nop			; (mov r8, r8)
    c238:	200017d4 	.word	0x200017d4
    c23c:	00009729 	.word	0x00009729

0000c240 <UpdateRetransmissionAckTimeoutState>:
    c240:	4b10      	ldr	r3, [pc, #64]	; (c284 <UpdateRetransmissionAckTimeoutState+0x44>)
    c242:	b513      	push	{r0, r1, r4, lr}
    c244:	001a      	movs	r2, r3
    c246:	32f4      	adds	r2, #244	; 0xf4
    c248:	7812      	ldrb	r2, [r2, #0]
    c24a:	2a01      	cmp	r2, #1
    c24c:	d108      	bne.n	c260 <UpdateRetransmissionAckTimeoutState+0x20>
    c24e:	0018      	movs	r0, r3
    c250:	210e      	movs	r1, #14
    c252:	307c      	adds	r0, #124	; 0x7c
    c254:	7802      	ldrb	r2, [r0, #0]
    c256:	438a      	bics	r2, r1
    c258:	0011      	movs	r1, r2
    c25a:	220c      	movs	r2, #12
    c25c:	430a      	orrs	r2, r1
    c25e:	7002      	strb	r2, [r0, #0]
    c260:	001a      	movs	r2, r3
    c262:	32d2      	adds	r2, #210	; 0xd2
    c264:	8811      	ldrh	r1, [r2, #0]
    c266:	22e0      	movs	r2, #224	; 0xe0
    c268:	32ff      	adds	r2, #255	; 0xff
    c26a:	5c9a      	ldrb	r2, [r3, r2]
    c26c:	33e8      	adds	r3, #232	; 0xe8
    c26e:	1a8a      	subs	r2, r1, r2
    c270:	21fa      	movs	r1, #250	; 0xfa
    c272:	0089      	lsls	r1, r1, #2
    c274:	4351      	muls	r1, r2
    c276:	2200      	movs	r2, #0
    c278:	7818      	ldrb	r0, [r3, #0]
    c27a:	4c03      	ldr	r4, [pc, #12]	; (c288 <UpdateRetransmissionAckTimeoutState+0x48>)
    c27c:	9200      	str	r2, [sp, #0]
    c27e:	4b03      	ldr	r3, [pc, #12]	; (c28c <UpdateRetransmissionAckTimeoutState+0x4c>)
    c280:	47a0      	blx	r4
    c282:	bd13      	pop	{r0, r1, r4, pc}
    c284:	200017d4 	.word	0x200017d4
    c288:	00009b55 	.word	0x00009b55
    c28c:	0000dc61 	.word	0x0000dc61

0000c290 <UpdateReceiveWindow2Parameters>:
    c290:	4b06      	ldr	r3, [pc, #24]	; (c2ac <UpdateReceiveWindow2Parameters+0x1c>)
    c292:	b510      	push	{r4, lr}
    c294:	001a      	movs	r2, r3
    c296:	336a      	adds	r3, #106	; 0x6a
    c298:	8018      	strh	r0, [r3, #0]
    c29a:	326e      	adds	r2, #110	; 0x6e
    c29c:	0c00      	lsrs	r0, r0, #16
    c29e:	8058      	strh	r0, [r3, #2]
    c2a0:	7011      	strb	r1, [r2, #0]
    c2a2:	2001      	movs	r0, #1
    c2a4:	2100      	movs	r1, #0
    c2a6:	4b02      	ldr	r3, [pc, #8]	; (c2b0 <UpdateReceiveWindow2Parameters+0x20>)
    c2a8:	4798      	blx	r3
    c2aa:	bd10      	pop	{r4, pc}
    c2ac:	200017d4 	.word	0x200017d4
    c2b0:	00009729 	.word	0x00009729

0000c2b4 <ResetParametersForConfirmedTransmission>:
    c2b4:	4b0a      	ldr	r3, [pc, #40]	; (c2e0 <ResetParametersForConfirmedTransmission+0x2c>)
    c2b6:	001a      	movs	r2, r3
    c2b8:	32f4      	adds	r2, #244	; 0xf4
    c2ba:	7812      	ldrb	r2, [r2, #0]
    c2bc:	2a01      	cmp	r2, #1
    c2be:	d105      	bne.n	c2cc <ResetParametersForConfirmedTransmission+0x18>
    c2c0:	0019      	movs	r1, r3
    c2c2:	200e      	movs	r0, #14
    c2c4:	317c      	adds	r1, #124	; 0x7c
    c2c6:	780a      	ldrb	r2, [r1, #0]
    c2c8:	4382      	bics	r2, r0
    c2ca:	700a      	strb	r2, [r1, #0]
    c2cc:	001a      	movs	r2, r3
    c2ce:	2100      	movs	r1, #0
    c2d0:	338c      	adds	r3, #140	; 0x8c
    c2d2:	32dc      	adds	r2, #220	; 0xdc
    c2d4:	7011      	strb	r1, [r2, #0]
    c2d6:	781a      	ldrb	r2, [r3, #0]
    c2d8:	3101      	adds	r1, #1
    c2da:	438a      	bics	r2, r1
    c2dc:	701a      	strb	r2, [r3, #0]
    c2de:	4770      	bx	lr
    c2e0:	200017d4 	.word	0x200017d4

0000c2e4 <ResetParametersForUnconfirmedTransmission>:
    c2e4:	4b07      	ldr	r3, [pc, #28]	; (c304 <ResetParametersForUnconfirmedTransmission+0x20>)
    c2e6:	001a      	movs	r2, r3
    c2e8:	32f4      	adds	r2, #244	; 0xf4
    c2ea:	7812      	ldrb	r2, [r2, #0]
    c2ec:	2a01      	cmp	r2, #1
    c2ee:	d105      	bne.n	c2fc <ResetParametersForUnconfirmedTransmission+0x18>
    c2f0:	0019      	movs	r1, r3
    c2f2:	200e      	movs	r0, #14
    c2f4:	317c      	adds	r1, #124	; 0x7c
    c2f6:	780a      	ldrb	r2, [r1, #0]
    c2f8:	4382      	bics	r2, r0
    c2fa:	700a      	strb	r2, [r1, #0]
    c2fc:	2200      	movs	r2, #0
    c2fe:	33db      	adds	r3, #219	; 0xdb
    c300:	701a      	strb	r2, [r3, #0]
    c302:	4770      	bx	lr
    c304:	200017d4 	.word	0x200017d4

0000c308 <SetJoinFailState>:
    c308:	b570      	push	{r4, r5, r6, lr}
    c30a:	4c15      	ldr	r4, [pc, #84]	; (c360 <SetJoinFailState+0x58>)
    c30c:	2604      	movs	r6, #4
    c30e:	0025      	movs	r5, r4
    c310:	358c      	adds	r5, #140	; 0x8c
    c312:	782a      	ldrb	r2, [r5, #0]
    c314:	0021      	movs	r1, r4
    c316:	43b2      	bics	r2, r6
    c318:	702a      	strb	r2, [r5, #0]
    c31a:	22f0      	movs	r2, #240	; 0xf0
    c31c:	317c      	adds	r1, #124	; 0x7c
    c31e:	780b      	ldrb	r3, [r1, #0]
    c320:	4013      	ands	r3, r2
    c322:	700b      	strb	r3, [r1, #0]
    c324:	0023      	movs	r3, r4
    c326:	33ff      	adds	r3, #255	; 0xff
    c328:	7c5b      	ldrb	r3, [r3, #17]
    c32a:	069b      	lsls	r3, r3, #26
    c32c:	d503      	bpl.n	c336 <SetJoinFailState+0x2e>
    c32e:	0023      	movs	r3, r4
    c330:	2200      	movs	r2, #0
    c332:	337b      	adds	r3, #123	; 0x7b
    c334:	701a      	strb	r2, [r3, #0]
    c336:	490b      	ldr	r1, [pc, #44]	; (c364 <SetJoinFailState+0x5c>)
    c338:	794a      	ldrb	r2, [r1, #5]
    c33a:	790b      	ldrb	r3, [r1, #4]
    c33c:	0212      	lsls	r2, r2, #8
    c33e:	431a      	orrs	r2, r3
    c340:	798b      	ldrb	r3, [r1, #6]
    c342:	041b      	lsls	r3, r3, #16
    c344:	431a      	orrs	r2, r3
    c346:	79cb      	ldrb	r3, [r1, #7]
    c348:	061b      	lsls	r3, r3, #24
    c34a:	4313      	orrs	r3, r2
    c34c:	d000      	beq.n	c350 <SetJoinFailState+0x48>
    c34e:	4798      	blx	r3
    c350:	2300      	movs	r3, #0
    c352:	34f0      	adds	r4, #240	; 0xf0
    c354:	7023      	strb	r3, [r4, #0]
    c356:	210b      	movs	r1, #11
    c358:	4b03      	ldr	r3, [pc, #12]	; (c368 <SetJoinFailState+0x60>)
    c35a:	2001      	movs	r0, #1
    c35c:	4798      	blx	r3
    c35e:	bd70      	pop	{r4, r5, r6, pc}
    c360:	200017d4 	.word	0x200017d4
    c364:	20001acc 	.word	0x20001acc
    c368:	00009729 	.word	0x00009729

0000c36c <ExecuteRxParamSetupReq>:
    c36c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c36e:	b085      	sub	sp, #20
    c370:	7805      	ldrb	r5, [r0, #0]
    c372:	0004      	movs	r4, r0
    c374:	1c41      	adds	r1, r0, #1
    c376:	2204      	movs	r2, #4
    c378:	4b36      	ldr	r3, [pc, #216]	; (c454 <ExecuteRxParamSetupReq+0xe8>)
    c37a:	a803      	add	r0, sp, #12
    c37c:	4798      	blx	r3
    c37e:	2264      	movs	r2, #100	; 0x64
    c380:	9b03      	ldr	r3, [sp, #12]
    c382:	a903      	add	r1, sp, #12
    c384:	021b      	lsls	r3, r3, #8
    c386:	0a1b      	lsrs	r3, r3, #8
    c388:	4353      	muls	r3, r2
    c38a:	9303      	str	r3, [sp, #12]
    c38c:	1d23      	adds	r3, r4, #4
    c38e:	9301      	str	r3, [sp, #4]
    c390:	072b      	lsls	r3, r5, #28
    c392:	0f1b      	lsrs	r3, r3, #28
    c394:	b2da      	uxtb	r2, r3
    c396:	9200      	str	r2, [sp, #0]
    c398:	aa02      	add	r2, sp, #8
    c39a:	1c96      	adds	r6, r2, #2
    c39c:	066d      	lsls	r5, r5, #25
    c39e:	7033      	strb	r3, [r6, #0]
    c3a0:	1cd7      	adds	r7, r2, #3
    c3a2:	0f6d      	lsrs	r5, r5, #29
    c3a4:	2001      	movs	r0, #1
    c3a6:	4b2c      	ldr	r3, [pc, #176]	; (c458 <ExecuteRxParamSetupReq+0xec>)
    c3a8:	703d      	strb	r5, [r7, #0]
    c3aa:	4798      	blx	r3
    c3ac:	4c2b      	ldr	r4, [pc, #172]	; (c45c <ExecuteRxParamSetupReq+0xf0>)
    c3ae:	2808      	cmp	r0, #8
    c3b0:	d109      	bne.n	c3c6 <ExecuteRxParamSetupReq+0x5a>
    c3b2:	0023      	movs	r3, r4
    c3b4:	33d8      	adds	r3, #216	; 0xd8
    c3b6:	781a      	ldrb	r2, [r3, #0]
    c3b8:	2303      	movs	r3, #3
    c3ba:	4353      	muls	r3, r2
    c3bc:	18e3      	adds	r3, r4, r3
    c3be:	3390      	adds	r3, #144	; 0x90
    c3c0:	789a      	ldrb	r2, [r3, #2]
    c3c2:	4310      	orrs	r0, r2
    c3c4:	7098      	strb	r0, [r3, #2]
    c3c6:	0031      	movs	r1, r6
    c3c8:	200f      	movs	r0, #15
    c3ca:	4e23      	ldr	r6, [pc, #140]	; (c458 <ExecuteRxParamSetupReq+0xec>)
    c3cc:	47b0      	blx	r6
    c3ce:	2808      	cmp	r0, #8
    c3d0:	d10a      	bne.n	c3e8 <ExecuteRxParamSetupReq+0x7c>
    c3d2:	0023      	movs	r3, r4
    c3d4:	33d8      	adds	r3, #216	; 0xd8
    c3d6:	781a      	ldrb	r2, [r3, #0]
    c3d8:	2303      	movs	r3, #3
    c3da:	4353      	muls	r3, r2
    c3dc:	2210      	movs	r2, #16
    c3de:	18e3      	adds	r3, r4, r3
    c3e0:	3390      	adds	r3, #144	; 0x90
    c3e2:	7899      	ldrb	r1, [r3, #2]
    c3e4:	430a      	orrs	r2, r1
    c3e6:	709a      	strb	r2, [r3, #2]
    c3e8:	0039      	movs	r1, r7
    c3ea:	2018      	movs	r0, #24
    c3ec:	47b0      	blx	r6
    c3ee:	2808      	cmp	r0, #8
    c3f0:	d10a      	bne.n	c408 <ExecuteRxParamSetupReq+0x9c>
    c3f2:	0023      	movs	r3, r4
    c3f4:	33d8      	adds	r3, #216	; 0xd8
    c3f6:	781a      	ldrb	r2, [r3, #0]
    c3f8:	2303      	movs	r3, #3
    c3fa:	4353      	muls	r3, r2
    c3fc:	2220      	movs	r2, #32
    c3fe:	18e3      	adds	r3, r4, r3
    c400:	3390      	adds	r3, #144	; 0x90
    c402:	7899      	ldrb	r1, [r3, #2]
    c404:	430a      	orrs	r2, r1
    c406:	709a      	strb	r2, [r3, #2]
    c408:	0023      	movs	r3, r4
    c40a:	33d8      	adds	r3, #216	; 0xd8
    c40c:	781a      	ldrb	r2, [r3, #0]
    c40e:	2303      	movs	r3, #3
    c410:	4353      	muls	r3, r2
    c412:	18e3      	adds	r3, r4, r3
    c414:	3390      	adds	r3, #144	; 0x90
    c416:	789e      	ldrb	r6, [r3, #2]
    c418:	06f3      	lsls	r3, r6, #27
    c41a:	d518      	bpl.n	c44e <ExecuteRxParamSetupReq+0xe2>
    c41c:	0733      	lsls	r3, r6, #28
    c41e:	d516      	bpl.n	c44e <ExecuteRxParamSetupReq+0xe2>
    c420:	06b6      	lsls	r6, r6, #26
    c422:	0ff6      	lsrs	r6, r6, #31
    c424:	2e01      	cmp	r6, #1
    c426:	d112      	bne.n	c44e <ExecuteRxParamSetupReq+0xe2>
    c428:	0023      	movs	r3, r4
    c42a:	33ee      	adds	r3, #238	; 0xee
    c42c:	701d      	strb	r5, [r3, #0]
    c42e:	0031      	movs	r1, r6
    c430:	0030      	movs	r0, r6
    c432:	4d0b      	ldr	r5, [pc, #44]	; (c460 <ExecuteRxParamSetupReq+0xf4>)
    c434:	47a8      	blx	r5
    c436:	9900      	ldr	r1, [sp, #0]
    c438:	9803      	ldr	r0, [sp, #12]
    c43a:	4b0a      	ldr	r3, [pc, #40]	; (c464 <ExecuteRxParamSetupReq+0xf8>)
    c43c:	4798      	blx	r3
    c43e:	2340      	movs	r3, #64	; 0x40
    c440:	347c      	adds	r4, #124	; 0x7c
    c442:	7862      	ldrb	r2, [r4, #1]
    c444:	210b      	movs	r1, #11
    c446:	4313      	orrs	r3, r2
    c448:	7063      	strb	r3, [r4, #1]
    c44a:	0030      	movs	r0, r6
    c44c:	47a8      	blx	r5
    c44e:	9801      	ldr	r0, [sp, #4]
    c450:	b005      	add	sp, #20
    c452:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c454:	0001516d 	.word	0x0001516d
    c458:	0000915d 	.word	0x0000915d
    c45c:	200017d4 	.word	0x200017d4
    c460:	00009729 	.word	0x00009729
    c464:	0000c291 	.word	0x0000c291

0000c468 <ExecuteDutyCycle>:
    c468:	b570      	push	{r4, r5, r6, lr}
    c46a:	7803      	ldrb	r3, [r0, #0]
    c46c:	1c46      	adds	r6, r0, #1
    c46e:	2b0f      	cmp	r3, #15
    c470:	d80f      	bhi.n	c492 <ExecuteDutyCycle+0x2a>
    c472:	4c09      	ldr	r4, [pc, #36]	; (c498 <ExecuteDutyCycle+0x30>)
    c474:	210b      	movs	r1, #11
    c476:	0022      	movs	r2, r4
    c478:	2000      	movs	r0, #0
    c47a:	3290      	adds	r2, #144	; 0x90
    c47c:	4d07      	ldr	r5, [pc, #28]	; (c49c <ExecuteDutyCycle+0x34>)
    c47e:	7013      	strb	r3, [r2, #0]
    c480:	47a8      	blx	r5
    c482:	2320      	movs	r3, #32
    c484:	347c      	adds	r4, #124	; 0x7c
    c486:	7862      	ldrb	r2, [r4, #1]
    c488:	210b      	movs	r1, #11
    c48a:	4313      	orrs	r3, r2
    c48c:	7063      	strb	r3, [r4, #1]
    c48e:	2001      	movs	r0, #1
    c490:	47a8      	blx	r5
    c492:	0030      	movs	r0, r6
    c494:	bd70      	pop	{r4, r5, r6, pc}
    c496:	46c0      	nop			; (mov r8, r8)
    c498:	200017d4 	.word	0x200017d4
    c49c:	00009729 	.word	0x00009729

0000c4a0 <ExecuteDlChannel>:
    c4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c4a2:	b089      	sub	sp, #36	; 0x24
    c4a4:	7805      	ldrb	r5, [r0, #0]
    c4a6:	ab02      	add	r3, sp, #8
    c4a8:	1c41      	adds	r1, r0, #1
    c4aa:	0007      	movs	r7, r0
    c4ac:	719d      	strb	r5, [r3, #6]
    c4ae:	1d9e      	adds	r6, r3, #6
    c4b0:	2204      	movs	r2, #4
    c4b2:	4b23      	ldr	r3, [pc, #140]	; (c540 <ExecuteDlChannel+0xa0>)
    c4b4:	a805      	add	r0, sp, #20
    c4b6:	4798      	blx	r3
    c4b8:	9b05      	ldr	r3, [sp, #20]
    c4ba:	a904      	add	r1, sp, #16
    c4bc:	021c      	lsls	r4, r3, #8
    c4be:	2364      	movs	r3, #100	; 0x64
    c4c0:	0a24      	lsrs	r4, r4, #8
    c4c2:	435c      	muls	r4, r3
    c4c4:	1d3b      	adds	r3, r7, #4
    c4c6:	9301      	str	r3, [sp, #4]
    c4c8:	2301      	movs	r3, #1
    c4ca:	2015      	movs	r0, #21
    c4cc:	704b      	strb	r3, [r1, #1]
    c4ce:	4b1d      	ldr	r3, [pc, #116]	; (c544 <ExecuteDlChannel+0xa4>)
    c4d0:	9405      	str	r4, [sp, #20]
    c4d2:	700d      	strb	r5, [r1, #0]
    c4d4:	4798      	blx	r3
    c4d6:	2808      	cmp	r0, #8
    c4d8:	d12f      	bne.n	c53a <ExecuteDlChannel+0x9a>
    c4da:	ab02      	add	r3, sp, #8
    c4dc:	1ddd      	adds	r5, r3, #7
    c4de:	2300      	movs	r3, #0
    c4e0:	702b      	strb	r3, [r5, #0]
    c4e2:	7833      	ldrb	r3, [r6, #0]
    c4e4:	af06      	add	r7, sp, #24
    c4e6:	713b      	strb	r3, [r7, #4]
    c4e8:	002a      	movs	r2, r5
    c4ea:	0031      	movs	r1, r6
    c4ec:	300e      	adds	r0, #14
    c4ee:	4b16      	ldr	r3, [pc, #88]	; (c548 <ExecuteDlChannel+0xa8>)
    c4f0:	9406      	str	r4, [sp, #24]
    c4f2:	4798      	blx	r3
    c4f4:	280a      	cmp	r0, #10
    c4f6:	d00d      	beq.n	c514 <ExecuteDlChannel+0x74>
    c4f8:	782a      	ldrb	r2, [r5, #0]
    c4fa:	2a01      	cmp	r2, #1
    c4fc:	d10a      	bne.n	c514 <ExecuteDlChannel+0x74>
    c4fe:	4b13      	ldr	r3, [pc, #76]	; (c54c <ExecuteDlChannel+0xac>)
    c500:	0019      	movs	r1, r3
    c502:	31d8      	adds	r1, #216	; 0xd8
    c504:	7808      	ldrb	r0, [r1, #0]
    c506:	2103      	movs	r1, #3
    c508:	4341      	muls	r1, r0
    c50a:	185b      	adds	r3, r3, r1
    c50c:	3390      	adds	r3, #144	; 0x90
    c50e:	78d9      	ldrb	r1, [r3, #3]
    c510:	430a      	orrs	r2, r1
    c512:	70da      	strb	r2, [r3, #3]
    c514:	0039      	movs	r1, r7
    c516:	2034      	movs	r0, #52	; 0x34
    c518:	4b0d      	ldr	r3, [pc, #52]	; (c550 <ExecuteDlChannel+0xb0>)
    c51a:	4798      	blx	r3
    c51c:	2808      	cmp	r0, #8
    c51e:	d10c      	bne.n	c53a <ExecuteDlChannel+0x9a>
    c520:	4b0a      	ldr	r3, [pc, #40]	; (c54c <ExecuteDlChannel+0xac>)
    c522:	001a      	movs	r2, r3
    c524:	32d8      	adds	r2, #216	; 0xd8
    c526:	7811      	ldrb	r1, [r2, #0]
    c528:	2203      	movs	r2, #3
    c52a:	434a      	muls	r2, r1
    c52c:	189b      	adds	r3, r3, r2
    c52e:	2280      	movs	r2, #128	; 0x80
    c530:	3390      	adds	r3, #144	; 0x90
    c532:	7899      	ldrb	r1, [r3, #2]
    c534:	4252      	negs	r2, r2
    c536:	430a      	orrs	r2, r1
    c538:	709a      	strb	r2, [r3, #2]
    c53a:	9801      	ldr	r0, [sp, #4]
    c53c:	b009      	add	sp, #36	; 0x24
    c53e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c540:	0001516d 	.word	0x0001516d
    c544:	0000915d 	.word	0x0000915d
    c548:	00009141 	.word	0x00009141
    c54c:	200017d4 	.word	0x200017d4
    c550:	00009269 	.word	0x00009269

0000c554 <ExecuteTxParamSetup>:
    c554:	220f      	movs	r2, #15
    c556:	b513      	push	{r0, r1, r4, lr}
    c558:	7803      	ldrb	r3, [r0, #0]
    c55a:	4c0f      	ldr	r4, [pc, #60]	; (c598 <ExecuteTxParamSetup+0x44>)
    c55c:	401a      	ands	r2, r3
    c55e:	5ca2      	ldrb	r2, [r4, r2]
    c560:	2401      	movs	r4, #1
    c562:	a901      	add	r1, sp, #4
    c564:	700a      	strb	r2, [r1, #0]
    c566:	111a      	asrs	r2, r3, #4
    c568:	115b      	asrs	r3, r3, #5
    c56a:	4023      	ands	r3, r4
    c56c:	40a3      	lsls	r3, r4
    c56e:	4022      	ands	r2, r4
    c570:	4313      	orrs	r3, r2
    c572:	704b      	strb	r3, [r1, #1]
    c574:	1904      	adds	r4, r0, r4
    c576:	4b09      	ldr	r3, [pc, #36]	; (c59c <ExecuteTxParamSetup+0x48>)
    c578:	2035      	movs	r0, #53	; 0x35
    c57a:	4798      	blx	r3
    c57c:	2808      	cmp	r0, #8
    c57e:	d009      	beq.n	c594 <ExecuteTxParamSetup+0x40>
    c580:	4b07      	ldr	r3, [pc, #28]	; (c5a0 <ExecuteTxParamSetup+0x4c>)
    c582:	001a      	movs	r2, r3
    c584:	32d8      	adds	r2, #216	; 0xd8
    c586:	7811      	ldrb	r1, [r2, #0]
    c588:	2203      	movs	r2, #3
    c58a:	434a      	muls	r2, r1
    c58c:	189b      	adds	r3, r3, r2
    c58e:	22ff      	movs	r2, #255	; 0xff
    c590:	3391      	adds	r3, #145	; 0x91
    c592:	701a      	strb	r2, [r3, #0]
    c594:	0020      	movs	r0, r4
    c596:	bd16      	pop	{r1, r2, r4, pc}
    c598:	0001afc3 	.word	0x0001afc3
    c59c:	00009269 	.word	0x00009269
    c5a0:	200017d4 	.word	0x200017d4

0000c5a4 <ExecuteLinkAdr>:
    c5a4:	220f      	movs	r2, #15
    c5a6:	b5f0      	push	{r4, r5, r6, r7, lr}
    c5a8:	0005      	movs	r5, r0
    c5aa:	7803      	ldrb	r3, [r0, #0]
    c5ac:	b089      	sub	sp, #36	; 0x24
    c5ae:	401a      	ands	r2, r3
    c5b0:	a905      	add	r1, sp, #20
    c5b2:	700a      	strb	r2, [r1, #0]
    c5b4:	24d8      	movs	r4, #216	; 0xd8
    c5b6:	aa04      	add	r2, sp, #16
    c5b8:	1d96      	adds	r6, r2, #6
    c5ba:	091b      	lsrs	r3, r3, #4
    c5bc:	7153      	strb	r3, [r2, #5]
    c5be:	1c41      	adds	r1, r0, #1
    c5c0:	2202      	movs	r2, #2
    c5c2:	0030      	movs	r0, r6
    c5c4:	4b38      	ldr	r3, [pc, #224]	; (c6a8 <ExecuteLinkAdr+0x104>)
    c5c6:	4798      	blx	r3
    c5c8:	2201      	movs	r2, #1
    c5ca:	1d2b      	adds	r3, r5, #4
    c5cc:	9303      	str	r3, [sp, #12]
    c5ce:	78eb      	ldrb	r3, [r5, #3]
    c5d0:	4f36      	ldr	r7, [pc, #216]	; (c6ac <ExecuteLinkAdr+0x108>)
    c5d2:	065b      	lsls	r3, r3, #25
    c5d4:	0f5b      	lsrs	r3, r3, #29
    c5d6:	34ff      	adds	r4, #255	; 0xff
    c5d8:	9300      	str	r3, [sp, #0]
    c5da:	5d3b      	ldrb	r3, [r7, r4]
    c5dc:	a906      	add	r1, sp, #24
    c5de:	4393      	bics	r3, r2
    c5e0:	1892      	adds	r2, r2, r2
    c5e2:	4393      	bics	r3, r2
    c5e4:	3202      	adds	r2, #2
    c5e6:	4393      	bics	r3, r2
    c5e8:	553b      	strb	r3, [r7, r4]
    c5ea:	466b      	mov	r3, sp
    c5ec:	781b      	ldrb	r3, [r3, #0]
    c5ee:	8836      	ldrh	r6, [r6, #0]
    c5f0:	700b      	strb	r3, [r1, #0]
    c5f2:	2038      	movs	r0, #56	; 0x38
    c5f4:	4b2e      	ldr	r3, [pc, #184]	; (c6b0 <ExecuteLinkAdr+0x10c>)
    c5f6:	804e      	strh	r6, [r1, #2]
    c5f8:	4798      	blx	r3
    c5fa:	2808      	cmp	r0, #8
    c5fc:	d116      	bne.n	c62c <ExecuteLinkAdr+0x88>
    c5fe:	466b      	mov	r3, sp
    c600:	781b      	ldrb	r3, [r3, #0]
    c602:	a907      	add	r1, sp, #28
    c604:	708b      	strb	r3, [r1, #2]
    c606:	3014      	adds	r0, #20
    c608:	4b2a      	ldr	r3, [pc, #168]	; (c6b4 <ExecuteLinkAdr+0x110>)
    c60a:	800e      	strh	r6, [r1, #0]
    c60c:	4798      	blx	r3
    c60e:	2201      	movs	r2, #1
    c610:	5d3b      	ldrb	r3, [r7, r4]
    c612:	2010      	movs	r0, #16
    c614:	4313      	orrs	r3, r2
    c616:	553b      	strb	r3, [r7, r4]
    c618:	ab04      	add	r3, sp, #16
    c61a:	1d59      	adds	r1, r3, #5
    c61c:	4b24      	ldr	r3, [pc, #144]	; (c6b0 <ExecuteLinkAdr+0x10c>)
    c61e:	4798      	blx	r3
    c620:	2808      	cmp	r0, #8
    c622:	d103      	bne.n	c62c <ExecuteLinkAdr+0x88>
    c624:	2202      	movs	r2, #2
    c626:	5d3b      	ldrb	r3, [r7, r4]
    c628:	4313      	orrs	r3, r2
    c62a:	553b      	strb	r3, [r7, r4]
    c62c:	af05      	add	r7, sp, #20
    c62e:	4b20      	ldr	r3, [pc, #128]	; (c6b0 <ExecuteLinkAdr+0x10c>)
    c630:	0039      	movs	r1, r7
    c632:	201d      	movs	r0, #29
    c634:	4798      	blx	r3
    c636:	4b1d      	ldr	r3, [pc, #116]	; (c6ac <ExecuteLinkAdr+0x108>)
    c638:	2808      	cmp	r0, #8
    c63a:	d103      	bne.n	c644 <ExecuteLinkAdr+0xa0>
    c63c:	2204      	movs	r2, #4
    c63e:	5d19      	ldrb	r1, [r3, r4]
    c640:	430a      	orrs	r2, r1
    c642:	551a      	strb	r2, [r3, r4]
    c644:	2207      	movs	r2, #7
    c646:	5d19      	ldrb	r1, [r3, r4]
    c648:	4011      	ands	r1, r2
    c64a:	4291      	cmp	r1, r2
    c64c:	d122      	bne.n	c694 <ExecuteLinkAdr+0xf0>
    c64e:	22dc      	movs	r2, #220	; 0xdc
    c650:	32ff      	adds	r2, #255	; 0xff
    c652:	549e      	strb	r6, [r3, r2]
    c654:	001a      	movs	r2, r3
    c656:	32dc      	adds	r2, #220	; 0xdc
    c658:	32ff      	adds	r2, #255	; 0xff
    c65a:	0a36      	lsrs	r6, r6, #8
    c65c:	7056      	strb	r6, [r2, #1]
    c65e:	aa04      	add	r2, sp, #16
    c660:	7950      	ldrb	r0, [r2, #5]
    c662:	22ec      	movs	r2, #236	; 0xec
    c664:	0052      	lsls	r2, r2, #1
    c666:	5498      	strb	r0, [r3, r2]
    c668:	20de      	movs	r0, #222	; 0xde
    c66a:	2470      	movs	r4, #112	; 0x70
    c66c:	78ea      	ldrb	r2, [r5, #3]
    c66e:	30ff      	adds	r0, #255	; 0xff
    c670:	0912      	lsrs	r2, r2, #4
    c672:	400a      	ands	r2, r1
    c674:	5c19      	ldrb	r1, [r3, r0]
    c676:	0112      	lsls	r2, r2, #4
    c678:	43a1      	bics	r1, r4
    c67a:	430a      	orrs	r2, r1
    c67c:	541a      	strb	r2, [r3, r0]
    c67e:	78e9      	ldrb	r1, [r5, #3]
    c680:	3c61      	subs	r4, #97	; 0x61
    c682:	b2d2      	uxtb	r2, r2
    c684:	4021      	ands	r1, r4
    c686:	43a2      	bics	r2, r4
    c688:	430a      	orrs	r2, r1
    c68a:	541a      	strb	r2, [r3, r0]
    c68c:	22da      	movs	r2, #218	; 0xda
    c68e:	7839      	ldrb	r1, [r7, #0]
    c690:	32ff      	adds	r2, #255	; 0xff
    c692:	5499      	strb	r1, [r3, r2]
    c694:	22ed      	movs	r2, #237	; 0xed
    c696:	4905      	ldr	r1, [pc, #20]	; (c6ac <ExecuteLinkAdr+0x108>)
    c698:	0052      	lsls	r2, r2, #1
    c69a:	5c8b      	ldrb	r3, [r1, r2]
    c69c:	9803      	ldr	r0, [sp, #12]
    c69e:	3301      	adds	r3, #1
    c6a0:	548b      	strb	r3, [r1, r2]
    c6a2:	b009      	add	sp, #36	; 0x24
    c6a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c6a6:	46c0      	nop			; (mov r8, r8)
    c6a8:	0001516d 	.word	0x0001516d
    c6ac:	200017d4 	.word	0x200017d4
    c6b0:	0000915d 	.word	0x0000915d
    c6b4:	00009269 	.word	0x00009269

0000c6b8 <PrepareJoinRequestFrame>:
    c6b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    c6ba:	2210      	movs	r2, #16
    c6bc:	4d23      	ldr	r5, [pc, #140]	; (c74c <PrepareJoinRequestFrame+0x94>)
    c6be:	4b24      	ldr	r3, [pc, #144]	; (c750 <PrepareJoinRequestFrame+0x98>)
    c6c0:	32ff      	adds	r2, #255	; 0xff
    c6c2:	2100      	movs	r1, #0
    c6c4:	0028      	movs	r0, r5
    c6c6:	4798      	blx	r3
    c6c8:	2300      	movs	r3, #0
    c6ca:	702b      	strb	r3, [r5, #0]
    c6cc:	23e2      	movs	r3, #226	; 0xe2
    c6ce:	4c21      	ldr	r4, [pc, #132]	; (c754 <PrepareJoinRequestFrame+0x9c>)
    c6d0:	33ff      	adds	r3, #255	; 0xff
    c6d2:	5ce3      	ldrb	r3, [r4, r3]
    c6d4:	2b00      	cmp	r3, #0
    c6d6:	d006      	beq.n	c6e6 <PrepareJoinRequestFrame+0x2e>
    c6d8:	491f      	ldr	r1, [pc, #124]	; (c758 <PrepareJoinRequestFrame+0xa0>)
    c6da:	2006      	movs	r0, #6
    c6dc:	4e1f      	ldr	r6, [pc, #124]	; (c75c <PrepareJoinRequestFrame+0xa4>)
    c6de:	47b0      	blx	r6
    c6e0:	491f      	ldr	r1, [pc, #124]	; (c760 <PrepareJoinRequestFrame+0xa8>)
    c6e2:	2007      	movs	r0, #7
    c6e4:	47b0      	blx	r6
    c6e6:	2300      	movs	r3, #0
    c6e8:	205c      	movs	r0, #92	; 0x5c
    c6ea:	1ac1      	subs	r1, r0, r3
    c6ec:	5c61      	ldrb	r1, [r4, r1]
    c6ee:	18ea      	adds	r2, r5, r3
    c6f0:	3301      	adds	r3, #1
    c6f2:	7051      	strb	r1, [r2, #1]
    c6f4:	2b08      	cmp	r3, #8
    c6f6:	d1f8      	bne.n	c6ea <PrepareJoinRequestFrame+0x32>
    c6f8:	2300      	movs	r3, #0
    c6fa:	2064      	movs	r0, #100	; 0x64
    c6fc:	1ac1      	subs	r1, r0, r3
    c6fe:	5c61      	ldrb	r1, [r4, r1]
    c700:	18ea      	adds	r2, r5, r3
    c702:	3301      	adds	r3, #1
    c704:	7251      	strb	r1, [r2, #9]
    c706:	2b08      	cmp	r3, #8
    c708:	d1f8      	bne.n	c6fc <PrepareJoinRequestFrame+0x44>
    c70a:	4b16      	ldr	r3, [pc, #88]	; (c764 <PrepareJoinRequestFrame+0xac>)
    c70c:	4798      	blx	r3
    c70e:	4b16      	ldr	r3, [pc, #88]	; (c768 <PrepareJoinRequestFrame+0xb0>)
    c710:	4916      	ldr	r1, [pc, #88]	; (c76c <PrepareJoinRequestFrame+0xb4>)
    c712:	4798      	blx	r3
    c714:	34c4      	adds	r4, #196	; 0xc4
    c716:	8021      	strh	r1, [r4, #0]
    c718:	2202      	movs	r2, #2
    c71a:	0021      	movs	r1, r4
    c71c:	4814      	ldr	r0, [pc, #80]	; (c770 <PrepareJoinRequestFrame+0xb8>)
    c71e:	4c15      	ldr	r4, [pc, #84]	; (c774 <PrepareJoinRequestFrame+0xbc>)
    c720:	47a0      	blx	r4
    c722:	2313      	movs	r3, #19
    c724:	4e14      	ldr	r6, [pc, #80]	; (c778 <PrepareJoinRequestFrame+0xc0>)
    c726:	9300      	str	r3, [sp, #0]
    c728:	0032      	movs	r2, r6
    c72a:	002b      	movs	r3, r5
    c72c:	2100      	movs	r1, #0
    c72e:	4d13      	ldr	r5, [pc, #76]	; (c77c <PrepareJoinRequestFrame+0xc4>)
    c730:	4813      	ldr	r0, [pc, #76]	; (c780 <PrepareJoinRequestFrame+0xc8>)
    c732:	47a8      	blx	r5
    c734:	0031      	movs	r1, r6
    c736:	2204      	movs	r2, #4
    c738:	a803      	add	r0, sp, #12
    c73a:	47a0      	blx	r4
    c73c:	2204      	movs	r2, #4
    c73e:	a903      	add	r1, sp, #12
    c740:	4810      	ldr	r0, [pc, #64]	; (c784 <PrepareJoinRequestFrame+0xcc>)
    c742:	47a0      	blx	r4
    c744:	2017      	movs	r0, #23
    c746:	b004      	add	sp, #16
    c748:	bd70      	pop	{r4, r5, r6, pc}
    c74a:	46c0      	nop			; (mov r8, r8)
    c74c:	200019b9 	.word	0x200019b9
    c750:	000151f1 	.word	0x000151f1
    c754:	200017d4 	.word	0x200017d4
    c758:	20001829 	.word	0x20001829
    c75c:	00009449 	.word	0x00009449
    c760:	20001831 	.word	0x20001831
    c764:	00015391 	.word	0x00015391
    c768:	00011ce9 	.word	0x00011ce9
    c76c:	0000ffff 	.word	0x0000ffff
    c770:	200019ca 	.word	0x200019ca
    c774:	0001516d 	.word	0x0001516d
    c778:	20000ea8 	.word	0x20000ea8
    c77c:	0000944d 	.word	0x0000944d
    c780:	20001819 	.word	0x20001819
    c784:	200019cc 	.word	0x200019cc

0000c788 <ConfigureRadioRx>:
    c788:	b5f0      	push	{r4, r5, r6, r7, lr}
    c78a:	b087      	sub	sp, #28
    c78c:	466b      	mov	r3, sp
    c78e:	2600      	movs	r6, #0
    c790:	1ddc      	adds	r4, r3, #7
    c792:	71d8      	strb	r0, [r3, #7]
    c794:	729e      	strb	r6, [r3, #10]
    c796:	466a      	mov	r2, sp
    c798:	2301      	movs	r3, #1
    c79a:	72d3      	strb	r3, [r2, #11]
    c79c:	2215      	movs	r2, #21
    c79e:	ad03      	add	r5, sp, #12
    c7a0:	4f11      	ldr	r7, [pc, #68]	; (c7e8 <ConfigureRadioRx+0x60>)
    c7a2:	9100      	str	r1, [sp, #0]
    c7a4:	446a      	add	r2, sp
    c7a6:	0021      	movs	r1, r4
    c7a8:	2023      	movs	r0, #35	; 0x23
    c7aa:	80ae      	strh	r6, [r5, #4]
    c7ac:	47b8      	blx	r7
    c7ae:	2216      	movs	r2, #22
    c7b0:	0021      	movs	r1, r4
    c7b2:	446a      	add	r2, sp
    c7b4:	2024      	movs	r0, #36	; 0x24
    c7b6:	47b8      	blx	r7
    c7b8:	2217      	movs	r2, #23
    c7ba:	0021      	movs	r1, r4
    c7bc:	446a      	add	r2, sp
    c7be:	2025      	movs	r0, #37	; 0x25
    c7c0:	47b8      	blx	r7
    c7c2:	9b00      	ldr	r3, [sp, #0]
    c7c4:	0028      	movs	r0, r5
    c7c6:	9303      	str	r3, [sp, #12]
    c7c8:	4b08      	ldr	r3, [pc, #32]	; (c7ec <ConfigureRadioRx+0x64>)
    c7ca:	80ae      	strh	r6, [r5, #4]
    c7cc:	4798      	blx	r3
    c7ce:	230a      	movs	r3, #10
    c7d0:	446b      	add	r3, sp
    c7d2:	0019      	movs	r1, r3
    c7d4:	4c06      	ldr	r4, [pc, #24]	; (c7f0 <ConfigureRadioRx+0x68>)
    c7d6:	2014      	movs	r0, #20
    c7d8:	47a0      	blx	r4
    c7da:	230b      	movs	r3, #11
    c7dc:	446b      	add	r3, sp
    c7de:	0019      	movs	r1, r3
    c7e0:	2006      	movs	r0, #6
    c7e2:	47a0      	blx	r4
    c7e4:	b007      	add	sp, #28
    c7e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c7e8:	00009141 	.word	0x00009141
    c7ec:	0000bd41 	.word	0x0000bd41
    c7f0:	0000ffed 	.word	0x0000ffed

0000c7f4 <LorawanReceiveWindow1Callback>:
    c7f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    c7f6:	4c18      	ldr	r4, [pc, #96]	; (c858 <LorawanReceiveWindow1Callback+0x64>)
    c7f8:	0023      	movs	r3, r4
    c7fa:	337c      	adds	r3, #124	; 0x7c
    c7fc:	781b      	ldrb	r3, [r3, #0]
    c7fe:	b25a      	sxtb	r2, r3
    c800:	2a00      	cmp	r2, #0
    c802:	db28      	blt.n	c856 <LorawanReceiveWindow1Callback+0x62>
    c804:	0022      	movs	r2, r4
    c806:	32f4      	adds	r2, #244	; 0xf4
    c808:	7812      	ldrb	r2, [r2, #0]
    c80a:	2a04      	cmp	r2, #4
    c80c:	d103      	bne.n	c816 <LorawanReceiveWindow1Callback+0x22>
    c80e:	07db      	lsls	r3, r3, #31
    c810:	d501      	bpl.n	c816 <LorawanReceiveWindow1Callback+0x22>
    c812:	4b12      	ldr	r3, [pc, #72]	; (c85c <LorawanReceiveWindow1Callback+0x68>)
    c814:	4798      	blx	r3
    c816:	0021      	movs	r1, r4
    c818:	220e      	movs	r2, #14
    c81a:	317c      	adds	r1, #124	; 0x7c
    c81c:	780b      	ldrb	r3, [r1, #0]
    c81e:	ad01      	add	r5, sp, #4
    c820:	4393      	bics	r3, r2
    c822:	001a      	movs	r2, r3
    c824:	2306      	movs	r3, #6
    c826:	4313      	orrs	r3, r2
    c828:	0022      	movs	r2, r4
    c82a:	700b      	strb	r3, [r1, #0]
    c82c:	3268      	adds	r2, #104	; 0x68
    c82e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    c830:	7811      	ldrb	r1, [r2, #0]
    c832:	0a1b      	lsrs	r3, r3, #8
    c834:	3469      	adds	r4, #105	; 0x69
    c836:	0609      	lsls	r1, r1, #24
    c838:	4319      	orrs	r1, r3
    c83a:	7820      	ldrb	r0, [r4, #0]
    c83c:	4b08      	ldr	r3, [pc, #32]	; (c860 <LorawanReceiveWindow1Callback+0x6c>)
    c83e:	4798      	blx	r3
    c840:	2300      	movs	r3, #0
    c842:	702b      	strb	r3, [r5, #0]
    c844:	466b      	mov	r3, sp
    c846:	0021      	movs	r1, r4
    c848:	1d9a      	adds	r2, r3, #6
    c84a:	2003      	movs	r0, #3
    c84c:	4b05      	ldr	r3, [pc, #20]	; (c864 <LorawanReceiveWindow1Callback+0x70>)
    c84e:	4798      	blx	r3
    c850:	0028      	movs	r0, r5
    c852:	4b05      	ldr	r3, [pc, #20]	; (c868 <LorawanReceiveWindow1Callback+0x74>)
    c854:	4798      	blx	r3
    c856:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    c858:	200017d4 	.word	0x200017d4
    c85c:	0000f721 	.word	0x0000f721
    c860:	0000c789 	.word	0x0000c789
    c864:	00009141 	.word	0x00009141
    c868:	00011211 	.word	0x00011211

0000c86c <ConfigureRadioTx>:
    c86c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c86e:	2517      	movs	r5, #23
    c870:	2300      	movs	r3, #0
    c872:	2616      	movs	r6, #22
    c874:	2701      	movs	r7, #1
    c876:	b087      	sub	sp, #28
    c878:	ac01      	add	r4, sp, #4
    c87a:	446d      	add	r5, sp
    c87c:	9001      	str	r0, [sp, #4]
    c87e:	702b      	strb	r3, [r5, #0]
    c880:	0020      	movs	r0, r4
    c882:	4b10      	ldr	r3, [pc, #64]	; (c8c4 <ConfigureRadioTx+0x58>)
    c884:	446e      	add	r6, sp
    c886:	9102      	str	r1, [sp, #8]
    c888:	9203      	str	r2, [sp, #12]
    c88a:	7037      	strb	r7, [r6, #0]
    c88c:	4798      	blx	r3
    c88e:	79e3      	ldrb	r3, [r4, #7]
    c890:	4c0d      	ldr	r4, [pc, #52]	; (c8c8 <ConfigureRadioTx+0x5c>)
    c892:	2b00      	cmp	r3, #0
    c894:	d00b      	beq.n	c8ae <ConfigureRadioTx+0x42>
    c896:	23eb      	movs	r3, #235	; 0xeb
    c898:	4a0c      	ldr	r2, [pc, #48]	; (c8cc <ConfigureRadioTx+0x60>)
    c89a:	005b      	lsls	r3, r3, #1
    c89c:	54d7      	strb	r7, [r2, r3]
    c89e:	490c      	ldr	r1, [pc, #48]	; (c8d0 <ConfigureRadioTx+0x64>)
    c8a0:	200b      	movs	r0, #11
    c8a2:	4b0c      	ldr	r3, [pc, #48]	; (c8d4 <ConfigureRadioTx+0x68>)
    c8a4:	4798      	blx	r3
    c8a6:	210a      	movs	r1, #10
    c8a8:	200b      	movs	r0, #11
    c8aa:	4469      	add	r1, sp
    c8ac:	47a0      	blx	r4
    c8ae:	a903      	add	r1, sp, #12
    c8b0:	2004      	movs	r0, #4
    c8b2:	47a0      	blx	r4
    c8b4:	0031      	movs	r1, r6
    c8b6:	2014      	movs	r0, #20
    c8b8:	47a0      	blx	r4
    c8ba:	0029      	movs	r1, r5
    c8bc:	2006      	movs	r0, #6
    c8be:	47a0      	blx	r4
    c8c0:	b007      	add	sp, #28
    c8c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c8c4:	0000bd41 	.word	0x0000bd41
    c8c8:	0000ffed 	.word	0x0000ffed
    c8cc:	200017d4 	.word	0x200017d4
    c8d0:	200019a9 	.word	0x200019a9
    c8d4:	0000fefd 	.word	0x0000fefd

0000c8d8 <LorawanGetChAndInitiateRadioTransmit>:
    c8d8:	2301      	movs	r3, #1
    c8da:	b530      	push	{r4, r5, lr}
    c8dc:	4c46      	ldr	r4, [pc, #280]	; (c9f8 <LorawanGetChAndInitiateRadioTransmit+0x120>)
    c8de:	b089      	sub	sp, #36	; 0x24
    c8e0:	a902      	add	r1, sp, #8
    c8e2:	700b      	strb	r3, [r1, #0]
    c8e4:	0023      	movs	r3, r4
    c8e6:	33e1      	adds	r3, #225	; 0xe1
    c8e8:	781b      	ldrb	r3, [r3, #0]
    c8ea:	704b      	strb	r3, [r1, #1]
    c8ec:	0023      	movs	r3, r4
    c8ee:	33df      	adds	r3, #223	; 0xdf
    c8f0:	781b      	ldrb	r3, [r3, #0]
    c8f2:	708b      	strb	r3, [r1, #2]
    c8f4:	0023      	movs	r3, r4
    c8f6:	33f4      	adds	r3, #244	; 0xf4
    c8f8:	781b      	ldrb	r3, [r3, #0]
    c8fa:	2b01      	cmp	r3, #1
    c8fc:	d108      	bne.n	c910 <LorawanGetChAndInitiateRadioTransmit+0x38>
    c8fe:	0020      	movs	r0, r4
    c900:	220e      	movs	r2, #14
    c902:	307c      	adds	r0, #124	; 0x7c
    c904:	7803      	ldrb	r3, [r0, #0]
    c906:	4393      	bics	r3, r2
    c908:	001a      	movs	r2, r3
    c90a:	230c      	movs	r3, #12
    c90c:	4313      	orrs	r3, r2
    c90e:	7003      	strb	r3, [r0, #0]
    c910:	aa05      	add	r2, sp, #20
    c912:	202f      	movs	r0, #47	; 0x2f
    c914:	4d39      	ldr	r5, [pc, #228]	; (c9fc <LorawanGetChAndInitiateRadioTransmit+0x124>)
    c916:	47a8      	blx	r5
    c918:	0023      	movs	r3, r4
    c91a:	2808      	cmp	r0, #8
    c91c:	d132      	bne.n	c984 <LorawanGetChAndInitiateRadioTransmit+0xac>
    c91e:	33f4      	adds	r3, #244	; 0xf4
    c920:	781b      	ldrb	r3, [r3, #0]
    c922:	ad03      	add	r5, sp, #12
    c924:	2b04      	cmp	r3, #4
    c926:	d104      	bne.n	c932 <LorawanGetChAndInitiateRadioTransmit+0x5a>
    c928:	3b03      	subs	r3, #3
    c92a:	702b      	strb	r3, [r5, #0]
    c92c:	0028      	movs	r0, r5
    c92e:	4b34      	ldr	r3, [pc, #208]	; (ca00 <LorawanGetChAndInitiateRadioTransmit+0x128>)
    c930:	4798      	blx	r3
    c932:	9805      	ldr	r0, [sp, #20]
    c934:	4b33      	ldr	r3, [pc, #204]	; (ca04 <LorawanGetChAndInitiateRadioTransmit+0x12c>)
    c936:	9906      	ldr	r1, [sp, #24]
    c938:	9a07      	ldr	r2, [sp, #28]
    c93a:	4798      	blx	r3
    c93c:	0023      	movs	r3, r4
    c93e:	33c6      	adds	r3, #198	; 0xc6
    c940:	881b      	ldrh	r3, [r3, #0]
    c942:	0028      	movs	r0, r5
    c944:	702b      	strb	r3, [r5, #0]
    c946:	4b30      	ldr	r3, [pc, #192]	; (ca08 <LorawanGetChAndInitiateRadioTransmit+0x130>)
    c948:	606b      	str	r3, [r5, #4]
    c94a:	4b30      	ldr	r3, [pc, #192]	; (ca0c <LorawanGetChAndInitiateRadioTransmit+0x134>)
    c94c:	4798      	blx	r3
    c94e:	2800      	cmp	r0, #0
    c950:	d109      	bne.n	c966 <LorawanGetChAndInitiateRadioTransmit+0x8e>
    c952:	220e      	movs	r2, #14
    c954:	347c      	adds	r4, #124	; 0x7c
    c956:	7823      	ldrb	r3, [r4, #0]
    c958:	4393      	bics	r3, r2
    c95a:	001a      	movs	r2, r3
    c95c:	2302      	movs	r3, #2
    c95e:	4313      	orrs	r3, r2
    c960:	7023      	strb	r3, [r4, #0]
    c962:	b009      	add	sp, #36	; 0x24
    c964:	bd30      	pop	{r4, r5, pc}
    c966:	23e0      	movs	r3, #224	; 0xe0
    c968:	2200      	movs	r2, #0
    c96a:	33ff      	adds	r3, #255	; 0xff
    c96c:	5ce3      	ldrb	r3, [r4, r3]
    c96e:	4928      	ldr	r1, [pc, #160]	; (ca10 <LorawanGetChAndInitiateRadioTransmit+0x138>)
    c970:	34f3      	adds	r4, #243	; 0xf3
    c972:	4359      	muls	r1, r3
    c974:	4b27      	ldr	r3, [pc, #156]	; (ca14 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
    c976:	7820      	ldrb	r0, [r4, #0]
    c978:	18c9      	adds	r1, r1, r3
    c97a:	4b27      	ldr	r3, [pc, #156]	; (ca18 <LorawanGetChAndInitiateRadioTransmit+0x140>)
    c97c:	9200      	str	r2, [sp, #0]
    c97e:	4c27      	ldr	r4, [pc, #156]	; (ca1c <LorawanGetChAndInitiateRadioTransmit+0x144>)
    c980:	47a0      	blx	r4
    c982:	e7ee      	b.n	c962 <LorawanGetChAndInitiateRadioTransmit+0x8a>
    c984:	33ff      	adds	r3, #255	; 0xff
    c986:	7c5b      	ldrb	r3, [r3, #17]
    c988:	079a      	lsls	r2, r3, #30
    c98a:	d516      	bpl.n	c9ba <LorawanGetChAndInitiateRadioTransmit+0xe2>
    c98c:	aa03      	add	r2, sp, #12
    c98e:	4924      	ldr	r1, [pc, #144]	; (ca20 <LorawanGetChAndInitiateRadioTransmit+0x148>)
    c990:	2026      	movs	r0, #38	; 0x26
    c992:	47a8      	blx	r5
    c994:	9b03      	ldr	r3, [sp, #12]
    c996:	1c5a      	adds	r2, r3, #1
    c998:	d001      	beq.n	c99e <LorawanGetChAndInitiateRadioTransmit+0xc6>
    c99a:	3314      	adds	r3, #20
    c99c:	9303      	str	r3, [sp, #12]
    c99e:	23e0      	movs	r3, #224	; 0xe0
    c9a0:	21fa      	movs	r1, #250	; 0xfa
    c9a2:	33ff      	adds	r3, #255	; 0xff
    c9a4:	5ce3      	ldrb	r3, [r4, r3]
    c9a6:	9a03      	ldr	r2, [sp, #12]
    c9a8:	0089      	lsls	r1, r1, #2
    c9aa:	1ad3      	subs	r3, r2, r3
    c9ac:	2200      	movs	r2, #0
    c9ae:	4359      	muls	r1, r3
    c9b0:	34e9      	adds	r4, #233	; 0xe9
    c9b2:	7820      	ldrb	r0, [r4, #0]
    c9b4:	9200      	str	r2, [sp, #0]
    c9b6:	4b1b      	ldr	r3, [pc, #108]	; (ca24 <LorawanGetChAndInitiateRadioTransmit+0x14c>)
    c9b8:	e7e1      	b.n	c97e <LorawanGetChAndInitiateRadioTransmit+0xa6>
    c9ba:	075b      	lsls	r3, r3, #29
    c9bc:	d508      	bpl.n	c9d0 <LorawanGetChAndInitiateRadioTransmit+0xf8>
    c9be:	aa03      	add	r2, sp, #12
    c9c0:	4917      	ldr	r1, [pc, #92]	; (ca20 <LorawanGetChAndInitiateRadioTransmit+0x148>)
    c9c2:	2033      	movs	r0, #51	; 0x33
    c9c4:	47a8      	blx	r5
    c9c6:	9b03      	ldr	r3, [sp, #12]
    c9c8:	1c5a      	adds	r2, r3, #1
    c9ca:	d0e8      	beq.n	c99e <LorawanGetChAndInitiateRadioTransmit+0xc6>
    c9cc:	3301      	adds	r3, #1
    c9ce:	e7e5      	b.n	c99c <LorawanGetChAndInitiateRadioTransmit+0xc4>
    c9d0:	0023      	movs	r3, r4
    c9d2:	2201      	movs	r2, #1
    c9d4:	338c      	adds	r3, #140	; 0x8c
    c9d6:	781b      	ldrb	r3, [r3, #0]
    c9d8:	401a      	ands	r2, r3
    c9da:	d109      	bne.n	c9f0 <LorawanGetChAndInitiateRadioTransmit+0x118>
    c9dc:	23e0      	movs	r3, #224	; 0xe0
    c9de:	33ff      	adds	r3, #255	; 0xff
    c9e0:	5ce3      	ldrb	r3, [r4, r3]
    c9e2:	490b      	ldr	r1, [pc, #44]	; (ca10 <LorawanGetChAndInitiateRadioTransmit+0x138>)
    c9e4:	34e9      	adds	r4, #233	; 0xe9
    c9e6:	4359      	muls	r1, r3
    c9e8:	4b0a      	ldr	r3, [pc, #40]	; (ca14 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
    c9ea:	7820      	ldrb	r0, [r4, #0]
    c9ec:	18c9      	adds	r1, r1, r3
    c9ee:	e7e1      	b.n	c9b4 <LorawanGetChAndInitiateRadioTransmit+0xdc>
    c9f0:	4b0d      	ldr	r3, [pc, #52]	; (ca28 <LorawanGetChAndInitiateRadioTransmit+0x150>)
    c9f2:	4798      	blx	r3
    c9f4:	e7b5      	b.n	c962 <LorawanGetChAndInitiateRadioTransmit+0x8a>
    c9f6:	46c0      	nop			; (mov r8, r8)
    c9f8:	200017d4 	.word	0x200017d4
    c9fc:	00009141 	.word	0x00009141
    ca00:	00011211 	.word	0x00011211
    ca04:	0000c86d 	.word	0x0000c86d
    ca08:	200019c9 	.word	0x200019c9
    ca0c:	0001093d 	.word	0x0001093d
    ca10:	fffffc18 	.word	0xfffffc18
    ca14:	001e8480 	.word	0x001e8480
    ca18:	0000ca2d 	.word	0x0000ca2d
    ca1c:	00009b55 	.word	0x00009b55
    ca20:	200018b3 	.word	0x200018b3
    ca24:	0000cae1 	.word	0x0000cae1
    ca28:	0000c241 	.word	0x0000c241

0000ca2c <TransmissionErrorCallback>:
    ca2c:	b530      	push	{r4, r5, lr}
    ca2e:	4c22      	ldr	r4, [pc, #136]	; (cab8 <TransmissionErrorCallback+0x8c>)
    ca30:	2501      	movs	r5, #1
    ca32:	0023      	movs	r3, r4
    ca34:	b08b      	sub	sp, #44	; 0x2c
    ca36:	a903      	add	r1, sp, #12
    ca38:	700d      	strb	r5, [r1, #0]
    ca3a:	33e1      	adds	r3, #225	; 0xe1
    ca3c:	781b      	ldrb	r3, [r3, #0]
    ca3e:	aa07      	add	r2, sp, #28
    ca40:	704b      	strb	r3, [r1, #1]
    ca42:	0023      	movs	r3, r4
    ca44:	33df      	adds	r3, #223	; 0xdf
    ca46:	781b      	ldrb	r3, [r3, #0]
    ca48:	202f      	movs	r0, #47	; 0x2f
    ca4a:	708b      	strb	r3, [r1, #2]
    ca4c:	4b1b      	ldr	r3, [pc, #108]	; (cabc <TransmissionErrorCallback+0x90>)
    ca4e:	4798      	blx	r3
    ca50:	2808      	cmp	r0, #8
    ca52:	d121      	bne.n	ca98 <TransmissionErrorCallback+0x6c>
    ca54:	a804      	add	r0, sp, #16
    ca56:	4b1a      	ldr	r3, [pc, #104]	; (cac0 <TransmissionErrorCallback+0x94>)
    ca58:	7005      	strb	r5, [r0, #0]
    ca5a:	4798      	blx	r3
    ca5c:	9807      	ldr	r0, [sp, #28]
    ca5e:	4b19      	ldr	r3, [pc, #100]	; (cac4 <TransmissionErrorCallback+0x98>)
    ca60:	9908      	ldr	r1, [sp, #32]
    ca62:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ca64:	4798      	blx	r3
    ca66:	0023      	movs	r3, r4
    ca68:	33c6      	adds	r3, #198	; 0xc6
    ca6a:	881b      	ldrh	r3, [r3, #0]
    ca6c:	a805      	add	r0, sp, #20
    ca6e:	7003      	strb	r3, [r0, #0]
    ca70:	4b15      	ldr	r3, [pc, #84]	; (cac8 <TransmissionErrorCallback+0x9c>)
    ca72:	6043      	str	r3, [r0, #4]
    ca74:	4b15      	ldr	r3, [pc, #84]	; (cacc <TransmissionErrorCallback+0xa0>)
    ca76:	4798      	blx	r3
    ca78:	2800      	cmp	r0, #0
    ca7a:	d01b      	beq.n	cab4 <TransmissionErrorCallback+0x88>
    ca7c:	0023      	movs	r3, r4
    ca7e:	33f4      	adds	r3, #244	; 0xf4
    ca80:	781b      	ldrb	r3, [r3, #0]
    ca82:	42ab      	cmp	r3, r5
    ca84:	d108      	bne.n	ca98 <TransmissionErrorCallback+0x6c>
    ca86:	0021      	movs	r1, r4
    ca88:	220e      	movs	r2, #14
    ca8a:	317c      	adds	r1, #124	; 0x7c
    ca8c:	780b      	ldrb	r3, [r1, #0]
    ca8e:	4393      	bics	r3, r2
    ca90:	001a      	movs	r2, r3
    ca92:	230c      	movs	r3, #12
    ca94:	4313      	orrs	r3, r2
    ca96:	700b      	strb	r3, [r1, #0]
    ca98:	23e0      	movs	r3, #224	; 0xe0
    ca9a:	2200      	movs	r2, #0
    ca9c:	33ff      	adds	r3, #255	; 0xff
    ca9e:	5ce3      	ldrb	r3, [r4, r3]
    caa0:	490b      	ldr	r1, [pc, #44]	; (cad0 <TransmissionErrorCallback+0xa4>)
    caa2:	34f3      	adds	r4, #243	; 0xf3
    caa4:	4359      	muls	r1, r3
    caa6:	4b0b      	ldr	r3, [pc, #44]	; (cad4 <TransmissionErrorCallback+0xa8>)
    caa8:	7820      	ldrb	r0, [r4, #0]
    caaa:	18c9      	adds	r1, r1, r3
    caac:	9200      	str	r2, [sp, #0]
    caae:	4b0a      	ldr	r3, [pc, #40]	; (cad8 <TransmissionErrorCallback+0xac>)
    cab0:	4c0a      	ldr	r4, [pc, #40]	; (cadc <TransmissionErrorCallback+0xb0>)
    cab2:	47a0      	blx	r4
    cab4:	b00b      	add	sp, #44	; 0x2c
    cab6:	bd30      	pop	{r4, r5, pc}
    cab8:	200017d4 	.word	0x200017d4
    cabc:	00009141 	.word	0x00009141
    cac0:	00011211 	.word	0x00011211
    cac4:	0000c86d 	.word	0x0000c86d
    cac8:	200019c9 	.word	0x200019c9
    cacc:	0001093d 	.word	0x0001093d
    cad0:	fffffc18 	.word	0xfffffc18
    cad4:	001e8480 	.word	0x001e8480
    cad8:	0000ca2d 	.word	0x0000ca2d
    cadc:	00009b55 	.word	0x00009b55

0000cae0 <UnconfirmedTransmissionCallback>:
    cae0:	b5f0      	push	{r4, r5, r6, r7, lr}
    cae2:	4c38      	ldr	r4, [pc, #224]	; (cbc4 <UnconfirmedTransmissionCallback+0xe4>)
    cae4:	b08b      	sub	sp, #44	; 0x2c
    cae6:	0023      	movs	r3, r4
    cae8:	33c6      	adds	r3, #198	; 0xc6
    caea:	881b      	ldrh	r3, [r3, #0]
    caec:	af05      	add	r7, sp, #20
    caee:	703b      	strb	r3, [r7, #0]
    caf0:	4b35      	ldr	r3, [pc, #212]	; (cbc8 <UnconfirmedTransmissionCallback+0xe8>)
    caf2:	a903      	add	r1, sp, #12
    caf4:	9306      	str	r3, [sp, #24]
    caf6:	2301      	movs	r3, #1
    caf8:	700b      	strb	r3, [r1, #0]
    cafa:	0023      	movs	r3, r4
    cafc:	0026      	movs	r6, r4
    cafe:	33e1      	adds	r3, #225	; 0xe1
    cb00:	781b      	ldrb	r3, [r3, #0]
    cb02:	36df      	adds	r6, #223	; 0xdf
    cb04:	704b      	strb	r3, [r1, #1]
    cb06:	7833      	ldrb	r3, [r6, #0]
    cb08:	aa07      	add	r2, sp, #28
    cb0a:	202f      	movs	r0, #47	; 0x2f
    cb0c:	4d2f      	ldr	r5, [pc, #188]	; (cbcc <UnconfirmedTransmissionCallback+0xec>)
    cb0e:	708b      	strb	r3, [r1, #2]
    cb10:	47a8      	blx	r5
    cb12:	2808      	cmp	r0, #8
    cb14:	d12c      	bne.n	cb70 <UnconfirmedTransmissionCallback+0x90>
    cb16:	2301      	movs	r3, #1
    cb18:	a804      	add	r0, sp, #16
    cb1a:	7003      	strb	r3, [r0, #0]
    cb1c:	4b2c      	ldr	r3, [pc, #176]	; (cbd0 <UnconfirmedTransmissionCallback+0xf0>)
    cb1e:	4798      	blx	r3
    cb20:	9807      	ldr	r0, [sp, #28]
    cb22:	4b2c      	ldr	r3, [pc, #176]	; (cbd4 <UnconfirmedTransmissionCallback+0xf4>)
    cb24:	9908      	ldr	r1, [sp, #32]
    cb26:	9a09      	ldr	r2, [sp, #36]	; 0x24
    cb28:	4798      	blx	r3
    cb2a:	0038      	movs	r0, r7
    cb2c:	4b2a      	ldr	r3, [pc, #168]	; (cbd8 <UnconfirmedTransmissionCallback+0xf8>)
    cb2e:	4798      	blx	r3
    cb30:	2800      	cmp	r0, #0
    cb32:	d01b      	beq.n	cb6c <UnconfirmedTransmissionCallback+0x8c>
    cb34:	0023      	movs	r3, r4
    cb36:	33f4      	adds	r3, #244	; 0xf4
    cb38:	781b      	ldrb	r3, [r3, #0]
    cb3a:	2b01      	cmp	r3, #1
    cb3c:	d108      	bne.n	cb50 <UnconfirmedTransmissionCallback+0x70>
    cb3e:	0021      	movs	r1, r4
    cb40:	220e      	movs	r2, #14
    cb42:	317c      	adds	r1, #124	; 0x7c
    cb44:	780b      	ldrb	r3, [r1, #0]
    cb46:	4393      	bics	r3, r2
    cb48:	001a      	movs	r2, r3
    cb4a:	230c      	movs	r3, #12
    cb4c:	4313      	orrs	r3, r2
    cb4e:	700b      	strb	r3, [r1, #0]
    cb50:	23e0      	movs	r3, #224	; 0xe0
    cb52:	2200      	movs	r2, #0
    cb54:	33ff      	adds	r3, #255	; 0xff
    cb56:	5ce3      	ldrb	r3, [r4, r3]
    cb58:	4920      	ldr	r1, [pc, #128]	; (cbdc <UnconfirmedTransmissionCallback+0xfc>)
    cb5a:	34f3      	adds	r4, #243	; 0xf3
    cb5c:	4359      	muls	r1, r3
    cb5e:	4b20      	ldr	r3, [pc, #128]	; (cbe0 <UnconfirmedTransmissionCallback+0x100>)
    cb60:	7820      	ldrb	r0, [r4, #0]
    cb62:	18c9      	adds	r1, r1, r3
    cb64:	4b1f      	ldr	r3, [pc, #124]	; (cbe4 <UnconfirmedTransmissionCallback+0x104>)
    cb66:	9200      	str	r2, [sp, #0]
    cb68:	4c1f      	ldr	r4, [pc, #124]	; (cbe8 <UnconfirmedTransmissionCallback+0x108>)
    cb6a:	47a0      	blx	r4
    cb6c:	b00b      	add	sp, #44	; 0x2c
    cb6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cb70:	23fa      	movs	r3, #250	; 0xfa
    cb72:	00db      	lsls	r3, r3, #3
    cb74:	9304      	str	r3, [sp, #16]
    cb76:	0023      	movs	r3, r4
    cb78:	33ff      	adds	r3, #255	; 0xff
    cb7a:	7c5b      	ldrb	r3, [r3, #17]
    cb7c:	079a      	lsls	r2, r3, #30
    cb7e:	d516      	bpl.n	cbae <UnconfirmedTransmissionCallback+0xce>
    cb80:	aa04      	add	r2, sp, #16
    cb82:	0031      	movs	r1, r6
    cb84:	2026      	movs	r0, #38	; 0x26
    cb86:	47a8      	blx	r5
    cb88:	9b04      	ldr	r3, [sp, #16]
    cb8a:	1c5a      	adds	r2, r3, #1
    cb8c:	d001      	beq.n	cb92 <UnconfirmedTransmissionCallback+0xb2>
    cb8e:	3314      	adds	r3, #20
    cb90:	9304      	str	r3, [sp, #16]
    cb92:	23e0      	movs	r3, #224	; 0xe0
    cb94:	33ff      	adds	r3, #255	; 0xff
    cb96:	5ce3      	ldrb	r3, [r4, r3]
    cb98:	9a04      	ldr	r2, [sp, #16]
    cb9a:	21fa      	movs	r1, #250	; 0xfa
    cb9c:	1ad3      	subs	r3, r2, r3
    cb9e:	2200      	movs	r2, #0
    cba0:	0089      	lsls	r1, r1, #2
    cba2:	34e9      	adds	r4, #233	; 0xe9
    cba4:	4359      	muls	r1, r3
    cba6:	7820      	ldrb	r0, [r4, #0]
    cba8:	4b10      	ldr	r3, [pc, #64]	; (cbec <UnconfirmedTransmissionCallback+0x10c>)
    cbaa:	9200      	str	r2, [sp, #0]
    cbac:	e7dc      	b.n	cb68 <UnconfirmedTransmissionCallback+0x88>
    cbae:	075b      	lsls	r3, r3, #29
    cbb0:	d5ef      	bpl.n	cb92 <UnconfirmedTransmissionCallback+0xb2>
    cbb2:	aa04      	add	r2, sp, #16
    cbb4:	0031      	movs	r1, r6
    cbb6:	2033      	movs	r0, #51	; 0x33
    cbb8:	47a8      	blx	r5
    cbba:	9b04      	ldr	r3, [sp, #16]
    cbbc:	1c5a      	adds	r2, r3, #1
    cbbe:	d0e8      	beq.n	cb92 <UnconfirmedTransmissionCallback+0xb2>
    cbc0:	3301      	adds	r3, #1
    cbc2:	e7e5      	b.n	cb90 <UnconfirmedTransmissionCallback+0xb0>
    cbc4:	200017d4 	.word	0x200017d4
    cbc8:	200019c9 	.word	0x200019c9
    cbcc:	00009141 	.word	0x00009141
    cbd0:	00011211 	.word	0x00011211
    cbd4:	0000c86d 	.word	0x0000c86d
    cbd8:	0001093d 	.word	0x0001093d
    cbdc:	fffffc18 	.word	0xfffffc18
    cbe0:	001e8480 	.word	0x001e8480
    cbe4:	0000ca2d 	.word	0x0000ca2d
    cbe8:	00009b55 	.word	0x00009b55
    cbec:	0000cae1 	.word	0x0000cae1

0000cbf0 <UpdateJoinInProgress>:
    cbf0:	b570      	push	{r4, r5, r6, lr}
    cbf2:	2504      	movs	r5, #4
    cbf4:	4c0a      	ldr	r4, [pc, #40]	; (cc20 <UpdateJoinInProgress+0x30>)
    cbf6:	0002      	movs	r2, r0
    cbf8:	0021      	movs	r1, r4
    cbfa:	348c      	adds	r4, #140	; 0x8c
    cbfc:	7826      	ldrb	r6, [r4, #0]
    cbfe:	2001      	movs	r0, #1
    cc00:	4335      	orrs	r5, r6
    cc02:	7025      	strb	r5, [r4, #0]
    cc04:	2407      	movs	r4, #7
    cc06:	4022      	ands	r2, r4
    cc08:	4082      	lsls	r2, r0
    cc0a:	317c      	adds	r1, #124	; 0x7c
    cc0c:	780b      	ldrb	r3, [r1, #0]
    cc0e:	1924      	adds	r4, r4, r4
    cc10:	4383      	bics	r3, r0
    cc12:	43a3      	bics	r3, r4
    cc14:	4313      	orrs	r3, r2
    cc16:	700b      	strb	r3, [r1, #0]
    cc18:	210b      	movs	r1, #11
    cc1a:	4b02      	ldr	r3, [pc, #8]	; (cc24 <UpdateJoinInProgress+0x34>)
    cc1c:	4798      	blx	r3
    cc1e:	bd70      	pop	{r4, r5, r6, pc}
    cc20:	200017d4 	.word	0x200017d4
    cc24:	00009729 	.word	0x00009729

0000cc28 <LORAWAN_Join>:
    cc28:	b573      	push	{r0, r1, r4, r5, r6, lr}
    cc2a:	4c33      	ldr	r4, [pc, #204]	; (ccf8 <LORAWAN_Join+0xd0>)
    cc2c:	0006      	movs	r6, r0
    cc2e:	0023      	movs	r3, r4
    cc30:	337c      	adds	r3, #124	; 0x7c
    cc32:	781b      	ldrb	r3, [r3, #0]
    cc34:	200f      	movs	r0, #15
    cc36:	b25a      	sxtb	r2, r3
    cc38:	2a00      	cmp	r2, #0
    cc3a:	db4b      	blt.n	ccd4 <LORAWAN_Join+0xac>
    cc3c:	3803      	subs	r0, #3
    cc3e:	065b      	lsls	r3, r3, #25
    cc40:	d448      	bmi.n	ccd4 <LORAWAN_Join+0xac>
    cc42:	0023      	movs	r3, r4
    cc44:	338c      	adds	r3, #140	; 0x8c
    cc46:	781b      	ldrb	r3, [r3, #0]
    cc48:	3007      	adds	r0, #7
    cc4a:	075b      	lsls	r3, r3, #29
    cc4c:	d442      	bmi.n	ccd4 <LORAWAN_Join+0xac>
    cc4e:	0023      	movs	r3, r4
    cc50:	33f4      	adds	r3, #244	; 0xf4
    cc52:	781b      	ldrb	r3, [r3, #0]
    cc54:	2b04      	cmp	r3, #4
    cc56:	d038      	beq.n	ccca <LORAWAN_Join+0xa2>
    cc58:	0023      	movs	r3, r4
    cc5a:	33f4      	adds	r3, #244	; 0xf4
    cc5c:	781b      	ldrb	r3, [r3, #0]
    cc5e:	2b01      	cmp	r3, #1
    cc60:	d105      	bne.n	cc6e <LORAWAN_Join+0x46>
    cc62:	0023      	movs	r3, r4
    cc64:	337c      	adds	r3, #124	; 0x7c
    cc66:	781a      	ldrb	r2, [r3, #0]
    cc68:	230e      	movs	r3, #14
    cc6a:	421a      	tst	r2, r3
    cc6c:	d131      	bne.n	ccd2 <LORAWAN_Join+0xaa>
    cc6e:	2102      	movs	r1, #2
    cc70:	2001      	movs	r0, #1
    cc72:	4d22      	ldr	r5, [pc, #136]	; (ccfc <LORAWAN_Join+0xd4>)
    cc74:	7026      	strb	r6, [r4, #0]
    cc76:	47a8      	blx	r5
    cc78:	0023      	movs	r3, r4
    cc7a:	33d6      	adds	r3, #214	; 0xd6
    cc7c:	781b      	ldrb	r3, [r3, #0]
    cc7e:	2e00      	cmp	r6, #0
    cc80:	d129      	bne.n	ccd6 <LORAWAN_Join+0xae>
    cc82:	200b      	movs	r0, #11
    cc84:	4003      	ands	r3, r0
    cc86:	4283      	cmp	r3, r0
    cc88:	d004      	beq.n	cc94 <LORAWAN_Join+0x6c>
    cc8a:	23e2      	movs	r3, #226	; 0xe2
    cc8c:	33ff      	adds	r3, #255	; 0xff
    cc8e:	5ce3      	ldrb	r3, [r4, r3]
    cc90:	2b00      	cmp	r3, #0
    cc92:	d01f      	beq.n	ccd4 <LORAWAN_Join+0xac>
    cc94:	0023      	movs	r3, r4
    cc96:	337c      	adds	r3, #124	; 0x7c
    cc98:	781b      	ldrb	r3, [r3, #0]
    cc9a:	07db      	lsls	r3, r3, #31
    cc9c:	d503      	bpl.n	cca6 <LORAWAN_Join+0x7e>
    cc9e:	2100      	movs	r1, #0
    cca0:	203b      	movs	r0, #59	; 0x3b
    cca2:	4b17      	ldr	r3, [pc, #92]	; (cd00 <LORAWAN_Join+0xd8>)
    cca4:	4798      	blx	r3
    cca6:	0022      	movs	r2, r4
    cca8:	2001      	movs	r0, #1
    ccaa:	327c      	adds	r2, #124	; 0x7c
    ccac:	7813      	ldrb	r3, [r2, #0]
    ccae:	348c      	adds	r4, #140	; 0x8c
    ccb0:	4383      	bics	r3, r0
    ccb2:	7013      	strb	r3, [r2, #0]
    ccb4:	2304      	movs	r3, #4
    ccb6:	7822      	ldrb	r2, [r4, #0]
    ccb8:	210b      	movs	r1, #11
    ccba:	4313      	orrs	r3, r2
    ccbc:	7023      	strb	r3, [r4, #0]
    ccbe:	47a8      	blx	r5
    ccc0:	2000      	movs	r0, #0
    ccc2:	4b10      	ldr	r3, [pc, #64]	; (cd04 <LORAWAN_Join+0xdc>)
    ccc4:	4798      	blx	r3
    ccc6:	2008      	movs	r0, #8
    ccc8:	e004      	b.n	ccd4 <LORAWAN_Join+0xac>
    ccca:	4b0f      	ldr	r3, [pc, #60]	; (cd08 <LORAWAN_Join+0xe0>)
    cccc:	4798      	blx	r3
    ccce:	2808      	cmp	r0, #8
    ccd0:	d0c2      	beq.n	cc58 <LORAWAN_Join+0x30>
    ccd2:	2011      	movs	r0, #17
    ccd4:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    ccd6:	2234      	movs	r2, #52	; 0x34
    ccd8:	200b      	movs	r0, #11
    ccda:	4013      	ands	r3, r2
    ccdc:	4293      	cmp	r3, r2
    ccde:	d1f9      	bne.n	ccd4 <LORAWAN_Join+0xac>
    cce0:	3804      	subs	r0, #4
    cce2:	4b0a      	ldr	r3, [pc, #40]	; (cd0c <LORAWAN_Join+0xe4>)
    cce4:	4798      	blx	r3
    cce6:	2200      	movs	r2, #0
    cce8:	34f2      	adds	r4, #242	; 0xf2
    ccea:	7820      	ldrb	r0, [r4, #0]
    ccec:	4b08      	ldr	r3, [pc, #32]	; (cd10 <LORAWAN_Join+0xe8>)
    ccee:	9200      	str	r2, [sp, #0]
    ccf0:	4908      	ldr	r1, [pc, #32]	; (cd14 <LORAWAN_Join+0xec>)
    ccf2:	4c09      	ldr	r4, [pc, #36]	; (cd18 <LORAWAN_Join+0xf0>)
    ccf4:	47a0      	blx	r4
    ccf6:	e7e6      	b.n	ccc6 <LORAWAN_Join+0x9e>
    ccf8:	200017d4 	.word	0x200017d4
    ccfc:	00009729 	.word	0x00009729
    cd00:	00009269 	.word	0x00009269
    cd04:	0000fe79 	.word	0x0000fe79
    cd08:	0000f6e9 	.word	0x0000f6e9
    cd0c:	0000cbf1 	.word	0x0000cbf1
    cd10:	0000bbd5 	.word	0x0000bbd5
    cd14:	0000c350 	.word	0x0000c350
    cd18:	00009b55 	.word	0x00009b55

0000cd1c <EncryptFRMPayload>:
    cd1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd1e:	0007      	movs	r7, r0
    cd20:	2401      	movs	r4, #1
    cd22:	b089      	sub	sp, #36	; 0x24
    cd24:	9306      	str	r3, [sp, #24]
    cd26:	ab10      	add	r3, sp, #64	; 0x40
    cd28:	781d      	ldrb	r5, [r3, #0]
    cd2a:	090b      	lsrs	r3, r1, #4
    cd2c:	9104      	str	r1, [sp, #16]
    cd2e:	9205      	str	r2, [sp, #20]
    cd30:	9303      	str	r3, [sp, #12]
    cd32:	9b03      	ldr	r3, [sp, #12]
    cd34:	429c      	cmp	r4, r3
    cd36:	d907      	bls.n	cd48 <EncryptFRMPayload+0x2c>
    cd38:	260f      	movs	r6, #15
    cd3a:	9b04      	ldr	r3, [sp, #16]
    cd3c:	4033      	ands	r3, r6
    cd3e:	1e1e      	subs	r6, r3, #0
    cd40:	d126      	bne.n	cd90 <EncryptFRMPayload+0x74>
    cd42:	2000      	movs	r0, #0
    cd44:	b009      	add	sp, #36	; 0x24
    cd46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cd48:	9b12      	ldr	r3, [sp, #72]	; 0x48
    cd4a:	0022      	movs	r2, r4
    cd4c:	9300      	str	r3, [sp, #0]
    cd4e:	9906      	ldr	r1, [sp, #24]
    cd50:	2301      	movs	r3, #1
    cd52:	9805      	ldr	r0, [sp, #20]
    cd54:	4e1e      	ldr	r6, [pc, #120]	; (cdd0 <EncryptFRMPayload+0xb4>)
    cd56:	47b0      	blx	r6
    cd58:	4e1e      	ldr	r6, [pc, #120]	; (cdd4 <EncryptFRMPayload+0xb8>)
    cd5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    cd5c:	2101      	movs	r1, #1
    cd5e:	0030      	movs	r0, r6
    cd60:	4b1d      	ldr	r3, [pc, #116]	; (cdd8 <EncryptFRMPayload+0xbc>)
    cd62:	4798      	blx	r3
    cd64:	2800      	cmp	r0, #0
    cd66:	d1ed      	bne.n	cd44 <EncryptFRMPayload+0x28>
    cd68:	1e63      	subs	r3, r4, #1
    cd6a:	011b      	lsls	r3, r3, #4
    cd6c:	18fb      	adds	r3, r7, r3
    cd6e:	9307      	str	r3, [sp, #28]
    cd70:	9b07      	ldr	r3, [sp, #28]
    cd72:	182a      	adds	r2, r5, r0
    cd74:	5c19      	ldrb	r1, [r3, r0]
    cd76:	5d83      	ldrb	r3, [r0, r6]
    cd78:	b2d2      	uxtb	r2, r2
    cd7a:	4059      	eors	r1, r3
    cd7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cd7e:	3001      	adds	r0, #1
    cd80:	5499      	strb	r1, [r3, r2]
    cd82:	2810      	cmp	r0, #16
    cd84:	d1f4      	bne.n	cd70 <EncryptFRMPayload+0x54>
    cd86:	3510      	adds	r5, #16
    cd88:	3401      	adds	r4, #1
    cd8a:	b2ed      	uxtb	r5, r5
    cd8c:	b2e4      	uxtb	r4, r4
    cd8e:	e7d0      	b.n	cd32 <EncryptFRMPayload+0x16>
    cd90:	9b12      	ldr	r3, [sp, #72]	; 0x48
    cd92:	0022      	movs	r2, r4
    cd94:	9300      	str	r3, [sp, #0]
    cd96:	9906      	ldr	r1, [sp, #24]
    cd98:	2301      	movs	r3, #1
    cd9a:	9805      	ldr	r0, [sp, #20]
    cd9c:	4c0c      	ldr	r4, [pc, #48]	; (cdd0 <EncryptFRMPayload+0xb4>)
    cd9e:	47a0      	blx	r4
    cda0:	4c0c      	ldr	r4, [pc, #48]	; (cdd4 <EncryptFRMPayload+0xb8>)
    cda2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    cda4:	2101      	movs	r1, #1
    cda6:	0020      	movs	r0, r4
    cda8:	4b0b      	ldr	r3, [pc, #44]	; (cdd8 <EncryptFRMPayload+0xbc>)
    cdaa:	4798      	blx	r3
    cdac:	2800      	cmp	r0, #0
    cdae:	d1c9      	bne.n	cd44 <EncryptFRMPayload+0x28>
    cdb0:	9b03      	ldr	r3, [sp, #12]
    cdb2:	011b      	lsls	r3, r3, #4
    cdb4:	18fb      	adds	r3, r7, r3
    cdb6:	5d07      	ldrb	r7, [r0, r4]
    cdb8:	5c19      	ldrb	r1, [r3, r0]
    cdba:	182a      	adds	r2, r5, r0
    cdbc:	4079      	eors	r1, r7
    cdbe:	9f11      	ldr	r7, [sp, #68]	; 0x44
    cdc0:	b2d2      	uxtb	r2, r2
    cdc2:	3001      	adds	r0, #1
    cdc4:	54b9      	strb	r1, [r7, r2]
    cdc6:	b2c2      	uxtb	r2, r0
    cdc8:	4296      	cmp	r6, r2
    cdca:	d8f4      	bhi.n	cdb6 <EncryptFRMPayload+0x9a>
    cdcc:	e7b9      	b.n	cd42 <EncryptFRMPayload+0x26>
    cdce:	46c0      	nop			; (mov r8, r8)
    cdd0:	0000bd01 	.word	0x0000bd01
    cdd4:	20000ea8 	.word	0x20000ea8
    cdd8:	00009415 	.word	0x00009415

0000cddc <UpdateTransactionCompleteCbParams>:
    cddc:	23ea      	movs	r3, #234	; 0xea
    cdde:	2201      	movs	r2, #1
    cde0:	b570      	push	{r4, r5, r6, lr}
    cde2:	0001      	movs	r1, r0
    cde4:	4c14      	ldr	r4, [pc, #80]	; (ce38 <UpdateTransactionCompleteCbParams+0x5c>)
    cde6:	4815      	ldr	r0, [pc, #84]	; (ce3c <UpdateTransactionCompleteCbParams+0x60>)
    cde8:	005b      	lsls	r3, r3, #1
    cdea:	54e2      	strb	r2, [r4, r3]
    cdec:	7842      	ldrb	r2, [r0, #1]
    cdee:	7803      	ldrb	r3, [r0, #0]
    cdf0:	0212      	lsls	r2, r2, #8
    cdf2:	431a      	orrs	r2, r3
    cdf4:	7883      	ldrb	r3, [r0, #2]
    cdf6:	041b      	lsls	r3, r3, #16
    cdf8:	431a      	orrs	r2, r3
    cdfa:	78c3      	ldrb	r3, [r0, #3]
    cdfc:	061b      	lsls	r3, r3, #24
    cdfe:	4313      	orrs	r3, r2
    ce00:	d010      	beq.n	ce24 <UpdateTransactionCompleteCbParams+0x48>
    ce02:	0022      	movs	r2, r4
    ce04:	2504      	movs	r5, #4
    ce06:	32f8      	adds	r2, #248	; 0xf8
    ce08:	6812      	ldr	r2, [r2, #0]
    ce0a:	422a      	tst	r2, r5
    ce0c:	d00a      	beq.n	ce24 <UpdateTransactionCompleteCbParams+0x48>
    ce0e:	0022      	movs	r2, r4
    ce10:	32fc      	adds	r2, #252	; 0xfc
    ce12:	6810      	ldr	r0, [r2, #0]
    ce14:	2800      	cmp	r0, #0
    ce16:	d005      	beq.n	ce24 <UpdateTransactionCompleteCbParams+0x48>
    ce18:	0022      	movs	r2, r4
    ce1a:	32ff      	adds	r2, #255	; 0xff
    ce1c:	7151      	strb	r1, [r2, #5]
    ce1e:	7055      	strb	r5, [r2, #1]
    ce20:	4907      	ldr	r1, [pc, #28]	; (ce40 <UpdateTransactionCompleteCbParams+0x64>)
    ce22:	4798      	blx	r3
    ce24:	23ea      	movs	r3, #234	; 0xea
    ce26:	005b      	lsls	r3, r3, #1
    ce28:	5ce3      	ldrb	r3, [r4, r3]
    ce2a:	2b00      	cmp	r3, #0
    ce2c:	d002      	beq.n	ce34 <UpdateTransactionCompleteCbParams+0x58>
    ce2e:	2300      	movs	r3, #0
    ce30:	34fc      	adds	r4, #252	; 0xfc
    ce32:	6023      	str	r3, [r4, #0]
    ce34:	bd70      	pop	{r4, r5, r6, pc}
    ce36:	46c0      	nop			; (mov r8, r8)
    ce38:	200017d4 	.word	0x200017d4
    ce3c:	20001acc 	.word	0x20001acc
    ce40:	200018d4 	.word	0x200018d4

0000ce44 <AssemblePacket>:
    ce44:	b5f0      	push	{r4, r5, r6, r7, lr}
    ce46:	2710      	movs	r7, #16
    ce48:	b08d      	sub	sp, #52	; 0x34
    ce4a:	9306      	str	r3, [sp, #24]
    ce4c:	ab04      	add	r3, sp, #16
    ce4e:	839f      	strh	r7, [r3, #28]
    ce50:	231e      	movs	r3, #30
    ce52:	9208      	str	r2, [sp, #32]
    ce54:	aa04      	add	r2, sp, #16
    ce56:	189b      	adds	r3, r3, r2
    ce58:	2500      	movs	r5, #0
    ce5a:	2210      	movs	r2, #16
    ce5c:	ac0a      	add	r4, sp, #40	; 0x28
    ce5e:	9007      	str	r0, [sp, #28]
    ce60:	9109      	str	r1, [sp, #36]	; 0x24
    ce62:	32ff      	adds	r2, #255	; 0xff
    ce64:	0029      	movs	r1, r5
    ce66:	4eb5      	ldr	r6, [pc, #724]	; (d13c <AssemblePacket+0x2f8>)
    ce68:	7025      	strb	r5, [r4, #0]
    ce6a:	48b5      	ldr	r0, [pc, #724]	; (d140 <AssemblePacket+0x2fc>)
    ce6c:	801d      	strh	r5, [r3, #0]
    ce6e:	47b0      	blx	r6
    ce70:	003a      	movs	r2, r7
    ce72:	0029      	movs	r1, r5
    ce74:	48b3      	ldr	r0, [pc, #716]	; (d144 <AssemblePacket+0x300>)
    ce76:	47b0      	blx	r6
    ce78:	221f      	movs	r2, #31
    ce7a:	7823      	ldrb	r3, [r4, #0]
    ce7c:	9907      	ldr	r1, [sp, #28]
    ce7e:	4013      	ands	r3, r2
    ce80:	42a9      	cmp	r1, r5
    ce82:	d043      	beq.n	cf0c <AssemblePacket+0xc8>
    ce84:	3a9f      	subs	r2, #159	; 0x9f
    ce86:	4313      	orrs	r3, r2
    ce88:	7023      	strb	r3, [r4, #0]
    ce8a:	4baf      	ldr	r3, [pc, #700]	; (d148 <AssemblePacket+0x304>)
    ce8c:	3281      	adds	r2, #129	; 0x81
    ce8e:	338c      	adds	r3, #140	; 0x8c
    ce90:	7819      	ldrb	r1, [r3, #0]
    ce92:	430a      	orrs	r2, r1
    ce94:	701a      	strb	r2, [r3, #0]
    ce96:	22e0      	movs	r2, #224	; 0xe0
    ce98:	7823      	ldrb	r3, [r4, #0]
    ce9a:	48a9      	ldr	r0, [pc, #676]	; (d140 <AssemblePacket+0x2fc>)
    ce9c:	4013      	ands	r3, r2
    ce9e:	7023      	strb	r3, [r4, #0]
    cea0:	4ca9      	ldr	r4, [pc, #676]	; (d148 <AssemblePacket+0x304>)
    cea2:	7403      	strb	r3, [r0, #16]
    cea4:	3adc      	subs	r2, #220	; 0xdc
    cea6:	4ba9      	ldr	r3, [pc, #676]	; (d14c <AssemblePacket+0x308>)
    cea8:	3011      	adds	r0, #17
    ceaa:	1c61      	adds	r1, r4, #1
    ceac:	4798      	blx	r3
    ceae:	2315      	movs	r3, #21
    ceb0:	aa04      	add	r2, sp, #16
    ceb2:	8393      	strh	r3, [r2, #28]
    ceb4:	0023      	movs	r3, r4
    ceb6:	337c      	adds	r3, #124	; 0x7c
    ceb8:	781b      	ldrb	r3, [r3, #0]
    ceba:	2700      	movs	r7, #0
    cebc:	069b      	lsls	r3, r3, #26
    cebe:	d400      	bmi.n	cec2 <AssemblePacket+0x7e>
    cec0:	e0fd      	b.n	d0be <AssemblePacket+0x27a>
    cec2:	0023      	movs	r3, r4
    cec4:	33df      	adds	r3, #223	; 0xdf
    cec6:	781a      	ldrb	r2, [r3, #0]
    cec8:	23ea      	movs	r3, #234	; 0xea
    ceca:	469c      	mov	ip, r3
    cecc:	44a4      	add	ip, r4
    cece:	4663      	mov	r3, ip
    ced0:	781d      	ldrb	r5, [r3, #0]
    ced2:	42aa      	cmp	r2, r5
    ced4:	d200      	bcs.n	ced8 <AssemblePacket+0x94>
    ced6:	e0f2      	b.n	d0be <AssemblePacket+0x27a>
    ced8:	0021      	movs	r1, r4
    ceda:	0026      	movs	r6, r4
    cedc:	4b9c      	ldr	r3, [pc, #624]	; (d150 <AssemblePacket+0x30c>)
    cede:	31c2      	adds	r1, #194	; 0xc2
    cee0:	7818      	ldrb	r0, [r3, #0]
    cee2:	880b      	ldrh	r3, [r1, #0]
    cee4:	36d4      	adds	r6, #212	; 0xd4
    cee6:	3301      	adds	r3, #1
    cee8:	b29b      	uxth	r3, r3
    ceea:	800b      	strh	r3, [r1, #0]
    ceec:	7836      	ldrb	r6, [r6, #0]
    ceee:	42b3      	cmp	r3, r6
    cef0:	d110      	bne.n	cf14 <AssemblePacket+0xd0>
    cef2:	0023      	movs	r3, r4
    cef4:	33ed      	adds	r3, #237	; 0xed
    cef6:	701f      	strb	r7, [r3, #0]
    cef8:	2380      	movs	r3, #128	; 0x80
    cefa:	2040      	movs	r0, #64	; 0x40
    cefc:	348c      	adds	r4, #140	; 0x8c
    cefe:	425b      	negs	r3, r3
    cf00:	7822      	ldrb	r2, [r4, #0]
    cf02:	4318      	orrs	r0, r3
    cf04:	3390      	adds	r3, #144	; 0x90
    cf06:	4313      	orrs	r3, r2
    cf08:	7023      	strb	r3, [r4, #0]
    cf0a:	e02f      	b.n	cf6c <AssemblePacket+0x128>
    cf0c:	2240      	movs	r2, #64	; 0x40
    cf0e:	4313      	orrs	r3, r2
    cf10:	7023      	strb	r3, [r4, #0]
    cf12:	e7c0      	b.n	ce96 <AssemblePacket+0x52>
    cf14:	42b3      	cmp	r3, r6
    cf16:	d929      	bls.n	cf6c <AssemblePacket+0x128>
    cf18:	42aa      	cmp	r2, r5
    cf1a:	d100      	bne.n	cf1e <AssemblePacket+0xda>
    cf1c:	e0c9      	b.n	d0b2 <AssemblePacket+0x26e>
    cf1e:	0021      	movs	r1, r4
    cf20:	0020      	movs	r0, r4
    cf22:	31ed      	adds	r1, #237	; 0xed
    cf24:	780b      	ldrb	r3, [r1, #0]
    cf26:	30d5      	adds	r0, #213	; 0xd5
    cf28:	3301      	adds	r3, #1
    cf2a:	b2db      	uxtb	r3, r3
    cf2c:	700b      	strb	r3, [r1, #0]
    cf2e:	7800      	ldrb	r0, [r0, #0]
    cf30:	3801      	subs	r0, #1
    cf32:	4283      	cmp	r3, r0
    cf34:	dbe0      	blt.n	cef8 <AssemblePacket+0xb4>
    cf36:	700f      	strb	r7, [r1, #0]
    cf38:	42aa      	cmp	r2, r5
    cf3a:	d90d      	bls.n	cf58 <AssemblePacket+0x114>
    cf3c:	231b      	movs	r3, #27
    cf3e:	4666      	mov	r6, ip
    cf40:	a904      	add	r1, sp, #16
    cf42:	3a01      	subs	r2, #1
    cf44:	185b      	adds	r3, r3, r1
    cf46:	701a      	strb	r2, [r3, #0]
    cf48:	251b      	movs	r5, #27
    cf4a:	ab04      	add	r3, sp, #16
    cf4c:	18ed      	adds	r5, r5, r3
    cf4e:	7832      	ldrb	r2, [r6, #0]
    cf50:	782b      	ldrb	r3, [r5, #0]
    cf52:	429a      	cmp	r2, r3
    cf54:	d800      	bhi.n	cf58 <AssemblePacket+0x114>
    cf56:	e098      	b.n	d08a <AssemblePacket+0x246>
    cf58:	2380      	movs	r3, #128	; 0x80
    cf5a:	2040      	movs	r0, #64	; 0x40
    cf5c:	2210      	movs	r2, #16
    cf5e:	425b      	negs	r3, r3
    cf60:	4318      	orrs	r0, r3
    cf62:	4b79      	ldr	r3, [pc, #484]	; (d148 <AssemblePacket+0x304>)
    cf64:	338c      	adds	r3, #140	; 0x8c
    cf66:	7819      	ldrb	r1, [r3, #0]
    cf68:	430a      	orrs	r2, r1
    cf6a:	701a      	strb	r2, [r3, #0]
    cf6c:	4d76      	ldr	r5, [pc, #472]	; (d148 <AssemblePacket+0x304>)
    cf6e:	2102      	movs	r1, #2
    cf70:	002a      	movs	r2, r5
    cf72:	328c      	adds	r2, #140	; 0x8c
    cf74:	7813      	ldrb	r3, [r2, #0]
    cf76:	420b      	tst	r3, r1
    cf78:	d003      	beq.n	cf82 <AssemblePacket+0x13e>
    cf7a:	2420      	movs	r4, #32
    cf7c:	438b      	bics	r3, r1
    cf7e:	4320      	orrs	r0, r4
    cf80:	7013      	strb	r3, [r2, #0]
    cf82:	2310      	movs	r3, #16
    cf84:	0004      	movs	r4, r0
    cf86:	439c      	bics	r4, r3
    cf88:	002b      	movs	r3, r5
    cf8a:	33d8      	adds	r3, #216	; 0xd8
    cf8c:	781b      	ldrb	r3, [r3, #0]
    cf8e:	9307      	str	r3, [sp, #28]
    cf90:	2b00      	cmp	r3, #0
    cf92:	d003      	beq.n	cf9c <AssemblePacket+0x158>
    cf94:	9b06      	ldr	r3, [sp, #24]
    cf96:	2b00      	cmp	r3, #0
    cf98:	d000      	beq.n	cf9c <AssemblePacket+0x158>
    cf9a:	e092      	b.n	d0c2 <AssemblePacket+0x27e>
    cf9c:	230f      	movs	r3, #15
    cf9e:	439c      	bics	r4, r3
    cfa0:	0020      	movs	r0, r4
    cfa2:	ac0b      	add	r4, sp, #44	; 0x2c
    cfa4:	8826      	ldrh	r6, [r4, #0]
    cfa6:	4f66      	ldr	r7, [pc, #408]	; (d140 <AssemblePacket+0x2fc>)
    cfa8:	4b68      	ldr	r3, [pc, #416]	; (d14c <AssemblePacket+0x308>)
    cfaa:	55b8      	strb	r0, [r7, r6]
    cfac:	1c70      	adds	r0, r6, #1
    cfae:	b280      	uxth	r0, r0
    cfb0:	19c0      	adds	r0, r0, r7
    cfb2:	2202      	movs	r2, #2
    cfb4:	4967      	ldr	r1, [pc, #412]	; (d154 <AssemblePacket+0x310>)
    cfb6:	4798      	blx	r3
    cfb8:	9b07      	ldr	r3, [sp, #28]
    cfba:	3603      	adds	r6, #3
    cfbc:	8026      	strh	r6, [r4, #0]
    cfbe:	2b00      	cmp	r3, #0
    cfc0:	d100      	bne.n	cfc4 <AssemblePacket+0x180>
    cfc2:	e087      	b.n	d0d4 <AssemblePacket+0x290>
    cfc4:	9b06      	ldr	r3, [sp, #24]
    cfc6:	2b00      	cmp	r3, #0
    cfc8:	d004      	beq.n	cfd4 <AssemblePacket+0x190>
    cfca:	2201      	movs	r2, #1
    cfcc:	0021      	movs	r1, r4
    cfce:	0038      	movs	r0, r7
    cfd0:	4b61      	ldr	r3, [pc, #388]	; (d158 <AssemblePacket+0x314>)
    cfd2:	4798      	blx	r3
    cfd4:	466a      	mov	r2, sp
    cfd6:	2124      	movs	r1, #36	; 0x24
    cfd8:	1852      	adds	r2, r2, r1
    cfda:	8823      	ldrh	r3, [r4, #0]
    cfdc:	7812      	ldrb	r2, [r2, #0]
    cfde:	1c5e      	adds	r6, r3, #1
    cfe0:	54fa      	strb	r2, [r7, r3]
    cfe2:	9b06      	ldr	r3, [sp, #24]
    cfe4:	b2b6      	uxth	r6, r6
    cfe6:	8026      	strh	r6, [r4, #0]
    cfe8:	2b00      	cmp	r3, #0
    cfea:	d100      	bne.n	cfee <AssemblePacket+0x1aa>
    cfec:	e076      	b.n	d0dc <AssemblePacket+0x298>
    cfee:	001a      	movs	r2, r3
    cff0:	19b8      	adds	r0, r7, r6
    cff2:	9908      	ldr	r1, [sp, #32]
    cff4:	4b55      	ldr	r3, [pc, #340]	; (d14c <AssemblePacket+0x308>)
    cff6:	4798      	blx	r3
    cff8:	466b      	mov	r3, sp
    cffa:	7e19      	ldrb	r1, [r3, #24]
    cffc:	682b      	ldr	r3, [r5, #0]
    cffe:	b2f6      	uxtb	r6, r6
    d000:	0a18      	lsrs	r0, r3, #8
    d002:	792b      	ldrb	r3, [r5, #4]
    d004:	1d2a      	adds	r2, r5, #4
    d006:	061b      	lsls	r3, r3, #24
    d008:	4303      	orrs	r3, r0
    d00a:	9304      	str	r3, [sp, #16]
    d00c:	2301      	movs	r3, #1
    d00e:	9301      	str	r3, [sp, #4]
    d010:	4b52      	ldr	r3, [pc, #328]	; (d15c <AssemblePacket+0x318>)
    d012:	9703      	str	r7, [sp, #12]
    d014:	9602      	str	r6, [sp, #8]
    d016:	9300      	str	r3, [sp, #0]
    d018:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
    d01a:	9808      	ldr	r0, [sp, #32]
    d01c:	2200      	movs	r2, #0
    d01e:	4c50      	ldr	r4, [pc, #320]	; (d160 <AssemblePacket+0x31c>)
    d020:	47a0      	blx	r4
    d022:	2800      	cmp	r0, #0
    d024:	d002      	beq.n	d02c <AssemblePacket+0x1e8>
    d026:	2020      	movs	r0, #32
    d028:	4b4e      	ldr	r3, [pc, #312]	; (d164 <AssemblePacket+0x320>)
    d02a:	4798      	blx	r3
    d02c:	aa0b      	add	r2, sp, #44	; 0x2c
    d02e:	8813      	ldrh	r3, [r2, #0]
    d030:	9906      	ldr	r1, [sp, #24]
    d032:	18cb      	adds	r3, r1, r3
    d034:	8013      	strh	r3, [r2, #0]
    d036:	4c44      	ldr	r4, [pc, #272]	; (d148 <AssemblePacket+0x304>)
    d038:	ae0b      	add	r6, sp, #44	; 0x2c
    d03a:	6823      	ldr	r3, [r4, #0]
    d03c:	8832      	ldrh	r2, [r6, #0]
    d03e:	0a18      	lsrs	r0, r3, #8
    d040:	7923      	ldrb	r3, [r4, #4]
    d042:	1d21      	adds	r1, r4, #4
    d044:	061b      	lsls	r3, r3, #24
    d046:	4303      	orrs	r3, r0
    d048:	9300      	str	r3, [sp, #0]
    d04a:	3a10      	subs	r2, #16
    d04c:	b2d2      	uxtb	r2, r2
    d04e:	2349      	movs	r3, #73	; 0x49
    d050:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
    d052:	2000      	movs	r0, #0
    d054:	4d44      	ldr	r5, [pc, #272]	; (d168 <AssemblePacket+0x324>)
    d056:	47a8      	blx	r5
    d058:	4f39      	ldr	r7, [pc, #228]	; (d140 <AssemblePacket+0x2fc>)
    d05a:	2210      	movs	r2, #16
    d05c:	4939      	ldr	r1, [pc, #228]	; (d144 <AssemblePacket+0x300>)
    d05e:	0038      	movs	r0, r7
    d060:	4b3a      	ldr	r3, [pc, #232]	; (d14c <AssemblePacket+0x308>)
    d062:	4798      	blx	r3
    d064:	7833      	ldrb	r3, [r6, #0]
    d066:	4a37      	ldr	r2, [pc, #220]	; (d144 <AssemblePacket+0x300>)
    d068:	9300      	str	r3, [sp, #0]
    d06a:	2102      	movs	r1, #2
    d06c:	003b      	movs	r3, r7
    d06e:	4d3f      	ldr	r5, [pc, #252]	; (d16c <AssemblePacket+0x328>)
    d070:	483f      	ldr	r0, [pc, #252]	; (d170 <AssemblePacket+0x32c>)
    d072:	47a8      	blx	r5
    d074:	8836      	ldrh	r6, [r6, #0]
    d076:	2204      	movs	r2, #4
    d078:	19f0      	adds	r0, r6, r7
    d07a:	4932      	ldr	r1, [pc, #200]	; (d144 <AssemblePacket+0x300>)
    d07c:	4b33      	ldr	r3, [pc, #204]	; (d14c <AssemblePacket+0x308>)
    d07e:	4798      	blx	r3
    d080:	3e0c      	subs	r6, #12
    d082:	34c6      	adds	r4, #198	; 0xc6
    d084:	8026      	strh	r6, [r4, #0]
    d086:	b00d      	add	sp, #52	; 0x34
    d088:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d08a:	0029      	movs	r1, r5
    d08c:	2010      	movs	r0, #16
    d08e:	4f39      	ldr	r7, [pc, #228]	; (d174 <AssemblePacket+0x330>)
    d090:	47b8      	blx	r7
    d092:	2808      	cmp	r0, #8
    d094:	d000      	beq.n	d098 <AssemblePacket+0x254>
    d096:	e75f      	b.n	cf58 <AssemblePacket+0x114>
    d098:	0029      	movs	r1, r5
    d09a:	3009      	adds	r0, #9
    d09c:	47b8      	blx	r7
    d09e:	782b      	ldrb	r3, [r5, #0]
    d0a0:	2808      	cmp	r0, #8
    d0a2:	d047      	beq.n	d134 <AssemblePacket+0x2f0>
    d0a4:	7832      	ldrb	r2, [r6, #0]
    d0a6:	429a      	cmp	r2, r3
    d0a8:	d300      	bcc.n	d0ac <AssemblePacket+0x268>
    d0aa:	e74d      	b.n	cf48 <AssemblePacket+0x104>
    d0ac:	3b01      	subs	r3, #1
    d0ae:	702b      	strb	r3, [r5, #0]
    d0b0:	e74a      	b.n	cf48 <AssemblePacket+0x104>
    d0b2:	800f      	strh	r7, [r1, #0]
    d0b4:	2210      	movs	r2, #16
    d0b6:	348c      	adds	r4, #140	; 0x8c
    d0b8:	7823      	ldrb	r3, [r4, #0]
    d0ba:	4393      	bics	r3, r2
    d0bc:	e724      	b.n	cf08 <AssemblePacket+0xc4>
    d0be:	2000      	movs	r0, #0
    d0c0:	e7f8      	b.n	d0b4 <AssemblePacket+0x270>
    d0c2:	4b2d      	ldr	r3, [pc, #180]	; (d178 <AssemblePacket+0x334>)
    d0c4:	4798      	blx	r3
    d0c6:	220f      	movs	r2, #15
    d0c8:	0003      	movs	r3, r0
    d0ca:	0020      	movs	r0, r4
    d0cc:	4013      	ands	r3, r2
    d0ce:	4390      	bics	r0, r2
    d0d0:	4318      	orrs	r0, r3
    d0d2:	e766      	b.n	cfa2 <AssemblePacket+0x15e>
    d0d4:	9b06      	ldr	r3, [sp, #24]
    d0d6:	2b00      	cmp	r3, #0
    d0d8:	d000      	beq.n	d0dc <AssemblePacket+0x298>
    d0da:	e77b      	b.n	cfd4 <AssemblePacket+0x190>
    d0dc:	4d1a      	ldr	r5, [pc, #104]	; (d148 <AssemblePacket+0x304>)
    d0de:	002b      	movs	r3, r5
    d0e0:	33d8      	adds	r3, #216	; 0xd8
    d0e2:	781b      	ldrb	r3, [r3, #0]
    d0e4:	2b00      	cmp	r3, #0
    d0e6:	d0a6      	beq.n	d036 <AssemblePacket+0x1f2>
    d0e8:	261e      	movs	r6, #30
    d0ea:	ab04      	add	r3, sp, #16
    d0ec:	18f6      	adds	r6, r6, r3
    d0ee:	2200      	movs	r2, #0
    d0f0:	0031      	movs	r1, r6
    d0f2:	4822      	ldr	r0, [pc, #136]	; (d17c <AssemblePacket+0x338>)
    d0f4:	4b18      	ldr	r3, [pc, #96]	; (d158 <AssemblePacket+0x314>)
    d0f6:	4798      	blx	r3
    d0f8:	682b      	ldr	r3, [r5, #0]
    d0fa:	7831      	ldrb	r1, [r6, #0]
    d0fc:	0a18      	lsrs	r0, r3, #8
    d0fe:	792b      	ldrb	r3, [r5, #4]
    d100:	9703      	str	r7, [sp, #12]
    d102:	061b      	lsls	r3, r3, #24
    d104:	4303      	orrs	r3, r0
    d106:	9304      	str	r3, [sp, #16]
    d108:	7823      	ldrb	r3, [r4, #0]
    d10a:	1d2a      	adds	r2, r5, #4
    d10c:	9302      	str	r3, [sp, #8]
    d10e:	2302      	movs	r3, #2
    d110:	9301      	str	r3, [sp, #4]
    d112:	4b17      	ldr	r3, [pc, #92]	; (d170 <AssemblePacket+0x32c>)
    d114:	4819      	ldr	r0, [pc, #100]	; (d17c <AssemblePacket+0x338>)
    d116:	9300      	str	r3, [sp, #0]
    d118:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
    d11a:	4d11      	ldr	r5, [pc, #68]	; (d160 <AssemblePacket+0x31c>)
    d11c:	2200      	movs	r2, #0
    d11e:	47a8      	blx	r5
    d120:	2800      	cmp	r0, #0
    d122:	d002      	beq.n	d12a <AssemblePacket+0x2e6>
    d124:	2020      	movs	r0, #32
    d126:	4b0f      	ldr	r3, [pc, #60]	; (d164 <AssemblePacket+0x320>)
    d128:	4798      	blx	r3
    d12a:	8823      	ldrh	r3, [r4, #0]
    d12c:	8832      	ldrh	r2, [r6, #0]
    d12e:	189b      	adds	r3, r3, r2
    d130:	8023      	strh	r3, [r4, #0]
    d132:	e780      	b.n	d036 <AssemblePacket+0x1f2>
    d134:	34df      	adds	r4, #223	; 0xdf
    d136:	7023      	strb	r3, [r4, #0]
    d138:	e70e      	b.n	cf58 <AssemblePacket+0x114>
    d13a:	46c0      	nop			; (mov r8, r8)
    d13c:	000151f1 	.word	0x000151f1
    d140:	200019b9 	.word	0x200019b9
    d144:	20000ea8 	.word	0x20000ea8
    d148:	200017d4 	.word	0x200017d4
    d14c:	0001516d 	.word	0x0001516d
    d150:	0001afb6 	.word	0x0001afb6
    d154:	20001854 	.word	0x20001854
    d158:	0000ba15 	.word	0x0000ba15
    d15c:	20001809 	.word	0x20001809
    d160:	0000cd1d 	.word	0x0000cd1d
    d164:	0000cddd 	.word	0x0000cddd
    d168:	0000bd01 	.word	0x0000bd01
    d16c:	0000944d 	.word	0x0000944d
    d170:	200017f9 	.word	0x200017f9
    d174:	0000915d 	.word	0x0000915d
    d178:	0000b911 	.word	0x0000b911
    d17c:	20001ad4 	.word	0x20001ad4

0000d180 <UpdateRxDataAvailableCbParams>:
    d180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d182:	4e0f      	ldr	r6, [pc, #60]	; (d1c0 <UpdateRxDataAvailableCbParams+0x40>)
    d184:	7874      	ldrb	r4, [r6, #1]
    d186:	7835      	ldrb	r5, [r6, #0]
    d188:	0224      	lsls	r4, r4, #8
    d18a:	432c      	orrs	r4, r5
    d18c:	78b5      	ldrb	r5, [r6, #2]
    d18e:	042d      	lsls	r5, r5, #16
    d190:	432c      	orrs	r4, r5
    d192:	78f5      	ldrb	r5, [r6, #3]
    d194:	062d      	lsls	r5, r5, #24
    d196:	4325      	orrs	r5, r4
    d198:	d011      	beq.n	d1be <UpdateRxDataAvailableCbParams+0x3e>
    d19a:	4c0a      	ldr	r4, [pc, #40]	; (d1c4 <UpdateRxDataAvailableCbParams+0x44>)
    d19c:	2702      	movs	r7, #2
    d19e:	0026      	movs	r6, r4
    d1a0:	36f8      	adds	r6, #248	; 0xf8
    d1a2:	6836      	ldr	r6, [r6, #0]
    d1a4:	423e      	tst	r6, r7
    d1a6:	d00a      	beq.n	d1be <UpdateRxDataAvailableCbParams+0x3e>
    d1a8:	0026      	movs	r6, r4
    d1aa:	34fc      	adds	r4, #252	; 0xfc
    d1ac:	36ff      	adds	r6, #255	; 0xff
    d1ae:	60a0      	str	r0, [r4, #8]
    d1b0:	60e1      	str	r1, [r4, #12]
    d1b2:	7077      	strb	r7, [r6, #1]
    d1b4:	7372      	strb	r2, [r6, #13]
    d1b6:	73b3      	strb	r3, [r6, #14]
    d1b8:	4903      	ldr	r1, [pc, #12]	; (d1c8 <UpdateRxDataAvailableCbParams+0x48>)
    d1ba:	6820      	ldr	r0, [r4, #0]
    d1bc:	47a8      	blx	r5
    d1be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d1c0:	20001acc 	.word	0x20001acc
    d1c4:	200017d4 	.word	0x200017d4
    d1c8:	200018d4 	.word	0x200018d4

0000d1cc <LorawanNotifyAppOnRxdone>:
    d1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d1ce:	4c25      	ldr	r4, [pc, #148]	; (d264 <LorawanNotifyAppOnRxdone+0x98>)
    d1d0:	0007      	movs	r7, r0
    d1d2:	0023      	movs	r3, r4
    d1d4:	33f4      	adds	r3, #244	; 0xf4
    d1d6:	781b      	ldrb	r3, [r3, #0]
    d1d8:	000d      	movs	r5, r1
    d1da:	0016      	movs	r6, r2
    d1dc:	2b01      	cmp	r3, #1
    d1de:	d136      	bne.n	d24e <LorawanNotifyAppOnRxdone+0x82>
    d1e0:	0022      	movs	r2, r4
    d1e2:	210e      	movs	r1, #14
    d1e4:	327c      	adds	r2, #124	; 0x7c
    d1e6:	7813      	ldrb	r3, [r2, #0]
    d1e8:	438b      	bics	r3, r1
    d1ea:	7013      	strb	r3, [r2, #0]
    d1ec:	491e      	ldr	r1, [pc, #120]	; (d268 <LorawanNotifyAppOnRxdone+0x9c>)
    d1ee:	784a      	ldrb	r2, [r1, #1]
    d1f0:	780b      	ldrb	r3, [r1, #0]
    d1f2:	0212      	lsls	r2, r2, #8
    d1f4:	431a      	orrs	r2, r3
    d1f6:	788b      	ldrb	r3, [r1, #2]
    d1f8:	041b      	lsls	r3, r3, #16
    d1fa:	431a      	orrs	r2, r3
    d1fc:	78cb      	ldrb	r3, [r1, #3]
    d1fe:	061b      	lsls	r3, r3, #24
    d200:	4313      	orrs	r3, r2
    d202:	d023      	beq.n	d24c <LorawanNotifyAppOnRxdone+0x80>
    d204:	0022      	movs	r2, r4
    d206:	2120      	movs	r1, #32
    d208:	328c      	adds	r2, #140	; 0x8c
    d20a:	7813      	ldrb	r3, [r2, #0]
    d20c:	438b      	bics	r3, r1
    d20e:	7013      	strb	r3, [r2, #0]
    d210:	0023      	movs	r3, r4
    d212:	33f4      	adds	r3, #244	; 0xf4
    d214:	781b      	ldrb	r3, [r3, #0]
    d216:	7878      	ldrb	r0, [r7, #1]
    d218:	469c      	mov	ip, r3
    d21a:	78fa      	ldrb	r2, [r7, #3]
    d21c:	78b9      	ldrb	r1, [r7, #2]
    d21e:	793b      	ldrb	r3, [r7, #4]
    d220:	4667      	mov	r7, ip
    d222:	0209      	lsls	r1, r1, #8
    d224:	4301      	orrs	r1, r0
    d226:	0410      	lsls	r0, r2, #16
    d228:	4308      	orrs	r0, r1
    d22a:	061b      	lsls	r3, r3, #24
    d22c:	4318      	orrs	r0, r3
    d22e:	0032      	movs	r2, r6
    d230:	2308      	movs	r3, #8
    d232:	0029      	movs	r1, r5
    d234:	2f04      	cmp	r7, #4
    d236:	d112      	bne.n	d25e <LorawanNotifyAppOnRxdone+0x92>
    d238:	4d0c      	ldr	r5, [pc, #48]	; (d26c <LorawanNotifyAppOnRxdone+0xa0>)
    d23a:	47a8      	blx	r5
    d23c:	23ea      	movs	r3, #234	; 0xea
    d23e:	005b      	lsls	r3, r3, #1
    d240:	5ce3      	ldrb	r3, [r4, r3]
    d242:	2b00      	cmp	r3, #0
    d244:	d102      	bne.n	d24c <LorawanNotifyAppOnRxdone+0x80>
    d246:	2008      	movs	r0, #8
    d248:	4b09      	ldr	r3, [pc, #36]	; (d270 <LorawanNotifyAppOnRxdone+0xa4>)
    d24a:	4798      	blx	r3
    d24c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d24e:	2b04      	cmp	r3, #4
    d250:	d1cc      	bne.n	d1ec <LorawanNotifyAppOnRxdone+0x20>
    d252:	0023      	movs	r3, r4
    d254:	33e8      	adds	r3, #232	; 0xe8
    d256:	7818      	ldrb	r0, [r3, #0]
    d258:	4b06      	ldr	r3, [pc, #24]	; (d274 <LorawanNotifyAppOnRxdone+0xa8>)
    d25a:	4798      	blx	r3
    d25c:	e7c6      	b.n	d1ec <LorawanNotifyAppOnRxdone+0x20>
    d25e:	4d06      	ldr	r5, [pc, #24]	; (d278 <LorawanNotifyAppOnRxdone+0xac>)
    d260:	47a8      	blx	r5
    d262:	e7eb      	b.n	d23c <LorawanNotifyAppOnRxdone+0x70>
    d264:	200017d4 	.word	0x200017d4
    d268:	20001acc 	.word	0x20001acc
    d26c:	0000f851 	.word	0x0000f851
    d270:	0000cddd 	.word	0x0000cddd
    d274:	00009e61 	.word	0x00009e61
    d278:	0000d181 	.word	0x0000d181

0000d27c <LorawanSetReceiveWindow2Parameters>:
    d27c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d27e:	466b      	mov	r3, sp
    d280:	1cdd      	adds	r5, r3, #3
    d282:	9001      	str	r0, [sp, #4]
    d284:	7029      	strb	r1, [r5, #0]
    d286:	2001      	movs	r0, #1
    d288:	a901      	add	r1, sp, #4
    d28a:	4c09      	ldr	r4, [pc, #36]	; (d2b0 <LorawanSetReceiveWindow2Parameters+0x34>)
    d28c:	47a0      	blx	r4
    d28e:	2808      	cmp	r0, #8
    d290:	d002      	beq.n	d298 <LorawanSetReceiveWindow2Parameters+0x1c>
    d292:	240a      	movs	r4, #10
    d294:	0020      	movs	r0, r4
    d296:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    d298:	0029      	movs	r1, r5
    d29a:	200f      	movs	r0, #15
    d29c:	47a0      	blx	r4
    d29e:	0004      	movs	r4, r0
    d2a0:	2808      	cmp	r0, #8
    d2a2:	d1f6      	bne.n	d292 <LorawanSetReceiveWindow2Parameters+0x16>
    d2a4:	7829      	ldrb	r1, [r5, #0]
    d2a6:	9801      	ldr	r0, [sp, #4]
    d2a8:	4b02      	ldr	r3, [pc, #8]	; (d2b4 <LorawanSetReceiveWindow2Parameters+0x38>)
    d2aa:	4798      	blx	r3
    d2ac:	e7f2      	b.n	d294 <LorawanSetReceiveWindow2Parameters+0x18>
    d2ae:	46c0      	nop			; (mov r8, r8)
    d2b0:	0000915d 	.word	0x0000915d
    d2b4:	0000c291 	.word	0x0000c291

0000d2b8 <LorawanSetFrequency>:
    d2b8:	b507      	push	{r0, r1, r2, lr}
    d2ba:	466b      	mov	r3, sp
    d2bc:	9100      	str	r1, [sp, #0]
    d2be:	7118      	strb	r0, [r3, #4]
    d2c0:	4669      	mov	r1, sp
    d2c2:	2000      	movs	r0, #0
    d2c4:	4b01      	ldr	r3, [pc, #4]	; (d2cc <LorawanSetFrequency+0x14>)
    d2c6:	4798      	blx	r3
    d2c8:	bd0e      	pop	{r1, r2, r3, pc}
    d2ca:	46c0      	nop			; (mov r8, r8)
    d2cc:	00009269 	.word	0x00009269

0000d2d0 <LorawanGetReceiveWindow2Parameters>:
    d2d0:	4a06      	ldr	r2, [pc, #24]	; (d2ec <LorawanGetReceiveWindow2Parameters+0x1c>)
    d2d2:	0013      	movs	r3, r2
    d2d4:	336e      	adds	r3, #110	; 0x6e
    d2d6:	781b      	ldrb	r3, [r3, #0]
    d2d8:	7103      	strb	r3, [r0, #4]
    d2da:	0013      	movs	r3, r2
    d2dc:	326c      	adds	r2, #108	; 0x6c
    d2de:	336a      	adds	r3, #106	; 0x6a
    d2e0:	8819      	ldrh	r1, [r3, #0]
    d2e2:	8813      	ldrh	r3, [r2, #0]
    d2e4:	041b      	lsls	r3, r3, #16
    d2e6:	430b      	orrs	r3, r1
    d2e8:	6003      	str	r3, [r0, #0]
    d2ea:	4770      	bx	lr
    d2ec:	200017d4 	.word	0x200017d4

0000d2f0 <LORAWAN_GetAttr>:
    d2f0:	b530      	push	{r4, r5, lr}
    d2f2:	000b      	movs	r3, r1
    d2f4:	b085      	sub	sp, #20
    d2f6:	0014      	movs	r4, r2
    d2f8:	2838      	cmp	r0, #56	; 0x38
    d2fa:	d83a      	bhi.n	d372 <LORAWAN_GetAttr+0x82>
    d2fc:	f004 fb7a 	bl	119f4 <__gnu_thumb1_case_uhi>
    d300:	005b003c 	.word	0x005b003c
    d304:	006f005f 	.word	0x006f005f
    d308:	006b0067 	.word	0x006b0067
    d30c:	00780073 	.word	0x00780073
    d310:	007f007c 	.word	0x007f007c
    d314:	00860082 	.word	0x00860082
    d318:	00910089 	.word	0x00910089
    d31c:	00970094 	.word	0x00970094
    d320:	009f009c 	.word	0x009f009c
    d324:	00a500a2 	.word	0x00a500a2
    d328:	00d100a8 	.word	0x00d100a8
    d32c:	00ab00ae 	.word	0x00ab00ae
    d330:	00d800de 	.word	0x00d800de
    d334:	00c700cc 	.word	0x00c700cc
    d338:	003900c0 	.word	0x003900c0
    d33c:	00ba008e 	.word	0x00ba008e
    d340:	00b700be 	.word	0x00b700be
    d344:	00d500b4 	.word	0x00d500b4
    d348:	004200db 	.word	0x004200db
    d34c:	00440042 	.word	0x00440042
    d350:	010f00e7 	.word	0x010f00e7
    d354:	00f90106 	.word	0x00f90106
    d358:	0039011c 	.word	0x0039011c
    d35c:	012a0152 	.word	0x012a0152
    d360:	0133012e 	.word	0x0133012e
    d364:	013d0138 	.word	0x013d0138
    d368:	01440141 	.word	0x01440141
    d36c:	014f0147 	.word	0x014f0147
    d370:	0156      	.short	0x0156
    d372:	200a      	movs	r0, #10
    d374:	b005      	add	sp, #20
    d376:	bd30      	pop	{r4, r5, pc}
    d378:	2208      	movs	r2, #8
    d37a:	498f      	ldr	r1, [pc, #572]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d37c:	315d      	adds	r1, #93	; 0x5d
    d37e:	0020      	movs	r0, r4
    d380:	4b8e      	ldr	r3, [pc, #568]	; (d5bc <LORAWAN_GetAttr+0x2cc>)
    d382:	4798      	blx	r3
    d384:	2008      	movs	r0, #8
    d386:	e7f5      	b.n	d374 <LORAWAN_GetAttr+0x84>
    d388:	4669      	mov	r1, sp
    d38a:	4b8d      	ldr	r3, [pc, #564]	; (d5c0 <LORAWAN_GetAttr+0x2d0>)
    d38c:	201d      	movs	r0, #29
    d38e:	4798      	blx	r3
    d390:	4b89      	ldr	r3, [pc, #548]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d392:	a902      	add	r1, sp, #8
    d394:	33fe      	adds	r3, #254	; 0xfe
    d396:	8adb      	ldrh	r3, [r3, #22]
    d398:	2208      	movs	r2, #8
    d39a:	808b      	strh	r3, [r1, #4]
    d39c:	466b      	mov	r3, sp
    d39e:	791b      	ldrb	r3, [r3, #4]
    d3a0:	718b      	strb	r3, [r1, #6]
    d3a2:	466b      	mov	r3, sp
    d3a4:	881b      	ldrh	r3, [r3, #0]
    d3a6:	800b      	strh	r3, [r1, #0]
    d3a8:	466b      	mov	r3, sp
    d3aa:	885b      	ldrh	r3, [r3, #2]
    d3ac:	804b      	strh	r3, [r1, #2]
    d3ae:	466b      	mov	r3, sp
    d3b0:	795b      	ldrb	r3, [r3, #5]
    d3b2:	71cb      	strb	r3, [r1, #7]
    d3b4:	e7e3      	b.n	d37e <LORAWAN_GetAttr+0x8e>
    d3b6:	4980      	ldr	r1, [pc, #512]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d3b8:	2208      	movs	r2, #8
    d3ba:	3155      	adds	r1, #85	; 0x55
    d3bc:	e7df      	b.n	d37e <LORAWAN_GetAttr+0x8e>
    d3be:	4b7e      	ldr	r3, [pc, #504]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d3c0:	681a      	ldr	r2, [r3, #0]
    d3c2:	791b      	ldrb	r3, [r3, #4]
    d3c4:	0a12      	lsrs	r2, r2, #8
    d3c6:	061b      	lsls	r3, r3, #24
    d3c8:	4313      	orrs	r3, r2
    d3ca:	6023      	str	r3, [r4, #0]
    d3cc:	e7da      	b.n	d384 <LORAWAN_GetAttr+0x94>
    d3ce:	497a      	ldr	r1, [pc, #488]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d3d0:	2210      	movs	r2, #16
    d3d2:	3105      	adds	r1, #5
    d3d4:	e7d3      	b.n	d37e <LORAWAN_GetAttr+0x8e>
    d3d6:	4978      	ldr	r1, [pc, #480]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d3d8:	2210      	movs	r2, #16
    d3da:	3115      	adds	r1, #21
    d3dc:	e7cf      	b.n	d37e <LORAWAN_GetAttr+0x8e>
    d3de:	4976      	ldr	r1, [pc, #472]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d3e0:	2210      	movs	r2, #16
    d3e2:	3145      	adds	r1, #69	; 0x45
    d3e4:	e7cb      	b.n	d37e <LORAWAN_GetAttr+0x8e>
    d3e6:	4b74      	ldr	r3, [pc, #464]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d3e8:	337c      	adds	r3, #124	; 0x7c
    d3ea:	781b      	ldrb	r3, [r3, #0]
    d3ec:	069b      	lsls	r3, r3, #26
    d3ee:	e039      	b.n	d464 <LORAWAN_GetAttr+0x174>
    d3f0:	4b71      	ldr	r3, [pc, #452]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d3f2:	33df      	adds	r3, #223	; 0xdf
    d3f4:	781b      	ldrb	r3, [r3, #0]
    d3f6:	e01d      	b.n	d434 <LORAWAN_GetAttr+0x144>
    d3f8:	4b6f      	ldr	r3, [pc, #444]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d3fa:	33e1      	adds	r3, #225	; 0xe1
    d3fc:	e7fa      	b.n	d3f4 <LORAWAN_GetAttr+0x104>
    d3fe:	4b6e      	ldr	r3, [pc, #440]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d400:	33f7      	adds	r3, #247	; 0xf7
    d402:	e7f7      	b.n	d3f4 <LORAWAN_GetAttr+0x104>
    d404:	4b6c      	ldr	r3, [pc, #432]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d406:	3304      	adds	r3, #4
    d408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    d40a:	e7de      	b.n	d3ca <LORAWAN_GetAttr+0xda>
    d40c:	4b6a      	ldr	r3, [pc, #424]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d40e:	3308      	adds	r3, #8
    d410:	e7fa      	b.n	d408 <LORAWAN_GetAttr+0x118>
    d412:	4b69      	ldr	r3, [pc, #420]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d414:	33c8      	adds	r3, #200	; 0xc8
    d416:	881b      	ldrh	r3, [r3, #0]
    d418:	8023      	strh	r3, [r4, #0]
    d41a:	e7b3      	b.n	d384 <LORAWAN_GetAttr+0x94>
    d41c:	4b66      	ldr	r3, [pc, #408]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d41e:	33ca      	adds	r3, #202	; 0xca
    d420:	e7f9      	b.n	d416 <LORAWAN_GetAttr+0x126>
    d422:	4b65      	ldr	r3, [pc, #404]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d424:	33cc      	adds	r3, #204	; 0xcc
    d426:	e7f6      	b.n	d416 <LORAWAN_GetAttr+0x126>
    d428:	4b63      	ldr	r3, [pc, #396]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d42a:	33ce      	adds	r3, #206	; 0xce
    d42c:	e7f3      	b.n	d416 <LORAWAN_GetAttr+0x126>
    d42e:	4b62      	ldr	r3, [pc, #392]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d430:	33d0      	adds	r3, #208	; 0xd0
    d432:	881b      	ldrh	r3, [r3, #0]
    d434:	7023      	strb	r3, [r4, #0]
    d436:	e7a5      	b.n	d384 <LORAWAN_GetAttr+0x94>
    d438:	4b5f      	ldr	r3, [pc, #380]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d43a:	33d4      	adds	r3, #212	; 0xd4
    d43c:	e7da      	b.n	d3f4 <LORAWAN_GetAttr+0x104>
    d43e:	4b5e      	ldr	r3, [pc, #376]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d440:	33d5      	adds	r3, #213	; 0xd5
    d442:	e7d7      	b.n	d3f4 <LORAWAN_GetAttr+0x104>
    d444:	4b5c      	ldr	r3, [pc, #368]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d446:	33d2      	adds	r3, #210	; 0xd2
    d448:	e7e5      	b.n	d416 <LORAWAN_GetAttr+0x126>
    d44a:	4b5b      	ldr	r3, [pc, #364]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d44c:	33da      	adds	r3, #218	; 0xda
    d44e:	e7d1      	b.n	d3f4 <LORAWAN_GetAttr+0x104>
    d450:	4b59      	ldr	r3, [pc, #356]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d452:	33d9      	adds	r3, #217	; 0xd9
    d454:	e7ce      	b.n	d3f4 <LORAWAN_GetAttr+0x104>
    d456:	4b58      	ldr	r3, [pc, #352]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d458:	33e0      	adds	r3, #224	; 0xe0
    d45a:	e7cb      	b.n	d3f4 <LORAWAN_GetAttr+0x104>
    d45c:	4b56      	ldr	r3, [pc, #344]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d45e:	337c      	adds	r3, #124	; 0x7c
    d460:	781b      	ldrb	r3, [r3, #0]
    d462:	06db      	lsls	r3, r3, #27
    d464:	0fdb      	lsrs	r3, r3, #31
    d466:	e7e5      	b.n	d434 <LORAWAN_GetAttr+0x144>
    d468:	4b53      	ldr	r3, [pc, #332]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d46a:	33de      	adds	r3, #222	; 0xde
    d46c:	e7c2      	b.n	d3f4 <LORAWAN_GetAttr+0x104>
    d46e:	4b52      	ldr	r3, [pc, #328]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d470:	33dd      	adds	r3, #221	; 0xdd
    d472:	e7bf      	b.n	d3f4 <LORAWAN_GetAttr+0x104>
    d474:	4b50      	ldr	r3, [pc, #320]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d476:	3390      	adds	r3, #144	; 0x90
    d478:	781b      	ldrb	r3, [r3, #0]
    d47a:	e7cd      	b.n	d418 <LORAWAN_GetAttr+0x128>
    d47c:	4b4e      	ldr	r3, [pc, #312]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d47e:	e7c3      	b.n	d408 <LORAWAN_GetAttr+0x118>
    d480:	2016      	movs	r0, #22
    d482:	781b      	ldrb	r3, [r3, #0]
    d484:	a902      	add	r1, sp, #8
    d486:	700b      	strb	r3, [r1, #0]
    d488:	4b4e      	ldr	r3, [pc, #312]	; (d5c4 <LORAWAN_GetAttr+0x2d4>)
    d48a:	4798      	blx	r3
    d48c:	e77a      	b.n	d384 <LORAWAN_GetAttr+0x94>
    d48e:	781b      	ldrb	r3, [r3, #0]
    d490:	a902      	add	r1, sp, #8
    d492:	700b      	strb	r3, [r1, #0]
    d494:	2012      	movs	r0, #18
    d496:	e7f7      	b.n	d488 <LORAWAN_GetAttr+0x198>
    d498:	781b      	ldrb	r3, [r3, #0]
    d49a:	a902      	add	r1, sp, #8
    d49c:	700b      	strb	r3, [r1, #0]
    d49e:	2000      	movs	r0, #0
    d4a0:	e7f2      	b.n	d488 <LORAWAN_GetAttr+0x198>
    d4a2:	0010      	movs	r0, r2
    d4a4:	4b48      	ldr	r3, [pc, #288]	; (d5c8 <LORAWAN_GetAttr+0x2d8>)
    d4a6:	4798      	blx	r3
    d4a8:	e76c      	b.n	d384 <LORAWAN_GetAttr+0x94>
    d4aa:	4b43      	ldr	r3, [pc, #268]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d4ac:	33f6      	adds	r3, #246	; 0xf6
    d4ae:	e7a1      	b.n	d3f4 <LORAWAN_GetAttr+0x104>
    d4b0:	4b41      	ldr	r3, [pc, #260]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d4b2:	33f4      	adds	r3, #244	; 0xf4
    d4b4:	e79e      	b.n	d3f4 <LORAWAN_GetAttr+0x104>
    d4b6:	4b40      	ldr	r3, [pc, #256]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d4b8:	33f5      	adds	r3, #245	; 0xf5
    d4ba:	e79b      	b.n	d3f4 <LORAWAN_GetAttr+0x104>
    d4bc:	21fa      	movs	r1, #250	; 0xfa
    d4be:	4b3e      	ldr	r3, [pc, #248]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d4c0:	0089      	lsls	r1, r1, #2
    d4c2:	3388      	adds	r3, #136	; 0x88
    d4c4:	6818      	ldr	r0, [r3, #0]
    d4c6:	4b41      	ldr	r3, [pc, #260]	; (d5cc <LORAWAN_GetAttr+0x2dc>)
    d4c8:	4798      	blx	r3
    d4ca:	8020      	strh	r0, [r4, #0]
    d4cc:	e75a      	b.n	d384 <LORAWAN_GetAttr+0x94>
    d4ce:	780a      	ldrb	r2, [r1, #0]
    d4d0:	200a      	movs	r0, #10
    d4d2:	2a03      	cmp	r2, #3
    d4d4:	d900      	bls.n	d4d8 <LORAWAN_GetAttr+0x1e8>
    d4d6:	e74d      	b.n	d374 <LORAWAN_GetAttr+0x84>
    d4d8:	2322      	movs	r3, #34	; 0x22
    d4da:	4937      	ldr	r1, [pc, #220]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d4dc:	33ff      	adds	r3, #255	; 0xff
    d4de:	5cc9      	ldrb	r1, [r1, r3]
    d4e0:	3b21      	subs	r3, #33	; 0x21
    d4e2:	3bff      	subs	r3, #255	; 0xff
    d4e4:	4093      	lsls	r3, r2
    d4e6:	400b      	ands	r3, r1
    d4e8:	1e5a      	subs	r2, r3, #1
    d4ea:	4193      	sbcs	r3, r2
    d4ec:	7023      	strb	r3, [r4, #0]
    d4ee:	3802      	subs	r0, #2
    d4f0:	e740      	b.n	d374 <LORAWAN_GetAttr+0x84>
    d4f2:	780b      	ldrb	r3, [r1, #0]
    d4f4:	200a      	movs	r0, #10
    d4f6:	2b03      	cmp	r3, #3
    d4f8:	d900      	bls.n	d4fc <LORAWAN_GetAttr+0x20c>
    d4fa:	e73b      	b.n	d374 <LORAWAN_GetAttr+0x84>
    d4fc:	212c      	movs	r1, #44	; 0x2c
    d4fe:	4359      	muls	r1, r3
    d500:	3139      	adds	r1, #57	; 0x39
    d502:	4b2d      	ldr	r3, [pc, #180]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d504:	31ff      	adds	r1, #255	; 0xff
    d506:	18c9      	adds	r1, r1, r3
    d508:	2210      	movs	r2, #16
    d50a:	e738      	b.n	d37e <LORAWAN_GetAttr+0x8e>
    d50c:	780b      	ldrb	r3, [r1, #0]
    d50e:	200a      	movs	r0, #10
    d510:	2b03      	cmp	r3, #3
    d512:	d900      	bls.n	d516 <LORAWAN_GetAttr+0x226>
    d514:	e72e      	b.n	d374 <LORAWAN_GetAttr+0x84>
    d516:	212c      	movs	r1, #44	; 0x2c
    d518:	4359      	muls	r1, r3
    d51a:	3129      	adds	r1, #41	; 0x29
    d51c:	e7f1      	b.n	d502 <LORAWAN_GetAttr+0x212>
    d51e:	780b      	ldrb	r3, [r1, #0]
    d520:	200a      	movs	r0, #10
    d522:	2b03      	cmp	r3, #3
    d524:	d900      	bls.n	d528 <LORAWAN_GetAttr+0x238>
    d526:	e725      	b.n	d374 <LORAWAN_GetAttr+0x84>
    d528:	212c      	movs	r1, #44	; 0x2c
    d52a:	4359      	muls	r1, r3
    d52c:	4b22      	ldr	r3, [pc, #136]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d52e:	3125      	adds	r1, #37	; 0x25
    d530:	31ff      	adds	r1, #255	; 0xff
    d532:	18c9      	adds	r1, r1, r3
    d534:	2204      	movs	r2, #4
    d536:	e722      	b.n	d37e <LORAWAN_GetAttr+0x8e>
    d538:	780a      	ldrb	r2, [r1, #0]
    d53a:	200a      	movs	r0, #10
    d53c:	2a03      	cmp	r2, #3
    d53e:	d900      	bls.n	d542 <LORAWAN_GetAttr+0x252>
    d540:	e718      	b.n	d374 <LORAWAN_GetAttr+0x84>
    d542:	232c      	movs	r3, #44	; 0x2c
    d544:	435a      	muls	r2, r3
    d546:	4b1c      	ldr	r3, [pc, #112]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d548:	189b      	adds	r3, r3, r2
    d54a:	3349      	adds	r3, #73	; 0x49
    d54c:	33ff      	adds	r3, #255	; 0xff
    d54e:	881b      	ldrh	r3, [r3, #0]
    d550:	8023      	strh	r3, [r4, #0]
    d552:	e7cc      	b.n	d4ee <LORAWAN_GetAttr+0x1fe>
    d554:	0010      	movs	r0, r2
    d556:	4b1e      	ldr	r3, [pc, #120]	; (d5d0 <LORAWAN_GetAttr+0x2e0>)
    d558:	4798      	blx	r3
    d55a:	e70b      	b.n	d374 <LORAWAN_GetAttr+0x84>
    d55c:	0011      	movs	r1, r2
    d55e:	4b18      	ldr	r3, [pc, #96]	; (d5c0 <LORAWAN_GetAttr+0x2d0>)
    d560:	201f      	movs	r0, #31
    d562:	4798      	blx	r3
    d564:	e70e      	b.n	d384 <LORAWAN_GetAttr+0x94>
    d566:	4b14      	ldr	r3, [pc, #80]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d568:	338c      	adds	r3, #140	; 0x8c
    d56a:	781b      	ldrb	r3, [r3, #0]
    d56c:	071b      	lsls	r3, r3, #28
    d56e:	e779      	b.n	d464 <LORAWAN_GetAttr+0x174>
    d570:	4b11      	ldr	r3, [pc, #68]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d572:	338c      	adds	r3, #140	; 0x8c
    d574:	781b      	ldrb	r3, [r3, #0]
    d576:	07db      	lsls	r3, r3, #31
    d578:	e774      	b.n	d464 <LORAWAN_GetAttr+0x174>
    d57a:	2031      	movs	r0, #49	; 0x31
    d57c:	4b11      	ldr	r3, [pc, #68]	; (d5c4 <LORAWAN_GetAttr+0x2d4>)
    d57e:	4798      	blx	r3
    d580:	e6f8      	b.n	d374 <LORAWAN_GetAttr+0x84>
    d582:	4914      	ldr	r1, [pc, #80]	; (d5d4 <LORAWAN_GetAttr+0x2e4>)
    d584:	2026      	movs	r0, #38	; 0x26
    d586:	e7f9      	b.n	d57c <LORAWAN_GetAttr+0x28c>
    d588:	4b0b      	ldr	r3, [pc, #44]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d58a:	33dc      	adds	r3, #220	; 0xdc
    d58c:	e732      	b.n	d3f4 <LORAWAN_GetAttr+0x104>
    d58e:	4b12      	ldr	r3, [pc, #72]	; (d5d8 <LORAWAN_GetAttr+0x2e8>)
    d590:	4798      	blx	r3
    d592:	4b12      	ldr	r3, [pc, #72]	; (d5dc <LORAWAN_GetAttr+0x2ec>)
    d594:	0005      	movs	r5, r0
    d596:	4798      	blx	r3
    d598:	1b40      	subs	r0, r0, r5
    d59a:	7020      	strb	r0, [r4, #0]
    d59c:	e6f2      	b.n	d384 <LORAWAN_GetAttr+0x94>
    d59e:	2100      	movs	r1, #0
    d5a0:	2020      	movs	r0, #32
    d5a2:	e7eb      	b.n	d57c <LORAWAN_GetAttr+0x28c>
    d5a4:	4b04      	ldr	r3, [pc, #16]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d5a6:	33ff      	adds	r3, #255	; 0xff
    d5a8:	7c5b      	ldrb	r3, [r3, #17]
    d5aa:	e71f      	b.n	d3ec <LORAWAN_GetAttr+0xfc>
    d5ac:	23f0      	movs	r3, #240	; 0xf0
    d5ae:	4a02      	ldr	r2, [pc, #8]	; (d5b8 <LORAWAN_GetAttr+0x2c8>)
    d5b0:	005b      	lsls	r3, r3, #1
    d5b2:	5cd3      	ldrb	r3, [r2, r3]
    d5b4:	e73e      	b.n	d434 <LORAWAN_GetAttr+0x144>
    d5b6:	46c0      	nop			; (mov r8, r8)
    d5b8:	200017d4 	.word	0x200017d4
    d5bc:	0001516d 	.word	0x0001516d
    d5c0:	0000fefd 	.word	0x0000fefd
    d5c4:	00009141 	.word	0x00009141
    d5c8:	0000d2d1 	.word	0x0000d2d1
    d5cc:	00011a09 	.word	0x00011a09
    d5d0:	000093b1 	.word	0x000093b1
    d5d4:	200018b3 	.word	0x200018b3
    d5d8:	0000b911 	.word	0x0000b911
    d5dc:	0000b9b9 	.word	0x0000b9b9

0000d5e0 <LORAWAN_TxDone>:
    d5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d5e2:	6843      	ldr	r3, [r0, #4]
    d5e4:	b08f      	sub	sp, #60	; 0x3c
    d5e6:	ad07      	add	r5, sp, #28
    d5e8:	7804      	ldrb	r4, [r0, #0]
    d5ea:	9302      	str	r3, [sp, #8]
    d5ec:	2100      	movs	r1, #0
    d5ee:	4b84      	ldr	r3, [pc, #528]	; (d800 <LORAWAN_TxDone+0x220>)
    d5f0:	002a      	movs	r2, r5
    d5f2:	2027      	movs	r0, #39	; 0x27
    d5f4:	4798      	blx	r3
    d5f6:	4f83      	ldr	r7, [pc, #524]	; (d804 <LORAWAN_TxDone+0x224>)
    d5f8:	0039      	movs	r1, r7
    d5fa:	317c      	adds	r1, #124	; 0x7c
    d5fc:	780b      	ldrb	r3, [r1, #0]
    d5fe:	2b7f      	cmp	r3, #127	; 0x7f
    d600:	d900      	bls.n	d604 <LORAWAN_TxDone+0x24>
    d602:	e24a      	b.n	da9a <LORAWAN_TxDone+0x4ba>
    d604:	4a80      	ldr	r2, [pc, #512]	; (d808 <LORAWAN_TxDone+0x228>)
    d606:	7810      	ldrb	r0, [r2, #0]
    d608:	2804      	cmp	r0, #4
    d60a:	d10b      	bne.n	d624 <LORAWAN_TxDone+0x44>
    d60c:	220e      	movs	r2, #14
    d60e:	4393      	bics	r3, r2
    d610:	700b      	strb	r3, [r1, #0]
    d612:	3017      	adds	r0, #23
    d614:	07db      	lsls	r3, r3, #31
    d616:	d500      	bpl.n	d61a <LORAWAN_TxDone+0x3a>
    d618:	e0b2      	b.n	d780 <LORAWAN_TxDone+0x1a0>
    d61a:	201b      	movs	r0, #27
    d61c:	4b7b      	ldr	r3, [pc, #492]	; (d80c <LORAWAN_TxDone+0x22c>)
    d61e:	4798      	blx	r3
    d620:	b00f      	add	sp, #60	; 0x3c
    d622:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d624:	7813      	ldrb	r3, [r2, #0]
    d626:	2b02      	cmp	r3, #2
    d628:	d1fa      	bne.n	d620 <LORAWAN_TxDone+0x40>
    d62a:	33d5      	adds	r3, #213	; 0xd5
    d62c:	33ff      	adds	r3, #255	; 0xff
    d62e:	5cfa      	ldrb	r2, [r7, r3]
    d630:	2a00      	cmp	r2, #0
    d632:	d005      	beq.n	d640 <LORAWAN_TxDone+0x60>
    d634:	2200      	movs	r2, #0
    d636:	4976      	ldr	r1, [pc, #472]	; (d810 <LORAWAN_TxDone+0x230>)
    d638:	54fa      	strb	r2, [r7, r3]
    d63a:	200b      	movs	r0, #11
    d63c:	4b75      	ldr	r3, [pc, #468]	; (d814 <LORAWAN_TxDone+0x234>)
    d63e:	4798      	blx	r3
    d640:	2c07      	cmp	r4, #7
    d642:	d000      	beq.n	d646 <LORAWAN_TxDone+0x66>
    d644:	e0a0      	b.n	d788 <LORAWAN_TxDone+0x1a8>
    d646:	79eb      	ldrb	r3, [r5, #7]
    d648:	2b00      	cmp	r3, #0
    d64a:	d0e9      	beq.n	d620 <LORAWAN_TxDone+0x40>
    d64c:	003b      	movs	r3, r7
    d64e:	338c      	adds	r3, #140	; 0x8c
    d650:	7818      	ldrb	r0, [r3, #0]
    d652:	003e      	movs	r6, r7
    d654:	2304      	movs	r3, #4
    d656:	36fe      	adds	r6, #254	; 0xfe
    d658:	4018      	ands	r0, r3
    d65a:	4d6f      	ldr	r5, [pc, #444]	; (d818 <LORAWAN_TxDone+0x238>)
    d65c:	d005      	beq.n	d66a <LORAWAN_TxDone+0x8a>
    d65e:	2000      	movs	r0, #0
    d660:	2109      	movs	r1, #9
    d662:	82b0      	strh	r0, [r6, #20]
    d664:	47a8      	blx	r5
    d666:	0020      	movs	r0, r4
    d668:	e7d8      	b.n	d61c <LORAWAN_TxDone+0x3c>
    d66a:	8ab3      	ldrh	r3, [r6, #20]
    d66c:	2109      	movs	r1, #9
    d66e:	3301      	adds	r3, #1
    d670:	82b3      	strh	r3, [r6, #20]
    d672:	47a8      	blx	r5
    d674:	8af3      	ldrh	r3, [r6, #22]
    d676:	4a69      	ldr	r2, [pc, #420]	; (d81c <LORAWAN_TxDone+0x23c>)
    d678:	4293      	cmp	r3, r2
    d67a:	d002      	beq.n	d682 <LORAWAN_TxDone+0xa2>
    d67c:	8ab2      	ldrh	r2, [r6, #20]
    d67e:	429a      	cmp	r2, r3
    d680:	d266      	bcs.n	d750 <LORAWAN_TxDone+0x170>
    d682:	23ef      	movs	r3, #239	; 0xef
    d684:	005b      	lsls	r3, r3, #1
    d686:	5cfb      	ldrb	r3, [r7, r3]
    d688:	2b00      	cmp	r3, #0
    d68a:	d061      	beq.n	d750 <LORAWAN_TxDone+0x170>
    d68c:	2601      	movs	r6, #1
    d68e:	003b      	movs	r3, r7
    d690:	a905      	add	r1, sp, #20
    d692:	700e      	strb	r6, [r1, #0]
    d694:	33e1      	adds	r3, #225	; 0xe1
    d696:	781b      	ldrb	r3, [r3, #0]
    d698:	aa0b      	add	r2, sp, #44	; 0x2c
    d69a:	704b      	strb	r3, [r1, #1]
    d69c:	003b      	movs	r3, r7
    d69e:	33df      	adds	r3, #223	; 0xdf
    d6a0:	781b      	ldrb	r3, [r3, #0]
    d6a2:	202f      	movs	r0, #47	; 0x2f
    d6a4:	708b      	strb	r3, [r1, #2]
    d6a6:	4b5e      	ldr	r3, [pc, #376]	; (d820 <LORAWAN_TxDone+0x240>)
    d6a8:	4798      	blx	r3
    d6aa:	2808      	cmp	r0, #8
    d6ac:	d135      	bne.n	d71a <LORAWAN_TxDone+0x13a>
    d6ae:	a806      	add	r0, sp, #24
    d6b0:	4b5c      	ldr	r3, [pc, #368]	; (d824 <LORAWAN_TxDone+0x244>)
    d6b2:	7006      	strb	r6, [r0, #0]
    d6b4:	4798      	blx	r3
    d6b6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d6b8:	990c      	ldr	r1, [sp, #48]	; 0x30
    d6ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    d6bc:	4b5a      	ldr	r3, [pc, #360]	; (d828 <LORAWAN_TxDone+0x248>)
    d6be:	4798      	blx	r3
    d6c0:	003b      	movs	r3, r7
    d6c2:	33c6      	adds	r3, #198	; 0xc6
    d6c4:	881b      	ldrh	r3, [r3, #0]
    d6c6:	a809      	add	r0, sp, #36	; 0x24
    d6c8:	7003      	strb	r3, [r0, #0]
    d6ca:	4b58      	ldr	r3, [pc, #352]	; (d82c <LORAWAN_TxDone+0x24c>)
    d6cc:	6043      	str	r3, [r0, #4]
    d6ce:	4b58      	ldr	r3, [pc, #352]	; (d830 <LORAWAN_TxDone+0x250>)
    d6d0:	4798      	blx	r3
    d6d2:	1e04      	subs	r4, r0, #0
    d6d4:	d108      	bne.n	d6e8 <LORAWAN_TxDone+0x108>
    d6d6:	220e      	movs	r2, #14
    d6d8:	377c      	adds	r7, #124	; 0x7c
    d6da:	783b      	ldrb	r3, [r7, #0]
    d6dc:	4393      	bics	r3, r2
    d6de:	001a      	movs	r2, r3
    d6e0:	2302      	movs	r3, #2
    d6e2:	4313      	orrs	r3, r2
    d6e4:	703b      	strb	r3, [r7, #0]
    d6e6:	e79b      	b.n	d620 <LORAWAN_TxDone+0x40>
    d6e8:	003b      	movs	r3, r7
    d6ea:	338c      	adds	r3, #140	; 0x8c
    d6ec:	7818      	ldrb	r0, [r3, #0]
    d6ee:	003b      	movs	r3, r7
    d6f0:	4030      	ands	r0, r6
    d6f2:	33fe      	adds	r3, #254	; 0xfe
    d6f4:	4e4f      	ldr	r6, [pc, #316]	; (d834 <LORAWAN_TxDone+0x254>)
    d6f6:	4f50      	ldr	r7, [pc, #320]	; (d838 <LORAWAN_TxDone+0x258>)
    d6f8:	2800      	cmp	r0, #0
    d6fa:	d009      	beq.n	d710 <LORAWAN_TxDone+0x130>
    d6fc:	2000      	movs	r0, #0
    d6fe:	2109      	movs	r1, #9
    d700:	8298      	strh	r0, [r3, #20]
    d702:	47a8      	blx	r5
    d704:	4b4d      	ldr	r3, [pc, #308]	; (d83c <LORAWAN_TxDone+0x25c>)
    d706:	4798      	blx	r3
    d708:	47b8      	blx	r7
    d70a:	0020      	movs	r0, r4
    d70c:	47b0      	blx	r6
    d70e:	e787      	b.n	d620 <LORAWAN_TxDone+0x40>
    d710:	2109      	movs	r1, #9
    d712:	8298      	strh	r0, [r3, #20]
    d714:	47a8      	blx	r5
    d716:	4b4a      	ldr	r3, [pc, #296]	; (d840 <LORAWAN_TxDone+0x260>)
    d718:	e7f5      	b.n	d706 <LORAWAN_TxDone+0x126>
    d71a:	003b      	movs	r3, r7
    d71c:	338c      	adds	r3, #140	; 0x8c
    d71e:	7818      	ldrb	r0, [r3, #0]
    d720:	003b      	movs	r3, r7
    d722:	4006      	ands	r6, r0
    d724:	4c43      	ldr	r4, [pc, #268]	; (d834 <LORAWAN_TxDone+0x254>)
    d726:	33fe      	adds	r3, #254	; 0xfe
    d728:	4f43      	ldr	r7, [pc, #268]	; (d838 <LORAWAN_TxDone+0x258>)
    d72a:	2e00      	cmp	r6, #0
    d72c:	d00a      	beq.n	d744 <LORAWAN_TxDone+0x164>
    d72e:	2600      	movs	r6, #0
    d730:	2109      	movs	r1, #9
    d732:	0030      	movs	r0, r6
    d734:	829e      	strh	r6, [r3, #20]
    d736:	47a8      	blx	r5
    d738:	4b40      	ldr	r3, [pc, #256]	; (d83c <LORAWAN_TxDone+0x25c>)
    d73a:	4798      	blx	r3
    d73c:	47b8      	blx	r7
    d73e:	0030      	movs	r0, r6
    d740:	47a0      	blx	r4
    d742:	e76d      	b.n	d620 <LORAWAN_TxDone+0x40>
    d744:	2109      	movs	r1, #9
    d746:	0030      	movs	r0, r6
    d748:	829e      	strh	r6, [r3, #20]
    d74a:	47a8      	blx	r5
    d74c:	4b3c      	ldr	r3, [pc, #240]	; (d840 <LORAWAN_TxDone+0x260>)
    d74e:	e7f4      	b.n	d73a <LORAWAN_TxDone+0x15a>
    d750:	003b      	movs	r3, r7
    d752:	2000      	movs	r0, #0
    d754:	33fe      	adds	r3, #254	; 0xfe
    d756:	2109      	movs	r1, #9
    d758:	8298      	strh	r0, [r3, #20]
    d75a:	47a8      	blx	r5
    d75c:	003a      	movs	r2, r7
    d75e:	210e      	movs	r1, #14
    d760:	327c      	adds	r2, #124	; 0x7c
    d762:	7813      	ldrb	r3, [r2, #0]
    d764:	378c      	adds	r7, #140	; 0x8c
    d766:	438b      	bics	r3, r1
    d768:	7013      	strb	r3, [r2, #0]
    d76a:	2220      	movs	r2, #32
    d76c:	783b      	ldrb	r3, [r7, #0]
    d76e:	4c32      	ldr	r4, [pc, #200]	; (d838 <LORAWAN_TxDone+0x258>)
    d770:	4393      	bics	r3, r2
    d772:	703b      	strb	r3, [r7, #0]
    d774:	07db      	lsls	r3, r3, #31
    d776:	d505      	bpl.n	d784 <LORAWAN_TxDone+0x1a4>
    d778:	4b30      	ldr	r3, [pc, #192]	; (d83c <LORAWAN_TxDone+0x25c>)
    d77a:	4798      	blx	r3
    d77c:	47a0      	blx	r4
    d77e:	2007      	movs	r0, #7
    d780:	4b2c      	ldr	r3, [pc, #176]	; (d834 <LORAWAN_TxDone+0x254>)
    d782:	e74c      	b.n	d61e <LORAWAN_TxDone+0x3e>
    d784:	4b2e      	ldr	r3, [pc, #184]	; (d840 <LORAWAN_TxDone+0x260>)
    d786:	e7f8      	b.n	d77a <LORAWAN_TxDone+0x19a>
    d788:	2c00      	cmp	r4, #0
    d78a:	d000      	beq.n	d78e <LORAWAN_TxDone+0x1ae>
    d78c:	e748      	b.n	d620 <LORAWAN_TxDone+0x40>
    d78e:	003b      	movs	r3, r7
    d790:	33fc      	adds	r3, #252	; 0xfc
    d792:	681d      	ldr	r5, [r3, #0]
    d794:	003b      	movs	r3, r7
    d796:	33fe      	adds	r3, #254	; 0xfe
    d798:	829c      	strh	r4, [r3, #20]
    d79a:	0020      	movs	r0, r4
    d79c:	2109      	movs	r1, #9
    d79e:	4c1e      	ldr	r4, [pc, #120]	; (d818 <LORAWAN_TxDone+0x238>)
    d7a0:	47a0      	blx	r4
    d7a2:	003b      	movs	r3, r7
    d7a4:	003e      	movs	r6, r7
    d7a6:	33db      	adds	r3, #219	; 0xdb
    d7a8:	781b      	ldrb	r3, [r3, #0]
    d7aa:	367c      	adds	r6, #124	; 0x7c
    d7ac:	2b00      	cmp	r3, #0
    d7ae:	d149      	bne.n	d844 <LORAWAN_TxDone+0x264>
    d7b0:	003a      	movs	r2, r7
    d7b2:	32dc      	adds	r2, #220	; 0xdc
    d7b4:	7812      	ldrb	r2, [r2, #0]
    d7b6:	2a00      	cmp	r2, #0
    d7b8:	d144      	bne.n	d844 <LORAWAN_TxDone+0x264>
    d7ba:	7832      	ldrb	r2, [r6, #0]
    d7bc:	3301      	adds	r3, #1
    d7be:	421a      	tst	r2, r3
    d7c0:	d04f      	beq.n	d862 <LORAWAN_TxDone+0x282>
    d7c2:	1d39      	adds	r1, r7, #4
    d7c4:	6fca      	ldr	r2, [r1, #124]	; 0x7c
    d7c6:	18d2      	adds	r2, r2, r3
    d7c8:	67ca      	str	r2, [r1, #124]	; 0x7c
    d7ca:	21f0      	movs	r1, #240	; 0xf0
    d7cc:	0049      	lsls	r1, r1, #1
    d7ce:	5c79      	ldrb	r1, [r7, r1]
    d7d0:	2900      	cmp	r1, #0
    d7d2:	d003      	beq.n	d7dc <LORAWAN_TxDone+0x1fc>
    d7d4:	408b      	lsls	r3, r1
    d7d6:	3b01      	subs	r3, #1
    d7d8:	421a      	tst	r2, r3
    d7da:	d102      	bne.n	d7e2 <LORAWAN_TxDone+0x202>
    d7dc:	2116      	movs	r1, #22
    d7de:	2000      	movs	r0, #0
    d7e0:	47a0      	blx	r4
    d7e2:	782b      	ldrb	r3, [r5, #0]
    d7e4:	003a      	movs	r2, r7
    d7e6:	2b01      	cmp	r3, #1
    d7e8:	d106      	bne.n	d7f8 <LORAWAN_TxDone+0x218>
    d7ea:	328c      	adds	r2, #140	; 0x8c
    d7ec:	7811      	ldrb	r1, [r2, #0]
    d7ee:	430b      	orrs	r3, r1
    d7f0:	7013      	strb	r3, [r2, #0]
    d7f2:	003a      	movs	r2, r7
    d7f4:	32dc      	adds	r2, #220	; 0xdc
    d7f6:	e000      	b.n	d7fa <LORAWAN_TxDone+0x21a>
    d7f8:	32db      	adds	r2, #219	; 0xdb
    d7fa:	7813      	ldrb	r3, [r2, #0]
    d7fc:	3301      	adds	r3, #1
    d7fe:	e02f      	b.n	d860 <LORAWAN_TxDone+0x280>
    d800:	0000d2f1 	.word	0x0000d2f1
    d804:	200017d4 	.word	0x200017d4
    d808:	200019b8 	.word	0x200019b8
    d80c:	0000c309 	.word	0x0000c309
    d810:	200019a9 	.word	0x200019a9
    d814:	0000ffed 	.word	0x0000ffed
    d818:	00009729 	.word	0x00009729
    d81c:	0000ffff 	.word	0x0000ffff
    d820:	00009141 	.word	0x00009141
    d824:	00011211 	.word	0x00011211
    d828:	0000c86d 	.word	0x0000c86d
    d82c:	200019c9 	.word	0x200019c9
    d830:	0001093d 	.word	0x0001093d
    d834:	0000cddd 	.word	0x0000cddd
    d838:	0000b8cd 	.word	0x0000b8cd
    d83c:	0000c2b5 	.word	0x0000c2b5
    d840:	0000c2e5 	.word	0x0000c2e5
    d844:	003a      	movs	r2, r7
    d846:	327c      	adds	r2, #124	; 0x7c
    d848:	7811      	ldrb	r1, [r2, #0]
    d84a:	2201      	movs	r2, #1
    d84c:	4211      	tst	r1, r2
    d84e:	d008      	beq.n	d862 <LORAWAN_TxDone+0x282>
    d850:	0039      	movs	r1, r7
    d852:	318c      	adds	r1, #140	; 0x8c
    d854:	7809      	ldrb	r1, [r1, #0]
    d856:	4211      	tst	r1, r2
    d858:	d1cb      	bne.n	d7f2 <LORAWAN_TxDone+0x212>
    d85a:	189b      	adds	r3, r3, r2
    d85c:	003a      	movs	r2, r7
    d85e:	32db      	adds	r2, #219	; 0xdb
    d860:	7013      	strb	r3, [r2, #0]
    d862:	003b      	movs	r3, r7
    d864:	2200      	movs	r2, #0
    d866:	33f0      	adds	r3, #240	; 0xf0
    d868:	701a      	strb	r2, [r3, #0]
    d86a:	003a      	movs	r2, r7
    d86c:	210e      	movs	r1, #14
    d86e:	2504      	movs	r5, #4
    d870:	327c      	adds	r2, #124	; 0x7c
    d872:	7813      	ldrb	r3, [r2, #0]
    d874:	003e      	movs	r6, r7
    d876:	438b      	bics	r3, r1
    d878:	432b      	orrs	r3, r5
    d87a:	7013      	strb	r3, [r2, #0]
    d87c:	003b      	movs	r3, r7
    d87e:	33df      	adds	r3, #223	; 0xdf
    d880:	781b      	ldrb	r3, [r3, #0]
    d882:	a906      	add	r1, sp, #24
    d884:	708b      	strb	r3, [r1, #2]
    d886:	003b      	movs	r3, r7
    d888:	33ee      	adds	r3, #238	; 0xee
    d88a:	781b      	ldrb	r3, [r3, #0]
    d88c:	368c      	adds	r6, #140	; 0x8c
    d88e:	704b      	strb	r3, [r1, #1]
    d890:	7833      	ldrb	r3, [r6, #0]
    d892:	ac09      	add	r4, sp, #36	; 0x24
    d894:	075b      	lsls	r3, r3, #29
    d896:	0fdb      	lsrs	r3, r3, #31
    d898:	700b      	strb	r3, [r1, #0]
    d89a:	0022      	movs	r2, r4
    d89c:	4b8f      	ldr	r3, [pc, #572]	; (dadc <LORAWAN_TxDone+0x4fc>)
    d89e:	2019      	movs	r0, #25
    d8a0:	4798      	blx	r3
    d8a2:	7833      	ldrb	r3, [r6, #0]
    d8a4:	422b      	tst	r3, r5
    d8a6:	d100      	bne.n	d8aa <LORAWAN_TxDone+0x2ca>
    d8a8:	e0bd      	b.n	da26 <LORAWAN_TxDone+0x446>
    d8aa:	2300      	movs	r3, #0
    d8ac:	ae0b      	add	r6, sp, #44	; 0x2c
    d8ae:	7033      	strb	r3, [r6, #0]
    d8b0:	0032      	movs	r2, r6
    d8b2:	2100      	movs	r1, #0
    d8b4:	2009      	movs	r0, #9
    d8b6:	4b89      	ldr	r3, [pc, #548]	; (dadc <LORAWAN_TxDone+0x4fc>)
    d8b8:	4798      	blx	r3
    d8ba:	0031      	movs	r1, r6
    d8bc:	aa05      	add	r2, sp, #20
    d8be:	0028      	movs	r0, r5
    d8c0:	4b86      	ldr	r3, [pc, #536]	; (dadc <LORAWAN_TxDone+0x4fc>)
    d8c2:	4798      	blx	r3
    d8c4:	0039      	movs	r1, r7
    d8c6:	7923      	ldrb	r3, [r4, #4]
    d8c8:	3169      	adds	r1, #105	; 0x69
    d8ca:	700b      	strb	r3, [r1, #0]
    d8cc:	003b      	movs	r3, r7
    d8ce:	260b      	movs	r6, #11
    d8d0:	7822      	ldrb	r2, [r4, #0]
    d8d2:	3365      	adds	r3, #101	; 0x65
    d8d4:	701a      	strb	r2, [r3, #0]
    d8d6:	7862      	ldrb	r2, [r4, #1]
    d8d8:	2004      	movs	r0, #4
    d8da:	705a      	strb	r2, [r3, #1]
    d8dc:	78a2      	ldrb	r2, [r4, #2]
    d8de:	2500      	movs	r5, #0
    d8e0:	709a      	strb	r2, [r3, #2]
    d8e2:	78e2      	ldrb	r2, [r4, #3]
    d8e4:	70da      	strb	r2, [r3, #3]
    d8e6:	ab02      	add	r3, sp, #8
    d8e8:	18f6      	adds	r6, r6, r3
    d8ea:	0032      	movs	r2, r6
    d8ec:	4b7b      	ldr	r3, [pc, #492]	; (dadc <LORAWAN_TxDone+0x4fc>)
    d8ee:	4798      	blx	r3
    d8f0:	003b      	movs	r3, r7
    d8f2:	338c      	adds	r3, #140	; 0x8c
    d8f4:	781c      	ldrb	r4, [r3, #0]
    d8f6:	2304      	movs	r3, #4
    d8f8:	401c      	ands	r4, r3
    d8fa:	2300      	movs	r3, #0
    d8fc:	003a      	movs	r2, r7
    d8fe:	56f3      	ldrsb	r3, [r6, r3]
    d900:	42ac      	cmp	r4, r5
    d902:	d100      	bne.n	d906 <LORAWAN_TxDone+0x326>
    d904:	e092      	b.n	da2c <LORAWAN_TxDone+0x44c>
    d906:	2100      	movs	r1, #0
    d908:	32ce      	adds	r2, #206	; 0xce
    d90a:	8816      	ldrh	r6, [r2, #0]
    d90c:	aa05      	add	r2, sp, #20
    d90e:	5651      	ldrsb	r1, [r2, r1]
    d910:	4c73      	ldr	r4, [pc, #460]	; (dae0 <LORAWAN_TxDone+0x500>)
    d912:	1872      	adds	r2, r6, r1
    d914:	9203      	str	r2, [sp, #12]
    d916:	003a      	movs	r2, r7
    d918:	32cc      	adds	r2, #204	; 0xcc
    d91a:	8811      	ldrh	r1, [r2, #0]
    d91c:	26fa      	movs	r6, #250	; 0xfa
    d91e:	18c9      	adds	r1, r1, r3
    d920:	23e0      	movs	r3, #224	; 0xe0
    d922:	33ff      	adds	r3, #255	; 0xff
    d924:	5cfb      	ldrb	r3, [r7, r3]
    d926:	00b6      	lsls	r6, r6, #2
    d928:	1ac9      	subs	r1, r1, r3
    d92a:	003b      	movs	r3, r7
    d92c:	33e2      	adds	r3, #226	; 0xe2
    d92e:	7818      	ldrb	r0, [r3, #0]
    d930:	4371      	muls	r1, r6
    d932:	4b6c      	ldr	r3, [pc, #432]	; (dae4 <LORAWAN_TxDone+0x504>)
    d934:	002a      	movs	r2, r5
    d936:	9500      	str	r5, [sp, #0]
    d938:	47a0      	blx	r4
    d93a:	23e0      	movs	r3, #224	; 0xe0
    d93c:	33ff      	adds	r3, #255	; 0xff
    d93e:	5cf9      	ldrb	r1, [r7, r3]
    d940:	9b03      	ldr	r3, [sp, #12]
    d942:	002a      	movs	r2, r5
    d944:	1a59      	subs	r1, r3, r1
    d946:	003b      	movs	r3, r7
    d948:	33e3      	adds	r3, #227	; 0xe3
    d94a:	7818      	ldrb	r0, [r3, #0]
    d94c:	4371      	muls	r1, r6
    d94e:	4b66      	ldr	r3, [pc, #408]	; (dae8 <LORAWAN_TxDone+0x508>)
    d950:	9500      	str	r5, [sp, #0]
    d952:	47a0      	blx	r4
    d954:	003b      	movs	r3, r7
    d956:	33ff      	adds	r3, #255	; 0xff
    d958:	7c5b      	ldrb	r3, [r3, #17]
    d95a:	069b      	lsls	r3, r3, #26
    d95c:	d549      	bpl.n	d9f2 <LORAWAN_TxDone+0x412>
    d95e:	466a      	mov	r2, sp
    d960:	003b      	movs	r3, r7
    d962:	7a12      	ldrb	r2, [r2, #8]
    d964:	3377      	adds	r3, #119	; 0x77
    d966:	701a      	strb	r2, [r3, #0]
    d968:	9a02      	ldr	r2, [sp, #8]
    d96a:	ad0b      	add	r5, sp, #44	; 0x2c
    d96c:	0a12      	lsrs	r2, r2, #8
    d96e:	705a      	strb	r2, [r3, #1]
    d970:	9a02      	ldr	r2, [sp, #8]
    d972:	0c12      	lsrs	r2, r2, #16
    d974:	709a      	strb	r2, [r3, #2]
    d976:	9a02      	ldr	r2, [sp, #8]
    d978:	0e12      	lsrs	r2, r2, #24
    d97a:	70da      	strb	r2, [r3, #3]
    d97c:	003b      	movs	r3, r7
    d97e:	337b      	adds	r3, #123	; 0x7b
    d980:	781b      	ldrb	r3, [r3, #0]
    d982:	2b00      	cmp	r3, #0
    d984:	d027      	beq.n	d9d6 <LORAWAN_TxDone+0x3f6>
    d986:	003c      	movs	r4, r7
    d988:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    d98a:	346f      	adds	r4, #111	; 0x6f
    d98c:	0216      	lsls	r6, r2, #8
    d98e:	003a      	movs	r2, r7
    d990:	7823      	ldrb	r3, [r4, #0]
    d992:	3273      	adds	r2, #115	; 0x73
    d994:	4333      	orrs	r3, r6
    d996:	6f7e      	ldr	r6, [r7, #116]	; 0x74
    d998:	7812      	ldrb	r2, [r2, #0]
    d99a:	0236      	lsls	r6, r6, #8
    d99c:	4316      	orrs	r6, r2
    d99e:	431e      	orrs	r6, r3
    d9a0:	d119      	bne.n	d9d6 <LORAWAN_TxDone+0x3f6>
    d9a2:	2301      	movs	r3, #1
    d9a4:	0029      	movs	r1, r5
    d9a6:	702b      	strb	r3, [r5, #0]
    d9a8:	2021      	movs	r0, #33	; 0x21
    d9aa:	4b50      	ldr	r3, [pc, #320]	; (daec <LORAWAN_TxDone+0x50c>)
    d9ac:	4798      	blx	r3
    d9ae:	4b50      	ldr	r3, [pc, #320]	; (daf0 <LORAWAN_TxDone+0x510>)
    d9b0:	4798      	blx	r3
    d9b2:	0033      	movs	r3, r6
    d9b4:	9a02      	ldr	r2, [sp, #8]
    d9b6:	1a80      	subs	r0, r0, r2
    d9b8:	4199      	sbcs	r1, r3
    d9ba:	0a03      	lsrs	r3, r0, #8
    d9bc:	7063      	strb	r3, [r4, #1]
    d9be:	0c03      	lsrs	r3, r0, #16
    d9c0:	70a3      	strb	r3, [r4, #2]
    d9c2:	0e03      	lsrs	r3, r0, #24
    d9c4:	70e3      	strb	r3, [r4, #3]
    d9c6:	0a0b      	lsrs	r3, r1, #8
    d9c8:	7163      	strb	r3, [r4, #5]
    d9ca:	0c0b      	lsrs	r3, r1, #16
    d9cc:	71a3      	strb	r3, [r4, #6]
    d9ce:	0e0b      	lsrs	r3, r1, #24
    d9d0:	7020      	strb	r0, [r4, #0]
    d9d2:	7121      	strb	r1, [r4, #4]
    d9d4:	71e3      	strb	r3, [r4, #7]
    d9d6:	4a47      	ldr	r2, [pc, #284]	; (daf4 <LORAWAN_TxDone+0x514>)
    d9d8:	2020      	movs	r0, #32
    d9da:	0013      	movs	r3, r2
    d9dc:	3377      	adds	r3, #119	; 0x77
    d9de:	7819      	ldrb	r1, [r3, #0]
    d9e0:	6f93      	ldr	r3, [r2, #120]	; 0x78
    d9e2:	021b      	lsls	r3, r3, #8
    d9e4:	430b      	orrs	r3, r1
    d9e6:	930b      	str	r3, [sp, #44]	; 0x2c
    d9e8:	2301      	movs	r3, #1
    d9ea:	0029      	movs	r1, r5
    d9ec:	712b      	strb	r3, [r5, #4]
    d9ee:	4b3f      	ldr	r3, [pc, #252]	; (daec <LORAWAN_TxDone+0x50c>)
    d9f0:	4798      	blx	r3
    d9f2:	4b40      	ldr	r3, [pc, #256]	; (daf4 <LORAWAN_TxDone+0x514>)
    d9f4:	2102      	movs	r1, #2
    d9f6:	001a      	movs	r2, r3
    d9f8:	32ff      	adds	r2, #255	; 0xff
    d9fa:	7c52      	ldrb	r2, [r2, #17]
    d9fc:	4011      	ands	r1, r2
    d9fe:	d047      	beq.n	da90 <LORAWAN_TxDone+0x4b0>
    da00:	466a      	mov	r2, sp
    da02:	8912      	ldrh	r2, [r2, #8]
    da04:	a90b      	add	r1, sp, #44	; 0x2c
    da06:	800a      	strh	r2, [r1, #0]
    da08:	001a      	movs	r2, r3
    da0a:	328c      	adds	r2, #140	; 0x8c
    da0c:	7812      	ldrb	r2, [r2, #0]
    da0e:	3390      	adds	r3, #144	; 0x90
    da10:	0752      	lsls	r2, r2, #29
    da12:	0fd2      	lsrs	r2, r2, #31
    da14:	710a      	strb	r2, [r1, #4]
    da16:	781a      	ldrb	r2, [r3, #0]
    da18:	2301      	movs	r3, #1
    da1a:	4093      	lsls	r3, r2
    da1c:	201f      	movs	r0, #31
    da1e:	804b      	strh	r3, [r1, #2]
    da20:	4b32      	ldr	r3, [pc, #200]	; (daec <LORAWAN_TxDone+0x50c>)
    da22:	4798      	blx	r3
    da24:	e5fc      	b.n	d620 <LORAWAN_TxDone+0x40>
    da26:	aa05      	add	r2, sp, #20
    da28:	4933      	ldr	r1, [pc, #204]	; (daf8 <LORAWAN_TxDone+0x518>)
    da2a:	e748      	b.n	d8be <LORAWAN_TxDone+0x2de>
    da2c:	32c8      	adds	r2, #200	; 0xc8
    da2e:	8811      	ldrh	r1, [r2, #0]
    da30:	25fa      	movs	r5, #250	; 0xfa
    da32:	18c9      	adds	r1, r1, r3
    da34:	23e0      	movs	r3, #224	; 0xe0
    da36:	33ff      	adds	r3, #255	; 0xff
    da38:	5cfb      	ldrb	r3, [r7, r3]
    da3a:	00ad      	lsls	r5, r5, #2
    da3c:	1ac9      	subs	r1, r1, r3
    da3e:	003b      	movs	r3, r7
    da40:	33e4      	adds	r3, #228	; 0xe4
    da42:	7818      	ldrb	r0, [r3, #0]
    da44:	4369      	muls	r1, r5
    da46:	4b27      	ldr	r3, [pc, #156]	; (dae4 <LORAWAN_TxDone+0x504>)
    da48:	9400      	str	r4, [sp, #0]
    da4a:	0022      	movs	r2, r4
    da4c:	4e24      	ldr	r6, [pc, #144]	; (dae0 <LORAWAN_TxDone+0x500>)
    da4e:	47b0      	blx	r6
    da50:	003b      	movs	r3, r7
    da52:	33f4      	adds	r3, #244	; 0xf4
    da54:	781b      	ldrb	r3, [r3, #0]
    da56:	2b04      	cmp	r3, #4
    da58:	d105      	bne.n	da66 <LORAWAN_TxDone+0x486>
    da5a:	2000      	movs	r0, #0
    da5c:	ab05      	add	r3, sp, #20
    da5e:	5618      	ldrsb	r0, [r3, r0]
    da60:	4b26      	ldr	r3, [pc, #152]	; (dafc <LORAWAN_TxDone+0x51c>)
    da62:	4798      	blx	r3
    da64:	e7c5      	b.n	d9f2 <LORAWAN_TxDone+0x412>
    da66:	2b01      	cmp	r3, #1
    da68:	d1c3      	bne.n	d9f2 <LORAWAN_TxDone+0x412>
    da6a:	003b      	movs	r3, r7
    da6c:	33ca      	adds	r3, #202	; 0xca
    da6e:	8819      	ldrh	r1, [r3, #0]
    da70:	ab05      	add	r3, sp, #20
    da72:	781b      	ldrb	r3, [r3, #0]
    da74:	0022      	movs	r2, r4
    da76:	b25b      	sxtb	r3, r3
    da78:	18c9      	adds	r1, r1, r3
    da7a:	23e0      	movs	r3, #224	; 0xe0
    da7c:	33ff      	adds	r3, #255	; 0xff
    da7e:	5cfb      	ldrb	r3, [r7, r3]
    da80:	37e5      	adds	r7, #229	; 0xe5
    da82:	1ac9      	subs	r1, r1, r3
    da84:	7838      	ldrb	r0, [r7, #0]
    da86:	4369      	muls	r1, r5
    da88:	9400      	str	r4, [sp, #0]
    da8a:	4b17      	ldr	r3, [pc, #92]	; (dae8 <LORAWAN_TxDone+0x508>)
    da8c:	47b0      	blx	r6
    da8e:	e7b0      	b.n	d9f2 <LORAWAN_TxDone+0x412>
    da90:	0753      	lsls	r3, r2, #29
    da92:	d400      	bmi.n	da96 <LORAWAN_TxDone+0x4b6>
    da94:	e5c4      	b.n	d620 <LORAWAN_TxDone+0x40>
    da96:	2022      	movs	r0, #34	; 0x22
    da98:	e7c2      	b.n	da20 <LORAWAN_TxDone+0x440>
    da9a:	4919      	ldr	r1, [pc, #100]	; (db00 <LORAWAN_TxDone+0x520>)
    da9c:	784a      	ldrb	r2, [r1, #1]
    da9e:	780b      	ldrb	r3, [r1, #0]
    daa0:	0212      	lsls	r2, r2, #8
    daa2:	431a      	orrs	r2, r3
    daa4:	788b      	ldrb	r3, [r1, #2]
    daa6:	041b      	lsls	r3, r3, #16
    daa8:	431a      	orrs	r2, r3
    daaa:	78cb      	ldrb	r3, [r1, #3]
    daac:	061b      	lsls	r3, r3, #24
    daae:	4313      	orrs	r3, r2
    dab0:	d100      	bne.n	dab4 <LORAWAN_TxDone+0x4d4>
    dab2:	e5b5      	b.n	d620 <LORAWAN_TxDone+0x40>
    dab4:	4a13      	ldr	r2, [pc, #76]	; (db04 <LORAWAN_TxDone+0x524>)
    dab6:	7811      	ldrb	r1, [r2, #0]
    dab8:	221c      	movs	r2, #28
    daba:	2904      	cmp	r1, #4
    dabc:	d003      	beq.n	dac6 <LORAWAN_TxDone+0x4e6>
    dabe:	2200      	movs	r2, #0
    dac0:	2c07      	cmp	r4, #7
    dac2:	d100      	bne.n	dac6 <LORAWAN_TxDone+0x4e6>
    dac4:	0022      	movs	r2, r4
    dac6:	0039      	movs	r1, r7
    dac8:	2004      	movs	r0, #4
    daca:	31ff      	adds	r1, #255	; 0xff
    dacc:	37fc      	adds	r7, #252	; 0xfc
    dace:	7048      	strb	r0, [r1, #1]
    dad0:	714a      	strb	r2, [r1, #5]
    dad2:	6838      	ldr	r0, [r7, #0]
    dad4:	490c      	ldr	r1, [pc, #48]	; (db08 <LORAWAN_TxDone+0x528>)
    dad6:	4798      	blx	r3
    dad8:	e5a2      	b.n	d620 <LORAWAN_TxDone+0x40>
    dada:	46c0      	nop			; (mov r8, r8)
    dadc:	00009141 	.word	0x00009141
    dae0:	00009b55 	.word	0x00009b55
    dae4:	0000c7f5 	.word	0x0000c7f5
    dae8:	0000de41 	.word	0x0000de41
    daec:	00009269 	.word	0x00009269
    daf0:	00009afd 	.word	0x00009afd
    daf4:	200017d4 	.word	0x200017d4
    daf8:	20001842 	.word	0x20001842
    dafc:	0000f7a1 	.word	0x0000f7a1
    db00:	20001acc 	.word	0x20001acc
    db04:	200019b8 	.word	0x200019b8
    db08:	200018d4 	.word	0x200018d4

0000db0c <radioCallback>:
    db0c:	4b10      	ldr	r3, [pc, #64]	; (db50 <radioCallback+0x44>)
    db0e:	b510      	push	{r4, lr}
    db10:	7018      	strb	r0, [r3, #0]
    db12:	3801      	subs	r0, #1
    db14:	b2c0      	uxtb	r0, r0
    db16:	000c      	movs	r4, r1
    db18:	281f      	cmp	r0, #31
    db1a:	d809      	bhi.n	db30 <radioCallback+0x24>
    db1c:	2301      	movs	r3, #1
    db1e:	4083      	lsls	r3, r0
    db20:	4a0c      	ldr	r2, [pc, #48]	; (db54 <radioCallback+0x48>)
    db22:	4213      	tst	r3, r2
    db24:	d109      	bne.n	db3a <radioCallback+0x2e>
    db26:	220a      	movs	r2, #10
    db28:	4213      	tst	r3, r2
    db2a:	d102      	bne.n	db32 <radioCallback+0x26>
    db2c:	2b00      	cmp	r3, #0
    db2e:	db08      	blt.n	db42 <radioCallback+0x36>
    db30:	bd10      	pop	{r4, pc}
    db32:	0008      	movs	r0, r1
    db34:	4b08      	ldr	r3, [pc, #32]	; (db58 <radioCallback+0x4c>)
    db36:	4798      	blx	r3
    db38:	e7fa      	b.n	db30 <radioCallback+0x24>
    db3a:	2002      	movs	r0, #2
    db3c:	4b07      	ldr	r3, [pc, #28]	; (db5c <radioCallback+0x50>)
    db3e:	4798      	blx	r3
    db40:	e7f6      	b.n	db30 <radioCallback+0x24>
    db42:	4b07      	ldr	r3, [pc, #28]	; (db60 <radioCallback+0x54>)
    db44:	681b      	ldr	r3, [r3, #0]
    db46:	2b00      	cmp	r3, #0
    db48:	d0f2      	beq.n	db30 <radioCallback+0x24>
    db4a:	4798      	blx	r3
    db4c:	6020      	str	r0, [r4, #0]
    db4e:	e7ef      	b.n	db30 <radioCallback+0x24>
    db50:	200019b8 	.word	0x200019b8
    db54:	00008081 	.word	0x00008081
    db58:	0000d5e1 	.word	0x0000d5e1
    db5c:	0000fe79 	.word	0x0000fe79
    db60:	20001ac8 	.word	0x20001ac8

0000db64 <LorawanCheckAndDoRetryOnTimeout>:
    db64:	b513      	push	{r0, r1, r4, lr}
    db66:	4c34      	ldr	r4, [pc, #208]	; (dc38 <LorawanCheckAndDoRetryOnTimeout+0xd4>)
    db68:	0023      	movs	r3, r4
    db6a:	338c      	adds	r3, #140	; 0x8c
    db6c:	781b      	ldrb	r3, [r3, #0]
    db6e:	0022      	movs	r2, r4
    db70:	07db      	lsls	r3, r3, #31
    db72:	d54d      	bpl.n	dc10 <LorawanCheckAndDoRetryOnTimeout+0xac>
    db74:	0023      	movs	r3, r4
    db76:	32dc      	adds	r2, #220	; 0xdc
    db78:	33da      	adds	r3, #218	; 0xda
    db7a:	7812      	ldrb	r2, [r2, #0]
    db7c:	781b      	ldrb	r3, [r3, #0]
    db7e:	429a      	cmp	r2, r3
    db80:	d838      	bhi.n	dbf4 <LorawanCheckAndDoRetryOnTimeout+0x90>
    db82:	23ef      	movs	r3, #239	; 0xef
    db84:	005b      	lsls	r3, r3, #1
    db86:	5ce3      	ldrb	r3, [r4, r3]
    db88:	2b00      	cmp	r3, #0
    db8a:	d033      	beq.n	dbf4 <LorawanCheckAndDoRetryOnTimeout+0x90>
    db8c:	0023      	movs	r3, r4
    db8e:	33f4      	adds	r3, #244	; 0xf4
    db90:	781b      	ldrb	r3, [r3, #0]
    db92:	2b01      	cmp	r3, #1
    db94:	d11a      	bne.n	dbcc <LorawanCheckAndDoRetryOnTimeout+0x68>
    db96:	0021      	movs	r1, r4
    db98:	220e      	movs	r2, #14
    db9a:	317c      	adds	r1, #124	; 0x7c
    db9c:	780b      	ldrb	r3, [r1, #0]
    db9e:	4393      	bics	r3, r2
    dba0:	001a      	movs	r2, r3
    dba2:	230c      	movs	r3, #12
    dba4:	4313      	orrs	r3, r2
    dba6:	700b      	strb	r3, [r1, #0]
    dba8:	0023      	movs	r3, r4
    dbaa:	33d2      	adds	r3, #210	; 0xd2
    dbac:	8819      	ldrh	r1, [r3, #0]
    dbae:	23e0      	movs	r3, #224	; 0xe0
    dbb0:	33ff      	adds	r3, #255	; 0xff
    dbb2:	5ce3      	ldrb	r3, [r4, r3]
    dbb4:	2200      	movs	r2, #0
    dbb6:	1acb      	subs	r3, r1, r3
    dbb8:	21fa      	movs	r1, #250	; 0xfa
    dbba:	34e8      	adds	r4, #232	; 0xe8
    dbbc:	0089      	lsls	r1, r1, #2
    dbbe:	7820      	ldrb	r0, [r4, #0]
    dbc0:	4359      	muls	r1, r3
    dbc2:	9200      	str	r2, [sp, #0]
    dbc4:	4b1d      	ldr	r3, [pc, #116]	; (dc3c <LorawanCheckAndDoRetryOnTimeout+0xd8>)
    dbc6:	4c1e      	ldr	r4, [pc, #120]	; (dc40 <LorawanCheckAndDoRetryOnTimeout+0xdc>)
    dbc8:	47a0      	blx	r4
    dbca:	bd13      	pop	{r0, r1, r4, pc}
    dbcc:	2b04      	cmp	r3, #4
    dbce:	d1fc      	bne.n	dbca <LorawanCheckAndDoRetryOnTimeout+0x66>
    dbd0:	4b1c      	ldr	r3, [pc, #112]	; (dc44 <LorawanCheckAndDoRetryOnTimeout+0xe0>)
    dbd2:	4798      	blx	r3
    dbd4:	34c6      	adds	r4, #198	; 0xc6
    dbd6:	300d      	adds	r0, #13
    dbd8:	8823      	ldrh	r3, [r4, #0]
    dbda:	b280      	uxth	r0, r0
    dbdc:	4283      	cmp	r3, r0
    dbde:	d802      	bhi.n	dbe6 <LorawanCheckAndDoRetryOnTimeout+0x82>
    dbe0:	4b19      	ldr	r3, [pc, #100]	; (dc48 <LorawanCheckAndDoRetryOnTimeout+0xe4>)
    dbe2:	4798      	blx	r3
    dbe4:	e7f1      	b.n	dbca <LorawanCheckAndDoRetryOnTimeout+0x66>
    dbe6:	200e      	movs	r0, #14
    dbe8:	4b18      	ldr	r3, [pc, #96]	; (dc4c <LorawanCheckAndDoRetryOnTimeout+0xe8>)
    dbea:	4798      	blx	r3
    dbec:	4b18      	ldr	r3, [pc, #96]	; (dc50 <LorawanCheckAndDoRetryOnTimeout+0xec>)
    dbee:	4798      	blx	r3
    dbf0:	4b18      	ldr	r3, [pc, #96]	; (dc54 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
    dbf2:	e7f6      	b.n	dbe2 <LorawanCheckAndDoRetryOnTimeout+0x7e>
    dbf4:	2012      	movs	r0, #18
    dbf6:	4b15      	ldr	r3, [pc, #84]	; (dc4c <LorawanCheckAndDoRetryOnTimeout+0xe8>)
    dbf8:	4798      	blx	r3
    dbfa:	4b15      	ldr	r3, [pc, #84]	; (dc50 <LorawanCheckAndDoRetryOnTimeout+0xec>)
    dbfc:	4798      	blx	r3
    dbfe:	34f4      	adds	r4, #244	; 0xf4
    dc00:	4b14      	ldr	r3, [pc, #80]	; (dc54 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
    dc02:	4798      	blx	r3
    dc04:	7823      	ldrb	r3, [r4, #0]
    dc06:	2b04      	cmp	r3, #4
    dc08:	d1df      	bne.n	dbca <LorawanCheckAndDoRetryOnTimeout+0x66>
    dc0a:	4b13      	ldr	r3, [pc, #76]	; (dc58 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
    dc0c:	4798      	blx	r3
    dc0e:	e7dc      	b.n	dbca <LorawanCheckAndDoRetryOnTimeout+0x66>
    dc10:	0023      	movs	r3, r4
    dc12:	32db      	adds	r2, #219	; 0xdb
    dc14:	33d9      	adds	r3, #217	; 0xd9
    dc16:	7812      	ldrb	r2, [r2, #0]
    dc18:	781b      	ldrb	r3, [r3, #0]
    dc1a:	429a      	cmp	r2, r3
    dc1c:	d804      	bhi.n	dc28 <LorawanCheckAndDoRetryOnTimeout+0xc4>
    dc1e:	23ef      	movs	r3, #239	; 0xef
    dc20:	005b      	lsls	r3, r3, #1
    dc22:	5ce3      	ldrb	r3, [r4, r3]
    dc24:	2b00      	cmp	r3, #0
    dc26:	d1db      	bne.n	dbe0 <LorawanCheckAndDoRetryOnTimeout+0x7c>
    dc28:	4b0c      	ldr	r3, [pc, #48]	; (dc5c <LorawanCheckAndDoRetryOnTimeout+0xf8>)
    dc2a:	4798      	blx	r3
    dc2c:	4b09      	ldr	r3, [pc, #36]	; (dc54 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
    dc2e:	4798      	blx	r3
    dc30:	2008      	movs	r0, #8
    dc32:	4b06      	ldr	r3, [pc, #24]	; (dc4c <LorawanCheckAndDoRetryOnTimeout+0xe8>)
    dc34:	4798      	blx	r3
    dc36:	e7c8      	b.n	dbca <LorawanCheckAndDoRetryOnTimeout+0x66>
    dc38:	200017d4 	.word	0x200017d4
    dc3c:	0000dc61 	.word	0x0000dc61
    dc40:	00009b55 	.word	0x00009b55
    dc44:	0000b9b9 	.word	0x0000b9b9
    dc48:	0000c8d9 	.word	0x0000c8d9
    dc4c:	0000cddd 	.word	0x0000cddd
    dc50:	0000c2b5 	.word	0x0000c2b5
    dc54:	0000b8cd 	.word	0x0000b8cd
    dc58:	00010921 	.word	0x00010921
    dc5c:	0000c2e5 	.word	0x0000c2e5

0000dc60 <AckRetransmissionCallback>:
    dc60:	b510      	push	{r4, lr}
    dc62:	4c1c      	ldr	r4, [pc, #112]	; (dcd4 <AckRetransmissionCallback+0x74>)
    dc64:	0023      	movs	r3, r4
    dc66:	337c      	adds	r3, #124	; 0x7c
    dc68:	781b      	ldrb	r3, [r3, #0]
    dc6a:	2b7f      	cmp	r3, #127	; 0x7f
    dc6c:	d82e      	bhi.n	dccc <AckRetransmissionCallback+0x6c>
    dc6e:	0023      	movs	r3, r4
    dc70:	33f4      	adds	r3, #244	; 0xf4
    dc72:	781b      	ldrb	r3, [r3, #0]
    dc74:	2b04      	cmp	r3, #4
    dc76:	d102      	bne.n	dc7e <AckRetransmissionCallback+0x1e>
    dc78:	4b17      	ldr	r3, [pc, #92]	; (dcd8 <AckRetransmissionCallback+0x78>)
    dc7a:	4798      	blx	r3
    dc7c:	e01f      	b.n	dcbe <AckRetransmissionCallback+0x5e>
    dc7e:	2b01      	cmp	r3, #1
    dc80:	d11d      	bne.n	dcbe <AckRetransmissionCallback+0x5e>
    dc82:	0022      	movs	r2, r4
    dc84:	0023      	movs	r3, r4
    dc86:	32dc      	adds	r2, #220	; 0xdc
    dc88:	33da      	adds	r3, #218	; 0xda
    dc8a:	7812      	ldrb	r2, [r2, #0]
    dc8c:	781b      	ldrb	r3, [r3, #0]
    dc8e:	429a      	cmp	r2, r3
    dc90:	d816      	bhi.n	dcc0 <AckRetransmissionCallback+0x60>
    dc92:	23ef      	movs	r3, #239	; 0xef
    dc94:	005b      	lsls	r3, r3, #1
    dc96:	5ce3      	ldrb	r3, [r4, r3]
    dc98:	2b00      	cmp	r3, #0
    dc9a:	d011      	beq.n	dcc0 <AckRetransmissionCallback+0x60>
    dc9c:	4b0f      	ldr	r3, [pc, #60]	; (dcdc <AckRetransmissionCallback+0x7c>)
    dc9e:	4798      	blx	r3
    dca0:	34c6      	adds	r4, #198	; 0xc6
    dca2:	300d      	adds	r0, #13
    dca4:	8823      	ldrh	r3, [r4, #0]
    dca6:	b280      	uxth	r0, r0
    dca8:	4283      	cmp	r3, r0
    dcaa:	d801      	bhi.n	dcb0 <AckRetransmissionCallback+0x50>
    dcac:	4b0c      	ldr	r3, [pc, #48]	; (dce0 <AckRetransmissionCallback+0x80>)
    dcae:	e7e4      	b.n	dc7a <AckRetransmissionCallback+0x1a>
    dcb0:	4b0c      	ldr	r3, [pc, #48]	; (dce4 <AckRetransmissionCallback+0x84>)
    dcb2:	4798      	blx	r3
    dcb4:	4b0c      	ldr	r3, [pc, #48]	; (dce8 <AckRetransmissionCallback+0x88>)
    dcb6:	4798      	blx	r3
    dcb8:	200e      	movs	r0, #14
    dcba:	4b0c      	ldr	r3, [pc, #48]	; (dcec <AckRetransmissionCallback+0x8c>)
    dcbc:	4798      	blx	r3
    dcbe:	bd10      	pop	{r4, pc}
    dcc0:	4b08      	ldr	r3, [pc, #32]	; (dce4 <AckRetransmissionCallback+0x84>)
    dcc2:	4798      	blx	r3
    dcc4:	4b08      	ldr	r3, [pc, #32]	; (dce8 <AckRetransmissionCallback+0x88>)
    dcc6:	4798      	blx	r3
    dcc8:	2012      	movs	r0, #18
    dcca:	e7f6      	b.n	dcba <AckRetransmissionCallback+0x5a>
    dccc:	4b05      	ldr	r3, [pc, #20]	; (dce4 <AckRetransmissionCallback+0x84>)
    dcce:	4798      	blx	r3
    dcd0:	4b05      	ldr	r3, [pc, #20]	; (dce8 <AckRetransmissionCallback+0x88>)
    dcd2:	e7d2      	b.n	dc7a <AckRetransmissionCallback+0x1a>
    dcd4:	200017d4 	.word	0x200017d4
    dcd8:	0000db65 	.word	0x0000db65
    dcdc:	0000b9b9 	.word	0x0000b9b9
    dce0:	0000c8d9 	.word	0x0000c8d9
    dce4:	0000c2b5 	.word	0x0000c2b5
    dce8:	0000b8cd 	.word	0x0000b8cd
    dcec:	0000cddd 	.word	0x0000cddd

0000dcf0 <LORAWAN_RxTimeout>:
    dcf0:	4b22      	ldr	r3, [pc, #136]	; (dd7c <LORAWAN_RxTimeout+0x8c>)
    dcf2:	b510      	push	{r4, lr}
    dcf4:	001a      	movs	r2, r3
    dcf6:	327c      	adds	r2, #124	; 0x7c
    dcf8:	7812      	ldrb	r2, [r2, #0]
    dcfa:	b251      	sxtb	r1, r2
    dcfc:	2900      	cmp	r1, #0
    dcfe:	db23      	blt.n	dd48 <LORAWAN_RxTimeout+0x58>
    dd00:	0019      	movs	r1, r3
    dd02:	31f4      	adds	r1, #244	; 0xf4
    dd04:	7809      	ldrb	r1, [r1, #0]
    dd06:	2904      	cmp	r1, #4
    dd08:	d104      	bne.n	dd14 <LORAWAN_RxTimeout+0x24>
    dd0a:	07d1      	lsls	r1, r2, #31
    dd0c:	d502      	bpl.n	dd14 <LORAWAN_RxTimeout+0x24>
    dd0e:	4b1c      	ldr	r3, [pc, #112]	; (dd80 <LORAWAN_RxTimeout+0x90>)
    dd10:	4798      	blx	r3
    dd12:	bd10      	pop	{r4, pc}
    dd14:	210e      	movs	r1, #14
    dd16:	0010      	movs	r0, r2
    dd18:	4008      	ands	r0, r1
    dd1a:	2806      	cmp	r0, #6
    dd1c:	d107      	bne.n	dd2e <LORAWAN_RxTimeout+0x3e>
    dd1e:	337c      	adds	r3, #124	; 0x7c
    dd20:	781a      	ldrb	r2, [r3, #0]
    dd22:	438a      	bics	r2, r1
    dd24:	0011      	movs	r1, r2
    dd26:	2208      	movs	r2, #8
    dd28:	430a      	orrs	r2, r1
    dd2a:	701a      	strb	r2, [r3, #0]
    dd2c:	e7f1      	b.n	dd12 <LORAWAN_RxTimeout+0x22>
    dd2e:	2004      	movs	r0, #4
    dd30:	338c      	adds	r3, #140	; 0x8c
    dd32:	781b      	ldrb	r3, [r3, #0]
    dd34:	4203      	tst	r3, r0
    dd36:	d002      	beq.n	dd3e <LORAWAN_RxTimeout+0x4e>
    dd38:	4b12      	ldr	r3, [pc, #72]	; (dd84 <LORAWAN_RxTimeout+0x94>)
    dd3a:	4798      	blx	r3
    dd3c:	e7e9      	b.n	dd12 <LORAWAN_RxTimeout+0x22>
    dd3e:	07d3      	lsls	r3, r2, #31
    dd40:	d5e7      	bpl.n	dd12 <LORAWAN_RxTimeout+0x22>
    dd42:	4b11      	ldr	r3, [pc, #68]	; (dd88 <LORAWAN_RxTimeout+0x98>)
    dd44:	4798      	blx	r3
    dd46:	e7e4      	b.n	dd12 <LORAWAN_RxTimeout+0x22>
    dd48:	4810      	ldr	r0, [pc, #64]	; (dd8c <LORAWAN_RxTimeout+0x9c>)
    dd4a:	7841      	ldrb	r1, [r0, #1]
    dd4c:	7802      	ldrb	r2, [r0, #0]
    dd4e:	0209      	lsls	r1, r1, #8
    dd50:	4311      	orrs	r1, r2
    dd52:	7882      	ldrb	r2, [r0, #2]
    dd54:	0412      	lsls	r2, r2, #16
    dd56:	4311      	orrs	r1, r2
    dd58:	78c2      	ldrb	r2, [r0, #3]
    dd5a:	0612      	lsls	r2, r2, #24
    dd5c:	430a      	orrs	r2, r1
    dd5e:	d0d8      	beq.n	dd12 <LORAWAN_RxTimeout+0x22>
    dd60:	21ea      	movs	r1, #234	; 0xea
    dd62:	2001      	movs	r0, #1
    dd64:	0049      	lsls	r1, r1, #1
    dd66:	5458      	strb	r0, [r3, r1]
    dd68:	0019      	movs	r1, r3
    dd6a:	2404      	movs	r4, #4
    dd6c:	31ff      	adds	r1, #255	; 0xff
    dd6e:	33fc      	adds	r3, #252	; 0xfc
    dd70:	704c      	strb	r4, [r1, #1]
    dd72:	7148      	strb	r0, [r1, #5]
    dd74:	4906      	ldr	r1, [pc, #24]	; (dd90 <LORAWAN_RxTimeout+0xa0>)
    dd76:	6818      	ldr	r0, [r3, #0]
    dd78:	4790      	blx	r2
    dd7a:	e7ca      	b.n	dd12 <LORAWAN_RxTimeout+0x22>
    dd7c:	200017d4 	.word	0x200017d4
    dd80:	0000f825 	.word	0x0000f825
    dd84:	0000c309 	.word	0x0000c309
    dd88:	0000db65 	.word	0x0000db65
    dd8c:	20001acc 	.word	0x20001acc
    dd90:	200018d4 	.word	0x200018d4

0000dd94 <LorawanConfigureRadioForRX2>:
    dd94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    dd96:	466b      	mov	r3, sp
    dd98:	4c21      	ldr	r4, [pc, #132]	; (de20 <LorawanConfigureRadioForRX2+0x8c>)
    dd9a:	1cdd      	adds	r5, r3, #3
    dd9c:	0023      	movs	r3, r4
    dd9e:	2100      	movs	r1, #0
    dda0:	338c      	adds	r3, #140	; 0x8c
    dda2:	781b      	ldrb	r3, [r3, #0]
    dda4:	0007      	movs	r7, r0
    dda6:	7029      	strb	r1, [r5, #0]
    dda8:	075b      	lsls	r3, r3, #29
    ddaa:	d52c      	bpl.n	de06 <LorawanConfigureRadioForRX2+0x72>
    ddac:	002a      	movs	r2, r5
    ddae:	2009      	movs	r0, #9
    ddb0:	4b1c      	ldr	r3, [pc, #112]	; (de24 <LorawanConfigureRadioForRX2+0x90>)
    ddb2:	4798      	blx	r3
    ddb4:	0022      	movs	r2, r4
    ddb6:	0023      	movs	r3, r4
    ddb8:	326c      	adds	r2, #108	; 0x6c
    ddba:	8811      	ldrh	r1, [r2, #0]
    ddbc:	336a      	adds	r3, #106	; 0x6a
    ddbe:	881b      	ldrh	r3, [r3, #0]
    ddc0:	0409      	lsls	r1, r1, #16
    ddc2:	4319      	orrs	r1, r3
    ddc4:	7828      	ldrb	r0, [r5, #0]
    ddc6:	4b18      	ldr	r3, [pc, #96]	; (de28 <LorawanConfigureRadioForRX2+0x94>)
    ddc8:	4798      	blx	r3
    ddca:	2300      	movs	r3, #0
    ddcc:	0022      	movs	r2, r4
    ddce:	ae01      	add	r6, sp, #4
    ddd0:	7033      	strb	r3, [r6, #0]
    ddd2:	32f4      	adds	r2, #244	; 0xf4
    ddd4:	7812      	ldrb	r2, [r2, #0]
    ddd6:	2a04      	cmp	r2, #4
    ddd8:	d11a      	bne.n	de10 <LorawanConfigureRadioForRX2+0x7c>
    ddda:	347c      	adds	r4, #124	; 0x7c
    dddc:	7822      	ldrb	r2, [r4, #0]
    ddde:	07d2      	lsls	r2, r2, #31
    dde0:	d516      	bpl.n	de10 <LorawanConfigureRadioForRX2+0x7c>
    dde2:	8073      	strh	r3, [r6, #2]
    dde4:	0030      	movs	r0, r6
    dde6:	4b11      	ldr	r3, [pc, #68]	; (de2c <LorawanConfigureRadioForRX2+0x98>)
    dde8:	4798      	blx	r3
    ddea:	1e04      	subs	r4, r0, #0
    ddec:	d00a      	beq.n	de04 <LorawanConfigureRadioForRX2+0x70>
    ddee:	4b10      	ldr	r3, [pc, #64]	; (de30 <LorawanConfigureRadioForRX2+0x9c>)
    ddf0:	4798      	blx	r3
    ddf2:	4b10      	ldr	r3, [pc, #64]	; (de34 <LorawanConfigureRadioForRX2+0xa0>)
    ddf4:	4798      	blx	r3
    ddf6:	4b10      	ldr	r3, [pc, #64]	; (de38 <LorawanConfigureRadioForRX2+0xa4>)
    ddf8:	4798      	blx	r3
    ddfa:	2f00      	cmp	r7, #0
    ddfc:	d002      	beq.n	de04 <LorawanConfigureRadioForRX2+0x70>
    ddfe:	0020      	movs	r0, r4
    de00:	4b0e      	ldr	r3, [pc, #56]	; (de3c <LorawanConfigureRadioForRX2+0xa8>)
    de02:	4798      	blx	r3
    de04:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    de06:	0023      	movs	r3, r4
    de08:	336e      	adds	r3, #110	; 0x6e
    de0a:	781b      	ldrb	r3, [r3, #0]
    de0c:	702b      	strb	r3, [r5, #0]
    de0e:	e7d1      	b.n	ddb4 <LorawanConfigureRadioForRX2+0x20>
    de10:	466b      	mov	r3, sp
    de12:	0029      	movs	r1, r5
    de14:	1d9a      	adds	r2, r3, #6
    de16:	2003      	movs	r0, #3
    de18:	4b02      	ldr	r3, [pc, #8]	; (de24 <LorawanConfigureRadioForRX2+0x90>)
    de1a:	4798      	blx	r3
    de1c:	e7e2      	b.n	dde4 <LorawanConfigureRadioForRX2+0x50>
    de1e:	46c0      	nop			; (mov r8, r8)
    de20:	200017d4 	.word	0x200017d4
    de24:	00009141 	.word	0x00009141
    de28:	0000c789 	.word	0x0000c789
    de2c:	00011211 	.word	0x00011211
    de30:	0000c2b5 	.word	0x0000c2b5
    de34:	0000c2e5 	.word	0x0000c2e5
    de38:	0000b8cd 	.word	0x0000b8cd
    de3c:	0000cddd 	.word	0x0000cddd

0000de40 <LorawanReceiveWindow2Callback>:
    de40:	b570      	push	{r4, r5, r6, lr}
    de42:	4c16      	ldr	r4, [pc, #88]	; (de9c <LorawanReceiveWindow2Callback+0x5c>)
    de44:	0025      	movs	r5, r4
    de46:	357c      	adds	r5, #124	; 0x7c
    de48:	782b      	ldrb	r3, [r5, #0]
    de4a:	2b7f      	cmp	r3, #127	; 0x7f
    de4c:	d811      	bhi.n	de72 <LorawanReceiveWindow2Callback+0x32>
    de4e:	4b14      	ldr	r3, [pc, #80]	; (dea0 <LorawanReceiveWindow2Callback+0x60>)
    de50:	4798      	blx	r3
    de52:	2801      	cmp	r0, #1
    de54:	d109      	bne.n	de6a <LorawanReceiveWindow2Callback+0x2a>
    de56:	220e      	movs	r2, #14
    de58:	782b      	ldrb	r3, [r5, #0]
    de5a:	4393      	bics	r3, r2
    de5c:	001a      	movs	r2, r3
    de5e:	230a      	movs	r3, #10
    de60:	4313      	orrs	r3, r2
    de62:	702b      	strb	r3, [r5, #0]
    de64:	4b0f      	ldr	r3, [pc, #60]	; (dea4 <LorawanReceiveWindow2Callback+0x64>)
    de66:	4798      	blx	r3
    de68:	bd70      	pop	{r4, r5, r6, pc}
    de6a:	2301      	movs	r3, #1
    de6c:	34f0      	adds	r4, #240	; 0xf0
    de6e:	7023      	strb	r3, [r4, #0]
    de70:	e7fa      	b.n	de68 <LorawanReceiveWindow2Callback+0x28>
    de72:	2104      	movs	r1, #4
    de74:	348c      	adds	r4, #140	; 0x8c
    de76:	7822      	ldrb	r2, [r4, #0]
    de78:	420a      	tst	r2, r1
    de7a:	d007      	beq.n	de8c <LorawanReceiveWindow2Callback+0x4c>
    de7c:	2001      	movs	r0, #1
    de7e:	4383      	bics	r3, r0
    de80:	438a      	bics	r2, r1
    de82:	702b      	strb	r3, [r5, #0]
    de84:	3107      	adds	r1, #7
    de86:	4b08      	ldr	r3, [pc, #32]	; (dea8 <LorawanReceiveWindow2Callback+0x68>)
    de88:	7022      	strb	r2, [r4, #0]
    de8a:	4798      	blx	r3
    de8c:	4b07      	ldr	r3, [pc, #28]	; (deac <LorawanReceiveWindow2Callback+0x6c>)
    de8e:	4798      	blx	r3
    de90:	4b07      	ldr	r3, [pc, #28]	; (deb0 <LorawanReceiveWindow2Callback+0x70>)
    de92:	4798      	blx	r3
    de94:	4b07      	ldr	r3, [pc, #28]	; (deb4 <LorawanReceiveWindow2Callback+0x74>)
    de96:	4798      	blx	r3
    de98:	e7e6      	b.n	de68 <LorawanReceiveWindow2Callback+0x28>
    de9a:	46c0      	nop			; (mov r8, r8)
    de9c:	200017d4 	.word	0x200017d4
    dea0:	00010921 	.word	0x00010921
    dea4:	0000dd95 	.word	0x0000dd95
    dea8:	00009729 	.word	0x00009729
    deac:	0000c2e5 	.word	0x0000c2e5
    deb0:	0000c2b5 	.word	0x0000c2b5
    deb4:	0000b8cd 	.word	0x0000b8cd

0000deb8 <SetReceptionNotOkState>:
    deb8:	22ea      	movs	r2, #234	; 0xea
    deba:	2101      	movs	r1, #1
    debc:	4b19      	ldr	r3, [pc, #100]	; (df24 <SetReceptionNotOkState+0x6c>)
    debe:	0052      	lsls	r2, r2, #1
    dec0:	b510      	push	{r4, lr}
    dec2:	5499      	strb	r1, [r3, r2]
    dec4:	001a      	movs	r2, r3
    dec6:	0019      	movs	r1, r3
    dec8:	32f4      	adds	r2, #244	; 0xf4
    deca:	7812      	ldrb	r2, [r2, #0]
    decc:	317c      	adds	r1, #124	; 0x7c
    dece:	200e      	movs	r0, #14
    ded0:	2a01      	cmp	r2, #1
    ded2:	d11d      	bne.n	df10 <SetReceptionNotOkState+0x58>
    ded4:	780a      	ldrb	r2, [r1, #0]
    ded6:	4002      	ands	r2, r0
    ded8:	2a0a      	cmp	r2, #10
    deda:	d006      	beq.n	deea <SetReceptionNotOkState+0x32>
    dedc:	2a06      	cmp	r2, #6
    dede:	d113      	bne.n	df08 <SetReceptionNotOkState+0x50>
    dee0:	001a      	movs	r2, r3
    dee2:	32f0      	adds	r2, #240	; 0xf0
    dee4:	7812      	ldrb	r2, [r2, #0]
    dee6:	2a00      	cmp	r2, #0
    dee8:	d00e      	beq.n	df08 <SetReceptionNotOkState+0x50>
    deea:	0019      	movs	r1, r3
    deec:	2001      	movs	r0, #1
    deee:	318c      	adds	r1, #140	; 0x8c
    def0:	780a      	ldrb	r2, [r1, #0]
    def2:	240e      	movs	r4, #14
    def4:	4382      	bics	r2, r0
    def6:	700a      	strb	r2, [r1, #0]
    def8:	001a      	movs	r2, r3
    defa:	327c      	adds	r2, #124	; 0x7c
    defc:	7811      	ldrb	r1, [r2, #0]
    defe:	43a1      	bics	r1, r4
    df00:	7011      	strb	r1, [r2, #0]
    df02:	7851      	ldrb	r1, [r2, #1]
    df04:	4381      	bics	r1, r0
    df06:	7051      	strb	r1, [r2, #1]
    df08:	2200      	movs	r2, #0
    df0a:	33f0      	adds	r3, #240	; 0xf0
    df0c:	701a      	strb	r2, [r3, #0]
    df0e:	bd10      	pop	{r4, pc}
    df10:	230a      	movs	r3, #10
    df12:	780a      	ldrb	r2, [r1, #0]
    df14:	4382      	bics	r2, r0
    df16:	4313      	orrs	r3, r2
    df18:	700b      	strb	r3, [r1, #0]
    df1a:	2000      	movs	r0, #0
    df1c:	4b02      	ldr	r3, [pc, #8]	; (df28 <SetReceptionNotOkState+0x70>)
    df1e:	4798      	blx	r3
    df20:	e7f5      	b.n	df0e <SetReceptionNotOkState+0x56>
    df22:	46c0      	nop			; (mov r8, r8)
    df24:	200017d4 	.word	0x200017d4
    df28:	0000dd95 	.word	0x0000dd95

0000df2c <UpdateCurrentDataRateAfterDataRangeChanges>:
    df2c:	4b09      	ldr	r3, [pc, #36]	; (df54 <UpdateCurrentDataRateAfterDataRangeChanges+0x28>)
    df2e:	001a      	movs	r2, r3
    df30:	32eb      	adds	r2, #235	; 0xeb
    df32:	7811      	ldrb	r1, [r2, #0]
    df34:	001a      	movs	r2, r3
    df36:	32df      	adds	r2, #223	; 0xdf
    df38:	7810      	ldrb	r0, [r2, #0]
    df3a:	4288      	cmp	r0, r1
    df3c:	d900      	bls.n	df40 <UpdateCurrentDataRateAfterDataRangeChanges+0x14>
    df3e:	7011      	strb	r1, [r2, #0]
    df40:	001a      	movs	r2, r3
    df42:	33df      	adds	r3, #223	; 0xdf
    df44:	32ea      	adds	r2, #234	; 0xea
    df46:	7812      	ldrb	r2, [r2, #0]
    df48:	7819      	ldrb	r1, [r3, #0]
    df4a:	4291      	cmp	r1, r2
    df4c:	d200      	bcs.n	df50 <UpdateCurrentDataRateAfterDataRangeChanges+0x24>
    df4e:	701a      	strb	r2, [r3, #0]
    df50:	4770      	bx	lr
    df52:	46c0      	nop			; (mov r8, r8)
    df54:	200017d4 	.word	0x200017d4

0000df58 <ExecuteNewChannel>:
    df58:	b5f0      	push	{r4, r5, r6, r7, lr}
    df5a:	b08d      	sub	sp, #52	; 0x34
    df5c:	7807      	ldrb	r7, [r0, #0]
    df5e:	ab02      	add	r3, sp, #8
    df60:	0006      	movs	r6, r0
    df62:	71df      	strb	r7, [r3, #7]
    df64:	1c41      	adds	r1, r0, #1
    df66:	4b59      	ldr	r3, [pc, #356]	; (e0cc <ExecuteNewChannel+0x174>)
    df68:	2204      	movs	r2, #4
    df6a:	a808      	add	r0, sp, #32
    df6c:	4798      	blx	r3
    df6e:	9b08      	ldr	r3, [sp, #32]
    df70:	4c57      	ldr	r4, [pc, #348]	; (e0d0 <ExecuteNewChannel+0x178>)
    df72:	021d      	lsls	r5, r3, #8
    df74:	2364      	movs	r3, #100	; 0x64
    df76:	0a2d      	lsrs	r5, r5, #8
    df78:	435d      	muls	r5, r3
    df7a:	1d73      	adds	r3, r6, #5
    df7c:	9301      	str	r3, [sp, #4]
    df7e:	0023      	movs	r3, r4
    df80:	9508      	str	r5, [sp, #32]
    df82:	33f6      	adds	r3, #246	; 0xf6
    df84:	781b      	ldrb	r3, [r3, #0]
    df86:	3b02      	subs	r3, #2
    df88:	2b01      	cmp	r3, #1
    df8a:	d800      	bhi.n	df8e <ExecuteNewChannel+0x36>
    df8c:	e092      	b.n	e0b4 <ExecuteNewChannel+0x15c>
    df8e:	7933      	ldrb	r3, [r6, #4]
    df90:	a904      	add	r1, sp, #16
    df92:	9300      	str	r3, [sp, #0]
    df94:	2300      	movs	r3, #0
    df96:	2015      	movs	r0, #21
    df98:	4e4e      	ldr	r6, [pc, #312]	; (e0d4 <ExecuteNewChannel+0x17c>)
    df9a:	700f      	strb	r7, [r1, #0]
    df9c:	704b      	strb	r3, [r1, #1]
    df9e:	47b0      	blx	r6
    dfa0:	2808      	cmp	r0, #8
    dfa2:	d12b      	bne.n	dffc <ExecuteNewChannel+0xa4>
    dfa4:	466a      	mov	r2, sp
    dfa6:	ab02      	add	r3, sp, #8
    dfa8:	79db      	ldrb	r3, [r3, #7]
    dfaa:	7812      	ldrb	r2, [r2, #0]
    dfac:	af06      	add	r7, sp, #24
    dfae:	a90a      	add	r1, sp, #40	; 0x28
    dfb0:	3806      	subs	r0, #6
    dfb2:	703b      	strb	r3, [r7, #0]
    dfb4:	707a      	strb	r2, [r7, #1]
    dfb6:	710b      	strb	r3, [r1, #4]
    dfb8:	950a      	str	r5, [sp, #40]	; 0x28
    dfba:	47b0      	blx	r6
    dfbc:	2808      	cmp	r0, #8
    dfbe:	d001      	beq.n	dfc4 <ExecuteNewChannel+0x6c>
    dfc0:	2d00      	cmp	r5, #0
    dfc2:	d10b      	bne.n	dfdc <ExecuteNewChannel+0x84>
    dfc4:	0023      	movs	r3, r4
    dfc6:	33d8      	adds	r3, #216	; 0xd8
    dfc8:	781a      	ldrb	r2, [r3, #0]
    dfca:	2303      	movs	r3, #3
    dfcc:	4353      	muls	r3, r2
    dfce:	2280      	movs	r2, #128	; 0x80
    dfd0:	18e3      	adds	r3, r4, r3
    dfd2:	3390      	adds	r3, #144	; 0x90
    dfd4:	7899      	ldrb	r1, [r3, #2]
    dfd6:	4252      	negs	r2, r2
    dfd8:	430a      	orrs	r2, r1
    dfda:	709a      	strb	r2, [r3, #2]
    dfdc:	0039      	movs	r1, r7
    dfde:	2012      	movs	r0, #18
    dfe0:	47b0      	blx	r6
    dfe2:	2808      	cmp	r0, #8
    dfe4:	d10a      	bne.n	dffc <ExecuteNewChannel+0xa4>
    dfe6:	0023      	movs	r3, r4
    dfe8:	33d8      	adds	r3, #216	; 0xd8
    dfea:	781a      	ldrb	r2, [r3, #0]
    dfec:	2303      	movs	r3, #3
    dfee:	4353      	muls	r3, r2
    dff0:	2240      	movs	r2, #64	; 0x40
    dff2:	18e3      	adds	r3, r4, r3
    dff4:	3390      	adds	r3, #144	; 0x90
    dff6:	7899      	ldrb	r1, [r3, #2]
    dff8:	430a      	orrs	r2, r1
    dffa:	709a      	strb	r2, [r3, #2]
    dffc:	0023      	movs	r3, r4
    dffe:	33d8      	adds	r3, #216	; 0xd8
    e000:	781a      	ldrb	r2, [r3, #0]
    e002:	2303      	movs	r3, #3
    e004:	4353      	muls	r3, r2
    e006:	18e3      	adds	r3, r4, r3
    e008:	3390      	adds	r3, #144	; 0x90
    e00a:	789b      	ldrb	r3, [r3, #2]
    e00c:	09da      	lsrs	r2, r3, #7
    e00e:	2a01      	cmp	r2, #1
    e010:	d150      	bne.n	e0b4 <ExecuteNewChannel+0x15c>
    e012:	065b      	lsls	r3, r3, #25
    e014:	d54e      	bpl.n	e0b4 <ExecuteNewChannel+0x15c>
    e016:	4e30      	ldr	r6, [pc, #192]	; (e0d8 <ExecuteNewChannel+0x180>)
    e018:	2d00      	cmp	r5, #0
    e01a:	d04e      	beq.n	e0ba <ExecuteNewChannel+0x162>
    e01c:	a906      	add	r1, sp, #24
    e01e:	2012      	movs	r0, #18
    e020:	47b0      	blx	r6
    e022:	ad07      	add	r5, sp, #28
    e024:	a90a      	add	r1, sp, #40	; 0x28
    e026:	2000      	movs	r0, #0
    e028:	47b0      	blx	r6
    e02a:	002a      	movs	r2, r5
    e02c:	2100      	movs	r1, #0
    e02e:	2014      	movs	r0, #20
    e030:	4f2a      	ldr	r7, [pc, #168]	; (e0dc <ExecuteNewChannel+0x184>)
    e032:	47b8      	blx	r7
    e034:	0023      	movs	r3, r4
    e036:	782a      	ldrb	r2, [r5, #0]
    e038:	33ea      	adds	r3, #234	; 0xea
    e03a:	701a      	strb	r2, [r3, #0]
    e03c:	0023      	movs	r3, r4
    e03e:	786a      	ldrb	r2, [r5, #1]
    e040:	33eb      	adds	r3, #235	; 0xeb
    e042:	701a      	strb	r2, [r3, #0]
    e044:	34ff      	adds	r4, #255	; 0xff
    e046:	4b26      	ldr	r3, [pc, #152]	; (e0e0 <ExecuteNewChannel+0x188>)
    e048:	4798      	blx	r3
    e04a:	7c63      	ldrb	r3, [r4, #17]
    e04c:	079b      	lsls	r3, r3, #30
    e04e:	d50e      	bpl.n	e06e <ExecuteNewChannel+0x116>
    e050:	2416      	movs	r4, #22
    e052:	ab02      	add	r3, sp, #8
    e054:	18e4      	adds	r4, r4, r3
    e056:	1dd9      	adds	r1, r3, #7
    e058:	0022      	movs	r2, r4
    e05a:	201e      	movs	r0, #30
    e05c:	47b8      	blx	r7
    e05e:	ab02      	add	r3, sp, #8
    e060:	79db      	ldrb	r3, [r3, #7]
    e062:	a909      	add	r1, sp, #36	; 0x24
    e064:	708b      	strb	r3, [r1, #2]
    e066:	8823      	ldrh	r3, [r4, #0]
    e068:	201e      	movs	r0, #30
    e06a:	800b      	strh	r3, [r1, #0]
    e06c:	47b0      	blx	r6
    e06e:	ab02      	add	r3, sp, #8
    e070:	79db      	ldrb	r3, [r3, #7]
    e072:	a905      	add	r1, sp, #20
    e074:	700b      	strb	r3, [r1, #0]
    e076:	2301      	movs	r3, #1
    e078:	2016      	movs	r0, #22
    e07a:	704b      	strb	r3, [r1, #1]
    e07c:	4b16      	ldr	r3, [pc, #88]	; (e0d8 <ExecuteNewChannel+0x180>)
    e07e:	4798      	blx	r3
    e080:	ad09      	add	r5, sp, #36	; 0x24
    e082:	2100      	movs	r1, #0
    e084:	002a      	movs	r2, r5
    e086:	4b15      	ldr	r3, [pc, #84]	; (e0dc <ExecuteNewChannel+0x184>)
    e088:	2014      	movs	r0, #20
    e08a:	4798      	blx	r3
    e08c:	4c10      	ldr	r4, [pc, #64]	; (e0d0 <ExecuteNewChannel+0x178>)
    e08e:	782a      	ldrb	r2, [r5, #0]
    e090:	0023      	movs	r3, r4
    e092:	33ea      	adds	r3, #234	; 0xea
    e094:	701a      	strb	r2, [r3, #0]
    e096:	0023      	movs	r3, r4
    e098:	786a      	ldrb	r2, [r5, #1]
    e09a:	33eb      	adds	r3, #235	; 0xeb
    e09c:	701a      	strb	r2, [r3, #0]
    e09e:	4b10      	ldr	r3, [pc, #64]	; (e0e0 <ExecuteNewChannel+0x188>)
    e0a0:	4798      	blx	r3
    e0a2:	2304      	movs	r3, #4
    e0a4:	347c      	adds	r4, #124	; 0x7c
    e0a6:	7862      	ldrb	r2, [r4, #1]
    e0a8:	210b      	movs	r1, #11
    e0aa:	4313      	orrs	r3, r2
    e0ac:	7063      	strb	r3, [r4, #1]
    e0ae:	2001      	movs	r0, #1
    e0b0:	4b0c      	ldr	r3, [pc, #48]	; (e0e4 <ExecuteNewChannel+0x18c>)
    e0b2:	4798      	blx	r3
    e0b4:	9801      	ldr	r0, [sp, #4]
    e0b6:	b00d      	add	sp, #52	; 0x34
    e0b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e0ba:	ab02      	add	r3, sp, #8
    e0bc:	79db      	ldrb	r3, [r3, #7]
    e0be:	a905      	add	r1, sp, #20
    e0c0:	2016      	movs	r0, #22
    e0c2:	700b      	strb	r3, [r1, #0]
    e0c4:	704d      	strb	r5, [r1, #1]
    e0c6:	47b0      	blx	r6
    e0c8:	e7da      	b.n	e080 <ExecuteNewChannel+0x128>
    e0ca:	46c0      	nop			; (mov r8, r8)
    e0cc:	0001516d 	.word	0x0001516d
    e0d0:	200017d4 	.word	0x200017d4
    e0d4:	0000915d 	.word	0x0000915d
    e0d8:	00009269 	.word	0x00009269
    e0dc:	00009141 	.word	0x00009141
    e0e0:	0000df2d 	.word	0x0000df2d
    e0e4:	00009729 	.word	0x00009729

0000e0e8 <MacExecuteCommands>:
    e0e8:	2300      	movs	r3, #0
    e0ea:	b5f0      	push	{r4, r5, r6, r7, lr}
    e0ec:	0007      	movs	r7, r0
    e0ee:	2501      	movs	r5, #1
    e0f0:	b087      	sub	sp, #28
    e0f2:	9002      	str	r0, [sp, #8]
    e0f4:	9103      	str	r1, [sp, #12]
    e0f6:	9300      	str	r3, [sp, #0]
    e0f8:	9b02      	ldr	r3, [sp, #8]
    e0fa:	9a03      	ldr	r2, [sp, #12]
    e0fc:	4e63      	ldr	r6, [pc, #396]	; (e28c <MacExecuteCommands+0x1a4>)
    e0fe:	1898      	adds	r0, r3, r2
    e100:	4287      	cmp	r7, r0
    e102:	d353      	bcc.n	e1ac <MacExecuteCommands+0xc4>
    e104:	23ed      	movs	r3, #237	; 0xed
    e106:	005b      	lsls	r3, r3, #1
    e108:	5cf3      	ldrb	r3, [r6, r3]
    e10a:	2b00      	cmp	r3, #0
    e10c:	d000      	beq.n	e110 <MacExecuteCommands+0x28>
    e10e:	e072      	b.n	e1f6 <MacExecuteCommands+0x10e>
    e110:	0038      	movs	r0, r7
    e112:	b007      	add	sp, #28
    e114:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e116:	0033      	movs	r3, r6
    e118:	787a      	ldrb	r2, [r7, #1]
    e11a:	33dd      	adds	r3, #221	; 0xdd
    e11c:	701a      	strb	r2, [r3, #0]
    e11e:	0033      	movs	r3, r6
    e120:	78ba      	ldrb	r2, [r7, #2]
    e122:	33de      	adds	r3, #222	; 0xde
    e124:	701a      	strb	r2, [r3, #0]
    e126:	2203      	movs	r2, #3
    e128:	9b01      	ldr	r3, [sp, #4]
    e12a:	1cfc      	adds	r4, r7, #3
    e12c:	4353      	muls	r3, r2
    e12e:	18f3      	adds	r3, r6, r3
    e130:	3391      	adds	r3, #145	; 0x91
    e132:	32fc      	adds	r2, #252	; 0xfc
    e134:	701a      	strb	r2, [r3, #0]
    e136:	0032      	movs	r2, r6
    e138:	2103      	movs	r1, #3
    e13a:	32d8      	adds	r2, #216	; 0xd8
    e13c:	7813      	ldrb	r3, [r2, #0]
    e13e:	4359      	muls	r1, r3
    e140:	1876      	adds	r6, r6, r1
    e142:	3691      	adds	r6, #145	; 0x91
    e144:	7831      	ldrb	r1, [r6, #0]
    e146:	29ff      	cmp	r1, #255	; 0xff
    e148:	d003      	beq.n	e152 <MacExecuteCommands+0x6a>
    e14a:	2b0f      	cmp	r3, #15
    e14c:	d801      	bhi.n	e152 <MacExecuteCommands+0x6a>
    e14e:	3301      	adds	r3, #1
    e150:	7013      	strb	r3, [r2, #0]
    e152:	0027      	movs	r7, r4
    e154:	e7d0      	b.n	e0f8 <MacExecuteCommands+0x10>
    e156:	0020      	movs	r0, r4
    e158:	4b4d      	ldr	r3, [pc, #308]	; (e290 <MacExecuteCommands+0x1a8>)
    e15a:	4798      	blx	r3
    e15c:	0004      	movs	r4, r0
    e15e:	e7ea      	b.n	e136 <MacExecuteCommands+0x4e>
    e160:	0020      	movs	r0, r4
    e162:	4b4c      	ldr	r3, [pc, #304]	; (e294 <MacExecuteCommands+0x1ac>)
    e164:	e7f9      	b.n	e15a <MacExecuteCommands+0x72>
    e166:	0020      	movs	r0, r4
    e168:	4b4b      	ldr	r3, [pc, #300]	; (e298 <MacExecuteCommands+0x1b0>)
    e16a:	e7f6      	b.n	e15a <MacExecuteCommands+0x72>
    e16c:	0020      	movs	r0, r4
    e16e:	4b4b      	ldr	r3, [pc, #300]	; (e29c <MacExecuteCommands+0x1b4>)
    e170:	e7f3      	b.n	e15a <MacExecuteCommands+0x72>
    e172:	230f      	movs	r3, #15
    e174:	7878      	ldrb	r0, [r7, #1]
    e176:	1cbc      	adds	r4, r7, #2
    e178:	4018      	ands	r0, r3
    e17a:	4b49      	ldr	r3, [pc, #292]	; (e2a0 <MacExecuteCommands+0x1b8>)
    e17c:	4798      	blx	r3
    e17e:	0032      	movs	r2, r6
    e180:	2380      	movs	r3, #128	; 0x80
    e182:	327c      	adds	r2, #124	; 0x7c
    e184:	7851      	ldrb	r1, [r2, #1]
    e186:	425b      	negs	r3, r3
    e188:	430b      	orrs	r3, r1
    e18a:	7053      	strb	r3, [r2, #1]
    e18c:	210b      	movs	r1, #11
    e18e:	0028      	movs	r0, r5
    e190:	4b44      	ldr	r3, [pc, #272]	; (e2a4 <MacExecuteCommands+0x1bc>)
    e192:	4798      	blx	r3
    e194:	e7cf      	b.n	e136 <MacExecuteCommands+0x4e>
    e196:	0020      	movs	r0, r4
    e198:	4b43      	ldr	r3, [pc, #268]	; (e2a8 <MacExecuteCommands+0x1c0>)
    e19a:	e7de      	b.n	e15a <MacExecuteCommands+0x72>
    e19c:	0020      	movs	r0, r4
    e19e:	4b43      	ldr	r3, [pc, #268]	; (e2ac <MacExecuteCommands+0x1c4>)
    e1a0:	e7db      	b.n	e15a <MacExecuteCommands+0x72>
    e1a2:	22ff      	movs	r2, #255	; 0xff
    e1a4:	0004      	movs	r4, r0
    e1a6:	701a      	strb	r2, [r3, #0]
    e1a8:	9500      	str	r5, [sp, #0]
    e1aa:	e7c4      	b.n	e136 <MacExecuteCommands+0x4e>
    e1ac:	9b00      	ldr	r3, [sp, #0]
    e1ae:	2b00      	cmp	r3, #0
    e1b0:	d1a8      	bne.n	e104 <MacExecuteCommands+0x1c>
    e1b2:	0033      	movs	r3, r6
    e1b4:	33d8      	adds	r3, #216	; 0xd8
    e1b6:	781b      	ldrb	r3, [r3, #0]
    e1b8:	2401      	movs	r4, #1
    e1ba:	9301      	str	r3, [sp, #4]
    e1bc:	2303      	movs	r3, #3
    e1be:	9a01      	ldr	r2, [sp, #4]
    e1c0:	4353      	muls	r3, r2
    e1c2:	18f3      	adds	r3, r6, r3
    e1c4:	0019      	movs	r1, r3
    e1c6:	3190      	adds	r1, #144	; 0x90
    e1c8:	788a      	ldrb	r2, [r1, #2]
    e1ca:	3391      	adds	r3, #145	; 0x91
    e1cc:	43aa      	bics	r2, r5
    e1ce:	4022      	ands	r2, r4
    e1d0:	708a      	strb	r2, [r1, #2]
    e1d2:	78ca      	ldrb	r2, [r1, #3]
    e1d4:	193c      	adds	r4, r7, r4
    e1d6:	43aa      	bics	r2, r5
    e1d8:	70ca      	strb	r2, [r1, #3]
    e1da:	783a      	ldrb	r2, [r7, #0]
    e1dc:	701a      	strb	r2, [r3, #0]
    e1de:	783a      	ldrb	r2, [r7, #0]
    e1e0:	3a02      	subs	r2, #2
    e1e2:	2a08      	cmp	r2, #8
    e1e4:	d8dd      	bhi.n	e1a2 <MacExecuteCommands+0xba>
    e1e6:	0010      	movs	r0, r2
    e1e8:	f003 fbf0 	bl	119cc <__gnu_thumb1_case_sqi>
    e1ec:	bdbab595 	.word	0xbdbab595
    e1f0:	d5c3c0a5 	.word	0xd5c3c0a5
    e1f4:	d8          	.byte	0xd8
    e1f5:	00          	.byte	0x00
    e1f6:	23d8      	movs	r3, #216	; 0xd8
    e1f8:	33ff      	adds	r3, #255	; 0xff
    e1fa:	5cf3      	ldrb	r3, [r6, r3]
    e1fc:	43db      	mvns	r3, r3
    e1fe:	075b      	lsls	r3, r3, #29
    e200:	d000      	beq.n	e204 <MacExecuteCommands+0x11c>
    e202:	e785      	b.n	e110 <MacExecuteCommands+0x28>
    e204:	23de      	movs	r3, #222	; 0xde
    e206:	33ff      	adds	r3, #255	; 0xff
    e208:	5cf4      	ldrb	r4, [r6, r3]
    e20a:	ad05      	add	r5, sp, #20
    e20c:	0724      	lsls	r4, r4, #28
    e20e:	0f24      	lsrs	r4, r4, #28
    e210:	b2e3      	uxtb	r3, r4
    e212:	9300      	str	r3, [sp, #0]
    e214:	23da      	movs	r3, #218	; 0xda
    e216:	33ff      	adds	r3, #255	; 0xff
    e218:	5cf3      	ldrb	r3, [r6, r3]
    e21a:	2100      	movs	r1, #0
    e21c:	9301      	str	r3, [sp, #4]
    e21e:	23ec      	movs	r3, #236	; 0xec
    e220:	005b      	lsls	r3, r3, #1
    e222:	5cf3      	ldrb	r3, [r6, r3]
    e224:	002a      	movs	r2, r5
    e226:	9302      	str	r3, [sp, #8]
    e228:	2014      	movs	r0, #20
    e22a:	4b21      	ldr	r3, [pc, #132]	; (e2b0 <MacExecuteCommands+0x1c8>)
    e22c:	4798      	blx	r3
    e22e:	0033      	movs	r3, r6
    e230:	782a      	ldrb	r2, [r5, #0]
    e232:	33ea      	adds	r3, #234	; 0xea
    e234:	701a      	strb	r2, [r3, #0]
    e236:	0033      	movs	r3, r6
    e238:	786a      	ldrb	r2, [r5, #1]
    e23a:	33eb      	adds	r3, #235	; 0xeb
    e23c:	701a      	strb	r2, [r3, #0]
    e23e:	4b1d      	ldr	r3, [pc, #116]	; (e2b4 <MacExecuteCommands+0x1cc>)
    e240:	4798      	blx	r3
    e242:	9801      	ldr	r0, [sp, #4]
    e244:	4b1c      	ldr	r3, [pc, #112]	; (e2b8 <MacExecuteCommands+0x1d0>)
    e246:	4798      	blx	r3
    e248:	0032      	movs	r2, r6
    e24a:	2308      	movs	r3, #8
    e24c:	327c      	adds	r2, #124	; 0x7c
    e24e:	7851      	ldrb	r1, [r2, #1]
    e250:	430b      	orrs	r3, r1
    e252:	7053      	strb	r3, [r2, #1]
    e254:	9802      	ldr	r0, [sp, #8]
    e256:	4b19      	ldr	r3, [pc, #100]	; (e2bc <MacExecuteCommands+0x1d4>)
    e258:	4798      	blx	r3
    e25a:	0033      	movs	r3, r6
    e25c:	b2e2      	uxtb	r2, r4
    e25e:	33d9      	adds	r3, #217	; 0xd9
    e260:	2a00      	cmp	r2, #0
    e262:	d10e      	bne.n	e282 <MacExecuteCommands+0x19a>
    e264:	701c      	strb	r4, [r3, #0]
    e266:	2114      	movs	r1, #20
    e268:	4c0e      	ldr	r4, [pc, #56]	; (e2a4 <MacExecuteCommands+0x1bc>)
    e26a:	2000      	movs	r0, #0
    e26c:	47a0      	blx	r4
    e26e:	2210      	movs	r2, #16
    e270:	4b06      	ldr	r3, [pc, #24]	; (e28c <MacExecuteCommands+0x1a4>)
    e272:	2001      	movs	r0, #1
    e274:	337c      	adds	r3, #124	; 0x7c
    e276:	7859      	ldrb	r1, [r3, #1]
    e278:	430a      	orrs	r2, r1
    e27a:	705a      	strb	r2, [r3, #1]
    e27c:	210b      	movs	r1, #11
    e27e:	47a0      	blx	r4
    e280:	e746      	b.n	e110 <MacExecuteCommands+0x28>
    e282:	9a00      	ldr	r2, [sp, #0]
    e284:	3a01      	subs	r2, #1
    e286:	701a      	strb	r2, [r3, #0]
    e288:	e7ed      	b.n	e266 <MacExecuteCommands+0x17e>
    e28a:	46c0      	nop			; (mov r8, r8)
    e28c:	200017d4 	.word	0x200017d4
    e290:	0000c5a5 	.word	0x0000c5a5
    e294:	0000c469 	.word	0x0000c469
    e298:	0000c36d 	.word	0x0000c36d
    e29c:	0000df59 	.word	0x0000df59
    e2a0:	0000b9d9 	.word	0x0000b9d9
    e2a4:	00009729 	.word	0x00009729
    e2a8:	0000c555 	.word	0x0000c555
    e2ac:	0000c4a1 	.word	0x0000c4a1
    e2b0:	00009141 	.word	0x00009141
    e2b4:	0000df2d 	.word	0x0000df2d
    e2b8:	0000c225 	.word	0x0000c225
    e2bc:	0000c1b9 	.word	0x0000c1b9

0000e2c0 <LorawanSetDataRange>:
    e2c0:	2201      	movs	r2, #1
    e2c2:	b530      	push	{r4, r5, lr}
    e2c4:	b085      	sub	sp, #20
    e2c6:	ab01      	add	r3, sp, #4
    e2c8:	ac02      	add	r4, sp, #8
    e2ca:	7018      	strb	r0, [r3, #0]
    e2cc:	7020      	strb	r0, [r4, #0]
    e2ce:	7061      	strb	r1, [r4, #1]
    e2d0:	2015      	movs	r0, #21
    e2d2:	0019      	movs	r1, r3
    e2d4:	4d11      	ldr	r5, [pc, #68]	; (e31c <LorawanSetDataRange+0x5c>)
    e2d6:	705a      	strb	r2, [r3, #1]
    e2d8:	47a8      	blx	r5
    e2da:	2808      	cmp	r0, #8
    e2dc:	d003      	beq.n	e2e6 <LorawanSetDataRange+0x26>
    e2de:	250a      	movs	r5, #10
    e2e0:	0028      	movs	r0, r5
    e2e2:	b005      	add	sp, #20
    e2e4:	bd30      	pop	{r4, r5, pc}
    e2e6:	0021      	movs	r1, r4
    e2e8:	2012      	movs	r0, #18
    e2ea:	47a8      	blx	r5
    e2ec:	0005      	movs	r5, r0
    e2ee:	2808      	cmp	r0, #8
    e2f0:	d1f5      	bne.n	e2de <LorawanSetDataRange+0x1e>
    e2f2:	0021      	movs	r1, r4
    e2f4:	4b0a      	ldr	r3, [pc, #40]	; (e320 <LorawanSetDataRange+0x60>)
    e2f6:	ac03      	add	r4, sp, #12
    e2f8:	2012      	movs	r0, #18
    e2fa:	4798      	blx	r3
    e2fc:	0022      	movs	r2, r4
    e2fe:	2100      	movs	r1, #0
    e300:	4b08      	ldr	r3, [pc, #32]	; (e324 <LorawanSetDataRange+0x64>)
    e302:	2014      	movs	r0, #20
    e304:	4798      	blx	r3
    e306:	4b08      	ldr	r3, [pc, #32]	; (e328 <LorawanSetDataRange+0x68>)
    e308:	7821      	ldrb	r1, [r4, #0]
    e30a:	001a      	movs	r2, r3
    e30c:	32ea      	adds	r2, #234	; 0xea
    e30e:	7011      	strb	r1, [r2, #0]
    e310:	7862      	ldrb	r2, [r4, #1]
    e312:	33eb      	adds	r3, #235	; 0xeb
    e314:	701a      	strb	r2, [r3, #0]
    e316:	4b05      	ldr	r3, [pc, #20]	; (e32c <LorawanSetDataRange+0x6c>)
    e318:	4798      	blx	r3
    e31a:	e7e1      	b.n	e2e0 <LorawanSetDataRange+0x20>
    e31c:	0000915d 	.word	0x0000915d
    e320:	00009269 	.word	0x00009269
    e324:	00009141 	.word	0x00009141
    e328:	200017d4 	.word	0x200017d4
    e32c:	0000df2d 	.word	0x0000df2d

0000e330 <LorawanSetChannelIdStatus>:
    e330:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e332:	466b      	mov	r3, sp
    e334:	7018      	strb	r0, [r3, #0]
    e336:	7059      	strb	r1, [r3, #1]
    e338:	2016      	movs	r0, #22
    e33a:	4669      	mov	r1, sp
    e33c:	4b0c      	ldr	r3, [pc, #48]	; (e370 <LorawanSetChannelIdStatus+0x40>)
    e33e:	4798      	blx	r3
    e340:	0004      	movs	r4, r0
    e342:	2808      	cmp	r0, #8
    e344:	d111      	bne.n	e36a <LorawanSetChannelIdStatus+0x3a>
    e346:	ad01      	add	r5, sp, #4
    e348:	002a      	movs	r2, r5
    e34a:	2100      	movs	r1, #0
    e34c:	4b09      	ldr	r3, [pc, #36]	; (e374 <LorawanSetChannelIdStatus+0x44>)
    e34e:	2014      	movs	r0, #20
    e350:	4798      	blx	r3
    e352:	4b09      	ldr	r3, [pc, #36]	; (e378 <LorawanSetChannelIdStatus+0x48>)
    e354:	7829      	ldrb	r1, [r5, #0]
    e356:	001a      	movs	r2, r3
    e358:	32ea      	adds	r2, #234	; 0xea
    e35a:	7011      	strb	r1, [r2, #0]
    e35c:	786a      	ldrb	r2, [r5, #1]
    e35e:	33eb      	adds	r3, #235	; 0xeb
    e360:	701a      	strb	r2, [r3, #0]
    e362:	4b06      	ldr	r3, [pc, #24]	; (e37c <LorawanSetChannelIdStatus+0x4c>)
    e364:	4798      	blx	r3
    e366:	0020      	movs	r0, r4
    e368:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    e36a:	240a      	movs	r4, #10
    e36c:	e7fb      	b.n	e366 <LorawanSetChannelIdStatus+0x36>
    e36e:	46c0      	nop			; (mov r8, r8)
    e370:	00009269 	.word	0x00009269
    e374:	00009141 	.word	0x00009141
    e378:	200017d4 	.word	0x200017d4
    e37c:	0000df2d 	.word	0x0000df2d

0000e380 <LORAWAN_RxDone>:
    e380:	b5f0      	push	{r4, r5, r6, r7, lr}
    e382:	4bc5      	ldr	r3, [pc, #788]	; (e698 <LORAWAN_RxDone+0x318>)
    e384:	b093      	sub	sp, #76	; 0x4c
    e386:	781b      	ldrb	r3, [r3, #0]
    e388:	0007      	movs	r7, r0
    e38a:	b25a      	sxtb	r2, r3
    e38c:	9107      	str	r1, [sp, #28]
    e38e:	4cc3      	ldr	r4, [pc, #780]	; (e69c <LORAWAN_RxDone+0x31c>)
    e390:	2a00      	cmp	r2, #0
    e392:	da01      	bge.n	e398 <LORAWAN_RxDone+0x18>
    e394:	f000 fd72 	bl	ee7c <LORAWAN_RxDone+0xafc>
    e398:	7801      	ldrb	r1, [r0, #0]
    e39a:	221f      	movs	r2, #31
    e39c:	0008      	movs	r0, r1
    e39e:	4390      	bics	r0, r2
    e3a0:	0002      	movs	r2, r0
    e3a2:	2820      	cmp	r0, #32
    e3a4:	d000      	beq.n	e3a8 <LORAWAN_RxDone+0x28>
    e3a6:	e1ad      	b.n	e704 <LORAWAN_RxDone+0x384>
    e3a8:	7822      	ldrb	r2, [r4, #0]
    e3aa:	2a00      	cmp	r2, #0
    e3ac:	d001      	beq.n	e3b2 <LORAWAN_RxDone+0x32>
    e3ae:	f000 fd51 	bl	ee54 <LORAWAN_RxDone+0xad4>
    e3b2:	0022      	movs	r2, r4
    e3b4:	328c      	adds	r2, #140	; 0x8c
    e3b6:	7812      	ldrb	r2, [r2, #0]
    e3b8:	0752      	lsls	r2, r2, #29
    e3ba:	d401      	bmi.n	e3c0 <LORAWAN_RxDone+0x40>
    e3bc:	f000 fd4a 	bl	ee54 <LORAWAN_RxDone+0xad4>
    e3c0:	9b07      	ldr	r3, [sp, #28]
    e3c2:	3b01      	subs	r3, #1
    e3c4:	b2db      	uxtb	r3, r3
    e3c6:	9306      	str	r3, [sp, #24]
    e3c8:	4bb5      	ldr	r3, [pc, #724]	; (e6a0 <LORAWAN_RxDone+0x320>)
    e3ca:	469c      	mov	ip, r3
    e3cc:	9b06      	ldr	r3, [sp, #24]
    e3ce:	2b00      	cmp	r3, #0
    e3d0:	d12c      	bne.n	e42c <LORAWAN_RxDone+0xac>
    e3d2:	9b07      	ldr	r3, [sp, #28]
    e3d4:	4660      	mov	r0, ip
    e3d6:	1f1d      	subs	r5, r3, #4
    e3d8:	b2eb      	uxtb	r3, r5
    e3da:	9300      	str	r3, [sp, #0]
    e3dc:	4ab1      	ldr	r2, [pc, #708]	; (e6a4 <LORAWAN_RxDone+0x324>)
    e3de:	003b      	movs	r3, r7
    e3e0:	9906      	ldr	r1, [sp, #24]
    e3e2:	4eb1      	ldr	r6, [pc, #708]	; (e6a8 <LORAWAN_RxDone+0x328>)
    e3e4:	47b0      	blx	r6
    e3e6:	2204      	movs	r2, #4
    e3e8:	49ae      	ldr	r1, [pc, #696]	; (e6a4 <LORAWAN_RxDone+0x324>)
    e3ea:	4bb0      	ldr	r3, [pc, #704]	; (e6ac <LORAWAN_RxDone+0x32c>)
    e3ec:	a810      	add	r0, sp, #64	; 0x40
    e3ee:	4798      	blx	r3
    e3f0:	9e10      	ldr	r6, [sp, #64]	; 0x40
    e3f2:	1979      	adds	r1, r7, r5
    e3f4:	2204      	movs	r2, #4
    e3f6:	4bad      	ldr	r3, [pc, #692]	; (e6ac <LORAWAN_RxDone+0x32c>)
    e3f8:	a810      	add	r0, sp, #64	; 0x40
    e3fa:	960d      	str	r6, [sp, #52]	; 0x34
    e3fc:	4798      	blx	r3
    e3fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e400:	4ba6      	ldr	r3, [pc, #664]	; (e69c <LORAWAN_RxDone+0x31c>)
    e402:	210e      	movs	r1, #14
    e404:	42b2      	cmp	r2, r6
    e406:	d029      	beq.n	e45c <LORAWAN_RxDone+0xdc>
    e408:	001a      	movs	r2, r3
    e40a:	327c      	adds	r2, #124	; 0x7c
    e40c:	7812      	ldrb	r2, [r2, #0]
    e40e:	400a      	ands	r2, r1
    e410:	2a0a      	cmp	r2, #10
    e412:	d005      	beq.n	e420 <LORAWAN_RxDone+0xa0>
    e414:	2a06      	cmp	r2, #6
    e416:	d106      	bne.n	e426 <LORAWAN_RxDone+0xa6>
    e418:	33f0      	adds	r3, #240	; 0xf0
    e41a:	781b      	ldrb	r3, [r3, #0]
    e41c:	2b00      	cmp	r3, #0
    e41e:	d002      	beq.n	e426 <LORAWAN_RxDone+0xa6>
    e420:	2018      	movs	r0, #24
    e422:	4ba3      	ldr	r3, [pc, #652]	; (e6b0 <LORAWAN_RxDone+0x330>)
    e424:	4798      	blx	r3
    e426:	4ba3      	ldr	r3, [pc, #652]	; (e6b4 <LORAWAN_RxDone+0x334>)
    e428:	4798      	blx	r3
    e42a:	e1f5      	b.n	e818 <LORAWAN_RxDone+0x498>
    e42c:	9b07      	ldr	r3, [sp, #28]
    e42e:	9a06      	ldr	r2, [sp, #24]
    e430:	2100      	movs	r1, #0
    e432:	1a98      	subs	r0, r3, r2
    e434:	1838      	adds	r0, r7, r0
    e436:	4662      	mov	r2, ip
    e438:	4b9f      	ldr	r3, [pc, #636]	; (e6b8 <LORAWAN_RxDone+0x338>)
    e43a:	4798      	blx	r3
    e43c:	2800      	cmp	r0, #0
    e43e:	d006      	beq.n	e44e <LORAWAN_RxDone+0xce>
    e440:	4b9b      	ldr	r3, [pc, #620]	; (e6b0 <LORAWAN_RxDone+0x330>)
    e442:	4798      	blx	r3
    e444:	4b9b      	ldr	r3, [pc, #620]	; (e6b4 <LORAWAN_RxDone+0x334>)
    e446:	4798      	blx	r3
    e448:	201f      	movs	r0, #31
    e44a:	b013      	add	sp, #76	; 0x4c
    e44c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e44e:	9b06      	ldr	r3, [sp, #24]
    e450:	2b10      	cmp	r3, #16
    e452:	d901      	bls.n	e458 <LORAWAN_RxDone+0xd8>
    e454:	3b10      	subs	r3, #16
    e456:	e7b5      	b.n	e3c4 <LORAWAN_RxDone+0x44>
    e458:	9006      	str	r0, [sp, #24]
    e45a:	e7b5      	b.n	e3c8 <LORAWAN_RxDone+0x48>
    e45c:	001a      	movs	r2, r3
    e45e:	327c      	adds	r2, #124	; 0x7c
    e460:	7812      	ldrb	r2, [r2, #0]
    e462:	400a      	ands	r2, r1
    e464:	2a06      	cmp	r2, #6
    e466:	d103      	bne.n	e470 <LORAWAN_RxDone+0xf0>
    e468:	33e3      	adds	r3, #227	; 0xe3
    e46a:	7818      	ldrb	r0, [r3, #0]
    e46c:	4b93      	ldr	r3, [pc, #588]	; (e6bc <LORAWAN_RxDone+0x33c>)
    e46e:	4798      	blx	r3
    e470:	7a3a      	ldrb	r2, [r7, #8]
    e472:	79fb      	ldrb	r3, [r7, #7]
    e474:	0212      	lsls	r2, r2, #8
    e476:	431a      	orrs	r2, r3
    e478:	7a7b      	ldrb	r3, [r7, #9]
    e47a:	2001      	movs	r0, #1
    e47c:	041b      	lsls	r3, r3, #16
    e47e:	431a      	orrs	r2, r3
    e480:	7abb      	ldrb	r3, [r7, #10]
    e482:	061b      	lsls	r3, r3, #24
    e484:	4313      	orrs	r3, r2
    e486:	0a19      	lsrs	r1, r3, #8
    e488:	7063      	strb	r3, [r4, #1]
    e48a:	70a1      	strb	r1, [r4, #2]
    e48c:	0c19      	lsrs	r1, r3, #16
    e48e:	0e1b      	lsrs	r3, r3, #24
    e490:	70e1      	strb	r1, [r4, #3]
    e492:	7123      	strb	r3, [r4, #4]
    e494:	240f      	movs	r4, #15
    e496:	2103      	movs	r1, #3
    e498:	4b89      	ldr	r3, [pc, #548]	; (e6c0 <LORAWAN_RxDone+0x340>)
    e49a:	4798      	blx	r3
    e49c:	7b38      	ldrb	r0, [r7, #12]
    e49e:	4b89      	ldr	r3, [pc, #548]	; (e6c4 <LORAWAN_RxDone+0x344>)
    e4a0:	4020      	ands	r0, r4
    e4a2:	4798      	blx	r3
    e4a4:	7af8      	ldrb	r0, [r7, #11]
    e4a6:	4b88      	ldr	r3, [pc, #544]	; (e6c8 <LORAWAN_RxDone+0x348>)
    e4a8:	0641      	lsls	r1, r0, #25
    e4aa:	0700      	lsls	r0, r0, #28
    e4ac:	0f49      	lsrs	r1, r1, #29
    e4ae:	0f00      	lsrs	r0, r0, #28
    e4b0:	4798      	blx	r3
    e4b2:	4b86      	ldr	r3, [pc, #536]	; (e6cc <LORAWAN_RxDone+0x34c>)
    e4b4:	2100      	movs	r1, #0
    e4b6:	203c      	movs	r0, #60	; 0x3c
    e4b8:	4798      	blx	r3
    e4ba:	9b07      	ldr	r3, [sp, #28]
    e4bc:	2b21      	cmp	r3, #33	; 0x21
    e4be:	d000      	beq.n	e4c2 <LORAWAN_RxDone+0x142>
    e4c0:	e08c      	b.n	e5dc <LORAWAN_RxDone+0x25c>
    e4c2:	251a      	movs	r5, #26
    e4c4:	ab04      	add	r3, sp, #16
    e4c6:	18ed      	adds	r5, r5, r3
    e4c8:	002a      	movs	r2, r5
    e4ca:	4b81      	ldr	r3, [pc, #516]	; (e6d0 <LORAWAN_RxDone+0x350>)
    e4cc:	4981      	ldr	r1, [pc, #516]	; (e6d4 <LORAWAN_RxDone+0x354>)
    e4ce:	2007      	movs	r0, #7
    e4d0:	4798      	blx	r3
    e4d2:	782b      	ldrb	r3, [r5, #0]
    e4d4:	2bff      	cmp	r3, #255	; 0xff
    e4d6:	d100      	bne.n	e4da <LORAWAN_RxDone+0x15a>
    e4d8:	e080      	b.n	e5dc <LORAWAN_RxDone+0x25c>
    e4da:	2350      	movs	r3, #80	; 0x50
    e4dc:	43a3      	bics	r3, r4
    e4de:	9308      	str	r3, [sp, #32]
    e4e0:	003b      	movs	r3, r7
    e4e2:	330d      	adds	r3, #13
    e4e4:	9307      	str	r3, [sp, #28]
    e4e6:	2600      	movs	r6, #0
    e4e8:	2203      	movs	r2, #3
    e4ea:	9907      	ldr	r1, [sp, #28]
    e4ec:	4b6f      	ldr	r3, [pc, #444]	; (e6ac <LORAWAN_RxDone+0x32c>)
    e4ee:	a80e      	add	r0, sp, #56	; 0x38
    e4f0:	960e      	str	r6, [sp, #56]	; 0x38
    e4f2:	4798      	blx	r3
    e4f4:	2364      	movs	r3, #100	; 0x64
    e4f6:	990e      	ldr	r1, [sp, #56]	; 0x38
    e4f8:	aa04      	add	r2, sp, #16
    e4fa:	4359      	muls	r1, r3
    e4fc:	3b4a      	subs	r3, #74	; 0x4a
    e4fe:	189b      	adds	r3, r3, r2
    e500:	7818      	ldrb	r0, [r3, #0]
    e502:	9b06      	ldr	r3, [sp, #24]
    e504:	910e      	str	r1, [sp, #56]	; 0x38
    e506:	1818      	adds	r0, r3, r0
    e508:	b2c0      	uxtb	r0, r0
    e50a:	76d0      	strb	r0, [r2, #27]
    e50c:	42b1      	cmp	r1, r6
    e50e:	d100      	bne.n	e512 <LORAWAN_RxDone+0x192>
    e510:	e0a8      	b.n	e664 <LORAWAN_RxDone+0x2e4>
    e512:	466b      	mov	r3, sp
    e514:	2220      	movs	r2, #32
    e516:	189b      	adds	r3, r3, r2
    e518:	781b      	ldrb	r3, [r3, #0]
    e51a:	ad10      	add	r5, sp, #64	; 0x40
    e51c:	ac0b      	add	r4, sp, #44	; 0x2c
    e51e:	7128      	strb	r0, [r5, #4]
    e520:	9110      	str	r1, [sp, #64]	; 0x40
    e522:	7020      	strb	r0, [r4, #0]
    e524:	7063      	strb	r3, [r4, #1]
    e526:	0029      	movs	r1, r5
    e528:	2002      	movs	r0, #2
    e52a:	4b6b      	ldr	r3, [pc, #428]	; (e6d8 <LORAWAN_RxDone+0x358>)
    e52c:	4798      	blx	r3
    e52e:	2808      	cmp	r0, #8
    e530:	d140      	bne.n	e5b4 <LORAWAN_RxDone+0x234>
    e532:	0029      	movs	r1, r5
    e534:	0030      	movs	r0, r6
    e536:	4b65      	ldr	r3, [pc, #404]	; (e6cc <LORAWAN_RxDone+0x34c>)
    e538:	4798      	blx	r3
    e53a:	ad0c      	add	r5, sp, #48	; 0x30
    e53c:	0021      	movs	r1, r4
    e53e:	4b63      	ldr	r3, [pc, #396]	; (e6cc <LORAWAN_RxDone+0x34c>)
    e540:	2012      	movs	r0, #18
    e542:	4798      	blx	r3
    e544:	0031      	movs	r1, r6
    e546:	002a      	movs	r2, r5
    e548:	4e61      	ldr	r6, [pc, #388]	; (e6d0 <LORAWAN_RxDone+0x350>)
    e54a:	2014      	movs	r0, #20
    e54c:	47b0      	blx	r6
    e54e:	4c53      	ldr	r4, [pc, #332]	; (e69c <LORAWAN_RxDone+0x31c>)
    e550:	782a      	ldrb	r2, [r5, #0]
    e552:	0023      	movs	r3, r4
    e554:	33ea      	adds	r3, #234	; 0xea
    e556:	701a      	strb	r2, [r3, #0]
    e558:	0023      	movs	r3, r4
    e55a:	786a      	ldrb	r2, [r5, #1]
    e55c:	2522      	movs	r5, #34	; 0x22
    e55e:	33eb      	adds	r3, #235	; 0xeb
    e560:	701a      	strb	r2, [r3, #0]
    e562:	4b5e      	ldr	r3, [pc, #376]	; (e6dc <LORAWAN_RxDone+0x35c>)
    e564:	4798      	blx	r3
    e566:	ab04      	add	r3, sp, #16
    e568:	18ed      	adds	r5, r5, r3
    e56a:	231b      	movs	r3, #27
    e56c:	a904      	add	r1, sp, #16
    e56e:	185b      	adds	r3, r3, r1
    e570:	0019      	movs	r1, r3
    e572:	002a      	movs	r2, r5
    e574:	201e      	movs	r0, #30
    e576:	47b0      	blx	r6
    e578:	0023      	movs	r3, r4
    e57a:	33ff      	adds	r3, #255	; 0xff
    e57c:	7c5b      	ldrb	r3, [r3, #17]
    e57e:	079b      	lsls	r3, r3, #30
    e580:	d508      	bpl.n	e594 <LORAWAN_RxDone+0x214>
    e582:	ab04      	add	r3, sp, #16
    e584:	7edb      	ldrb	r3, [r3, #27]
    e586:	a90f      	add	r1, sp, #60	; 0x3c
    e588:	708b      	strb	r3, [r1, #2]
    e58a:	882b      	ldrh	r3, [r5, #0]
    e58c:	201e      	movs	r0, #30
    e58e:	800b      	strh	r3, [r1, #0]
    e590:	4b4e      	ldr	r3, [pc, #312]	; (e6cc <LORAWAN_RxDone+0x34c>)
    e592:	4798      	blx	r3
    e594:	231b      	movs	r3, #27
    e596:	aa04      	add	r2, sp, #16
    e598:	189b      	adds	r3, r3, r2
    e59a:	7818      	ldrb	r0, [r3, #0]
    e59c:	2101      	movs	r1, #1
    e59e:	4b50      	ldr	r3, [pc, #320]	; (e6e0 <LORAWAN_RxDone+0x360>)
    e5a0:	4798      	blx	r3
    e5a2:	2204      	movs	r2, #4
    e5a4:	347c      	adds	r4, #124	; 0x7c
    e5a6:	7863      	ldrb	r3, [r4, #1]
    e5a8:	210b      	movs	r1, #11
    e5aa:	4313      	orrs	r3, r2
    e5ac:	7063      	strb	r3, [r4, #1]
    e5ae:	2001      	movs	r0, #1
    e5b0:	4b43      	ldr	r3, [pc, #268]	; (e6c0 <LORAWAN_RxDone+0x340>)
    e5b2:	4798      	blx	r3
    e5b4:	9b06      	ldr	r3, [sp, #24]
    e5b6:	3301      	adds	r3, #1
    e5b8:	b2db      	uxtb	r3, r3
    e5ba:	9306      	str	r3, [sp, #24]
    e5bc:	9b07      	ldr	r3, [sp, #28]
    e5be:	3303      	adds	r3, #3
    e5c0:	9307      	str	r3, [sp, #28]
    e5c2:	9b06      	ldr	r3, [sp, #24]
    e5c4:	2b05      	cmp	r3, #5
    e5c6:	d18e      	bne.n	e4e6 <LORAWAN_RxDone+0x166>
    e5c8:	2204      	movs	r2, #4
    e5ca:	4b34      	ldr	r3, [pc, #208]	; (e69c <LORAWAN_RxDone+0x31c>)
    e5cc:	2001      	movs	r0, #1
    e5ce:	337c      	adds	r3, #124	; 0x7c
    e5d0:	7859      	ldrb	r1, [r3, #1]
    e5d2:	430a      	orrs	r2, r1
    e5d4:	705a      	strb	r2, [r3, #1]
    e5d6:	210b      	movs	r1, #11
    e5d8:	4b39      	ldr	r3, [pc, #228]	; (e6c0 <LORAWAN_RxDone+0x340>)
    e5da:	4798      	blx	r3
    e5dc:	4d41      	ldr	r5, [pc, #260]	; (e6e4 <LORAWAN_RxDone+0x364>)
    e5de:	1c7e      	adds	r6, r7, #1
    e5e0:	3704      	adds	r7, #4
    e5e2:	0028      	movs	r0, r5
    e5e4:	003a      	movs	r2, r7
    e5e6:	0031      	movs	r1, r6
    e5e8:	4b3f      	ldr	r3, [pc, #252]	; (e6e8 <LORAWAN_RxDone+0x368>)
    e5ea:	4798      	blx	r3
    e5ec:	2302      	movs	r3, #2
    e5ee:	4c2b      	ldr	r4, [pc, #172]	; (e69c <LORAWAN_RxDone+0x31c>)
    e5f0:	0028      	movs	r0, r5
    e5f2:	7563      	strb	r3, [r4, #21]
    e5f4:	4a2a      	ldr	r2, [pc, #168]	; (e6a0 <LORAWAN_RxDone+0x320>)
    e5f6:	3b01      	subs	r3, #1
    e5f8:	2100      	movs	r1, #0
    e5fa:	4d3c      	ldr	r5, [pc, #240]	; (e6ec <LORAWAN_RxDone+0x36c>)
    e5fc:	47a8      	blx	r5
    e5fe:	2800      	cmp	r0, #0
    e600:	d003      	beq.n	e60a <LORAWAN_RxDone+0x28a>
    e602:	4b2b      	ldr	r3, [pc, #172]	; (e6b0 <LORAWAN_RxDone+0x330>)
    e604:	4798      	blx	r3
    e606:	4b2b      	ldr	r3, [pc, #172]	; (e6b4 <LORAWAN_RxDone+0x334>)
    e608:	4798      	blx	r3
    e60a:	2105      	movs	r1, #5
    e60c:	4b2c      	ldr	r3, [pc, #176]	; (e6c0 <LORAWAN_RxDone+0x340>)
    e60e:	2001      	movs	r0, #1
    e610:	4798      	blx	r3
    e612:	4d37      	ldr	r5, [pc, #220]	; (e6f0 <LORAWAN_RxDone+0x370>)
    e614:	003a      	movs	r2, r7
    e616:	0028      	movs	r0, r5
    e618:	0031      	movs	r1, r6
    e61a:	4b33      	ldr	r3, [pc, #204]	; (e6e8 <LORAWAN_RxDone+0x368>)
    e61c:	4798      	blx	r3
    e61e:	2301      	movs	r3, #1
    e620:	0028      	movs	r0, r5
    e622:	7163      	strb	r3, [r4, #5]
    e624:	4a1e      	ldr	r2, [pc, #120]	; (e6a0 <LORAWAN_RxDone+0x320>)
    e626:	18db      	adds	r3, r3, r3
    e628:	2100      	movs	r1, #0
    e62a:	4d30      	ldr	r5, [pc, #192]	; (e6ec <LORAWAN_RxDone+0x36c>)
    e62c:	47a8      	blx	r5
    e62e:	2800      	cmp	r0, #0
    e630:	d003      	beq.n	e63a <LORAWAN_RxDone+0x2ba>
    e632:	4b1f      	ldr	r3, [pc, #124]	; (e6b0 <LORAWAN_RxDone+0x330>)
    e634:	4798      	blx	r3
    e636:	4b1f      	ldr	r3, [pc, #124]	; (e6b4 <LORAWAN_RxDone+0x334>)
    e638:	4798      	blx	r3
    e63a:	4b21      	ldr	r3, [pc, #132]	; (e6c0 <LORAWAN_RxDone+0x340>)
    e63c:	2104      	movs	r1, #4
    e63e:	2001      	movs	r0, #1
    e640:	4798      	blx	r3
    e642:	23e2      	movs	r3, #226	; 0xe2
    e644:	33ff      	adds	r3, #255	; 0xff
    e646:	5ce3      	ldrb	r3, [r4, r3]
    e648:	2b00      	cmp	r3, #0
    e64a:	d017      	beq.n	e67c <LORAWAN_RxDone+0x2fc>
    e64c:	4929      	ldr	r1, [pc, #164]	; (e6f4 <LORAWAN_RxDone+0x374>)
    e64e:	2002      	movs	r0, #2
    e650:	4c29      	ldr	r4, [pc, #164]	; (e6f8 <LORAWAN_RxDone+0x378>)
    e652:	47a0      	blx	r4
    e654:	2800      	cmp	r0, #0
    e656:	d008      	beq.n	e66a <LORAWAN_RxDone+0x2ea>
    e658:	4b15      	ldr	r3, [pc, #84]	; (e6b0 <LORAWAN_RxDone+0x330>)
    e65a:	4798      	blx	r3
    e65c:	4b15      	ldr	r3, [pc, #84]	; (e6b4 <LORAWAN_RxDone+0x334>)
    e65e:	4798      	blx	r3
    e660:	2023      	movs	r0, #35	; 0x23
    e662:	e6f2      	b.n	e44a <LORAWAN_RxDone+0xca>
    e664:	4b1e      	ldr	r3, [pc, #120]	; (e6e0 <LORAWAN_RxDone+0x360>)
    e666:	4798      	blx	r3
    e668:	e7a4      	b.n	e5b4 <LORAWAN_RxDone+0x234>
    e66a:	4924      	ldr	r1, [pc, #144]	; (e6fc <LORAWAN_RxDone+0x37c>)
    e66c:	2001      	movs	r0, #1
    e66e:	47a0      	blx	r4
    e670:	2800      	cmp	r0, #0
    e672:	d1f1      	bne.n	e658 <LORAWAN_RxDone+0x2d8>
    e674:	4b22      	ldr	r3, [pc, #136]	; (e700 <LORAWAN_RxDone+0x380>)
    e676:	4798      	blx	r3
    e678:	2008      	movs	r0, #8
    e67a:	e6e6      	b.n	e44a <LORAWAN_RxDone+0xca>
    e67c:	0020      	movs	r0, r4
    e67e:	0021      	movs	r1, r4
    e680:	2210      	movs	r2, #16
    e682:	3115      	adds	r1, #21
    e684:	4d09      	ldr	r5, [pc, #36]	; (e6ac <LORAWAN_RxDone+0x32c>)
    e686:	3035      	adds	r0, #53	; 0x35
    e688:	47a8      	blx	r5
    e68a:	0020      	movs	r0, r4
    e68c:	1d61      	adds	r1, r4, #5
    e68e:	2210      	movs	r2, #16
    e690:	3025      	adds	r0, #37	; 0x25
    e692:	47a8      	blx	r5
    e694:	e7ee      	b.n	e674 <LORAWAN_RxDone+0x2f4>
    e696:	46c0      	nop			; (mov r8, r8)
    e698:	20001850 	.word	0x20001850
    e69c:	200017d4 	.word	0x200017d4
    e6a0:	20001819 	.word	0x20001819
    e6a4:	20000ea8 	.word	0x20000ea8
    e6a8:	0000944d 	.word	0x0000944d
    e6ac:	0001516d 	.word	0x0001516d
    e6b0:	0000c309 	.word	0x0000c309
    e6b4:	0000deb9 	.word	0x0000deb9
    e6b8:	00009415 	.word	0x00009415
    e6bc:	00009e61 	.word	0x00009e61
    e6c0:	00009729 	.word	0x00009729
    e6c4:	0000b9d9 	.word	0x0000b9d9
    e6c8:	0000c1d5 	.word	0x0000c1d5
    e6cc:	00009269 	.word	0x00009269
    e6d0:	00009141 	.word	0x00009141
    e6d4:	200018b3 	.word	0x200018b3
    e6d8:	0000915d 	.word	0x0000915d
    e6dc:	0000df2d 	.word	0x0000df2d
    e6e0:	0000e331 	.word	0x0000e331
    e6e4:	200017e9 	.word	0x200017e9
    e6e8:	0000bcc5 	.word	0x0000bcc5
    e6ec:	0000943d 	.word	0x0000943d
    e6f0:	200017d9 	.word	0x200017d9
    e6f4:	200017f9 	.word	0x200017f9
    e6f8:	00009449 	.word	0x00009449
    e6fc:	20001809 	.word	0x20001809
    e700:	0000bbd5 	.word	0x0000bbd5
    e704:	20bf      	movs	r0, #191	; 0xbf
    e706:	3a60      	subs	r2, #96	; 0x60
    e708:	4002      	ands	r2, r0
    e70a:	d000      	beq.n	e70e <LORAWAN_RxDone+0x38e>
    e70c:	e3a2      	b.n	ee54 <LORAWAN_RxDone+0xad4>
    e70e:	38be      	subs	r0, #190	; 0xbe
    e710:	4203      	tst	r3, r0
    e712:	d100      	bne.n	e716 <LORAWAN_RxDone+0x396>
    e714:	e39e      	b.n	ee54 <LORAWAN_RxDone+0xad4>
    e716:	6823      	ldr	r3, [r4, #0]
    e718:	0a18      	lsrs	r0, r3, #8
    e71a:	7923      	ldrb	r3, [r4, #4]
    e71c:	061b      	lsls	r3, r3, #24
    e71e:	4303      	orrs	r3, r0
    e720:	0020      	movs	r0, r4
    e722:	30d8      	adds	r0, #216	; 0xd8
    e724:	7002      	strb	r2, [r0, #0]
    e726:	78bd      	ldrb	r5, [r7, #2]
    e728:	787e      	ldrb	r6, [r7, #1]
    e72a:	022d      	lsls	r5, r5, #8
    e72c:	432e      	orrs	r6, r5
    e72e:	78fd      	ldrb	r5, [r7, #3]
    e730:	7938      	ldrb	r0, [r7, #4]
    e732:	042d      	lsls	r5, r5, #16
    e734:	4335      	orrs	r5, r6
    e736:	0600      	lsls	r0, r0, #24
    e738:	4305      	orrs	r5, r0
    e73a:	42ab      	cmp	r3, r5
    e73c:	d07b      	beq.n	e836 <LORAWAN_RxDone+0x4b6>
    e73e:	2522      	movs	r5, #34	; 0x22
    e740:	ab04      	add	r3, sp, #16
    e742:	18ed      	adds	r5, r5, r3
    e744:	7a3a      	ldrb	r2, [r7, #8]
    e746:	0949      	lsrs	r1, r1, #5
    e748:	002b      	movs	r3, r5
    e74a:	0038      	movs	r0, r7
    e74c:	4e97      	ldr	r6, [pc, #604]	; (e9ac <LORAWAN_RxDone+0x62c>)
    e74e:	47b0      	blx	r6
    e750:	2808      	cmp	r0, #8
    e752:	d159      	bne.n	e808 <LORAWAN_RxDone+0x488>
    e754:	232c      	movs	r3, #44	; 0x2c
    e756:	782a      	ldrb	r2, [r5, #0]
    e758:	4353      	muls	r3, r2
    e75a:	001a      	movs	r2, r3
    e75c:	3229      	adds	r2, #41	; 0x29
    e75e:	32ff      	adds	r2, #255	; 0xff
    e760:	1912      	adds	r2, r2, r4
    e762:	18e4      	adds	r4, r4, r3
    e764:	2301      	movs	r3, #1
    e766:	34fc      	adds	r4, #252	; 0xfc
    e768:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    e76a:	9206      	str	r2, [sp, #24]
    e76c:	9308      	str	r3, [sp, #32]
    e76e:	4c90      	ldr	r4, [pc, #576]	; (e9b0 <LORAWAN_RxDone+0x630>)
    e770:	0021      	movs	r1, r4
    e772:	0020      	movs	r0, r4
    e774:	3108      	adds	r1, #8
    e776:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
    e778:	3084      	adds	r0, #132	; 0x84
    e77a:	9309      	str	r3, [sp, #36]	; 0x24
    e77c:	79fb      	ldrb	r3, [r7, #7]
    e77e:	79ba      	ldrb	r2, [r7, #6]
    e780:	021b      	lsls	r3, r3, #8
    e782:	4313      	orrs	r3, r2
    e784:	8802      	ldrh	r2, [r0, #0]
    e786:	4293      	cmp	r3, r2
    e788:	d37a      	bcc.n	e880 <LORAWAN_RxDone+0x500>
    e78a:	0026      	movs	r6, r4
    e78c:	36d0      	adds	r6, #208	; 0xd0
    e78e:	8836      	ldrh	r6, [r6, #0]
    e790:	1a9a      	subs	r2, r3, r2
    e792:	42b2      	cmp	r2, r6
    e794:	dd53      	ble.n	e83e <LORAWAN_RxDone+0x4be>
    e796:	0022      	movs	r2, r4
    e798:	2101      	movs	r1, #1
    e79a:	328c      	adds	r2, #140	; 0x8c
    e79c:	7813      	ldrb	r3, [r2, #0]
    e79e:	438b      	bics	r3, r1
    e7a0:	7013      	strb	r3, [r2, #0]
    e7a2:	0023      	movs	r3, r4
    e7a4:	33f4      	adds	r3, #244	; 0xf4
    e7a6:	781b      	ldrb	r3, [r3, #0]
    e7a8:	428b      	cmp	r3, r1
    e7aa:	d108      	bne.n	e7be <LORAWAN_RxDone+0x43e>
    e7ac:	0023      	movs	r3, r4
    e7ae:	220e      	movs	r2, #14
    e7b0:	337c      	adds	r3, #124	; 0x7c
    e7b2:	781b      	ldrb	r3, [r3, #0]
    e7b4:	4013      	ands	r3, r2
    e7b6:	2b06      	cmp	r3, #6
    e7b8:	d101      	bne.n	e7be <LORAWAN_RxDone+0x43e>
    e7ba:	4b7e      	ldr	r3, [pc, #504]	; (e9b4 <LORAWAN_RxDone+0x634>)
    e7bc:	4798      	blx	r3
    e7be:	497e      	ldr	r1, [pc, #504]	; (e9b8 <LORAWAN_RxDone+0x638>)
    e7c0:	784a      	ldrb	r2, [r1, #1]
    e7c2:	780b      	ldrb	r3, [r1, #0]
    e7c4:	0212      	lsls	r2, r2, #8
    e7c6:	431a      	orrs	r2, r3
    e7c8:	788b      	ldrb	r3, [r1, #2]
    e7ca:	041b      	lsls	r3, r3, #16
    e7cc:	431a      	orrs	r2, r3
    e7ce:	78cb      	ldrb	r3, [r1, #3]
    e7d0:	061b      	lsls	r3, r3, #24
    e7d2:	4313      	orrs	r3, r2
    e7d4:	d008      	beq.n	e7e8 <LORAWAN_RxDone+0x468>
    e7d6:	0022      	movs	r2, r4
    e7d8:	2120      	movs	r1, #32
    e7da:	328c      	adds	r2, #140	; 0x8c
    e7dc:	7813      	ldrb	r3, [r2, #0]
    e7de:	2017      	movs	r0, #23
    e7e0:	438b      	bics	r3, r1
    e7e2:	7013      	strb	r3, [r2, #0]
    e7e4:	4b75      	ldr	r3, [pc, #468]	; (e9bc <LORAWAN_RxDone+0x63c>)
    e7e6:	4798      	blx	r3
    e7e8:	2501      	movs	r5, #1
    e7ea:	347c      	adds	r4, #124	; 0x7c
    e7ec:	7863      	ldrb	r3, [r4, #1]
    e7ee:	43ab      	bics	r3, r5
    e7f0:	7063      	strb	r3, [r4, #1]
    e7f2:	78a3      	ldrb	r3, [r4, #2]
    e7f4:	432b      	orrs	r3, r5
    e7f6:	70a3      	strb	r3, [r4, #2]
    e7f8:	4b71      	ldr	r3, [pc, #452]	; (e9c0 <LORAWAN_RxDone+0x640>)
    e7fa:	4798      	blx	r3
    e7fc:	210b      	movs	r1, #11
    e7fe:	0028      	movs	r0, r5
    e800:	4b70      	ldr	r3, [pc, #448]	; (e9c4 <LORAWAN_RxDone+0x644>)
    e802:	4798      	blx	r3
    e804:	200d      	movs	r0, #13
    e806:	e620      	b.n	e44a <LORAWAN_RxDone+0xca>
    e808:	220e      	movs	r2, #14
    e80a:	4b6f      	ldr	r3, [pc, #444]	; (e9c8 <LORAWAN_RxDone+0x648>)
    e80c:	781b      	ldrb	r3, [r3, #0]
    e80e:	4013      	ands	r3, r2
    e810:	2b0a      	cmp	r3, #10
    e812:	d008      	beq.n	e826 <LORAWAN_RxDone+0x4a6>
    e814:	2b06      	cmp	r3, #6
    e816:	d001      	beq.n	e81c <LORAWAN_RxDone+0x49c>
    e818:	200a      	movs	r0, #10
    e81a:	e616      	b.n	e44a <LORAWAN_RxDone+0xca>
    e81c:	0023      	movs	r3, r4
    e81e:	33f0      	adds	r3, #240	; 0xf0
    e820:	781b      	ldrb	r3, [r3, #0]
    e822:	2b00      	cmp	r3, #0
    e824:	d0f8      	beq.n	e818 <LORAWAN_RxDone+0x498>
    e826:	2220      	movs	r2, #32
    e828:	201e      	movs	r0, #30
    e82a:	348c      	adds	r4, #140	; 0x8c
    e82c:	7823      	ldrb	r3, [r4, #0]
    e82e:	4393      	bics	r3, r2
    e830:	7023      	strb	r3, [r4, #0]
    e832:	4b62      	ldr	r3, [pc, #392]	; (e9bc <LORAWAN_RxDone+0x63c>)
    e834:	e5f6      	b.n	e424 <LORAWAN_RxDone+0xa4>
    e836:	4b65      	ldr	r3, [pc, #404]	; (e9cc <LORAWAN_RxDone+0x64c>)
    e838:	9208      	str	r2, [sp, #32]
    e83a:	9306      	str	r3, [sp, #24]
    e83c:	e797      	b.n	e76e <LORAWAN_RxDone+0x3ee>
    e83e:	8003      	strh	r3, [r0, #0]
    e840:	23f0      	movs	r3, #240	; 0xf0
    e842:	005b      	lsls	r3, r3, #1
    e844:	5ce2      	ldrb	r2, [r4, r3]
    e846:	2a00      	cmp	r2, #0
    e848:	d113      	bne.n	e872 <LORAWAN_RxDone+0x4f2>
    e84a:	210a      	movs	r1, #10
    e84c:	2001      	movs	r0, #1
    e84e:	4b5d      	ldr	r3, [pc, #372]	; (e9c4 <LORAWAN_RxDone+0x644>)
    e850:	4798      	blx	r3
    e852:	4b57      	ldr	r3, [pc, #348]	; (e9b0 <LORAWAN_RxDone+0x630>)
    e854:	001a      	movs	r2, r3
    e856:	3208      	adds	r2, #8
    e858:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
    e85a:	1c4a      	adds	r2, r1, #1
    e85c:	d13f      	bne.n	e8de <LORAWAN_RxDone+0x55e>
    e85e:	2401      	movs	r4, #1
    e860:	337c      	adds	r3, #124	; 0x7c
    e862:	789a      	ldrb	r2, [r3, #2]
    e864:	4322      	orrs	r2, r4
    e866:	709a      	strb	r2, [r3, #2]
    e868:	4b55      	ldr	r3, [pc, #340]	; (e9c0 <LORAWAN_RxDone+0x640>)
    e86a:	4798      	blx	r3
    e86c:	210b      	movs	r1, #11
    e86e:	0020      	movs	r0, r4
    e870:	e7c6      	b.n	e800 <LORAWAN_RxDone+0x480>
    e872:	2301      	movs	r3, #1
    e874:	4093      	lsls	r3, r2
    e876:	6fca      	ldr	r2, [r1, #124]	; 0x7c
    e878:	3b01      	subs	r3, #1
    e87a:	421a      	tst	r2, r3
    e87c:	d0e5      	beq.n	e84a <LORAWAN_RxDone+0x4ca>
    e87e:	e7e8      	b.n	e852 <LORAWAN_RxDone+0x4d2>
    e880:	4e53      	ldr	r6, [pc, #332]	; (e9d0 <LORAWAN_RxDone+0x650>)
    e882:	1a9a      	subs	r2, r3, r2
    e884:	1992      	adds	r2, r2, r6
    e886:	4e53      	ldr	r6, [pc, #332]	; (e9d4 <LORAWAN_RxDone+0x654>)
    e888:	42b2      	cmp	r2, r6
    e88a:	dc06      	bgt.n	e89a <LORAWAN_RxDone+0x51a>
    e88c:	0022      	movs	r2, r4
    e88e:	8003      	strh	r3, [r0, #0]
    e890:	3286      	adds	r2, #134	; 0x86
    e892:	8813      	ldrh	r3, [r2, #0]
    e894:	3301      	adds	r3, #1
    e896:	8013      	strh	r3, [r2, #0]
    e898:	e7d2      	b.n	e840 <LORAWAN_RxDone+0x4c0>
    e89a:	0023      	movs	r3, r4
    e89c:	33f4      	adds	r3, #244	; 0xf4
    e89e:	781b      	ldrb	r3, [r3, #0]
    e8a0:	2b01      	cmp	r3, #1
    e8a2:	d108      	bne.n	e8b6 <LORAWAN_RxDone+0x536>
    e8a4:	0023      	movs	r3, r4
    e8a6:	220e      	movs	r2, #14
    e8a8:	337c      	adds	r3, #124	; 0x7c
    e8aa:	781b      	ldrb	r3, [r3, #0]
    e8ac:	4013      	ands	r3, r2
    e8ae:	2b06      	cmp	r3, #6
    e8b0:	d101      	bne.n	e8b6 <LORAWAN_RxDone+0x536>
    e8b2:	4b40      	ldr	r3, [pc, #256]	; (e9b4 <LORAWAN_RxDone+0x634>)
    e8b4:	4798      	blx	r3
    e8b6:	4940      	ldr	r1, [pc, #256]	; (e9b8 <LORAWAN_RxDone+0x638>)
    e8b8:	784a      	ldrb	r2, [r1, #1]
    e8ba:	780b      	ldrb	r3, [r1, #0]
    e8bc:	0212      	lsls	r2, r2, #8
    e8be:	431a      	orrs	r2, r3
    e8c0:	788b      	ldrb	r3, [r1, #2]
    e8c2:	041b      	lsls	r3, r3, #16
    e8c4:	431a      	orrs	r2, r3
    e8c6:	78cb      	ldrb	r3, [r1, #3]
    e8c8:	061b      	lsls	r3, r3, #24
    e8ca:	4313      	orrs	r3, r2
    e8cc:	d100      	bne.n	e8d0 <LORAWAN_RxDone+0x550>
    e8ce:	e5aa      	b.n	e426 <LORAWAN_RxDone+0xa6>
    e8d0:	2220      	movs	r2, #32
    e8d2:	348c      	adds	r4, #140	; 0x8c
    e8d4:	7823      	ldrb	r3, [r4, #0]
    e8d6:	2017      	movs	r0, #23
    e8d8:	4393      	bics	r3, r2
    e8da:	7023      	strb	r3, [r4, #0]
    e8dc:	e7a9      	b.n	e832 <LORAWAN_RxDone+0x4b2>
    e8de:	9b07      	ldr	r3, [sp, #28]
    e8e0:	9500      	str	r5, [sp, #0]
    e8e2:	1f1e      	subs	r6, r3, #4
    e8e4:	b2f2      	uxtb	r2, r6
    e8e6:	2349      	movs	r3, #73	; 0x49
    e8e8:	2001      	movs	r0, #1
    e8ea:	4c3b      	ldr	r4, [pc, #236]	; (e9d8 <LORAWAN_RxDone+0x658>)
    e8ec:	47a0      	blx	r4
    e8ee:	4d3b      	ldr	r5, [pc, #236]	; (e9dc <LORAWAN_RxDone+0x65c>)
    e8f0:	4c3b      	ldr	r4, [pc, #236]	; (e9e0 <LORAWAN_RxDone+0x660>)
    e8f2:	2210      	movs	r2, #16
    e8f4:	0021      	movs	r1, r4
    e8f6:	4b3b      	ldr	r3, [pc, #236]	; (e9e4 <LORAWAN_RxDone+0x664>)
    e8f8:	0028      	movs	r0, r5
    e8fa:	4798      	blx	r3
    e8fc:	0032      	movs	r2, r6
    e8fe:	4b39      	ldr	r3, [pc, #228]	; (e9e4 <LORAWAN_RxDone+0x664>)
    e900:	0039      	movs	r1, r7
    e902:	4839      	ldr	r0, [pc, #228]	; (e9e8 <LORAWAN_RxDone+0x668>)
    e904:	4798      	blx	r3
    e906:	9b07      	ldr	r3, [sp, #28]
    e908:	9a08      	ldr	r2, [sp, #32]
    e90a:	330c      	adds	r3, #12
    e90c:	b2db      	uxtb	r3, r3
    e90e:	9300      	str	r3, [sp, #0]
    e910:	002b      	movs	r3, r5
    e912:	2a00      	cmp	r2, #0
    e914:	d038      	beq.n	e988 <LORAWAN_RxDone+0x608>
    e916:	0022      	movs	r2, r4
    e918:	2104      	movs	r1, #4
    e91a:	4c34      	ldr	r4, [pc, #208]	; (e9ec <LORAWAN_RxDone+0x66c>)
    e91c:	9806      	ldr	r0, [sp, #24]
    e91e:	47a0      	blx	r4
    e920:	2204      	movs	r2, #4
    e922:	492f      	ldr	r1, [pc, #188]	; (e9e0 <LORAWAN_RxDone+0x660>)
    e924:	4c2f      	ldr	r4, [pc, #188]	; (e9e4 <LORAWAN_RxDone+0x664>)
    e926:	a80d      	add	r0, sp, #52	; 0x34
    e928:	47a0      	blx	r4
    e92a:	2204      	movs	r2, #4
    e92c:	19b9      	adds	r1, r7, r6
    e92e:	a810      	add	r0, sp, #64	; 0x40
    e930:	47a0      	blx	r4
    e932:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e934:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e936:	4293      	cmp	r3, r2
    e938:	d029      	beq.n	e98e <LORAWAN_RxDone+0x60e>
    e93a:	4c1d      	ldr	r4, [pc, #116]	; (e9b0 <LORAWAN_RxDone+0x630>)
    e93c:	0023      	movs	r3, r4
    e93e:	33f4      	adds	r3, #244	; 0xf4
    e940:	781b      	ldrb	r3, [r3, #0]
    e942:	2b01      	cmp	r3, #1
    e944:	d108      	bne.n	e958 <LORAWAN_RxDone+0x5d8>
    e946:	0023      	movs	r3, r4
    e948:	220e      	movs	r2, #14
    e94a:	337c      	adds	r3, #124	; 0x7c
    e94c:	781b      	ldrb	r3, [r3, #0]
    e94e:	4013      	ands	r3, r2
    e950:	2b06      	cmp	r3, #6
    e952:	d101      	bne.n	e958 <LORAWAN_RxDone+0x5d8>
    e954:	4b17      	ldr	r3, [pc, #92]	; (e9b4 <LORAWAN_RxDone+0x634>)
    e956:	4798      	blx	r3
    e958:	4917      	ldr	r1, [pc, #92]	; (e9b8 <LORAWAN_RxDone+0x638>)
    e95a:	784a      	ldrb	r2, [r1, #1]
    e95c:	780b      	ldrb	r3, [r1, #0]
    e95e:	0212      	lsls	r2, r2, #8
    e960:	431a      	orrs	r2, r3
    e962:	788b      	ldrb	r3, [r1, #2]
    e964:	041b      	lsls	r3, r3, #16
    e966:	431a      	orrs	r2, r3
    e968:	78cb      	ldrb	r3, [r1, #3]
    e96a:	061b      	lsls	r3, r3, #24
    e96c:	4313      	orrs	r3, r2
    e96e:	d100      	bne.n	e972 <LORAWAN_RxDone+0x5f2>
    e970:	e559      	b.n	e426 <LORAWAN_RxDone+0xa6>
    e972:	0022      	movs	r2, r4
    e974:	2120      	movs	r1, #32
    e976:	328c      	adds	r2, #140	; 0x8c
    e978:	7813      	ldrb	r3, [r2, #0]
    e97a:	3408      	adds	r4, #8
    e97c:	438b      	bics	r3, r1
    e97e:	7013      	strb	r3, [r2, #0]
    e980:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e982:	2018      	movs	r0, #24
    e984:	67e3      	str	r3, [r4, #124]	; 0x7c
    e986:	e754      	b.n	e832 <LORAWAN_RxDone+0x4b2>
    e988:	0022      	movs	r2, r4
    e98a:	2102      	movs	r1, #2
    e98c:	e7c5      	b.n	e91a <LORAWAN_RxDone+0x59a>
    e98e:	9b08      	ldr	r3, [sp, #32]
    e990:	2b00      	cmp	r3, #0
    e992:	d02f      	beq.n	e9f4 <LORAWAN_RxDone+0x674>
    e994:	2322      	movs	r3, #34	; 0x22
    e996:	aa04      	add	r2, sp, #16
    e998:	189b      	adds	r3, r3, r2
    e99a:	781b      	ldrb	r3, [r3, #0]
    e99c:	003a      	movs	r2, r7
    e99e:	9907      	ldr	r1, [sp, #28]
    e9a0:	0038      	movs	r0, r7
    e9a2:	4c13      	ldr	r4, [pc, #76]	; (e9f0 <LORAWAN_RxDone+0x670>)
    e9a4:	47a0      	blx	r4
    e9a6:	2001      	movs	r0, #1
    e9a8:	e54f      	b.n	e44a <LORAWAN_RxDone+0xca>
    e9aa:	46c0      	nop			; (mov r8, r8)
    e9ac:	0000f94d 	.word	0x0000f94d
    e9b0:	200017d4 	.word	0x200017d4
    e9b4:	0000bd99 	.word	0x0000bd99
    e9b8:	20001acc 	.word	0x20001acc
    e9bc:	0000cddd 	.word	0x0000cddd
    e9c0:	0000deb9 	.word	0x0000deb9
    e9c4:	00009729 	.word	0x00009729
    e9c8:	20001850 	.word	0x20001850
    e9cc:	200017f9 	.word	0x200017f9
    e9d0:	0000ffff 	.word	0x0000ffff
    e9d4:	00003fff 	.word	0x00003fff
    e9d8:	0000bd01 	.word	0x0000bd01
    e9dc:	20001ad4 	.word	0x20001ad4
    e9e0:	20000ea8 	.word	0x20000ea8
    e9e4:	0001516d 	.word	0x0001516d
    e9e8:	20001ae4 	.word	0x20001ae4
    e9ec:	0000944d 	.word	0x0000944d
    e9f0:	0000f9c1 	.word	0x0000f9c1
    e9f4:	4cd7      	ldr	r4, [pc, #860]	; (ed54 <LORAWAN_RxDone+0x9d4>)
    e9f6:	466a      	mov	r2, sp
    e9f8:	2120      	movs	r1, #32
    e9fa:	0023      	movs	r3, r4
    e9fc:	1852      	adds	r2, r2, r1
    e9fe:	7812      	ldrb	r2, [r2, #0]
    ea00:	33db      	adds	r3, #219	; 0xdb
    ea02:	701a      	strb	r2, [r3, #0]
    ea04:	797b      	ldrb	r3, [r7, #5]
    ea06:	2b7f      	cmp	r3, #127	; 0x7f
    ea08:	d909      	bls.n	ea1e <LORAWAN_RxDone+0x69e>
    ea0a:	0022      	movs	r2, r4
    ea0c:	2320      	movs	r3, #32
    ea0e:	327c      	adds	r2, #124	; 0x7c
    ea10:	7811      	ldrb	r1, [r2, #0]
    ea12:	2001      	movs	r0, #1
    ea14:	430b      	orrs	r3, r1
    ea16:	7013      	strb	r3, [r2, #0]
    ea18:	210b      	movs	r1, #11
    ea1a:	4bcf      	ldr	r3, [pc, #828]	; (ed58 <LORAWAN_RxDone+0x9d8>)
    ea1c:	4798      	blx	r3
    ea1e:	797b      	ldrb	r3, [r7, #5]
    ea20:	06db      	lsls	r3, r3, #27
    ea22:	d505      	bpl.n	ea30 <LORAWAN_RxDone+0x6b0>
    ea24:	0022      	movs	r2, r4
    ea26:	2308      	movs	r3, #8
    ea28:	328c      	adds	r2, #140	; 0x8c
    ea2a:	7811      	ldrb	r1, [r2, #0]
    ea2c:	430b      	orrs	r3, r1
    ea2e:	7013      	strb	r3, [r2, #0]
    ea30:	797b      	ldrb	r3, [r7, #5]
    ea32:	065b      	lsls	r3, r3, #25
    ea34:	d505      	bpl.n	ea42 <LORAWAN_RxDone+0x6c2>
    ea36:	0022      	movs	r2, r4
    ea38:	2310      	movs	r3, #16
    ea3a:	328c      	adds	r2, #140	; 0x8c
    ea3c:	7811      	ldrb	r1, [r2, #0]
    ea3e:	430b      	orrs	r3, r1
    ea40:	7013      	strb	r3, [r2, #0]
    ea42:	221f      	movs	r2, #31
    ea44:	783b      	ldrb	r3, [r7, #0]
    ea46:	4393      	bics	r3, r2
    ea48:	2ba0      	cmp	r3, #160	; 0xa0
    ea4a:	d105      	bne.n	ea58 <LORAWAN_RxDone+0x6d8>
    ea4c:	0022      	movs	r2, r4
    ea4e:	328c      	adds	r2, #140	; 0x8c
    ea50:	7811      	ldrb	r1, [r2, #0]
    ea52:	3b9e      	subs	r3, #158	; 0x9e
    ea54:	430b      	orrs	r3, r1
    ea56:	7013      	strb	r3, [r2, #0]
    ea58:	7979      	ldrb	r1, [r7, #5]
    ea5a:	070b      	lsls	r3, r1, #28
    ea5c:	d100      	bne.n	ea60 <LORAWAN_RxDone+0x6e0>
    ea5e:	e0da      	b.n	ec16 <LORAWAN_RxDone+0x896>
    ea60:	0709      	lsls	r1, r1, #28
    ea62:	0f09      	lsrs	r1, r1, #28
    ea64:	187b      	adds	r3, r7, r1
    ea66:	7a1b      	ldrb	r3, [r3, #8]
    ea68:	2b00      	cmp	r3, #0
    ea6a:	d100      	bne.n	ea6e <LORAWAN_RxDone+0x6ee>
    ea6c:	e0aa      	b.n	ebc4 <LORAWAN_RxDone+0x844>
    ea6e:	0038      	movs	r0, r7
    ea70:	4bba      	ldr	r3, [pc, #744]	; (ed5c <LORAWAN_RxDone+0x9dc>)
    ea72:	3008      	adds	r0, #8
    ea74:	4798      	blx	r3
    ea76:	2301      	movs	r3, #1
    ea78:	0006      	movs	r6, r0
    ea7a:	9308      	str	r3, [sp, #32]
    ea7c:	7978      	ldrb	r0, [r7, #5]
    ea7e:	9907      	ldr	r1, [sp, #28]
    ea80:	0702      	lsls	r2, r0, #28
    ea82:	0f12      	lsrs	r2, r2, #28
    ea84:	0013      	movs	r3, r2
    ea86:	330c      	adds	r3, #12
    ea88:	4299      	cmp	r1, r3
    ea8a:	d100      	bne.n	ea8e <LORAWAN_RxDone+0x70e>
    ea8c:	e0fa      	b.n	ec84 <LORAWAN_RxDone+0x904>
    ea8e:	7833      	ldrb	r3, [r6, #0]
    ea90:	1a89      	subs	r1, r1, r2
    ea92:	b2c9      	uxtb	r1, r1
    ea94:	9309      	str	r3, [sp, #36]	; 0x24
    ea96:	000b      	movs	r3, r1
    ea98:	3219      	adds	r2, #25
    ea9a:	3b0c      	subs	r3, #12
    ea9c:	4694      	mov	ip, r2
    ea9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    eaa0:	b2db      	uxtb	r3, r3
    eaa2:	9306      	str	r3, [sp, #24]
    eaa4:	1c75      	adds	r5, r6, #1
    eaa6:	4bab      	ldr	r3, [pc, #684]	; (ed54 <LORAWAN_RxDone+0x9d4>)
    eaa8:	2a00      	cmp	r2, #0
    eaaa:	d100      	bne.n	eaae <LORAWAN_RxDone+0x72e>
    eaac:	e0b6      	b.n	ec1c <LORAWAN_RxDone+0x89c>
    eaae:	681a      	ldr	r2, [r3, #0]
    eab0:	0018      	movs	r0, r3
    eab2:	791b      	ldrb	r3, [r3, #4]
    eab4:	0a14      	lsrs	r4, r2, #8
    eab6:	061b      	lsls	r3, r3, #24
    eab8:	4323      	orrs	r3, r4
    eaba:	9304      	str	r3, [sp, #16]
    eabc:	4ba8      	ldr	r3, [pc, #672]	; (ed60 <LORAWAN_RxDone+0x9e0>)
    eabe:	2201      	movs	r2, #1
    eac0:	9303      	str	r3, [sp, #12]
    eac2:	4663      	mov	r3, ip
    eac4:	9302      	str	r3, [sp, #8]
    eac6:	4ba7      	ldr	r3, [pc, #668]	; (ed64 <LORAWAN_RxDone+0x9e4>)
    eac8:	3008      	adds	r0, #8
    eaca:	390d      	subs	r1, #13
    eacc:	9201      	str	r2, [sp, #4]
    eace:	9300      	str	r3, [sp, #0]
    ead0:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
    ead2:	b2c9      	uxtb	r1, r1
    ead4:	0028      	movs	r0, r5
    ead6:	4ca4      	ldr	r4, [pc, #656]	; (ed68 <LORAWAN_RxDone+0x9e8>)
    ead8:	47a0      	blx	r4
    eada:	2800      	cmp	r0, #0
    eadc:	d004      	beq.n	eae8 <LORAWAN_RxDone+0x768>
    eade:	4ba3      	ldr	r3, [pc, #652]	; (ed6c <LORAWAN_RxDone+0x9ec>)
    eae0:	4798      	blx	r3
    eae2:	201f      	movs	r0, #31
    eae4:	4ba2      	ldr	r3, [pc, #648]	; (ed70 <LORAWAN_RxDone+0x9f0>)
    eae6:	4798      	blx	r3
    eae8:	4c9a      	ldr	r4, [pc, #616]	; (ed54 <LORAWAN_RxDone+0x9d4>)
    eaea:	2300      	movs	r3, #0
    eaec:	0022      	movs	r2, r4
    eaee:	32c2      	adds	r2, #194	; 0xc2
    eaf0:	8013      	strh	r3, [r2, #0]
    eaf2:	0022      	movs	r2, r4
    eaf4:	32ed      	adds	r2, #237	; 0xed
    eaf6:	7013      	strb	r3, [r2, #0]
    eaf8:	0022      	movs	r2, r4
    eafa:	2110      	movs	r1, #16
    eafc:	328c      	adds	r2, #140	; 0x8c
    eafe:	7813      	ldrb	r3, [r2, #0]
    eb00:	438b      	bics	r3, r1
    eb02:	7013      	strb	r3, [r2, #0]
    eb04:	0023      	movs	r3, r4
    eb06:	2201      	movs	r2, #1
    eb08:	337c      	adds	r3, #124	; 0x7c
    eb0a:	7859      	ldrb	r1, [r3, #1]
    eb0c:	430a      	orrs	r2, r1
    eb0e:	705a      	strb	r2, [r3, #1]
    eb10:	220e      	movs	r2, #14
    eb12:	781b      	ldrb	r3, [r3, #0]
    eb14:	4013      	ands	r3, r2
    eb16:	2b06      	cmp	r3, #6
    eb18:	d109      	bne.n	eb2e <LORAWAN_RxDone+0x7ae>
    eb1a:	0023      	movs	r3, r4
    eb1c:	33f4      	adds	r3, #244	; 0xf4
    eb1e:	781b      	ldrb	r3, [r3, #0]
    eb20:	2b01      	cmp	r3, #1
    eb22:	d104      	bne.n	eb2e <LORAWAN_RxDone+0x7ae>
    eb24:	0023      	movs	r3, r4
    eb26:	33e5      	adds	r3, #229	; 0xe5
    eb28:	7818      	ldrb	r0, [r3, #0]
    eb2a:	4b92      	ldr	r3, [pc, #584]	; (ed74 <LORAWAN_RxDone+0x9f4>)
    eb2c:	4798      	blx	r3
    eb2e:	0025      	movs	r5, r4
    eb30:	2201      	movs	r2, #1
    eb32:	358c      	adds	r5, #140	; 0x8c
    eb34:	782b      	ldrb	r3, [r5, #0]
    eb36:	4213      	tst	r3, r2
    eb38:	d100      	bne.n	eb3c <LORAWAN_RxDone+0x7bc>
    eb3a:	e0e5      	b.n	ed08 <LORAWAN_RxDone+0x988>
    eb3c:	797b      	ldrb	r3, [r7, #5]
    eb3e:	321f      	adds	r2, #31
    eb40:	4213      	tst	r3, r2
    eb42:	d100      	bne.n	eb46 <LORAWAN_RxDone+0x7c6>
    eb44:	e0c6      	b.n	ecd4 <LORAWAN_RxDone+0x954>
    eb46:	4b8c      	ldr	r3, [pc, #560]	; (ed78 <LORAWAN_RxDone+0x9f8>)
    eb48:	4798      	blx	r3
    eb4a:	0023      	movs	r3, r4
    eb4c:	2101      	movs	r1, #1
    eb4e:	337c      	adds	r3, #124	; 0x7c
    eb50:	785a      	ldrb	r2, [r3, #1]
    eb52:	438a      	bics	r2, r1
    eb54:	705a      	strb	r2, [r3, #1]
    eb56:	9a09      	ldr	r2, [sp, #36]	; 0x24
    eb58:	2a00      	cmp	r2, #0
    eb5a:	d100      	bne.n	eb5e <LORAWAN_RxDone+0x7de>
    eb5c:	e09a      	b.n	ec94 <LORAWAN_RxDone+0x914>
    eb5e:	9a06      	ldr	r2, [sp, #24]
    eb60:	0031      	movs	r1, r6
    eb62:	0038      	movs	r0, r7
    eb64:	4b85      	ldr	r3, [pc, #532]	; (ed7c <LORAWAN_RxDone+0x9fc>)
    eb66:	4798      	blx	r3
    eb68:	4b85      	ldr	r3, [pc, #532]	; (ed80 <LORAWAN_RxDone+0xa00>)
    eb6a:	4d7a      	ldr	r5, [pc, #488]	; (ed54 <LORAWAN_RxDone+0x9d4>)
    eb6c:	781b      	ldrb	r3, [r3, #0]
    eb6e:	06db      	lsls	r3, r3, #27
    eb70:	d400      	bmi.n	eb74 <LORAWAN_RxDone+0x7f4>
    eb72:	e166      	b.n	ee42 <LORAWAN_RxDone+0xac2>
    eb74:	2220      	movs	r2, #32
    eb76:	4b83      	ldr	r3, [pc, #524]	; (ed84 <LORAWAN_RxDone+0xa04>)
    eb78:	781b      	ldrb	r3, [r3, #0]
    eb7a:	401a      	ands	r2, r3
    eb7c:	9206      	str	r2, [sp, #24]
    eb7e:	d000      	beq.n	eb82 <LORAWAN_RxDone+0x802>
    eb80:	e15f      	b.n	ee42 <LORAWAN_RxDone+0xac2>
    eb82:	320a      	adds	r2, #10
    eb84:	4213      	tst	r3, r2
    eb86:	d100      	bne.n	eb8a <LORAWAN_RxDone+0x80a>
    eb88:	e15b      	b.n	ee42 <LORAWAN_RxDone+0xac2>
    eb8a:	002b      	movs	r3, r5
    eb8c:	33ec      	adds	r3, #236	; 0xec
    eb8e:	781b      	ldrb	r3, [r3, #0]
    eb90:	a90f      	add	r1, sp, #60	; 0x3c
    eb92:	704b      	strb	r3, [r1, #1]
    eb94:	002e      	movs	r6, r5
    eb96:	2301      	movs	r3, #1
    eb98:	36df      	adds	r6, #223	; 0xdf
    eb9a:	700b      	strb	r3, [r1, #0]
    eb9c:	7833      	ldrb	r3, [r6, #0]
    eb9e:	aa0e      	add	r2, sp, #56	; 0x38
    eba0:	2030      	movs	r0, #48	; 0x30
    eba2:	4f79      	ldr	r7, [pc, #484]	; (ed88 <LORAWAN_RxDone+0xa08>)
    eba4:	708b      	strb	r3, [r1, #2]
    eba6:	47b8      	blx	r7
    eba8:	9007      	str	r0, [sp, #28]
    ebaa:	2808      	cmp	r0, #8
    ebac:	d000      	beq.n	ebb0 <LORAWAN_RxDone+0x830>
    ebae:	e0ff      	b.n	edb0 <LORAWAN_RxDone+0xa30>
    ebb0:	4b76      	ldr	r3, [pc, #472]	; (ed8c <LORAWAN_RxDone+0xa0c>)
    ebb2:	9806      	ldr	r0, [sp, #24]
    ebb4:	4798      	blx	r3
    ebb6:	4b73      	ldr	r3, [pc, #460]	; (ed84 <LORAWAN_RxDone+0xa04>)
    ebb8:	9a07      	ldr	r2, [sp, #28]
    ebba:	781b      	ldrb	r3, [r3, #0]
    ebbc:	4393      	bics	r3, r2
    ebbe:	4a71      	ldr	r2, [pc, #452]	; (ed84 <LORAWAN_RxDone+0xa04>)
    ebc0:	7013      	strb	r3, [r2, #0]
    ebc2:	e6f0      	b.n	e9a6 <LORAWAN_RxDone+0x626>
    ebc4:	0023      	movs	r3, r4
    ebc6:	33f4      	adds	r3, #244	; 0xf4
    ebc8:	781b      	ldrb	r3, [r3, #0]
    ebca:	2b01      	cmp	r3, #1
    ebcc:	d108      	bne.n	ebe0 <LORAWAN_RxDone+0x860>
    ebce:	0023      	movs	r3, r4
    ebd0:	220e      	movs	r2, #14
    ebd2:	337c      	adds	r3, #124	; 0x7c
    ebd4:	781b      	ldrb	r3, [r3, #0]
    ebd6:	4013      	ands	r3, r2
    ebd8:	2b06      	cmp	r3, #6
    ebda:	d101      	bne.n	ebe0 <LORAWAN_RxDone+0x860>
    ebdc:	4b6c      	ldr	r3, [pc, #432]	; (ed90 <LORAWAN_RxDone+0xa10>)
    ebde:	4798      	blx	r3
    ebe0:	496c      	ldr	r1, [pc, #432]	; (ed94 <LORAWAN_RxDone+0xa14>)
    ebe2:	784a      	ldrb	r2, [r1, #1]
    ebe4:	780b      	ldrb	r3, [r1, #0]
    ebe6:	0212      	lsls	r2, r2, #8
    ebe8:	431a      	orrs	r2, r3
    ebea:	788b      	ldrb	r3, [r1, #2]
    ebec:	041b      	lsls	r3, r3, #16
    ebee:	431a      	orrs	r2, r3
    ebf0:	78cb      	ldrb	r3, [r1, #3]
    ebf2:	061b      	lsls	r3, r3, #24
    ebf4:	4313      	orrs	r3, r2
    ebf6:	d008      	beq.n	ec0a <LORAWAN_RxDone+0x88a>
    ebf8:	0022      	movs	r2, r4
    ebfa:	2120      	movs	r1, #32
    ebfc:	328c      	adds	r2, #140	; 0x8c
    ebfe:	7813      	ldrb	r3, [r2, #0]
    ec00:	201e      	movs	r0, #30
    ec02:	438b      	bics	r3, r1
    ec04:	7013      	strb	r3, [r2, #0]
    ec06:	4b5a      	ldr	r3, [pc, #360]	; (ed70 <LORAWAN_RxDone+0x9f0>)
    ec08:	4798      	blx	r3
    ec0a:	2300      	movs	r3, #0
    ec0c:	34d8      	adds	r4, #216	; 0xd8
    ec0e:	7023      	strb	r3, [r4, #0]
    ec10:	4b56      	ldr	r3, [pc, #344]	; (ed6c <LORAWAN_RxDone+0x9ec>)
    ec12:	4798      	blx	r3
    ec14:	e6c7      	b.n	e9a6 <LORAWAN_RxDone+0x626>
    ec16:	003e      	movs	r6, r7
    ec18:	3608      	adds	r6, #8
    ec1a:	e72f      	b.n	ea7c <LORAWAN_RxDone+0x6fc>
    ec1c:	9a06      	ldr	r2, [sp, #24]
    ec1e:	2a00      	cmp	r2, #0
    ec20:	d034      	beq.n	ec8c <LORAWAN_RxDone+0x90c>
    ec22:	0702      	lsls	r2, r0, #28
    ec24:	d128      	bne.n	ec78 <LORAWAN_RxDone+0x8f8>
    ec26:	390d      	subs	r1, #13
    ec28:	681a      	ldr	r2, [r3, #0]
    ec2a:	b2cc      	uxtb	r4, r1
    ec2c:	0019      	movs	r1, r3
    ec2e:	791b      	ldrb	r3, [r3, #4]
    ec30:	0a10      	lsrs	r0, r2, #8
    ec32:	061b      	lsls	r3, r3, #24
    ec34:	4303      	orrs	r3, r0
    ec36:	9304      	str	r3, [sp, #16]
    ec38:	4b49      	ldr	r3, [pc, #292]	; (ed60 <LORAWAN_RxDone+0x9e0>)
    ec3a:	3108      	adds	r1, #8
    ec3c:	9303      	str	r3, [sp, #12]
    ec3e:	4663      	mov	r3, ip
    ec40:	9302      	str	r3, [sp, #8]
    ec42:	2302      	movs	r3, #2
    ec44:	9301      	str	r3, [sp, #4]
    ec46:	4b54      	ldr	r3, [pc, #336]	; (ed98 <LORAWAN_RxDone+0xa18>)
    ec48:	2201      	movs	r2, #1
    ec4a:	9300      	str	r3, [sp, #0]
    ec4c:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
    ec4e:	0028      	movs	r0, r5
    ec50:	0021      	movs	r1, r4
    ec52:	4e45      	ldr	r6, [pc, #276]	; (ed68 <LORAWAN_RxDone+0x9e8>)
    ec54:	47b0      	blx	r6
    ec56:	2800      	cmp	r0, #0
    ec58:	d004      	beq.n	ec64 <LORAWAN_RxDone+0x8e4>
    ec5a:	4b44      	ldr	r3, [pc, #272]	; (ed6c <LORAWAN_RxDone+0x9ec>)
    ec5c:	4798      	blx	r3
    ec5e:	201f      	movs	r0, #31
    ec60:	4b43      	ldr	r3, [pc, #268]	; (ed70 <LORAWAN_RxDone+0x9f0>)
    ec62:	4798      	blx	r3
    ec64:	4b3d      	ldr	r3, [pc, #244]	; (ed5c <LORAWAN_RxDone+0x9dc>)
    ec66:	0021      	movs	r1, r4
    ec68:	0028      	movs	r0, r5
    ec6a:	4798      	blx	r3
    ec6c:	2300      	movs	r3, #0
    ec6e:	9306      	str	r3, [sp, #24]
    ec70:	3301      	adds	r3, #1
    ec72:	9308      	str	r3, [sp, #32]
    ec74:	2600      	movs	r6, #0
    ec76:	e737      	b.n	eae8 <LORAWAN_RxDone+0x768>
    ec78:	001a      	movs	r2, r3
    ec7a:	32f4      	adds	r2, #244	; 0xf4
    ec7c:	7812      	ldrb	r2, [r2, #0]
    ec7e:	2a01      	cmp	r2, #1
    ec80:	d1ae      	bne.n	ebe0 <LORAWAN_RxDone+0x860>
    ec82:	e7a5      	b.n	ebd0 <LORAWAN_RxDone+0x850>
    ec84:	2600      	movs	r6, #0
    ec86:	9609      	str	r6, [sp, #36]	; 0x24
    ec88:	9606      	str	r6, [sp, #24]
    ec8a:	e72d      	b.n	eae8 <LORAWAN_RxDone+0x768>
    ec8c:	9b06      	ldr	r3, [sp, #24]
    ec8e:	9309      	str	r3, [sp, #36]	; 0x24
    ec90:	001e      	movs	r6, r3
    ec92:	e729      	b.n	eae8 <LORAWAN_RxDone+0x768>
    ec94:	2120      	movs	r1, #32
    ec96:	782a      	ldrb	r2, [r5, #0]
    ec98:	438a      	bics	r2, r1
    ec9a:	702a      	strb	r2, [r5, #0]
    ec9c:	0022      	movs	r2, r4
    ec9e:	32f4      	adds	r2, #244	; 0xf4
    eca0:	7812      	ldrb	r2, [r2, #0]
    eca2:	2a01      	cmp	r2, #1
    eca4:	d10e      	bne.n	ecc4 <LORAWAN_RxDone+0x944>
    eca6:	781a      	ldrb	r2, [r3, #0]
    eca8:	3912      	subs	r1, #18
    ecaa:	438a      	bics	r2, r1
    ecac:	701a      	strb	r2, [r3, #0]
    ecae:	23ea      	movs	r3, #234	; 0xea
    ecb0:	4a28      	ldr	r2, [pc, #160]	; (ed54 <LORAWAN_RxDone+0x9d4>)
    ecb2:	005b      	lsls	r3, r3, #1
    ecb4:	5cd3      	ldrb	r3, [r2, r3]
    ecb6:	2b00      	cmp	r3, #0
    ecb8:	d000      	beq.n	ecbc <LORAWAN_RxDone+0x93c>
    ecba:	e755      	b.n	eb68 <LORAWAN_RxDone+0x7e8>
    ecbc:	2008      	movs	r0, #8
    ecbe:	4b2c      	ldr	r3, [pc, #176]	; (ed70 <LORAWAN_RxDone+0x9f0>)
    ecc0:	4798      	blx	r3
    ecc2:	e751      	b.n	eb68 <LORAWAN_RxDone+0x7e8>
    ecc4:	2a04      	cmp	r2, #4
    ecc6:	d1f2      	bne.n	ecae <LORAWAN_RxDone+0x92e>
    ecc8:	0023      	movs	r3, r4
    ecca:	33e8      	adds	r3, #232	; 0xe8
    eccc:	7818      	ldrb	r0, [r3, #0]
    ecce:	4b29      	ldr	r3, [pc, #164]	; (ed74 <LORAWAN_RxDone+0x9f4>)
    ecd0:	4798      	blx	r3
    ecd2:	e7ec      	b.n	ecae <LORAWAN_RxDone+0x92e>
    ecd4:	9b08      	ldr	r3, [sp, #32]
    ecd6:	2b00      	cmp	r3, #0
    ecd8:	d013      	beq.n	ed02 <LORAWAN_RxDone+0x982>
    ecda:	0023      	movs	r3, r4
    ecdc:	33f4      	adds	r3, #244	; 0xf4
    ecde:	781e      	ldrb	r6, [r3, #0]
    ece0:	2e01      	cmp	r6, #1
    ece2:	d10e      	bne.n	ed02 <LORAWAN_RxDone+0x982>
    ece4:	4b24      	ldr	r3, [pc, #144]	; (ed78 <LORAWAN_RxDone+0x9f8>)
    ece6:	4798      	blx	r3
    ece8:	0022      	movs	r2, r4
    ecea:	327c      	adds	r2, #124	; 0x7c
    ecec:	7853      	ldrb	r3, [r2, #1]
    ecee:	43b3      	bics	r3, r6
    ecf0:	7053      	strb	r3, [r2, #1]
    ecf2:	2220      	movs	r2, #32
    ecf4:	782b      	ldrb	r3, [r5, #0]
    ecf6:	4393      	bics	r3, r2
    ecf8:	702b      	strb	r3, [r5, #0]
    ecfa:	23ea      	movs	r3, #234	; 0xea
    ecfc:	005b      	lsls	r3, r3, #1
    ecfe:	5ce3      	ldrb	r3, [r4, r3]
    ed00:	e7d9      	b.n	ecb6 <LORAWAN_RxDone+0x936>
    ed02:	4b26      	ldr	r3, [pc, #152]	; (ed9c <LORAWAN_RxDone+0xa1c>)
    ed04:	4798      	blx	r3
    ed06:	e72f      	b.n	eb68 <LORAWAN_RxDone+0x7e8>
    ed08:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ed0a:	2a00      	cmp	r2, #0
    ed0c:	d00b      	beq.n	ed26 <LORAWAN_RxDone+0x9a6>
    ed0e:	9a06      	ldr	r2, [sp, #24]
    ed10:	0031      	movs	r1, r6
    ed12:	0038      	movs	r0, r7
    ed14:	4b19      	ldr	r3, [pc, #100]	; (ed7c <LORAWAN_RxDone+0x9fc>)
    ed16:	4798      	blx	r3
    ed18:	0022      	movs	r2, r4
    ed1a:	2101      	movs	r1, #1
    ed1c:	327c      	adds	r2, #124	; 0x7c
    ed1e:	7853      	ldrb	r3, [r2, #1]
    ed20:	438b      	bics	r3, r1
    ed22:	7053      	strb	r3, [r2, #1]
    ed24:	e720      	b.n	eb68 <LORAWAN_RxDone+0x7e8>
    ed26:	2220      	movs	r2, #32
    ed28:	4393      	bics	r3, r2
    ed2a:	702b      	strb	r3, [r5, #0]
    ed2c:	0023      	movs	r3, r4
    ed2e:	33f4      	adds	r3, #244	; 0xf4
    ed30:	781b      	ldrb	r3, [r3, #0]
    ed32:	2b01      	cmp	r3, #1
    ed34:	d134      	bne.n	eda0 <LORAWAN_RxDone+0xa20>
    ed36:	0022      	movs	r2, r4
    ed38:	210e      	movs	r1, #14
    ed3a:	327c      	adds	r2, #124	; 0x7c
    ed3c:	7813      	ldrb	r3, [r2, #0]
    ed3e:	438b      	bics	r3, r1
    ed40:	7013      	strb	r3, [r2, #0]
    ed42:	23ea      	movs	r3, #234	; 0xea
    ed44:	005b      	lsls	r3, r3, #1
    ed46:	5ce3      	ldrb	r3, [r4, r3]
    ed48:	2b00      	cmp	r3, #0
    ed4a:	d1e5      	bne.n	ed18 <LORAWAN_RxDone+0x998>
    ed4c:	2008      	movs	r0, #8
    ed4e:	4b08      	ldr	r3, [pc, #32]	; (ed70 <LORAWAN_RxDone+0x9f0>)
    ed50:	4798      	blx	r3
    ed52:	e7e1      	b.n	ed18 <LORAWAN_RxDone+0x998>
    ed54:	200017d4 	.word	0x200017d4
    ed58:	00009729 	.word	0x00009729
    ed5c:	0000e0e9 	.word	0x0000e0e9
    ed60:	20001ad4 	.word	0x20001ad4
    ed64:	20001809 	.word	0x20001809
    ed68:	0000cd1d 	.word	0x0000cd1d
    ed6c:	0000deb9 	.word	0x0000deb9
    ed70:	0000cddd 	.word	0x0000cddd
    ed74:	00009e61 	.word	0x00009e61
    ed78:	0000c2b5 	.word	0x0000c2b5
    ed7c:	0000d1cd 	.word	0x0000d1cd
    ed80:	20001850 	.word	0x20001850
    ed84:	20001860 	.word	0x20001860
    ed88:	00009141 	.word	0x00009141
    ed8c:	0000bfe1 	.word	0x0000bfe1
    ed90:	0000bd99 	.word	0x0000bd99
    ed94:	20001acc 	.word	0x20001acc
    ed98:	200017f9 	.word	0x200017f9
    ed9c:	0000c241 	.word	0x0000c241
    eda0:	2b04      	cmp	r3, #4
    eda2:	d1ce      	bne.n	ed42 <LORAWAN_RxDone+0x9c2>
    eda4:	0023      	movs	r3, r4
    eda6:	33e8      	adds	r3, #232	; 0xe8
    eda8:	7818      	ldrb	r0, [r3, #0]
    edaa:	4b43      	ldr	r3, [pc, #268]	; (eeb8 <LORAWAN_RxDone+0xb38>)
    edac:	4798      	blx	r3
    edae:	e7c8      	b.n	ed42 <LORAWAN_RxDone+0x9c2>
    edb0:	35ff      	adds	r5, #255	; 0xff
    edb2:	7c6b      	ldrb	r3, [r5, #17]
    edb4:	079a      	lsls	r2, r3, #30
    edb6:	d521      	bpl.n	edfc <LORAWAN_RxDone+0xa7c>
    edb8:	aa10      	add	r2, sp, #64	; 0x40
    edba:	0031      	movs	r1, r6
    edbc:	2026      	movs	r0, #38	; 0x26
    edbe:	47b8      	blx	r7
    edc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    edc2:	1c5a      	adds	r2, r3, #1
    edc4:	d001      	beq.n	edca <LORAWAN_RxDone+0xa4a>
    edc6:	3314      	adds	r3, #20
    edc8:	9310      	str	r3, [sp, #64]	; 0x40
    edca:	0021      	movs	r1, r4
    edcc:	220e      	movs	r2, #14
    edce:	317c      	adds	r1, #124	; 0x7c
    edd0:	780b      	ldrb	r3, [r1, #0]
    edd2:	4393      	bics	r3, r2
    edd4:	001a      	movs	r2, r3
    edd6:	230c      	movs	r3, #12
    edd8:	4313      	orrs	r3, r2
    edda:	700b      	strb	r3, [r1, #0]
    eddc:	23e0      	movs	r3, #224	; 0xe0
    edde:	33ff      	adds	r3, #255	; 0xff
    ede0:	5ce3      	ldrb	r3, [r4, r3]
    ede2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ede4:	21fa      	movs	r1, #250	; 0xfa
    ede6:	1ad3      	subs	r3, r2, r3
    ede8:	2200      	movs	r2, #0
    edea:	0089      	lsls	r1, r1, #2
    edec:	4359      	muls	r1, r3
    edee:	34e6      	adds	r4, #230	; 0xe6
    edf0:	4b32      	ldr	r3, [pc, #200]	; (eebc <LORAWAN_RxDone+0xb3c>)
    edf2:	7820      	ldrb	r0, [r4, #0]
    edf4:	9200      	str	r2, [sp, #0]
    edf6:	4c32      	ldr	r4, [pc, #200]	; (eec0 <LORAWAN_RxDone+0xb40>)
    edf8:	47a0      	blx	r4
    edfa:	e5d4      	b.n	e9a6 <LORAWAN_RxDone+0x626>
    edfc:	075b      	lsls	r3, r3, #29
    edfe:	d400      	bmi.n	ee02 <LORAWAN_RxDone+0xa82>
    ee00:	e5d1      	b.n	e9a6 <LORAWAN_RxDone+0x626>
    ee02:	aa10      	add	r2, sp, #64	; 0x40
    ee04:	0031      	movs	r1, r6
    ee06:	2033      	movs	r0, #51	; 0x33
    ee08:	47b8      	blx	r7
    ee0a:	220e      	movs	r2, #14
    ee0c:	4b2d      	ldr	r3, [pc, #180]	; (eec4 <LORAWAN_RxDone+0xb44>)
    ee0e:	781b      	ldrb	r3, [r3, #0]
    ee10:	4393      	bics	r3, r2
    ee12:	001a      	movs	r2, r3
    ee14:	230c      	movs	r3, #12
    ee16:	4313      	orrs	r3, r2
    ee18:	4a2a      	ldr	r2, [pc, #168]	; (eec4 <LORAWAN_RxDone+0xb44>)
    ee1a:	7013      	strb	r3, [r2, #0]
    ee1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ee1e:	1c5a      	adds	r2, r3, #1
    ee20:	d001      	beq.n	ee26 <LORAWAN_RxDone+0xaa6>
    ee22:	3301      	adds	r3, #1
    ee24:	9310      	str	r3, [sp, #64]	; 0x40
    ee26:	23e0      	movs	r3, #224	; 0xe0
    ee28:	33ff      	adds	r3, #255	; 0xff
    ee2a:	5ce3      	ldrb	r3, [r4, r3]
    ee2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ee2e:	21fa      	movs	r1, #250	; 0xfa
    ee30:	1ad3      	subs	r3, r2, r3
    ee32:	2200      	movs	r2, #0
    ee34:	0089      	lsls	r1, r1, #2
    ee36:	34e9      	adds	r4, #233	; 0xe9
    ee38:	4359      	muls	r1, r3
    ee3a:	7820      	ldrb	r0, [r4, #0]
    ee3c:	4b22      	ldr	r3, [pc, #136]	; (eec8 <LORAWAN_RxDone+0xb48>)
    ee3e:	9200      	str	r2, [sp, #0]
    ee40:	e7d9      	b.n	edf6 <LORAWAN_RxDone+0xa76>
    ee42:	35f4      	adds	r5, #244	; 0xf4
    ee44:	782b      	ldrb	r3, [r5, #0]
    ee46:	2b04      	cmp	r3, #4
    ee48:	d000      	beq.n	ee4c <LORAWAN_RxDone+0xacc>
    ee4a:	e5ac      	b.n	e9a6 <LORAWAN_RxDone+0x626>
    ee4c:	0038      	movs	r0, r7
    ee4e:	4b1f      	ldr	r3, [pc, #124]	; (eecc <LORAWAN_RxDone+0xb4c>)
    ee50:	4798      	blx	r3
    ee52:	e5a8      	b.n	e9a6 <LORAWAN_RxDone+0x626>
    ee54:	220e      	movs	r2, #14
    ee56:	4013      	ands	r3, r2
    ee58:	2b0a      	cmp	r3, #10
    ee5a:	d008      	beq.n	ee6e <LORAWAN_RxDone+0xaee>
    ee5c:	2b06      	cmp	r3, #6
    ee5e:	d000      	beq.n	ee62 <LORAWAN_RxDone+0xae2>
    ee60:	e4da      	b.n	e818 <LORAWAN_RxDone+0x498>
    ee62:	0023      	movs	r3, r4
    ee64:	33f0      	adds	r3, #240	; 0xf0
    ee66:	781b      	ldrb	r3, [r3, #0]
    ee68:	2b00      	cmp	r3, #0
    ee6a:	d100      	bne.n	ee6e <LORAWAN_RxDone+0xaee>
    ee6c:	e4d4      	b.n	e818 <LORAWAN_RxDone+0x498>
    ee6e:	2220      	movs	r2, #32
    ee70:	348c      	adds	r4, #140	; 0x8c
    ee72:	7823      	ldrb	r3, [r4, #0]
    ee74:	2019      	movs	r0, #25
    ee76:	4393      	bics	r3, r2
    ee78:	7023      	strb	r3, [r4, #0]
    ee7a:	e4da      	b.n	e832 <LORAWAN_RxDone+0x4b2>
    ee7c:	4914      	ldr	r1, [pc, #80]	; (eed0 <LORAWAN_RxDone+0xb50>)
    ee7e:	784a      	ldrb	r2, [r1, #1]
    ee80:	780b      	ldrb	r3, [r1, #0]
    ee82:	0212      	lsls	r2, r2, #8
    ee84:	431a      	orrs	r2, r3
    ee86:	788b      	ldrb	r3, [r1, #2]
    ee88:	041b      	lsls	r3, r3, #16
    ee8a:	431a      	orrs	r2, r3
    ee8c:	78cb      	ldrb	r3, [r1, #3]
    ee8e:	061b      	lsls	r3, r3, #24
    ee90:	4313      	orrs	r3, r2
    ee92:	d100      	bne.n	ee96 <LORAWAN_RxDone+0xb16>
    ee94:	e587      	b.n	e9a6 <LORAWAN_RxDone+0x626>
    ee96:	4b0f      	ldr	r3, [pc, #60]	; (eed4 <LORAWAN_RxDone+0xb54>)
    ee98:	4c0f      	ldr	r4, [pc, #60]	; (eed8 <LORAWAN_RxDone+0xb58>)
    ee9a:	781b      	ldrb	r3, [r3, #0]
    ee9c:	2b10      	cmp	r3, #16
    ee9e:	d105      	bne.n	eeac <LORAWAN_RxDone+0xb2c>
    eea0:	0001      	movs	r1, r0
    eea2:	2000      	movs	r0, #0
    eea4:	9a07      	ldr	r2, [sp, #28]
    eea6:	3b0c      	subs	r3, #12
    eea8:	47a0      	blx	r4
    eeaa:	e57c      	b.n	e9a6 <LORAWAN_RxDone+0x626>
    eeac:	2300      	movs	r3, #0
    eeae:	0001      	movs	r1, r0
    eeb0:	9a07      	ldr	r2, [sp, #28]
    eeb2:	0018      	movs	r0, r3
    eeb4:	e7f8      	b.n	eea8 <LORAWAN_RxDone+0xb28>
    eeb6:	46c0      	nop			; (mov r8, r8)
    eeb8:	00009e61 	.word	0x00009e61
    eebc:	0000c0d9 	.word	0x0000c0d9
    eec0:	00009b55 	.word	0x00009b55
    eec4:	20001850 	.word	0x20001850
    eec8:	0000cae1 	.word	0x0000cae1
    eecc:	0000f735 	.word	0x0000f735
    eed0:	20001acc 	.word	0x20001acc
    eed4:	200019b8 	.word	0x200019b8
    eed8:	0000d181 	.word	0x0000d181

0000eedc <LorawanSetEdClass>:
    eedc:	23ea      	movs	r3, #234	; 0xea
    eede:	b537      	push	{r0, r1, r2, r4, r5, lr}
    eee0:	4d19      	ldr	r5, [pc, #100]	; (ef48 <LorawanSetEdClass+0x6c>)
    eee2:	005b      	lsls	r3, r3, #1
    eee4:	5ceb      	ldrb	r3, [r5, r3]
    eee6:	0004      	movs	r4, r0
    eee8:	2011      	movs	r0, #17
    eeea:	2b00      	cmp	r3, #0
    eeec:	d013      	beq.n	ef16 <LorawanSetEdClass+0x3a>
    eeee:	002b      	movs	r3, r5
    eef0:	33f5      	adds	r3, #245	; 0xf5
    eef2:	781b      	ldrb	r3, [r3, #0]
    eef4:	3807      	subs	r0, #7
    eef6:	4223      	tst	r3, r4
    eef8:	d00d      	beq.n	ef16 <LorawanSetEdClass+0x3a>
    eefa:	002b      	movs	r3, r5
    eefc:	33f4      	adds	r3, #244	; 0xf4
    eefe:	7819      	ldrb	r1, [r3, #0]
    ef00:	428c      	cmp	r4, r1
    ef02:	d007      	beq.n	ef14 <LorawanSetEdClass+0x38>
    ef04:	2901      	cmp	r1, #1
    ef06:	d107      	bne.n	ef18 <LorawanSetEdClass+0x3c>
    ef08:	2c04      	cmp	r4, #4
    ef0a:	d104      	bne.n	ef16 <LorawanSetEdClass+0x3a>
    ef0c:	701c      	strb	r4, [r3, #0]
    ef0e:	2000      	movs	r0, #0
    ef10:	4b0e      	ldr	r3, [pc, #56]	; (ef4c <LorawanSetEdClass+0x70>)
    ef12:	4798      	blx	r3
    ef14:	2008      	movs	r0, #8
    ef16:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ef18:	2904      	cmp	r1, #4
    ef1a:	d1fc      	bne.n	ef16 <LorawanSetEdClass+0x3a>
    ef1c:	2c01      	cmp	r4, #1
    ef1e:	d1fa      	bne.n	ef16 <LorawanSetEdClass+0x3a>
    ef20:	701c      	strb	r4, [r3, #0]
    ef22:	0021      	movs	r1, r4
    ef24:	4b09      	ldr	r3, [pc, #36]	; (ef4c <LorawanSetEdClass+0x70>)
    ef26:	2000      	movs	r0, #0
    ef28:	4798      	blx	r3
    ef2a:	002a      	movs	r2, r5
    ef2c:	210e      	movs	r1, #14
    ef2e:	327c      	adds	r2, #124	; 0x7c
    ef30:	7813      	ldrb	r3, [r2, #0]
    ef32:	a801      	add	r0, sp, #4
    ef34:	438b      	bics	r3, r1
    ef36:	7013      	strb	r3, [r2, #0]
    ef38:	35ff      	adds	r5, #255	; 0xff
    ef3a:	4b05      	ldr	r3, [pc, #20]	; (ef50 <LorawanSetEdClass+0x74>)
    ef3c:	7004      	strb	r4, [r0, #0]
    ef3e:	4798      	blx	r3
    ef40:	7f68      	ldrb	r0, [r5, #29]
    ef42:	4b04      	ldr	r3, [pc, #16]	; (ef54 <LorawanSetEdClass+0x78>)
    ef44:	4798      	blx	r3
    ef46:	e7e5      	b.n	ef14 <LorawanSetEdClass+0x38>
    ef48:	200017d4 	.word	0x200017d4
    ef4c:	00009729 	.word	0x00009729
    ef50:	00011211 	.word	0x00011211
    ef54:	00009e61 	.word	0x00009e61

0000ef58 <LORAWAN_SetAttr>:
    ef58:	23ea      	movs	r3, #234	; 0xea
    ef5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ef5c:	4cbf      	ldr	r4, [pc, #764]	; (f25c <LORAWAN_SetAttr+0x304>)
    ef5e:	005b      	lsls	r3, r3, #1
    ef60:	5ce3      	ldrb	r3, [r4, r3]
    ef62:	000d      	movs	r5, r1
    ef64:	2611      	movs	r6, #17
    ef66:	2b00      	cmp	r3, #0
    ef68:	d100      	bne.n	ef6c <LORAWAN_SetAttr+0x14>
    ef6a:	e113      	b.n	f194 <LORAWAN_SetAttr+0x23c>
    ef6c:	2839      	cmp	r0, #57	; 0x39
    ef6e:	d86b      	bhi.n	f048 <LORAWAN_SetAttr+0xf0>
    ef70:	f002 fd40 	bl	119f4 <__gnu_thumb1_case_uhi>
    ef74:	0086003a 	.word	0x0086003a
    ef78:	00ef00a5 	.word	0x00ef00a5
    ef7c:	00d900b8 	.word	0x00d900b8
    ef80:	01280112 	.word	0x01280112
    ef84:	015a0148 	.word	0x015a0148
    ef88:	016b0160 	.word	0x016b0160
    ef8c:	0197017e 	.word	0x0197017e
    ef90:	01a1019c 	.word	0x01a1019c
    ef94:	01ab01a6 	.word	0x01ab01a6
    ef98:	01b501b0 	.word	0x01b501b0
    ef9c:	01dc01ba 	.word	0x01dc01ba
    efa0:	01be01c1 	.word	0x01be01c1
    efa4:	01e101e5 	.word	0x01e101e5
    efa8:	01d301d7 	.word	0x01d301d7
    efac:	006a01cd 	.word	0x006a01cd
    efb0:	018f006a 	.word	0x018f006a
    efb4:	006a006a 	.word	0x006a006a
    efb8:	006a006a 	.word	0x006a006a
    efbc:	006a006a 	.word	0x006a006a
    efc0:	005901e9 	.word	0x005901e9
    efc4:	01fa01ec 	.word	0x01fa01ec
    efc8:	01f101f6 	.word	0x01f101f6
    efcc:	01fe006a 	.word	0x01fe006a
    efd0:	006a021e 	.word	0x006a021e
    efd4:	006a006a 	.word	0x006a006a
    efd8:	006a006a 	.word	0x006a006a
    efdc:	006a006a 	.word	0x006a006a
    efe0:	006a006a 	.word	0x006a006a
    efe4:	023f0235 	.word	0x023f0235
    efe8:	260a      	movs	r6, #10
    efea:	2900      	cmp	r1, #0
    efec:	d100      	bne.n	eff0 <LORAWAN_SetAttr+0x98>
    efee:	e0d1      	b.n	f194 <LORAWAN_SetAttr+0x23c>
    eff0:	0020      	movs	r0, r4
    eff2:	2208      	movs	r2, #8
    eff4:	4b9a      	ldr	r3, [pc, #616]	; (f260 <LORAWAN_SetAttr+0x308>)
    eff6:	305d      	adds	r0, #93	; 0x5d
    eff8:	4798      	blx	r3
    effa:	2108      	movs	r1, #8
    effc:	4e99      	ldr	r6, [pc, #612]	; (f264 <LORAWAN_SetAttr+0x30c>)
    effe:	2001      	movs	r0, #1
    f000:	47b0      	blx	r6
    f002:	0022      	movs	r2, r4
    f004:	2501      	movs	r5, #1
    f006:	32d6      	adds	r2, #214	; 0xd6
    f008:	7813      	ldrb	r3, [r2, #0]
    f00a:	2109      	movs	r1, #9
    f00c:	432b      	orrs	r3, r5
    f00e:	347c      	adds	r4, #124	; 0x7c
    f010:	0028      	movs	r0, r5
    f012:	7013      	strb	r3, [r2, #0]
    f014:	47b0      	blx	r6
    f016:	7823      	ldrb	r3, [r4, #0]
    f018:	210b      	movs	r1, #11
    f01a:	43ab      	bics	r3, r5
    f01c:	0028      	movs	r0, r5
    f01e:	7023      	strb	r3, [r4, #0]
    f020:	47b0      	blx	r6
    f022:	2608      	movs	r6, #8
    f024:	e0b6      	b.n	f194 <LORAWAN_SetAttr+0x23c>
    f026:	0023      	movs	r3, r4
    f028:	33ff      	adds	r3, #255	; 0xff
    f02a:	7c5b      	ldrb	r3, [r3, #17]
    f02c:	260a      	movs	r6, #10
    f02e:	075b      	lsls	r3, r3, #29
    f030:	d400      	bmi.n	f034 <LORAWAN_SetAttr+0xdc>
    f032:	e0af      	b.n	f194 <LORAWAN_SetAttr+0x23c>
    f034:	79ca      	ldrb	r2, [r1, #7]
    f036:	4b8c      	ldr	r3, [pc, #560]	; (f268 <LORAWAN_SetAttr+0x310>)
    f038:	2a00      	cmp	r2, #0
    f03a:	d10e      	bne.n	f05a <LORAWAN_SetAttr+0x102>
    f03c:	4669      	mov	r1, sp
    f03e:	201d      	movs	r0, #29
    f040:	714a      	strb	r2, [r1, #5]
    f042:	4798      	blx	r3
    f044:	2800      	cmp	r0, #0
    f046:	d001      	beq.n	f04c <LORAWAN_SetAttr+0xf4>
    f048:	260a      	movs	r6, #10
    f04a:	e0a3      	b.n	f194 <LORAWAN_SetAttr+0x23c>
    f04c:	2109      	movs	r1, #9
    f04e:	34fe      	adds	r4, #254	; 0xfe
    f050:	82e0      	strh	r0, [r4, #22]
    f052:	82a0      	strh	r0, [r4, #20]
    f054:	4b83      	ldr	r3, [pc, #524]	; (f264 <LORAWAN_SetAttr+0x30c>)
    f056:	4798      	blx	r3
    f058:	e7e3      	b.n	f022 <LORAWAN_SetAttr+0xca>
    f05a:	2002      	movs	r0, #2
    f05c:	5e2a      	ldrsh	r2, [r5, r0]
    f05e:	88ae      	ldrh	r6, [r5, #4]
    f060:	79a8      	ldrb	r0, [r5, #6]
    f062:	466d      	mov	r5, sp
    f064:	806a      	strh	r2, [r5, #2]
    f066:	2201      	movs	r2, #1
    f068:	8809      	ldrh	r1, [r1, #0]
    f06a:	7128      	strb	r0, [r5, #4]
    f06c:	8029      	strh	r1, [r5, #0]
    f06e:	201d      	movs	r0, #29
    f070:	4669      	mov	r1, sp
    f072:	716a      	strb	r2, [r5, #5]
    f074:	4798      	blx	r3
    f076:	2800      	cmp	r0, #0
    f078:	d1e6      	bne.n	f048 <LORAWAN_SetAttr+0xf0>
    f07a:	34fe      	adds	r4, #254	; 0xfe
    f07c:	82e6      	strh	r6, [r4, #22]
    f07e:	e7d0      	b.n	f022 <LORAWAN_SetAttr+0xca>
    f080:	260a      	movs	r6, #10
    f082:	2900      	cmp	r1, #0
    f084:	d100      	bne.n	f088 <LORAWAN_SetAttr+0x130>
    f086:	e085      	b.n	f194 <LORAWAN_SetAttr+0x23c>
    f088:	0020      	movs	r0, r4
    f08a:	2208      	movs	r2, #8
    f08c:	4b74      	ldr	r3, [pc, #464]	; (f260 <LORAWAN_SetAttr+0x308>)
    f08e:	3055      	adds	r0, #85	; 0x55
    f090:	4798      	blx	r3
    f092:	2107      	movs	r1, #7
    f094:	4d73      	ldr	r5, [pc, #460]	; (f264 <LORAWAN_SetAttr+0x30c>)
    f096:	2001      	movs	r0, #1
    f098:	47a8      	blx	r5
    f09a:	0022      	movs	r2, r4
    f09c:	2302      	movs	r3, #2
    f09e:	32d6      	adds	r2, #214	; 0xd6
    f0a0:	7811      	ldrb	r1, [r2, #0]
    f0a2:	2001      	movs	r0, #1
    f0a4:	430b      	orrs	r3, r1
    f0a6:	2109      	movs	r1, #9
    f0a8:	7013      	strb	r3, [r2, #0]
    f0aa:	47a8      	blx	r5
    f0ac:	2001      	movs	r0, #1
    f0ae:	347c      	adds	r4, #124	; 0x7c
    f0b0:	7823      	ldrb	r3, [r4, #0]
    f0b2:	210b      	movs	r1, #11
    f0b4:	4383      	bics	r3, r0
    f0b6:	7023      	strb	r3, [r4, #0]
    f0b8:	47a8      	blx	r5
    f0ba:	3e02      	subs	r6, #2
    f0bc:	e06a      	b.n	f194 <LORAWAN_SetAttr+0x23c>
    f0be:	680b      	ldr	r3, [r1, #0]
    f0c0:	2001      	movs	r0, #1
    f0c2:	0a19      	lsrs	r1, r3, #8
    f0c4:	70a1      	strb	r1, [r4, #2]
    f0c6:	0c19      	lsrs	r1, r3, #16
    f0c8:	7063      	strb	r3, [r4, #1]
    f0ca:	70e1      	strb	r1, [r4, #3]
    f0cc:	0e1b      	lsrs	r3, r3, #24
    f0ce:	2103      	movs	r1, #3
    f0d0:	4d64      	ldr	r5, [pc, #400]	; (f264 <LORAWAN_SetAttr+0x30c>)
    f0d2:	7123      	strb	r3, [r4, #4]
    f0d4:	47a8      	blx	r5
    f0d6:	0022      	movs	r2, r4
    f0d8:	2304      	movs	r3, #4
    f0da:	32d6      	adds	r2, #214	; 0xd6
    f0dc:	7811      	ldrb	r1, [r2, #0]
    f0de:	430b      	orrs	r3, r1
    f0e0:	7013      	strb	r3, [r2, #0]
    f0e2:	e015      	b.n	f110 <LORAWAN_SetAttr+0x1b8>
    f0e4:	260a      	movs	r6, #10
    f0e6:	2900      	cmp	r1, #0
    f0e8:	d054      	beq.n	f194 <LORAWAN_SetAttr+0x23c>
    f0ea:	3606      	adds	r6, #6
    f0ec:	0032      	movs	r2, r6
    f0ee:	4f5c      	ldr	r7, [pc, #368]	; (f260 <LORAWAN_SetAttr+0x308>)
    f0f0:	1d60      	adds	r0, r4, #5
    f0f2:	47b8      	blx	r7
    f0f4:	0020      	movs	r0, r4
    f0f6:	0032      	movs	r2, r6
    f0f8:	0029      	movs	r1, r5
    f0fa:	3025      	adds	r0, #37	; 0x25
    f0fc:	47b8      	blx	r7
    f0fe:	2104      	movs	r1, #4
    f100:	2001      	movs	r0, #1
    f102:	4d58      	ldr	r5, [pc, #352]	; (f264 <LORAWAN_SetAttr+0x30c>)
    f104:	47a8      	blx	r5
    f106:	0023      	movs	r3, r4
    f108:	33d6      	adds	r3, #214	; 0xd6
    f10a:	781a      	ldrb	r2, [r3, #0]
    f10c:	4316      	orrs	r6, r2
    f10e:	701e      	strb	r6, [r3, #0]
    f110:	2109      	movs	r1, #9
    f112:	2001      	movs	r0, #1
    f114:	47a8      	blx	r5
    f116:	2001      	movs	r0, #1
    f118:	210b      	movs	r1, #11
    f11a:	347c      	adds	r4, #124	; 0x7c
    f11c:	7823      	ldrb	r3, [r4, #0]
    f11e:	4383      	bics	r3, r0
    f120:	7023      	strb	r3, [r4, #0]
    f122:	47a8      	blx	r5
    f124:	e77d      	b.n	f022 <LORAWAN_SetAttr+0xca>
    f126:	260a      	movs	r6, #10
    f128:	2900      	cmp	r1, #0
    f12a:	d033      	beq.n	f194 <LORAWAN_SetAttr+0x23c>
    f12c:	0020      	movs	r0, r4
    f12e:	2210      	movs	r2, #16
    f130:	4e4b      	ldr	r6, [pc, #300]	; (f260 <LORAWAN_SetAttr+0x308>)
    f132:	3015      	adds	r0, #21
    f134:	47b0      	blx	r6
    f136:	0020      	movs	r0, r4
    f138:	2210      	movs	r2, #16
    f13a:	0029      	movs	r1, r5
    f13c:	3035      	adds	r0, #53	; 0x35
    f13e:	47b0      	blx	r6
    f140:	2105      	movs	r1, #5
    f142:	2001      	movs	r0, #1
    f144:	4d47      	ldr	r5, [pc, #284]	; (f264 <LORAWAN_SetAttr+0x30c>)
    f146:	47a8      	blx	r5
    f148:	0022      	movs	r2, r4
    f14a:	32d6      	adds	r2, #214	; 0xd6
    f14c:	7811      	ldrb	r1, [r2, #0]
    f14e:	2320      	movs	r3, #32
    f150:	e7c5      	b.n	f0de <LORAWAN_SetAttr+0x186>
    f152:	260a      	movs	r6, #10
    f154:	2900      	cmp	r1, #0
    f156:	d01d      	beq.n	f194 <LORAWAN_SetAttr+0x23c>
    f158:	23e2      	movs	r3, #226	; 0xe2
    f15a:	33ff      	adds	r3, #255	; 0xff
    f15c:	5ce3      	ldrb	r3, [r4, r3]
    f15e:	3e02      	subs	r6, #2
    f160:	2b00      	cmp	r3, #0
    f162:	d117      	bne.n	f194 <LORAWAN_SetAttr+0x23c>
    f164:	0020      	movs	r0, r4
    f166:	2210      	movs	r2, #16
    f168:	4b3d      	ldr	r3, [pc, #244]	; (f260 <LORAWAN_SetAttr+0x308>)
    f16a:	3045      	adds	r0, #69	; 0x45
    f16c:	4798      	blx	r3
    f16e:	2106      	movs	r1, #6
    f170:	4d3c      	ldr	r5, [pc, #240]	; (f264 <LORAWAN_SetAttr+0x30c>)
    f172:	2001      	movs	r0, #1
    f174:	47a8      	blx	r5
    f176:	0022      	movs	r2, r4
    f178:	32d6      	adds	r2, #214	; 0xd6
    f17a:	7813      	ldrb	r3, [r2, #0]
    f17c:	2109      	movs	r1, #9
    f17e:	4333      	orrs	r3, r6
    f180:	2001      	movs	r0, #1
    f182:	7013      	strb	r3, [r2, #0]
    f184:	47a8      	blx	r5
    f186:	2001      	movs	r0, #1
    f188:	347c      	adds	r4, #124	; 0x7c
    f18a:	7823      	ldrb	r3, [r4, #0]
    f18c:	210b      	movs	r1, #11
    f18e:	4383      	bics	r3, r0
    f190:	7023      	strb	r3, [r4, #0]
    f192:	47a8      	blx	r5
    f194:	0030      	movs	r0, r6
    f196:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f198:	780b      	ldrb	r3, [r1, #0]
    f19a:	2001      	movs	r0, #1
    f19c:	0021      	movs	r1, r4
    f19e:	2520      	movs	r5, #32
    f1a0:	317c      	adds	r1, #124	; 0x7c
    f1a2:	4003      	ands	r3, r0
    f1a4:	015a      	lsls	r2, r3, #5
    f1a6:	780b      	ldrb	r3, [r1, #0]
    f1a8:	43ab      	bics	r3, r5
    f1aa:	4313      	orrs	r3, r2
    f1ac:	700b      	strb	r3, [r1, #0]
    f1ae:	0023      	movs	r3, r4
    f1b0:	2200      	movs	r2, #0
    f1b2:	33c2      	adds	r3, #194	; 0xc2
    f1b4:	348c      	adds	r4, #140	; 0x8c
    f1b6:	801a      	strh	r2, [r3, #0]
    f1b8:	7823      	ldrb	r3, [r4, #0]
    f1ba:	3210      	adds	r2, #16
    f1bc:	4393      	bics	r3, r2
    f1be:	7023      	strb	r3, [r4, #0]
    f1c0:	210b      	movs	r1, #11
    f1c2:	e747      	b.n	f054 <LORAWAN_SetAttr+0xfc>
    f1c4:	466a      	mov	r2, sp
    f1c6:	780b      	ldrb	r3, [r1, #0]
    f1c8:	7013      	strb	r3, [r2, #0]
    f1ca:	0022      	movs	r2, r4
    f1cc:	32ea      	adds	r2, #234	; 0xea
    f1ce:	7812      	ldrb	r2, [r2, #0]
    f1d0:	429a      	cmp	r2, r3
    f1d2:	d900      	bls.n	f1d6 <LORAWAN_SetAttr+0x27e>
    f1d4:	e738      	b.n	f048 <LORAWAN_SetAttr+0xf0>
    f1d6:	0022      	movs	r2, r4
    f1d8:	32eb      	adds	r2, #235	; 0xeb
    f1da:	7812      	ldrb	r2, [r2, #0]
    f1dc:	429a      	cmp	r2, r3
    f1de:	d200      	bcs.n	f1e2 <LORAWAN_SetAttr+0x28a>
    f1e0:	e732      	b.n	f048 <LORAWAN_SetAttr+0xf0>
    f1e2:	4669      	mov	r1, sp
    f1e4:	2010      	movs	r0, #16
    f1e6:	4b21      	ldr	r3, [pc, #132]	; (f26c <LORAWAN_SetAttr+0x314>)
    f1e8:	4798      	blx	r3
    f1ea:	0006      	movs	r6, r0
    f1ec:	2808      	cmp	r0, #8
    f1ee:	d000      	beq.n	f1f2 <LORAWAN_SetAttr+0x29a>
    f1f0:	e72a      	b.n	f048 <LORAWAN_SetAttr+0xf0>
    f1f2:	466b      	mov	r3, sp
    f1f4:	210c      	movs	r1, #12
    f1f6:	2001      	movs	r0, #1
    f1f8:	781b      	ldrb	r3, [r3, #0]
    f1fa:	34df      	adds	r4, #223	; 0xdf
    f1fc:	7023      	strb	r3, [r4, #0]
    f1fe:	4b19      	ldr	r3, [pc, #100]	; (f264 <LORAWAN_SetAttr+0x30c>)
    f200:	4798      	blx	r3
    f202:	e7c7      	b.n	f194 <LORAWAN_SetAttr+0x23c>
    f204:	466a      	mov	r2, sp
    f206:	780b      	ldrb	r3, [r1, #0]
    f208:	201d      	movs	r0, #29
    f20a:	7013      	strb	r3, [r2, #0]
    f20c:	4669      	mov	r1, sp
    f20e:	4b17      	ldr	r3, [pc, #92]	; (f26c <LORAWAN_SetAttr+0x314>)
    f210:	4798      	blx	r3
    f212:	0006      	movs	r6, r0
    f214:	2808      	cmp	r0, #8
    f216:	d000      	beq.n	f21a <LORAWAN_SetAttr+0x2c2>
    f218:	e716      	b.n	f048 <LORAWAN_SetAttr+0xf0>
    f21a:	466b      	mov	r3, sp
    f21c:	781b      	ldrb	r3, [r3, #0]
    f21e:	34e1      	adds	r4, #225	; 0xe1
    f220:	7023      	strb	r3, [r4, #0]
    f222:	210a      	movs	r1, #10
    f224:	2000      	movs	r0, #0
    f226:	e7ea      	b.n	f1fe <LORAWAN_SetAttr+0x2a6>
    f228:	780b      	ldrb	r3, [r1, #0]
    f22a:	2103      	movs	r1, #3
    f22c:	34f7      	adds	r4, #247	; 0xf7
    f22e:	7023      	strb	r3, [r4, #0]
    f230:	2000      	movs	r0, #0
    f232:	e70f      	b.n	f054 <LORAWAN_SetAttr+0xfc>
    f234:	680b      	ldr	r3, [r1, #0]
    f236:	260a      	movs	r6, #10
    f238:	1c5a      	adds	r2, r3, #1
    f23a:	d0ab      	beq.n	f194 <LORAWAN_SetAttr+0x23c>
    f23c:	2116      	movs	r1, #22
    f23e:	2000      	movs	r0, #0
    f240:	3404      	adds	r4, #4
    f242:	67e3      	str	r3, [r4, #124]	; 0x7c
    f244:	4b07      	ldr	r3, [pc, #28]	; (f264 <LORAWAN_SetAttr+0x30c>)
    f246:	4798      	blx	r3
    f248:	e737      	b.n	f0ba <LORAWAN_SetAttr+0x162>
    f24a:	680b      	ldr	r3, [r1, #0]
    f24c:	260a      	movs	r6, #10
    f24e:	1c5a      	adds	r2, r3, #1
    f250:	d0a0      	beq.n	f194 <LORAWAN_SetAttr+0x23c>
    f252:	0031      	movs	r1, r6
    f254:	3408      	adds	r4, #8
    f256:	67e3      	str	r3, [r4, #124]	; 0x7c
    f258:	2001      	movs	r0, #1
    f25a:	e7f3      	b.n	f244 <LORAWAN_SetAttr+0x2ec>
    f25c:	200017d4 	.word	0x200017d4
    f260:	0001516d 	.word	0x0001516d
    f264:	00009729 	.word	0x00009729
    f268:	0000ffed 	.word	0x0000ffed
    f26c:	0000915d 	.word	0x0000915d
    f270:	0026      	movs	r6, r4
    f272:	880b      	ldrh	r3, [r1, #0]
    f274:	36c8      	adds	r6, #200	; 0xc8
    f276:	210c      	movs	r1, #12
    f278:	2000      	movs	r0, #0
    f27a:	4d60      	ldr	r5, [pc, #384]	; (f3fc <LORAWAN_SetAttr+0x4a4>)
    f27c:	8033      	strh	r3, [r6, #0]
    f27e:	47a8      	blx	r5
    f280:	22fa      	movs	r2, #250	; 0xfa
    f282:	8833      	ldrh	r3, [r6, #0]
    f284:	0092      	lsls	r2, r2, #2
    f286:	189b      	adds	r3, r3, r2
    f288:	34ca      	adds	r4, #202	; 0xca
    f28a:	8023      	strh	r3, [r4, #0]
    f28c:	210d      	movs	r1, #13
    f28e:	2000      	movs	r0, #0
    f290:	e747      	b.n	f122 <LORAWAN_SetAttr+0x1ca>
    f292:	780b      	ldrb	r3, [r1, #0]
    f294:	260a      	movs	r6, #10
    f296:	2b0f      	cmp	r3, #15
    f298:	d900      	bls.n	f29c <LORAWAN_SetAttr+0x344>
    f29a:	e77b      	b.n	f194 <LORAWAN_SetAttr+0x23c>
    f29c:	3490      	adds	r4, #144	; 0x90
    f29e:	7023      	strb	r3, [r4, #0]
    f2a0:	e70b      	b.n	f0ba <LORAWAN_SetAttr+0x162>
    f2a2:	880b      	ldrh	r3, [r1, #0]
    f2a4:	34cc      	adds	r4, #204	; 0xcc
    f2a6:	8023      	strh	r3, [r4, #0]
    f2a8:	210e      	movs	r1, #14
    f2aa:	e7c1      	b.n	f230 <LORAWAN_SetAttr+0x2d8>
    f2ac:	880b      	ldrh	r3, [r1, #0]
    f2ae:	34ce      	adds	r4, #206	; 0xce
    f2b0:	8023      	strh	r3, [r4, #0]
    f2b2:	210f      	movs	r1, #15
    f2b4:	e7bc      	b.n	f230 <LORAWAN_SetAttr+0x2d8>
    f2b6:	880b      	ldrh	r3, [r1, #0]
    f2b8:	34d0      	adds	r4, #208	; 0xd0
    f2ba:	8023      	strh	r3, [r4, #0]
    f2bc:	2110      	movs	r1, #16
    f2be:	e7b7      	b.n	f230 <LORAWAN_SetAttr+0x2d8>
    f2c0:	780b      	ldrb	r3, [r1, #0]
    f2c2:	34d4      	adds	r4, #212	; 0xd4
    f2c4:	7023      	strb	r3, [r4, #0]
    f2c6:	2112      	movs	r1, #18
    f2c8:	e7b2      	b.n	f230 <LORAWAN_SetAttr+0x2d8>
    f2ca:	780b      	ldrb	r3, [r1, #0]
    f2cc:	34d5      	adds	r4, #213	; 0xd5
    f2ce:	7023      	strb	r3, [r4, #0]
    f2d0:	2113      	movs	r1, #19
    f2d2:	e7ad      	b.n	f230 <LORAWAN_SetAttr+0x2d8>
    f2d4:	880b      	ldrh	r3, [r1, #0]
    f2d6:	34d2      	adds	r4, #210	; 0xd2
    f2d8:	8023      	strh	r3, [r4, #0]
    f2da:	2111      	movs	r1, #17
    f2dc:	e7a8      	b.n	f230 <LORAWAN_SetAttr+0x2d8>
    f2de:	780b      	ldrb	r3, [r1, #0]
    f2e0:	34da      	adds	r4, #218	; 0xda
    f2e2:	7023      	strb	r3, [r4, #0]
    f2e4:	2115      	movs	r1, #21
    f2e6:	e7a3      	b.n	f230 <LORAWAN_SetAttr+0x2d8>
    f2e8:	780b      	ldrb	r3, [r1, #0]
    f2ea:	34d9      	adds	r4, #217	; 0xd9
    f2ec:	7023      	strb	r3, [r4, #0]
    f2ee:	e698      	b.n	f022 <LORAWAN_SetAttr+0xca>
    f2f0:	780b      	ldrb	r3, [r1, #0]
    f2f2:	34e0      	adds	r4, #224	; 0xe0
    f2f4:	e7fa      	b.n	f2ec <LORAWAN_SetAttr+0x394>
    f2f6:	2001      	movs	r0, #1
    f2f8:	780b      	ldrb	r3, [r1, #0]
    f2fa:	2110      	movs	r1, #16
    f2fc:	347c      	adds	r4, #124	; 0x7c
    f2fe:	4003      	ands	r3, r0
    f300:	011a      	lsls	r2, r3, #4
    f302:	7823      	ldrb	r3, [r4, #0]
    f304:	438b      	bics	r3, r1
    f306:	4313      	orrs	r3, r2
    f308:	7023      	strb	r3, [r4, #0]
    f30a:	3905      	subs	r1, #5
    f30c:	e6a2      	b.n	f054 <LORAWAN_SetAttr+0xfc>
    f30e:	7909      	ldrb	r1, [r1, #4]
    f310:	7828      	ldrb	r0, [r5, #0]
    f312:	4b3b      	ldr	r3, [pc, #236]	; (f400 <LORAWAN_SetAttr+0x4a8>)
    f314:	4798      	blx	r3
    f316:	0006      	movs	r6, r0
    f318:	e73c      	b.n	f194 <LORAWAN_SetAttr+0x23c>
    f31a:	7909      	ldrb	r1, [r1, #4]
    f31c:	7828      	ldrb	r0, [r5, #0]
    f31e:	4b39      	ldr	r3, [pc, #228]	; (f404 <LORAWAN_SetAttr+0x4ac>)
    f320:	e7f8      	b.n	f314 <LORAWAN_SetAttr+0x3bc>
    f322:	7808      	ldrb	r0, [r1, #0]
    f324:	4b38      	ldr	r3, [pc, #224]	; (f408 <LORAWAN_SetAttr+0x4b0>)
    f326:	6849      	ldr	r1, [r1, #4]
    f328:	4798      	blx	r3
    f32a:	e7f4      	b.n	f316 <LORAWAN_SetAttr+0x3be>
    f32c:	7909      	ldrb	r1, [r1, #4]
    f32e:	6828      	ldr	r0, [r5, #0]
    f330:	4b36      	ldr	r3, [pc, #216]	; (f40c <LORAWAN_SetAttr+0x4b4>)
    f332:	4798      	blx	r3
    f334:	e7ef      	b.n	f316 <LORAWAN_SetAttr+0x3be>
    f336:	7808      	ldrb	r0, [r1, #0]
    f338:	4b35      	ldr	r3, [pc, #212]	; (f410 <LORAWAN_SetAttr+0x4b8>)
    f33a:	4798      	blx	r3
    f33c:	e7eb      	b.n	f316 <LORAWAN_SetAttr+0x3be>
    f33e:	8808      	ldrh	r0, [r1, #0]
    f340:	4b34      	ldr	r3, [pc, #208]	; (f414 <LORAWAN_SetAttr+0x4bc>)
    f342:	4798      	blx	r3
    f344:	e66d      	b.n	f022 <LORAWAN_SetAttr+0xca>
    f346:	4b34      	ldr	r3, [pc, #208]	; (f418 <LORAWAN_SetAttr+0x4c0>)
    f348:	6019      	str	r1, [r3, #0]
    f34a:	e67d      	b.n	f048 <LORAWAN_SetAttr+0xf0>
    f34c:	7809      	ldrb	r1, [r1, #0]
    f34e:	7868      	ldrb	r0, [r5, #1]
    f350:	4b32      	ldr	r3, [pc, #200]	; (f41c <LORAWAN_SetAttr+0x4c4>)
    f352:	4798      	blx	r3
    f354:	e7df      	b.n	f316 <LORAWAN_SetAttr+0x3be>
    f356:	7809      	ldrb	r1, [r1, #0]
    f358:	4b31      	ldr	r3, [pc, #196]	; (f420 <LORAWAN_SetAttr+0x4c8>)
    f35a:	1c68      	adds	r0, r5, #1
    f35c:	4798      	blx	r3
    f35e:	e7da      	b.n	f316 <LORAWAN_SetAttr+0x3be>
    f360:	7809      	ldrb	r1, [r1, #0]
    f362:	1c68      	adds	r0, r5, #1
    f364:	4b2f      	ldr	r3, [pc, #188]	; (f424 <LORAWAN_SetAttr+0x4cc>)
    f366:	e7f9      	b.n	f35c <LORAWAN_SetAttr+0x404>
    f368:	7809      	ldrb	r1, [r1, #0]
    f36a:	6868      	ldr	r0, [r5, #4]
    f36c:	4b2e      	ldr	r3, [pc, #184]	; (f428 <LORAWAN_SetAttr+0x4d0>)
    f36e:	e7f5      	b.n	f35c <LORAWAN_SetAttr+0x404>
    f370:	2300      	movs	r3, #0
    f372:	466a      	mov	r2, sp
    f374:	7809      	ldrb	r1, [r1, #0]
    f376:	7013      	strb	r3, [r2, #0]
    f378:	4299      	cmp	r1, r3
    f37a:	d014      	beq.n	f3a6 <LORAWAN_SetAttr+0x44e>
    f37c:	0022      	movs	r2, r4
    f37e:	2102      	movs	r1, #2
    f380:	32ff      	adds	r2, #255	; 0xff
    f382:	7c53      	ldrb	r3, [r2, #17]
    f384:	420b      	tst	r3, r1
    f386:	d001      	beq.n	f38c <LORAWAN_SetAttr+0x434>
    f388:	438b      	bics	r3, r1
    f38a:	7453      	strb	r3, [r2, #17]
    f38c:	2220      	movs	r2, #32
    f38e:	34ff      	adds	r4, #255	; 0xff
    f390:	7c63      	ldrb	r3, [r4, #17]
    f392:	4213      	tst	r3, r2
    f394:	d100      	bne.n	f398 <LORAWAN_SetAttr+0x440>
    f396:	e644      	b.n	f022 <LORAWAN_SetAttr+0xca>
    f398:	4393      	bics	r3, r2
    f39a:	7463      	strb	r3, [r4, #17]
    f39c:	4669      	mov	r1, sp
    f39e:	4b23      	ldr	r3, [pc, #140]	; (f42c <LORAWAN_SetAttr+0x4d4>)
    f3a0:	2039      	movs	r0, #57	; 0x39
    f3a2:	4798      	blx	r3
    f3a4:	e63d      	b.n	f022 <LORAWAN_SetAttr+0xca>
    f3a6:	4a22      	ldr	r2, [pc, #136]	; (f430 <LORAWAN_SetAttr+0x4d8>)
    f3a8:	4b22      	ldr	r3, [pc, #136]	; (f434 <LORAWAN_SetAttr+0x4dc>)
    f3aa:	200e      	movs	r0, #14
    f3ac:	4798      	blx	r3
    f3ae:	e638      	b.n	f022 <LORAWAN_SetAttr+0xca>
    f3b0:	466b      	mov	r3, sp
    f3b2:	780a      	ldrb	r2, [r1, #0]
    f3b4:	34ff      	adds	r4, #255	; 0xff
    f3b6:	701a      	strb	r2, [r3, #0]
    f3b8:	2320      	movs	r3, #32
    f3ba:	2a00      	cmp	r2, #0
    f3bc:	d007      	beq.n	f3ce <LORAWAN_SetAttr+0x476>
    f3be:	7c62      	ldrb	r2, [r4, #17]
    f3c0:	4313      	orrs	r3, r2
    f3c2:	7463      	strb	r3, [r4, #17]
    f3c4:	4669      	mov	r1, sp
    f3c6:	4b19      	ldr	r3, [pc, #100]	; (f42c <LORAWAN_SetAttr+0x4d4>)
    f3c8:	2039      	movs	r0, #57	; 0x39
    f3ca:	4798      	blx	r3
    f3cc:	e7a3      	b.n	f316 <LORAWAN_SetAttr+0x3be>
    f3ce:	7c62      	ldrb	r2, [r4, #17]
    f3d0:	260a      	movs	r6, #10
    f3d2:	421a      	tst	r2, r3
    f3d4:	d100      	bne.n	f3d8 <LORAWAN_SetAttr+0x480>
    f3d6:	e6dd      	b.n	f194 <LORAWAN_SetAttr+0x23c>
    f3d8:	439a      	bics	r2, r3
    f3da:	7462      	strb	r2, [r4, #17]
    f3dc:	e7f2      	b.n	f3c4 <LORAWAN_SetAttr+0x46c>
    f3de:	780b      	ldrb	r3, [r1, #0]
    f3e0:	260a      	movs	r6, #10
    f3e2:	2b08      	cmp	r3, #8
    f3e4:	d900      	bls.n	f3e8 <LORAWAN_SetAttr+0x490>
    f3e6:	e6d5      	b.n	f194 <LORAWAN_SetAttr+0x23c>
    f3e8:	22f0      	movs	r2, #240	; 0xf0
    f3ea:	0052      	lsls	r2, r2, #1
    f3ec:	54a3      	strb	r3, [r4, r2]
    f3ee:	210d      	movs	r1, #13
    f3f0:	e732      	b.n	f258 <LORAWAN_SetAttr+0x300>
    f3f2:	23e2      	movs	r3, #226	; 0xe2
    f3f4:	780a      	ldrb	r2, [r1, #0]
    f3f6:	33ff      	adds	r3, #255	; 0xff
    f3f8:	54e2      	strb	r2, [r4, r3]
    f3fa:	e612      	b.n	f022 <LORAWAN_SetAttr+0xca>
    f3fc:	00009729 	.word	0x00009729
    f400:	0000e331 	.word	0x0000e331
    f404:	0000e2c1 	.word	0x0000e2c1
    f408:	0000d2b9 	.word	0x0000d2b9
    f40c:	0000d27d 	.word	0x0000d27d
    f410:	0000eedd 	.word	0x0000eedd
    f414:	0000c11d 	.word	0x0000c11d
    f418:	20001ac8 	.word	0x20001ac8
    f41c:	0000f8d5 	.word	0x0000f8d5
    f420:	0000fb15 	.word	0x0000fb15
    f424:	0000fb69 	.word	0x0000fb69
    f428:	0000fac5 	.word	0x0000fac5
    f42c:	00009269 	.word	0x00009269
    f430:	200018e4 	.word	0x200018e4
    f434:	00009141 	.word	0x00009141

0000f438 <LORAWAN_Reset>:
    f438:	b5f0      	push	{r4, r5, r6, r7, lr}
    f43a:	b087      	sub	sp, #28
    f43c:	ab02      	add	r3, sp, #8
    f43e:	1ddd      	adds	r5, r3, #7
    f440:	23ff      	movs	r3, #255	; 0xff
    f442:	4c80      	ldr	r4, [pc, #512]	; (f644 <LORAWAN_Reset+0x20c>)
    f444:	702b      	strb	r3, [r5, #0]
    f446:	0023      	movs	r3, r4
    f448:	9001      	str	r0, [sp, #4]
    f44a:	33ef      	adds	r3, #239	; 0xef
    f44c:	781b      	ldrb	r3, [r3, #0]
    f44e:	2b00      	cmp	r3, #0
    f450:	d001      	beq.n	f456 <LORAWAN_Reset+0x1e>
    f452:	4b7d      	ldr	r3, [pc, #500]	; (f648 <LORAWAN_Reset+0x210>)
    f454:	4798      	blx	r3
    f456:	002a      	movs	r2, r5
    f458:	4b7c      	ldr	r3, [pc, #496]	; (f64c <LORAWAN_Reset+0x214>)
    f45a:	2100      	movs	r1, #0
    f45c:	2023      	movs	r0, #35	; 0x23
    f45e:	4798      	blx	r3
    f460:	782b      	ldrb	r3, [r5, #0]
    f462:	9a01      	ldr	r2, [sp, #4]
    f464:	4293      	cmp	r3, r2
    f466:	d001      	beq.n	f46c <LORAWAN_Reset+0x34>
    f468:	4b79      	ldr	r3, [pc, #484]	; (f650 <LORAWAN_Reset+0x218>)
    f46a:	4798      	blx	r3
    f46c:	0021      	movs	r1, r4
    f46e:	2334      	movs	r3, #52	; 0x34
    f470:	31f7      	adds	r1, #247	; 0xf7
    f472:	700b      	strb	r3, [r1, #0]
    f474:	2000      	movs	r0, #0
    f476:	4b77      	ldr	r3, [pc, #476]	; (f654 <LORAWAN_Reset+0x21c>)
    f478:	4798      	blx	r3
    f47a:	0023      	movs	r3, r4
    f47c:	2201      	movs	r2, #1
    f47e:	33f4      	adds	r3, #244	; 0xf4
    f480:	701a      	strb	r2, [r3, #0]
    f482:	0023      	movs	r3, r4
    f484:	2205      	movs	r2, #5
    f486:	33f5      	adds	r3, #245	; 0xf5
    f488:	701a      	strb	r2, [r3, #0]
    f48a:	0023      	movs	r3, r4
    f48c:	32fa      	adds	r2, #250	; 0xfa
    f48e:	33dd      	adds	r3, #221	; 0xdd
    f490:	701a      	strb	r2, [r3, #0]
    f492:	0023      	movs	r3, r4
    f494:	2500      	movs	r5, #0
    f496:	33de      	adds	r3, #222	; 0xde
    f498:	701d      	strb	r5, [r3, #0]
    f49a:	0023      	movs	r3, r4
    f49c:	33c6      	adds	r3, #198	; 0xc6
    f49e:	801d      	strh	r5, [r3, #0]
    f4a0:	0023      	movs	r3, r4
    f4a2:	3308      	adds	r3, #8
    f4a4:	67dd      	str	r5, [r3, #124]	; 0x7c
    f4a6:	1d23      	adds	r3, r4, #4
    f4a8:	67dd      	str	r5, [r3, #124]	; 0x7c
    f4aa:	0023      	movs	r3, r4
    f4ac:	33c4      	adds	r3, #196	; 0xc4
    f4ae:	801d      	strh	r5, [r3, #0]
    f4b0:	0023      	movs	r3, r4
    f4b2:	3390      	adds	r3, #144	; 0x90
    f4b4:	701d      	strb	r5, [r3, #0]
    f4b6:	0023      	movs	r3, r4
    f4b8:	33c2      	adds	r3, #194	; 0xc2
    f4ba:	801d      	strh	r5, [r3, #0]
    f4bc:	0023      	movs	r3, r4
    f4be:	33ed      	adds	r3, #237	; 0xed
    f4c0:	701d      	strb	r5, [r3, #0]
    f4c2:	0023      	movs	r3, r4
    f4c4:	33ee      	adds	r3, #238	; 0xee
    f4c6:	701d      	strb	r5, [r3, #0]
    f4c8:	0023      	movs	r3, r4
    f4ca:	3af9      	subs	r2, #249	; 0xf9
    f4cc:	33f8      	adds	r3, #248	; 0xf8
    f4ce:	601a      	str	r2, [r3, #0]
    f4d0:	0023      	movs	r3, r4
    f4d2:	33fc      	adds	r3, #252	; 0xfc
    f4d4:	601d      	str	r5, [r3, #0]
    f4d6:	0023      	movs	r3, r4
    f4d8:	33fe      	adds	r3, #254	; 0xfe
    f4da:	829d      	strh	r5, [r3, #20]
    f4dc:	82dd      	strh	r5, [r3, #22]
    f4de:	320a      	adds	r2, #10
    f4e0:	0029      	movs	r1, r5
    f4e2:	4b5d      	ldr	r3, [pc, #372]	; (f658 <LORAWAN_Reset+0x220>)
    f4e4:	485d      	ldr	r0, [pc, #372]	; (f65c <LORAWAN_Reset+0x224>)
    f4e6:	4798      	blx	r3
    f4e8:	23ea      	movs	r3, #234	; 0xea
    f4ea:	2201      	movs	r2, #1
    f4ec:	2607      	movs	r6, #7
    f4ee:	005b      	lsls	r3, r3, #1
    f4f0:	54e2      	strb	r2, [r4, r3]
    f4f2:	0029      	movs	r1, r5
    f4f4:	0032      	movs	r2, r6
    f4f6:	4b58      	ldr	r3, [pc, #352]	; (f658 <LORAWAN_Reset+0x220>)
    f4f8:	4859      	ldr	r0, [pc, #356]	; (f660 <LORAWAN_Reset+0x228>)
    f4fa:	4798      	blx	r3
    f4fc:	23f0      	movs	r3, #240	; 0xf0
    f4fe:	2201      	movs	r2, #1
    f500:	005b      	lsls	r3, r3, #1
    f502:	54e2      	strb	r2, [r4, r3]
    f504:	0023      	movs	r3, r4
    f506:	338c      	adds	r3, #140	; 0x8c
    f508:	801d      	strh	r5, [r3, #0]
    f50a:	0023      	movs	r3, r4
    f50c:	33da      	adds	r3, #218	; 0xda
    f50e:	701e      	strb	r6, [r3, #0]
    f510:	0023      	movs	r3, r4
    f512:	33d9      	adds	r3, #217	; 0xd9
    f514:	701d      	strb	r5, [r3, #0]
    f516:	0023      	movs	r3, r4
    f518:	33dc      	adds	r3, #220	; 0xdc
    f51a:	701d      	strb	r5, [r3, #0]
    f51c:	0023      	movs	r3, r4
    f51e:	33db      	adds	r3, #219	; 0xdb
    f520:	701d      	strb	r5, [r3, #0]
    f522:	9801      	ldr	r0, [sp, #4]
    f524:	4b4f      	ldr	r3, [pc, #316]	; (f664 <LORAWAN_Reset+0x22c>)
    f526:	67e5      	str	r5, [r4, #124]	; 0x7c
    f528:	4798      	blx	r3
    f52a:	0007      	movs	r7, r0
    f52c:	2808      	cmp	r0, #8
    f52e:	d000      	beq.n	f532 <LORAWAN_Reset+0xfa>
    f530:	e086      	b.n	f640 <LORAWAN_Reset+0x208>
    f532:	4e4d      	ldr	r6, [pc, #308]	; (f668 <LORAWAN_Reset+0x230>)
    f534:	4a4d      	ldr	r2, [pc, #308]	; (f66c <LORAWAN_Reset+0x234>)
    f536:	0029      	movs	r1, r5
    f538:	47b0      	blx	r6
    f53a:	4a4d      	ldr	r2, [pc, #308]	; (f670 <LORAWAN_Reset+0x238>)
    f53c:	0029      	movs	r1, r5
    f53e:	200e      	movs	r0, #14
    f540:	47b0      	blx	r6
    f542:	0023      	movs	r3, r4
    f544:	4a4b      	ldr	r2, [pc, #300]	; (f674 <LORAWAN_Reset+0x23c>)
    f546:	33e0      	adds	r3, #224	; 0xe0
    f548:	0029      	movs	r1, r5
    f54a:	2006      	movs	r0, #6
    f54c:	701d      	strb	r5, [r3, #0]
    f54e:	47b0      	blx	r6
    f550:	4b49      	ldr	r3, [pc, #292]	; (f678 <LORAWAN_Reset+0x240>)
    f552:	4798      	blx	r3
    f554:	466a      	mov	r2, sp
    f556:	0023      	movs	r3, r4
    f558:	7912      	ldrb	r2, [r2, #4]
    f55a:	33f6      	adds	r3, #246	; 0xf6
    f55c:	701a      	strb	r2, [r3, #0]
    f55e:	0029      	movs	r1, r5
    f560:	4b46      	ldr	r3, [pc, #280]	; (f67c <LORAWAN_Reset+0x244>)
    f562:	0028      	movs	r0, r5
    f564:	4798      	blx	r3
    f566:	2210      	movs	r2, #16
    f568:	34ff      	adds	r4, #255	; 0xff
    f56a:	7c63      	ldrb	r3, [r4, #17]
    f56c:	4213      	tst	r3, r2
    f56e:	d006      	beq.n	f57e <LORAWAN_Reset+0x146>
    f570:	ab02      	add	r3, sp, #8
    f572:	1d99      	adds	r1, r3, #6
    f574:	2301      	movs	r3, #1
    f576:	0038      	movs	r0, r7
    f578:	700b      	strb	r3, [r1, #0]
    f57a:	4b36      	ldr	r3, [pc, #216]	; (f654 <LORAWAN_Reset+0x21c>)
    f57c:	4798      	blx	r3
    f57e:	4b40      	ldr	r3, [pc, #256]	; (f680 <LORAWAN_Reset+0x248>)
    f580:	4940      	ldr	r1, [pc, #256]	; (f684 <LORAWAN_Reset+0x24c>)
    f582:	201e      	movs	r0, #30
    f584:	4798      	blx	r3
    f586:	4c2f      	ldr	r4, [pc, #188]	; (f644 <LORAWAN_Reset+0x20c>)
    f588:	0023      	movs	r3, r4
    f58a:	33ff      	adds	r3, #255	; 0xff
    f58c:	7c5b      	ldrb	r3, [r3, #17]
    f58e:	075b      	lsls	r3, r3, #29
    f590:	d507      	bpl.n	f5a2 <LORAWAN_Reset+0x16a>
    f592:	2100      	movs	r1, #0
    f594:	aa04      	add	r2, sp, #16
    f596:	2032      	movs	r0, #50	; 0x32
    f598:	47b0      	blx	r6
    f59a:	a904      	add	r1, sp, #16
    f59c:	2027      	movs	r0, #39	; 0x27
    f59e:	4b3a      	ldr	r3, [pc, #232]	; (f688 <LORAWAN_Reset+0x250>)
    f5a0:	4798      	blx	r3
    f5a2:	4a3a      	ldr	r2, [pc, #232]	; (f68c <LORAWAN_Reset+0x254>)
    f5a4:	2100      	movs	r1, #0
    f5a6:	2009      	movs	r0, #9
    f5a8:	47b0      	blx	r6
    f5aa:	4a39      	ldr	r2, [pc, #228]	; (f690 <LORAWAN_Reset+0x258>)
    f5ac:	2100      	movs	r1, #0
    f5ae:	200a      	movs	r0, #10
    f5b0:	47b0      	blx	r6
    f5b2:	4a38      	ldr	r2, [pc, #224]	; (f694 <LORAWAN_Reset+0x25c>)
    f5b4:	2100      	movs	r1, #0
    f5b6:	2036      	movs	r0, #54	; 0x36
    f5b8:	47b0      	blx	r6
    f5ba:	ad04      	add	r5, sp, #16
    f5bc:	4a36      	ldr	r2, [pc, #216]	; (f698 <LORAWAN_Reset+0x260>)
    f5be:	2100      	movs	r1, #0
    f5c0:	2037      	movs	r0, #55	; 0x37
    f5c2:	47b0      	blx	r6
    f5c4:	002a      	movs	r2, r5
    f5c6:	2100      	movs	r1, #0
    f5c8:	2014      	movs	r0, #20
    f5ca:	47b0      	blx	r6
    f5cc:	0023      	movs	r3, r4
    f5ce:	782a      	ldrb	r2, [r5, #0]
    f5d0:	33ea      	adds	r3, #234	; 0xea
    f5d2:	701a      	strb	r2, [r3, #0]
    f5d4:	0023      	movs	r3, r4
    f5d6:	786a      	ldrb	r2, [r5, #1]
    f5d8:	33eb      	adds	r3, #235	; 0xeb
    f5da:	701a      	strb	r2, [r3, #0]
    f5dc:	0023      	movs	r3, r4
    f5de:	2500      	movs	r5, #0
    f5e0:	33d6      	adds	r3, #214	; 0xd6
    f5e2:	801d      	strh	r5, [r3, #0]
    f5e4:	2265      	movs	r2, #101	; 0x65
    f5e6:	0029      	movs	r1, r5
    f5e8:	0020      	movs	r0, r4
    f5ea:	4b1b      	ldr	r3, [pc, #108]	; (f658 <LORAWAN_Reset+0x220>)
    f5ec:	4798      	blx	r3
    f5ee:	0023      	movs	r3, r4
    f5f0:	22fa      	movs	r2, #250	; 0xfa
    f5f2:	33c8      	adds	r3, #200	; 0xc8
    f5f4:	0092      	lsls	r2, r2, #2
    f5f6:	801a      	strh	r2, [r3, #0]
    f5f8:	0022      	movs	r2, r4
    f5fa:	23fa      	movs	r3, #250	; 0xfa
    f5fc:	32ca      	adds	r2, #202	; 0xca
    f5fe:	00db      	lsls	r3, r3, #3
    f600:	8013      	strh	r3, [r2, #0]
    f602:	0022      	movs	r2, r4
    f604:	4925      	ldr	r1, [pc, #148]	; (f69c <LORAWAN_Reset+0x264>)
    f606:	32cc      	adds	r2, #204	; 0xcc
    f608:	8011      	strh	r1, [r2, #0]
    f60a:	0022      	movs	r2, r4
    f60c:	4924      	ldr	r1, [pc, #144]	; (f6a0 <LORAWAN_Reset+0x268>)
    f60e:	32ce      	adds	r2, #206	; 0xce
    f610:	8011      	strh	r1, [r2, #0]
    f612:	0022      	movs	r2, r4
    f614:	32d2      	adds	r2, #210	; 0xd2
    f616:	8013      	strh	r3, [r2, #0]
    f618:	0023      	movs	r3, r4
    f61a:	2220      	movs	r2, #32
    f61c:	33d5      	adds	r3, #213	; 0xd5
    f61e:	701a      	strb	r2, [r3, #0]
    f620:	0023      	movs	r3, r4
    f622:	1892      	adds	r2, r2, r2
    f624:	33d4      	adds	r3, #212	; 0xd4
    f626:	701a      	strb	r2, [r3, #0]
    f628:	2380      	movs	r3, #128	; 0x80
    f62a:	34d0      	adds	r4, #208	; 0xd0
    f62c:	01db      	lsls	r3, r3, #7
    f62e:	8023      	strh	r3, [r4, #0]
    f630:	0028      	movs	r0, r5
    f632:	4b1c      	ldr	r3, [pc, #112]	; (f6a4 <LORAWAN_Reset+0x26c>)
    f634:	4798      	blx	r3
    f636:	4b1c      	ldr	r3, [pc, #112]	; (f6a8 <LORAWAN_Reset+0x270>)
    f638:	4798      	blx	r3
    f63a:	0038      	movs	r0, r7
    f63c:	b007      	add	sp, #28
    f63e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f640:	270a      	movs	r7, #10
    f642:	e7fa      	b.n	f63a <LORAWAN_Reset+0x202>
    f644:	200017d4 	.word	0x200017d4
    f648:	0000b951 	.word	0x0000b951
    f64c:	0000d2f1 	.word	0x0000d2f1
    f650:	000093bd 	.word	0x000093bd
    f654:	0000ffed 	.word	0x0000ffed
    f658:	000151f1 	.word	0x000151f1
    f65c:	200018d4 	.word	0x200018d4
    f660:	200019ab 	.word	0x200019ab
    f664:	000092dd 	.word	0x000092dd
    f668:	00009141 	.word	0x00009141
    f66c:	2000183d 	.word	0x2000183d
    f670:	200018e4 	.word	0x200018e4
    f674:	200018c0 	.word	0x200018c0
    f678:	00010209 	.word	0x00010209
    f67c:	00009729 	.word	0x00009729
    f680:	0000fefd 	.word	0x0000fefd
    f684:	200019b3 	.word	0x200019b3
    f688:	0000ef59 	.word	0x0000ef59
    f68c:	20001842 	.word	0x20001842
    f690:	2000183e 	.word	0x2000183e
    f694:	200018b5 	.word	0x200018b5
    f698:	200018b3 	.word	0x200018b3
    f69c:	00001388 	.word	0x00001388
    f6a0:	00001770 	.word	0x00001770
    f6a4:	0000c11d 	.word	0x0000c11d
    f6a8:	0000f885 	.word	0x0000f885

0000f6ac <LORAWAN_ReadyToSleep>:
    f6ac:	4b08      	ldr	r3, [pc, #32]	; (f6d0 <LORAWAN_ReadyToSleep+0x24>)
    f6ae:	001a      	movs	r2, r3
    f6b0:	32f4      	adds	r2, #244	; 0xf4
    f6b2:	7812      	ldrb	r2, [r2, #0]
    f6b4:	2a01      	cmp	r2, #1
    f6b6:	d002      	beq.n	f6be <LORAWAN_ReadyToSleep+0x12>
    f6b8:	2000      	movs	r0, #0
    f6ba:	2a04      	cmp	r2, #4
    f6bc:	d106      	bne.n	f6cc <LORAWAN_ReadyToSleep+0x20>
    f6be:	337c      	adds	r3, #124	; 0x7c
    f6c0:	7818      	ldrb	r0, [r3, #0]
    f6c2:	230e      	movs	r3, #14
    f6c4:	4018      	ands	r0, r3
    f6c6:	4243      	negs	r3, r0
    f6c8:	4158      	adcs	r0, r3
    f6ca:	b2c0      	uxtb	r0, r0
    f6cc:	4770      	bx	lr
    f6ce:	46c0      	nop			; (mov r8, r8)
    f6d0:	200017d4 	.word	0x200017d4

0000f6d4 <LorawanClasscUlAckTimerCallback>:
    f6d4:	2102      	movs	r1, #2
    f6d6:	4b03      	ldr	r3, [pc, #12]	; (f6e4 <LorawanClasscUlAckTimerCallback+0x10>)
    f6d8:	338c      	adds	r3, #140	; 0x8c
    f6da:	781a      	ldrb	r2, [r3, #0]
    f6dc:	438a      	bics	r2, r1
    f6de:	701a      	strb	r2, [r3, #0]
    f6e0:	4770      	bx	lr
    f6e2:	46c0      	nop			; (mov r8, r8)
    f6e4:	200017d4 	.word	0x200017d4

0000f6e8 <LorawanClasscValidateSend>:
    f6e8:	23ea      	movs	r3, #234	; 0xea
    f6ea:	b510      	push	{r4, lr}
    f6ec:	4c0a      	ldr	r4, [pc, #40]	; (f718 <LorawanClasscValidateSend+0x30>)
    f6ee:	005b      	lsls	r3, r3, #1
    f6f0:	5ce3      	ldrb	r3, [r4, r3]
    f6f2:	2b00      	cmp	r3, #0
    f6f4:	d008      	beq.n	f708 <LorawanClasscValidateSend+0x20>
    f6f6:	220e      	movs	r2, #14
    f6f8:	347c      	adds	r4, #124	; 0x7c
    f6fa:	7823      	ldrb	r3, [r4, #0]
    f6fc:	2008      	movs	r0, #8
    f6fe:	4013      	ands	r3, r2
    f700:	2b02      	cmp	r3, #2
    f702:	d100      	bne.n	f706 <LorawanClasscValidateSend+0x1e>
    f704:	2011      	movs	r0, #17
    f706:	bd10      	pop	{r4, pc}
    f708:	0023      	movs	r3, r4
    f70a:	33ff      	adds	r3, #255	; 0xff
    f70c:	7f58      	ldrb	r0, [r3, #29]
    f70e:	4b03      	ldr	r3, [pc, #12]	; (f71c <LorawanClasscValidateSend+0x34>)
    f710:	4798      	blx	r3
    f712:	2800      	cmp	r0, #0
    f714:	d1ef      	bne.n	f6f6 <LorawanClasscValidateSend+0xe>
    f716:	e7f5      	b.n	f704 <LorawanClasscValidateSend+0x1c>
    f718:	200017d4 	.word	0x200017d4
    f71c:	00009ced 	.word	0x00009ced

0000f720 <LorawanClasscReceiveWindow1Callback>:
    f720:	2301      	movs	r3, #1
    f722:	b507      	push	{r0, r1, r2, lr}
    f724:	a801      	add	r0, sp, #4
    f726:	7003      	strb	r3, [r0, #0]
    f728:	4b01      	ldr	r3, [pc, #4]	; (f730 <LorawanClasscReceiveWindow1Callback+0x10>)
    f72a:	4798      	blx	r3
    f72c:	bd07      	pop	{r0, r1, r2, pc}
    f72e:	46c0      	nop			; (mov r8, r8)
    f730:	00011211 	.word	0x00011211

0000f734 <LorawanClasscRxDone>:
    f734:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f736:	221f      	movs	r2, #31
    f738:	7803      	ldrb	r3, [r0, #0]
    f73a:	4c13      	ldr	r4, [pc, #76]	; (f788 <LorawanClasscRxDone+0x54>)
    f73c:	4393      	bics	r3, r2
    f73e:	2ba0      	cmp	r3, #160	; 0xa0
    f740:	d10c      	bne.n	f75c <LorawanClasscRxDone+0x28>
    f742:	0025      	movs	r5, r4
    f744:	35ff      	adds	r5, #255	; 0xff
    f746:	7f68      	ldrb	r0, [r5, #29]
    f748:	4b10      	ldr	r3, [pc, #64]	; (f78c <LorawanClasscRxDone+0x58>)
    f74a:	4798      	blx	r3
    f74c:	1e02      	subs	r2, r0, #0
    f74e:	d014      	beq.n	f77a <LorawanClasscRxDone+0x46>
    f750:	0022      	movs	r2, r4
    f752:	2102      	movs	r1, #2
    f754:	328c      	adds	r2, #140	; 0x8c
    f756:	7813      	ldrb	r3, [r2, #0]
    f758:	438b      	bics	r3, r1
    f75a:	7013      	strb	r3, [r2, #0]
    f75c:	347c      	adds	r4, #124	; 0x7c
    f75e:	7823      	ldrb	r3, [r4, #0]
    f760:	220e      	movs	r2, #14
    f762:	0019      	movs	r1, r3
    f764:	4011      	ands	r1, r2
    f766:	2906      	cmp	r1, #6
    f768:	d103      	bne.n	f772 <LorawanClasscRxDone+0x3e>
    f76a:	4393      	bics	r3, r2
    f76c:	3a04      	subs	r2, #4
    f76e:	4313      	orrs	r3, r2
    f770:	7023      	strb	r3, [r4, #0]
    f772:	2000      	movs	r0, #0
    f774:	4b06      	ldr	r3, [pc, #24]	; (f790 <LorawanClasscRxDone+0x5c>)
    f776:	4798      	blx	r3
    f778:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    f77a:	7f68      	ldrb	r0, [r5, #29]
    f77c:	4b05      	ldr	r3, [pc, #20]	; (f794 <LorawanClasscRxDone+0x60>)
    f77e:	9200      	str	r2, [sp, #0]
    f780:	4905      	ldr	r1, [pc, #20]	; (f798 <LorawanClasscRxDone+0x64>)
    f782:	4d06      	ldr	r5, [pc, #24]	; (f79c <LorawanClasscRxDone+0x68>)
    f784:	47a8      	blx	r5
    f786:	e7e9      	b.n	f75c <LorawanClasscRxDone+0x28>
    f788:	200017d4 	.word	0x200017d4
    f78c:	00009ced 	.word	0x00009ced
    f790:	0000dd95 	.word	0x0000dd95
    f794:	0000f6d5 	.word	0x0000f6d5
    f798:	001e8480 	.word	0x001e8480
    f79c:	00009b55 	.word	0x00009b55

0000f7a0 <LorawanClasscTxDone>:
    f7a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f7a2:	4c1b      	ldr	r4, [pc, #108]	; (f810 <LorawanClasscTxDone+0x70>)
    f7a4:	0023      	movs	r3, r4
    f7a6:	33ca      	adds	r3, #202	; 0xca
    f7a8:	881d      	ldrh	r5, [r3, #0]
    f7aa:	0023      	movs	r3, r4
    f7ac:	338c      	adds	r3, #140	; 0x8c
    f7ae:	781b      	ldrb	r3, [r3, #0]
    f7b0:	07db      	lsls	r3, r3, #31
    f7b2:	d525      	bpl.n	f800 <LorawanClasscTxDone+0x60>
    f7b4:	0023      	movs	r3, r4
    f7b6:	0022      	movs	r2, r4
    f7b8:	33da      	adds	r3, #218	; 0xda
    f7ba:	781b      	ldrb	r3, [r3, #0]
    f7bc:	32dc      	adds	r2, #220	; 0xdc
    f7be:	3301      	adds	r3, #1
    f7c0:	7812      	ldrb	r2, [r2, #0]
    f7c2:	4293      	cmp	r3, r2
    f7c4:	db07      	blt.n	f7d6 <LorawanClasscTxDone+0x36>
    f7c6:	23ef      	movs	r3, #239	; 0xef
    f7c8:	005b      	lsls	r3, r3, #1
    f7ca:	5ce3      	ldrb	r3, [r4, r3]
    f7cc:	2b00      	cmp	r3, #0
    f7ce:	d002      	beq.n	f7d6 <LorawanClasscTxDone+0x36>
    f7d0:	23fa      	movs	r3, #250	; 0xfa
    f7d2:	00db      	lsls	r3, r3, #3
    f7d4:	18ed      	adds	r5, r5, r3
    f7d6:	0023      	movs	r3, r4
    f7d8:	33ff      	adds	r3, #255	; 0xff
    f7da:	1945      	adds	r5, r0, r5
    f7dc:	7f58      	ldrb	r0, [r3, #29]
    f7de:	4b0d      	ldr	r3, [pc, #52]	; (f814 <LorawanClasscTxDone+0x74>)
    f7e0:	4798      	blx	r3
    f7e2:	34e8      	adds	r4, #232	; 0xe8
    f7e4:	21fa      	movs	r1, #250	; 0xfa
    f7e6:	7820      	ldrb	r0, [r4, #0]
    f7e8:	2400      	movs	r4, #0
    f7ea:	0089      	lsls	r1, r1, #2
    f7ec:	4369      	muls	r1, r5
    f7ee:	0022      	movs	r2, r4
    f7f0:	4d09      	ldr	r5, [pc, #36]	; (f818 <LorawanClasscTxDone+0x78>)
    f7f2:	9400      	str	r4, [sp, #0]
    f7f4:	4b09      	ldr	r3, [pc, #36]	; (f81c <LorawanClasscTxDone+0x7c>)
    f7f6:	47a8      	blx	r5
    f7f8:	0020      	movs	r0, r4
    f7fa:	4b09      	ldr	r3, [pc, #36]	; (f820 <LorawanClasscTxDone+0x80>)
    f7fc:	4798      	blx	r3
    f7fe:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    f800:	0023      	movs	r3, r4
    f802:	0022      	movs	r2, r4
    f804:	33d9      	adds	r3, #217	; 0xd9
    f806:	781b      	ldrb	r3, [r3, #0]
    f808:	32db      	adds	r2, #219	; 0xdb
    f80a:	3301      	adds	r3, #1
    f80c:	e7d8      	b.n	f7c0 <LorawanClasscTxDone+0x20>
    f80e:	46c0      	nop			; (mov r8, r8)
    f810:	200017d4 	.word	0x200017d4
    f814:	00009e61 	.word	0x00009e61
    f818:	00009b55 	.word	0x00009b55
    f81c:	0000dc61 	.word	0x0000dc61
    f820:	0000dd95 	.word	0x0000dd95

0000f824 <LorawanClasscRxTimeout>:
    f824:	b510      	push	{r4, lr}
    f826:	4b08      	ldr	r3, [pc, #32]	; (f848 <LorawanClasscRxTimeout+0x24>)
    f828:	210e      	movs	r1, #14
    f82a:	337c      	adds	r3, #124	; 0x7c
    f82c:	781a      	ldrb	r2, [r3, #0]
    f82e:	0010      	movs	r0, r2
    f830:	4008      	ands	r0, r1
    f832:	2806      	cmp	r0, #6
    f834:	d106      	bne.n	f844 <LorawanClasscRxTimeout+0x20>
    f836:	438a      	bics	r2, r1
    f838:	3904      	subs	r1, #4
    f83a:	430a      	orrs	r2, r1
    f83c:	701a      	strb	r2, [r3, #0]
    f83e:	2000      	movs	r0, #0
    f840:	4b02      	ldr	r3, [pc, #8]	; (f84c <LorawanClasscRxTimeout+0x28>)
    f842:	4798      	blx	r3
    f844:	bd10      	pop	{r4, pc}
    f846:	46c0      	nop			; (mov r8, r8)
    f848:	200017d4 	.word	0x200017d4
    f84c:	0000dd95 	.word	0x0000dd95

0000f850 <LorawanClasscNotifyAppOnReceive>:
    f850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f852:	001f      	movs	r7, r3
    f854:	4b08      	ldr	r3, [pc, #32]	; (f878 <LorawanClasscNotifyAppOnReceive+0x28>)
    f856:	0004      	movs	r4, r0
    f858:	33ff      	adds	r3, #255	; 0xff
    f85a:	7f58      	ldrb	r0, [r3, #29]
    f85c:	4b07      	ldr	r3, [pc, #28]	; (f87c <LorawanClasscNotifyAppOnReceive+0x2c>)
    f85e:	000d      	movs	r5, r1
    f860:	0016      	movs	r6, r2
    f862:	4798      	blx	r3
    f864:	2800      	cmp	r0, #0
    f866:	d105      	bne.n	f874 <LorawanClasscNotifyAppOnReceive+0x24>
    f868:	0020      	movs	r0, r4
    f86a:	003b      	movs	r3, r7
    f86c:	0032      	movs	r2, r6
    f86e:	0029      	movs	r1, r5
    f870:	4c03      	ldr	r4, [pc, #12]	; (f880 <LorawanClasscNotifyAppOnReceive+0x30>)
    f872:	47a0      	blx	r4
    f874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f876:	46c0      	nop			; (mov r8, r8)
    f878:	200017d4 	.word	0x200017d4
    f87c:	00009ced 	.word	0x00009ced
    f880:	0000d181 	.word	0x0000d181

0000f884 <LorawanMcastInit>:
    f884:	2290      	movs	r2, #144	; 0x90
    f886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f888:	2500      	movs	r5, #0
    f88a:	4b0e      	ldr	r3, [pc, #56]	; (f8c4 <LorawanMcastInit+0x40>)
    f88c:	0052      	lsls	r2, r2, #1
    f88e:	549d      	strb	r5, [r3, r2]
    f890:	2222      	movs	r2, #34	; 0x22
    f892:	2701      	movs	r7, #1
    f894:	32ff      	adds	r2, #255	; 0xff
    f896:	4c0c      	ldr	r4, [pc, #48]	; (f8c8 <LorawanMcastInit+0x44>)
    f898:	549d      	strb	r5, [r3, r2]
    f89a:	427f      	negs	r7, r7
    f89c:	0023      	movs	r3, r4
    f89e:	3b14      	subs	r3, #20
    f8a0:	601f      	str	r7, [r3, #0]
    f8a2:	2210      	movs	r2, #16
    f8a4:	2100      	movs	r1, #0
    f8a6:	0020      	movs	r0, r4
    f8a8:	4e08      	ldr	r6, [pc, #32]	; (f8cc <LorawanMcastInit+0x48>)
    f8aa:	47b0      	blx	r6
    f8ac:	0020      	movs	r0, r4
    f8ae:	2210      	movs	r2, #16
    f8b0:	3810      	subs	r0, #16
    f8b2:	2100      	movs	r1, #0
    f8b4:	47b0      	blx	r6
    f8b6:	4b06      	ldr	r3, [pc, #24]	; (f8d0 <LorawanMcastInit+0x4c>)
    f8b8:	6125      	str	r5, [r4, #16]
    f8ba:	342c      	adds	r4, #44	; 0x2c
    f8bc:	429c      	cmp	r4, r3
    f8be:	d1ed      	bne.n	f89c <LorawanMcastInit+0x18>
    f8c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f8c2:	46c0      	nop			; (mov r8, r8)
    f8c4:	200017d4 	.word	0x200017d4
    f8c8:	2000190c 	.word	0x2000190c
    f8cc:	000151f1 	.word	0x000151f1
    f8d0:	200019bc 	.word	0x200019bc

0000f8d4 <LorawanMcastEnable>:
    f8d4:	0002      	movs	r2, r0
    f8d6:	b530      	push	{r4, r5, lr}
    f8d8:	200a      	movs	r0, #10
    f8da:	2903      	cmp	r1, #3
    f8dc:	d823      	bhi.n	f926 <LorawanMcastEnable+0x52>
    f8de:	4b1a      	ldr	r3, [pc, #104]	; (f948 <LorawanMcastEnable+0x74>)
    f8e0:	2a00      	cmp	r2, #0
    f8e2:	d021      	beq.n	f928 <LorawanMcastEnable+0x54>
    f8e4:	222c      	movs	r2, #44	; 0x2c
    f8e6:	434a      	muls	r2, r1
    f8e8:	189a      	adds	r2, r3, r2
    f8ea:	3249      	adds	r2, #73	; 0x49
    f8ec:	32ff      	adds	r2, #255	; 0xff
    f8ee:	7912      	ldrb	r2, [r2, #4]
    f8f0:	0754      	lsls	r4, r2, #29
    f8f2:	d513      	bpl.n	f91c <LorawanMcastEnable+0x48>
    f8f4:	0794      	lsls	r4, r2, #30
    f8f6:	d511      	bpl.n	f91c <LorawanMcastEnable+0x48>
    f8f8:	07d2      	lsls	r2, r2, #31
    f8fa:	0fd2      	lsrs	r2, r2, #31
    f8fc:	2a01      	cmp	r2, #1
    f8fe:	d10d      	bne.n	f91c <LorawanMcastEnable+0x48>
    f900:	001c      	movs	r4, r3
    f902:	34f4      	adds	r4, #244	; 0xf4
    f904:	7825      	ldrb	r5, [r4, #0]
    f906:	2406      	movs	r4, #6
    f908:	4225      	tst	r5, r4
    f90a:	d007      	beq.n	f91c <LorawanMcastEnable+0x48>
    f90c:	2022      	movs	r0, #34	; 0x22
    f90e:	408a      	lsls	r2, r1
    f910:	30ff      	adds	r0, #255	; 0xff
    f912:	5c19      	ldrb	r1, [r3, r0]
    f914:	430a      	orrs	r2, r1
    f916:	541a      	strb	r2, [r3, r0]
    f918:	381a      	subs	r0, #26
    f91a:	38ff      	subs	r0, #255	; 0xff
    f91c:	2190      	movs	r1, #144	; 0x90
    f91e:	0049      	lsls	r1, r1, #1
    f920:	5c5a      	ldrb	r2, [r3, r1]
    f922:	3201      	adds	r2, #1
    f924:	545a      	strb	r2, [r3, r1]
    f926:	bd30      	pop	{r4, r5, pc}
    f928:	2201      	movs	r2, #1
    f92a:	408a      	lsls	r2, r1
    f92c:	2022      	movs	r0, #34	; 0x22
    f92e:	0011      	movs	r1, r2
    f930:	30ff      	adds	r0, #255	; 0xff
    f932:	5c1a      	ldrb	r2, [r3, r0]
    f934:	438a      	bics	r2, r1
    f936:	2190      	movs	r1, #144	; 0x90
    f938:	541a      	strb	r2, [r3, r0]
    f93a:	0049      	lsls	r1, r1, #1
    f93c:	5c5a      	ldrb	r2, [r3, r1]
    f93e:	381a      	subs	r0, #26
    f940:	3a01      	subs	r2, #1
    f942:	545a      	strb	r2, [r3, r1]
    f944:	38ff      	subs	r0, #255	; 0xff
    f946:	e7ee      	b.n	f926 <LorawanMcastEnable+0x52>
    f948:	200017d4 	.word	0x200017d4

0000f94c <LorawanMcastValidateHdr>:
    f94c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f94e:	469c      	mov	ip, r3
    f950:	2400      	movs	r4, #0
    f952:	230a      	movs	r3, #10
    f954:	4f18      	ldr	r7, [pc, #96]	; (f9b8 <LorawanMcastValidateHdr+0x6c>)
    f956:	b2e5      	uxtb	r5, r4
    f958:	9501      	str	r5, [sp, #4]
    f95a:	2522      	movs	r5, #34	; 0x22
    f95c:	35ff      	adds	r5, #255	; 0xff
    f95e:	5d7d      	ldrb	r5, [r7, r5]
    f960:	2601      	movs	r6, #1
    f962:	4125      	asrs	r5, r4
    f964:	4235      	tst	r5, r6
    f966:	d022      	beq.n	f9ae <LorawanMcastValidateHdr+0x62>
    f968:	7886      	ldrb	r6, [r0, #2]
    f96a:	7845      	ldrb	r5, [r0, #1]
    f96c:	0236      	lsls	r6, r6, #8
    f96e:	432e      	orrs	r6, r5
    f970:	78c5      	ldrb	r5, [r0, #3]
    f972:	042d      	lsls	r5, r5, #16
    f974:	432e      	orrs	r6, r5
    f976:	7905      	ldrb	r5, [r0, #4]
    f978:	062d      	lsls	r5, r5, #24
    f97a:	4335      	orrs	r5, r6
    f97c:	262c      	movs	r6, #44	; 0x2c
    f97e:	4366      	muls	r6, r4
    f980:	3625      	adds	r6, #37	; 0x25
    f982:	36ff      	adds	r6, #255	; 0xff
    f984:	59be      	ldr	r6, [r7, r6]
    f986:	42b5      	cmp	r5, r6
    f988:	d111      	bne.n	f9ae <LorawanMcastValidateHdr+0x62>
    f98a:	4d0c      	ldr	r5, [pc, #48]	; (f9bc <LorawanMcastValidateHdr+0x70>)
    f98c:	782e      	ldrb	r6, [r5, #0]
    f98e:	2506      	movs	r5, #6
    f990:	422e      	tst	r6, r5
    f992:	d00c      	beq.n	f9ae <LorawanMcastValidateHdr+0x62>
    f994:	2a00      	cmp	r2, #0
    f996:	d00a      	beq.n	f9ae <LorawanMcastValidateHdr+0x62>
    f998:	7946      	ldrb	r6, [r0, #5]
    f99a:	3569      	adds	r5, #105	; 0x69
    f99c:	422e      	tst	r6, r5
    f99e:	d106      	bne.n	f9ae <LorawanMcastValidateHdr+0x62>
    f9a0:	2903      	cmp	r1, #3
    f9a2:	d104      	bne.n	f9ae <LorawanMcastValidateHdr+0x62>
    f9a4:	466d      	mov	r5, sp
    f9a6:	4663      	mov	r3, ip
    f9a8:	792d      	ldrb	r5, [r5, #4]
    f9aa:	701d      	strb	r5, [r3, #0]
    f9ac:	2308      	movs	r3, #8
    f9ae:	3401      	adds	r4, #1
    f9b0:	2c04      	cmp	r4, #4
    f9b2:	d1d0      	bne.n	f956 <LorawanMcastValidateHdr+0xa>
    f9b4:	0018      	movs	r0, r3
    f9b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f9b8:	200017d4 	.word	0x200017d4
    f9bc:	200018c8 	.word	0x200018c8

0000f9c0 <LorawanMcastProcessPkt>:
    f9c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f9c2:	b08b      	sub	sp, #44	; 0x2c
    f9c4:	9007      	str	r0, [sp, #28]
    f9c6:	000c      	movs	r4, r1
    f9c8:	0015      	movs	r5, r2
    f9ca:	7991      	ldrb	r1, [r2, #6]
    f9cc:	79d2      	ldrb	r2, [r2, #7]
    f9ce:	4e35      	ldr	r6, [pc, #212]	; (faa4 <LorawanMcastProcessPkt+0xe4>)
    f9d0:	0212      	lsls	r2, r2, #8
    f9d2:	430a      	orrs	r2, r1
    f9d4:	212c      	movs	r1, #44	; 0x2c
    f9d6:	4359      	muls	r1, r3
    f9d8:	1873      	adds	r3, r6, r1
    f9da:	9309      	str	r3, [sp, #36]	; 0x24
    f9dc:	3349      	adds	r3, #73	; 0x49
    f9de:	33ff      	adds	r3, #255	; 0xff
    f9e0:	9108      	str	r1, [sp, #32]
    f9e2:	8819      	ldrh	r1, [r3, #0]
    f9e4:	270a      	movs	r7, #10
    f9e6:	4291      	cmp	r1, r2
    f9e8:	d845      	bhi.n	fa76 <LorawanMcastProcessPkt+0xb6>
    f9ea:	801a      	strh	r2, [r3, #0]
    f9ec:	2105      	movs	r1, #5
    f9ee:	4b2e      	ldr	r3, [pc, #184]	; (faa8 <LorawanMcastProcessPkt+0xe8>)
    f9f0:	2000      	movs	r0, #0
    f9f2:	4798      	blx	r3
    f9f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f9f6:	0021      	movs	r1, r4
    f9f8:	32fc      	adds	r2, #252	; 0xfc
    f9fa:	6a93      	ldr	r3, [r2, #40]	; 0x28
    f9fc:	9807      	ldr	r0, [sp, #28]
    f9fe:	9304      	str	r3, [sp, #16]
    fa00:	4b2a      	ldr	r3, [pc, #168]	; (faac <LorawanMcastProcessPkt+0xec>)
    fa02:	390d      	subs	r1, #13
    fa04:	9303      	str	r3, [sp, #12]
    fa06:	2319      	movs	r3, #25
    fa08:	9302      	str	r3, [sp, #8]
    fa0a:	3b16      	subs	r3, #22
    fa0c:	9301      	str	r3, [sp, #4]
    fa0e:	9b08      	ldr	r3, [sp, #32]
    fa10:	b2c9      	uxtb	r1, r1
    fa12:	3339      	adds	r3, #57	; 0x39
    fa14:	33ff      	adds	r3, #255	; 0xff
    fa16:	199b      	adds	r3, r3, r6
    fa18:	9300      	str	r3, [sp, #0]
    fa1a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    fa1c:	3009      	adds	r0, #9
    fa1e:	2201      	movs	r2, #1
    fa20:	4f23      	ldr	r7, [pc, #140]	; (fab0 <LorawanMcastProcessPkt+0xf0>)
    fa22:	47b8      	blx	r7
    fa24:	2800      	cmp	r0, #0
    fa26:	d002      	beq.n	fa2e <LorawanMcastProcessPkt+0x6e>
    fa28:	201f      	movs	r0, #31
    fa2a:	4b22      	ldr	r3, [pc, #136]	; (fab4 <LorawanMcastProcessPkt+0xf4>)
    fa2c:	4798      	blx	r3
    fa2e:	4922      	ldr	r1, [pc, #136]	; (fab8 <LorawanMcastProcessPkt+0xf8>)
    fa30:	2708      	movs	r7, #8
    fa32:	784a      	ldrb	r2, [r1, #1]
    fa34:	780b      	ldrb	r3, [r1, #0]
    fa36:	0212      	lsls	r2, r2, #8
    fa38:	431a      	orrs	r2, r3
    fa3a:	788b      	ldrb	r3, [r1, #2]
    fa3c:	041b      	lsls	r3, r3, #16
    fa3e:	431a      	orrs	r2, r3
    fa40:	78cb      	ldrb	r3, [r1, #3]
    fa42:	061b      	lsls	r3, r3, #24
    fa44:	4313      	orrs	r3, r2
    fa46:	d016      	beq.n	fa76 <LorawanMcastProcessPkt+0xb6>
    fa48:	2220      	movs	r2, #32
    fa4a:	368c      	adds	r6, #140	; 0x8c
    fa4c:	7833      	ldrb	r3, [r6, #0]
    fa4e:	9907      	ldr	r1, [sp, #28]
    fa50:	4393      	bics	r3, r2
    fa52:	7033      	strb	r3, [r6, #0]
    fa54:	78ab      	ldrb	r3, [r5, #2]
    fa56:	0022      	movs	r2, r4
    fa58:	40bb      	lsls	r3, r7
    fa5a:	7868      	ldrb	r0, [r5, #1]
    fa5c:	3a0c      	subs	r2, #12
    fa5e:	4303      	orrs	r3, r0
    fa60:	78e8      	ldrb	r0, [r5, #3]
    fa62:	b2d2      	uxtb	r2, r2
    fa64:	0400      	lsls	r0, r0, #16
    fa66:	4303      	orrs	r3, r0
    fa68:	7928      	ldrb	r0, [r5, #4]
    fa6a:	19c9      	adds	r1, r1, r7
    fa6c:	0600      	lsls	r0, r0, #24
    fa6e:	4318      	orrs	r0, r3
    fa70:	4c12      	ldr	r4, [pc, #72]	; (fabc <LorawanMcastProcessPkt+0xfc>)
    fa72:	003b      	movs	r3, r7
    fa74:	47a0      	blx	r4
    fa76:	4a0b      	ldr	r2, [pc, #44]	; (faa4 <LorawanMcastProcessPkt+0xe4>)
    fa78:	200e      	movs	r0, #14
    fa7a:	0011      	movs	r1, r2
    fa7c:	317c      	adds	r1, #124	; 0x7c
    fa7e:	780b      	ldrb	r3, [r1, #0]
    fa80:	001c      	movs	r4, r3
    fa82:	4004      	ands	r4, r0
    fa84:	2c06      	cmp	r4, #6
    fa86:	d107      	bne.n	fa98 <LorawanMcastProcessPkt+0xd8>
    fa88:	32f4      	adds	r2, #244	; 0xf4
    fa8a:	7812      	ldrb	r2, [r2, #0]
    fa8c:	2a04      	cmp	r2, #4
    fa8e:	d103      	bne.n	fa98 <LorawanMcastProcessPkt+0xd8>
    fa90:	4383      	bics	r3, r0
    fa92:	3206      	adds	r2, #6
    fa94:	4313      	orrs	r3, r2
    fa96:	700b      	strb	r3, [r1, #0]
    fa98:	2000      	movs	r0, #0
    fa9a:	4b09      	ldr	r3, [pc, #36]	; (fac0 <LorawanMcastProcessPkt+0x100>)
    fa9c:	4798      	blx	r3
    fa9e:	0038      	movs	r0, r7
    faa0:	b00b      	add	sp, #44	; 0x2c
    faa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    faa4:	200017d4 	.word	0x200017d4
    faa8:	00009729 	.word	0x00009729
    faac:	20001ad4 	.word	0x20001ad4
    fab0:	0000cd1d 	.word	0x0000cd1d
    fab4:	0000cddd 	.word	0x0000cddd
    fab8:	20001acc 	.word	0x20001acc
    fabc:	0000d181 	.word	0x0000d181
    fac0:	0000dd95 	.word	0x0000dd95

0000fac4 <LorawanAddMcastAddr>:
    fac4:	4b11      	ldr	r3, [pc, #68]	; (fb0c <LorawanAddMcastAddr+0x48>)
    fac6:	b570      	push	{r4, r5, r6, lr}
    fac8:	001a      	movs	r2, r3
    faca:	327c      	adds	r2, #124	; 0x7c
    facc:	7812      	ldrb	r2, [r2, #0]
    face:	07d2      	lsls	r2, r2, #31
    fad0:	d509      	bpl.n	fae6 <LorawanAddMcastAddr+0x22>
    fad2:	681a      	ldr	r2, [r3, #0]
    fad4:	0a15      	lsrs	r5, r2, #8
    fad6:	791a      	ldrb	r2, [r3, #4]
    fad8:	0612      	lsls	r2, r2, #24
    fada:	432a      	orrs	r2, r5
    fadc:	4282      	cmp	r2, r0
    fade:	d102      	bne.n	fae6 <LorawanAddMcastAddr+0x22>
    fae0:	220a      	movs	r2, #10
    fae2:	2903      	cmp	r1, #3
    fae4:	d810      	bhi.n	fb08 <LorawanAddMcastAddr+0x44>
    fae6:	242c      	movs	r4, #44	; 0x2c
    fae8:	434c      	muls	r4, r1
    faea:	191c      	adds	r4, r3, r4
    faec:	0023      	movs	r3, r4
    faee:	33fc      	adds	r3, #252	; 0xfc
    faf0:	6298      	str	r0, [r3, #40]	; 0x28
    faf2:	2106      	movs	r1, #6
    faf4:	2000      	movs	r0, #0
    faf6:	4b06      	ldr	r3, [pc, #24]	; (fb10 <LorawanAddMcastAddr+0x4c>)
    faf8:	4798      	blx	r3
    fafa:	2201      	movs	r2, #1
    fafc:	3449      	adds	r4, #73	; 0x49
    fafe:	34ff      	adds	r4, #255	; 0xff
    fb00:	7921      	ldrb	r1, [r4, #4]
    fb02:	430a      	orrs	r2, r1
    fb04:	7122      	strb	r2, [r4, #4]
    fb06:	2208      	movs	r2, #8
    fb08:	0010      	movs	r0, r2
    fb0a:	bd70      	pop	{r4, r5, r6, pc}
    fb0c:	200017d4 	.word	0x200017d4
    fb10:	00009729 	.word	0x00009729

0000fb14 <LorawanAddMcastAppskey>:
    fb14:	b570      	push	{r4, r5, r6, lr}
    fb16:	4c11      	ldr	r4, [pc, #68]	; (fb5c <LorawanAddMcastAppskey+0x48>)
    fb18:	0006      	movs	r6, r0
    fb1a:	0023      	movs	r3, r4
    fb1c:	337c      	adds	r3, #124	; 0x7c
    fb1e:	781b      	ldrb	r3, [r3, #0]
    fb20:	07db      	lsls	r3, r3, #31
    fb22:	d504      	bpl.n	fb2e <LorawanAddMcastAppskey+0x1a>
    fb24:	2800      	cmp	r0, #0
    fb26:	d102      	bne.n	fb2e <LorawanAddMcastAppskey+0x1a>
    fb28:	200a      	movs	r0, #10
    fb2a:	2903      	cmp	r1, #3
    fb2c:	d815      	bhi.n	fb5a <LorawanAddMcastAppskey+0x46>
    fb2e:	252c      	movs	r5, #44	; 0x2c
    fb30:	434d      	muls	r5, r1
    fb32:	0028      	movs	r0, r5
    fb34:	3039      	adds	r0, #57	; 0x39
    fb36:	30ff      	adds	r0, #255	; 0xff
    fb38:	2210      	movs	r2, #16
    fb3a:	1820      	adds	r0, r4, r0
    fb3c:	0031      	movs	r1, r6
    fb3e:	4b08      	ldr	r3, [pc, #32]	; (fb60 <LorawanAddMcastAppskey+0x4c>)
    fb40:	4798      	blx	r3
    fb42:	4b08      	ldr	r3, [pc, #32]	; (fb64 <LorawanAddMcastAppskey+0x50>)
    fb44:	2107      	movs	r1, #7
    fb46:	2000      	movs	r0, #0
    fb48:	4798      	blx	r3
    fb4a:	2304      	movs	r3, #4
    fb4c:	2008      	movs	r0, #8
    fb4e:	1964      	adds	r4, r4, r5
    fb50:	3449      	adds	r4, #73	; 0x49
    fb52:	34ff      	adds	r4, #255	; 0xff
    fb54:	7922      	ldrb	r2, [r4, #4]
    fb56:	4313      	orrs	r3, r2
    fb58:	7123      	strb	r3, [r4, #4]
    fb5a:	bd70      	pop	{r4, r5, r6, pc}
    fb5c:	200017d4 	.word	0x200017d4
    fb60:	0001516d 	.word	0x0001516d
    fb64:	00009729 	.word	0x00009729

0000fb68 <LorawanAddMcastNwkskey>:
    fb68:	b570      	push	{r4, r5, r6, lr}
    fb6a:	4c11      	ldr	r4, [pc, #68]	; (fbb0 <LorawanAddMcastNwkskey+0x48>)
    fb6c:	0006      	movs	r6, r0
    fb6e:	0023      	movs	r3, r4
    fb70:	337c      	adds	r3, #124	; 0x7c
    fb72:	781b      	ldrb	r3, [r3, #0]
    fb74:	07db      	lsls	r3, r3, #31
    fb76:	d504      	bpl.n	fb82 <LorawanAddMcastNwkskey+0x1a>
    fb78:	2800      	cmp	r0, #0
    fb7a:	d102      	bne.n	fb82 <LorawanAddMcastNwkskey+0x1a>
    fb7c:	200a      	movs	r0, #10
    fb7e:	2903      	cmp	r1, #3
    fb80:	d815      	bhi.n	fbae <LorawanAddMcastNwkskey+0x46>
    fb82:	252c      	movs	r5, #44	; 0x2c
    fb84:	434d      	muls	r5, r1
    fb86:	0028      	movs	r0, r5
    fb88:	3029      	adds	r0, #41	; 0x29
    fb8a:	30ff      	adds	r0, #255	; 0xff
    fb8c:	2210      	movs	r2, #16
    fb8e:	1820      	adds	r0, r4, r0
    fb90:	0031      	movs	r1, r6
    fb92:	4b08      	ldr	r3, [pc, #32]	; (fbb4 <LorawanAddMcastNwkskey+0x4c>)
    fb94:	4798      	blx	r3
    fb96:	4b08      	ldr	r3, [pc, #32]	; (fbb8 <LorawanAddMcastNwkskey+0x50>)
    fb98:	2108      	movs	r1, #8
    fb9a:	2000      	movs	r0, #0
    fb9c:	4798      	blx	r3
    fb9e:	2302      	movs	r3, #2
    fba0:	2008      	movs	r0, #8
    fba2:	1964      	adds	r4, r4, r5
    fba4:	3449      	adds	r4, #73	; 0x49
    fba6:	34ff      	adds	r4, #255	; 0xff
    fba8:	7922      	ldrb	r2, [r4, #4]
    fbaa:	4313      	orrs	r3, r2
    fbac:	7123      	strb	r3, [r4, #4]
    fbae:	bd70      	pop	{r4, r5, r6, pc}
    fbb0:	200017d4 	.word	0x200017d4
    fbb4:	0001516d 	.word	0x0001516d
    fbb8:	00009729 	.word	0x00009729

0000fbbc <Lorawan_Pds_fid1_CB>:
    fbbc:	4770      	bx	lr
	...

0000fbc0 <Lorawan_Pds_fid2_CB>:
    fbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fbc2:	23f0      	movs	r3, #240	; 0xf0
    fbc4:	4c25      	ldr	r4, [pc, #148]	; (fc5c <Lorawan_Pds_fid2_CB+0x9c>)
    fbc6:	005b      	lsls	r3, r3, #1
    fbc8:	5ce2      	ldrb	r2, [r4, r3]
    fbca:	2a00      	cmp	r2, #0
    fbcc:	d010      	beq.n	fbf0 <Lorawan_Pds_fid2_CB+0x30>
    fbce:	3be0      	subs	r3, #224	; 0xe0
    fbd0:	3bff      	subs	r3, #255	; 0xff
    fbd2:	4093      	lsls	r3, r2
    fbd4:	1d21      	adds	r1, r4, #4
    fbd6:	6fca      	ldr	r2, [r1, #124]	; 0x7c
    fbd8:	18d2      	adds	r2, r2, r3
    fbda:	67ca      	str	r2, [r1, #124]	; 0x7c
    fbdc:	0021      	movs	r1, r4
    fbde:	3108      	adds	r1, #8
    fbe0:	6fca      	ldr	r2, [r1, #124]	; 0x7c
    fbe2:	18d2      	adds	r2, r2, r3
    fbe4:	67ca      	str	r2, [r1, #124]	; 0x7c
    fbe6:	0022      	movs	r2, r4
    fbe8:	32fc      	adds	r2, #252	; 0xfc
    fbea:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    fbec:	18cb      	adds	r3, r1, r3
    fbee:	64d3      	str	r3, [r2, #76]	; 0x4c
    fbf0:	0025      	movs	r5, r4
    fbf2:	2271      	movs	r2, #113	; 0x71
    fbf4:	2701      	movs	r7, #1
    fbf6:	357c      	adds	r5, #124	; 0x7c
    fbf8:	782b      	ldrb	r3, [r5, #0]
    fbfa:	4013      	ands	r3, r2
    fbfc:	702b      	strb	r3, [r5, #0]
    fbfe:	786b      	ldrb	r3, [r5, #1]
    fc00:	43bb      	bics	r3, r7
    fc02:	706b      	strb	r3, [r5, #1]
    fc04:	23e2      	movs	r3, #226	; 0xe2
    fc06:	33ff      	adds	r3, #255	; 0xff
    fc08:	5ce3      	ldrb	r3, [r4, r3]
    fc0a:	2b00      	cmp	r3, #0
    fc0c:	d018      	beq.n	fc40 <Lorawan_Pds_fid2_CB+0x80>
    fc0e:	4914      	ldr	r1, [pc, #80]	; (fc60 <Lorawan_Pds_fid2_CB+0xa0>)
    fc10:	2006      	movs	r0, #6
    fc12:	4e14      	ldr	r6, [pc, #80]	; (fc64 <Lorawan_Pds_fid2_CB+0xa4>)
    fc14:	47b0      	blx	r6
    fc16:	2800      	cmp	r0, #0
    fc18:	d002      	beq.n	fc20 <Lorawan_Pds_fid2_CB+0x60>
    fc1a:	782b      	ldrb	r3, [r5, #0]
    fc1c:	43bb      	bics	r3, r7
    fc1e:	702b      	strb	r3, [r5, #0]
    fc20:	0023      	movs	r3, r4
    fc22:	2501      	movs	r5, #1
    fc24:	337c      	adds	r3, #124	; 0x7c
    fc26:	781b      	ldrb	r3, [r3, #0]
    fc28:	422b      	tst	r3, r5
    fc2a:	d008      	beq.n	fc3e <Lorawan_Pds_fid2_CB+0x7e>
    fc2c:	7823      	ldrb	r3, [r4, #0]
    fc2e:	2b00      	cmp	r3, #0
    fc30:	d106      	bne.n	fc40 <Lorawan_Pds_fid2_CB+0x80>
    fc32:	490d      	ldr	r1, [pc, #52]	; (fc68 <Lorawan_Pds_fid2_CB+0xa8>)
    fc34:	2002      	movs	r0, #2
    fc36:	47b0      	blx	r6
    fc38:	490c      	ldr	r1, [pc, #48]	; (fc6c <Lorawan_Pds_fid2_CB+0xac>)
    fc3a:	0028      	movs	r0, r5
    fc3c:	47b0      	blx	r6
    fc3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fc40:	0020      	movs	r0, r4
    fc42:	0021      	movs	r1, r4
    fc44:	2210      	movs	r2, #16
    fc46:	3115      	adds	r1, #21
    fc48:	4d09      	ldr	r5, [pc, #36]	; (fc70 <Lorawan_Pds_fid2_CB+0xb0>)
    fc4a:	3035      	adds	r0, #53	; 0x35
    fc4c:	47a8      	blx	r5
    fc4e:	0020      	movs	r0, r4
    fc50:	1d61      	adds	r1, r4, #5
    fc52:	2210      	movs	r2, #16
    fc54:	3025      	adds	r0, #37	; 0x25
    fc56:	47a8      	blx	r5
    fc58:	e7f1      	b.n	fc3e <Lorawan_Pds_fid2_CB+0x7e>
    fc5a:	46c0      	nop			; (mov r8, r8)
    fc5c:	200017d4 	.word	0x200017d4
    fc60:	20001829 	.word	0x20001829
    fc64:	00009449 	.word	0x00009449
    fc68:	200017f9 	.word	0x200017f9
    fc6c:	20001809 	.word	0x20001809
    fc70:	0001516d 	.word	0x0001516d

0000fc74 <LORAWAN_TxHandler>:
    fc74:	b5f0      	push	{r4, r5, r6, r7, lr}
    fc76:	b087      	sub	sp, #28
    fc78:	466b      	mov	r3, sp
    fc7a:	2501      	movs	r5, #1
    fc7c:	4c30      	ldr	r4, [pc, #192]	; (fd40 <LORAWAN_TxHandler+0xcc>)
    fc7e:	701d      	strb	r5, [r3, #0]
    fc80:	0023      	movs	r3, r4
    fc82:	466a      	mov	r2, sp
    fc84:	33e1      	adds	r3, #225	; 0xe1
    fc86:	781b      	ldrb	r3, [r3, #0]
    fc88:	4669      	mov	r1, sp
    fc8a:	7053      	strb	r3, [r2, #1]
    fc8c:	0023      	movs	r3, r4
    fc8e:	33df      	adds	r3, #223	; 0xdf
    fc90:	781b      	ldrb	r3, [r3, #0]
    fc92:	202f      	movs	r0, #47	; 0x2f
    fc94:	7093      	strb	r3, [r2, #2]
    fc96:	aa03      	add	r2, sp, #12
    fc98:	4b2a      	ldr	r3, [pc, #168]	; (fd44 <LORAWAN_TxHandler+0xd0>)
    fc9a:	4798      	blx	r3
    fc9c:	2808      	cmp	r0, #8
    fc9e:	d004      	beq.n	fcaa <LORAWAN_TxHandler+0x36>
    fca0:	4b29      	ldr	r3, [pc, #164]	; (fd48 <LORAWAN_TxHandler+0xd4>)
    fca2:	4798      	blx	r3
    fca4:	2000      	movs	r0, #0
    fca6:	b007      	add	sp, #28
    fca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fcaa:	0023      	movs	r3, r4
    fcac:	33f4      	adds	r3, #244	; 0xf4
    fcae:	781b      	ldrb	r3, [r3, #0]
    fcb0:	ae01      	add	r6, sp, #4
    fcb2:	2b04      	cmp	r3, #4
    fcb4:	d103      	bne.n	fcbe <LORAWAN_TxHandler+0x4a>
    fcb6:	0030      	movs	r0, r6
    fcb8:	4b24      	ldr	r3, [pc, #144]	; (fd4c <LORAWAN_TxHandler+0xd8>)
    fcba:	7035      	strb	r5, [r6, #0]
    fcbc:	4798      	blx	r3
    fcbe:	4b24      	ldr	r3, [pc, #144]	; (fd50 <LORAWAN_TxHandler+0xdc>)
    fcc0:	9803      	ldr	r0, [sp, #12]
    fcc2:	9904      	ldr	r1, [sp, #16]
    fcc4:	9a05      	ldr	r2, [sp, #20]
    fcc6:	4798      	blx	r3
    fcc8:	0023      	movs	r3, r4
    fcca:	33fc      	adds	r3, #252	; 0xfc
    fccc:	681d      	ldr	r5, [r3, #0]
    fcce:	23ef      	movs	r3, #239	; 0xef
    fcd0:	4f20      	ldr	r7, [pc, #128]	; (fd54 <LORAWAN_TxHandler+0xe0>)
    fcd2:	005b      	lsls	r3, r3, #1
    fcd4:	2d00      	cmp	r5, #0
    fcd6:	d023      	beq.n	fd20 <LORAWAN_TxHandler+0xac>
    fcd8:	2201      	movs	r2, #1
    fcda:	54e2      	strb	r2, [r4, r3]
    fcdc:	7828      	ldrb	r0, [r5, #0]
    fcde:	7a2b      	ldrb	r3, [r5, #8]
    fce0:	1e42      	subs	r2, r0, #1
    fce2:	4190      	sbcs	r0, r2
    fce4:	7869      	ldrb	r1, [r5, #1]
    fce6:	686a      	ldr	r2, [r5, #4]
    fce8:	b2c0      	uxtb	r0, r0
    fcea:	47b8      	blx	r7
    fcec:	0023      	movs	r3, r4
    fcee:	33c6      	adds	r3, #198	; 0xc6
    fcf0:	881b      	ldrh	r3, [r3, #0]
    fcf2:	0030      	movs	r0, r6
    fcf4:	7033      	strb	r3, [r6, #0]
    fcf6:	4b18      	ldr	r3, [pc, #96]	; (fd58 <LORAWAN_TxHandler+0xe4>)
    fcf8:	6073      	str	r3, [r6, #4]
    fcfa:	4b18      	ldr	r3, [pc, #96]	; (fd5c <LORAWAN_TxHandler+0xe8>)
    fcfc:	4798      	blx	r3
    fcfe:	2800      	cmp	r0, #0
    fd00:	d114      	bne.n	fd2c <LORAWAN_TxHandler+0xb8>
    fd02:	0021      	movs	r1, r4
    fd04:	220e      	movs	r2, #14
    fd06:	317c      	adds	r1, #124	; 0x7c
    fd08:	780b      	ldrb	r3, [r1, #0]
    fd0a:	4393      	bics	r3, r2
    fd0c:	001a      	movs	r2, r3
    fd0e:	2302      	movs	r3, #2
    fd10:	4313      	orrs	r3, r2
    fd12:	700b      	strb	r3, [r1, #0]
    fd14:	2208      	movs	r2, #8
    fd16:	348c      	adds	r4, #140	; 0x8c
    fd18:	7823      	ldrb	r3, [r4, #0]
    fd1a:	4393      	bics	r3, r2
    fd1c:	7023      	strb	r3, [r4, #0]
    fd1e:	e7c1      	b.n	fca4 <LORAWAN_TxHandler+0x30>
    fd20:	54e5      	strb	r5, [r4, r3]
    fd22:	002a      	movs	r2, r5
    fd24:	002b      	movs	r3, r5
    fd26:	0029      	movs	r1, r5
    fd28:	0028      	movs	r0, r5
    fd2a:	e7de      	b.n	fcea <LORAWAN_TxHandler+0x76>
    fd2c:	0022      	movs	r2, r4
    fd2e:	2120      	movs	r1, #32
    fd30:	328c      	adds	r2, #140	; 0x8c
    fd32:	7813      	ldrb	r3, [r2, #0]
    fd34:	438b      	bics	r3, r1
    fd36:	7013      	strb	r3, [r2, #0]
    fd38:	4b03      	ldr	r3, [pc, #12]	; (fd48 <LORAWAN_TxHandler+0xd4>)
    fd3a:	4798      	blx	r3
    fd3c:	e7ea      	b.n	fd14 <LORAWAN_TxHandler+0xa0>
    fd3e:	46c0      	nop			; (mov r8, r8)
    fd40:	200017d4 	.word	0x200017d4
    fd44:	00009141 	.word	0x00009141
    fd48:	0000cddd 	.word	0x0000cddd
    fd4c:	00011211 	.word	0x00011211
    fd50:	0000c86d 	.word	0x0000c86d
    fd54:	0000ce45 	.word	0x0000ce45
    fd58:	200019c9 	.word	0x200019c9
    fd5c:	0001093d 	.word	0x0001093d

0000fd60 <LORAWAN_JoinReqHandler>:
    fd60:	b530      	push	{r4, r5, lr}
    fd62:	b087      	sub	sp, #28
    fd64:	466a      	mov	r2, sp
    fd66:	2300      	movs	r3, #0
    fd68:	4c2a      	ldr	r4, [pc, #168]	; (fe14 <LORAWAN_JoinReqHandler+0xb4>)
    fd6a:	7013      	strb	r3, [r2, #0]
    fd6c:	0023      	movs	r3, r4
    fd6e:	33e1      	adds	r3, #225	; 0xe1
    fd70:	781b      	ldrb	r3, [r3, #0]
    fd72:	7053      	strb	r3, [r2, #1]
    fd74:	0023      	movs	r3, r4
    fd76:	33df      	adds	r3, #223	; 0xdf
    fd78:	781b      	ldrb	r3, [r3, #0]
    fd7a:	7093      	strb	r3, [r2, #2]
    fd7c:	0023      	movs	r3, r4
    fd7e:	33ff      	adds	r3, #255	; 0xff
    fd80:	7c5b      	ldrb	r3, [r3, #17]
    fd82:	069b      	lsls	r3, r3, #26
    fd84:	d511      	bpl.n	fdaa <LORAWAN_JoinReqHandler+0x4a>
    fd86:	0023      	movs	r3, r4
    fd88:	336f      	adds	r3, #111	; 0x6f
    fd8a:	781a      	ldrb	r2, [r3, #0]
    fd8c:	6f23      	ldr	r3, [r4, #112]	; 0x70
    fd8e:	021b      	lsls	r3, r3, #8
    fd90:	4313      	orrs	r3, r2
    fd92:	0022      	movs	r2, r4
    fd94:	3273      	adds	r2, #115	; 0x73
    fd96:	7811      	ldrb	r1, [r2, #0]
    fd98:	6f62      	ldr	r2, [r4, #116]	; 0x74
    fd9a:	0212      	lsls	r2, r2, #8
    fd9c:	430a      	orrs	r2, r1
    fd9e:	4313      	orrs	r3, r2
    fda0:	d103      	bne.n	fdaa <LORAWAN_JoinReqHandler+0x4a>
    fda2:	0023      	movs	r3, r4
    fda4:	2201      	movs	r2, #1
    fda6:	337b      	adds	r3, #123	; 0x7b
    fda8:	701a      	strb	r2, [r3, #0]
    fdaa:	aa03      	add	r2, sp, #12
    fdac:	4669      	mov	r1, sp
    fdae:	202f      	movs	r0, #47	; 0x2f
    fdb0:	4b19      	ldr	r3, [pc, #100]	; (fe18 <LORAWAN_JoinReqHandler+0xb8>)
    fdb2:	4798      	blx	r3
    fdb4:	2808      	cmp	r0, #8
    fdb6:	d004      	beq.n	fdc2 <LORAWAN_JoinReqHandler+0x62>
    fdb8:	4b18      	ldr	r3, [pc, #96]	; (fe1c <LORAWAN_JoinReqHandler+0xbc>)
    fdba:	4798      	blx	r3
    fdbc:	2000      	movs	r0, #0
    fdbe:	b007      	add	sp, #28
    fdc0:	bd30      	pop	{r4, r5, pc}
    fdc2:	4b17      	ldr	r3, [pc, #92]	; (fe20 <LORAWAN_JoinReqHandler+0xc0>)
    fdc4:	9803      	ldr	r0, [sp, #12]
    fdc6:	9904      	ldr	r1, [sp, #16]
    fdc8:	9a05      	ldr	r2, [sp, #20]
    fdca:	4798      	blx	r3
    fdcc:	0023      	movs	r3, r4
    fdce:	33f4      	adds	r3, #244	; 0xf4
    fdd0:	781b      	ldrb	r3, [r3, #0]
    fdd2:	ad01      	add	r5, sp, #4
    fdd4:	2b04      	cmp	r3, #4
    fdd6:	d104      	bne.n	fde2 <LORAWAN_JoinReqHandler+0x82>
    fdd8:	3b03      	subs	r3, #3
    fdda:	702b      	strb	r3, [r5, #0]
    fddc:	0028      	movs	r0, r5
    fdde:	4b11      	ldr	r3, [pc, #68]	; (fe24 <LORAWAN_JoinReqHandler+0xc4>)
    fde0:	4798      	blx	r3
    fde2:	23ef      	movs	r3, #239	; 0xef
    fde4:	2200      	movs	r2, #0
    fde6:	005b      	lsls	r3, r3, #1
    fde8:	54e2      	strb	r2, [r4, r3]
    fdea:	4b0f      	ldr	r3, [pc, #60]	; (fe28 <LORAWAN_JoinReqHandler+0xc8>)
    fdec:	4798      	blx	r3
    fdee:	4b0f      	ldr	r3, [pc, #60]	; (fe2c <LORAWAN_JoinReqHandler+0xcc>)
    fdf0:	7028      	strb	r0, [r5, #0]
    fdf2:	606b      	str	r3, [r5, #4]
    fdf4:	0028      	movs	r0, r5
    fdf6:	4b0e      	ldr	r3, [pc, #56]	; (fe30 <LORAWAN_JoinReqHandler+0xd0>)
    fdf8:	4798      	blx	r3
    fdfa:	2800      	cmp	r0, #0
    fdfc:	d001      	beq.n	fe02 <LORAWAN_JoinReqHandler+0xa2>
    fdfe:	201b      	movs	r0, #27
    fe00:	e7da      	b.n	fdb8 <LORAWAN_JoinReqHandler+0x58>
    fe02:	220e      	movs	r2, #14
    fe04:	347c      	adds	r4, #124	; 0x7c
    fe06:	7823      	ldrb	r3, [r4, #0]
    fe08:	4393      	bics	r3, r2
    fe0a:	001a      	movs	r2, r3
    fe0c:	2302      	movs	r3, #2
    fe0e:	4313      	orrs	r3, r2
    fe10:	7023      	strb	r3, [r4, #0]
    fe12:	e7d3      	b.n	fdbc <LORAWAN_JoinReqHandler+0x5c>
    fe14:	200017d4 	.word	0x200017d4
    fe18:	00009141 	.word	0x00009141
    fe1c:	0000c309 	.word	0x0000c309
    fe20:	0000c86d 	.word	0x0000c86d
    fe24:	00011211 	.word	0x00011211
    fe28:	0000c6b9 	.word	0x0000c6b9
    fe2c:	200019b9 	.word	0x200019b9
    fe30:	0001093d 	.word	0x0001093d

0000fe34 <LORAWAN_RxHandler>:
    fe34:	b513      	push	{r0, r1, r4, lr}
    fe36:	4b0c      	ldr	r3, [pc, #48]	; (fe68 <LORAWAN_RxHandler+0x34>)
    fe38:	781b      	ldrb	r3, [r3, #0]
    fe3a:	2b08      	cmp	r3, #8
    fe3c:	d011      	beq.n	fe62 <LORAWAN_RxHandler+0x2e>
    fe3e:	2b10      	cmp	r3, #16
    fe40:	d001      	beq.n	fe46 <LORAWAN_RxHandler+0x12>
    fe42:	2b01      	cmp	r3, #1
    fe44:	d10b      	bne.n	fe5e <LORAWAN_RxHandler+0x2a>
    fe46:	466b      	mov	r3, sp
    fe48:	1c9c      	adds	r4, r3, #2
    fe4a:	0021      	movs	r1, r4
    fe4c:	a801      	add	r0, sp, #4
    fe4e:	4b07      	ldr	r3, [pc, #28]	; (fe6c <LORAWAN_RxHandler+0x38>)
    fe50:	4798      	blx	r3
    fe52:	9801      	ldr	r0, [sp, #4]
    fe54:	2800      	cmp	r0, #0
    fe56:	d002      	beq.n	fe5e <LORAWAN_RxHandler+0x2a>
    fe58:	7821      	ldrb	r1, [r4, #0]
    fe5a:	4b05      	ldr	r3, [pc, #20]	; (fe70 <LORAWAN_RxHandler+0x3c>)
    fe5c:	4798      	blx	r3
    fe5e:	2000      	movs	r0, #0
    fe60:	bd16      	pop	{r1, r2, r4, pc}
    fe62:	4b04      	ldr	r3, [pc, #16]	; (fe74 <LORAWAN_RxHandler+0x40>)
    fe64:	4798      	blx	r3
    fe66:	e7fa      	b.n	fe5e <LORAWAN_RxHandler+0x2a>
    fe68:	200019b8 	.word	0x200019b8
    fe6c:	00010b09 	.word	0x00010b09
    fe70:	0000e381 	.word	0x0000e381
    fe74:	0000dcf1 	.word	0x0000dcf1

0000fe78 <LORAWAN_PostTask>:
    fe78:	b510      	push	{r4, lr}
    fe7a:	4b08      	ldr	r3, [pc, #32]	; (fe9c <LORAWAN_PostTask+0x24>)
    fe7c:	0004      	movs	r4, r0
    fe7e:	4798      	blx	r3
    fe80:	2201      	movs	r2, #1
    fe82:	40a2      	lsls	r2, r4
    fe84:	4906      	ldr	r1, [pc, #24]	; (fea0 <LORAWAN_PostTask+0x28>)
    fe86:	780b      	ldrb	r3, [r1, #0]
    fe88:	4313      	orrs	r3, r2
    fe8a:	b2db      	uxtb	r3, r3
    fe8c:	700b      	strb	r3, [r1, #0]
    fe8e:	4b05      	ldr	r3, [pc, #20]	; (fea4 <LORAWAN_PostTask+0x2c>)
    fe90:	4798      	blx	r3
    fe92:	2004      	movs	r0, #4
    fe94:	4b04      	ldr	r3, [pc, #16]	; (fea8 <LORAWAN_PostTask+0x30>)
    fe96:	4798      	blx	r3
    fe98:	bd10      	pop	{r4, pc}
    fe9a:	46c0      	nop			; (mov r8, r8)
    fe9c:	00004275 	.word	0x00004275
    fea0:	20000eb8 	.word	0x20000eb8
    fea4:	00004281 	.word	0x00004281
    fea8:	0000a181 	.word	0x0000a181

0000feac <LORAWAN_TaskHandler>:
    feac:	b570      	push	{r4, r5, r6, lr}
    feae:	2601      	movs	r6, #1
    feb0:	4d0e      	ldr	r5, [pc, #56]	; (feec <LORAWAN_TaskHandler+0x40>)
    feb2:	e015      	b.n	fee0 <LORAWAN_TaskHandler+0x34>
    feb4:	2400      	movs	r4, #0
    feb6:	782b      	ldrb	r3, [r5, #0]
    feb8:	4123      	asrs	r3, r4
    feba:	4233      	tst	r3, r6
    febc:	d00d      	beq.n	feda <LORAWAN_TaskHandler+0x2e>
    febe:	4b0c      	ldr	r3, [pc, #48]	; (fef0 <LORAWAN_TaskHandler+0x44>)
    fec0:	4798      	blx	r3
    fec2:	0032      	movs	r2, r6
    fec4:	40a2      	lsls	r2, r4
    fec6:	782b      	ldrb	r3, [r5, #0]
    fec8:	00a4      	lsls	r4, r4, #2
    feca:	4393      	bics	r3, r2
    fecc:	702b      	strb	r3, [r5, #0]
    fece:	4b09      	ldr	r3, [pc, #36]	; (fef4 <LORAWAN_TaskHandler+0x48>)
    fed0:	4798      	blx	r3
    fed2:	4b09      	ldr	r3, [pc, #36]	; (fef8 <LORAWAN_TaskHandler+0x4c>)
    fed4:	58e3      	ldr	r3, [r4, r3]
    fed6:	4798      	blx	r3
    fed8:	e7ea      	b.n	feb0 <LORAWAN_TaskHandler+0x4>
    feda:	3401      	adds	r4, #1
    fedc:	2c03      	cmp	r4, #3
    fede:	d1ea      	bne.n	feb6 <LORAWAN_TaskHandler+0xa>
    fee0:	7828      	ldrb	r0, [r5, #0]
    fee2:	b2c0      	uxtb	r0, r0
    fee4:	2800      	cmp	r0, #0
    fee6:	d1e5      	bne.n	feb4 <LORAWAN_TaskHandler+0x8>
    fee8:	bd70      	pop	{r4, r5, r6, pc}
    feea:	46c0      	nop			; (mov r8, r8)
    feec:	20000eb8 	.word	0x20000eb8
    fef0:	00004275 	.word	0x00004275
    fef4:	00004281 	.word	0x00004281
    fef8:	0001b104 	.word	0x0001b104

0000fefc <RADIO_GetAttr>:
    fefc:	b510      	push	{r4, lr}
    fefe:	000b      	movs	r3, r1
    ff00:	281f      	cmp	r0, #31
    ff02:	d900      	bls.n	ff06 <RADIO_GetAttr+0xa>
    ff04:	e069      	b.n	ffda <RADIO_GetAttr+0xde>
    ff06:	f001 fd6b 	bl	119e0 <__gnu_thumb1_case_uqi>
    ff0a:	1410      	.short	0x1410
    ff0c:	68201c19 	.word	0x68201c19
    ff10:	312e2a27 	.word	0x312e2a27
    ff14:	3d3a3734 	.word	0x3d3a3734
    ff18:	46434054 	.word	0x46434054
    ff1c:	68245149 	.word	0x68245149
    ff20:	68686859 	.word	0x68686859
    ff24:	5c686817 	.word	0x5c686817
    ff28:	6360      	.short	0x6360
    ff2a:	4a2d      	ldr	r2, [pc, #180]	; (ffe0 <RADIO_GetAttr+0xe4>)
    ff2c:	7e12      	ldrb	r2, [r2, #24]
    ff2e:	701a      	strb	r2, [r3, #0]
    ff30:	e002      	b.n	ff38 <RADIO_GetAttr+0x3c>
    ff32:	4a2b      	ldr	r2, [pc, #172]	; (ffe0 <RADIO_GetAttr+0xe4>)
    ff34:	6812      	ldr	r2, [r2, #0]
    ff36:	601a      	str	r2, [r3, #0]
    ff38:	2000      	movs	r0, #0
    ff3a:	bd10      	pop	{r4, pc}
    ff3c:	4a28      	ldr	r2, [pc, #160]	; (ffe0 <RADIO_GetAttr+0xe4>)
    ff3e:	6852      	ldr	r2, [r2, #4]
    ff40:	e7f9      	b.n	ff36 <RADIO_GetAttr+0x3a>
    ff42:	4a27      	ldr	r2, [pc, #156]	; (ffe0 <RADIO_GetAttr+0xe4>)
    ff44:	8a92      	ldrh	r2, [r2, #20]
    ff46:	801a      	strh	r2, [r3, #0]
    ff48:	e7f6      	b.n	ff38 <RADIO_GetAttr+0x3c>
    ff4a:	4a25      	ldr	r2, [pc, #148]	; (ffe0 <RADIO_GetAttr+0xe4>)
    ff4c:	3203      	adds	r2, #3
    ff4e:	7fd2      	ldrb	r2, [r2, #31]
    ff50:	e7ed      	b.n	ff2e <RADIO_GetAttr+0x32>
    ff52:	4a23      	ldr	r2, [pc, #140]	; (ffe0 <RADIO_GetAttr+0xe4>)
    ff54:	3204      	adds	r2, #4
    ff56:	e7fa      	b.n	ff4e <RADIO_GetAttr+0x52>
    ff58:	4a21      	ldr	r2, [pc, #132]	; (ffe0 <RADIO_GetAttr+0xe4>)
    ff5a:	3206      	adds	r2, #6
    ff5c:	e7f7      	b.n	ff4e <RADIO_GetAttr+0x52>
    ff5e:	4a20      	ldr	r2, [pc, #128]	; (ffe0 <RADIO_GetAttr+0xe4>)
    ff60:	3236      	adds	r2, #54	; 0x36
    ff62:	7812      	ldrb	r2, [r2, #0]
    ff64:	e7e3      	b.n	ff2e <RADIO_GetAttr+0x32>
    ff66:	4a1e      	ldr	r2, [pc, #120]	; (ffe0 <RADIO_GetAttr+0xe4>)
    ff68:	3205      	adds	r2, #5
    ff6a:	e7f0      	b.n	ff4e <RADIO_GetAttr+0x52>
    ff6c:	4a1c      	ldr	r2, [pc, #112]	; (ffe0 <RADIO_GetAttr+0xe4>)
    ff6e:	3234      	adds	r2, #52	; 0x34
    ff70:	e7f7      	b.n	ff62 <RADIO_GetAttr+0x66>
    ff72:	4a1b      	ldr	r2, [pc, #108]	; (ffe0 <RADIO_GetAttr+0xe4>)
    ff74:	8ad2      	ldrh	r2, [r2, #22]
    ff76:	e7e6      	b.n	ff46 <RADIO_GetAttr+0x4a>
    ff78:	4a19      	ldr	r2, [pc, #100]	; (ffe0 <RADIO_GetAttr+0xe4>)
    ff7a:	3233      	adds	r2, #51	; 0x33
    ff7c:	e7f1      	b.n	ff62 <RADIO_GetAttr+0x66>
    ff7e:	4a18      	ldr	r2, [pc, #96]	; (ffe0 <RADIO_GetAttr+0xe4>)
    ff80:	68d2      	ldr	r2, [r2, #12]
    ff82:	e7d8      	b.n	ff36 <RADIO_GetAttr+0x3a>
    ff84:	4a16      	ldr	r2, [pc, #88]	; (ffe0 <RADIO_GetAttr+0xe4>)
    ff86:	6892      	ldr	r2, [r2, #8]
    ff88:	e7d5      	b.n	ff36 <RADIO_GetAttr+0x3a>
    ff8a:	4a15      	ldr	r2, [pc, #84]	; (ffe0 <RADIO_GetAttr+0xe4>)
    ff8c:	3237      	adds	r2, #55	; 0x37
    ff8e:	e7e8      	b.n	ff62 <RADIO_GetAttr+0x66>
    ff90:	4a13      	ldr	r2, [pc, #76]	; (ffe0 <RADIO_GetAttr+0xe4>)
    ff92:	3238      	adds	r2, #56	; 0x38
    ff94:	e7e5      	b.n	ff62 <RADIO_GetAttr+0x66>
    ff96:	4a12      	ldr	r2, [pc, #72]	; (ffe0 <RADIO_GetAttr+0xe4>)
    ff98:	3239      	adds	r2, #57	; 0x39
    ff9a:	e7e2      	b.n	ff62 <RADIO_GetAttr+0x66>
    ff9c:	4a10      	ldr	r2, [pc, #64]	; (ffe0 <RADIO_GetAttr+0xe4>)
    ff9e:	4911      	ldr	r1, [pc, #68]	; (ffe4 <RADIO_GetAttr+0xe8>)
    ffa0:	3202      	adds	r2, #2
    ffa2:	7fd2      	ldrb	r2, [r2, #31]
    ffa4:	0018      	movs	r0, r3
    ffa6:	4b10      	ldr	r3, [pc, #64]	; (ffe8 <RADIO_GetAttr+0xec>)
    ffa8:	4798      	blx	r3
    ffaa:	e7c5      	b.n	ff38 <RADIO_GetAttr+0x3c>
    ffac:	4a0c      	ldr	r2, [pc, #48]	; (ffe0 <RADIO_GetAttr+0xe4>)
    ffae:	3202      	adds	r2, #2
    ffb0:	e7cd      	b.n	ff4e <RADIO_GetAttr+0x52>
    ffb2:	4a0b      	ldr	r2, [pc, #44]	; (ffe0 <RADIO_GetAttr+0xe4>)
    ffb4:	3232      	adds	r2, #50	; 0x32
    ffb6:	7812      	ldrb	r2, [r2, #0]
    ffb8:	b252      	sxtb	r2, r2
    ffba:	e7b8      	b.n	ff2e <RADIO_GetAttr+0x32>
    ffbc:	4a08      	ldr	r2, [pc, #32]	; (ffe0 <RADIO_GetAttr+0xe4>)
    ffbe:	3235      	adds	r2, #53	; 0x35
    ffc0:	e7cf      	b.n	ff62 <RADIO_GetAttr+0x66>
    ffc2:	4907      	ldr	r1, [pc, #28]	; (ffe0 <RADIO_GetAttr+0xe4>)
    ffc4:	2206      	movs	r2, #6
    ffc6:	313c      	adds	r1, #60	; 0x3c
    ffc8:	e7ec      	b.n	ffa4 <RADIO_GetAttr+0xa8>
    ffca:	4a05      	ldr	r2, [pc, #20]	; (ffe0 <RADIO_GetAttr+0xe4>)
    ffcc:	3254      	adds	r2, #84	; 0x54
    ffce:	e7c8      	b.n	ff62 <RADIO_GetAttr+0x66>
    ffd0:	4a03      	ldr	r2, [pc, #12]	; (ffe0 <RADIO_GetAttr+0xe4>)
    ffd2:	3256      	adds	r2, #86	; 0x56
    ffd4:	2100      	movs	r1, #0
    ffd6:	5e52      	ldrsh	r2, [r2, r1]
    ffd8:	e7b5      	b.n	ff46 <RADIO_GetAttr+0x4a>
    ffda:	2005      	movs	r0, #5
    ffdc:	e7ad      	b.n	ff3a <RADIO_GetAttr+0x3e>
    ffde:	46c0      	nop			; (mov r8, r8)
    ffe0:	200015f8 	.word	0x200015f8
    ffe4:	20001611 	.word	0x20001611
    ffe8:	0001516d 	.word	0x0001516d

0000ffec <RADIO_SetAttr>:
    ffec:	b5f0      	push	{r4, r5, r6, r7, lr}
    ffee:	4b77      	ldr	r3, [pc, #476]	; (101cc <RADIO_SetAttr+0x1e0>)
    fff0:	b085      	sub	sp, #20
    fff2:	0006      	movs	r6, r0
    fff4:	000d      	movs	r5, r1
    fff6:	4798      	blx	r3
    fff8:	2404      	movs	r4, #4
    fffa:	2801      	cmp	r0, #1
    fffc:	d11a      	bne.n	10034 <RADIO_SetAttr+0x48>
    fffe:	2e1d      	cmp	r6, #29
   10000:	d900      	bls.n	10004 <RADIO_SetAttr+0x18>
   10002:	e0e0      	b.n	101c6 <RADIO_SetAttr+0x1da>
   10004:	0030      	movs	r0, r6
   10006:	f001 fceb 	bl	119e0 <__gnu_thumb1_case_uqi>
   1000a:	514d      	.short	0x514d
   1000c:	de6d6965 	.word	0xde6d6965
   10010:	8f8b8179 	.word	0x8f8b8179
   10014:	a7a49b97 	.word	0xa7a49b97
   10018:	bcb3abde 	.word	0xbcb3abde
   1001c:	de72cdc5 	.word	0xde72cdc5
   10020:	dededed5 	.word	0xdededed5
   10024:	18dede0f 	.word	0x18dede0f
   10028:	2403      	movs	r4, #3
   1002a:	2d00      	cmp	r5, #0
   1002c:	d002      	beq.n	10034 <RADIO_SetAttr+0x48>
   1002e:	4b68      	ldr	r3, [pc, #416]	; (101d0 <RADIO_SetAttr+0x1e4>)
   10030:	611d      	str	r5, [r3, #16]
   10032:	2400      	movs	r4, #0
   10034:	0020      	movs	r0, r4
   10036:	b005      	add	sp, #20
   10038:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1003a:	796e      	ldrb	r6, [r5, #5]
   1003c:	2e00      	cmp	r6, #0
   1003e:	d109      	bne.n	10054 <RADIO_SetAttr+0x68>
   10040:	4b63      	ldr	r3, [pc, #396]	; (101d0 <RADIO_SetAttr+0x1e4>)
   10042:	001a      	movs	r2, r3
   10044:	649e      	str	r6, [r3, #72]	; 0x48
   10046:	879e      	strh	r6, [r3, #60]	; 0x3c
   10048:	87de      	strh	r6, [r3, #62]	; 0x3e
   1004a:	3240      	adds	r2, #64	; 0x40
   1004c:	3341      	adds	r3, #65	; 0x41
   1004e:	7016      	strb	r6, [r2, #0]
   10050:	701e      	strb	r6, [r3, #0]
   10052:	e7ee      	b.n	10032 <RADIO_SetAttr+0x46>
   10054:	882b      	ldrh	r3, [r5, #0]
   10056:	2403      	movs	r4, #3
   10058:	9301      	str	r3, [sp, #4]
   1005a:	2b00      	cmp	r3, #0
   1005c:	d0ea      	beq.n	10034 <RADIO_SetAttr+0x48>
   1005e:	792f      	ldrb	r7, [r5, #4]
   10060:	2f00      	cmp	r7, #0
   10062:	d0e7      	beq.n	10034 <RADIO_SetAttr+0x48>
   10064:	20fa      	movs	r0, #250	; 0xfa
   10066:	0080      	lsls	r0, r0, #2
   10068:	0039      	movs	r1, r7
   1006a:	4358      	muls	r0, r3
   1006c:	4b59      	ldr	r3, [pc, #356]	; (101d4 <RADIO_SetAttr+0x1e8>)
   1006e:	4798      	blx	r3
   10070:	4b59      	ldr	r3, [pc, #356]	; (101d8 <RADIO_SetAttr+0x1ec>)
   10072:	4798      	blx	r3
   10074:	4959      	ldr	r1, [pc, #356]	; (101dc <RADIO_SetAttr+0x1f0>)
   10076:	9002      	str	r0, [sp, #8]
   10078:	4b59      	ldr	r3, [pc, #356]	; (101e0 <RADIO_SetAttr+0x1f4>)
   1007a:	4798      	blx	r3
   1007c:	9003      	str	r0, [sp, #12]
   1007e:	2800      	cmp	r0, #0
   10080:	d1d8      	bne.n	10034 <RADIO_SetAttr+0x48>
   10082:	2302      	movs	r3, #2
   10084:	5eed      	ldrsh	r5, [r5, r3]
   10086:	9802      	ldr	r0, [sp, #8]
   10088:	4b56      	ldr	r3, [pc, #344]	; (101e4 <RADIO_SetAttr+0x1f8>)
   1008a:	4798      	blx	r3
   1008c:	466b      	mov	r3, sp
   1008e:	4c50      	ldr	r4, [pc, #320]	; (101d0 <RADIO_SetAttr+0x1e4>)
   10090:	889b      	ldrh	r3, [r3, #4]
   10092:	64a0      	str	r0, [r4, #72]	; 0x48
   10094:	87a3      	strh	r3, [r4, #60]	; 0x3c
   10096:	0023      	movs	r3, r4
   10098:	87e5      	strh	r5, [r4, #62]	; 0x3e
   1009a:	3340      	adds	r3, #64	; 0x40
   1009c:	3441      	adds	r4, #65	; 0x41
   1009e:	701f      	strb	r7, [r3, #0]
   100a0:	7026      	strb	r6, [r4, #0]
   100a2:	e7c6      	b.n	10032 <RADIO_SetAttr+0x46>
   100a4:	782a      	ldrb	r2, [r5, #0]
   100a6:	4b4a      	ldr	r3, [pc, #296]	; (101d0 <RADIO_SetAttr+0x1e4>)
   100a8:	761a      	strb	r2, [r3, #24]
   100aa:	e7c2      	b.n	10032 <RADIO_SetAttr+0x46>
   100ac:	4a4e      	ldr	r2, [pc, #312]	; (101e8 <RADIO_SetAttr+0x1fc>)
   100ae:	682b      	ldr	r3, [r5, #0]
   100b0:	1899      	adds	r1, r3, r2
   100b2:	4a4e      	ldr	r2, [pc, #312]	; (101ec <RADIO_SetAttr+0x200>)
   100b4:	4291      	cmp	r1, r2
   100b6:	d90a      	bls.n	100ce <RADIO_SetAttr+0xe2>
   100b8:	4a4d      	ldr	r2, [pc, #308]	; (101f0 <RADIO_SetAttr+0x204>)
   100ba:	494e      	ldr	r1, [pc, #312]	; (101f4 <RADIO_SetAttr+0x208>)
   100bc:	189a      	adds	r2, r3, r2
   100be:	428a      	cmp	r2, r1
   100c0:	d905      	bls.n	100ce <RADIO_SetAttr+0xe2>
   100c2:	4a4d      	ldr	r2, [pc, #308]	; (101f8 <RADIO_SetAttr+0x20c>)
   100c4:	494d      	ldr	r1, [pc, #308]	; (101fc <RADIO_SetAttr+0x210>)
   100c6:	189a      	adds	r2, r3, r2
   100c8:	2405      	movs	r4, #5
   100ca:	428a      	cmp	r2, r1
   100cc:	d8b2      	bhi.n	10034 <RADIO_SetAttr+0x48>
   100ce:	4a40      	ldr	r2, [pc, #256]	; (101d0 <RADIO_SetAttr+0x1e4>)
   100d0:	6013      	str	r3, [r2, #0]
   100d2:	e7ae      	b.n	10032 <RADIO_SetAttr+0x46>
   100d4:	682a      	ldr	r2, [r5, #0]
   100d6:	4b3e      	ldr	r3, [pc, #248]	; (101d0 <RADIO_SetAttr+0x1e4>)
   100d8:	605a      	str	r2, [r3, #4]
   100da:	e7aa      	b.n	10032 <RADIO_SetAttr+0x46>
   100dc:	882a      	ldrh	r2, [r5, #0]
   100de:	4b3c      	ldr	r3, [pc, #240]	; (101d0 <RADIO_SetAttr+0x1e4>)
   100e0:	829a      	strh	r2, [r3, #20]
   100e2:	e7a6      	b.n	10032 <RADIO_SetAttr+0x46>
   100e4:	4b3a      	ldr	r3, [pc, #232]	; (101d0 <RADIO_SetAttr+0x1e4>)
   100e6:	782a      	ldrb	r2, [r5, #0]
   100e8:	3303      	adds	r3, #3
   100ea:	77da      	strb	r2, [r3, #31]
   100ec:	e7a1      	b.n	10032 <RADIO_SetAttr+0x46>
   100ee:	782a      	ldrb	r2, [r5, #0]
   100f0:	2405      	movs	r4, #5
   100f2:	2a01      	cmp	r2, #1
   100f4:	d89e      	bhi.n	10034 <RADIO_SetAttr+0x48>
   100f6:	4b36      	ldr	r3, [pc, #216]	; (101d0 <RADIO_SetAttr+0x1e4>)
   100f8:	3304      	adds	r3, #4
   100fa:	e7f6      	b.n	100ea <RADIO_SetAttr+0xfe>
   100fc:	782a      	ldrb	r2, [r5, #0]
   100fe:	2405      	movs	r4, #5
   10100:	2a01      	cmp	r2, #1
   10102:	d900      	bls.n	10106 <RADIO_SetAttr+0x11a>
   10104:	e796      	b.n	10034 <RADIO_SetAttr+0x48>
   10106:	4b32      	ldr	r3, [pc, #200]	; (101d0 <RADIO_SetAttr+0x1e4>)
   10108:	3306      	adds	r3, #6
   1010a:	e7ee      	b.n	100ea <RADIO_SetAttr+0xfe>
   1010c:	782a      	ldrb	r2, [r5, #0]
   1010e:	2405      	movs	r4, #5
   10110:	1fd3      	subs	r3, r2, #7
   10112:	2b02      	cmp	r3, #2
   10114:	d900      	bls.n	10118 <RADIO_SetAttr+0x12c>
   10116:	e78d      	b.n	10034 <RADIO_SetAttr+0x48>
   10118:	4b2d      	ldr	r3, [pc, #180]	; (101d0 <RADIO_SetAttr+0x1e4>)
   1011a:	3336      	adds	r3, #54	; 0x36
   1011c:	701a      	strb	r2, [r3, #0]
   1011e:	e788      	b.n	10032 <RADIO_SetAttr+0x46>
   10120:	4b2b      	ldr	r3, [pc, #172]	; (101d0 <RADIO_SetAttr+0x1e4>)
   10122:	782a      	ldrb	r2, [r5, #0]
   10124:	3305      	adds	r3, #5
   10126:	e7e0      	b.n	100ea <RADIO_SetAttr+0xfe>
   10128:	782a      	ldrb	r2, [r5, #0]
   1012a:	2405      	movs	r4, #5
   1012c:	2a01      	cmp	r2, #1
   1012e:	d900      	bls.n	10132 <RADIO_SetAttr+0x146>
   10130:	e780      	b.n	10034 <RADIO_SetAttr+0x48>
   10132:	4b27      	ldr	r3, [pc, #156]	; (101d0 <RADIO_SetAttr+0x1e4>)
   10134:	3334      	adds	r3, #52	; 0x34
   10136:	e7f1      	b.n	1011c <RADIO_SetAttr+0x130>
   10138:	882a      	ldrh	r2, [r5, #0]
   1013a:	4b25      	ldr	r3, [pc, #148]	; (101d0 <RADIO_SetAttr+0x1e4>)
   1013c:	82da      	strh	r2, [r3, #22]
   1013e:	e778      	b.n	10032 <RADIO_SetAttr+0x46>
   10140:	782a      	ldrb	r2, [r5, #0]
   10142:	2405      	movs	r4, #5
   10144:	1e53      	subs	r3, r2, #1
   10146:	2b03      	cmp	r3, #3
   10148:	d900      	bls.n	1014c <RADIO_SetAttr+0x160>
   1014a:	e773      	b.n	10034 <RADIO_SetAttr+0x48>
   1014c:	4b20      	ldr	r3, [pc, #128]	; (101d0 <RADIO_SetAttr+0x1e4>)
   1014e:	3333      	adds	r3, #51	; 0x33
   10150:	e7e4      	b.n	1011c <RADIO_SetAttr+0x130>
   10152:	4b1f      	ldr	r3, [pc, #124]	; (101d0 <RADIO_SetAttr+0x1e4>)
   10154:	682a      	ldr	r2, [r5, #0]
   10156:	60da      	str	r2, [r3, #12]
   10158:	682a      	ldr	r2, [r5, #0]
   1015a:	4b1d      	ldr	r3, [pc, #116]	; (101d0 <RADIO_SetAttr+0x1e4>)
   1015c:	609a      	str	r2, [r3, #8]
   1015e:	e768      	b.n	10032 <RADIO_SetAttr+0x46>
   10160:	782a      	ldrb	r2, [r5, #0]
   10162:	2405      	movs	r4, #5
   10164:	2a03      	cmp	r2, #3
   10166:	d900      	bls.n	1016a <RADIO_SetAttr+0x17e>
   10168:	e764      	b.n	10034 <RADIO_SetAttr+0x48>
   1016a:	4b19      	ldr	r3, [pc, #100]	; (101d0 <RADIO_SetAttr+0x1e4>)
   1016c:	3337      	adds	r3, #55	; 0x37
   1016e:	e7d5      	b.n	1011c <RADIO_SetAttr+0x130>
   10170:	782a      	ldrb	r2, [r5, #0]
   10172:	2405      	movs	r4, #5
   10174:	1e53      	subs	r3, r2, #1
   10176:	2b16      	cmp	r3, #22
   10178:	d900      	bls.n	1017c <RADIO_SetAttr+0x190>
   1017a:	e75b      	b.n	10034 <RADIO_SetAttr+0x48>
   1017c:	4b14      	ldr	r3, [pc, #80]	; (101d0 <RADIO_SetAttr+0x1e4>)
   1017e:	3338      	adds	r3, #56	; 0x38
   10180:	e7cc      	b.n	1011c <RADIO_SetAttr+0x130>
   10182:	782a      	ldrb	r2, [r5, #0]
   10184:	2405      	movs	r4, #5
   10186:	1e53      	subs	r3, r2, #1
   10188:	2b16      	cmp	r3, #22
   1018a:	d900      	bls.n	1018e <RADIO_SetAttr+0x1a2>
   1018c:	e752      	b.n	10034 <RADIO_SetAttr+0x48>
   1018e:	4b10      	ldr	r3, [pc, #64]	; (101d0 <RADIO_SetAttr+0x1e4>)
   10190:	3339      	adds	r3, #57	; 0x39
   10192:	e7c3      	b.n	1011c <RADIO_SetAttr+0x130>
   10194:	4b0e      	ldr	r3, [pc, #56]	; (101d0 <RADIO_SetAttr+0x1e4>)
   10196:	0029      	movs	r1, r5
   10198:	3302      	adds	r3, #2
   1019a:	7fda      	ldrb	r2, [r3, #31]
   1019c:	4818      	ldr	r0, [pc, #96]	; (10200 <RADIO_SetAttr+0x214>)
   1019e:	4b19      	ldr	r3, [pc, #100]	; (10204 <RADIO_SetAttr+0x218>)
   101a0:	4798      	blx	r3
   101a2:	e746      	b.n	10032 <RADIO_SetAttr+0x46>
   101a4:	782b      	ldrb	r3, [r5, #0]
   101a6:	1c1a      	adds	r2, r3, #0
   101a8:	2b08      	cmp	r3, #8
   101aa:	d900      	bls.n	101ae <RADIO_SetAttr+0x1c2>
   101ac:	2208      	movs	r2, #8
   101ae:	4b08      	ldr	r3, [pc, #32]	; (101d0 <RADIO_SetAttr+0x1e4>)
   101b0:	3302      	adds	r3, #2
   101b2:	e79a      	b.n	100ea <RADIO_SetAttr+0xfe>
   101b4:	2405      	movs	r4, #5
   101b6:	782a      	ldrb	r2, [r5, #0]
   101b8:	1fd3      	subs	r3, r2, #7
   101ba:	42a3      	cmp	r3, r4
   101bc:	d900      	bls.n	101c0 <RADIO_SetAttr+0x1d4>
   101be:	e739      	b.n	10034 <RADIO_SetAttr+0x48>
   101c0:	4b03      	ldr	r3, [pc, #12]	; (101d0 <RADIO_SetAttr+0x1e4>)
   101c2:	3335      	adds	r3, #53	; 0x35
   101c4:	e7aa      	b.n	1011c <RADIO_SetAttr+0x130>
   101c6:	2405      	movs	r4, #5
   101c8:	e734      	b.n	10034 <RADIO_SetAttr+0x48>
   101ca:	46c0      	nop			; (mov r8, r8)
   101cc:	00010921 	.word	0x00010921
   101d0:	200015f8 	.word	0x200015f8
   101d4:	00011b1d 	.word	0x00011b1d
   101d8:	00012ca9 	.word	0x00012ca9
   101dc:	43fa0000 	.word	0x43fa0000
   101e0:	00011d19 	.word	0x00011d19
   101e4:	00011dfd 	.word	0x00011dfd
   101e8:	f7d58bc0 	.word	0xf7d58bc0
   101ec:	0243d580 	.word	0x0243d580
   101f0:	e78fe580 	.word	0xe78fe580
   101f4:	06dac2c0 	.word	0x06dac2c0
   101f8:	cc9eec80 	.word	0xcc9eec80
   101fc:	096ae380 	.word	0x096ae380
   10200:	20001611 	.word	0x20001611
   10204:	0001516d 	.word	0x0001516d

00010208 <RADIO_Init>:
   10208:	b510      	push	{r4, lr}
   1020a:	4b0c      	ldr	r3, [pc, #48]	; (1023c <RADIO_Init+0x34>)
   1020c:	4798      	blx	r3
   1020e:	4b0c      	ldr	r3, [pc, #48]	; (10240 <RADIO_Init+0x38>)
   10210:	201f      	movs	r0, #31
   10212:	4798      	blx	r3
   10214:	4c0b      	ldr	r4, [pc, #44]	; (10244 <RADIO_Init+0x3c>)
   10216:	490c      	ldr	r1, [pc, #48]	; (10248 <RADIO_Init+0x40>)
   10218:	2001      	movs	r0, #1
   1021a:	47a0      	blx	r4
   1021c:	490b      	ldr	r1, [pc, #44]	; (1024c <RADIO_Init+0x44>)
   1021e:	2002      	movs	r0, #2
   10220:	47a0      	blx	r4
   10222:	490b      	ldr	r1, [pc, #44]	; (10250 <RADIO_Init+0x48>)
   10224:	2004      	movs	r0, #4
   10226:	47a0      	blx	r4
   10228:	490a      	ldr	r1, [pc, #40]	; (10254 <RADIO_Init+0x4c>)
   1022a:	2008      	movs	r0, #8
   1022c:	47a0      	blx	r4
   1022e:	490a      	ldr	r1, [pc, #40]	; (10258 <RADIO_Init+0x50>)
   10230:	2010      	movs	r0, #16
   10232:	47a0      	blx	r4
   10234:	4909      	ldr	r1, [pc, #36]	; (1025c <RADIO_Init+0x54>)
   10236:	2020      	movs	r0, #32
   10238:	47a0      	blx	r4
   1023a:	bd10      	pop	{r4, pc}
   1023c:	0001101d 	.word	0x0001101d
   10240:	0001092d 	.word	0x0001092d
   10244:	000040d1 	.word	0x000040d1
   10248:	000106b9 	.word	0x000106b9
   1024c:	00010731 	.word	0x00010731
   10250:	000107a1 	.word	0x000107a1
   10254:	000107f1 	.word	0x000107f1
   10258:	00010819 	.word	0x00010819
   1025c:	00010841 	.word	0x00010841

00010260 <Radio_WriteFrequency>:
   10260:	b570      	push	{r4, r5, r6, lr}
   10262:	490d      	ldr	r1, [pc, #52]	; (10298 <Radio_WriteFrequency+0x38>)
   10264:	4d0d      	ldr	r5, [pc, #52]	; (1029c <Radio_WriteFrequency+0x3c>)
   10266:	0006      	movs	r6, r0
   10268:	47a8      	blx	r5
   1026a:	4b0d      	ldr	r3, [pc, #52]	; (102a0 <Radio_WriteFrequency+0x40>)
   1026c:	0004      	movs	r4, r0
   1026e:	490a      	ldr	r1, [pc, #40]	; (10298 <Radio_WriteFrequency+0x38>)
   10270:	0030      	movs	r0, r6
   10272:	4798      	blx	r3
   10274:	0208      	lsls	r0, r1, #8
   10276:	4908      	ldr	r1, [pc, #32]	; (10298 <Radio_WriteFrequency+0x38>)
   10278:	47a8      	blx	r5
   1027a:	0224      	lsls	r4, r4, #8
   1027c:	1904      	adds	r4, r0, r4
   1027e:	0c21      	lsrs	r1, r4, #16
   10280:	4d08      	ldr	r5, [pc, #32]	; (102a4 <Radio_WriteFrequency+0x44>)
   10282:	b2c9      	uxtb	r1, r1
   10284:	2006      	movs	r0, #6
   10286:	47a8      	blx	r5
   10288:	0a21      	lsrs	r1, r4, #8
   1028a:	b2c9      	uxtb	r1, r1
   1028c:	2007      	movs	r0, #7
   1028e:	47a8      	blx	r5
   10290:	b2e1      	uxtb	r1, r4
   10292:	2008      	movs	r0, #8
   10294:	47a8      	blx	r5
   10296:	bd70      	pop	{r4, r5, r6, pc}
   10298:	00003d09 	.word	0x00003d09
   1029c:	00011a09 	.word	0x00011a09
   102a0:	00011b15 	.word	0x00011b15
   102a4:	00003ffd 	.word	0x00003ffd

000102a8 <Radio_WriteConfiguration>:
   102a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   102aa:	4cb0      	ldr	r4, [pc, #704]	; (1056c <Radio_WriteConfiguration+0x2c4>)
   102ac:	2200      	movs	r2, #0
   102ae:	0023      	movs	r3, r4
   102b0:	b085      	sub	sp, #20
   102b2:	9002      	str	r0, [sp, #8]
   102b4:	3334      	adds	r3, #52	; 0x34
   102b6:	0010      	movs	r0, r2
   102b8:	7819      	ldrb	r1, [r3, #0]
   102ba:	4bad      	ldr	r3, [pc, #692]	; (10570 <Radio_WriteConfiguration+0x2c8>)
   102bc:	4798      	blx	r3
   102be:	4bad      	ldr	r3, [pc, #692]	; (10574 <Radio_WriteConfiguration+0x2cc>)
   102c0:	6820      	ldr	r0, [r4, #0]
   102c2:	4798      	blx	r3
   102c4:	1ce3      	adds	r3, r4, #3
   102c6:	1d62      	adds	r2, r4, #5
   102c8:	7fdb      	ldrb	r3, [r3, #31]
   102ca:	7fd2      	ldrb	r2, [r2, #31]
   102cc:	b25b      	sxtb	r3, r3
   102ce:	4eaa      	ldr	r6, [pc, #680]	; (10578 <Radio_WriteConfiguration+0x2d0>)
   102d0:	4daa      	ldr	r5, [pc, #680]	; (1057c <Radio_WriteConfiguration+0x2d4>)
   102d2:	2a00      	cmp	r2, #0
   102d4:	d000      	beq.n	102d8 <Radio_WriteConfiguration+0x30>
   102d6:	e0fc      	b.n	104d2 <Radio_WriteConfiguration+0x22a>
   102d8:	1c1f      	adds	r7, r3, #0
   102da:	2b0f      	cmp	r3, #15
   102dc:	dc00      	bgt.n	102e0 <Radio_WriteConfiguration+0x38>
   102de:	e0ec      	b.n	104ba <Radio_WriteConfiguration+0x212>
   102e0:	270f      	movs	r7, #15
   102e2:	b27b      	sxtb	r3, r7
   102e4:	204d      	movs	r0, #77	; 0x4d
   102e6:	9301      	str	r3, [sp, #4]
   102e8:	47b0      	blx	r6
   102ea:	21f8      	movs	r1, #248	; 0xf8
   102ec:	4008      	ands	r0, r1
   102ee:	39f4      	subs	r1, #244	; 0xf4
   102f0:	4301      	orrs	r1, r0
   102f2:	204d      	movs	r0, #77	; 0x4d
   102f4:	47a8      	blx	r5
   102f6:	b27b      	sxtb	r3, r7
   102f8:	2b00      	cmp	r3, #0
   102fa:	db00      	blt.n	102fe <Radio_WriteConfiguration+0x56>
   102fc:	e0e4      	b.n	104c8 <Radio_WriteConfiguration+0x220>
   102fe:	3703      	adds	r7, #3
   10300:	b2f9      	uxtb	r1, r7
   10302:	2720      	movs	r7, #32
   10304:	4339      	orrs	r1, r7
   10306:	2009      	movs	r0, #9
   10308:	47a8      	blx	r5
   1030a:	0023      	movs	r3, r4
   1030c:	3334      	adds	r3, #52	; 0x34
   1030e:	781f      	ldrb	r7, [r3, #0]
   10310:	2f01      	cmp	r7, #1
   10312:	d000      	beq.n	10316 <Radio_WriteConfiguration+0x6e>
   10314:	e144      	b.n	105a0 <Radio_WriteConfiguration+0x2f8>
   10316:	7e21      	ldrb	r1, [r4, #24]
   10318:	2039      	movs	r0, #57	; 0x39
   1031a:	47a8      	blx	r5
   1031c:	4b98      	ldr	r3, [pc, #608]	; (10580 <Radio_WriteConfiguration+0x2d8>)
   1031e:	201d      	movs	r0, #29
   10320:	7819      	ldrb	r1, [r3, #0]
   10322:	0023      	movs	r3, r4
   10324:	3333      	adds	r3, #51	; 0x33
   10326:	781b      	ldrb	r3, [r3, #0]
   10328:	0109      	lsls	r1, r1, #4
   1032a:	005b      	lsls	r3, r3, #1
   1032c:	4319      	orrs	r1, r3
   1032e:	1de3      	adds	r3, r4, #7
   10330:	7fdb      	ldrb	r3, [r3, #31]
   10332:	401f      	ands	r7, r3
   10334:	4339      	orrs	r1, r7
   10336:	b2c9      	uxtb	r1, r1
   10338:	47a8      	blx	r5
   1033a:	1d23      	adds	r3, r4, #4
   1033c:	7fd9      	ldrb	r1, [r3, #31]
   1033e:	2304      	movs	r3, #4
   10340:	0089      	lsls	r1, r1, #2
   10342:	4019      	ands	r1, r3
   10344:	0023      	movs	r3, r4
   10346:	3335      	adds	r3, #53	; 0x35
   10348:	781b      	ldrb	r3, [r3, #0]
   1034a:	201e      	movs	r0, #30
   1034c:	011b      	lsls	r3, r3, #4
   1034e:	4319      	orrs	r1, r3
   10350:	9b02      	ldr	r3, [sp, #8]
   10352:	059b      	lsls	r3, r3, #22
   10354:	0f9b      	lsrs	r3, r3, #30
   10356:	4319      	orrs	r1, r3
   10358:	b2c9      	uxtb	r1, r1
   1035a:	47a8      	blx	r5
   1035c:	2300      	movs	r3, #0
   1035e:	8ae1      	ldrh	r1, [r4, #22]
   10360:	4299      	cmp	r1, r3
   10362:	d011      	beq.n	10388 <Radio_WriteConfiguration+0xe0>
   10364:	4a86      	ldr	r2, [pc, #536]	; (10580 <Radio_WriteConfiguration+0x2d8>)
   10366:	7812      	ldrb	r2, [r2, #0]
   10368:	2a08      	cmp	r2, #8
   1036a:	d100      	bne.n	1036e <Radio_WriteConfiguration+0xc6>
   1036c:	e0e4      	b.n	10538 <Radio_WriteConfiguration+0x290>
   1036e:	2a09      	cmp	r2, #9
   10370:	d100      	bne.n	10374 <Radio_WriteConfiguration+0xcc>
   10372:	e0e3      	b.n	1053c <Radio_WriteConfiguration+0x294>
   10374:	2a07      	cmp	r2, #7
   10376:	d000      	beq.n	1037a <Radio_WriteConfiguration+0xd2>
   10378:	e0e3      	b.n	10542 <Radio_WriteConfiguration+0x29a>
   1037a:	337d      	adds	r3, #125	; 0x7d
   1037c:	4359      	muls	r1, r3
   1037e:	0023      	movs	r3, r4
   10380:	3335      	adds	r3, #53	; 0x35
   10382:	781b      	ldrb	r3, [r3, #0]
   10384:	40d9      	lsrs	r1, r3
   10386:	000b      	movs	r3, r1
   10388:	b2d9      	uxtb	r1, r3
   1038a:	2024      	movs	r0, #36	; 0x24
   1038c:	4d7b      	ldr	r5, [pc, #492]	; (1057c <Radio_WriteConfiguration+0x2d4>)
   1038e:	47a8      	blx	r5
   10390:	466b      	mov	r3, sp
   10392:	201f      	movs	r0, #31
   10394:	7a19      	ldrb	r1, [r3, #8]
   10396:	47a8      	blx	r5
   10398:	2026      	movs	r0, #38	; 0x26
   1039a:	47b0      	blx	r6
   1039c:	0023      	movs	r3, r4
   1039e:	3335      	adds	r3, #53	; 0x35
   103a0:	781b      	ldrb	r3, [r3, #0]
   103a2:	2b0c      	cmp	r3, #12
   103a4:	d105      	bne.n	103b2 <Radio_WriteConfiguration+0x10a>
   103a6:	0023      	movs	r3, r4
   103a8:	3336      	adds	r3, #54	; 0x36
   103aa:	781b      	ldrb	r3, [r3, #0]
   103ac:	3b07      	subs	r3, #7
   103ae:	2b01      	cmp	r3, #1
   103b0:	d906      	bls.n	103c0 <Radio_WriteConfiguration+0x118>
   103b2:	6b62      	ldr	r2, [r4, #52]	; 0x34
   103b4:	4b73      	ldr	r3, [pc, #460]	; (10584 <Radio_WriteConfiguration+0x2dc>)
   103b6:	4013      	ands	r3, r2
   103b8:	4a73      	ldr	r2, [pc, #460]	; (10588 <Radio_WriteConfiguration+0x2e0>)
   103ba:	4293      	cmp	r3, r2
   103bc:	d000      	beq.n	103c0 <Radio_WriteConfiguration+0x118>
   103be:	e0c2      	b.n	10546 <Radio_WriteConfiguration+0x29e>
   103c0:	2108      	movs	r1, #8
   103c2:	4308      	orrs	r0, r1
   103c4:	b2c0      	uxtb	r0, r0
   103c6:	2104      	movs	r1, #4
   103c8:	4301      	orrs	r1, r0
   103ca:	2026      	movs	r0, #38	; 0x26
   103cc:	47a8      	blx	r5
   103ce:	2031      	movs	r0, #49	; 0x31
   103d0:	47b0      	blx	r6
   103d2:	21f8      	movs	r1, #248	; 0xf8
   103d4:	4008      	ands	r0, r1
   103d6:	39f5      	subs	r1, #245	; 0xf5
   103d8:	4301      	orrs	r1, r0
   103da:	2031      	movs	r0, #49	; 0x31
   103dc:	47a8      	blx	r5
   103de:	210a      	movs	r1, #10
   103e0:	2037      	movs	r0, #55	; 0x37
   103e2:	47a8      	blx	r5
   103e4:	0023      	movs	r3, r4
   103e6:	3331      	adds	r3, #49	; 0x31
   103e8:	781b      	ldrb	r3, [r3, #0]
   103ea:	2b12      	cmp	r3, #18
   103ec:	d11e      	bne.n	1042c <Radio_WriteConfiguration+0x184>
   103ee:	0023      	movs	r3, r4
   103f0:	3336      	adds	r3, #54	; 0x36
   103f2:	781b      	ldrb	r3, [r3, #0]
   103f4:	3b07      	subs	r3, #7
   103f6:	2b01      	cmp	r3, #1
   103f8:	d80b      	bhi.n	10412 <Radio_WriteConfiguration+0x16a>
   103fa:	2031      	movs	r0, #49	; 0x31
   103fc:	47b0      	blx	r6
   103fe:	217f      	movs	r1, #127	; 0x7f
   10400:	4001      	ands	r1, r0
   10402:	2031      	movs	r0, #49	; 0x31
   10404:	47a8      	blx	r5
   10406:	2140      	movs	r1, #64	; 0x40
   10408:	202f      	movs	r0, #47	; 0x2f
   1040a:	47a8      	blx	r5
   1040c:	2100      	movs	r1, #0
   1040e:	2030      	movs	r0, #48	; 0x30
   10410:	47a8      	blx	r5
   10412:	0023      	movs	r3, r4
   10414:	3336      	adds	r3, #54	; 0x36
   10416:	781b      	ldrb	r3, [r3, #0]
   10418:	2b09      	cmp	r3, #9
   1041a:	d107      	bne.n	1042c <Radio_WriteConfiguration+0x184>
   1041c:	2031      	movs	r0, #49	; 0x31
   1041e:	47b0      	blx	r6
   10420:	2180      	movs	r1, #128	; 0x80
   10422:	4249      	negs	r1, r1
   10424:	4301      	orrs	r1, r0
   10426:	b2c9      	uxtb	r1, r1
   10428:	2031      	movs	r0, #49	; 0x31
   1042a:	47a8      	blx	r5
   1042c:	2033      	movs	r0, #51	; 0x33
   1042e:	47b0      	blx	r6
   10430:	1da3      	adds	r3, r4, #6
   10432:	7fd9      	ldrb	r1, [r3, #31]
   10434:	2340      	movs	r3, #64	; 0x40
   10436:	0189      	lsls	r1, r1, #6
   10438:	4398      	bics	r0, r3
   1043a:	4019      	ands	r1, r3
   1043c:	4301      	orrs	r1, r0
   1043e:	b2c9      	uxtb	r1, r1
   10440:	2033      	movs	r0, #51	; 0x33
   10442:	47a8      	blx	r5
   10444:	8aa1      	ldrh	r1, [r4, #20]
   10446:	2020      	movs	r0, #32
   10448:	0a09      	lsrs	r1, r1, #8
   1044a:	47a8      	blx	r5
   1044c:	7d21      	ldrb	r1, [r4, #20]
   1044e:	2021      	movs	r0, #33	; 0x21
   10450:	47a8      	blx	r5
   10452:	2100      	movs	r1, #0
   10454:	200d      	movs	r0, #13
   10456:	47a8      	blx	r5
   10458:	2100      	movs	r1, #0
   1045a:	200e      	movs	r0, #14
   1045c:	47a8      	blx	r5
   1045e:	2100      	movs	r1, #0
   10460:	200f      	movs	r0, #15
   10462:	47a8      	blx	r5
   10464:	0023      	movs	r3, r4
   10466:	3331      	adds	r3, #49	; 0x31
   10468:	781b      	ldrb	r3, [r3, #0]
   1046a:	2b12      	cmp	r3, #18
   1046c:	d120      	bne.n	104b0 <Radio_WriteConfiguration+0x208>
   1046e:	0023      	movs	r3, r4
   10470:	3336      	adds	r3, #54	; 0x36
   10472:	781b      	ldrb	r3, [r3, #0]
   10474:	2b09      	cmp	r3, #9
   10476:	d000      	beq.n	1047a <Radio_WriteConfiguration+0x1d2>
   10478:	e072      	b.n	10560 <Radio_WriteConfiguration+0x2b8>
   1047a:	4a44      	ldr	r2, [pc, #272]	; (1058c <Radio_WriteConfiguration+0x2e4>)
   1047c:	6823      	ldr	r3, [r4, #0]
   1047e:	1899      	adds	r1, r3, r2
   10480:	4a43      	ldr	r2, [pc, #268]	; (10590 <Radio_WriteConfiguration+0x2e8>)
   10482:	4291      	cmp	r1, r2
   10484:	d862      	bhi.n	1054c <Radio_WriteConfiguration+0x2a4>
   10486:	2102      	movs	r1, #2
   10488:	2036      	movs	r0, #54	; 0x36
   1048a:	47a8      	blx	r5
   1048c:	2164      	movs	r1, #100	; 0x64
   1048e:	203a      	movs	r0, #58	; 0x3a
   10490:	47a8      	blx	r5
   10492:	0023      	movs	r3, r4
   10494:	3336      	adds	r3, #54	; 0x36
   10496:	781b      	ldrb	r3, [r3, #0]
   10498:	2165      	movs	r1, #101	; 0x65
   1049a:	203a      	movs	r0, #58	; 0x3a
   1049c:	2b09      	cmp	r3, #9
   1049e:	d162      	bne.n	10566 <Radio_WriteConfiguration+0x2be>
   104a0:	3406      	adds	r4, #6
   104a2:	7fe3      	ldrb	r3, [r4, #31]
   104a4:	2b01      	cmp	r3, #1
   104a6:	d15e      	bne.n	10566 <Radio_WriteConfiguration+0x2be>
   104a8:	47a8      	blx	r5
   104aa:	2119      	movs	r1, #25
   104ac:	203b      	movs	r0, #59	; 0x3b
   104ae:	47a8      	blx	r5
   104b0:	21ff      	movs	r1, #255	; 0xff
   104b2:	2012      	movs	r0, #18
   104b4:	47a8      	blx	r5
   104b6:	b005      	add	sp, #20
   104b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   104ba:	b25b      	sxtb	r3, r3
   104bc:	3303      	adds	r3, #3
   104be:	db00      	blt.n	104c2 <Radio_WriteConfiguration+0x21a>
   104c0:	e70f      	b.n	102e2 <Radio_WriteConfiguration+0x3a>
   104c2:	4b34      	ldr	r3, [pc, #208]	; (10594 <Radio_WriteConfiguration+0x2ec>)
   104c4:	781f      	ldrb	r7, [r3, #0]
   104c6:	e70c      	b.n	102e2 <Radio_WriteConfiguration+0x3a>
   104c8:	2170      	movs	r1, #112	; 0x70
   104ca:	9b01      	ldr	r3, [sp, #4]
   104cc:	4319      	orrs	r1, r3
   104ce:	b2c9      	uxtb	r1, r1
   104d0:	e719      	b.n	10306 <Radio_WriteConfiguration+0x5e>
   104d2:	2b01      	cmp	r3, #1
   104d4:	dd07      	ble.n	104e6 <Radio_WriteConfiguration+0x23e>
   104d6:	2714      	movs	r7, #20
   104d8:	2b13      	cmp	r3, #19
   104da:	dc06      	bgt.n	104ea <Radio_WriteConfiguration+0x242>
   104dc:	1c1f      	adds	r7, r3, #0
   104de:	2b11      	cmp	r3, #17
   104e0:	dd02      	ble.n	104e8 <Radio_WriteConfiguration+0x240>
   104e2:	2711      	movs	r7, #17
   104e4:	e000      	b.n	104e8 <Radio_WriteConfiguration+0x240>
   104e6:	2702      	movs	r7, #2
   104e8:	b27f      	sxtb	r7, r7
   104ea:	200b      	movs	r0, #11
   104ec:	47b0      	blx	r6
   104ee:	9003      	str	r0, [sp, #12]
   104f0:	204d      	movs	r0, #77	; 0x4d
   104f2:	47b0      	blx	r6
   104f4:	2307      	movs	r3, #7
   104f6:	4398      	bics	r0, r3
   104f8:	b2c1      	uxtb	r1, r0
   104fa:	2f14      	cmp	r7, #20
   104fc:	d112      	bne.n	10524 <Radio_WriteConfiguration+0x27c>
   104fe:	4319      	orrs	r1, r3
   10500:	9b03      	ldr	r3, [sp, #12]
   10502:	37cb      	adds	r7, #203	; 0xcb
   10504:	403b      	ands	r3, r7
   10506:	001f      	movs	r7, r3
   10508:	230f      	movs	r3, #15
   1050a:	9301      	str	r3, [sp, #4]
   1050c:	204d      	movs	r0, #77	; 0x4d
   1050e:	47a8      	blx	r5
   10510:	2180      	movs	r1, #128	; 0x80
   10512:	9b01      	ldr	r3, [sp, #4]
   10514:	4249      	negs	r1, r1
   10516:	4319      	orrs	r1, r3
   10518:	b2c9      	uxtb	r1, r1
   1051a:	2009      	movs	r0, #9
   1051c:	47a8      	blx	r5
   1051e:	0039      	movs	r1, r7
   10520:	200b      	movs	r0, #11
   10522:	e6f1      	b.n	10308 <Radio_WriteConfiguration+0x60>
   10524:	3f02      	subs	r7, #2
   10526:	b27b      	sxtb	r3, r7
   10528:	2720      	movs	r7, #32
   1052a:	2004      	movs	r0, #4
   1052c:	9301      	str	r3, [sp, #4]
   1052e:	9b03      	ldr	r3, [sp, #12]
   10530:	4301      	orrs	r1, r0
   10532:	431f      	orrs	r7, r3
   10534:	b2ff      	uxtb	r7, r7
   10536:	e7e9      	b.n	1050c <Radio_WriteConfiguration+0x264>
   10538:	23fa      	movs	r3, #250	; 0xfa
   1053a:	e71f      	b.n	1037c <Radio_WriteConfiguration+0xd4>
   1053c:	23fa      	movs	r3, #250	; 0xfa
   1053e:	005b      	lsls	r3, r3, #1
   10540:	e71c      	b.n	1037c <Radio_WriteConfiguration+0xd4>
   10542:	0019      	movs	r1, r3
   10544:	e71b      	b.n	1037e <Radio_WriteConfiguration+0xd6>
   10546:	21f7      	movs	r1, #247	; 0xf7
   10548:	4008      	ands	r0, r1
   1054a:	e73c      	b.n	103c6 <Radio_WriteConfiguration+0x11e>
   1054c:	4a12      	ldr	r2, [pc, #72]	; (10598 <Radio_WriteConfiguration+0x2f0>)
   1054e:	189b      	adds	r3, r3, r2
   10550:	4a12      	ldr	r2, [pc, #72]	; (1059c <Radio_WriteConfiguration+0x2f4>)
   10552:	4293      	cmp	r3, r2
   10554:	d804      	bhi.n	10560 <Radio_WriteConfiguration+0x2b8>
   10556:	2102      	movs	r1, #2
   10558:	2036      	movs	r0, #54	; 0x36
   1055a:	47a8      	blx	r5
   1055c:	217f      	movs	r1, #127	; 0x7f
   1055e:	e796      	b.n	1048e <Radio_WriteConfiguration+0x1e6>
   10560:	2103      	movs	r1, #3
   10562:	2036      	movs	r0, #54	; 0x36
   10564:	e794      	b.n	10490 <Radio_WriteConfiguration+0x1e8>
   10566:	47a8      	blx	r5
   10568:	211d      	movs	r1, #29
   1056a:	e79f      	b.n	104ac <Radio_WriteConfiguration+0x204>
   1056c:	200015f8 	.word	0x200015f8
   10570:	0000a1b9 	.word	0x0000a1b9
   10574:	00010261 	.word	0x00010261
   10578:	00004025 	.word	0x00004025
   1057c:	00003ffd 	.word	0x00003ffd
   10580:	2000162e 	.word	0x2000162e
   10584:	00ffff00 	.word	0x00ffff00
   10588:	00070b00 	.word	0x00070b00
   1058c:	cc9eec80 	.word	0xcc9eec80
   10590:	096ae380 	.word	0x096ae380
   10594:	0001b110 	.word	0x0001b110
   10598:	e78fe580 	.word	0xe78fe580
   1059c:	06dac2c0 	.word	0x06dac2c0
   105a0:	6863      	ldr	r3, [r4, #4]
   105a2:	492c      	ldr	r1, [pc, #176]	; (10654 <Radio_WriteConfiguration+0x3ac>)
   105a4:	0218      	lsls	r0, r3, #8
   105a6:	4b2c      	ldr	r3, [pc, #176]	; (10658 <Radio_WriteConfiguration+0x3b0>)
   105a8:	4798      	blx	r3
   105aa:	0007      	movs	r7, r0
   105ac:	0a01      	lsrs	r1, r0, #8
   105ae:	b2c9      	uxtb	r1, r1
   105b0:	2004      	movs	r0, #4
   105b2:	47a8      	blx	r5
   105b4:	b2f9      	uxtb	r1, r7
   105b6:	2005      	movs	r0, #5
   105b8:	47a8      	blx	r5
   105ba:	4b27      	ldr	r3, [pc, #156]	; (10658 <Radio_WriteConfiguration+0x3b0>)
   105bc:	68a1      	ldr	r1, [r4, #8]
   105be:	4827      	ldr	r0, [pc, #156]	; (1065c <Radio_WriteConfiguration+0x3b4>)
   105c0:	4798      	blx	r3
   105c2:	0007      	movs	r7, r0
   105c4:	0a01      	lsrs	r1, r0, #8
   105c6:	b2c9      	uxtb	r1, r1
   105c8:	2002      	movs	r0, #2
   105ca:	47a8      	blx	r5
   105cc:	b2f9      	uxtb	r1, r7
   105ce:	2003      	movs	r0, #3
   105d0:	47a8      	blx	r5
   105d2:	2100      	movs	r1, #0
   105d4:	205d      	movs	r0, #93	; 0x5d
   105d6:	47a8      	blx	r5
   105d8:	8aa1      	ldrh	r1, [r4, #20]
   105da:	2025      	movs	r0, #37	; 0x25
   105dc:	0a09      	lsrs	r1, r1, #8
   105de:	47a8      	blx	r5
   105e0:	7d21      	ldrb	r1, [r4, #20]
   105e2:	2026      	movs	r0, #38	; 0x26
   105e4:	47a8      	blx	r5
   105e6:	219e      	movs	r1, #158	; 0x9e
   105e8:	200d      	movs	r0, #13
   105ea:	47a8      	blx	r5
   105ec:	21bf      	movs	r1, #191	; 0xbf
   105ee:	2035      	movs	r0, #53	; 0x35
   105f0:	47a8      	blx	r5
   105f2:	200a      	movs	r0, #10
   105f4:	47b0      	blx	r6
   105f6:	0023      	movs	r3, r4
   105f8:	3337      	adds	r3, #55	; 0x37
   105fa:	7819      	ldrb	r1, [r3, #0]
   105fc:	2360      	movs	r3, #96	; 0x60
   105fe:	0149      	lsls	r1, r1, #5
   10600:	4398      	bics	r0, r3
   10602:	4301      	orrs	r1, r0
   10604:	b2c9      	uxtb	r1, r1
   10606:	200a      	movs	r0, #10
   10608:	47a8      	blx	r5
   1060a:	1d23      	adds	r3, r4, #4
   1060c:	7fdb      	ldrb	r3, [r3, #31]
   1060e:	21c0      	movs	r1, #192	; 0xc0
   10610:	2b00      	cmp	r3, #0
   10612:	d000      	beq.n	10616 <Radio_WriteConfiguration+0x36e>
   10614:	3110      	adds	r1, #16
   10616:	2030      	movs	r0, #48	; 0x30
   10618:	47a8      	blx	r5
   1061a:	2600      	movs	r6, #0
   1061c:	1ca3      	adds	r3, r4, #2
   1061e:	7fd9      	ldrb	r1, [r3, #31]
   10620:	428e      	cmp	r6, r1
   10622:	d30d      	bcc.n	10640 <Radio_WriteConfiguration+0x398>
   10624:	2900      	cmp	r1, #0
   10626:	d003      	beq.n	10630 <Radio_WriteConfiguration+0x388>
   10628:	2310      	movs	r3, #16
   1062a:	3901      	subs	r1, #1
   1062c:	4319      	orrs	r1, r3
   1062e:	b2c9      	uxtb	r1, r1
   10630:	2027      	movs	r0, #39	; 0x27
   10632:	47a8      	blx	r5
   10634:	21ff      	movs	r1, #255	; 0xff
   10636:	203e      	movs	r0, #62	; 0x3e
   10638:	47a8      	blx	r5
   1063a:	21ff      	movs	r1, #255	; 0xff
   1063c:	203f      	movs	r0, #63	; 0x3f
   1063e:	e739      	b.n	104b4 <Radio_WriteConfiguration+0x20c>
   10640:	0030      	movs	r0, r6
   10642:	19a3      	adds	r3, r4, r6
   10644:	3028      	adds	r0, #40	; 0x28
   10646:	7e59      	ldrb	r1, [r3, #25]
   10648:	b2c0      	uxtb	r0, r0
   1064a:	3601      	adds	r6, #1
   1064c:	47a8      	blx	r5
   1064e:	b2f6      	uxtb	r6, r6
   10650:	e7e4      	b.n	1061c <Radio_WriteConfiguration+0x374>
   10652:	46c0      	nop			; (mov r8, r8)
   10654:	00003d09 	.word	0x00003d09
   10658:	00011a09 	.word	0x00011a09
   1065c:	01e84800 	.word	0x01e84800

00010660 <RADIO_getMappingAndOpmode>:
   10660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10662:	0006      	movs	r6, r0
   10664:	4d06      	ldr	r5, [pc, #24]	; (10680 <RADIO_getMappingAndOpmode+0x20>)
   10666:	2040      	movs	r0, #64	; 0x40
   10668:	001f      	movs	r7, r3
   1066a:	0014      	movs	r4, r2
   1066c:	9101      	str	r1, [sp, #4]
   1066e:	47a8      	blx	r5
   10670:	4004      	ands	r4, r0
   10672:	413c      	asrs	r4, r7
   10674:	2001      	movs	r0, #1
   10676:	7034      	strb	r4, [r6, #0]
   10678:	47a8      	blx	r5
   1067a:	9b01      	ldr	r3, [sp, #4]
   1067c:	7018      	strb	r0, [r3, #0]
   1067e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   10680:	00004025 	.word	0x00004025

00010684 <RADIO_UnhandledInterrupt.part.0>:
   10684:	b510      	push	{r4, lr}
   10686:	21ff      	movs	r1, #255	; 0xff
   10688:	2012      	movs	r0, #18
   1068a:	4b01      	ldr	r3, [pc, #4]	; (10690 <RADIO_UnhandledInterrupt.part.0+0xc>)
   1068c:	4798      	blx	r3
   1068e:	bd10      	pop	{r4, pc}
   10690:	00003ffd 	.word	0x00003ffd

00010694 <RADIO_UnhandledInterrupt>:
   10694:	b510      	push	{r4, lr}
   10696:	2801      	cmp	r0, #1
   10698:	d102      	bne.n	106a0 <RADIO_UnhandledInterrupt+0xc>
   1069a:	4b05      	ldr	r3, [pc, #20]	; (106b0 <RADIO_UnhandledInterrupt+0x1c>)
   1069c:	4798      	blx	r3
   1069e:	bd10      	pop	{r4, pc}
   106a0:	21ff      	movs	r1, #255	; 0xff
   106a2:	203e      	movs	r0, #62	; 0x3e
   106a4:	4c03      	ldr	r4, [pc, #12]	; (106b4 <RADIO_UnhandledInterrupt+0x20>)
   106a6:	47a0      	blx	r4
   106a8:	21ff      	movs	r1, #255	; 0xff
   106aa:	203f      	movs	r0, #63	; 0x3f
   106ac:	47a0      	blx	r4
   106ae:	e7f6      	b.n	1069e <RADIO_UnhandledInterrupt+0xa>
   106b0:	00010685 	.word	0x00010685
   106b4:	00003ffd 	.word	0x00003ffd

000106b8 <RADIO_DIO0>:
   106b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   106ba:	466b      	mov	r3, sp
   106bc:	1ddc      	adds	r4, r3, #7
   106be:	1d9d      	adds	r5, r3, #6
   106c0:	22c0      	movs	r2, #192	; 0xc0
   106c2:	2306      	movs	r3, #6
   106c4:	0028      	movs	r0, r5
   106c6:	0021      	movs	r1, r4
   106c8:	4e12      	ldr	r6, [pc, #72]	; (10714 <RADIO_DIO0+0x5c>)
   106ca:	47b0      	blx	r6
   106cc:	7823      	ldrb	r3, [r4, #0]
   106ce:	7828      	ldrb	r0, [r5, #0]
   106d0:	b25a      	sxtb	r2, r3
   106d2:	b2c0      	uxtb	r0, r0
   106d4:	2a00      	cmp	r2, #0
   106d6:	da0b      	bge.n	106f0 <RADIO_DIO0+0x38>
   106d8:	2800      	cmp	r0, #0
   106da:	d004      	beq.n	106e6 <RADIO_DIO0+0x2e>
   106dc:	2801      	cmp	r0, #1
   106de:	d005      	beq.n	106ec <RADIO_DIO0+0x34>
   106e0:	4b0d      	ldr	r3, [pc, #52]	; (10718 <RADIO_DIO0+0x60>)
   106e2:	4798      	blx	r3
   106e4:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   106e6:	4b0d      	ldr	r3, [pc, #52]	; (1071c <RADIO_DIO0+0x64>)
   106e8:	4798      	blx	r3
   106ea:	e7fb      	b.n	106e4 <RADIO_DIO0+0x2c>
   106ec:	4b0c      	ldr	r3, [pc, #48]	; (10720 <RADIO_DIO0+0x68>)
   106ee:	e7fb      	b.n	106e8 <RADIO_DIO0+0x30>
   106f0:	2800      	cmp	r0, #0
   106f2:	d10a      	bne.n	1070a <RADIO_DIO0+0x52>
   106f4:	2207      	movs	r2, #7
   106f6:	4013      	ands	r3, r2
   106f8:	7023      	strb	r3, [r4, #0]
   106fa:	2b03      	cmp	r3, #3
   106fc:	d101      	bne.n	10702 <RADIO_DIO0+0x4a>
   106fe:	4b09      	ldr	r3, [pc, #36]	; (10724 <RADIO_DIO0+0x6c>)
   10700:	e7f2      	b.n	106e8 <RADIO_DIO0+0x30>
   10702:	2b05      	cmp	r3, #5
   10704:	d102      	bne.n	1070c <RADIO_DIO0+0x54>
   10706:	4b08      	ldr	r3, [pc, #32]	; (10728 <RADIO_DIO0+0x70>)
   10708:	e7ee      	b.n	106e8 <RADIO_DIO0+0x30>
   1070a:	2000      	movs	r0, #0
   1070c:	4b07      	ldr	r3, [pc, #28]	; (1072c <RADIO_DIO0+0x74>)
   1070e:	4798      	blx	r3
   10710:	e7e8      	b.n	106e4 <RADIO_DIO0+0x2c>
   10712:	46c0      	nop			; (mov r8, r8)
   10714:	00010661 	.word	0x00010661
   10718:	00010685 	.word	0x00010685
   1071c:	00010e3d 	.word	0x00010e3d
   10720:	00010d41 	.word	0x00010d41
   10724:	00010dbd 	.word	0x00010dbd
   10728:	00010eb9 	.word	0x00010eb9
   1072c:	00010695 	.word	0x00010695

00010730 <RADIO_DIO1>:
   10730:	b573      	push	{r0, r1, r4, r5, r6, lr}
   10732:	466b      	mov	r3, sp
   10734:	1ddc      	adds	r4, r3, #7
   10736:	1d9d      	adds	r5, r3, #6
   10738:	2230      	movs	r2, #48	; 0x30
   1073a:	2304      	movs	r3, #4
   1073c:	0021      	movs	r1, r4
   1073e:	0028      	movs	r0, r5
   10740:	4e11      	ldr	r6, [pc, #68]	; (10788 <RADIO_DIO1+0x58>)
   10742:	47b0      	blx	r6
   10744:	7822      	ldrb	r2, [r4, #0]
   10746:	782b      	ldrb	r3, [r5, #0]
   10748:	b251      	sxtb	r1, r2
   1074a:	2900      	cmp	r1, #0
   1074c:	da0c      	bge.n	10768 <RADIO_DIO1+0x38>
   1074e:	b2db      	uxtb	r3, r3
   10750:	2b00      	cmp	r3, #0
   10752:	d004      	beq.n	1075e <RADIO_DIO1+0x2e>
   10754:	2b01      	cmp	r3, #1
   10756:	d005      	beq.n	10764 <RADIO_DIO1+0x34>
   10758:	4b0c      	ldr	r3, [pc, #48]	; (1078c <RADIO_DIO1+0x5c>)
   1075a:	4798      	blx	r3
   1075c:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   1075e:	4b0c      	ldr	r3, [pc, #48]	; (10790 <RADIO_DIO1+0x60>)
   10760:	4798      	blx	r3
   10762:	e7fb      	b.n	1075c <RADIO_DIO1+0x2c>
   10764:	4b0b      	ldr	r3, [pc, #44]	; (10794 <RADIO_DIO1+0x64>)
   10766:	e7fb      	b.n	10760 <RADIO_DIO1+0x30>
   10768:	2107      	movs	r1, #7
   1076a:	b2db      	uxtb	r3, r3
   1076c:	400a      	ands	r2, r1
   1076e:	7022      	strb	r2, [r4, #0]
   10770:	2b00      	cmp	r3, #0
   10772:	d005      	beq.n	10780 <RADIO_DIO1+0x50>
   10774:	2b01      	cmp	r3, #1
   10776:	d1f1      	bne.n	1075c <RADIO_DIO1+0x2c>
   10778:	2a03      	cmp	r2, #3
   1077a:	d1ef      	bne.n	1075c <RADIO_DIO1+0x2c>
   1077c:	4b06      	ldr	r3, [pc, #24]	; (10798 <RADIO_DIO1+0x68>)
   1077e:	e7ef      	b.n	10760 <RADIO_DIO1+0x30>
   10780:	4b06      	ldr	r3, [pc, #24]	; (1079c <RADIO_DIO1+0x6c>)
   10782:	2a05      	cmp	r2, #5
   10784:	d1ea      	bne.n	1075c <RADIO_DIO1+0x2c>
   10786:	e7eb      	b.n	10760 <RADIO_DIO1+0x30>
   10788:	00010661 	.word	0x00010661
   1078c:	00010685 	.word	0x00010685
   10790:	00010cc5 	.word	0x00010cc5
   10794:	0000a29d 	.word	0x0000a29d
   10798:	00010aed 	.word	0x00010aed
   1079c:	00010a51 	.word	0x00010a51

000107a0 <RADIO_DIO2>:
   107a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   107a2:	466b      	mov	r3, sp
   107a4:	1ddc      	adds	r4, r3, #7
   107a6:	1d9d      	adds	r5, r3, #6
   107a8:	220c      	movs	r2, #12
   107aa:	2302      	movs	r3, #2
   107ac:	0021      	movs	r1, r4
   107ae:	0028      	movs	r0, r5
   107b0:	4e0b      	ldr	r6, [pc, #44]	; (107e0 <RADIO_DIO2+0x40>)
   107b2:	47b0      	blx	r6
   107b4:	7823      	ldrb	r3, [r4, #0]
   107b6:	782a      	ldrb	r2, [r5, #0]
   107b8:	b259      	sxtb	r1, r3
   107ba:	2900      	cmp	r1, #0
   107bc:	da05      	bge.n	107ca <RADIO_DIO2+0x2a>
   107be:	4b09      	ldr	r3, [pc, #36]	; (107e4 <RADIO_DIO2+0x44>)
   107c0:	2a02      	cmp	r2, #2
   107c2:	d90a      	bls.n	107da <RADIO_DIO2+0x3a>
   107c4:	4b08      	ldr	r3, [pc, #32]	; (107e8 <RADIO_DIO2+0x48>)
   107c6:	4798      	blx	r3
   107c8:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   107ca:	2107      	movs	r1, #7
   107cc:	400b      	ands	r3, r1
   107ce:	7023      	strb	r3, [r4, #0]
   107d0:	2a03      	cmp	r2, #3
   107d2:	d1f9      	bne.n	107c8 <RADIO_DIO2+0x28>
   107d4:	2b05      	cmp	r3, #5
   107d6:	d1f7      	bne.n	107c8 <RADIO_DIO2+0x28>
   107d8:	4b04      	ldr	r3, [pc, #16]	; (107ec <RADIO_DIO2+0x4c>)
   107da:	4798      	blx	r3
   107dc:	e7f4      	b.n	107c8 <RADIO_DIO2+0x28>
   107de:	46c0      	nop			; (mov r8, r8)
   107e0:	00010661 	.word	0x00010661
   107e4:	0000a29d 	.word	0x0000a29d
   107e8:	00010685 	.word	0x00010685
   107ec:	00010a21 	.word	0x00010a21

000107f0 <RADIO_DIO3>:
   107f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   107f2:	466b      	mov	r3, sp
   107f4:	4668      	mov	r0, sp
   107f6:	1ddc      	adds	r4, r3, #7
   107f8:	2203      	movs	r2, #3
   107fa:	2300      	movs	r3, #0
   107fc:	0021      	movs	r1, r4
   107fe:	3006      	adds	r0, #6
   10800:	4d03      	ldr	r5, [pc, #12]	; (10810 <RADIO_DIO3+0x20>)
   10802:	47a8      	blx	r5
   10804:	7823      	ldrb	r3, [r4, #0]
   10806:	2b7f      	cmp	r3, #127	; 0x7f
   10808:	d901      	bls.n	1080e <RADIO_DIO3+0x1e>
   1080a:	4b02      	ldr	r3, [pc, #8]	; (10814 <RADIO_DIO3+0x24>)
   1080c:	4798      	blx	r3
   1080e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   10810:	00010661 	.word	0x00010661
   10814:	00010685 	.word	0x00010685

00010818 <RADIO_DIO4>:
   10818:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1081a:	466b      	mov	r3, sp
   1081c:	4668      	mov	r0, sp
   1081e:	1ddc      	adds	r4, r3, #7
   10820:	2306      	movs	r3, #6
   10822:	22c0      	movs	r2, #192	; 0xc0
   10824:	18c0      	adds	r0, r0, r3
   10826:	0021      	movs	r1, r4
   10828:	4d03      	ldr	r5, [pc, #12]	; (10838 <RADIO_DIO4+0x20>)
   1082a:	47a8      	blx	r5
   1082c:	7823      	ldrb	r3, [r4, #0]
   1082e:	2b7f      	cmp	r3, #127	; 0x7f
   10830:	d901      	bls.n	10836 <RADIO_DIO4+0x1e>
   10832:	4b02      	ldr	r3, [pc, #8]	; (1083c <RADIO_DIO4+0x24>)
   10834:	4798      	blx	r3
   10836:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   10838:	00010661 	.word	0x00010661
   1083c:	00010685 	.word	0x00010685

00010840 <RADIO_DIO5>:
   10840:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10842:	466b      	mov	r3, sp
   10844:	4668      	mov	r0, sp
   10846:	1ddc      	adds	r4, r3, #7
   10848:	2230      	movs	r2, #48	; 0x30
   1084a:	2304      	movs	r3, #4
   1084c:	0021      	movs	r1, r4
   1084e:	3006      	adds	r0, #6
   10850:	4d03      	ldr	r5, [pc, #12]	; (10860 <RADIO_DIO5+0x20>)
   10852:	47a8      	blx	r5
   10854:	7823      	ldrb	r3, [r4, #0]
   10856:	2b7f      	cmp	r3, #127	; 0x7f
   10858:	d901      	bls.n	1085e <RADIO_DIO5+0x1e>
   1085a:	4b02      	ldr	r3, [pc, #8]	; (10864 <RADIO_DIO5+0x24>)
   1085c:	4798      	blx	r3
   1085e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   10860:	00010661 	.word	0x00010661
   10864:	00010685 	.word	0x00010685

00010868 <radioPostTask>:
   10868:	b510      	push	{r4, lr}
   1086a:	0004      	movs	r4, r0
   1086c:	4b05      	ldr	r3, [pc, #20]	; (10884 <radioPostTask+0x1c>)
   1086e:	4798      	blx	r3
   10870:	4b05      	ldr	r3, [pc, #20]	; (10888 <radioPostTask+0x20>)
   10872:	8818      	ldrh	r0, [r3, #0]
   10874:	4320      	orrs	r0, r4
   10876:	8018      	strh	r0, [r3, #0]
   10878:	4b04      	ldr	r3, [pc, #16]	; (1088c <radioPostTask+0x24>)
   1087a:	4798      	blx	r3
   1087c:	2002      	movs	r0, #2
   1087e:	4b04      	ldr	r3, [pc, #16]	; (10890 <radioPostTask+0x28>)
   10880:	4798      	blx	r3
   10882:	bd10      	pop	{r4, pc}
   10884:	00004275 	.word	0x00004275
   10888:	20000eba 	.word	0x20000eba
   1088c:	00004281 	.word	0x00004281
   10890:	0000a181 	.word	0x0000a181

00010894 <radioClearTask>:
   10894:	b510      	push	{r4, lr}
   10896:	0004      	movs	r4, r0
   10898:	4b04      	ldr	r3, [pc, #16]	; (108ac <radioClearTask+0x18>)
   1089a:	4798      	blx	r3
   1089c:	4a04      	ldr	r2, [pc, #16]	; (108b0 <radioClearTask+0x1c>)
   1089e:	8813      	ldrh	r3, [r2, #0]
   108a0:	43a3      	bics	r3, r4
   108a2:	8013      	strh	r3, [r2, #0]
   108a4:	4b03      	ldr	r3, [pc, #12]	; (108b4 <radioClearTask+0x20>)
   108a6:	4798      	blx	r3
   108a8:	bd10      	pop	{r4, pc}
   108aa:	46c0      	nop			; (mov r8, r8)
   108ac:	00004275 	.word	0x00004275
   108b0:	20000eba 	.word	0x20000eba
   108b4:	00004281 	.word	0x00004281

000108b8 <RADIO_TaskHandler>:
   108b8:	b570      	push	{r4, r5, r6, lr}
   108ba:	2400      	movs	r4, #0
   108bc:	4d10      	ldr	r5, [pc, #64]	; (10900 <RADIO_TaskHandler+0x48>)
   108be:	2601      	movs	r6, #1
   108c0:	882b      	ldrh	r3, [r5, #0]
   108c2:	42a3      	cmp	r3, r4
   108c4:	d015      	beq.n	108f2 <RADIO_TaskHandler+0x3a>
   108c6:	882b      	ldrh	r3, [r5, #0]
   108c8:	4123      	asrs	r3, r4
   108ca:	4233      	tst	r3, r6
   108cc:	d013      	beq.n	108f6 <RADIO_TaskHandler+0x3e>
   108ce:	40a6      	lsls	r6, r4
   108d0:	4b0c      	ldr	r3, [pc, #48]	; (10904 <RADIO_TaskHandler+0x4c>)
   108d2:	4798      	blx	r3
   108d4:	882b      	ldrh	r3, [r5, #0]
   108d6:	00a4      	lsls	r4, r4, #2
   108d8:	43b3      	bics	r3, r6
   108da:	802b      	strh	r3, [r5, #0]
   108dc:	4b0a      	ldr	r3, [pc, #40]	; (10908 <RADIO_TaskHandler+0x50>)
   108de:	4798      	blx	r3
   108e0:	4b0a      	ldr	r3, [pc, #40]	; (1090c <RADIO_TaskHandler+0x54>)
   108e2:	58e3      	ldr	r3, [r4, r3]
   108e4:	4798      	blx	r3
   108e6:	882b      	ldrh	r3, [r5, #0]
   108e8:	2b00      	cmp	r3, #0
   108ea:	d002      	beq.n	108f2 <RADIO_TaskHandler+0x3a>
   108ec:	2002      	movs	r0, #2
   108ee:	4b08      	ldr	r3, [pc, #32]	; (10910 <RADIO_TaskHandler+0x58>)
   108f0:	4798      	blx	r3
   108f2:	2000      	movs	r0, #0
   108f4:	bd70      	pop	{r4, r5, r6, pc}
   108f6:	3401      	adds	r4, #1
   108f8:	2c05      	cmp	r4, #5
   108fa:	d1e4      	bne.n	108c6 <RADIO_TaskHandler+0xe>
   108fc:	e7f9      	b.n	108f2 <RADIO_TaskHandler+0x3a>
   108fe:	46c0      	nop			; (mov r8, r8)
   10900:	20000eba 	.word	0x20000eba
   10904:	00004275 	.word	0x00004275
   10908:	00004281 	.word	0x00004281
   1090c:	0001b114 	.word	0x0001b114
   10910:	0000a181 	.word	0x0000a181

00010914 <RadioSetState>:
   10914:	4b01      	ldr	r3, [pc, #4]	; (1091c <RadioSetState+0x8>)
   10916:	7018      	strb	r0, [r3, #0]
   10918:	4770      	bx	lr
   1091a:	46c0      	nop			; (mov r8, r8)
   1091c:	20001be7 	.word	0x20001be7

00010920 <RADIO_GetState>:
   10920:	4b01      	ldr	r3, [pc, #4]	; (10928 <RADIO_GetState+0x8>)
   10922:	7818      	ldrb	r0, [r3, #0]
   10924:	b2c0      	uxtb	r0, r0
   10926:	4770      	bx	lr
   10928:	20001be7 	.word	0x20001be7

0001092c <RADIO_SetCallbackBitmask>:
   1092c:	4a02      	ldr	r2, [pc, #8]	; (10938 <RADIO_SetCallbackBitmask+0xc>)
   1092e:	7813      	ldrb	r3, [r2, #0]
   10930:	4318      	orrs	r0, r3
   10932:	7010      	strb	r0, [r2, #0]
   10934:	4770      	bx	lr
   10936:	46c0      	nop			; (mov r8, r8)
   10938:	20001be6 	.word	0x20001be6

0001093c <RADIO_Transmit>:
   1093c:	b570      	push	{r4, r5, r6, lr}
   1093e:	4d10      	ldr	r5, [pc, #64]	; (10980 <RADIO_Transmit+0x44>)
   10940:	0006      	movs	r6, r0
   10942:	782b      	ldrb	r3, [r5, #0]
   10944:	2004      	movs	r0, #4
   10946:	2b01      	cmp	r3, #1
   10948:	d118      	bne.n	1097c <RADIO_Transmit+0x40>
   1094a:	4c0e      	ldr	r4, [pc, #56]	; (10984 <RADIO_Transmit+0x48>)
   1094c:	0023      	movs	r3, r4
   1094e:	332f      	adds	r3, #47	; 0x2f
   10950:	7818      	ldrb	r0, [r3, #0]
   10952:	4b0d      	ldr	r3, [pc, #52]	; (10988 <RADIO_Transmit+0x4c>)
   10954:	4798      	blx	r3
   10956:	4b0d      	ldr	r3, [pc, #52]	; (1098c <RADIO_Transmit+0x50>)
   10958:	7832      	ldrb	r2, [r6, #0]
   1095a:	6871      	ldr	r1, [r6, #4]
   1095c:	701a      	strb	r2, [r3, #0]
   1095e:	4b0c      	ldr	r3, [pc, #48]	; (10990 <RADIO_Transmit+0x54>)
   10960:	3434      	adds	r4, #52	; 0x34
   10962:	6019      	str	r1, [r3, #0]
   10964:	7821      	ldrb	r1, [r4, #0]
   10966:	2302      	movs	r3, #2
   10968:	2900      	cmp	r1, #0
   1096a:	d102      	bne.n	10972 <RADIO_Transmit+0x36>
   1096c:	0018      	movs	r0, r3
   1096e:	2a3f      	cmp	r2, #63	; 0x3f
   10970:	d804      	bhi.n	1097c <RADIO_Transmit+0x40>
   10972:	702b      	strb	r3, [r5, #0]
   10974:	2004      	movs	r0, #4
   10976:	4b07      	ldr	r3, [pc, #28]	; (10994 <RADIO_Transmit+0x58>)
   10978:	4798      	blx	r3
   1097a:	2000      	movs	r0, #0
   1097c:	bd70      	pop	{r4, r5, r6, pc}
   1097e:	46c0      	nop			; (mov r8, r8)
   10980:	20001be7 	.word	0x20001be7
   10984:	200015f8 	.word	0x200015f8
   10988:	00009e61 	.word	0x00009e61
   1098c:	20000edc 	.word	0x20000edc
   10990:	20000ed8 	.word	0x20000ed8
   10994:	00010869 	.word	0x00010869

00010998 <Radio_FSKTxPayloadHandler>:
   10998:	b570      	push	{r4, r5, r6, lr}
   1099a:	4b1c      	ldr	r3, [pc, #112]	; (10a0c <Radio_FSKTxPayloadHandler+0x74>)
   1099c:	000d      	movs	r5, r1
   1099e:	4798      	blx	r3
   109a0:	4c1b      	ldr	r4, [pc, #108]	; (10a10 <Radio_FSKTxPayloadHandler+0x78>)
   109a2:	3458      	adds	r4, #88	; 0x58
   109a4:	7820      	ldrb	r0, [r4, #0]
   109a6:	b2c0      	uxtb	r0, r0
   109a8:	2800      	cmp	r0, #0
   109aa:	d112      	bne.n	109d2 <Radio_FSKTxPayloadHandler+0x3a>
   109ac:	2d00      	cmp	r5, #0
   109ae:	d007      	beq.n	109c0 <Radio_FSKTxPayloadHandler+0x28>
   109b0:	4918      	ldr	r1, [pc, #96]	; (10a14 <Radio_FSKTxPayloadHandler+0x7c>)
   109b2:	4b19      	ldr	r3, [pc, #100]	; (10a18 <Radio_FSKTxPayloadHandler+0x80>)
   109b4:	2d3e      	cmp	r5, #62	; 0x3e
   109b6:	d806      	bhi.n	109c6 <Radio_FSKTxPayloadHandler+0x2e>
   109b8:	002a      	movs	r2, r5
   109ba:	6809      	ldr	r1, [r1, #0]
   109bc:	4798      	blx	r3
   109be:	7025      	strb	r5, [r4, #0]
   109c0:	4b16      	ldr	r3, [pc, #88]	; (10a1c <Radio_FSKTxPayloadHandler+0x84>)
   109c2:	4798      	blx	r3
   109c4:	bd70      	pop	{r4, r5, r6, pc}
   109c6:	223f      	movs	r2, #63	; 0x3f
   109c8:	6809      	ldr	r1, [r1, #0]
   109ca:	4798      	blx	r3
   109cc:	233f      	movs	r3, #63	; 0x3f
   109ce:	7023      	strb	r3, [r4, #0]
   109d0:	e7f6      	b.n	109c0 <Radio_FSKTxPayloadHandler+0x28>
   109d2:	7823      	ldrb	r3, [r4, #0]
   109d4:	429d      	cmp	r5, r3
   109d6:	d0f3      	beq.n	109c0 <Radio_FSKTxPayloadHandler+0x28>
   109d8:	7822      	ldrb	r2, [r4, #0]
   109da:	480e      	ldr	r0, [pc, #56]	; (10a14 <Radio_FSKTxPayloadHandler+0x7c>)
   109dc:	1aaa      	subs	r2, r5, r2
   109de:	b2d2      	uxtb	r2, r2
   109e0:	4b0d      	ldr	r3, [pc, #52]	; (10a18 <Radio_FSKTxPayloadHandler+0x80>)
   109e2:	2a3f      	cmp	r2, #63	; 0x3f
   109e4:	d807      	bhi.n	109f6 <Radio_FSKTxPayloadHandler+0x5e>
   109e6:	7826      	ldrb	r6, [r4, #0]
   109e8:	7822      	ldrb	r2, [r4, #0]
   109ea:	6801      	ldr	r1, [r0, #0]
   109ec:	1aaa      	subs	r2, r5, r2
   109ee:	b2d2      	uxtb	r2, r2
   109f0:	1989      	adds	r1, r1, r6
   109f2:	2000      	movs	r0, #0
   109f4:	e7e2      	b.n	109bc <Radio_FSKTxPayloadHandler+0x24>
   109f6:	7822      	ldrb	r2, [r4, #0]
   109f8:	6801      	ldr	r1, [r0, #0]
   109fa:	2000      	movs	r0, #0
   109fc:	1889      	adds	r1, r1, r2
   109fe:	223f      	movs	r2, #63	; 0x3f
   10a00:	4798      	blx	r3
   10a02:	7823      	ldrb	r3, [r4, #0]
   10a04:	333f      	adds	r3, #63	; 0x3f
   10a06:	b2db      	uxtb	r3, r3
   10a08:	e7e1      	b.n	109ce <Radio_FSKTxPayloadHandler+0x36>
   10a0a:	46c0      	nop			; (mov r8, r8)
   10a0c:	00000661 	.word	0x00000661
   10a10:	200015f8 	.word	0x200015f8
   10a14:	20000ed8 	.word	0x20000ed8
   10a18:	00004051 	.word	0x00004051
   10a1c:	000006a1 	.word	0x000006a1

00010a20 <RADIO_FSKSyncAddr>:
   10a20:	4b08      	ldr	r3, [pc, #32]	; (10a44 <RADIO_FSKSyncAddr+0x24>)
   10a22:	b510      	push	{r4, lr}
   10a24:	4798      	blx	r3
   10a26:	4b08      	ldr	r3, [pc, #32]	; (10a48 <RADIO_FSKSyncAddr+0x28>)
   10a28:	001a      	movs	r2, r3
   10a2a:	3234      	adds	r2, #52	; 0x34
   10a2c:	7812      	ldrb	r2, [r2, #0]
   10a2e:	2a00      	cmp	r2, #0
   10a30:	d104      	bne.n	10a3c <RADIO_FSKSyncAddr+0x1c>
   10a32:	0019      	movs	r1, r3
   10a34:	3358      	adds	r3, #88	; 0x58
   10a36:	312c      	adds	r1, #44	; 0x2c
   10a38:	700a      	strb	r2, [r1, #0]
   10a3a:	701a      	strb	r2, [r3, #0]
   10a3c:	4b03      	ldr	r3, [pc, #12]	; (10a4c <RADIO_FSKSyncAddr+0x2c>)
   10a3e:	4798      	blx	r3
   10a40:	bd10      	pop	{r4, pc}
   10a42:	46c0      	nop			; (mov r8, r8)
   10a44:	00000661 	.word	0x00000661
   10a48:	200015f8 	.word	0x200015f8
   10a4c:	000006a1 	.word	0x000006a1

00010a50 <RADIO_FSKFifoLevel>:
   10a50:	b570      	push	{r4, r5, r6, lr}
   10a52:	4b22      	ldr	r3, [pc, #136]	; (10adc <RADIO_FSKFifoLevel+0x8c>)
   10a54:	4798      	blx	r3
   10a56:	4d22      	ldr	r5, [pc, #136]	; (10ae0 <RADIO_FSKFifoLevel+0x90>)
   10a58:	002a      	movs	r2, r5
   10a5a:	002b      	movs	r3, r5
   10a5c:	322c      	adds	r2, #44	; 0x2c
   10a5e:	3358      	adds	r3, #88	; 0x58
   10a60:	7810      	ldrb	r0, [r2, #0]
   10a62:	7819      	ldrb	r1, [r3, #0]
   10a64:	4288      	cmp	r0, r1
   10a66:	d105      	bne.n	10a74 <RADIO_FSKFifoLevel+0x24>
   10a68:	7812      	ldrb	r2, [r2, #0]
   10a6a:	2a00      	cmp	r2, #0
   10a6c:	d002      	beq.n	10a74 <RADIO_FSKFifoLevel+0x24>
   10a6e:	781b      	ldrb	r3, [r3, #0]
   10a70:	2b00      	cmp	r3, #0
   10a72:	d11f      	bne.n	10ab4 <RADIO_FSKFifoLevel+0x64>
   10a74:	0029      	movs	r1, r5
   10a76:	312c      	adds	r1, #44	; 0x2c
   10a78:	7808      	ldrb	r0, [r1, #0]
   10a7a:	b2c0      	uxtb	r0, r0
   10a7c:	2800      	cmp	r0, #0
   10a7e:	d102      	bne.n	10a86 <RADIO_FSKFifoLevel+0x36>
   10a80:	2201      	movs	r2, #1
   10a82:	4b18      	ldr	r3, [pc, #96]	; (10ae4 <RADIO_FSKFifoLevel+0x94>)
   10a84:	4798      	blx	r3
   10a86:	002e      	movs	r6, r5
   10a88:	002c      	movs	r4, r5
   10a8a:	362c      	adds	r6, #44	; 0x2c
   10a8c:	3458      	adds	r4, #88	; 0x58
   10a8e:	7833      	ldrb	r3, [r6, #0]
   10a90:	7822      	ldrb	r2, [r4, #0]
   10a92:	1a9b      	subs	r3, r3, r2
   10a94:	b2db      	uxtb	r3, r3
   10a96:	2b3e      	cmp	r3, #62	; 0x3e
   10a98:	d80f      	bhi.n	10aba <RADIO_FSKFifoLevel+0x6a>
   10a9a:	7823      	ldrb	r3, [r4, #0]
   10a9c:	7832      	ldrb	r2, [r6, #0]
   10a9e:	7821      	ldrb	r1, [r4, #0]
   10aa0:	2000      	movs	r0, #0
   10aa2:	1a52      	subs	r2, r2, r1
   10aa4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   10aa6:	b2d2      	uxtb	r2, r2
   10aa8:	18c9      	adds	r1, r1, r3
   10aaa:	4b0e      	ldr	r3, [pc, #56]	; (10ae4 <RADIO_FSKFifoLevel+0x94>)
   10aac:	4798      	blx	r3
   10aae:	7833      	ldrb	r3, [r6, #0]
   10ab0:	b2db      	uxtb	r3, r3
   10ab2:	7023      	strb	r3, [r4, #0]
   10ab4:	4b0c      	ldr	r3, [pc, #48]	; (10ae8 <RADIO_FSKFifoLevel+0x98>)
   10ab6:	4798      	blx	r3
   10ab8:	bd70      	pop	{r4, r5, r6, pc}
   10aba:	7833      	ldrb	r3, [r6, #0]
   10abc:	7822      	ldrb	r2, [r4, #0]
   10abe:	1a9b      	subs	r3, r3, r2
   10ac0:	b2db      	uxtb	r3, r3
   10ac2:	2b3f      	cmp	r3, #63	; 0x3f
   10ac4:	d9f6      	bls.n	10ab4 <RADIO_FSKFifoLevel+0x64>
   10ac6:	7823      	ldrb	r3, [r4, #0]
   10ac8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   10aca:	223f      	movs	r2, #63	; 0x3f
   10acc:	18c9      	adds	r1, r1, r3
   10ace:	2000      	movs	r0, #0
   10ad0:	4b04      	ldr	r3, [pc, #16]	; (10ae4 <RADIO_FSKFifoLevel+0x94>)
   10ad2:	4798      	blx	r3
   10ad4:	7823      	ldrb	r3, [r4, #0]
   10ad6:	333f      	adds	r3, #63	; 0x3f
   10ad8:	e7ea      	b.n	10ab0 <RADIO_FSKFifoLevel+0x60>
   10ada:	46c0      	nop			; (mov r8, r8)
   10adc:	00000661 	.word	0x00000661
   10ae0:	200015f8 	.word	0x200015f8
   10ae4:	00004091 	.word	0x00004091
   10ae8:	000006a1 	.word	0x000006a1

00010aec <RADIO_FSKFifoEmpty>:
   10aec:	b510      	push	{r4, lr}
   10aee:	4b03      	ldr	r3, [pc, #12]	; (10afc <RADIO_FSKFifoEmpty+0x10>)
   10af0:	7819      	ldrb	r1, [r3, #0]
   10af2:	4b03      	ldr	r3, [pc, #12]	; (10b00 <RADIO_FSKFifoEmpty+0x14>)
   10af4:	6818      	ldr	r0, [r3, #0]
   10af6:	4b03      	ldr	r3, [pc, #12]	; (10b04 <RADIO_FSKFifoEmpty+0x18>)
   10af8:	4798      	blx	r3
   10afa:	bd10      	pop	{r4, pc}
   10afc:	20000edc 	.word	0x20000edc
   10b00:	20000ed8 	.word	0x20000ed8
   10b04:	00010999 	.word	0x00010999

00010b08 <RADIO_GetData>:
   10b08:	4b03      	ldr	r3, [pc, #12]	; (10b18 <RADIO_GetData+0x10>)
   10b0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   10b0c:	332c      	adds	r3, #44	; 0x2c
   10b0e:	6002      	str	r2, [r0, #0]
   10b10:	781b      	ldrb	r3, [r3, #0]
   10b12:	2000      	movs	r0, #0
   10b14:	800b      	strh	r3, [r1, #0]
   10b16:	4770      	bx	lr
   10b18:	200015f8 	.word	0x200015f8

00010b1c <Radio_EnableRfControl>:
   10b1c:	b510      	push	{r4, lr}
   10b1e:	4b08      	ldr	r3, [pc, #32]	; (10b40 <Radio_EnableRfControl+0x24>)
   10b20:	0001      	movs	r1, r0
   10b22:	681a      	ldr	r2, [r3, #0]
   10b24:	4807      	ldr	r0, [pc, #28]	; (10b44 <Radio_EnableRfControl+0x28>)
   10b26:	4c08      	ldr	r4, [pc, #32]	; (10b48 <Radio_EnableRfControl+0x2c>)
   10b28:	1812      	adds	r2, r2, r0
   10b2a:	2000      	movs	r0, #0
   10b2c:	42a2      	cmp	r2, r4
   10b2e:	d804      	bhi.n	10b3a <Radio_EnableRfControl+0x1e>
   10b30:	3305      	adds	r3, #5
   10b32:	7fdb      	ldrb	r3, [r3, #31]
   10b34:	1e58      	subs	r0, r3, #1
   10b36:	4183      	sbcs	r3, r0
   10b38:	1c58      	adds	r0, r3, #1
   10b3a:	4b04      	ldr	r3, [pc, #16]	; (10b4c <Radio_EnableRfControl+0x30>)
   10b3c:	4798      	blx	r3
   10b3e:	bd10      	pop	{r4, pc}
   10b40:	200015f8 	.word	0x200015f8
   10b44:	cc9eec80 	.word	0xcc9eec80
   10b48:	096ae380 	.word	0x096ae380
   10b4c:	000040fd 	.word	0x000040fd

00010b50 <RADIO_RxHandler>:
   10b50:	b573      	push	{r0, r1, r4, r5, r6, lr}
   10b52:	4b33      	ldr	r3, [pc, #204]	; (10c20 <RADIO_RxHandler+0xd0>)
   10b54:	2000      	movs	r0, #0
   10b56:	4798      	blx	r3
   10b58:	4e32      	ldr	r6, [pc, #200]	; (10c24 <RADIO_RxHandler+0xd4>)
   10b5a:	4b33      	ldr	r3, [pc, #204]	; (10c28 <RADIO_RxHandler+0xd8>)
   10b5c:	8830      	ldrh	r0, [r6, #0]
   10b5e:	2800      	cmp	r0, #0
   10b60:	d100      	bne.n	10b64 <RADIO_RxHandler+0x14>
   10b62:	3004      	adds	r0, #4
   10b64:	4798      	blx	r3
   10b66:	4c31      	ldr	r4, [pc, #196]	; (10c2c <RADIO_RxHandler+0xdc>)
   10b68:	4d31      	ldr	r5, [pc, #196]	; (10c30 <RADIO_RxHandler+0xe0>)
   10b6a:	0023      	movs	r3, r4
   10b6c:	3334      	adds	r3, #52	; 0x34
   10b6e:	7819      	ldrb	r1, [r3, #0]
   10b70:	2901      	cmp	r1, #1
   10b72:	d122      	bne.n	10bba <RADIO_RxHandler+0x6a>
   10b74:	2022      	movs	r0, #34	; 0x22
   10b76:	47a8      	blx	r5
   10b78:	2100      	movs	r1, #0
   10b7a:	2040      	movs	r0, #64	; 0x40
   10b7c:	47a8      	blx	r5
   10b7e:	2100      	movs	r1, #0
   10b80:	2041      	movs	r0, #65	; 0x41
   10b82:	47a8      	blx	r5
   10b84:	8832      	ldrh	r2, [r6, #0]
   10b86:	4b2b      	ldr	r3, [pc, #172]	; (10c34 <RADIO_RxHandler+0xe4>)
   10b88:	2a00      	cmp	r2, #0
   10b8a:	d131      	bne.n	10bf0 <RADIO_RxHandler+0xa0>
   10b8c:	0021      	movs	r1, r4
   10b8e:	2005      	movs	r0, #5
   10b90:	3134      	adds	r1, #52	; 0x34
   10b92:	7809      	ldrb	r1, [r1, #0]
   10b94:	4798      	blx	r3
   10b96:	68e3      	ldr	r3, [r4, #12]
   10b98:	2b00      	cmp	r3, #0
   10b9a:	d00c      	beq.n	10bb6 <RADIO_RxHandler+0x66>
   10b9c:	8832      	ldrh	r2, [r6, #0]
   10b9e:	2a00      	cmp	r2, #0
   10ba0:	d009      	beq.n	10bb6 <RADIO_RxHandler+0x66>
   10ba2:	21fa      	movs	r1, #250	; 0xfa
   10ba4:	2200      	movs	r2, #0
   10ba6:	342f      	adds	r4, #47	; 0x2f
   10ba8:	0089      	lsls	r1, r1, #2
   10baa:	7820      	ldrb	r0, [r4, #0]
   10bac:	4359      	muls	r1, r3
   10bae:	9200      	str	r2, [sp, #0]
   10bb0:	4b21      	ldr	r3, [pc, #132]	; (10c38 <RADIO_RxHandler+0xe8>)
   10bb2:	4c22      	ldr	r4, [pc, #136]	; (10c3c <RADIO_RxHandler+0xec>)
   10bb4:	47a0      	blx	r4
   10bb6:	2000      	movs	r0, #0
   10bb8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   10bba:	0023      	movs	r3, r4
   10bbc:	3338      	adds	r3, #56	; 0x38
   10bbe:	7819      	ldrb	r1, [r3, #0]
   10bc0:	2012      	movs	r0, #18
   10bc2:	47a8      	blx	r5
   10bc4:	0023      	movs	r3, r4
   10bc6:	3339      	adds	r3, #57	; 0x39
   10bc8:	7819      	ldrb	r1, [r3, #0]
   10bca:	2013      	movs	r0, #19
   10bcc:	47a8      	blx	r5
   10bce:	210c      	movs	r1, #12
   10bd0:	2040      	movs	r0, #64	; 0x40
   10bd2:	47a8      	blx	r5
   10bd4:	2100      	movs	r1, #0
   10bd6:	2041      	movs	r0, #65	; 0x41
   10bd8:	47a8      	blx	r5
   10bda:	0022      	movs	r2, r4
   10bdc:	2300      	movs	r3, #0
   10bde:	3256      	adds	r2, #86	; 0x56
   10be0:	8013      	strh	r3, [r2, #0]
   10be2:	0022      	movs	r2, r4
   10be4:	322c      	adds	r2, #44	; 0x2c
   10be6:	7013      	strb	r3, [r2, #0]
   10be8:	0022      	movs	r2, r4
   10bea:	3258      	adds	r2, #88	; 0x58
   10bec:	7013      	strb	r3, [r2, #0]
   10bee:	e7c9      	b.n	10b84 <RADIO_RxHandler+0x34>
   10bf0:	0022      	movs	r2, r4
   10bf2:	3234      	adds	r2, #52	; 0x34
   10bf4:	7811      	ldrb	r1, [r2, #0]
   10bf6:	2200      	movs	r2, #0
   10bf8:	2901      	cmp	r1, #1
   10bfa:	d101      	bne.n	10c00 <RADIO_RxHandler+0xb0>
   10bfc:	2006      	movs	r0, #6
   10bfe:	e7c9      	b.n	10b94 <RADIO_RxHandler+0x44>
   10c00:	0011      	movs	r1, r2
   10c02:	2005      	movs	r0, #5
   10c04:	4798      	blx	r3
   10c06:	21fa      	movs	r1, #250	; 0xfa
   10c08:	8833      	ldrh	r3, [r6, #0]
   10c0a:	0089      	lsls	r1, r1, #2
   10c0c:	4359      	muls	r1, r3
   10c0e:	0023      	movs	r3, r4
   10c10:	2200      	movs	r2, #0
   10c12:	332e      	adds	r3, #46	; 0x2e
   10c14:	7818      	ldrb	r0, [r3, #0]
   10c16:	4d09      	ldr	r5, [pc, #36]	; (10c3c <RADIO_RxHandler+0xec>)
   10c18:	9200      	str	r2, [sp, #0]
   10c1a:	4b09      	ldr	r3, [pc, #36]	; (10c40 <RADIO_RxHandler+0xf0>)
   10c1c:	47a8      	blx	r5
   10c1e:	e7ba      	b.n	10b96 <RADIO_RxHandler+0x46>
   10c20:	00010b1d 	.word	0x00010b1d
   10c24:	20000ec8 	.word	0x20000ec8
   10c28:	000102a9 	.word	0x000102a9
   10c2c:	200015f8 	.word	0x200015f8
   10c30:	00003ffd 	.word	0x00003ffd
   10c34:	0000a1b9 	.word	0x0000a1b9
   10c38:	00010c79 	.word	0x00010c79
   10c3c:	00009b55 	.word	0x00009b55
   10c40:	00010d09 	.word	0x00010d09

00010c44 <Radio_DisableRfControl>:
   10c44:	b510      	push	{r4, lr}
   10c46:	4b08      	ldr	r3, [pc, #32]	; (10c68 <Radio_DisableRfControl+0x24>)
   10c48:	0001      	movs	r1, r0
   10c4a:	681a      	ldr	r2, [r3, #0]
   10c4c:	4807      	ldr	r0, [pc, #28]	; (10c6c <Radio_DisableRfControl+0x28>)
   10c4e:	4c08      	ldr	r4, [pc, #32]	; (10c70 <Radio_DisableRfControl+0x2c>)
   10c50:	1812      	adds	r2, r2, r0
   10c52:	2000      	movs	r0, #0
   10c54:	42a2      	cmp	r2, r4
   10c56:	d804      	bhi.n	10c62 <Radio_DisableRfControl+0x1e>
   10c58:	3305      	adds	r3, #5
   10c5a:	7fdb      	ldrb	r3, [r3, #31]
   10c5c:	1e58      	subs	r0, r3, #1
   10c5e:	4183      	sbcs	r3, r0
   10c60:	1c58      	adds	r0, r3, #1
   10c62:	4b04      	ldr	r3, [pc, #16]	; (10c74 <Radio_DisableRfControl+0x30>)
   10c64:	4798      	blx	r3
   10c66:	bd10      	pop	{r4, pc}
   10c68:	200015f8 	.word	0x200015f8
   10c6c:	cc9eec80 	.word	0xcc9eec80
   10c70:	096ae380 	.word	0x096ae380
   10c74:	00004125 	.word	0x00004125

00010c78 <Radio_WatchdogTimeout>:
   10c78:	b510      	push	{r4, lr}
   10c7a:	4b0e      	ldr	r3, [pc, #56]	; (10cb4 <Radio_WatchdogTimeout+0x3c>)
   10c7c:	781a      	ldrb	r2, [r3, #0]
   10c7e:	2a04      	cmp	r2, #4
   10c80:	d10b      	bne.n	10c9a <Radio_WatchdogTimeout+0x22>
   10c82:	2320      	movs	r3, #32
   10c84:	4a0c      	ldr	r2, [pc, #48]	; (10cb8 <Radio_WatchdogTimeout+0x40>)
   10c86:	2000      	movs	r0, #0
   10c88:	8811      	ldrh	r1, [r2, #0]
   10c8a:	430b      	orrs	r3, r1
   10c8c:	8013      	strh	r3, [r2, #0]
   10c8e:	4b0b      	ldr	r3, [pc, #44]	; (10cbc <Radio_WatchdogTimeout+0x44>)
   10c90:	4798      	blx	r3
   10c92:	2002      	movs	r0, #2
   10c94:	4b0a      	ldr	r3, [pc, #40]	; (10cc0 <Radio_WatchdogTimeout+0x48>)
   10c96:	4798      	blx	r3
   10c98:	bd10      	pop	{r4, pc}
   10c9a:	781b      	ldrb	r3, [r3, #0]
   10c9c:	2b02      	cmp	r3, #2
   10c9e:	d1fb      	bne.n	10c98 <Radio_WatchdogTimeout+0x20>
   10ca0:	4a05      	ldr	r2, [pc, #20]	; (10cb8 <Radio_WatchdogTimeout+0x40>)
   10ca2:	330e      	adds	r3, #14
   10ca4:	8811      	ldrh	r1, [r2, #0]
   10ca6:	2001      	movs	r0, #1
   10ca8:	430b      	orrs	r3, r1
   10caa:	8013      	strh	r3, [r2, #0]
   10cac:	4b03      	ldr	r3, [pc, #12]	; (10cbc <Radio_WatchdogTimeout+0x44>)
   10cae:	4798      	blx	r3
   10cb0:	2001      	movs	r0, #1
   10cb2:	e7ef      	b.n	10c94 <Radio_WatchdogTimeout+0x1c>
   10cb4:	20001be7 	.word	0x20001be7
   10cb8:	20001be4 	.word	0x20001be4
   10cbc:	00010c45 	.word	0x00010c45
   10cc0:	00010869 	.word	0x00010869

00010cc4 <RADIO_RxTimeout>:
   10cc4:	b510      	push	{r4, lr}
   10cc6:	4b0a      	ldr	r3, [pc, #40]	; (10cf0 <RADIO_RxTimeout+0x2c>)
   10cc8:	332f      	adds	r3, #47	; 0x2f
   10cca:	7818      	ldrb	r0, [r3, #0]
   10ccc:	4b09      	ldr	r3, [pc, #36]	; (10cf4 <RADIO_RxTimeout+0x30>)
   10cce:	4798      	blx	r3
   10cd0:	2000      	movs	r0, #0
   10cd2:	4b09      	ldr	r3, [pc, #36]	; (10cf8 <RADIO_RxTimeout+0x34>)
   10cd4:	4798      	blx	r3
   10cd6:	2180      	movs	r1, #128	; 0x80
   10cd8:	2012      	movs	r0, #18
   10cda:	4b08      	ldr	r3, [pc, #32]	; (10cfc <RADIO_RxTimeout+0x38>)
   10cdc:	4798      	blx	r3
   10cde:	2340      	movs	r3, #64	; 0x40
   10ce0:	4a07      	ldr	r2, [pc, #28]	; (10d00 <RADIO_RxTimeout+0x3c>)
   10ce2:	2002      	movs	r0, #2
   10ce4:	8811      	ldrh	r1, [r2, #0]
   10ce6:	430b      	orrs	r3, r1
   10ce8:	8013      	strh	r3, [r2, #0]
   10cea:	4b06      	ldr	r3, [pc, #24]	; (10d04 <RADIO_RxTimeout+0x40>)
   10cec:	4798      	blx	r3
   10cee:	bd10      	pop	{r4, pc}
   10cf0:	200015f8 	.word	0x200015f8
   10cf4:	00009e61 	.word	0x00009e61
   10cf8:	00010c45 	.word	0x00010c45
   10cfc:	00003ffd 	.word	0x00003ffd
   10d00:	20001be4 	.word	0x20001be4
   10d04:	00010869 	.word	0x00010869

00010d08 <Radio_RxFSKTimeout>:
   10d08:	b510      	push	{r4, lr}
   10d0a:	4b08      	ldr	r3, [pc, #32]	; (10d2c <Radio_RxFSKTimeout+0x24>)
   10d0c:	332f      	adds	r3, #47	; 0x2f
   10d0e:	7818      	ldrb	r0, [r3, #0]
   10d10:	4b07      	ldr	r3, [pc, #28]	; (10d30 <Radio_RxFSKTimeout+0x28>)
   10d12:	4798      	blx	r3
   10d14:	2000      	movs	r0, #0
   10d16:	4b07      	ldr	r3, [pc, #28]	; (10d34 <Radio_RxFSKTimeout+0x2c>)
   10d18:	4798      	blx	r3
   10d1a:	2380      	movs	r3, #128	; 0x80
   10d1c:	4a06      	ldr	r2, [pc, #24]	; (10d38 <Radio_RxFSKTimeout+0x30>)
   10d1e:	2002      	movs	r0, #2
   10d20:	8811      	ldrh	r1, [r2, #0]
   10d22:	430b      	orrs	r3, r1
   10d24:	8013      	strh	r3, [r2, #0]
   10d26:	4b05      	ldr	r3, [pc, #20]	; (10d3c <Radio_RxFSKTimeout+0x34>)
   10d28:	4798      	blx	r3
   10d2a:	bd10      	pop	{r4, pc}
   10d2c:	200015f8 	.word	0x200015f8
   10d30:	00009e61 	.word	0x00009e61
   10d34:	00010c45 	.word	0x00010c45
   10d38:	20001be4 	.word	0x20001be4
   10d3c:	00010869 	.word	0x00010869

00010d40 <RADIO_TxDone>:
   10d40:	b570      	push	{r4, r5, r6, lr}
   10d42:	4b14      	ldr	r3, [pc, #80]	; (10d94 <RADIO_TxDone+0x54>)
   10d44:	332f      	adds	r3, #47	; 0x2f
   10d46:	7818      	ldrb	r0, [r3, #0]
   10d48:	4b13      	ldr	r3, [pc, #76]	; (10d98 <RADIO_TxDone+0x58>)
   10d4a:	4798      	blx	r3
   10d4c:	2001      	movs	r0, #1
   10d4e:	4b13      	ldr	r3, [pc, #76]	; (10d9c <RADIO_TxDone+0x5c>)
   10d50:	4798      	blx	r3
   10d52:	4b13      	ldr	r3, [pc, #76]	; (10da0 <RADIO_TxDone+0x60>)
   10d54:	2108      	movs	r1, #8
   10d56:	2012      	movs	r0, #18
   10d58:	4798      	blx	r3
   10d5a:	4b12      	ldr	r3, [pc, #72]	; (10da4 <RADIO_TxDone+0x64>)
   10d5c:	781a      	ldrb	r2, [r3, #0]
   10d5e:	4b12      	ldr	r3, [pc, #72]	; (10da8 <RADIO_TxDone+0x68>)
   10d60:	2a02      	cmp	r2, #2
   10d62:	d002      	beq.n	10d6a <RADIO_TxDone+0x2a>
   10d64:	881a      	ldrh	r2, [r3, #0]
   10d66:	0692      	lsls	r2, r2, #26
   10d68:	d413      	bmi.n	10d92 <RADIO_TxDone+0x52>
   10d6a:	2001      	movs	r0, #1
   10d6c:	881a      	ldrh	r2, [r3, #0]
   10d6e:	4302      	orrs	r2, r0
   10d70:	801a      	strh	r2, [r3, #0]
   10d72:	4b0e      	ldr	r3, [pc, #56]	; (10dac <RADIO_TxDone+0x6c>)
   10d74:	4798      	blx	r3
   10d76:	4b0e      	ldr	r3, [pc, #56]	; (10db0 <RADIO_TxDone+0x70>)
   10d78:	4798      	blx	r3
   10d7a:	4c0e      	ldr	r4, [pc, #56]	; (10db4 <RADIO_TxDone+0x74>)
   10d7c:	4d0e      	ldr	r5, [pc, #56]	; (10db8 <RADIO_TxDone+0x78>)
   10d7e:	6822      	ldr	r2, [r4, #0]
   10d80:	6863      	ldr	r3, [r4, #4]
   10d82:	1a80      	subs	r0, r0, r2
   10d84:	4199      	sbcs	r1, r3
   10d86:	22fa      	movs	r2, #250	; 0xfa
   10d88:	2300      	movs	r3, #0
   10d8a:	0092      	lsls	r2, r2, #2
   10d8c:	47a8      	blx	r5
   10d8e:	6020      	str	r0, [r4, #0]
   10d90:	6061      	str	r1, [r4, #4]
   10d92:	bd70      	pop	{r4, r5, r6, pc}
   10d94:	200015f8 	.word	0x200015f8
   10d98:	00009e61 	.word	0x00009e61
   10d9c:	00010c45 	.word	0x00010c45
   10da0:	00003ffd 	.word	0x00003ffd
   10da4:	20001be7 	.word	0x20001be7
   10da8:	20001be4 	.word	0x20001be4
   10dac:	00010869 	.word	0x00010869
   10db0:	00009afd 	.word	0x00009afd
   10db4:	20000ed0 	.word	0x20000ed0
   10db8:	00011d69 	.word	0x00011d69

00010dbc <RADIO_FSKPacketSent>:
   10dbc:	b570      	push	{r4, r5, r6, lr}
   10dbe:	4b15      	ldr	r3, [pc, #84]	; (10e14 <RADIO_FSKPacketSent+0x58>)
   10dc0:	203f      	movs	r0, #63	; 0x3f
   10dc2:	4798      	blx	r3
   10dc4:	0703      	lsls	r3, r0, #28
   10dc6:	d524      	bpl.n	10e12 <RADIO_FSKPacketSent+0x56>
   10dc8:	4b13      	ldr	r3, [pc, #76]	; (10e18 <RADIO_FSKPacketSent+0x5c>)
   10dca:	332f      	adds	r3, #47	; 0x2f
   10dcc:	7818      	ldrb	r0, [r3, #0]
   10dce:	4b13      	ldr	r3, [pc, #76]	; (10e1c <RADIO_FSKPacketSent+0x60>)
   10dd0:	4798      	blx	r3
   10dd2:	4b13      	ldr	r3, [pc, #76]	; (10e20 <RADIO_FSKPacketSent+0x64>)
   10dd4:	2001      	movs	r0, #1
   10dd6:	4798      	blx	r3
   10dd8:	4b12      	ldr	r3, [pc, #72]	; (10e24 <RADIO_FSKPacketSent+0x68>)
   10dda:	4c13      	ldr	r4, [pc, #76]	; (10e28 <RADIO_FSKPacketSent+0x6c>)
   10ddc:	781b      	ldrb	r3, [r3, #0]
   10dde:	2b02      	cmp	r3, #2
   10de0:	d002      	beq.n	10de8 <RADIO_FSKPacketSent+0x2c>
   10de2:	8823      	ldrh	r3, [r4, #0]
   10de4:	069b      	lsls	r3, r3, #26
   10de6:	d414      	bmi.n	10e12 <RADIO_FSKPacketSent+0x56>
   10de8:	4b10      	ldr	r3, [pc, #64]	; (10e2c <RADIO_FSKPacketSent+0x70>)
   10dea:	4798      	blx	r3
   10dec:	4d10      	ldr	r5, [pc, #64]	; (10e30 <RADIO_FSKPacketSent+0x74>)
   10dee:	4e11      	ldr	r6, [pc, #68]	; (10e34 <RADIO_FSKPacketSent+0x78>)
   10df0:	682a      	ldr	r2, [r5, #0]
   10df2:	686b      	ldr	r3, [r5, #4]
   10df4:	1a80      	subs	r0, r0, r2
   10df6:	4199      	sbcs	r1, r3
   10df8:	22fa      	movs	r2, #250	; 0xfa
   10dfa:	2300      	movs	r3, #0
   10dfc:	0092      	lsls	r2, r2, #2
   10dfe:	47b0      	blx	r6
   10e00:	4b0d      	ldr	r3, [pc, #52]	; (10e38 <RADIO_FSKPacketSent+0x7c>)
   10e02:	6028      	str	r0, [r5, #0]
   10e04:	6069      	str	r1, [r5, #4]
   10e06:	2001      	movs	r0, #1
   10e08:	4798      	blx	r3
   10e0a:	2304      	movs	r3, #4
   10e0c:	8822      	ldrh	r2, [r4, #0]
   10e0e:	4313      	orrs	r3, r2
   10e10:	8023      	strh	r3, [r4, #0]
   10e12:	bd70      	pop	{r4, r5, r6, pc}
   10e14:	00004025 	.word	0x00004025
   10e18:	200015f8 	.word	0x200015f8
   10e1c:	00009e61 	.word	0x00009e61
   10e20:	00010c45 	.word	0x00010c45
   10e24:	20001be7 	.word	0x20001be7
   10e28:	20001be4 	.word	0x20001be4
   10e2c:	00009afd 	.word	0x00009afd
   10e30:	20000ed0 	.word	0x20000ed0
   10e34:	00011d69 	.word	0x00011d69
   10e38:	00010869 	.word	0x00010869

00010e3c <RADIO_RxDone>:
   10e3c:	b570      	push	{r4, r5, r6, lr}
   10e3e:	2012      	movs	r0, #18
   10e40:	4e16      	ldr	r6, [pc, #88]	; (10e9c <RADIO_RxDone+0x60>)
   10e42:	47b0      	blx	r6
   10e44:	4b16      	ldr	r3, [pc, #88]	; (10ea0 <RADIO_RxDone+0x64>)
   10e46:	0005      	movs	r5, r0
   10e48:	2170      	movs	r1, #112	; 0x70
   10e4a:	2012      	movs	r0, #18
   10e4c:	4798      	blx	r3
   10e4e:	2350      	movs	r3, #80	; 0x50
   10e50:	402b      	ands	r3, r5
   10e52:	2b50      	cmp	r3, #80	; 0x50
   10e54:	d119      	bne.n	10e8a <RADIO_RxDone+0x4e>
   10e56:	4c13      	ldr	r4, [pc, #76]	; (10ea4 <RADIO_RxDone+0x68>)
   10e58:	0023      	movs	r3, r4
   10e5a:	332f      	adds	r3, #47	; 0x2f
   10e5c:	7818      	ldrb	r0, [r3, #0]
   10e5e:	4b12      	ldr	r3, [pc, #72]	; (10ea8 <RADIO_RxDone+0x6c>)
   10e60:	4798      	blx	r3
   10e62:	4b12      	ldr	r3, [pc, #72]	; (10eac <RADIO_RxDone+0x70>)
   10e64:	2000      	movs	r0, #0
   10e66:	4798      	blx	r3
   10e68:	3404      	adds	r4, #4
   10e6a:	201c      	movs	r0, #28
   10e6c:	47b0      	blx	r6
   10e6e:	7fe2      	ldrb	r2, [r4, #31]
   10e70:	4b0f      	ldr	r3, [pc, #60]	; (10eb0 <RADIO_RxDone+0x74>)
   10e72:	4910      	ldr	r1, [pc, #64]	; (10eb4 <RADIO_RxDone+0x78>)
   10e74:	2a00      	cmp	r2, #0
   10e76:	d003      	beq.n	10e80 <RADIO_RxDone+0x44>
   10e78:	06aa      	lsls	r2, r5, #26
   10e7a:	d407      	bmi.n	10e8c <RADIO_RxDone+0x50>
   10e7c:	0642      	lsls	r2, r0, #25
   10e7e:	d505      	bpl.n	10e8c <RADIO_RxDone+0x50>
   10e80:	2002      	movs	r0, #2
   10e82:	881a      	ldrh	r2, [r3, #0]
   10e84:	4302      	orrs	r2, r0
   10e86:	801a      	strh	r2, [r3, #0]
   10e88:	4788      	blx	r1
   10e8a:	bd70      	pop	{r4, r5, r6, pc}
   10e8c:	2280      	movs	r2, #128	; 0x80
   10e8e:	8818      	ldrh	r0, [r3, #0]
   10e90:	0052      	lsls	r2, r2, #1
   10e92:	4302      	orrs	r2, r0
   10e94:	801a      	strh	r2, [r3, #0]
   10e96:	2002      	movs	r0, #2
   10e98:	e7f6      	b.n	10e88 <RADIO_RxDone+0x4c>
   10e9a:	46c0      	nop			; (mov r8, r8)
   10e9c:	00004025 	.word	0x00004025
   10ea0:	00003ffd 	.word	0x00003ffd
   10ea4:	200015f8 	.word	0x200015f8
   10ea8:	00009e61 	.word	0x00009e61
   10eac:	00010c45 	.word	0x00010c45
   10eb0:	20001be4 	.word	0x20001be4
   10eb4:	00010869 	.word	0x00010869

00010eb8 <RADIO_FSKPayloadReady>:
   10eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10eba:	203f      	movs	r0, #63	; 0x3f
   10ebc:	4b39      	ldr	r3, [pc, #228]	; (10fa4 <RADIO_FSKPayloadReady+0xec>)
   10ebe:	4798      	blx	r3
   10ec0:	0743      	lsls	r3, r0, #29
   10ec2:	d559      	bpl.n	10f78 <RADIO_FSKPayloadReady+0xc0>
   10ec4:	4c38      	ldr	r4, [pc, #224]	; (10fa8 <RADIO_FSKPayloadReady+0xf0>)
   10ec6:	4d39      	ldr	r5, [pc, #228]	; (10fac <RADIO_FSKPayloadReady+0xf4>)
   10ec8:	1d23      	adds	r3, r4, #4
   10eca:	7fdb      	ldrb	r3, [r3, #31]
   10ecc:	2b01      	cmp	r3, #1
   10ece:	d154      	bne.n	10f7a <RADIO_FSKPayloadReady+0xc2>
   10ed0:	2202      	movs	r2, #2
   10ed2:	4210      	tst	r0, r2
   10ed4:	d048      	beq.n	10f68 <RADIO_FSKPayloadReady+0xb0>
   10ed6:	0023      	movs	r3, r4
   10ed8:	332f      	adds	r3, #47	; 0x2f
   10eda:	7818      	ldrb	r0, [r3, #0]
   10edc:	4e34      	ldr	r6, [pc, #208]	; (10fb0 <RADIO_FSKPayloadReady+0xf8>)
   10ede:	47b0      	blx	r6
   10ee0:	0023      	movs	r3, r4
   10ee2:	332e      	adds	r3, #46	; 0x2e
   10ee4:	7818      	ldrb	r0, [r3, #0]
   10ee6:	47b0      	blx	r6
   10ee8:	4b32      	ldr	r3, [pc, #200]	; (10fb4 <RADIO_FSKPayloadReady+0xfc>)
   10eea:	4798      	blx	r3
   10eec:	0022      	movs	r2, r4
   10eee:	0023      	movs	r3, r4
   10ef0:	322c      	adds	r2, #44	; 0x2c
   10ef2:	3358      	adds	r3, #88	; 0x58
   10ef4:	7810      	ldrb	r0, [r2, #0]
   10ef6:	7819      	ldrb	r1, [r3, #0]
   10ef8:	4288      	cmp	r0, r1
   10efa:	d105      	bne.n	10f08 <RADIO_FSKPayloadReady+0x50>
   10efc:	7812      	ldrb	r2, [r2, #0]
   10efe:	2a00      	cmp	r2, #0
   10f00:	d002      	beq.n	10f08 <RADIO_FSKPayloadReady+0x50>
   10f02:	781b      	ldrb	r3, [r3, #0]
   10f04:	2b00      	cmp	r3, #0
   10f06:	d118      	bne.n	10f3a <RADIO_FSKPayloadReady+0x82>
   10f08:	0021      	movs	r1, r4
   10f0a:	312c      	adds	r1, #44	; 0x2c
   10f0c:	7808      	ldrb	r0, [r1, #0]
   10f0e:	b2c0      	uxtb	r0, r0
   10f10:	2800      	cmp	r0, #0
   10f12:	d102      	bne.n	10f1a <RADIO_FSKPayloadReady+0x62>
   10f14:	2201      	movs	r2, #1
   10f16:	4b28      	ldr	r3, [pc, #160]	; (10fb8 <RADIO_FSKPayloadReady+0x100>)
   10f18:	4798      	blx	r3
   10f1a:	0026      	movs	r6, r4
   10f1c:	0027      	movs	r7, r4
   10f1e:	3658      	adds	r6, #88	; 0x58
   10f20:	7830      	ldrb	r0, [r6, #0]
   10f22:	372c      	adds	r7, #44	; 0x2c
   10f24:	b2c0      	uxtb	r0, r0
   10f26:	2800      	cmp	r0, #0
   10f28:	d110      	bne.n	10f4c <RADIO_FSKPayloadReady+0x94>
   10f2a:	783a      	ldrb	r2, [r7, #0]
   10f2c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   10f2e:	b2d2      	uxtb	r2, r2
   10f30:	4b21      	ldr	r3, [pc, #132]	; (10fb8 <RADIO_FSKPayloadReady+0x100>)
   10f32:	4798      	blx	r3
   10f34:	783b      	ldrb	r3, [r7, #0]
   10f36:	b2db      	uxtb	r3, r3
   10f38:	7033      	strb	r3, [r6, #0]
   10f3a:	4b20      	ldr	r3, [pc, #128]	; (10fbc <RADIO_FSKPayloadReady+0x104>)
   10f3c:	4798      	blx	r3
   10f3e:	4b20      	ldr	r3, [pc, #128]	; (10fc0 <RADIO_FSKPayloadReady+0x108>)
   10f40:	2000      	movs	r0, #0
   10f42:	4798      	blx	r3
   10f44:	2308      	movs	r3, #8
   10f46:	882a      	ldrh	r2, [r5, #0]
   10f48:	4313      	orrs	r3, r2
   10f4a:	e011      	b.n	10f70 <RADIO_FSKPayloadReady+0xb8>
   10f4c:	783b      	ldrb	r3, [r7, #0]
   10f4e:	7832      	ldrb	r2, [r6, #0]
   10f50:	1a9b      	subs	r3, r3, r2
   10f52:	2b00      	cmp	r3, #0
   10f54:	ddf1      	ble.n	10f3a <RADIO_FSKPayloadReady+0x82>
   10f56:	7833      	ldrb	r3, [r6, #0]
   10f58:	783a      	ldrb	r2, [r7, #0]
   10f5a:	7831      	ldrb	r1, [r6, #0]
   10f5c:	2000      	movs	r0, #0
   10f5e:	1a52      	subs	r2, r2, r1
   10f60:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   10f62:	b2d2      	uxtb	r2, r2
   10f64:	18c9      	adds	r1, r1, r3
   10f66:	e7e3      	b.n	10f30 <RADIO_FSKPayloadReady+0x78>
   10f68:	2380      	movs	r3, #128	; 0x80
   10f6a:	8829      	ldrh	r1, [r5, #0]
   10f6c:	005b      	lsls	r3, r3, #1
   10f6e:	430b      	orrs	r3, r1
   10f70:	802b      	strh	r3, [r5, #0]
   10f72:	2002      	movs	r0, #2
   10f74:	4b13      	ldr	r3, [pc, #76]	; (10fc4 <RADIO_FSKPayloadReady+0x10c>)
   10f76:	4798      	blx	r3
   10f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10f7a:	0023      	movs	r3, r4
   10f7c:	332f      	adds	r3, #47	; 0x2f
   10f7e:	4e0c      	ldr	r6, [pc, #48]	; (10fb0 <RADIO_FSKPayloadReady+0xf8>)
   10f80:	7818      	ldrb	r0, [r3, #0]
   10f82:	47b0      	blx	r6
   10f84:	0023      	movs	r3, r4
   10f86:	332e      	adds	r3, #46	; 0x2e
   10f88:	7818      	ldrb	r0, [r3, #0]
   10f8a:	47b0      	blx	r6
   10f8c:	4e0e      	ldr	r6, [pc, #56]	; (10fc8 <RADIO_FSKPayloadReady+0x110>)
   10f8e:	2201      	movs	r2, #1
   10f90:	0031      	movs	r1, r6
   10f92:	2000      	movs	r0, #0
   10f94:	4f08      	ldr	r7, [pc, #32]	; (10fb8 <RADIO_FSKPayloadReady+0x100>)
   10f96:	47b8      	blx	r7
   10f98:	7832      	ldrb	r2, [r6, #0]
   10f9a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   10f9c:	b2d2      	uxtb	r2, r2
   10f9e:	2000      	movs	r0, #0
   10fa0:	47b8      	blx	r7
   10fa2:	e7cc      	b.n	10f3e <RADIO_FSKPayloadReady+0x86>
   10fa4:	00004025 	.word	0x00004025
   10fa8:	200015f8 	.word	0x200015f8
   10fac:	20001be4 	.word	0x20001be4
   10fb0:	00009e61 	.word	0x00009e61
   10fb4:	00000661 	.word	0x00000661
   10fb8:	00004091 	.word	0x00004091
   10fbc:	000006a1 	.word	0x000006a1
   10fc0:	00010c45 	.word	0x00010c45
   10fc4:	00010869 	.word	0x00010869
   10fc8:	20001624 	.word	0x20001624

00010fcc <Radio_SetClockInput>:
   10fcc:	b510      	push	{r4, lr}
   10fce:	4b08      	ldr	r3, [pc, #32]	; (10ff0 <Radio_SetClockInput+0x24>)
   10fd0:	3355      	adds	r3, #85	; 0x55
   10fd2:	781b      	ldrb	r3, [r3, #0]
   10fd4:	2b00      	cmp	r3, #0
   10fd6:	d10a      	bne.n	10fee <Radio_SetClockInput+0x22>
   10fd8:	4b06      	ldr	r3, [pc, #24]	; (10ff4 <Radio_SetClockInput+0x28>)
   10fda:	204b      	movs	r0, #75	; 0x4b
   10fdc:	4798      	blx	r3
   10fde:	2110      	movs	r1, #16
   10fe0:	4301      	orrs	r1, r0
   10fe2:	4b05      	ldr	r3, [pc, #20]	; (10ff8 <Radio_SetClockInput+0x2c>)
   10fe4:	b2c9      	uxtb	r1, r1
   10fe6:	204b      	movs	r0, #75	; 0x4b
   10fe8:	4798      	blx	r3
   10fea:	4b04      	ldr	r3, [pc, #16]	; (10ffc <Radio_SetClockInput+0x30>)
   10fec:	4798      	blx	r3
   10fee:	bd10      	pop	{r4, pc}
   10ff0:	200015f8 	.word	0x200015f8
   10ff4:	00004025 	.word	0x00004025
   10ff8:	00003ffd 	.word	0x00003ffd
   10ffc:	00004145 	.word	0x00004145

00011000 <Radio_ResetClockInput>:
   11000:	b510      	push	{r4, lr}
   11002:	4b04      	ldr	r3, [pc, #16]	; (11014 <Radio_ResetClockInput+0x14>)
   11004:	3355      	adds	r3, #85	; 0x55
   11006:	781b      	ldrb	r3, [r3, #0]
   11008:	2b00      	cmp	r3, #0
   1100a:	d101      	bne.n	11010 <Radio_ResetClockInput+0x10>
   1100c:	4b02      	ldr	r3, [pc, #8]	; (11018 <Radio_ResetClockInput+0x18>)
   1100e:	4798      	blx	r3
   11010:	bd10      	pop	{r4, pc}
   11012:	46c0      	nop			; (mov r8, r8)
   11014:	200015f8 	.word	0x200015f8
   11018:	00004161 	.word	0x00004161

0001101c <RADIO_InitDefaultAttributes>:
   1101c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1101e:	2501      	movs	r5, #1
   11020:	4b64      	ldr	r3, [pc, #400]	; (111b4 <RADIO_InitDefaultAttributes+0x198>)
   11022:	4c65      	ldr	r4, [pc, #404]	; (111b8 <RADIO_InitDefaultAttributes+0x19c>)
   11024:	701d      	strb	r5, [r3, #0]
   11026:	4b65      	ldr	r3, [pc, #404]	; (111bc <RADIO_InitDefaultAttributes+0x1a0>)
   11028:	2207      	movs	r2, #7
   1102a:	6023      	str	r3, [r4, #0]
   1102c:	4b64      	ldr	r3, [pc, #400]	; (111c0 <RADIO_InitDefaultAttributes+0x1a4>)
   1102e:	18a1      	adds	r1, r4, r2
   11030:	6063      	str	r3, [r4, #4]
   11032:	4b64      	ldr	r3, [pc, #400]	; (111c4 <RADIO_InitDefaultAttributes+0x1a8>)
   11034:	0027      	movs	r7, r4
   11036:	60a3      	str	r3, [r4, #8]
   11038:	0023      	movs	r3, r4
   1103a:	3334      	adds	r3, #52	; 0x34
   1103c:	701d      	strb	r5, [r3, #0]
   1103e:	0023      	movs	r3, r4
   11040:	3336      	adds	r3, #54	; 0x36
   11042:	701a      	strb	r2, [r3, #0]
   11044:	1ce3      	adds	r3, r4, #3
   11046:	77dd      	strb	r5, [r3, #31]
   11048:	0023      	movs	r3, r4
   1104a:	3333      	adds	r3, #51	; 0x33
   1104c:	701d      	strb	r5, [r3, #0]
   1104e:	2300      	movs	r3, #0
   11050:	77cb      	strb	r3, [r1, #31]
   11052:	2108      	movs	r1, #8
   11054:	82a1      	strh	r1, [r4, #20]
   11056:	0021      	movs	r1, r4
   11058:	3135      	adds	r1, #53	; 0x35
   1105a:	700a      	strb	r2, [r1, #0]
   1105c:	1d22      	adds	r2, r4, #4
   1105e:	77d5      	strb	r5, [r2, #31]
   11060:	1d62      	adds	r2, r4, #5
   11062:	77d3      	strb	r3, [r2, #31]
   11064:	1da2      	adds	r2, r4, #6
   11066:	77d3      	strb	r3, [r2, #31]
   11068:	2194      	movs	r1, #148	; 0x94
   1106a:	22c1      	movs	r2, #193	; 0xc1
   1106c:	76a1      	strb	r1, [r4, #26]
   1106e:	7662      	strb	r2, [r4, #25]
   11070:	76e2      	strb	r2, [r4, #27]
   11072:	3991      	subs	r1, #145	; 0x91
   11074:	1ca2      	adds	r2, r4, #2
   11076:	77d1      	strb	r1, [r2, #31]
   11078:	2234      	movs	r2, #52	; 0x34
   1107a:	7622      	strb	r2, [r4, #24]
   1107c:	0022      	movs	r2, r4
   1107e:	317d      	adds	r1, #125	; 0x7d
   11080:	3232      	adds	r2, #50	; 0x32
   11082:	7011      	strb	r1, [r2, #0]
   11084:	4a50      	ldr	r2, [pc, #320]	; (111c8 <RADIO_InitDefaultAttributes+0x1ac>)
   11086:	397e      	subs	r1, #126	; 0x7e
   11088:	60e2      	str	r2, [r4, #12]
   1108a:	0022      	movs	r2, r4
   1108c:	3237      	adds	r2, #55	; 0x37
   1108e:	7011      	strb	r1, [r2, #0]
   11090:	0022      	movs	r2, r4
   11092:	3109      	adds	r1, #9
   11094:	3238      	adds	r2, #56	; 0x38
   11096:	7011      	strb	r1, [r2, #0]
   11098:	0022      	movs	r2, r4
   1109a:	3107      	adds	r1, #7
   1109c:	3239      	adds	r2, #57	; 0x39
   1109e:	7011      	strb	r1, [r2, #0]
   110a0:	0022      	movs	r2, r4
   110a2:	322c      	adds	r2, #44	; 0x2c
   110a4:	7013      	strb	r3, [r2, #0]
   110a6:	4a49      	ldr	r2, [pc, #292]	; (111cc <RADIO_InitDefaultAttributes+0x1b0>)
   110a8:	82e3      	strh	r3, [r4, #22]
   110aa:	62a2      	str	r2, [r4, #40]	; 0x28
   110ac:	0022      	movs	r2, r4
   110ae:	324c      	adds	r2, #76	; 0x4c
   110b0:	8013      	strh	r3, [r2, #0]
   110b2:	0022      	movs	r2, r4
   110b4:	324e      	adds	r2, #78	; 0x4e
   110b6:	7013      	strb	r3, [r2, #0]
   110b8:	0022      	movs	r2, r4
   110ba:	324f      	adds	r2, #79	; 0x4f
   110bc:	7013      	strb	r3, [r2, #0]
   110be:	0022      	movs	r2, r4
   110c0:	3240      	adds	r2, #64	; 0x40
   110c2:	7013      	strb	r3, [r2, #0]
   110c4:	0022      	movs	r2, r4
   110c6:	3241      	adds	r2, #65	; 0x41
   110c8:	7013      	strb	r3, [r2, #0]
   110ca:	0022      	movs	r2, r4
   110cc:	3254      	adds	r2, #84	; 0x54
   110ce:	7013      	strb	r3, [r2, #0]
   110d0:	0022      	movs	r2, r4
   110d2:	3255      	adds	r2, #85	; 0x55
   110d4:	7015      	strb	r5, [r2, #0]
   110d6:	0022      	movs	r2, r4
   110d8:	3258      	adds	r2, #88	; 0x58
   110da:	6463      	str	r3, [r4, #68]	; 0x44
   110dc:	64a3      	str	r3, [r4, #72]	; 0x48
   110de:	87a3      	strh	r3, [r4, #60]	; 0x3c
   110e0:	87e3      	strh	r3, [r4, #62]	; 0x3e
   110e2:	7013      	strb	r3, [r2, #0]
   110e4:	3730      	adds	r7, #48	; 0x30
   110e6:	783b      	ldrb	r3, [r7, #0]
   110e8:	2b00      	cmp	r3, #0
   110ea:	d151      	bne.n	11190 <RADIO_InitDefaultAttributes+0x174>
   110ec:	4838      	ldr	r0, [pc, #224]	; (111d0 <RADIO_InitDefaultAttributes+0x1b4>)
   110ee:	4e39      	ldr	r6, [pc, #228]	; (111d4 <RADIO_InitDefaultAttributes+0x1b8>)
   110f0:	47b0      	blx	r6
   110f2:	2808      	cmp	r0, #8
   110f4:	d149      	bne.n	1118a <RADIO_InitDefaultAttributes+0x16e>
   110f6:	4838      	ldr	r0, [pc, #224]	; (111d8 <RADIO_InitDefaultAttributes+0x1bc>)
   110f8:	47b0      	blx	r6
   110fa:	2808      	cmp	r0, #8
   110fc:	d145      	bne.n	1118a <RADIO_InitDefaultAttributes+0x16e>
   110fe:	4837      	ldr	r0, [pc, #220]	; (111dc <RADIO_InitDefaultAttributes+0x1c0>)
   11100:	47b0      	blx	r6
   11102:	2808      	cmp	r0, #8
   11104:	d141      	bne.n	1118a <RADIO_InitDefaultAttributes+0x16e>
   11106:	4836      	ldr	r0, [pc, #216]	; (111e0 <RADIO_InitDefaultAttributes+0x1c4>)
   11108:	47b0      	blx	r6
   1110a:	2808      	cmp	r0, #8
   1110c:	d13d      	bne.n	1118a <RADIO_InitDefaultAttributes+0x16e>
   1110e:	703d      	strb	r5, [r7, #0]
   11110:	4b34      	ldr	r3, [pc, #208]	; (111e4 <RADIO_InitDefaultAttributes+0x1c8>)
   11112:	4798      	blx	r3
   11114:	4b34      	ldr	r3, [pc, #208]	; (111e8 <RADIO_InitDefaultAttributes+0x1cc>)
   11116:	4798      	blx	r3
   11118:	2800      	cmp	r0, #0
   1111a:	d107      	bne.n	1112c <RADIO_InitDefaultAttributes+0x110>
   1111c:	0023      	movs	r3, r4
   1111e:	3355      	adds	r3, #85	; 0x55
   11120:	7018      	strb	r0, [r3, #0]
   11122:	4b32      	ldr	r3, [pc, #200]	; (111ec <RADIO_InitDefaultAttributes+0x1d0>)
   11124:	4798      	blx	r3
   11126:	0023      	movs	r3, r4
   11128:	3354      	adds	r3, #84	; 0x54
   1112a:	7018      	strb	r0, [r3, #0]
   1112c:	4b30      	ldr	r3, [pc, #192]	; (111f0 <RADIO_InitDefaultAttributes+0x1d4>)
   1112e:	4798      	blx	r3
   11130:	2201      	movs	r2, #1
   11132:	2100      	movs	r1, #0
   11134:	0010      	movs	r0, r2
   11136:	4f2f      	ldr	r7, [pc, #188]	; (111f4 <RADIO_InitDefaultAttributes+0x1d8>)
   11138:	47b8      	blx	r7
   1113a:	6820      	ldr	r0, [r4, #0]
   1113c:	4b2e      	ldr	r3, [pc, #184]	; (111f8 <RADIO_InitDefaultAttributes+0x1dc>)
   1113e:	4798      	blx	r3
   11140:	2142      	movs	r1, #66	; 0x42
   11142:	203b      	movs	r0, #59	; 0x3b
   11144:	4d2d      	ldr	r5, [pc, #180]	; (111fc <RADIO_InitDefaultAttributes+0x1e0>)
   11146:	47a8      	blx	r5
   11148:	203b      	movs	r0, #59	; 0x3b
   1114a:	4b2d      	ldr	r3, [pc, #180]	; (11200 <RADIO_InitDefaultAttributes+0x1e4>)
   1114c:	4798      	blx	r3
   1114e:	2620      	movs	r6, #32
   11150:	4006      	ands	r6, r0
   11152:	d1f9      	bne.n	11148 <RADIO_InitDefaultAttributes+0x12c>
   11154:	2123      	movs	r1, #35	; 0x23
   11156:	200c      	movs	r0, #12
   11158:	47a8      	blx	r5
   1115a:	21aa      	movs	r1, #170	; 0xaa
   1115c:	201f      	movs	r0, #31
   1115e:	47a8      	blx	r5
   11160:	21ff      	movs	r1, #255	; 0xff
   11162:	2032      	movs	r0, #50	; 0x32
   11164:	47a8      	blx	r5
   11166:	2140      	movs	r1, #64	; 0x40
   11168:	2031      	movs	r0, #49	; 0x31
   1116a:	47a8      	blx	r5
   1116c:	2201      	movs	r2, #1
   1116e:	0030      	movs	r0, r6
   11170:	0011      	movs	r1, r2
   11172:	47b8      	blx	r7
   11174:	21ff      	movs	r1, #255	; 0xff
   11176:	2023      	movs	r0, #35	; 0x23
   11178:	47a8      	blx	r5
   1117a:	4b21      	ldr	r3, [pc, #132]	; (11200 <RADIO_InitDefaultAttributes+0x1e4>)
   1117c:	2042      	movs	r0, #66	; 0x42
   1117e:	4798      	blx	r3
   11180:	3431      	adds	r4, #49	; 0x31
   11182:	4b20      	ldr	r3, [pc, #128]	; (11204 <RADIO_InitDefaultAttributes+0x1e8>)
   11184:	7020      	strb	r0, [r4, #0]
   11186:	4798      	blx	r3
   11188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1118a:	4b1f      	ldr	r3, [pc, #124]	; (11208 <RADIO_InitDefaultAttributes+0x1ec>)
   1118c:	4798      	blx	r3
   1118e:	e7bf      	b.n	11110 <RADIO_InitDefaultAttributes+0xf4>
   11190:	0023      	movs	r3, r4
   11192:	332d      	adds	r3, #45	; 0x2d
   11194:	4d1d      	ldr	r5, [pc, #116]	; (1120c <RADIO_InitDefaultAttributes+0x1f0>)
   11196:	7818      	ldrb	r0, [r3, #0]
   11198:	47a8      	blx	r5
   1119a:	0023      	movs	r3, r4
   1119c:	332e      	adds	r3, #46	; 0x2e
   1119e:	7818      	ldrb	r0, [r3, #0]
   111a0:	47a8      	blx	r5
   111a2:	0023      	movs	r3, r4
   111a4:	332f      	adds	r3, #47	; 0x2f
   111a6:	7818      	ldrb	r0, [r3, #0]
   111a8:	47a8      	blx	r5
   111aa:	0023      	movs	r3, r4
   111ac:	3350      	adds	r3, #80	; 0x50
   111ae:	7818      	ldrb	r0, [r3, #0]
   111b0:	47a8      	blx	r5
   111b2:	e7ad      	b.n	11110 <RADIO_InitDefaultAttributes+0xf4>
   111b4:	20001be7 	.word	0x20001be7
   111b8:	200015f8 	.word	0x200015f8
   111bc:	33be27a0 	.word	0x33be27a0
   111c0:	000061a8 	.word	0x000061a8
   111c4:	0000c350 	.word	0x0000c350
   111c8:	00003a98 	.word	0x00003a98
   111cc:	20001ae4 	.word	0x20001ae4
   111d0:	20001625 	.word	0x20001625
   111d4:	00009b21 	.word	0x00009b21
   111d8:	20001626 	.word	0x20001626
   111dc:	20001627 	.word	0x20001627
   111e0:	20001648 	.word	0x20001648
   111e4:	00003fbd 	.word	0x00003fbd
   111e8:	00004141 	.word	0x00004141
   111ec:	0000413d 	.word	0x0000413d
   111f0:	00010fcd 	.word	0x00010fcd
   111f4:	0000a1b9 	.word	0x0000a1b9
   111f8:	00010261 	.word	0x00010261
   111fc:	00003ffd 	.word	0x00003ffd
   11200:	00004025 	.word	0x00004025
   11204:	00011001 	.word	0x00011001
   11208:	00009a65 	.word	0x00009a65
   1120c:	00009e61 	.word	0x00009e61

00011210 <RADIO_Receive>:
   11210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11212:	7803      	ldrb	r3, [r0, #0]
   11214:	0006      	movs	r6, r0
   11216:	4d24      	ldr	r5, [pc, #144]	; (112a8 <RADIO_Receive+0x98>)
   11218:	2b00      	cmp	r3, #0
   1121a:	d11d      	bne.n	11258 <RADIO_Receive+0x48>
   1121c:	782b      	ldrb	r3, [r5, #0]
   1121e:	2004      	movs	r0, #4
   11220:	2b01      	cmp	r3, #1
   11222:	d118      	bne.n	11256 <RADIO_Receive+0x46>
   11224:	4c21      	ldr	r4, [pc, #132]	; (112ac <RADIO_Receive+0x9c>)
   11226:	4f22      	ldr	r7, [pc, #136]	; (112b0 <RADIO_Receive+0xa0>)
   11228:	0023      	movs	r3, r4
   1122a:	332f      	adds	r3, #47	; 0x2f
   1122c:	7818      	ldrb	r0, [r3, #0]
   1122e:	47b8      	blx	r7
   11230:	0023      	movs	r3, r4
   11232:	3334      	adds	r3, #52	; 0x34
   11234:	781b      	ldrb	r3, [r3, #0]
   11236:	2b00      	cmp	r3, #0
   11238:	d102      	bne.n	11240 <RADIO_Receive+0x30>
   1123a:	342e      	adds	r4, #46	; 0x2e
   1123c:	7820      	ldrb	r0, [r4, #0]
   1123e:	47b8      	blx	r7
   11240:	8872      	ldrh	r2, [r6, #2]
   11242:	4b1c      	ldr	r3, [pc, #112]	; (112b4 <RADIO_Receive+0xa4>)
   11244:	2008      	movs	r0, #8
   11246:	801a      	strh	r2, [r3, #0]
   11248:	2304      	movs	r3, #4
   1124a:	702b      	strb	r3, [r5, #0]
   1124c:	4b1a      	ldr	r3, [pc, #104]	; (112b8 <RADIO_Receive+0xa8>)
   1124e:	4798      	blx	r3
   11250:	4b1a      	ldr	r3, [pc, #104]	; (112bc <RADIO_Receive+0xac>)
   11252:	4798      	blx	r3
   11254:	2000      	movs	r0, #0
   11256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11258:	782b      	ldrb	r3, [r5, #0]
   1125a:	2000      	movs	r0, #0
   1125c:	2b01      	cmp	r3, #1
   1125e:	d0fa      	beq.n	11256 <RADIO_Receive+0x46>
   11260:	782b      	ldrb	r3, [r5, #0]
   11262:	3003      	adds	r0, #3
   11264:	2b04      	cmp	r3, #4
   11266:	d1f6      	bne.n	11256 <RADIO_Receive+0x46>
   11268:	4c10      	ldr	r4, [pc, #64]	; (112ac <RADIO_Receive+0x9c>)
   1126a:	4e11      	ldr	r6, [pc, #68]	; (112b0 <RADIO_Receive+0xa0>)
   1126c:	0023      	movs	r3, r4
   1126e:	332f      	adds	r3, #47	; 0x2f
   11270:	7818      	ldrb	r0, [r3, #0]
   11272:	47b0      	blx	r6
   11274:	0023      	movs	r3, r4
   11276:	3334      	adds	r3, #52	; 0x34
   11278:	781b      	ldrb	r3, [r3, #0]
   1127a:	2b00      	cmp	r3, #0
   1127c:	d103      	bne.n	11286 <RADIO_Receive+0x76>
   1127e:	0023      	movs	r3, r4
   11280:	332e      	adds	r3, #46	; 0x2e
   11282:	7818      	ldrb	r0, [r3, #0]
   11284:	47b0      	blx	r6
   11286:	2200      	movs	r2, #0
   11288:	3434      	adds	r4, #52	; 0x34
   1128a:	7821      	ldrb	r1, [r4, #0]
   1128c:	0010      	movs	r0, r2
   1128e:	4b0c      	ldr	r3, [pc, #48]	; (112c0 <RADIO_Receive+0xb0>)
   11290:	4798      	blx	r3
   11292:	4b0c      	ldr	r3, [pc, #48]	; (112c4 <RADIO_Receive+0xb4>)
   11294:	4798      	blx	r3
   11296:	2301      	movs	r3, #1
   11298:	2008      	movs	r0, #8
   1129a:	4c0b      	ldr	r4, [pc, #44]	; (112c8 <RADIO_Receive+0xb8>)
   1129c:	702b      	strb	r3, [r5, #0]
   1129e:	47a0      	blx	r4
   112a0:	2002      	movs	r0, #2
   112a2:	47a0      	blx	r4
   112a4:	e7d6      	b.n	11254 <RADIO_Receive+0x44>
   112a6:	46c0      	nop			; (mov r8, r8)
   112a8:	20001be7 	.word	0x20001be7
   112ac:	200015f8 	.word	0x200015f8
   112b0:	00009e61 	.word	0x00009e61
   112b4:	20000ec8 	.word	0x20000ec8
   112b8:	00010869 	.word	0x00010869
   112bc:	00010fcd 	.word	0x00010fcd
   112c0:	0000a1b9 	.word	0x0000a1b9
   112c4:	00011001 	.word	0x00011001
   112c8:	00010895 	.word	0x00010895

000112cc <RADIO_TxHandler>:
   112cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   112ce:	4c5d      	ldr	r4, [pc, #372]	; (11444 <RADIO_TxHandler+0x178>)
   112d0:	b087      	sub	sp, #28
   112d2:	47a0      	blx	r4
   112d4:	4d5c      	ldr	r5, [pc, #368]	; (11448 <RADIO_TxHandler+0x17c>)
   112d6:	002b      	movs	r3, r5
   112d8:	332d      	adds	r3, #45	; 0x2d
   112da:	7818      	ldrb	r0, [r3, #0]
   112dc:	4b5b      	ldr	r3, [pc, #364]	; (1144c <RADIO_TxHandler+0x180>)
   112de:	4798      	blx	r3
   112e0:	002b      	movs	r3, r5
   112e2:	3341      	adds	r3, #65	; 0x41
   112e4:	781b      	ldrb	r3, [r3, #0]
   112e6:	2b00      	cmp	r3, #0
   112e8:	d035      	beq.n	11356 <RADIO_TxHandler+0x8a>
   112ea:	8faf      	ldrh	r7, [r5, #60]	; 0x3c
   112ec:	47a0      	blx	r4
   112ee:	2000      	movs	r0, #0
   112f0:	4b57      	ldr	r3, [pc, #348]	; (11450 <RADIO_TxHandler+0x184>)
   112f2:	4798      	blx	r3
   112f4:	6828      	ldr	r0, [r5, #0]
   112f6:	4b57      	ldr	r3, [pc, #348]	; (11454 <RADIO_TxHandler+0x188>)
   112f8:	4798      	blx	r3
   112fa:	2400      	movs	r4, #0
   112fc:	002b      	movs	r3, r5
   112fe:	2201      	movs	r2, #1
   11300:	334c      	adds	r3, #76	; 0x4c
   11302:	0021      	movs	r1, r4
   11304:	0020      	movs	r0, r4
   11306:	4e54      	ldr	r6, [pc, #336]	; (11458 <RADIO_TxHandler+0x18c>)
   11308:	801c      	strh	r4, [r3, #0]
   1130a:	47b0      	blx	r6
   1130c:	4b53      	ldr	r3, [pc, #332]	; (1145c <RADIO_TxHandler+0x190>)
   1130e:	2109      	movs	r1, #9
   11310:	2012      	movs	r0, #18
   11312:	4798      	blx	r3
   11314:	2201      	movs	r2, #1
   11316:	0021      	movs	r1, r4
   11318:	2005      	movs	r0, #5
   1131a:	47b0      	blx	r6
   1131c:	4b50      	ldr	r3, [pc, #320]	; (11460 <RADIO_TxHandler+0x194>)
   1131e:	4798      	blx	r3
   11320:	22fa      	movs	r2, #250	; 0xfa
   11322:	2300      	movs	r3, #0
   11324:	0092      	lsls	r2, r2, #2
   11326:	4c4f      	ldr	r4, [pc, #316]	; (11464 <RADIO_TxHandler+0x198>)
   11328:	47a0      	blx	r4
   1132a:	4b4f      	ldr	r3, [pc, #316]	; (11468 <RADIO_TxHandler+0x19c>)
   1132c:	3701      	adds	r7, #1
   1132e:	6018      	str	r0, [r3, #0]
   11330:	6059      	str	r1, [r3, #4]
   11332:	b2bf      	uxth	r7, r7
   11334:	4b4a      	ldr	r3, [pc, #296]	; (11460 <RADIO_TxHandler+0x194>)
   11336:	4798      	blx	r3
   11338:	22fa      	movs	r2, #250	; 0xfa
   1133a:	2300      	movs	r3, #0
   1133c:	0092      	lsls	r2, r2, #2
   1133e:	4e49      	ldr	r6, [pc, #292]	; (11464 <RADIO_TxHandler+0x198>)
   11340:	47b0      	blx	r6
   11342:	4b49      	ldr	r3, [pc, #292]	; (11468 <RADIO_TxHandler+0x19c>)
   11344:	2400      	movs	r4, #0
   11346:	681a      	ldr	r2, [r3, #0]
   11348:	685b      	ldr	r3, [r3, #4]
   1134a:	1a80      	subs	r0, r0, r2
   1134c:	4199      	sbcs	r1, r3
   1134e:	428c      	cmp	r4, r1
   11350:	d101      	bne.n	11356 <RADIO_TxHandler+0x8a>
   11352:	4287      	cmp	r7, r0
   11354:	d845      	bhi.n	113e2 <RADIO_TxHandler+0x116>
   11356:	2001      	movs	r0, #1
   11358:	4b3d      	ldr	r3, [pc, #244]	; (11450 <RADIO_TxHandler+0x184>)
   1135a:	4798      	blx	r3
   1135c:	4b43      	ldr	r3, [pc, #268]	; (1146c <RADIO_TxHandler+0x1a0>)
   1135e:	2004      	movs	r0, #4
   11360:	4798      	blx	r3
   11362:	4b43      	ldr	r3, [pc, #268]	; (11470 <RADIO_TxHandler+0x1a4>)
   11364:	4c3d      	ldr	r4, [pc, #244]	; (1145c <RADIO_TxHandler+0x190>)
   11366:	781e      	ldrb	r6, [r3, #0]
   11368:	4f42      	ldr	r7, [pc, #264]	; (11474 <RADIO_TxHandler+0x1a8>)
   1136a:	2e01      	cmp	r6, #1
   1136c:	d158      	bne.n	11420 <RADIO_TxHandler+0x154>
   1136e:	7839      	ldrb	r1, [r7, #0]
   11370:	2022      	movs	r0, #34	; 0x22
   11372:	47a0      	blx	r4
   11374:	4b40      	ldr	r3, [pc, #256]	; (11478 <RADIO_TxHandler+0x1ac>)
   11376:	200a      	movs	r0, #10
   11378:	4798      	blx	r3
   1137a:	21f0      	movs	r1, #240	; 0xf0
   1137c:	4008      	ands	r0, r1
   1137e:	39e8      	subs	r1, #232	; 0xe8
   11380:	4301      	orrs	r1, r0
   11382:	200a      	movs	r0, #10
   11384:	47a0      	blx	r4
   11386:	2140      	movs	r1, #64	; 0x40
   11388:	0008      	movs	r0, r1
   1138a:	47a0      	blx	r4
   1138c:	2100      	movs	r1, #0
   1138e:	2041      	movs	r0, #65	; 0x41
   11390:	47a0      	blx	r4
   11392:	4b37      	ldr	r3, [pc, #220]	; (11470 <RADIO_TxHandler+0x1a4>)
   11394:	0032      	movs	r2, r6
   11396:	7819      	ldrb	r1, [r3, #0]
   11398:	0030      	movs	r0, r6
   1139a:	4b2f      	ldr	r3, [pc, #188]	; (11458 <RADIO_TxHandler+0x18c>)
   1139c:	4798      	blx	r3
   1139e:	4b37      	ldr	r3, [pc, #220]	; (1147c <RADIO_TxHandler+0x1b0>)
   113a0:	783a      	ldrb	r2, [r7, #0]
   113a2:	6819      	ldr	r1, [r3, #0]
   113a4:	2000      	movs	r0, #0
   113a6:	4b36      	ldr	r3, [pc, #216]	; (11480 <RADIO_TxHandler+0x1b4>)
   113a8:	4798      	blx	r3
   113aa:	002b      	movs	r3, r5
   113ac:	3334      	adds	r3, #52	; 0x34
   113ae:	7819      	ldrb	r1, [r3, #0]
   113b0:	2200      	movs	r2, #0
   113b2:	2003      	movs	r0, #3
   113b4:	4b28      	ldr	r3, [pc, #160]	; (11458 <RADIO_TxHandler+0x18c>)
   113b6:	4798      	blx	r3
   113b8:	4b29      	ldr	r3, [pc, #164]	; (11460 <RADIO_TxHandler+0x194>)
   113ba:	4798      	blx	r3
   113bc:	4b31      	ldr	r3, [pc, #196]	; (11484 <RADIO_TxHandler+0x1b8>)
   113be:	6018      	str	r0, [r3, #0]
   113c0:	6059      	str	r1, [r3, #4]
   113c2:	68eb      	ldr	r3, [r5, #12]
   113c4:	2b00      	cmp	r3, #0
   113c6:	d009      	beq.n	113dc <RADIO_TxHandler+0x110>
   113c8:	21fa      	movs	r1, #250	; 0xfa
   113ca:	2200      	movs	r2, #0
   113cc:	0089      	lsls	r1, r1, #2
   113ce:	352f      	adds	r5, #47	; 0x2f
   113d0:	4359      	muls	r1, r3
   113d2:	7828      	ldrb	r0, [r5, #0]
   113d4:	4b2c      	ldr	r3, [pc, #176]	; (11488 <RADIO_TxHandler+0x1bc>)
   113d6:	9200      	str	r2, [sp, #0]
   113d8:	4c2c      	ldr	r4, [pc, #176]	; (1148c <RADIO_TxHandler+0x1c0>)
   113da:	47a0      	blx	r4
   113dc:	2000      	movs	r0, #0
   113de:	b007      	add	sp, #28
   113e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   113e2:	4e2b      	ldr	r6, [pc, #172]	; (11490 <RADIO_TxHandler+0x1c4>)
   113e4:	4b2b      	ldr	r3, [pc, #172]	; (11494 <RADIO_TxHandler+0x1c8>)
   113e6:	0030      	movs	r0, r6
   113e8:	4798      	blx	r3
   113ea:	233e      	movs	r3, #62	; 0x3e
   113ec:	5eea      	ldrsh	r2, [r5, r3]
   113ee:	2100      	movs	r1, #0
   113f0:	5e73      	ldrsh	r3, [r6, r1]
   113f2:	429a      	cmp	r2, r3
   113f4:	da9e      	bge.n	11334 <RADIO_TxHandler+0x68>
   113f6:	0020      	movs	r0, r4
   113f8:	4b27      	ldr	r3, [pc, #156]	; (11498 <RADIO_TxHandler+0x1cc>)
   113fa:	4798      	blx	r3
   113fc:	4b27      	ldr	r3, [pc, #156]	; (1149c <RADIO_TxHandler+0x1d0>)
   113fe:	4798      	blx	r3
   11400:	2307      	movs	r3, #7
   11402:	2201      	movs	r2, #1
   11404:	a903      	add	r1, sp, #12
   11406:	700b      	strb	r3, [r1, #0]
   11408:	4b25      	ldr	r3, [pc, #148]	; (114a0 <RADIO_TxHandler+0x1d4>)
   1140a:	701a      	strb	r2, [r3, #0]
   1140c:	4b25      	ldr	r3, [pc, #148]	; (114a4 <RADIO_TxHandler+0x1d8>)
   1140e:	781b      	ldrb	r3, [r3, #0]
   11410:	079b      	lsls	r3, r3, #30
   11412:	d5a0      	bpl.n	11356 <RADIO_TxHandler+0x8a>
   11414:	692b      	ldr	r3, [r5, #16]
   11416:	2b00      	cmp	r3, #0
   11418:	d09d      	beq.n	11356 <RADIO_TxHandler+0x8a>
   1141a:	2002      	movs	r0, #2
   1141c:	4798      	blx	r3
   1141e:	e79a      	b.n	11356 <RADIO_TxHandler+0x8a>
   11420:	2100      	movs	r1, #0
   11422:	2040      	movs	r0, #64	; 0x40
   11424:	47a0      	blx	r4
   11426:	2100      	movs	r1, #0
   11428:	2041      	movs	r0, #65	; 0x41
   1142a:	47a0      	blx	r4
   1142c:	002b      	movs	r3, r5
   1142e:	2000      	movs	r0, #0
   11430:	3358      	adds	r3, #88	; 0x58
   11432:	7839      	ldrb	r1, [r7, #0]
   11434:	7018      	strb	r0, [r3, #0]
   11436:	47a0      	blx	r4
   11438:	4b10      	ldr	r3, [pc, #64]	; (1147c <RADIO_TxHandler+0x1b0>)
   1143a:	7839      	ldrb	r1, [r7, #0]
   1143c:	6818      	ldr	r0, [r3, #0]
   1143e:	4b1a      	ldr	r3, [pc, #104]	; (114a8 <RADIO_TxHandler+0x1dc>)
   11440:	4798      	blx	r3
   11442:	e7b2      	b.n	113aa <RADIO_TxHandler+0xde>
   11444:	00010fcd 	.word	0x00010fcd
   11448:	200015f8 	.word	0x200015f8
   1144c:	00009e61 	.word	0x00009e61
   11450:	00010b1d 	.word	0x00010b1d
   11454:	00010261 	.word	0x00010261
   11458:	0000a1b9 	.word	0x0000a1b9
   1145c:	00003ffd 	.word	0x00003ffd
   11460:	00009afd 	.word	0x00009afd
   11464:	00011d69 	.word	0x00011d69
   11468:	20000ec0 	.word	0x20000ec0
   1146c:	000102a9 	.word	0x000102a9
   11470:	2000162c 	.word	0x2000162c
   11474:	20000edc 	.word	0x20000edc
   11478:	00004025 	.word	0x00004025
   1147c:	20000ed8 	.word	0x20000ed8
   11480:	00004051 	.word	0x00004051
   11484:	20000ed0 	.word	0x20000ed0
   11488:	00010c79 	.word	0x00010c79
   1148c:	00009b55 	.word	0x00009b55
   11490:	20000ebc 	.word	0x20000ebc
   11494:	0000a37d 	.word	0x0000a37d
   11498:	00010c45 	.word	0x00010c45
   1149c:	00011001 	.word	0x00011001
   114a0:	20001be7 	.word	0x20001be7
   114a4:	20001be6 	.word	0x20001be6
   114a8:	00010999 	.word	0x00010999

000114ac <RADIO_TxDoneHandler>:
   114ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   114ae:	4b35      	ldr	r3, [pc, #212]	; (11584 <RADIO_TxDoneHandler+0xd8>)
   114b0:	b087      	sub	sp, #28
   114b2:	881a      	ldrh	r2, [r3, #0]
   114b4:	06d2      	lsls	r2, r2, #27
   114b6:	0fd2      	lsrs	r2, r2, #31
   114b8:	9200      	str	r2, [sp, #0]
   114ba:	466a      	mov	r2, sp
   114bc:	7810      	ldrb	r0, [r2, #0]
   114be:	881a      	ldrh	r2, [r3, #0]
   114c0:	2801      	cmp	r0, #1
   114c2:	d12b      	bne.n	1151c <RADIO_TxDoneHandler+0x70>
   114c4:	4c30      	ldr	r4, [pc, #192]	; (11588 <RADIO_TxDoneHandler+0xdc>)
   114c6:	2110      	movs	r1, #16
   114c8:	0027      	movs	r7, r4
   114ca:	2500      	movs	r5, #0
   114cc:	438a      	bics	r2, r1
   114ce:	801a      	strh	r2, [r3, #0]
   114d0:	3734      	adds	r7, #52	; 0x34
   114d2:	0002      	movs	r2, r0
   114d4:	7839      	ldrb	r1, [r7, #0]
   114d6:	4b2d      	ldr	r3, [pc, #180]	; (1158c <RADIO_TxDoneHandler+0xe0>)
   114d8:	4798      	blx	r3
   114da:	68e3      	ldr	r3, [r4, #12]
   114dc:	ae03      	add	r6, sp, #12
   114de:	9304      	str	r3, [sp, #16]
   114e0:	7035      	strb	r5, [r6, #0]
   114e2:	002a      	movs	r2, r5
   114e4:	4b29      	ldr	r3, [pc, #164]	; (1158c <RADIO_TxDoneHandler+0xe0>)
   114e6:	7839      	ldrb	r1, [r7, #0]
   114e8:	0028      	movs	r0, r5
   114ea:	4798      	blx	r3
   114ec:	466a      	mov	r2, sp
   114ee:	4b28      	ldr	r3, [pc, #160]	; (11590 <RADIO_TxDoneHandler+0xe4>)
   114f0:	7812      	ldrb	r2, [r2, #0]
   114f2:	701a      	strb	r2, [r3, #0]
   114f4:	0023      	movs	r3, r4
   114f6:	3358      	adds	r3, #88	; 0x58
   114f8:	701d      	strb	r5, [r3, #0]
   114fa:	4b26      	ldr	r3, [pc, #152]	; (11594 <RADIO_TxDoneHandler+0xe8>)
   114fc:	781b      	ldrb	r3, [r3, #0]
   114fe:	075b      	lsls	r3, r3, #29
   11500:	d505      	bpl.n	1150e <RADIO_TxDoneHandler+0x62>
   11502:	6923      	ldr	r3, [r4, #16]
   11504:	42ab      	cmp	r3, r5
   11506:	d002      	beq.n	1150e <RADIO_TxDoneHandler+0x62>
   11508:	0031      	movs	r1, r6
   1150a:	2004      	movs	r0, #4
   1150c:	4798      	blx	r3
   1150e:	4b22      	ldr	r3, [pc, #136]	; (11598 <RADIO_TxDoneHandler+0xec>)
   11510:	4798      	blx	r3
   11512:	4b22      	ldr	r3, [pc, #136]	; (1159c <RADIO_TxDoneHandler+0xf0>)
   11514:	4798      	blx	r3
   11516:	2000      	movs	r0, #0
   11518:	b007      	add	sp, #28
   1151a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1151c:	07d2      	lsls	r2, r2, #31
   1151e:	d402      	bmi.n	11526 <RADIO_TxDoneHandler+0x7a>
   11520:	881a      	ldrh	r2, [r3, #0]
   11522:	0752      	lsls	r2, r2, #29
   11524:	d527      	bpl.n	11576 <RADIO_TxDoneHandler+0xca>
   11526:	2601      	movs	r6, #1
   11528:	2104      	movs	r1, #4
   1152a:	881a      	ldrh	r2, [r3, #0]
   1152c:	4f16      	ldr	r7, [pc, #88]	; (11588 <RADIO_TxDoneHandler+0xdc>)
   1152e:	43b2      	bics	r2, r6
   11530:	801a      	strh	r2, [r3, #0]
   11532:	881a      	ldrh	r2, [r3, #0]
   11534:	2400      	movs	r4, #0
   11536:	438a      	bics	r2, r1
   11538:	801a      	strh	r2, [r3, #0]
   1153a:	4b19      	ldr	r3, [pc, #100]	; (115a0 <RADIO_TxDoneHandler+0xf4>)
   1153c:	ad03      	add	r5, sp, #12
   1153e:	681b      	ldr	r3, [r3, #0]
   11540:	702c      	strb	r4, [r5, #0]
   11542:	9304      	str	r3, [sp, #16]
   11544:	003b      	movs	r3, r7
   11546:	3334      	adds	r3, #52	; 0x34
   11548:	7819      	ldrb	r1, [r3, #0]
   1154a:	0022      	movs	r2, r4
   1154c:	0020      	movs	r0, r4
   1154e:	4b0f      	ldr	r3, [pc, #60]	; (1158c <RADIO_TxDoneHandler+0xe0>)
   11550:	4798      	blx	r3
   11552:	4b14      	ldr	r3, [pc, #80]	; (115a4 <RADIO_TxDoneHandler+0xf8>)
   11554:	4798      	blx	r3
   11556:	4b0e      	ldr	r3, [pc, #56]	; (11590 <RADIO_TxDoneHandler+0xe4>)
   11558:	701e      	strb	r6, [r3, #0]
   1155a:	003b      	movs	r3, r7
   1155c:	3358      	adds	r3, #88	; 0x58
   1155e:	701c      	strb	r4, [r3, #0]
   11560:	4b0c      	ldr	r3, [pc, #48]	; (11594 <RADIO_TxDoneHandler+0xe8>)
   11562:	781b      	ldrb	r3, [r3, #0]
   11564:	079b      	lsls	r3, r3, #30
   11566:	d5d6      	bpl.n	11516 <RADIO_TxDoneHandler+0x6a>
   11568:	693b      	ldr	r3, [r7, #16]
   1156a:	42a3      	cmp	r3, r4
   1156c:	d0d3      	beq.n	11516 <RADIO_TxDoneHandler+0x6a>
   1156e:	0029      	movs	r1, r5
   11570:	2002      	movs	r0, #2
   11572:	4798      	blx	r3
   11574:	e7cf      	b.n	11516 <RADIO_TxDoneHandler+0x6a>
   11576:	881b      	ldrh	r3, [r3, #0]
   11578:	059b      	lsls	r3, r3, #22
   1157a:	d5cc      	bpl.n	11516 <RADIO_TxDoneHandler+0x6a>
   1157c:	4b0a      	ldr	r3, [pc, #40]	; (115a8 <RADIO_TxDoneHandler+0xfc>)
   1157e:	4798      	blx	r3
   11580:	e7c9      	b.n	11516 <RADIO_TxDoneHandler+0x6a>
   11582:	46c0      	nop			; (mov r8, r8)
   11584:	20001be4 	.word	0x20001be4
   11588:	200015f8 	.word	0x200015f8
   1158c:	0000a1b9 	.word	0x0000a1b9
   11590:	20001be7 	.word	0x20001be7
   11594:	20001be6 	.word	0x20001be6
   11598:	00003fbd 	.word	0x00003fbd
   1159c:	0001101d 	.word	0x0001101d
   115a0:	20000ed0 	.word	0x20000ed0
   115a4:	00011001 	.word	0x00011001
   115a8:	00011945 	.word	0x00011945

000115ac <RADIO_RxDoneHandler>:
   115ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   115ae:	4b97      	ldr	r3, [pc, #604]	; (1180c <RADIO_RxDoneHandler+0x260>)
   115b0:	b085      	sub	sp, #20
   115b2:	881c      	ldrh	r4, [r3, #0]
   115b4:	881a      	ldrh	r2, [r3, #0]
   115b6:	06a4      	lsls	r4, r4, #26
   115b8:	0fe4      	lsrs	r4, r4, #31
   115ba:	b2e0      	uxtb	r0, r4
   115bc:	2801      	cmp	r0, #1
   115be:	d126      	bne.n	1160e <RADIO_RxDoneHandler+0x62>
   115c0:	4d93      	ldr	r5, [pc, #588]	; (11810 <RADIO_RxDoneHandler+0x264>)
   115c2:	2120      	movs	r1, #32
   115c4:	002e      	movs	r6, r5
   115c6:	438a      	bics	r2, r1
   115c8:	801a      	strh	r2, [r3, #0]
   115ca:	3634      	adds	r6, #52	; 0x34
   115cc:	0002      	movs	r2, r0
   115ce:	7831      	ldrb	r1, [r6, #0]
   115d0:	4f90      	ldr	r7, [pc, #576]	; (11814 <RADIO_RxDoneHandler+0x268>)
   115d2:	47b8      	blx	r7
   115d4:	2200      	movs	r2, #0
   115d6:	7831      	ldrb	r1, [r6, #0]
   115d8:	0010      	movs	r0, r2
   115da:	47b8      	blx	r7
   115dc:	4b8e      	ldr	r3, [pc, #568]	; (11818 <RADIO_RxDoneHandler+0x26c>)
   115de:	4798      	blx	r3
   115e0:	4b8e      	ldr	r3, [pc, #568]	; (1181c <RADIO_RxDoneHandler+0x270>)
   115e2:	002a      	movs	r2, r5
   115e4:	701c      	strb	r4, [r3, #0]
   115e6:	2300      	movs	r3, #0
   115e8:	322c      	adds	r2, #44	; 0x2c
   115ea:	7013      	strb	r3, [r2, #0]
   115ec:	002a      	movs	r2, r5
   115ee:	a901      	add	r1, sp, #4
   115f0:	3258      	adds	r2, #88	; 0x58
   115f2:	7013      	strb	r3, [r2, #0]
   115f4:	700b      	strb	r3, [r1, #0]
   115f6:	4b8a      	ldr	r3, [pc, #552]	; (11820 <RADIO_RxDoneHandler+0x274>)
   115f8:	781b      	ldrb	r3, [r3, #0]
   115fa:	071b      	lsls	r3, r3, #28
   115fc:	d504      	bpl.n	11608 <RADIO_RxDoneHandler+0x5c>
   115fe:	692b      	ldr	r3, [r5, #16]
   11600:	2008      	movs	r0, #8
   11602:	2b00      	cmp	r3, #0
   11604:	d000      	beq.n	11608 <RADIO_RxDoneHandler+0x5c>
   11606:	e084      	b.n	11712 <RADIO_RxDoneHandler+0x166>
   11608:	2000      	movs	r0, #0
   1160a:	b005      	add	sp, #20
   1160c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1160e:	0652      	lsls	r2, r2, #25
   11610:	d402      	bmi.n	11618 <RADIO_RxDoneHandler+0x6c>
   11612:	881a      	ldrh	r2, [r3, #0]
   11614:	0612      	lsls	r2, r2, #24
   11616:	d523      	bpl.n	11660 <RADIO_RxDoneHandler+0xb4>
   11618:	2140      	movs	r1, #64	; 0x40
   1161a:	881a      	ldrh	r2, [r3, #0]
   1161c:	4c7c      	ldr	r4, [pc, #496]	; (11810 <RADIO_RxDoneHandler+0x264>)
   1161e:	438a      	bics	r2, r1
   11620:	801a      	strh	r2, [r3, #0]
   11622:	881a      	ldrh	r2, [r3, #0]
   11624:	1849      	adds	r1, r1, r1
   11626:	438a      	bics	r2, r1
   11628:	801a      	strh	r2, [r3, #0]
   1162a:	0023      	movs	r3, r4
   1162c:	2200      	movs	r2, #0
   1162e:	3334      	adds	r3, #52	; 0x34
   11630:	7819      	ldrb	r1, [r3, #0]
   11632:	0010      	movs	r0, r2
   11634:	4b77      	ldr	r3, [pc, #476]	; (11814 <RADIO_RxDoneHandler+0x268>)
   11636:	4798      	blx	r3
   11638:	4b77      	ldr	r3, [pc, #476]	; (11818 <RADIO_RxDoneHandler+0x26c>)
   1163a:	4798      	blx	r3
   1163c:	2201      	movs	r2, #1
   1163e:	4b77      	ldr	r3, [pc, #476]	; (1181c <RADIO_RxDoneHandler+0x270>)
   11640:	a901      	add	r1, sp, #4
   11642:	701a      	strb	r2, [r3, #0]
   11644:	0022      	movs	r2, r4
   11646:	2300      	movs	r3, #0
   11648:	322c      	adds	r2, #44	; 0x2c
   1164a:	7013      	strb	r3, [r2, #0]
   1164c:	0022      	movs	r2, r4
   1164e:	3258      	adds	r2, #88	; 0x58
   11650:	7013      	strb	r3, [r2, #0]
   11652:	700b      	strb	r3, [r1, #0]
   11654:	4b72      	ldr	r3, [pc, #456]	; (11820 <RADIO_RxDoneHandler+0x274>)
   11656:	781b      	ldrb	r3, [r3, #0]
   11658:	071b      	lsls	r3, r3, #28
   1165a:	d5d5      	bpl.n	11608 <RADIO_RxDoneHandler+0x5c>
   1165c:	6923      	ldr	r3, [r4, #16]
   1165e:	e7cf      	b.n	11600 <RADIO_RxDoneHandler+0x54>
   11660:	881a      	ldrh	r2, [r3, #0]
   11662:	0792      	lsls	r2, r2, #30
   11664:	d571      	bpl.n	1174a <RADIO_RxDoneHandler+0x19e>
   11666:	2102      	movs	r1, #2
   11668:	881a      	ldrh	r2, [r3, #0]
   1166a:	4d6e      	ldr	r5, [pc, #440]	; (11824 <RADIO_RxDoneHandler+0x278>)
   1166c:	438a      	bics	r2, r1
   1166e:	801a      	strh	r2, [r3, #0]
   11670:	2013      	movs	r0, #19
   11672:	47a8      	blx	r5
   11674:	4c66      	ldr	r4, [pc, #408]	; (11810 <RADIO_RxDoneHandler+0x264>)
   11676:	2100      	movs	r1, #0
   11678:	0026      	movs	r6, r4
   1167a:	362c      	adds	r6, #44	; 0x2c
   1167c:	7030      	strb	r0, [r6, #0]
   1167e:	4b6a      	ldr	r3, [pc, #424]	; (11828 <RADIO_RxDoneHandler+0x27c>)
   11680:	200d      	movs	r0, #13
   11682:	4798      	blx	r3
   11684:	7832      	ldrb	r2, [r6, #0]
   11686:	4b69      	ldr	r3, [pc, #420]	; (1182c <RADIO_RxDoneHandler+0x280>)
   11688:	b2d2      	uxtb	r2, r2
   1168a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   1168c:	2000      	movs	r0, #0
   1168e:	4798      	blx	r3
   11690:	2019      	movs	r0, #25
   11692:	47a8      	blx	r5
   11694:	0023      	movs	r3, r4
   11696:	b240      	sxtb	r0, r0
   11698:	3332      	adds	r3, #50	; 0x32
   1169a:	2800      	cmp	r0, #0
   1169c:	da3b      	bge.n	11716 <RADIO_RxDoneHandler+0x16a>
   1169e:	4240      	negs	r0, r0
   116a0:	1080      	asrs	r0, r0, #2
   116a2:	4240      	negs	r0, r0
   116a4:	7018      	strb	r0, [r3, #0]
   116a6:	201a      	movs	r0, #26
   116a8:	47a8      	blx	r5
   116aa:	0023      	movs	r3, r4
   116ac:	3332      	adds	r3, #50	; 0x32
   116ae:	781b      	ldrb	r3, [r3, #0]
   116b0:	b202      	sxth	r2, r0
   116b2:	b25b      	sxtb	r3, r3
   116b4:	4d5e      	ldr	r5, [pc, #376]	; (11830 <RADIO_RxDoneHandler+0x284>)
   116b6:	2b00      	cmp	r3, #0
   116b8:	da36      	bge.n	11728 <RADIO_RxDoneHandler+0x17c>
   116ba:	6821      	ldr	r1, [r4, #0]
   116bc:	4e5d      	ldr	r6, [pc, #372]	; (11834 <RADIO_RxDoneHandler+0x288>)
   116be:	198e      	adds	r6, r1, r6
   116c0:	42ae      	cmp	r6, r5
   116c2:	d82a      	bhi.n	1171a <RADIO_RxDoneHandler+0x16e>
   116c4:	3b9d      	subs	r3, #157	; 0x9d
   116c6:	181b      	adds	r3, r3, r0
   116c8:	1112      	asrs	r2, r2, #4
   116ca:	189b      	adds	r3, r3, r2
   116cc:	0022      	movs	r2, r4
   116ce:	3256      	adds	r2, #86	; 0x56
   116d0:	8013      	strh	r3, [r2, #0]
   116d2:	0023      	movs	r3, r4
   116d4:	2200      	movs	r2, #0
   116d6:	3334      	adds	r3, #52	; 0x34
   116d8:	7819      	ldrb	r1, [r3, #0]
   116da:	0010      	movs	r0, r2
   116dc:	4b4d      	ldr	r3, [pc, #308]	; (11814 <RADIO_RxDoneHandler+0x268>)
   116de:	4798      	blx	r3
   116e0:	4b4d      	ldr	r3, [pc, #308]	; (11818 <RADIO_RxDoneHandler+0x26c>)
   116e2:	4798      	blx	r3
   116e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   116e6:	a901      	add	r1, sp, #4
   116e8:	604b      	str	r3, [r1, #4]
   116ea:	0023      	movs	r3, r4
   116ec:	332c      	adds	r3, #44	; 0x2c
   116ee:	781b      	ldrb	r3, [r3, #0]
   116f0:	2201      	movs	r2, #1
   116f2:	720b      	strb	r3, [r1, #8]
   116f4:	2300      	movs	r3, #0
   116f6:	700b      	strb	r3, [r1, #0]
   116f8:	4b48      	ldr	r3, [pc, #288]	; (1181c <RADIO_RxDoneHandler+0x270>)
   116fa:	701a      	strb	r2, [r3, #0]
   116fc:	4b48      	ldr	r3, [pc, #288]	; (11820 <RADIO_RxDoneHandler+0x274>)
   116fe:	7818      	ldrb	r0, [r3, #0]
   11700:	07c0      	lsls	r0, r0, #31
   11702:	0fc0      	lsrs	r0, r0, #31
   11704:	4290      	cmp	r0, r2
   11706:	d000      	beq.n	1170a <RADIO_RxDoneHandler+0x15e>
   11708:	e77e      	b.n	11608 <RADIO_RxDoneHandler+0x5c>
   1170a:	6923      	ldr	r3, [r4, #16]
   1170c:	2b00      	cmp	r3, #0
   1170e:	d100      	bne.n	11712 <RADIO_RxDoneHandler+0x166>
   11710:	e77a      	b.n	11608 <RADIO_RxDoneHandler+0x5c>
   11712:	4798      	blx	r3
   11714:	e778      	b.n	11608 <RADIO_RxDoneHandler+0x5c>
   11716:	1080      	asrs	r0, r0, #2
   11718:	e7c4      	b.n	116a4 <RADIO_RxDoneHandler+0xf8>
   1171a:	4d47      	ldr	r5, [pc, #284]	; (11838 <RADIO_RxDoneHandler+0x28c>)
   1171c:	1949      	adds	r1, r1, r5
   1171e:	4d47      	ldr	r5, [pc, #284]	; (1183c <RADIO_RxDoneHandler+0x290>)
   11720:	42a9      	cmp	r1, r5
   11722:	d8d6      	bhi.n	116d2 <RADIO_RxDoneHandler+0x126>
   11724:	3ba4      	subs	r3, #164	; 0xa4
   11726:	e7ce      	b.n	116c6 <RADIO_RxDoneHandler+0x11a>
   11728:	6823      	ldr	r3, [r4, #0]
   1172a:	4942      	ldr	r1, [pc, #264]	; (11834 <RADIO_RxDoneHandler+0x288>)
   1172c:	1859      	adds	r1, r3, r1
   1172e:	42a9      	cmp	r1, r5
   11730:	d802      	bhi.n	11738 <RADIO_RxDoneHandler+0x18c>
   11732:	0003      	movs	r3, r0
   11734:	3b9d      	subs	r3, #157	; 0x9d
   11736:	e7c7      	b.n	116c8 <RADIO_RxDoneHandler+0x11c>
   11738:	493f      	ldr	r1, [pc, #252]	; (11838 <RADIO_RxDoneHandler+0x28c>)
   1173a:	185b      	adds	r3, r3, r1
   1173c:	493f      	ldr	r1, [pc, #252]	; (1183c <RADIO_RxDoneHandler+0x290>)
   1173e:	428b      	cmp	r3, r1
   11740:	d8c7      	bhi.n	116d2 <RADIO_RxDoneHandler+0x126>
   11742:	38a4      	subs	r0, #164	; 0xa4
   11744:	1113      	asrs	r3, r2, #4
   11746:	18c3      	adds	r3, r0, r3
   11748:	e7c0      	b.n	116cc <RADIO_RxDoneHandler+0x120>
   1174a:	881a      	ldrh	r2, [r3, #0]
   1174c:	0712      	lsls	r2, r2, #28
   1174e:	0fd5      	lsrs	r5, r2, #31
   11750:	2a00      	cmp	r2, #0
   11752:	da27      	bge.n	117a4 <RADIO_RxDoneHandler+0x1f8>
   11754:	2108      	movs	r1, #8
   11756:	881a      	ldrh	r2, [r3, #0]
   11758:	4c2d      	ldr	r4, [pc, #180]	; (11810 <RADIO_RxDoneHandler+0x264>)
   1175a:	438a      	bics	r2, r1
   1175c:	801a      	strh	r2, [r3, #0]
   1175e:	0023      	movs	r3, r4
   11760:	2280      	movs	r2, #128	; 0x80
   11762:	3332      	adds	r3, #50	; 0x32
   11764:	701a      	strb	r2, [r3, #0]
   11766:	0023      	movs	r3, r4
   11768:	2200      	movs	r2, #0
   1176a:	3334      	adds	r3, #52	; 0x34
   1176c:	7819      	ldrb	r1, [r3, #0]
   1176e:	0010      	movs	r0, r2
   11770:	4b28      	ldr	r3, [pc, #160]	; (11814 <RADIO_RxDoneHandler+0x268>)
   11772:	4798      	blx	r3
   11774:	4b28      	ldr	r3, [pc, #160]	; (11818 <RADIO_RxDoneHandler+0x26c>)
   11776:	4798      	blx	r3
   11778:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1177a:	a901      	add	r1, sp, #4
   1177c:	604b      	str	r3, [r1, #4]
   1177e:	0023      	movs	r3, r4
   11780:	332c      	adds	r3, #44	; 0x2c
   11782:	781b      	ldrb	r3, [r3, #0]
   11784:	0022      	movs	r2, r4
   11786:	720b      	strb	r3, [r1, #8]
   11788:	2300      	movs	r3, #0
   1178a:	3258      	adds	r2, #88	; 0x58
   1178c:	7013      	strb	r3, [r2, #0]
   1178e:	700b      	strb	r3, [r1, #0]
   11790:	4b22      	ldr	r3, [pc, #136]	; (1181c <RADIO_RxDoneHandler+0x270>)
   11792:	701d      	strb	r5, [r3, #0]
   11794:	4b22      	ldr	r3, [pc, #136]	; (11820 <RADIO_RxDoneHandler+0x274>)
   11796:	7818      	ldrb	r0, [r3, #0]
   11798:	07c0      	lsls	r0, r0, #31
   1179a:	0fc0      	lsrs	r0, r0, #31
   1179c:	2801      	cmp	r0, #1
   1179e:	d000      	beq.n	117a2 <RADIO_RxDoneHandler+0x1f6>
   117a0:	e732      	b.n	11608 <RADIO_RxDoneHandler+0x5c>
   117a2:	e7b2      	b.n	1170a <RADIO_RxDoneHandler+0x15e>
   117a4:	881a      	ldrh	r2, [r3, #0]
   117a6:	05d2      	lsls	r2, r2, #23
   117a8:	0fd5      	lsrs	r5, r2, #31
   117aa:	2a00      	cmp	r2, #0
   117ac:	db00      	blt.n	117b0 <RADIO_RxDoneHandler+0x204>
   117ae:	e72b      	b.n	11608 <RADIO_RxDoneHandler+0x5c>
   117b0:	4c17      	ldr	r4, [pc, #92]	; (11810 <RADIO_RxDoneHandler+0x264>)
   117b2:	881a      	ldrh	r2, [r3, #0]
   117b4:	0026      	movs	r6, r4
   117b6:	4922      	ldr	r1, [pc, #136]	; (11840 <RADIO_RxDoneHandler+0x294>)
   117b8:	362c      	adds	r6, #44	; 0x2c
   117ba:	400a      	ands	r2, r1
   117bc:	801a      	strh	r2, [r3, #0]
   117be:	7832      	ldrb	r2, [r6, #0]
   117c0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   117c2:	b2d2      	uxtb	r2, r2
   117c4:	2000      	movs	r0, #0
   117c6:	4b19      	ldr	r3, [pc, #100]	; (1182c <RADIO_RxDoneHandler+0x280>)
   117c8:	4798      	blx	r3
   117ca:	0023      	movs	r3, r4
   117cc:	2200      	movs	r2, #0
   117ce:	3334      	adds	r3, #52	; 0x34
   117d0:	7819      	ldrb	r1, [r3, #0]
   117d2:	0010      	movs	r0, r2
   117d4:	4b0f      	ldr	r3, [pc, #60]	; (11814 <RADIO_RxDoneHandler+0x268>)
   117d6:	4798      	blx	r3
   117d8:	4b0f      	ldr	r3, [pc, #60]	; (11818 <RADIO_RxDoneHandler+0x26c>)
   117da:	4798      	blx	r3
   117dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   117de:	a901      	add	r1, sp, #4
   117e0:	604b      	str	r3, [r1, #4]
   117e2:	7833      	ldrb	r3, [r6, #0]
   117e4:	0022      	movs	r2, r4
   117e6:	720b      	strb	r3, [r1, #8]
   117e8:	2300      	movs	r3, #0
   117ea:	3258      	adds	r2, #88	; 0x58
   117ec:	7013      	strb	r3, [r2, #0]
   117ee:	700b      	strb	r3, [r1, #0]
   117f0:	4b0a      	ldr	r3, [pc, #40]	; (1181c <RADIO_RxDoneHandler+0x270>)
   117f2:	701d      	strb	r5, [r3, #0]
   117f4:	4b0a      	ldr	r3, [pc, #40]	; (11820 <RADIO_RxDoneHandler+0x274>)
   117f6:	781b      	ldrb	r3, [r3, #0]
   117f8:	06db      	lsls	r3, r3, #27
   117fa:	d400      	bmi.n	117fe <RADIO_RxDoneHandler+0x252>
   117fc:	e704      	b.n	11608 <RADIO_RxDoneHandler+0x5c>
   117fe:	6923      	ldr	r3, [r4, #16]
   11800:	2b00      	cmp	r3, #0
   11802:	d100      	bne.n	11806 <RADIO_RxDoneHandler+0x25a>
   11804:	e700      	b.n	11608 <RADIO_RxDoneHandler+0x5c>
   11806:	2010      	movs	r0, #16
   11808:	e783      	b.n	11712 <RADIO_RxDoneHandler+0x166>
   1180a:	46c0      	nop			; (mov r8, r8)
   1180c:	20001be4 	.word	0x20001be4
   11810:	200015f8 	.word	0x200015f8
   11814:	0000a1b9 	.word	0x0000a1b9
   11818:	00011001 	.word	0x00011001
   1181c:	20001be7 	.word	0x20001be7
   11820:	20001be6 	.word	0x20001be6
   11824:	00004025 	.word	0x00004025
   11828:	00003ffd 	.word	0x00003ffd
   1182c:	00004091 	.word	0x00004091
   11830:	096ae380 	.word	0x096ae380
   11834:	cc9eec80 	.word	0xcc9eec80
   11838:	e78fe580 	.word	0xe78fe580
   1183c:	06dac2c0 	.word	0x06dac2c0
   11840:	fffffeff 	.word	0xfffffeff

00011844 <Radio_LBTScanTimeout>:
   11844:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   11846:	4c1c      	ldr	r4, [pc, #112]	; (118b8 <Radio_LBTScanTimeout+0x74>)
   11848:	0025      	movs	r5, r4
   1184a:	0023      	movs	r3, r4
   1184c:	354f      	adds	r5, #79	; 0x4f
   1184e:	7829      	ldrb	r1, [r5, #0]
   11850:	3340      	adds	r3, #64	; 0x40
   11852:	3101      	adds	r1, #1
   11854:	b2c9      	uxtb	r1, r1
   11856:	7029      	strb	r1, [r5, #0]
   11858:	781b      	ldrb	r3, [r3, #0]
   1185a:	428b      	cmp	r3, r1
   1185c:	d315      	bcc.n	1188a <Radio_LBTScanTimeout+0x46>
   1185e:	260e      	movs	r6, #14
   11860:	446e      	add	r6, sp
   11862:	4b16      	ldr	r3, [pc, #88]	; (118bc <Radio_LBTScanTimeout+0x78>)
   11864:	0030      	movs	r0, r6
   11866:	4798      	blx	r3
   11868:	2300      	movs	r3, #0
   1186a:	5ef2      	ldrsh	r2, [r6, r3]
   1186c:	782b      	ldrb	r3, [r5, #0]
   1186e:	4353      	muls	r3, r2
   11870:	6c62      	ldr	r2, [r4, #68]	; 0x44
   11872:	189b      	adds	r3, r3, r2
   11874:	6463      	str	r3, [r4, #68]	; 0x44
   11876:	0023      	movs	r3, r4
   11878:	2200      	movs	r2, #0
   1187a:	3350      	adds	r3, #80	; 0x50
   1187c:	7818      	ldrb	r0, [r3, #0]
   1187e:	9200      	str	r2, [sp, #0]
   11880:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   11882:	4b0f      	ldr	r3, [pc, #60]	; (118c0 <Radio_LBTScanTimeout+0x7c>)
   11884:	4c0f      	ldr	r4, [pc, #60]	; (118c4 <Radio_LBTScanTimeout+0x80>)
   11886:	47a0      	blx	r4
   11888:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
   1188a:	2380      	movs	r3, #128	; 0x80
   1188c:	4a0e      	ldr	r2, [pc, #56]	; (118c8 <Radio_LBTScanTimeout+0x84>)
   1188e:	009b      	lsls	r3, r3, #2
   11890:	8810      	ldrh	r0, [r2, #0]
   11892:	4303      	orrs	r3, r0
   11894:	8013      	strh	r3, [r2, #0]
   11896:	6c63      	ldr	r3, [r4, #68]	; 0x44
   11898:	0058      	lsls	r0, r3, #1
   1189a:	1e4b      	subs	r3, r1, #1
   1189c:	4359      	muls	r1, r3
   1189e:	4b0b      	ldr	r3, [pc, #44]	; (118cc <Radio_LBTScanTimeout+0x88>)
   118a0:	b289      	uxth	r1, r1
   118a2:	4798      	blx	r3
   118a4:	0023      	movs	r3, r4
   118a6:	334c      	adds	r3, #76	; 0x4c
   118a8:	8018      	strh	r0, [r3, #0]
   118aa:	2300      	movs	r3, #0
   118ac:	2001      	movs	r0, #1
   118ae:	702b      	strb	r3, [r5, #0]
   118b0:	6463      	str	r3, [r4, #68]	; 0x44
   118b2:	4b07      	ldr	r3, [pc, #28]	; (118d0 <Radio_LBTScanTimeout+0x8c>)
   118b4:	4798      	blx	r3
   118b6:	e7e7      	b.n	11888 <Radio_LBTScanTimeout+0x44>
   118b8:	200015f8 	.word	0x200015f8
   118bc:	0000a37d 	.word	0x0000a37d
   118c0:	00011845 	.word	0x00011845
   118c4:	00009b55 	.word	0x00009b55
   118c8:	20001be4 	.word	0x20001be4
   118cc:	00011b1d 	.word	0x00011b1d
   118d0:	00010869 	.word	0x00010869

000118d4 <RADIO_ScanHandler>:
   118d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   118d6:	4b12      	ldr	r3, [pc, #72]	; (11920 <RADIO_ScanHandler+0x4c>)
   118d8:	4798      	blx	r3
   118da:	2000      	movs	r0, #0
   118dc:	4b11      	ldr	r3, [pc, #68]	; (11924 <RADIO_ScanHandler+0x50>)
   118de:	4798      	blx	r3
   118e0:	4d11      	ldr	r5, [pc, #68]	; (11928 <RADIO_ScanHandler+0x54>)
   118e2:	4b12      	ldr	r3, [pc, #72]	; (1192c <RADIO_ScanHandler+0x58>)
   118e4:	6828      	ldr	r0, [r5, #0]
   118e6:	2400      	movs	r4, #0
   118e8:	4798      	blx	r3
   118ea:	002b      	movs	r3, r5
   118ec:	4e10      	ldr	r6, [pc, #64]	; (11930 <RADIO_ScanHandler+0x5c>)
   118ee:	334c      	adds	r3, #76	; 0x4c
   118f0:	2201      	movs	r2, #1
   118f2:	0021      	movs	r1, r4
   118f4:	0020      	movs	r0, r4
   118f6:	801c      	strh	r4, [r3, #0]
   118f8:	47b0      	blx	r6
   118fa:	4b0e      	ldr	r3, [pc, #56]	; (11934 <RADIO_ScanHandler+0x60>)
   118fc:	2109      	movs	r1, #9
   118fe:	2012      	movs	r0, #18
   11900:	4798      	blx	r3
   11902:	3550      	adds	r5, #80	; 0x50
   11904:	0022      	movs	r2, r4
   11906:	0021      	movs	r1, r4
   11908:	2005      	movs	r0, #5
   1190a:	47b0      	blx	r6
   1190c:	7828      	ldrb	r0, [r5, #0]
   1190e:	4b0a      	ldr	r3, [pc, #40]	; (11938 <RADIO_ScanHandler+0x64>)
   11910:	4d0a      	ldr	r5, [pc, #40]	; (1193c <RADIO_ScanHandler+0x68>)
   11912:	9400      	str	r4, [sp, #0]
   11914:	0022      	movs	r2, r4
   11916:	490a      	ldr	r1, [pc, #40]	; (11940 <RADIO_ScanHandler+0x6c>)
   11918:	47a8      	blx	r5
   1191a:	0020      	movs	r0, r4
   1191c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   1191e:	46c0      	nop			; (mov r8, r8)
   11920:	00010fcd 	.word	0x00010fcd
   11924:	00010b1d 	.word	0x00010b1d
   11928:	200015f8 	.word	0x200015f8
   1192c:	00010261 	.word	0x00010261
   11930:	0000a1b9 	.word	0x0000a1b9
   11934:	00003ffd 	.word	0x00003ffd
   11938:	00011845 	.word	0x00011845
   1193c:	00009b55 	.word	0x00009b55
   11940:	00002328 	.word	0x00002328

00011944 <radioScanDoneHandler>:
   11944:	b530      	push	{r4, r5, lr}
   11946:	4a18      	ldr	r2, [pc, #96]	; (119a8 <radioScanDoneHandler+0x64>)
   11948:	4918      	ldr	r1, [pc, #96]	; (119ac <radioScanDoneHandler+0x68>)
   1194a:	8813      	ldrh	r3, [r2, #0]
   1194c:	b085      	sub	sp, #20
   1194e:	400b      	ands	r3, r1
   11950:	8013      	strh	r3, [r2, #0]
   11952:	2200      	movs	r2, #0
   11954:	4b16      	ldr	r3, [pc, #88]	; (119b0 <radioScanDoneHandler+0x6c>)
   11956:	0011      	movs	r1, r2
   11958:	0010      	movs	r0, r2
   1195a:	4798      	blx	r3
   1195c:	2000      	movs	r0, #0
   1195e:	4b15      	ldr	r3, [pc, #84]	; (119b4 <radioScanDoneHandler+0x70>)
   11960:	4798      	blx	r3
   11962:	4b15      	ldr	r3, [pc, #84]	; (119b8 <radioScanDoneHandler+0x74>)
   11964:	4798      	blx	r3
   11966:	4c15      	ldr	r4, [pc, #84]	; (119bc <radioScanDoneHandler+0x78>)
   11968:	0023      	movs	r3, r4
   1196a:	334c      	adds	r3, #76	; 0x4c
   1196c:	2100      	movs	r1, #0
   1196e:	5e59      	ldrsh	r1, [r3, r1]
   11970:	233e      	movs	r3, #62	; 0x3e
   11972:	5ee2      	ldrsh	r2, [r4, r3]
   11974:	4b12      	ldr	r3, [pc, #72]	; (119c0 <radioScanDoneHandler+0x7c>)
   11976:	4291      	cmp	r1, r2
   11978:	da06      	bge.n	11988 <radioScanDoneHandler+0x44>
   1197a:	2002      	movs	r0, #2
   1197c:	4798      	blx	r3
   1197e:	4b11      	ldr	r3, [pc, #68]	; (119c4 <radioScanDoneHandler+0x80>)
   11980:	4798      	blx	r3
   11982:	2000      	movs	r0, #0
   11984:	b005      	add	sp, #20
   11986:	bd30      	pop	{r4, r5, pc}
   11988:	2207      	movs	r2, #7
   1198a:	ad01      	add	r5, sp, #4
   1198c:	2001      	movs	r0, #1
   1198e:	702a      	strb	r2, [r5, #0]
   11990:	4798      	blx	r3
   11992:	4b0d      	ldr	r3, [pc, #52]	; (119c8 <radioScanDoneHandler+0x84>)
   11994:	781b      	ldrb	r3, [r3, #0]
   11996:	079b      	lsls	r3, r3, #30
   11998:	d5f3      	bpl.n	11982 <radioScanDoneHandler+0x3e>
   1199a:	6923      	ldr	r3, [r4, #16]
   1199c:	2b00      	cmp	r3, #0
   1199e:	d0f0      	beq.n	11982 <radioScanDoneHandler+0x3e>
   119a0:	0029      	movs	r1, r5
   119a2:	2002      	movs	r0, #2
   119a4:	4798      	blx	r3
   119a6:	e7ec      	b.n	11982 <radioScanDoneHandler+0x3e>
   119a8:	20001be4 	.word	0x20001be4
   119ac:	fffffdff 	.word	0xfffffdff
   119b0:	0000a1b9 	.word	0x0000a1b9
   119b4:	00010c45 	.word	0x00010c45
   119b8:	00011001 	.word	0x00011001
   119bc:	200015f8 	.word	0x200015f8
   119c0:	00010915 	.word	0x00010915
   119c4:	000112cd 	.word	0x000112cd
   119c8:	20001be6 	.word	0x20001be6

000119cc <__gnu_thumb1_case_sqi>:
   119cc:	b402      	push	{r1}
   119ce:	4671      	mov	r1, lr
   119d0:	0849      	lsrs	r1, r1, #1
   119d2:	0049      	lsls	r1, r1, #1
   119d4:	5609      	ldrsb	r1, [r1, r0]
   119d6:	0049      	lsls	r1, r1, #1
   119d8:	448e      	add	lr, r1
   119da:	bc02      	pop	{r1}
   119dc:	4770      	bx	lr
   119de:	46c0      	nop			; (mov r8, r8)

000119e0 <__gnu_thumb1_case_uqi>:
   119e0:	b402      	push	{r1}
   119e2:	4671      	mov	r1, lr
   119e4:	0849      	lsrs	r1, r1, #1
   119e6:	0049      	lsls	r1, r1, #1
   119e8:	5c09      	ldrb	r1, [r1, r0]
   119ea:	0049      	lsls	r1, r1, #1
   119ec:	448e      	add	lr, r1
   119ee:	bc02      	pop	{r1}
   119f0:	4770      	bx	lr
   119f2:	46c0      	nop			; (mov r8, r8)

000119f4 <__gnu_thumb1_case_uhi>:
   119f4:	b403      	push	{r0, r1}
   119f6:	4671      	mov	r1, lr
   119f8:	0849      	lsrs	r1, r1, #1
   119fa:	0040      	lsls	r0, r0, #1
   119fc:	0049      	lsls	r1, r1, #1
   119fe:	5a09      	ldrh	r1, [r1, r0]
   11a00:	0049      	lsls	r1, r1, #1
   11a02:	448e      	add	lr, r1
   11a04:	bc03      	pop	{r0, r1}
   11a06:	4770      	bx	lr

00011a08 <__udivsi3>:
   11a08:	2200      	movs	r2, #0
   11a0a:	0843      	lsrs	r3, r0, #1
   11a0c:	428b      	cmp	r3, r1
   11a0e:	d374      	bcc.n	11afa <__udivsi3+0xf2>
   11a10:	0903      	lsrs	r3, r0, #4
   11a12:	428b      	cmp	r3, r1
   11a14:	d35f      	bcc.n	11ad6 <__udivsi3+0xce>
   11a16:	0a03      	lsrs	r3, r0, #8
   11a18:	428b      	cmp	r3, r1
   11a1a:	d344      	bcc.n	11aa6 <__udivsi3+0x9e>
   11a1c:	0b03      	lsrs	r3, r0, #12
   11a1e:	428b      	cmp	r3, r1
   11a20:	d328      	bcc.n	11a74 <__udivsi3+0x6c>
   11a22:	0c03      	lsrs	r3, r0, #16
   11a24:	428b      	cmp	r3, r1
   11a26:	d30d      	bcc.n	11a44 <__udivsi3+0x3c>
   11a28:	22ff      	movs	r2, #255	; 0xff
   11a2a:	0209      	lsls	r1, r1, #8
   11a2c:	ba12      	rev	r2, r2
   11a2e:	0c03      	lsrs	r3, r0, #16
   11a30:	428b      	cmp	r3, r1
   11a32:	d302      	bcc.n	11a3a <__udivsi3+0x32>
   11a34:	1212      	asrs	r2, r2, #8
   11a36:	0209      	lsls	r1, r1, #8
   11a38:	d065      	beq.n	11b06 <__udivsi3+0xfe>
   11a3a:	0b03      	lsrs	r3, r0, #12
   11a3c:	428b      	cmp	r3, r1
   11a3e:	d319      	bcc.n	11a74 <__udivsi3+0x6c>
   11a40:	e000      	b.n	11a44 <__udivsi3+0x3c>
   11a42:	0a09      	lsrs	r1, r1, #8
   11a44:	0bc3      	lsrs	r3, r0, #15
   11a46:	428b      	cmp	r3, r1
   11a48:	d301      	bcc.n	11a4e <__udivsi3+0x46>
   11a4a:	03cb      	lsls	r3, r1, #15
   11a4c:	1ac0      	subs	r0, r0, r3
   11a4e:	4152      	adcs	r2, r2
   11a50:	0b83      	lsrs	r3, r0, #14
   11a52:	428b      	cmp	r3, r1
   11a54:	d301      	bcc.n	11a5a <__udivsi3+0x52>
   11a56:	038b      	lsls	r3, r1, #14
   11a58:	1ac0      	subs	r0, r0, r3
   11a5a:	4152      	adcs	r2, r2
   11a5c:	0b43      	lsrs	r3, r0, #13
   11a5e:	428b      	cmp	r3, r1
   11a60:	d301      	bcc.n	11a66 <__udivsi3+0x5e>
   11a62:	034b      	lsls	r3, r1, #13
   11a64:	1ac0      	subs	r0, r0, r3
   11a66:	4152      	adcs	r2, r2
   11a68:	0b03      	lsrs	r3, r0, #12
   11a6a:	428b      	cmp	r3, r1
   11a6c:	d301      	bcc.n	11a72 <__udivsi3+0x6a>
   11a6e:	030b      	lsls	r3, r1, #12
   11a70:	1ac0      	subs	r0, r0, r3
   11a72:	4152      	adcs	r2, r2
   11a74:	0ac3      	lsrs	r3, r0, #11
   11a76:	428b      	cmp	r3, r1
   11a78:	d301      	bcc.n	11a7e <__udivsi3+0x76>
   11a7a:	02cb      	lsls	r3, r1, #11
   11a7c:	1ac0      	subs	r0, r0, r3
   11a7e:	4152      	adcs	r2, r2
   11a80:	0a83      	lsrs	r3, r0, #10
   11a82:	428b      	cmp	r3, r1
   11a84:	d301      	bcc.n	11a8a <__udivsi3+0x82>
   11a86:	028b      	lsls	r3, r1, #10
   11a88:	1ac0      	subs	r0, r0, r3
   11a8a:	4152      	adcs	r2, r2
   11a8c:	0a43      	lsrs	r3, r0, #9
   11a8e:	428b      	cmp	r3, r1
   11a90:	d301      	bcc.n	11a96 <__udivsi3+0x8e>
   11a92:	024b      	lsls	r3, r1, #9
   11a94:	1ac0      	subs	r0, r0, r3
   11a96:	4152      	adcs	r2, r2
   11a98:	0a03      	lsrs	r3, r0, #8
   11a9a:	428b      	cmp	r3, r1
   11a9c:	d301      	bcc.n	11aa2 <__udivsi3+0x9a>
   11a9e:	020b      	lsls	r3, r1, #8
   11aa0:	1ac0      	subs	r0, r0, r3
   11aa2:	4152      	adcs	r2, r2
   11aa4:	d2cd      	bcs.n	11a42 <__udivsi3+0x3a>
   11aa6:	09c3      	lsrs	r3, r0, #7
   11aa8:	428b      	cmp	r3, r1
   11aaa:	d301      	bcc.n	11ab0 <__udivsi3+0xa8>
   11aac:	01cb      	lsls	r3, r1, #7
   11aae:	1ac0      	subs	r0, r0, r3
   11ab0:	4152      	adcs	r2, r2
   11ab2:	0983      	lsrs	r3, r0, #6
   11ab4:	428b      	cmp	r3, r1
   11ab6:	d301      	bcc.n	11abc <__udivsi3+0xb4>
   11ab8:	018b      	lsls	r3, r1, #6
   11aba:	1ac0      	subs	r0, r0, r3
   11abc:	4152      	adcs	r2, r2
   11abe:	0943      	lsrs	r3, r0, #5
   11ac0:	428b      	cmp	r3, r1
   11ac2:	d301      	bcc.n	11ac8 <__udivsi3+0xc0>
   11ac4:	014b      	lsls	r3, r1, #5
   11ac6:	1ac0      	subs	r0, r0, r3
   11ac8:	4152      	adcs	r2, r2
   11aca:	0903      	lsrs	r3, r0, #4
   11acc:	428b      	cmp	r3, r1
   11ace:	d301      	bcc.n	11ad4 <__udivsi3+0xcc>
   11ad0:	010b      	lsls	r3, r1, #4
   11ad2:	1ac0      	subs	r0, r0, r3
   11ad4:	4152      	adcs	r2, r2
   11ad6:	08c3      	lsrs	r3, r0, #3
   11ad8:	428b      	cmp	r3, r1
   11ada:	d301      	bcc.n	11ae0 <__udivsi3+0xd8>
   11adc:	00cb      	lsls	r3, r1, #3
   11ade:	1ac0      	subs	r0, r0, r3
   11ae0:	4152      	adcs	r2, r2
   11ae2:	0883      	lsrs	r3, r0, #2
   11ae4:	428b      	cmp	r3, r1
   11ae6:	d301      	bcc.n	11aec <__udivsi3+0xe4>
   11ae8:	008b      	lsls	r3, r1, #2
   11aea:	1ac0      	subs	r0, r0, r3
   11aec:	4152      	adcs	r2, r2
   11aee:	0843      	lsrs	r3, r0, #1
   11af0:	428b      	cmp	r3, r1
   11af2:	d301      	bcc.n	11af8 <__udivsi3+0xf0>
   11af4:	004b      	lsls	r3, r1, #1
   11af6:	1ac0      	subs	r0, r0, r3
   11af8:	4152      	adcs	r2, r2
   11afa:	1a41      	subs	r1, r0, r1
   11afc:	d200      	bcs.n	11b00 <__udivsi3+0xf8>
   11afe:	4601      	mov	r1, r0
   11b00:	4152      	adcs	r2, r2
   11b02:	4610      	mov	r0, r2
   11b04:	4770      	bx	lr
   11b06:	e7ff      	b.n	11b08 <__udivsi3+0x100>
   11b08:	b501      	push	{r0, lr}
   11b0a:	2000      	movs	r0, #0
   11b0c:	f000 f8f0 	bl	11cf0 <__aeabi_idiv0>
   11b10:	bd02      	pop	{r1, pc}
   11b12:	46c0      	nop			; (mov r8, r8)

00011b14 <__aeabi_uidivmod>:
   11b14:	2900      	cmp	r1, #0
   11b16:	d0f7      	beq.n	11b08 <__udivsi3+0x100>
   11b18:	e776      	b.n	11a08 <__udivsi3>
   11b1a:	4770      	bx	lr

00011b1c <__divsi3>:
   11b1c:	4603      	mov	r3, r0
   11b1e:	430b      	orrs	r3, r1
   11b20:	d47f      	bmi.n	11c22 <__divsi3+0x106>
   11b22:	2200      	movs	r2, #0
   11b24:	0843      	lsrs	r3, r0, #1
   11b26:	428b      	cmp	r3, r1
   11b28:	d374      	bcc.n	11c14 <__divsi3+0xf8>
   11b2a:	0903      	lsrs	r3, r0, #4
   11b2c:	428b      	cmp	r3, r1
   11b2e:	d35f      	bcc.n	11bf0 <__divsi3+0xd4>
   11b30:	0a03      	lsrs	r3, r0, #8
   11b32:	428b      	cmp	r3, r1
   11b34:	d344      	bcc.n	11bc0 <__divsi3+0xa4>
   11b36:	0b03      	lsrs	r3, r0, #12
   11b38:	428b      	cmp	r3, r1
   11b3a:	d328      	bcc.n	11b8e <__divsi3+0x72>
   11b3c:	0c03      	lsrs	r3, r0, #16
   11b3e:	428b      	cmp	r3, r1
   11b40:	d30d      	bcc.n	11b5e <__divsi3+0x42>
   11b42:	22ff      	movs	r2, #255	; 0xff
   11b44:	0209      	lsls	r1, r1, #8
   11b46:	ba12      	rev	r2, r2
   11b48:	0c03      	lsrs	r3, r0, #16
   11b4a:	428b      	cmp	r3, r1
   11b4c:	d302      	bcc.n	11b54 <__divsi3+0x38>
   11b4e:	1212      	asrs	r2, r2, #8
   11b50:	0209      	lsls	r1, r1, #8
   11b52:	d065      	beq.n	11c20 <__divsi3+0x104>
   11b54:	0b03      	lsrs	r3, r0, #12
   11b56:	428b      	cmp	r3, r1
   11b58:	d319      	bcc.n	11b8e <__divsi3+0x72>
   11b5a:	e000      	b.n	11b5e <__divsi3+0x42>
   11b5c:	0a09      	lsrs	r1, r1, #8
   11b5e:	0bc3      	lsrs	r3, r0, #15
   11b60:	428b      	cmp	r3, r1
   11b62:	d301      	bcc.n	11b68 <__divsi3+0x4c>
   11b64:	03cb      	lsls	r3, r1, #15
   11b66:	1ac0      	subs	r0, r0, r3
   11b68:	4152      	adcs	r2, r2
   11b6a:	0b83      	lsrs	r3, r0, #14
   11b6c:	428b      	cmp	r3, r1
   11b6e:	d301      	bcc.n	11b74 <__divsi3+0x58>
   11b70:	038b      	lsls	r3, r1, #14
   11b72:	1ac0      	subs	r0, r0, r3
   11b74:	4152      	adcs	r2, r2
   11b76:	0b43      	lsrs	r3, r0, #13
   11b78:	428b      	cmp	r3, r1
   11b7a:	d301      	bcc.n	11b80 <__divsi3+0x64>
   11b7c:	034b      	lsls	r3, r1, #13
   11b7e:	1ac0      	subs	r0, r0, r3
   11b80:	4152      	adcs	r2, r2
   11b82:	0b03      	lsrs	r3, r0, #12
   11b84:	428b      	cmp	r3, r1
   11b86:	d301      	bcc.n	11b8c <__divsi3+0x70>
   11b88:	030b      	lsls	r3, r1, #12
   11b8a:	1ac0      	subs	r0, r0, r3
   11b8c:	4152      	adcs	r2, r2
   11b8e:	0ac3      	lsrs	r3, r0, #11
   11b90:	428b      	cmp	r3, r1
   11b92:	d301      	bcc.n	11b98 <__divsi3+0x7c>
   11b94:	02cb      	lsls	r3, r1, #11
   11b96:	1ac0      	subs	r0, r0, r3
   11b98:	4152      	adcs	r2, r2
   11b9a:	0a83      	lsrs	r3, r0, #10
   11b9c:	428b      	cmp	r3, r1
   11b9e:	d301      	bcc.n	11ba4 <__divsi3+0x88>
   11ba0:	028b      	lsls	r3, r1, #10
   11ba2:	1ac0      	subs	r0, r0, r3
   11ba4:	4152      	adcs	r2, r2
   11ba6:	0a43      	lsrs	r3, r0, #9
   11ba8:	428b      	cmp	r3, r1
   11baa:	d301      	bcc.n	11bb0 <__divsi3+0x94>
   11bac:	024b      	lsls	r3, r1, #9
   11bae:	1ac0      	subs	r0, r0, r3
   11bb0:	4152      	adcs	r2, r2
   11bb2:	0a03      	lsrs	r3, r0, #8
   11bb4:	428b      	cmp	r3, r1
   11bb6:	d301      	bcc.n	11bbc <__divsi3+0xa0>
   11bb8:	020b      	lsls	r3, r1, #8
   11bba:	1ac0      	subs	r0, r0, r3
   11bbc:	4152      	adcs	r2, r2
   11bbe:	d2cd      	bcs.n	11b5c <__divsi3+0x40>
   11bc0:	09c3      	lsrs	r3, r0, #7
   11bc2:	428b      	cmp	r3, r1
   11bc4:	d301      	bcc.n	11bca <__divsi3+0xae>
   11bc6:	01cb      	lsls	r3, r1, #7
   11bc8:	1ac0      	subs	r0, r0, r3
   11bca:	4152      	adcs	r2, r2
   11bcc:	0983      	lsrs	r3, r0, #6
   11bce:	428b      	cmp	r3, r1
   11bd0:	d301      	bcc.n	11bd6 <__divsi3+0xba>
   11bd2:	018b      	lsls	r3, r1, #6
   11bd4:	1ac0      	subs	r0, r0, r3
   11bd6:	4152      	adcs	r2, r2
   11bd8:	0943      	lsrs	r3, r0, #5
   11bda:	428b      	cmp	r3, r1
   11bdc:	d301      	bcc.n	11be2 <__divsi3+0xc6>
   11bde:	014b      	lsls	r3, r1, #5
   11be0:	1ac0      	subs	r0, r0, r3
   11be2:	4152      	adcs	r2, r2
   11be4:	0903      	lsrs	r3, r0, #4
   11be6:	428b      	cmp	r3, r1
   11be8:	d301      	bcc.n	11bee <__divsi3+0xd2>
   11bea:	010b      	lsls	r3, r1, #4
   11bec:	1ac0      	subs	r0, r0, r3
   11bee:	4152      	adcs	r2, r2
   11bf0:	08c3      	lsrs	r3, r0, #3
   11bf2:	428b      	cmp	r3, r1
   11bf4:	d301      	bcc.n	11bfa <__divsi3+0xde>
   11bf6:	00cb      	lsls	r3, r1, #3
   11bf8:	1ac0      	subs	r0, r0, r3
   11bfa:	4152      	adcs	r2, r2
   11bfc:	0883      	lsrs	r3, r0, #2
   11bfe:	428b      	cmp	r3, r1
   11c00:	d301      	bcc.n	11c06 <__divsi3+0xea>
   11c02:	008b      	lsls	r3, r1, #2
   11c04:	1ac0      	subs	r0, r0, r3
   11c06:	4152      	adcs	r2, r2
   11c08:	0843      	lsrs	r3, r0, #1
   11c0a:	428b      	cmp	r3, r1
   11c0c:	d301      	bcc.n	11c12 <__divsi3+0xf6>
   11c0e:	004b      	lsls	r3, r1, #1
   11c10:	1ac0      	subs	r0, r0, r3
   11c12:	4152      	adcs	r2, r2
   11c14:	1a41      	subs	r1, r0, r1
   11c16:	d200      	bcs.n	11c1a <__divsi3+0xfe>
   11c18:	4601      	mov	r1, r0
   11c1a:	4152      	adcs	r2, r2
   11c1c:	4610      	mov	r0, r2
   11c1e:	4770      	bx	lr
   11c20:	e05d      	b.n	11cde <__divsi3+0x1c2>
   11c22:	0fca      	lsrs	r2, r1, #31
   11c24:	d000      	beq.n	11c28 <__divsi3+0x10c>
   11c26:	4249      	negs	r1, r1
   11c28:	1003      	asrs	r3, r0, #32
   11c2a:	d300      	bcc.n	11c2e <__divsi3+0x112>
   11c2c:	4240      	negs	r0, r0
   11c2e:	4053      	eors	r3, r2
   11c30:	2200      	movs	r2, #0
   11c32:	469c      	mov	ip, r3
   11c34:	0903      	lsrs	r3, r0, #4
   11c36:	428b      	cmp	r3, r1
   11c38:	d32d      	bcc.n	11c96 <__divsi3+0x17a>
   11c3a:	0a03      	lsrs	r3, r0, #8
   11c3c:	428b      	cmp	r3, r1
   11c3e:	d312      	bcc.n	11c66 <__divsi3+0x14a>
   11c40:	22fc      	movs	r2, #252	; 0xfc
   11c42:	0189      	lsls	r1, r1, #6
   11c44:	ba12      	rev	r2, r2
   11c46:	0a03      	lsrs	r3, r0, #8
   11c48:	428b      	cmp	r3, r1
   11c4a:	d30c      	bcc.n	11c66 <__divsi3+0x14a>
   11c4c:	0189      	lsls	r1, r1, #6
   11c4e:	1192      	asrs	r2, r2, #6
   11c50:	428b      	cmp	r3, r1
   11c52:	d308      	bcc.n	11c66 <__divsi3+0x14a>
   11c54:	0189      	lsls	r1, r1, #6
   11c56:	1192      	asrs	r2, r2, #6
   11c58:	428b      	cmp	r3, r1
   11c5a:	d304      	bcc.n	11c66 <__divsi3+0x14a>
   11c5c:	0189      	lsls	r1, r1, #6
   11c5e:	d03a      	beq.n	11cd6 <__divsi3+0x1ba>
   11c60:	1192      	asrs	r2, r2, #6
   11c62:	e000      	b.n	11c66 <__divsi3+0x14a>
   11c64:	0989      	lsrs	r1, r1, #6
   11c66:	09c3      	lsrs	r3, r0, #7
   11c68:	428b      	cmp	r3, r1
   11c6a:	d301      	bcc.n	11c70 <__divsi3+0x154>
   11c6c:	01cb      	lsls	r3, r1, #7
   11c6e:	1ac0      	subs	r0, r0, r3
   11c70:	4152      	adcs	r2, r2
   11c72:	0983      	lsrs	r3, r0, #6
   11c74:	428b      	cmp	r3, r1
   11c76:	d301      	bcc.n	11c7c <__divsi3+0x160>
   11c78:	018b      	lsls	r3, r1, #6
   11c7a:	1ac0      	subs	r0, r0, r3
   11c7c:	4152      	adcs	r2, r2
   11c7e:	0943      	lsrs	r3, r0, #5
   11c80:	428b      	cmp	r3, r1
   11c82:	d301      	bcc.n	11c88 <__divsi3+0x16c>
   11c84:	014b      	lsls	r3, r1, #5
   11c86:	1ac0      	subs	r0, r0, r3
   11c88:	4152      	adcs	r2, r2
   11c8a:	0903      	lsrs	r3, r0, #4
   11c8c:	428b      	cmp	r3, r1
   11c8e:	d301      	bcc.n	11c94 <__divsi3+0x178>
   11c90:	010b      	lsls	r3, r1, #4
   11c92:	1ac0      	subs	r0, r0, r3
   11c94:	4152      	adcs	r2, r2
   11c96:	08c3      	lsrs	r3, r0, #3
   11c98:	428b      	cmp	r3, r1
   11c9a:	d301      	bcc.n	11ca0 <__divsi3+0x184>
   11c9c:	00cb      	lsls	r3, r1, #3
   11c9e:	1ac0      	subs	r0, r0, r3
   11ca0:	4152      	adcs	r2, r2
   11ca2:	0883      	lsrs	r3, r0, #2
   11ca4:	428b      	cmp	r3, r1
   11ca6:	d301      	bcc.n	11cac <__divsi3+0x190>
   11ca8:	008b      	lsls	r3, r1, #2
   11caa:	1ac0      	subs	r0, r0, r3
   11cac:	4152      	adcs	r2, r2
   11cae:	d2d9      	bcs.n	11c64 <__divsi3+0x148>
   11cb0:	0843      	lsrs	r3, r0, #1
   11cb2:	428b      	cmp	r3, r1
   11cb4:	d301      	bcc.n	11cba <__divsi3+0x19e>
   11cb6:	004b      	lsls	r3, r1, #1
   11cb8:	1ac0      	subs	r0, r0, r3
   11cba:	4152      	adcs	r2, r2
   11cbc:	1a41      	subs	r1, r0, r1
   11cbe:	d200      	bcs.n	11cc2 <__divsi3+0x1a6>
   11cc0:	4601      	mov	r1, r0
   11cc2:	4663      	mov	r3, ip
   11cc4:	4152      	adcs	r2, r2
   11cc6:	105b      	asrs	r3, r3, #1
   11cc8:	4610      	mov	r0, r2
   11cca:	d301      	bcc.n	11cd0 <__divsi3+0x1b4>
   11ccc:	4240      	negs	r0, r0
   11cce:	2b00      	cmp	r3, #0
   11cd0:	d500      	bpl.n	11cd4 <__divsi3+0x1b8>
   11cd2:	4249      	negs	r1, r1
   11cd4:	4770      	bx	lr
   11cd6:	4663      	mov	r3, ip
   11cd8:	105b      	asrs	r3, r3, #1
   11cda:	d300      	bcc.n	11cde <__divsi3+0x1c2>
   11cdc:	4240      	negs	r0, r0
   11cde:	b501      	push	{r0, lr}
   11ce0:	2000      	movs	r0, #0
   11ce2:	f000 f805 	bl	11cf0 <__aeabi_idiv0>
   11ce6:	bd02      	pop	{r1, pc}

00011ce8 <__aeabi_idivmod>:
   11ce8:	2900      	cmp	r1, #0
   11cea:	d0f8      	beq.n	11cde <__divsi3+0x1c2>
   11cec:	e716      	b.n	11b1c <__divsi3>
   11cee:	4770      	bx	lr

00011cf0 <__aeabi_idiv0>:
   11cf0:	4770      	bx	lr
   11cf2:	46c0      	nop			; (mov r8, r8)

00011cf4 <__aeabi_cfrcmple>:
   11cf4:	4684      	mov	ip, r0
   11cf6:	1c08      	adds	r0, r1, #0
   11cf8:	4661      	mov	r1, ip
   11cfa:	e7ff      	b.n	11cfc <__aeabi_cfcmpeq>

00011cfc <__aeabi_cfcmpeq>:
   11cfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   11cfe:	f000 fcb5 	bl	1266c <__lesf2>
   11d02:	2800      	cmp	r0, #0
   11d04:	d401      	bmi.n	11d0a <__aeabi_cfcmpeq+0xe>
   11d06:	2100      	movs	r1, #0
   11d08:	42c8      	cmn	r0, r1
   11d0a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00011d0c <__aeabi_fcmpeq>:
   11d0c:	b510      	push	{r4, lr}
   11d0e:	f000 fc47 	bl	125a0 <__eqsf2>
   11d12:	4240      	negs	r0, r0
   11d14:	3001      	adds	r0, #1
   11d16:	bd10      	pop	{r4, pc}

00011d18 <__aeabi_fcmplt>:
   11d18:	b510      	push	{r4, lr}
   11d1a:	f000 fca7 	bl	1266c <__lesf2>
   11d1e:	2800      	cmp	r0, #0
   11d20:	db01      	blt.n	11d26 <__aeabi_fcmplt+0xe>
   11d22:	2000      	movs	r0, #0
   11d24:	bd10      	pop	{r4, pc}
   11d26:	2001      	movs	r0, #1
   11d28:	bd10      	pop	{r4, pc}
   11d2a:	46c0      	nop			; (mov r8, r8)

00011d2c <__aeabi_fcmple>:
   11d2c:	b510      	push	{r4, lr}
   11d2e:	f000 fc9d 	bl	1266c <__lesf2>
   11d32:	2800      	cmp	r0, #0
   11d34:	dd01      	ble.n	11d3a <__aeabi_fcmple+0xe>
   11d36:	2000      	movs	r0, #0
   11d38:	bd10      	pop	{r4, pc}
   11d3a:	2001      	movs	r0, #1
   11d3c:	bd10      	pop	{r4, pc}
   11d3e:	46c0      	nop			; (mov r8, r8)

00011d40 <__aeabi_fcmpgt>:
   11d40:	b510      	push	{r4, lr}
   11d42:	f000 fc53 	bl	125ec <__gesf2>
   11d46:	2800      	cmp	r0, #0
   11d48:	dc01      	bgt.n	11d4e <__aeabi_fcmpgt+0xe>
   11d4a:	2000      	movs	r0, #0
   11d4c:	bd10      	pop	{r4, pc}
   11d4e:	2001      	movs	r0, #1
   11d50:	bd10      	pop	{r4, pc}
   11d52:	46c0      	nop			; (mov r8, r8)

00011d54 <__aeabi_fcmpge>:
   11d54:	b510      	push	{r4, lr}
   11d56:	f000 fc49 	bl	125ec <__gesf2>
   11d5a:	2800      	cmp	r0, #0
   11d5c:	da01      	bge.n	11d62 <__aeabi_fcmpge+0xe>
   11d5e:	2000      	movs	r0, #0
   11d60:	bd10      	pop	{r4, pc}
   11d62:	2001      	movs	r0, #1
   11d64:	bd10      	pop	{r4, pc}
   11d66:	46c0      	nop			; (mov r8, r8)

00011d68 <__aeabi_uldivmod>:
   11d68:	2b00      	cmp	r3, #0
   11d6a:	d111      	bne.n	11d90 <__aeabi_uldivmod+0x28>
   11d6c:	2a00      	cmp	r2, #0
   11d6e:	d10f      	bne.n	11d90 <__aeabi_uldivmod+0x28>
   11d70:	2900      	cmp	r1, #0
   11d72:	d100      	bne.n	11d76 <__aeabi_uldivmod+0xe>
   11d74:	2800      	cmp	r0, #0
   11d76:	d002      	beq.n	11d7e <__aeabi_uldivmod+0x16>
   11d78:	2100      	movs	r1, #0
   11d7a:	43c9      	mvns	r1, r1
   11d7c:	1c08      	adds	r0, r1, #0
   11d7e:	b407      	push	{r0, r1, r2}
   11d80:	4802      	ldr	r0, [pc, #8]	; (11d8c <__aeabi_uldivmod+0x24>)
   11d82:	a102      	add	r1, pc, #8	; (adr r1, 11d8c <__aeabi_uldivmod+0x24>)
   11d84:	1840      	adds	r0, r0, r1
   11d86:	9002      	str	r0, [sp, #8]
   11d88:	bd03      	pop	{r0, r1, pc}
   11d8a:	46c0      	nop			; (mov r8, r8)
   11d8c:	ffffff65 	.word	0xffffff65
   11d90:	b403      	push	{r0, r1}
   11d92:	4668      	mov	r0, sp
   11d94:	b501      	push	{r0, lr}
   11d96:	9802      	ldr	r0, [sp, #8]
   11d98:	f000 f868 	bl	11e6c <__udivmoddi4>
   11d9c:	9b01      	ldr	r3, [sp, #4]
   11d9e:	469e      	mov	lr, r3
   11da0:	b002      	add	sp, #8
   11da2:	bc0c      	pop	{r2, r3}
   11da4:	4770      	bx	lr
   11da6:	46c0      	nop			; (mov r8, r8)

00011da8 <__aeabi_lmul>:
   11da8:	b5f0      	push	{r4, r5, r6, r7, lr}
   11daa:	46ce      	mov	lr, r9
   11dac:	4647      	mov	r7, r8
   11dae:	0415      	lsls	r5, r2, #16
   11db0:	0c2d      	lsrs	r5, r5, #16
   11db2:	002e      	movs	r6, r5
   11db4:	b580      	push	{r7, lr}
   11db6:	0407      	lsls	r7, r0, #16
   11db8:	0c14      	lsrs	r4, r2, #16
   11dba:	0c3f      	lsrs	r7, r7, #16
   11dbc:	4699      	mov	r9, r3
   11dbe:	0c03      	lsrs	r3, r0, #16
   11dc0:	437e      	muls	r6, r7
   11dc2:	435d      	muls	r5, r3
   11dc4:	4367      	muls	r7, r4
   11dc6:	4363      	muls	r3, r4
   11dc8:	197f      	adds	r7, r7, r5
   11dca:	0c34      	lsrs	r4, r6, #16
   11dcc:	19e4      	adds	r4, r4, r7
   11dce:	469c      	mov	ip, r3
   11dd0:	42a5      	cmp	r5, r4
   11dd2:	d903      	bls.n	11ddc <__aeabi_lmul+0x34>
   11dd4:	2380      	movs	r3, #128	; 0x80
   11dd6:	025b      	lsls	r3, r3, #9
   11dd8:	4698      	mov	r8, r3
   11dda:	44c4      	add	ip, r8
   11ddc:	464b      	mov	r3, r9
   11dde:	4351      	muls	r1, r2
   11de0:	4343      	muls	r3, r0
   11de2:	0436      	lsls	r6, r6, #16
   11de4:	0c36      	lsrs	r6, r6, #16
   11de6:	0c25      	lsrs	r5, r4, #16
   11de8:	0424      	lsls	r4, r4, #16
   11dea:	4465      	add	r5, ip
   11dec:	19a4      	adds	r4, r4, r6
   11dee:	1859      	adds	r1, r3, r1
   11df0:	1949      	adds	r1, r1, r5
   11df2:	0020      	movs	r0, r4
   11df4:	bc0c      	pop	{r2, r3}
   11df6:	4690      	mov	r8, r2
   11df8:	4699      	mov	r9, r3
   11dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}

00011dfc <__aeabi_f2uiz>:
   11dfc:	219e      	movs	r1, #158	; 0x9e
   11dfe:	b510      	push	{r4, lr}
   11e00:	05c9      	lsls	r1, r1, #23
   11e02:	1c04      	adds	r4, r0, #0
   11e04:	f7ff ffa6 	bl	11d54 <__aeabi_fcmpge>
   11e08:	2800      	cmp	r0, #0
   11e0a:	d103      	bne.n	11e14 <__aeabi_f2uiz+0x18>
   11e0c:	1c20      	adds	r0, r4, #0
   11e0e:	f000 ff2b 	bl	12c68 <__aeabi_f2iz>
   11e12:	bd10      	pop	{r4, pc}
   11e14:	219e      	movs	r1, #158	; 0x9e
   11e16:	1c20      	adds	r0, r4, #0
   11e18:	05c9      	lsls	r1, r1, #23
   11e1a:	f000 fd89 	bl	12930 <__aeabi_fsub>
   11e1e:	f000 ff23 	bl	12c68 <__aeabi_f2iz>
   11e22:	2380      	movs	r3, #128	; 0x80
   11e24:	061b      	lsls	r3, r3, #24
   11e26:	469c      	mov	ip, r3
   11e28:	4460      	add	r0, ip
   11e2a:	e7f2      	b.n	11e12 <__aeabi_f2uiz+0x16>

00011e2c <__aeabi_f2ulz>:
   11e2c:	b570      	push	{r4, r5, r6, lr}
   11e2e:	f002 fc59 	bl	146e4 <__aeabi_f2d>
   11e32:	2200      	movs	r2, #0
   11e34:	4b0b      	ldr	r3, [pc, #44]	; (11e64 <__aeabi_f2ulz+0x38>)
   11e36:	000d      	movs	r5, r1
   11e38:	0004      	movs	r4, r0
   11e3a:	f001 fe0f 	bl	13a5c <__aeabi_dmul>
   11e3e:	f002 fd57 	bl	148f0 <__aeabi_d2uiz>
   11e42:	0006      	movs	r6, r0
   11e44:	f002 fc16 	bl	14674 <__aeabi_ui2d>
   11e48:	2200      	movs	r2, #0
   11e4a:	4b07      	ldr	r3, [pc, #28]	; (11e68 <__aeabi_f2ulz+0x3c>)
   11e4c:	f001 fe06 	bl	13a5c <__aeabi_dmul>
   11e50:	0002      	movs	r2, r0
   11e52:	000b      	movs	r3, r1
   11e54:	0020      	movs	r0, r4
   11e56:	0029      	movs	r1, r5
   11e58:	f002 f880 	bl	13f5c <__aeabi_dsub>
   11e5c:	f002 fd48 	bl	148f0 <__aeabi_d2uiz>
   11e60:	0031      	movs	r1, r6
   11e62:	bd70      	pop	{r4, r5, r6, pc}
   11e64:	3df00000 	.word	0x3df00000
   11e68:	41f00000 	.word	0x41f00000

00011e6c <__udivmoddi4>:
   11e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   11e6e:	4657      	mov	r7, sl
   11e70:	464e      	mov	r6, r9
   11e72:	4645      	mov	r5, r8
   11e74:	46de      	mov	lr, fp
   11e76:	b5e0      	push	{r5, r6, r7, lr}
   11e78:	0004      	movs	r4, r0
   11e7a:	b083      	sub	sp, #12
   11e7c:	000d      	movs	r5, r1
   11e7e:	4692      	mov	sl, r2
   11e80:	4699      	mov	r9, r3
   11e82:	428b      	cmp	r3, r1
   11e84:	d82f      	bhi.n	11ee6 <__udivmoddi4+0x7a>
   11e86:	d02c      	beq.n	11ee2 <__udivmoddi4+0x76>
   11e88:	4649      	mov	r1, r9
   11e8a:	4650      	mov	r0, sl
   11e8c:	f002 fd24 	bl	148d8 <__clzdi2>
   11e90:	0029      	movs	r1, r5
   11e92:	0006      	movs	r6, r0
   11e94:	0020      	movs	r0, r4
   11e96:	f002 fd1f 	bl	148d8 <__clzdi2>
   11e9a:	1a33      	subs	r3, r6, r0
   11e9c:	4698      	mov	r8, r3
   11e9e:	3b20      	subs	r3, #32
   11ea0:	469b      	mov	fp, r3
   11ea2:	d500      	bpl.n	11ea6 <__udivmoddi4+0x3a>
   11ea4:	e074      	b.n	11f90 <__udivmoddi4+0x124>
   11ea6:	4653      	mov	r3, sl
   11ea8:	465a      	mov	r2, fp
   11eaa:	4093      	lsls	r3, r2
   11eac:	001f      	movs	r7, r3
   11eae:	4653      	mov	r3, sl
   11eb0:	4642      	mov	r2, r8
   11eb2:	4093      	lsls	r3, r2
   11eb4:	001e      	movs	r6, r3
   11eb6:	42af      	cmp	r7, r5
   11eb8:	d829      	bhi.n	11f0e <__udivmoddi4+0xa2>
   11eba:	d026      	beq.n	11f0a <__udivmoddi4+0x9e>
   11ebc:	465b      	mov	r3, fp
   11ebe:	1ba4      	subs	r4, r4, r6
   11ec0:	41bd      	sbcs	r5, r7
   11ec2:	2b00      	cmp	r3, #0
   11ec4:	da00      	bge.n	11ec8 <__udivmoddi4+0x5c>
   11ec6:	e079      	b.n	11fbc <__udivmoddi4+0x150>
   11ec8:	2200      	movs	r2, #0
   11eca:	2300      	movs	r3, #0
   11ecc:	9200      	str	r2, [sp, #0]
   11ece:	9301      	str	r3, [sp, #4]
   11ed0:	2301      	movs	r3, #1
   11ed2:	465a      	mov	r2, fp
   11ed4:	4093      	lsls	r3, r2
   11ed6:	9301      	str	r3, [sp, #4]
   11ed8:	2301      	movs	r3, #1
   11eda:	4642      	mov	r2, r8
   11edc:	4093      	lsls	r3, r2
   11ede:	9300      	str	r3, [sp, #0]
   11ee0:	e019      	b.n	11f16 <__udivmoddi4+0xaa>
   11ee2:	4282      	cmp	r2, r0
   11ee4:	d9d0      	bls.n	11e88 <__udivmoddi4+0x1c>
   11ee6:	2200      	movs	r2, #0
   11ee8:	2300      	movs	r3, #0
   11eea:	9200      	str	r2, [sp, #0]
   11eec:	9301      	str	r3, [sp, #4]
   11eee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11ef0:	2b00      	cmp	r3, #0
   11ef2:	d001      	beq.n	11ef8 <__udivmoddi4+0x8c>
   11ef4:	601c      	str	r4, [r3, #0]
   11ef6:	605d      	str	r5, [r3, #4]
   11ef8:	9800      	ldr	r0, [sp, #0]
   11efa:	9901      	ldr	r1, [sp, #4]
   11efc:	b003      	add	sp, #12
   11efe:	bc3c      	pop	{r2, r3, r4, r5}
   11f00:	4690      	mov	r8, r2
   11f02:	4699      	mov	r9, r3
   11f04:	46a2      	mov	sl, r4
   11f06:	46ab      	mov	fp, r5
   11f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11f0a:	42a3      	cmp	r3, r4
   11f0c:	d9d6      	bls.n	11ebc <__udivmoddi4+0x50>
   11f0e:	2200      	movs	r2, #0
   11f10:	2300      	movs	r3, #0
   11f12:	9200      	str	r2, [sp, #0]
   11f14:	9301      	str	r3, [sp, #4]
   11f16:	4643      	mov	r3, r8
   11f18:	2b00      	cmp	r3, #0
   11f1a:	d0e8      	beq.n	11eee <__udivmoddi4+0x82>
   11f1c:	07fb      	lsls	r3, r7, #31
   11f1e:	0872      	lsrs	r2, r6, #1
   11f20:	431a      	orrs	r2, r3
   11f22:	4646      	mov	r6, r8
   11f24:	087b      	lsrs	r3, r7, #1
   11f26:	e00e      	b.n	11f46 <__udivmoddi4+0xda>
   11f28:	42ab      	cmp	r3, r5
   11f2a:	d101      	bne.n	11f30 <__udivmoddi4+0xc4>
   11f2c:	42a2      	cmp	r2, r4
   11f2e:	d80c      	bhi.n	11f4a <__udivmoddi4+0xde>
   11f30:	1aa4      	subs	r4, r4, r2
   11f32:	419d      	sbcs	r5, r3
   11f34:	2001      	movs	r0, #1
   11f36:	1924      	adds	r4, r4, r4
   11f38:	416d      	adcs	r5, r5
   11f3a:	2100      	movs	r1, #0
   11f3c:	3e01      	subs	r6, #1
   11f3e:	1824      	adds	r4, r4, r0
   11f40:	414d      	adcs	r5, r1
   11f42:	2e00      	cmp	r6, #0
   11f44:	d006      	beq.n	11f54 <__udivmoddi4+0xe8>
   11f46:	42ab      	cmp	r3, r5
   11f48:	d9ee      	bls.n	11f28 <__udivmoddi4+0xbc>
   11f4a:	3e01      	subs	r6, #1
   11f4c:	1924      	adds	r4, r4, r4
   11f4e:	416d      	adcs	r5, r5
   11f50:	2e00      	cmp	r6, #0
   11f52:	d1f8      	bne.n	11f46 <__udivmoddi4+0xda>
   11f54:	465b      	mov	r3, fp
   11f56:	9800      	ldr	r0, [sp, #0]
   11f58:	9901      	ldr	r1, [sp, #4]
   11f5a:	1900      	adds	r0, r0, r4
   11f5c:	4169      	adcs	r1, r5
   11f5e:	2b00      	cmp	r3, #0
   11f60:	db22      	blt.n	11fa8 <__udivmoddi4+0x13c>
   11f62:	002b      	movs	r3, r5
   11f64:	465a      	mov	r2, fp
   11f66:	40d3      	lsrs	r3, r2
   11f68:	002a      	movs	r2, r5
   11f6a:	4644      	mov	r4, r8
   11f6c:	40e2      	lsrs	r2, r4
   11f6e:	001c      	movs	r4, r3
   11f70:	465b      	mov	r3, fp
   11f72:	0015      	movs	r5, r2
   11f74:	2b00      	cmp	r3, #0
   11f76:	db2c      	blt.n	11fd2 <__udivmoddi4+0x166>
   11f78:	0026      	movs	r6, r4
   11f7a:	409e      	lsls	r6, r3
   11f7c:	0033      	movs	r3, r6
   11f7e:	0026      	movs	r6, r4
   11f80:	4647      	mov	r7, r8
   11f82:	40be      	lsls	r6, r7
   11f84:	0032      	movs	r2, r6
   11f86:	1a80      	subs	r0, r0, r2
   11f88:	4199      	sbcs	r1, r3
   11f8a:	9000      	str	r0, [sp, #0]
   11f8c:	9101      	str	r1, [sp, #4]
   11f8e:	e7ae      	b.n	11eee <__udivmoddi4+0x82>
   11f90:	4642      	mov	r2, r8
   11f92:	2320      	movs	r3, #32
   11f94:	1a9b      	subs	r3, r3, r2
   11f96:	4652      	mov	r2, sl
   11f98:	40da      	lsrs	r2, r3
   11f9a:	4641      	mov	r1, r8
   11f9c:	0013      	movs	r3, r2
   11f9e:	464a      	mov	r2, r9
   11fa0:	408a      	lsls	r2, r1
   11fa2:	0017      	movs	r7, r2
   11fa4:	431f      	orrs	r7, r3
   11fa6:	e782      	b.n	11eae <__udivmoddi4+0x42>
   11fa8:	4642      	mov	r2, r8
   11faa:	2320      	movs	r3, #32
   11fac:	1a9b      	subs	r3, r3, r2
   11fae:	002a      	movs	r2, r5
   11fb0:	4646      	mov	r6, r8
   11fb2:	409a      	lsls	r2, r3
   11fb4:	0023      	movs	r3, r4
   11fb6:	40f3      	lsrs	r3, r6
   11fb8:	4313      	orrs	r3, r2
   11fba:	e7d5      	b.n	11f68 <__udivmoddi4+0xfc>
   11fbc:	4642      	mov	r2, r8
   11fbe:	2320      	movs	r3, #32
   11fc0:	2100      	movs	r1, #0
   11fc2:	1a9b      	subs	r3, r3, r2
   11fc4:	2200      	movs	r2, #0
   11fc6:	9100      	str	r1, [sp, #0]
   11fc8:	9201      	str	r2, [sp, #4]
   11fca:	2201      	movs	r2, #1
   11fcc:	40da      	lsrs	r2, r3
   11fce:	9201      	str	r2, [sp, #4]
   11fd0:	e782      	b.n	11ed8 <__udivmoddi4+0x6c>
   11fd2:	4642      	mov	r2, r8
   11fd4:	2320      	movs	r3, #32
   11fd6:	0026      	movs	r6, r4
   11fd8:	1a9b      	subs	r3, r3, r2
   11fda:	40de      	lsrs	r6, r3
   11fdc:	002f      	movs	r7, r5
   11fde:	46b4      	mov	ip, r6
   11fe0:	4097      	lsls	r7, r2
   11fe2:	4666      	mov	r6, ip
   11fe4:	003b      	movs	r3, r7
   11fe6:	4333      	orrs	r3, r6
   11fe8:	e7c9      	b.n	11f7e <__udivmoddi4+0x112>
   11fea:	46c0      	nop			; (mov r8, r8)

00011fec <__aeabi_fadd>:
   11fec:	b5f0      	push	{r4, r5, r6, r7, lr}
   11fee:	46c6      	mov	lr, r8
   11ff0:	024e      	lsls	r6, r1, #9
   11ff2:	0247      	lsls	r7, r0, #9
   11ff4:	0a76      	lsrs	r6, r6, #9
   11ff6:	0a7b      	lsrs	r3, r7, #9
   11ff8:	0044      	lsls	r4, r0, #1
   11ffa:	0fc5      	lsrs	r5, r0, #31
   11ffc:	00f7      	lsls	r7, r6, #3
   11ffe:	0048      	lsls	r0, r1, #1
   12000:	4698      	mov	r8, r3
   12002:	b500      	push	{lr}
   12004:	0e24      	lsrs	r4, r4, #24
   12006:	002a      	movs	r2, r5
   12008:	00db      	lsls	r3, r3, #3
   1200a:	0e00      	lsrs	r0, r0, #24
   1200c:	0fc9      	lsrs	r1, r1, #31
   1200e:	46bc      	mov	ip, r7
   12010:	428d      	cmp	r5, r1
   12012:	d067      	beq.n	120e4 <__aeabi_fadd+0xf8>
   12014:	1a22      	subs	r2, r4, r0
   12016:	2a00      	cmp	r2, #0
   12018:	dc00      	bgt.n	1201c <__aeabi_fadd+0x30>
   1201a:	e0a5      	b.n	12168 <__aeabi_fadd+0x17c>
   1201c:	2800      	cmp	r0, #0
   1201e:	d13a      	bne.n	12096 <__aeabi_fadd+0xaa>
   12020:	2f00      	cmp	r7, #0
   12022:	d100      	bne.n	12026 <__aeabi_fadd+0x3a>
   12024:	e093      	b.n	1214e <__aeabi_fadd+0x162>
   12026:	1e51      	subs	r1, r2, #1
   12028:	2900      	cmp	r1, #0
   1202a:	d000      	beq.n	1202e <__aeabi_fadd+0x42>
   1202c:	e0bc      	b.n	121a8 <__aeabi_fadd+0x1bc>
   1202e:	2401      	movs	r4, #1
   12030:	1bdb      	subs	r3, r3, r7
   12032:	015a      	lsls	r2, r3, #5
   12034:	d546      	bpl.n	120c4 <__aeabi_fadd+0xd8>
   12036:	019b      	lsls	r3, r3, #6
   12038:	099e      	lsrs	r6, r3, #6
   1203a:	0030      	movs	r0, r6
   1203c:	f002 fc2e 	bl	1489c <__clzsi2>
   12040:	3805      	subs	r0, #5
   12042:	4086      	lsls	r6, r0
   12044:	4284      	cmp	r4, r0
   12046:	dd00      	ble.n	1204a <__aeabi_fadd+0x5e>
   12048:	e09d      	b.n	12186 <__aeabi_fadd+0x19a>
   1204a:	1b04      	subs	r4, r0, r4
   1204c:	0032      	movs	r2, r6
   1204e:	2020      	movs	r0, #32
   12050:	3401      	adds	r4, #1
   12052:	40e2      	lsrs	r2, r4
   12054:	1b04      	subs	r4, r0, r4
   12056:	40a6      	lsls	r6, r4
   12058:	0033      	movs	r3, r6
   1205a:	1e5e      	subs	r6, r3, #1
   1205c:	41b3      	sbcs	r3, r6
   1205e:	2400      	movs	r4, #0
   12060:	4313      	orrs	r3, r2
   12062:	075a      	lsls	r2, r3, #29
   12064:	d004      	beq.n	12070 <__aeabi_fadd+0x84>
   12066:	220f      	movs	r2, #15
   12068:	401a      	ands	r2, r3
   1206a:	2a04      	cmp	r2, #4
   1206c:	d000      	beq.n	12070 <__aeabi_fadd+0x84>
   1206e:	3304      	adds	r3, #4
   12070:	015a      	lsls	r2, r3, #5
   12072:	d529      	bpl.n	120c8 <__aeabi_fadd+0xdc>
   12074:	3401      	adds	r4, #1
   12076:	2cff      	cmp	r4, #255	; 0xff
   12078:	d100      	bne.n	1207c <__aeabi_fadd+0x90>
   1207a:	e081      	b.n	12180 <__aeabi_fadd+0x194>
   1207c:	002a      	movs	r2, r5
   1207e:	019b      	lsls	r3, r3, #6
   12080:	0a5b      	lsrs	r3, r3, #9
   12082:	b2e4      	uxtb	r4, r4
   12084:	025b      	lsls	r3, r3, #9
   12086:	05e4      	lsls	r4, r4, #23
   12088:	0a58      	lsrs	r0, r3, #9
   1208a:	07d2      	lsls	r2, r2, #31
   1208c:	4320      	orrs	r0, r4
   1208e:	4310      	orrs	r0, r2
   12090:	bc04      	pop	{r2}
   12092:	4690      	mov	r8, r2
   12094:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12096:	2cff      	cmp	r4, #255	; 0xff
   12098:	d0e3      	beq.n	12062 <__aeabi_fadd+0x76>
   1209a:	2180      	movs	r1, #128	; 0x80
   1209c:	0038      	movs	r0, r7
   1209e:	04c9      	lsls	r1, r1, #19
   120a0:	4308      	orrs	r0, r1
   120a2:	4684      	mov	ip, r0
   120a4:	2a1b      	cmp	r2, #27
   120a6:	dd00      	ble.n	120aa <__aeabi_fadd+0xbe>
   120a8:	e082      	b.n	121b0 <__aeabi_fadd+0x1c4>
   120aa:	2020      	movs	r0, #32
   120ac:	4661      	mov	r1, ip
   120ae:	40d1      	lsrs	r1, r2
   120b0:	1a82      	subs	r2, r0, r2
   120b2:	4660      	mov	r0, ip
   120b4:	4090      	lsls	r0, r2
   120b6:	0002      	movs	r2, r0
   120b8:	1e50      	subs	r0, r2, #1
   120ba:	4182      	sbcs	r2, r0
   120bc:	430a      	orrs	r2, r1
   120be:	1a9b      	subs	r3, r3, r2
   120c0:	015a      	lsls	r2, r3, #5
   120c2:	d4b8      	bmi.n	12036 <__aeabi_fadd+0x4a>
   120c4:	075a      	lsls	r2, r3, #29
   120c6:	d1ce      	bne.n	12066 <__aeabi_fadd+0x7a>
   120c8:	08de      	lsrs	r6, r3, #3
   120ca:	002a      	movs	r2, r5
   120cc:	2cff      	cmp	r4, #255	; 0xff
   120ce:	d13a      	bne.n	12146 <__aeabi_fadd+0x15a>
   120d0:	2e00      	cmp	r6, #0
   120d2:	d100      	bne.n	120d6 <__aeabi_fadd+0xea>
   120d4:	e0ae      	b.n	12234 <__aeabi_fadd+0x248>
   120d6:	2380      	movs	r3, #128	; 0x80
   120d8:	03db      	lsls	r3, r3, #15
   120da:	4333      	orrs	r3, r6
   120dc:	025b      	lsls	r3, r3, #9
   120de:	0a5b      	lsrs	r3, r3, #9
   120e0:	24ff      	movs	r4, #255	; 0xff
   120e2:	e7cf      	b.n	12084 <__aeabi_fadd+0x98>
   120e4:	1a21      	subs	r1, r4, r0
   120e6:	2900      	cmp	r1, #0
   120e8:	dd52      	ble.n	12190 <__aeabi_fadd+0x1a4>
   120ea:	2800      	cmp	r0, #0
   120ec:	d031      	beq.n	12152 <__aeabi_fadd+0x166>
   120ee:	2cff      	cmp	r4, #255	; 0xff
   120f0:	d0b7      	beq.n	12062 <__aeabi_fadd+0x76>
   120f2:	2080      	movs	r0, #128	; 0x80
   120f4:	003e      	movs	r6, r7
   120f6:	04c0      	lsls	r0, r0, #19
   120f8:	4306      	orrs	r6, r0
   120fa:	46b4      	mov	ip, r6
   120fc:	291b      	cmp	r1, #27
   120fe:	dd00      	ble.n	12102 <__aeabi_fadd+0x116>
   12100:	e0aa      	b.n	12258 <__aeabi_fadd+0x26c>
   12102:	2620      	movs	r6, #32
   12104:	4660      	mov	r0, ip
   12106:	40c8      	lsrs	r0, r1
   12108:	1a71      	subs	r1, r6, r1
   1210a:	4666      	mov	r6, ip
   1210c:	408e      	lsls	r6, r1
   1210e:	0031      	movs	r1, r6
   12110:	1e4e      	subs	r6, r1, #1
   12112:	41b1      	sbcs	r1, r6
   12114:	4301      	orrs	r1, r0
   12116:	185b      	adds	r3, r3, r1
   12118:	0159      	lsls	r1, r3, #5
   1211a:	d5d3      	bpl.n	120c4 <__aeabi_fadd+0xd8>
   1211c:	3401      	adds	r4, #1
   1211e:	2cff      	cmp	r4, #255	; 0xff
   12120:	d100      	bne.n	12124 <__aeabi_fadd+0x138>
   12122:	e087      	b.n	12234 <__aeabi_fadd+0x248>
   12124:	2201      	movs	r2, #1
   12126:	4978      	ldr	r1, [pc, #480]	; (12308 <__aeabi_fadd+0x31c>)
   12128:	401a      	ands	r2, r3
   1212a:	085b      	lsrs	r3, r3, #1
   1212c:	400b      	ands	r3, r1
   1212e:	4313      	orrs	r3, r2
   12130:	e797      	b.n	12062 <__aeabi_fadd+0x76>
   12132:	2c00      	cmp	r4, #0
   12134:	d000      	beq.n	12138 <__aeabi_fadd+0x14c>
   12136:	e0a7      	b.n	12288 <__aeabi_fadd+0x29c>
   12138:	2b00      	cmp	r3, #0
   1213a:	d000      	beq.n	1213e <__aeabi_fadd+0x152>
   1213c:	e0b6      	b.n	122ac <__aeabi_fadd+0x2c0>
   1213e:	1e3b      	subs	r3, r7, #0
   12140:	d162      	bne.n	12208 <__aeabi_fadd+0x21c>
   12142:	2600      	movs	r6, #0
   12144:	2200      	movs	r2, #0
   12146:	0273      	lsls	r3, r6, #9
   12148:	0a5b      	lsrs	r3, r3, #9
   1214a:	b2e4      	uxtb	r4, r4
   1214c:	e79a      	b.n	12084 <__aeabi_fadd+0x98>
   1214e:	0014      	movs	r4, r2
   12150:	e787      	b.n	12062 <__aeabi_fadd+0x76>
   12152:	2f00      	cmp	r7, #0
   12154:	d04d      	beq.n	121f2 <__aeabi_fadd+0x206>
   12156:	1e48      	subs	r0, r1, #1
   12158:	2800      	cmp	r0, #0
   1215a:	d157      	bne.n	1220c <__aeabi_fadd+0x220>
   1215c:	4463      	add	r3, ip
   1215e:	2401      	movs	r4, #1
   12160:	015a      	lsls	r2, r3, #5
   12162:	d5af      	bpl.n	120c4 <__aeabi_fadd+0xd8>
   12164:	2402      	movs	r4, #2
   12166:	e7dd      	b.n	12124 <__aeabi_fadd+0x138>
   12168:	2a00      	cmp	r2, #0
   1216a:	d124      	bne.n	121b6 <__aeabi_fadd+0x1ca>
   1216c:	1c62      	adds	r2, r4, #1
   1216e:	b2d2      	uxtb	r2, r2
   12170:	2a01      	cmp	r2, #1
   12172:	ddde      	ble.n	12132 <__aeabi_fadd+0x146>
   12174:	1bde      	subs	r6, r3, r7
   12176:	0172      	lsls	r2, r6, #5
   12178:	d535      	bpl.n	121e6 <__aeabi_fadd+0x1fa>
   1217a:	1afe      	subs	r6, r7, r3
   1217c:	000d      	movs	r5, r1
   1217e:	e75c      	b.n	1203a <__aeabi_fadd+0x4e>
   12180:	002a      	movs	r2, r5
   12182:	2300      	movs	r3, #0
   12184:	e77e      	b.n	12084 <__aeabi_fadd+0x98>
   12186:	0033      	movs	r3, r6
   12188:	4a60      	ldr	r2, [pc, #384]	; (1230c <__aeabi_fadd+0x320>)
   1218a:	1a24      	subs	r4, r4, r0
   1218c:	4013      	ands	r3, r2
   1218e:	e768      	b.n	12062 <__aeabi_fadd+0x76>
   12190:	2900      	cmp	r1, #0
   12192:	d163      	bne.n	1225c <__aeabi_fadd+0x270>
   12194:	1c61      	adds	r1, r4, #1
   12196:	b2c8      	uxtb	r0, r1
   12198:	2801      	cmp	r0, #1
   1219a:	dd4e      	ble.n	1223a <__aeabi_fadd+0x24e>
   1219c:	29ff      	cmp	r1, #255	; 0xff
   1219e:	d049      	beq.n	12234 <__aeabi_fadd+0x248>
   121a0:	4463      	add	r3, ip
   121a2:	085b      	lsrs	r3, r3, #1
   121a4:	000c      	movs	r4, r1
   121a6:	e75c      	b.n	12062 <__aeabi_fadd+0x76>
   121a8:	2aff      	cmp	r2, #255	; 0xff
   121aa:	d041      	beq.n	12230 <__aeabi_fadd+0x244>
   121ac:	000a      	movs	r2, r1
   121ae:	e779      	b.n	120a4 <__aeabi_fadd+0xb8>
   121b0:	2201      	movs	r2, #1
   121b2:	1a9b      	subs	r3, r3, r2
   121b4:	e784      	b.n	120c0 <__aeabi_fadd+0xd4>
   121b6:	2c00      	cmp	r4, #0
   121b8:	d01d      	beq.n	121f6 <__aeabi_fadd+0x20a>
   121ba:	28ff      	cmp	r0, #255	; 0xff
   121bc:	d022      	beq.n	12204 <__aeabi_fadd+0x218>
   121be:	2480      	movs	r4, #128	; 0x80
   121c0:	04e4      	lsls	r4, r4, #19
   121c2:	4252      	negs	r2, r2
   121c4:	4323      	orrs	r3, r4
   121c6:	2a1b      	cmp	r2, #27
   121c8:	dd00      	ble.n	121cc <__aeabi_fadd+0x1e0>
   121ca:	e08a      	b.n	122e2 <__aeabi_fadd+0x2f6>
   121cc:	001c      	movs	r4, r3
   121ce:	2520      	movs	r5, #32
   121d0:	40d4      	lsrs	r4, r2
   121d2:	1aaa      	subs	r2, r5, r2
   121d4:	4093      	lsls	r3, r2
   121d6:	1e5a      	subs	r2, r3, #1
   121d8:	4193      	sbcs	r3, r2
   121da:	4323      	orrs	r3, r4
   121dc:	4662      	mov	r2, ip
   121de:	0004      	movs	r4, r0
   121e0:	1ad3      	subs	r3, r2, r3
   121e2:	000d      	movs	r5, r1
   121e4:	e725      	b.n	12032 <__aeabi_fadd+0x46>
   121e6:	2e00      	cmp	r6, #0
   121e8:	d000      	beq.n	121ec <__aeabi_fadd+0x200>
   121ea:	e726      	b.n	1203a <__aeabi_fadd+0x4e>
   121ec:	2200      	movs	r2, #0
   121ee:	2400      	movs	r4, #0
   121f0:	e7a9      	b.n	12146 <__aeabi_fadd+0x15a>
   121f2:	000c      	movs	r4, r1
   121f4:	e735      	b.n	12062 <__aeabi_fadd+0x76>
   121f6:	2b00      	cmp	r3, #0
   121f8:	d04d      	beq.n	12296 <__aeabi_fadd+0x2aa>
   121fa:	43d2      	mvns	r2, r2
   121fc:	2a00      	cmp	r2, #0
   121fe:	d0ed      	beq.n	121dc <__aeabi_fadd+0x1f0>
   12200:	28ff      	cmp	r0, #255	; 0xff
   12202:	d1e0      	bne.n	121c6 <__aeabi_fadd+0x1da>
   12204:	4663      	mov	r3, ip
   12206:	24ff      	movs	r4, #255	; 0xff
   12208:	000d      	movs	r5, r1
   1220a:	e72a      	b.n	12062 <__aeabi_fadd+0x76>
   1220c:	29ff      	cmp	r1, #255	; 0xff
   1220e:	d00f      	beq.n	12230 <__aeabi_fadd+0x244>
   12210:	0001      	movs	r1, r0
   12212:	e773      	b.n	120fc <__aeabi_fadd+0x110>
   12214:	2b00      	cmp	r3, #0
   12216:	d061      	beq.n	122dc <__aeabi_fadd+0x2f0>
   12218:	24ff      	movs	r4, #255	; 0xff
   1221a:	2f00      	cmp	r7, #0
   1221c:	d100      	bne.n	12220 <__aeabi_fadd+0x234>
   1221e:	e720      	b.n	12062 <__aeabi_fadd+0x76>
   12220:	2280      	movs	r2, #128	; 0x80
   12222:	4641      	mov	r1, r8
   12224:	03d2      	lsls	r2, r2, #15
   12226:	4211      	tst	r1, r2
   12228:	d002      	beq.n	12230 <__aeabi_fadd+0x244>
   1222a:	4216      	tst	r6, r2
   1222c:	d100      	bne.n	12230 <__aeabi_fadd+0x244>
   1222e:	003b      	movs	r3, r7
   12230:	24ff      	movs	r4, #255	; 0xff
   12232:	e716      	b.n	12062 <__aeabi_fadd+0x76>
   12234:	24ff      	movs	r4, #255	; 0xff
   12236:	2300      	movs	r3, #0
   12238:	e724      	b.n	12084 <__aeabi_fadd+0x98>
   1223a:	2c00      	cmp	r4, #0
   1223c:	d1ea      	bne.n	12214 <__aeabi_fadd+0x228>
   1223e:	2b00      	cmp	r3, #0
   12240:	d058      	beq.n	122f4 <__aeabi_fadd+0x308>
   12242:	2f00      	cmp	r7, #0
   12244:	d100      	bne.n	12248 <__aeabi_fadd+0x25c>
   12246:	e70c      	b.n	12062 <__aeabi_fadd+0x76>
   12248:	4463      	add	r3, ip
   1224a:	015a      	lsls	r2, r3, #5
   1224c:	d400      	bmi.n	12250 <__aeabi_fadd+0x264>
   1224e:	e739      	b.n	120c4 <__aeabi_fadd+0xd8>
   12250:	4a2e      	ldr	r2, [pc, #184]	; (1230c <__aeabi_fadd+0x320>)
   12252:	000c      	movs	r4, r1
   12254:	4013      	ands	r3, r2
   12256:	e704      	b.n	12062 <__aeabi_fadd+0x76>
   12258:	2101      	movs	r1, #1
   1225a:	e75c      	b.n	12116 <__aeabi_fadd+0x12a>
   1225c:	2c00      	cmp	r4, #0
   1225e:	d11e      	bne.n	1229e <__aeabi_fadd+0x2b2>
   12260:	2b00      	cmp	r3, #0
   12262:	d040      	beq.n	122e6 <__aeabi_fadd+0x2fa>
   12264:	43c9      	mvns	r1, r1
   12266:	2900      	cmp	r1, #0
   12268:	d00b      	beq.n	12282 <__aeabi_fadd+0x296>
   1226a:	28ff      	cmp	r0, #255	; 0xff
   1226c:	d036      	beq.n	122dc <__aeabi_fadd+0x2f0>
   1226e:	291b      	cmp	r1, #27
   12270:	dc47      	bgt.n	12302 <__aeabi_fadd+0x316>
   12272:	001c      	movs	r4, r3
   12274:	2620      	movs	r6, #32
   12276:	40cc      	lsrs	r4, r1
   12278:	1a71      	subs	r1, r6, r1
   1227a:	408b      	lsls	r3, r1
   1227c:	1e59      	subs	r1, r3, #1
   1227e:	418b      	sbcs	r3, r1
   12280:	4323      	orrs	r3, r4
   12282:	4463      	add	r3, ip
   12284:	0004      	movs	r4, r0
   12286:	e747      	b.n	12118 <__aeabi_fadd+0x12c>
   12288:	2b00      	cmp	r3, #0
   1228a:	d118      	bne.n	122be <__aeabi_fadd+0x2d2>
   1228c:	1e3b      	subs	r3, r7, #0
   1228e:	d02d      	beq.n	122ec <__aeabi_fadd+0x300>
   12290:	000d      	movs	r5, r1
   12292:	24ff      	movs	r4, #255	; 0xff
   12294:	e6e5      	b.n	12062 <__aeabi_fadd+0x76>
   12296:	003b      	movs	r3, r7
   12298:	0004      	movs	r4, r0
   1229a:	000d      	movs	r5, r1
   1229c:	e6e1      	b.n	12062 <__aeabi_fadd+0x76>
   1229e:	28ff      	cmp	r0, #255	; 0xff
   122a0:	d01c      	beq.n	122dc <__aeabi_fadd+0x2f0>
   122a2:	2480      	movs	r4, #128	; 0x80
   122a4:	04e4      	lsls	r4, r4, #19
   122a6:	4249      	negs	r1, r1
   122a8:	4323      	orrs	r3, r4
   122aa:	e7e0      	b.n	1226e <__aeabi_fadd+0x282>
   122ac:	2f00      	cmp	r7, #0
   122ae:	d100      	bne.n	122b2 <__aeabi_fadd+0x2c6>
   122b0:	e6d7      	b.n	12062 <__aeabi_fadd+0x76>
   122b2:	1bde      	subs	r6, r3, r7
   122b4:	0172      	lsls	r2, r6, #5
   122b6:	d51f      	bpl.n	122f8 <__aeabi_fadd+0x30c>
   122b8:	1afb      	subs	r3, r7, r3
   122ba:	000d      	movs	r5, r1
   122bc:	e6d1      	b.n	12062 <__aeabi_fadd+0x76>
   122be:	24ff      	movs	r4, #255	; 0xff
   122c0:	2f00      	cmp	r7, #0
   122c2:	d100      	bne.n	122c6 <__aeabi_fadd+0x2da>
   122c4:	e6cd      	b.n	12062 <__aeabi_fadd+0x76>
   122c6:	2280      	movs	r2, #128	; 0x80
   122c8:	4640      	mov	r0, r8
   122ca:	03d2      	lsls	r2, r2, #15
   122cc:	4210      	tst	r0, r2
   122ce:	d0af      	beq.n	12230 <__aeabi_fadd+0x244>
   122d0:	4216      	tst	r6, r2
   122d2:	d1ad      	bne.n	12230 <__aeabi_fadd+0x244>
   122d4:	003b      	movs	r3, r7
   122d6:	000d      	movs	r5, r1
   122d8:	24ff      	movs	r4, #255	; 0xff
   122da:	e6c2      	b.n	12062 <__aeabi_fadd+0x76>
   122dc:	4663      	mov	r3, ip
   122de:	24ff      	movs	r4, #255	; 0xff
   122e0:	e6bf      	b.n	12062 <__aeabi_fadd+0x76>
   122e2:	2301      	movs	r3, #1
   122e4:	e77a      	b.n	121dc <__aeabi_fadd+0x1f0>
   122e6:	003b      	movs	r3, r7
   122e8:	0004      	movs	r4, r0
   122ea:	e6ba      	b.n	12062 <__aeabi_fadd+0x76>
   122ec:	2680      	movs	r6, #128	; 0x80
   122ee:	2200      	movs	r2, #0
   122f0:	03f6      	lsls	r6, r6, #15
   122f2:	e6f0      	b.n	120d6 <__aeabi_fadd+0xea>
   122f4:	003b      	movs	r3, r7
   122f6:	e6b4      	b.n	12062 <__aeabi_fadd+0x76>
   122f8:	1e33      	subs	r3, r6, #0
   122fa:	d000      	beq.n	122fe <__aeabi_fadd+0x312>
   122fc:	e6e2      	b.n	120c4 <__aeabi_fadd+0xd8>
   122fe:	2200      	movs	r2, #0
   12300:	e721      	b.n	12146 <__aeabi_fadd+0x15a>
   12302:	2301      	movs	r3, #1
   12304:	e7bd      	b.n	12282 <__aeabi_fadd+0x296>
   12306:	46c0      	nop			; (mov r8, r8)
   12308:	7dffffff 	.word	0x7dffffff
   1230c:	fbffffff 	.word	0xfbffffff

00012310 <__aeabi_fdiv>:
   12310:	b5f0      	push	{r4, r5, r6, r7, lr}
   12312:	4657      	mov	r7, sl
   12314:	464e      	mov	r6, r9
   12316:	46de      	mov	lr, fp
   12318:	4645      	mov	r5, r8
   1231a:	b5e0      	push	{r5, r6, r7, lr}
   1231c:	0244      	lsls	r4, r0, #9
   1231e:	0043      	lsls	r3, r0, #1
   12320:	0fc6      	lsrs	r6, r0, #31
   12322:	b083      	sub	sp, #12
   12324:	1c0f      	adds	r7, r1, #0
   12326:	0a64      	lsrs	r4, r4, #9
   12328:	0e1b      	lsrs	r3, r3, #24
   1232a:	46b2      	mov	sl, r6
   1232c:	d053      	beq.n	123d6 <__aeabi_fdiv+0xc6>
   1232e:	2bff      	cmp	r3, #255	; 0xff
   12330:	d027      	beq.n	12382 <__aeabi_fdiv+0x72>
   12332:	2280      	movs	r2, #128	; 0x80
   12334:	00e4      	lsls	r4, r4, #3
   12336:	04d2      	lsls	r2, r2, #19
   12338:	4314      	orrs	r4, r2
   1233a:	227f      	movs	r2, #127	; 0x7f
   1233c:	4252      	negs	r2, r2
   1233e:	4690      	mov	r8, r2
   12340:	4498      	add	r8, r3
   12342:	2300      	movs	r3, #0
   12344:	4699      	mov	r9, r3
   12346:	469b      	mov	fp, r3
   12348:	027d      	lsls	r5, r7, #9
   1234a:	0078      	lsls	r0, r7, #1
   1234c:	0ffb      	lsrs	r3, r7, #31
   1234e:	0a6d      	lsrs	r5, r5, #9
   12350:	0e00      	lsrs	r0, r0, #24
   12352:	9300      	str	r3, [sp, #0]
   12354:	d024      	beq.n	123a0 <__aeabi_fdiv+0x90>
   12356:	28ff      	cmp	r0, #255	; 0xff
   12358:	d046      	beq.n	123e8 <__aeabi_fdiv+0xd8>
   1235a:	2380      	movs	r3, #128	; 0x80
   1235c:	2100      	movs	r1, #0
   1235e:	00ed      	lsls	r5, r5, #3
   12360:	04db      	lsls	r3, r3, #19
   12362:	431d      	orrs	r5, r3
   12364:	387f      	subs	r0, #127	; 0x7f
   12366:	4647      	mov	r7, r8
   12368:	1a38      	subs	r0, r7, r0
   1236a:	464f      	mov	r7, r9
   1236c:	430f      	orrs	r7, r1
   1236e:	00bf      	lsls	r7, r7, #2
   12370:	46b9      	mov	r9, r7
   12372:	0033      	movs	r3, r6
   12374:	9a00      	ldr	r2, [sp, #0]
   12376:	4f87      	ldr	r7, [pc, #540]	; (12594 <__aeabi_fdiv+0x284>)
   12378:	4053      	eors	r3, r2
   1237a:	464a      	mov	r2, r9
   1237c:	58ba      	ldr	r2, [r7, r2]
   1237e:	9301      	str	r3, [sp, #4]
   12380:	4697      	mov	pc, r2
   12382:	2c00      	cmp	r4, #0
   12384:	d14e      	bne.n	12424 <__aeabi_fdiv+0x114>
   12386:	2308      	movs	r3, #8
   12388:	4699      	mov	r9, r3
   1238a:	33f7      	adds	r3, #247	; 0xf7
   1238c:	4698      	mov	r8, r3
   1238e:	3bfd      	subs	r3, #253	; 0xfd
   12390:	469b      	mov	fp, r3
   12392:	027d      	lsls	r5, r7, #9
   12394:	0078      	lsls	r0, r7, #1
   12396:	0ffb      	lsrs	r3, r7, #31
   12398:	0a6d      	lsrs	r5, r5, #9
   1239a:	0e00      	lsrs	r0, r0, #24
   1239c:	9300      	str	r3, [sp, #0]
   1239e:	d1da      	bne.n	12356 <__aeabi_fdiv+0x46>
   123a0:	2d00      	cmp	r5, #0
   123a2:	d126      	bne.n	123f2 <__aeabi_fdiv+0xe2>
   123a4:	2000      	movs	r0, #0
   123a6:	2101      	movs	r1, #1
   123a8:	0033      	movs	r3, r6
   123aa:	9a00      	ldr	r2, [sp, #0]
   123ac:	4f7a      	ldr	r7, [pc, #488]	; (12598 <__aeabi_fdiv+0x288>)
   123ae:	4053      	eors	r3, r2
   123b0:	4642      	mov	r2, r8
   123b2:	1a10      	subs	r0, r2, r0
   123b4:	464a      	mov	r2, r9
   123b6:	430a      	orrs	r2, r1
   123b8:	0092      	lsls	r2, r2, #2
   123ba:	58ba      	ldr	r2, [r7, r2]
   123bc:	001d      	movs	r5, r3
   123be:	4697      	mov	pc, r2
   123c0:	9b00      	ldr	r3, [sp, #0]
   123c2:	002c      	movs	r4, r5
   123c4:	469a      	mov	sl, r3
   123c6:	468b      	mov	fp, r1
   123c8:	465b      	mov	r3, fp
   123ca:	2b02      	cmp	r3, #2
   123cc:	d131      	bne.n	12432 <__aeabi_fdiv+0x122>
   123ce:	4653      	mov	r3, sl
   123d0:	21ff      	movs	r1, #255	; 0xff
   123d2:	2400      	movs	r4, #0
   123d4:	e038      	b.n	12448 <__aeabi_fdiv+0x138>
   123d6:	2c00      	cmp	r4, #0
   123d8:	d117      	bne.n	1240a <__aeabi_fdiv+0xfa>
   123da:	2304      	movs	r3, #4
   123dc:	4699      	mov	r9, r3
   123de:	2300      	movs	r3, #0
   123e0:	4698      	mov	r8, r3
   123e2:	3301      	adds	r3, #1
   123e4:	469b      	mov	fp, r3
   123e6:	e7af      	b.n	12348 <__aeabi_fdiv+0x38>
   123e8:	20ff      	movs	r0, #255	; 0xff
   123ea:	2d00      	cmp	r5, #0
   123ec:	d10b      	bne.n	12406 <__aeabi_fdiv+0xf6>
   123ee:	2102      	movs	r1, #2
   123f0:	e7da      	b.n	123a8 <__aeabi_fdiv+0x98>
   123f2:	0028      	movs	r0, r5
   123f4:	f002 fa52 	bl	1489c <__clzsi2>
   123f8:	1f43      	subs	r3, r0, #5
   123fa:	409d      	lsls	r5, r3
   123fc:	2376      	movs	r3, #118	; 0x76
   123fe:	425b      	negs	r3, r3
   12400:	1a18      	subs	r0, r3, r0
   12402:	2100      	movs	r1, #0
   12404:	e7af      	b.n	12366 <__aeabi_fdiv+0x56>
   12406:	2103      	movs	r1, #3
   12408:	e7ad      	b.n	12366 <__aeabi_fdiv+0x56>
   1240a:	0020      	movs	r0, r4
   1240c:	f002 fa46 	bl	1489c <__clzsi2>
   12410:	1f43      	subs	r3, r0, #5
   12412:	409c      	lsls	r4, r3
   12414:	2376      	movs	r3, #118	; 0x76
   12416:	425b      	negs	r3, r3
   12418:	1a1b      	subs	r3, r3, r0
   1241a:	4698      	mov	r8, r3
   1241c:	2300      	movs	r3, #0
   1241e:	4699      	mov	r9, r3
   12420:	469b      	mov	fp, r3
   12422:	e791      	b.n	12348 <__aeabi_fdiv+0x38>
   12424:	230c      	movs	r3, #12
   12426:	4699      	mov	r9, r3
   12428:	33f3      	adds	r3, #243	; 0xf3
   1242a:	4698      	mov	r8, r3
   1242c:	3bfc      	subs	r3, #252	; 0xfc
   1242e:	469b      	mov	fp, r3
   12430:	e78a      	b.n	12348 <__aeabi_fdiv+0x38>
   12432:	2b03      	cmp	r3, #3
   12434:	d100      	bne.n	12438 <__aeabi_fdiv+0x128>
   12436:	e0a5      	b.n	12584 <__aeabi_fdiv+0x274>
   12438:	4655      	mov	r5, sl
   1243a:	2b01      	cmp	r3, #1
   1243c:	d000      	beq.n	12440 <__aeabi_fdiv+0x130>
   1243e:	e081      	b.n	12544 <__aeabi_fdiv+0x234>
   12440:	2301      	movs	r3, #1
   12442:	2100      	movs	r1, #0
   12444:	2400      	movs	r4, #0
   12446:	402b      	ands	r3, r5
   12448:	0264      	lsls	r4, r4, #9
   1244a:	05c9      	lsls	r1, r1, #23
   1244c:	0a60      	lsrs	r0, r4, #9
   1244e:	07db      	lsls	r3, r3, #31
   12450:	4308      	orrs	r0, r1
   12452:	4318      	orrs	r0, r3
   12454:	b003      	add	sp, #12
   12456:	bc3c      	pop	{r2, r3, r4, r5}
   12458:	4690      	mov	r8, r2
   1245a:	4699      	mov	r9, r3
   1245c:	46a2      	mov	sl, r4
   1245e:	46ab      	mov	fp, r5
   12460:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12462:	2480      	movs	r4, #128	; 0x80
   12464:	2300      	movs	r3, #0
   12466:	03e4      	lsls	r4, r4, #15
   12468:	21ff      	movs	r1, #255	; 0xff
   1246a:	e7ed      	b.n	12448 <__aeabi_fdiv+0x138>
   1246c:	21ff      	movs	r1, #255	; 0xff
   1246e:	2400      	movs	r4, #0
   12470:	e7ea      	b.n	12448 <__aeabi_fdiv+0x138>
   12472:	2301      	movs	r3, #1
   12474:	1a59      	subs	r1, r3, r1
   12476:	291b      	cmp	r1, #27
   12478:	dd66      	ble.n	12548 <__aeabi_fdiv+0x238>
   1247a:	9a01      	ldr	r2, [sp, #4]
   1247c:	4013      	ands	r3, r2
   1247e:	2100      	movs	r1, #0
   12480:	2400      	movs	r4, #0
   12482:	e7e1      	b.n	12448 <__aeabi_fdiv+0x138>
   12484:	2380      	movs	r3, #128	; 0x80
   12486:	03db      	lsls	r3, r3, #15
   12488:	421c      	tst	r4, r3
   1248a:	d038      	beq.n	124fe <__aeabi_fdiv+0x1ee>
   1248c:	421d      	tst	r5, r3
   1248e:	d051      	beq.n	12534 <__aeabi_fdiv+0x224>
   12490:	431c      	orrs	r4, r3
   12492:	0264      	lsls	r4, r4, #9
   12494:	0a64      	lsrs	r4, r4, #9
   12496:	0033      	movs	r3, r6
   12498:	21ff      	movs	r1, #255	; 0xff
   1249a:	e7d5      	b.n	12448 <__aeabi_fdiv+0x138>
   1249c:	0163      	lsls	r3, r4, #5
   1249e:	016c      	lsls	r4, r5, #5
   124a0:	42a3      	cmp	r3, r4
   124a2:	d23b      	bcs.n	1251c <__aeabi_fdiv+0x20c>
   124a4:	261b      	movs	r6, #27
   124a6:	2100      	movs	r1, #0
   124a8:	3801      	subs	r0, #1
   124aa:	2501      	movs	r5, #1
   124ac:	001f      	movs	r7, r3
   124ae:	0049      	lsls	r1, r1, #1
   124b0:	005b      	lsls	r3, r3, #1
   124b2:	2f00      	cmp	r7, #0
   124b4:	db01      	blt.n	124ba <__aeabi_fdiv+0x1aa>
   124b6:	429c      	cmp	r4, r3
   124b8:	d801      	bhi.n	124be <__aeabi_fdiv+0x1ae>
   124ba:	1b1b      	subs	r3, r3, r4
   124bc:	4329      	orrs	r1, r5
   124be:	3e01      	subs	r6, #1
   124c0:	2e00      	cmp	r6, #0
   124c2:	d1f3      	bne.n	124ac <__aeabi_fdiv+0x19c>
   124c4:	001c      	movs	r4, r3
   124c6:	1e63      	subs	r3, r4, #1
   124c8:	419c      	sbcs	r4, r3
   124ca:	430c      	orrs	r4, r1
   124cc:	0001      	movs	r1, r0
   124ce:	317f      	adds	r1, #127	; 0x7f
   124d0:	2900      	cmp	r1, #0
   124d2:	ddce      	ble.n	12472 <__aeabi_fdiv+0x162>
   124d4:	0763      	lsls	r3, r4, #29
   124d6:	d004      	beq.n	124e2 <__aeabi_fdiv+0x1d2>
   124d8:	230f      	movs	r3, #15
   124da:	4023      	ands	r3, r4
   124dc:	2b04      	cmp	r3, #4
   124de:	d000      	beq.n	124e2 <__aeabi_fdiv+0x1d2>
   124e0:	3404      	adds	r4, #4
   124e2:	0123      	lsls	r3, r4, #4
   124e4:	d503      	bpl.n	124ee <__aeabi_fdiv+0x1de>
   124e6:	0001      	movs	r1, r0
   124e8:	4b2c      	ldr	r3, [pc, #176]	; (1259c <__aeabi_fdiv+0x28c>)
   124ea:	3180      	adds	r1, #128	; 0x80
   124ec:	401c      	ands	r4, r3
   124ee:	29fe      	cmp	r1, #254	; 0xfe
   124f0:	dd0d      	ble.n	1250e <__aeabi_fdiv+0x1fe>
   124f2:	2301      	movs	r3, #1
   124f4:	9a01      	ldr	r2, [sp, #4]
   124f6:	21ff      	movs	r1, #255	; 0xff
   124f8:	4013      	ands	r3, r2
   124fa:	2400      	movs	r4, #0
   124fc:	e7a4      	b.n	12448 <__aeabi_fdiv+0x138>
   124fe:	2380      	movs	r3, #128	; 0x80
   12500:	03db      	lsls	r3, r3, #15
   12502:	431c      	orrs	r4, r3
   12504:	0264      	lsls	r4, r4, #9
   12506:	0a64      	lsrs	r4, r4, #9
   12508:	0033      	movs	r3, r6
   1250a:	21ff      	movs	r1, #255	; 0xff
   1250c:	e79c      	b.n	12448 <__aeabi_fdiv+0x138>
   1250e:	2301      	movs	r3, #1
   12510:	9a01      	ldr	r2, [sp, #4]
   12512:	01a4      	lsls	r4, r4, #6
   12514:	0a64      	lsrs	r4, r4, #9
   12516:	b2c9      	uxtb	r1, r1
   12518:	4013      	ands	r3, r2
   1251a:	e795      	b.n	12448 <__aeabi_fdiv+0x138>
   1251c:	1b1b      	subs	r3, r3, r4
   1251e:	261a      	movs	r6, #26
   12520:	2101      	movs	r1, #1
   12522:	e7c2      	b.n	124aa <__aeabi_fdiv+0x19a>
   12524:	9b00      	ldr	r3, [sp, #0]
   12526:	468b      	mov	fp, r1
   12528:	469a      	mov	sl, r3
   1252a:	2400      	movs	r4, #0
   1252c:	e74c      	b.n	123c8 <__aeabi_fdiv+0xb8>
   1252e:	0263      	lsls	r3, r4, #9
   12530:	d5e5      	bpl.n	124fe <__aeabi_fdiv+0x1ee>
   12532:	2500      	movs	r5, #0
   12534:	2480      	movs	r4, #128	; 0x80
   12536:	03e4      	lsls	r4, r4, #15
   12538:	432c      	orrs	r4, r5
   1253a:	0264      	lsls	r4, r4, #9
   1253c:	0a64      	lsrs	r4, r4, #9
   1253e:	9b00      	ldr	r3, [sp, #0]
   12540:	21ff      	movs	r1, #255	; 0xff
   12542:	e781      	b.n	12448 <__aeabi_fdiv+0x138>
   12544:	9501      	str	r5, [sp, #4]
   12546:	e7c1      	b.n	124cc <__aeabi_fdiv+0x1bc>
   12548:	0023      	movs	r3, r4
   1254a:	2020      	movs	r0, #32
   1254c:	40cb      	lsrs	r3, r1
   1254e:	1a41      	subs	r1, r0, r1
   12550:	408c      	lsls	r4, r1
   12552:	1e61      	subs	r1, r4, #1
   12554:	418c      	sbcs	r4, r1
   12556:	431c      	orrs	r4, r3
   12558:	0763      	lsls	r3, r4, #29
   1255a:	d004      	beq.n	12566 <__aeabi_fdiv+0x256>
   1255c:	230f      	movs	r3, #15
   1255e:	4023      	ands	r3, r4
   12560:	2b04      	cmp	r3, #4
   12562:	d000      	beq.n	12566 <__aeabi_fdiv+0x256>
   12564:	3404      	adds	r4, #4
   12566:	0163      	lsls	r3, r4, #5
   12568:	d505      	bpl.n	12576 <__aeabi_fdiv+0x266>
   1256a:	2301      	movs	r3, #1
   1256c:	9a01      	ldr	r2, [sp, #4]
   1256e:	2101      	movs	r1, #1
   12570:	4013      	ands	r3, r2
   12572:	2400      	movs	r4, #0
   12574:	e768      	b.n	12448 <__aeabi_fdiv+0x138>
   12576:	2301      	movs	r3, #1
   12578:	9a01      	ldr	r2, [sp, #4]
   1257a:	01a4      	lsls	r4, r4, #6
   1257c:	0a64      	lsrs	r4, r4, #9
   1257e:	4013      	ands	r3, r2
   12580:	2100      	movs	r1, #0
   12582:	e761      	b.n	12448 <__aeabi_fdiv+0x138>
   12584:	2380      	movs	r3, #128	; 0x80
   12586:	03db      	lsls	r3, r3, #15
   12588:	431c      	orrs	r4, r3
   1258a:	0264      	lsls	r4, r4, #9
   1258c:	0a64      	lsrs	r4, r4, #9
   1258e:	4653      	mov	r3, sl
   12590:	21ff      	movs	r1, #255	; 0xff
   12592:	e759      	b.n	12448 <__aeabi_fdiv+0x138>
   12594:	0001b128 	.word	0x0001b128
   12598:	0001b168 	.word	0x0001b168
   1259c:	f7ffffff 	.word	0xf7ffffff

000125a0 <__eqsf2>:
   125a0:	b570      	push	{r4, r5, r6, lr}
   125a2:	0042      	lsls	r2, r0, #1
   125a4:	0245      	lsls	r5, r0, #9
   125a6:	024e      	lsls	r6, r1, #9
   125a8:	004c      	lsls	r4, r1, #1
   125aa:	0fc3      	lsrs	r3, r0, #31
   125ac:	0a6d      	lsrs	r5, r5, #9
   125ae:	0e12      	lsrs	r2, r2, #24
   125b0:	0a76      	lsrs	r6, r6, #9
   125b2:	0e24      	lsrs	r4, r4, #24
   125b4:	0fc9      	lsrs	r1, r1, #31
   125b6:	2001      	movs	r0, #1
   125b8:	2aff      	cmp	r2, #255	; 0xff
   125ba:	d006      	beq.n	125ca <__eqsf2+0x2a>
   125bc:	2cff      	cmp	r4, #255	; 0xff
   125be:	d003      	beq.n	125c8 <__eqsf2+0x28>
   125c0:	42a2      	cmp	r2, r4
   125c2:	d101      	bne.n	125c8 <__eqsf2+0x28>
   125c4:	42b5      	cmp	r5, r6
   125c6:	d006      	beq.n	125d6 <__eqsf2+0x36>
   125c8:	bd70      	pop	{r4, r5, r6, pc}
   125ca:	2d00      	cmp	r5, #0
   125cc:	d1fc      	bne.n	125c8 <__eqsf2+0x28>
   125ce:	2cff      	cmp	r4, #255	; 0xff
   125d0:	d1fa      	bne.n	125c8 <__eqsf2+0x28>
   125d2:	2e00      	cmp	r6, #0
   125d4:	d1f8      	bne.n	125c8 <__eqsf2+0x28>
   125d6:	428b      	cmp	r3, r1
   125d8:	d006      	beq.n	125e8 <__eqsf2+0x48>
   125da:	2001      	movs	r0, #1
   125dc:	2a00      	cmp	r2, #0
   125de:	d1f3      	bne.n	125c8 <__eqsf2+0x28>
   125e0:	0028      	movs	r0, r5
   125e2:	1e45      	subs	r5, r0, #1
   125e4:	41a8      	sbcs	r0, r5
   125e6:	e7ef      	b.n	125c8 <__eqsf2+0x28>
   125e8:	2000      	movs	r0, #0
   125ea:	e7ed      	b.n	125c8 <__eqsf2+0x28>

000125ec <__gesf2>:
   125ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   125ee:	0042      	lsls	r2, r0, #1
   125f0:	0245      	lsls	r5, r0, #9
   125f2:	024c      	lsls	r4, r1, #9
   125f4:	0fc3      	lsrs	r3, r0, #31
   125f6:	0048      	lsls	r0, r1, #1
   125f8:	0a6d      	lsrs	r5, r5, #9
   125fa:	0e12      	lsrs	r2, r2, #24
   125fc:	0a64      	lsrs	r4, r4, #9
   125fe:	0e00      	lsrs	r0, r0, #24
   12600:	0fc9      	lsrs	r1, r1, #31
   12602:	2aff      	cmp	r2, #255	; 0xff
   12604:	d01e      	beq.n	12644 <__gesf2+0x58>
   12606:	28ff      	cmp	r0, #255	; 0xff
   12608:	d021      	beq.n	1264e <__gesf2+0x62>
   1260a:	2a00      	cmp	r2, #0
   1260c:	d10a      	bne.n	12624 <__gesf2+0x38>
   1260e:	426e      	negs	r6, r5
   12610:	416e      	adcs	r6, r5
   12612:	b2f6      	uxtb	r6, r6
   12614:	2800      	cmp	r0, #0
   12616:	d10f      	bne.n	12638 <__gesf2+0x4c>
   12618:	2c00      	cmp	r4, #0
   1261a:	d10d      	bne.n	12638 <__gesf2+0x4c>
   1261c:	2000      	movs	r0, #0
   1261e:	2d00      	cmp	r5, #0
   12620:	d009      	beq.n	12636 <__gesf2+0x4a>
   12622:	e005      	b.n	12630 <__gesf2+0x44>
   12624:	2800      	cmp	r0, #0
   12626:	d101      	bne.n	1262c <__gesf2+0x40>
   12628:	2c00      	cmp	r4, #0
   1262a:	d001      	beq.n	12630 <__gesf2+0x44>
   1262c:	428b      	cmp	r3, r1
   1262e:	d011      	beq.n	12654 <__gesf2+0x68>
   12630:	2101      	movs	r1, #1
   12632:	4258      	negs	r0, r3
   12634:	4308      	orrs	r0, r1
   12636:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12638:	2e00      	cmp	r6, #0
   1263a:	d0f7      	beq.n	1262c <__gesf2+0x40>
   1263c:	2001      	movs	r0, #1
   1263e:	3901      	subs	r1, #1
   12640:	4308      	orrs	r0, r1
   12642:	e7f8      	b.n	12636 <__gesf2+0x4a>
   12644:	2d00      	cmp	r5, #0
   12646:	d0de      	beq.n	12606 <__gesf2+0x1a>
   12648:	2002      	movs	r0, #2
   1264a:	4240      	negs	r0, r0
   1264c:	e7f3      	b.n	12636 <__gesf2+0x4a>
   1264e:	2c00      	cmp	r4, #0
   12650:	d0db      	beq.n	1260a <__gesf2+0x1e>
   12652:	e7f9      	b.n	12648 <__gesf2+0x5c>
   12654:	4282      	cmp	r2, r0
   12656:	dceb      	bgt.n	12630 <__gesf2+0x44>
   12658:	db04      	blt.n	12664 <__gesf2+0x78>
   1265a:	42a5      	cmp	r5, r4
   1265c:	d8e8      	bhi.n	12630 <__gesf2+0x44>
   1265e:	2000      	movs	r0, #0
   12660:	42a5      	cmp	r5, r4
   12662:	d2e8      	bcs.n	12636 <__gesf2+0x4a>
   12664:	2101      	movs	r1, #1
   12666:	1e58      	subs	r0, r3, #1
   12668:	4308      	orrs	r0, r1
   1266a:	e7e4      	b.n	12636 <__gesf2+0x4a>

0001266c <__lesf2>:
   1266c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1266e:	0042      	lsls	r2, r0, #1
   12670:	024d      	lsls	r5, r1, #9
   12672:	004c      	lsls	r4, r1, #1
   12674:	0246      	lsls	r6, r0, #9
   12676:	0a76      	lsrs	r6, r6, #9
   12678:	0e12      	lsrs	r2, r2, #24
   1267a:	0fc3      	lsrs	r3, r0, #31
   1267c:	0a6d      	lsrs	r5, r5, #9
   1267e:	0e24      	lsrs	r4, r4, #24
   12680:	0fc9      	lsrs	r1, r1, #31
   12682:	2aff      	cmp	r2, #255	; 0xff
   12684:	d016      	beq.n	126b4 <__lesf2+0x48>
   12686:	2cff      	cmp	r4, #255	; 0xff
   12688:	d018      	beq.n	126bc <__lesf2+0x50>
   1268a:	2a00      	cmp	r2, #0
   1268c:	d10a      	bne.n	126a4 <__lesf2+0x38>
   1268e:	4270      	negs	r0, r6
   12690:	4170      	adcs	r0, r6
   12692:	b2c0      	uxtb	r0, r0
   12694:	2c00      	cmp	r4, #0
   12696:	d015      	beq.n	126c4 <__lesf2+0x58>
   12698:	2800      	cmp	r0, #0
   1269a:	d005      	beq.n	126a8 <__lesf2+0x3c>
   1269c:	2001      	movs	r0, #1
   1269e:	3901      	subs	r1, #1
   126a0:	4308      	orrs	r0, r1
   126a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   126a4:	2c00      	cmp	r4, #0
   126a6:	d013      	beq.n	126d0 <__lesf2+0x64>
   126a8:	4299      	cmp	r1, r3
   126aa:	d014      	beq.n	126d6 <__lesf2+0x6a>
   126ac:	2001      	movs	r0, #1
   126ae:	425b      	negs	r3, r3
   126b0:	4318      	orrs	r0, r3
   126b2:	e7f6      	b.n	126a2 <__lesf2+0x36>
   126b4:	2002      	movs	r0, #2
   126b6:	2e00      	cmp	r6, #0
   126b8:	d1f3      	bne.n	126a2 <__lesf2+0x36>
   126ba:	e7e4      	b.n	12686 <__lesf2+0x1a>
   126bc:	2002      	movs	r0, #2
   126be:	2d00      	cmp	r5, #0
   126c0:	d1ef      	bne.n	126a2 <__lesf2+0x36>
   126c2:	e7e2      	b.n	1268a <__lesf2+0x1e>
   126c4:	2d00      	cmp	r5, #0
   126c6:	d1e7      	bne.n	12698 <__lesf2+0x2c>
   126c8:	2000      	movs	r0, #0
   126ca:	2e00      	cmp	r6, #0
   126cc:	d0e9      	beq.n	126a2 <__lesf2+0x36>
   126ce:	e7ed      	b.n	126ac <__lesf2+0x40>
   126d0:	2d00      	cmp	r5, #0
   126d2:	d1e9      	bne.n	126a8 <__lesf2+0x3c>
   126d4:	e7ea      	b.n	126ac <__lesf2+0x40>
   126d6:	42a2      	cmp	r2, r4
   126d8:	dc06      	bgt.n	126e8 <__lesf2+0x7c>
   126da:	dbdf      	blt.n	1269c <__lesf2+0x30>
   126dc:	42ae      	cmp	r6, r5
   126de:	d803      	bhi.n	126e8 <__lesf2+0x7c>
   126e0:	2000      	movs	r0, #0
   126e2:	42ae      	cmp	r6, r5
   126e4:	d3da      	bcc.n	1269c <__lesf2+0x30>
   126e6:	e7dc      	b.n	126a2 <__lesf2+0x36>
   126e8:	2001      	movs	r0, #1
   126ea:	4249      	negs	r1, r1
   126ec:	4308      	orrs	r0, r1
   126ee:	e7d8      	b.n	126a2 <__lesf2+0x36>

000126f0 <__aeabi_fmul>:
   126f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   126f2:	4657      	mov	r7, sl
   126f4:	464e      	mov	r6, r9
   126f6:	4645      	mov	r5, r8
   126f8:	46de      	mov	lr, fp
   126fa:	b5e0      	push	{r5, r6, r7, lr}
   126fc:	0247      	lsls	r7, r0, #9
   126fe:	0046      	lsls	r6, r0, #1
   12700:	4688      	mov	r8, r1
   12702:	0a7f      	lsrs	r7, r7, #9
   12704:	0e36      	lsrs	r6, r6, #24
   12706:	0fc4      	lsrs	r4, r0, #31
   12708:	2e00      	cmp	r6, #0
   1270a:	d047      	beq.n	1279c <__aeabi_fmul+0xac>
   1270c:	2eff      	cmp	r6, #255	; 0xff
   1270e:	d024      	beq.n	1275a <__aeabi_fmul+0x6a>
   12710:	00fb      	lsls	r3, r7, #3
   12712:	2780      	movs	r7, #128	; 0x80
   12714:	04ff      	lsls	r7, r7, #19
   12716:	431f      	orrs	r7, r3
   12718:	2300      	movs	r3, #0
   1271a:	4699      	mov	r9, r3
   1271c:	469a      	mov	sl, r3
   1271e:	3e7f      	subs	r6, #127	; 0x7f
   12720:	4643      	mov	r3, r8
   12722:	025d      	lsls	r5, r3, #9
   12724:	0058      	lsls	r0, r3, #1
   12726:	0fdb      	lsrs	r3, r3, #31
   12728:	0a6d      	lsrs	r5, r5, #9
   1272a:	0e00      	lsrs	r0, r0, #24
   1272c:	4698      	mov	r8, r3
   1272e:	d043      	beq.n	127b8 <__aeabi_fmul+0xc8>
   12730:	28ff      	cmp	r0, #255	; 0xff
   12732:	d03b      	beq.n	127ac <__aeabi_fmul+0xbc>
   12734:	00eb      	lsls	r3, r5, #3
   12736:	2580      	movs	r5, #128	; 0x80
   12738:	2200      	movs	r2, #0
   1273a:	04ed      	lsls	r5, r5, #19
   1273c:	431d      	orrs	r5, r3
   1273e:	387f      	subs	r0, #127	; 0x7f
   12740:	1836      	adds	r6, r6, r0
   12742:	1c73      	adds	r3, r6, #1
   12744:	4641      	mov	r1, r8
   12746:	469b      	mov	fp, r3
   12748:	464b      	mov	r3, r9
   1274a:	4061      	eors	r1, r4
   1274c:	4313      	orrs	r3, r2
   1274e:	2b0f      	cmp	r3, #15
   12750:	d864      	bhi.n	1281c <__aeabi_fmul+0x12c>
   12752:	4875      	ldr	r0, [pc, #468]	; (12928 <__aeabi_fmul+0x238>)
   12754:	009b      	lsls	r3, r3, #2
   12756:	58c3      	ldr	r3, [r0, r3]
   12758:	469f      	mov	pc, r3
   1275a:	2f00      	cmp	r7, #0
   1275c:	d142      	bne.n	127e4 <__aeabi_fmul+0xf4>
   1275e:	2308      	movs	r3, #8
   12760:	4699      	mov	r9, r3
   12762:	3b06      	subs	r3, #6
   12764:	26ff      	movs	r6, #255	; 0xff
   12766:	469a      	mov	sl, r3
   12768:	e7da      	b.n	12720 <__aeabi_fmul+0x30>
   1276a:	4641      	mov	r1, r8
   1276c:	2a02      	cmp	r2, #2
   1276e:	d028      	beq.n	127c2 <__aeabi_fmul+0xd2>
   12770:	2a03      	cmp	r2, #3
   12772:	d100      	bne.n	12776 <__aeabi_fmul+0x86>
   12774:	e0ce      	b.n	12914 <__aeabi_fmul+0x224>
   12776:	2a01      	cmp	r2, #1
   12778:	d000      	beq.n	1277c <__aeabi_fmul+0x8c>
   1277a:	e0ac      	b.n	128d6 <__aeabi_fmul+0x1e6>
   1277c:	4011      	ands	r1, r2
   1277e:	2000      	movs	r0, #0
   12780:	2200      	movs	r2, #0
   12782:	b2cc      	uxtb	r4, r1
   12784:	0240      	lsls	r0, r0, #9
   12786:	05d2      	lsls	r2, r2, #23
   12788:	0a40      	lsrs	r0, r0, #9
   1278a:	07e4      	lsls	r4, r4, #31
   1278c:	4310      	orrs	r0, r2
   1278e:	4320      	orrs	r0, r4
   12790:	bc3c      	pop	{r2, r3, r4, r5}
   12792:	4690      	mov	r8, r2
   12794:	4699      	mov	r9, r3
   12796:	46a2      	mov	sl, r4
   12798:	46ab      	mov	fp, r5
   1279a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1279c:	2f00      	cmp	r7, #0
   1279e:	d115      	bne.n	127cc <__aeabi_fmul+0xdc>
   127a0:	2304      	movs	r3, #4
   127a2:	4699      	mov	r9, r3
   127a4:	3b03      	subs	r3, #3
   127a6:	2600      	movs	r6, #0
   127a8:	469a      	mov	sl, r3
   127aa:	e7b9      	b.n	12720 <__aeabi_fmul+0x30>
   127ac:	20ff      	movs	r0, #255	; 0xff
   127ae:	2202      	movs	r2, #2
   127b0:	2d00      	cmp	r5, #0
   127b2:	d0c5      	beq.n	12740 <__aeabi_fmul+0x50>
   127b4:	2203      	movs	r2, #3
   127b6:	e7c3      	b.n	12740 <__aeabi_fmul+0x50>
   127b8:	2d00      	cmp	r5, #0
   127ba:	d119      	bne.n	127f0 <__aeabi_fmul+0x100>
   127bc:	2000      	movs	r0, #0
   127be:	2201      	movs	r2, #1
   127c0:	e7be      	b.n	12740 <__aeabi_fmul+0x50>
   127c2:	2401      	movs	r4, #1
   127c4:	22ff      	movs	r2, #255	; 0xff
   127c6:	400c      	ands	r4, r1
   127c8:	2000      	movs	r0, #0
   127ca:	e7db      	b.n	12784 <__aeabi_fmul+0x94>
   127cc:	0038      	movs	r0, r7
   127ce:	f002 f865 	bl	1489c <__clzsi2>
   127d2:	2676      	movs	r6, #118	; 0x76
   127d4:	1f43      	subs	r3, r0, #5
   127d6:	409f      	lsls	r7, r3
   127d8:	2300      	movs	r3, #0
   127da:	4276      	negs	r6, r6
   127dc:	1a36      	subs	r6, r6, r0
   127de:	4699      	mov	r9, r3
   127e0:	469a      	mov	sl, r3
   127e2:	e79d      	b.n	12720 <__aeabi_fmul+0x30>
   127e4:	230c      	movs	r3, #12
   127e6:	4699      	mov	r9, r3
   127e8:	3b09      	subs	r3, #9
   127ea:	26ff      	movs	r6, #255	; 0xff
   127ec:	469a      	mov	sl, r3
   127ee:	e797      	b.n	12720 <__aeabi_fmul+0x30>
   127f0:	0028      	movs	r0, r5
   127f2:	f002 f853 	bl	1489c <__clzsi2>
   127f6:	1f43      	subs	r3, r0, #5
   127f8:	409d      	lsls	r5, r3
   127fa:	2376      	movs	r3, #118	; 0x76
   127fc:	425b      	negs	r3, r3
   127fe:	1a18      	subs	r0, r3, r0
   12800:	2200      	movs	r2, #0
   12802:	e79d      	b.n	12740 <__aeabi_fmul+0x50>
   12804:	2080      	movs	r0, #128	; 0x80
   12806:	2400      	movs	r4, #0
   12808:	03c0      	lsls	r0, r0, #15
   1280a:	22ff      	movs	r2, #255	; 0xff
   1280c:	e7ba      	b.n	12784 <__aeabi_fmul+0x94>
   1280e:	003d      	movs	r5, r7
   12810:	4652      	mov	r2, sl
   12812:	e7ab      	b.n	1276c <__aeabi_fmul+0x7c>
   12814:	003d      	movs	r5, r7
   12816:	0021      	movs	r1, r4
   12818:	4652      	mov	r2, sl
   1281a:	e7a7      	b.n	1276c <__aeabi_fmul+0x7c>
   1281c:	0c3b      	lsrs	r3, r7, #16
   1281e:	469c      	mov	ip, r3
   12820:	042a      	lsls	r2, r5, #16
   12822:	0c12      	lsrs	r2, r2, #16
   12824:	0c2b      	lsrs	r3, r5, #16
   12826:	0014      	movs	r4, r2
   12828:	4660      	mov	r0, ip
   1282a:	4665      	mov	r5, ip
   1282c:	043f      	lsls	r7, r7, #16
   1282e:	0c3f      	lsrs	r7, r7, #16
   12830:	437c      	muls	r4, r7
   12832:	4342      	muls	r2, r0
   12834:	435d      	muls	r5, r3
   12836:	437b      	muls	r3, r7
   12838:	0c27      	lsrs	r7, r4, #16
   1283a:	189b      	adds	r3, r3, r2
   1283c:	18ff      	adds	r7, r7, r3
   1283e:	42ba      	cmp	r2, r7
   12840:	d903      	bls.n	1284a <__aeabi_fmul+0x15a>
   12842:	2380      	movs	r3, #128	; 0x80
   12844:	025b      	lsls	r3, r3, #9
   12846:	469c      	mov	ip, r3
   12848:	4465      	add	r5, ip
   1284a:	0424      	lsls	r4, r4, #16
   1284c:	043a      	lsls	r2, r7, #16
   1284e:	0c24      	lsrs	r4, r4, #16
   12850:	1912      	adds	r2, r2, r4
   12852:	0193      	lsls	r3, r2, #6
   12854:	1e5c      	subs	r4, r3, #1
   12856:	41a3      	sbcs	r3, r4
   12858:	0c3f      	lsrs	r7, r7, #16
   1285a:	0e92      	lsrs	r2, r2, #26
   1285c:	197d      	adds	r5, r7, r5
   1285e:	431a      	orrs	r2, r3
   12860:	01ad      	lsls	r5, r5, #6
   12862:	4315      	orrs	r5, r2
   12864:	012b      	lsls	r3, r5, #4
   12866:	d504      	bpl.n	12872 <__aeabi_fmul+0x182>
   12868:	2301      	movs	r3, #1
   1286a:	465e      	mov	r6, fp
   1286c:	086a      	lsrs	r2, r5, #1
   1286e:	401d      	ands	r5, r3
   12870:	4315      	orrs	r5, r2
   12872:	0032      	movs	r2, r6
   12874:	327f      	adds	r2, #127	; 0x7f
   12876:	2a00      	cmp	r2, #0
   12878:	dd25      	ble.n	128c6 <__aeabi_fmul+0x1d6>
   1287a:	076b      	lsls	r3, r5, #29
   1287c:	d004      	beq.n	12888 <__aeabi_fmul+0x198>
   1287e:	230f      	movs	r3, #15
   12880:	402b      	ands	r3, r5
   12882:	2b04      	cmp	r3, #4
   12884:	d000      	beq.n	12888 <__aeabi_fmul+0x198>
   12886:	3504      	adds	r5, #4
   12888:	012b      	lsls	r3, r5, #4
   1288a:	d503      	bpl.n	12894 <__aeabi_fmul+0x1a4>
   1288c:	0032      	movs	r2, r6
   1288e:	4b27      	ldr	r3, [pc, #156]	; (1292c <__aeabi_fmul+0x23c>)
   12890:	3280      	adds	r2, #128	; 0x80
   12892:	401d      	ands	r5, r3
   12894:	2afe      	cmp	r2, #254	; 0xfe
   12896:	dc94      	bgt.n	127c2 <__aeabi_fmul+0xd2>
   12898:	2401      	movs	r4, #1
   1289a:	01a8      	lsls	r0, r5, #6
   1289c:	0a40      	lsrs	r0, r0, #9
   1289e:	b2d2      	uxtb	r2, r2
   128a0:	400c      	ands	r4, r1
   128a2:	e76f      	b.n	12784 <__aeabi_fmul+0x94>
   128a4:	2080      	movs	r0, #128	; 0x80
   128a6:	03c0      	lsls	r0, r0, #15
   128a8:	4207      	tst	r7, r0
   128aa:	d007      	beq.n	128bc <__aeabi_fmul+0x1cc>
   128ac:	4205      	tst	r5, r0
   128ae:	d105      	bne.n	128bc <__aeabi_fmul+0x1cc>
   128b0:	4328      	orrs	r0, r5
   128b2:	0240      	lsls	r0, r0, #9
   128b4:	0a40      	lsrs	r0, r0, #9
   128b6:	4644      	mov	r4, r8
   128b8:	22ff      	movs	r2, #255	; 0xff
   128ba:	e763      	b.n	12784 <__aeabi_fmul+0x94>
   128bc:	4338      	orrs	r0, r7
   128be:	0240      	lsls	r0, r0, #9
   128c0:	0a40      	lsrs	r0, r0, #9
   128c2:	22ff      	movs	r2, #255	; 0xff
   128c4:	e75e      	b.n	12784 <__aeabi_fmul+0x94>
   128c6:	2401      	movs	r4, #1
   128c8:	1aa3      	subs	r3, r4, r2
   128ca:	2b1b      	cmp	r3, #27
   128cc:	dd05      	ble.n	128da <__aeabi_fmul+0x1ea>
   128ce:	400c      	ands	r4, r1
   128d0:	2200      	movs	r2, #0
   128d2:	2000      	movs	r0, #0
   128d4:	e756      	b.n	12784 <__aeabi_fmul+0x94>
   128d6:	465e      	mov	r6, fp
   128d8:	e7cb      	b.n	12872 <__aeabi_fmul+0x182>
   128da:	002a      	movs	r2, r5
   128dc:	2020      	movs	r0, #32
   128de:	40da      	lsrs	r2, r3
   128e0:	1ac3      	subs	r3, r0, r3
   128e2:	409d      	lsls	r5, r3
   128e4:	002b      	movs	r3, r5
   128e6:	1e5d      	subs	r5, r3, #1
   128e8:	41ab      	sbcs	r3, r5
   128ea:	4313      	orrs	r3, r2
   128ec:	075a      	lsls	r2, r3, #29
   128ee:	d004      	beq.n	128fa <__aeabi_fmul+0x20a>
   128f0:	220f      	movs	r2, #15
   128f2:	401a      	ands	r2, r3
   128f4:	2a04      	cmp	r2, #4
   128f6:	d000      	beq.n	128fa <__aeabi_fmul+0x20a>
   128f8:	3304      	adds	r3, #4
   128fa:	015a      	lsls	r2, r3, #5
   128fc:	d504      	bpl.n	12908 <__aeabi_fmul+0x218>
   128fe:	2401      	movs	r4, #1
   12900:	2201      	movs	r2, #1
   12902:	400c      	ands	r4, r1
   12904:	2000      	movs	r0, #0
   12906:	e73d      	b.n	12784 <__aeabi_fmul+0x94>
   12908:	2401      	movs	r4, #1
   1290a:	019b      	lsls	r3, r3, #6
   1290c:	0a58      	lsrs	r0, r3, #9
   1290e:	400c      	ands	r4, r1
   12910:	2200      	movs	r2, #0
   12912:	e737      	b.n	12784 <__aeabi_fmul+0x94>
   12914:	2080      	movs	r0, #128	; 0x80
   12916:	2401      	movs	r4, #1
   12918:	03c0      	lsls	r0, r0, #15
   1291a:	4328      	orrs	r0, r5
   1291c:	0240      	lsls	r0, r0, #9
   1291e:	0a40      	lsrs	r0, r0, #9
   12920:	400c      	ands	r4, r1
   12922:	22ff      	movs	r2, #255	; 0xff
   12924:	e72e      	b.n	12784 <__aeabi_fmul+0x94>
   12926:	46c0      	nop			; (mov r8, r8)
   12928:	0001b1a8 	.word	0x0001b1a8
   1292c:	f7ffffff 	.word	0xf7ffffff

00012930 <__aeabi_fsub>:
   12930:	b5f0      	push	{r4, r5, r6, r7, lr}
   12932:	464f      	mov	r7, r9
   12934:	46d6      	mov	lr, sl
   12936:	4646      	mov	r6, r8
   12938:	0044      	lsls	r4, r0, #1
   1293a:	b5c0      	push	{r6, r7, lr}
   1293c:	0fc2      	lsrs	r2, r0, #31
   1293e:	0247      	lsls	r7, r0, #9
   12940:	0248      	lsls	r0, r1, #9
   12942:	0a40      	lsrs	r0, r0, #9
   12944:	4684      	mov	ip, r0
   12946:	4666      	mov	r6, ip
   12948:	0a7b      	lsrs	r3, r7, #9
   1294a:	0048      	lsls	r0, r1, #1
   1294c:	0fc9      	lsrs	r1, r1, #31
   1294e:	469a      	mov	sl, r3
   12950:	0e24      	lsrs	r4, r4, #24
   12952:	0015      	movs	r5, r2
   12954:	00db      	lsls	r3, r3, #3
   12956:	0e00      	lsrs	r0, r0, #24
   12958:	4689      	mov	r9, r1
   1295a:	00f6      	lsls	r6, r6, #3
   1295c:	28ff      	cmp	r0, #255	; 0xff
   1295e:	d100      	bne.n	12962 <__aeabi_fsub+0x32>
   12960:	e08f      	b.n	12a82 <__aeabi_fsub+0x152>
   12962:	2101      	movs	r1, #1
   12964:	464f      	mov	r7, r9
   12966:	404f      	eors	r7, r1
   12968:	0039      	movs	r1, r7
   1296a:	4291      	cmp	r1, r2
   1296c:	d066      	beq.n	12a3c <__aeabi_fsub+0x10c>
   1296e:	1a22      	subs	r2, r4, r0
   12970:	2a00      	cmp	r2, #0
   12972:	dc00      	bgt.n	12976 <__aeabi_fsub+0x46>
   12974:	e09d      	b.n	12ab2 <__aeabi_fsub+0x182>
   12976:	2800      	cmp	r0, #0
   12978:	d13d      	bne.n	129f6 <__aeabi_fsub+0xc6>
   1297a:	2e00      	cmp	r6, #0
   1297c:	d100      	bne.n	12980 <__aeabi_fsub+0x50>
   1297e:	e08b      	b.n	12a98 <__aeabi_fsub+0x168>
   12980:	1e51      	subs	r1, r2, #1
   12982:	2900      	cmp	r1, #0
   12984:	d000      	beq.n	12988 <__aeabi_fsub+0x58>
   12986:	e0b5      	b.n	12af4 <__aeabi_fsub+0x1c4>
   12988:	2401      	movs	r4, #1
   1298a:	1b9b      	subs	r3, r3, r6
   1298c:	015a      	lsls	r2, r3, #5
   1298e:	d544      	bpl.n	12a1a <__aeabi_fsub+0xea>
   12990:	019b      	lsls	r3, r3, #6
   12992:	099f      	lsrs	r7, r3, #6
   12994:	0038      	movs	r0, r7
   12996:	f001 ff81 	bl	1489c <__clzsi2>
   1299a:	3805      	subs	r0, #5
   1299c:	4087      	lsls	r7, r0
   1299e:	4284      	cmp	r4, r0
   129a0:	dd00      	ble.n	129a4 <__aeabi_fsub+0x74>
   129a2:	e096      	b.n	12ad2 <__aeabi_fsub+0x1a2>
   129a4:	1b04      	subs	r4, r0, r4
   129a6:	003a      	movs	r2, r7
   129a8:	2020      	movs	r0, #32
   129aa:	3401      	adds	r4, #1
   129ac:	40e2      	lsrs	r2, r4
   129ae:	1b04      	subs	r4, r0, r4
   129b0:	40a7      	lsls	r7, r4
   129b2:	003b      	movs	r3, r7
   129b4:	1e5f      	subs	r7, r3, #1
   129b6:	41bb      	sbcs	r3, r7
   129b8:	2400      	movs	r4, #0
   129ba:	4313      	orrs	r3, r2
   129bc:	075a      	lsls	r2, r3, #29
   129be:	d004      	beq.n	129ca <__aeabi_fsub+0x9a>
   129c0:	220f      	movs	r2, #15
   129c2:	401a      	ands	r2, r3
   129c4:	2a04      	cmp	r2, #4
   129c6:	d000      	beq.n	129ca <__aeabi_fsub+0x9a>
   129c8:	3304      	adds	r3, #4
   129ca:	015a      	lsls	r2, r3, #5
   129cc:	d527      	bpl.n	12a1e <__aeabi_fsub+0xee>
   129ce:	3401      	adds	r4, #1
   129d0:	2cff      	cmp	r4, #255	; 0xff
   129d2:	d100      	bne.n	129d6 <__aeabi_fsub+0xa6>
   129d4:	e079      	b.n	12aca <__aeabi_fsub+0x19a>
   129d6:	2201      	movs	r2, #1
   129d8:	019b      	lsls	r3, r3, #6
   129da:	0a5b      	lsrs	r3, r3, #9
   129dc:	b2e4      	uxtb	r4, r4
   129de:	402a      	ands	r2, r5
   129e0:	025b      	lsls	r3, r3, #9
   129e2:	05e4      	lsls	r4, r4, #23
   129e4:	0a58      	lsrs	r0, r3, #9
   129e6:	07d2      	lsls	r2, r2, #31
   129e8:	4320      	orrs	r0, r4
   129ea:	4310      	orrs	r0, r2
   129ec:	bc1c      	pop	{r2, r3, r4}
   129ee:	4690      	mov	r8, r2
   129f0:	4699      	mov	r9, r3
   129f2:	46a2      	mov	sl, r4
   129f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   129f6:	2cff      	cmp	r4, #255	; 0xff
   129f8:	d0e0      	beq.n	129bc <__aeabi_fsub+0x8c>
   129fa:	2180      	movs	r1, #128	; 0x80
   129fc:	04c9      	lsls	r1, r1, #19
   129fe:	430e      	orrs	r6, r1
   12a00:	2a1b      	cmp	r2, #27
   12a02:	dc7b      	bgt.n	12afc <__aeabi_fsub+0x1cc>
   12a04:	0031      	movs	r1, r6
   12a06:	2020      	movs	r0, #32
   12a08:	40d1      	lsrs	r1, r2
   12a0a:	1a82      	subs	r2, r0, r2
   12a0c:	4096      	lsls	r6, r2
   12a0e:	1e72      	subs	r2, r6, #1
   12a10:	4196      	sbcs	r6, r2
   12a12:	430e      	orrs	r6, r1
   12a14:	1b9b      	subs	r3, r3, r6
   12a16:	015a      	lsls	r2, r3, #5
   12a18:	d4ba      	bmi.n	12990 <__aeabi_fsub+0x60>
   12a1a:	075a      	lsls	r2, r3, #29
   12a1c:	d1d0      	bne.n	129c0 <__aeabi_fsub+0x90>
   12a1e:	2201      	movs	r2, #1
   12a20:	08df      	lsrs	r7, r3, #3
   12a22:	402a      	ands	r2, r5
   12a24:	2cff      	cmp	r4, #255	; 0xff
   12a26:	d133      	bne.n	12a90 <__aeabi_fsub+0x160>
   12a28:	2f00      	cmp	r7, #0
   12a2a:	d100      	bne.n	12a2e <__aeabi_fsub+0xfe>
   12a2c:	e0a8      	b.n	12b80 <__aeabi_fsub+0x250>
   12a2e:	2380      	movs	r3, #128	; 0x80
   12a30:	03db      	lsls	r3, r3, #15
   12a32:	433b      	orrs	r3, r7
   12a34:	025b      	lsls	r3, r3, #9
   12a36:	0a5b      	lsrs	r3, r3, #9
   12a38:	24ff      	movs	r4, #255	; 0xff
   12a3a:	e7d1      	b.n	129e0 <__aeabi_fsub+0xb0>
   12a3c:	1a21      	subs	r1, r4, r0
   12a3e:	2900      	cmp	r1, #0
   12a40:	dd4c      	ble.n	12adc <__aeabi_fsub+0x1ac>
   12a42:	2800      	cmp	r0, #0
   12a44:	d02a      	beq.n	12a9c <__aeabi_fsub+0x16c>
   12a46:	2cff      	cmp	r4, #255	; 0xff
   12a48:	d0b8      	beq.n	129bc <__aeabi_fsub+0x8c>
   12a4a:	2080      	movs	r0, #128	; 0x80
   12a4c:	04c0      	lsls	r0, r0, #19
   12a4e:	4306      	orrs	r6, r0
   12a50:	291b      	cmp	r1, #27
   12a52:	dd00      	ble.n	12a56 <__aeabi_fsub+0x126>
   12a54:	e0af      	b.n	12bb6 <__aeabi_fsub+0x286>
   12a56:	0030      	movs	r0, r6
   12a58:	2720      	movs	r7, #32
   12a5a:	40c8      	lsrs	r0, r1
   12a5c:	1a79      	subs	r1, r7, r1
   12a5e:	408e      	lsls	r6, r1
   12a60:	1e71      	subs	r1, r6, #1
   12a62:	418e      	sbcs	r6, r1
   12a64:	4306      	orrs	r6, r0
   12a66:	199b      	adds	r3, r3, r6
   12a68:	0159      	lsls	r1, r3, #5
   12a6a:	d5d6      	bpl.n	12a1a <__aeabi_fsub+0xea>
   12a6c:	3401      	adds	r4, #1
   12a6e:	2cff      	cmp	r4, #255	; 0xff
   12a70:	d100      	bne.n	12a74 <__aeabi_fsub+0x144>
   12a72:	e085      	b.n	12b80 <__aeabi_fsub+0x250>
   12a74:	2201      	movs	r2, #1
   12a76:	497a      	ldr	r1, [pc, #488]	; (12c60 <__aeabi_fsub+0x330>)
   12a78:	401a      	ands	r2, r3
   12a7a:	085b      	lsrs	r3, r3, #1
   12a7c:	400b      	ands	r3, r1
   12a7e:	4313      	orrs	r3, r2
   12a80:	e79c      	b.n	129bc <__aeabi_fsub+0x8c>
   12a82:	2e00      	cmp	r6, #0
   12a84:	d000      	beq.n	12a88 <__aeabi_fsub+0x158>
   12a86:	e770      	b.n	1296a <__aeabi_fsub+0x3a>
   12a88:	e76b      	b.n	12962 <__aeabi_fsub+0x32>
   12a8a:	1e3b      	subs	r3, r7, #0
   12a8c:	d1c5      	bne.n	12a1a <__aeabi_fsub+0xea>
   12a8e:	2200      	movs	r2, #0
   12a90:	027b      	lsls	r3, r7, #9
   12a92:	0a5b      	lsrs	r3, r3, #9
   12a94:	b2e4      	uxtb	r4, r4
   12a96:	e7a3      	b.n	129e0 <__aeabi_fsub+0xb0>
   12a98:	0014      	movs	r4, r2
   12a9a:	e78f      	b.n	129bc <__aeabi_fsub+0x8c>
   12a9c:	2e00      	cmp	r6, #0
   12a9e:	d04d      	beq.n	12b3c <__aeabi_fsub+0x20c>
   12aa0:	1e48      	subs	r0, r1, #1
   12aa2:	2800      	cmp	r0, #0
   12aa4:	d157      	bne.n	12b56 <__aeabi_fsub+0x226>
   12aa6:	199b      	adds	r3, r3, r6
   12aa8:	2401      	movs	r4, #1
   12aaa:	015a      	lsls	r2, r3, #5
   12aac:	d5b5      	bpl.n	12a1a <__aeabi_fsub+0xea>
   12aae:	2402      	movs	r4, #2
   12ab0:	e7e0      	b.n	12a74 <__aeabi_fsub+0x144>
   12ab2:	2a00      	cmp	r2, #0
   12ab4:	d125      	bne.n	12b02 <__aeabi_fsub+0x1d2>
   12ab6:	1c62      	adds	r2, r4, #1
   12ab8:	b2d2      	uxtb	r2, r2
   12aba:	2a01      	cmp	r2, #1
   12abc:	dd72      	ble.n	12ba4 <__aeabi_fsub+0x274>
   12abe:	1b9f      	subs	r7, r3, r6
   12ac0:	017a      	lsls	r2, r7, #5
   12ac2:	d535      	bpl.n	12b30 <__aeabi_fsub+0x200>
   12ac4:	1af7      	subs	r7, r6, r3
   12ac6:	000d      	movs	r5, r1
   12ac8:	e764      	b.n	12994 <__aeabi_fsub+0x64>
   12aca:	2201      	movs	r2, #1
   12acc:	2300      	movs	r3, #0
   12ace:	402a      	ands	r2, r5
   12ad0:	e786      	b.n	129e0 <__aeabi_fsub+0xb0>
   12ad2:	003b      	movs	r3, r7
   12ad4:	4a63      	ldr	r2, [pc, #396]	; (12c64 <__aeabi_fsub+0x334>)
   12ad6:	1a24      	subs	r4, r4, r0
   12ad8:	4013      	ands	r3, r2
   12ada:	e76f      	b.n	129bc <__aeabi_fsub+0x8c>
   12adc:	2900      	cmp	r1, #0
   12ade:	d16c      	bne.n	12bba <__aeabi_fsub+0x28a>
   12ae0:	1c61      	adds	r1, r4, #1
   12ae2:	b2c8      	uxtb	r0, r1
   12ae4:	2801      	cmp	r0, #1
   12ae6:	dd4e      	ble.n	12b86 <__aeabi_fsub+0x256>
   12ae8:	29ff      	cmp	r1, #255	; 0xff
   12aea:	d049      	beq.n	12b80 <__aeabi_fsub+0x250>
   12aec:	199b      	adds	r3, r3, r6
   12aee:	085b      	lsrs	r3, r3, #1
   12af0:	000c      	movs	r4, r1
   12af2:	e763      	b.n	129bc <__aeabi_fsub+0x8c>
   12af4:	2aff      	cmp	r2, #255	; 0xff
   12af6:	d041      	beq.n	12b7c <__aeabi_fsub+0x24c>
   12af8:	000a      	movs	r2, r1
   12afa:	e781      	b.n	12a00 <__aeabi_fsub+0xd0>
   12afc:	2601      	movs	r6, #1
   12afe:	1b9b      	subs	r3, r3, r6
   12b00:	e789      	b.n	12a16 <__aeabi_fsub+0xe6>
   12b02:	2c00      	cmp	r4, #0
   12b04:	d01c      	beq.n	12b40 <__aeabi_fsub+0x210>
   12b06:	28ff      	cmp	r0, #255	; 0xff
   12b08:	d021      	beq.n	12b4e <__aeabi_fsub+0x21e>
   12b0a:	2480      	movs	r4, #128	; 0x80
   12b0c:	04e4      	lsls	r4, r4, #19
   12b0e:	4252      	negs	r2, r2
   12b10:	4323      	orrs	r3, r4
   12b12:	2a1b      	cmp	r2, #27
   12b14:	dd00      	ble.n	12b18 <__aeabi_fsub+0x1e8>
   12b16:	e096      	b.n	12c46 <__aeabi_fsub+0x316>
   12b18:	001c      	movs	r4, r3
   12b1a:	2520      	movs	r5, #32
   12b1c:	40d4      	lsrs	r4, r2
   12b1e:	1aaa      	subs	r2, r5, r2
   12b20:	4093      	lsls	r3, r2
   12b22:	1e5a      	subs	r2, r3, #1
   12b24:	4193      	sbcs	r3, r2
   12b26:	4323      	orrs	r3, r4
   12b28:	1af3      	subs	r3, r6, r3
   12b2a:	0004      	movs	r4, r0
   12b2c:	000d      	movs	r5, r1
   12b2e:	e72d      	b.n	1298c <__aeabi_fsub+0x5c>
   12b30:	2f00      	cmp	r7, #0
   12b32:	d000      	beq.n	12b36 <__aeabi_fsub+0x206>
   12b34:	e72e      	b.n	12994 <__aeabi_fsub+0x64>
   12b36:	2200      	movs	r2, #0
   12b38:	2400      	movs	r4, #0
   12b3a:	e7a9      	b.n	12a90 <__aeabi_fsub+0x160>
   12b3c:	000c      	movs	r4, r1
   12b3e:	e73d      	b.n	129bc <__aeabi_fsub+0x8c>
   12b40:	2b00      	cmp	r3, #0
   12b42:	d058      	beq.n	12bf6 <__aeabi_fsub+0x2c6>
   12b44:	43d2      	mvns	r2, r2
   12b46:	2a00      	cmp	r2, #0
   12b48:	d0ee      	beq.n	12b28 <__aeabi_fsub+0x1f8>
   12b4a:	28ff      	cmp	r0, #255	; 0xff
   12b4c:	d1e1      	bne.n	12b12 <__aeabi_fsub+0x1e2>
   12b4e:	0033      	movs	r3, r6
   12b50:	24ff      	movs	r4, #255	; 0xff
   12b52:	000d      	movs	r5, r1
   12b54:	e732      	b.n	129bc <__aeabi_fsub+0x8c>
   12b56:	29ff      	cmp	r1, #255	; 0xff
   12b58:	d010      	beq.n	12b7c <__aeabi_fsub+0x24c>
   12b5a:	0001      	movs	r1, r0
   12b5c:	e778      	b.n	12a50 <__aeabi_fsub+0x120>
   12b5e:	2b00      	cmp	r3, #0
   12b60:	d06e      	beq.n	12c40 <__aeabi_fsub+0x310>
   12b62:	24ff      	movs	r4, #255	; 0xff
   12b64:	2e00      	cmp	r6, #0
   12b66:	d100      	bne.n	12b6a <__aeabi_fsub+0x23a>
   12b68:	e728      	b.n	129bc <__aeabi_fsub+0x8c>
   12b6a:	2280      	movs	r2, #128	; 0x80
   12b6c:	4651      	mov	r1, sl
   12b6e:	03d2      	lsls	r2, r2, #15
   12b70:	4211      	tst	r1, r2
   12b72:	d003      	beq.n	12b7c <__aeabi_fsub+0x24c>
   12b74:	4661      	mov	r1, ip
   12b76:	4211      	tst	r1, r2
   12b78:	d100      	bne.n	12b7c <__aeabi_fsub+0x24c>
   12b7a:	0033      	movs	r3, r6
   12b7c:	24ff      	movs	r4, #255	; 0xff
   12b7e:	e71d      	b.n	129bc <__aeabi_fsub+0x8c>
   12b80:	24ff      	movs	r4, #255	; 0xff
   12b82:	2300      	movs	r3, #0
   12b84:	e72c      	b.n	129e0 <__aeabi_fsub+0xb0>
   12b86:	2c00      	cmp	r4, #0
   12b88:	d1e9      	bne.n	12b5e <__aeabi_fsub+0x22e>
   12b8a:	2b00      	cmp	r3, #0
   12b8c:	d063      	beq.n	12c56 <__aeabi_fsub+0x326>
   12b8e:	2e00      	cmp	r6, #0
   12b90:	d100      	bne.n	12b94 <__aeabi_fsub+0x264>
   12b92:	e713      	b.n	129bc <__aeabi_fsub+0x8c>
   12b94:	199b      	adds	r3, r3, r6
   12b96:	015a      	lsls	r2, r3, #5
   12b98:	d400      	bmi.n	12b9c <__aeabi_fsub+0x26c>
   12b9a:	e73e      	b.n	12a1a <__aeabi_fsub+0xea>
   12b9c:	4a31      	ldr	r2, [pc, #196]	; (12c64 <__aeabi_fsub+0x334>)
   12b9e:	000c      	movs	r4, r1
   12ba0:	4013      	ands	r3, r2
   12ba2:	e70b      	b.n	129bc <__aeabi_fsub+0x8c>
   12ba4:	2c00      	cmp	r4, #0
   12ba6:	d11e      	bne.n	12be6 <__aeabi_fsub+0x2b6>
   12ba8:	2b00      	cmp	r3, #0
   12baa:	d12f      	bne.n	12c0c <__aeabi_fsub+0x2dc>
   12bac:	2e00      	cmp	r6, #0
   12bae:	d04f      	beq.n	12c50 <__aeabi_fsub+0x320>
   12bb0:	0033      	movs	r3, r6
   12bb2:	000d      	movs	r5, r1
   12bb4:	e702      	b.n	129bc <__aeabi_fsub+0x8c>
   12bb6:	2601      	movs	r6, #1
   12bb8:	e755      	b.n	12a66 <__aeabi_fsub+0x136>
   12bba:	2c00      	cmp	r4, #0
   12bbc:	d11f      	bne.n	12bfe <__aeabi_fsub+0x2ce>
   12bbe:	2b00      	cmp	r3, #0
   12bc0:	d043      	beq.n	12c4a <__aeabi_fsub+0x31a>
   12bc2:	43c9      	mvns	r1, r1
   12bc4:	2900      	cmp	r1, #0
   12bc6:	d00b      	beq.n	12be0 <__aeabi_fsub+0x2b0>
   12bc8:	28ff      	cmp	r0, #255	; 0xff
   12bca:	d039      	beq.n	12c40 <__aeabi_fsub+0x310>
   12bcc:	291b      	cmp	r1, #27
   12bce:	dc44      	bgt.n	12c5a <__aeabi_fsub+0x32a>
   12bd0:	001c      	movs	r4, r3
   12bd2:	2720      	movs	r7, #32
   12bd4:	40cc      	lsrs	r4, r1
   12bd6:	1a79      	subs	r1, r7, r1
   12bd8:	408b      	lsls	r3, r1
   12bda:	1e59      	subs	r1, r3, #1
   12bdc:	418b      	sbcs	r3, r1
   12bde:	4323      	orrs	r3, r4
   12be0:	199b      	adds	r3, r3, r6
   12be2:	0004      	movs	r4, r0
   12be4:	e740      	b.n	12a68 <__aeabi_fsub+0x138>
   12be6:	2b00      	cmp	r3, #0
   12be8:	d11a      	bne.n	12c20 <__aeabi_fsub+0x2f0>
   12bea:	2e00      	cmp	r6, #0
   12bec:	d124      	bne.n	12c38 <__aeabi_fsub+0x308>
   12bee:	2780      	movs	r7, #128	; 0x80
   12bf0:	2200      	movs	r2, #0
   12bf2:	03ff      	lsls	r7, r7, #15
   12bf4:	e71b      	b.n	12a2e <__aeabi_fsub+0xfe>
   12bf6:	0033      	movs	r3, r6
   12bf8:	0004      	movs	r4, r0
   12bfa:	000d      	movs	r5, r1
   12bfc:	e6de      	b.n	129bc <__aeabi_fsub+0x8c>
   12bfe:	28ff      	cmp	r0, #255	; 0xff
   12c00:	d01e      	beq.n	12c40 <__aeabi_fsub+0x310>
   12c02:	2480      	movs	r4, #128	; 0x80
   12c04:	04e4      	lsls	r4, r4, #19
   12c06:	4249      	negs	r1, r1
   12c08:	4323      	orrs	r3, r4
   12c0a:	e7df      	b.n	12bcc <__aeabi_fsub+0x29c>
   12c0c:	2e00      	cmp	r6, #0
   12c0e:	d100      	bne.n	12c12 <__aeabi_fsub+0x2e2>
   12c10:	e6d4      	b.n	129bc <__aeabi_fsub+0x8c>
   12c12:	1b9f      	subs	r7, r3, r6
   12c14:	017a      	lsls	r2, r7, #5
   12c16:	d400      	bmi.n	12c1a <__aeabi_fsub+0x2ea>
   12c18:	e737      	b.n	12a8a <__aeabi_fsub+0x15a>
   12c1a:	1af3      	subs	r3, r6, r3
   12c1c:	000d      	movs	r5, r1
   12c1e:	e6cd      	b.n	129bc <__aeabi_fsub+0x8c>
   12c20:	24ff      	movs	r4, #255	; 0xff
   12c22:	2e00      	cmp	r6, #0
   12c24:	d100      	bne.n	12c28 <__aeabi_fsub+0x2f8>
   12c26:	e6c9      	b.n	129bc <__aeabi_fsub+0x8c>
   12c28:	2280      	movs	r2, #128	; 0x80
   12c2a:	4650      	mov	r0, sl
   12c2c:	03d2      	lsls	r2, r2, #15
   12c2e:	4210      	tst	r0, r2
   12c30:	d0a4      	beq.n	12b7c <__aeabi_fsub+0x24c>
   12c32:	4660      	mov	r0, ip
   12c34:	4210      	tst	r0, r2
   12c36:	d1a1      	bne.n	12b7c <__aeabi_fsub+0x24c>
   12c38:	0033      	movs	r3, r6
   12c3a:	000d      	movs	r5, r1
   12c3c:	24ff      	movs	r4, #255	; 0xff
   12c3e:	e6bd      	b.n	129bc <__aeabi_fsub+0x8c>
   12c40:	0033      	movs	r3, r6
   12c42:	24ff      	movs	r4, #255	; 0xff
   12c44:	e6ba      	b.n	129bc <__aeabi_fsub+0x8c>
   12c46:	2301      	movs	r3, #1
   12c48:	e76e      	b.n	12b28 <__aeabi_fsub+0x1f8>
   12c4a:	0033      	movs	r3, r6
   12c4c:	0004      	movs	r4, r0
   12c4e:	e6b5      	b.n	129bc <__aeabi_fsub+0x8c>
   12c50:	2700      	movs	r7, #0
   12c52:	2200      	movs	r2, #0
   12c54:	e71c      	b.n	12a90 <__aeabi_fsub+0x160>
   12c56:	0033      	movs	r3, r6
   12c58:	e6b0      	b.n	129bc <__aeabi_fsub+0x8c>
   12c5a:	2301      	movs	r3, #1
   12c5c:	e7c0      	b.n	12be0 <__aeabi_fsub+0x2b0>
   12c5e:	46c0      	nop			; (mov r8, r8)
   12c60:	7dffffff 	.word	0x7dffffff
   12c64:	fbffffff 	.word	0xfbffffff

00012c68 <__aeabi_f2iz>:
   12c68:	0241      	lsls	r1, r0, #9
   12c6a:	0043      	lsls	r3, r0, #1
   12c6c:	0fc2      	lsrs	r2, r0, #31
   12c6e:	0a49      	lsrs	r1, r1, #9
   12c70:	0e1b      	lsrs	r3, r3, #24
   12c72:	2000      	movs	r0, #0
   12c74:	2b7e      	cmp	r3, #126	; 0x7e
   12c76:	dd0d      	ble.n	12c94 <__aeabi_f2iz+0x2c>
   12c78:	2b9d      	cmp	r3, #157	; 0x9d
   12c7a:	dc0c      	bgt.n	12c96 <__aeabi_f2iz+0x2e>
   12c7c:	2080      	movs	r0, #128	; 0x80
   12c7e:	0400      	lsls	r0, r0, #16
   12c80:	4301      	orrs	r1, r0
   12c82:	2b95      	cmp	r3, #149	; 0x95
   12c84:	dc0a      	bgt.n	12c9c <__aeabi_f2iz+0x34>
   12c86:	2096      	movs	r0, #150	; 0x96
   12c88:	1ac3      	subs	r3, r0, r3
   12c8a:	40d9      	lsrs	r1, r3
   12c8c:	4248      	negs	r0, r1
   12c8e:	2a00      	cmp	r2, #0
   12c90:	d100      	bne.n	12c94 <__aeabi_f2iz+0x2c>
   12c92:	0008      	movs	r0, r1
   12c94:	4770      	bx	lr
   12c96:	4b03      	ldr	r3, [pc, #12]	; (12ca4 <__aeabi_f2iz+0x3c>)
   12c98:	18d0      	adds	r0, r2, r3
   12c9a:	e7fb      	b.n	12c94 <__aeabi_f2iz+0x2c>
   12c9c:	3b96      	subs	r3, #150	; 0x96
   12c9e:	4099      	lsls	r1, r3
   12ca0:	e7f4      	b.n	12c8c <__aeabi_f2iz+0x24>
   12ca2:	46c0      	nop			; (mov r8, r8)
   12ca4:	7fffffff 	.word	0x7fffffff

00012ca8 <__aeabi_i2f>:
   12ca8:	b570      	push	{r4, r5, r6, lr}
   12caa:	2800      	cmp	r0, #0
   12cac:	d030      	beq.n	12d10 <__aeabi_i2f+0x68>
   12cae:	17c3      	asrs	r3, r0, #31
   12cb0:	18c4      	adds	r4, r0, r3
   12cb2:	405c      	eors	r4, r3
   12cb4:	0fc5      	lsrs	r5, r0, #31
   12cb6:	0020      	movs	r0, r4
   12cb8:	f001 fdf0 	bl	1489c <__clzsi2>
   12cbc:	239e      	movs	r3, #158	; 0x9e
   12cbe:	1a1b      	subs	r3, r3, r0
   12cc0:	2b96      	cmp	r3, #150	; 0x96
   12cc2:	dc0d      	bgt.n	12ce0 <__aeabi_i2f+0x38>
   12cc4:	2296      	movs	r2, #150	; 0x96
   12cc6:	1ad2      	subs	r2, r2, r3
   12cc8:	4094      	lsls	r4, r2
   12cca:	002a      	movs	r2, r5
   12ccc:	0264      	lsls	r4, r4, #9
   12cce:	0a64      	lsrs	r4, r4, #9
   12cd0:	b2db      	uxtb	r3, r3
   12cd2:	0264      	lsls	r4, r4, #9
   12cd4:	05db      	lsls	r3, r3, #23
   12cd6:	0a60      	lsrs	r0, r4, #9
   12cd8:	07d2      	lsls	r2, r2, #31
   12cda:	4318      	orrs	r0, r3
   12cdc:	4310      	orrs	r0, r2
   12cde:	bd70      	pop	{r4, r5, r6, pc}
   12ce0:	2b99      	cmp	r3, #153	; 0x99
   12ce2:	dc19      	bgt.n	12d18 <__aeabi_i2f+0x70>
   12ce4:	2299      	movs	r2, #153	; 0x99
   12ce6:	1ad2      	subs	r2, r2, r3
   12ce8:	2a00      	cmp	r2, #0
   12cea:	dd29      	ble.n	12d40 <__aeabi_i2f+0x98>
   12cec:	4094      	lsls	r4, r2
   12cee:	0022      	movs	r2, r4
   12cf0:	4c14      	ldr	r4, [pc, #80]	; (12d44 <__aeabi_i2f+0x9c>)
   12cf2:	4014      	ands	r4, r2
   12cf4:	0751      	lsls	r1, r2, #29
   12cf6:	d004      	beq.n	12d02 <__aeabi_i2f+0x5a>
   12cf8:	210f      	movs	r1, #15
   12cfa:	400a      	ands	r2, r1
   12cfc:	2a04      	cmp	r2, #4
   12cfe:	d000      	beq.n	12d02 <__aeabi_i2f+0x5a>
   12d00:	3404      	adds	r4, #4
   12d02:	0162      	lsls	r2, r4, #5
   12d04:	d413      	bmi.n	12d2e <__aeabi_i2f+0x86>
   12d06:	01a4      	lsls	r4, r4, #6
   12d08:	0a64      	lsrs	r4, r4, #9
   12d0a:	b2db      	uxtb	r3, r3
   12d0c:	002a      	movs	r2, r5
   12d0e:	e7e0      	b.n	12cd2 <__aeabi_i2f+0x2a>
   12d10:	2200      	movs	r2, #0
   12d12:	2300      	movs	r3, #0
   12d14:	2400      	movs	r4, #0
   12d16:	e7dc      	b.n	12cd2 <__aeabi_i2f+0x2a>
   12d18:	2205      	movs	r2, #5
   12d1a:	0021      	movs	r1, r4
   12d1c:	1a12      	subs	r2, r2, r0
   12d1e:	40d1      	lsrs	r1, r2
   12d20:	22b9      	movs	r2, #185	; 0xb9
   12d22:	1ad2      	subs	r2, r2, r3
   12d24:	4094      	lsls	r4, r2
   12d26:	1e62      	subs	r2, r4, #1
   12d28:	4194      	sbcs	r4, r2
   12d2a:	430c      	orrs	r4, r1
   12d2c:	e7da      	b.n	12ce4 <__aeabi_i2f+0x3c>
   12d2e:	4b05      	ldr	r3, [pc, #20]	; (12d44 <__aeabi_i2f+0x9c>)
   12d30:	002a      	movs	r2, r5
   12d32:	401c      	ands	r4, r3
   12d34:	239f      	movs	r3, #159	; 0x9f
   12d36:	01a4      	lsls	r4, r4, #6
   12d38:	1a1b      	subs	r3, r3, r0
   12d3a:	0a64      	lsrs	r4, r4, #9
   12d3c:	b2db      	uxtb	r3, r3
   12d3e:	e7c8      	b.n	12cd2 <__aeabi_i2f+0x2a>
   12d40:	0022      	movs	r2, r4
   12d42:	e7d5      	b.n	12cf0 <__aeabi_i2f+0x48>
   12d44:	fbffffff 	.word	0xfbffffff

00012d48 <__aeabi_ui2f>:
   12d48:	b510      	push	{r4, lr}
   12d4a:	1e04      	subs	r4, r0, #0
   12d4c:	d027      	beq.n	12d9e <__aeabi_ui2f+0x56>
   12d4e:	f001 fda5 	bl	1489c <__clzsi2>
   12d52:	239e      	movs	r3, #158	; 0x9e
   12d54:	1a1b      	subs	r3, r3, r0
   12d56:	2b96      	cmp	r3, #150	; 0x96
   12d58:	dc0a      	bgt.n	12d70 <__aeabi_ui2f+0x28>
   12d5a:	2296      	movs	r2, #150	; 0x96
   12d5c:	1ad2      	subs	r2, r2, r3
   12d5e:	4094      	lsls	r4, r2
   12d60:	0264      	lsls	r4, r4, #9
   12d62:	0a64      	lsrs	r4, r4, #9
   12d64:	b2db      	uxtb	r3, r3
   12d66:	0264      	lsls	r4, r4, #9
   12d68:	05db      	lsls	r3, r3, #23
   12d6a:	0a60      	lsrs	r0, r4, #9
   12d6c:	4318      	orrs	r0, r3
   12d6e:	bd10      	pop	{r4, pc}
   12d70:	2b99      	cmp	r3, #153	; 0x99
   12d72:	dc17      	bgt.n	12da4 <__aeabi_ui2f+0x5c>
   12d74:	2299      	movs	r2, #153	; 0x99
   12d76:	1ad2      	subs	r2, r2, r3
   12d78:	2a00      	cmp	r2, #0
   12d7a:	dd27      	ble.n	12dcc <__aeabi_ui2f+0x84>
   12d7c:	4094      	lsls	r4, r2
   12d7e:	0022      	movs	r2, r4
   12d80:	4c13      	ldr	r4, [pc, #76]	; (12dd0 <__aeabi_ui2f+0x88>)
   12d82:	4014      	ands	r4, r2
   12d84:	0751      	lsls	r1, r2, #29
   12d86:	d004      	beq.n	12d92 <__aeabi_ui2f+0x4a>
   12d88:	210f      	movs	r1, #15
   12d8a:	400a      	ands	r2, r1
   12d8c:	2a04      	cmp	r2, #4
   12d8e:	d000      	beq.n	12d92 <__aeabi_ui2f+0x4a>
   12d90:	3404      	adds	r4, #4
   12d92:	0162      	lsls	r2, r4, #5
   12d94:	d412      	bmi.n	12dbc <__aeabi_ui2f+0x74>
   12d96:	01a4      	lsls	r4, r4, #6
   12d98:	0a64      	lsrs	r4, r4, #9
   12d9a:	b2db      	uxtb	r3, r3
   12d9c:	e7e3      	b.n	12d66 <__aeabi_ui2f+0x1e>
   12d9e:	2300      	movs	r3, #0
   12da0:	2400      	movs	r4, #0
   12da2:	e7e0      	b.n	12d66 <__aeabi_ui2f+0x1e>
   12da4:	22b9      	movs	r2, #185	; 0xb9
   12da6:	0021      	movs	r1, r4
   12da8:	1ad2      	subs	r2, r2, r3
   12daa:	4091      	lsls	r1, r2
   12dac:	000a      	movs	r2, r1
   12dae:	1e51      	subs	r1, r2, #1
   12db0:	418a      	sbcs	r2, r1
   12db2:	2105      	movs	r1, #5
   12db4:	1a09      	subs	r1, r1, r0
   12db6:	40cc      	lsrs	r4, r1
   12db8:	4314      	orrs	r4, r2
   12dba:	e7db      	b.n	12d74 <__aeabi_ui2f+0x2c>
   12dbc:	4b04      	ldr	r3, [pc, #16]	; (12dd0 <__aeabi_ui2f+0x88>)
   12dbe:	401c      	ands	r4, r3
   12dc0:	239f      	movs	r3, #159	; 0x9f
   12dc2:	01a4      	lsls	r4, r4, #6
   12dc4:	1a1b      	subs	r3, r3, r0
   12dc6:	0a64      	lsrs	r4, r4, #9
   12dc8:	b2db      	uxtb	r3, r3
   12dca:	e7cc      	b.n	12d66 <__aeabi_ui2f+0x1e>
   12dcc:	0022      	movs	r2, r4
   12dce:	e7d7      	b.n	12d80 <__aeabi_ui2f+0x38>
   12dd0:	fbffffff 	.word	0xfbffffff

00012dd4 <__aeabi_dadd>:
   12dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12dd6:	4645      	mov	r5, r8
   12dd8:	46de      	mov	lr, fp
   12dda:	4657      	mov	r7, sl
   12ddc:	464e      	mov	r6, r9
   12dde:	030c      	lsls	r4, r1, #12
   12de0:	b5e0      	push	{r5, r6, r7, lr}
   12de2:	004e      	lsls	r6, r1, #1
   12de4:	0fc9      	lsrs	r1, r1, #31
   12de6:	4688      	mov	r8, r1
   12de8:	000d      	movs	r5, r1
   12dea:	0a61      	lsrs	r1, r4, #9
   12dec:	0f44      	lsrs	r4, r0, #29
   12dee:	430c      	orrs	r4, r1
   12df0:	00c7      	lsls	r7, r0, #3
   12df2:	0319      	lsls	r1, r3, #12
   12df4:	0058      	lsls	r0, r3, #1
   12df6:	0fdb      	lsrs	r3, r3, #31
   12df8:	469b      	mov	fp, r3
   12dfa:	0a4b      	lsrs	r3, r1, #9
   12dfc:	0f51      	lsrs	r1, r2, #29
   12dfe:	430b      	orrs	r3, r1
   12e00:	0d76      	lsrs	r6, r6, #21
   12e02:	0d40      	lsrs	r0, r0, #21
   12e04:	0019      	movs	r1, r3
   12e06:	00d2      	lsls	r2, r2, #3
   12e08:	45d8      	cmp	r8, fp
   12e0a:	d100      	bne.n	12e0e <__aeabi_dadd+0x3a>
   12e0c:	e0ae      	b.n	12f6c <__aeabi_dadd+0x198>
   12e0e:	1a35      	subs	r5, r6, r0
   12e10:	2d00      	cmp	r5, #0
   12e12:	dc00      	bgt.n	12e16 <__aeabi_dadd+0x42>
   12e14:	e0f6      	b.n	13004 <__aeabi_dadd+0x230>
   12e16:	2800      	cmp	r0, #0
   12e18:	d10f      	bne.n	12e3a <__aeabi_dadd+0x66>
   12e1a:	4313      	orrs	r3, r2
   12e1c:	d100      	bne.n	12e20 <__aeabi_dadd+0x4c>
   12e1e:	e0db      	b.n	12fd8 <__aeabi_dadd+0x204>
   12e20:	1e6b      	subs	r3, r5, #1
   12e22:	2b00      	cmp	r3, #0
   12e24:	d000      	beq.n	12e28 <__aeabi_dadd+0x54>
   12e26:	e137      	b.n	13098 <__aeabi_dadd+0x2c4>
   12e28:	1aba      	subs	r2, r7, r2
   12e2a:	4297      	cmp	r7, r2
   12e2c:	41bf      	sbcs	r7, r7
   12e2e:	1a64      	subs	r4, r4, r1
   12e30:	427f      	negs	r7, r7
   12e32:	1be4      	subs	r4, r4, r7
   12e34:	2601      	movs	r6, #1
   12e36:	0017      	movs	r7, r2
   12e38:	e024      	b.n	12e84 <__aeabi_dadd+0xb0>
   12e3a:	4bc6      	ldr	r3, [pc, #792]	; (13154 <__aeabi_dadd+0x380>)
   12e3c:	429e      	cmp	r6, r3
   12e3e:	d04d      	beq.n	12edc <__aeabi_dadd+0x108>
   12e40:	2380      	movs	r3, #128	; 0x80
   12e42:	041b      	lsls	r3, r3, #16
   12e44:	4319      	orrs	r1, r3
   12e46:	2d38      	cmp	r5, #56	; 0x38
   12e48:	dd00      	ble.n	12e4c <__aeabi_dadd+0x78>
   12e4a:	e107      	b.n	1305c <__aeabi_dadd+0x288>
   12e4c:	2d1f      	cmp	r5, #31
   12e4e:	dd00      	ble.n	12e52 <__aeabi_dadd+0x7e>
   12e50:	e138      	b.n	130c4 <__aeabi_dadd+0x2f0>
   12e52:	2020      	movs	r0, #32
   12e54:	1b43      	subs	r3, r0, r5
   12e56:	469a      	mov	sl, r3
   12e58:	000b      	movs	r3, r1
   12e5a:	4650      	mov	r0, sl
   12e5c:	4083      	lsls	r3, r0
   12e5e:	4699      	mov	r9, r3
   12e60:	0013      	movs	r3, r2
   12e62:	4648      	mov	r0, r9
   12e64:	40eb      	lsrs	r3, r5
   12e66:	4318      	orrs	r0, r3
   12e68:	0003      	movs	r3, r0
   12e6a:	4650      	mov	r0, sl
   12e6c:	4082      	lsls	r2, r0
   12e6e:	1e50      	subs	r0, r2, #1
   12e70:	4182      	sbcs	r2, r0
   12e72:	40e9      	lsrs	r1, r5
   12e74:	431a      	orrs	r2, r3
   12e76:	1aba      	subs	r2, r7, r2
   12e78:	1a61      	subs	r1, r4, r1
   12e7a:	4297      	cmp	r7, r2
   12e7c:	41a4      	sbcs	r4, r4
   12e7e:	0017      	movs	r7, r2
   12e80:	4264      	negs	r4, r4
   12e82:	1b0c      	subs	r4, r1, r4
   12e84:	0223      	lsls	r3, r4, #8
   12e86:	d562      	bpl.n	12f4e <__aeabi_dadd+0x17a>
   12e88:	0264      	lsls	r4, r4, #9
   12e8a:	0a65      	lsrs	r5, r4, #9
   12e8c:	2d00      	cmp	r5, #0
   12e8e:	d100      	bne.n	12e92 <__aeabi_dadd+0xbe>
   12e90:	e0df      	b.n	13052 <__aeabi_dadd+0x27e>
   12e92:	0028      	movs	r0, r5
   12e94:	f001 fd02 	bl	1489c <__clzsi2>
   12e98:	0003      	movs	r3, r0
   12e9a:	3b08      	subs	r3, #8
   12e9c:	2b1f      	cmp	r3, #31
   12e9e:	dd00      	ble.n	12ea2 <__aeabi_dadd+0xce>
   12ea0:	e0d2      	b.n	13048 <__aeabi_dadd+0x274>
   12ea2:	2220      	movs	r2, #32
   12ea4:	003c      	movs	r4, r7
   12ea6:	1ad2      	subs	r2, r2, r3
   12ea8:	409d      	lsls	r5, r3
   12eaa:	40d4      	lsrs	r4, r2
   12eac:	409f      	lsls	r7, r3
   12eae:	4325      	orrs	r5, r4
   12eb0:	429e      	cmp	r6, r3
   12eb2:	dd00      	ble.n	12eb6 <__aeabi_dadd+0xe2>
   12eb4:	e0c4      	b.n	13040 <__aeabi_dadd+0x26c>
   12eb6:	1b9e      	subs	r6, r3, r6
   12eb8:	1c73      	adds	r3, r6, #1
   12eba:	2b1f      	cmp	r3, #31
   12ebc:	dd00      	ble.n	12ec0 <__aeabi_dadd+0xec>
   12ebe:	e0f1      	b.n	130a4 <__aeabi_dadd+0x2d0>
   12ec0:	2220      	movs	r2, #32
   12ec2:	0038      	movs	r0, r7
   12ec4:	0029      	movs	r1, r5
   12ec6:	1ad2      	subs	r2, r2, r3
   12ec8:	40d8      	lsrs	r0, r3
   12eca:	4091      	lsls	r1, r2
   12ecc:	4097      	lsls	r7, r2
   12ece:	002c      	movs	r4, r5
   12ed0:	4301      	orrs	r1, r0
   12ed2:	1e78      	subs	r0, r7, #1
   12ed4:	4187      	sbcs	r7, r0
   12ed6:	40dc      	lsrs	r4, r3
   12ed8:	2600      	movs	r6, #0
   12eda:	430f      	orrs	r7, r1
   12edc:	077b      	lsls	r3, r7, #29
   12ede:	d009      	beq.n	12ef4 <__aeabi_dadd+0x120>
   12ee0:	230f      	movs	r3, #15
   12ee2:	403b      	ands	r3, r7
   12ee4:	2b04      	cmp	r3, #4
   12ee6:	d005      	beq.n	12ef4 <__aeabi_dadd+0x120>
   12ee8:	1d3b      	adds	r3, r7, #4
   12eea:	42bb      	cmp	r3, r7
   12eec:	41bf      	sbcs	r7, r7
   12eee:	427f      	negs	r7, r7
   12ef0:	19e4      	adds	r4, r4, r7
   12ef2:	001f      	movs	r7, r3
   12ef4:	0223      	lsls	r3, r4, #8
   12ef6:	d52c      	bpl.n	12f52 <__aeabi_dadd+0x17e>
   12ef8:	4b96      	ldr	r3, [pc, #600]	; (13154 <__aeabi_dadd+0x380>)
   12efa:	3601      	adds	r6, #1
   12efc:	429e      	cmp	r6, r3
   12efe:	d100      	bne.n	12f02 <__aeabi_dadd+0x12e>
   12f00:	e09a      	b.n	13038 <__aeabi_dadd+0x264>
   12f02:	4645      	mov	r5, r8
   12f04:	4b94      	ldr	r3, [pc, #592]	; (13158 <__aeabi_dadd+0x384>)
   12f06:	08ff      	lsrs	r7, r7, #3
   12f08:	401c      	ands	r4, r3
   12f0a:	0760      	lsls	r0, r4, #29
   12f0c:	0576      	lsls	r6, r6, #21
   12f0e:	0264      	lsls	r4, r4, #9
   12f10:	4307      	orrs	r7, r0
   12f12:	0b24      	lsrs	r4, r4, #12
   12f14:	0d76      	lsrs	r6, r6, #21
   12f16:	2100      	movs	r1, #0
   12f18:	0324      	lsls	r4, r4, #12
   12f1a:	0b23      	lsrs	r3, r4, #12
   12f1c:	0d0c      	lsrs	r4, r1, #20
   12f1e:	4a8f      	ldr	r2, [pc, #572]	; (1315c <__aeabi_dadd+0x388>)
   12f20:	0524      	lsls	r4, r4, #20
   12f22:	431c      	orrs	r4, r3
   12f24:	4014      	ands	r4, r2
   12f26:	0533      	lsls	r3, r6, #20
   12f28:	4323      	orrs	r3, r4
   12f2a:	005b      	lsls	r3, r3, #1
   12f2c:	07ed      	lsls	r5, r5, #31
   12f2e:	085b      	lsrs	r3, r3, #1
   12f30:	432b      	orrs	r3, r5
   12f32:	0038      	movs	r0, r7
   12f34:	0019      	movs	r1, r3
   12f36:	bc3c      	pop	{r2, r3, r4, r5}
   12f38:	4690      	mov	r8, r2
   12f3a:	4699      	mov	r9, r3
   12f3c:	46a2      	mov	sl, r4
   12f3e:	46ab      	mov	fp, r5
   12f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12f42:	4664      	mov	r4, ip
   12f44:	4304      	orrs	r4, r0
   12f46:	d100      	bne.n	12f4a <__aeabi_dadd+0x176>
   12f48:	e211      	b.n	1336e <__aeabi_dadd+0x59a>
   12f4a:	0004      	movs	r4, r0
   12f4c:	4667      	mov	r7, ip
   12f4e:	077b      	lsls	r3, r7, #29
   12f50:	d1c6      	bne.n	12ee0 <__aeabi_dadd+0x10c>
   12f52:	4645      	mov	r5, r8
   12f54:	0760      	lsls	r0, r4, #29
   12f56:	08ff      	lsrs	r7, r7, #3
   12f58:	4307      	orrs	r7, r0
   12f5a:	08e4      	lsrs	r4, r4, #3
   12f5c:	4b7d      	ldr	r3, [pc, #500]	; (13154 <__aeabi_dadd+0x380>)
   12f5e:	429e      	cmp	r6, r3
   12f60:	d030      	beq.n	12fc4 <__aeabi_dadd+0x1f0>
   12f62:	0324      	lsls	r4, r4, #12
   12f64:	0576      	lsls	r6, r6, #21
   12f66:	0b24      	lsrs	r4, r4, #12
   12f68:	0d76      	lsrs	r6, r6, #21
   12f6a:	e7d4      	b.n	12f16 <__aeabi_dadd+0x142>
   12f6c:	1a33      	subs	r3, r6, r0
   12f6e:	469a      	mov	sl, r3
   12f70:	2b00      	cmp	r3, #0
   12f72:	dd78      	ble.n	13066 <__aeabi_dadd+0x292>
   12f74:	2800      	cmp	r0, #0
   12f76:	d031      	beq.n	12fdc <__aeabi_dadd+0x208>
   12f78:	4876      	ldr	r0, [pc, #472]	; (13154 <__aeabi_dadd+0x380>)
   12f7a:	4286      	cmp	r6, r0
   12f7c:	d0ae      	beq.n	12edc <__aeabi_dadd+0x108>
   12f7e:	2080      	movs	r0, #128	; 0x80
   12f80:	0400      	lsls	r0, r0, #16
   12f82:	4301      	orrs	r1, r0
   12f84:	4653      	mov	r3, sl
   12f86:	2b38      	cmp	r3, #56	; 0x38
   12f88:	dc00      	bgt.n	12f8c <__aeabi_dadd+0x1b8>
   12f8a:	e0e9      	b.n	13160 <__aeabi_dadd+0x38c>
   12f8c:	430a      	orrs	r2, r1
   12f8e:	1e51      	subs	r1, r2, #1
   12f90:	418a      	sbcs	r2, r1
   12f92:	2100      	movs	r1, #0
   12f94:	19d2      	adds	r2, r2, r7
   12f96:	42ba      	cmp	r2, r7
   12f98:	41bf      	sbcs	r7, r7
   12f9a:	1909      	adds	r1, r1, r4
   12f9c:	427c      	negs	r4, r7
   12f9e:	0017      	movs	r7, r2
   12fa0:	190c      	adds	r4, r1, r4
   12fa2:	0223      	lsls	r3, r4, #8
   12fa4:	d5d3      	bpl.n	12f4e <__aeabi_dadd+0x17a>
   12fa6:	4b6b      	ldr	r3, [pc, #428]	; (13154 <__aeabi_dadd+0x380>)
   12fa8:	3601      	adds	r6, #1
   12faa:	429e      	cmp	r6, r3
   12fac:	d100      	bne.n	12fb0 <__aeabi_dadd+0x1dc>
   12fae:	e13a      	b.n	13226 <__aeabi_dadd+0x452>
   12fb0:	2001      	movs	r0, #1
   12fb2:	4b69      	ldr	r3, [pc, #420]	; (13158 <__aeabi_dadd+0x384>)
   12fb4:	401c      	ands	r4, r3
   12fb6:	087b      	lsrs	r3, r7, #1
   12fb8:	4007      	ands	r7, r0
   12fba:	431f      	orrs	r7, r3
   12fbc:	07e0      	lsls	r0, r4, #31
   12fbe:	4307      	orrs	r7, r0
   12fc0:	0864      	lsrs	r4, r4, #1
   12fc2:	e78b      	b.n	12edc <__aeabi_dadd+0x108>
   12fc4:	0023      	movs	r3, r4
   12fc6:	433b      	orrs	r3, r7
   12fc8:	d100      	bne.n	12fcc <__aeabi_dadd+0x1f8>
   12fca:	e1cb      	b.n	13364 <__aeabi_dadd+0x590>
   12fcc:	2280      	movs	r2, #128	; 0x80
   12fce:	0312      	lsls	r2, r2, #12
   12fd0:	4314      	orrs	r4, r2
   12fd2:	0324      	lsls	r4, r4, #12
   12fd4:	0b24      	lsrs	r4, r4, #12
   12fd6:	e79e      	b.n	12f16 <__aeabi_dadd+0x142>
   12fd8:	002e      	movs	r6, r5
   12fda:	e77f      	b.n	12edc <__aeabi_dadd+0x108>
   12fdc:	0008      	movs	r0, r1
   12fde:	4310      	orrs	r0, r2
   12fe0:	d100      	bne.n	12fe4 <__aeabi_dadd+0x210>
   12fe2:	e0b4      	b.n	1314e <__aeabi_dadd+0x37a>
   12fe4:	1e58      	subs	r0, r3, #1
   12fe6:	2800      	cmp	r0, #0
   12fe8:	d000      	beq.n	12fec <__aeabi_dadd+0x218>
   12fea:	e0de      	b.n	131aa <__aeabi_dadd+0x3d6>
   12fec:	18ba      	adds	r2, r7, r2
   12fee:	42ba      	cmp	r2, r7
   12ff0:	419b      	sbcs	r3, r3
   12ff2:	1864      	adds	r4, r4, r1
   12ff4:	425b      	negs	r3, r3
   12ff6:	18e4      	adds	r4, r4, r3
   12ff8:	0017      	movs	r7, r2
   12ffa:	2601      	movs	r6, #1
   12ffc:	0223      	lsls	r3, r4, #8
   12ffe:	d5a6      	bpl.n	12f4e <__aeabi_dadd+0x17a>
   13000:	2602      	movs	r6, #2
   13002:	e7d5      	b.n	12fb0 <__aeabi_dadd+0x1dc>
   13004:	2d00      	cmp	r5, #0
   13006:	d16e      	bne.n	130e6 <__aeabi_dadd+0x312>
   13008:	1c70      	adds	r0, r6, #1
   1300a:	0540      	lsls	r0, r0, #21
   1300c:	0d40      	lsrs	r0, r0, #21
   1300e:	2801      	cmp	r0, #1
   13010:	dc00      	bgt.n	13014 <__aeabi_dadd+0x240>
   13012:	e0f9      	b.n	13208 <__aeabi_dadd+0x434>
   13014:	1ab8      	subs	r0, r7, r2
   13016:	4684      	mov	ip, r0
   13018:	4287      	cmp	r7, r0
   1301a:	4180      	sbcs	r0, r0
   1301c:	1ae5      	subs	r5, r4, r3
   1301e:	4240      	negs	r0, r0
   13020:	1a2d      	subs	r5, r5, r0
   13022:	0228      	lsls	r0, r5, #8
   13024:	d400      	bmi.n	13028 <__aeabi_dadd+0x254>
   13026:	e089      	b.n	1313c <__aeabi_dadd+0x368>
   13028:	1bd7      	subs	r7, r2, r7
   1302a:	42ba      	cmp	r2, r7
   1302c:	4192      	sbcs	r2, r2
   1302e:	1b1c      	subs	r4, r3, r4
   13030:	4252      	negs	r2, r2
   13032:	1aa5      	subs	r5, r4, r2
   13034:	46d8      	mov	r8, fp
   13036:	e729      	b.n	12e8c <__aeabi_dadd+0xb8>
   13038:	4645      	mov	r5, r8
   1303a:	2400      	movs	r4, #0
   1303c:	2700      	movs	r7, #0
   1303e:	e76a      	b.n	12f16 <__aeabi_dadd+0x142>
   13040:	4c45      	ldr	r4, [pc, #276]	; (13158 <__aeabi_dadd+0x384>)
   13042:	1af6      	subs	r6, r6, r3
   13044:	402c      	ands	r4, r5
   13046:	e749      	b.n	12edc <__aeabi_dadd+0x108>
   13048:	003d      	movs	r5, r7
   1304a:	3828      	subs	r0, #40	; 0x28
   1304c:	4085      	lsls	r5, r0
   1304e:	2700      	movs	r7, #0
   13050:	e72e      	b.n	12eb0 <__aeabi_dadd+0xdc>
   13052:	0038      	movs	r0, r7
   13054:	f001 fc22 	bl	1489c <__clzsi2>
   13058:	3020      	adds	r0, #32
   1305a:	e71d      	b.n	12e98 <__aeabi_dadd+0xc4>
   1305c:	430a      	orrs	r2, r1
   1305e:	1e51      	subs	r1, r2, #1
   13060:	418a      	sbcs	r2, r1
   13062:	2100      	movs	r1, #0
   13064:	e707      	b.n	12e76 <__aeabi_dadd+0xa2>
   13066:	2b00      	cmp	r3, #0
   13068:	d000      	beq.n	1306c <__aeabi_dadd+0x298>
   1306a:	e0f3      	b.n	13254 <__aeabi_dadd+0x480>
   1306c:	1c70      	adds	r0, r6, #1
   1306e:	0543      	lsls	r3, r0, #21
   13070:	0d5b      	lsrs	r3, r3, #21
   13072:	2b01      	cmp	r3, #1
   13074:	dc00      	bgt.n	13078 <__aeabi_dadd+0x2a4>
   13076:	e0ad      	b.n	131d4 <__aeabi_dadd+0x400>
   13078:	4b36      	ldr	r3, [pc, #216]	; (13154 <__aeabi_dadd+0x380>)
   1307a:	4298      	cmp	r0, r3
   1307c:	d100      	bne.n	13080 <__aeabi_dadd+0x2ac>
   1307e:	e0d1      	b.n	13224 <__aeabi_dadd+0x450>
   13080:	18ba      	adds	r2, r7, r2
   13082:	42ba      	cmp	r2, r7
   13084:	41bf      	sbcs	r7, r7
   13086:	1864      	adds	r4, r4, r1
   13088:	427f      	negs	r7, r7
   1308a:	19e4      	adds	r4, r4, r7
   1308c:	07e7      	lsls	r7, r4, #31
   1308e:	0852      	lsrs	r2, r2, #1
   13090:	4317      	orrs	r7, r2
   13092:	0864      	lsrs	r4, r4, #1
   13094:	0006      	movs	r6, r0
   13096:	e721      	b.n	12edc <__aeabi_dadd+0x108>
   13098:	482e      	ldr	r0, [pc, #184]	; (13154 <__aeabi_dadd+0x380>)
   1309a:	4285      	cmp	r5, r0
   1309c:	d100      	bne.n	130a0 <__aeabi_dadd+0x2cc>
   1309e:	e093      	b.n	131c8 <__aeabi_dadd+0x3f4>
   130a0:	001d      	movs	r5, r3
   130a2:	e6d0      	b.n	12e46 <__aeabi_dadd+0x72>
   130a4:	0029      	movs	r1, r5
   130a6:	3e1f      	subs	r6, #31
   130a8:	40f1      	lsrs	r1, r6
   130aa:	2b20      	cmp	r3, #32
   130ac:	d100      	bne.n	130b0 <__aeabi_dadd+0x2dc>
   130ae:	e08d      	b.n	131cc <__aeabi_dadd+0x3f8>
   130b0:	2240      	movs	r2, #64	; 0x40
   130b2:	1ad3      	subs	r3, r2, r3
   130b4:	409d      	lsls	r5, r3
   130b6:	432f      	orrs	r7, r5
   130b8:	1e7d      	subs	r5, r7, #1
   130ba:	41af      	sbcs	r7, r5
   130bc:	2400      	movs	r4, #0
   130be:	430f      	orrs	r7, r1
   130c0:	2600      	movs	r6, #0
   130c2:	e744      	b.n	12f4e <__aeabi_dadd+0x17a>
   130c4:	002b      	movs	r3, r5
   130c6:	0008      	movs	r0, r1
   130c8:	3b20      	subs	r3, #32
   130ca:	40d8      	lsrs	r0, r3
   130cc:	0003      	movs	r3, r0
   130ce:	2d20      	cmp	r5, #32
   130d0:	d100      	bne.n	130d4 <__aeabi_dadd+0x300>
   130d2:	e07d      	b.n	131d0 <__aeabi_dadd+0x3fc>
   130d4:	2040      	movs	r0, #64	; 0x40
   130d6:	1b45      	subs	r5, r0, r5
   130d8:	40a9      	lsls	r1, r5
   130da:	430a      	orrs	r2, r1
   130dc:	1e51      	subs	r1, r2, #1
   130de:	418a      	sbcs	r2, r1
   130e0:	2100      	movs	r1, #0
   130e2:	431a      	orrs	r2, r3
   130e4:	e6c7      	b.n	12e76 <__aeabi_dadd+0xa2>
   130e6:	2e00      	cmp	r6, #0
   130e8:	d050      	beq.n	1318c <__aeabi_dadd+0x3b8>
   130ea:	4e1a      	ldr	r6, [pc, #104]	; (13154 <__aeabi_dadd+0x380>)
   130ec:	42b0      	cmp	r0, r6
   130ee:	d057      	beq.n	131a0 <__aeabi_dadd+0x3cc>
   130f0:	2680      	movs	r6, #128	; 0x80
   130f2:	426b      	negs	r3, r5
   130f4:	4699      	mov	r9, r3
   130f6:	0436      	lsls	r6, r6, #16
   130f8:	4334      	orrs	r4, r6
   130fa:	464b      	mov	r3, r9
   130fc:	2b38      	cmp	r3, #56	; 0x38
   130fe:	dd00      	ble.n	13102 <__aeabi_dadd+0x32e>
   13100:	e0d6      	b.n	132b0 <__aeabi_dadd+0x4dc>
   13102:	2b1f      	cmp	r3, #31
   13104:	dd00      	ble.n	13108 <__aeabi_dadd+0x334>
   13106:	e135      	b.n	13374 <__aeabi_dadd+0x5a0>
   13108:	2620      	movs	r6, #32
   1310a:	1af5      	subs	r5, r6, r3
   1310c:	0026      	movs	r6, r4
   1310e:	40ae      	lsls	r6, r5
   13110:	46b2      	mov	sl, r6
   13112:	003e      	movs	r6, r7
   13114:	40de      	lsrs	r6, r3
   13116:	46ac      	mov	ip, r5
   13118:	0035      	movs	r5, r6
   1311a:	4656      	mov	r6, sl
   1311c:	432e      	orrs	r6, r5
   1311e:	4665      	mov	r5, ip
   13120:	40af      	lsls	r7, r5
   13122:	1e7d      	subs	r5, r7, #1
   13124:	41af      	sbcs	r7, r5
   13126:	40dc      	lsrs	r4, r3
   13128:	4337      	orrs	r7, r6
   1312a:	1bd7      	subs	r7, r2, r7
   1312c:	42ba      	cmp	r2, r7
   1312e:	4192      	sbcs	r2, r2
   13130:	1b0c      	subs	r4, r1, r4
   13132:	4252      	negs	r2, r2
   13134:	1aa4      	subs	r4, r4, r2
   13136:	0006      	movs	r6, r0
   13138:	46d8      	mov	r8, fp
   1313a:	e6a3      	b.n	12e84 <__aeabi_dadd+0xb0>
   1313c:	4664      	mov	r4, ip
   1313e:	4667      	mov	r7, ip
   13140:	432c      	orrs	r4, r5
   13142:	d000      	beq.n	13146 <__aeabi_dadd+0x372>
   13144:	e6a2      	b.n	12e8c <__aeabi_dadd+0xb8>
   13146:	2500      	movs	r5, #0
   13148:	2600      	movs	r6, #0
   1314a:	2700      	movs	r7, #0
   1314c:	e706      	b.n	12f5c <__aeabi_dadd+0x188>
   1314e:	001e      	movs	r6, r3
   13150:	e6c4      	b.n	12edc <__aeabi_dadd+0x108>
   13152:	46c0      	nop			; (mov r8, r8)
   13154:	000007ff 	.word	0x000007ff
   13158:	ff7fffff 	.word	0xff7fffff
   1315c:	800fffff 	.word	0x800fffff
   13160:	2b1f      	cmp	r3, #31
   13162:	dc63      	bgt.n	1322c <__aeabi_dadd+0x458>
   13164:	2020      	movs	r0, #32
   13166:	1ac3      	subs	r3, r0, r3
   13168:	0008      	movs	r0, r1
   1316a:	4098      	lsls	r0, r3
   1316c:	469c      	mov	ip, r3
   1316e:	4683      	mov	fp, r0
   13170:	4653      	mov	r3, sl
   13172:	0010      	movs	r0, r2
   13174:	40d8      	lsrs	r0, r3
   13176:	0003      	movs	r3, r0
   13178:	4658      	mov	r0, fp
   1317a:	4318      	orrs	r0, r3
   1317c:	4663      	mov	r3, ip
   1317e:	409a      	lsls	r2, r3
   13180:	1e53      	subs	r3, r2, #1
   13182:	419a      	sbcs	r2, r3
   13184:	4653      	mov	r3, sl
   13186:	4302      	orrs	r2, r0
   13188:	40d9      	lsrs	r1, r3
   1318a:	e703      	b.n	12f94 <__aeabi_dadd+0x1c0>
   1318c:	0026      	movs	r6, r4
   1318e:	433e      	orrs	r6, r7
   13190:	d006      	beq.n	131a0 <__aeabi_dadd+0x3cc>
   13192:	43eb      	mvns	r3, r5
   13194:	4699      	mov	r9, r3
   13196:	2b00      	cmp	r3, #0
   13198:	d0c7      	beq.n	1312a <__aeabi_dadd+0x356>
   1319a:	4e94      	ldr	r6, [pc, #592]	; (133ec <__aeabi_dadd+0x618>)
   1319c:	42b0      	cmp	r0, r6
   1319e:	d1ac      	bne.n	130fa <__aeabi_dadd+0x326>
   131a0:	000c      	movs	r4, r1
   131a2:	0017      	movs	r7, r2
   131a4:	0006      	movs	r6, r0
   131a6:	46d8      	mov	r8, fp
   131a8:	e698      	b.n	12edc <__aeabi_dadd+0x108>
   131aa:	4b90      	ldr	r3, [pc, #576]	; (133ec <__aeabi_dadd+0x618>)
   131ac:	459a      	cmp	sl, r3
   131ae:	d00b      	beq.n	131c8 <__aeabi_dadd+0x3f4>
   131b0:	4682      	mov	sl, r0
   131b2:	e6e7      	b.n	12f84 <__aeabi_dadd+0x1b0>
   131b4:	2800      	cmp	r0, #0
   131b6:	d000      	beq.n	131ba <__aeabi_dadd+0x3e6>
   131b8:	e09e      	b.n	132f8 <__aeabi_dadd+0x524>
   131ba:	0018      	movs	r0, r3
   131bc:	4310      	orrs	r0, r2
   131be:	d100      	bne.n	131c2 <__aeabi_dadd+0x3ee>
   131c0:	e0e9      	b.n	13396 <__aeabi_dadd+0x5c2>
   131c2:	001c      	movs	r4, r3
   131c4:	0017      	movs	r7, r2
   131c6:	46d8      	mov	r8, fp
   131c8:	4e88      	ldr	r6, [pc, #544]	; (133ec <__aeabi_dadd+0x618>)
   131ca:	e687      	b.n	12edc <__aeabi_dadd+0x108>
   131cc:	2500      	movs	r5, #0
   131ce:	e772      	b.n	130b6 <__aeabi_dadd+0x2e2>
   131d0:	2100      	movs	r1, #0
   131d2:	e782      	b.n	130da <__aeabi_dadd+0x306>
   131d4:	0023      	movs	r3, r4
   131d6:	433b      	orrs	r3, r7
   131d8:	2e00      	cmp	r6, #0
   131da:	d000      	beq.n	131de <__aeabi_dadd+0x40a>
   131dc:	e0ab      	b.n	13336 <__aeabi_dadd+0x562>
   131de:	2b00      	cmp	r3, #0
   131e0:	d100      	bne.n	131e4 <__aeabi_dadd+0x410>
   131e2:	e0e7      	b.n	133b4 <__aeabi_dadd+0x5e0>
   131e4:	000b      	movs	r3, r1
   131e6:	4313      	orrs	r3, r2
   131e8:	d100      	bne.n	131ec <__aeabi_dadd+0x418>
   131ea:	e677      	b.n	12edc <__aeabi_dadd+0x108>
   131ec:	18ba      	adds	r2, r7, r2
   131ee:	42ba      	cmp	r2, r7
   131f0:	41bf      	sbcs	r7, r7
   131f2:	1864      	adds	r4, r4, r1
   131f4:	427f      	negs	r7, r7
   131f6:	19e4      	adds	r4, r4, r7
   131f8:	0223      	lsls	r3, r4, #8
   131fa:	d400      	bmi.n	131fe <__aeabi_dadd+0x42a>
   131fc:	e0f2      	b.n	133e4 <__aeabi_dadd+0x610>
   131fe:	4b7c      	ldr	r3, [pc, #496]	; (133f0 <__aeabi_dadd+0x61c>)
   13200:	0017      	movs	r7, r2
   13202:	401c      	ands	r4, r3
   13204:	0006      	movs	r6, r0
   13206:	e669      	b.n	12edc <__aeabi_dadd+0x108>
   13208:	0020      	movs	r0, r4
   1320a:	4338      	orrs	r0, r7
   1320c:	2e00      	cmp	r6, #0
   1320e:	d1d1      	bne.n	131b4 <__aeabi_dadd+0x3e0>
   13210:	2800      	cmp	r0, #0
   13212:	d15b      	bne.n	132cc <__aeabi_dadd+0x4f8>
   13214:	001c      	movs	r4, r3
   13216:	4314      	orrs	r4, r2
   13218:	d100      	bne.n	1321c <__aeabi_dadd+0x448>
   1321a:	e0a8      	b.n	1336e <__aeabi_dadd+0x59a>
   1321c:	001c      	movs	r4, r3
   1321e:	0017      	movs	r7, r2
   13220:	46d8      	mov	r8, fp
   13222:	e65b      	b.n	12edc <__aeabi_dadd+0x108>
   13224:	0006      	movs	r6, r0
   13226:	2400      	movs	r4, #0
   13228:	2700      	movs	r7, #0
   1322a:	e697      	b.n	12f5c <__aeabi_dadd+0x188>
   1322c:	4650      	mov	r0, sl
   1322e:	000b      	movs	r3, r1
   13230:	3820      	subs	r0, #32
   13232:	40c3      	lsrs	r3, r0
   13234:	4699      	mov	r9, r3
   13236:	4653      	mov	r3, sl
   13238:	2b20      	cmp	r3, #32
   1323a:	d100      	bne.n	1323e <__aeabi_dadd+0x46a>
   1323c:	e095      	b.n	1336a <__aeabi_dadd+0x596>
   1323e:	2340      	movs	r3, #64	; 0x40
   13240:	4650      	mov	r0, sl
   13242:	1a1b      	subs	r3, r3, r0
   13244:	4099      	lsls	r1, r3
   13246:	430a      	orrs	r2, r1
   13248:	1e51      	subs	r1, r2, #1
   1324a:	418a      	sbcs	r2, r1
   1324c:	464b      	mov	r3, r9
   1324e:	2100      	movs	r1, #0
   13250:	431a      	orrs	r2, r3
   13252:	e69f      	b.n	12f94 <__aeabi_dadd+0x1c0>
   13254:	2e00      	cmp	r6, #0
   13256:	d130      	bne.n	132ba <__aeabi_dadd+0x4e6>
   13258:	0026      	movs	r6, r4
   1325a:	433e      	orrs	r6, r7
   1325c:	d067      	beq.n	1332e <__aeabi_dadd+0x55a>
   1325e:	43db      	mvns	r3, r3
   13260:	469a      	mov	sl, r3
   13262:	2b00      	cmp	r3, #0
   13264:	d01c      	beq.n	132a0 <__aeabi_dadd+0x4cc>
   13266:	4e61      	ldr	r6, [pc, #388]	; (133ec <__aeabi_dadd+0x618>)
   13268:	42b0      	cmp	r0, r6
   1326a:	d060      	beq.n	1332e <__aeabi_dadd+0x55a>
   1326c:	4653      	mov	r3, sl
   1326e:	2b38      	cmp	r3, #56	; 0x38
   13270:	dd00      	ble.n	13274 <__aeabi_dadd+0x4a0>
   13272:	e096      	b.n	133a2 <__aeabi_dadd+0x5ce>
   13274:	2b1f      	cmp	r3, #31
   13276:	dd00      	ble.n	1327a <__aeabi_dadd+0x4a6>
   13278:	e09f      	b.n	133ba <__aeabi_dadd+0x5e6>
   1327a:	2620      	movs	r6, #32
   1327c:	1af3      	subs	r3, r6, r3
   1327e:	0026      	movs	r6, r4
   13280:	409e      	lsls	r6, r3
   13282:	469c      	mov	ip, r3
   13284:	46b3      	mov	fp, r6
   13286:	4653      	mov	r3, sl
   13288:	003e      	movs	r6, r7
   1328a:	40de      	lsrs	r6, r3
   1328c:	0033      	movs	r3, r6
   1328e:	465e      	mov	r6, fp
   13290:	431e      	orrs	r6, r3
   13292:	4663      	mov	r3, ip
   13294:	409f      	lsls	r7, r3
   13296:	1e7b      	subs	r3, r7, #1
   13298:	419f      	sbcs	r7, r3
   1329a:	4653      	mov	r3, sl
   1329c:	40dc      	lsrs	r4, r3
   1329e:	4337      	orrs	r7, r6
   132a0:	18bf      	adds	r7, r7, r2
   132a2:	4297      	cmp	r7, r2
   132a4:	4192      	sbcs	r2, r2
   132a6:	1864      	adds	r4, r4, r1
   132a8:	4252      	negs	r2, r2
   132aa:	18a4      	adds	r4, r4, r2
   132ac:	0006      	movs	r6, r0
   132ae:	e678      	b.n	12fa2 <__aeabi_dadd+0x1ce>
   132b0:	4327      	orrs	r7, r4
   132b2:	1e7c      	subs	r4, r7, #1
   132b4:	41a7      	sbcs	r7, r4
   132b6:	2400      	movs	r4, #0
   132b8:	e737      	b.n	1312a <__aeabi_dadd+0x356>
   132ba:	4e4c      	ldr	r6, [pc, #304]	; (133ec <__aeabi_dadd+0x618>)
   132bc:	42b0      	cmp	r0, r6
   132be:	d036      	beq.n	1332e <__aeabi_dadd+0x55a>
   132c0:	2680      	movs	r6, #128	; 0x80
   132c2:	425b      	negs	r3, r3
   132c4:	0436      	lsls	r6, r6, #16
   132c6:	469a      	mov	sl, r3
   132c8:	4334      	orrs	r4, r6
   132ca:	e7cf      	b.n	1326c <__aeabi_dadd+0x498>
   132cc:	0018      	movs	r0, r3
   132ce:	4310      	orrs	r0, r2
   132d0:	d100      	bne.n	132d4 <__aeabi_dadd+0x500>
   132d2:	e603      	b.n	12edc <__aeabi_dadd+0x108>
   132d4:	1ab8      	subs	r0, r7, r2
   132d6:	4684      	mov	ip, r0
   132d8:	4567      	cmp	r7, ip
   132da:	41ad      	sbcs	r5, r5
   132dc:	1ae0      	subs	r0, r4, r3
   132de:	426d      	negs	r5, r5
   132e0:	1b40      	subs	r0, r0, r5
   132e2:	0205      	lsls	r5, r0, #8
   132e4:	d400      	bmi.n	132e8 <__aeabi_dadd+0x514>
   132e6:	e62c      	b.n	12f42 <__aeabi_dadd+0x16e>
   132e8:	1bd7      	subs	r7, r2, r7
   132ea:	42ba      	cmp	r2, r7
   132ec:	4192      	sbcs	r2, r2
   132ee:	1b1c      	subs	r4, r3, r4
   132f0:	4252      	negs	r2, r2
   132f2:	1aa4      	subs	r4, r4, r2
   132f4:	46d8      	mov	r8, fp
   132f6:	e5f1      	b.n	12edc <__aeabi_dadd+0x108>
   132f8:	0018      	movs	r0, r3
   132fa:	4310      	orrs	r0, r2
   132fc:	d100      	bne.n	13300 <__aeabi_dadd+0x52c>
   132fe:	e763      	b.n	131c8 <__aeabi_dadd+0x3f4>
   13300:	08f8      	lsrs	r0, r7, #3
   13302:	0767      	lsls	r7, r4, #29
   13304:	4307      	orrs	r7, r0
   13306:	2080      	movs	r0, #128	; 0x80
   13308:	08e4      	lsrs	r4, r4, #3
   1330a:	0300      	lsls	r0, r0, #12
   1330c:	4204      	tst	r4, r0
   1330e:	d008      	beq.n	13322 <__aeabi_dadd+0x54e>
   13310:	08dd      	lsrs	r5, r3, #3
   13312:	4205      	tst	r5, r0
   13314:	d105      	bne.n	13322 <__aeabi_dadd+0x54e>
   13316:	08d2      	lsrs	r2, r2, #3
   13318:	0759      	lsls	r1, r3, #29
   1331a:	4311      	orrs	r1, r2
   1331c:	000f      	movs	r7, r1
   1331e:	002c      	movs	r4, r5
   13320:	46d8      	mov	r8, fp
   13322:	0f7b      	lsrs	r3, r7, #29
   13324:	00e4      	lsls	r4, r4, #3
   13326:	431c      	orrs	r4, r3
   13328:	00ff      	lsls	r7, r7, #3
   1332a:	4e30      	ldr	r6, [pc, #192]	; (133ec <__aeabi_dadd+0x618>)
   1332c:	e5d6      	b.n	12edc <__aeabi_dadd+0x108>
   1332e:	000c      	movs	r4, r1
   13330:	0017      	movs	r7, r2
   13332:	0006      	movs	r6, r0
   13334:	e5d2      	b.n	12edc <__aeabi_dadd+0x108>
   13336:	2b00      	cmp	r3, #0
   13338:	d038      	beq.n	133ac <__aeabi_dadd+0x5d8>
   1333a:	000b      	movs	r3, r1
   1333c:	4313      	orrs	r3, r2
   1333e:	d100      	bne.n	13342 <__aeabi_dadd+0x56e>
   13340:	e742      	b.n	131c8 <__aeabi_dadd+0x3f4>
   13342:	08f8      	lsrs	r0, r7, #3
   13344:	0767      	lsls	r7, r4, #29
   13346:	4307      	orrs	r7, r0
   13348:	2080      	movs	r0, #128	; 0x80
   1334a:	08e4      	lsrs	r4, r4, #3
   1334c:	0300      	lsls	r0, r0, #12
   1334e:	4204      	tst	r4, r0
   13350:	d0e7      	beq.n	13322 <__aeabi_dadd+0x54e>
   13352:	08cb      	lsrs	r3, r1, #3
   13354:	4203      	tst	r3, r0
   13356:	d1e4      	bne.n	13322 <__aeabi_dadd+0x54e>
   13358:	08d2      	lsrs	r2, r2, #3
   1335a:	0749      	lsls	r1, r1, #29
   1335c:	4311      	orrs	r1, r2
   1335e:	000f      	movs	r7, r1
   13360:	001c      	movs	r4, r3
   13362:	e7de      	b.n	13322 <__aeabi_dadd+0x54e>
   13364:	2700      	movs	r7, #0
   13366:	2400      	movs	r4, #0
   13368:	e5d5      	b.n	12f16 <__aeabi_dadd+0x142>
   1336a:	2100      	movs	r1, #0
   1336c:	e76b      	b.n	13246 <__aeabi_dadd+0x472>
   1336e:	2500      	movs	r5, #0
   13370:	2700      	movs	r7, #0
   13372:	e5f3      	b.n	12f5c <__aeabi_dadd+0x188>
   13374:	464e      	mov	r6, r9
   13376:	0025      	movs	r5, r4
   13378:	3e20      	subs	r6, #32
   1337a:	40f5      	lsrs	r5, r6
   1337c:	464b      	mov	r3, r9
   1337e:	002e      	movs	r6, r5
   13380:	2b20      	cmp	r3, #32
   13382:	d02d      	beq.n	133e0 <__aeabi_dadd+0x60c>
   13384:	2540      	movs	r5, #64	; 0x40
   13386:	1aed      	subs	r5, r5, r3
   13388:	40ac      	lsls	r4, r5
   1338a:	4327      	orrs	r7, r4
   1338c:	1e7c      	subs	r4, r7, #1
   1338e:	41a7      	sbcs	r7, r4
   13390:	2400      	movs	r4, #0
   13392:	4337      	orrs	r7, r6
   13394:	e6c9      	b.n	1312a <__aeabi_dadd+0x356>
   13396:	2480      	movs	r4, #128	; 0x80
   13398:	2500      	movs	r5, #0
   1339a:	0324      	lsls	r4, r4, #12
   1339c:	4e13      	ldr	r6, [pc, #76]	; (133ec <__aeabi_dadd+0x618>)
   1339e:	2700      	movs	r7, #0
   133a0:	e5dc      	b.n	12f5c <__aeabi_dadd+0x188>
   133a2:	4327      	orrs	r7, r4
   133a4:	1e7c      	subs	r4, r7, #1
   133a6:	41a7      	sbcs	r7, r4
   133a8:	2400      	movs	r4, #0
   133aa:	e779      	b.n	132a0 <__aeabi_dadd+0x4cc>
   133ac:	000c      	movs	r4, r1
   133ae:	0017      	movs	r7, r2
   133b0:	4e0e      	ldr	r6, [pc, #56]	; (133ec <__aeabi_dadd+0x618>)
   133b2:	e593      	b.n	12edc <__aeabi_dadd+0x108>
   133b4:	000c      	movs	r4, r1
   133b6:	0017      	movs	r7, r2
   133b8:	e590      	b.n	12edc <__aeabi_dadd+0x108>
   133ba:	4656      	mov	r6, sl
   133bc:	0023      	movs	r3, r4
   133be:	3e20      	subs	r6, #32
   133c0:	40f3      	lsrs	r3, r6
   133c2:	4699      	mov	r9, r3
   133c4:	4653      	mov	r3, sl
   133c6:	2b20      	cmp	r3, #32
   133c8:	d00e      	beq.n	133e8 <__aeabi_dadd+0x614>
   133ca:	2340      	movs	r3, #64	; 0x40
   133cc:	4656      	mov	r6, sl
   133ce:	1b9b      	subs	r3, r3, r6
   133d0:	409c      	lsls	r4, r3
   133d2:	4327      	orrs	r7, r4
   133d4:	1e7c      	subs	r4, r7, #1
   133d6:	41a7      	sbcs	r7, r4
   133d8:	464b      	mov	r3, r9
   133da:	2400      	movs	r4, #0
   133dc:	431f      	orrs	r7, r3
   133de:	e75f      	b.n	132a0 <__aeabi_dadd+0x4cc>
   133e0:	2400      	movs	r4, #0
   133e2:	e7d2      	b.n	1338a <__aeabi_dadd+0x5b6>
   133e4:	0017      	movs	r7, r2
   133e6:	e5b2      	b.n	12f4e <__aeabi_dadd+0x17a>
   133e8:	2400      	movs	r4, #0
   133ea:	e7f2      	b.n	133d2 <__aeabi_dadd+0x5fe>
   133ec:	000007ff 	.word	0x000007ff
   133f0:	ff7fffff 	.word	0xff7fffff

000133f4 <__aeabi_ddiv>:
   133f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   133f6:	4657      	mov	r7, sl
   133f8:	4645      	mov	r5, r8
   133fa:	46de      	mov	lr, fp
   133fc:	464e      	mov	r6, r9
   133fe:	b5e0      	push	{r5, r6, r7, lr}
   13400:	004c      	lsls	r4, r1, #1
   13402:	030e      	lsls	r6, r1, #12
   13404:	b087      	sub	sp, #28
   13406:	4683      	mov	fp, r0
   13408:	4692      	mov	sl, r2
   1340a:	001d      	movs	r5, r3
   1340c:	4680      	mov	r8, r0
   1340e:	0b36      	lsrs	r6, r6, #12
   13410:	0d64      	lsrs	r4, r4, #21
   13412:	0fcf      	lsrs	r7, r1, #31
   13414:	2c00      	cmp	r4, #0
   13416:	d04f      	beq.n	134b8 <__aeabi_ddiv+0xc4>
   13418:	4b6f      	ldr	r3, [pc, #444]	; (135d8 <__aeabi_ddiv+0x1e4>)
   1341a:	429c      	cmp	r4, r3
   1341c:	d035      	beq.n	1348a <__aeabi_ddiv+0x96>
   1341e:	2380      	movs	r3, #128	; 0x80
   13420:	0f42      	lsrs	r2, r0, #29
   13422:	041b      	lsls	r3, r3, #16
   13424:	00f6      	lsls	r6, r6, #3
   13426:	4313      	orrs	r3, r2
   13428:	4333      	orrs	r3, r6
   1342a:	4699      	mov	r9, r3
   1342c:	00c3      	lsls	r3, r0, #3
   1342e:	4698      	mov	r8, r3
   13430:	4b6a      	ldr	r3, [pc, #424]	; (135dc <__aeabi_ddiv+0x1e8>)
   13432:	2600      	movs	r6, #0
   13434:	469c      	mov	ip, r3
   13436:	2300      	movs	r3, #0
   13438:	4464      	add	r4, ip
   1343a:	9303      	str	r3, [sp, #12]
   1343c:	032b      	lsls	r3, r5, #12
   1343e:	0b1b      	lsrs	r3, r3, #12
   13440:	469b      	mov	fp, r3
   13442:	006b      	lsls	r3, r5, #1
   13444:	0fed      	lsrs	r5, r5, #31
   13446:	4650      	mov	r0, sl
   13448:	0d5b      	lsrs	r3, r3, #21
   1344a:	9501      	str	r5, [sp, #4]
   1344c:	d05e      	beq.n	1350c <__aeabi_ddiv+0x118>
   1344e:	4a62      	ldr	r2, [pc, #392]	; (135d8 <__aeabi_ddiv+0x1e4>)
   13450:	4293      	cmp	r3, r2
   13452:	d053      	beq.n	134fc <__aeabi_ddiv+0x108>
   13454:	465a      	mov	r2, fp
   13456:	00d1      	lsls	r1, r2, #3
   13458:	2280      	movs	r2, #128	; 0x80
   1345a:	0f40      	lsrs	r0, r0, #29
   1345c:	0412      	lsls	r2, r2, #16
   1345e:	4302      	orrs	r2, r0
   13460:	430a      	orrs	r2, r1
   13462:	4693      	mov	fp, r2
   13464:	4652      	mov	r2, sl
   13466:	00d1      	lsls	r1, r2, #3
   13468:	4a5c      	ldr	r2, [pc, #368]	; (135dc <__aeabi_ddiv+0x1e8>)
   1346a:	4694      	mov	ip, r2
   1346c:	2200      	movs	r2, #0
   1346e:	4463      	add	r3, ip
   13470:	0038      	movs	r0, r7
   13472:	4068      	eors	r0, r5
   13474:	4684      	mov	ip, r0
   13476:	9002      	str	r0, [sp, #8]
   13478:	1ae4      	subs	r4, r4, r3
   1347a:	4316      	orrs	r6, r2
   1347c:	2e0f      	cmp	r6, #15
   1347e:	d900      	bls.n	13482 <__aeabi_ddiv+0x8e>
   13480:	e0b4      	b.n	135ec <__aeabi_ddiv+0x1f8>
   13482:	4b57      	ldr	r3, [pc, #348]	; (135e0 <__aeabi_ddiv+0x1ec>)
   13484:	00b6      	lsls	r6, r6, #2
   13486:	599b      	ldr	r3, [r3, r6]
   13488:	469f      	mov	pc, r3
   1348a:	0003      	movs	r3, r0
   1348c:	4333      	orrs	r3, r6
   1348e:	4699      	mov	r9, r3
   13490:	d16c      	bne.n	1356c <__aeabi_ddiv+0x178>
   13492:	2300      	movs	r3, #0
   13494:	4698      	mov	r8, r3
   13496:	3302      	adds	r3, #2
   13498:	2608      	movs	r6, #8
   1349a:	9303      	str	r3, [sp, #12]
   1349c:	e7ce      	b.n	1343c <__aeabi_ddiv+0x48>
   1349e:	46cb      	mov	fp, r9
   134a0:	4641      	mov	r1, r8
   134a2:	9a03      	ldr	r2, [sp, #12]
   134a4:	9701      	str	r7, [sp, #4]
   134a6:	2a02      	cmp	r2, #2
   134a8:	d165      	bne.n	13576 <__aeabi_ddiv+0x182>
   134aa:	9b01      	ldr	r3, [sp, #4]
   134ac:	4c4a      	ldr	r4, [pc, #296]	; (135d8 <__aeabi_ddiv+0x1e4>)
   134ae:	469c      	mov	ip, r3
   134b0:	2300      	movs	r3, #0
   134b2:	2200      	movs	r2, #0
   134b4:	4698      	mov	r8, r3
   134b6:	e06b      	b.n	13590 <__aeabi_ddiv+0x19c>
   134b8:	0003      	movs	r3, r0
   134ba:	4333      	orrs	r3, r6
   134bc:	4699      	mov	r9, r3
   134be:	d04e      	beq.n	1355e <__aeabi_ddiv+0x16a>
   134c0:	2e00      	cmp	r6, #0
   134c2:	d100      	bne.n	134c6 <__aeabi_ddiv+0xd2>
   134c4:	e1bc      	b.n	13840 <__aeabi_ddiv+0x44c>
   134c6:	0030      	movs	r0, r6
   134c8:	f001 f9e8 	bl	1489c <__clzsi2>
   134cc:	0003      	movs	r3, r0
   134ce:	3b0b      	subs	r3, #11
   134d0:	2b1c      	cmp	r3, #28
   134d2:	dd00      	ble.n	134d6 <__aeabi_ddiv+0xe2>
   134d4:	e1ac      	b.n	13830 <__aeabi_ddiv+0x43c>
   134d6:	221d      	movs	r2, #29
   134d8:	1ad3      	subs	r3, r2, r3
   134da:	465a      	mov	r2, fp
   134dc:	0001      	movs	r1, r0
   134de:	40da      	lsrs	r2, r3
   134e0:	3908      	subs	r1, #8
   134e2:	408e      	lsls	r6, r1
   134e4:	0013      	movs	r3, r2
   134e6:	4333      	orrs	r3, r6
   134e8:	4699      	mov	r9, r3
   134ea:	465b      	mov	r3, fp
   134ec:	408b      	lsls	r3, r1
   134ee:	4698      	mov	r8, r3
   134f0:	2300      	movs	r3, #0
   134f2:	4c3c      	ldr	r4, [pc, #240]	; (135e4 <__aeabi_ddiv+0x1f0>)
   134f4:	2600      	movs	r6, #0
   134f6:	1a24      	subs	r4, r4, r0
   134f8:	9303      	str	r3, [sp, #12]
   134fa:	e79f      	b.n	1343c <__aeabi_ddiv+0x48>
   134fc:	4651      	mov	r1, sl
   134fe:	465a      	mov	r2, fp
   13500:	4311      	orrs	r1, r2
   13502:	d129      	bne.n	13558 <__aeabi_ddiv+0x164>
   13504:	2200      	movs	r2, #0
   13506:	4693      	mov	fp, r2
   13508:	3202      	adds	r2, #2
   1350a:	e7b1      	b.n	13470 <__aeabi_ddiv+0x7c>
   1350c:	4659      	mov	r1, fp
   1350e:	4301      	orrs	r1, r0
   13510:	d01e      	beq.n	13550 <__aeabi_ddiv+0x15c>
   13512:	465b      	mov	r3, fp
   13514:	2b00      	cmp	r3, #0
   13516:	d100      	bne.n	1351a <__aeabi_ddiv+0x126>
   13518:	e19e      	b.n	13858 <__aeabi_ddiv+0x464>
   1351a:	4658      	mov	r0, fp
   1351c:	f001 f9be 	bl	1489c <__clzsi2>
   13520:	0003      	movs	r3, r0
   13522:	3b0b      	subs	r3, #11
   13524:	2b1c      	cmp	r3, #28
   13526:	dd00      	ble.n	1352a <__aeabi_ddiv+0x136>
   13528:	e18f      	b.n	1384a <__aeabi_ddiv+0x456>
   1352a:	0002      	movs	r2, r0
   1352c:	4659      	mov	r1, fp
   1352e:	3a08      	subs	r2, #8
   13530:	4091      	lsls	r1, r2
   13532:	468b      	mov	fp, r1
   13534:	211d      	movs	r1, #29
   13536:	1acb      	subs	r3, r1, r3
   13538:	4651      	mov	r1, sl
   1353a:	40d9      	lsrs	r1, r3
   1353c:	000b      	movs	r3, r1
   1353e:	4659      	mov	r1, fp
   13540:	430b      	orrs	r3, r1
   13542:	4651      	mov	r1, sl
   13544:	469b      	mov	fp, r3
   13546:	4091      	lsls	r1, r2
   13548:	4b26      	ldr	r3, [pc, #152]	; (135e4 <__aeabi_ddiv+0x1f0>)
   1354a:	2200      	movs	r2, #0
   1354c:	1a1b      	subs	r3, r3, r0
   1354e:	e78f      	b.n	13470 <__aeabi_ddiv+0x7c>
   13550:	2300      	movs	r3, #0
   13552:	2201      	movs	r2, #1
   13554:	469b      	mov	fp, r3
   13556:	e78b      	b.n	13470 <__aeabi_ddiv+0x7c>
   13558:	4651      	mov	r1, sl
   1355a:	2203      	movs	r2, #3
   1355c:	e788      	b.n	13470 <__aeabi_ddiv+0x7c>
   1355e:	2300      	movs	r3, #0
   13560:	4698      	mov	r8, r3
   13562:	3301      	adds	r3, #1
   13564:	2604      	movs	r6, #4
   13566:	2400      	movs	r4, #0
   13568:	9303      	str	r3, [sp, #12]
   1356a:	e767      	b.n	1343c <__aeabi_ddiv+0x48>
   1356c:	2303      	movs	r3, #3
   1356e:	46b1      	mov	r9, r6
   13570:	9303      	str	r3, [sp, #12]
   13572:	260c      	movs	r6, #12
   13574:	e762      	b.n	1343c <__aeabi_ddiv+0x48>
   13576:	2a03      	cmp	r2, #3
   13578:	d100      	bne.n	1357c <__aeabi_ddiv+0x188>
   1357a:	e25c      	b.n	13a36 <__aeabi_ddiv+0x642>
   1357c:	9b01      	ldr	r3, [sp, #4]
   1357e:	2a01      	cmp	r2, #1
   13580:	d000      	beq.n	13584 <__aeabi_ddiv+0x190>
   13582:	e1e4      	b.n	1394e <__aeabi_ddiv+0x55a>
   13584:	4013      	ands	r3, r2
   13586:	469c      	mov	ip, r3
   13588:	2300      	movs	r3, #0
   1358a:	2400      	movs	r4, #0
   1358c:	2200      	movs	r2, #0
   1358e:	4698      	mov	r8, r3
   13590:	2100      	movs	r1, #0
   13592:	0312      	lsls	r2, r2, #12
   13594:	0b13      	lsrs	r3, r2, #12
   13596:	0d0a      	lsrs	r2, r1, #20
   13598:	0512      	lsls	r2, r2, #20
   1359a:	431a      	orrs	r2, r3
   1359c:	0523      	lsls	r3, r4, #20
   1359e:	4c12      	ldr	r4, [pc, #72]	; (135e8 <__aeabi_ddiv+0x1f4>)
   135a0:	4640      	mov	r0, r8
   135a2:	4022      	ands	r2, r4
   135a4:	4313      	orrs	r3, r2
   135a6:	4662      	mov	r2, ip
   135a8:	005b      	lsls	r3, r3, #1
   135aa:	07d2      	lsls	r2, r2, #31
   135ac:	085b      	lsrs	r3, r3, #1
   135ae:	4313      	orrs	r3, r2
   135b0:	0019      	movs	r1, r3
   135b2:	b007      	add	sp, #28
   135b4:	bc3c      	pop	{r2, r3, r4, r5}
   135b6:	4690      	mov	r8, r2
   135b8:	4699      	mov	r9, r3
   135ba:	46a2      	mov	sl, r4
   135bc:	46ab      	mov	fp, r5
   135be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   135c0:	2300      	movs	r3, #0
   135c2:	2280      	movs	r2, #128	; 0x80
   135c4:	469c      	mov	ip, r3
   135c6:	0312      	lsls	r2, r2, #12
   135c8:	4698      	mov	r8, r3
   135ca:	4c03      	ldr	r4, [pc, #12]	; (135d8 <__aeabi_ddiv+0x1e4>)
   135cc:	e7e0      	b.n	13590 <__aeabi_ddiv+0x19c>
   135ce:	2300      	movs	r3, #0
   135d0:	4c01      	ldr	r4, [pc, #4]	; (135d8 <__aeabi_ddiv+0x1e4>)
   135d2:	2200      	movs	r2, #0
   135d4:	4698      	mov	r8, r3
   135d6:	e7db      	b.n	13590 <__aeabi_ddiv+0x19c>
   135d8:	000007ff 	.word	0x000007ff
   135dc:	fffffc01 	.word	0xfffffc01
   135e0:	0001b1e8 	.word	0x0001b1e8
   135e4:	fffffc0d 	.word	0xfffffc0d
   135e8:	800fffff 	.word	0x800fffff
   135ec:	45d9      	cmp	r9, fp
   135ee:	d900      	bls.n	135f2 <__aeabi_ddiv+0x1fe>
   135f0:	e139      	b.n	13866 <__aeabi_ddiv+0x472>
   135f2:	d100      	bne.n	135f6 <__aeabi_ddiv+0x202>
   135f4:	e134      	b.n	13860 <__aeabi_ddiv+0x46c>
   135f6:	2300      	movs	r3, #0
   135f8:	4646      	mov	r6, r8
   135fa:	464d      	mov	r5, r9
   135fc:	469a      	mov	sl, r3
   135fe:	3c01      	subs	r4, #1
   13600:	465b      	mov	r3, fp
   13602:	0e0a      	lsrs	r2, r1, #24
   13604:	021b      	lsls	r3, r3, #8
   13606:	431a      	orrs	r2, r3
   13608:	020b      	lsls	r3, r1, #8
   1360a:	0c17      	lsrs	r7, r2, #16
   1360c:	9303      	str	r3, [sp, #12]
   1360e:	0413      	lsls	r3, r2, #16
   13610:	0c1b      	lsrs	r3, r3, #16
   13612:	0039      	movs	r1, r7
   13614:	0028      	movs	r0, r5
   13616:	4690      	mov	r8, r2
   13618:	9301      	str	r3, [sp, #4]
   1361a:	f7fe f9f5 	bl	11a08 <__udivsi3>
   1361e:	0002      	movs	r2, r0
   13620:	9b01      	ldr	r3, [sp, #4]
   13622:	4683      	mov	fp, r0
   13624:	435a      	muls	r2, r3
   13626:	0028      	movs	r0, r5
   13628:	0039      	movs	r1, r7
   1362a:	4691      	mov	r9, r2
   1362c:	f7fe fa72 	bl	11b14 <__aeabi_uidivmod>
   13630:	0c35      	lsrs	r5, r6, #16
   13632:	0409      	lsls	r1, r1, #16
   13634:	430d      	orrs	r5, r1
   13636:	45a9      	cmp	r9, r5
   13638:	d90d      	bls.n	13656 <__aeabi_ddiv+0x262>
   1363a:	465b      	mov	r3, fp
   1363c:	4445      	add	r5, r8
   1363e:	3b01      	subs	r3, #1
   13640:	45a8      	cmp	r8, r5
   13642:	d900      	bls.n	13646 <__aeabi_ddiv+0x252>
   13644:	e13a      	b.n	138bc <__aeabi_ddiv+0x4c8>
   13646:	45a9      	cmp	r9, r5
   13648:	d800      	bhi.n	1364c <__aeabi_ddiv+0x258>
   1364a:	e137      	b.n	138bc <__aeabi_ddiv+0x4c8>
   1364c:	2302      	movs	r3, #2
   1364e:	425b      	negs	r3, r3
   13650:	469c      	mov	ip, r3
   13652:	4445      	add	r5, r8
   13654:	44e3      	add	fp, ip
   13656:	464b      	mov	r3, r9
   13658:	1aeb      	subs	r3, r5, r3
   1365a:	0039      	movs	r1, r7
   1365c:	0018      	movs	r0, r3
   1365e:	9304      	str	r3, [sp, #16]
   13660:	f7fe f9d2 	bl	11a08 <__udivsi3>
   13664:	9b01      	ldr	r3, [sp, #4]
   13666:	0005      	movs	r5, r0
   13668:	4343      	muls	r3, r0
   1366a:	0039      	movs	r1, r7
   1366c:	9804      	ldr	r0, [sp, #16]
   1366e:	4699      	mov	r9, r3
   13670:	f7fe fa50 	bl	11b14 <__aeabi_uidivmod>
   13674:	0433      	lsls	r3, r6, #16
   13676:	0409      	lsls	r1, r1, #16
   13678:	0c1b      	lsrs	r3, r3, #16
   1367a:	430b      	orrs	r3, r1
   1367c:	4599      	cmp	r9, r3
   1367e:	d909      	bls.n	13694 <__aeabi_ddiv+0x2a0>
   13680:	4443      	add	r3, r8
   13682:	1e6a      	subs	r2, r5, #1
   13684:	4598      	cmp	r8, r3
   13686:	d900      	bls.n	1368a <__aeabi_ddiv+0x296>
   13688:	e11a      	b.n	138c0 <__aeabi_ddiv+0x4cc>
   1368a:	4599      	cmp	r9, r3
   1368c:	d800      	bhi.n	13690 <__aeabi_ddiv+0x29c>
   1368e:	e117      	b.n	138c0 <__aeabi_ddiv+0x4cc>
   13690:	3d02      	subs	r5, #2
   13692:	4443      	add	r3, r8
   13694:	464a      	mov	r2, r9
   13696:	1a9b      	subs	r3, r3, r2
   13698:	465a      	mov	r2, fp
   1369a:	0412      	lsls	r2, r2, #16
   1369c:	432a      	orrs	r2, r5
   1369e:	9903      	ldr	r1, [sp, #12]
   136a0:	4693      	mov	fp, r2
   136a2:	0c10      	lsrs	r0, r2, #16
   136a4:	0c0a      	lsrs	r2, r1, #16
   136a6:	4691      	mov	r9, r2
   136a8:	0409      	lsls	r1, r1, #16
   136aa:	465a      	mov	r2, fp
   136ac:	0c09      	lsrs	r1, r1, #16
   136ae:	464e      	mov	r6, r9
   136b0:	000d      	movs	r5, r1
   136b2:	0412      	lsls	r2, r2, #16
   136b4:	0c12      	lsrs	r2, r2, #16
   136b6:	4345      	muls	r5, r0
   136b8:	9105      	str	r1, [sp, #20]
   136ba:	4351      	muls	r1, r2
   136bc:	4372      	muls	r2, r6
   136be:	4370      	muls	r0, r6
   136c0:	1952      	adds	r2, r2, r5
   136c2:	0c0e      	lsrs	r6, r1, #16
   136c4:	18b2      	adds	r2, r6, r2
   136c6:	4295      	cmp	r5, r2
   136c8:	d903      	bls.n	136d2 <__aeabi_ddiv+0x2de>
   136ca:	2580      	movs	r5, #128	; 0x80
   136cc:	026d      	lsls	r5, r5, #9
   136ce:	46ac      	mov	ip, r5
   136d0:	4460      	add	r0, ip
   136d2:	0c15      	lsrs	r5, r2, #16
   136d4:	0409      	lsls	r1, r1, #16
   136d6:	0412      	lsls	r2, r2, #16
   136d8:	0c09      	lsrs	r1, r1, #16
   136da:	1828      	adds	r0, r5, r0
   136dc:	1852      	adds	r2, r2, r1
   136de:	4283      	cmp	r3, r0
   136e0:	d200      	bcs.n	136e4 <__aeabi_ddiv+0x2f0>
   136e2:	e0ce      	b.n	13882 <__aeabi_ddiv+0x48e>
   136e4:	d100      	bne.n	136e8 <__aeabi_ddiv+0x2f4>
   136e6:	e0c8      	b.n	1387a <__aeabi_ddiv+0x486>
   136e8:	1a1d      	subs	r5, r3, r0
   136ea:	4653      	mov	r3, sl
   136ec:	1a9e      	subs	r6, r3, r2
   136ee:	45b2      	cmp	sl, r6
   136f0:	4192      	sbcs	r2, r2
   136f2:	4252      	negs	r2, r2
   136f4:	1aab      	subs	r3, r5, r2
   136f6:	469a      	mov	sl, r3
   136f8:	4598      	cmp	r8, r3
   136fa:	d100      	bne.n	136fe <__aeabi_ddiv+0x30a>
   136fc:	e117      	b.n	1392e <__aeabi_ddiv+0x53a>
   136fe:	0039      	movs	r1, r7
   13700:	0018      	movs	r0, r3
   13702:	f7fe f981 	bl	11a08 <__udivsi3>
   13706:	9b01      	ldr	r3, [sp, #4]
   13708:	0005      	movs	r5, r0
   1370a:	4343      	muls	r3, r0
   1370c:	0039      	movs	r1, r7
   1370e:	4650      	mov	r0, sl
   13710:	9304      	str	r3, [sp, #16]
   13712:	f7fe f9ff 	bl	11b14 <__aeabi_uidivmod>
   13716:	9804      	ldr	r0, [sp, #16]
   13718:	040b      	lsls	r3, r1, #16
   1371a:	0c31      	lsrs	r1, r6, #16
   1371c:	4319      	orrs	r1, r3
   1371e:	4288      	cmp	r0, r1
   13720:	d909      	bls.n	13736 <__aeabi_ddiv+0x342>
   13722:	4441      	add	r1, r8
   13724:	1e6b      	subs	r3, r5, #1
   13726:	4588      	cmp	r8, r1
   13728:	d900      	bls.n	1372c <__aeabi_ddiv+0x338>
   1372a:	e107      	b.n	1393c <__aeabi_ddiv+0x548>
   1372c:	4288      	cmp	r0, r1
   1372e:	d800      	bhi.n	13732 <__aeabi_ddiv+0x33e>
   13730:	e104      	b.n	1393c <__aeabi_ddiv+0x548>
   13732:	3d02      	subs	r5, #2
   13734:	4441      	add	r1, r8
   13736:	9b04      	ldr	r3, [sp, #16]
   13738:	1acb      	subs	r3, r1, r3
   1373a:	0018      	movs	r0, r3
   1373c:	0039      	movs	r1, r7
   1373e:	9304      	str	r3, [sp, #16]
   13740:	f7fe f962 	bl	11a08 <__udivsi3>
   13744:	9b01      	ldr	r3, [sp, #4]
   13746:	4682      	mov	sl, r0
   13748:	4343      	muls	r3, r0
   1374a:	0039      	movs	r1, r7
   1374c:	9804      	ldr	r0, [sp, #16]
   1374e:	9301      	str	r3, [sp, #4]
   13750:	f7fe f9e0 	bl	11b14 <__aeabi_uidivmod>
   13754:	9801      	ldr	r0, [sp, #4]
   13756:	040b      	lsls	r3, r1, #16
   13758:	0431      	lsls	r1, r6, #16
   1375a:	0c09      	lsrs	r1, r1, #16
   1375c:	4319      	orrs	r1, r3
   1375e:	4288      	cmp	r0, r1
   13760:	d90d      	bls.n	1377e <__aeabi_ddiv+0x38a>
   13762:	4653      	mov	r3, sl
   13764:	4441      	add	r1, r8
   13766:	3b01      	subs	r3, #1
   13768:	4588      	cmp	r8, r1
   1376a:	d900      	bls.n	1376e <__aeabi_ddiv+0x37a>
   1376c:	e0e8      	b.n	13940 <__aeabi_ddiv+0x54c>
   1376e:	4288      	cmp	r0, r1
   13770:	d800      	bhi.n	13774 <__aeabi_ddiv+0x380>
   13772:	e0e5      	b.n	13940 <__aeabi_ddiv+0x54c>
   13774:	2302      	movs	r3, #2
   13776:	425b      	negs	r3, r3
   13778:	469c      	mov	ip, r3
   1377a:	4441      	add	r1, r8
   1377c:	44e2      	add	sl, ip
   1377e:	9b01      	ldr	r3, [sp, #4]
   13780:	042d      	lsls	r5, r5, #16
   13782:	1ace      	subs	r6, r1, r3
   13784:	4651      	mov	r1, sl
   13786:	4329      	orrs	r1, r5
   13788:	9d05      	ldr	r5, [sp, #20]
   1378a:	464f      	mov	r7, r9
   1378c:	002a      	movs	r2, r5
   1378e:	040b      	lsls	r3, r1, #16
   13790:	0c08      	lsrs	r0, r1, #16
   13792:	0c1b      	lsrs	r3, r3, #16
   13794:	435a      	muls	r2, r3
   13796:	4345      	muls	r5, r0
   13798:	437b      	muls	r3, r7
   1379a:	4378      	muls	r0, r7
   1379c:	195b      	adds	r3, r3, r5
   1379e:	0c17      	lsrs	r7, r2, #16
   137a0:	18fb      	adds	r3, r7, r3
   137a2:	429d      	cmp	r5, r3
   137a4:	d903      	bls.n	137ae <__aeabi_ddiv+0x3ba>
   137a6:	2580      	movs	r5, #128	; 0x80
   137a8:	026d      	lsls	r5, r5, #9
   137aa:	46ac      	mov	ip, r5
   137ac:	4460      	add	r0, ip
   137ae:	0c1d      	lsrs	r5, r3, #16
   137b0:	0412      	lsls	r2, r2, #16
   137b2:	041b      	lsls	r3, r3, #16
   137b4:	0c12      	lsrs	r2, r2, #16
   137b6:	1828      	adds	r0, r5, r0
   137b8:	189b      	adds	r3, r3, r2
   137ba:	4286      	cmp	r6, r0
   137bc:	d200      	bcs.n	137c0 <__aeabi_ddiv+0x3cc>
   137be:	e093      	b.n	138e8 <__aeabi_ddiv+0x4f4>
   137c0:	d100      	bne.n	137c4 <__aeabi_ddiv+0x3d0>
   137c2:	e08e      	b.n	138e2 <__aeabi_ddiv+0x4ee>
   137c4:	2301      	movs	r3, #1
   137c6:	4319      	orrs	r1, r3
   137c8:	4ba0      	ldr	r3, [pc, #640]	; (13a4c <__aeabi_ddiv+0x658>)
   137ca:	18e3      	adds	r3, r4, r3
   137cc:	2b00      	cmp	r3, #0
   137ce:	dc00      	bgt.n	137d2 <__aeabi_ddiv+0x3de>
   137d0:	e099      	b.n	13906 <__aeabi_ddiv+0x512>
   137d2:	074a      	lsls	r2, r1, #29
   137d4:	d000      	beq.n	137d8 <__aeabi_ddiv+0x3e4>
   137d6:	e09e      	b.n	13916 <__aeabi_ddiv+0x522>
   137d8:	465a      	mov	r2, fp
   137da:	01d2      	lsls	r2, r2, #7
   137dc:	d506      	bpl.n	137ec <__aeabi_ddiv+0x3f8>
   137de:	465a      	mov	r2, fp
   137e0:	4b9b      	ldr	r3, [pc, #620]	; (13a50 <__aeabi_ddiv+0x65c>)
   137e2:	401a      	ands	r2, r3
   137e4:	2380      	movs	r3, #128	; 0x80
   137e6:	4693      	mov	fp, r2
   137e8:	00db      	lsls	r3, r3, #3
   137ea:	18e3      	adds	r3, r4, r3
   137ec:	4a99      	ldr	r2, [pc, #612]	; (13a54 <__aeabi_ddiv+0x660>)
   137ee:	4293      	cmp	r3, r2
   137f0:	dd68      	ble.n	138c4 <__aeabi_ddiv+0x4d0>
   137f2:	2301      	movs	r3, #1
   137f4:	9a02      	ldr	r2, [sp, #8]
   137f6:	4c98      	ldr	r4, [pc, #608]	; (13a58 <__aeabi_ddiv+0x664>)
   137f8:	401a      	ands	r2, r3
   137fa:	2300      	movs	r3, #0
   137fc:	4694      	mov	ip, r2
   137fe:	4698      	mov	r8, r3
   13800:	2200      	movs	r2, #0
   13802:	e6c5      	b.n	13590 <__aeabi_ddiv+0x19c>
   13804:	2280      	movs	r2, #128	; 0x80
   13806:	464b      	mov	r3, r9
   13808:	0312      	lsls	r2, r2, #12
   1380a:	4213      	tst	r3, r2
   1380c:	d00a      	beq.n	13824 <__aeabi_ddiv+0x430>
   1380e:	465b      	mov	r3, fp
   13810:	4213      	tst	r3, r2
   13812:	d106      	bne.n	13822 <__aeabi_ddiv+0x42e>
   13814:	431a      	orrs	r2, r3
   13816:	0312      	lsls	r2, r2, #12
   13818:	0b12      	lsrs	r2, r2, #12
   1381a:	46ac      	mov	ip, r5
   1381c:	4688      	mov	r8, r1
   1381e:	4c8e      	ldr	r4, [pc, #568]	; (13a58 <__aeabi_ddiv+0x664>)
   13820:	e6b6      	b.n	13590 <__aeabi_ddiv+0x19c>
   13822:	464b      	mov	r3, r9
   13824:	431a      	orrs	r2, r3
   13826:	0312      	lsls	r2, r2, #12
   13828:	0b12      	lsrs	r2, r2, #12
   1382a:	46bc      	mov	ip, r7
   1382c:	4c8a      	ldr	r4, [pc, #552]	; (13a58 <__aeabi_ddiv+0x664>)
   1382e:	e6af      	b.n	13590 <__aeabi_ddiv+0x19c>
   13830:	0003      	movs	r3, r0
   13832:	465a      	mov	r2, fp
   13834:	3b28      	subs	r3, #40	; 0x28
   13836:	409a      	lsls	r2, r3
   13838:	2300      	movs	r3, #0
   1383a:	4691      	mov	r9, r2
   1383c:	4698      	mov	r8, r3
   1383e:	e657      	b.n	134f0 <__aeabi_ddiv+0xfc>
   13840:	4658      	mov	r0, fp
   13842:	f001 f82b 	bl	1489c <__clzsi2>
   13846:	3020      	adds	r0, #32
   13848:	e640      	b.n	134cc <__aeabi_ddiv+0xd8>
   1384a:	0003      	movs	r3, r0
   1384c:	4652      	mov	r2, sl
   1384e:	3b28      	subs	r3, #40	; 0x28
   13850:	409a      	lsls	r2, r3
   13852:	2100      	movs	r1, #0
   13854:	4693      	mov	fp, r2
   13856:	e677      	b.n	13548 <__aeabi_ddiv+0x154>
   13858:	f001 f820 	bl	1489c <__clzsi2>
   1385c:	3020      	adds	r0, #32
   1385e:	e65f      	b.n	13520 <__aeabi_ddiv+0x12c>
   13860:	4588      	cmp	r8, r1
   13862:	d200      	bcs.n	13866 <__aeabi_ddiv+0x472>
   13864:	e6c7      	b.n	135f6 <__aeabi_ddiv+0x202>
   13866:	464b      	mov	r3, r9
   13868:	07de      	lsls	r6, r3, #31
   1386a:	085d      	lsrs	r5, r3, #1
   1386c:	4643      	mov	r3, r8
   1386e:	085b      	lsrs	r3, r3, #1
   13870:	431e      	orrs	r6, r3
   13872:	4643      	mov	r3, r8
   13874:	07db      	lsls	r3, r3, #31
   13876:	469a      	mov	sl, r3
   13878:	e6c2      	b.n	13600 <__aeabi_ddiv+0x20c>
   1387a:	2500      	movs	r5, #0
   1387c:	4592      	cmp	sl, r2
   1387e:	d300      	bcc.n	13882 <__aeabi_ddiv+0x48e>
   13880:	e733      	b.n	136ea <__aeabi_ddiv+0x2f6>
   13882:	9e03      	ldr	r6, [sp, #12]
   13884:	4659      	mov	r1, fp
   13886:	46b4      	mov	ip, r6
   13888:	44e2      	add	sl, ip
   1388a:	45b2      	cmp	sl, r6
   1388c:	41ad      	sbcs	r5, r5
   1388e:	426d      	negs	r5, r5
   13890:	4445      	add	r5, r8
   13892:	18eb      	adds	r3, r5, r3
   13894:	3901      	subs	r1, #1
   13896:	4598      	cmp	r8, r3
   13898:	d207      	bcs.n	138aa <__aeabi_ddiv+0x4b6>
   1389a:	4298      	cmp	r0, r3
   1389c:	d900      	bls.n	138a0 <__aeabi_ddiv+0x4ac>
   1389e:	e07f      	b.n	139a0 <__aeabi_ddiv+0x5ac>
   138a0:	d100      	bne.n	138a4 <__aeabi_ddiv+0x4b0>
   138a2:	e0bc      	b.n	13a1e <__aeabi_ddiv+0x62a>
   138a4:	1a1d      	subs	r5, r3, r0
   138a6:	468b      	mov	fp, r1
   138a8:	e71f      	b.n	136ea <__aeabi_ddiv+0x2f6>
   138aa:	4598      	cmp	r8, r3
   138ac:	d1fa      	bne.n	138a4 <__aeabi_ddiv+0x4b0>
   138ae:	9d03      	ldr	r5, [sp, #12]
   138b0:	4555      	cmp	r5, sl
   138b2:	d9f2      	bls.n	1389a <__aeabi_ddiv+0x4a6>
   138b4:	4643      	mov	r3, r8
   138b6:	468b      	mov	fp, r1
   138b8:	1a1d      	subs	r5, r3, r0
   138ba:	e716      	b.n	136ea <__aeabi_ddiv+0x2f6>
   138bc:	469b      	mov	fp, r3
   138be:	e6ca      	b.n	13656 <__aeabi_ddiv+0x262>
   138c0:	0015      	movs	r5, r2
   138c2:	e6e7      	b.n	13694 <__aeabi_ddiv+0x2a0>
   138c4:	465a      	mov	r2, fp
   138c6:	08c9      	lsrs	r1, r1, #3
   138c8:	0752      	lsls	r2, r2, #29
   138ca:	430a      	orrs	r2, r1
   138cc:	055b      	lsls	r3, r3, #21
   138ce:	4690      	mov	r8, r2
   138d0:	0d5c      	lsrs	r4, r3, #21
   138d2:	465a      	mov	r2, fp
   138d4:	2301      	movs	r3, #1
   138d6:	9902      	ldr	r1, [sp, #8]
   138d8:	0252      	lsls	r2, r2, #9
   138da:	4019      	ands	r1, r3
   138dc:	0b12      	lsrs	r2, r2, #12
   138de:	468c      	mov	ip, r1
   138e0:	e656      	b.n	13590 <__aeabi_ddiv+0x19c>
   138e2:	2b00      	cmp	r3, #0
   138e4:	d100      	bne.n	138e8 <__aeabi_ddiv+0x4f4>
   138e6:	e76f      	b.n	137c8 <__aeabi_ddiv+0x3d4>
   138e8:	4446      	add	r6, r8
   138ea:	1e4a      	subs	r2, r1, #1
   138ec:	45b0      	cmp	r8, r6
   138ee:	d929      	bls.n	13944 <__aeabi_ddiv+0x550>
   138f0:	0011      	movs	r1, r2
   138f2:	4286      	cmp	r6, r0
   138f4:	d000      	beq.n	138f8 <__aeabi_ddiv+0x504>
   138f6:	e765      	b.n	137c4 <__aeabi_ddiv+0x3d0>
   138f8:	9a03      	ldr	r2, [sp, #12]
   138fa:	4293      	cmp	r3, r2
   138fc:	d000      	beq.n	13900 <__aeabi_ddiv+0x50c>
   138fe:	e761      	b.n	137c4 <__aeabi_ddiv+0x3d0>
   13900:	e762      	b.n	137c8 <__aeabi_ddiv+0x3d4>
   13902:	2101      	movs	r1, #1
   13904:	4249      	negs	r1, r1
   13906:	2001      	movs	r0, #1
   13908:	1ac2      	subs	r2, r0, r3
   1390a:	2a38      	cmp	r2, #56	; 0x38
   1390c:	dd21      	ble.n	13952 <__aeabi_ddiv+0x55e>
   1390e:	9b02      	ldr	r3, [sp, #8]
   13910:	4003      	ands	r3, r0
   13912:	469c      	mov	ip, r3
   13914:	e638      	b.n	13588 <__aeabi_ddiv+0x194>
   13916:	220f      	movs	r2, #15
   13918:	400a      	ands	r2, r1
   1391a:	2a04      	cmp	r2, #4
   1391c:	d100      	bne.n	13920 <__aeabi_ddiv+0x52c>
   1391e:	e75b      	b.n	137d8 <__aeabi_ddiv+0x3e4>
   13920:	000a      	movs	r2, r1
   13922:	1d11      	adds	r1, r2, #4
   13924:	4291      	cmp	r1, r2
   13926:	4192      	sbcs	r2, r2
   13928:	4252      	negs	r2, r2
   1392a:	4493      	add	fp, r2
   1392c:	e754      	b.n	137d8 <__aeabi_ddiv+0x3e4>
   1392e:	4b47      	ldr	r3, [pc, #284]	; (13a4c <__aeabi_ddiv+0x658>)
   13930:	18e3      	adds	r3, r4, r3
   13932:	2b00      	cmp	r3, #0
   13934:	dde5      	ble.n	13902 <__aeabi_ddiv+0x50e>
   13936:	2201      	movs	r2, #1
   13938:	4252      	negs	r2, r2
   1393a:	e7f2      	b.n	13922 <__aeabi_ddiv+0x52e>
   1393c:	001d      	movs	r5, r3
   1393e:	e6fa      	b.n	13736 <__aeabi_ddiv+0x342>
   13940:	469a      	mov	sl, r3
   13942:	e71c      	b.n	1377e <__aeabi_ddiv+0x38a>
   13944:	42b0      	cmp	r0, r6
   13946:	d839      	bhi.n	139bc <__aeabi_ddiv+0x5c8>
   13948:	d06e      	beq.n	13a28 <__aeabi_ddiv+0x634>
   1394a:	0011      	movs	r1, r2
   1394c:	e73a      	b.n	137c4 <__aeabi_ddiv+0x3d0>
   1394e:	9302      	str	r3, [sp, #8]
   13950:	e73a      	b.n	137c8 <__aeabi_ddiv+0x3d4>
   13952:	2a1f      	cmp	r2, #31
   13954:	dc3c      	bgt.n	139d0 <__aeabi_ddiv+0x5dc>
   13956:	2320      	movs	r3, #32
   13958:	1a9b      	subs	r3, r3, r2
   1395a:	000c      	movs	r4, r1
   1395c:	4658      	mov	r0, fp
   1395e:	4099      	lsls	r1, r3
   13960:	4098      	lsls	r0, r3
   13962:	1e4b      	subs	r3, r1, #1
   13964:	4199      	sbcs	r1, r3
   13966:	465b      	mov	r3, fp
   13968:	40d4      	lsrs	r4, r2
   1396a:	40d3      	lsrs	r3, r2
   1396c:	4320      	orrs	r0, r4
   1396e:	4308      	orrs	r0, r1
   13970:	001a      	movs	r2, r3
   13972:	0743      	lsls	r3, r0, #29
   13974:	d009      	beq.n	1398a <__aeabi_ddiv+0x596>
   13976:	230f      	movs	r3, #15
   13978:	4003      	ands	r3, r0
   1397a:	2b04      	cmp	r3, #4
   1397c:	d005      	beq.n	1398a <__aeabi_ddiv+0x596>
   1397e:	0001      	movs	r1, r0
   13980:	1d08      	adds	r0, r1, #4
   13982:	4288      	cmp	r0, r1
   13984:	419b      	sbcs	r3, r3
   13986:	425b      	negs	r3, r3
   13988:	18d2      	adds	r2, r2, r3
   1398a:	0213      	lsls	r3, r2, #8
   1398c:	d53a      	bpl.n	13a04 <__aeabi_ddiv+0x610>
   1398e:	2301      	movs	r3, #1
   13990:	9a02      	ldr	r2, [sp, #8]
   13992:	2401      	movs	r4, #1
   13994:	401a      	ands	r2, r3
   13996:	2300      	movs	r3, #0
   13998:	4694      	mov	ip, r2
   1399a:	4698      	mov	r8, r3
   1399c:	2200      	movs	r2, #0
   1399e:	e5f7      	b.n	13590 <__aeabi_ddiv+0x19c>
   139a0:	2102      	movs	r1, #2
   139a2:	4249      	negs	r1, r1
   139a4:	468c      	mov	ip, r1
   139a6:	9d03      	ldr	r5, [sp, #12]
   139a8:	44e3      	add	fp, ip
   139aa:	46ac      	mov	ip, r5
   139ac:	44e2      	add	sl, ip
   139ae:	45aa      	cmp	sl, r5
   139b0:	41ad      	sbcs	r5, r5
   139b2:	426d      	negs	r5, r5
   139b4:	4445      	add	r5, r8
   139b6:	18ed      	adds	r5, r5, r3
   139b8:	1a2d      	subs	r5, r5, r0
   139ba:	e696      	b.n	136ea <__aeabi_ddiv+0x2f6>
   139bc:	1e8a      	subs	r2, r1, #2
   139be:	9903      	ldr	r1, [sp, #12]
   139c0:	004d      	lsls	r5, r1, #1
   139c2:	428d      	cmp	r5, r1
   139c4:	4189      	sbcs	r1, r1
   139c6:	4249      	negs	r1, r1
   139c8:	4441      	add	r1, r8
   139ca:	1876      	adds	r6, r6, r1
   139cc:	9503      	str	r5, [sp, #12]
   139ce:	e78f      	b.n	138f0 <__aeabi_ddiv+0x4fc>
   139d0:	201f      	movs	r0, #31
   139d2:	4240      	negs	r0, r0
   139d4:	1ac3      	subs	r3, r0, r3
   139d6:	4658      	mov	r0, fp
   139d8:	40d8      	lsrs	r0, r3
   139da:	0003      	movs	r3, r0
   139dc:	2a20      	cmp	r2, #32
   139de:	d028      	beq.n	13a32 <__aeabi_ddiv+0x63e>
   139e0:	2040      	movs	r0, #64	; 0x40
   139e2:	465d      	mov	r5, fp
   139e4:	1a82      	subs	r2, r0, r2
   139e6:	4095      	lsls	r5, r2
   139e8:	4329      	orrs	r1, r5
   139ea:	1e4a      	subs	r2, r1, #1
   139ec:	4191      	sbcs	r1, r2
   139ee:	4319      	orrs	r1, r3
   139f0:	2307      	movs	r3, #7
   139f2:	2200      	movs	r2, #0
   139f4:	400b      	ands	r3, r1
   139f6:	d009      	beq.n	13a0c <__aeabi_ddiv+0x618>
   139f8:	230f      	movs	r3, #15
   139fa:	2200      	movs	r2, #0
   139fc:	400b      	ands	r3, r1
   139fe:	0008      	movs	r0, r1
   13a00:	2b04      	cmp	r3, #4
   13a02:	d1bd      	bne.n	13980 <__aeabi_ddiv+0x58c>
   13a04:	0001      	movs	r1, r0
   13a06:	0753      	lsls	r3, r2, #29
   13a08:	0252      	lsls	r2, r2, #9
   13a0a:	0b12      	lsrs	r2, r2, #12
   13a0c:	08c9      	lsrs	r1, r1, #3
   13a0e:	4319      	orrs	r1, r3
   13a10:	2301      	movs	r3, #1
   13a12:	4688      	mov	r8, r1
   13a14:	9902      	ldr	r1, [sp, #8]
   13a16:	2400      	movs	r4, #0
   13a18:	4019      	ands	r1, r3
   13a1a:	468c      	mov	ip, r1
   13a1c:	e5b8      	b.n	13590 <__aeabi_ddiv+0x19c>
   13a1e:	4552      	cmp	r2, sl
   13a20:	d8be      	bhi.n	139a0 <__aeabi_ddiv+0x5ac>
   13a22:	468b      	mov	fp, r1
   13a24:	2500      	movs	r5, #0
   13a26:	e660      	b.n	136ea <__aeabi_ddiv+0x2f6>
   13a28:	9d03      	ldr	r5, [sp, #12]
   13a2a:	429d      	cmp	r5, r3
   13a2c:	d3c6      	bcc.n	139bc <__aeabi_ddiv+0x5c8>
   13a2e:	0011      	movs	r1, r2
   13a30:	e762      	b.n	138f8 <__aeabi_ddiv+0x504>
   13a32:	2500      	movs	r5, #0
   13a34:	e7d8      	b.n	139e8 <__aeabi_ddiv+0x5f4>
   13a36:	2280      	movs	r2, #128	; 0x80
   13a38:	465b      	mov	r3, fp
   13a3a:	0312      	lsls	r2, r2, #12
   13a3c:	431a      	orrs	r2, r3
   13a3e:	9b01      	ldr	r3, [sp, #4]
   13a40:	0312      	lsls	r2, r2, #12
   13a42:	0b12      	lsrs	r2, r2, #12
   13a44:	469c      	mov	ip, r3
   13a46:	4688      	mov	r8, r1
   13a48:	4c03      	ldr	r4, [pc, #12]	; (13a58 <__aeabi_ddiv+0x664>)
   13a4a:	e5a1      	b.n	13590 <__aeabi_ddiv+0x19c>
   13a4c:	000003ff 	.word	0x000003ff
   13a50:	feffffff 	.word	0xfeffffff
   13a54:	000007fe 	.word	0x000007fe
   13a58:	000007ff 	.word	0x000007ff

00013a5c <__aeabi_dmul>:
   13a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   13a5e:	4657      	mov	r7, sl
   13a60:	4645      	mov	r5, r8
   13a62:	46de      	mov	lr, fp
   13a64:	464e      	mov	r6, r9
   13a66:	b5e0      	push	{r5, r6, r7, lr}
   13a68:	030c      	lsls	r4, r1, #12
   13a6a:	4698      	mov	r8, r3
   13a6c:	004e      	lsls	r6, r1, #1
   13a6e:	0b23      	lsrs	r3, r4, #12
   13a70:	b087      	sub	sp, #28
   13a72:	0007      	movs	r7, r0
   13a74:	4692      	mov	sl, r2
   13a76:	469b      	mov	fp, r3
   13a78:	0d76      	lsrs	r6, r6, #21
   13a7a:	0fcd      	lsrs	r5, r1, #31
   13a7c:	2e00      	cmp	r6, #0
   13a7e:	d06b      	beq.n	13b58 <__aeabi_dmul+0xfc>
   13a80:	4b6d      	ldr	r3, [pc, #436]	; (13c38 <__aeabi_dmul+0x1dc>)
   13a82:	429e      	cmp	r6, r3
   13a84:	d035      	beq.n	13af2 <__aeabi_dmul+0x96>
   13a86:	2480      	movs	r4, #128	; 0x80
   13a88:	465b      	mov	r3, fp
   13a8a:	0f42      	lsrs	r2, r0, #29
   13a8c:	0424      	lsls	r4, r4, #16
   13a8e:	00db      	lsls	r3, r3, #3
   13a90:	4314      	orrs	r4, r2
   13a92:	431c      	orrs	r4, r3
   13a94:	00c3      	lsls	r3, r0, #3
   13a96:	4699      	mov	r9, r3
   13a98:	4b68      	ldr	r3, [pc, #416]	; (13c3c <__aeabi_dmul+0x1e0>)
   13a9a:	46a3      	mov	fp, r4
   13a9c:	469c      	mov	ip, r3
   13a9e:	2300      	movs	r3, #0
   13aa0:	2700      	movs	r7, #0
   13aa2:	4466      	add	r6, ip
   13aa4:	9302      	str	r3, [sp, #8]
   13aa6:	4643      	mov	r3, r8
   13aa8:	031c      	lsls	r4, r3, #12
   13aaa:	005a      	lsls	r2, r3, #1
   13aac:	0fdb      	lsrs	r3, r3, #31
   13aae:	4650      	mov	r0, sl
   13ab0:	0b24      	lsrs	r4, r4, #12
   13ab2:	0d52      	lsrs	r2, r2, #21
   13ab4:	4698      	mov	r8, r3
   13ab6:	d100      	bne.n	13aba <__aeabi_dmul+0x5e>
   13ab8:	e076      	b.n	13ba8 <__aeabi_dmul+0x14c>
   13aba:	4b5f      	ldr	r3, [pc, #380]	; (13c38 <__aeabi_dmul+0x1dc>)
   13abc:	429a      	cmp	r2, r3
   13abe:	d06d      	beq.n	13b9c <__aeabi_dmul+0x140>
   13ac0:	2380      	movs	r3, #128	; 0x80
   13ac2:	0f41      	lsrs	r1, r0, #29
   13ac4:	041b      	lsls	r3, r3, #16
   13ac6:	430b      	orrs	r3, r1
   13ac8:	495c      	ldr	r1, [pc, #368]	; (13c3c <__aeabi_dmul+0x1e0>)
   13aca:	00e4      	lsls	r4, r4, #3
   13acc:	468c      	mov	ip, r1
   13ace:	431c      	orrs	r4, r3
   13ad0:	00c3      	lsls	r3, r0, #3
   13ad2:	2000      	movs	r0, #0
   13ad4:	4462      	add	r2, ip
   13ad6:	4641      	mov	r1, r8
   13ad8:	18b6      	adds	r6, r6, r2
   13ada:	4069      	eors	r1, r5
   13adc:	1c72      	adds	r2, r6, #1
   13ade:	9101      	str	r1, [sp, #4]
   13ae0:	4694      	mov	ip, r2
   13ae2:	4307      	orrs	r7, r0
   13ae4:	2f0f      	cmp	r7, #15
   13ae6:	d900      	bls.n	13aea <__aeabi_dmul+0x8e>
   13ae8:	e0b0      	b.n	13c4c <__aeabi_dmul+0x1f0>
   13aea:	4a55      	ldr	r2, [pc, #340]	; (13c40 <__aeabi_dmul+0x1e4>)
   13aec:	00bf      	lsls	r7, r7, #2
   13aee:	59d2      	ldr	r2, [r2, r7]
   13af0:	4697      	mov	pc, r2
   13af2:	465b      	mov	r3, fp
   13af4:	4303      	orrs	r3, r0
   13af6:	4699      	mov	r9, r3
   13af8:	d000      	beq.n	13afc <__aeabi_dmul+0xa0>
   13afa:	e087      	b.n	13c0c <__aeabi_dmul+0x1b0>
   13afc:	2300      	movs	r3, #0
   13afe:	469b      	mov	fp, r3
   13b00:	3302      	adds	r3, #2
   13b02:	2708      	movs	r7, #8
   13b04:	9302      	str	r3, [sp, #8]
   13b06:	e7ce      	b.n	13aa6 <__aeabi_dmul+0x4a>
   13b08:	4642      	mov	r2, r8
   13b0a:	9201      	str	r2, [sp, #4]
   13b0c:	2802      	cmp	r0, #2
   13b0e:	d067      	beq.n	13be0 <__aeabi_dmul+0x184>
   13b10:	2803      	cmp	r0, #3
   13b12:	d100      	bne.n	13b16 <__aeabi_dmul+0xba>
   13b14:	e20e      	b.n	13f34 <__aeabi_dmul+0x4d8>
   13b16:	2801      	cmp	r0, #1
   13b18:	d000      	beq.n	13b1c <__aeabi_dmul+0xc0>
   13b1a:	e162      	b.n	13de2 <__aeabi_dmul+0x386>
   13b1c:	2300      	movs	r3, #0
   13b1e:	2400      	movs	r4, #0
   13b20:	2200      	movs	r2, #0
   13b22:	4699      	mov	r9, r3
   13b24:	9901      	ldr	r1, [sp, #4]
   13b26:	4001      	ands	r1, r0
   13b28:	b2cd      	uxtb	r5, r1
   13b2a:	2100      	movs	r1, #0
   13b2c:	0312      	lsls	r2, r2, #12
   13b2e:	0d0b      	lsrs	r3, r1, #20
   13b30:	0b12      	lsrs	r2, r2, #12
   13b32:	051b      	lsls	r3, r3, #20
   13b34:	4313      	orrs	r3, r2
   13b36:	4a43      	ldr	r2, [pc, #268]	; (13c44 <__aeabi_dmul+0x1e8>)
   13b38:	0524      	lsls	r4, r4, #20
   13b3a:	4013      	ands	r3, r2
   13b3c:	431c      	orrs	r4, r3
   13b3e:	0064      	lsls	r4, r4, #1
   13b40:	07ed      	lsls	r5, r5, #31
   13b42:	0864      	lsrs	r4, r4, #1
   13b44:	432c      	orrs	r4, r5
   13b46:	4648      	mov	r0, r9
   13b48:	0021      	movs	r1, r4
   13b4a:	b007      	add	sp, #28
   13b4c:	bc3c      	pop	{r2, r3, r4, r5}
   13b4e:	4690      	mov	r8, r2
   13b50:	4699      	mov	r9, r3
   13b52:	46a2      	mov	sl, r4
   13b54:	46ab      	mov	fp, r5
   13b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13b58:	4303      	orrs	r3, r0
   13b5a:	4699      	mov	r9, r3
   13b5c:	d04f      	beq.n	13bfe <__aeabi_dmul+0x1a2>
   13b5e:	465b      	mov	r3, fp
   13b60:	2b00      	cmp	r3, #0
   13b62:	d100      	bne.n	13b66 <__aeabi_dmul+0x10a>
   13b64:	e189      	b.n	13e7a <__aeabi_dmul+0x41e>
   13b66:	4658      	mov	r0, fp
   13b68:	f000 fe98 	bl	1489c <__clzsi2>
   13b6c:	0003      	movs	r3, r0
   13b6e:	3b0b      	subs	r3, #11
   13b70:	2b1c      	cmp	r3, #28
   13b72:	dd00      	ble.n	13b76 <__aeabi_dmul+0x11a>
   13b74:	e17a      	b.n	13e6c <__aeabi_dmul+0x410>
   13b76:	221d      	movs	r2, #29
   13b78:	1ad3      	subs	r3, r2, r3
   13b7a:	003a      	movs	r2, r7
   13b7c:	0001      	movs	r1, r0
   13b7e:	465c      	mov	r4, fp
   13b80:	40da      	lsrs	r2, r3
   13b82:	3908      	subs	r1, #8
   13b84:	408c      	lsls	r4, r1
   13b86:	0013      	movs	r3, r2
   13b88:	408f      	lsls	r7, r1
   13b8a:	4323      	orrs	r3, r4
   13b8c:	469b      	mov	fp, r3
   13b8e:	46b9      	mov	r9, r7
   13b90:	2300      	movs	r3, #0
   13b92:	4e2d      	ldr	r6, [pc, #180]	; (13c48 <__aeabi_dmul+0x1ec>)
   13b94:	2700      	movs	r7, #0
   13b96:	1a36      	subs	r6, r6, r0
   13b98:	9302      	str	r3, [sp, #8]
   13b9a:	e784      	b.n	13aa6 <__aeabi_dmul+0x4a>
   13b9c:	4653      	mov	r3, sl
   13b9e:	4323      	orrs	r3, r4
   13ba0:	d12a      	bne.n	13bf8 <__aeabi_dmul+0x19c>
   13ba2:	2400      	movs	r4, #0
   13ba4:	2002      	movs	r0, #2
   13ba6:	e796      	b.n	13ad6 <__aeabi_dmul+0x7a>
   13ba8:	4653      	mov	r3, sl
   13baa:	4323      	orrs	r3, r4
   13bac:	d020      	beq.n	13bf0 <__aeabi_dmul+0x194>
   13bae:	2c00      	cmp	r4, #0
   13bb0:	d100      	bne.n	13bb4 <__aeabi_dmul+0x158>
   13bb2:	e157      	b.n	13e64 <__aeabi_dmul+0x408>
   13bb4:	0020      	movs	r0, r4
   13bb6:	f000 fe71 	bl	1489c <__clzsi2>
   13bba:	0003      	movs	r3, r0
   13bbc:	3b0b      	subs	r3, #11
   13bbe:	2b1c      	cmp	r3, #28
   13bc0:	dd00      	ble.n	13bc4 <__aeabi_dmul+0x168>
   13bc2:	e149      	b.n	13e58 <__aeabi_dmul+0x3fc>
   13bc4:	211d      	movs	r1, #29
   13bc6:	1acb      	subs	r3, r1, r3
   13bc8:	4651      	mov	r1, sl
   13bca:	0002      	movs	r2, r0
   13bcc:	40d9      	lsrs	r1, r3
   13bce:	4653      	mov	r3, sl
   13bd0:	3a08      	subs	r2, #8
   13bd2:	4094      	lsls	r4, r2
   13bd4:	4093      	lsls	r3, r2
   13bd6:	430c      	orrs	r4, r1
   13bd8:	4a1b      	ldr	r2, [pc, #108]	; (13c48 <__aeabi_dmul+0x1ec>)
   13bda:	1a12      	subs	r2, r2, r0
   13bdc:	2000      	movs	r0, #0
   13bde:	e77a      	b.n	13ad6 <__aeabi_dmul+0x7a>
   13be0:	2501      	movs	r5, #1
   13be2:	9b01      	ldr	r3, [sp, #4]
   13be4:	4c14      	ldr	r4, [pc, #80]	; (13c38 <__aeabi_dmul+0x1dc>)
   13be6:	401d      	ands	r5, r3
   13be8:	2300      	movs	r3, #0
   13bea:	2200      	movs	r2, #0
   13bec:	4699      	mov	r9, r3
   13bee:	e79c      	b.n	13b2a <__aeabi_dmul+0xce>
   13bf0:	2400      	movs	r4, #0
   13bf2:	2200      	movs	r2, #0
   13bf4:	2001      	movs	r0, #1
   13bf6:	e76e      	b.n	13ad6 <__aeabi_dmul+0x7a>
   13bf8:	4653      	mov	r3, sl
   13bfa:	2003      	movs	r0, #3
   13bfc:	e76b      	b.n	13ad6 <__aeabi_dmul+0x7a>
   13bfe:	2300      	movs	r3, #0
   13c00:	469b      	mov	fp, r3
   13c02:	3301      	adds	r3, #1
   13c04:	2704      	movs	r7, #4
   13c06:	2600      	movs	r6, #0
   13c08:	9302      	str	r3, [sp, #8]
   13c0a:	e74c      	b.n	13aa6 <__aeabi_dmul+0x4a>
   13c0c:	2303      	movs	r3, #3
   13c0e:	4681      	mov	r9, r0
   13c10:	270c      	movs	r7, #12
   13c12:	9302      	str	r3, [sp, #8]
   13c14:	e747      	b.n	13aa6 <__aeabi_dmul+0x4a>
   13c16:	2280      	movs	r2, #128	; 0x80
   13c18:	2300      	movs	r3, #0
   13c1a:	2500      	movs	r5, #0
   13c1c:	0312      	lsls	r2, r2, #12
   13c1e:	4699      	mov	r9, r3
   13c20:	4c05      	ldr	r4, [pc, #20]	; (13c38 <__aeabi_dmul+0x1dc>)
   13c22:	e782      	b.n	13b2a <__aeabi_dmul+0xce>
   13c24:	465c      	mov	r4, fp
   13c26:	464b      	mov	r3, r9
   13c28:	9802      	ldr	r0, [sp, #8]
   13c2a:	e76f      	b.n	13b0c <__aeabi_dmul+0xb0>
   13c2c:	465c      	mov	r4, fp
   13c2e:	464b      	mov	r3, r9
   13c30:	9501      	str	r5, [sp, #4]
   13c32:	9802      	ldr	r0, [sp, #8]
   13c34:	e76a      	b.n	13b0c <__aeabi_dmul+0xb0>
   13c36:	46c0      	nop			; (mov r8, r8)
   13c38:	000007ff 	.word	0x000007ff
   13c3c:	fffffc01 	.word	0xfffffc01
   13c40:	0001b228 	.word	0x0001b228
   13c44:	800fffff 	.word	0x800fffff
   13c48:	fffffc0d 	.word	0xfffffc0d
   13c4c:	464a      	mov	r2, r9
   13c4e:	4649      	mov	r1, r9
   13c50:	0c17      	lsrs	r7, r2, #16
   13c52:	0c1a      	lsrs	r2, r3, #16
   13c54:	041b      	lsls	r3, r3, #16
   13c56:	0c1b      	lsrs	r3, r3, #16
   13c58:	0408      	lsls	r0, r1, #16
   13c5a:	0019      	movs	r1, r3
   13c5c:	0c00      	lsrs	r0, r0, #16
   13c5e:	4341      	muls	r1, r0
   13c60:	0015      	movs	r5, r2
   13c62:	4688      	mov	r8, r1
   13c64:	0019      	movs	r1, r3
   13c66:	437d      	muls	r5, r7
   13c68:	4379      	muls	r1, r7
   13c6a:	9503      	str	r5, [sp, #12]
   13c6c:	4689      	mov	r9, r1
   13c6e:	0029      	movs	r1, r5
   13c70:	0015      	movs	r5, r2
   13c72:	4345      	muls	r5, r0
   13c74:	444d      	add	r5, r9
   13c76:	9502      	str	r5, [sp, #8]
   13c78:	4645      	mov	r5, r8
   13c7a:	0c2d      	lsrs	r5, r5, #16
   13c7c:	46aa      	mov	sl, r5
   13c7e:	9d02      	ldr	r5, [sp, #8]
   13c80:	4455      	add	r5, sl
   13c82:	45a9      	cmp	r9, r5
   13c84:	d906      	bls.n	13c94 <__aeabi_dmul+0x238>
   13c86:	468a      	mov	sl, r1
   13c88:	2180      	movs	r1, #128	; 0x80
   13c8a:	0249      	lsls	r1, r1, #9
   13c8c:	4689      	mov	r9, r1
   13c8e:	44ca      	add	sl, r9
   13c90:	4651      	mov	r1, sl
   13c92:	9103      	str	r1, [sp, #12]
   13c94:	0c29      	lsrs	r1, r5, #16
   13c96:	9104      	str	r1, [sp, #16]
   13c98:	4641      	mov	r1, r8
   13c9a:	0409      	lsls	r1, r1, #16
   13c9c:	042d      	lsls	r5, r5, #16
   13c9e:	0c09      	lsrs	r1, r1, #16
   13ca0:	4688      	mov	r8, r1
   13ca2:	0029      	movs	r1, r5
   13ca4:	0c25      	lsrs	r5, r4, #16
   13ca6:	0424      	lsls	r4, r4, #16
   13ca8:	4441      	add	r1, r8
   13caa:	0c24      	lsrs	r4, r4, #16
   13cac:	9105      	str	r1, [sp, #20]
   13cae:	0021      	movs	r1, r4
   13cb0:	4341      	muls	r1, r0
   13cb2:	4688      	mov	r8, r1
   13cb4:	0021      	movs	r1, r4
   13cb6:	4379      	muls	r1, r7
   13cb8:	468a      	mov	sl, r1
   13cba:	4368      	muls	r0, r5
   13cbc:	4641      	mov	r1, r8
   13cbe:	4450      	add	r0, sl
   13cc0:	4681      	mov	r9, r0
   13cc2:	0c08      	lsrs	r0, r1, #16
   13cc4:	4448      	add	r0, r9
   13cc6:	436f      	muls	r7, r5
   13cc8:	4582      	cmp	sl, r0
   13cca:	d903      	bls.n	13cd4 <__aeabi_dmul+0x278>
   13ccc:	2180      	movs	r1, #128	; 0x80
   13cce:	0249      	lsls	r1, r1, #9
   13cd0:	4689      	mov	r9, r1
   13cd2:	444f      	add	r7, r9
   13cd4:	0c01      	lsrs	r1, r0, #16
   13cd6:	4689      	mov	r9, r1
   13cd8:	0039      	movs	r1, r7
   13cda:	4449      	add	r1, r9
   13cdc:	9102      	str	r1, [sp, #8]
   13cde:	4641      	mov	r1, r8
   13ce0:	040f      	lsls	r7, r1, #16
   13ce2:	9904      	ldr	r1, [sp, #16]
   13ce4:	0c3f      	lsrs	r7, r7, #16
   13ce6:	4688      	mov	r8, r1
   13ce8:	0400      	lsls	r0, r0, #16
   13cea:	19c0      	adds	r0, r0, r7
   13cec:	4480      	add	r8, r0
   13cee:	4641      	mov	r1, r8
   13cf0:	9104      	str	r1, [sp, #16]
   13cf2:	4659      	mov	r1, fp
   13cf4:	0c0f      	lsrs	r7, r1, #16
   13cf6:	0409      	lsls	r1, r1, #16
   13cf8:	0c09      	lsrs	r1, r1, #16
   13cfa:	4688      	mov	r8, r1
   13cfc:	4359      	muls	r1, r3
   13cfe:	468a      	mov	sl, r1
   13d00:	0039      	movs	r1, r7
   13d02:	4351      	muls	r1, r2
   13d04:	4689      	mov	r9, r1
   13d06:	4641      	mov	r1, r8
   13d08:	434a      	muls	r2, r1
   13d0a:	4651      	mov	r1, sl
   13d0c:	0c09      	lsrs	r1, r1, #16
   13d0e:	468b      	mov	fp, r1
   13d10:	437b      	muls	r3, r7
   13d12:	18d2      	adds	r2, r2, r3
   13d14:	445a      	add	r2, fp
   13d16:	4293      	cmp	r3, r2
   13d18:	d903      	bls.n	13d22 <__aeabi_dmul+0x2c6>
   13d1a:	2380      	movs	r3, #128	; 0x80
   13d1c:	025b      	lsls	r3, r3, #9
   13d1e:	469b      	mov	fp, r3
   13d20:	44d9      	add	r9, fp
   13d22:	4651      	mov	r1, sl
   13d24:	0409      	lsls	r1, r1, #16
   13d26:	0c09      	lsrs	r1, r1, #16
   13d28:	468a      	mov	sl, r1
   13d2a:	4641      	mov	r1, r8
   13d2c:	4361      	muls	r1, r4
   13d2e:	437c      	muls	r4, r7
   13d30:	0c13      	lsrs	r3, r2, #16
   13d32:	0412      	lsls	r2, r2, #16
   13d34:	444b      	add	r3, r9
   13d36:	4452      	add	r2, sl
   13d38:	46a1      	mov	r9, r4
   13d3a:	468a      	mov	sl, r1
   13d3c:	003c      	movs	r4, r7
   13d3e:	4641      	mov	r1, r8
   13d40:	436c      	muls	r4, r5
   13d42:	434d      	muls	r5, r1
   13d44:	4651      	mov	r1, sl
   13d46:	444d      	add	r5, r9
   13d48:	0c0f      	lsrs	r7, r1, #16
   13d4a:	197d      	adds	r5, r7, r5
   13d4c:	45a9      	cmp	r9, r5
   13d4e:	d903      	bls.n	13d58 <__aeabi_dmul+0x2fc>
   13d50:	2180      	movs	r1, #128	; 0x80
   13d52:	0249      	lsls	r1, r1, #9
   13d54:	4688      	mov	r8, r1
   13d56:	4444      	add	r4, r8
   13d58:	9f04      	ldr	r7, [sp, #16]
   13d5a:	9903      	ldr	r1, [sp, #12]
   13d5c:	46b8      	mov	r8, r7
   13d5e:	4441      	add	r1, r8
   13d60:	468b      	mov	fp, r1
   13d62:	4583      	cmp	fp, r0
   13d64:	4180      	sbcs	r0, r0
   13d66:	4241      	negs	r1, r0
   13d68:	4688      	mov	r8, r1
   13d6a:	4651      	mov	r1, sl
   13d6c:	0408      	lsls	r0, r1, #16
   13d6e:	042f      	lsls	r7, r5, #16
   13d70:	0c00      	lsrs	r0, r0, #16
   13d72:	183f      	adds	r7, r7, r0
   13d74:	4658      	mov	r0, fp
   13d76:	9902      	ldr	r1, [sp, #8]
   13d78:	1810      	adds	r0, r2, r0
   13d7a:	4689      	mov	r9, r1
   13d7c:	4290      	cmp	r0, r2
   13d7e:	4192      	sbcs	r2, r2
   13d80:	444f      	add	r7, r9
   13d82:	46ba      	mov	sl, r7
   13d84:	4252      	negs	r2, r2
   13d86:	4699      	mov	r9, r3
   13d88:	4693      	mov	fp, r2
   13d8a:	44c2      	add	sl, r8
   13d8c:	44d1      	add	r9, sl
   13d8e:	44cb      	add	fp, r9
   13d90:	428f      	cmp	r7, r1
   13d92:	41bf      	sbcs	r7, r7
   13d94:	45c2      	cmp	sl, r8
   13d96:	4189      	sbcs	r1, r1
   13d98:	4599      	cmp	r9, r3
   13d9a:	419b      	sbcs	r3, r3
   13d9c:	4593      	cmp	fp, r2
   13d9e:	4192      	sbcs	r2, r2
   13da0:	427f      	negs	r7, r7
   13da2:	4249      	negs	r1, r1
   13da4:	0c2d      	lsrs	r5, r5, #16
   13da6:	4252      	negs	r2, r2
   13da8:	430f      	orrs	r7, r1
   13daa:	425b      	negs	r3, r3
   13dac:	4313      	orrs	r3, r2
   13dae:	197f      	adds	r7, r7, r5
   13db0:	18ff      	adds	r7, r7, r3
   13db2:	465b      	mov	r3, fp
   13db4:	193c      	adds	r4, r7, r4
   13db6:	0ddb      	lsrs	r3, r3, #23
   13db8:	9a05      	ldr	r2, [sp, #20]
   13dba:	0264      	lsls	r4, r4, #9
   13dbc:	431c      	orrs	r4, r3
   13dbe:	0243      	lsls	r3, r0, #9
   13dc0:	4313      	orrs	r3, r2
   13dc2:	1e5d      	subs	r5, r3, #1
   13dc4:	41ab      	sbcs	r3, r5
   13dc6:	465a      	mov	r2, fp
   13dc8:	0dc0      	lsrs	r0, r0, #23
   13dca:	4303      	orrs	r3, r0
   13dcc:	0252      	lsls	r2, r2, #9
   13dce:	4313      	orrs	r3, r2
   13dd0:	01e2      	lsls	r2, r4, #7
   13dd2:	d556      	bpl.n	13e82 <__aeabi_dmul+0x426>
   13dd4:	2001      	movs	r0, #1
   13dd6:	085a      	lsrs	r2, r3, #1
   13dd8:	4003      	ands	r3, r0
   13dda:	4313      	orrs	r3, r2
   13ddc:	07e2      	lsls	r2, r4, #31
   13dde:	4313      	orrs	r3, r2
   13de0:	0864      	lsrs	r4, r4, #1
   13de2:	485a      	ldr	r0, [pc, #360]	; (13f4c <__aeabi_dmul+0x4f0>)
   13de4:	4460      	add	r0, ip
   13de6:	2800      	cmp	r0, #0
   13de8:	dd4d      	ble.n	13e86 <__aeabi_dmul+0x42a>
   13dea:	075a      	lsls	r2, r3, #29
   13dec:	d009      	beq.n	13e02 <__aeabi_dmul+0x3a6>
   13dee:	220f      	movs	r2, #15
   13df0:	401a      	ands	r2, r3
   13df2:	2a04      	cmp	r2, #4
   13df4:	d005      	beq.n	13e02 <__aeabi_dmul+0x3a6>
   13df6:	1d1a      	adds	r2, r3, #4
   13df8:	429a      	cmp	r2, r3
   13dfa:	419b      	sbcs	r3, r3
   13dfc:	425b      	negs	r3, r3
   13dfe:	18e4      	adds	r4, r4, r3
   13e00:	0013      	movs	r3, r2
   13e02:	01e2      	lsls	r2, r4, #7
   13e04:	d504      	bpl.n	13e10 <__aeabi_dmul+0x3b4>
   13e06:	2080      	movs	r0, #128	; 0x80
   13e08:	4a51      	ldr	r2, [pc, #324]	; (13f50 <__aeabi_dmul+0x4f4>)
   13e0a:	00c0      	lsls	r0, r0, #3
   13e0c:	4014      	ands	r4, r2
   13e0e:	4460      	add	r0, ip
   13e10:	4a50      	ldr	r2, [pc, #320]	; (13f54 <__aeabi_dmul+0x4f8>)
   13e12:	4290      	cmp	r0, r2
   13e14:	dd00      	ble.n	13e18 <__aeabi_dmul+0x3bc>
   13e16:	e6e3      	b.n	13be0 <__aeabi_dmul+0x184>
   13e18:	2501      	movs	r5, #1
   13e1a:	08db      	lsrs	r3, r3, #3
   13e1c:	0762      	lsls	r2, r4, #29
   13e1e:	431a      	orrs	r2, r3
   13e20:	0264      	lsls	r4, r4, #9
   13e22:	9b01      	ldr	r3, [sp, #4]
   13e24:	4691      	mov	r9, r2
   13e26:	0b22      	lsrs	r2, r4, #12
   13e28:	0544      	lsls	r4, r0, #21
   13e2a:	0d64      	lsrs	r4, r4, #21
   13e2c:	401d      	ands	r5, r3
   13e2e:	e67c      	b.n	13b2a <__aeabi_dmul+0xce>
   13e30:	2280      	movs	r2, #128	; 0x80
   13e32:	4659      	mov	r1, fp
   13e34:	0312      	lsls	r2, r2, #12
   13e36:	4211      	tst	r1, r2
   13e38:	d008      	beq.n	13e4c <__aeabi_dmul+0x3f0>
   13e3a:	4214      	tst	r4, r2
   13e3c:	d106      	bne.n	13e4c <__aeabi_dmul+0x3f0>
   13e3e:	4322      	orrs	r2, r4
   13e40:	0312      	lsls	r2, r2, #12
   13e42:	0b12      	lsrs	r2, r2, #12
   13e44:	4645      	mov	r5, r8
   13e46:	4699      	mov	r9, r3
   13e48:	4c43      	ldr	r4, [pc, #268]	; (13f58 <__aeabi_dmul+0x4fc>)
   13e4a:	e66e      	b.n	13b2a <__aeabi_dmul+0xce>
   13e4c:	465b      	mov	r3, fp
   13e4e:	431a      	orrs	r2, r3
   13e50:	0312      	lsls	r2, r2, #12
   13e52:	0b12      	lsrs	r2, r2, #12
   13e54:	4c40      	ldr	r4, [pc, #256]	; (13f58 <__aeabi_dmul+0x4fc>)
   13e56:	e668      	b.n	13b2a <__aeabi_dmul+0xce>
   13e58:	0003      	movs	r3, r0
   13e5a:	4654      	mov	r4, sl
   13e5c:	3b28      	subs	r3, #40	; 0x28
   13e5e:	409c      	lsls	r4, r3
   13e60:	2300      	movs	r3, #0
   13e62:	e6b9      	b.n	13bd8 <__aeabi_dmul+0x17c>
   13e64:	f000 fd1a 	bl	1489c <__clzsi2>
   13e68:	3020      	adds	r0, #32
   13e6a:	e6a6      	b.n	13bba <__aeabi_dmul+0x15e>
   13e6c:	0003      	movs	r3, r0
   13e6e:	3b28      	subs	r3, #40	; 0x28
   13e70:	409f      	lsls	r7, r3
   13e72:	2300      	movs	r3, #0
   13e74:	46bb      	mov	fp, r7
   13e76:	4699      	mov	r9, r3
   13e78:	e68a      	b.n	13b90 <__aeabi_dmul+0x134>
   13e7a:	f000 fd0f 	bl	1489c <__clzsi2>
   13e7e:	3020      	adds	r0, #32
   13e80:	e674      	b.n	13b6c <__aeabi_dmul+0x110>
   13e82:	46b4      	mov	ip, r6
   13e84:	e7ad      	b.n	13de2 <__aeabi_dmul+0x386>
   13e86:	2501      	movs	r5, #1
   13e88:	1a2a      	subs	r2, r5, r0
   13e8a:	2a38      	cmp	r2, #56	; 0x38
   13e8c:	dd06      	ble.n	13e9c <__aeabi_dmul+0x440>
   13e8e:	9b01      	ldr	r3, [sp, #4]
   13e90:	2400      	movs	r4, #0
   13e92:	401d      	ands	r5, r3
   13e94:	2300      	movs	r3, #0
   13e96:	2200      	movs	r2, #0
   13e98:	4699      	mov	r9, r3
   13e9a:	e646      	b.n	13b2a <__aeabi_dmul+0xce>
   13e9c:	2a1f      	cmp	r2, #31
   13e9e:	dc21      	bgt.n	13ee4 <__aeabi_dmul+0x488>
   13ea0:	2520      	movs	r5, #32
   13ea2:	0020      	movs	r0, r4
   13ea4:	1aad      	subs	r5, r5, r2
   13ea6:	001e      	movs	r6, r3
   13ea8:	40ab      	lsls	r3, r5
   13eaa:	40a8      	lsls	r0, r5
   13eac:	40d6      	lsrs	r6, r2
   13eae:	1e5d      	subs	r5, r3, #1
   13eb0:	41ab      	sbcs	r3, r5
   13eb2:	4330      	orrs	r0, r6
   13eb4:	4318      	orrs	r0, r3
   13eb6:	40d4      	lsrs	r4, r2
   13eb8:	0743      	lsls	r3, r0, #29
   13eba:	d009      	beq.n	13ed0 <__aeabi_dmul+0x474>
   13ebc:	230f      	movs	r3, #15
   13ebe:	4003      	ands	r3, r0
   13ec0:	2b04      	cmp	r3, #4
   13ec2:	d005      	beq.n	13ed0 <__aeabi_dmul+0x474>
   13ec4:	0003      	movs	r3, r0
   13ec6:	1d18      	adds	r0, r3, #4
   13ec8:	4298      	cmp	r0, r3
   13eca:	419b      	sbcs	r3, r3
   13ecc:	425b      	negs	r3, r3
   13ece:	18e4      	adds	r4, r4, r3
   13ed0:	0223      	lsls	r3, r4, #8
   13ed2:	d521      	bpl.n	13f18 <__aeabi_dmul+0x4bc>
   13ed4:	2501      	movs	r5, #1
   13ed6:	9b01      	ldr	r3, [sp, #4]
   13ed8:	2401      	movs	r4, #1
   13eda:	401d      	ands	r5, r3
   13edc:	2300      	movs	r3, #0
   13ede:	2200      	movs	r2, #0
   13ee0:	4699      	mov	r9, r3
   13ee2:	e622      	b.n	13b2a <__aeabi_dmul+0xce>
   13ee4:	251f      	movs	r5, #31
   13ee6:	0021      	movs	r1, r4
   13ee8:	426d      	negs	r5, r5
   13eea:	1a28      	subs	r0, r5, r0
   13eec:	40c1      	lsrs	r1, r0
   13eee:	0008      	movs	r0, r1
   13ef0:	2a20      	cmp	r2, #32
   13ef2:	d01d      	beq.n	13f30 <__aeabi_dmul+0x4d4>
   13ef4:	355f      	adds	r5, #95	; 0x5f
   13ef6:	1aaa      	subs	r2, r5, r2
   13ef8:	4094      	lsls	r4, r2
   13efa:	4323      	orrs	r3, r4
   13efc:	1e5c      	subs	r4, r3, #1
   13efe:	41a3      	sbcs	r3, r4
   13f00:	2507      	movs	r5, #7
   13f02:	4303      	orrs	r3, r0
   13f04:	401d      	ands	r5, r3
   13f06:	2200      	movs	r2, #0
   13f08:	2d00      	cmp	r5, #0
   13f0a:	d009      	beq.n	13f20 <__aeabi_dmul+0x4c4>
   13f0c:	220f      	movs	r2, #15
   13f0e:	2400      	movs	r4, #0
   13f10:	401a      	ands	r2, r3
   13f12:	0018      	movs	r0, r3
   13f14:	2a04      	cmp	r2, #4
   13f16:	d1d6      	bne.n	13ec6 <__aeabi_dmul+0x46a>
   13f18:	0003      	movs	r3, r0
   13f1a:	0765      	lsls	r5, r4, #29
   13f1c:	0264      	lsls	r4, r4, #9
   13f1e:	0b22      	lsrs	r2, r4, #12
   13f20:	08db      	lsrs	r3, r3, #3
   13f22:	432b      	orrs	r3, r5
   13f24:	2501      	movs	r5, #1
   13f26:	4699      	mov	r9, r3
   13f28:	9b01      	ldr	r3, [sp, #4]
   13f2a:	2400      	movs	r4, #0
   13f2c:	401d      	ands	r5, r3
   13f2e:	e5fc      	b.n	13b2a <__aeabi_dmul+0xce>
   13f30:	2400      	movs	r4, #0
   13f32:	e7e2      	b.n	13efa <__aeabi_dmul+0x49e>
   13f34:	2280      	movs	r2, #128	; 0x80
   13f36:	2501      	movs	r5, #1
   13f38:	0312      	lsls	r2, r2, #12
   13f3a:	4322      	orrs	r2, r4
   13f3c:	9901      	ldr	r1, [sp, #4]
   13f3e:	0312      	lsls	r2, r2, #12
   13f40:	0b12      	lsrs	r2, r2, #12
   13f42:	400d      	ands	r5, r1
   13f44:	4699      	mov	r9, r3
   13f46:	4c04      	ldr	r4, [pc, #16]	; (13f58 <__aeabi_dmul+0x4fc>)
   13f48:	e5ef      	b.n	13b2a <__aeabi_dmul+0xce>
   13f4a:	46c0      	nop			; (mov r8, r8)
   13f4c:	000003ff 	.word	0x000003ff
   13f50:	feffffff 	.word	0xfeffffff
   13f54:	000007fe 	.word	0x000007fe
   13f58:	000007ff 	.word	0x000007ff

00013f5c <__aeabi_dsub>:
   13f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   13f5e:	4646      	mov	r6, r8
   13f60:	46d6      	mov	lr, sl
   13f62:	464f      	mov	r7, r9
   13f64:	030c      	lsls	r4, r1, #12
   13f66:	b5c0      	push	{r6, r7, lr}
   13f68:	0fcd      	lsrs	r5, r1, #31
   13f6a:	004e      	lsls	r6, r1, #1
   13f6c:	0a61      	lsrs	r1, r4, #9
   13f6e:	0f44      	lsrs	r4, r0, #29
   13f70:	430c      	orrs	r4, r1
   13f72:	00c1      	lsls	r1, r0, #3
   13f74:	0058      	lsls	r0, r3, #1
   13f76:	0d40      	lsrs	r0, r0, #21
   13f78:	4684      	mov	ip, r0
   13f7a:	468a      	mov	sl, r1
   13f7c:	000f      	movs	r7, r1
   13f7e:	0319      	lsls	r1, r3, #12
   13f80:	0f50      	lsrs	r0, r2, #29
   13f82:	0a49      	lsrs	r1, r1, #9
   13f84:	4301      	orrs	r1, r0
   13f86:	48c6      	ldr	r0, [pc, #792]	; (142a0 <__aeabi_dsub+0x344>)
   13f88:	0d76      	lsrs	r6, r6, #21
   13f8a:	46a8      	mov	r8, r5
   13f8c:	0fdb      	lsrs	r3, r3, #31
   13f8e:	00d2      	lsls	r2, r2, #3
   13f90:	4584      	cmp	ip, r0
   13f92:	d100      	bne.n	13f96 <__aeabi_dsub+0x3a>
   13f94:	e0d8      	b.n	14148 <__aeabi_dsub+0x1ec>
   13f96:	2001      	movs	r0, #1
   13f98:	4043      	eors	r3, r0
   13f9a:	42ab      	cmp	r3, r5
   13f9c:	d100      	bne.n	13fa0 <__aeabi_dsub+0x44>
   13f9e:	e0a6      	b.n	140ee <__aeabi_dsub+0x192>
   13fa0:	4660      	mov	r0, ip
   13fa2:	1a35      	subs	r5, r6, r0
   13fa4:	2d00      	cmp	r5, #0
   13fa6:	dc00      	bgt.n	13faa <__aeabi_dsub+0x4e>
   13fa8:	e105      	b.n	141b6 <__aeabi_dsub+0x25a>
   13faa:	2800      	cmp	r0, #0
   13fac:	d110      	bne.n	13fd0 <__aeabi_dsub+0x74>
   13fae:	000b      	movs	r3, r1
   13fb0:	4313      	orrs	r3, r2
   13fb2:	d100      	bne.n	13fb6 <__aeabi_dsub+0x5a>
   13fb4:	e0d7      	b.n	14166 <__aeabi_dsub+0x20a>
   13fb6:	1e6b      	subs	r3, r5, #1
   13fb8:	2b00      	cmp	r3, #0
   13fba:	d000      	beq.n	13fbe <__aeabi_dsub+0x62>
   13fbc:	e14b      	b.n	14256 <__aeabi_dsub+0x2fa>
   13fbe:	4653      	mov	r3, sl
   13fc0:	1a9f      	subs	r7, r3, r2
   13fc2:	45ba      	cmp	sl, r7
   13fc4:	4180      	sbcs	r0, r0
   13fc6:	1a64      	subs	r4, r4, r1
   13fc8:	4240      	negs	r0, r0
   13fca:	1a24      	subs	r4, r4, r0
   13fcc:	2601      	movs	r6, #1
   13fce:	e01e      	b.n	1400e <__aeabi_dsub+0xb2>
   13fd0:	4bb3      	ldr	r3, [pc, #716]	; (142a0 <__aeabi_dsub+0x344>)
   13fd2:	429e      	cmp	r6, r3
   13fd4:	d048      	beq.n	14068 <__aeabi_dsub+0x10c>
   13fd6:	2380      	movs	r3, #128	; 0x80
   13fd8:	041b      	lsls	r3, r3, #16
   13fda:	4319      	orrs	r1, r3
   13fdc:	2d38      	cmp	r5, #56	; 0x38
   13fde:	dd00      	ble.n	13fe2 <__aeabi_dsub+0x86>
   13fe0:	e119      	b.n	14216 <__aeabi_dsub+0x2ba>
   13fe2:	2d1f      	cmp	r5, #31
   13fe4:	dd00      	ble.n	13fe8 <__aeabi_dsub+0x8c>
   13fe6:	e14c      	b.n	14282 <__aeabi_dsub+0x326>
   13fe8:	2320      	movs	r3, #32
   13fea:	000f      	movs	r7, r1
   13fec:	1b5b      	subs	r3, r3, r5
   13fee:	0010      	movs	r0, r2
   13ff0:	409a      	lsls	r2, r3
   13ff2:	409f      	lsls	r7, r3
   13ff4:	40e8      	lsrs	r0, r5
   13ff6:	1e53      	subs	r3, r2, #1
   13ff8:	419a      	sbcs	r2, r3
   13ffa:	40e9      	lsrs	r1, r5
   13ffc:	4307      	orrs	r7, r0
   13ffe:	4317      	orrs	r7, r2
   14000:	4653      	mov	r3, sl
   14002:	1bdf      	subs	r7, r3, r7
   14004:	1a61      	subs	r1, r4, r1
   14006:	45ba      	cmp	sl, r7
   14008:	41a4      	sbcs	r4, r4
   1400a:	4264      	negs	r4, r4
   1400c:	1b0c      	subs	r4, r1, r4
   1400e:	0223      	lsls	r3, r4, #8
   14010:	d400      	bmi.n	14014 <__aeabi_dsub+0xb8>
   14012:	e0c5      	b.n	141a0 <__aeabi_dsub+0x244>
   14014:	0264      	lsls	r4, r4, #9
   14016:	0a65      	lsrs	r5, r4, #9
   14018:	2d00      	cmp	r5, #0
   1401a:	d100      	bne.n	1401e <__aeabi_dsub+0xc2>
   1401c:	e0f6      	b.n	1420c <__aeabi_dsub+0x2b0>
   1401e:	0028      	movs	r0, r5
   14020:	f000 fc3c 	bl	1489c <__clzsi2>
   14024:	0003      	movs	r3, r0
   14026:	3b08      	subs	r3, #8
   14028:	2b1f      	cmp	r3, #31
   1402a:	dd00      	ble.n	1402e <__aeabi_dsub+0xd2>
   1402c:	e0e9      	b.n	14202 <__aeabi_dsub+0x2a6>
   1402e:	2220      	movs	r2, #32
   14030:	003c      	movs	r4, r7
   14032:	1ad2      	subs	r2, r2, r3
   14034:	409d      	lsls	r5, r3
   14036:	40d4      	lsrs	r4, r2
   14038:	409f      	lsls	r7, r3
   1403a:	4325      	orrs	r5, r4
   1403c:	429e      	cmp	r6, r3
   1403e:	dd00      	ble.n	14042 <__aeabi_dsub+0xe6>
   14040:	e0db      	b.n	141fa <__aeabi_dsub+0x29e>
   14042:	1b9e      	subs	r6, r3, r6
   14044:	1c73      	adds	r3, r6, #1
   14046:	2b1f      	cmp	r3, #31
   14048:	dd00      	ble.n	1404c <__aeabi_dsub+0xf0>
   1404a:	e10a      	b.n	14262 <__aeabi_dsub+0x306>
   1404c:	2220      	movs	r2, #32
   1404e:	0038      	movs	r0, r7
   14050:	1ad2      	subs	r2, r2, r3
   14052:	0029      	movs	r1, r5
   14054:	4097      	lsls	r7, r2
   14056:	002c      	movs	r4, r5
   14058:	4091      	lsls	r1, r2
   1405a:	40d8      	lsrs	r0, r3
   1405c:	1e7a      	subs	r2, r7, #1
   1405e:	4197      	sbcs	r7, r2
   14060:	40dc      	lsrs	r4, r3
   14062:	2600      	movs	r6, #0
   14064:	4301      	orrs	r1, r0
   14066:	430f      	orrs	r7, r1
   14068:	077b      	lsls	r3, r7, #29
   1406a:	d009      	beq.n	14080 <__aeabi_dsub+0x124>
   1406c:	230f      	movs	r3, #15
   1406e:	403b      	ands	r3, r7
   14070:	2b04      	cmp	r3, #4
   14072:	d005      	beq.n	14080 <__aeabi_dsub+0x124>
   14074:	1d3b      	adds	r3, r7, #4
   14076:	42bb      	cmp	r3, r7
   14078:	41bf      	sbcs	r7, r7
   1407a:	427f      	negs	r7, r7
   1407c:	19e4      	adds	r4, r4, r7
   1407e:	001f      	movs	r7, r3
   14080:	0223      	lsls	r3, r4, #8
   14082:	d525      	bpl.n	140d0 <__aeabi_dsub+0x174>
   14084:	4b86      	ldr	r3, [pc, #536]	; (142a0 <__aeabi_dsub+0x344>)
   14086:	3601      	adds	r6, #1
   14088:	429e      	cmp	r6, r3
   1408a:	d100      	bne.n	1408e <__aeabi_dsub+0x132>
   1408c:	e0af      	b.n	141ee <__aeabi_dsub+0x292>
   1408e:	4b85      	ldr	r3, [pc, #532]	; (142a4 <__aeabi_dsub+0x348>)
   14090:	2501      	movs	r5, #1
   14092:	401c      	ands	r4, r3
   14094:	4643      	mov	r3, r8
   14096:	0762      	lsls	r2, r4, #29
   14098:	08ff      	lsrs	r7, r7, #3
   1409a:	0264      	lsls	r4, r4, #9
   1409c:	0576      	lsls	r6, r6, #21
   1409e:	4317      	orrs	r7, r2
   140a0:	0b24      	lsrs	r4, r4, #12
   140a2:	0d76      	lsrs	r6, r6, #21
   140a4:	401d      	ands	r5, r3
   140a6:	2100      	movs	r1, #0
   140a8:	0324      	lsls	r4, r4, #12
   140aa:	0b23      	lsrs	r3, r4, #12
   140ac:	0d0c      	lsrs	r4, r1, #20
   140ae:	4a7e      	ldr	r2, [pc, #504]	; (142a8 <__aeabi_dsub+0x34c>)
   140b0:	0524      	lsls	r4, r4, #20
   140b2:	431c      	orrs	r4, r3
   140b4:	4014      	ands	r4, r2
   140b6:	0533      	lsls	r3, r6, #20
   140b8:	4323      	orrs	r3, r4
   140ba:	005b      	lsls	r3, r3, #1
   140bc:	07ed      	lsls	r5, r5, #31
   140be:	085b      	lsrs	r3, r3, #1
   140c0:	432b      	orrs	r3, r5
   140c2:	0038      	movs	r0, r7
   140c4:	0019      	movs	r1, r3
   140c6:	bc1c      	pop	{r2, r3, r4}
   140c8:	4690      	mov	r8, r2
   140ca:	4699      	mov	r9, r3
   140cc:	46a2      	mov	sl, r4
   140ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   140d0:	2501      	movs	r5, #1
   140d2:	4643      	mov	r3, r8
   140d4:	0762      	lsls	r2, r4, #29
   140d6:	08ff      	lsrs	r7, r7, #3
   140d8:	4317      	orrs	r7, r2
   140da:	08e4      	lsrs	r4, r4, #3
   140dc:	401d      	ands	r5, r3
   140de:	4b70      	ldr	r3, [pc, #448]	; (142a0 <__aeabi_dsub+0x344>)
   140e0:	429e      	cmp	r6, r3
   140e2:	d036      	beq.n	14152 <__aeabi_dsub+0x1f6>
   140e4:	0324      	lsls	r4, r4, #12
   140e6:	0576      	lsls	r6, r6, #21
   140e8:	0b24      	lsrs	r4, r4, #12
   140ea:	0d76      	lsrs	r6, r6, #21
   140ec:	e7db      	b.n	140a6 <__aeabi_dsub+0x14a>
   140ee:	4663      	mov	r3, ip
   140f0:	1af3      	subs	r3, r6, r3
   140f2:	2b00      	cmp	r3, #0
   140f4:	dc00      	bgt.n	140f8 <__aeabi_dsub+0x19c>
   140f6:	e094      	b.n	14222 <__aeabi_dsub+0x2c6>
   140f8:	4660      	mov	r0, ip
   140fa:	2800      	cmp	r0, #0
   140fc:	d035      	beq.n	1416a <__aeabi_dsub+0x20e>
   140fe:	4868      	ldr	r0, [pc, #416]	; (142a0 <__aeabi_dsub+0x344>)
   14100:	4286      	cmp	r6, r0
   14102:	d0b1      	beq.n	14068 <__aeabi_dsub+0x10c>
   14104:	2780      	movs	r7, #128	; 0x80
   14106:	043f      	lsls	r7, r7, #16
   14108:	4339      	orrs	r1, r7
   1410a:	2b38      	cmp	r3, #56	; 0x38
   1410c:	dc00      	bgt.n	14110 <__aeabi_dsub+0x1b4>
   1410e:	e0fd      	b.n	1430c <__aeabi_dsub+0x3b0>
   14110:	430a      	orrs	r2, r1
   14112:	0017      	movs	r7, r2
   14114:	2100      	movs	r1, #0
   14116:	1e7a      	subs	r2, r7, #1
   14118:	4197      	sbcs	r7, r2
   1411a:	4457      	add	r7, sl
   1411c:	4557      	cmp	r7, sl
   1411e:	4180      	sbcs	r0, r0
   14120:	1909      	adds	r1, r1, r4
   14122:	4244      	negs	r4, r0
   14124:	190c      	adds	r4, r1, r4
   14126:	0223      	lsls	r3, r4, #8
   14128:	d53a      	bpl.n	141a0 <__aeabi_dsub+0x244>
   1412a:	4b5d      	ldr	r3, [pc, #372]	; (142a0 <__aeabi_dsub+0x344>)
   1412c:	3601      	adds	r6, #1
   1412e:	429e      	cmp	r6, r3
   14130:	d100      	bne.n	14134 <__aeabi_dsub+0x1d8>
   14132:	e14b      	b.n	143cc <__aeabi_dsub+0x470>
   14134:	2201      	movs	r2, #1
   14136:	4b5b      	ldr	r3, [pc, #364]	; (142a4 <__aeabi_dsub+0x348>)
   14138:	401c      	ands	r4, r3
   1413a:	087b      	lsrs	r3, r7, #1
   1413c:	4017      	ands	r7, r2
   1413e:	431f      	orrs	r7, r3
   14140:	07e2      	lsls	r2, r4, #31
   14142:	4317      	orrs	r7, r2
   14144:	0864      	lsrs	r4, r4, #1
   14146:	e78f      	b.n	14068 <__aeabi_dsub+0x10c>
   14148:	0008      	movs	r0, r1
   1414a:	4310      	orrs	r0, r2
   1414c:	d000      	beq.n	14150 <__aeabi_dsub+0x1f4>
   1414e:	e724      	b.n	13f9a <__aeabi_dsub+0x3e>
   14150:	e721      	b.n	13f96 <__aeabi_dsub+0x3a>
   14152:	0023      	movs	r3, r4
   14154:	433b      	orrs	r3, r7
   14156:	d100      	bne.n	1415a <__aeabi_dsub+0x1fe>
   14158:	e1b9      	b.n	144ce <__aeabi_dsub+0x572>
   1415a:	2280      	movs	r2, #128	; 0x80
   1415c:	0312      	lsls	r2, r2, #12
   1415e:	4314      	orrs	r4, r2
   14160:	0324      	lsls	r4, r4, #12
   14162:	0b24      	lsrs	r4, r4, #12
   14164:	e79f      	b.n	140a6 <__aeabi_dsub+0x14a>
   14166:	002e      	movs	r6, r5
   14168:	e77e      	b.n	14068 <__aeabi_dsub+0x10c>
   1416a:	0008      	movs	r0, r1
   1416c:	4310      	orrs	r0, r2
   1416e:	d100      	bne.n	14172 <__aeabi_dsub+0x216>
   14170:	e0ca      	b.n	14308 <__aeabi_dsub+0x3ac>
   14172:	1e58      	subs	r0, r3, #1
   14174:	4684      	mov	ip, r0
   14176:	2800      	cmp	r0, #0
   14178:	d000      	beq.n	1417c <__aeabi_dsub+0x220>
   1417a:	e0e7      	b.n	1434c <__aeabi_dsub+0x3f0>
   1417c:	4452      	add	r2, sl
   1417e:	4552      	cmp	r2, sl
   14180:	4180      	sbcs	r0, r0
   14182:	1864      	adds	r4, r4, r1
   14184:	4240      	negs	r0, r0
   14186:	1824      	adds	r4, r4, r0
   14188:	0017      	movs	r7, r2
   1418a:	2601      	movs	r6, #1
   1418c:	0223      	lsls	r3, r4, #8
   1418e:	d507      	bpl.n	141a0 <__aeabi_dsub+0x244>
   14190:	2602      	movs	r6, #2
   14192:	e7cf      	b.n	14134 <__aeabi_dsub+0x1d8>
   14194:	4664      	mov	r4, ip
   14196:	432c      	orrs	r4, r5
   14198:	d100      	bne.n	1419c <__aeabi_dsub+0x240>
   1419a:	e1b3      	b.n	14504 <__aeabi_dsub+0x5a8>
   1419c:	002c      	movs	r4, r5
   1419e:	4667      	mov	r7, ip
   141a0:	077b      	lsls	r3, r7, #29
   141a2:	d000      	beq.n	141a6 <__aeabi_dsub+0x24a>
   141a4:	e762      	b.n	1406c <__aeabi_dsub+0x110>
   141a6:	0763      	lsls	r3, r4, #29
   141a8:	08ff      	lsrs	r7, r7, #3
   141aa:	431f      	orrs	r7, r3
   141ac:	2501      	movs	r5, #1
   141ae:	4643      	mov	r3, r8
   141b0:	08e4      	lsrs	r4, r4, #3
   141b2:	401d      	ands	r5, r3
   141b4:	e793      	b.n	140de <__aeabi_dsub+0x182>
   141b6:	2d00      	cmp	r5, #0
   141b8:	d178      	bne.n	142ac <__aeabi_dsub+0x350>
   141ba:	1c75      	adds	r5, r6, #1
   141bc:	056d      	lsls	r5, r5, #21
   141be:	0d6d      	lsrs	r5, r5, #21
   141c0:	2d01      	cmp	r5, #1
   141c2:	dc00      	bgt.n	141c6 <__aeabi_dsub+0x26a>
   141c4:	e0f2      	b.n	143ac <__aeabi_dsub+0x450>
   141c6:	4650      	mov	r0, sl
   141c8:	1a80      	subs	r0, r0, r2
   141ca:	4582      	cmp	sl, r0
   141cc:	41bf      	sbcs	r7, r7
   141ce:	1a65      	subs	r5, r4, r1
   141d0:	427f      	negs	r7, r7
   141d2:	1bed      	subs	r5, r5, r7
   141d4:	4684      	mov	ip, r0
   141d6:	0228      	lsls	r0, r5, #8
   141d8:	d400      	bmi.n	141dc <__aeabi_dsub+0x280>
   141da:	e08c      	b.n	142f6 <__aeabi_dsub+0x39a>
   141dc:	4650      	mov	r0, sl
   141de:	1a17      	subs	r7, r2, r0
   141e0:	42ba      	cmp	r2, r7
   141e2:	4192      	sbcs	r2, r2
   141e4:	1b0c      	subs	r4, r1, r4
   141e6:	4255      	negs	r5, r2
   141e8:	1b65      	subs	r5, r4, r5
   141ea:	4698      	mov	r8, r3
   141ec:	e714      	b.n	14018 <__aeabi_dsub+0xbc>
   141ee:	2501      	movs	r5, #1
   141f0:	4643      	mov	r3, r8
   141f2:	2400      	movs	r4, #0
   141f4:	401d      	ands	r5, r3
   141f6:	2700      	movs	r7, #0
   141f8:	e755      	b.n	140a6 <__aeabi_dsub+0x14a>
   141fa:	4c2a      	ldr	r4, [pc, #168]	; (142a4 <__aeabi_dsub+0x348>)
   141fc:	1af6      	subs	r6, r6, r3
   141fe:	402c      	ands	r4, r5
   14200:	e732      	b.n	14068 <__aeabi_dsub+0x10c>
   14202:	003d      	movs	r5, r7
   14204:	3828      	subs	r0, #40	; 0x28
   14206:	4085      	lsls	r5, r0
   14208:	2700      	movs	r7, #0
   1420a:	e717      	b.n	1403c <__aeabi_dsub+0xe0>
   1420c:	0038      	movs	r0, r7
   1420e:	f000 fb45 	bl	1489c <__clzsi2>
   14212:	3020      	adds	r0, #32
   14214:	e706      	b.n	14024 <__aeabi_dsub+0xc8>
   14216:	430a      	orrs	r2, r1
   14218:	0017      	movs	r7, r2
   1421a:	2100      	movs	r1, #0
   1421c:	1e7a      	subs	r2, r7, #1
   1421e:	4197      	sbcs	r7, r2
   14220:	e6ee      	b.n	14000 <__aeabi_dsub+0xa4>
   14222:	2b00      	cmp	r3, #0
   14224:	d000      	beq.n	14228 <__aeabi_dsub+0x2cc>
   14226:	e0e5      	b.n	143f4 <__aeabi_dsub+0x498>
   14228:	1c73      	adds	r3, r6, #1
   1422a:	469c      	mov	ip, r3
   1422c:	055b      	lsls	r3, r3, #21
   1422e:	0d5b      	lsrs	r3, r3, #21
   14230:	2b01      	cmp	r3, #1
   14232:	dc00      	bgt.n	14236 <__aeabi_dsub+0x2da>
   14234:	e09f      	b.n	14376 <__aeabi_dsub+0x41a>
   14236:	4b1a      	ldr	r3, [pc, #104]	; (142a0 <__aeabi_dsub+0x344>)
   14238:	459c      	cmp	ip, r3
   1423a:	d100      	bne.n	1423e <__aeabi_dsub+0x2e2>
   1423c:	e0c5      	b.n	143ca <__aeabi_dsub+0x46e>
   1423e:	4452      	add	r2, sl
   14240:	4552      	cmp	r2, sl
   14242:	4180      	sbcs	r0, r0
   14244:	1864      	adds	r4, r4, r1
   14246:	4240      	negs	r0, r0
   14248:	1824      	adds	r4, r4, r0
   1424a:	07e7      	lsls	r7, r4, #31
   1424c:	0852      	lsrs	r2, r2, #1
   1424e:	4317      	orrs	r7, r2
   14250:	0864      	lsrs	r4, r4, #1
   14252:	4666      	mov	r6, ip
   14254:	e708      	b.n	14068 <__aeabi_dsub+0x10c>
   14256:	4812      	ldr	r0, [pc, #72]	; (142a0 <__aeabi_dsub+0x344>)
   14258:	4285      	cmp	r5, r0
   1425a:	d100      	bne.n	1425e <__aeabi_dsub+0x302>
   1425c:	e085      	b.n	1436a <__aeabi_dsub+0x40e>
   1425e:	001d      	movs	r5, r3
   14260:	e6bc      	b.n	13fdc <__aeabi_dsub+0x80>
   14262:	0029      	movs	r1, r5
   14264:	3e1f      	subs	r6, #31
   14266:	40f1      	lsrs	r1, r6
   14268:	2b20      	cmp	r3, #32
   1426a:	d100      	bne.n	1426e <__aeabi_dsub+0x312>
   1426c:	e07f      	b.n	1436e <__aeabi_dsub+0x412>
   1426e:	2240      	movs	r2, #64	; 0x40
   14270:	1ad3      	subs	r3, r2, r3
   14272:	409d      	lsls	r5, r3
   14274:	432f      	orrs	r7, r5
   14276:	1e7d      	subs	r5, r7, #1
   14278:	41af      	sbcs	r7, r5
   1427a:	2400      	movs	r4, #0
   1427c:	430f      	orrs	r7, r1
   1427e:	2600      	movs	r6, #0
   14280:	e78e      	b.n	141a0 <__aeabi_dsub+0x244>
   14282:	002b      	movs	r3, r5
   14284:	000f      	movs	r7, r1
   14286:	3b20      	subs	r3, #32
   14288:	40df      	lsrs	r7, r3
   1428a:	2d20      	cmp	r5, #32
   1428c:	d071      	beq.n	14372 <__aeabi_dsub+0x416>
   1428e:	2340      	movs	r3, #64	; 0x40
   14290:	1b5d      	subs	r5, r3, r5
   14292:	40a9      	lsls	r1, r5
   14294:	430a      	orrs	r2, r1
   14296:	1e51      	subs	r1, r2, #1
   14298:	418a      	sbcs	r2, r1
   1429a:	2100      	movs	r1, #0
   1429c:	4317      	orrs	r7, r2
   1429e:	e6af      	b.n	14000 <__aeabi_dsub+0xa4>
   142a0:	000007ff 	.word	0x000007ff
   142a4:	ff7fffff 	.word	0xff7fffff
   142a8:	800fffff 	.word	0x800fffff
   142ac:	2e00      	cmp	r6, #0
   142ae:	d03e      	beq.n	1432e <__aeabi_dsub+0x3d2>
   142b0:	4eb3      	ldr	r6, [pc, #716]	; (14580 <__aeabi_dsub+0x624>)
   142b2:	45b4      	cmp	ip, r6
   142b4:	d045      	beq.n	14342 <__aeabi_dsub+0x3e6>
   142b6:	2680      	movs	r6, #128	; 0x80
   142b8:	0436      	lsls	r6, r6, #16
   142ba:	426d      	negs	r5, r5
   142bc:	4334      	orrs	r4, r6
   142be:	2d38      	cmp	r5, #56	; 0x38
   142c0:	dd00      	ble.n	142c4 <__aeabi_dsub+0x368>
   142c2:	e0a8      	b.n	14416 <__aeabi_dsub+0x4ba>
   142c4:	2d1f      	cmp	r5, #31
   142c6:	dd00      	ble.n	142ca <__aeabi_dsub+0x36e>
   142c8:	e11f      	b.n	1450a <__aeabi_dsub+0x5ae>
   142ca:	2620      	movs	r6, #32
   142cc:	0027      	movs	r7, r4
   142ce:	4650      	mov	r0, sl
   142d0:	1b76      	subs	r6, r6, r5
   142d2:	40b7      	lsls	r7, r6
   142d4:	40e8      	lsrs	r0, r5
   142d6:	4307      	orrs	r7, r0
   142d8:	4650      	mov	r0, sl
   142da:	40b0      	lsls	r0, r6
   142dc:	1e46      	subs	r6, r0, #1
   142de:	41b0      	sbcs	r0, r6
   142e0:	40ec      	lsrs	r4, r5
   142e2:	4338      	orrs	r0, r7
   142e4:	1a17      	subs	r7, r2, r0
   142e6:	42ba      	cmp	r2, r7
   142e8:	4192      	sbcs	r2, r2
   142ea:	1b0c      	subs	r4, r1, r4
   142ec:	4252      	negs	r2, r2
   142ee:	1aa4      	subs	r4, r4, r2
   142f0:	4666      	mov	r6, ip
   142f2:	4698      	mov	r8, r3
   142f4:	e68b      	b.n	1400e <__aeabi_dsub+0xb2>
   142f6:	4664      	mov	r4, ip
   142f8:	4667      	mov	r7, ip
   142fa:	432c      	orrs	r4, r5
   142fc:	d000      	beq.n	14300 <__aeabi_dsub+0x3a4>
   142fe:	e68b      	b.n	14018 <__aeabi_dsub+0xbc>
   14300:	2500      	movs	r5, #0
   14302:	2600      	movs	r6, #0
   14304:	2700      	movs	r7, #0
   14306:	e6ea      	b.n	140de <__aeabi_dsub+0x182>
   14308:	001e      	movs	r6, r3
   1430a:	e6ad      	b.n	14068 <__aeabi_dsub+0x10c>
   1430c:	2b1f      	cmp	r3, #31
   1430e:	dc60      	bgt.n	143d2 <__aeabi_dsub+0x476>
   14310:	2720      	movs	r7, #32
   14312:	1af8      	subs	r0, r7, r3
   14314:	000f      	movs	r7, r1
   14316:	4684      	mov	ip, r0
   14318:	4087      	lsls	r7, r0
   1431a:	0010      	movs	r0, r2
   1431c:	40d8      	lsrs	r0, r3
   1431e:	4307      	orrs	r7, r0
   14320:	4660      	mov	r0, ip
   14322:	4082      	lsls	r2, r0
   14324:	1e50      	subs	r0, r2, #1
   14326:	4182      	sbcs	r2, r0
   14328:	40d9      	lsrs	r1, r3
   1432a:	4317      	orrs	r7, r2
   1432c:	e6f5      	b.n	1411a <__aeabi_dsub+0x1be>
   1432e:	0026      	movs	r6, r4
   14330:	4650      	mov	r0, sl
   14332:	4306      	orrs	r6, r0
   14334:	d005      	beq.n	14342 <__aeabi_dsub+0x3e6>
   14336:	43ed      	mvns	r5, r5
   14338:	2d00      	cmp	r5, #0
   1433a:	d0d3      	beq.n	142e4 <__aeabi_dsub+0x388>
   1433c:	4e90      	ldr	r6, [pc, #576]	; (14580 <__aeabi_dsub+0x624>)
   1433e:	45b4      	cmp	ip, r6
   14340:	d1bd      	bne.n	142be <__aeabi_dsub+0x362>
   14342:	000c      	movs	r4, r1
   14344:	0017      	movs	r7, r2
   14346:	4666      	mov	r6, ip
   14348:	4698      	mov	r8, r3
   1434a:	e68d      	b.n	14068 <__aeabi_dsub+0x10c>
   1434c:	488c      	ldr	r0, [pc, #560]	; (14580 <__aeabi_dsub+0x624>)
   1434e:	4283      	cmp	r3, r0
   14350:	d00b      	beq.n	1436a <__aeabi_dsub+0x40e>
   14352:	4663      	mov	r3, ip
   14354:	e6d9      	b.n	1410a <__aeabi_dsub+0x1ae>
   14356:	2d00      	cmp	r5, #0
   14358:	d000      	beq.n	1435c <__aeabi_dsub+0x400>
   1435a:	e096      	b.n	1448a <__aeabi_dsub+0x52e>
   1435c:	0008      	movs	r0, r1
   1435e:	4310      	orrs	r0, r2
   14360:	d100      	bne.n	14364 <__aeabi_dsub+0x408>
   14362:	e0e2      	b.n	1452a <__aeabi_dsub+0x5ce>
   14364:	000c      	movs	r4, r1
   14366:	0017      	movs	r7, r2
   14368:	4698      	mov	r8, r3
   1436a:	4e85      	ldr	r6, [pc, #532]	; (14580 <__aeabi_dsub+0x624>)
   1436c:	e67c      	b.n	14068 <__aeabi_dsub+0x10c>
   1436e:	2500      	movs	r5, #0
   14370:	e780      	b.n	14274 <__aeabi_dsub+0x318>
   14372:	2100      	movs	r1, #0
   14374:	e78e      	b.n	14294 <__aeabi_dsub+0x338>
   14376:	0023      	movs	r3, r4
   14378:	4650      	mov	r0, sl
   1437a:	4303      	orrs	r3, r0
   1437c:	2e00      	cmp	r6, #0
   1437e:	d000      	beq.n	14382 <__aeabi_dsub+0x426>
   14380:	e0a8      	b.n	144d4 <__aeabi_dsub+0x578>
   14382:	2b00      	cmp	r3, #0
   14384:	d100      	bne.n	14388 <__aeabi_dsub+0x42c>
   14386:	e0de      	b.n	14546 <__aeabi_dsub+0x5ea>
   14388:	000b      	movs	r3, r1
   1438a:	4313      	orrs	r3, r2
   1438c:	d100      	bne.n	14390 <__aeabi_dsub+0x434>
   1438e:	e66b      	b.n	14068 <__aeabi_dsub+0x10c>
   14390:	4452      	add	r2, sl
   14392:	4552      	cmp	r2, sl
   14394:	4180      	sbcs	r0, r0
   14396:	1864      	adds	r4, r4, r1
   14398:	4240      	negs	r0, r0
   1439a:	1824      	adds	r4, r4, r0
   1439c:	0017      	movs	r7, r2
   1439e:	0223      	lsls	r3, r4, #8
   143a0:	d400      	bmi.n	143a4 <__aeabi_dsub+0x448>
   143a2:	e6fd      	b.n	141a0 <__aeabi_dsub+0x244>
   143a4:	4b77      	ldr	r3, [pc, #476]	; (14584 <__aeabi_dsub+0x628>)
   143a6:	4666      	mov	r6, ip
   143a8:	401c      	ands	r4, r3
   143aa:	e65d      	b.n	14068 <__aeabi_dsub+0x10c>
   143ac:	0025      	movs	r5, r4
   143ae:	4650      	mov	r0, sl
   143b0:	4305      	orrs	r5, r0
   143b2:	2e00      	cmp	r6, #0
   143b4:	d1cf      	bne.n	14356 <__aeabi_dsub+0x3fa>
   143b6:	2d00      	cmp	r5, #0
   143b8:	d14f      	bne.n	1445a <__aeabi_dsub+0x4fe>
   143ba:	000c      	movs	r4, r1
   143bc:	4314      	orrs	r4, r2
   143be:	d100      	bne.n	143c2 <__aeabi_dsub+0x466>
   143c0:	e0a0      	b.n	14504 <__aeabi_dsub+0x5a8>
   143c2:	000c      	movs	r4, r1
   143c4:	0017      	movs	r7, r2
   143c6:	4698      	mov	r8, r3
   143c8:	e64e      	b.n	14068 <__aeabi_dsub+0x10c>
   143ca:	4666      	mov	r6, ip
   143cc:	2400      	movs	r4, #0
   143ce:	2700      	movs	r7, #0
   143d0:	e685      	b.n	140de <__aeabi_dsub+0x182>
   143d2:	001f      	movs	r7, r3
   143d4:	0008      	movs	r0, r1
   143d6:	3f20      	subs	r7, #32
   143d8:	40f8      	lsrs	r0, r7
   143da:	0007      	movs	r7, r0
   143dc:	2b20      	cmp	r3, #32
   143de:	d100      	bne.n	143e2 <__aeabi_dsub+0x486>
   143e0:	e08e      	b.n	14500 <__aeabi_dsub+0x5a4>
   143e2:	2040      	movs	r0, #64	; 0x40
   143e4:	1ac3      	subs	r3, r0, r3
   143e6:	4099      	lsls	r1, r3
   143e8:	430a      	orrs	r2, r1
   143ea:	1e51      	subs	r1, r2, #1
   143ec:	418a      	sbcs	r2, r1
   143ee:	2100      	movs	r1, #0
   143f0:	4317      	orrs	r7, r2
   143f2:	e692      	b.n	1411a <__aeabi_dsub+0x1be>
   143f4:	2e00      	cmp	r6, #0
   143f6:	d114      	bne.n	14422 <__aeabi_dsub+0x4c6>
   143f8:	0026      	movs	r6, r4
   143fa:	4650      	mov	r0, sl
   143fc:	4306      	orrs	r6, r0
   143fe:	d062      	beq.n	144c6 <__aeabi_dsub+0x56a>
   14400:	43db      	mvns	r3, r3
   14402:	2b00      	cmp	r3, #0
   14404:	d15c      	bne.n	144c0 <__aeabi_dsub+0x564>
   14406:	1887      	adds	r7, r0, r2
   14408:	4297      	cmp	r7, r2
   1440a:	4192      	sbcs	r2, r2
   1440c:	1864      	adds	r4, r4, r1
   1440e:	4252      	negs	r2, r2
   14410:	18a4      	adds	r4, r4, r2
   14412:	4666      	mov	r6, ip
   14414:	e687      	b.n	14126 <__aeabi_dsub+0x1ca>
   14416:	4650      	mov	r0, sl
   14418:	4320      	orrs	r0, r4
   1441a:	1e44      	subs	r4, r0, #1
   1441c:	41a0      	sbcs	r0, r4
   1441e:	2400      	movs	r4, #0
   14420:	e760      	b.n	142e4 <__aeabi_dsub+0x388>
   14422:	4e57      	ldr	r6, [pc, #348]	; (14580 <__aeabi_dsub+0x624>)
   14424:	45b4      	cmp	ip, r6
   14426:	d04e      	beq.n	144c6 <__aeabi_dsub+0x56a>
   14428:	2680      	movs	r6, #128	; 0x80
   1442a:	0436      	lsls	r6, r6, #16
   1442c:	425b      	negs	r3, r3
   1442e:	4334      	orrs	r4, r6
   14430:	2b38      	cmp	r3, #56	; 0x38
   14432:	dd00      	ble.n	14436 <__aeabi_dsub+0x4da>
   14434:	e07f      	b.n	14536 <__aeabi_dsub+0x5da>
   14436:	2b1f      	cmp	r3, #31
   14438:	dd00      	ble.n	1443c <__aeabi_dsub+0x4e0>
   1443a:	e08b      	b.n	14554 <__aeabi_dsub+0x5f8>
   1443c:	2620      	movs	r6, #32
   1443e:	0027      	movs	r7, r4
   14440:	4650      	mov	r0, sl
   14442:	1af6      	subs	r6, r6, r3
   14444:	40b7      	lsls	r7, r6
   14446:	40d8      	lsrs	r0, r3
   14448:	4307      	orrs	r7, r0
   1444a:	4650      	mov	r0, sl
   1444c:	40b0      	lsls	r0, r6
   1444e:	1e46      	subs	r6, r0, #1
   14450:	41b0      	sbcs	r0, r6
   14452:	4307      	orrs	r7, r0
   14454:	40dc      	lsrs	r4, r3
   14456:	18bf      	adds	r7, r7, r2
   14458:	e7d6      	b.n	14408 <__aeabi_dsub+0x4ac>
   1445a:	000d      	movs	r5, r1
   1445c:	4315      	orrs	r5, r2
   1445e:	d100      	bne.n	14462 <__aeabi_dsub+0x506>
   14460:	e602      	b.n	14068 <__aeabi_dsub+0x10c>
   14462:	4650      	mov	r0, sl
   14464:	1a80      	subs	r0, r0, r2
   14466:	4582      	cmp	sl, r0
   14468:	41bf      	sbcs	r7, r7
   1446a:	1a65      	subs	r5, r4, r1
   1446c:	427f      	negs	r7, r7
   1446e:	1bed      	subs	r5, r5, r7
   14470:	4684      	mov	ip, r0
   14472:	0228      	lsls	r0, r5, #8
   14474:	d400      	bmi.n	14478 <__aeabi_dsub+0x51c>
   14476:	e68d      	b.n	14194 <__aeabi_dsub+0x238>
   14478:	4650      	mov	r0, sl
   1447a:	1a17      	subs	r7, r2, r0
   1447c:	42ba      	cmp	r2, r7
   1447e:	4192      	sbcs	r2, r2
   14480:	1b0c      	subs	r4, r1, r4
   14482:	4252      	negs	r2, r2
   14484:	1aa4      	subs	r4, r4, r2
   14486:	4698      	mov	r8, r3
   14488:	e5ee      	b.n	14068 <__aeabi_dsub+0x10c>
   1448a:	000d      	movs	r5, r1
   1448c:	4315      	orrs	r5, r2
   1448e:	d100      	bne.n	14492 <__aeabi_dsub+0x536>
   14490:	e76b      	b.n	1436a <__aeabi_dsub+0x40e>
   14492:	4650      	mov	r0, sl
   14494:	0767      	lsls	r7, r4, #29
   14496:	08c0      	lsrs	r0, r0, #3
   14498:	4307      	orrs	r7, r0
   1449a:	2080      	movs	r0, #128	; 0x80
   1449c:	08e4      	lsrs	r4, r4, #3
   1449e:	0300      	lsls	r0, r0, #12
   144a0:	4204      	tst	r4, r0
   144a2:	d007      	beq.n	144b4 <__aeabi_dsub+0x558>
   144a4:	08cd      	lsrs	r5, r1, #3
   144a6:	4205      	tst	r5, r0
   144a8:	d104      	bne.n	144b4 <__aeabi_dsub+0x558>
   144aa:	002c      	movs	r4, r5
   144ac:	4698      	mov	r8, r3
   144ae:	08d7      	lsrs	r7, r2, #3
   144b0:	0749      	lsls	r1, r1, #29
   144b2:	430f      	orrs	r7, r1
   144b4:	0f7b      	lsrs	r3, r7, #29
   144b6:	00e4      	lsls	r4, r4, #3
   144b8:	431c      	orrs	r4, r3
   144ba:	00ff      	lsls	r7, r7, #3
   144bc:	4e30      	ldr	r6, [pc, #192]	; (14580 <__aeabi_dsub+0x624>)
   144be:	e5d3      	b.n	14068 <__aeabi_dsub+0x10c>
   144c0:	4e2f      	ldr	r6, [pc, #188]	; (14580 <__aeabi_dsub+0x624>)
   144c2:	45b4      	cmp	ip, r6
   144c4:	d1b4      	bne.n	14430 <__aeabi_dsub+0x4d4>
   144c6:	000c      	movs	r4, r1
   144c8:	0017      	movs	r7, r2
   144ca:	4666      	mov	r6, ip
   144cc:	e5cc      	b.n	14068 <__aeabi_dsub+0x10c>
   144ce:	2700      	movs	r7, #0
   144d0:	2400      	movs	r4, #0
   144d2:	e5e8      	b.n	140a6 <__aeabi_dsub+0x14a>
   144d4:	2b00      	cmp	r3, #0
   144d6:	d039      	beq.n	1454c <__aeabi_dsub+0x5f0>
   144d8:	000b      	movs	r3, r1
   144da:	4313      	orrs	r3, r2
   144dc:	d100      	bne.n	144e0 <__aeabi_dsub+0x584>
   144de:	e744      	b.n	1436a <__aeabi_dsub+0x40e>
   144e0:	08c0      	lsrs	r0, r0, #3
   144e2:	0767      	lsls	r7, r4, #29
   144e4:	4307      	orrs	r7, r0
   144e6:	2080      	movs	r0, #128	; 0x80
   144e8:	08e4      	lsrs	r4, r4, #3
   144ea:	0300      	lsls	r0, r0, #12
   144ec:	4204      	tst	r4, r0
   144ee:	d0e1      	beq.n	144b4 <__aeabi_dsub+0x558>
   144f0:	08cb      	lsrs	r3, r1, #3
   144f2:	4203      	tst	r3, r0
   144f4:	d1de      	bne.n	144b4 <__aeabi_dsub+0x558>
   144f6:	08d7      	lsrs	r7, r2, #3
   144f8:	0749      	lsls	r1, r1, #29
   144fa:	430f      	orrs	r7, r1
   144fc:	001c      	movs	r4, r3
   144fe:	e7d9      	b.n	144b4 <__aeabi_dsub+0x558>
   14500:	2100      	movs	r1, #0
   14502:	e771      	b.n	143e8 <__aeabi_dsub+0x48c>
   14504:	2500      	movs	r5, #0
   14506:	2700      	movs	r7, #0
   14508:	e5e9      	b.n	140de <__aeabi_dsub+0x182>
   1450a:	002e      	movs	r6, r5
   1450c:	0027      	movs	r7, r4
   1450e:	3e20      	subs	r6, #32
   14510:	40f7      	lsrs	r7, r6
   14512:	2d20      	cmp	r5, #32
   14514:	d02f      	beq.n	14576 <__aeabi_dsub+0x61a>
   14516:	2640      	movs	r6, #64	; 0x40
   14518:	1b75      	subs	r5, r6, r5
   1451a:	40ac      	lsls	r4, r5
   1451c:	4650      	mov	r0, sl
   1451e:	4320      	orrs	r0, r4
   14520:	1e44      	subs	r4, r0, #1
   14522:	41a0      	sbcs	r0, r4
   14524:	2400      	movs	r4, #0
   14526:	4338      	orrs	r0, r7
   14528:	e6dc      	b.n	142e4 <__aeabi_dsub+0x388>
   1452a:	2480      	movs	r4, #128	; 0x80
   1452c:	2500      	movs	r5, #0
   1452e:	0324      	lsls	r4, r4, #12
   14530:	4e13      	ldr	r6, [pc, #76]	; (14580 <__aeabi_dsub+0x624>)
   14532:	2700      	movs	r7, #0
   14534:	e5d3      	b.n	140de <__aeabi_dsub+0x182>
   14536:	4650      	mov	r0, sl
   14538:	4320      	orrs	r0, r4
   1453a:	0007      	movs	r7, r0
   1453c:	1e78      	subs	r0, r7, #1
   1453e:	4187      	sbcs	r7, r0
   14540:	2400      	movs	r4, #0
   14542:	18bf      	adds	r7, r7, r2
   14544:	e760      	b.n	14408 <__aeabi_dsub+0x4ac>
   14546:	000c      	movs	r4, r1
   14548:	0017      	movs	r7, r2
   1454a:	e58d      	b.n	14068 <__aeabi_dsub+0x10c>
   1454c:	000c      	movs	r4, r1
   1454e:	0017      	movs	r7, r2
   14550:	4e0b      	ldr	r6, [pc, #44]	; (14580 <__aeabi_dsub+0x624>)
   14552:	e589      	b.n	14068 <__aeabi_dsub+0x10c>
   14554:	001e      	movs	r6, r3
   14556:	0027      	movs	r7, r4
   14558:	3e20      	subs	r6, #32
   1455a:	40f7      	lsrs	r7, r6
   1455c:	2b20      	cmp	r3, #32
   1455e:	d00c      	beq.n	1457a <__aeabi_dsub+0x61e>
   14560:	2640      	movs	r6, #64	; 0x40
   14562:	1af3      	subs	r3, r6, r3
   14564:	409c      	lsls	r4, r3
   14566:	4650      	mov	r0, sl
   14568:	4320      	orrs	r0, r4
   1456a:	1e44      	subs	r4, r0, #1
   1456c:	41a0      	sbcs	r0, r4
   1456e:	4307      	orrs	r7, r0
   14570:	2400      	movs	r4, #0
   14572:	18bf      	adds	r7, r7, r2
   14574:	e748      	b.n	14408 <__aeabi_dsub+0x4ac>
   14576:	2400      	movs	r4, #0
   14578:	e7d0      	b.n	1451c <__aeabi_dsub+0x5c0>
   1457a:	2400      	movs	r4, #0
   1457c:	e7f3      	b.n	14566 <__aeabi_dsub+0x60a>
   1457e:	46c0      	nop			; (mov r8, r8)
   14580:	000007ff 	.word	0x000007ff
   14584:	ff7fffff 	.word	0xff7fffff

00014588 <__aeabi_d2iz>:
   14588:	b530      	push	{r4, r5, lr}
   1458a:	4d13      	ldr	r5, [pc, #76]	; (145d8 <__aeabi_d2iz+0x50>)
   1458c:	030a      	lsls	r2, r1, #12
   1458e:	004b      	lsls	r3, r1, #1
   14590:	0b12      	lsrs	r2, r2, #12
   14592:	0d5b      	lsrs	r3, r3, #21
   14594:	0fc9      	lsrs	r1, r1, #31
   14596:	2400      	movs	r4, #0
   14598:	42ab      	cmp	r3, r5
   1459a:	dd10      	ble.n	145be <__aeabi_d2iz+0x36>
   1459c:	4c0f      	ldr	r4, [pc, #60]	; (145dc <__aeabi_d2iz+0x54>)
   1459e:	42a3      	cmp	r3, r4
   145a0:	dc0f      	bgt.n	145c2 <__aeabi_d2iz+0x3a>
   145a2:	2480      	movs	r4, #128	; 0x80
   145a4:	4d0e      	ldr	r5, [pc, #56]	; (145e0 <__aeabi_d2iz+0x58>)
   145a6:	0364      	lsls	r4, r4, #13
   145a8:	4322      	orrs	r2, r4
   145aa:	1aed      	subs	r5, r5, r3
   145ac:	2d1f      	cmp	r5, #31
   145ae:	dd0b      	ble.n	145c8 <__aeabi_d2iz+0x40>
   145b0:	480c      	ldr	r0, [pc, #48]	; (145e4 <__aeabi_d2iz+0x5c>)
   145b2:	1ac3      	subs	r3, r0, r3
   145b4:	40da      	lsrs	r2, r3
   145b6:	4254      	negs	r4, r2
   145b8:	2900      	cmp	r1, #0
   145ba:	d100      	bne.n	145be <__aeabi_d2iz+0x36>
   145bc:	0014      	movs	r4, r2
   145be:	0020      	movs	r0, r4
   145c0:	bd30      	pop	{r4, r5, pc}
   145c2:	4b09      	ldr	r3, [pc, #36]	; (145e8 <__aeabi_d2iz+0x60>)
   145c4:	18cc      	adds	r4, r1, r3
   145c6:	e7fa      	b.n	145be <__aeabi_d2iz+0x36>
   145c8:	4c08      	ldr	r4, [pc, #32]	; (145ec <__aeabi_d2iz+0x64>)
   145ca:	40e8      	lsrs	r0, r5
   145cc:	46a4      	mov	ip, r4
   145ce:	4463      	add	r3, ip
   145d0:	409a      	lsls	r2, r3
   145d2:	4302      	orrs	r2, r0
   145d4:	e7ef      	b.n	145b6 <__aeabi_d2iz+0x2e>
   145d6:	46c0      	nop			; (mov r8, r8)
   145d8:	000003fe 	.word	0x000003fe
   145dc:	0000041d 	.word	0x0000041d
   145e0:	00000433 	.word	0x00000433
   145e4:	00000413 	.word	0x00000413
   145e8:	7fffffff 	.word	0x7fffffff
   145ec:	fffffbed 	.word	0xfffffbed

000145f0 <__aeabi_i2d>:
   145f0:	b570      	push	{r4, r5, r6, lr}
   145f2:	2800      	cmp	r0, #0
   145f4:	d030      	beq.n	14658 <__aeabi_i2d+0x68>
   145f6:	17c3      	asrs	r3, r0, #31
   145f8:	18c4      	adds	r4, r0, r3
   145fa:	405c      	eors	r4, r3
   145fc:	0fc5      	lsrs	r5, r0, #31
   145fe:	0020      	movs	r0, r4
   14600:	f000 f94c 	bl	1489c <__clzsi2>
   14604:	4b17      	ldr	r3, [pc, #92]	; (14664 <__aeabi_i2d+0x74>)
   14606:	4a18      	ldr	r2, [pc, #96]	; (14668 <__aeabi_i2d+0x78>)
   14608:	1a1b      	subs	r3, r3, r0
   1460a:	1ad2      	subs	r2, r2, r3
   1460c:	2a1f      	cmp	r2, #31
   1460e:	dd18      	ble.n	14642 <__aeabi_i2d+0x52>
   14610:	4a16      	ldr	r2, [pc, #88]	; (1466c <__aeabi_i2d+0x7c>)
   14612:	1ad2      	subs	r2, r2, r3
   14614:	4094      	lsls	r4, r2
   14616:	2200      	movs	r2, #0
   14618:	0324      	lsls	r4, r4, #12
   1461a:	055b      	lsls	r3, r3, #21
   1461c:	0b24      	lsrs	r4, r4, #12
   1461e:	0d5b      	lsrs	r3, r3, #21
   14620:	2100      	movs	r1, #0
   14622:	0010      	movs	r0, r2
   14624:	0324      	lsls	r4, r4, #12
   14626:	0d0a      	lsrs	r2, r1, #20
   14628:	0b24      	lsrs	r4, r4, #12
   1462a:	0512      	lsls	r2, r2, #20
   1462c:	4322      	orrs	r2, r4
   1462e:	4c10      	ldr	r4, [pc, #64]	; (14670 <__aeabi_i2d+0x80>)
   14630:	051b      	lsls	r3, r3, #20
   14632:	4022      	ands	r2, r4
   14634:	4313      	orrs	r3, r2
   14636:	005b      	lsls	r3, r3, #1
   14638:	07ed      	lsls	r5, r5, #31
   1463a:	085b      	lsrs	r3, r3, #1
   1463c:	432b      	orrs	r3, r5
   1463e:	0019      	movs	r1, r3
   14640:	bd70      	pop	{r4, r5, r6, pc}
   14642:	0021      	movs	r1, r4
   14644:	4091      	lsls	r1, r2
   14646:	000a      	movs	r2, r1
   14648:	210b      	movs	r1, #11
   1464a:	1a08      	subs	r0, r1, r0
   1464c:	40c4      	lsrs	r4, r0
   1464e:	055b      	lsls	r3, r3, #21
   14650:	0324      	lsls	r4, r4, #12
   14652:	0b24      	lsrs	r4, r4, #12
   14654:	0d5b      	lsrs	r3, r3, #21
   14656:	e7e3      	b.n	14620 <__aeabi_i2d+0x30>
   14658:	2500      	movs	r5, #0
   1465a:	2300      	movs	r3, #0
   1465c:	2400      	movs	r4, #0
   1465e:	2200      	movs	r2, #0
   14660:	e7de      	b.n	14620 <__aeabi_i2d+0x30>
   14662:	46c0      	nop			; (mov r8, r8)
   14664:	0000041e 	.word	0x0000041e
   14668:	00000433 	.word	0x00000433
   1466c:	00000413 	.word	0x00000413
   14670:	800fffff 	.word	0x800fffff

00014674 <__aeabi_ui2d>:
   14674:	b510      	push	{r4, lr}
   14676:	1e04      	subs	r4, r0, #0
   14678:	d028      	beq.n	146cc <__aeabi_ui2d+0x58>
   1467a:	f000 f90f 	bl	1489c <__clzsi2>
   1467e:	4b15      	ldr	r3, [pc, #84]	; (146d4 <__aeabi_ui2d+0x60>)
   14680:	4a15      	ldr	r2, [pc, #84]	; (146d8 <__aeabi_ui2d+0x64>)
   14682:	1a1b      	subs	r3, r3, r0
   14684:	1ad2      	subs	r2, r2, r3
   14686:	2a1f      	cmp	r2, #31
   14688:	dd15      	ble.n	146b6 <__aeabi_ui2d+0x42>
   1468a:	4a14      	ldr	r2, [pc, #80]	; (146dc <__aeabi_ui2d+0x68>)
   1468c:	1ad2      	subs	r2, r2, r3
   1468e:	4094      	lsls	r4, r2
   14690:	2200      	movs	r2, #0
   14692:	0324      	lsls	r4, r4, #12
   14694:	055b      	lsls	r3, r3, #21
   14696:	0b24      	lsrs	r4, r4, #12
   14698:	0d5b      	lsrs	r3, r3, #21
   1469a:	2100      	movs	r1, #0
   1469c:	0010      	movs	r0, r2
   1469e:	0324      	lsls	r4, r4, #12
   146a0:	0d0a      	lsrs	r2, r1, #20
   146a2:	0b24      	lsrs	r4, r4, #12
   146a4:	0512      	lsls	r2, r2, #20
   146a6:	4322      	orrs	r2, r4
   146a8:	4c0d      	ldr	r4, [pc, #52]	; (146e0 <__aeabi_ui2d+0x6c>)
   146aa:	051b      	lsls	r3, r3, #20
   146ac:	4022      	ands	r2, r4
   146ae:	4313      	orrs	r3, r2
   146b0:	005b      	lsls	r3, r3, #1
   146b2:	0859      	lsrs	r1, r3, #1
   146b4:	bd10      	pop	{r4, pc}
   146b6:	0021      	movs	r1, r4
   146b8:	4091      	lsls	r1, r2
   146ba:	000a      	movs	r2, r1
   146bc:	210b      	movs	r1, #11
   146be:	1a08      	subs	r0, r1, r0
   146c0:	40c4      	lsrs	r4, r0
   146c2:	055b      	lsls	r3, r3, #21
   146c4:	0324      	lsls	r4, r4, #12
   146c6:	0b24      	lsrs	r4, r4, #12
   146c8:	0d5b      	lsrs	r3, r3, #21
   146ca:	e7e6      	b.n	1469a <__aeabi_ui2d+0x26>
   146cc:	2300      	movs	r3, #0
   146ce:	2400      	movs	r4, #0
   146d0:	2200      	movs	r2, #0
   146d2:	e7e2      	b.n	1469a <__aeabi_ui2d+0x26>
   146d4:	0000041e 	.word	0x0000041e
   146d8:	00000433 	.word	0x00000433
   146dc:	00000413 	.word	0x00000413
   146e0:	800fffff 	.word	0x800fffff

000146e4 <__aeabi_f2d>:
   146e4:	0041      	lsls	r1, r0, #1
   146e6:	0e09      	lsrs	r1, r1, #24
   146e8:	1c4b      	adds	r3, r1, #1
   146ea:	b570      	push	{r4, r5, r6, lr}
   146ec:	b2db      	uxtb	r3, r3
   146ee:	0246      	lsls	r6, r0, #9
   146f0:	0a75      	lsrs	r5, r6, #9
   146f2:	0fc4      	lsrs	r4, r0, #31
   146f4:	2b01      	cmp	r3, #1
   146f6:	dd14      	ble.n	14722 <__aeabi_f2d+0x3e>
   146f8:	23e0      	movs	r3, #224	; 0xe0
   146fa:	009b      	lsls	r3, r3, #2
   146fc:	076d      	lsls	r5, r5, #29
   146fe:	0b36      	lsrs	r6, r6, #12
   14700:	18cb      	adds	r3, r1, r3
   14702:	2100      	movs	r1, #0
   14704:	0d0a      	lsrs	r2, r1, #20
   14706:	0028      	movs	r0, r5
   14708:	0512      	lsls	r2, r2, #20
   1470a:	4d1c      	ldr	r5, [pc, #112]	; (1477c <__aeabi_f2d+0x98>)
   1470c:	4332      	orrs	r2, r6
   1470e:	055b      	lsls	r3, r3, #21
   14710:	402a      	ands	r2, r5
   14712:	085b      	lsrs	r3, r3, #1
   14714:	4313      	orrs	r3, r2
   14716:	005b      	lsls	r3, r3, #1
   14718:	07e4      	lsls	r4, r4, #31
   1471a:	085b      	lsrs	r3, r3, #1
   1471c:	4323      	orrs	r3, r4
   1471e:	0019      	movs	r1, r3
   14720:	bd70      	pop	{r4, r5, r6, pc}
   14722:	2900      	cmp	r1, #0
   14724:	d114      	bne.n	14750 <__aeabi_f2d+0x6c>
   14726:	2d00      	cmp	r5, #0
   14728:	d01e      	beq.n	14768 <__aeabi_f2d+0x84>
   1472a:	0028      	movs	r0, r5
   1472c:	f000 f8b6 	bl	1489c <__clzsi2>
   14730:	280a      	cmp	r0, #10
   14732:	dc1c      	bgt.n	1476e <__aeabi_f2d+0x8a>
   14734:	230b      	movs	r3, #11
   14736:	002a      	movs	r2, r5
   14738:	1a1b      	subs	r3, r3, r0
   1473a:	40da      	lsrs	r2, r3
   1473c:	0003      	movs	r3, r0
   1473e:	3315      	adds	r3, #21
   14740:	409d      	lsls	r5, r3
   14742:	4b0f      	ldr	r3, [pc, #60]	; (14780 <__aeabi_f2d+0x9c>)
   14744:	0312      	lsls	r2, r2, #12
   14746:	1a1b      	subs	r3, r3, r0
   14748:	055b      	lsls	r3, r3, #21
   1474a:	0b16      	lsrs	r6, r2, #12
   1474c:	0d5b      	lsrs	r3, r3, #21
   1474e:	e7d8      	b.n	14702 <__aeabi_f2d+0x1e>
   14750:	2d00      	cmp	r5, #0
   14752:	d006      	beq.n	14762 <__aeabi_f2d+0x7e>
   14754:	0b32      	lsrs	r2, r6, #12
   14756:	2680      	movs	r6, #128	; 0x80
   14758:	0336      	lsls	r6, r6, #12
   1475a:	076d      	lsls	r5, r5, #29
   1475c:	4316      	orrs	r6, r2
   1475e:	4b09      	ldr	r3, [pc, #36]	; (14784 <__aeabi_f2d+0xa0>)
   14760:	e7cf      	b.n	14702 <__aeabi_f2d+0x1e>
   14762:	4b08      	ldr	r3, [pc, #32]	; (14784 <__aeabi_f2d+0xa0>)
   14764:	2600      	movs	r6, #0
   14766:	e7cc      	b.n	14702 <__aeabi_f2d+0x1e>
   14768:	2300      	movs	r3, #0
   1476a:	2600      	movs	r6, #0
   1476c:	e7c9      	b.n	14702 <__aeabi_f2d+0x1e>
   1476e:	0003      	movs	r3, r0
   14770:	002a      	movs	r2, r5
   14772:	3b0b      	subs	r3, #11
   14774:	409a      	lsls	r2, r3
   14776:	2500      	movs	r5, #0
   14778:	e7e3      	b.n	14742 <__aeabi_f2d+0x5e>
   1477a:	46c0      	nop			; (mov r8, r8)
   1477c:	800fffff 	.word	0x800fffff
   14780:	00000389 	.word	0x00000389
   14784:	000007ff 	.word	0x000007ff

00014788 <__aeabi_d2f>:
   14788:	b5f0      	push	{r4, r5, r6, r7, lr}
   1478a:	004c      	lsls	r4, r1, #1
   1478c:	0d64      	lsrs	r4, r4, #21
   1478e:	030b      	lsls	r3, r1, #12
   14790:	1c62      	adds	r2, r4, #1
   14792:	0f45      	lsrs	r5, r0, #29
   14794:	0a5b      	lsrs	r3, r3, #9
   14796:	0552      	lsls	r2, r2, #21
   14798:	432b      	orrs	r3, r5
   1479a:	0fc9      	lsrs	r1, r1, #31
   1479c:	00c5      	lsls	r5, r0, #3
   1479e:	0d52      	lsrs	r2, r2, #21
   147a0:	2a01      	cmp	r2, #1
   147a2:	dd28      	ble.n	147f6 <__aeabi_d2f+0x6e>
   147a4:	4a3a      	ldr	r2, [pc, #232]	; (14890 <__aeabi_d2f+0x108>)
   147a6:	18a6      	adds	r6, r4, r2
   147a8:	2efe      	cmp	r6, #254	; 0xfe
   147aa:	dc1b      	bgt.n	147e4 <__aeabi_d2f+0x5c>
   147ac:	2e00      	cmp	r6, #0
   147ae:	dd3e      	ble.n	1482e <__aeabi_d2f+0xa6>
   147b0:	0180      	lsls	r0, r0, #6
   147b2:	0002      	movs	r2, r0
   147b4:	1e50      	subs	r0, r2, #1
   147b6:	4182      	sbcs	r2, r0
   147b8:	0f6d      	lsrs	r5, r5, #29
   147ba:	432a      	orrs	r2, r5
   147bc:	00db      	lsls	r3, r3, #3
   147be:	4313      	orrs	r3, r2
   147c0:	075a      	lsls	r2, r3, #29
   147c2:	d004      	beq.n	147ce <__aeabi_d2f+0x46>
   147c4:	220f      	movs	r2, #15
   147c6:	401a      	ands	r2, r3
   147c8:	2a04      	cmp	r2, #4
   147ca:	d000      	beq.n	147ce <__aeabi_d2f+0x46>
   147cc:	3304      	adds	r3, #4
   147ce:	2280      	movs	r2, #128	; 0x80
   147d0:	04d2      	lsls	r2, r2, #19
   147d2:	401a      	ands	r2, r3
   147d4:	d05a      	beq.n	1488c <__aeabi_d2f+0x104>
   147d6:	3601      	adds	r6, #1
   147d8:	2eff      	cmp	r6, #255	; 0xff
   147da:	d003      	beq.n	147e4 <__aeabi_d2f+0x5c>
   147dc:	019b      	lsls	r3, r3, #6
   147de:	0a5b      	lsrs	r3, r3, #9
   147e0:	b2f4      	uxtb	r4, r6
   147e2:	e001      	b.n	147e8 <__aeabi_d2f+0x60>
   147e4:	24ff      	movs	r4, #255	; 0xff
   147e6:	2300      	movs	r3, #0
   147e8:	0258      	lsls	r0, r3, #9
   147ea:	05e4      	lsls	r4, r4, #23
   147ec:	0a40      	lsrs	r0, r0, #9
   147ee:	07c9      	lsls	r1, r1, #31
   147f0:	4320      	orrs	r0, r4
   147f2:	4308      	orrs	r0, r1
   147f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   147f6:	2c00      	cmp	r4, #0
   147f8:	d007      	beq.n	1480a <__aeabi_d2f+0x82>
   147fa:	431d      	orrs	r5, r3
   147fc:	d0f2      	beq.n	147e4 <__aeabi_d2f+0x5c>
   147fe:	2080      	movs	r0, #128	; 0x80
   14800:	00db      	lsls	r3, r3, #3
   14802:	0480      	lsls	r0, r0, #18
   14804:	4303      	orrs	r3, r0
   14806:	26ff      	movs	r6, #255	; 0xff
   14808:	e7da      	b.n	147c0 <__aeabi_d2f+0x38>
   1480a:	432b      	orrs	r3, r5
   1480c:	d003      	beq.n	14816 <__aeabi_d2f+0x8e>
   1480e:	2305      	movs	r3, #5
   14810:	08db      	lsrs	r3, r3, #3
   14812:	2cff      	cmp	r4, #255	; 0xff
   14814:	d003      	beq.n	1481e <__aeabi_d2f+0x96>
   14816:	025b      	lsls	r3, r3, #9
   14818:	0a5b      	lsrs	r3, r3, #9
   1481a:	b2e4      	uxtb	r4, r4
   1481c:	e7e4      	b.n	147e8 <__aeabi_d2f+0x60>
   1481e:	2b00      	cmp	r3, #0
   14820:	d032      	beq.n	14888 <__aeabi_d2f+0x100>
   14822:	2080      	movs	r0, #128	; 0x80
   14824:	03c0      	lsls	r0, r0, #15
   14826:	4303      	orrs	r3, r0
   14828:	025b      	lsls	r3, r3, #9
   1482a:	0a5b      	lsrs	r3, r3, #9
   1482c:	e7dc      	b.n	147e8 <__aeabi_d2f+0x60>
   1482e:	0032      	movs	r2, r6
   14830:	3217      	adds	r2, #23
   14832:	db14      	blt.n	1485e <__aeabi_d2f+0xd6>
   14834:	2280      	movs	r2, #128	; 0x80
   14836:	271e      	movs	r7, #30
   14838:	0412      	lsls	r2, r2, #16
   1483a:	4313      	orrs	r3, r2
   1483c:	1bbf      	subs	r7, r7, r6
   1483e:	2f1f      	cmp	r7, #31
   14840:	dc0f      	bgt.n	14862 <__aeabi_d2f+0xda>
   14842:	4a14      	ldr	r2, [pc, #80]	; (14894 <__aeabi_d2f+0x10c>)
   14844:	4694      	mov	ip, r2
   14846:	4464      	add	r4, ip
   14848:	002a      	movs	r2, r5
   1484a:	40a5      	lsls	r5, r4
   1484c:	002e      	movs	r6, r5
   1484e:	40a3      	lsls	r3, r4
   14850:	1e75      	subs	r5, r6, #1
   14852:	41ae      	sbcs	r6, r5
   14854:	40fa      	lsrs	r2, r7
   14856:	4333      	orrs	r3, r6
   14858:	4313      	orrs	r3, r2
   1485a:	2600      	movs	r6, #0
   1485c:	e7b0      	b.n	147c0 <__aeabi_d2f+0x38>
   1485e:	2400      	movs	r4, #0
   14860:	e7d5      	b.n	1480e <__aeabi_d2f+0x86>
   14862:	2202      	movs	r2, #2
   14864:	4252      	negs	r2, r2
   14866:	1b96      	subs	r6, r2, r6
   14868:	001a      	movs	r2, r3
   1486a:	40f2      	lsrs	r2, r6
   1486c:	2f20      	cmp	r7, #32
   1486e:	d009      	beq.n	14884 <__aeabi_d2f+0xfc>
   14870:	4809      	ldr	r0, [pc, #36]	; (14898 <__aeabi_d2f+0x110>)
   14872:	4684      	mov	ip, r0
   14874:	4464      	add	r4, ip
   14876:	40a3      	lsls	r3, r4
   14878:	432b      	orrs	r3, r5
   1487a:	1e5d      	subs	r5, r3, #1
   1487c:	41ab      	sbcs	r3, r5
   1487e:	2600      	movs	r6, #0
   14880:	4313      	orrs	r3, r2
   14882:	e79d      	b.n	147c0 <__aeabi_d2f+0x38>
   14884:	2300      	movs	r3, #0
   14886:	e7f7      	b.n	14878 <__aeabi_d2f+0xf0>
   14888:	2300      	movs	r3, #0
   1488a:	e7ad      	b.n	147e8 <__aeabi_d2f+0x60>
   1488c:	0034      	movs	r4, r6
   1488e:	e7bf      	b.n	14810 <__aeabi_d2f+0x88>
   14890:	fffffc80 	.word	0xfffffc80
   14894:	fffffc82 	.word	0xfffffc82
   14898:	fffffca2 	.word	0xfffffca2

0001489c <__clzsi2>:
   1489c:	211c      	movs	r1, #28
   1489e:	2301      	movs	r3, #1
   148a0:	041b      	lsls	r3, r3, #16
   148a2:	4298      	cmp	r0, r3
   148a4:	d301      	bcc.n	148aa <__clzsi2+0xe>
   148a6:	0c00      	lsrs	r0, r0, #16
   148a8:	3910      	subs	r1, #16
   148aa:	0a1b      	lsrs	r3, r3, #8
   148ac:	4298      	cmp	r0, r3
   148ae:	d301      	bcc.n	148b4 <__clzsi2+0x18>
   148b0:	0a00      	lsrs	r0, r0, #8
   148b2:	3908      	subs	r1, #8
   148b4:	091b      	lsrs	r3, r3, #4
   148b6:	4298      	cmp	r0, r3
   148b8:	d301      	bcc.n	148be <__clzsi2+0x22>
   148ba:	0900      	lsrs	r0, r0, #4
   148bc:	3904      	subs	r1, #4
   148be:	a202      	add	r2, pc, #8	; (adr r2, 148c8 <__clzsi2+0x2c>)
   148c0:	5c10      	ldrb	r0, [r2, r0]
   148c2:	1840      	adds	r0, r0, r1
   148c4:	4770      	bx	lr
   148c6:	46c0      	nop			; (mov r8, r8)
   148c8:	02020304 	.word	0x02020304
   148cc:	01010101 	.word	0x01010101
	...

000148d8 <__clzdi2>:
   148d8:	b510      	push	{r4, lr}
   148da:	2900      	cmp	r1, #0
   148dc:	d103      	bne.n	148e6 <__clzdi2+0xe>
   148de:	f7ff ffdd 	bl	1489c <__clzsi2>
   148e2:	3020      	adds	r0, #32
   148e4:	e002      	b.n	148ec <__clzdi2+0x14>
   148e6:	1c08      	adds	r0, r1, #0
   148e8:	f7ff ffd8 	bl	1489c <__clzsi2>
   148ec:	bd10      	pop	{r4, pc}
   148ee:	46c0      	nop			; (mov r8, r8)

000148f0 <__aeabi_d2uiz>:
   148f0:	b570      	push	{r4, r5, r6, lr}
   148f2:	2200      	movs	r2, #0
   148f4:	4b0c      	ldr	r3, [pc, #48]	; (14928 <__aeabi_d2uiz+0x38>)
   148f6:	0004      	movs	r4, r0
   148f8:	000d      	movs	r5, r1
   148fa:	f000 f84b 	bl	14994 <__aeabi_dcmpge>
   148fe:	2800      	cmp	r0, #0
   14900:	d104      	bne.n	1490c <__aeabi_d2uiz+0x1c>
   14902:	0020      	movs	r0, r4
   14904:	0029      	movs	r1, r5
   14906:	f7ff fe3f 	bl	14588 <__aeabi_d2iz>
   1490a:	bd70      	pop	{r4, r5, r6, pc}
   1490c:	4b06      	ldr	r3, [pc, #24]	; (14928 <__aeabi_d2uiz+0x38>)
   1490e:	2200      	movs	r2, #0
   14910:	0020      	movs	r0, r4
   14912:	0029      	movs	r1, r5
   14914:	f7ff fb22 	bl	13f5c <__aeabi_dsub>
   14918:	f7ff fe36 	bl	14588 <__aeabi_d2iz>
   1491c:	2380      	movs	r3, #128	; 0x80
   1491e:	061b      	lsls	r3, r3, #24
   14920:	469c      	mov	ip, r3
   14922:	4460      	add	r0, ip
   14924:	e7f1      	b.n	1490a <__aeabi_d2uiz+0x1a>
   14926:	46c0      	nop			; (mov r8, r8)
   14928:	41e00000 	.word	0x41e00000

0001492c <__aeabi_cdrcmple>:
   1492c:	4684      	mov	ip, r0
   1492e:	1c10      	adds	r0, r2, #0
   14930:	4662      	mov	r2, ip
   14932:	468c      	mov	ip, r1
   14934:	1c19      	adds	r1, r3, #0
   14936:	4663      	mov	r3, ip
   14938:	e000      	b.n	1493c <__aeabi_cdcmpeq>
   1493a:	46c0      	nop			; (mov r8, r8)

0001493c <__aeabi_cdcmpeq>:
   1493c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1493e:	f000 f8d1 	bl	14ae4 <__ledf2>
   14942:	2800      	cmp	r0, #0
   14944:	d401      	bmi.n	1494a <__aeabi_cdcmpeq+0xe>
   14946:	2100      	movs	r1, #0
   14948:	42c8      	cmn	r0, r1
   1494a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0001494c <__aeabi_dcmpeq>:
   1494c:	b510      	push	{r4, lr}
   1494e:	f000 f82b 	bl	149a8 <__eqdf2>
   14952:	4240      	negs	r0, r0
   14954:	3001      	adds	r0, #1
   14956:	bd10      	pop	{r4, pc}

00014958 <__aeabi_dcmplt>:
   14958:	b510      	push	{r4, lr}
   1495a:	f000 f8c3 	bl	14ae4 <__ledf2>
   1495e:	2800      	cmp	r0, #0
   14960:	db01      	blt.n	14966 <__aeabi_dcmplt+0xe>
   14962:	2000      	movs	r0, #0
   14964:	bd10      	pop	{r4, pc}
   14966:	2001      	movs	r0, #1
   14968:	bd10      	pop	{r4, pc}
   1496a:	46c0      	nop			; (mov r8, r8)

0001496c <__aeabi_dcmple>:
   1496c:	b510      	push	{r4, lr}
   1496e:	f000 f8b9 	bl	14ae4 <__ledf2>
   14972:	2800      	cmp	r0, #0
   14974:	dd01      	ble.n	1497a <__aeabi_dcmple+0xe>
   14976:	2000      	movs	r0, #0
   14978:	bd10      	pop	{r4, pc}
   1497a:	2001      	movs	r0, #1
   1497c:	bd10      	pop	{r4, pc}
   1497e:	46c0      	nop			; (mov r8, r8)

00014980 <__aeabi_dcmpgt>:
   14980:	b510      	push	{r4, lr}
   14982:	f000 f84b 	bl	14a1c <__gedf2>
   14986:	2800      	cmp	r0, #0
   14988:	dc01      	bgt.n	1498e <__aeabi_dcmpgt+0xe>
   1498a:	2000      	movs	r0, #0
   1498c:	bd10      	pop	{r4, pc}
   1498e:	2001      	movs	r0, #1
   14990:	bd10      	pop	{r4, pc}
   14992:	46c0      	nop			; (mov r8, r8)

00014994 <__aeabi_dcmpge>:
   14994:	b510      	push	{r4, lr}
   14996:	f000 f841 	bl	14a1c <__gedf2>
   1499a:	2800      	cmp	r0, #0
   1499c:	da01      	bge.n	149a2 <__aeabi_dcmpge+0xe>
   1499e:	2000      	movs	r0, #0
   149a0:	bd10      	pop	{r4, pc}
   149a2:	2001      	movs	r0, #1
   149a4:	bd10      	pop	{r4, pc}
   149a6:	46c0      	nop			; (mov r8, r8)

000149a8 <__eqdf2>:
   149a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   149aa:	464f      	mov	r7, r9
   149ac:	4646      	mov	r6, r8
   149ae:	46d6      	mov	lr, sl
   149b0:	005c      	lsls	r4, r3, #1
   149b2:	b5c0      	push	{r6, r7, lr}
   149b4:	031f      	lsls	r7, r3, #12
   149b6:	0fdb      	lsrs	r3, r3, #31
   149b8:	469a      	mov	sl, r3
   149ba:	4b17      	ldr	r3, [pc, #92]	; (14a18 <__eqdf2+0x70>)
   149bc:	030e      	lsls	r6, r1, #12
   149be:	004d      	lsls	r5, r1, #1
   149c0:	4684      	mov	ip, r0
   149c2:	4680      	mov	r8, r0
   149c4:	0b36      	lsrs	r6, r6, #12
   149c6:	0d6d      	lsrs	r5, r5, #21
   149c8:	0fc9      	lsrs	r1, r1, #31
   149ca:	4691      	mov	r9, r2
   149cc:	0b3f      	lsrs	r7, r7, #12
   149ce:	0d64      	lsrs	r4, r4, #21
   149d0:	2001      	movs	r0, #1
   149d2:	429d      	cmp	r5, r3
   149d4:	d008      	beq.n	149e8 <__eqdf2+0x40>
   149d6:	429c      	cmp	r4, r3
   149d8:	d001      	beq.n	149de <__eqdf2+0x36>
   149da:	42a5      	cmp	r5, r4
   149dc:	d00b      	beq.n	149f6 <__eqdf2+0x4e>
   149de:	bc1c      	pop	{r2, r3, r4}
   149e0:	4690      	mov	r8, r2
   149e2:	4699      	mov	r9, r3
   149e4:	46a2      	mov	sl, r4
   149e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   149e8:	4663      	mov	r3, ip
   149ea:	4333      	orrs	r3, r6
   149ec:	d1f7      	bne.n	149de <__eqdf2+0x36>
   149ee:	42ac      	cmp	r4, r5
   149f0:	d1f5      	bne.n	149de <__eqdf2+0x36>
   149f2:	433a      	orrs	r2, r7
   149f4:	d1f3      	bne.n	149de <__eqdf2+0x36>
   149f6:	2001      	movs	r0, #1
   149f8:	42be      	cmp	r6, r7
   149fa:	d1f0      	bne.n	149de <__eqdf2+0x36>
   149fc:	45c8      	cmp	r8, r9
   149fe:	d1ee      	bne.n	149de <__eqdf2+0x36>
   14a00:	4551      	cmp	r1, sl
   14a02:	d007      	beq.n	14a14 <__eqdf2+0x6c>
   14a04:	2d00      	cmp	r5, #0
   14a06:	d1ea      	bne.n	149de <__eqdf2+0x36>
   14a08:	4663      	mov	r3, ip
   14a0a:	431e      	orrs	r6, r3
   14a0c:	0030      	movs	r0, r6
   14a0e:	1e46      	subs	r6, r0, #1
   14a10:	41b0      	sbcs	r0, r6
   14a12:	e7e4      	b.n	149de <__eqdf2+0x36>
   14a14:	2000      	movs	r0, #0
   14a16:	e7e2      	b.n	149de <__eqdf2+0x36>
   14a18:	000007ff 	.word	0x000007ff

00014a1c <__gedf2>:
   14a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   14a1e:	4645      	mov	r5, r8
   14a20:	46de      	mov	lr, fp
   14a22:	4657      	mov	r7, sl
   14a24:	464e      	mov	r6, r9
   14a26:	b5e0      	push	{r5, r6, r7, lr}
   14a28:	031f      	lsls	r7, r3, #12
   14a2a:	0b3d      	lsrs	r5, r7, #12
   14a2c:	4f2c      	ldr	r7, [pc, #176]	; (14ae0 <__gedf2+0xc4>)
   14a2e:	030e      	lsls	r6, r1, #12
   14a30:	004c      	lsls	r4, r1, #1
   14a32:	46ab      	mov	fp, r5
   14a34:	005d      	lsls	r5, r3, #1
   14a36:	4684      	mov	ip, r0
   14a38:	0b36      	lsrs	r6, r6, #12
   14a3a:	0d64      	lsrs	r4, r4, #21
   14a3c:	0fc9      	lsrs	r1, r1, #31
   14a3e:	4690      	mov	r8, r2
   14a40:	0d6d      	lsrs	r5, r5, #21
   14a42:	0fdb      	lsrs	r3, r3, #31
   14a44:	42bc      	cmp	r4, r7
   14a46:	d02a      	beq.n	14a9e <__gedf2+0x82>
   14a48:	4f25      	ldr	r7, [pc, #148]	; (14ae0 <__gedf2+0xc4>)
   14a4a:	42bd      	cmp	r5, r7
   14a4c:	d02d      	beq.n	14aaa <__gedf2+0x8e>
   14a4e:	2c00      	cmp	r4, #0
   14a50:	d10f      	bne.n	14a72 <__gedf2+0x56>
   14a52:	4330      	orrs	r0, r6
   14a54:	0007      	movs	r7, r0
   14a56:	4681      	mov	r9, r0
   14a58:	4278      	negs	r0, r7
   14a5a:	4178      	adcs	r0, r7
   14a5c:	b2c0      	uxtb	r0, r0
   14a5e:	2d00      	cmp	r5, #0
   14a60:	d117      	bne.n	14a92 <__gedf2+0x76>
   14a62:	465f      	mov	r7, fp
   14a64:	433a      	orrs	r2, r7
   14a66:	d114      	bne.n	14a92 <__gedf2+0x76>
   14a68:	464b      	mov	r3, r9
   14a6a:	2000      	movs	r0, #0
   14a6c:	2b00      	cmp	r3, #0
   14a6e:	d00a      	beq.n	14a86 <__gedf2+0x6a>
   14a70:	e006      	b.n	14a80 <__gedf2+0x64>
   14a72:	2d00      	cmp	r5, #0
   14a74:	d102      	bne.n	14a7c <__gedf2+0x60>
   14a76:	4658      	mov	r0, fp
   14a78:	4302      	orrs	r2, r0
   14a7a:	d001      	beq.n	14a80 <__gedf2+0x64>
   14a7c:	4299      	cmp	r1, r3
   14a7e:	d018      	beq.n	14ab2 <__gedf2+0x96>
   14a80:	4248      	negs	r0, r1
   14a82:	2101      	movs	r1, #1
   14a84:	4308      	orrs	r0, r1
   14a86:	bc3c      	pop	{r2, r3, r4, r5}
   14a88:	4690      	mov	r8, r2
   14a8a:	4699      	mov	r9, r3
   14a8c:	46a2      	mov	sl, r4
   14a8e:	46ab      	mov	fp, r5
   14a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14a92:	2800      	cmp	r0, #0
   14a94:	d0f2      	beq.n	14a7c <__gedf2+0x60>
   14a96:	2001      	movs	r0, #1
   14a98:	3b01      	subs	r3, #1
   14a9a:	4318      	orrs	r0, r3
   14a9c:	e7f3      	b.n	14a86 <__gedf2+0x6a>
   14a9e:	0037      	movs	r7, r6
   14aa0:	4307      	orrs	r7, r0
   14aa2:	d0d1      	beq.n	14a48 <__gedf2+0x2c>
   14aa4:	2002      	movs	r0, #2
   14aa6:	4240      	negs	r0, r0
   14aa8:	e7ed      	b.n	14a86 <__gedf2+0x6a>
   14aaa:	465f      	mov	r7, fp
   14aac:	4317      	orrs	r7, r2
   14aae:	d0ce      	beq.n	14a4e <__gedf2+0x32>
   14ab0:	e7f8      	b.n	14aa4 <__gedf2+0x88>
   14ab2:	42ac      	cmp	r4, r5
   14ab4:	dce4      	bgt.n	14a80 <__gedf2+0x64>
   14ab6:	da03      	bge.n	14ac0 <__gedf2+0xa4>
   14ab8:	1e48      	subs	r0, r1, #1
   14aba:	2101      	movs	r1, #1
   14abc:	4308      	orrs	r0, r1
   14abe:	e7e2      	b.n	14a86 <__gedf2+0x6a>
   14ac0:	455e      	cmp	r6, fp
   14ac2:	d8dd      	bhi.n	14a80 <__gedf2+0x64>
   14ac4:	d006      	beq.n	14ad4 <__gedf2+0xb8>
   14ac6:	2000      	movs	r0, #0
   14ac8:	455e      	cmp	r6, fp
   14aca:	d2dc      	bcs.n	14a86 <__gedf2+0x6a>
   14acc:	2301      	movs	r3, #1
   14ace:	1e48      	subs	r0, r1, #1
   14ad0:	4318      	orrs	r0, r3
   14ad2:	e7d8      	b.n	14a86 <__gedf2+0x6a>
   14ad4:	45c4      	cmp	ip, r8
   14ad6:	d8d3      	bhi.n	14a80 <__gedf2+0x64>
   14ad8:	2000      	movs	r0, #0
   14ada:	45c4      	cmp	ip, r8
   14adc:	d3f6      	bcc.n	14acc <__gedf2+0xb0>
   14ade:	e7d2      	b.n	14a86 <__gedf2+0x6a>
   14ae0:	000007ff 	.word	0x000007ff

00014ae4 <__ledf2>:
   14ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
   14ae6:	464e      	mov	r6, r9
   14ae8:	4645      	mov	r5, r8
   14aea:	46de      	mov	lr, fp
   14aec:	4657      	mov	r7, sl
   14aee:	005c      	lsls	r4, r3, #1
   14af0:	b5e0      	push	{r5, r6, r7, lr}
   14af2:	031f      	lsls	r7, r3, #12
   14af4:	0fdb      	lsrs	r3, r3, #31
   14af6:	4699      	mov	r9, r3
   14af8:	4b2a      	ldr	r3, [pc, #168]	; (14ba4 <__ledf2+0xc0>)
   14afa:	030e      	lsls	r6, r1, #12
   14afc:	004d      	lsls	r5, r1, #1
   14afe:	0fc9      	lsrs	r1, r1, #31
   14b00:	4684      	mov	ip, r0
   14b02:	0b36      	lsrs	r6, r6, #12
   14b04:	0d6d      	lsrs	r5, r5, #21
   14b06:	468b      	mov	fp, r1
   14b08:	4690      	mov	r8, r2
   14b0a:	0b3f      	lsrs	r7, r7, #12
   14b0c:	0d64      	lsrs	r4, r4, #21
   14b0e:	429d      	cmp	r5, r3
   14b10:	d020      	beq.n	14b54 <__ledf2+0x70>
   14b12:	4b24      	ldr	r3, [pc, #144]	; (14ba4 <__ledf2+0xc0>)
   14b14:	429c      	cmp	r4, r3
   14b16:	d022      	beq.n	14b5e <__ledf2+0x7a>
   14b18:	2d00      	cmp	r5, #0
   14b1a:	d112      	bne.n	14b42 <__ledf2+0x5e>
   14b1c:	4330      	orrs	r0, r6
   14b1e:	4243      	negs	r3, r0
   14b20:	4143      	adcs	r3, r0
   14b22:	b2db      	uxtb	r3, r3
   14b24:	2c00      	cmp	r4, #0
   14b26:	d01f      	beq.n	14b68 <__ledf2+0x84>
   14b28:	2b00      	cmp	r3, #0
   14b2a:	d00c      	beq.n	14b46 <__ledf2+0x62>
   14b2c:	464b      	mov	r3, r9
   14b2e:	2001      	movs	r0, #1
   14b30:	3b01      	subs	r3, #1
   14b32:	4303      	orrs	r3, r0
   14b34:	0018      	movs	r0, r3
   14b36:	bc3c      	pop	{r2, r3, r4, r5}
   14b38:	4690      	mov	r8, r2
   14b3a:	4699      	mov	r9, r3
   14b3c:	46a2      	mov	sl, r4
   14b3e:	46ab      	mov	fp, r5
   14b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14b42:	2c00      	cmp	r4, #0
   14b44:	d016      	beq.n	14b74 <__ledf2+0x90>
   14b46:	45cb      	cmp	fp, r9
   14b48:	d017      	beq.n	14b7a <__ledf2+0x96>
   14b4a:	465b      	mov	r3, fp
   14b4c:	4259      	negs	r1, r3
   14b4e:	2301      	movs	r3, #1
   14b50:	430b      	orrs	r3, r1
   14b52:	e7ef      	b.n	14b34 <__ledf2+0x50>
   14b54:	0031      	movs	r1, r6
   14b56:	2302      	movs	r3, #2
   14b58:	4301      	orrs	r1, r0
   14b5a:	d1eb      	bne.n	14b34 <__ledf2+0x50>
   14b5c:	e7d9      	b.n	14b12 <__ledf2+0x2e>
   14b5e:	0039      	movs	r1, r7
   14b60:	2302      	movs	r3, #2
   14b62:	4311      	orrs	r1, r2
   14b64:	d1e6      	bne.n	14b34 <__ledf2+0x50>
   14b66:	e7d7      	b.n	14b18 <__ledf2+0x34>
   14b68:	433a      	orrs	r2, r7
   14b6a:	d1dd      	bne.n	14b28 <__ledf2+0x44>
   14b6c:	2300      	movs	r3, #0
   14b6e:	2800      	cmp	r0, #0
   14b70:	d0e0      	beq.n	14b34 <__ledf2+0x50>
   14b72:	e7ea      	b.n	14b4a <__ledf2+0x66>
   14b74:	433a      	orrs	r2, r7
   14b76:	d1e6      	bne.n	14b46 <__ledf2+0x62>
   14b78:	e7e7      	b.n	14b4a <__ledf2+0x66>
   14b7a:	42a5      	cmp	r5, r4
   14b7c:	dce5      	bgt.n	14b4a <__ledf2+0x66>
   14b7e:	db05      	blt.n	14b8c <__ledf2+0xa8>
   14b80:	42be      	cmp	r6, r7
   14b82:	d8e2      	bhi.n	14b4a <__ledf2+0x66>
   14b84:	d007      	beq.n	14b96 <__ledf2+0xb2>
   14b86:	2300      	movs	r3, #0
   14b88:	42be      	cmp	r6, r7
   14b8a:	d2d3      	bcs.n	14b34 <__ledf2+0x50>
   14b8c:	4659      	mov	r1, fp
   14b8e:	2301      	movs	r3, #1
   14b90:	3901      	subs	r1, #1
   14b92:	430b      	orrs	r3, r1
   14b94:	e7ce      	b.n	14b34 <__ledf2+0x50>
   14b96:	45c4      	cmp	ip, r8
   14b98:	d8d7      	bhi.n	14b4a <__ledf2+0x66>
   14b9a:	2300      	movs	r3, #0
   14b9c:	45c4      	cmp	ip, r8
   14b9e:	d3f5      	bcc.n	14b8c <__ledf2+0xa8>
   14ba0:	e7c8      	b.n	14b34 <__ledf2+0x50>
   14ba2:	46c0      	nop			; (mov r8, r8)
   14ba4:	000007ff 	.word	0x000007ff

00014ba8 <__libc_init_array>:
   14ba8:	b570      	push	{r4, r5, r6, lr}
   14baa:	4e0d      	ldr	r6, [pc, #52]	; (14be0 <__libc_init_array+0x38>)
   14bac:	4d0d      	ldr	r5, [pc, #52]	; (14be4 <__libc_init_array+0x3c>)
   14bae:	2400      	movs	r4, #0
   14bb0:	1bad      	subs	r5, r5, r6
   14bb2:	10ad      	asrs	r5, r5, #2
   14bb4:	d005      	beq.n	14bc2 <__libc_init_array+0x1a>
   14bb6:	00a3      	lsls	r3, r4, #2
   14bb8:	58f3      	ldr	r3, [r6, r3]
   14bba:	3401      	adds	r4, #1
   14bbc:	4798      	blx	r3
   14bbe:	42a5      	cmp	r5, r4
   14bc0:	d1f9      	bne.n	14bb6 <__libc_init_array+0xe>
   14bc2:	f006 fd49 	bl	1b658 <_init>
   14bc6:	4e08      	ldr	r6, [pc, #32]	; (14be8 <__libc_init_array+0x40>)
   14bc8:	4d08      	ldr	r5, [pc, #32]	; (14bec <__libc_init_array+0x44>)
   14bca:	2400      	movs	r4, #0
   14bcc:	1bad      	subs	r5, r5, r6
   14bce:	10ad      	asrs	r5, r5, #2
   14bd0:	d005      	beq.n	14bde <__libc_init_array+0x36>
   14bd2:	00a3      	lsls	r3, r4, #2
   14bd4:	58f3      	ldr	r3, [r6, r3]
   14bd6:	3401      	adds	r4, #1
   14bd8:	4798      	blx	r3
   14bda:	42a5      	cmp	r5, r4
   14bdc:	d1f9      	bne.n	14bd2 <__libc_init_array+0x2a>
   14bde:	bd70      	pop	{r4, r5, r6, pc}
   14be0:	0001b664 	.word	0x0001b664
   14be4:	0001b664 	.word	0x0001b664
   14be8:	0001b664 	.word	0x0001b664
   14bec:	0001b66c 	.word	0x0001b66c

00014bf0 <malloc>:
   14bf0:	b510      	push	{r4, lr}
   14bf2:	4b03      	ldr	r3, [pc, #12]	; (14c00 <malloc+0x10>)
   14bf4:	0001      	movs	r1, r0
   14bf6:	6818      	ldr	r0, [r3, #0]
   14bf8:	f000 f804 	bl	14c04 <_malloc_r>
   14bfc:	bd10      	pop	{r4, pc}
   14bfe:	46c0      	nop			; (mov r8, r8)
   14c00:	20000068 	.word	0x20000068

00014c04 <_malloc_r>:
   14c04:	b5f0      	push	{r4, r5, r6, r7, lr}
   14c06:	4657      	mov	r7, sl
   14c08:	4645      	mov	r5, r8
   14c0a:	46de      	mov	lr, fp
   14c0c:	464e      	mov	r6, r9
   14c0e:	b5e0      	push	{r5, r6, r7, lr}
   14c10:	000d      	movs	r5, r1
   14c12:	350b      	adds	r5, #11
   14c14:	b083      	sub	sp, #12
   14c16:	0007      	movs	r7, r0
   14c18:	2d16      	cmp	r5, #22
   14c1a:	d800      	bhi.n	14c1e <_malloc_r+0x1a>
   14c1c:	e09f      	b.n	14d5e <_malloc_r+0x15a>
   14c1e:	2307      	movs	r3, #7
   14c20:	439d      	bics	r5, r3
   14c22:	d500      	bpl.n	14c26 <_malloc_r+0x22>
   14c24:	e0c4      	b.n	14db0 <_malloc_r+0x1ac>
   14c26:	42a9      	cmp	r1, r5
   14c28:	d900      	bls.n	14c2c <_malloc_r+0x28>
   14c2a:	e0c1      	b.n	14db0 <_malloc_r+0x1ac>
   14c2c:	f000 fb2a 	bl	15284 <__malloc_lock>
   14c30:	23f8      	movs	r3, #248	; 0xf8
   14c32:	33ff      	adds	r3, #255	; 0xff
   14c34:	429d      	cmp	r5, r3
   14c36:	d800      	bhi.n	14c3a <_malloc_r+0x36>
   14c38:	e28f      	b.n	1515a <_malloc_r+0x556>
   14c3a:	0a68      	lsrs	r0, r5, #9
   14c3c:	d100      	bne.n	14c40 <_malloc_r+0x3c>
   14c3e:	e0bb      	b.n	14db8 <_malloc_r+0x1b4>
   14c40:	2804      	cmp	r0, #4
   14c42:	d900      	bls.n	14c46 <_malloc_r+0x42>
   14c44:	e162      	b.n	14f0c <_malloc_r+0x308>
   14c46:	2338      	movs	r3, #56	; 0x38
   14c48:	4698      	mov	r8, r3
   14c4a:	09a8      	lsrs	r0, r5, #6
   14c4c:	4480      	add	r8, r0
   14c4e:	3039      	adds	r0, #57	; 0x39
   14c50:	00c1      	lsls	r1, r0, #3
   14c52:	4ed2      	ldr	r6, [pc, #840]	; (14f9c <_malloc_r+0x398>)
   14c54:	1871      	adds	r1, r6, r1
   14c56:	3908      	subs	r1, #8
   14c58:	68cc      	ldr	r4, [r1, #12]
   14c5a:	42a1      	cmp	r1, r4
   14c5c:	d019      	beq.n	14c92 <_malloc_r+0x8e>
   14c5e:	2303      	movs	r3, #3
   14c60:	6862      	ldr	r2, [r4, #4]
   14c62:	439a      	bics	r2, r3
   14c64:	0013      	movs	r3, r2
   14c66:	1b52      	subs	r2, r2, r5
   14c68:	2a0f      	cmp	r2, #15
   14c6a:	dd00      	ble.n	14c6e <_malloc_r+0x6a>
   14c6c:	e0aa      	b.n	14dc4 <_malloc_r+0x1c0>
   14c6e:	2a00      	cmp	r2, #0
   14c70:	db00      	blt.n	14c74 <_malloc_r+0x70>
   14c72:	e088      	b.n	14d86 <_malloc_r+0x182>
   14c74:	2303      	movs	r3, #3
   14c76:	469c      	mov	ip, r3
   14c78:	e008      	b.n	14c8c <_malloc_r+0x88>
   14c7a:	4662      	mov	r2, ip
   14c7c:	6863      	ldr	r3, [r4, #4]
   14c7e:	4393      	bics	r3, r2
   14c80:	1b5a      	subs	r2, r3, r5
   14c82:	2a0f      	cmp	r2, #15
   14c84:	dd00      	ble.n	14c88 <_malloc_r+0x84>
   14c86:	e09d      	b.n	14dc4 <_malloc_r+0x1c0>
   14c88:	2a00      	cmp	r2, #0
   14c8a:	da7c      	bge.n	14d86 <_malloc_r+0x182>
   14c8c:	68e4      	ldr	r4, [r4, #12]
   14c8e:	42a1      	cmp	r1, r4
   14c90:	d1f3      	bne.n	14c7a <_malloc_r+0x76>
   14c92:	0032      	movs	r2, r6
   14c94:	6934      	ldr	r4, [r6, #16]
   14c96:	3208      	adds	r2, #8
   14c98:	4294      	cmp	r4, r2
   14c9a:	d100      	bne.n	14c9e <_malloc_r+0x9a>
   14c9c:	e190      	b.n	14fc0 <_malloc_r+0x3bc>
   14c9e:	2303      	movs	r3, #3
   14ca0:	6861      	ldr	r1, [r4, #4]
   14ca2:	4399      	bics	r1, r3
   14ca4:	4689      	mov	r9, r1
   14ca6:	1b49      	subs	r1, r1, r5
   14ca8:	290f      	cmp	r1, #15
   14caa:	dd00      	ble.n	14cae <_malloc_r+0xaa>
   14cac:	e162      	b.n	14f74 <_malloc_r+0x370>
   14cae:	6172      	str	r2, [r6, #20]
   14cb0:	6132      	str	r2, [r6, #16]
   14cb2:	2900      	cmp	r1, #0
   14cb4:	db00      	blt.n	14cb8 <_malloc_r+0xb4>
   14cb6:	e087      	b.n	14dc8 <_malloc_r+0x1c4>
   14cb8:	4ab9      	ldr	r2, [pc, #740]	; (14fa0 <_malloc_r+0x39c>)
   14cba:	464b      	mov	r3, r9
   14cbc:	4591      	cmp	r9, r2
   14cbe:	d900      	bls.n	14cc2 <_malloc_r+0xbe>
   14cc0:	e130      	b.n	14f24 <_malloc_r+0x320>
   14cc2:	08db      	lsrs	r3, r3, #3
   14cc4:	3aff      	subs	r2, #255	; 0xff
   14cc6:	1099      	asrs	r1, r3, #2
   14cc8:	3aff      	subs	r2, #255	; 0xff
   14cca:	408a      	lsls	r2, r1
   14ccc:	00db      	lsls	r3, r3, #3
   14cce:	6871      	ldr	r1, [r6, #4]
   14cd0:	199b      	adds	r3, r3, r6
   14cd2:	430a      	orrs	r2, r1
   14cd4:	6899      	ldr	r1, [r3, #8]
   14cd6:	6072      	str	r2, [r6, #4]
   14cd8:	60e3      	str	r3, [r4, #12]
   14cda:	60a1      	str	r1, [r4, #8]
   14cdc:	609c      	str	r4, [r3, #8]
   14cde:	0013      	movs	r3, r2
   14ce0:	60cc      	str	r4, [r1, #12]
   14ce2:	2101      	movs	r1, #1
   14ce4:	1082      	asrs	r2, r0, #2
   14ce6:	4091      	lsls	r1, r2
   14ce8:	4299      	cmp	r1, r3
   14cea:	d86f      	bhi.n	14dcc <_malloc_r+0x1c8>
   14cec:	420b      	tst	r3, r1
   14cee:	d105      	bne.n	14cfc <_malloc_r+0xf8>
   14cf0:	2203      	movs	r2, #3
   14cf2:	4390      	bics	r0, r2
   14cf4:	0049      	lsls	r1, r1, #1
   14cf6:	3004      	adds	r0, #4
   14cf8:	420b      	tst	r3, r1
   14cfa:	d0fb      	beq.n	14cf4 <_malloc_r+0xf0>
   14cfc:	2303      	movs	r3, #3
   14cfe:	4698      	mov	r8, r3
   14d00:	00c3      	lsls	r3, r0, #3
   14d02:	4699      	mov	r9, r3
   14d04:	44b1      	add	r9, r6
   14d06:	46cc      	mov	ip, r9
   14d08:	4682      	mov	sl, r0
   14d0a:	4663      	mov	r3, ip
   14d0c:	68dc      	ldr	r4, [r3, #12]
   14d0e:	45a4      	cmp	ip, r4
   14d10:	d107      	bne.n	14d22 <_malloc_r+0x11e>
   14d12:	e157      	b.n	14fc4 <_malloc_r+0x3c0>
   14d14:	2a00      	cmp	r2, #0
   14d16:	db00      	blt.n	14d1a <_malloc_r+0x116>
   14d18:	e166      	b.n	14fe8 <_malloc_r+0x3e4>
   14d1a:	68e4      	ldr	r4, [r4, #12]
   14d1c:	45a4      	cmp	ip, r4
   14d1e:	d100      	bne.n	14d22 <_malloc_r+0x11e>
   14d20:	e150      	b.n	14fc4 <_malloc_r+0x3c0>
   14d22:	4642      	mov	r2, r8
   14d24:	6863      	ldr	r3, [r4, #4]
   14d26:	4393      	bics	r3, r2
   14d28:	1b5a      	subs	r2, r3, r5
   14d2a:	2a0f      	cmp	r2, #15
   14d2c:	ddf2      	ble.n	14d14 <_malloc_r+0x110>
   14d2e:	2001      	movs	r0, #1
   14d30:	4680      	mov	r8, r0
   14d32:	1961      	adds	r1, r4, r5
   14d34:	4305      	orrs	r5, r0
   14d36:	6065      	str	r5, [r4, #4]
   14d38:	68a0      	ldr	r0, [r4, #8]
   14d3a:	68e5      	ldr	r5, [r4, #12]
   14d3c:	3608      	adds	r6, #8
   14d3e:	60c5      	str	r5, [r0, #12]
   14d40:	60a8      	str	r0, [r5, #8]
   14d42:	4640      	mov	r0, r8
   14d44:	60f1      	str	r1, [r6, #12]
   14d46:	60b1      	str	r1, [r6, #8]
   14d48:	4310      	orrs	r0, r2
   14d4a:	6048      	str	r0, [r1, #4]
   14d4c:	60ce      	str	r6, [r1, #12]
   14d4e:	608e      	str	r6, [r1, #8]
   14d50:	0038      	movs	r0, r7
   14d52:	50e2      	str	r2, [r4, r3]
   14d54:	f000 fa9e 	bl	15294 <__malloc_unlock>
   14d58:	0020      	movs	r0, r4
   14d5a:	3008      	adds	r0, #8
   14d5c:	e021      	b.n	14da2 <_malloc_r+0x19e>
   14d5e:	2910      	cmp	r1, #16
   14d60:	d826      	bhi.n	14db0 <_malloc_r+0x1ac>
   14d62:	0038      	movs	r0, r7
   14d64:	f000 fa8e 	bl	15284 <__malloc_lock>
   14d68:	2510      	movs	r5, #16
   14d6a:	2318      	movs	r3, #24
   14d6c:	2002      	movs	r0, #2
   14d6e:	4e8b      	ldr	r6, [pc, #556]	; (14f9c <_malloc_r+0x398>)
   14d70:	18f3      	adds	r3, r6, r3
   14d72:	001a      	movs	r2, r3
   14d74:	685c      	ldr	r4, [r3, #4]
   14d76:	3a08      	subs	r2, #8
   14d78:	4294      	cmp	r4, r2
   14d7a:	d100      	bne.n	14d7e <_malloc_r+0x17a>
   14d7c:	e12e      	b.n	14fdc <_malloc_r+0x3d8>
   14d7e:	2303      	movs	r3, #3
   14d80:	6862      	ldr	r2, [r4, #4]
   14d82:	439a      	bics	r2, r3
   14d84:	0013      	movs	r3, r2
   14d86:	68e2      	ldr	r2, [r4, #12]
   14d88:	68a1      	ldr	r1, [r4, #8]
   14d8a:	60ca      	str	r2, [r1, #12]
   14d8c:	6091      	str	r1, [r2, #8]
   14d8e:	2201      	movs	r2, #1
   14d90:	18e3      	adds	r3, r4, r3
   14d92:	6859      	ldr	r1, [r3, #4]
   14d94:	0038      	movs	r0, r7
   14d96:	430a      	orrs	r2, r1
   14d98:	605a      	str	r2, [r3, #4]
   14d9a:	f000 fa7b 	bl	15294 <__malloc_unlock>
   14d9e:	0020      	movs	r0, r4
   14da0:	3008      	adds	r0, #8
   14da2:	b003      	add	sp, #12
   14da4:	bc3c      	pop	{r2, r3, r4, r5}
   14da6:	4690      	mov	r8, r2
   14da8:	4699      	mov	r9, r3
   14daa:	46a2      	mov	sl, r4
   14dac:	46ab      	mov	fp, r5
   14dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14db0:	230c      	movs	r3, #12
   14db2:	2000      	movs	r0, #0
   14db4:	603b      	str	r3, [r7, #0]
   14db6:	e7f4      	b.n	14da2 <_malloc_r+0x19e>
   14db8:	2180      	movs	r1, #128	; 0x80
   14dba:	233f      	movs	r3, #63	; 0x3f
   14dbc:	2040      	movs	r0, #64	; 0x40
   14dbe:	0089      	lsls	r1, r1, #2
   14dc0:	4698      	mov	r8, r3
   14dc2:	e746      	b.n	14c52 <_malloc_r+0x4e>
   14dc4:	4640      	mov	r0, r8
   14dc6:	e764      	b.n	14c92 <_malloc_r+0x8e>
   14dc8:	464b      	mov	r3, r9
   14dca:	e7e0      	b.n	14d8e <_malloc_r+0x18a>
   14dcc:	2303      	movs	r3, #3
   14dce:	68b4      	ldr	r4, [r6, #8]
   14dd0:	6862      	ldr	r2, [r4, #4]
   14dd2:	439a      	bics	r2, r3
   14dd4:	4690      	mov	r8, r2
   14dd6:	42aa      	cmp	r2, r5
   14dd8:	d303      	bcc.n	14de2 <_malloc_r+0x1de>
   14dda:	1b53      	subs	r3, r2, r5
   14ddc:	2b0f      	cmp	r3, #15
   14dde:	dd00      	ble.n	14de2 <_malloc_r+0x1de>
   14de0:	e086      	b.n	14ef0 <_malloc_r+0x2ec>
   14de2:	0023      	movs	r3, r4
   14de4:	4443      	add	r3, r8
   14de6:	4a6f      	ldr	r2, [pc, #444]	; (14fa4 <_malloc_r+0x3a0>)
   14de8:	9301      	str	r3, [sp, #4]
   14dea:	4b6f      	ldr	r3, [pc, #444]	; (14fa8 <_malloc_r+0x3a4>)
   14dec:	4693      	mov	fp, r2
   14dee:	681b      	ldr	r3, [r3, #0]
   14df0:	6812      	ldr	r2, [r2, #0]
   14df2:	18eb      	adds	r3, r5, r3
   14df4:	3201      	adds	r2, #1
   14df6:	d100      	bne.n	14dfa <_malloc_r+0x1f6>
   14df8:	e168      	b.n	150cc <_malloc_r+0x4c8>
   14dfa:	4a6c      	ldr	r2, [pc, #432]	; (14fac <_malloc_r+0x3a8>)
   14dfc:	4694      	mov	ip, r2
   14dfe:	4463      	add	r3, ip
   14e00:	0b1b      	lsrs	r3, r3, #12
   14e02:	031b      	lsls	r3, r3, #12
   14e04:	9300      	str	r3, [sp, #0]
   14e06:	9900      	ldr	r1, [sp, #0]
   14e08:	0038      	movs	r0, r7
   14e0a:	f000 fadb 	bl	153c4 <_sbrk_r>
   14e0e:	0003      	movs	r3, r0
   14e10:	4681      	mov	r9, r0
   14e12:	3301      	adds	r3, #1
   14e14:	d061      	beq.n	14eda <_malloc_r+0x2d6>
   14e16:	9b01      	ldr	r3, [sp, #4]
   14e18:	4283      	cmp	r3, r0
   14e1a:	d900      	bls.n	14e1e <_malloc_r+0x21a>
   14e1c:	e0ff      	b.n	1501e <_malloc_r+0x41a>
   14e1e:	4b64      	ldr	r3, [pc, #400]	; (14fb0 <_malloc_r+0x3ac>)
   14e20:	9a00      	ldr	r2, [sp, #0]
   14e22:	469a      	mov	sl, r3
   14e24:	681b      	ldr	r3, [r3, #0]
   14e26:	469c      	mov	ip, r3
   14e28:	4653      	mov	r3, sl
   14e2a:	4462      	add	r2, ip
   14e2c:	601a      	str	r2, [r3, #0]
   14e2e:	9b01      	ldr	r3, [sp, #4]
   14e30:	0011      	movs	r1, r2
   14e32:	4283      	cmp	r3, r0
   14e34:	d100      	bne.n	14e38 <_malloc_r+0x234>
   14e36:	e155      	b.n	150e4 <_malloc_r+0x4e0>
   14e38:	465b      	mov	r3, fp
   14e3a:	681b      	ldr	r3, [r3, #0]
   14e3c:	3301      	adds	r3, #1
   14e3e:	d100      	bne.n	14e42 <_malloc_r+0x23e>
   14e40:	e16c      	b.n	1511c <_malloc_r+0x518>
   14e42:	464b      	mov	r3, r9
   14e44:	9a01      	ldr	r2, [sp, #4]
   14e46:	1a9b      	subs	r3, r3, r2
   14e48:	1859      	adds	r1, r3, r1
   14e4a:	4653      	mov	r3, sl
   14e4c:	6019      	str	r1, [r3, #0]
   14e4e:	2307      	movs	r3, #7
   14e50:	464a      	mov	r2, r9
   14e52:	4013      	ands	r3, r2
   14e54:	d100      	bne.n	14e58 <_malloc_r+0x254>
   14e56:	e124      	b.n	150a2 <_malloc_r+0x49e>
   14e58:	2108      	movs	r1, #8
   14e5a:	4689      	mov	r9, r1
   14e5c:	4955      	ldr	r1, [pc, #340]	; (14fb4 <_malloc_r+0x3b0>)
   14e5e:	1ad2      	subs	r2, r2, r3
   14e60:	4491      	add	r9, r2
   14e62:	1acb      	subs	r3, r1, r3
   14e64:	9a00      	ldr	r2, [sp, #0]
   14e66:	0038      	movs	r0, r7
   14e68:	444a      	add	r2, r9
   14e6a:	0511      	lsls	r1, r2, #20
   14e6c:	0d09      	lsrs	r1, r1, #20
   14e6e:	1a5b      	subs	r3, r3, r1
   14e70:	0019      	movs	r1, r3
   14e72:	469b      	mov	fp, r3
   14e74:	f000 faa6 	bl	153c4 <_sbrk_r>
   14e78:	1c43      	adds	r3, r0, #1
   14e7a:	d100      	bne.n	14e7e <_malloc_r+0x27a>
   14e7c:	e142      	b.n	15104 <_malloc_r+0x500>
   14e7e:	464b      	mov	r3, r9
   14e80:	1ac0      	subs	r0, r0, r3
   14e82:	2301      	movs	r3, #1
   14e84:	4458      	add	r0, fp
   14e86:	4318      	orrs	r0, r3
   14e88:	4653      	mov	r3, sl
   14e8a:	681b      	ldr	r3, [r3, #0]
   14e8c:	445b      	add	r3, fp
   14e8e:	0019      	movs	r1, r3
   14e90:	4653      	mov	r3, sl
   14e92:	6019      	str	r1, [r3, #0]
   14e94:	464b      	mov	r3, r9
   14e96:	60b3      	str	r3, [r6, #8]
   14e98:	6058      	str	r0, [r3, #4]
   14e9a:	42b4      	cmp	r4, r6
   14e9c:	d013      	beq.n	14ec6 <_malloc_r+0x2c2>
   14e9e:	4643      	mov	r3, r8
   14ea0:	2b0f      	cmp	r3, #15
   14ea2:	d800      	bhi.n	14ea6 <_malloc_r+0x2a2>
   14ea4:	e0e8      	b.n	15078 <_malloc_r+0x474>
   14ea6:	4643      	mov	r3, r8
   14ea8:	2207      	movs	r2, #7
   14eaa:	6860      	ldr	r0, [r4, #4]
   14eac:	3b0c      	subs	r3, #12
   14eae:	4393      	bics	r3, r2
   14eb0:	3a06      	subs	r2, #6
   14eb2:	4002      	ands	r2, r0
   14eb4:	2005      	movs	r0, #5
   14eb6:	431a      	orrs	r2, r3
   14eb8:	6062      	str	r2, [r4, #4]
   14eba:	18e2      	adds	r2, r4, r3
   14ebc:	6050      	str	r0, [r2, #4]
   14ebe:	6090      	str	r0, [r2, #8]
   14ec0:	2b0f      	cmp	r3, #15
   14ec2:	d900      	bls.n	14ec6 <_malloc_r+0x2c2>
   14ec4:	e122      	b.n	1510c <_malloc_r+0x508>
   14ec6:	4b3c      	ldr	r3, [pc, #240]	; (14fb8 <_malloc_r+0x3b4>)
   14ec8:	681a      	ldr	r2, [r3, #0]
   14eca:	4291      	cmp	r1, r2
   14ecc:	d900      	bls.n	14ed0 <_malloc_r+0x2cc>
   14ece:	6019      	str	r1, [r3, #0]
   14ed0:	4b3a      	ldr	r3, [pc, #232]	; (14fbc <_malloc_r+0x3b8>)
   14ed2:	681a      	ldr	r2, [r3, #0]
   14ed4:	4291      	cmp	r1, r2
   14ed6:	d900      	bls.n	14eda <_malloc_r+0x2d6>
   14ed8:	6019      	str	r1, [r3, #0]
   14eda:	2303      	movs	r3, #3
   14edc:	68b4      	ldr	r4, [r6, #8]
   14ede:	6862      	ldr	r2, [r4, #4]
   14ee0:	439a      	bics	r2, r3
   14ee2:	1b53      	subs	r3, r2, r5
   14ee4:	4295      	cmp	r5, r2
   14ee6:	d900      	bls.n	14eea <_malloc_r+0x2e6>
   14ee8:	e0c9      	b.n	1507e <_malloc_r+0x47a>
   14eea:	2b0f      	cmp	r3, #15
   14eec:	dc00      	bgt.n	14ef0 <_malloc_r+0x2ec>
   14eee:	e0c6      	b.n	1507e <_malloc_r+0x47a>
   14ef0:	2201      	movs	r2, #1
   14ef2:	0029      	movs	r1, r5
   14ef4:	4313      	orrs	r3, r2
   14ef6:	4311      	orrs	r1, r2
   14ef8:	1965      	adds	r5, r4, r5
   14efa:	6061      	str	r1, [r4, #4]
   14efc:	0038      	movs	r0, r7
   14efe:	60b5      	str	r5, [r6, #8]
   14f00:	606b      	str	r3, [r5, #4]
   14f02:	f000 f9c7 	bl	15294 <__malloc_unlock>
   14f06:	0020      	movs	r0, r4
   14f08:	3008      	adds	r0, #8
   14f0a:	e74a      	b.n	14da2 <_malloc_r+0x19e>
   14f0c:	2814      	cmp	r0, #20
   14f0e:	d97a      	bls.n	15006 <_malloc_r+0x402>
   14f10:	2854      	cmp	r0, #84	; 0x54
   14f12:	d900      	bls.n	14f16 <_malloc_r+0x312>
   14f14:	e0ba      	b.n	1508c <_malloc_r+0x488>
   14f16:	236e      	movs	r3, #110	; 0x6e
   14f18:	4698      	mov	r8, r3
   14f1a:	0b28      	lsrs	r0, r5, #12
   14f1c:	4480      	add	r8, r0
   14f1e:	306f      	adds	r0, #111	; 0x6f
   14f20:	00c1      	lsls	r1, r0, #3
   14f22:	e696      	b.n	14c52 <_malloc_r+0x4e>
   14f24:	0a5a      	lsrs	r2, r3, #9
   14f26:	2a04      	cmp	r2, #4
   14f28:	d973      	bls.n	15012 <_malloc_r+0x40e>
   14f2a:	2a14      	cmp	r2, #20
   14f2c:	d900      	bls.n	14f30 <_malloc_r+0x32c>
   14f2e:	e0d0      	b.n	150d2 <_malloc_r+0x4ce>
   14f30:	0011      	movs	r1, r2
   14f32:	325c      	adds	r2, #92	; 0x5c
   14f34:	315b      	adds	r1, #91	; 0x5b
   14f36:	00d2      	lsls	r2, r2, #3
   14f38:	2308      	movs	r3, #8
   14f3a:	425b      	negs	r3, r3
   14f3c:	469c      	mov	ip, r3
   14f3e:	18b2      	adds	r2, r6, r2
   14f40:	4494      	add	ip, r2
   14f42:	4663      	mov	r3, ip
   14f44:	689a      	ldr	r2, [r3, #8]
   14f46:	2303      	movs	r3, #3
   14f48:	4698      	mov	r8, r3
   14f4a:	4594      	cmp	ip, r2
   14f4c:	d100      	bne.n	14f50 <_malloc_r+0x34c>
   14f4e:	e0ab      	b.n	150a8 <_malloc_r+0x4a4>
   14f50:	4643      	mov	r3, r8
   14f52:	6851      	ldr	r1, [r2, #4]
   14f54:	4399      	bics	r1, r3
   14f56:	4589      	cmp	r9, r1
   14f58:	d300      	bcc.n	14f5c <_malloc_r+0x358>
   14f5a:	e095      	b.n	15088 <_malloc_r+0x484>
   14f5c:	6892      	ldr	r2, [r2, #8]
   14f5e:	4594      	cmp	ip, r2
   14f60:	d1f6      	bne.n	14f50 <_malloc_r+0x34c>
   14f62:	4663      	mov	r3, ip
   14f64:	68da      	ldr	r2, [r3, #12]
   14f66:	6873      	ldr	r3, [r6, #4]
   14f68:	4661      	mov	r1, ip
   14f6a:	60e2      	str	r2, [r4, #12]
   14f6c:	60a1      	str	r1, [r4, #8]
   14f6e:	6094      	str	r4, [r2, #8]
   14f70:	60cc      	str	r4, [r1, #12]
   14f72:	e6b6      	b.n	14ce2 <_malloc_r+0xde>
   14f74:	2301      	movs	r3, #1
   14f76:	1960      	adds	r0, r4, r5
   14f78:	431d      	orrs	r5, r3
   14f7a:	6065      	str	r5, [r4, #4]
   14f7c:	6170      	str	r0, [r6, #20]
   14f7e:	6130      	str	r0, [r6, #16]
   14f80:	60c2      	str	r2, [r0, #12]
   14f82:	6082      	str	r2, [r0, #8]
   14f84:	001a      	movs	r2, r3
   14f86:	464b      	mov	r3, r9
   14f88:	430a      	orrs	r2, r1
   14f8a:	6042      	str	r2, [r0, #4]
   14f8c:	0038      	movs	r0, r7
   14f8e:	50e1      	str	r1, [r4, r3]
   14f90:	f000 f980 	bl	15294 <__malloc_unlock>
   14f94:	0020      	movs	r0, r4
   14f96:	3008      	adds	r0, #8
   14f98:	e703      	b.n	14da2 <_malloc_r+0x19e>
   14f9a:	46c0      	nop			; (mov r8, r8)
   14f9c:	20000498 	.word	0x20000498
   14fa0:	000001ff 	.word	0x000001ff
   14fa4:	200008a0 	.word	0x200008a0
   14fa8:	20000f10 	.word	0x20000f10
   14fac:	0000100f 	.word	0x0000100f
   14fb0:	20000ee0 	.word	0x20000ee0
   14fb4:	00001008 	.word	0x00001008
   14fb8:	20000f08 	.word	0x20000f08
   14fbc:	20000f0c 	.word	0x20000f0c
   14fc0:	6873      	ldr	r3, [r6, #4]
   14fc2:	e68e      	b.n	14ce2 <_malloc_r+0xde>
   14fc4:	2308      	movs	r3, #8
   14fc6:	469b      	mov	fp, r3
   14fc8:	3b07      	subs	r3, #7
   14fca:	44dc      	add	ip, fp
   14fcc:	469b      	mov	fp, r3
   14fce:	44da      	add	sl, fp
   14fd0:	4643      	mov	r3, r8
   14fd2:	4652      	mov	r2, sl
   14fd4:	4213      	tst	r3, r2
   14fd6:	d000      	beq.n	14fda <_malloc_r+0x3d6>
   14fd8:	e697      	b.n	14d0a <_malloc_r+0x106>
   14fda:	e037      	b.n	1504c <_malloc_r+0x448>
   14fdc:	68dc      	ldr	r4, [r3, #12]
   14fde:	3002      	adds	r0, #2
   14fe0:	42a3      	cmp	r3, r4
   14fe2:	d100      	bne.n	14fe6 <_malloc_r+0x3e2>
   14fe4:	e655      	b.n	14c92 <_malloc_r+0x8e>
   14fe6:	e6ca      	b.n	14d7e <_malloc_r+0x17a>
   14fe8:	2201      	movs	r2, #1
   14fea:	18e3      	adds	r3, r4, r3
   14fec:	6859      	ldr	r1, [r3, #4]
   14fee:	0038      	movs	r0, r7
   14ff0:	430a      	orrs	r2, r1
   14ff2:	605a      	str	r2, [r3, #4]
   14ff4:	68e3      	ldr	r3, [r4, #12]
   14ff6:	68a2      	ldr	r2, [r4, #8]
   14ff8:	60d3      	str	r3, [r2, #12]
   14ffa:	609a      	str	r2, [r3, #8]
   14ffc:	f000 f94a 	bl	15294 <__malloc_unlock>
   15000:	0020      	movs	r0, r4
   15002:	3008      	adds	r0, #8
   15004:	e6cd      	b.n	14da2 <_malloc_r+0x19e>
   15006:	235b      	movs	r3, #91	; 0x5b
   15008:	4698      	mov	r8, r3
   1500a:	4480      	add	r8, r0
   1500c:	305c      	adds	r0, #92	; 0x5c
   1500e:	00c1      	lsls	r1, r0, #3
   15010:	e61f      	b.n	14c52 <_malloc_r+0x4e>
   15012:	099a      	lsrs	r2, r3, #6
   15014:	0011      	movs	r1, r2
   15016:	3239      	adds	r2, #57	; 0x39
   15018:	3138      	adds	r1, #56	; 0x38
   1501a:	00d2      	lsls	r2, r2, #3
   1501c:	e78c      	b.n	14f38 <_malloc_r+0x334>
   1501e:	42b4      	cmp	r4, r6
   15020:	d000      	beq.n	15024 <_malloc_r+0x420>
   15022:	e75a      	b.n	14eda <_malloc_r+0x2d6>
   15024:	4b4f      	ldr	r3, [pc, #316]	; (15164 <_malloc_r+0x560>)
   15026:	9a00      	ldr	r2, [sp, #0]
   15028:	469a      	mov	sl, r3
   1502a:	681b      	ldr	r3, [r3, #0]
   1502c:	469c      	mov	ip, r3
   1502e:	4653      	mov	r3, sl
   15030:	4462      	add	r2, ip
   15032:	0011      	movs	r1, r2
   15034:	601a      	str	r2, [r3, #0]
   15036:	e6ff      	b.n	14e38 <_malloc_r+0x234>
   15038:	2308      	movs	r3, #8
   1503a:	425b      	negs	r3, r3
   1503c:	469c      	mov	ip, r3
   1503e:	44e1      	add	r9, ip
   15040:	464b      	mov	r3, r9
   15042:	689b      	ldr	r3, [r3, #8]
   15044:	3801      	subs	r0, #1
   15046:	4599      	cmp	r9, r3
   15048:	d000      	beq.n	1504c <_malloc_r+0x448>
   1504a:	e084      	b.n	15156 <_malloc_r+0x552>
   1504c:	4643      	mov	r3, r8
   1504e:	4203      	tst	r3, r0
   15050:	d1f2      	bne.n	15038 <_malloc_r+0x434>
   15052:	6873      	ldr	r3, [r6, #4]
   15054:	438b      	bics	r3, r1
   15056:	6073      	str	r3, [r6, #4]
   15058:	0049      	lsls	r1, r1, #1
   1505a:	4299      	cmp	r1, r3
   1505c:	d900      	bls.n	15060 <_malloc_r+0x45c>
   1505e:	e6b5      	b.n	14dcc <_malloc_r+0x1c8>
   15060:	2900      	cmp	r1, #0
   15062:	d100      	bne.n	15066 <_malloc_r+0x462>
   15064:	e6b2      	b.n	14dcc <_malloc_r+0x1c8>
   15066:	4650      	mov	r0, sl
   15068:	420b      	tst	r3, r1
   1506a:	d000      	beq.n	1506e <_malloc_r+0x46a>
   1506c:	e648      	b.n	14d00 <_malloc_r+0xfc>
   1506e:	0049      	lsls	r1, r1, #1
   15070:	3004      	adds	r0, #4
   15072:	420b      	tst	r3, r1
   15074:	d0fb      	beq.n	1506e <_malloc_r+0x46a>
   15076:	e643      	b.n	14d00 <_malloc_r+0xfc>
   15078:	2301      	movs	r3, #1
   1507a:	464a      	mov	r2, r9
   1507c:	6053      	str	r3, [r2, #4]
   1507e:	0038      	movs	r0, r7
   15080:	f000 f908 	bl	15294 <__malloc_unlock>
   15084:	2000      	movs	r0, #0
   15086:	e68c      	b.n	14da2 <_malloc_r+0x19e>
   15088:	4694      	mov	ip, r2
   1508a:	e76a      	b.n	14f62 <_malloc_r+0x35e>
   1508c:	23aa      	movs	r3, #170	; 0xaa
   1508e:	005b      	lsls	r3, r3, #1
   15090:	4298      	cmp	r0, r3
   15092:	d811      	bhi.n	150b8 <_malloc_r+0x4b4>
   15094:	3bdd      	subs	r3, #221	; 0xdd
   15096:	4698      	mov	r8, r3
   15098:	0be8      	lsrs	r0, r5, #15
   1509a:	4480      	add	r8, r0
   1509c:	3078      	adds	r0, #120	; 0x78
   1509e:	00c1      	lsls	r1, r0, #3
   150a0:	e5d7      	b.n	14c52 <_malloc_r+0x4e>
   150a2:	2380      	movs	r3, #128	; 0x80
   150a4:	015b      	lsls	r3, r3, #5
   150a6:	e6dd      	b.n	14e64 <_malloc_r+0x260>
   150a8:	1089      	asrs	r1, r1, #2
   150aa:	3b02      	subs	r3, #2
   150ac:	408b      	lsls	r3, r1
   150ae:	6872      	ldr	r2, [r6, #4]
   150b0:	4313      	orrs	r3, r2
   150b2:	6073      	str	r3, [r6, #4]
   150b4:	4662      	mov	r2, ip
   150b6:	e757      	b.n	14f68 <_malloc_r+0x364>
   150b8:	4b2b      	ldr	r3, [pc, #172]	; (15168 <_malloc_r+0x564>)
   150ba:	4298      	cmp	r0, r3
   150bc:	d81c      	bhi.n	150f8 <_malloc_r+0x4f4>
   150be:	237c      	movs	r3, #124	; 0x7c
   150c0:	4698      	mov	r8, r3
   150c2:	0ca8      	lsrs	r0, r5, #18
   150c4:	4480      	add	r8, r0
   150c6:	307d      	adds	r0, #125	; 0x7d
   150c8:	00c1      	lsls	r1, r0, #3
   150ca:	e5c2      	b.n	14c52 <_malloc_r+0x4e>
   150cc:	3310      	adds	r3, #16
   150ce:	9300      	str	r3, [sp, #0]
   150d0:	e699      	b.n	14e06 <_malloc_r+0x202>
   150d2:	2a54      	cmp	r2, #84	; 0x54
   150d4:	d826      	bhi.n	15124 <_malloc_r+0x520>
   150d6:	464b      	mov	r3, r9
   150d8:	0b1a      	lsrs	r2, r3, #12
   150da:	0011      	movs	r1, r2
   150dc:	326f      	adds	r2, #111	; 0x6f
   150de:	316e      	adds	r1, #110	; 0x6e
   150e0:	00d2      	lsls	r2, r2, #3
   150e2:	e729      	b.n	14f38 <_malloc_r+0x334>
   150e4:	051b      	lsls	r3, r3, #20
   150e6:	d000      	beq.n	150ea <_malloc_r+0x4e6>
   150e8:	e6a6      	b.n	14e38 <_malloc_r+0x234>
   150ea:	2001      	movs	r0, #1
   150ec:	9b00      	ldr	r3, [sp, #0]
   150ee:	68b2      	ldr	r2, [r6, #8]
   150f0:	4443      	add	r3, r8
   150f2:	4303      	orrs	r3, r0
   150f4:	6053      	str	r3, [r2, #4]
   150f6:	e6e6      	b.n	14ec6 <_malloc_r+0x2c2>
   150f8:	21fe      	movs	r1, #254	; 0xfe
   150fa:	237e      	movs	r3, #126	; 0x7e
   150fc:	207f      	movs	r0, #127	; 0x7f
   150fe:	0089      	lsls	r1, r1, #2
   15100:	4698      	mov	r8, r3
   15102:	e5a6      	b.n	14c52 <_malloc_r+0x4e>
   15104:	2300      	movs	r3, #0
   15106:	2001      	movs	r0, #1
   15108:	469b      	mov	fp, r3
   1510a:	e6bd      	b.n	14e88 <_malloc_r+0x284>
   1510c:	0021      	movs	r1, r4
   1510e:	0038      	movs	r0, r7
   15110:	3108      	adds	r1, #8
   15112:	f003 f8bd 	bl	18290 <_free_r>
   15116:	4653      	mov	r3, sl
   15118:	6819      	ldr	r1, [r3, #0]
   1511a:	e6d4      	b.n	14ec6 <_malloc_r+0x2c2>
   1511c:	465b      	mov	r3, fp
   1511e:	464a      	mov	r2, r9
   15120:	601a      	str	r2, [r3, #0]
   15122:	e694      	b.n	14e4e <_malloc_r+0x24a>
   15124:	21aa      	movs	r1, #170	; 0xaa
   15126:	0049      	lsls	r1, r1, #1
   15128:	428a      	cmp	r2, r1
   1512a:	d806      	bhi.n	1513a <_malloc_r+0x536>
   1512c:	464b      	mov	r3, r9
   1512e:	0bda      	lsrs	r2, r3, #15
   15130:	0011      	movs	r1, r2
   15132:	3278      	adds	r2, #120	; 0x78
   15134:	3177      	adds	r1, #119	; 0x77
   15136:	00d2      	lsls	r2, r2, #3
   15138:	e6fe      	b.n	14f38 <_malloc_r+0x334>
   1513a:	490b      	ldr	r1, [pc, #44]	; (15168 <_malloc_r+0x564>)
   1513c:	428a      	cmp	r2, r1
   1513e:	d806      	bhi.n	1514e <_malloc_r+0x54a>
   15140:	464b      	mov	r3, r9
   15142:	0c9a      	lsrs	r2, r3, #18
   15144:	0011      	movs	r1, r2
   15146:	327d      	adds	r2, #125	; 0x7d
   15148:	317c      	adds	r1, #124	; 0x7c
   1514a:	00d2      	lsls	r2, r2, #3
   1514c:	e6f4      	b.n	14f38 <_malloc_r+0x334>
   1514e:	22fe      	movs	r2, #254	; 0xfe
   15150:	217e      	movs	r1, #126	; 0x7e
   15152:	0092      	lsls	r2, r2, #2
   15154:	e6f0      	b.n	14f38 <_malloc_r+0x334>
   15156:	6873      	ldr	r3, [r6, #4]
   15158:	e77e      	b.n	15058 <_malloc_r+0x454>
   1515a:	002b      	movs	r3, r5
   1515c:	08e8      	lsrs	r0, r5, #3
   1515e:	3308      	adds	r3, #8
   15160:	e605      	b.n	14d6e <_malloc_r+0x16a>
   15162:	46c0      	nop			; (mov r8, r8)
   15164:	20000ee0 	.word	0x20000ee0
   15168:	00000554 	.word	0x00000554

0001516c <memcpy>:
   1516c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1516e:	0005      	movs	r5, r0
   15170:	2a0f      	cmp	r2, #15
   15172:	d92f      	bls.n	151d4 <memcpy+0x68>
   15174:	000b      	movs	r3, r1
   15176:	4303      	orrs	r3, r0
   15178:	079b      	lsls	r3, r3, #30
   1517a:	d134      	bne.n	151e6 <memcpy+0x7a>
   1517c:	0016      	movs	r6, r2
   1517e:	000c      	movs	r4, r1
   15180:	0003      	movs	r3, r0
   15182:	3e10      	subs	r6, #16
   15184:	0935      	lsrs	r5, r6, #4
   15186:	3501      	adds	r5, #1
   15188:	012d      	lsls	r5, r5, #4
   1518a:	1945      	adds	r5, r0, r5
   1518c:	6827      	ldr	r7, [r4, #0]
   1518e:	601f      	str	r7, [r3, #0]
   15190:	6867      	ldr	r7, [r4, #4]
   15192:	605f      	str	r7, [r3, #4]
   15194:	68a7      	ldr	r7, [r4, #8]
   15196:	609f      	str	r7, [r3, #8]
   15198:	68e7      	ldr	r7, [r4, #12]
   1519a:	3410      	adds	r4, #16
   1519c:	60df      	str	r7, [r3, #12]
   1519e:	3310      	adds	r3, #16
   151a0:	429d      	cmp	r5, r3
   151a2:	d1f3      	bne.n	1518c <memcpy+0x20>
   151a4:	230f      	movs	r3, #15
   151a6:	439e      	bics	r6, r3
   151a8:	3610      	adds	r6, #16
   151aa:	1985      	adds	r5, r0, r6
   151ac:	1989      	adds	r1, r1, r6
   151ae:	4013      	ands	r3, r2
   151b0:	2b03      	cmp	r3, #3
   151b2:	d91a      	bls.n	151ea <memcpy+0x7e>
   151b4:	1f1e      	subs	r6, r3, #4
   151b6:	2300      	movs	r3, #0
   151b8:	08b4      	lsrs	r4, r6, #2
   151ba:	3401      	adds	r4, #1
   151bc:	00a4      	lsls	r4, r4, #2
   151be:	58cf      	ldr	r7, [r1, r3]
   151c0:	50ef      	str	r7, [r5, r3]
   151c2:	3304      	adds	r3, #4
   151c4:	42a3      	cmp	r3, r4
   151c6:	d1fa      	bne.n	151be <memcpy+0x52>
   151c8:	2403      	movs	r4, #3
   151ca:	43a6      	bics	r6, r4
   151cc:	1d33      	adds	r3, r6, #4
   151ce:	4022      	ands	r2, r4
   151d0:	18c9      	adds	r1, r1, r3
   151d2:	18ed      	adds	r5, r5, r3
   151d4:	2a00      	cmp	r2, #0
   151d6:	d005      	beq.n	151e4 <memcpy+0x78>
   151d8:	2300      	movs	r3, #0
   151da:	5ccc      	ldrb	r4, [r1, r3]
   151dc:	54ec      	strb	r4, [r5, r3]
   151de:	3301      	adds	r3, #1
   151e0:	4293      	cmp	r3, r2
   151e2:	d1fa      	bne.n	151da <memcpy+0x6e>
   151e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   151e6:	0005      	movs	r5, r0
   151e8:	e7f6      	b.n	151d8 <memcpy+0x6c>
   151ea:	001a      	movs	r2, r3
   151ec:	e7f2      	b.n	151d4 <memcpy+0x68>
   151ee:	46c0      	nop			; (mov r8, r8)

000151f0 <memset>:
   151f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   151f2:	0783      	lsls	r3, r0, #30
   151f4:	d043      	beq.n	1527e <memset+0x8e>
   151f6:	1e54      	subs	r4, r2, #1
   151f8:	2a00      	cmp	r2, #0
   151fa:	d03f      	beq.n	1527c <memset+0x8c>
   151fc:	b2ce      	uxtb	r6, r1
   151fe:	0002      	movs	r2, r0
   15200:	2503      	movs	r5, #3
   15202:	e002      	b.n	1520a <memset+0x1a>
   15204:	001a      	movs	r2, r3
   15206:	3c01      	subs	r4, #1
   15208:	d338      	bcc.n	1527c <memset+0x8c>
   1520a:	1c53      	adds	r3, r2, #1
   1520c:	7016      	strb	r6, [r2, #0]
   1520e:	422b      	tst	r3, r5
   15210:	d1f8      	bne.n	15204 <memset+0x14>
   15212:	2c03      	cmp	r4, #3
   15214:	d92a      	bls.n	1526c <memset+0x7c>
   15216:	22ff      	movs	r2, #255	; 0xff
   15218:	400a      	ands	r2, r1
   1521a:	0215      	lsls	r5, r2, #8
   1521c:	4315      	orrs	r5, r2
   1521e:	042a      	lsls	r2, r5, #16
   15220:	4315      	orrs	r5, r2
   15222:	2c0f      	cmp	r4, #15
   15224:	d914      	bls.n	15250 <memset+0x60>
   15226:	0027      	movs	r7, r4
   15228:	001a      	movs	r2, r3
   1522a:	3f10      	subs	r7, #16
   1522c:	093e      	lsrs	r6, r7, #4
   1522e:	3601      	adds	r6, #1
   15230:	0136      	lsls	r6, r6, #4
   15232:	199e      	adds	r6, r3, r6
   15234:	6015      	str	r5, [r2, #0]
   15236:	6055      	str	r5, [r2, #4]
   15238:	6095      	str	r5, [r2, #8]
   1523a:	60d5      	str	r5, [r2, #12]
   1523c:	3210      	adds	r2, #16
   1523e:	4296      	cmp	r6, r2
   15240:	d1f8      	bne.n	15234 <memset+0x44>
   15242:	220f      	movs	r2, #15
   15244:	4397      	bics	r7, r2
   15246:	3710      	adds	r7, #16
   15248:	19db      	adds	r3, r3, r7
   1524a:	4014      	ands	r4, r2
   1524c:	2c03      	cmp	r4, #3
   1524e:	d90d      	bls.n	1526c <memset+0x7c>
   15250:	001a      	movs	r2, r3
   15252:	1f27      	subs	r7, r4, #4
   15254:	08be      	lsrs	r6, r7, #2
   15256:	3601      	adds	r6, #1
   15258:	00b6      	lsls	r6, r6, #2
   1525a:	199e      	adds	r6, r3, r6
   1525c:	c220      	stmia	r2!, {r5}
   1525e:	42b2      	cmp	r2, r6
   15260:	d1fc      	bne.n	1525c <memset+0x6c>
   15262:	2203      	movs	r2, #3
   15264:	4397      	bics	r7, r2
   15266:	3704      	adds	r7, #4
   15268:	19db      	adds	r3, r3, r7
   1526a:	4014      	ands	r4, r2
   1526c:	2c00      	cmp	r4, #0
   1526e:	d005      	beq.n	1527c <memset+0x8c>
   15270:	b2c9      	uxtb	r1, r1
   15272:	191c      	adds	r4, r3, r4
   15274:	7019      	strb	r1, [r3, #0]
   15276:	3301      	adds	r3, #1
   15278:	429c      	cmp	r4, r3
   1527a:	d1fb      	bne.n	15274 <memset+0x84>
   1527c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1527e:	0014      	movs	r4, r2
   15280:	0003      	movs	r3, r0
   15282:	e7c6      	b.n	15212 <memset+0x22>

00015284 <__malloc_lock>:
   15284:	b510      	push	{r4, lr}
   15286:	4802      	ldr	r0, [pc, #8]	; (15290 <__malloc_lock+0xc>)
   15288:	f003 fa9a 	bl	187c0 <__retarget_lock_acquire_recursive>
   1528c:	bd10      	pop	{r4, pc}
   1528e:	46c0      	nop			; (mov r8, r8)
   15290:	20001bf8 	.word	0x20001bf8

00015294 <__malloc_unlock>:
   15294:	b510      	push	{r4, lr}
   15296:	4802      	ldr	r0, [pc, #8]	; (152a0 <__malloc_unlock+0xc>)
   15298:	f003 fa94 	bl	187c4 <__retarget_lock_release_recursive>
   1529c:	bd10      	pop	{r4, pc}
   1529e:	46c0      	nop			; (mov r8, r8)
   152a0:	20001bf8 	.word	0x20001bf8

000152a4 <printf>:
   152a4:	b40f      	push	{r0, r1, r2, r3}
   152a6:	b500      	push	{lr}
   152a8:	4906      	ldr	r1, [pc, #24]	; (152c4 <printf+0x20>)
   152aa:	b083      	sub	sp, #12
   152ac:	ab04      	add	r3, sp, #16
   152ae:	6808      	ldr	r0, [r1, #0]
   152b0:	cb04      	ldmia	r3!, {r2}
   152b2:	6881      	ldr	r1, [r0, #8]
   152b4:	9301      	str	r3, [sp, #4]
   152b6:	f000 f9a3 	bl	15600 <_vfprintf_r>
   152ba:	b003      	add	sp, #12
   152bc:	bc08      	pop	{r3}
   152be:	b004      	add	sp, #16
   152c0:	4718      	bx	r3
   152c2:	46c0      	nop			; (mov r8, r8)
   152c4:	20000068 	.word	0x20000068

000152c8 <_puts_r>:
   152c8:	b530      	push	{r4, r5, lr}
   152ca:	0004      	movs	r4, r0
   152cc:	b089      	sub	sp, #36	; 0x24
   152ce:	0008      	movs	r0, r1
   152d0:	000d      	movs	r5, r1
   152d2:	f000 f963 	bl	1559c <strlen>
   152d6:	ab04      	add	r3, sp, #16
   152d8:	4a21      	ldr	r2, [pc, #132]	; (15360 <_puts_r+0x98>)
   152da:	9301      	str	r3, [sp, #4]
   152dc:	2302      	movs	r3, #2
   152de:	9206      	str	r2, [sp, #24]
   152e0:	2201      	movs	r2, #1
   152e2:	9302      	str	r3, [sp, #8]
   152e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   152e6:	9005      	str	r0, [sp, #20]
   152e8:	3001      	adds	r0, #1
   152ea:	9504      	str	r5, [sp, #16]
   152ec:	9207      	str	r2, [sp, #28]
   152ee:	9003      	str	r0, [sp, #12]
   152f0:	68a5      	ldr	r5, [r4, #8]
   152f2:	2b00      	cmp	r3, #0
   152f4:	d02f      	beq.n	15356 <_puts_r+0x8e>
   152f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   152f8:	07db      	lsls	r3, r3, #31
   152fa:	d424      	bmi.n	15346 <_puts_r+0x7e>
   152fc:	230c      	movs	r3, #12
   152fe:	5eea      	ldrsh	r2, [r5, r3]
   15300:	b291      	uxth	r1, r2
   15302:	058b      	lsls	r3, r1, #22
   15304:	d51c      	bpl.n	15340 <_puts_r+0x78>
   15306:	2380      	movs	r3, #128	; 0x80
   15308:	019b      	lsls	r3, r3, #6
   1530a:	4219      	tst	r1, r3
   1530c:	d105      	bne.n	1531a <_puts_r+0x52>
   1530e:	4313      	orrs	r3, r2
   15310:	81ab      	strh	r3, [r5, #12]
   15312:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   15314:	4b13      	ldr	r3, [pc, #76]	; (15364 <_puts_r+0x9c>)
   15316:	4013      	ands	r3, r2
   15318:	666b      	str	r3, [r5, #100]	; 0x64
   1531a:	0020      	movs	r0, r4
   1531c:	aa01      	add	r2, sp, #4
   1531e:	0029      	movs	r1, r5
   15320:	f003 f894 	bl	1844c <__sfvwrite_r>
   15324:	1e44      	subs	r4, r0, #1
   15326:	41a0      	sbcs	r0, r4
   15328:	4244      	negs	r4, r0
   1532a:	200a      	movs	r0, #10
   1532c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1532e:	4304      	orrs	r4, r0
   15330:	07db      	lsls	r3, r3, #31
   15332:	d402      	bmi.n	1533a <_puts_r+0x72>
   15334:	89ab      	ldrh	r3, [r5, #12]
   15336:	059b      	lsls	r3, r3, #22
   15338:	d509      	bpl.n	1534e <_puts_r+0x86>
   1533a:	0020      	movs	r0, r4
   1533c:	b009      	add	sp, #36	; 0x24
   1533e:	bd30      	pop	{r4, r5, pc}
   15340:	6da8      	ldr	r0, [r5, #88]	; 0x58
   15342:	f003 fa3d 	bl	187c0 <__retarget_lock_acquire_recursive>
   15346:	230c      	movs	r3, #12
   15348:	5eea      	ldrsh	r2, [r5, r3]
   1534a:	b291      	uxth	r1, r2
   1534c:	e7db      	b.n	15306 <_puts_r+0x3e>
   1534e:	6da8      	ldr	r0, [r5, #88]	; 0x58
   15350:	f003 fa38 	bl	187c4 <__retarget_lock_release_recursive>
   15354:	e7f1      	b.n	1533a <_puts_r+0x72>
   15356:	0020      	movs	r0, r4
   15358:	f002 fef0 	bl	1813c <__sinit>
   1535c:	e7cb      	b.n	152f6 <_puts_r+0x2e>
   1535e:	46c0      	nop			; (mov r8, r8)
   15360:	0001b26c 	.word	0x0001b26c
   15364:	ffffdfff 	.word	0xffffdfff

00015368 <puts>:
   15368:	b510      	push	{r4, lr}
   1536a:	4b03      	ldr	r3, [pc, #12]	; (15378 <puts+0x10>)
   1536c:	0001      	movs	r1, r0
   1536e:	6818      	ldr	r0, [r3, #0]
   15370:	f7ff ffaa 	bl	152c8 <_puts_r>
   15374:	bd10      	pop	{r4, pc}
   15376:	46c0      	nop			; (mov r8, r8)
   15378:	20000068 	.word	0x20000068

0001537c <srand>:
   1537c:	2200      	movs	r2, #0
   1537e:	4b03      	ldr	r3, [pc, #12]	; (1538c <srand+0x10>)
   15380:	681b      	ldr	r3, [r3, #0]
   15382:	33a8      	adds	r3, #168	; 0xa8
   15384:	6018      	str	r0, [r3, #0]
   15386:	605a      	str	r2, [r3, #4]
   15388:	4770      	bx	lr
   1538a:	46c0      	nop			; (mov r8, r8)
   1538c:	20000068 	.word	0x20000068

00015390 <rand>:
   15390:	b510      	push	{r4, lr}
   15392:	4b09      	ldr	r3, [pc, #36]	; (153b8 <rand+0x28>)
   15394:	4a09      	ldr	r2, [pc, #36]	; (153bc <rand+0x2c>)
   15396:	681c      	ldr	r4, [r3, #0]
   15398:	4b09      	ldr	r3, [pc, #36]	; (153c0 <rand+0x30>)
   1539a:	34a8      	adds	r4, #168	; 0xa8
   1539c:	6820      	ldr	r0, [r4, #0]
   1539e:	6861      	ldr	r1, [r4, #4]
   153a0:	f7fc fd02 	bl	11da8 <__aeabi_lmul>
   153a4:	2201      	movs	r2, #1
   153a6:	2300      	movs	r3, #0
   153a8:	1880      	adds	r0, r0, r2
   153aa:	4159      	adcs	r1, r3
   153ac:	6020      	str	r0, [r4, #0]
   153ae:	6061      	str	r1, [r4, #4]
   153b0:	0048      	lsls	r0, r1, #1
   153b2:	0840      	lsrs	r0, r0, #1
   153b4:	bd10      	pop	{r4, pc}
   153b6:	46c0      	nop			; (mov r8, r8)
   153b8:	20000068 	.word	0x20000068
   153bc:	4c957f2d 	.word	0x4c957f2d
   153c0:	5851f42d 	.word	0x5851f42d

000153c4 <_sbrk_r>:
   153c4:	2300      	movs	r3, #0
   153c6:	b570      	push	{r4, r5, r6, lr}
   153c8:	4c06      	ldr	r4, [pc, #24]	; (153e4 <_sbrk_r+0x20>)
   153ca:	0005      	movs	r5, r0
   153cc:	0008      	movs	r0, r1
   153ce:	6023      	str	r3, [r4, #0]
   153d0:	f7ee fada 	bl	3988 <_sbrk>
   153d4:	1c43      	adds	r3, r0, #1
   153d6:	d000      	beq.n	153da <_sbrk_r+0x16>
   153d8:	bd70      	pop	{r4, r5, r6, pc}
   153da:	6823      	ldr	r3, [r4, #0]
   153dc:	2b00      	cmp	r3, #0
   153de:	d0fb      	beq.n	153d8 <_sbrk_r+0x14>
   153e0:	602b      	str	r3, [r5, #0]
   153e2:	e7f9      	b.n	153d8 <_sbrk_r+0x14>
   153e4:	20001c0c 	.word	0x20001c0c

000153e8 <setbuf>:
   153e8:	424a      	negs	r2, r1
   153ea:	414a      	adcs	r2, r1
   153ec:	2380      	movs	r3, #128	; 0x80
   153ee:	b510      	push	{r4, lr}
   153f0:	0052      	lsls	r2, r2, #1
   153f2:	00db      	lsls	r3, r3, #3
   153f4:	f000 f802 	bl	153fc <setvbuf>
   153f8:	bd10      	pop	{r4, pc}
   153fa:	46c0      	nop			; (mov r8, r8)

000153fc <setvbuf>:
   153fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   153fe:	4647      	mov	r7, r8
   15400:	46ce      	mov	lr, r9
   15402:	b580      	push	{r7, lr}
   15404:	001f      	movs	r7, r3
   15406:	4b63      	ldr	r3, [pc, #396]	; (15594 <setvbuf+0x198>)
   15408:	b083      	sub	sp, #12
   1540a:	681d      	ldr	r5, [r3, #0]
   1540c:	0004      	movs	r4, r0
   1540e:	4688      	mov	r8, r1
   15410:	0016      	movs	r6, r2
   15412:	2d00      	cmp	r5, #0
   15414:	d002      	beq.n	1541c <setvbuf+0x20>
   15416:	6bab      	ldr	r3, [r5, #56]	; 0x38
   15418:	2b00      	cmp	r3, #0
   1541a:	d066      	beq.n	154ea <setvbuf+0xee>
   1541c:	2e02      	cmp	r6, #2
   1541e:	d005      	beq.n	1542c <setvbuf+0x30>
   15420:	2e01      	cmp	r6, #1
   15422:	d900      	bls.n	15426 <setvbuf+0x2a>
   15424:	e0a1      	b.n	1556a <setvbuf+0x16e>
   15426:	2f00      	cmp	r7, #0
   15428:	da00      	bge.n	1542c <setvbuf+0x30>
   1542a:	e09e      	b.n	1556a <setvbuf+0x16e>
   1542c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1542e:	07db      	lsls	r3, r3, #31
   15430:	d533      	bpl.n	1549a <setvbuf+0x9e>
   15432:	0021      	movs	r1, r4
   15434:	0028      	movs	r0, r5
   15436:	f002 fe27 	bl	18088 <_fflush_r>
   1543a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1543c:	2900      	cmp	r1, #0
   1543e:	d008      	beq.n	15452 <setvbuf+0x56>
   15440:	0023      	movs	r3, r4
   15442:	3340      	adds	r3, #64	; 0x40
   15444:	4299      	cmp	r1, r3
   15446:	d002      	beq.n	1544e <setvbuf+0x52>
   15448:	0028      	movs	r0, r5
   1544a:	f002 ff21 	bl	18290 <_free_r>
   1544e:	2300      	movs	r3, #0
   15450:	6323      	str	r3, [r4, #48]	; 0x30
   15452:	2300      	movs	r3, #0
   15454:	61a3      	str	r3, [r4, #24]
   15456:	6063      	str	r3, [r4, #4]
   15458:	220c      	movs	r2, #12
   1545a:	5ea3      	ldrsh	r3, [r4, r2]
   1545c:	061a      	lsls	r2, r3, #24
   1545e:	d43d      	bmi.n	154dc <setvbuf+0xe0>
   15460:	4a4d      	ldr	r2, [pc, #308]	; (15598 <setvbuf+0x19c>)
   15462:	4013      	ands	r3, r2
   15464:	81a3      	strh	r3, [r4, #12]
   15466:	2e02      	cmp	r6, #2
   15468:	d01e      	beq.n	154a8 <setvbuf+0xac>
   1546a:	ab01      	add	r3, sp, #4
   1546c:	466a      	mov	r2, sp
   1546e:	0021      	movs	r1, r4
   15470:	0028      	movs	r0, r5
   15472:	f003 f9a9 	bl	187c8 <__swhatbuf_r>
   15476:	89a3      	ldrh	r3, [r4, #12]
   15478:	4318      	orrs	r0, r3
   1547a:	81a0      	strh	r0, [r4, #12]
   1547c:	2f00      	cmp	r7, #0
   1547e:	d138      	bne.n	154f2 <setvbuf+0xf6>
   15480:	9f00      	ldr	r7, [sp, #0]
   15482:	0038      	movs	r0, r7
   15484:	f7ff fbb4 	bl	14bf0 <malloc>
   15488:	4680      	mov	r8, r0
   1548a:	2800      	cmp	r0, #0
   1548c:	d100      	bne.n	15490 <setvbuf+0x94>
   1548e:	e06f      	b.n	15570 <setvbuf+0x174>
   15490:	2280      	movs	r2, #128	; 0x80
   15492:	89a3      	ldrh	r3, [r4, #12]
   15494:	4313      	orrs	r3, r2
   15496:	81a3      	strh	r3, [r4, #12]
   15498:	e02e      	b.n	154f8 <setvbuf+0xfc>
   1549a:	89a3      	ldrh	r3, [r4, #12]
   1549c:	059b      	lsls	r3, r3, #22
   1549e:	d4c8      	bmi.n	15432 <setvbuf+0x36>
   154a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   154a2:	f003 f98d 	bl	187c0 <__retarget_lock_acquire_recursive>
   154a6:	e7c4      	b.n	15432 <setvbuf+0x36>
   154a8:	2500      	movs	r5, #0
   154aa:	2202      	movs	r2, #2
   154ac:	4313      	orrs	r3, r2
   154ae:	2200      	movs	r2, #0
   154b0:	60a2      	str	r2, [r4, #8]
   154b2:	0022      	movs	r2, r4
   154b4:	3243      	adds	r2, #67	; 0x43
   154b6:	6022      	str	r2, [r4, #0]
   154b8:	6122      	str	r2, [r4, #16]
   154ba:	2201      	movs	r2, #1
   154bc:	6e61      	ldr	r1, [r4, #100]	; 0x64
   154be:	81a3      	strh	r3, [r4, #12]
   154c0:	6162      	str	r2, [r4, #20]
   154c2:	4211      	tst	r1, r2
   154c4:	d104      	bne.n	154d0 <setvbuf+0xd4>
   154c6:	059b      	lsls	r3, r3, #22
   154c8:	d402      	bmi.n	154d0 <setvbuf+0xd4>
   154ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
   154cc:	f003 f97a 	bl	187c4 <__retarget_lock_release_recursive>
   154d0:	0028      	movs	r0, r5
   154d2:	b003      	add	sp, #12
   154d4:	bc0c      	pop	{r2, r3}
   154d6:	4690      	mov	r8, r2
   154d8:	4699      	mov	r9, r3
   154da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   154dc:	6921      	ldr	r1, [r4, #16]
   154de:	0028      	movs	r0, r5
   154e0:	f002 fed6 	bl	18290 <_free_r>
   154e4:	220c      	movs	r2, #12
   154e6:	5ea3      	ldrsh	r3, [r4, r2]
   154e8:	e7ba      	b.n	15460 <setvbuf+0x64>
   154ea:	0028      	movs	r0, r5
   154ec:	f002 fe26 	bl	1813c <__sinit>
   154f0:	e794      	b.n	1541c <setvbuf+0x20>
   154f2:	4643      	mov	r3, r8
   154f4:	2b00      	cmp	r3, #0
   154f6:	d0c4      	beq.n	15482 <setvbuf+0x86>
   154f8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   154fa:	2b00      	cmp	r3, #0
   154fc:	d027      	beq.n	1554e <setvbuf+0x152>
   154fe:	9b00      	ldr	r3, [sp, #0]
   15500:	429f      	cmp	r7, r3
   15502:	d02a      	beq.n	1555a <setvbuf+0x15e>
   15504:	2380      	movs	r3, #128	; 0x80
   15506:	89a2      	ldrh	r2, [r4, #12]
   15508:	011b      	lsls	r3, r3, #4
   1550a:	4313      	orrs	r3, r2
   1550c:	b21b      	sxth	r3, r3
   1550e:	81a3      	strh	r3, [r4, #12]
   15510:	2e01      	cmp	r6, #1
   15512:	d026      	beq.n	15562 <setvbuf+0x166>
   15514:	4642      	mov	r2, r8
   15516:	6022      	str	r2, [r4, #0]
   15518:	6122      	str	r2, [r4, #16]
   1551a:	2208      	movs	r2, #8
   1551c:	b29b      	uxth	r3, r3
   1551e:	6167      	str	r7, [r4, #20]
   15520:	401a      	ands	r2, r3
   15522:	d00b      	beq.n	1553c <setvbuf+0x140>
   15524:	07da      	lsls	r2, r3, #31
   15526:	d510      	bpl.n	1554a <setvbuf+0x14e>
   15528:	2200      	movs	r2, #0
   1552a:	2501      	movs	r5, #1
   1552c:	60a2      	str	r2, [r4, #8]
   1552e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   15530:	427f      	negs	r7, r7
   15532:	61a7      	str	r7, [r4, #24]
   15534:	4015      	ands	r5, r2
   15536:	d0c6      	beq.n	154c6 <setvbuf+0xca>
   15538:	2500      	movs	r5, #0
   1553a:	e7c9      	b.n	154d0 <setvbuf+0xd4>
   1553c:	60a2      	str	r2, [r4, #8]
   1553e:	2501      	movs	r5, #1
   15540:	6e62      	ldr	r2, [r4, #100]	; 0x64
   15542:	4015      	ands	r5, r2
   15544:	d0bf      	beq.n	154c6 <setvbuf+0xca>
   15546:	2500      	movs	r5, #0
   15548:	e7c2      	b.n	154d0 <setvbuf+0xd4>
   1554a:	60a7      	str	r7, [r4, #8]
   1554c:	e7f7      	b.n	1553e <setvbuf+0x142>
   1554e:	0028      	movs	r0, r5
   15550:	f002 fdf4 	bl	1813c <__sinit>
   15554:	9b00      	ldr	r3, [sp, #0]
   15556:	429f      	cmp	r7, r3
   15558:	d1d4      	bne.n	15504 <setvbuf+0x108>
   1555a:	220c      	movs	r2, #12
   1555c:	5ea3      	ldrsh	r3, [r4, r2]
   1555e:	2e01      	cmp	r6, #1
   15560:	d1d8      	bne.n	15514 <setvbuf+0x118>
   15562:	2201      	movs	r2, #1
   15564:	4313      	orrs	r3, r2
   15566:	81a3      	strh	r3, [r4, #12]
   15568:	e7d4      	b.n	15514 <setvbuf+0x118>
   1556a:	2501      	movs	r5, #1
   1556c:	426d      	negs	r5, r5
   1556e:	e7af      	b.n	154d0 <setvbuf+0xd4>
   15570:	9b00      	ldr	r3, [sp, #0]
   15572:	4699      	mov	r9, r3
   15574:	42bb      	cmp	r3, r7
   15576:	d005      	beq.n	15584 <setvbuf+0x188>
   15578:	0018      	movs	r0, r3
   1557a:	f7ff fb39 	bl	14bf0 <malloc>
   1557e:	4680      	mov	r8, r0
   15580:	2800      	cmp	r0, #0
   15582:	d104      	bne.n	1558e <setvbuf+0x192>
   15584:	2501      	movs	r5, #1
   15586:	220c      	movs	r2, #12
   15588:	5ea3      	ldrsh	r3, [r4, r2]
   1558a:	426d      	negs	r5, r5
   1558c:	e78d      	b.n	154aa <setvbuf+0xae>
   1558e:	464f      	mov	r7, r9
   15590:	e77e      	b.n	15490 <setvbuf+0x94>
   15592:	46c0      	nop			; (mov r8, r8)
   15594:	20000068 	.word	0x20000068
   15598:	fffff35c 	.word	0xfffff35c

0001559c <strlen>:
   1559c:	b510      	push	{r4, lr}
   1559e:	0783      	lsls	r3, r0, #30
   155a0:	d025      	beq.n	155ee <strlen+0x52>
   155a2:	7803      	ldrb	r3, [r0, #0]
   155a4:	2b00      	cmp	r3, #0
   155a6:	d024      	beq.n	155f2 <strlen+0x56>
   155a8:	0003      	movs	r3, r0
   155aa:	2103      	movs	r1, #3
   155ac:	e002      	b.n	155b4 <strlen+0x18>
   155ae:	781a      	ldrb	r2, [r3, #0]
   155b0:	2a00      	cmp	r2, #0
   155b2:	d01a      	beq.n	155ea <strlen+0x4e>
   155b4:	3301      	adds	r3, #1
   155b6:	420b      	tst	r3, r1
   155b8:	d1f9      	bne.n	155ae <strlen+0x12>
   155ba:	6819      	ldr	r1, [r3, #0]
   155bc:	4a0e      	ldr	r2, [pc, #56]	; (155f8 <strlen+0x5c>)
   155be:	4c0f      	ldr	r4, [pc, #60]	; (155fc <strlen+0x60>)
   155c0:	188a      	adds	r2, r1, r2
   155c2:	438a      	bics	r2, r1
   155c4:	4222      	tst	r2, r4
   155c6:	d106      	bne.n	155d6 <strlen+0x3a>
   155c8:	3304      	adds	r3, #4
   155ca:	6819      	ldr	r1, [r3, #0]
   155cc:	4a0a      	ldr	r2, [pc, #40]	; (155f8 <strlen+0x5c>)
   155ce:	188a      	adds	r2, r1, r2
   155d0:	438a      	bics	r2, r1
   155d2:	4222      	tst	r2, r4
   155d4:	d0f8      	beq.n	155c8 <strlen+0x2c>
   155d6:	001a      	movs	r2, r3
   155d8:	781b      	ldrb	r3, [r3, #0]
   155da:	2b00      	cmp	r3, #0
   155dc:	d003      	beq.n	155e6 <strlen+0x4a>
   155de:	3201      	adds	r2, #1
   155e0:	7811      	ldrb	r1, [r2, #0]
   155e2:	2900      	cmp	r1, #0
   155e4:	d1fb      	bne.n	155de <strlen+0x42>
   155e6:	1a10      	subs	r0, r2, r0
   155e8:	bd10      	pop	{r4, pc}
   155ea:	1a18      	subs	r0, r3, r0
   155ec:	e7fc      	b.n	155e8 <strlen+0x4c>
   155ee:	0003      	movs	r3, r0
   155f0:	e7e3      	b.n	155ba <strlen+0x1e>
   155f2:	2000      	movs	r0, #0
   155f4:	e7f8      	b.n	155e8 <strlen+0x4c>
   155f6:	46c0      	nop			; (mov r8, r8)
   155f8:	fefefeff 	.word	0xfefefeff
   155fc:	80808080 	.word	0x80808080

00015600 <_vfprintf_r>:
   15600:	b5f0      	push	{r4, r5, r6, r7, lr}
   15602:	46de      	mov	lr, fp
   15604:	464e      	mov	r6, r9
   15606:	4645      	mov	r5, r8
   15608:	4657      	mov	r7, sl
   1560a:	b5e0      	push	{r5, r6, r7, lr}
   1560c:	b0c3      	sub	sp, #268	; 0x10c
   1560e:	4689      	mov	r9, r1
   15610:	0014      	movs	r4, r2
   15612:	001d      	movs	r5, r3
   15614:	930f      	str	r3, [sp, #60]	; 0x3c
   15616:	0006      	movs	r6, r0
   15618:	9006      	str	r0, [sp, #24]
   1561a:	f003 f8bf 	bl	1879c <_localeconv_r>
   1561e:	6803      	ldr	r3, [r0, #0]
   15620:	0018      	movs	r0, r3
   15622:	9318      	str	r3, [sp, #96]	; 0x60
   15624:	f7ff ffba 	bl	1559c <strlen>
   15628:	9017      	str	r0, [sp, #92]	; 0x5c
   1562a:	2e00      	cmp	r6, #0
   1562c:	d004      	beq.n	15638 <_vfprintf_r+0x38>
   1562e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   15630:	9307      	str	r3, [sp, #28]
   15632:	2b00      	cmp	r3, #0
   15634:	d100      	bne.n	15638 <_vfprintf_r+0x38>
   15636:	e0a7      	b.n	15788 <_vfprintf_r+0x188>
   15638:	464b      	mov	r3, r9
   1563a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1563c:	07db      	lsls	r3, r3, #31
   1563e:	d478      	bmi.n	15732 <_vfprintf_r+0x132>
   15640:	464b      	mov	r3, r9
   15642:	210c      	movs	r1, #12
   15644:	5e59      	ldrsh	r1, [r3, r1]
   15646:	b28b      	uxth	r3, r1
   15648:	059a      	lsls	r2, r3, #22
   1564a:	d56e      	bpl.n	1572a <_vfprintf_r+0x12a>
   1564c:	2280      	movs	r2, #128	; 0x80
   1564e:	0192      	lsls	r2, r2, #6
   15650:	4213      	tst	r3, r2
   15652:	d109      	bne.n	15668 <_vfprintf_r+0x68>
   15654:	430a      	orrs	r2, r1
   15656:	464b      	mov	r3, r9
   15658:	4649      	mov	r1, r9
   1565a:	819a      	strh	r2, [r3, #12]
   1565c:	6e49      	ldr	r1, [r1, #100]	; 0x64
   1565e:	4bcc      	ldr	r3, [pc, #816]	; (15990 <_vfprintf_r+0x390>)
   15660:	400b      	ands	r3, r1
   15662:	4649      	mov	r1, r9
   15664:	664b      	str	r3, [r1, #100]	; 0x64
   15666:	b293      	uxth	r3, r2
   15668:	071a      	lsls	r2, r3, #28
   1566a:	d567      	bpl.n	1573c <_vfprintf_r+0x13c>
   1566c:	464a      	mov	r2, r9
   1566e:	6912      	ldr	r2, [r2, #16]
   15670:	2a00      	cmp	r2, #0
   15672:	d063      	beq.n	1573c <_vfprintf_r+0x13c>
   15674:	221a      	movs	r2, #26
   15676:	401a      	ands	r2, r3
   15678:	2a0a      	cmp	r2, #10
   1567a:	d100      	bne.n	1567e <_vfprintf_r+0x7e>
   1567c:	e088      	b.n	15790 <_vfprintf_r+0x190>
   1567e:	ab32      	add	r3, sp, #200	; 0xc8
   15680:	9325      	str	r3, [sp, #148]	; 0x94
   15682:	2300      	movs	r3, #0
   15684:	46cb      	mov	fp, r9
   15686:	af25      	add	r7, sp, #148	; 0x94
   15688:	60bb      	str	r3, [r7, #8]
   1568a:	607b      	str	r3, [r7, #4]
   1568c:	9407      	str	r4, [sp, #28]
   1568e:	9314      	str	r3, [sp, #80]	; 0x50
   15690:	9316      	str	r3, [sp, #88]	; 0x58
   15692:	9315      	str	r3, [sp, #84]	; 0x54
   15694:	ae32      	add	r6, sp, #200	; 0xc8
   15696:	9319      	str	r3, [sp, #100]	; 0x64
   15698:	931a      	str	r3, [sp, #104]	; 0x68
   1569a:	930a      	str	r3, [sp, #40]	; 0x28
   1569c:	9c07      	ldr	r4, [sp, #28]
   1569e:	7823      	ldrb	r3, [r4, #0]
   156a0:	2b00      	cmp	r3, #0
   156a2:	d101      	bne.n	156a8 <_vfprintf_r+0xa8>
   156a4:	f000 fd9e 	bl	161e4 <_vfprintf_r+0xbe4>
   156a8:	2b25      	cmp	r3, #37	; 0x25
   156aa:	d103      	bne.n	156b4 <_vfprintf_r+0xb4>
   156ac:	f000 fd9a 	bl	161e4 <_vfprintf_r+0xbe4>
   156b0:	2b25      	cmp	r3, #37	; 0x25
   156b2:	d003      	beq.n	156bc <_vfprintf_r+0xbc>
   156b4:	3401      	adds	r4, #1
   156b6:	7823      	ldrb	r3, [r4, #0]
   156b8:	2b00      	cmp	r3, #0
   156ba:	d1f9      	bne.n	156b0 <_vfprintf_r+0xb0>
   156bc:	9b07      	ldr	r3, [sp, #28]
   156be:	1ae5      	subs	r5, r4, r3
   156c0:	d010      	beq.n	156e4 <_vfprintf_r+0xe4>
   156c2:	9b07      	ldr	r3, [sp, #28]
   156c4:	6075      	str	r5, [r6, #4]
   156c6:	6033      	str	r3, [r6, #0]
   156c8:	68bb      	ldr	r3, [r7, #8]
   156ca:	195b      	adds	r3, r3, r5
   156cc:	60bb      	str	r3, [r7, #8]
   156ce:	687b      	ldr	r3, [r7, #4]
   156d0:	3301      	adds	r3, #1
   156d2:	607b      	str	r3, [r7, #4]
   156d4:	2b07      	cmp	r3, #7
   156d6:	dc4c      	bgt.n	15772 <_vfprintf_r+0x172>
   156d8:	3608      	adds	r6, #8
   156da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   156dc:	469c      	mov	ip, r3
   156de:	44ac      	add	ip, r5
   156e0:	4663      	mov	r3, ip
   156e2:	930a      	str	r3, [sp, #40]	; 0x28
   156e4:	7823      	ldrb	r3, [r4, #0]
   156e6:	2b00      	cmp	r3, #0
   156e8:	d101      	bne.n	156ee <_vfprintf_r+0xee>
   156ea:	f000 fc99 	bl	16020 <_vfprintf_r+0xa20>
   156ee:	1c63      	adds	r3, r4, #1
   156f0:	9307      	str	r3, [sp, #28]
   156f2:	2300      	movs	r3, #0
   156f4:	aa16      	add	r2, sp, #88	; 0x58
   156f6:	77d3      	strb	r3, [r2, #31]
   156f8:	2201      	movs	r2, #1
   156fa:	4252      	negs	r2, r2
   156fc:	4692      	mov	sl, r2
   156fe:	2200      	movs	r2, #0
   15700:	920b      	str	r2, [sp, #44]	; 0x2c
   15702:	3220      	adds	r2, #32
   15704:	4691      	mov	r9, r2
   15706:	3220      	adds	r2, #32
   15708:	7863      	ldrb	r3, [r4, #1]
   1570a:	2100      	movs	r1, #0
   1570c:	2000      	movs	r0, #0
   1570e:	2400      	movs	r4, #0
   15710:	4694      	mov	ip, r2
   15712:	9a07      	ldr	r2, [sp, #28]
   15714:	3201      	adds	r2, #1
   15716:	9207      	str	r2, [sp, #28]
   15718:	001a      	movs	r2, r3
   1571a:	3a20      	subs	r2, #32
   1571c:	2a58      	cmp	r2, #88	; 0x58
   1571e:	d900      	bls.n	15722 <_vfprintf_r+0x122>
   15720:	e2e7      	b.n	15cf2 <_vfprintf_r+0x6f2>
   15722:	4d9c      	ldr	r5, [pc, #624]	; (15994 <_vfprintf_r+0x394>)
   15724:	0092      	lsls	r2, r2, #2
   15726:	58aa      	ldr	r2, [r5, r2]
   15728:	4697      	mov	pc, r2
   1572a:	464b      	mov	r3, r9
   1572c:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1572e:	f003 f847 	bl	187c0 <__retarget_lock_acquire_recursive>
   15732:	464b      	mov	r3, r9
   15734:	210c      	movs	r1, #12
   15736:	5e59      	ldrsh	r1, [r3, r1]
   15738:	b28b      	uxth	r3, r1
   1573a:	e787      	b.n	1564c <_vfprintf_r+0x4c>
   1573c:	4649      	mov	r1, r9
   1573e:	9806      	ldr	r0, [sp, #24]
   15740:	f001 fb0e 	bl	16d60 <__swsetup_r>
   15744:	464b      	mov	r3, r9
   15746:	2800      	cmp	r0, #0
   15748:	d03a      	beq.n	157c0 <_vfprintf_r+0x1c0>
   1574a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1574c:	07db      	lsls	r3, r3, #31
   1574e:	d405      	bmi.n	1575c <_vfprintf_r+0x15c>
   15750:	464b      	mov	r3, r9
   15752:	899b      	ldrh	r3, [r3, #12]
   15754:	059b      	lsls	r3, r3, #22
   15756:	d401      	bmi.n	1575c <_vfprintf_r+0x15c>
   15758:	f000 ffcf 	bl	166fa <_vfprintf_r+0x10fa>
   1575c:	2301      	movs	r3, #1
   1575e:	425b      	negs	r3, r3
   15760:	930a      	str	r3, [sp, #40]	; 0x28
   15762:	980a      	ldr	r0, [sp, #40]	; 0x28
   15764:	b043      	add	sp, #268	; 0x10c
   15766:	bc3c      	pop	{r2, r3, r4, r5}
   15768:	4690      	mov	r8, r2
   1576a:	4699      	mov	r9, r3
   1576c:	46a2      	mov	sl, r4
   1576e:	46ab      	mov	fp, r5
   15770:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15772:	003a      	movs	r2, r7
   15774:	4659      	mov	r1, fp
   15776:	9806      	ldr	r0, [sp, #24]
   15778:	f003 fec4 	bl	19504 <__sprint_r>
   1577c:	2800      	cmp	r0, #0
   1577e:	d001      	beq.n	15784 <_vfprintf_r+0x184>
   15780:	f000 fcce 	bl	16120 <_vfprintf_r+0xb20>
   15784:	ae32      	add	r6, sp, #200	; 0xc8
   15786:	e7a8      	b.n	156da <_vfprintf_r+0xda>
   15788:	9806      	ldr	r0, [sp, #24]
   1578a:	f002 fcd7 	bl	1813c <__sinit>
   1578e:	e753      	b.n	15638 <_vfprintf_r+0x38>
   15790:	464a      	mov	r2, r9
   15792:	210e      	movs	r1, #14
   15794:	5e52      	ldrsh	r2, [r2, r1]
   15796:	2a00      	cmp	r2, #0
   15798:	da00      	bge.n	1579c <_vfprintf_r+0x19c>
   1579a:	e770      	b.n	1567e <_vfprintf_r+0x7e>
   1579c:	464a      	mov	r2, r9
   1579e:	6e52      	ldr	r2, [r2, #100]	; 0x64
   157a0:	07d2      	lsls	r2, r2, #31
   157a2:	d405      	bmi.n	157b0 <_vfprintf_r+0x1b0>
   157a4:	059b      	lsls	r3, r3, #22
   157a6:	d403      	bmi.n	157b0 <_vfprintf_r+0x1b0>
   157a8:	464b      	mov	r3, r9
   157aa:	6d98      	ldr	r0, [r3, #88]	; 0x58
   157ac:	f003 f80a 	bl	187c4 <__retarget_lock_release_recursive>
   157b0:	002b      	movs	r3, r5
   157b2:	0022      	movs	r2, r4
   157b4:	4649      	mov	r1, r9
   157b6:	9806      	ldr	r0, [sp, #24]
   157b8:	f001 fa8e 	bl	16cd8 <__sbprintf>
   157bc:	900a      	str	r0, [sp, #40]	; 0x28
   157be:	e7d0      	b.n	15762 <_vfprintf_r+0x162>
   157c0:	899b      	ldrh	r3, [r3, #12]
   157c2:	e757      	b.n	15674 <_vfprintf_r+0x74>
   157c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   157c6:	920f      	str	r2, [sp, #60]	; 0x3c
   157c8:	425b      	negs	r3, r3
   157ca:	930b      	str	r3, [sp, #44]	; 0x2c
   157cc:	2304      	movs	r3, #4
   157ce:	431c      	orrs	r4, r3
   157d0:	9b07      	ldr	r3, [sp, #28]
   157d2:	781b      	ldrb	r3, [r3, #0]
   157d4:	e79d      	b.n	15712 <_vfprintf_r+0x112>
   157d6:	9b07      	ldr	r3, [sp, #28]
   157d8:	2101      	movs	r1, #1
   157da:	781b      	ldrb	r3, [r3, #0]
   157dc:	202b      	movs	r0, #43	; 0x2b
   157de:	e798      	b.n	15712 <_vfprintf_r+0x112>
   157e0:	9b07      	ldr	r3, [sp, #28]
   157e2:	1c5a      	adds	r2, r3, #1
   157e4:	781b      	ldrb	r3, [r3, #0]
   157e6:	4690      	mov	r8, r2
   157e8:	2b2a      	cmp	r3, #42	; 0x2a
   157ea:	d101      	bne.n	157f0 <_vfprintf_r+0x1f0>
   157ec:	f001 fa38 	bl	16c60 <_vfprintf_r+0x1660>
   157f0:	001a      	movs	r2, r3
   157f2:	2500      	movs	r5, #0
   157f4:	3a30      	subs	r2, #48	; 0x30
   157f6:	46aa      	mov	sl, r5
   157f8:	2a09      	cmp	r2, #9
   157fa:	d901      	bls.n	15800 <_vfprintf_r+0x200>
   157fc:	f001 f96d 	bl	16ada <_vfprintf_r+0x14da>
   15800:	0025      	movs	r5, r4
   15802:	4643      	mov	r3, r8
   15804:	4654      	mov	r4, sl
   15806:	4688      	mov	r8, r1
   15808:	4682      	mov	sl, r0
   1580a:	00a1      	lsls	r1, r4, #2
   1580c:	190c      	adds	r4, r1, r4
   1580e:	7818      	ldrb	r0, [r3, #0]
   15810:	0064      	lsls	r4, r4, #1
   15812:	18a4      	adds	r4, r4, r2
   15814:	0002      	movs	r2, r0
   15816:	1c59      	adds	r1, r3, #1
   15818:	3a30      	subs	r2, #48	; 0x30
   1581a:	000b      	movs	r3, r1
   1581c:	2a09      	cmp	r2, #9
   1581e:	d9f4      	bls.n	1580a <_vfprintf_r+0x20a>
   15820:	9107      	str	r1, [sp, #28]
   15822:	0003      	movs	r3, r0
   15824:	4641      	mov	r1, r8
   15826:	4650      	mov	r0, sl
   15828:	46a2      	mov	sl, r4
   1582a:	002c      	movs	r4, r5
   1582c:	e774      	b.n	15718 <_vfprintf_r+0x118>
   1582e:	9312      	str	r3, [sp, #72]	; 0x48
   15830:	2900      	cmp	r1, #0
   15832:	d001      	beq.n	15838 <_vfprintf_r+0x238>
   15834:	f001 fa2e 	bl	16c94 <_vfprintf_r+0x1694>
   15838:	4b57      	ldr	r3, [pc, #348]	; (15998 <_vfprintf_r+0x398>)
   1583a:	9319      	str	r3, [sp, #100]	; 0x64
   1583c:	06a3      	lsls	r3, r4, #26
   1583e:	d501      	bpl.n	15844 <_vfprintf_r+0x244>
   15840:	f000 fe9a 	bl	16578 <_vfprintf_r+0xf78>
   15844:	06e3      	lsls	r3, r4, #27
   15846:	d501      	bpl.n	1584c <_vfprintf_r+0x24c>
   15848:	f000 fd9a 	bl	16380 <_vfprintf_r+0xd80>
   1584c:	0663      	lsls	r3, r4, #25
   1584e:	d401      	bmi.n	15854 <_vfprintf_r+0x254>
   15850:	f000 fd96 	bl	16380 <_vfprintf_r+0xd80>
   15854:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15856:	881a      	ldrh	r2, [r3, #0]
   15858:	920c      	str	r2, [sp, #48]	; 0x30
   1585a:	2200      	movs	r2, #0
   1585c:	3304      	adds	r3, #4
   1585e:	920d      	str	r2, [sp, #52]	; 0x34
   15860:	930f      	str	r3, [sp, #60]	; 0x3c
   15862:	07e3      	lsls	r3, r4, #31
   15864:	d401      	bmi.n	1586a <_vfprintf_r+0x26a>
   15866:	f000 fd76 	bl	16356 <_vfprintf_r+0xd56>
   1586a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1586c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1586e:	000b      	movs	r3, r1
   15870:	4313      	orrs	r3, r2
   15872:	001a      	movs	r2, r3
   15874:	2302      	movs	r3, #2
   15876:	2a00      	cmp	r2, #0
   15878:	d008      	beq.n	1588c <_vfprintf_r+0x28c>
   1587a:	2030      	movs	r0, #48	; 0x30
   1587c:	a91e      	add	r1, sp, #120	; 0x78
   1587e:	7008      	strb	r0, [r1, #0]
   15880:	2548      	movs	r5, #72	; 0x48
   15882:	4668      	mov	r0, sp
   15884:	1940      	adds	r0, r0, r5
   15886:	7800      	ldrb	r0, [r0, #0]
   15888:	431c      	orrs	r4, r3
   1588a:	7048      	strb	r0, [r1, #1]
   1588c:	2100      	movs	r1, #0
   1588e:	4688      	mov	r8, r1
   15890:	a816      	add	r0, sp, #88	; 0x58
   15892:	77c1      	strb	r1, [r0, #31]
   15894:	4651      	mov	r1, sl
   15896:	3101      	adds	r1, #1
   15898:	d100      	bne.n	1589c <_vfprintf_r+0x29c>
   1589a:	e0e6      	b.n	15a6a <_vfprintf_r+0x46a>
   1589c:	2180      	movs	r1, #128	; 0x80
   1589e:	0020      	movs	r0, r4
   158a0:	4388      	bics	r0, r1
   158a2:	9009      	str	r0, [sp, #36]	; 0x24
   158a4:	2a00      	cmp	r2, #0
   158a6:	d000      	beq.n	158aa <_vfprintf_r+0x2aa>
   158a8:	e0e3      	b.n	15a72 <_vfprintf_r+0x472>
   158aa:	4652      	mov	r2, sl
   158ac:	2a00      	cmp	r2, #0
   158ae:	d001      	beq.n	158b4 <_vfprintf_r+0x2b4>
   158b0:	f000 fc38 	bl	16124 <_vfprintf_r+0xb24>
   158b4:	2b00      	cmp	r3, #0
   158b6:	d001      	beq.n	158bc <_vfprintf_r+0x2bc>
   158b8:	f000 fd0c 	bl	162d4 <_vfprintf_r+0xcd4>
   158bc:	2001      	movs	r0, #1
   158be:	ab32      	add	r3, sp, #200	; 0xc8
   158c0:	4020      	ands	r0, r4
   158c2:	900e      	str	r0, [sp, #56]	; 0x38
   158c4:	9311      	str	r3, [sp, #68]	; 0x44
   158c6:	d008      	beq.n	158da <_vfprintf_r+0x2da>
   158c8:	2327      	movs	r3, #39	; 0x27
   158ca:	2130      	movs	r1, #48	; 0x30
   158cc:	aa28      	add	r2, sp, #160	; 0xa0
   158ce:	54d1      	strb	r1, [r2, r3]
   158d0:	aa16      	add	r2, sp, #88	; 0x58
   158d2:	4694      	mov	ip, r2
   158d4:	3348      	adds	r3, #72	; 0x48
   158d6:	4463      	add	r3, ip
   158d8:	9311      	str	r3, [sp, #68]	; 0x44
   158da:	4653      	mov	r3, sl
   158dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   158de:	9308      	str	r3, [sp, #32]
   158e0:	4592      	cmp	sl, r2
   158e2:	da00      	bge.n	158e6 <_vfprintf_r+0x2e6>
   158e4:	9208      	str	r2, [sp, #32]
   158e6:	2300      	movs	r3, #0
   158e8:	9313      	str	r3, [sp, #76]	; 0x4c
   158ea:	4643      	mov	r3, r8
   158ec:	2b00      	cmp	r3, #0
   158ee:	d002      	beq.n	158f6 <_vfprintf_r+0x2f6>
   158f0:	9b08      	ldr	r3, [sp, #32]
   158f2:	3301      	adds	r3, #1
   158f4:	9308      	str	r3, [sp, #32]
   158f6:	2302      	movs	r3, #2
   158f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   158fa:	401a      	ands	r2, r3
   158fc:	4691      	mov	r9, r2
   158fe:	d002      	beq.n	15906 <_vfprintf_r+0x306>
   15900:	9b08      	ldr	r3, [sp, #32]
   15902:	3302      	adds	r3, #2
   15904:	9308      	str	r3, [sp, #32]
   15906:	2384      	movs	r3, #132	; 0x84
   15908:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1590a:	401a      	ands	r2, r3
   1590c:	9210      	str	r2, [sp, #64]	; 0x40
   1590e:	d000      	beq.n	15912 <_vfprintf_r+0x312>
   15910:	e207      	b.n	15d22 <_vfprintf_r+0x722>
   15912:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15914:	9a08      	ldr	r2, [sp, #32]
   15916:	1a9c      	subs	r4, r3, r2
   15918:	2c00      	cmp	r4, #0
   1591a:	dc00      	bgt.n	1591e <_vfprintf_r+0x31e>
   1591c:	e201      	b.n	15d22 <_vfprintf_r+0x722>
   1591e:	491f      	ldr	r1, [pc, #124]	; (1599c <_vfprintf_r+0x39c>)
   15920:	68ba      	ldr	r2, [r7, #8]
   15922:	687b      	ldr	r3, [r7, #4]
   15924:	4688      	mov	r8, r1
   15926:	2c10      	cmp	r4, #16
   15928:	dd21      	ble.n	1596e <_vfprintf_r+0x36e>
   1592a:	0031      	movs	r1, r6
   1592c:	2510      	movs	r5, #16
   1592e:	465e      	mov	r6, fp
   15930:	e003      	b.n	1593a <_vfprintf_r+0x33a>
   15932:	3c10      	subs	r4, #16
   15934:	3108      	adds	r1, #8
   15936:	2c10      	cmp	r4, #16
   15938:	dd17      	ble.n	1596a <_vfprintf_r+0x36a>
   1593a:	4640      	mov	r0, r8
   1593c:	3210      	adds	r2, #16
   1593e:	3301      	adds	r3, #1
   15940:	6008      	str	r0, [r1, #0]
   15942:	604d      	str	r5, [r1, #4]
   15944:	60ba      	str	r2, [r7, #8]
   15946:	607b      	str	r3, [r7, #4]
   15948:	2b07      	cmp	r3, #7
   1594a:	ddf2      	ble.n	15932 <_vfprintf_r+0x332>
   1594c:	003a      	movs	r2, r7
   1594e:	0031      	movs	r1, r6
   15950:	9806      	ldr	r0, [sp, #24]
   15952:	f003 fdd7 	bl	19504 <__sprint_r>
   15956:	2800      	cmp	r0, #0
   15958:	d001      	beq.n	1595e <_vfprintf_r+0x35e>
   1595a:	f000 fccf 	bl	162fc <_vfprintf_r+0xcfc>
   1595e:	3c10      	subs	r4, #16
   15960:	68ba      	ldr	r2, [r7, #8]
   15962:	687b      	ldr	r3, [r7, #4]
   15964:	a932      	add	r1, sp, #200	; 0xc8
   15966:	2c10      	cmp	r4, #16
   15968:	dce7      	bgt.n	1593a <_vfprintf_r+0x33a>
   1596a:	46b3      	mov	fp, r6
   1596c:	000e      	movs	r6, r1
   1596e:	4641      	mov	r1, r8
   15970:	6074      	str	r4, [r6, #4]
   15972:	3301      	adds	r3, #1
   15974:	18a4      	adds	r4, r4, r2
   15976:	6031      	str	r1, [r6, #0]
   15978:	60bc      	str	r4, [r7, #8]
   1597a:	607b      	str	r3, [r7, #4]
   1597c:	2b07      	cmp	r3, #7
   1597e:	dd01      	ble.n	15984 <_vfprintf_r+0x384>
   15980:	f000 fcae 	bl	162e0 <_vfprintf_r+0xce0>
   15984:	ab16      	add	r3, sp, #88	; 0x58
   15986:	7fdb      	ldrb	r3, [r3, #31]
   15988:	3608      	adds	r6, #8
   1598a:	4698      	mov	r8, r3
   1598c:	e1ca      	b.n	15d24 <_vfprintf_r+0x724>
   1598e:	46c0      	nop			; (mov r8, r8)
   15990:	ffffdfff 	.word	0xffffdfff
   15994:	0001b270 	.word	0x0001b270
   15998:	0001b3f8 	.word	0x0001b3f8
   1599c:	0001b414 	.word	0x0001b414
   159a0:	2200      	movs	r2, #0
   159a2:	9d07      	ldr	r5, [sp, #28]
   159a4:	3b30      	subs	r3, #48	; 0x30
   159a6:	46a8      	mov	r8, r5
   159a8:	920b      	str	r2, [sp, #44]	; 0x2c
   159aa:	001a      	movs	r2, r3
   159ac:	9408      	str	r4, [sp, #32]
   159ae:	002c      	movs	r4, r5
   159b0:	4655      	mov	r5, sl
   159b2:	4682      	mov	sl, r0
   159b4:	4640      	mov	r0, r8
   159b6:	4688      	mov	r8, r1
   159b8:	0011      	movs	r1, r2
   159ba:	2200      	movs	r2, #0
   159bc:	0093      	lsls	r3, r2, #2
   159be:	189a      	adds	r2, r3, r2
   159c0:	7803      	ldrb	r3, [r0, #0]
   159c2:	0052      	lsls	r2, r2, #1
   159c4:	188a      	adds	r2, r1, r2
   159c6:	0019      	movs	r1, r3
   159c8:	3401      	adds	r4, #1
   159ca:	3930      	subs	r1, #48	; 0x30
   159cc:	0020      	movs	r0, r4
   159ce:	2909      	cmp	r1, #9
   159d0:	d9f4      	bls.n	159bc <_vfprintf_r+0x3bc>
   159d2:	9407      	str	r4, [sp, #28]
   159d4:	4650      	mov	r0, sl
   159d6:	9c08      	ldr	r4, [sp, #32]
   159d8:	920b      	str	r2, [sp, #44]	; 0x2c
   159da:	4641      	mov	r1, r8
   159dc:	46aa      	mov	sl, r5
   159de:	e69b      	b.n	15718 <_vfprintf_r+0x118>
   159e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   159e2:	9312      	str	r3, [sp, #72]	; 0x48
   159e4:	6813      	ldr	r3, [r2, #0]
   159e6:	2120      	movs	r1, #32
   159e8:	9308      	str	r3, [sp, #32]
   159ea:	466b      	mov	r3, sp
   159ec:	185b      	adds	r3, r3, r1
   159ee:	781b      	ldrb	r3, [r3, #0]
   159f0:	ad28      	add	r5, sp, #160	; 0xa0
   159f2:	702b      	strb	r3, [r5, #0]
   159f4:	2300      	movs	r3, #0
   159f6:	a916      	add	r1, sp, #88	; 0x58
   159f8:	77cb      	strb	r3, [r1, #31]
   159fa:	0013      	movs	r3, r2
   159fc:	3304      	adds	r3, #4
   159fe:	930f      	str	r3, [sp, #60]	; 0x3c
   15a00:	2300      	movs	r3, #0
   15a02:	9409      	str	r4, [sp, #36]	; 0x24
   15a04:	4698      	mov	r8, r3
   15a06:	3301      	adds	r3, #1
   15a08:	9308      	str	r3, [sp, #32]
   15a0a:	930e      	str	r3, [sp, #56]	; 0x38
   15a0c:	2300      	movs	r3, #0
   15a0e:	9511      	str	r5, [sp, #68]	; 0x44
   15a10:	469a      	mov	sl, r3
   15a12:	9313      	str	r3, [sp, #76]	; 0x4c
   15a14:	e76f      	b.n	158f6 <_vfprintf_r+0x2f6>
   15a16:	9312      	str	r3, [sp, #72]	; 0x48
   15a18:	2900      	cmp	r1, #0
   15a1a:	d001      	beq.n	15a20 <_vfprintf_r+0x420>
   15a1c:	f001 f94d 	bl	16cba <_vfprintf_r+0x16ba>
   15a20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   15a22:	06a3      	lsls	r3, r4, #26
   15a24:	d501      	bpl.n	15a2a <_vfprintf_r+0x42a>
   15a26:	f000 fd5a 	bl	164de <_vfprintf_r+0xede>
   15a2a:	06e3      	lsls	r3, r4, #27
   15a2c:	d501      	bpl.n	15a32 <_vfprintf_r+0x432>
   15a2e:	f000 fcab 	bl	16388 <_vfprintf_r+0xd88>
   15a32:	0663      	lsls	r3, r4, #25
   15a34:	d401      	bmi.n	15a3a <_vfprintf_r+0x43a>
   15a36:	f000 fca7 	bl	16388 <_vfprintf_r+0xd88>
   15a3a:	2100      	movs	r1, #0
   15a3c:	5e53      	ldrsh	r3, [r2, r1]
   15a3e:	930c      	str	r3, [sp, #48]	; 0x30
   15a40:	3204      	adds	r2, #4
   15a42:	17db      	asrs	r3, r3, #31
   15a44:	930d      	str	r3, [sp, #52]	; 0x34
   15a46:	920f      	str	r2, [sp, #60]	; 0x3c
   15a48:	2b00      	cmp	r3, #0
   15a4a:	da01      	bge.n	15a50 <_vfprintf_r+0x450>
   15a4c:	f000 fdb2 	bl	165b4 <_vfprintf_r+0xfb4>
   15a50:	990c      	ldr	r1, [sp, #48]	; 0x30
   15a52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   15a54:	0008      	movs	r0, r1
   15a56:	4651      	mov	r1, sl
   15a58:	ab16      	add	r3, sp, #88	; 0x58
   15a5a:	7fdb      	ldrb	r3, [r3, #31]
   15a5c:	4310      	orrs	r0, r2
   15a5e:	4698      	mov	r8, r3
   15a60:	0002      	movs	r2, r0
   15a62:	2301      	movs	r3, #1
   15a64:	3101      	adds	r1, #1
   15a66:	d000      	beq.n	15a6a <_vfprintf_r+0x46a>
   15a68:	e718      	b.n	1589c <_vfprintf_r+0x29c>
   15a6a:	2a00      	cmp	r2, #0
   15a6c:	d100      	bne.n	15a70 <_vfprintf_r+0x470>
   15a6e:	e35a      	b.n	16126 <_vfprintf_r+0xb26>
   15a70:	9409      	str	r4, [sp, #36]	; 0x24
   15a72:	2b01      	cmp	r3, #1
   15a74:	d101      	bne.n	15a7a <_vfprintf_r+0x47a>
   15a76:	f000 fc06 	bl	16286 <_vfprintf_r+0xc86>
   15a7a:	2b02      	cmp	r3, #2
   15a7c:	d000      	beq.n	15a80 <_vfprintf_r+0x480>
   15a7e:	e380      	b.n	16182 <_vfprintf_r+0xb82>
   15a80:	9c19      	ldr	r4, [sp, #100]	; 0x64
   15a82:	200f      	movs	r0, #15
   15a84:	46a1      	mov	r9, r4
   15a86:	46b4      	mov	ip, r6
   15a88:	ab32      	add	r3, sp, #200	; 0xc8
   15a8a:	0019      	movs	r1, r3
   15a8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15a8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15a90:	0004      	movs	r4, r0
   15a92:	464d      	mov	r5, r9
   15a94:	4014      	ands	r4, r2
   15a96:	5d2c      	ldrb	r4, [r5, r4]
   15a98:	071e      	lsls	r6, r3, #28
   15a9a:	0915      	lsrs	r5, r2, #4
   15a9c:	3901      	subs	r1, #1
   15a9e:	432e      	orrs	r6, r5
   15aa0:	700c      	strb	r4, [r1, #0]
   15aa2:	091c      	lsrs	r4, r3, #4
   15aa4:	0023      	movs	r3, r4
   15aa6:	0034      	movs	r4, r6
   15aa8:	0032      	movs	r2, r6
   15aaa:	431c      	orrs	r4, r3
   15aac:	d1f0      	bne.n	15a90 <_vfprintf_r+0x490>
   15aae:	920c      	str	r2, [sp, #48]	; 0x30
   15ab0:	930d      	str	r3, [sp, #52]	; 0x34
   15ab2:	ab32      	add	r3, sp, #200	; 0xc8
   15ab4:	1a5b      	subs	r3, r3, r1
   15ab6:	9111      	str	r1, [sp, #68]	; 0x44
   15ab8:	4666      	mov	r6, ip
   15aba:	930e      	str	r3, [sp, #56]	; 0x38
   15abc:	e70d      	b.n	158da <_vfprintf_r+0x2da>
   15abe:	4663      	mov	r3, ip
   15ac0:	431c      	orrs	r4, r3
   15ac2:	9b07      	ldr	r3, [sp, #28]
   15ac4:	781b      	ldrb	r3, [r3, #0]
   15ac6:	e624      	b.n	15712 <_vfprintf_r+0x112>
   15ac8:	9b07      	ldr	r3, [sp, #28]
   15aca:	781b      	ldrb	r3, [r3, #0]
   15acc:	2b6c      	cmp	r3, #108	; 0x6c
   15ace:	d101      	bne.n	15ad4 <_vfprintf_r+0x4d4>
   15ad0:	f000 fe8c 	bl	167ec <_vfprintf_r+0x11ec>
   15ad4:	2210      	movs	r2, #16
   15ad6:	4314      	orrs	r4, r2
   15ad8:	e61b      	b.n	15712 <_vfprintf_r+0x112>
   15ada:	2900      	cmp	r1, #0
   15adc:	d001      	beq.n	15ae2 <_vfprintf_r+0x4e2>
   15ade:	f001 f8d5 	bl	16c8c <_vfprintf_r+0x168c>
   15ae2:	06a3      	lsls	r3, r4, #26
   15ae4:	d501      	bpl.n	15aea <_vfprintf_r+0x4ea>
   15ae6:	f000 fe76 	bl	167d6 <_vfprintf_r+0x11d6>
   15aea:	06e3      	lsls	r3, r4, #27
   15aec:	d500      	bpl.n	15af0 <_vfprintf_r+0x4f0>
   15aee:	e110      	b.n	15d12 <_vfprintf_r+0x712>
   15af0:	0663      	lsls	r3, r4, #25
   15af2:	d400      	bmi.n	15af6 <_vfprintf_r+0x4f6>
   15af4:	e10d      	b.n	15d12 <_vfprintf_r+0x712>
   15af6:	4669      	mov	r1, sp
   15af8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15afa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
   15afc:	681a      	ldr	r2, [r3, #0]
   15afe:	3304      	adds	r3, #4
   15b00:	9208      	str	r2, [sp, #32]
   15b02:	8011      	strh	r1, [r2, #0]
   15b04:	930f      	str	r3, [sp, #60]	; 0x3c
   15b06:	e5c9      	b.n	1569c <_vfprintf_r+0x9c>
   15b08:	990f      	ldr	r1, [sp, #60]	; 0x3c
   15b0a:	2230      	movs	r2, #48	; 0x30
   15b0c:	680b      	ldr	r3, [r1, #0]
   15b0e:	930c      	str	r3, [sp, #48]	; 0x30
   15b10:	2300      	movs	r3, #0
   15b12:	930d      	str	r3, [sp, #52]	; 0x34
   15b14:	3302      	adds	r3, #2
   15b16:	431c      	orrs	r4, r3
   15b18:	ab1e      	add	r3, sp, #120	; 0x78
   15b1a:	701a      	strb	r2, [r3, #0]
   15b1c:	3248      	adds	r2, #72	; 0x48
   15b1e:	705a      	strb	r2, [r3, #1]
   15b20:	000b      	movs	r3, r1
   15b22:	3304      	adds	r3, #4
   15b24:	930f      	str	r3, [sp, #60]	; 0x3c
   15b26:	4bc1      	ldr	r3, [pc, #772]	; (15e2c <_vfprintf_r+0x82c>)
   15b28:	9212      	str	r2, [sp, #72]	; 0x48
   15b2a:	9319      	str	r3, [sp, #100]	; 0x64
   15b2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15b2e:	2302      	movs	r3, #2
   15b30:	e6ac      	b.n	1588c <_vfprintf_r+0x28c>
   15b32:	464b      	mov	r3, r9
   15b34:	431c      	orrs	r4, r3
   15b36:	9b07      	ldr	r3, [sp, #28]
   15b38:	781b      	ldrb	r3, [r3, #0]
   15b3a:	e5ea      	b.n	15712 <_vfprintf_r+0x112>
   15b3c:	9312      	str	r3, [sp, #72]	; 0x48
   15b3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15b40:	a916      	add	r1, sp, #88	; 0x58
   15b42:	1d1d      	adds	r5, r3, #4
   15b44:	681b      	ldr	r3, [r3, #0]
   15b46:	001a      	movs	r2, r3
   15b48:	9311      	str	r3, [sp, #68]	; 0x44
   15b4a:	2300      	movs	r3, #0
   15b4c:	77cb      	strb	r3, [r1, #31]
   15b4e:	2a00      	cmp	r2, #0
   15b50:	d101      	bne.n	15b56 <_vfprintf_r+0x556>
   15b52:	f000 ff01 	bl	16958 <_vfprintf_r+0x1358>
   15b56:	4653      	mov	r3, sl
   15b58:	3301      	adds	r3, #1
   15b5a:	d101      	bne.n	15b60 <_vfprintf_r+0x560>
   15b5c:	f000 fe64 	bl	16828 <_vfprintf_r+0x1228>
   15b60:	4652      	mov	r2, sl
   15b62:	2100      	movs	r1, #0
   15b64:	9811      	ldr	r0, [sp, #68]	; 0x44
   15b66:	f002 fea7 	bl	188b8 <memchr>
   15b6a:	2800      	cmp	r0, #0
   15b6c:	d101      	bne.n	15b72 <_vfprintf_r+0x572>
   15b6e:	f000 ff78 	bl	16a62 <_vfprintf_r+0x1462>
   15b72:	9b11      	ldr	r3, [sp, #68]	; 0x44
   15b74:	1ac3      	subs	r3, r0, r3
   15b76:	001a      	movs	r2, r3
   15b78:	930e      	str	r3, [sp, #56]	; 0x38
   15b7a:	43db      	mvns	r3, r3
   15b7c:	17db      	asrs	r3, r3, #31
   15b7e:	401a      	ands	r2, r3
   15b80:	ab16      	add	r3, sp, #88	; 0x58
   15b82:	7fdb      	ldrb	r3, [r3, #31]
   15b84:	9208      	str	r2, [sp, #32]
   15b86:	4698      	mov	r8, r3
   15b88:	2300      	movs	r3, #0
   15b8a:	950f      	str	r5, [sp, #60]	; 0x3c
   15b8c:	9409      	str	r4, [sp, #36]	; 0x24
   15b8e:	469a      	mov	sl, r3
   15b90:	9313      	str	r3, [sp, #76]	; 0x4c
   15b92:	e6aa      	b.n	158ea <_vfprintf_r+0x2ea>
   15b94:	2308      	movs	r3, #8
   15b96:	431c      	orrs	r4, r3
   15b98:	9b07      	ldr	r3, [sp, #28]
   15b9a:	781b      	ldrb	r3, [r3, #0]
   15b9c:	e5b9      	b.n	15712 <_vfprintf_r+0x112>
   15b9e:	9312      	str	r3, [sp, #72]	; 0x48
   15ba0:	2310      	movs	r3, #16
   15ba2:	431c      	orrs	r4, r3
   15ba4:	06a3      	lsls	r3, r4, #26
   15ba6:	d501      	bpl.n	15bac <_vfprintf_r+0x5ac>
   15ba8:	f000 fca7 	bl	164fa <_vfprintf_r+0xefa>
   15bac:	06e3      	lsls	r3, r4, #27
   15bae:	d500      	bpl.n	15bb2 <_vfprintf_r+0x5b2>
   15bb0:	e3ee      	b.n	16390 <_vfprintf_r+0xd90>
   15bb2:	0663      	lsls	r3, r4, #25
   15bb4:	d400      	bmi.n	15bb8 <_vfprintf_r+0x5b8>
   15bb6:	e3eb      	b.n	16390 <_vfprintf_r+0xd90>
   15bb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15bba:	881a      	ldrh	r2, [r3, #0]
   15bbc:	920c      	str	r2, [sp, #48]	; 0x30
   15bbe:	2200      	movs	r2, #0
   15bc0:	3304      	adds	r3, #4
   15bc2:	920d      	str	r2, [sp, #52]	; 0x34
   15bc4:	930f      	str	r3, [sp, #60]	; 0x3c
   15bc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15bc8:	2300      	movs	r3, #0
   15bca:	e65f      	b.n	1588c <_vfprintf_r+0x28c>
   15bcc:	9312      	str	r3, [sp, #72]	; 0x48
   15bce:	2310      	movs	r3, #16
   15bd0:	431c      	orrs	r4, r3
   15bd2:	06a3      	lsls	r3, r4, #26
   15bd4:	d501      	bpl.n	15bda <_vfprintf_r+0x5da>
   15bd6:	f000 fcba 	bl	1654e <_vfprintf_r+0xf4e>
   15bda:	06e3      	lsls	r3, r4, #27
   15bdc:	d500      	bpl.n	15be0 <_vfprintf_r+0x5e0>
   15bde:	e3da      	b.n	16396 <_vfprintf_r+0xd96>
   15be0:	0663      	lsls	r3, r4, #25
   15be2:	d400      	bmi.n	15be6 <_vfprintf_r+0x5e6>
   15be4:	e3d7      	b.n	16396 <_vfprintf_r+0xd96>
   15be6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15be8:	881a      	ldrh	r2, [r3, #0]
   15bea:	920c      	str	r2, [sp, #48]	; 0x30
   15bec:	2200      	movs	r2, #0
   15bee:	3304      	adds	r3, #4
   15bf0:	920d      	str	r2, [sp, #52]	; 0x34
   15bf2:	930f      	str	r3, [sp, #60]	; 0x3c
   15bf4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15bf6:	2301      	movs	r3, #1
   15bf8:	e648      	b.n	1588c <_vfprintf_r+0x28c>
   15bfa:	9312      	str	r3, [sp, #72]	; 0x48
   15bfc:	2900      	cmp	r1, #0
   15bfe:	d001      	beq.n	15c04 <_vfprintf_r+0x604>
   15c00:	f001 f857 	bl	16cb2 <_vfprintf_r+0x16b2>
   15c04:	4b8a      	ldr	r3, [pc, #552]	; (15e30 <_vfprintf_r+0x830>)
   15c06:	9319      	str	r3, [sp, #100]	; 0x64
   15c08:	e618      	b.n	1583c <_vfprintf_r+0x23c>
   15c0a:	2301      	movs	r3, #1
   15c0c:	431c      	orrs	r4, r3
   15c0e:	9b07      	ldr	r3, [sp, #28]
   15c10:	781b      	ldrb	r3, [r3, #0]
   15c12:	e57e      	b.n	15712 <_vfprintf_r+0x112>
   15c14:	2380      	movs	r3, #128	; 0x80
   15c16:	431c      	orrs	r4, r3
   15c18:	9b07      	ldr	r3, [sp, #28]
   15c1a:	781b      	ldrb	r3, [r3, #0]
   15c1c:	e579      	b.n	15712 <_vfprintf_r+0x112>
   15c1e:	9b07      	ldr	r3, [sp, #28]
   15c20:	781b      	ldrb	r3, [r3, #0]
   15c22:	2800      	cmp	r0, #0
   15c24:	d000      	beq.n	15c28 <_vfprintf_r+0x628>
   15c26:	e574      	b.n	15712 <_vfprintf_r+0x112>
   15c28:	2101      	movs	r1, #1
   15c2a:	3020      	adds	r0, #32
   15c2c:	e571      	b.n	15712 <_vfprintf_r+0x112>
   15c2e:	9312      	str	r3, [sp, #72]	; 0x48
   15c30:	2900      	cmp	r1, #0
   15c32:	d001      	beq.n	15c38 <_vfprintf_r+0x638>
   15c34:	f001 f839 	bl	16caa <_vfprintf_r+0x16aa>
   15c38:	2207      	movs	r2, #7
   15c3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15c3c:	3307      	adds	r3, #7
   15c3e:	4393      	bics	r3, r2
   15c40:	3201      	adds	r2, #1
   15c42:	4694      	mov	ip, r2
   15c44:	449c      	add	ip, r3
   15c46:	4662      	mov	r2, ip
   15c48:	920f      	str	r2, [sp, #60]	; 0x3c
   15c4a:	681a      	ldr	r2, [r3, #0]
   15c4c:	9216      	str	r2, [sp, #88]	; 0x58
   15c4e:	685b      	ldr	r3, [r3, #4]
   15c50:	2201      	movs	r2, #1
   15c52:	9315      	str	r3, [sp, #84]	; 0x54
   15c54:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15c56:	9d16      	ldr	r5, [sp, #88]	; 0x58
   15c58:	005b      	lsls	r3, r3, #1
   15c5a:	085b      	lsrs	r3, r3, #1
   15c5c:	4698      	mov	r8, r3
   15c5e:	4252      	negs	r2, r2
   15c60:	4b74      	ldr	r3, [pc, #464]	; (15e34 <_vfprintf_r+0x834>)
   15c62:	0028      	movs	r0, r5
   15c64:	4641      	mov	r1, r8
   15c66:	f003 ff0d 	bl	19a84 <__aeabi_dcmpun>
   15c6a:	2800      	cmp	r0, #0
   15c6c:	d001      	beq.n	15c72 <_vfprintf_r+0x672>
   15c6e:	f000 fcb4 	bl	165da <_vfprintf_r+0xfda>
   15c72:	2201      	movs	r2, #1
   15c74:	4b6f      	ldr	r3, [pc, #444]	; (15e34 <_vfprintf_r+0x834>)
   15c76:	4252      	negs	r2, r2
   15c78:	0028      	movs	r0, r5
   15c7a:	4641      	mov	r1, r8
   15c7c:	f7fe fe76 	bl	1496c <__aeabi_dcmple>
   15c80:	2800      	cmp	r0, #0
   15c82:	d001      	beq.n	15c88 <_vfprintf_r+0x688>
   15c84:	f000 fca9 	bl	165da <_vfprintf_r+0xfda>
   15c88:	2200      	movs	r2, #0
   15c8a:	2300      	movs	r3, #0
   15c8c:	9816      	ldr	r0, [sp, #88]	; 0x58
   15c8e:	9915      	ldr	r1, [sp, #84]	; 0x54
   15c90:	f7fe fe62 	bl	14958 <__aeabi_dcmplt>
   15c94:	2800      	cmp	r0, #0
   15c96:	d001      	beq.n	15c9c <_vfprintf_r+0x69c>
   15c98:	f000 fd55 	bl	16746 <_vfprintf_r+0x1146>
   15c9c:	ab16      	add	r3, sp, #88	; 0x58
   15c9e:	7fdb      	ldrb	r3, [r3, #31]
   15ca0:	4698      	mov	r8, r3
   15ca2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15ca4:	2b47      	cmp	r3, #71	; 0x47
   15ca6:	dd01      	ble.n	15cac <_vfprintf_r+0x6ac>
   15ca8:	f000 fdb4 	bl	16814 <_vfprintf_r+0x1214>
   15cac:	4b62      	ldr	r3, [pc, #392]	; (15e38 <_vfprintf_r+0x838>)
   15cae:	9311      	str	r3, [sp, #68]	; 0x44
   15cb0:	2380      	movs	r3, #128	; 0x80
   15cb2:	439c      	bics	r4, r3
   15cb4:	3b7d      	subs	r3, #125	; 0x7d
   15cb6:	9308      	str	r3, [sp, #32]
   15cb8:	930e      	str	r3, [sp, #56]	; 0x38
   15cba:	2300      	movs	r3, #0
   15cbc:	9409      	str	r4, [sp, #36]	; 0x24
   15cbe:	469a      	mov	sl, r3
   15cc0:	9313      	str	r3, [sp, #76]	; 0x4c
   15cc2:	e612      	b.n	158ea <_vfprintf_r+0x2ea>
   15cc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15cc6:	1d1a      	adds	r2, r3, #4
   15cc8:	681b      	ldr	r3, [r3, #0]
   15cca:	930b      	str	r3, [sp, #44]	; 0x2c
   15ccc:	2b00      	cmp	r3, #0
   15cce:	da00      	bge.n	15cd2 <_vfprintf_r+0x6d2>
   15cd0:	e578      	b.n	157c4 <_vfprintf_r+0x1c4>
   15cd2:	9b07      	ldr	r3, [sp, #28]
   15cd4:	920f      	str	r2, [sp, #60]	; 0x3c
   15cd6:	781b      	ldrb	r3, [r3, #0]
   15cd8:	e51b      	b.n	15712 <_vfprintf_r+0x112>
   15cda:	9312      	str	r3, [sp, #72]	; 0x48
   15cdc:	2900      	cmp	r1, #0
   15cde:	d001      	beq.n	15ce4 <_vfprintf_r+0x6e4>
   15ce0:	f000 ffcc 	bl	16c7c <_vfprintf_r+0x167c>
   15ce4:	2310      	movs	r3, #16
   15ce6:	431c      	orrs	r4, r3
   15ce8:	e69a      	b.n	15a20 <_vfprintf_r+0x420>
   15cea:	9312      	str	r3, [sp, #72]	; 0x48
   15cec:	e771      	b.n	15bd2 <_vfprintf_r+0x5d2>
   15cee:	9312      	str	r3, [sp, #72]	; 0x48
   15cf0:	e758      	b.n	15ba4 <_vfprintf_r+0x5a4>
   15cf2:	9312      	str	r3, [sp, #72]	; 0x48
   15cf4:	2900      	cmp	r1, #0
   15cf6:	d001      	beq.n	15cfc <_vfprintf_r+0x6fc>
   15cf8:	f000 ffd3 	bl	16ca2 <_vfprintf_r+0x16a2>
   15cfc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15cfe:	2b00      	cmp	r3, #0
   15d00:	d100      	bne.n	15d04 <_vfprintf_r+0x704>
   15d02:	e18d      	b.n	16020 <_vfprintf_r+0xa20>
   15d04:	ad28      	add	r5, sp, #160	; 0xa0
   15d06:	702b      	strb	r3, [r5, #0]
   15d08:	2300      	movs	r3, #0
   15d0a:	aa16      	add	r2, sp, #88	; 0x58
   15d0c:	77d3      	strb	r3, [r2, #31]
   15d0e:	9409      	str	r4, [sp, #36]	; 0x24
   15d10:	e678      	b.n	15a04 <_vfprintf_r+0x404>
   15d12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   15d14:	990a      	ldr	r1, [sp, #40]	; 0x28
   15d16:	6813      	ldr	r3, [r2, #0]
   15d18:	6019      	str	r1, [r3, #0]
   15d1a:	0013      	movs	r3, r2
   15d1c:	3304      	adds	r3, #4
   15d1e:	930f      	str	r3, [sp, #60]	; 0x3c
   15d20:	e4bc      	b.n	1569c <_vfprintf_r+0x9c>
   15d22:	68bc      	ldr	r4, [r7, #8]
   15d24:	4643      	mov	r3, r8
   15d26:	2b00      	cmp	r3, #0
   15d28:	d00f      	beq.n	15d4a <_vfprintf_r+0x74a>
   15d2a:	aa16      	add	r2, sp, #88	; 0x58
   15d2c:	231f      	movs	r3, #31
   15d2e:	4694      	mov	ip, r2
   15d30:	4463      	add	r3, ip
   15d32:	6033      	str	r3, [r6, #0]
   15d34:	2301      	movs	r3, #1
   15d36:	6073      	str	r3, [r6, #4]
   15d38:	687b      	ldr	r3, [r7, #4]
   15d3a:	3401      	adds	r4, #1
   15d3c:	3301      	adds	r3, #1
   15d3e:	60bc      	str	r4, [r7, #8]
   15d40:	607b      	str	r3, [r7, #4]
   15d42:	2b07      	cmp	r3, #7
   15d44:	dd00      	ble.n	15d48 <_vfprintf_r+0x748>
   15d46:	e203      	b.n	16150 <_vfprintf_r+0xb50>
   15d48:	3608      	adds	r6, #8
   15d4a:	464b      	mov	r3, r9
   15d4c:	2b00      	cmp	r3, #0
   15d4e:	d00c      	beq.n	15d6a <_vfprintf_r+0x76a>
   15d50:	ab1e      	add	r3, sp, #120	; 0x78
   15d52:	6033      	str	r3, [r6, #0]
   15d54:	2302      	movs	r3, #2
   15d56:	6073      	str	r3, [r6, #4]
   15d58:	687b      	ldr	r3, [r7, #4]
   15d5a:	3402      	adds	r4, #2
   15d5c:	3301      	adds	r3, #1
   15d5e:	60bc      	str	r4, [r7, #8]
   15d60:	607b      	str	r3, [r7, #4]
   15d62:	2b07      	cmp	r3, #7
   15d64:	dd00      	ble.n	15d68 <_vfprintf_r+0x768>
   15d66:	e1fd      	b.n	16164 <_vfprintf_r+0xb64>
   15d68:	3608      	adds	r6, #8
   15d6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   15d6c:	2b80      	cmp	r3, #128	; 0x80
   15d6e:	d100      	bne.n	15d72 <_vfprintf_r+0x772>
   15d70:	e173      	b.n	1605a <_vfprintf_r+0xa5a>
   15d72:	4653      	mov	r3, sl
   15d74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   15d76:	1a9d      	subs	r5, r3, r2
   15d78:	2d00      	cmp	r5, #0
   15d7a:	dd32      	ble.n	15de2 <_vfprintf_r+0x7e2>
   15d7c:	4a2f      	ldr	r2, [pc, #188]	; (15e3c <_vfprintf_r+0x83c>)
   15d7e:	687b      	ldr	r3, [r7, #4]
   15d80:	4691      	mov	r9, r2
   15d82:	2d10      	cmp	r5, #16
   15d84:	dd22      	ble.n	15dcc <_vfprintf_r+0x7cc>
   15d86:	2210      	movs	r2, #16
   15d88:	4692      	mov	sl, r2
   15d8a:	0022      	movs	r2, r4
   15d8c:	465c      	mov	r4, fp
   15d8e:	e003      	b.n	15d98 <_vfprintf_r+0x798>
   15d90:	3d10      	subs	r5, #16
   15d92:	3608      	adds	r6, #8
   15d94:	2d10      	cmp	r5, #16
   15d96:	dd17      	ble.n	15dc8 <_vfprintf_r+0x7c8>
   15d98:	4649      	mov	r1, r9
   15d9a:	6031      	str	r1, [r6, #0]
   15d9c:	4651      	mov	r1, sl
   15d9e:	3210      	adds	r2, #16
   15da0:	3301      	adds	r3, #1
   15da2:	6071      	str	r1, [r6, #4]
   15da4:	60ba      	str	r2, [r7, #8]
   15da6:	607b      	str	r3, [r7, #4]
   15da8:	2b07      	cmp	r3, #7
   15daa:	ddf1      	ble.n	15d90 <_vfprintf_r+0x790>
   15dac:	003a      	movs	r2, r7
   15dae:	0021      	movs	r1, r4
   15db0:	9806      	ldr	r0, [sp, #24]
   15db2:	f003 fba7 	bl	19504 <__sprint_r>
   15db6:	2800      	cmp	r0, #0
   15db8:	d000      	beq.n	15dbc <_vfprintf_r+0x7bc>
   15dba:	e18a      	b.n	160d2 <_vfprintf_r+0xad2>
   15dbc:	3d10      	subs	r5, #16
   15dbe:	68ba      	ldr	r2, [r7, #8]
   15dc0:	687b      	ldr	r3, [r7, #4]
   15dc2:	ae32      	add	r6, sp, #200	; 0xc8
   15dc4:	2d10      	cmp	r5, #16
   15dc6:	dce7      	bgt.n	15d98 <_vfprintf_r+0x798>
   15dc8:	46a3      	mov	fp, r4
   15dca:	0014      	movs	r4, r2
   15dcc:	464a      	mov	r2, r9
   15dce:	1964      	adds	r4, r4, r5
   15dd0:	3301      	adds	r3, #1
   15dd2:	6032      	str	r2, [r6, #0]
   15dd4:	6075      	str	r5, [r6, #4]
   15dd6:	60bc      	str	r4, [r7, #8]
   15dd8:	607b      	str	r3, [r7, #4]
   15dda:	2b07      	cmp	r3, #7
   15ddc:	dd00      	ble.n	15de0 <_vfprintf_r+0x7e0>
   15dde:	e1ad      	b.n	1613c <_vfprintf_r+0xb3c>
   15de0:	3608      	adds	r6, #8
   15de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15de4:	05db      	lsls	r3, r3, #23
   15de6:	d500      	bpl.n	15dea <_vfprintf_r+0x7ea>
   15de8:	e0be      	b.n	15f68 <_vfprintf_r+0x968>
   15dea:	9b11      	ldr	r3, [sp, #68]	; 0x44
   15dec:	6033      	str	r3, [r6, #0]
   15dee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15df0:	469c      	mov	ip, r3
   15df2:	6073      	str	r3, [r6, #4]
   15df4:	687b      	ldr	r3, [r7, #4]
   15df6:	4464      	add	r4, ip
   15df8:	3301      	adds	r3, #1
   15dfa:	60bc      	str	r4, [r7, #8]
   15dfc:	607b      	str	r3, [r7, #4]
   15dfe:	2b07      	cmp	r3, #7
   15e00:	dd00      	ble.n	15e04 <_vfprintf_r+0x804>
   15e02:	e0a6      	b.n	15f52 <_vfprintf_r+0x952>
   15e04:	3608      	adds	r6, #8
   15e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15e08:	075b      	lsls	r3, r3, #29
   15e0a:	d54a      	bpl.n	15ea2 <_vfprintf_r+0x8a2>
   15e0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15e0e:	9a08      	ldr	r2, [sp, #32]
   15e10:	1a9d      	subs	r5, r3, r2
   15e12:	2d00      	cmp	r5, #0
   15e14:	dd45      	ble.n	15ea2 <_vfprintf_r+0x8a2>
   15e16:	4a0a      	ldr	r2, [pc, #40]	; (15e40 <_vfprintf_r+0x840>)
   15e18:	687b      	ldr	r3, [r7, #4]
   15e1a:	4690      	mov	r8, r2
   15e1c:	2d10      	cmp	r5, #16
   15e1e:	dd2f      	ble.n	15e80 <_vfprintf_r+0x880>
   15e20:	2210      	movs	r2, #16
   15e22:	4691      	mov	r9, r2
   15e24:	0022      	movs	r2, r4
   15e26:	465c      	mov	r4, fp
   15e28:	e010      	b.n	15e4c <_vfprintf_r+0x84c>
   15e2a:	46c0      	nop			; (mov r8, r8)
   15e2c:	0001b3f8 	.word	0x0001b3f8
   15e30:	0001b3e4 	.word	0x0001b3e4
   15e34:	7fefffff 	.word	0x7fefffff
   15e38:	0001b3d4 	.word	0x0001b3d4
   15e3c:	0001b424 	.word	0x0001b424
   15e40:	0001b414 	.word	0x0001b414
   15e44:	3d10      	subs	r5, #16
   15e46:	3608      	adds	r6, #8
   15e48:	2d10      	cmp	r5, #16
   15e4a:	dd17      	ble.n	15e7c <_vfprintf_r+0x87c>
   15e4c:	49d1      	ldr	r1, [pc, #836]	; (16194 <_vfprintf_r+0xb94>)
   15e4e:	3210      	adds	r2, #16
   15e50:	6031      	str	r1, [r6, #0]
   15e52:	4649      	mov	r1, r9
   15e54:	3301      	adds	r3, #1
   15e56:	6071      	str	r1, [r6, #4]
   15e58:	60ba      	str	r2, [r7, #8]
   15e5a:	607b      	str	r3, [r7, #4]
   15e5c:	2b07      	cmp	r3, #7
   15e5e:	ddf1      	ble.n	15e44 <_vfprintf_r+0x844>
   15e60:	003a      	movs	r2, r7
   15e62:	0021      	movs	r1, r4
   15e64:	9806      	ldr	r0, [sp, #24]
   15e66:	f003 fb4d 	bl	19504 <__sprint_r>
   15e6a:	2800      	cmp	r0, #0
   15e6c:	d000      	beq.n	15e70 <_vfprintf_r+0x870>
   15e6e:	e130      	b.n	160d2 <_vfprintf_r+0xad2>
   15e70:	3d10      	subs	r5, #16
   15e72:	68ba      	ldr	r2, [r7, #8]
   15e74:	687b      	ldr	r3, [r7, #4]
   15e76:	ae32      	add	r6, sp, #200	; 0xc8
   15e78:	2d10      	cmp	r5, #16
   15e7a:	dce7      	bgt.n	15e4c <_vfprintf_r+0x84c>
   15e7c:	46a3      	mov	fp, r4
   15e7e:	0014      	movs	r4, r2
   15e80:	4642      	mov	r2, r8
   15e82:	1964      	adds	r4, r4, r5
   15e84:	3301      	adds	r3, #1
   15e86:	c624      	stmia	r6!, {r2, r5}
   15e88:	60bc      	str	r4, [r7, #8]
   15e8a:	607b      	str	r3, [r7, #4]
   15e8c:	2b07      	cmp	r3, #7
   15e8e:	dd08      	ble.n	15ea2 <_vfprintf_r+0x8a2>
   15e90:	003a      	movs	r2, r7
   15e92:	4659      	mov	r1, fp
   15e94:	9806      	ldr	r0, [sp, #24]
   15e96:	f003 fb35 	bl	19504 <__sprint_r>
   15e9a:	2800      	cmp	r0, #0
   15e9c:	d000      	beq.n	15ea0 <_vfprintf_r+0x8a0>
   15e9e:	e13f      	b.n	16120 <_vfprintf_r+0xb20>
   15ea0:	68bc      	ldr	r4, [r7, #8]
   15ea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15ea4:	9908      	ldr	r1, [sp, #32]
   15ea6:	428b      	cmp	r3, r1
   15ea8:	da00      	bge.n	15eac <_vfprintf_r+0x8ac>
   15eaa:	000b      	movs	r3, r1
   15eac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   15eae:	4694      	mov	ip, r2
   15eb0:	449c      	add	ip, r3
   15eb2:	4663      	mov	r3, ip
   15eb4:	930a      	str	r3, [sp, #40]	; 0x28
   15eb6:	2c00      	cmp	r4, #0
   15eb8:	d000      	beq.n	15ebc <_vfprintf_r+0x8bc>
   15eba:	e129      	b.n	16110 <_vfprintf_r+0xb10>
   15ebc:	2300      	movs	r3, #0
   15ebe:	ae32      	add	r6, sp, #200	; 0xc8
   15ec0:	607b      	str	r3, [r7, #4]
   15ec2:	f7ff fbeb 	bl	1569c <_vfprintf_r+0x9c>
   15ec6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15ec8:	2b01      	cmp	r3, #1
   15eca:	dc00      	bgt.n	15ece <_vfprintf_r+0x8ce>
   15ecc:	e103      	b.n	160d6 <_vfprintf_r+0xad6>
   15ece:	9b11      	ldr	r3, [sp, #68]	; 0x44
   15ed0:	3401      	adds	r4, #1
   15ed2:	6033      	str	r3, [r6, #0]
   15ed4:	2301      	movs	r3, #1
   15ed6:	6073      	str	r3, [r6, #4]
   15ed8:	687b      	ldr	r3, [r7, #4]
   15eda:	60bc      	str	r4, [r7, #8]
   15edc:	3301      	adds	r3, #1
   15ede:	607b      	str	r3, [r7, #4]
   15ee0:	2b07      	cmp	r3, #7
   15ee2:	dd00      	ble.n	15ee6 <_vfprintf_r+0x8e6>
   15ee4:	e2ef      	b.n	164c6 <_vfprintf_r+0xec6>
   15ee6:	3608      	adds	r6, #8
   15ee8:	9a18      	ldr	r2, [sp, #96]	; 0x60
   15eea:	3301      	adds	r3, #1
   15eec:	6032      	str	r2, [r6, #0]
   15eee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   15ef0:	4698      	mov	r8, r3
   15ef2:	4694      	mov	ip, r2
   15ef4:	4464      	add	r4, ip
   15ef6:	6072      	str	r2, [r6, #4]
   15ef8:	60bc      	str	r4, [r7, #8]
   15efa:	607b      	str	r3, [r7, #4]
   15efc:	2b07      	cmp	r3, #7
   15efe:	dd00      	ble.n	15f02 <_vfprintf_r+0x902>
   15f00:	e318      	b.n	16534 <_vfprintf_r+0xf34>
   15f02:	3608      	adds	r6, #8
   15f04:	2200      	movs	r2, #0
   15f06:	2300      	movs	r3, #0
   15f08:	9816      	ldr	r0, [sp, #88]	; 0x58
   15f0a:	9915      	ldr	r1, [sp, #84]	; 0x54
   15f0c:	f7fe fd1e 	bl	1494c <__aeabi_dcmpeq>
   15f10:	2800      	cmp	r0, #0
   15f12:	d000      	beq.n	15f16 <_vfprintf_r+0x916>
   15f14:	e1f4      	b.n	16300 <_vfprintf_r+0xd00>
   15f16:	9d11      	ldr	r5, [sp, #68]	; 0x44
   15f18:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15f1a:	3501      	adds	r5, #1
   15f1c:	3b01      	subs	r3, #1
   15f1e:	6035      	str	r5, [r6, #0]
   15f20:	6073      	str	r3, [r6, #4]
   15f22:	18e4      	adds	r4, r4, r3
   15f24:	2301      	movs	r3, #1
   15f26:	469c      	mov	ip, r3
   15f28:	44e0      	add	r8, ip
   15f2a:	4643      	mov	r3, r8
   15f2c:	60bc      	str	r4, [r7, #8]
   15f2e:	607b      	str	r3, [r7, #4]
   15f30:	2b07      	cmp	r3, #7
   15f32:	dd00      	ble.n	15f36 <_vfprintf_r+0x936>
   15f34:	e0e0      	b.n	160f8 <_vfprintf_r+0xaf8>
   15f36:	3608      	adds	r6, #8
   15f38:	ab21      	add	r3, sp, #132	; 0x84
   15f3a:	6033      	str	r3, [r6, #0]
   15f3c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   15f3e:	469c      	mov	ip, r3
   15f40:	6073      	str	r3, [r6, #4]
   15f42:	4643      	mov	r3, r8
   15f44:	4464      	add	r4, ip
   15f46:	3301      	adds	r3, #1
   15f48:	60bc      	str	r4, [r7, #8]
   15f4a:	607b      	str	r3, [r7, #4]
   15f4c:	2b07      	cmp	r3, #7
   15f4e:	dc00      	bgt.n	15f52 <_vfprintf_r+0x952>
   15f50:	e758      	b.n	15e04 <_vfprintf_r+0x804>
   15f52:	003a      	movs	r2, r7
   15f54:	4659      	mov	r1, fp
   15f56:	9806      	ldr	r0, [sp, #24]
   15f58:	f003 fad4 	bl	19504 <__sprint_r>
   15f5c:	2800      	cmp	r0, #0
   15f5e:	d000      	beq.n	15f62 <_vfprintf_r+0x962>
   15f60:	e0de      	b.n	16120 <_vfprintf_r+0xb20>
   15f62:	68bc      	ldr	r4, [r7, #8]
   15f64:	ae32      	add	r6, sp, #200	; 0xc8
   15f66:	e74e      	b.n	15e06 <_vfprintf_r+0x806>
   15f68:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15f6a:	2b65      	cmp	r3, #101	; 0x65
   15f6c:	ddab      	ble.n	15ec6 <_vfprintf_r+0x8c6>
   15f6e:	2200      	movs	r2, #0
   15f70:	2300      	movs	r3, #0
   15f72:	9816      	ldr	r0, [sp, #88]	; 0x58
   15f74:	9915      	ldr	r1, [sp, #84]	; 0x54
   15f76:	f7fe fce9 	bl	1494c <__aeabi_dcmpeq>
   15f7a:	2800      	cmp	r0, #0
   15f7c:	d100      	bne.n	15f80 <_vfprintf_r+0x980>
   15f7e:	e134      	b.n	161ea <_vfprintf_r+0xbea>
   15f80:	4b85      	ldr	r3, [pc, #532]	; (16198 <_vfprintf_r+0xb98>)
   15f82:	3401      	adds	r4, #1
   15f84:	6033      	str	r3, [r6, #0]
   15f86:	2301      	movs	r3, #1
   15f88:	6073      	str	r3, [r6, #4]
   15f8a:	687b      	ldr	r3, [r7, #4]
   15f8c:	60bc      	str	r4, [r7, #8]
   15f8e:	3301      	adds	r3, #1
   15f90:	607b      	str	r3, [r7, #4]
   15f92:	2b07      	cmp	r3, #7
   15f94:	dd00      	ble.n	15f98 <_vfprintf_r+0x998>
   15f96:	e3dc      	b.n	16752 <_vfprintf_r+0x1152>
   15f98:	3608      	adds	r6, #8
   15f9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15f9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   15f9e:	4293      	cmp	r3, r2
   15fa0:	db03      	blt.n	15faa <_vfprintf_r+0x9aa>
   15fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15fa4:	07db      	lsls	r3, r3, #31
   15fa6:	d400      	bmi.n	15faa <_vfprintf_r+0x9aa>
   15fa8:	e3b7      	b.n	1671a <_vfprintf_r+0x111a>
   15faa:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15fac:	68ba      	ldr	r2, [r7, #8]
   15fae:	6033      	str	r3, [r6, #0]
   15fb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15fb2:	469c      	mov	ip, r3
   15fb4:	6073      	str	r3, [r6, #4]
   15fb6:	687b      	ldr	r3, [r7, #4]
   15fb8:	4462      	add	r2, ip
   15fba:	3301      	adds	r3, #1
   15fbc:	0014      	movs	r4, r2
   15fbe:	60ba      	str	r2, [r7, #8]
   15fc0:	607b      	str	r3, [r7, #4]
   15fc2:	2b07      	cmp	r3, #7
   15fc4:	dd01      	ble.n	15fca <_vfprintf_r+0x9ca>
   15fc6:	f000 fc19 	bl	167fc <_vfprintf_r+0x11fc>
   15fca:	3608      	adds	r6, #8
   15fcc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15fce:	1e5d      	subs	r5, r3, #1
   15fd0:	2d00      	cmp	r5, #0
   15fd2:	dc00      	bgt.n	15fd6 <_vfprintf_r+0x9d6>
   15fd4:	e717      	b.n	15e06 <_vfprintf_r+0x806>
   15fd6:	4a71      	ldr	r2, [pc, #452]	; (1619c <_vfprintf_r+0xb9c>)
   15fd8:	687b      	ldr	r3, [r7, #4]
   15fda:	4691      	mov	r9, r2
   15fdc:	2d10      	cmp	r5, #16
   15fde:	dc00      	bgt.n	15fe2 <_vfprintf_r+0x9e2>
   15fe0:	e1c3      	b.n	1636a <_vfprintf_r+0xd6a>
   15fe2:	2210      	movs	r2, #16
   15fe4:	4690      	mov	r8, r2
   15fe6:	0022      	movs	r2, r4
   15fe8:	464c      	mov	r4, r9
   15fea:	46d9      	mov	r9, fp
   15fec:	e004      	b.n	15ff8 <_vfprintf_r+0x9f8>
   15fee:	3608      	adds	r6, #8
   15ff0:	3d10      	subs	r5, #16
   15ff2:	2d10      	cmp	r5, #16
   15ff4:	dc00      	bgt.n	15ff8 <_vfprintf_r+0x9f8>
   15ff6:	e37c      	b.n	166f2 <_vfprintf_r+0x10f2>
   15ff8:	4641      	mov	r1, r8
   15ffa:	3210      	adds	r2, #16
   15ffc:	3301      	adds	r3, #1
   15ffe:	6034      	str	r4, [r6, #0]
   16000:	6071      	str	r1, [r6, #4]
   16002:	60ba      	str	r2, [r7, #8]
   16004:	607b      	str	r3, [r7, #4]
   16006:	2b07      	cmp	r3, #7
   16008:	ddf1      	ble.n	15fee <_vfprintf_r+0x9ee>
   1600a:	003a      	movs	r2, r7
   1600c:	4649      	mov	r1, r9
   1600e:	9806      	ldr	r0, [sp, #24]
   16010:	f003 fa78 	bl	19504 <__sprint_r>
   16014:	2800      	cmp	r0, #0
   16016:	d10b      	bne.n	16030 <_vfprintf_r+0xa30>
   16018:	68ba      	ldr	r2, [r7, #8]
   1601a:	687b      	ldr	r3, [r7, #4]
   1601c:	ae32      	add	r6, sp, #200	; 0xc8
   1601e:	e7e7      	b.n	15ff0 <_vfprintf_r+0x9f0>
   16020:	68bb      	ldr	r3, [r7, #8]
   16022:	46d9      	mov	r9, fp
   16024:	2b00      	cmp	r3, #0
   16026:	d001      	beq.n	1602c <_vfprintf_r+0xa2c>
   16028:	f000 fd4c 	bl	16ac4 <_vfprintf_r+0x14c4>
   1602c:	2300      	movs	r3, #0
   1602e:	607b      	str	r3, [r7, #4]
   16030:	464b      	mov	r3, r9
   16032:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   16034:	07db      	lsls	r3, r3, #31
   16036:	d40d      	bmi.n	16054 <_vfprintf_r+0xa54>
   16038:	464b      	mov	r3, r9
   1603a:	899b      	ldrh	r3, [r3, #12]
   1603c:	059a      	lsls	r2, r3, #22
   1603e:	d505      	bpl.n	1604c <_vfprintf_r+0xa4c>
   16040:	065b      	lsls	r3, r3, #25
   16042:	d401      	bmi.n	16048 <_vfprintf_r+0xa48>
   16044:	f7ff fb8d 	bl	15762 <_vfprintf_r+0x162>
   16048:	f7ff fb88 	bl	1575c <_vfprintf_r+0x15c>
   1604c:	464b      	mov	r3, r9
   1604e:	6d98      	ldr	r0, [r3, #88]	; 0x58
   16050:	f002 fbb8 	bl	187c4 <__retarget_lock_release_recursive>
   16054:	464b      	mov	r3, r9
   16056:	899b      	ldrh	r3, [r3, #12]
   16058:	e7f2      	b.n	16040 <_vfprintf_r+0xa40>
   1605a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1605c:	9a08      	ldr	r2, [sp, #32]
   1605e:	1a9d      	subs	r5, r3, r2
   16060:	2d00      	cmp	r5, #0
   16062:	dc00      	bgt.n	16066 <_vfprintf_r+0xa66>
   16064:	e685      	b.n	15d72 <_vfprintf_r+0x772>
   16066:	4a4d      	ldr	r2, [pc, #308]	; (1619c <_vfprintf_r+0xb9c>)
   16068:	687b      	ldr	r3, [r7, #4]
   1606a:	4691      	mov	r9, r2
   1606c:	2d10      	cmp	r5, #16
   1606e:	dd24      	ble.n	160ba <_vfprintf_r+0xaba>
   16070:	2210      	movs	r2, #16
   16072:	0021      	movs	r1, r4
   16074:	4690      	mov	r8, r2
   16076:	465c      	mov	r4, fp
   16078:	0032      	movs	r2, r6
   1607a:	464e      	mov	r6, r9
   1607c:	e003      	b.n	16086 <_vfprintf_r+0xa86>
   1607e:	3d10      	subs	r5, #16
   16080:	3208      	adds	r2, #8
   16082:	2d10      	cmp	r5, #16
   16084:	dd15      	ble.n	160b2 <_vfprintf_r+0xab2>
   16086:	4640      	mov	r0, r8
   16088:	3110      	adds	r1, #16
   1608a:	3301      	adds	r3, #1
   1608c:	6016      	str	r6, [r2, #0]
   1608e:	6050      	str	r0, [r2, #4]
   16090:	60b9      	str	r1, [r7, #8]
   16092:	607b      	str	r3, [r7, #4]
   16094:	2b07      	cmp	r3, #7
   16096:	ddf2      	ble.n	1607e <_vfprintf_r+0xa7e>
   16098:	003a      	movs	r2, r7
   1609a:	0021      	movs	r1, r4
   1609c:	9806      	ldr	r0, [sp, #24]
   1609e:	f003 fa31 	bl	19504 <__sprint_r>
   160a2:	2800      	cmp	r0, #0
   160a4:	d115      	bne.n	160d2 <_vfprintf_r+0xad2>
   160a6:	3d10      	subs	r5, #16
   160a8:	68b9      	ldr	r1, [r7, #8]
   160aa:	687b      	ldr	r3, [r7, #4]
   160ac:	aa32      	add	r2, sp, #200	; 0xc8
   160ae:	2d10      	cmp	r5, #16
   160b0:	dce9      	bgt.n	16086 <_vfprintf_r+0xa86>
   160b2:	46a3      	mov	fp, r4
   160b4:	46b1      	mov	r9, r6
   160b6:	000c      	movs	r4, r1
   160b8:	0016      	movs	r6, r2
   160ba:	464a      	mov	r2, r9
   160bc:	1964      	adds	r4, r4, r5
   160be:	3301      	adds	r3, #1
   160c0:	6032      	str	r2, [r6, #0]
   160c2:	6075      	str	r5, [r6, #4]
   160c4:	60bc      	str	r4, [r7, #8]
   160c6:	607b      	str	r3, [r7, #4]
   160c8:	2b07      	cmp	r3, #7
   160ca:	dd00      	ble.n	160ce <_vfprintf_r+0xace>
   160cc:	e263      	b.n	16596 <_vfprintf_r+0xf96>
   160ce:	3608      	adds	r6, #8
   160d0:	e64f      	b.n	15d72 <_vfprintf_r+0x772>
   160d2:	46a1      	mov	r9, r4
   160d4:	e7ac      	b.n	16030 <_vfprintf_r+0xa30>
   160d6:	2301      	movs	r3, #1
   160d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   160da:	4213      	tst	r3, r2
   160dc:	d000      	beq.n	160e0 <_vfprintf_r+0xae0>
   160de:	e6f6      	b.n	15ece <_vfprintf_r+0x8ce>
   160e0:	6073      	str	r3, [r6, #4]
   160e2:	687b      	ldr	r3, [r7, #4]
   160e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   160e6:	3301      	adds	r3, #1
   160e8:	3401      	adds	r4, #1
   160ea:	6032      	str	r2, [r6, #0]
   160ec:	60bc      	str	r4, [r7, #8]
   160ee:	4698      	mov	r8, r3
   160f0:	607b      	str	r3, [r7, #4]
   160f2:	2b07      	cmp	r3, #7
   160f4:	dc00      	bgt.n	160f8 <_vfprintf_r+0xaf8>
   160f6:	e71e      	b.n	15f36 <_vfprintf_r+0x936>
   160f8:	003a      	movs	r2, r7
   160fa:	4659      	mov	r1, fp
   160fc:	9806      	ldr	r0, [sp, #24]
   160fe:	f003 fa01 	bl	19504 <__sprint_r>
   16102:	2800      	cmp	r0, #0
   16104:	d10c      	bne.n	16120 <_vfprintf_r+0xb20>
   16106:	687b      	ldr	r3, [r7, #4]
   16108:	68bc      	ldr	r4, [r7, #8]
   1610a:	4698      	mov	r8, r3
   1610c:	ae32      	add	r6, sp, #200	; 0xc8
   1610e:	e713      	b.n	15f38 <_vfprintf_r+0x938>
   16110:	003a      	movs	r2, r7
   16112:	4659      	mov	r1, fp
   16114:	9806      	ldr	r0, [sp, #24]
   16116:	f003 f9f5 	bl	19504 <__sprint_r>
   1611a:	2800      	cmp	r0, #0
   1611c:	d100      	bne.n	16120 <_vfprintf_r+0xb20>
   1611e:	e6cd      	b.n	15ebc <_vfprintf_r+0x8bc>
   16120:	46d9      	mov	r9, fp
   16122:	e785      	b.n	16030 <_vfprintf_r+0xa30>
   16124:	9c09      	ldr	r4, [sp, #36]	; 0x24
   16126:	2b01      	cmp	r3, #1
   16128:	d100      	bne.n	1612c <_vfprintf_r+0xb2c>
   1612a:	e148      	b.n	163be <_vfprintf_r+0xdbe>
   1612c:	2b02      	cmp	r3, #2
   1612e:	d123      	bne.n	16178 <_vfprintf_r+0xb78>
   16130:	9409      	str	r4, [sp, #36]	; 0x24
   16132:	2300      	movs	r3, #0
   16134:	2400      	movs	r4, #0
   16136:	930c      	str	r3, [sp, #48]	; 0x30
   16138:	940d      	str	r4, [sp, #52]	; 0x34
   1613a:	e4a1      	b.n	15a80 <_vfprintf_r+0x480>
   1613c:	003a      	movs	r2, r7
   1613e:	4659      	mov	r1, fp
   16140:	9806      	ldr	r0, [sp, #24]
   16142:	f003 f9df 	bl	19504 <__sprint_r>
   16146:	2800      	cmp	r0, #0
   16148:	d1ea      	bne.n	16120 <_vfprintf_r+0xb20>
   1614a:	68bc      	ldr	r4, [r7, #8]
   1614c:	ae32      	add	r6, sp, #200	; 0xc8
   1614e:	e648      	b.n	15de2 <_vfprintf_r+0x7e2>
   16150:	003a      	movs	r2, r7
   16152:	4659      	mov	r1, fp
   16154:	9806      	ldr	r0, [sp, #24]
   16156:	f003 f9d5 	bl	19504 <__sprint_r>
   1615a:	2800      	cmp	r0, #0
   1615c:	d1e0      	bne.n	16120 <_vfprintf_r+0xb20>
   1615e:	68bc      	ldr	r4, [r7, #8]
   16160:	ae32      	add	r6, sp, #200	; 0xc8
   16162:	e5f2      	b.n	15d4a <_vfprintf_r+0x74a>
   16164:	003a      	movs	r2, r7
   16166:	4659      	mov	r1, fp
   16168:	9806      	ldr	r0, [sp, #24]
   1616a:	f003 f9cb 	bl	19504 <__sprint_r>
   1616e:	2800      	cmp	r0, #0
   16170:	d1d6      	bne.n	16120 <_vfprintf_r+0xb20>
   16172:	68bc      	ldr	r4, [r7, #8]
   16174:	ae32      	add	r6, sp, #200	; 0xc8
   16176:	e5f8      	b.n	15d6a <_vfprintf_r+0x76a>
   16178:	9409      	str	r4, [sp, #36]	; 0x24
   1617a:	2300      	movs	r3, #0
   1617c:	2400      	movs	r4, #0
   1617e:	930c      	str	r3, [sp, #48]	; 0x30
   16180:	940d      	str	r4, [sp, #52]	; 0x34
   16182:	980c      	ldr	r0, [sp, #48]	; 0x30
   16184:	990d      	ldr	r1, [sp, #52]	; 0x34
   16186:	4653      	mov	r3, sl
   16188:	aa32      	add	r2, sp, #200	; 0xc8
   1618a:	4691      	mov	r9, r2
   1618c:	9308      	str	r3, [sp, #32]
   1618e:	46b2      	mov	sl, r6
   16190:	e007      	b.n	161a2 <_vfprintf_r+0xba2>
   16192:	46c0      	nop			; (mov r8, r8)
   16194:	0001b414 	.word	0x0001b414
   16198:	0001ae80 	.word	0x0001ae80
   1619c:	0001b424 	.word	0x0001b424
   161a0:	46a1      	mov	r9, r4
   161a2:	074a      	lsls	r2, r1, #29
   161a4:	4694      	mov	ip, r2
   161a6:	464b      	mov	r3, r9
   161a8:	4665      	mov	r5, ip
   161aa:	1e5c      	subs	r4, r3, #1
   161ac:	08c6      	lsrs	r6, r0, #3
   161ae:	2307      	movs	r3, #7
   161b0:	08ca      	lsrs	r2, r1, #3
   161b2:	4335      	orrs	r5, r6
   161b4:	0011      	movs	r1, r2
   161b6:	002a      	movs	r2, r5
   161b8:	4003      	ands	r3, r0
   161ba:	3330      	adds	r3, #48	; 0x30
   161bc:	7023      	strb	r3, [r4, #0]
   161be:	0028      	movs	r0, r5
   161c0:	430a      	orrs	r2, r1
   161c2:	d1ed      	bne.n	161a0 <_vfprintf_r+0xba0>
   161c4:	900c      	str	r0, [sp, #48]	; 0x30
   161c6:	910d      	str	r1, [sp, #52]	; 0x34
   161c8:	9908      	ldr	r1, [sp, #32]
   161ca:	4656      	mov	r6, sl
   161cc:	468a      	mov	sl, r1
   161ce:	9909      	ldr	r1, [sp, #36]	; 0x24
   161d0:	464a      	mov	r2, r9
   161d2:	9411      	str	r4, [sp, #68]	; 0x44
   161d4:	07c9      	lsls	r1, r1, #31
   161d6:	d500      	bpl.n	161da <_vfprintf_r+0xbda>
   161d8:	e0e0      	b.n	1639c <_vfprintf_r+0xd9c>
   161da:	ab32      	add	r3, sp, #200	; 0xc8
   161dc:	1b1b      	subs	r3, r3, r4
   161de:	930e      	str	r3, [sp, #56]	; 0x38
   161e0:	f7ff fb7b 	bl	158da <_vfprintf_r+0x2da>
   161e4:	9c07      	ldr	r4, [sp, #28]
   161e6:	f7ff fa7d 	bl	156e4 <_vfprintf_r+0xe4>
   161ea:	981f      	ldr	r0, [sp, #124]	; 0x7c
   161ec:	2800      	cmp	r0, #0
   161ee:	dc00      	bgt.n	161f2 <_vfprintf_r+0xbf2>
   161f0:	e2b9      	b.n	16766 <_vfprintf_r+0x1166>
   161f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   161f4:	9914      	ldr	r1, [sp, #80]	; 0x50
   161f6:	0013      	movs	r3, r2
   161f8:	4690      	mov	r8, r2
   161fa:	428b      	cmp	r3, r1
   161fc:	dd00      	ble.n	16200 <_vfprintf_r+0xc00>
   161fe:	4688      	mov	r8, r1
   16200:	4643      	mov	r3, r8
   16202:	2b00      	cmp	r3, #0
   16204:	dd0c      	ble.n	16220 <_vfprintf_r+0xc20>
   16206:	9b11      	ldr	r3, [sp, #68]	; 0x44
   16208:	4444      	add	r4, r8
   1620a:	6033      	str	r3, [r6, #0]
   1620c:	4643      	mov	r3, r8
   1620e:	6073      	str	r3, [r6, #4]
   16210:	687b      	ldr	r3, [r7, #4]
   16212:	60bc      	str	r4, [r7, #8]
   16214:	3301      	adds	r3, #1
   16216:	607b      	str	r3, [r7, #4]
   16218:	2b07      	cmp	r3, #7
   1621a:	dd00      	ble.n	1621e <_vfprintf_r+0xc1e>
   1621c:	e389      	b.n	16932 <_vfprintf_r+0x1332>
   1621e:	3608      	adds	r6, #8
   16220:	4643      	mov	r3, r8
   16222:	43db      	mvns	r3, r3
   16224:	4642      	mov	r2, r8
   16226:	17db      	asrs	r3, r3, #31
   16228:	4013      	ands	r3, r2
   1622a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1622c:	1ad3      	subs	r3, r2, r3
   1622e:	4698      	mov	r8, r3
   16230:	2b00      	cmp	r3, #0
   16232:	dc00      	bgt.n	16236 <_vfprintf_r+0xc36>
   16234:	e0eb      	b.n	1640e <_vfprintf_r+0xe0e>
   16236:	2b10      	cmp	r3, #16
   16238:	dc01      	bgt.n	1623e <_vfprintf_r+0xc3e>
   1623a:	f000 fcd9 	bl	16bf0 <_vfprintf_r+0x15f0>
   1623e:	4adc      	ldr	r2, [pc, #880]	; (165b0 <_vfprintf_r+0xfb0>)
   16240:	687b      	ldr	r3, [r7, #4]
   16242:	4691      	mov	r9, r2
   16244:	2210      	movs	r2, #16
   16246:	464d      	mov	r5, r9
   16248:	4692      	mov	sl, r2
   1624a:	0022      	movs	r2, r4
   1624c:	4644      	mov	r4, r8
   1624e:	46d8      	mov	r8, fp
   16250:	e004      	b.n	1625c <_vfprintf_r+0xc5c>
   16252:	3608      	adds	r6, #8
   16254:	3c10      	subs	r4, #16
   16256:	2c10      	cmp	r4, #16
   16258:	dc00      	bgt.n	1625c <_vfprintf_r+0xc5c>
   1625a:	e0bf      	b.n	163dc <_vfprintf_r+0xddc>
   1625c:	4651      	mov	r1, sl
   1625e:	3210      	adds	r2, #16
   16260:	3301      	adds	r3, #1
   16262:	6035      	str	r5, [r6, #0]
   16264:	6071      	str	r1, [r6, #4]
   16266:	60ba      	str	r2, [r7, #8]
   16268:	607b      	str	r3, [r7, #4]
   1626a:	2b07      	cmp	r3, #7
   1626c:	ddf1      	ble.n	16252 <_vfprintf_r+0xc52>
   1626e:	003a      	movs	r2, r7
   16270:	4641      	mov	r1, r8
   16272:	9806      	ldr	r0, [sp, #24]
   16274:	f003 f946 	bl	19504 <__sprint_r>
   16278:	2800      	cmp	r0, #0
   1627a:	d000      	beq.n	1627e <_vfprintf_r+0xc7e>
   1627c:	e3b6      	b.n	169ec <_vfprintf_r+0x13ec>
   1627e:	68ba      	ldr	r2, [r7, #8]
   16280:	687b      	ldr	r3, [r7, #4]
   16282:	ae32      	add	r6, sp, #200	; 0xc8
   16284:	e7e6      	b.n	16254 <_vfprintf_r+0xc54>
   16286:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16288:	2b00      	cmp	r3, #0
   1628a:	d100      	bne.n	1628e <_vfprintf_r+0xc8e>
   1628c:	e092      	b.n	163b4 <_vfprintf_r+0xdb4>
   1628e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   16290:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   16292:	ab32      	add	r3, sp, #200	; 0xc8
   16294:	46b1      	mov	r9, r6
   16296:	001e      	movs	r6, r3
   16298:	0020      	movs	r0, r4
   1629a:	0029      	movs	r1, r5
   1629c:	220a      	movs	r2, #10
   1629e:	2300      	movs	r3, #0
   162a0:	f7fb fd62 	bl	11d68 <__aeabi_uldivmod>
   162a4:	3e01      	subs	r6, #1
   162a6:	3230      	adds	r2, #48	; 0x30
   162a8:	7032      	strb	r2, [r6, #0]
   162aa:	2300      	movs	r3, #0
   162ac:	0020      	movs	r0, r4
   162ae:	0029      	movs	r1, r5
   162b0:	220a      	movs	r2, #10
   162b2:	f7fb fd59 	bl	11d68 <__aeabi_uldivmod>
   162b6:	0003      	movs	r3, r0
   162b8:	0004      	movs	r4, r0
   162ba:	000d      	movs	r5, r1
   162bc:	430b      	orrs	r3, r1
   162be:	d1eb      	bne.n	16298 <_vfprintf_r+0xc98>
   162c0:	0032      	movs	r2, r6
   162c2:	ab32      	add	r3, sp, #200	; 0xc8
   162c4:	1a9b      	subs	r3, r3, r2
   162c6:	9611      	str	r6, [sp, #68]	; 0x44
   162c8:	940c      	str	r4, [sp, #48]	; 0x30
   162ca:	950d      	str	r5, [sp, #52]	; 0x34
   162cc:	464e      	mov	r6, r9
   162ce:	930e      	str	r3, [sp, #56]	; 0x38
   162d0:	f7ff fb03 	bl	158da <_vfprintf_r+0x2da>
   162d4:	2300      	movs	r3, #0
   162d6:	930e      	str	r3, [sp, #56]	; 0x38
   162d8:	ab32      	add	r3, sp, #200	; 0xc8
   162da:	9311      	str	r3, [sp, #68]	; 0x44
   162dc:	f7ff fafd 	bl	158da <_vfprintf_r+0x2da>
   162e0:	003a      	movs	r2, r7
   162e2:	4659      	mov	r1, fp
   162e4:	9806      	ldr	r0, [sp, #24]
   162e6:	f003 f90d 	bl	19504 <__sprint_r>
   162ea:	2800      	cmp	r0, #0
   162ec:	d000      	beq.n	162f0 <_vfprintf_r+0xcf0>
   162ee:	e717      	b.n	16120 <_vfprintf_r+0xb20>
   162f0:	ab16      	add	r3, sp, #88	; 0x58
   162f2:	7fdb      	ldrb	r3, [r3, #31]
   162f4:	68bc      	ldr	r4, [r7, #8]
   162f6:	4698      	mov	r8, r3
   162f8:	ae32      	add	r6, sp, #200	; 0xc8
   162fa:	e513      	b.n	15d24 <_vfprintf_r+0x724>
   162fc:	46b1      	mov	r9, r6
   162fe:	e697      	b.n	16030 <_vfprintf_r+0xa30>
   16300:	9b14      	ldr	r3, [sp, #80]	; 0x50
   16302:	1e5d      	subs	r5, r3, #1
   16304:	2d00      	cmp	r5, #0
   16306:	dc00      	bgt.n	1630a <_vfprintf_r+0xd0a>
   16308:	e616      	b.n	15f38 <_vfprintf_r+0x938>
   1630a:	4ba9      	ldr	r3, [pc, #676]	; (165b0 <_vfprintf_r+0xfb0>)
   1630c:	4699      	mov	r9, r3
   1630e:	2d10      	cmp	r5, #16
   16310:	dc00      	bgt.n	16314 <_vfprintf_r+0xd14>
   16312:	e10a      	b.n	1652a <_vfprintf_r+0xf2a>
   16314:	2310      	movs	r3, #16
   16316:	0022      	movs	r2, r4
   16318:	469a      	mov	sl, r3
   1631a:	465c      	mov	r4, fp
   1631c:	4643      	mov	r3, r8
   1631e:	e004      	b.n	1632a <_vfprintf_r+0xd2a>
   16320:	3608      	adds	r6, #8
   16322:	3d10      	subs	r5, #16
   16324:	2d10      	cmp	r5, #16
   16326:	dc00      	bgt.n	1632a <_vfprintf_r+0xd2a>
   16328:	e0fc      	b.n	16524 <_vfprintf_r+0xf24>
   1632a:	4649      	mov	r1, r9
   1632c:	6031      	str	r1, [r6, #0]
   1632e:	4651      	mov	r1, sl
   16330:	3210      	adds	r2, #16
   16332:	3301      	adds	r3, #1
   16334:	6071      	str	r1, [r6, #4]
   16336:	60ba      	str	r2, [r7, #8]
   16338:	607b      	str	r3, [r7, #4]
   1633a:	2b07      	cmp	r3, #7
   1633c:	ddf0      	ble.n	16320 <_vfprintf_r+0xd20>
   1633e:	003a      	movs	r2, r7
   16340:	0021      	movs	r1, r4
   16342:	9806      	ldr	r0, [sp, #24]
   16344:	f003 f8de 	bl	19504 <__sprint_r>
   16348:	2800      	cmp	r0, #0
   1634a:	d000      	beq.n	1634e <_vfprintf_r+0xd4e>
   1634c:	e6c1      	b.n	160d2 <_vfprintf_r+0xad2>
   1634e:	68ba      	ldr	r2, [r7, #8]
   16350:	687b      	ldr	r3, [r7, #4]
   16352:	ae32      	add	r6, sp, #200	; 0xc8
   16354:	e7e5      	b.n	16322 <_vfprintf_r+0xd22>
   16356:	990c      	ldr	r1, [sp, #48]	; 0x30
   16358:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1635a:	0008      	movs	r0, r1
   1635c:	4310      	orrs	r0, r2
   1635e:	2302      	movs	r3, #2
   16360:	0002      	movs	r2, r0
   16362:	f7ff fa93 	bl	1588c <_vfprintf_r+0x28c>
   16366:	46a3      	mov	fp, r4
   16368:	0014      	movs	r4, r2
   1636a:	464a      	mov	r2, r9
   1636c:	1964      	adds	r4, r4, r5
   1636e:	3301      	adds	r3, #1
   16370:	6032      	str	r2, [r6, #0]
   16372:	6075      	str	r5, [r6, #4]
   16374:	60bc      	str	r4, [r7, #8]
   16376:	607b      	str	r3, [r7, #4]
   16378:	2b07      	cmp	r3, #7
   1637a:	dc00      	bgt.n	1637e <_vfprintf_r+0xd7e>
   1637c:	e542      	b.n	15e04 <_vfprintf_r+0x804>
   1637e:	e5e8      	b.n	15f52 <_vfprintf_r+0x952>
   16380:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16382:	681a      	ldr	r2, [r3, #0]
   16384:	f7ff fa68 	bl	15858 <_vfprintf_r+0x258>
   16388:	6813      	ldr	r3, [r2, #0]
   1638a:	9308      	str	r3, [sp, #32]
   1638c:	f7ff fb57 	bl	15a3e <_vfprintf_r+0x43e>
   16390:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16392:	681a      	ldr	r2, [r3, #0]
   16394:	e412      	b.n	15bbc <_vfprintf_r+0x5bc>
   16396:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16398:	681a      	ldr	r2, [r3, #0]
   1639a:	e426      	b.n	15bea <_vfprintf_r+0x5ea>
   1639c:	2b30      	cmp	r3, #48	; 0x30
   1639e:	d100      	bne.n	163a2 <_vfprintf_r+0xda2>
   163a0:	e23c      	b.n	1681c <_vfprintf_r+0x121c>
   163a2:	2330      	movs	r3, #48	; 0x30
   163a4:	3a02      	subs	r2, #2
   163a6:	7013      	strb	r3, [r2, #0]
   163a8:	ab32      	add	r3, sp, #200	; 0xc8
   163aa:	1a9b      	subs	r3, r3, r2
   163ac:	930e      	str	r3, [sp, #56]	; 0x38
   163ae:	9211      	str	r2, [sp, #68]	; 0x44
   163b0:	f7ff fa93 	bl	158da <_vfprintf_r+0x2da>
   163b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   163b6:	2b09      	cmp	r3, #9
   163b8:	d900      	bls.n	163bc <_vfprintf_r+0xdbc>
   163ba:	e768      	b.n	1628e <_vfprintf_r+0xc8e>
   163bc:	9c09      	ldr	r4, [sp, #36]	; 0x24
   163be:	2227      	movs	r2, #39	; 0x27
   163c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   163c2:	a928      	add	r1, sp, #160	; 0xa0
   163c4:	3330      	adds	r3, #48	; 0x30
   163c6:	548b      	strb	r3, [r1, r2]
   163c8:	2301      	movs	r3, #1
   163ca:	aa16      	add	r2, sp, #88	; 0x58
   163cc:	4694      	mov	ip, r2
   163ce:	930e      	str	r3, [sp, #56]	; 0x38
   163d0:	336e      	adds	r3, #110	; 0x6e
   163d2:	4463      	add	r3, ip
   163d4:	9409      	str	r4, [sp, #36]	; 0x24
   163d6:	9311      	str	r3, [sp, #68]	; 0x44
   163d8:	f7ff fa7f 	bl	158da <_vfprintf_r+0x2da>
   163dc:	46c3      	mov	fp, r8
   163de:	46a9      	mov	r9, r5
   163e0:	46a0      	mov	r8, r4
   163e2:	0014      	movs	r4, r2
   163e4:	464a      	mov	r2, r9
   163e6:	6032      	str	r2, [r6, #0]
   163e8:	4642      	mov	r2, r8
   163ea:	4444      	add	r4, r8
   163ec:	3301      	adds	r3, #1
   163ee:	6072      	str	r2, [r6, #4]
   163f0:	60bc      	str	r4, [r7, #8]
   163f2:	607b      	str	r3, [r7, #4]
   163f4:	2b07      	cmp	r3, #7
   163f6:	dc00      	bgt.n	163fa <_vfprintf_r+0xdfa>
   163f8:	e18d      	b.n	16716 <_vfprintf_r+0x1116>
   163fa:	003a      	movs	r2, r7
   163fc:	4659      	mov	r1, fp
   163fe:	9806      	ldr	r0, [sp, #24]
   16400:	f003 f880 	bl	19504 <__sprint_r>
   16404:	2800      	cmp	r0, #0
   16406:	d000      	beq.n	1640a <_vfprintf_r+0xe0a>
   16408:	e68a      	b.n	16120 <_vfprintf_r+0xb20>
   1640a:	68bc      	ldr	r4, [r7, #8]
   1640c:	ae32      	add	r6, sp, #200	; 0xc8
   1640e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16410:	9a14      	ldr	r2, [sp, #80]	; 0x50
   16412:	4293      	cmp	r3, r2
   16414:	db00      	blt.n	16418 <_vfprintf_r+0xe18>
   16416:	e179      	b.n	1670c <_vfprintf_r+0x110c>
   16418:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1641a:	6032      	str	r2, [r6, #0]
   1641c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1641e:	4694      	mov	ip, r2
   16420:	6072      	str	r2, [r6, #4]
   16422:	687a      	ldr	r2, [r7, #4]
   16424:	4464      	add	r4, ip
   16426:	3201      	adds	r2, #1
   16428:	60bc      	str	r4, [r7, #8]
   1642a:	607a      	str	r2, [r7, #4]
   1642c:	2a07      	cmp	r2, #7
   1642e:	dd00      	ble.n	16432 <_vfprintf_r+0xe32>
   16430:	e176      	b.n	16720 <_vfprintf_r+0x1120>
   16432:	3608      	adds	r6, #8
   16434:	9a14      	ldr	r2, [sp, #80]	; 0x50
   16436:	9913      	ldr	r1, [sp, #76]	; 0x4c
   16438:	1ad3      	subs	r3, r2, r3
   1643a:	1a52      	subs	r2, r2, r1
   1643c:	4690      	mov	r8, r2
   1643e:	429a      	cmp	r2, r3
   16440:	dd00      	ble.n	16444 <_vfprintf_r+0xe44>
   16442:	4698      	mov	r8, r3
   16444:	4642      	mov	r2, r8
   16446:	2a00      	cmp	r2, #0
   16448:	dd0f      	ble.n	1646a <_vfprintf_r+0xe6a>
   1644a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1644c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1644e:	468c      	mov	ip, r1
   16450:	4462      	add	r2, ip
   16452:	6032      	str	r2, [r6, #0]
   16454:	4642      	mov	r2, r8
   16456:	6072      	str	r2, [r6, #4]
   16458:	687a      	ldr	r2, [r7, #4]
   1645a:	4444      	add	r4, r8
   1645c:	3201      	adds	r2, #1
   1645e:	60bc      	str	r4, [r7, #8]
   16460:	607a      	str	r2, [r7, #4]
   16462:	2a07      	cmp	r2, #7
   16464:	dd00      	ble.n	16468 <_vfprintf_r+0xe68>
   16466:	e289      	b.n	1697c <_vfprintf_r+0x137c>
   16468:	3608      	adds	r6, #8
   1646a:	4642      	mov	r2, r8
   1646c:	43d5      	mvns	r5, r2
   1646e:	17ed      	asrs	r5, r5, #31
   16470:	4015      	ands	r5, r2
   16472:	1b5d      	subs	r5, r3, r5
   16474:	2d00      	cmp	r5, #0
   16476:	dc00      	bgt.n	1647a <_vfprintf_r+0xe7a>
   16478:	e4c5      	b.n	15e06 <_vfprintf_r+0x806>
   1647a:	4a4d      	ldr	r2, [pc, #308]	; (165b0 <_vfprintf_r+0xfb0>)
   1647c:	687b      	ldr	r3, [r7, #4]
   1647e:	4691      	mov	r9, r2
   16480:	2d10      	cmp	r5, #16
   16482:	dc00      	bgt.n	16486 <_vfprintf_r+0xe86>
   16484:	e771      	b.n	1636a <_vfprintf_r+0xd6a>
   16486:	2210      	movs	r2, #16
   16488:	4690      	mov	r8, r2
   1648a:	0022      	movs	r2, r4
   1648c:	465c      	mov	r4, fp
   1648e:	e004      	b.n	1649a <_vfprintf_r+0xe9a>
   16490:	3608      	adds	r6, #8
   16492:	3d10      	subs	r5, #16
   16494:	2d10      	cmp	r5, #16
   16496:	dc00      	bgt.n	1649a <_vfprintf_r+0xe9a>
   16498:	e765      	b.n	16366 <_vfprintf_r+0xd66>
   1649a:	4649      	mov	r1, r9
   1649c:	6031      	str	r1, [r6, #0]
   1649e:	4641      	mov	r1, r8
   164a0:	3210      	adds	r2, #16
   164a2:	3301      	adds	r3, #1
   164a4:	6071      	str	r1, [r6, #4]
   164a6:	60ba      	str	r2, [r7, #8]
   164a8:	607b      	str	r3, [r7, #4]
   164aa:	2b07      	cmp	r3, #7
   164ac:	ddf0      	ble.n	16490 <_vfprintf_r+0xe90>
   164ae:	003a      	movs	r2, r7
   164b0:	0021      	movs	r1, r4
   164b2:	9806      	ldr	r0, [sp, #24]
   164b4:	f003 f826 	bl	19504 <__sprint_r>
   164b8:	2800      	cmp	r0, #0
   164ba:	d000      	beq.n	164be <_vfprintf_r+0xebe>
   164bc:	e609      	b.n	160d2 <_vfprintf_r+0xad2>
   164be:	68ba      	ldr	r2, [r7, #8]
   164c0:	687b      	ldr	r3, [r7, #4]
   164c2:	ae32      	add	r6, sp, #200	; 0xc8
   164c4:	e7e5      	b.n	16492 <_vfprintf_r+0xe92>
   164c6:	003a      	movs	r2, r7
   164c8:	4659      	mov	r1, fp
   164ca:	9806      	ldr	r0, [sp, #24]
   164cc:	f003 f81a 	bl	19504 <__sprint_r>
   164d0:	2800      	cmp	r0, #0
   164d2:	d000      	beq.n	164d6 <_vfprintf_r+0xed6>
   164d4:	e624      	b.n	16120 <_vfprintf_r+0xb20>
   164d6:	68bc      	ldr	r4, [r7, #8]
   164d8:	687b      	ldr	r3, [r7, #4]
   164da:	ae32      	add	r6, sp, #200	; 0xc8
   164dc:	e504      	b.n	15ee8 <_vfprintf_r+0x8e8>
   164de:	2307      	movs	r3, #7
   164e0:	3207      	adds	r2, #7
   164e2:	439a      	bics	r2, r3
   164e4:	3301      	adds	r3, #1
   164e6:	469c      	mov	ip, r3
   164e8:	4494      	add	ip, r2
   164ea:	4663      	mov	r3, ip
   164ec:	930f      	str	r3, [sp, #60]	; 0x3c
   164ee:	6853      	ldr	r3, [r2, #4]
   164f0:	6812      	ldr	r2, [r2, #0]
   164f2:	930d      	str	r3, [sp, #52]	; 0x34
   164f4:	920c      	str	r2, [sp, #48]	; 0x30
   164f6:	f7ff faa7 	bl	15a48 <_vfprintf_r+0x448>
   164fa:	2207      	movs	r2, #7
   164fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   164fe:	3307      	adds	r3, #7
   16500:	4393      	bics	r3, r2
   16502:	3201      	adds	r2, #1
   16504:	4694      	mov	ip, r2
   16506:	449c      	add	ip, r3
   16508:	4662      	mov	r2, ip
   1650a:	920f      	str	r2, [sp, #60]	; 0x3c
   1650c:	681a      	ldr	r2, [r3, #0]
   1650e:	685b      	ldr	r3, [r3, #4]
   16510:	0011      	movs	r1, r2
   16512:	001a      	movs	r2, r3
   16514:	0008      	movs	r0, r1
   16516:	4310      	orrs	r0, r2
   16518:	910c      	str	r1, [sp, #48]	; 0x30
   1651a:	920d      	str	r2, [sp, #52]	; 0x34
   1651c:	2300      	movs	r3, #0
   1651e:	0002      	movs	r2, r0
   16520:	f7ff f9b4 	bl	1588c <_vfprintf_r+0x28c>
   16524:	46a3      	mov	fp, r4
   16526:	4698      	mov	r8, r3
   16528:	0014      	movs	r4, r2
   1652a:	464b      	mov	r3, r9
   1652c:	6075      	str	r5, [r6, #4]
   1652e:	6033      	str	r3, [r6, #0]
   16530:	1964      	adds	r4, r4, r5
   16532:	e4f7      	b.n	15f24 <_vfprintf_r+0x924>
   16534:	003a      	movs	r2, r7
   16536:	4659      	mov	r1, fp
   16538:	9806      	ldr	r0, [sp, #24]
   1653a:	f002 ffe3 	bl	19504 <__sprint_r>
   1653e:	2800      	cmp	r0, #0
   16540:	d000      	beq.n	16544 <_vfprintf_r+0xf44>
   16542:	e5ed      	b.n	16120 <_vfprintf_r+0xb20>
   16544:	687b      	ldr	r3, [r7, #4]
   16546:	68bc      	ldr	r4, [r7, #8]
   16548:	4698      	mov	r8, r3
   1654a:	ae32      	add	r6, sp, #200	; 0xc8
   1654c:	e4da      	b.n	15f04 <_vfprintf_r+0x904>
   1654e:	2207      	movs	r2, #7
   16550:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16552:	3307      	adds	r3, #7
   16554:	4393      	bics	r3, r2
   16556:	3201      	adds	r2, #1
   16558:	4694      	mov	ip, r2
   1655a:	449c      	add	ip, r3
   1655c:	4662      	mov	r2, ip
   1655e:	920f      	str	r2, [sp, #60]	; 0x3c
   16560:	681a      	ldr	r2, [r3, #0]
   16562:	685b      	ldr	r3, [r3, #4]
   16564:	0011      	movs	r1, r2
   16566:	001a      	movs	r2, r3
   16568:	0008      	movs	r0, r1
   1656a:	4310      	orrs	r0, r2
   1656c:	910c      	str	r1, [sp, #48]	; 0x30
   1656e:	920d      	str	r2, [sp, #52]	; 0x34
   16570:	2301      	movs	r3, #1
   16572:	0002      	movs	r2, r0
   16574:	f7ff f98a 	bl	1588c <_vfprintf_r+0x28c>
   16578:	2207      	movs	r2, #7
   1657a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1657c:	3307      	adds	r3, #7
   1657e:	4393      	bics	r3, r2
   16580:	3201      	adds	r2, #1
   16582:	4694      	mov	ip, r2
   16584:	449c      	add	ip, r3
   16586:	4662      	mov	r2, ip
   16588:	920f      	str	r2, [sp, #60]	; 0x3c
   1658a:	681a      	ldr	r2, [r3, #0]
   1658c:	685b      	ldr	r3, [r3, #4]
   1658e:	920c      	str	r2, [sp, #48]	; 0x30
   16590:	930d      	str	r3, [sp, #52]	; 0x34
   16592:	f7ff f966 	bl	15862 <_vfprintf_r+0x262>
   16596:	003a      	movs	r2, r7
   16598:	4659      	mov	r1, fp
   1659a:	9806      	ldr	r0, [sp, #24]
   1659c:	f002 ffb2 	bl	19504 <__sprint_r>
   165a0:	2800      	cmp	r0, #0
   165a2:	d000      	beq.n	165a6 <_vfprintf_r+0xfa6>
   165a4:	e5bc      	b.n	16120 <_vfprintf_r+0xb20>
   165a6:	68bc      	ldr	r4, [r7, #8]
   165a8:	ae32      	add	r6, sp, #200	; 0xc8
   165aa:	f7ff fbe2 	bl	15d72 <_vfprintf_r+0x772>
   165ae:	46c0      	nop			; (mov r8, r8)
   165b0:	0001b424 	.word	0x0001b424
   165b4:	980c      	ldr	r0, [sp, #48]	; 0x30
   165b6:	990d      	ldr	r1, [sp, #52]	; 0x34
   165b8:	2300      	movs	r3, #0
   165ba:	4242      	negs	r2, r0
   165bc:	418b      	sbcs	r3, r1
   165be:	0011      	movs	r1, r2
   165c0:	001a      	movs	r2, r3
   165c2:	232d      	movs	r3, #45	; 0x2d
   165c4:	a816      	add	r0, sp, #88	; 0x58
   165c6:	77c3      	strb	r3, [r0, #31]
   165c8:	0008      	movs	r0, r1
   165ca:	4310      	orrs	r0, r2
   165cc:	910c      	str	r1, [sp, #48]	; 0x30
   165ce:	920d      	str	r2, [sp, #52]	; 0x34
   165d0:	4698      	mov	r8, r3
   165d2:	0002      	movs	r2, r0
   165d4:	3b2c      	subs	r3, #44	; 0x2c
   165d6:	f7ff f95d 	bl	15894 <_vfprintf_r+0x294>
   165da:	9916      	ldr	r1, [sp, #88]	; 0x58
   165dc:	9d15      	ldr	r5, [sp, #84]	; 0x54
   165de:	000a      	movs	r2, r1
   165e0:	0008      	movs	r0, r1
   165e2:	002b      	movs	r3, r5
   165e4:	0029      	movs	r1, r5
   165e6:	f003 fa4d 	bl	19a84 <__aeabi_dcmpun>
   165ea:	2800      	cmp	r0, #0
   165ec:	d000      	beq.n	165f0 <_vfprintf_r+0xff0>
   165ee:	e2c6      	b.n	16b7e <_vfprintf_r+0x157e>
   165f0:	4653      	mov	r3, sl
   165f2:	3301      	adds	r3, #1
   165f4:	d100      	bne.n	165f8 <_vfprintf_r+0xff8>
   165f6:	e09f      	b.n	16738 <_vfprintf_r+0x1138>
   165f8:	2320      	movs	r3, #32
   165fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
   165fc:	439a      	bics	r2, r3
   165fe:	920e      	str	r2, [sp, #56]	; 0x38
   16600:	2a47      	cmp	r2, #71	; 0x47
   16602:	d100      	bne.n	16606 <_vfprintf_r+0x1006>
   16604:	e1a1      	b.n	1694a <_vfprintf_r+0x134a>
   16606:	2380      	movs	r3, #128	; 0x80
   16608:	005b      	lsls	r3, r3, #1
   1660a:	4323      	orrs	r3, r4
   1660c:	9309      	str	r3, [sp, #36]	; 0x24
   1660e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16610:	2b00      	cmp	r3, #0
   16612:	da00      	bge.n	16616 <_vfprintf_r+0x1016>
   16614:	e1ed      	b.n	169f2 <_vfprintf_r+0x13f2>
   16616:	9a16      	ldr	r2, [sp, #88]	; 0x58
   16618:	9308      	str	r3, [sp, #32]
   1661a:	2300      	movs	r3, #0
   1661c:	4691      	mov	r9, r2
   1661e:	9310      	str	r3, [sp, #64]	; 0x40
   16620:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16622:	2b66      	cmp	r3, #102	; 0x66
   16624:	d100      	bne.n	16628 <_vfprintf_r+0x1028>
   16626:	e1b8      	b.n	1699a <_vfprintf_r+0x139a>
   16628:	2b46      	cmp	r3, #70	; 0x46
   1662a:	d100      	bne.n	1662e <_vfprintf_r+0x102e>
   1662c:	e237      	b.n	16a9e <_vfprintf_r+0x149e>
   1662e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16630:	9806      	ldr	r0, [sp, #24]
   16632:	3a45      	subs	r2, #69	; 0x45
   16634:	0013      	movs	r3, r2
   16636:	4259      	negs	r1, r3
   16638:	4159      	adcs	r1, r3
   1663a:	ab20      	add	r3, sp, #128	; 0x80
   1663c:	000d      	movs	r5, r1
   1663e:	9303      	str	r3, [sp, #12]
   16640:	ab1f      	add	r3, sp, #124	; 0x7c
   16642:	9302      	str	r3, [sp, #8]
   16644:	2302      	movs	r3, #2
   16646:	aa23      	add	r2, sp, #140	; 0x8c
   16648:	4455      	add	r5, sl
   1664a:	921b      	str	r2, [sp, #108]	; 0x6c
   1664c:	9204      	str	r2, [sp, #16]
   1664e:	9300      	str	r3, [sp, #0]
   16650:	9501      	str	r5, [sp, #4]
   16652:	9b08      	ldr	r3, [sp, #32]
   16654:	464a      	mov	r2, r9
   16656:	f000 fcab 	bl	16fb0 <_dtoa_r>
   1665a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1665c:	9011      	str	r0, [sp, #68]	; 0x44
   1665e:	2b67      	cmp	r3, #103	; 0x67
   16660:	d000      	beq.n	16664 <_vfprintf_r+0x1064>
   16662:	e20b      	b.n	16a7c <_vfprintf_r+0x147c>
   16664:	9b11      	ldr	r3, [sp, #68]	; 0x44
   16666:	4698      	mov	r8, r3
   16668:	44a8      	add	r8, r5
   1666a:	07e3      	lsls	r3, r4, #31
   1666c:	d400      	bmi.n	16670 <_vfprintf_r+0x1070>
   1666e:	e277      	b.n	16b60 <_vfprintf_r+0x1560>
   16670:	2300      	movs	r3, #0
   16672:	2200      	movs	r2, #0
   16674:	4648      	mov	r0, r9
   16676:	9908      	ldr	r1, [sp, #32]
   16678:	f7fe f968 	bl	1494c <__aeabi_dcmpeq>
   1667c:	4643      	mov	r3, r8
   1667e:	2800      	cmp	r0, #0
   16680:	d10a      	bne.n	16698 <_vfprintf_r+0x1098>
   16682:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   16684:	4543      	cmp	r3, r8
   16686:	d207      	bcs.n	16698 <_vfprintf_r+0x1098>
   16688:	2130      	movs	r1, #48	; 0x30
   1668a:	4640      	mov	r0, r8
   1668c:	1c5a      	adds	r2, r3, #1
   1668e:	9223      	str	r2, [sp, #140]	; 0x8c
   16690:	7019      	strb	r1, [r3, #0]
   16692:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   16694:	4298      	cmp	r0, r3
   16696:	d8f9      	bhi.n	1668c <_vfprintf_r+0x108c>
   16698:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1669a:	1a9b      	subs	r3, r3, r2
   1669c:	9314      	str	r3, [sp, #80]	; 0x50
   1669e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   166a0:	2b47      	cmp	r3, #71	; 0x47
   166a2:	d100      	bne.n	166a6 <_vfprintf_r+0x10a6>
   166a4:	e0d0      	b.n	16848 <_vfprintf_r+0x1248>
   166a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   166a8:	2b65      	cmp	r3, #101	; 0x65
   166aa:	dc00      	bgt.n	166ae <_vfprintf_r+0x10ae>
   166ac:	e2d5      	b.n	16c5a <_vfprintf_r+0x165a>
   166ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
   166b0:	2b66      	cmp	r3, #102	; 0x66
   166b2:	d100      	bne.n	166b6 <_vfprintf_r+0x10b6>
   166b4:	e1c6      	b.n	16a44 <_vfprintf_r+0x1444>
   166b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   166b8:	9313      	str	r3, [sp, #76]	; 0x4c
   166ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
   166bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   166be:	0019      	movs	r1, r3
   166c0:	4291      	cmp	r1, r2
   166c2:	dd00      	ble.n	166c6 <_vfprintf_r+0x10c6>
   166c4:	e1a0      	b.n	16a08 <_vfprintf_r+0x1408>
   166c6:	07e3      	lsls	r3, r4, #31
   166c8:	d500      	bpl.n	166cc <_vfprintf_r+0x10cc>
   166ca:	e242      	b.n	16b52 <_vfprintf_r+0x1552>
   166cc:	43d3      	mvns	r3, r2
   166ce:	17db      	asrs	r3, r3, #31
   166d0:	0011      	movs	r1, r2
   166d2:	401a      	ands	r2, r3
   166d4:	2367      	movs	r3, #103	; 0x67
   166d6:	9208      	str	r2, [sp, #32]
   166d8:	910e      	str	r1, [sp, #56]	; 0x38
   166da:	9312      	str	r3, [sp, #72]	; 0x48
   166dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   166de:	2b00      	cmp	r3, #0
   166e0:	d000      	beq.n	166e4 <_vfprintf_r+0x10e4>
   166e2:	e0a9      	b.n	16838 <_vfprintf_r+0x1238>
   166e4:	ab16      	add	r3, sp, #88	; 0x58
   166e6:	7fdb      	ldrb	r3, [r3, #31]
   166e8:	4698      	mov	r8, r3
   166ea:	2300      	movs	r3, #0
   166ec:	469a      	mov	sl, r3
   166ee:	f7ff f8fc 	bl	158ea <_vfprintf_r+0x2ea>
   166f2:	46cb      	mov	fp, r9
   166f4:	46a1      	mov	r9, r4
   166f6:	0014      	movs	r4, r2
   166f8:	e637      	b.n	1636a <_vfprintf_r+0xd6a>
   166fa:	464b      	mov	r3, r9
   166fc:	6d98      	ldr	r0, [r3, #88]	; 0x58
   166fe:	f002 f861 	bl	187c4 <__retarget_lock_release_recursive>
   16702:	2301      	movs	r3, #1
   16704:	425b      	negs	r3, r3
   16706:	930a      	str	r3, [sp, #40]	; 0x28
   16708:	f7ff f82b 	bl	15762 <_vfprintf_r+0x162>
   1670c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1670e:	07d2      	lsls	r2, r2, #31
   16710:	d400      	bmi.n	16714 <_vfprintf_r+0x1114>
   16712:	e68f      	b.n	16434 <_vfprintf_r+0xe34>
   16714:	e680      	b.n	16418 <_vfprintf_r+0xe18>
   16716:	3608      	adds	r6, #8
   16718:	e679      	b.n	1640e <_vfprintf_r+0xe0e>
   1671a:	68bc      	ldr	r4, [r7, #8]
   1671c:	f7ff fb73 	bl	15e06 <_vfprintf_r+0x806>
   16720:	003a      	movs	r2, r7
   16722:	4659      	mov	r1, fp
   16724:	9806      	ldr	r0, [sp, #24]
   16726:	f002 feed 	bl	19504 <__sprint_r>
   1672a:	2800      	cmp	r0, #0
   1672c:	d000      	beq.n	16730 <_vfprintf_r+0x1130>
   1672e:	e4f7      	b.n	16120 <_vfprintf_r+0xb20>
   16730:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16732:	68bc      	ldr	r4, [r7, #8]
   16734:	ae32      	add	r6, sp, #200	; 0xc8
   16736:	e67d      	b.n	16434 <_vfprintf_r+0xe34>
   16738:	2320      	movs	r3, #32
   1673a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1673c:	439a      	bics	r2, r3
   1673e:	3b1a      	subs	r3, #26
   16740:	920e      	str	r2, [sp, #56]	; 0x38
   16742:	469a      	mov	sl, r3
   16744:	e75f      	b.n	16606 <_vfprintf_r+0x1006>
   16746:	232d      	movs	r3, #45	; 0x2d
   16748:	aa16      	add	r2, sp, #88	; 0x58
   1674a:	77d3      	strb	r3, [r2, #31]
   1674c:	4698      	mov	r8, r3
   1674e:	f7ff faa8 	bl	15ca2 <_vfprintf_r+0x6a2>
   16752:	003a      	movs	r2, r7
   16754:	4659      	mov	r1, fp
   16756:	9806      	ldr	r0, [sp, #24]
   16758:	f002 fed4 	bl	19504 <__sprint_r>
   1675c:	2800      	cmp	r0, #0
   1675e:	d000      	beq.n	16762 <_vfprintf_r+0x1162>
   16760:	e4de      	b.n	16120 <_vfprintf_r+0xb20>
   16762:	ae32      	add	r6, sp, #200	; 0xc8
   16764:	e419      	b.n	15f9a <_vfprintf_r+0x99a>
   16766:	4be3      	ldr	r3, [pc, #908]	; (16af4 <_vfprintf_r+0x14f4>)
   16768:	3401      	adds	r4, #1
   1676a:	6033      	str	r3, [r6, #0]
   1676c:	2301      	movs	r3, #1
   1676e:	6073      	str	r3, [r6, #4]
   16770:	687b      	ldr	r3, [r7, #4]
   16772:	60bc      	str	r4, [r7, #8]
   16774:	3301      	adds	r3, #1
   16776:	607b      	str	r3, [r7, #4]
   16778:	2b07      	cmp	r3, #7
   1677a:	dd00      	ble.n	1677e <_vfprintf_r+0x117e>
   1677c:	e155      	b.n	16a2a <_vfprintf_r+0x142a>
   1677e:	3608      	adds	r6, #8
   16780:	2800      	cmp	r0, #0
   16782:	d107      	bne.n	16794 <_vfprintf_r+0x1194>
   16784:	9b14      	ldr	r3, [sp, #80]	; 0x50
   16786:	2b00      	cmp	r3, #0
   16788:	d104      	bne.n	16794 <_vfprintf_r+0x1194>
   1678a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1678c:	07db      	lsls	r3, r3, #31
   1678e:	d401      	bmi.n	16794 <_vfprintf_r+0x1194>
   16790:	f7ff fb39 	bl	15e06 <_vfprintf_r+0x806>
   16794:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16796:	6033      	str	r3, [r6, #0]
   16798:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1679a:	1919      	adds	r1, r3, r4
   1679c:	6073      	str	r3, [r6, #4]
   1679e:	687b      	ldr	r3, [r7, #4]
   167a0:	60b9      	str	r1, [r7, #8]
   167a2:	3301      	adds	r3, #1
   167a4:	607b      	str	r3, [r7, #4]
   167a6:	2b07      	cmp	r3, #7
   167a8:	dd00      	ble.n	167ac <_vfprintf_r+0x11ac>
   167aa:	e1c4      	b.n	16b36 <_vfprintf_r+0x1536>
   167ac:	0032      	movs	r2, r6
   167ae:	3208      	adds	r2, #8
   167b0:	2800      	cmp	r0, #0
   167b2:	da00      	bge.n	167b6 <_vfprintf_r+0x11b6>
   167b4:	e195      	b.n	16ae2 <_vfprintf_r+0x14e2>
   167b6:	9811      	ldr	r0, [sp, #68]	; 0x44
   167b8:	3301      	adds	r3, #1
   167ba:	6010      	str	r0, [r2, #0]
   167bc:	9814      	ldr	r0, [sp, #80]	; 0x50
   167be:	607b      	str	r3, [r7, #4]
   167c0:	1844      	adds	r4, r0, r1
   167c2:	6050      	str	r0, [r2, #4]
   167c4:	60bc      	str	r4, [r7, #8]
   167c6:	2b07      	cmp	r3, #7
   167c8:	dd01      	ble.n	167ce <_vfprintf_r+0x11ce>
   167ca:	f7ff fbc2 	bl	15f52 <_vfprintf_r+0x952>
   167ce:	3208      	adds	r2, #8
   167d0:	0016      	movs	r6, r2
   167d2:	f7ff fb18 	bl	15e06 <_vfprintf_r+0x806>
   167d6:	990f      	ldr	r1, [sp, #60]	; 0x3c
   167d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   167da:	680b      	ldr	r3, [r1, #0]
   167dc:	601a      	str	r2, [r3, #0]
   167de:	17d2      	asrs	r2, r2, #31
   167e0:	605a      	str	r2, [r3, #4]
   167e2:	000b      	movs	r3, r1
   167e4:	3304      	adds	r3, #4
   167e6:	930f      	str	r3, [sp, #60]	; 0x3c
   167e8:	f7fe ff58 	bl	1569c <_vfprintf_r+0x9c>
   167ec:	464b      	mov	r3, r9
   167ee:	9a07      	ldr	r2, [sp, #28]
   167f0:	431c      	orrs	r4, r3
   167f2:	3201      	adds	r2, #1
   167f4:	7813      	ldrb	r3, [r2, #0]
   167f6:	9207      	str	r2, [sp, #28]
   167f8:	f7fe ff8b 	bl	15712 <_vfprintf_r+0x112>
   167fc:	003a      	movs	r2, r7
   167fe:	4659      	mov	r1, fp
   16800:	9806      	ldr	r0, [sp, #24]
   16802:	f002 fe7f 	bl	19504 <__sprint_r>
   16806:	2800      	cmp	r0, #0
   16808:	d000      	beq.n	1680c <_vfprintf_r+0x120c>
   1680a:	e489      	b.n	16120 <_vfprintf_r+0xb20>
   1680c:	68bc      	ldr	r4, [r7, #8]
   1680e:	ae32      	add	r6, sp, #200	; 0xc8
   16810:	f7ff fbdc 	bl	15fcc <_vfprintf_r+0x9cc>
   16814:	4bb8      	ldr	r3, [pc, #736]	; (16af8 <_vfprintf_r+0x14f8>)
   16816:	9311      	str	r3, [sp, #68]	; 0x44
   16818:	f7ff fa4a 	bl	15cb0 <_vfprintf_r+0x6b0>
   1681c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1681e:	ab32      	add	r3, sp, #200	; 0xc8
   16820:	1a9b      	subs	r3, r3, r2
   16822:	930e      	str	r3, [sp, #56]	; 0x38
   16824:	f7ff f859 	bl	158da <_vfprintf_r+0x2da>
   16828:	9811      	ldr	r0, [sp, #68]	; 0x44
   1682a:	f7fe feb7 	bl	1559c <strlen>
   1682e:	0002      	movs	r2, r0
   16830:	900e      	str	r0, [sp, #56]	; 0x38
   16832:	0003      	movs	r3, r0
   16834:	f7ff f9a1 	bl	15b7a <_vfprintf_r+0x57a>
   16838:	232d      	movs	r3, #45	; 0x2d
   1683a:	aa16      	add	r2, sp, #88	; 0x58
   1683c:	77d3      	strb	r3, [r2, #31]
   1683e:	4698      	mov	r8, r3
   16840:	2300      	movs	r3, #0
   16842:	469a      	mov	sl, r3
   16844:	f7ff f854 	bl	158f0 <_vfprintf_r+0x2f0>
   16848:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1684a:	9313      	str	r3, [sp, #76]	; 0x4c
   1684c:	1cda      	adds	r2, r3, #3
   1684e:	db02      	blt.n	16856 <_vfprintf_r+0x1256>
   16850:	459a      	cmp	sl, r3
   16852:	db00      	blt.n	16856 <_vfprintf_r+0x1256>
   16854:	e731      	b.n	166ba <_vfprintf_r+0x10ba>
   16856:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16858:	3b02      	subs	r3, #2
   1685a:	9312      	str	r3, [sp, #72]	; 0x48
   1685c:	222c      	movs	r2, #44	; 0x2c
   1685e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   16860:	2148      	movs	r1, #72	; 0x48
   16862:	1e5d      	subs	r5, r3, #1
   16864:	ab16      	add	r3, sp, #88	; 0x58
   16866:	189b      	adds	r3, r3, r2
   16868:	466a      	mov	r2, sp
   1686a:	1852      	adds	r2, r2, r1
   1686c:	7812      	ldrb	r2, [r2, #0]
   1686e:	951f      	str	r5, [sp, #124]	; 0x7c
   16870:	701a      	strb	r2, [r3, #0]
   16872:	2d00      	cmp	r5, #0
   16874:	da00      	bge.n	16878 <_vfprintf_r+0x1278>
   16876:	e1cb      	b.n	16c10 <_vfprintf_r+0x1610>
   16878:	212d      	movs	r1, #45	; 0x2d
   1687a:	232b      	movs	r3, #43	; 0x2b
   1687c:	aa16      	add	r2, sp, #88	; 0x58
   1687e:	1852      	adds	r2, r2, r1
   16880:	7013      	strb	r3, [r2, #0]
   16882:	2d09      	cmp	r5, #9
   16884:	dc00      	bgt.n	16888 <_vfprintf_r+0x1288>
   16886:	e16d      	b.n	16b64 <_vfprintf_r+0x1564>
   16888:	aa16      	add	r2, sp, #88	; 0x58
   1688a:	233b      	movs	r3, #59	; 0x3b
   1688c:	4694      	mov	ip, r2
   1688e:	4463      	add	r3, ip
   16890:	469a      	mov	sl, r3
   16892:	46b1      	mov	r9, r6
   16894:	46a0      	mov	r8, r4
   16896:	4656      	mov	r6, sl
   16898:	e000      	b.n	1689c <_vfprintf_r+0x129c>
   1689a:	0026      	movs	r6, r4
   1689c:	0028      	movs	r0, r5
   1689e:	210a      	movs	r1, #10
   168a0:	f7fb fa22 	bl	11ce8 <__aeabi_idivmod>
   168a4:	1e74      	subs	r4, r6, #1
   168a6:	3130      	adds	r1, #48	; 0x30
   168a8:	7021      	strb	r1, [r4, #0]
   168aa:	0028      	movs	r0, r5
   168ac:	210a      	movs	r1, #10
   168ae:	f7fb f935 	bl	11b1c <__divsi3>
   168b2:	0005      	movs	r5, r0
   168b4:	2809      	cmp	r0, #9
   168b6:	dcf0      	bgt.n	1689a <_vfprintf_r+0x129a>
   168b8:	0023      	movs	r3, r4
   168ba:	4644      	mov	r4, r8
   168bc:	46b0      	mov	r8, r6
   168be:	464e      	mov	r6, r9
   168c0:	4699      	mov	r9, r3
   168c2:	0003      	movs	r3, r0
   168c4:	3330      	adds	r3, #48	; 0x30
   168c6:	b2d8      	uxtb	r0, r3
   168c8:	4643      	mov	r3, r8
   168ca:	3b02      	subs	r3, #2
   168cc:	7018      	strb	r0, [r3, #0]
   168ce:	459a      	cmp	sl, r3
   168d0:	d800      	bhi.n	168d4 <_vfprintf_r+0x12d4>
   168d2:	e1f6      	b.n	16cc2 <_vfprintf_r+0x16c2>
   168d4:	4642      	mov	r2, r8
   168d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   168d8:	4645      	mov	r5, r8
   168da:	1a99      	subs	r1, r3, r2
   168dc:	2301      	movs	r3, #1
   168de:	3107      	adds	r1, #7
   168e0:	425b      	negs	r3, r3
   168e2:	e001      	b.n	168e8 <_vfprintf_r+0x12e8>
   168e4:	5ce8      	ldrb	r0, [r5, r3]
   168e6:	3301      	adds	r3, #1
   168e8:	aa21      	add	r2, sp, #132	; 0x84
   168ea:	18d2      	adds	r2, r2, r3
   168ec:	70d0      	strb	r0, [r2, #3]
   168ee:	428b      	cmp	r3, r1
   168f0:	d1f8      	bne.n	168e4 <_vfprintf_r+0x12e4>
   168f2:	a916      	add	r1, sp, #88	; 0x58
   168f4:	468c      	mov	ip, r1
   168f6:	222e      	movs	r2, #46	; 0x2e
   168f8:	464b      	mov	r3, r9
   168fa:	4462      	add	r2, ip
   168fc:	4694      	mov	ip, r2
   168fe:	1afb      	subs	r3, r7, r3
   16900:	4463      	add	r3, ip
   16902:	aa21      	add	r2, sp, #132	; 0x84
   16904:	9914      	ldr	r1, [sp, #80]	; 0x50
   16906:	1a9b      	subs	r3, r3, r2
   16908:	469c      	mov	ip, r3
   1690a:	000a      	movs	r2, r1
   1690c:	4462      	add	r2, ip
   1690e:	931a      	str	r3, [sp, #104]	; 0x68
   16910:	920e      	str	r2, [sp, #56]	; 0x38
   16912:	2901      	cmp	r1, #1
   16914:	dc00      	bgt.n	16918 <_vfprintf_r+0x1318>
   16916:	e170      	b.n	16bfa <_vfprintf_r+0x15fa>
   16918:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1691a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1691c:	4694      	mov	ip, r2
   1691e:	4463      	add	r3, ip
   16920:	001a      	movs	r2, r3
   16922:	930e      	str	r3, [sp, #56]	; 0x38
   16924:	43db      	mvns	r3, r3
   16926:	17db      	asrs	r3, r3, #31
   16928:	401a      	ands	r2, r3
   1692a:	2300      	movs	r3, #0
   1692c:	9208      	str	r2, [sp, #32]
   1692e:	9313      	str	r3, [sp, #76]	; 0x4c
   16930:	e6d4      	b.n	166dc <_vfprintf_r+0x10dc>
   16932:	003a      	movs	r2, r7
   16934:	4659      	mov	r1, fp
   16936:	9806      	ldr	r0, [sp, #24]
   16938:	f002 fde4 	bl	19504 <__sprint_r>
   1693c:	2800      	cmp	r0, #0
   1693e:	d001      	beq.n	16944 <_vfprintf_r+0x1344>
   16940:	f7ff fbee 	bl	16120 <_vfprintf_r+0xb20>
   16944:	68bc      	ldr	r4, [r7, #8]
   16946:	ae32      	add	r6, sp, #200	; 0xc8
   16948:	e46a      	b.n	16220 <_vfprintf_r+0xc20>
   1694a:	4653      	mov	r3, sl
   1694c:	2b00      	cmp	r3, #0
   1694e:	d000      	beq.n	16952 <_vfprintf_r+0x1352>
   16950:	e659      	b.n	16606 <_vfprintf_r+0x1006>
   16952:	3301      	adds	r3, #1
   16954:	469a      	mov	sl, r3
   16956:	e656      	b.n	16606 <_vfprintf_r+0x1006>
   16958:	4653      	mov	r3, sl
   1695a:	9308      	str	r3, [sp, #32]
   1695c:	2b06      	cmp	r3, #6
   1695e:	d901      	bls.n	16964 <_vfprintf_r+0x1364>
   16960:	2306      	movs	r3, #6
   16962:	9308      	str	r3, [sp, #32]
   16964:	9b08      	ldr	r3, [sp, #32]
   16966:	950f      	str	r5, [sp, #60]	; 0x3c
   16968:	930e      	str	r3, [sp, #56]	; 0x38
   1696a:	2300      	movs	r3, #0
   1696c:	4698      	mov	r8, r3
   1696e:	469a      	mov	sl, r3
   16970:	9313      	str	r3, [sp, #76]	; 0x4c
   16972:	4b62      	ldr	r3, [pc, #392]	; (16afc <_vfprintf_r+0x14fc>)
   16974:	9409      	str	r4, [sp, #36]	; 0x24
   16976:	9311      	str	r3, [sp, #68]	; 0x44
   16978:	f7fe ffbd 	bl	158f6 <_vfprintf_r+0x2f6>
   1697c:	003a      	movs	r2, r7
   1697e:	4659      	mov	r1, fp
   16980:	9806      	ldr	r0, [sp, #24]
   16982:	f002 fdbf 	bl	19504 <__sprint_r>
   16986:	2800      	cmp	r0, #0
   16988:	d001      	beq.n	1698e <_vfprintf_r+0x138e>
   1698a:	f7ff fbc9 	bl	16120 <_vfprintf_r+0xb20>
   1698e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   16990:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   16992:	68bc      	ldr	r4, [r7, #8]
   16994:	1a9b      	subs	r3, r3, r2
   16996:	ae32      	add	r6, sp, #200	; 0xc8
   16998:	e567      	b.n	1646a <_vfprintf_r+0xe6a>
   1699a:	ab23      	add	r3, sp, #140	; 0x8c
   1699c:	931b      	str	r3, [sp, #108]	; 0x6c
   1699e:	9304      	str	r3, [sp, #16]
   169a0:	ab20      	add	r3, sp, #128	; 0x80
   169a2:	9303      	str	r3, [sp, #12]
   169a4:	ab1f      	add	r3, sp, #124	; 0x7c
   169a6:	9302      	str	r3, [sp, #8]
   169a8:	4653      	mov	r3, sl
   169aa:	9301      	str	r3, [sp, #4]
   169ac:	2303      	movs	r3, #3
   169ae:	464a      	mov	r2, r9
   169b0:	9300      	str	r3, [sp, #0]
   169b2:	9806      	ldr	r0, [sp, #24]
   169b4:	9b08      	ldr	r3, [sp, #32]
   169b6:	f000 fafb 	bl	16fb0 <_dtoa_r>
   169ba:	0003      	movs	r3, r0
   169bc:	4453      	add	r3, sl
   169be:	4698      	mov	r8, r3
   169c0:	4655      	mov	r5, sl
   169c2:	9011      	str	r0, [sp, #68]	; 0x44
   169c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   169c6:	781b      	ldrb	r3, [r3, #0]
   169c8:	2b30      	cmp	r3, #48	; 0x30
   169ca:	d002      	beq.n	169d2 <_vfprintf_r+0x13d2>
   169cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   169ce:	4498      	add	r8, r3
   169d0:	e64e      	b.n	16670 <_vfprintf_r+0x1070>
   169d2:	2200      	movs	r2, #0
   169d4:	2300      	movs	r3, #0
   169d6:	4648      	mov	r0, r9
   169d8:	9908      	ldr	r1, [sp, #32]
   169da:	f7fd ffb7 	bl	1494c <__aeabi_dcmpeq>
   169de:	2800      	cmp	r0, #0
   169e0:	d1f4      	bne.n	169cc <_vfprintf_r+0x13cc>
   169e2:	2301      	movs	r3, #1
   169e4:	1b5b      	subs	r3, r3, r5
   169e6:	931f      	str	r3, [sp, #124]	; 0x7c
   169e8:	4498      	add	r8, r3
   169ea:	e641      	b.n	16670 <_vfprintf_r+0x1070>
   169ec:	46c1      	mov	r9, r8
   169ee:	f7ff fb1f 	bl	16030 <_vfprintf_r+0xa30>
   169f2:	2280      	movs	r2, #128	; 0x80
   169f4:	0612      	lsls	r2, r2, #24
   169f6:	4694      	mov	ip, r2
   169f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   169fa:	4699      	mov	r9, r3
   169fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   169fe:	4463      	add	r3, ip
   16a00:	9308      	str	r3, [sp, #32]
   16a02:	232d      	movs	r3, #45	; 0x2d
   16a04:	9310      	str	r3, [sp, #64]	; 0x40
   16a06:	e60b      	b.n	16620 <_vfprintf_r+0x1020>
   16a08:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   16a0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   16a0c:	4694      	mov	ip, r2
   16a0e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   16a10:	4463      	add	r3, ip
   16a12:	930e      	str	r3, [sp, #56]	; 0x38
   16a14:	2a00      	cmp	r2, #0
   16a16:	dc00      	bgt.n	16a1a <_vfprintf_r+0x141a>
   16a18:	e0e3      	b.n	16be2 <_vfprintf_r+0x15e2>
   16a1a:	001a      	movs	r2, r3
   16a1c:	43db      	mvns	r3, r3
   16a1e:	17db      	asrs	r3, r3, #31
   16a20:	401a      	ands	r2, r3
   16a22:	2367      	movs	r3, #103	; 0x67
   16a24:	9208      	str	r2, [sp, #32]
   16a26:	9312      	str	r3, [sp, #72]	; 0x48
   16a28:	e658      	b.n	166dc <_vfprintf_r+0x10dc>
   16a2a:	003a      	movs	r2, r7
   16a2c:	4659      	mov	r1, fp
   16a2e:	9806      	ldr	r0, [sp, #24]
   16a30:	f002 fd68 	bl	19504 <__sprint_r>
   16a34:	2800      	cmp	r0, #0
   16a36:	d001      	beq.n	16a3c <_vfprintf_r+0x143c>
   16a38:	f7ff fb72 	bl	16120 <_vfprintf_r+0xb20>
   16a3c:	981f      	ldr	r0, [sp, #124]	; 0x7c
   16a3e:	68bc      	ldr	r4, [r7, #8]
   16a40:	ae32      	add	r6, sp, #200	; 0xc8
   16a42:	e69d      	b.n	16780 <_vfprintf_r+0x1180>
   16a44:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16a46:	9313      	str	r3, [sp, #76]	; 0x4c
   16a48:	2b00      	cmp	r3, #0
   16a4a:	dc00      	bgt.n	16a4e <_vfprintf_r+0x144e>
   16a4c:	e0f2      	b.n	16c34 <_vfprintf_r+0x1634>
   16a4e:	4652      	mov	r2, sl
   16a50:	2a00      	cmp	r2, #0
   16a52:	d000      	beq.n	16a56 <_vfprintf_r+0x1456>
   16a54:	e0a0      	b.n	16b98 <_vfprintf_r+0x1598>
   16a56:	07e2      	lsls	r2, r4, #31
   16a58:	d500      	bpl.n	16a5c <_vfprintf_r+0x145c>
   16a5a:	e09d      	b.n	16b98 <_vfprintf_r+0x1598>
   16a5c:	9308      	str	r3, [sp, #32]
   16a5e:	930e      	str	r3, [sp, #56]	; 0x38
   16a60:	e63c      	b.n	166dc <_vfprintf_r+0x10dc>
   16a62:	ab16      	add	r3, sp, #88	; 0x58
   16a64:	7fdb      	ldrb	r3, [r3, #31]
   16a66:	950f      	str	r5, [sp, #60]	; 0x3c
   16a68:	4698      	mov	r8, r3
   16a6a:	4653      	mov	r3, sl
   16a6c:	9308      	str	r3, [sp, #32]
   16a6e:	930e      	str	r3, [sp, #56]	; 0x38
   16a70:	2300      	movs	r3, #0
   16a72:	9409      	str	r4, [sp, #36]	; 0x24
   16a74:	469a      	mov	sl, r3
   16a76:	9313      	str	r3, [sp, #76]	; 0x4c
   16a78:	f7fe ff37 	bl	158ea <_vfprintf_r+0x2ea>
   16a7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   16a7e:	4698      	mov	r8, r3
   16a80:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16a82:	44a8      	add	r8, r5
   16a84:	2b47      	cmp	r3, #71	; 0x47
   16a86:	d000      	beq.n	16a8a <_vfprintf_r+0x148a>
   16a88:	e5f2      	b.n	16670 <_vfprintf_r+0x1070>
   16a8a:	07e3      	lsls	r3, r4, #31
   16a8c:	d400      	bmi.n	16a90 <_vfprintf_r+0x1490>
   16a8e:	e0dc      	b.n	16c4a <_vfprintf_r+0x164a>
   16a90:	9b11      	ldr	r3, [sp, #68]	; 0x44
   16a92:	4698      	mov	r8, r3
   16a94:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16a96:	44a8      	add	r8, r5
   16a98:	2b46      	cmp	r3, #70	; 0x46
   16a9a:	d093      	beq.n	169c4 <_vfprintf_r+0x13c4>
   16a9c:	e5e8      	b.n	16670 <_vfprintf_r+0x1070>
   16a9e:	ab23      	add	r3, sp, #140	; 0x8c
   16aa0:	931b      	str	r3, [sp, #108]	; 0x6c
   16aa2:	9304      	str	r3, [sp, #16]
   16aa4:	ab20      	add	r3, sp, #128	; 0x80
   16aa6:	9303      	str	r3, [sp, #12]
   16aa8:	ab1f      	add	r3, sp, #124	; 0x7c
   16aaa:	9302      	str	r3, [sp, #8]
   16aac:	4653      	mov	r3, sl
   16aae:	9301      	str	r3, [sp, #4]
   16ab0:	2303      	movs	r3, #3
   16ab2:	464a      	mov	r2, r9
   16ab4:	9300      	str	r3, [sp, #0]
   16ab6:	9806      	ldr	r0, [sp, #24]
   16ab8:	9b08      	ldr	r3, [sp, #32]
   16aba:	f000 fa79 	bl	16fb0 <_dtoa_r>
   16abe:	4655      	mov	r5, sl
   16ac0:	9011      	str	r0, [sp, #68]	; 0x44
   16ac2:	e7e5      	b.n	16a90 <_vfprintf_r+0x1490>
   16ac4:	003a      	movs	r2, r7
   16ac6:	4659      	mov	r1, fp
   16ac8:	9806      	ldr	r0, [sp, #24]
   16aca:	f002 fd1b 	bl	19504 <__sprint_r>
   16ace:	2800      	cmp	r0, #0
   16ad0:	d101      	bne.n	16ad6 <_vfprintf_r+0x14d6>
   16ad2:	f7ff faab 	bl	1602c <_vfprintf_r+0xa2c>
   16ad6:	f7ff faab 	bl	16030 <_vfprintf_r+0xa30>
   16ada:	4642      	mov	r2, r8
   16adc:	9207      	str	r2, [sp, #28]
   16ade:	f7fe fe1b 	bl	15718 <_vfprintf_r+0x118>
   16ae2:	4244      	negs	r4, r0
   16ae4:	3010      	adds	r0, #16
   16ae6:	db00      	blt.n	16aea <_vfprintf_r+0x14ea>
   16ae8:	e0d8      	b.n	16c9c <_vfprintf_r+0x169c>
   16aea:	4805      	ldr	r0, [pc, #20]	; (16b00 <_vfprintf_r+0x1500>)
   16aec:	2610      	movs	r6, #16
   16aee:	0005      	movs	r5, r0
   16af0:	e00c      	b.n	16b0c <_vfprintf_r+0x150c>
   16af2:	46c0      	nop			; (mov r8, r8)
   16af4:	0001ae80 	.word	0x0001ae80
   16af8:	0001b3d8 	.word	0x0001b3d8
   16afc:	0001b40c 	.word	0x0001b40c
   16b00:	0001b424 	.word	0x0001b424
   16b04:	3208      	adds	r2, #8
   16b06:	3c10      	subs	r4, #16
   16b08:	2c10      	cmp	r4, #16
   16b0a:	dd51      	ble.n	16bb0 <_vfprintf_r+0x15b0>
   16b0c:	3110      	adds	r1, #16
   16b0e:	3301      	adds	r3, #1
   16b10:	6015      	str	r5, [r2, #0]
   16b12:	6056      	str	r6, [r2, #4]
   16b14:	60b9      	str	r1, [r7, #8]
   16b16:	607b      	str	r3, [r7, #4]
   16b18:	2b07      	cmp	r3, #7
   16b1a:	ddf3      	ble.n	16b04 <_vfprintf_r+0x1504>
   16b1c:	003a      	movs	r2, r7
   16b1e:	4659      	mov	r1, fp
   16b20:	9806      	ldr	r0, [sp, #24]
   16b22:	f002 fcef 	bl	19504 <__sprint_r>
   16b26:	2800      	cmp	r0, #0
   16b28:	d001      	beq.n	16b2e <_vfprintf_r+0x152e>
   16b2a:	f7ff faf9 	bl	16120 <_vfprintf_r+0xb20>
   16b2e:	68b9      	ldr	r1, [r7, #8]
   16b30:	687b      	ldr	r3, [r7, #4]
   16b32:	aa32      	add	r2, sp, #200	; 0xc8
   16b34:	e7e7      	b.n	16b06 <_vfprintf_r+0x1506>
   16b36:	003a      	movs	r2, r7
   16b38:	4659      	mov	r1, fp
   16b3a:	9806      	ldr	r0, [sp, #24]
   16b3c:	f002 fce2 	bl	19504 <__sprint_r>
   16b40:	2800      	cmp	r0, #0
   16b42:	d001      	beq.n	16b48 <_vfprintf_r+0x1548>
   16b44:	f7ff faec 	bl	16120 <_vfprintf_r+0xb20>
   16b48:	981f      	ldr	r0, [sp, #124]	; 0x7c
   16b4a:	68b9      	ldr	r1, [r7, #8]
   16b4c:	687b      	ldr	r3, [r7, #4]
   16b4e:	aa32      	add	r2, sp, #200	; 0xc8
   16b50:	e62e      	b.n	167b0 <_vfprintf_r+0x11b0>
   16b52:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   16b54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   16b56:	4694      	mov	ip, r2
   16b58:	4463      	add	r3, ip
   16b5a:	001a      	movs	r2, r3
   16b5c:	930e      	str	r3, [sp, #56]	; 0x38
   16b5e:	e75d      	b.n	16a1c <_vfprintf_r+0x141c>
   16b60:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   16b62:	e599      	b.n	16698 <_vfprintf_r+0x1098>
   16b64:	212e      	movs	r1, #46	; 0x2e
   16b66:	2330      	movs	r3, #48	; 0x30
   16b68:	aa16      	add	r2, sp, #88	; 0x58
   16b6a:	1852      	adds	r2, r2, r1
   16b6c:	7013      	strb	r3, [r2, #0]
   16b6e:	002b      	movs	r3, r5
   16b70:	aa16      	add	r2, sp, #88	; 0x58
   16b72:	3101      	adds	r1, #1
   16b74:	3330      	adds	r3, #48	; 0x30
   16b76:	1852      	adds	r2, r2, r1
   16b78:	7013      	strb	r3, [r2, #0]
   16b7a:	ab22      	add	r3, sp, #136	; 0x88
   16b7c:	e6c1      	b.n	16902 <_vfprintf_r+0x1302>
   16b7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16b80:	2b00      	cmp	r3, #0
   16b82:	db52      	blt.n	16c2a <_vfprintf_r+0x162a>
   16b84:	ab16      	add	r3, sp, #88	; 0x58
   16b86:	7fdb      	ldrb	r3, [r3, #31]
   16b88:	4698      	mov	r8, r3
   16b8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16b8c:	2b47      	cmp	r3, #71	; 0x47
   16b8e:	dc48      	bgt.n	16c22 <_vfprintf_r+0x1622>
   16b90:	4b4e      	ldr	r3, [pc, #312]	; (16ccc <_vfprintf_r+0x16cc>)
   16b92:	9311      	str	r3, [sp, #68]	; 0x44
   16b94:	f7ff f88c 	bl	15cb0 <_vfprintf_r+0x6b0>
   16b98:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   16b9a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   16b9c:	4694      	mov	ip, r2
   16b9e:	4463      	add	r3, ip
   16ba0:	4453      	add	r3, sl
   16ba2:	001a      	movs	r2, r3
   16ba4:	930e      	str	r3, [sp, #56]	; 0x38
   16ba6:	43db      	mvns	r3, r3
   16ba8:	17db      	asrs	r3, r3, #31
   16baa:	401a      	ands	r2, r3
   16bac:	9208      	str	r2, [sp, #32]
   16bae:	e595      	b.n	166dc <_vfprintf_r+0x10dc>
   16bb0:	46a9      	mov	r9, r5
   16bb2:	4648      	mov	r0, r9
   16bb4:	1909      	adds	r1, r1, r4
   16bb6:	3301      	adds	r3, #1
   16bb8:	6010      	str	r0, [r2, #0]
   16bba:	6054      	str	r4, [r2, #4]
   16bbc:	60b9      	str	r1, [r7, #8]
   16bbe:	3208      	adds	r2, #8
   16bc0:	607b      	str	r3, [r7, #4]
   16bc2:	2b07      	cmp	r3, #7
   16bc4:	dc00      	bgt.n	16bc8 <_vfprintf_r+0x15c8>
   16bc6:	e5f6      	b.n	167b6 <_vfprintf_r+0x11b6>
   16bc8:	003a      	movs	r2, r7
   16bca:	4659      	mov	r1, fp
   16bcc:	9806      	ldr	r0, [sp, #24]
   16bce:	f002 fc99 	bl	19504 <__sprint_r>
   16bd2:	2800      	cmp	r0, #0
   16bd4:	d001      	beq.n	16bda <_vfprintf_r+0x15da>
   16bd6:	f7ff faa3 	bl	16120 <_vfprintf_r+0xb20>
   16bda:	68b9      	ldr	r1, [r7, #8]
   16bdc:	687b      	ldr	r3, [r7, #4]
   16bde:	aa32      	add	r2, sp, #200	; 0xc8
   16be0:	e5e9      	b.n	167b6 <_vfprintf_r+0x11b6>
   16be2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   16be4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   16be6:	1a98      	subs	r0, r3, r2
   16be8:	1c43      	adds	r3, r0, #1
   16bea:	001a      	movs	r2, r3
   16bec:	930e      	str	r3, [sp, #56]	; 0x38
   16bee:	e715      	b.n	16a1c <_vfprintf_r+0x141c>
   16bf0:	4a37      	ldr	r2, [pc, #220]	; (16cd0 <_vfprintf_r+0x16d0>)
   16bf2:	687b      	ldr	r3, [r7, #4]
   16bf4:	4691      	mov	r9, r2
   16bf6:	f7ff fbf5 	bl	163e4 <_vfprintf_r+0xde4>
   16bfa:	2301      	movs	r3, #1
   16bfc:	4023      	ands	r3, r4
   16bfe:	9313      	str	r3, [sp, #76]	; 0x4c
   16c00:	d000      	beq.n	16c04 <_vfprintf_r+0x1604>
   16c02:	e689      	b.n	16918 <_vfprintf_r+0x1318>
   16c04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16c06:	43d3      	mvns	r3, r2
   16c08:	17db      	asrs	r3, r3, #31
   16c0a:	401a      	ands	r2, r3
   16c0c:	9208      	str	r2, [sp, #32]
   16c0e:	e565      	b.n	166dc <_vfprintf_r+0x10dc>
   16c10:	2301      	movs	r3, #1
   16c12:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   16c14:	391b      	subs	r1, #27
   16c16:	1a9d      	subs	r5, r3, r2
   16c18:	aa16      	add	r2, sp, #88	; 0x58
   16c1a:	332c      	adds	r3, #44	; 0x2c
   16c1c:	1852      	adds	r2, r2, r1
   16c1e:	7013      	strb	r3, [r2, #0]
   16c20:	e62f      	b.n	16882 <_vfprintf_r+0x1282>
   16c22:	4b2c      	ldr	r3, [pc, #176]	; (16cd4 <_vfprintf_r+0x16d4>)
   16c24:	9311      	str	r3, [sp, #68]	; 0x44
   16c26:	f7ff f843 	bl	15cb0 <_vfprintf_r+0x6b0>
   16c2a:	232d      	movs	r3, #45	; 0x2d
   16c2c:	aa16      	add	r2, sp, #88	; 0x58
   16c2e:	77d3      	strb	r3, [r2, #31]
   16c30:	4698      	mov	r8, r3
   16c32:	e7aa      	b.n	16b8a <_vfprintf_r+0x158a>
   16c34:	4653      	mov	r3, sl
   16c36:	2b00      	cmp	r3, #0
   16c38:	d101      	bne.n	16c3e <_vfprintf_r+0x163e>
   16c3a:	07e3      	lsls	r3, r4, #31
   16c3c:	d503      	bpl.n	16c46 <_vfprintf_r+0x1646>
   16c3e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   16c40:	1c58      	adds	r0, r3, #1
   16c42:	0003      	movs	r3, r0
   16c44:	e7ac      	b.n	16ba0 <_vfprintf_r+0x15a0>
   16c46:	2301      	movs	r3, #1
   16c48:	e708      	b.n	16a5c <_vfprintf_r+0x145c>
   16c4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   16c4c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   16c4e:	1a9b      	subs	r3, r3, r2
   16c50:	9314      	str	r3, [sp, #80]	; 0x50
   16c52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   16c54:	2b47      	cmp	r3, #71	; 0x47
   16c56:	d100      	bne.n	16c5a <_vfprintf_r+0x165a>
   16c58:	e5f6      	b.n	16848 <_vfprintf_r+0x1248>
   16c5a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16c5c:	9313      	str	r3, [sp, #76]	; 0x4c
   16c5e:	e5fd      	b.n	1685c <_vfprintf_r+0x125c>
   16c60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16c62:	1d1d      	adds	r5, r3, #4
   16c64:	681b      	ldr	r3, [r3, #0]
   16c66:	46a8      	mov	r8, r5
   16c68:	469a      	mov	sl, r3
   16c6a:	2b00      	cmp	r3, #0
   16c6c:	db0a      	blt.n	16c84 <_vfprintf_r+0x1684>
   16c6e:	4645      	mov	r5, r8
   16c70:	9b07      	ldr	r3, [sp, #28]
   16c72:	950f      	str	r5, [sp, #60]	; 0x3c
   16c74:	785b      	ldrb	r3, [r3, #1]
   16c76:	9207      	str	r2, [sp, #28]
   16c78:	f7fe fd4b 	bl	15712 <_vfprintf_r+0x112>
   16c7c:	ab16      	add	r3, sp, #88	; 0x58
   16c7e:	77d8      	strb	r0, [r3, #31]
   16c80:	f7ff f830 	bl	15ce4 <_vfprintf_r+0x6e4>
   16c84:	2301      	movs	r3, #1
   16c86:	425b      	negs	r3, r3
   16c88:	469a      	mov	sl, r3
   16c8a:	e7f0      	b.n	16c6e <_vfprintf_r+0x166e>
   16c8c:	ab16      	add	r3, sp, #88	; 0x58
   16c8e:	77d8      	strb	r0, [r3, #31]
   16c90:	f7fe ff27 	bl	15ae2 <_vfprintf_r+0x4e2>
   16c94:	ab16      	add	r3, sp, #88	; 0x58
   16c96:	77d8      	strb	r0, [r3, #31]
   16c98:	f7fe fdce 	bl	15838 <_vfprintf_r+0x238>
   16c9c:	480c      	ldr	r0, [pc, #48]	; (16cd0 <_vfprintf_r+0x16d0>)
   16c9e:	4681      	mov	r9, r0
   16ca0:	e787      	b.n	16bb2 <_vfprintf_r+0x15b2>
   16ca2:	ab16      	add	r3, sp, #88	; 0x58
   16ca4:	77d8      	strb	r0, [r3, #31]
   16ca6:	f7ff f829 	bl	15cfc <_vfprintf_r+0x6fc>
   16caa:	ab16      	add	r3, sp, #88	; 0x58
   16cac:	77d8      	strb	r0, [r3, #31]
   16cae:	f7fe ffc3 	bl	15c38 <_vfprintf_r+0x638>
   16cb2:	ab16      	add	r3, sp, #88	; 0x58
   16cb4:	77d8      	strb	r0, [r3, #31]
   16cb6:	f7fe ffa5 	bl	15c04 <_vfprintf_r+0x604>
   16cba:	ab16      	add	r3, sp, #88	; 0x58
   16cbc:	77d8      	strb	r0, [r3, #31]
   16cbe:	f7fe feaf 	bl	15a20 <_vfprintf_r+0x420>
   16cc2:	aa16      	add	r2, sp, #88	; 0x58
   16cc4:	232e      	movs	r3, #46	; 0x2e
   16cc6:	4694      	mov	ip, r2
   16cc8:	4463      	add	r3, ip
   16cca:	e61a      	b.n	16902 <_vfprintf_r+0x1302>
   16ccc:	0001b3dc 	.word	0x0001b3dc
   16cd0:	0001b424 	.word	0x0001b424
   16cd4:	0001b3e0 	.word	0x0001b3e0

00016cd8 <__sbprintf>:
   16cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   16cda:	0015      	movs	r5, r2
   16cdc:	2202      	movs	r2, #2
   16cde:	4c1e      	ldr	r4, [pc, #120]	; (16d58 <__sbprintf+0x80>)
   16ce0:	001f      	movs	r7, r3
   16ce2:	898b      	ldrh	r3, [r1, #12]
   16ce4:	44a5      	add	sp, r4
   16ce6:	4393      	bics	r3, r2
   16ce8:	466a      	mov	r2, sp
   16cea:	8193      	strh	r3, [r2, #12]
   16cec:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   16cee:	0006      	movs	r6, r0
   16cf0:	9319      	str	r3, [sp, #100]	; 0x64
   16cf2:	89cb      	ldrh	r3, [r1, #14]
   16cf4:	a816      	add	r0, sp, #88	; 0x58
   16cf6:	81d3      	strh	r3, [r2, #14]
   16cf8:	69cb      	ldr	r3, [r1, #28]
   16cfa:	000c      	movs	r4, r1
   16cfc:	9307      	str	r3, [sp, #28]
   16cfe:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   16d00:	9309      	str	r3, [sp, #36]	; 0x24
   16d02:	ab1a      	add	r3, sp, #104	; 0x68
   16d04:	9300      	str	r3, [sp, #0]
   16d06:	9304      	str	r3, [sp, #16]
   16d08:	2380      	movs	r3, #128	; 0x80
   16d0a:	00db      	lsls	r3, r3, #3
   16d0c:	9302      	str	r3, [sp, #8]
   16d0e:	9305      	str	r3, [sp, #20]
   16d10:	2300      	movs	r3, #0
   16d12:	9306      	str	r3, [sp, #24]
   16d14:	f001 fd50 	bl	187b8 <__retarget_lock_init_recursive>
   16d18:	002a      	movs	r2, r5
   16d1a:	003b      	movs	r3, r7
   16d1c:	4669      	mov	r1, sp
   16d1e:	0030      	movs	r0, r6
   16d20:	f7fe fc6e 	bl	15600 <_vfprintf_r>
   16d24:	1e05      	subs	r5, r0, #0
   16d26:	db05      	blt.n	16d34 <__sbprintf+0x5c>
   16d28:	4669      	mov	r1, sp
   16d2a:	0030      	movs	r0, r6
   16d2c:	f001 f9ac 	bl	18088 <_fflush_r>
   16d30:	2800      	cmp	r0, #0
   16d32:	d10e      	bne.n	16d52 <__sbprintf+0x7a>
   16d34:	466b      	mov	r3, sp
   16d36:	899b      	ldrh	r3, [r3, #12]
   16d38:	065b      	lsls	r3, r3, #25
   16d3a:	d503      	bpl.n	16d44 <__sbprintf+0x6c>
   16d3c:	2240      	movs	r2, #64	; 0x40
   16d3e:	89a3      	ldrh	r3, [r4, #12]
   16d40:	4313      	orrs	r3, r2
   16d42:	81a3      	strh	r3, [r4, #12]
   16d44:	9816      	ldr	r0, [sp, #88]	; 0x58
   16d46:	f001 fd39 	bl	187bc <__retarget_lock_close_recursive>
   16d4a:	0028      	movs	r0, r5
   16d4c:	4b03      	ldr	r3, [pc, #12]	; (16d5c <__sbprintf+0x84>)
   16d4e:	449d      	add	sp, r3
   16d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16d52:	2501      	movs	r5, #1
   16d54:	426d      	negs	r5, r5
   16d56:	e7ed      	b.n	16d34 <__sbprintf+0x5c>
   16d58:	fffffb94 	.word	0xfffffb94
   16d5c:	0000046c 	.word	0x0000046c

00016d60 <__swsetup_r>:
   16d60:	4b33      	ldr	r3, [pc, #204]	; (16e30 <__swsetup_r+0xd0>)
   16d62:	b570      	push	{r4, r5, r6, lr}
   16d64:	0005      	movs	r5, r0
   16d66:	6818      	ldr	r0, [r3, #0]
   16d68:	000c      	movs	r4, r1
   16d6a:	2800      	cmp	r0, #0
   16d6c:	d002      	beq.n	16d74 <__swsetup_r+0x14>
   16d6e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   16d70:	2b00      	cmp	r3, #0
   16d72:	d03c      	beq.n	16dee <__swsetup_r+0x8e>
   16d74:	230c      	movs	r3, #12
   16d76:	5ee2      	ldrsh	r2, [r4, r3]
   16d78:	b293      	uxth	r3, r2
   16d7a:	0719      	lsls	r1, r3, #28
   16d7c:	d50d      	bpl.n	16d9a <__swsetup_r+0x3a>
   16d7e:	6921      	ldr	r1, [r4, #16]
   16d80:	2900      	cmp	r1, #0
   16d82:	d015      	beq.n	16db0 <__swsetup_r+0x50>
   16d84:	07da      	lsls	r2, r3, #31
   16d86:	d521      	bpl.n	16dcc <__swsetup_r+0x6c>
   16d88:	2300      	movs	r3, #0
   16d8a:	60a3      	str	r3, [r4, #8]
   16d8c:	6963      	ldr	r3, [r4, #20]
   16d8e:	2000      	movs	r0, #0
   16d90:	425b      	negs	r3, r3
   16d92:	61a3      	str	r3, [r4, #24]
   16d94:	2900      	cmp	r1, #0
   16d96:	d021      	beq.n	16ddc <__swsetup_r+0x7c>
   16d98:	bd70      	pop	{r4, r5, r6, pc}
   16d9a:	06d9      	lsls	r1, r3, #27
   16d9c:	d53f      	bpl.n	16e1e <__swsetup_r+0xbe>
   16d9e:	075b      	lsls	r3, r3, #29
   16da0:	d428      	bmi.n	16df4 <__swsetup_r+0x94>
   16da2:	6921      	ldr	r1, [r4, #16]
   16da4:	2308      	movs	r3, #8
   16da6:	4313      	orrs	r3, r2
   16da8:	81a3      	strh	r3, [r4, #12]
   16daa:	b29b      	uxth	r3, r3
   16dac:	2900      	cmp	r1, #0
   16dae:	d1e9      	bne.n	16d84 <__swsetup_r+0x24>
   16db0:	22a0      	movs	r2, #160	; 0xa0
   16db2:	2080      	movs	r0, #128	; 0x80
   16db4:	0092      	lsls	r2, r2, #2
   16db6:	0080      	lsls	r0, r0, #2
   16db8:	401a      	ands	r2, r3
   16dba:	4282      	cmp	r2, r0
   16dbc:	d0e2      	beq.n	16d84 <__swsetup_r+0x24>
   16dbe:	0021      	movs	r1, r4
   16dc0:	0028      	movs	r0, r5
   16dc2:	f001 fd31 	bl	18828 <__smakebuf_r>
   16dc6:	89a3      	ldrh	r3, [r4, #12]
   16dc8:	6921      	ldr	r1, [r4, #16]
   16dca:	e7db      	b.n	16d84 <__swsetup_r+0x24>
   16dcc:	2200      	movs	r2, #0
   16dce:	079b      	lsls	r3, r3, #30
   16dd0:	d400      	bmi.n	16dd4 <__swsetup_r+0x74>
   16dd2:	6962      	ldr	r2, [r4, #20]
   16dd4:	60a2      	str	r2, [r4, #8]
   16dd6:	2000      	movs	r0, #0
   16dd8:	2900      	cmp	r1, #0
   16dda:	d1dd      	bne.n	16d98 <__swsetup_r+0x38>
   16ddc:	220c      	movs	r2, #12
   16dde:	5ea3      	ldrsh	r3, [r4, r2]
   16de0:	061a      	lsls	r2, r3, #24
   16de2:	d5d9      	bpl.n	16d98 <__swsetup_r+0x38>
   16de4:	2240      	movs	r2, #64	; 0x40
   16de6:	4313      	orrs	r3, r2
   16de8:	81a3      	strh	r3, [r4, #12]
   16dea:	3801      	subs	r0, #1
   16dec:	e7d4      	b.n	16d98 <__swsetup_r+0x38>
   16dee:	f001 f9a5 	bl	1813c <__sinit>
   16df2:	e7bf      	b.n	16d74 <__swsetup_r+0x14>
   16df4:	6b21      	ldr	r1, [r4, #48]	; 0x30
   16df6:	2900      	cmp	r1, #0
   16df8:	d00a      	beq.n	16e10 <__swsetup_r+0xb0>
   16dfa:	0023      	movs	r3, r4
   16dfc:	3340      	adds	r3, #64	; 0x40
   16dfe:	4299      	cmp	r1, r3
   16e00:	d004      	beq.n	16e0c <__swsetup_r+0xac>
   16e02:	0028      	movs	r0, r5
   16e04:	f001 fa44 	bl	18290 <_free_r>
   16e08:	230c      	movs	r3, #12
   16e0a:	5ee2      	ldrsh	r2, [r4, r3]
   16e0c:	2300      	movs	r3, #0
   16e0e:	6323      	str	r3, [r4, #48]	; 0x30
   16e10:	2324      	movs	r3, #36	; 0x24
   16e12:	439a      	bics	r2, r3
   16e14:	2300      	movs	r3, #0
   16e16:	6921      	ldr	r1, [r4, #16]
   16e18:	6063      	str	r3, [r4, #4]
   16e1a:	6021      	str	r1, [r4, #0]
   16e1c:	e7c2      	b.n	16da4 <__swsetup_r+0x44>
   16e1e:	2309      	movs	r3, #9
   16e20:	602b      	str	r3, [r5, #0]
   16e22:	2340      	movs	r3, #64	; 0x40
   16e24:	2001      	movs	r0, #1
   16e26:	431a      	orrs	r2, r3
   16e28:	81a2      	strh	r2, [r4, #12]
   16e2a:	4240      	negs	r0, r0
   16e2c:	e7b4      	b.n	16d98 <__swsetup_r+0x38>
   16e2e:	46c0      	nop			; (mov r8, r8)
   16e30:	20000068 	.word	0x20000068

00016e34 <register_fini>:
   16e34:	4b03      	ldr	r3, [pc, #12]	; (16e44 <register_fini+0x10>)
   16e36:	b510      	push	{r4, lr}
   16e38:	2b00      	cmp	r3, #0
   16e3a:	d002      	beq.n	16e42 <register_fini+0xe>
   16e3c:	4802      	ldr	r0, [pc, #8]	; (16e48 <register_fini+0x14>)
   16e3e:	f000 f805 	bl	16e4c <atexit>
   16e42:	bd10      	pop	{r4, pc}
   16e44:	00000000 	.word	0x00000000
   16e48:	000181bd 	.word	0x000181bd

00016e4c <atexit>:
   16e4c:	b510      	push	{r4, lr}
   16e4e:	0001      	movs	r1, r0
   16e50:	2300      	movs	r3, #0
   16e52:	2200      	movs	r2, #0
   16e54:	2000      	movs	r0, #0
   16e56:	f002 fb73 	bl	19540 <__register_exitproc>
   16e5a:	bd10      	pop	{r4, pc}

00016e5c <quorem>:
   16e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   16e5e:	4645      	mov	r5, r8
   16e60:	4680      	mov	r8, r0
   16e62:	46de      	mov	lr, fp
   16e64:	4657      	mov	r7, sl
   16e66:	464e      	mov	r6, r9
   16e68:	4642      	mov	r2, r8
   16e6a:	b5e0      	push	{r5, r6, r7, lr}
   16e6c:	690c      	ldr	r4, [r1, #16]
   16e6e:	6912      	ldr	r2, [r2, #16]
   16e70:	b085      	sub	sp, #20
   16e72:	000b      	movs	r3, r1
   16e74:	9102      	str	r1, [sp, #8]
   16e76:	2000      	movs	r0, #0
   16e78:	4294      	cmp	r4, r2
   16e7a:	dd00      	ble.n	16e7e <quorem+0x22>
   16e7c:	e090      	b.n	16fa0 <quorem+0x144>
   16e7e:	2214      	movs	r2, #20
   16e80:	4694      	mov	ip, r2
   16e82:	4463      	add	r3, ip
   16e84:	4699      	mov	r9, r3
   16e86:	464a      	mov	r2, r9
   16e88:	3c01      	subs	r4, #1
   16e8a:	00a3      	lsls	r3, r4, #2
   16e8c:	18d6      	adds	r6, r2, r3
   16e8e:	2214      	movs	r2, #20
   16e90:	4442      	add	r2, r8
   16e92:	4693      	mov	fp, r2
   16e94:	449b      	add	fp, r3
   16e96:	6833      	ldr	r3, [r6, #0]
   16e98:	0015      	movs	r5, r2
   16e9a:	1c59      	adds	r1, r3, #1
   16e9c:	465b      	mov	r3, fp
   16e9e:	6818      	ldr	r0, [r3, #0]
   16ea0:	9201      	str	r2, [sp, #4]
   16ea2:	f7fa fdb1 	bl	11a08 <__udivsi3>
   16ea6:	1e03      	subs	r3, r0, #0
   16ea8:	9000      	str	r0, [sp, #0]
   16eaa:	d042      	beq.n	16f32 <quorem+0xd6>
   16eac:	0029      	movs	r1, r5
   16eae:	2700      	movs	r7, #0
   16eb0:	464d      	mov	r5, r9
   16eb2:	2000      	movs	r0, #0
   16eb4:	46b1      	mov	r9, r6
   16eb6:	46a2      	mov	sl, r4
   16eb8:	003e      	movs	r6, r7
   16eba:	0004      	movs	r4, r0
   16ebc:	469c      	mov	ip, r3
   16ebe:	002f      	movs	r7, r5
   16ec0:	0008      	movs	r0, r1
   16ec2:	9503      	str	r5, [sp, #12]
   16ec4:	4663      	mov	r3, ip
   16ec6:	cf04      	ldmia	r7!, {r2}
   16ec8:	0415      	lsls	r5, r2, #16
   16eca:	0c2d      	lsrs	r5, r5, #16
   16ecc:	435d      	muls	r5, r3
   16ece:	0c12      	lsrs	r2, r2, #16
   16ed0:	435a      	muls	r2, r3
   16ed2:	19ad      	adds	r5, r5, r6
   16ed4:	0c2b      	lsrs	r3, r5, #16
   16ed6:	18d2      	adds	r2, r2, r3
   16ed8:	6803      	ldr	r3, [r0, #0]
   16eda:	042d      	lsls	r5, r5, #16
   16edc:	0419      	lsls	r1, r3, #16
   16ede:	0c09      	lsrs	r1, r1, #16
   16ee0:	1909      	adds	r1, r1, r4
   16ee2:	0c16      	lsrs	r6, r2, #16
   16ee4:	0c2d      	lsrs	r5, r5, #16
   16ee6:	0412      	lsls	r2, r2, #16
   16ee8:	1b49      	subs	r1, r1, r5
   16eea:	0c12      	lsrs	r2, r2, #16
   16eec:	0c1b      	lsrs	r3, r3, #16
   16eee:	1a9b      	subs	r3, r3, r2
   16ef0:	140a      	asrs	r2, r1, #16
   16ef2:	189b      	adds	r3, r3, r2
   16ef4:	0409      	lsls	r1, r1, #16
   16ef6:	141c      	asrs	r4, r3, #16
   16ef8:	0c09      	lsrs	r1, r1, #16
   16efa:	041b      	lsls	r3, r3, #16
   16efc:	4319      	orrs	r1, r3
   16efe:	c002      	stmia	r0!, {r1}
   16f00:	45b9      	cmp	r9, r7
   16f02:	d2df      	bcs.n	16ec4 <quorem+0x68>
   16f04:	9b03      	ldr	r3, [sp, #12]
   16f06:	464e      	mov	r6, r9
   16f08:	4699      	mov	r9, r3
   16f0a:	465b      	mov	r3, fp
   16f0c:	681b      	ldr	r3, [r3, #0]
   16f0e:	4654      	mov	r4, sl
   16f10:	2b00      	cmp	r3, #0
   16f12:	d10e      	bne.n	16f32 <quorem+0xd6>
   16f14:	465b      	mov	r3, fp
   16f16:	9a01      	ldr	r2, [sp, #4]
   16f18:	3b04      	subs	r3, #4
   16f1a:	429a      	cmp	r2, r3
   16f1c:	d304      	bcc.n	16f28 <quorem+0xcc>
   16f1e:	e006      	b.n	16f2e <quorem+0xd2>
   16f20:	3b04      	subs	r3, #4
   16f22:	3c01      	subs	r4, #1
   16f24:	429a      	cmp	r2, r3
   16f26:	d202      	bcs.n	16f2e <quorem+0xd2>
   16f28:	6819      	ldr	r1, [r3, #0]
   16f2a:	2900      	cmp	r1, #0
   16f2c:	d0f8      	beq.n	16f20 <quorem+0xc4>
   16f2e:	4643      	mov	r3, r8
   16f30:	611c      	str	r4, [r3, #16]
   16f32:	9902      	ldr	r1, [sp, #8]
   16f34:	4640      	mov	r0, r8
   16f36:	f001 ff83 	bl	18e40 <__mcmp>
   16f3a:	2800      	cmp	r0, #0
   16f3c:	db2f      	blt.n	16f9e <quorem+0x142>
   16f3e:	464f      	mov	r7, r9
   16f40:	2000      	movs	r0, #0
   16f42:	9b00      	ldr	r3, [sp, #0]
   16f44:	9d01      	ldr	r5, [sp, #4]
   16f46:	3301      	adds	r3, #1
   16f48:	9300      	str	r3, [sp, #0]
   16f4a:	682b      	ldr	r3, [r5, #0]
   16f4c:	cf02      	ldmia	r7!, {r1}
   16f4e:	041a      	lsls	r2, r3, #16
   16f50:	0c12      	lsrs	r2, r2, #16
   16f52:	1810      	adds	r0, r2, r0
   16f54:	040a      	lsls	r2, r1, #16
   16f56:	0c12      	lsrs	r2, r2, #16
   16f58:	1a82      	subs	r2, r0, r2
   16f5a:	0c09      	lsrs	r1, r1, #16
   16f5c:	0c1b      	lsrs	r3, r3, #16
   16f5e:	1a5b      	subs	r3, r3, r1
   16f60:	1411      	asrs	r1, r2, #16
   16f62:	185b      	adds	r3, r3, r1
   16f64:	0412      	lsls	r2, r2, #16
   16f66:	1418      	asrs	r0, r3, #16
   16f68:	0c12      	lsrs	r2, r2, #16
   16f6a:	041b      	lsls	r3, r3, #16
   16f6c:	4313      	orrs	r3, r2
   16f6e:	c508      	stmia	r5!, {r3}
   16f70:	42be      	cmp	r6, r7
   16f72:	d2ea      	bcs.n	16f4a <quorem+0xee>
   16f74:	9901      	ldr	r1, [sp, #4]
   16f76:	00a3      	lsls	r3, r4, #2
   16f78:	468c      	mov	ip, r1
   16f7a:	4463      	add	r3, ip
   16f7c:	681a      	ldr	r2, [r3, #0]
   16f7e:	2a00      	cmp	r2, #0
   16f80:	d10d      	bne.n	16f9e <quorem+0x142>
   16f82:	3b04      	subs	r3, #4
   16f84:	000a      	movs	r2, r1
   16f86:	4299      	cmp	r1, r3
   16f88:	d304      	bcc.n	16f94 <quorem+0x138>
   16f8a:	e006      	b.n	16f9a <quorem+0x13e>
   16f8c:	3b04      	subs	r3, #4
   16f8e:	3c01      	subs	r4, #1
   16f90:	429a      	cmp	r2, r3
   16f92:	d202      	bcs.n	16f9a <quorem+0x13e>
   16f94:	6819      	ldr	r1, [r3, #0]
   16f96:	2900      	cmp	r1, #0
   16f98:	d0f8      	beq.n	16f8c <quorem+0x130>
   16f9a:	4643      	mov	r3, r8
   16f9c:	611c      	str	r4, [r3, #16]
   16f9e:	9800      	ldr	r0, [sp, #0]
   16fa0:	b005      	add	sp, #20
   16fa2:	bc3c      	pop	{r2, r3, r4, r5}
   16fa4:	4690      	mov	r8, r2
   16fa6:	4699      	mov	r9, r3
   16fa8:	46a2      	mov	sl, r4
   16faa:	46ab      	mov	fp, r5
   16fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16fae:	46c0      	nop			; (mov r8, r8)

00016fb0 <_dtoa_r>:
   16fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   16fb2:	4657      	mov	r7, sl
   16fb4:	464e      	mov	r6, r9
   16fb6:	4645      	mov	r5, r8
   16fb8:	46de      	mov	lr, fp
   16fba:	b5e0      	push	{r5, r6, r7, lr}
   16fbc:	6c01      	ldr	r1, [r0, #64]	; 0x40
   16fbe:	b099      	sub	sp, #100	; 0x64
   16fc0:	4682      	mov	sl, r0
   16fc2:	001d      	movs	r5, r3
   16fc4:	0016      	movs	r6, r2
   16fc6:	001f      	movs	r7, r3
   16fc8:	2900      	cmp	r1, #0
   16fca:	d009      	beq.n	16fe0 <_dtoa_r+0x30>
   16fcc:	2301      	movs	r3, #1
   16fce:	6c42      	ldr	r2, [r0, #68]	; 0x44
   16fd0:	4093      	lsls	r3, r2
   16fd2:	604a      	str	r2, [r1, #4]
   16fd4:	608b      	str	r3, [r1, #8]
   16fd6:	f001 fd27 	bl	18a28 <_Bfree>
   16fda:	2300      	movs	r3, #0
   16fdc:	4652      	mov	r2, sl
   16fde:	6413      	str	r3, [r2, #64]	; 0x40
   16fe0:	46b8      	mov	r8, r7
   16fe2:	2f00      	cmp	r7, #0
   16fe4:	db37      	blt.n	17056 <_dtoa_r+0xa6>
   16fe6:	2300      	movs	r3, #0
   16fe8:	9a25      	ldr	r2, [sp, #148]	; 0x94
   16fea:	6013      	str	r3, [r2, #0]
   16fec:	4642      	mov	r2, r8
   16fee:	4bd6      	ldr	r3, [pc, #856]	; (17348 <_dtoa_r+0x398>)
   16ff0:	401a      	ands	r2, r3
   16ff2:	429a      	cmp	r2, r3
   16ff4:	d018      	beq.n	17028 <_dtoa_r+0x78>
   16ff6:	2200      	movs	r2, #0
   16ff8:	2300      	movs	r3, #0
   16ffa:	0030      	movs	r0, r6
   16ffc:	0039      	movs	r1, r7
   16ffe:	f7fd fca5 	bl	1494c <__aeabi_dcmpeq>
   17002:	2800      	cmp	r0, #0
   17004:	d02f      	beq.n	17066 <_dtoa_r+0xb6>
   17006:	2301      	movs	r3, #1
   17008:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1700a:	6013      	str	r3, [r2, #0]
   1700c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1700e:	2b00      	cmp	r3, #0
   17010:	d100      	bne.n	17014 <_dtoa_r+0x64>
   17012:	e22a      	b.n	1746a <_dtoa_r+0x4ba>
   17014:	48cd      	ldr	r0, [pc, #820]	; (1734c <_dtoa_r+0x39c>)
   17016:	6018      	str	r0, [r3, #0]
   17018:	3801      	subs	r0, #1
   1701a:	b019      	add	sp, #100	; 0x64
   1701c:	bc3c      	pop	{r2, r3, r4, r5}
   1701e:	4690      	mov	r8, r2
   17020:	4699      	mov	r9, r3
   17022:	46a2      	mov	sl, r4
   17024:	46ab      	mov	fp, r5
   17026:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17028:	4bc9      	ldr	r3, [pc, #804]	; (17350 <_dtoa_r+0x3a0>)
   1702a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1702c:	6013      	str	r3, [r2, #0]
   1702e:	2e00      	cmp	r6, #0
   17030:	d10b      	bne.n	1704a <_dtoa_r+0x9a>
   17032:	4643      	mov	r3, r8
   17034:	0318      	lsls	r0, r3, #12
   17036:	d108      	bne.n	1704a <_dtoa_r+0x9a>
   17038:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1703a:	48c6      	ldr	r0, [pc, #792]	; (17354 <_dtoa_r+0x3a4>)
   1703c:	2b00      	cmp	r3, #0
   1703e:	d0ec      	beq.n	1701a <_dtoa_r+0x6a>
   17040:	0003      	movs	r3, r0
   17042:	3308      	adds	r3, #8
   17044:	9a26      	ldr	r2, [sp, #152]	; 0x98
   17046:	6013      	str	r3, [r2, #0]
   17048:	e7e7      	b.n	1701a <_dtoa_r+0x6a>
   1704a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1704c:	48c2      	ldr	r0, [pc, #776]	; (17358 <_dtoa_r+0x3a8>)
   1704e:	2b00      	cmp	r3, #0
   17050:	d0e3      	beq.n	1701a <_dtoa_r+0x6a>
   17052:	1cc3      	adds	r3, r0, #3
   17054:	e7f6      	b.n	17044 <_dtoa_r+0x94>
   17056:	2301      	movs	r3, #1
   17058:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1705a:	0068      	lsls	r0, r5, #1
   1705c:	6013      	str	r3, [r2, #0]
   1705e:	0843      	lsrs	r3, r0, #1
   17060:	4698      	mov	r8, r3
   17062:	001f      	movs	r7, r3
   17064:	e7c2      	b.n	16fec <_dtoa_r+0x3c>
   17066:	ab16      	add	r3, sp, #88	; 0x58
   17068:	9301      	str	r3, [sp, #4]
   1706a:	ab17      	add	r3, sp, #92	; 0x5c
   1706c:	9300      	str	r3, [sp, #0]
   1706e:	0032      	movs	r2, r6
   17070:	003b      	movs	r3, r7
   17072:	4650      	mov	r0, sl
   17074:	f001 ff9a 	bl	18fac <__d2b>
   17078:	4643      	mov	r3, r8
   1707a:	4683      	mov	fp, r0
   1707c:	0d1a      	lsrs	r2, r3, #20
   1707e:	d100      	bne.n	17082 <_dtoa_r+0xd2>
   17080:	e1d6      	b.n	17430 <_dtoa_r+0x480>
   17082:	033b      	lsls	r3, r7, #12
   17084:	4cb5      	ldr	r4, [pc, #724]	; (1735c <_dtoa_r+0x3ac>)
   17086:	0b1b      	lsrs	r3, r3, #12
   17088:	431c      	orrs	r4, r3
   1708a:	4bb5      	ldr	r3, [pc, #724]	; (17360 <_dtoa_r+0x3b0>)
   1708c:	0030      	movs	r0, r6
   1708e:	4698      	mov	r8, r3
   17090:	9b16      	ldr	r3, [sp, #88]	; 0x58
   17092:	0021      	movs	r1, r4
   17094:	4699      	mov	r9, r3
   17096:	2300      	movs	r3, #0
   17098:	4490      	add	r8, r2
   1709a:	930f      	str	r3, [sp, #60]	; 0x3c
   1709c:	2200      	movs	r2, #0
   1709e:	4bb1      	ldr	r3, [pc, #708]	; (17364 <_dtoa_r+0x3b4>)
   170a0:	f7fc ff5c 	bl	13f5c <__aeabi_dsub>
   170a4:	4ab0      	ldr	r2, [pc, #704]	; (17368 <_dtoa_r+0x3b8>)
   170a6:	4bb1      	ldr	r3, [pc, #708]	; (1736c <_dtoa_r+0x3bc>)
   170a8:	f7fc fcd8 	bl	13a5c <__aeabi_dmul>
   170ac:	4ab0      	ldr	r2, [pc, #704]	; (17370 <_dtoa_r+0x3c0>)
   170ae:	4bb1      	ldr	r3, [pc, #708]	; (17374 <_dtoa_r+0x3c4>)
   170b0:	f7fb fe90 	bl	12dd4 <__aeabi_dadd>
   170b4:	0004      	movs	r4, r0
   170b6:	4640      	mov	r0, r8
   170b8:	000d      	movs	r5, r1
   170ba:	f7fd fa99 	bl	145f0 <__aeabi_i2d>
   170be:	4aae      	ldr	r2, [pc, #696]	; (17378 <_dtoa_r+0x3c8>)
   170c0:	4bae      	ldr	r3, [pc, #696]	; (1737c <_dtoa_r+0x3cc>)
   170c2:	f7fc fccb 	bl	13a5c <__aeabi_dmul>
   170c6:	0002      	movs	r2, r0
   170c8:	000b      	movs	r3, r1
   170ca:	0020      	movs	r0, r4
   170cc:	0029      	movs	r1, r5
   170ce:	f7fb fe81 	bl	12dd4 <__aeabi_dadd>
   170d2:	0004      	movs	r4, r0
   170d4:	000d      	movs	r5, r1
   170d6:	f7fd fa57 	bl	14588 <__aeabi_d2iz>
   170da:	2200      	movs	r2, #0
   170dc:	9003      	str	r0, [sp, #12]
   170de:	2300      	movs	r3, #0
   170e0:	0020      	movs	r0, r4
   170e2:	0029      	movs	r1, r5
   170e4:	f7fd fc38 	bl	14958 <__aeabi_dcmplt>
   170e8:	2800      	cmp	r0, #0
   170ea:	d000      	beq.n	170ee <_dtoa_r+0x13e>
   170ec:	e2b1      	b.n	17652 <_dtoa_r+0x6a2>
   170ee:	2301      	movs	r3, #1
   170f0:	9c03      	ldr	r4, [sp, #12]
   170f2:	930c      	str	r3, [sp, #48]	; 0x30
   170f4:	2c16      	cmp	r4, #22
   170f6:	d810      	bhi.n	1711a <_dtoa_r+0x16a>
   170f8:	49a1      	ldr	r1, [pc, #644]	; (17380 <_dtoa_r+0x3d0>)
   170fa:	00e3      	lsls	r3, r4, #3
   170fc:	18c9      	adds	r1, r1, r3
   170fe:	0032      	movs	r2, r6
   17100:	6808      	ldr	r0, [r1, #0]
   17102:	6849      	ldr	r1, [r1, #4]
   17104:	003b      	movs	r3, r7
   17106:	f7fd fc3b 	bl	14980 <__aeabi_dcmpgt>
   1710a:	2800      	cmp	r0, #0
   1710c:	d100      	bne.n	17110 <_dtoa_r+0x160>
   1710e:	e31d      	b.n	1774c <_dtoa_r+0x79c>
   17110:	0023      	movs	r3, r4
   17112:	3b01      	subs	r3, #1
   17114:	9303      	str	r3, [sp, #12]
   17116:	2300      	movs	r3, #0
   17118:	930c      	str	r3, [sp, #48]	; 0x30
   1711a:	464b      	mov	r3, r9
   1711c:	4642      	mov	r2, r8
   1711e:	1a9a      	subs	r2, r3, r2
   17120:	2300      	movs	r3, #0
   17122:	9306      	str	r3, [sp, #24]
   17124:	0013      	movs	r3, r2
   17126:	3b01      	subs	r3, #1
   17128:	9304      	str	r3, [sp, #16]
   1712a:	d500      	bpl.n	1712e <_dtoa_r+0x17e>
   1712c:	e2a1      	b.n	17672 <_dtoa_r+0x6c2>
   1712e:	9b03      	ldr	r3, [sp, #12]
   17130:	2b00      	cmp	r3, #0
   17132:	da00      	bge.n	17136 <_dtoa_r+0x186>
   17134:	e284      	b.n	17640 <_dtoa_r+0x690>
   17136:	469c      	mov	ip, r3
   17138:	930d      	str	r3, [sp, #52]	; 0x34
   1713a:	2300      	movs	r3, #0
   1713c:	9a04      	ldr	r2, [sp, #16]
   1713e:	4699      	mov	r9, r3
   17140:	0011      	movs	r1, r2
   17142:	4461      	add	r1, ip
   17144:	9104      	str	r1, [sp, #16]
   17146:	9b22      	ldr	r3, [sp, #136]	; 0x88
   17148:	2b09      	cmp	r3, #9
   1714a:	d900      	bls.n	1714e <_dtoa_r+0x19e>
   1714c:	e18f      	b.n	1746e <_dtoa_r+0x4be>
   1714e:	2401      	movs	r4, #1
   17150:	2b05      	cmp	r3, #5
   17152:	dd02      	ble.n	1715a <_dtoa_r+0x1aa>
   17154:	2400      	movs	r4, #0
   17156:	3b04      	subs	r3, #4
   17158:	9322      	str	r3, [sp, #136]	; 0x88
   1715a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1715c:	2b03      	cmp	r3, #3
   1715e:	d101      	bne.n	17164 <_dtoa_r+0x1b4>
   17160:	f000 fcce 	bl	17b00 <_dtoa_r+0xb50>
   17164:	dc01      	bgt.n	1716a <_dtoa_r+0x1ba>
   17166:	f000 fc92 	bl	17a8e <_dtoa_r+0xade>
   1716a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1716c:	2b04      	cmp	r3, #4
   1716e:	d101      	bne.n	17174 <_dtoa_r+0x1c4>
   17170:	f000 fc40 	bl	179f4 <_dtoa_r+0xa44>
   17174:	2301      	movs	r3, #1
   17176:	930b      	str	r3, [sp, #44]	; 0x2c
   17178:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1717a:	2b05      	cmp	r3, #5
   1717c:	d001      	beq.n	17182 <_dtoa_r+0x1d2>
   1717e:	f000 fc8b 	bl	17a98 <_dtoa_r+0xae8>
   17182:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   17184:	9b03      	ldr	r3, [sp, #12]
   17186:	4694      	mov	ip, r2
   17188:	4463      	add	r3, ip
   1718a:	930e      	str	r3, [sp, #56]	; 0x38
   1718c:	3301      	adds	r3, #1
   1718e:	9307      	str	r3, [sp, #28]
   17190:	1e1d      	subs	r5, r3, #0
   17192:	dc01      	bgt.n	17198 <_dtoa_r+0x1e8>
   17194:	f000 fd49 	bl	17c2a <_dtoa_r+0xc7a>
   17198:	9b07      	ldr	r3, [sp, #28]
   1719a:	4698      	mov	r8, r3
   1719c:	2300      	movs	r3, #0
   1719e:	4652      	mov	r2, sl
   171a0:	2100      	movs	r1, #0
   171a2:	6453      	str	r3, [r2, #68]	; 0x44
   171a4:	2d17      	cmp	r5, #23
   171a6:	d90a      	bls.n	171be <_dtoa_r+0x20e>
   171a8:	2201      	movs	r2, #1
   171aa:	3304      	adds	r3, #4
   171ac:	005b      	lsls	r3, r3, #1
   171ae:	0018      	movs	r0, r3
   171b0:	3014      	adds	r0, #20
   171b2:	0011      	movs	r1, r2
   171b4:	3201      	adds	r2, #1
   171b6:	4285      	cmp	r5, r0
   171b8:	d2f8      	bcs.n	171ac <_dtoa_r+0x1fc>
   171ba:	4653      	mov	r3, sl
   171bc:	6459      	str	r1, [r3, #68]	; 0x44
   171be:	4650      	mov	r0, sl
   171c0:	f001 fc0a 	bl	189d8 <_Balloc>
   171c4:	4653      	mov	r3, sl
   171c6:	6418      	str	r0, [r3, #64]	; 0x40
   171c8:	4643      	mov	r3, r8
   171ca:	900a      	str	r0, [sp, #40]	; 0x28
   171cc:	2b0e      	cmp	r3, #14
   171ce:	d900      	bls.n	171d2 <_dtoa_r+0x222>
   171d0:	e161      	b.n	17496 <_dtoa_r+0x4e6>
   171d2:	2c00      	cmp	r4, #0
   171d4:	d100      	bne.n	171d8 <_dtoa_r+0x228>
   171d6:	e15e      	b.n	17496 <_dtoa_r+0x4e6>
   171d8:	9610      	str	r6, [sp, #64]	; 0x40
   171da:	9711      	str	r7, [sp, #68]	; 0x44
   171dc:	9e03      	ldr	r6, [sp, #12]
   171de:	2e00      	cmp	r6, #0
   171e0:	dc01      	bgt.n	171e6 <_dtoa_r+0x236>
   171e2:	f000 fd25 	bl	17c30 <_dtoa_r+0xc80>
   171e6:	0032      	movs	r2, r6
   171e8:	210f      	movs	r1, #15
   171ea:	4b65      	ldr	r3, [pc, #404]	; (17380 <_dtoa_r+0x3d0>)
   171ec:	400a      	ands	r2, r1
   171ee:	00d2      	lsls	r2, r2, #3
   171f0:	189b      	adds	r3, r3, r2
   171f2:	1136      	asrs	r6, r6, #4
   171f4:	681c      	ldr	r4, [r3, #0]
   171f6:	685d      	ldr	r5, [r3, #4]
   171f8:	06f3      	lsls	r3, r6, #27
   171fa:	d401      	bmi.n	17200 <_dtoa_r+0x250>
   171fc:	f000 fcca 	bl	17b94 <_dtoa_r+0xbe4>
   17200:	4b60      	ldr	r3, [pc, #384]	; (17384 <_dtoa_r+0x3d4>)
   17202:	400e      	ands	r6, r1
   17204:	6a1a      	ldr	r2, [r3, #32]
   17206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17208:	9810      	ldr	r0, [sp, #64]	; 0x40
   1720a:	9911      	ldr	r1, [sp, #68]	; 0x44
   1720c:	f7fc f8f2 	bl	133f4 <__aeabi_ddiv>
   17210:	2303      	movs	r3, #3
   17212:	4698      	mov	r8, r3
   17214:	9008      	str	r0, [sp, #32]
   17216:	9109      	str	r1, [sp, #36]	; 0x24
   17218:	2e00      	cmp	r6, #0
   1721a:	d011      	beq.n	17240 <_dtoa_r+0x290>
   1721c:	4f59      	ldr	r7, [pc, #356]	; (17384 <_dtoa_r+0x3d4>)
   1721e:	2301      	movs	r3, #1
   17220:	4233      	tst	r3, r6
   17222:	d009      	beq.n	17238 <_dtoa_r+0x288>
   17224:	469c      	mov	ip, r3
   17226:	683a      	ldr	r2, [r7, #0]
   17228:	687b      	ldr	r3, [r7, #4]
   1722a:	0020      	movs	r0, r4
   1722c:	0029      	movs	r1, r5
   1722e:	44e0      	add	r8, ip
   17230:	f7fc fc14 	bl	13a5c <__aeabi_dmul>
   17234:	0004      	movs	r4, r0
   17236:	000d      	movs	r5, r1
   17238:	1076      	asrs	r6, r6, #1
   1723a:	3708      	adds	r7, #8
   1723c:	2e00      	cmp	r6, #0
   1723e:	d1ee      	bne.n	1721e <_dtoa_r+0x26e>
   17240:	0022      	movs	r2, r4
   17242:	9808      	ldr	r0, [sp, #32]
   17244:	9909      	ldr	r1, [sp, #36]	; 0x24
   17246:	002b      	movs	r3, r5
   17248:	f7fc f8d4 	bl	133f4 <__aeabi_ddiv>
   1724c:	0006      	movs	r6, r0
   1724e:	000f      	movs	r7, r1
   17250:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   17252:	2b00      	cmp	r3, #0
   17254:	d009      	beq.n	1726a <_dtoa_r+0x2ba>
   17256:	2200      	movs	r2, #0
   17258:	4b40      	ldr	r3, [pc, #256]	; (1735c <_dtoa_r+0x3ac>)
   1725a:	0030      	movs	r0, r6
   1725c:	0039      	movs	r1, r7
   1725e:	f7fd fb7b 	bl	14958 <__aeabi_dcmplt>
   17262:	2800      	cmp	r0, #0
   17264:	d001      	beq.n	1726a <_dtoa_r+0x2ba>
   17266:	f000 fdc2 	bl	17dee <_dtoa_r+0xe3e>
   1726a:	4640      	mov	r0, r8
   1726c:	f7fd f9c0 	bl	145f0 <__aeabi_i2d>
   17270:	0032      	movs	r2, r6
   17272:	003b      	movs	r3, r7
   17274:	f7fc fbf2 	bl	13a5c <__aeabi_dmul>
   17278:	2200      	movs	r2, #0
   1727a:	4b43      	ldr	r3, [pc, #268]	; (17388 <_dtoa_r+0x3d8>)
   1727c:	f7fb fdaa 	bl	12dd4 <__aeabi_dadd>
   17280:	4a42      	ldr	r2, [pc, #264]	; (1738c <_dtoa_r+0x3dc>)
   17282:	000b      	movs	r3, r1
   17284:	4694      	mov	ip, r2
   17286:	4463      	add	r3, ip
   17288:	9008      	str	r0, [sp, #32]
   1728a:	9109      	str	r1, [sp, #36]	; 0x24
   1728c:	9309      	str	r3, [sp, #36]	; 0x24
   1728e:	9b07      	ldr	r3, [sp, #28]
   17290:	2b00      	cmp	r3, #0
   17292:	d101      	bne.n	17298 <_dtoa_r+0x2e8>
   17294:	f000 fc50 	bl	17b38 <_dtoa_r+0xb88>
   17298:	9b03      	ldr	r3, [sp, #12]
   1729a:	9313      	str	r3, [sp, #76]	; 0x4c
   1729c:	9b07      	ldr	r3, [sp, #28]
   1729e:	9312      	str	r3, [sp, #72]	; 0x48
   172a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   172a2:	2b00      	cmp	r3, #0
   172a4:	d101      	bne.n	172aa <_dtoa_r+0x2fa>
   172a6:	f000 fd1d 	bl	17ce4 <_dtoa_r+0xd34>
   172aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
   172ac:	2000      	movs	r0, #0
   172ae:	1e5a      	subs	r2, r3, #1
   172b0:	4b33      	ldr	r3, [pc, #204]	; (17380 <_dtoa_r+0x3d0>)
   172b2:	00d2      	lsls	r2, r2, #3
   172b4:	189b      	adds	r3, r3, r2
   172b6:	681a      	ldr	r2, [r3, #0]
   172b8:	685b      	ldr	r3, [r3, #4]
   172ba:	4935      	ldr	r1, [pc, #212]	; (17390 <_dtoa_r+0x3e0>)
   172bc:	f7fc f89a 	bl	133f4 <__aeabi_ddiv>
   172c0:	9a08      	ldr	r2, [sp, #32]
   172c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   172c4:	f7fc fe4a 	bl	13f5c <__aeabi_dsub>
   172c8:	9008      	str	r0, [sp, #32]
   172ca:	9109      	str	r1, [sp, #36]	; 0x24
   172cc:	0039      	movs	r1, r7
   172ce:	0030      	movs	r0, r6
   172d0:	f7fd f95a 	bl	14588 <__aeabi_d2iz>
   172d4:	0004      	movs	r4, r0
   172d6:	f7fd f98b 	bl	145f0 <__aeabi_i2d>
   172da:	0002      	movs	r2, r0
   172dc:	000b      	movs	r3, r1
   172de:	0030      	movs	r0, r6
   172e0:	0039      	movs	r1, r7
   172e2:	f7fc fe3b 	bl	13f5c <__aeabi_dsub>
   172e6:	0005      	movs	r5, r0
   172e8:	000e      	movs	r6, r1
   172ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   172ec:	3430      	adds	r4, #48	; 0x30
   172ee:	1c51      	adds	r1, r2, #1
   172f0:	b2e7      	uxtb	r7, r4
   172f2:	9114      	str	r1, [sp, #80]	; 0x50
   172f4:	7017      	strb	r7, [r2, #0]
   172f6:	0033      	movs	r3, r6
   172f8:	9808      	ldr	r0, [sp, #32]
   172fa:	9909      	ldr	r1, [sp, #36]	; 0x24
   172fc:	002a      	movs	r2, r5
   172fe:	f7fd fb3f 	bl	14980 <__aeabi_dcmpgt>
   17302:	2800      	cmp	r0, #0
   17304:	d001      	beq.n	1730a <_dtoa_r+0x35a>
   17306:	f000 fdfe 	bl	17f06 <_dtoa_r+0xf56>
   1730a:	002a      	movs	r2, r5
   1730c:	0033      	movs	r3, r6
   1730e:	2000      	movs	r0, #0
   17310:	4912      	ldr	r1, [pc, #72]	; (1735c <_dtoa_r+0x3ac>)
   17312:	f7fc fe23 	bl	13f5c <__aeabi_dsub>
   17316:	0002      	movs	r2, r0
   17318:	000b      	movs	r3, r1
   1731a:	9808      	ldr	r0, [sp, #32]
   1731c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1731e:	f7fd fb2f 	bl	14980 <__aeabi_dcmpgt>
   17322:	2800      	cmp	r0, #0
   17324:	d001      	beq.n	1732a <_dtoa_r+0x37a>
   17326:	f000 fde7 	bl	17ef8 <_dtoa_r+0xf48>
   1732a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1732c:	2b01      	cmp	r3, #1
   1732e:	d101      	bne.n	17334 <_dtoa_r+0x384>
   17330:	f000 fc78 	bl	17c24 <_dtoa_r+0xc74>
   17334:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   17336:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17338:	4694      	mov	ip, r2
   1733a:	4463      	add	r3, ip
   1733c:	4698      	mov	r8, r3
   1733e:	464b      	mov	r3, r9
   17340:	9312      	str	r3, [sp, #72]	; 0x48
   17342:	9b14      	ldr	r3, [sp, #80]	; 0x50
   17344:	4699      	mov	r9, r3
   17346:	e038      	b.n	173ba <_dtoa_r+0x40a>
   17348:	7ff00000 	.word	0x7ff00000
   1734c:	0001ae81 	.word	0x0001ae81
   17350:	0000270f 	.word	0x0000270f
   17354:	0001b434 	.word	0x0001b434
   17358:	0001b440 	.word	0x0001b440
   1735c:	3ff00000 	.word	0x3ff00000
   17360:	fffffc01 	.word	0xfffffc01
   17364:	3ff80000 	.word	0x3ff80000
   17368:	636f4361 	.word	0x636f4361
   1736c:	3fd287a7 	.word	0x3fd287a7
   17370:	8b60c8b3 	.word	0x8b60c8b3
   17374:	3fc68a28 	.word	0x3fc68a28
   17378:	509f79fb 	.word	0x509f79fb
   1737c:	3fd34413 	.word	0x3fd34413
   17380:	0001b470 	.word	0x0001b470
   17384:	0001b448 	.word	0x0001b448
   17388:	401c0000 	.word	0x401c0000
   1738c:	fcc00000 	.word	0xfcc00000
   17390:	3fe00000 	.word	0x3fe00000
   17394:	002a      	movs	r2, r5
   17396:	0033      	movs	r3, r6
   17398:	2000      	movs	r0, #0
   1739a:	49b9      	ldr	r1, [pc, #740]	; (17680 <_dtoa_r+0x6d0>)
   1739c:	f7fc fdde 	bl	13f5c <__aeabi_dsub>
   173a0:	9a08      	ldr	r2, [sp, #32]
   173a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   173a4:	f7fd fad8 	bl	14958 <__aeabi_dcmplt>
   173a8:	2800      	cmp	r0, #0
   173aa:	d001      	beq.n	173b0 <_dtoa_r+0x400>
   173ac:	f000 fd74 	bl	17e98 <_dtoa_r+0xee8>
   173b0:	46a1      	mov	r9, r4
   173b2:	4544      	cmp	r4, r8
   173b4:	d101      	bne.n	173ba <_dtoa_r+0x40a>
   173b6:	f000 fc33 	bl	17c20 <_dtoa_r+0xc70>
   173ba:	9808      	ldr	r0, [sp, #32]
   173bc:	9909      	ldr	r1, [sp, #36]	; 0x24
   173be:	2200      	movs	r2, #0
   173c0:	4bb0      	ldr	r3, [pc, #704]	; (17684 <_dtoa_r+0x6d4>)
   173c2:	f7fc fb4b 	bl	13a5c <__aeabi_dmul>
   173c6:	2200      	movs	r2, #0
   173c8:	4bae      	ldr	r3, [pc, #696]	; (17684 <_dtoa_r+0x6d4>)
   173ca:	9008      	str	r0, [sp, #32]
   173cc:	9109      	str	r1, [sp, #36]	; 0x24
   173ce:	0028      	movs	r0, r5
   173d0:	0031      	movs	r1, r6
   173d2:	f7fc fb43 	bl	13a5c <__aeabi_dmul>
   173d6:	000d      	movs	r5, r1
   173d8:	0004      	movs	r4, r0
   173da:	f7fd f8d5 	bl	14588 <__aeabi_d2iz>
   173de:	0007      	movs	r7, r0
   173e0:	f7fd f906 	bl	145f0 <__aeabi_i2d>
   173e4:	0002      	movs	r2, r0
   173e6:	000b      	movs	r3, r1
   173e8:	0020      	movs	r0, r4
   173ea:	0029      	movs	r1, r5
   173ec:	f7fc fdb6 	bl	13f5c <__aeabi_dsub>
   173f0:	464b      	mov	r3, r9
   173f2:	3730      	adds	r7, #48	; 0x30
   173f4:	b2ff      	uxtb	r7, r7
   173f6:	1c5c      	adds	r4, r3, #1
   173f8:	701f      	strb	r7, [r3, #0]
   173fa:	9a08      	ldr	r2, [sp, #32]
   173fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   173fe:	0005      	movs	r5, r0
   17400:	000e      	movs	r6, r1
   17402:	f7fd faa9 	bl	14958 <__aeabi_dcmplt>
   17406:	2800      	cmp	r0, #0
   17408:	d0c4      	beq.n	17394 <_dtoa_r+0x3e4>
   1740a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1740c:	9303      	str	r3, [sp, #12]
   1740e:	4659      	mov	r1, fp
   17410:	4650      	mov	r0, sl
   17412:	f001 fb09 	bl	18a28 <_Bfree>
   17416:	2300      	movs	r3, #0
   17418:	7023      	strb	r3, [r4, #0]
   1741a:	9b03      	ldr	r3, [sp, #12]
   1741c:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1741e:	3301      	adds	r3, #1
   17420:	6013      	str	r3, [r2, #0]
   17422:	9b26      	ldr	r3, [sp, #152]	; 0x98
   17424:	2b00      	cmp	r3, #0
   17426:	d100      	bne.n	1742a <_dtoa_r+0x47a>
   17428:	e3a8      	b.n	17b7c <_dtoa_r+0xbcc>
   1742a:	601c      	str	r4, [r3, #0]
   1742c:	980a      	ldr	r0, [sp, #40]	; 0x28
   1742e:	e5f4      	b.n	1701a <_dtoa_r+0x6a>
   17430:	9b16      	ldr	r3, [sp, #88]	; 0x58
   17432:	4699      	mov	r9, r3
   17434:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   17436:	444b      	add	r3, r9
   17438:	001c      	movs	r4, r3
   1743a:	4b93      	ldr	r3, [pc, #588]	; (17688 <_dtoa_r+0x6d8>)
   1743c:	18e3      	adds	r3, r4, r3
   1743e:	2b20      	cmp	r3, #32
   17440:	dc00      	bgt.n	17444 <_dtoa_r+0x494>
   17442:	e17e      	b.n	17742 <_dtoa_r+0x792>
   17444:	0031      	movs	r1, r6
   17446:	4a91      	ldr	r2, [pc, #580]	; (1768c <_dtoa_r+0x6dc>)
   17448:	4640      	mov	r0, r8
   1744a:	18a2      	adds	r2, r4, r2
   1744c:	40d1      	lsrs	r1, r2
   1744e:	000a      	movs	r2, r1
   17450:	2140      	movs	r1, #64	; 0x40
   17452:	1acb      	subs	r3, r1, r3
   17454:	4098      	lsls	r0, r3
   17456:	4310      	orrs	r0, r2
   17458:	f7fd f90c 	bl	14674 <__aeabi_ui2d>
   1745c:	1e63      	subs	r3, r4, #1
   1745e:	4698      	mov	r8, r3
   17460:	2301      	movs	r3, #1
   17462:	4d8b      	ldr	r5, [pc, #556]	; (17690 <_dtoa_r+0x6e0>)
   17464:	930f      	str	r3, [sp, #60]	; 0x3c
   17466:	1949      	adds	r1, r1, r5
   17468:	e618      	b.n	1709c <_dtoa_r+0xec>
   1746a:	488a      	ldr	r0, [pc, #552]	; (17694 <_dtoa_r+0x6e4>)
   1746c:	e5d5      	b.n	1701a <_dtoa_r+0x6a>
   1746e:	2300      	movs	r3, #0
   17470:	4652      	mov	r2, sl
   17472:	2100      	movs	r1, #0
   17474:	6453      	str	r3, [r2, #68]	; 0x44
   17476:	4650      	mov	r0, sl
   17478:	f001 faae 	bl	189d8 <_Balloc>
   1747c:	4653      	mov	r3, sl
   1747e:	6418      	str	r0, [r3, #64]	; 0x40
   17480:	2301      	movs	r3, #1
   17482:	425b      	negs	r3, r3
   17484:	9307      	str	r3, [sp, #28]
   17486:	930e      	str	r3, [sp, #56]	; 0x38
   17488:	3302      	adds	r3, #2
   1748a:	2200      	movs	r2, #0
   1748c:	930b      	str	r3, [sp, #44]	; 0x2c
   1748e:	2300      	movs	r3, #0
   17490:	900a      	str	r0, [sp, #40]	; 0x28
   17492:	9223      	str	r2, [sp, #140]	; 0x8c
   17494:	9322      	str	r3, [sp, #136]	; 0x88
   17496:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   17498:	2b00      	cmp	r3, #0
   1749a:	da00      	bge.n	1749e <_dtoa_r+0x4ee>
   1749c:	e0ab      	b.n	175f6 <_dtoa_r+0x646>
   1749e:	9a03      	ldr	r2, [sp, #12]
   174a0:	2a0e      	cmp	r2, #14
   174a2:	dd00      	ble.n	174a6 <_dtoa_r+0x4f6>
   174a4:	e0a7      	b.n	175f6 <_dtoa_r+0x646>
   174a6:	4b7c      	ldr	r3, [pc, #496]	; (17698 <_dtoa_r+0x6e8>)
   174a8:	00d2      	lsls	r2, r2, #3
   174aa:	189b      	adds	r3, r3, r2
   174ac:	685c      	ldr	r4, [r3, #4]
   174ae:	681b      	ldr	r3, [r3, #0]
   174b0:	9304      	str	r3, [sp, #16]
   174b2:	9405      	str	r4, [sp, #20]
   174b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   174b6:	2b00      	cmp	r3, #0
   174b8:	da00      	bge.n	174bc <_dtoa_r+0x50c>
   174ba:	e2a7      	b.n	17a0c <_dtoa_r+0xa5c>
   174bc:	9c04      	ldr	r4, [sp, #16]
   174be:	9d05      	ldr	r5, [sp, #20]
   174c0:	0030      	movs	r0, r6
   174c2:	0022      	movs	r2, r4
   174c4:	002b      	movs	r3, r5
   174c6:	0039      	movs	r1, r7
   174c8:	f7fb ff94 	bl	133f4 <__aeabi_ddiv>
   174cc:	f7fd f85c 	bl	14588 <__aeabi_d2iz>
   174d0:	4680      	mov	r8, r0
   174d2:	f7fd f88d 	bl	145f0 <__aeabi_i2d>
   174d6:	0022      	movs	r2, r4
   174d8:	002b      	movs	r3, r5
   174da:	f7fc fabf 	bl	13a5c <__aeabi_dmul>
   174de:	0002      	movs	r2, r0
   174e0:	000b      	movs	r3, r1
   174e2:	0030      	movs	r0, r6
   174e4:	0039      	movs	r1, r7
   174e6:	f7fc fd39 	bl	13f5c <__aeabi_dsub>
   174ea:	4643      	mov	r3, r8
   174ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   174ee:	3330      	adds	r3, #48	; 0x30
   174f0:	7013      	strb	r3, [r2, #0]
   174f2:	9b07      	ldr	r3, [sp, #28]
   174f4:	0006      	movs	r6, r0
   174f6:	000f      	movs	r7, r1
   174f8:	1c54      	adds	r4, r2, #1
   174fa:	2b01      	cmp	r3, #1
   174fc:	d04e      	beq.n	1759c <_dtoa_r+0x5ec>
   174fe:	2200      	movs	r2, #0
   17500:	4b60      	ldr	r3, [pc, #384]	; (17684 <_dtoa_r+0x6d4>)
   17502:	f7fc faab 	bl	13a5c <__aeabi_dmul>
   17506:	2200      	movs	r2, #0
   17508:	2300      	movs	r3, #0
   1750a:	0006      	movs	r6, r0
   1750c:	000f      	movs	r7, r1
   1750e:	f7fd fa1d 	bl	1494c <__aeabi_dcmpeq>
   17512:	2800      	cmp	r0, #0
   17514:	d000      	beq.n	17518 <_dtoa_r+0x568>
   17516:	e77a      	b.n	1740e <_dtoa_r+0x45e>
   17518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1751a:	9a07      	ldr	r2, [sp, #28]
   1751c:	1c9d      	adds	r5, r3, #2
   1751e:	469c      	mov	ip, r3
   17520:	465b      	mov	r3, fp
   17522:	9306      	str	r3, [sp, #24]
   17524:	4653      	mov	r3, sl
   17526:	4462      	add	r2, ip
   17528:	46aa      	mov	sl, r5
   1752a:	9c04      	ldr	r4, [sp, #16]
   1752c:	9d05      	ldr	r5, [sp, #20]
   1752e:	4691      	mov	r9, r2
   17530:	9307      	str	r3, [sp, #28]
   17532:	e00f      	b.n	17554 <_dtoa_r+0x5a4>
   17534:	2200      	movs	r2, #0
   17536:	4b53      	ldr	r3, [pc, #332]	; (17684 <_dtoa_r+0x6d4>)
   17538:	f7fc fa90 	bl	13a5c <__aeabi_dmul>
   1753c:	2301      	movs	r3, #1
   1753e:	469c      	mov	ip, r3
   17540:	2200      	movs	r2, #0
   17542:	2300      	movs	r3, #0
   17544:	0006      	movs	r6, r0
   17546:	000f      	movs	r7, r1
   17548:	44e2      	add	sl, ip
   1754a:	f7fd f9ff 	bl	1494c <__aeabi_dcmpeq>
   1754e:	2800      	cmp	r0, #0
   17550:	d000      	beq.n	17554 <_dtoa_r+0x5a4>
   17552:	e2d9      	b.n	17b08 <_dtoa_r+0xb58>
   17554:	0022      	movs	r2, r4
   17556:	002b      	movs	r3, r5
   17558:	0030      	movs	r0, r6
   1755a:	0039      	movs	r1, r7
   1755c:	f7fb ff4a 	bl	133f4 <__aeabi_ddiv>
   17560:	f7fd f812 	bl	14588 <__aeabi_d2iz>
   17564:	4680      	mov	r8, r0
   17566:	f7fd f843 	bl	145f0 <__aeabi_i2d>
   1756a:	0022      	movs	r2, r4
   1756c:	002b      	movs	r3, r5
   1756e:	f7fc fa75 	bl	13a5c <__aeabi_dmul>
   17572:	0002      	movs	r2, r0
   17574:	000b      	movs	r3, r1
   17576:	0030      	movs	r0, r6
   17578:	0039      	movs	r1, r7
   1757a:	f7fc fcef 	bl	13f5c <__aeabi_dsub>
   1757e:	4653      	mov	r3, sl
   17580:	4642      	mov	r2, r8
   17582:	3b01      	subs	r3, #1
   17584:	3230      	adds	r2, #48	; 0x30
   17586:	0006      	movs	r6, r0
   17588:	000f      	movs	r7, r1
   1758a:	46d3      	mov	fp, sl
   1758c:	701a      	strb	r2, [r3, #0]
   1758e:	45d1      	cmp	r9, sl
   17590:	d1d0      	bne.n	17534 <_dtoa_r+0x584>
   17592:	9b06      	ldr	r3, [sp, #24]
   17594:	4654      	mov	r4, sl
   17596:	469b      	mov	fp, r3
   17598:	9b07      	ldr	r3, [sp, #28]
   1759a:	469a      	mov	sl, r3
   1759c:	0032      	movs	r2, r6
   1759e:	003b      	movs	r3, r7
   175a0:	0030      	movs	r0, r6
   175a2:	0039      	movs	r1, r7
   175a4:	f7fb fc16 	bl	12dd4 <__aeabi_dadd>
   175a8:	0006      	movs	r6, r0
   175aa:	000f      	movs	r7, r1
   175ac:	0002      	movs	r2, r0
   175ae:	000b      	movs	r3, r1
   175b0:	9804      	ldr	r0, [sp, #16]
   175b2:	9905      	ldr	r1, [sp, #20]
   175b4:	f7fd f9d0 	bl	14958 <__aeabi_dcmplt>
   175b8:	2800      	cmp	r0, #0
   175ba:	d10c      	bne.n	175d6 <_dtoa_r+0x626>
   175bc:	9804      	ldr	r0, [sp, #16]
   175be:	9905      	ldr	r1, [sp, #20]
   175c0:	0032      	movs	r2, r6
   175c2:	003b      	movs	r3, r7
   175c4:	f7fd f9c2 	bl	1494c <__aeabi_dcmpeq>
   175c8:	2800      	cmp	r0, #0
   175ca:	d100      	bne.n	175ce <_dtoa_r+0x61e>
   175cc:	e71f      	b.n	1740e <_dtoa_r+0x45e>
   175ce:	4643      	mov	r3, r8
   175d0:	07db      	lsls	r3, r3, #31
   175d2:	d400      	bmi.n	175d6 <_dtoa_r+0x626>
   175d4:	e71b      	b.n	1740e <_dtoa_r+0x45e>
   175d6:	1e65      	subs	r5, r4, #1
   175d8:	782f      	ldrb	r7, [r5, #0]
   175da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   175dc:	e006      	b.n	175ec <_dtoa_r+0x63c>
   175de:	429d      	cmp	r5, r3
   175e0:	d100      	bne.n	175e4 <_dtoa_r+0x634>
   175e2:	e351      	b.n	17c88 <_dtoa_r+0xcd8>
   175e4:	3c02      	subs	r4, #2
   175e6:	7827      	ldrb	r7, [r4, #0]
   175e8:	002c      	movs	r4, r5
   175ea:	3d01      	subs	r5, #1
   175ec:	2f39      	cmp	r7, #57	; 0x39
   175ee:	d0f6      	beq.n	175de <_dtoa_r+0x62e>
   175f0:	3701      	adds	r7, #1
   175f2:	702f      	strb	r7, [r5, #0]
   175f4:	e70b      	b.n	1740e <_dtoa_r+0x45e>
   175f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   175f8:	2a00      	cmp	r2, #0
   175fa:	d04f      	beq.n	1769c <_dtoa_r+0x6ec>
   175fc:	9a22      	ldr	r2, [sp, #136]	; 0x88
   175fe:	2a01      	cmp	r2, #1
   17600:	dc00      	bgt.n	17604 <_dtoa_r+0x654>
   17602:	e22c      	b.n	17a5e <_dtoa_r+0xaae>
   17604:	9b07      	ldr	r3, [sp, #28]
   17606:	1e5c      	subs	r4, r3, #1
   17608:	464b      	mov	r3, r9
   1760a:	45a1      	cmp	r9, r4
   1760c:	da00      	bge.n	17610 <_dtoa_r+0x660>
   1760e:	e2b8      	b.n	17b82 <_dtoa_r+0xbd2>
   17610:	1b1c      	subs	r4, r3, r4
   17612:	9b07      	ldr	r3, [sp, #28]
   17614:	2b00      	cmp	r3, #0
   17616:	da00      	bge.n	1761a <_dtoa_r+0x66a>
   17618:	e3d4      	b.n	17dc4 <_dtoa_r+0xe14>
   1761a:	9b06      	ldr	r3, [sp, #24]
   1761c:	9308      	str	r3, [sp, #32]
   1761e:	9b07      	ldr	r3, [sp, #28]
   17620:	9a06      	ldr	r2, [sp, #24]
   17622:	2101      	movs	r1, #1
   17624:	4694      	mov	ip, r2
   17626:	449c      	add	ip, r3
   17628:	4662      	mov	r2, ip
   1762a:	9206      	str	r2, [sp, #24]
   1762c:	9a04      	ldr	r2, [sp, #16]
   1762e:	4650      	mov	r0, sl
   17630:	4694      	mov	ip, r2
   17632:	449c      	add	ip, r3
   17634:	4663      	mov	r3, ip
   17636:	9304      	str	r3, [sp, #16]
   17638:	f001 fa8e 	bl	18b58 <__i2b>
   1763c:	4680      	mov	r8, r0
   1763e:	e032      	b.n	176a6 <_dtoa_r+0x6f6>
   17640:	9a06      	ldr	r2, [sp, #24]
   17642:	9b03      	ldr	r3, [sp, #12]
   17644:	1ad2      	subs	r2, r2, r3
   17646:	425b      	negs	r3, r3
   17648:	4699      	mov	r9, r3
   1764a:	2300      	movs	r3, #0
   1764c:	9206      	str	r2, [sp, #24]
   1764e:	930d      	str	r3, [sp, #52]	; 0x34
   17650:	e579      	b.n	17146 <_dtoa_r+0x196>
   17652:	9803      	ldr	r0, [sp, #12]
   17654:	f7fc ffcc 	bl	145f0 <__aeabi_i2d>
   17658:	000b      	movs	r3, r1
   1765a:	0002      	movs	r2, r0
   1765c:	0029      	movs	r1, r5
   1765e:	0020      	movs	r0, r4
   17660:	f7fd f974 	bl	1494c <__aeabi_dcmpeq>
   17664:	0002      	movs	r2, r0
   17666:	4250      	negs	r0, r2
   17668:	4150      	adcs	r0, r2
   1766a:	9b03      	ldr	r3, [sp, #12]
   1766c:	1a1b      	subs	r3, r3, r0
   1766e:	9303      	str	r3, [sp, #12]
   17670:	e53d      	b.n	170ee <_dtoa_r+0x13e>
   17672:	2301      	movs	r3, #1
   17674:	1a9b      	subs	r3, r3, r2
   17676:	9306      	str	r3, [sp, #24]
   17678:	2300      	movs	r3, #0
   1767a:	9304      	str	r3, [sp, #16]
   1767c:	e557      	b.n	1712e <_dtoa_r+0x17e>
   1767e:	46c0      	nop			; (mov r8, r8)
   17680:	3ff00000 	.word	0x3ff00000
   17684:	40240000 	.word	0x40240000
   17688:	00000432 	.word	0x00000432
   1768c:	00000412 	.word	0x00000412
   17690:	fe100000 	.word	0xfe100000
   17694:	0001ae80 	.word	0x0001ae80
   17698:	0001b470 	.word	0x0001b470
   1769c:	9b06      	ldr	r3, [sp, #24]
   1769e:	464c      	mov	r4, r9
   176a0:	9308      	str	r3, [sp, #32]
   176a2:	2300      	movs	r3, #0
   176a4:	4698      	mov	r8, r3
   176a6:	9908      	ldr	r1, [sp, #32]
   176a8:	1e0b      	subs	r3, r1, #0
   176aa:	dd0e      	ble.n	176ca <_dtoa_r+0x71a>
   176ac:	9a04      	ldr	r2, [sp, #16]
   176ae:	2a00      	cmp	r2, #0
   176b0:	dd0b      	ble.n	176ca <_dtoa_r+0x71a>
   176b2:	4293      	cmp	r3, r2
   176b4:	dd00      	ble.n	176b8 <_dtoa_r+0x708>
   176b6:	e187      	b.n	179c8 <_dtoa_r+0xa18>
   176b8:	9a06      	ldr	r2, [sp, #24]
   176ba:	1ad2      	subs	r2, r2, r3
   176bc:	9206      	str	r2, [sp, #24]
   176be:	9a08      	ldr	r2, [sp, #32]
   176c0:	1ad2      	subs	r2, r2, r3
   176c2:	9208      	str	r2, [sp, #32]
   176c4:	9a04      	ldr	r2, [sp, #16]
   176c6:	1ad3      	subs	r3, r2, r3
   176c8:	9304      	str	r3, [sp, #16]
   176ca:	464b      	mov	r3, r9
   176cc:	2b00      	cmp	r3, #0
   176ce:	d01a      	beq.n	17706 <_dtoa_r+0x756>
   176d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   176d2:	2b00      	cmp	r3, #0
   176d4:	d100      	bne.n	176d8 <_dtoa_r+0x728>
   176d6:	e1bb      	b.n	17a50 <_dtoa_r+0xaa0>
   176d8:	2c00      	cmp	r4, #0
   176da:	dd10      	ble.n	176fe <_dtoa_r+0x74e>
   176dc:	4641      	mov	r1, r8
   176de:	0022      	movs	r2, r4
   176e0:	4650      	mov	r0, sl
   176e2:	f001 faed 	bl	18cc0 <__pow5mult>
   176e6:	465a      	mov	r2, fp
   176e8:	0001      	movs	r1, r0
   176ea:	4680      	mov	r8, r0
   176ec:	4650      	mov	r0, sl
   176ee:	f001 fa3d 	bl	18b6c <__multiply>
   176f2:	0005      	movs	r5, r0
   176f4:	4659      	mov	r1, fp
   176f6:	4650      	mov	r0, sl
   176f8:	f001 f996 	bl	18a28 <_Bfree>
   176fc:	46ab      	mov	fp, r5
   176fe:	464b      	mov	r3, r9
   17700:	1b1a      	subs	r2, r3, r4
   17702:	d000      	beq.n	17706 <_dtoa_r+0x756>
   17704:	e1a5      	b.n	17a52 <_dtoa_r+0xaa2>
   17706:	2101      	movs	r1, #1
   17708:	4650      	mov	r0, sl
   1770a:	f001 fa25 	bl	18b58 <__i2b>
   1770e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   17710:	4681      	mov	r9, r0
   17712:	2b00      	cmp	r3, #0
   17714:	dd1d      	ble.n	17752 <_dtoa_r+0x7a2>
   17716:	001a      	movs	r2, r3
   17718:	0001      	movs	r1, r0
   1771a:	4650      	mov	r0, sl
   1771c:	f001 fad0 	bl	18cc0 <__pow5mult>
   17720:	9b22      	ldr	r3, [sp, #136]	; 0x88
   17722:	4681      	mov	r9, r0
   17724:	2b01      	cmp	r3, #1
   17726:	dc00      	bgt.n	1772a <_dtoa_r+0x77a>
   17728:	e150      	b.n	179cc <_dtoa_r+0xa1c>
   1772a:	2400      	movs	r4, #0
   1772c:	464b      	mov	r3, r9
   1772e:	691b      	ldr	r3, [r3, #16]
   17730:	3303      	adds	r3, #3
   17732:	009b      	lsls	r3, r3, #2
   17734:	444b      	add	r3, r9
   17736:	6858      	ldr	r0, [r3, #4]
   17738:	f001 f9c6 	bl	18ac8 <__hi0bits>
   1773c:	2320      	movs	r3, #32
   1773e:	1a1b      	subs	r3, r3, r0
   17740:	e010      	b.n	17764 <_dtoa_r+0x7b4>
   17742:	2220      	movs	r2, #32
   17744:	0030      	movs	r0, r6
   17746:	1ad3      	subs	r3, r2, r3
   17748:	4098      	lsls	r0, r3
   1774a:	e685      	b.n	17458 <_dtoa_r+0x4a8>
   1774c:	2300      	movs	r3, #0
   1774e:	930c      	str	r3, [sp, #48]	; 0x30
   17750:	e4e3      	b.n	1711a <_dtoa_r+0x16a>
   17752:	9b22      	ldr	r3, [sp, #136]	; 0x88
   17754:	2400      	movs	r4, #0
   17756:	2b01      	cmp	r3, #1
   17758:	dc00      	bgt.n	1775c <_dtoa_r+0x7ac>
   1775a:	e18b      	b.n	17a74 <_dtoa_r+0xac4>
   1775c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1775e:	2301      	movs	r3, #1
   17760:	2a00      	cmp	r2, #0
   17762:	d1e3      	bne.n	1772c <_dtoa_r+0x77c>
   17764:	9904      	ldr	r1, [sp, #16]
   17766:	201f      	movs	r0, #31
   17768:	468c      	mov	ip, r1
   1776a:	4463      	add	r3, ip
   1776c:	4018      	ands	r0, r3
   1776e:	d100      	bne.n	17772 <_dtoa_r+0x7c2>
   17770:	e0ae      	b.n	178d0 <_dtoa_r+0x920>
   17772:	2320      	movs	r3, #32
   17774:	1a1b      	subs	r3, r3, r0
   17776:	2b04      	cmp	r3, #4
   17778:	dc00      	bgt.n	1777c <_dtoa_r+0x7cc>
   1777a:	e3cc      	b.n	17f16 <_dtoa_r+0xf66>
   1777c:	231c      	movs	r3, #28
   1777e:	1a18      	subs	r0, r3, r0
   17780:	9b06      	ldr	r3, [sp, #24]
   17782:	469c      	mov	ip, r3
   17784:	4484      	add	ip, r0
   17786:	4663      	mov	r3, ip
   17788:	9306      	str	r3, [sp, #24]
   1778a:	9b08      	ldr	r3, [sp, #32]
   1778c:	469c      	mov	ip, r3
   1778e:	4484      	add	ip, r0
   17790:	4663      	mov	r3, ip
   17792:	468c      	mov	ip, r1
   17794:	4484      	add	ip, r0
   17796:	9308      	str	r3, [sp, #32]
   17798:	4663      	mov	r3, ip
   1779a:	9304      	str	r3, [sp, #16]
   1779c:	9b06      	ldr	r3, [sp, #24]
   1779e:	2b00      	cmp	r3, #0
   177a0:	dd05      	ble.n	177ae <_dtoa_r+0x7fe>
   177a2:	4659      	mov	r1, fp
   177a4:	001a      	movs	r2, r3
   177a6:	4650      	mov	r0, sl
   177a8:	f001 faea 	bl	18d80 <__lshift>
   177ac:	4683      	mov	fp, r0
   177ae:	9b04      	ldr	r3, [sp, #16]
   177b0:	2b00      	cmp	r3, #0
   177b2:	dd05      	ble.n	177c0 <_dtoa_r+0x810>
   177b4:	4649      	mov	r1, r9
   177b6:	001a      	movs	r2, r3
   177b8:	4650      	mov	r0, sl
   177ba:	f001 fae1 	bl	18d80 <__lshift>
   177be:	4681      	mov	r9, r0
   177c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   177c2:	2b00      	cmp	r3, #0
   177c4:	d000      	beq.n	177c8 <_dtoa_r+0x818>
   177c6:	e094      	b.n	178f2 <_dtoa_r+0x942>
   177c8:	9b07      	ldr	r3, [sp, #28]
   177ca:	2b00      	cmp	r3, #0
   177cc:	dc00      	bgt.n	177d0 <_dtoa_r+0x820>
   177ce:	e175      	b.n	17abc <_dtoa_r+0xb0c>
   177d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   177d2:	2b00      	cmp	r3, #0
   177d4:	d100      	bne.n	177d8 <_dtoa_r+0x828>
   177d6:	e0a6      	b.n	17926 <_dtoa_r+0x976>
   177d8:	9b08      	ldr	r3, [sp, #32]
   177da:	2b00      	cmp	r3, #0
   177dc:	dd05      	ble.n	177ea <_dtoa_r+0x83a>
   177de:	4641      	mov	r1, r8
   177e0:	001a      	movs	r2, r3
   177e2:	4650      	mov	r0, sl
   177e4:	f001 facc 	bl	18d80 <__lshift>
   177e8:	4680      	mov	r8, r0
   177ea:	4643      	mov	r3, r8
   177ec:	930c      	str	r3, [sp, #48]	; 0x30
   177ee:	2c00      	cmp	r4, #0
   177f0:	d000      	beq.n	177f4 <_dtoa_r+0x844>
   177f2:	e250      	b.n	17c96 <_dtoa_r+0xce6>
   177f4:	9c07      	ldr	r4, [sp, #28]
   177f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   177f8:	3c01      	subs	r4, #1
   177fa:	0023      	movs	r3, r4
   177fc:	4694      	mov	ip, r2
   177fe:	4463      	add	r3, ip
   17800:	9308      	str	r3, [sp, #32]
   17802:	2301      	movs	r3, #1
   17804:	4033      	ands	r3, r6
   17806:	9307      	str	r3, [sp, #28]
   17808:	464b      	mov	r3, r9
   1780a:	9306      	str	r3, [sp, #24]
   1780c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1780e:	4657      	mov	r7, sl
   17810:	4645      	mov	r5, r8
   17812:	465e      	mov	r6, fp
   17814:	4692      	mov	sl, r2
   17816:	4698      	mov	r8, r3
   17818:	9b06      	ldr	r3, [sp, #24]
   1781a:	0030      	movs	r0, r6
   1781c:	0019      	movs	r1, r3
   1781e:	4699      	mov	r9, r3
   17820:	f7ff fb1c 	bl	16e5c <quorem>
   17824:	0003      	movs	r3, r0
   17826:	900b      	str	r0, [sp, #44]	; 0x2c
   17828:	3330      	adds	r3, #48	; 0x30
   1782a:	0029      	movs	r1, r5
   1782c:	0030      	movs	r0, r6
   1782e:	9304      	str	r3, [sp, #16]
   17830:	f001 fb06 	bl	18e40 <__mcmp>
   17834:	4649      	mov	r1, r9
   17836:	0004      	movs	r4, r0
   17838:	4642      	mov	r2, r8
   1783a:	0038      	movs	r0, r7
   1783c:	f001 fb1a 	bl	18e74 <__mdiff>
   17840:	68c3      	ldr	r3, [r0, #12]
   17842:	4681      	mov	r9, r0
   17844:	2b00      	cmp	r3, #0
   17846:	d000      	beq.n	1784a <_dtoa_r+0x89a>
   17848:	e11e      	b.n	17a88 <_dtoa_r+0xad8>
   1784a:	0001      	movs	r1, r0
   1784c:	0030      	movs	r0, r6
   1784e:	f001 faf7 	bl	18e40 <__mcmp>
   17852:	4683      	mov	fp, r0
   17854:	4649      	mov	r1, r9
   17856:	0038      	movs	r0, r7
   17858:	f001 f8e6 	bl	18a28 <_Bfree>
   1785c:	465b      	mov	r3, fp
   1785e:	9a22      	ldr	r2, [sp, #136]	; 0x88
   17860:	4313      	orrs	r3, r2
   17862:	d103      	bne.n	1786c <_dtoa_r+0x8bc>
   17864:	9b07      	ldr	r3, [sp, #28]
   17866:	2b00      	cmp	r3, #0
   17868:	d100      	bne.n	1786c <_dtoa_r+0x8bc>
   1786a:	e306      	b.n	17e7a <_dtoa_r+0xeca>
   1786c:	2c00      	cmp	r4, #0
   1786e:	da00      	bge.n	17872 <_dtoa_r+0x8c2>
   17870:	e1a8      	b.n	17bc4 <_dtoa_r+0xc14>
   17872:	9b22      	ldr	r3, [sp, #136]	; 0x88
   17874:	431c      	orrs	r4, r3
   17876:	d103      	bne.n	17880 <_dtoa_r+0x8d0>
   17878:	9b07      	ldr	r3, [sp, #28]
   1787a:	2b00      	cmp	r3, #0
   1787c:	d100      	bne.n	17880 <_dtoa_r+0x8d0>
   1787e:	e1a1      	b.n	17bc4 <_dtoa_r+0xc14>
   17880:	465b      	mov	r3, fp
   17882:	2b00      	cmp	r3, #0
   17884:	dd00      	ble.n	17888 <_dtoa_r+0x8d8>
   17886:	e282      	b.n	17d8e <_dtoa_r+0xdde>
   17888:	4669      	mov	r1, sp
   1788a:	4652      	mov	r2, sl
   1788c:	4653      	mov	r3, sl
   1788e:	7c09      	ldrb	r1, [r1, #16]
   17890:	1c5c      	adds	r4, r3, #1
   17892:	7011      	strb	r1, [r2, #0]
   17894:	9a08      	ldr	r2, [sp, #32]
   17896:	4552      	cmp	r2, sl
   17898:	d100      	bne.n	1789c <_dtoa_r+0x8ec>
   1789a:	e28a      	b.n	17db2 <_dtoa_r+0xe02>
   1789c:	0031      	movs	r1, r6
   1789e:	2300      	movs	r3, #0
   178a0:	220a      	movs	r2, #10
   178a2:	0038      	movs	r0, r7
   178a4:	f001 f8ca 	bl	18a3c <__multadd>
   178a8:	2300      	movs	r3, #0
   178aa:	0006      	movs	r6, r0
   178ac:	220a      	movs	r2, #10
   178ae:	0029      	movs	r1, r5
   178b0:	0038      	movs	r0, r7
   178b2:	4545      	cmp	r5, r8
   178b4:	d100      	bne.n	178b8 <_dtoa_r+0x908>
   178b6:	e0e1      	b.n	17a7c <_dtoa_r+0xacc>
   178b8:	f001 f8c0 	bl	18a3c <__multadd>
   178bc:	4641      	mov	r1, r8
   178be:	0005      	movs	r5, r0
   178c0:	2300      	movs	r3, #0
   178c2:	220a      	movs	r2, #10
   178c4:	0038      	movs	r0, r7
   178c6:	f001 f8b9 	bl	18a3c <__multadd>
   178ca:	46a2      	mov	sl, r4
   178cc:	4680      	mov	r8, r0
   178ce:	e7a3      	b.n	17818 <_dtoa_r+0x868>
   178d0:	201c      	movs	r0, #28
   178d2:	9b06      	ldr	r3, [sp, #24]
   178d4:	469c      	mov	ip, r3
   178d6:	4484      	add	ip, r0
   178d8:	4663      	mov	r3, ip
   178da:	9306      	str	r3, [sp, #24]
   178dc:	9b08      	ldr	r3, [sp, #32]
   178de:	469c      	mov	ip, r3
   178e0:	4484      	add	ip, r0
   178e2:	4663      	mov	r3, ip
   178e4:	9308      	str	r3, [sp, #32]
   178e6:	9b04      	ldr	r3, [sp, #16]
   178e8:	469c      	mov	ip, r3
   178ea:	4484      	add	ip, r0
   178ec:	4663      	mov	r3, ip
   178ee:	9304      	str	r3, [sp, #16]
   178f0:	e754      	b.n	1779c <_dtoa_r+0x7ec>
   178f2:	4649      	mov	r1, r9
   178f4:	4658      	mov	r0, fp
   178f6:	f001 faa3 	bl	18e40 <__mcmp>
   178fa:	2800      	cmp	r0, #0
   178fc:	db00      	blt.n	17900 <_dtoa_r+0x950>
   178fe:	e763      	b.n	177c8 <_dtoa_r+0x818>
   17900:	9b03      	ldr	r3, [sp, #12]
   17902:	4659      	mov	r1, fp
   17904:	3b01      	subs	r3, #1
   17906:	9303      	str	r3, [sp, #12]
   17908:	220a      	movs	r2, #10
   1790a:	2300      	movs	r3, #0
   1790c:	4650      	mov	r0, sl
   1790e:	f001 f895 	bl	18a3c <__multadd>
   17912:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17914:	4683      	mov	fp, r0
   17916:	2b00      	cmp	r3, #0
   17918:	d000      	beq.n	1791c <_dtoa_r+0x96c>
   1791a:	e2ca      	b.n	17eb2 <_dtoa_r+0xf02>
   1791c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1791e:	2b00      	cmp	r3, #0
   17920:	dc00      	bgt.n	17924 <_dtoa_r+0x974>
   17922:	e2d8      	b.n	17ed6 <_dtoa_r+0xf26>
   17924:	9307      	str	r3, [sp, #28]
   17926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17928:	465d      	mov	r5, fp
   1792a:	2400      	movs	r4, #0
   1792c:	9f07      	ldr	r7, [sp, #28]
   1792e:	469b      	mov	fp, r3
   17930:	e006      	b.n	17940 <_dtoa_r+0x990>
   17932:	0029      	movs	r1, r5
   17934:	2300      	movs	r3, #0
   17936:	220a      	movs	r2, #10
   17938:	4650      	mov	r0, sl
   1793a:	f001 f87f 	bl	18a3c <__multadd>
   1793e:	0005      	movs	r5, r0
   17940:	4649      	mov	r1, r9
   17942:	0028      	movs	r0, r5
   17944:	f7ff fa8a 	bl	16e5c <quorem>
   17948:	465b      	mov	r3, fp
   1794a:	3030      	adds	r0, #48	; 0x30
   1794c:	5518      	strb	r0, [r3, r4]
   1794e:	3401      	adds	r4, #1
   17950:	42bc      	cmp	r4, r7
   17952:	dbee      	blt.n	17932 <_dtoa_r+0x982>
   17954:	46ab      	mov	fp, r5
   17956:	0006      	movs	r6, r0
   17958:	9c07      	ldr	r4, [sp, #28]
   1795a:	2c00      	cmp	r4, #0
   1795c:	dc00      	bgt.n	17960 <_dtoa_r+0x9b0>
   1795e:	e237      	b.n	17dd0 <_dtoa_r+0xe20>
   17960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17962:	2700      	movs	r7, #0
   17964:	469c      	mov	ip, r3
   17966:	4464      	add	r4, ip
   17968:	4659      	mov	r1, fp
   1796a:	2201      	movs	r2, #1
   1796c:	4650      	mov	r0, sl
   1796e:	f001 fa07 	bl	18d80 <__lshift>
   17972:	4649      	mov	r1, r9
   17974:	4683      	mov	fp, r0
   17976:	f001 fa63 	bl	18e40 <__mcmp>
   1797a:	2800      	cmp	r0, #0
   1797c:	dc00      	bgt.n	17980 <_dtoa_r+0x9d0>
   1797e:	e144      	b.n	17c0a <_dtoa_r+0xc5a>
   17980:	1e65      	subs	r5, r4, #1
   17982:	782b      	ldrb	r3, [r5, #0]
   17984:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   17986:	e006      	b.n	17996 <_dtoa_r+0x9e6>
   17988:	4295      	cmp	r5, r2
   1798a:	d100      	bne.n	1798e <_dtoa_r+0x9de>
   1798c:	e0b1      	b.n	17af2 <_dtoa_r+0xb42>
   1798e:	3c02      	subs	r4, #2
   17990:	7823      	ldrb	r3, [r4, #0]
   17992:	002c      	movs	r4, r5
   17994:	3d01      	subs	r5, #1
   17996:	2b39      	cmp	r3, #57	; 0x39
   17998:	d0f6      	beq.n	17988 <_dtoa_r+0x9d8>
   1799a:	3301      	adds	r3, #1
   1799c:	702b      	strb	r3, [r5, #0]
   1799e:	4649      	mov	r1, r9
   179a0:	4650      	mov	r0, sl
   179a2:	f001 f841 	bl	18a28 <_Bfree>
   179a6:	4643      	mov	r3, r8
   179a8:	2b00      	cmp	r3, #0
   179aa:	d100      	bne.n	179ae <_dtoa_r+0x9fe>
   179ac:	e52f      	b.n	1740e <_dtoa_r+0x45e>
   179ae:	2f00      	cmp	r7, #0
   179b0:	d005      	beq.n	179be <_dtoa_r+0xa0e>
   179b2:	4547      	cmp	r7, r8
   179b4:	d003      	beq.n	179be <_dtoa_r+0xa0e>
   179b6:	0039      	movs	r1, r7
   179b8:	4650      	mov	r0, sl
   179ba:	f001 f835 	bl	18a28 <_Bfree>
   179be:	4641      	mov	r1, r8
   179c0:	4650      	mov	r0, sl
   179c2:	f001 f831 	bl	18a28 <_Bfree>
   179c6:	e522      	b.n	1740e <_dtoa_r+0x45e>
   179c8:	0013      	movs	r3, r2
   179ca:	e675      	b.n	176b8 <_dtoa_r+0x708>
   179cc:	2e00      	cmp	r6, #0
   179ce:	d000      	beq.n	179d2 <_dtoa_r+0xa22>
   179d0:	e6ab      	b.n	1772a <_dtoa_r+0x77a>
   179d2:	033b      	lsls	r3, r7, #12
   179d4:	2400      	movs	r4, #0
   179d6:	2b00      	cmp	r3, #0
   179d8:	d000      	beq.n	179dc <_dtoa_r+0xa2c>
   179da:	e6bf      	b.n	1775c <_dtoa_r+0x7ac>
   179dc:	4bba      	ldr	r3, [pc, #744]	; (17cc8 <_dtoa_r+0xd18>)
   179de:	423b      	tst	r3, r7
   179e0:	d100      	bne.n	179e4 <_dtoa_r+0xa34>
   179e2:	e6bb      	b.n	1775c <_dtoa_r+0x7ac>
   179e4:	9b06      	ldr	r3, [sp, #24]
   179e6:	3401      	adds	r4, #1
   179e8:	3301      	adds	r3, #1
   179ea:	9306      	str	r3, [sp, #24]
   179ec:	9b04      	ldr	r3, [sp, #16]
   179ee:	3301      	adds	r3, #1
   179f0:	9304      	str	r3, [sp, #16]
   179f2:	e6b3      	b.n	1775c <_dtoa_r+0x7ac>
   179f4:	2301      	movs	r3, #1
   179f6:	930b      	str	r3, [sp, #44]	; 0x2c
   179f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   179fa:	2b00      	cmp	r3, #0
   179fc:	dc00      	bgt.n	17a00 <_dtoa_r+0xa50>
   179fe:	e0d1      	b.n	17ba4 <_dtoa_r+0xbf4>
   17a00:	001d      	movs	r5, r3
   17a02:	4698      	mov	r8, r3
   17a04:	930e      	str	r3, [sp, #56]	; 0x38
   17a06:	9307      	str	r3, [sp, #28]
   17a08:	f7ff fbc8 	bl	1719c <_dtoa_r+0x1ec>
   17a0c:	9b07      	ldr	r3, [sp, #28]
   17a0e:	2b00      	cmp	r3, #0
   17a10:	dd00      	ble.n	17a14 <_dtoa_r+0xa64>
   17a12:	e553      	b.n	174bc <_dtoa_r+0x50c>
   17a14:	d000      	beq.n	17a18 <_dtoa_r+0xa68>
   17a16:	e0ad      	b.n	17b74 <_dtoa_r+0xbc4>
   17a18:	9804      	ldr	r0, [sp, #16]
   17a1a:	9905      	ldr	r1, [sp, #20]
   17a1c:	2200      	movs	r2, #0
   17a1e:	4bab      	ldr	r3, [pc, #684]	; (17ccc <_dtoa_r+0xd1c>)
   17a20:	f7fc f81c 	bl	13a5c <__aeabi_dmul>
   17a24:	003b      	movs	r3, r7
   17a26:	0032      	movs	r2, r6
   17a28:	f7fc ffb4 	bl	14994 <__aeabi_dcmpge>
   17a2c:	2300      	movs	r3, #0
   17a2e:	4699      	mov	r9, r3
   17a30:	4698      	mov	r8, r3
   17a32:	2800      	cmp	r0, #0
   17a34:	d055      	beq.n	17ae2 <_dtoa_r+0xb32>
   17a36:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   17a38:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   17a3a:	43db      	mvns	r3, r3
   17a3c:	9303      	str	r3, [sp, #12]
   17a3e:	4649      	mov	r1, r9
   17a40:	4650      	mov	r0, sl
   17a42:	f000 fff1 	bl	18a28 <_Bfree>
   17a46:	4643      	mov	r3, r8
   17a48:	2b00      	cmp	r3, #0
   17a4a:	d100      	bne.n	17a4e <_dtoa_r+0xa9e>
   17a4c:	e4df      	b.n	1740e <_dtoa_r+0x45e>
   17a4e:	e7b6      	b.n	179be <_dtoa_r+0xa0e>
   17a50:	464a      	mov	r2, r9
   17a52:	4659      	mov	r1, fp
   17a54:	4650      	mov	r0, sl
   17a56:	f001 f933 	bl	18cc0 <__pow5mult>
   17a5a:	4683      	mov	fp, r0
   17a5c:	e653      	b.n	17706 <_dtoa_r+0x756>
   17a5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   17a60:	2a00      	cmp	r2, #0
   17a62:	d100      	bne.n	17a66 <_dtoa_r+0xab6>
   17a64:	e1b6      	b.n	17dd4 <_dtoa_r+0xe24>
   17a66:	4a9a      	ldr	r2, [pc, #616]	; (17cd0 <_dtoa_r+0xd20>)
   17a68:	464c      	mov	r4, r9
   17a6a:	4694      	mov	ip, r2
   17a6c:	9a06      	ldr	r2, [sp, #24]
   17a6e:	4463      	add	r3, ip
   17a70:	9208      	str	r2, [sp, #32]
   17a72:	e5d5      	b.n	17620 <_dtoa_r+0x670>
   17a74:	2e00      	cmp	r6, #0
   17a76:	d000      	beq.n	17a7a <_dtoa_r+0xaca>
   17a78:	e670      	b.n	1775c <_dtoa_r+0x7ac>
   17a7a:	e7aa      	b.n	179d2 <_dtoa_r+0xa22>
   17a7c:	f000 ffde 	bl	18a3c <__multadd>
   17a80:	46a2      	mov	sl, r4
   17a82:	0005      	movs	r5, r0
   17a84:	4680      	mov	r8, r0
   17a86:	e6c7      	b.n	17818 <_dtoa_r+0x868>
   17a88:	2301      	movs	r3, #1
   17a8a:	469b      	mov	fp, r3
   17a8c:	e6e2      	b.n	17854 <_dtoa_r+0x8a4>
   17a8e:	2300      	movs	r3, #0
   17a90:	930b      	str	r3, [sp, #44]	; 0x2c
   17a92:	9b22      	ldr	r3, [sp, #136]	; 0x88
   17a94:	2b02      	cmp	r3, #2
   17a96:	d0af      	beq.n	179f8 <_dtoa_r+0xa48>
   17a98:	2400      	movs	r4, #0
   17a9a:	4653      	mov	r3, sl
   17a9c:	0021      	movs	r1, r4
   17a9e:	645c      	str	r4, [r3, #68]	; 0x44
   17aa0:	4650      	mov	r0, sl
   17aa2:	f000 ff99 	bl	189d8 <_Balloc>
   17aa6:	4653      	mov	r3, sl
   17aa8:	6418      	str	r0, [r3, #64]	; 0x40
   17aaa:	2301      	movs	r3, #1
   17aac:	425b      	negs	r3, r3
   17aae:	9307      	str	r3, [sp, #28]
   17ab0:	930e      	str	r3, [sp, #56]	; 0x38
   17ab2:	3302      	adds	r3, #2
   17ab4:	900a      	str	r0, [sp, #40]	; 0x28
   17ab6:	9423      	str	r4, [sp, #140]	; 0x8c
   17ab8:	930b      	str	r3, [sp, #44]	; 0x2c
   17aba:	e4ec      	b.n	17496 <_dtoa_r+0x4e6>
   17abc:	9b22      	ldr	r3, [sp, #136]	; 0x88
   17abe:	2b02      	cmp	r3, #2
   17ac0:	dc00      	bgt.n	17ac4 <_dtoa_r+0xb14>
   17ac2:	e685      	b.n	177d0 <_dtoa_r+0x820>
   17ac4:	9b07      	ldr	r3, [sp, #28]
   17ac6:	2b00      	cmp	r3, #0
   17ac8:	d1b5      	bne.n	17a36 <_dtoa_r+0xa86>
   17aca:	4649      	mov	r1, r9
   17acc:	2205      	movs	r2, #5
   17ace:	4650      	mov	r0, sl
   17ad0:	f000 ffb4 	bl	18a3c <__multadd>
   17ad4:	4681      	mov	r9, r0
   17ad6:	0001      	movs	r1, r0
   17ad8:	4658      	mov	r0, fp
   17ada:	f001 f9b1 	bl	18e40 <__mcmp>
   17ade:	2800      	cmp	r0, #0
   17ae0:	dda9      	ble.n	17a36 <_dtoa_r+0xa86>
   17ae2:	2331      	movs	r3, #49	; 0x31
   17ae4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   17ae6:	7013      	strb	r3, [r2, #0]
   17ae8:	9b03      	ldr	r3, [sp, #12]
   17aea:	1c54      	adds	r4, r2, #1
   17aec:	3301      	adds	r3, #1
   17aee:	9303      	str	r3, [sp, #12]
   17af0:	e7a5      	b.n	17a3e <_dtoa_r+0xa8e>
   17af2:	9b03      	ldr	r3, [sp, #12]
   17af4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   17af6:	3301      	adds	r3, #1
   17af8:	9303      	str	r3, [sp, #12]
   17afa:	2331      	movs	r3, #49	; 0x31
   17afc:	7013      	strb	r3, [r2, #0]
   17afe:	e74e      	b.n	1799e <_dtoa_r+0x9ee>
   17b00:	2300      	movs	r3, #0
   17b02:	930b      	str	r3, [sp, #44]	; 0x2c
   17b04:	f7ff fb3d 	bl	17182 <_dtoa_r+0x1d2>
   17b08:	9b06      	ldr	r3, [sp, #24]
   17b0a:	465c      	mov	r4, fp
   17b0c:	469b      	mov	fp, r3
   17b0e:	9b07      	ldr	r3, [sp, #28]
   17b10:	469a      	mov	sl, r3
   17b12:	e47c      	b.n	1740e <_dtoa_r+0x45e>
   17b14:	4640      	mov	r0, r8
   17b16:	f7fc fd6b 	bl	145f0 <__aeabi_i2d>
   17b1a:	0032      	movs	r2, r6
   17b1c:	003b      	movs	r3, r7
   17b1e:	f7fb ff9d 	bl	13a5c <__aeabi_dmul>
   17b22:	2200      	movs	r2, #0
   17b24:	4b6b      	ldr	r3, [pc, #428]	; (17cd4 <_dtoa_r+0xd24>)
   17b26:	f7fb f955 	bl	12dd4 <__aeabi_dadd>
   17b2a:	4a6b      	ldr	r2, [pc, #428]	; (17cd8 <_dtoa_r+0xd28>)
   17b2c:	000b      	movs	r3, r1
   17b2e:	4694      	mov	ip, r2
   17b30:	4463      	add	r3, ip
   17b32:	9008      	str	r0, [sp, #32]
   17b34:	9109      	str	r1, [sp, #36]	; 0x24
   17b36:	9309      	str	r3, [sp, #36]	; 0x24
   17b38:	2200      	movs	r2, #0
   17b3a:	4b64      	ldr	r3, [pc, #400]	; (17ccc <_dtoa_r+0xd1c>)
   17b3c:	0030      	movs	r0, r6
   17b3e:	0039      	movs	r1, r7
   17b40:	f7fc fa0c 	bl	13f5c <__aeabi_dsub>
   17b44:	9e08      	ldr	r6, [sp, #32]
   17b46:	9f09      	ldr	r7, [sp, #36]	; 0x24
   17b48:	0032      	movs	r2, r6
   17b4a:	003b      	movs	r3, r7
   17b4c:	0004      	movs	r4, r0
   17b4e:	000d      	movs	r5, r1
   17b50:	f7fc ff16 	bl	14980 <__aeabi_dcmpgt>
   17b54:	2800      	cmp	r0, #0
   17b56:	d000      	beq.n	17b5a <_dtoa_r+0xbaa>
   17b58:	e0b2      	b.n	17cc0 <_dtoa_r+0xd10>
   17b5a:	2080      	movs	r0, #128	; 0x80
   17b5c:	0600      	lsls	r0, r0, #24
   17b5e:	4684      	mov	ip, r0
   17b60:	0039      	movs	r1, r7
   17b62:	4461      	add	r1, ip
   17b64:	000b      	movs	r3, r1
   17b66:	0032      	movs	r2, r6
   17b68:	0020      	movs	r0, r4
   17b6a:	0029      	movs	r1, r5
   17b6c:	f7fc fef4 	bl	14958 <__aeabi_dcmplt>
   17b70:	2800      	cmp	r0, #0
   17b72:	d057      	beq.n	17c24 <_dtoa_r+0xc74>
   17b74:	2300      	movs	r3, #0
   17b76:	4699      	mov	r9, r3
   17b78:	4698      	mov	r8, r3
   17b7a:	e75c      	b.n	17a36 <_dtoa_r+0xa86>
   17b7c:	980a      	ldr	r0, [sp, #40]	; 0x28
   17b7e:	f7ff fa4c 	bl	1701a <_dtoa_r+0x6a>
   17b82:	1ae2      	subs	r2, r4, r3
   17b84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   17b86:	46a1      	mov	r9, r4
   17b88:	469c      	mov	ip, r3
   17b8a:	4494      	add	ip, r2
   17b8c:	4663      	mov	r3, ip
   17b8e:	2400      	movs	r4, #0
   17b90:	930d      	str	r3, [sp, #52]	; 0x34
   17b92:	e53e      	b.n	17612 <_dtoa_r+0x662>
   17b94:	9a10      	ldr	r2, [sp, #64]	; 0x40
   17b96:	9b11      	ldr	r3, [sp, #68]	; 0x44
   17b98:	9208      	str	r2, [sp, #32]
   17b9a:	9309      	str	r3, [sp, #36]	; 0x24
   17b9c:	2302      	movs	r3, #2
   17b9e:	4698      	mov	r8, r3
   17ba0:	f7ff fb3a 	bl	17218 <_dtoa_r+0x268>
   17ba4:	2300      	movs	r3, #0
   17ba6:	4652      	mov	r2, sl
   17ba8:	2100      	movs	r1, #0
   17baa:	6453      	str	r3, [r2, #68]	; 0x44
   17bac:	4650      	mov	r0, sl
   17bae:	f000 ff13 	bl	189d8 <_Balloc>
   17bb2:	4653      	mov	r3, sl
   17bb4:	6418      	str	r0, [r3, #64]	; 0x40
   17bb6:	2301      	movs	r3, #1
   17bb8:	900a      	str	r0, [sp, #40]	; 0x28
   17bba:	9307      	str	r3, [sp, #28]
   17bbc:	9323      	str	r3, [sp, #140]	; 0x8c
   17bbe:	930e      	str	r3, [sp, #56]	; 0x38
   17bc0:	f7ff fb07 	bl	171d2 <_dtoa_r+0x222>
   17bc4:	4643      	mov	r3, r8
   17bc6:	930c      	str	r3, [sp, #48]	; 0x30
   17bc8:	465b      	mov	r3, fp
   17bca:	9a06      	ldr	r2, [sp, #24]
   17bcc:	46a8      	mov	r8, r5
   17bce:	46b3      	mov	fp, r6
   17bd0:	4655      	mov	r5, sl
   17bd2:	9e04      	ldr	r6, [sp, #16]
   17bd4:	4691      	mov	r9, r2
   17bd6:	46ba      	mov	sl, r7
   17bd8:	2b00      	cmp	r3, #0
   17bda:	dd10      	ble.n	17bfe <_dtoa_r+0xc4e>
   17bdc:	4659      	mov	r1, fp
   17bde:	2201      	movs	r2, #1
   17be0:	0038      	movs	r0, r7
   17be2:	f001 f8cd 	bl	18d80 <__lshift>
   17be6:	4649      	mov	r1, r9
   17be8:	4683      	mov	fp, r0
   17bea:	f001 f929 	bl	18e40 <__mcmp>
   17bee:	2800      	cmp	r0, #0
   17bf0:	dc00      	bgt.n	17bf4 <_dtoa_r+0xc44>
   17bf2:	e157      	b.n	17ea4 <_dtoa_r+0xef4>
   17bf4:	2e39      	cmp	r6, #57	; 0x39
   17bf6:	d100      	bne.n	17bfa <_dtoa_r+0xc4a>
   17bf8:	e122      	b.n	17e40 <_dtoa_r+0xe90>
   17bfa:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   17bfc:	3631      	adds	r6, #49	; 0x31
   17bfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   17c00:	4647      	mov	r7, r8
   17c02:	1c6c      	adds	r4, r5, #1
   17c04:	702e      	strb	r6, [r5, #0]
   17c06:	4698      	mov	r8, r3
   17c08:	e6c9      	b.n	1799e <_dtoa_r+0x9ee>
   17c0a:	2800      	cmp	r0, #0
   17c0c:	d103      	bne.n	17c16 <_dtoa_r+0xc66>
   17c0e:	07f3      	lsls	r3, r6, #31
   17c10:	d501      	bpl.n	17c16 <_dtoa_r+0xc66>
   17c12:	e6b5      	b.n	17980 <_dtoa_r+0x9d0>
   17c14:	001c      	movs	r4, r3
   17c16:	1e63      	subs	r3, r4, #1
   17c18:	781a      	ldrb	r2, [r3, #0]
   17c1a:	2a30      	cmp	r2, #48	; 0x30
   17c1c:	d0fa      	beq.n	17c14 <_dtoa_r+0xc64>
   17c1e:	e6be      	b.n	1799e <_dtoa_r+0x9ee>
   17c20:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17c22:	4699      	mov	r9, r3
   17c24:	9e10      	ldr	r6, [sp, #64]	; 0x40
   17c26:	9f11      	ldr	r7, [sp, #68]	; 0x44
   17c28:	e435      	b.n	17496 <_dtoa_r+0x4e6>
   17c2a:	2501      	movs	r5, #1
   17c2c:	f7ff fab4 	bl	17198 <_dtoa_r+0x1e8>
   17c30:	9b03      	ldr	r3, [sp, #12]
   17c32:	2b00      	cmp	r3, #0
   17c34:	d100      	bne.n	17c38 <_dtoa_r+0xc88>
   17c36:	e0d4      	b.n	17de2 <_dtoa_r+0xe32>
   17c38:	9810      	ldr	r0, [sp, #64]	; 0x40
   17c3a:	9911      	ldr	r1, [sp, #68]	; 0x44
   17c3c:	425c      	negs	r4, r3
   17c3e:	230f      	movs	r3, #15
   17c40:	4a26      	ldr	r2, [pc, #152]	; (17cdc <_dtoa_r+0xd2c>)
   17c42:	4023      	ands	r3, r4
   17c44:	00db      	lsls	r3, r3, #3
   17c46:	18d3      	adds	r3, r2, r3
   17c48:	681a      	ldr	r2, [r3, #0]
   17c4a:	685b      	ldr	r3, [r3, #4]
   17c4c:	f7fb ff06 	bl	13a5c <__aeabi_dmul>
   17c50:	1124      	asrs	r4, r4, #4
   17c52:	0006      	movs	r6, r0
   17c54:	000f      	movs	r7, r1
   17c56:	2c00      	cmp	r4, #0
   17c58:	d100      	bne.n	17c5c <_dtoa_r+0xcac>
   17c5a:	e149      	b.n	17ef0 <_dtoa_r+0xf40>
   17c5c:	2302      	movs	r3, #2
   17c5e:	4698      	mov	r8, r3
   17c60:	4d1f      	ldr	r5, [pc, #124]	; (17ce0 <_dtoa_r+0xd30>)
   17c62:	2301      	movs	r3, #1
   17c64:	4223      	tst	r3, r4
   17c66:	d009      	beq.n	17c7c <_dtoa_r+0xccc>
   17c68:	469c      	mov	ip, r3
   17c6a:	682a      	ldr	r2, [r5, #0]
   17c6c:	686b      	ldr	r3, [r5, #4]
   17c6e:	0030      	movs	r0, r6
   17c70:	0039      	movs	r1, r7
   17c72:	44e0      	add	r8, ip
   17c74:	f7fb fef2 	bl	13a5c <__aeabi_dmul>
   17c78:	0006      	movs	r6, r0
   17c7a:	000f      	movs	r7, r1
   17c7c:	1064      	asrs	r4, r4, #1
   17c7e:	3508      	adds	r5, #8
   17c80:	2c00      	cmp	r4, #0
   17c82:	d1ee      	bne.n	17c62 <_dtoa_r+0xcb2>
   17c84:	f7ff fae4 	bl	17250 <_dtoa_r+0x2a0>
   17c88:	9b03      	ldr	r3, [sp, #12]
   17c8a:	2730      	movs	r7, #48	; 0x30
   17c8c:	3301      	adds	r3, #1
   17c8e:	9303      	str	r3, [sp, #12]
   17c90:	2330      	movs	r3, #48	; 0x30
   17c92:	702b      	strb	r3, [r5, #0]
   17c94:	e4ac      	b.n	175f0 <_dtoa_r+0x640>
   17c96:	6859      	ldr	r1, [r3, #4]
   17c98:	4650      	mov	r0, sl
   17c9a:	f000 fe9d 	bl	189d8 <_Balloc>
   17c9e:	4643      	mov	r3, r8
   17ca0:	4641      	mov	r1, r8
   17ca2:	0004      	movs	r4, r0
   17ca4:	691b      	ldr	r3, [r3, #16]
   17ca6:	310c      	adds	r1, #12
   17ca8:	1c9a      	adds	r2, r3, #2
   17caa:	0092      	lsls	r2, r2, #2
   17cac:	300c      	adds	r0, #12
   17cae:	f7fd fa5d 	bl	1516c <memcpy>
   17cb2:	2201      	movs	r2, #1
   17cb4:	0021      	movs	r1, r4
   17cb6:	4650      	mov	r0, sl
   17cb8:	f001 f862 	bl	18d80 <__lshift>
   17cbc:	900c      	str	r0, [sp, #48]	; 0x30
   17cbe:	e599      	b.n	177f4 <_dtoa_r+0x844>
   17cc0:	2300      	movs	r3, #0
   17cc2:	4699      	mov	r9, r3
   17cc4:	4698      	mov	r8, r3
   17cc6:	e70c      	b.n	17ae2 <_dtoa_r+0xb32>
   17cc8:	7ff00000 	.word	0x7ff00000
   17ccc:	40140000 	.word	0x40140000
   17cd0:	00000433 	.word	0x00000433
   17cd4:	401c0000 	.word	0x401c0000
   17cd8:	fcc00000 	.word	0xfcc00000
   17cdc:	0001b470 	.word	0x0001b470
   17ce0:	0001b448 	.word	0x0001b448
   17ce4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17ce6:	498f      	ldr	r1, [pc, #572]	; (17f24 <_dtoa_r+0xf74>)
   17ce8:	3b01      	subs	r3, #1
   17cea:	00db      	lsls	r3, r3, #3
   17cec:	18c9      	adds	r1, r1, r3
   17cee:	6808      	ldr	r0, [r1, #0]
   17cf0:	6849      	ldr	r1, [r1, #4]
   17cf2:	9a08      	ldr	r2, [sp, #32]
   17cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17cf6:	f7fb feb1 	bl	13a5c <__aeabi_dmul>
   17cfa:	9014      	str	r0, [sp, #80]	; 0x50
   17cfc:	9115      	str	r1, [sp, #84]	; 0x54
   17cfe:	0039      	movs	r1, r7
   17d00:	0030      	movs	r0, r6
   17d02:	f7fc fc41 	bl	14588 <__aeabi_d2iz>
   17d06:	0005      	movs	r5, r0
   17d08:	f7fc fc72 	bl	145f0 <__aeabi_i2d>
   17d0c:	0002      	movs	r2, r0
   17d0e:	000b      	movs	r3, r1
   17d10:	0030      	movs	r0, r6
   17d12:	0039      	movs	r1, r7
   17d14:	f7fc f922 	bl	13f5c <__aeabi_dsub>
   17d18:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17d1a:	9008      	str	r0, [sp, #32]
   17d1c:	9109      	str	r1, [sp, #36]	; 0x24
   17d1e:	990a      	ldr	r1, [sp, #40]	; 0x28
   17d20:	001a      	movs	r2, r3
   17d22:	468c      	mov	ip, r1
   17d24:	3530      	adds	r5, #48	; 0x30
   17d26:	4462      	add	r2, ip
   17d28:	1c4c      	adds	r4, r1, #1
   17d2a:	700d      	strb	r5, [r1, #0]
   17d2c:	4690      	mov	r8, r2
   17d2e:	2b01      	cmp	r3, #1
   17d30:	d01b      	beq.n	17d6a <_dtoa_r+0xdba>
   17d32:	9808      	ldr	r0, [sp, #32]
   17d34:	9909      	ldr	r1, [sp, #36]	; 0x24
   17d36:	0025      	movs	r5, r4
   17d38:	2200      	movs	r2, #0
   17d3a:	4b7b      	ldr	r3, [pc, #492]	; (17f28 <_dtoa_r+0xf78>)
   17d3c:	f7fb fe8e 	bl	13a5c <__aeabi_dmul>
   17d40:	000f      	movs	r7, r1
   17d42:	0006      	movs	r6, r0
   17d44:	f7fc fc20 	bl	14588 <__aeabi_d2iz>
   17d48:	0004      	movs	r4, r0
   17d4a:	f7fc fc51 	bl	145f0 <__aeabi_i2d>
   17d4e:	3430      	adds	r4, #48	; 0x30
   17d50:	0002      	movs	r2, r0
   17d52:	000b      	movs	r3, r1
   17d54:	0030      	movs	r0, r6
   17d56:	0039      	movs	r1, r7
   17d58:	f7fc f900 	bl	13f5c <__aeabi_dsub>
   17d5c:	702c      	strb	r4, [r5, #0]
   17d5e:	3501      	adds	r5, #1
   17d60:	45a8      	cmp	r8, r5
   17d62:	d1e9      	bne.n	17d38 <_dtoa_r+0xd88>
   17d64:	4644      	mov	r4, r8
   17d66:	9008      	str	r0, [sp, #32]
   17d68:	9109      	str	r1, [sp, #36]	; 0x24
   17d6a:	9814      	ldr	r0, [sp, #80]	; 0x50
   17d6c:	9915      	ldr	r1, [sp, #84]	; 0x54
   17d6e:	2200      	movs	r2, #0
   17d70:	4b6e      	ldr	r3, [pc, #440]	; (17f2c <_dtoa_r+0xf7c>)
   17d72:	f7fb f82f 	bl	12dd4 <__aeabi_dadd>
   17d76:	9a08      	ldr	r2, [sp, #32]
   17d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17d7a:	f7fc fded 	bl	14958 <__aeabi_dcmplt>
   17d7e:	2800      	cmp	r0, #0
   17d80:	d067      	beq.n	17e52 <_dtoa_r+0xea2>
   17d82:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   17d84:	1e65      	subs	r5, r4, #1
   17d86:	9303      	str	r3, [sp, #12]
   17d88:	782f      	ldrb	r7, [r5, #0]
   17d8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17d8c:	e42e      	b.n	175ec <_dtoa_r+0x63c>
   17d8e:	4643      	mov	r3, r8
   17d90:	46b3      	mov	fp, r6
   17d92:	930c      	str	r3, [sp, #48]	; 0x30
   17d94:	9e04      	ldr	r6, [sp, #16]
   17d96:	9b06      	ldr	r3, [sp, #24]
   17d98:	46a8      	mov	r8, r5
   17d9a:	4699      	mov	r9, r3
   17d9c:	4655      	mov	r5, sl
   17d9e:	46ba      	mov	sl, r7
   17da0:	2e39      	cmp	r6, #57	; 0x39
   17da2:	d04d      	beq.n	17e40 <_dtoa_r+0xe90>
   17da4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   17da6:	3601      	adds	r6, #1
   17da8:	4647      	mov	r7, r8
   17daa:	1c6c      	adds	r4, r5, #1
   17dac:	702e      	strb	r6, [r5, #0]
   17dae:	4698      	mov	r8, r3
   17db0:	e5f5      	b.n	1799e <_dtoa_r+0x9ee>
   17db2:	4642      	mov	r2, r8
   17db4:	9b06      	ldr	r3, [sp, #24]
   17db6:	46b3      	mov	fp, r6
   17db8:	46ba      	mov	sl, r7
   17dba:	9e04      	ldr	r6, [sp, #16]
   17dbc:	4699      	mov	r9, r3
   17dbe:	002f      	movs	r7, r5
   17dc0:	4690      	mov	r8, r2
   17dc2:	e5d1      	b.n	17968 <_dtoa_r+0x9b8>
   17dc4:	9b06      	ldr	r3, [sp, #24]
   17dc6:	9a07      	ldr	r2, [sp, #28]
   17dc8:	1a9b      	subs	r3, r3, r2
   17dca:	9308      	str	r3, [sp, #32]
   17dcc:	2300      	movs	r3, #0
   17dce:	e427      	b.n	17620 <_dtoa_r+0x670>
   17dd0:	2401      	movs	r4, #1
   17dd2:	e5c5      	b.n	17960 <_dtoa_r+0x9b0>
   17dd4:	2336      	movs	r3, #54	; 0x36
   17dd6:	9a16      	ldr	r2, [sp, #88]	; 0x58
   17dd8:	464c      	mov	r4, r9
   17dda:	1a9b      	subs	r3, r3, r2
   17ddc:	9a06      	ldr	r2, [sp, #24]
   17dde:	9208      	str	r2, [sp, #32]
   17de0:	e41e      	b.n	17620 <_dtoa_r+0x670>
   17de2:	2302      	movs	r3, #2
   17de4:	9e10      	ldr	r6, [sp, #64]	; 0x40
   17de6:	9f11      	ldr	r7, [sp, #68]	; 0x44
   17de8:	4698      	mov	r8, r3
   17dea:	f7ff fa31 	bl	17250 <_dtoa_r+0x2a0>
   17dee:	9b07      	ldr	r3, [sp, #28]
   17df0:	2b00      	cmp	r3, #0
   17df2:	d100      	bne.n	17df6 <_dtoa_r+0xe46>
   17df4:	e68e      	b.n	17b14 <_dtoa_r+0xb64>
   17df6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   17df8:	2c00      	cmp	r4, #0
   17dfa:	dc00      	bgt.n	17dfe <_dtoa_r+0xe4e>
   17dfc:	e712      	b.n	17c24 <_dtoa_r+0xc74>
   17dfe:	9b03      	ldr	r3, [sp, #12]
   17e00:	2200      	movs	r2, #0
   17e02:	3b01      	subs	r3, #1
   17e04:	9313      	str	r3, [sp, #76]	; 0x4c
   17e06:	0030      	movs	r0, r6
   17e08:	4b47      	ldr	r3, [pc, #284]	; (17f28 <_dtoa_r+0xf78>)
   17e0a:	0039      	movs	r1, r7
   17e0c:	f7fb fe26 	bl	13a5c <__aeabi_dmul>
   17e10:	0006      	movs	r6, r0
   17e12:	4640      	mov	r0, r8
   17e14:	000f      	movs	r7, r1
   17e16:	3001      	adds	r0, #1
   17e18:	f7fc fbea 	bl	145f0 <__aeabi_i2d>
   17e1c:	0032      	movs	r2, r6
   17e1e:	003b      	movs	r3, r7
   17e20:	f7fb fe1c 	bl	13a5c <__aeabi_dmul>
   17e24:	2200      	movs	r2, #0
   17e26:	4b42      	ldr	r3, [pc, #264]	; (17f30 <_dtoa_r+0xf80>)
   17e28:	f7fa ffd4 	bl	12dd4 <__aeabi_dadd>
   17e2c:	4a41      	ldr	r2, [pc, #260]	; (17f34 <_dtoa_r+0xf84>)
   17e2e:	000b      	movs	r3, r1
   17e30:	4694      	mov	ip, r2
   17e32:	4463      	add	r3, ip
   17e34:	9008      	str	r0, [sp, #32]
   17e36:	9109      	str	r1, [sp, #36]	; 0x24
   17e38:	9412      	str	r4, [sp, #72]	; 0x48
   17e3a:	9309      	str	r3, [sp, #36]	; 0x24
   17e3c:	f7ff fa30 	bl	172a0 <_dtoa_r+0x2f0>
   17e40:	2339      	movs	r3, #57	; 0x39
   17e42:	702b      	strb	r3, [r5, #0]
   17e44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   17e46:	4647      	mov	r7, r8
   17e48:	1c6c      	adds	r4, r5, #1
   17e4a:	4698      	mov	r8, r3
   17e4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   17e4e:	2339      	movs	r3, #57	; 0x39
   17e50:	e5a1      	b.n	17996 <_dtoa_r+0x9e6>
   17e52:	9a14      	ldr	r2, [sp, #80]	; 0x50
   17e54:	9b15      	ldr	r3, [sp, #84]	; 0x54
   17e56:	2000      	movs	r0, #0
   17e58:	4934      	ldr	r1, [pc, #208]	; (17f2c <_dtoa_r+0xf7c>)
   17e5a:	f7fc f87f 	bl	13f5c <__aeabi_dsub>
   17e5e:	9a08      	ldr	r2, [sp, #32]
   17e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17e62:	f7fc fd8d 	bl	14980 <__aeabi_dcmpgt>
   17e66:	2800      	cmp	r0, #0
   17e68:	d101      	bne.n	17e6e <_dtoa_r+0xebe>
   17e6a:	e6db      	b.n	17c24 <_dtoa_r+0xc74>
   17e6c:	001c      	movs	r4, r3
   17e6e:	1e63      	subs	r3, r4, #1
   17e70:	781a      	ldrb	r2, [r3, #0]
   17e72:	2a30      	cmp	r2, #48	; 0x30
   17e74:	d0fa      	beq.n	17e6c <_dtoa_r+0xebc>
   17e76:	f7ff fac8 	bl	1740a <_dtoa_r+0x45a>
   17e7a:	4643      	mov	r3, r8
   17e7c:	46b3      	mov	fp, r6
   17e7e:	930c      	str	r3, [sp, #48]	; 0x30
   17e80:	9e04      	ldr	r6, [sp, #16]
   17e82:	9b06      	ldr	r3, [sp, #24]
   17e84:	46a8      	mov	r8, r5
   17e86:	4699      	mov	r9, r3
   17e88:	4655      	mov	r5, sl
   17e8a:	46ba      	mov	sl, r7
   17e8c:	2e39      	cmp	r6, #57	; 0x39
   17e8e:	d0d7      	beq.n	17e40 <_dtoa_r+0xe90>
   17e90:	2c00      	cmp	r4, #0
   17e92:	dd00      	ble.n	17e96 <_dtoa_r+0xee6>
   17e94:	e6b1      	b.n	17bfa <_dtoa_r+0xc4a>
   17e96:	e6b2      	b.n	17bfe <_dtoa_r+0xc4e>
   17e98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   17e9a:	464d      	mov	r5, r9
   17e9c:	9203      	str	r2, [sp, #12]
   17e9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17ea0:	f7ff fba4 	bl	175ec <_dtoa_r+0x63c>
   17ea4:	2800      	cmp	r0, #0
   17ea6:	d000      	beq.n	17eaa <_dtoa_r+0xefa>
   17ea8:	e6a9      	b.n	17bfe <_dtoa_r+0xc4e>
   17eaa:	07f3      	lsls	r3, r6, #31
   17eac:	d400      	bmi.n	17eb0 <_dtoa_r+0xf00>
   17eae:	e6a6      	b.n	17bfe <_dtoa_r+0xc4e>
   17eb0:	e6a0      	b.n	17bf4 <_dtoa_r+0xc44>
   17eb2:	2300      	movs	r3, #0
   17eb4:	4641      	mov	r1, r8
   17eb6:	220a      	movs	r2, #10
   17eb8:	4650      	mov	r0, sl
   17eba:	f000 fdbf 	bl	18a3c <__multadd>
   17ebe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   17ec0:	4680      	mov	r8, r0
   17ec2:	2b00      	cmp	r3, #0
   17ec4:	dd01      	ble.n	17eca <_dtoa_r+0xf1a>
   17ec6:	9307      	str	r3, [sp, #28]
   17ec8:	e486      	b.n	177d8 <_dtoa_r+0x828>
   17eca:	9b22      	ldr	r3, [sp, #136]	; 0x88
   17ecc:	2b02      	cmp	r3, #2
   17ece:	dc1f      	bgt.n	17f10 <_dtoa_r+0xf60>
   17ed0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   17ed2:	9307      	str	r3, [sp, #28]
   17ed4:	e480      	b.n	177d8 <_dtoa_r+0x828>
   17ed6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   17ed8:	2b02      	cmp	r3, #2
   17eda:	dc19      	bgt.n	17f10 <_dtoa_r+0xf60>
   17edc:	4649      	mov	r1, r9
   17ede:	f7fe ffbd 	bl	16e5c <quorem>
   17ee2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17ee4:	3030      	adds	r0, #48	; 0x30
   17ee6:	7018      	strb	r0, [r3, #0]
   17ee8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   17eea:	0006      	movs	r6, r0
   17eec:	9307      	str	r3, [sp, #28]
   17eee:	e533      	b.n	17958 <_dtoa_r+0x9a8>
   17ef0:	2302      	movs	r3, #2
   17ef2:	4698      	mov	r8, r3
   17ef4:	f7ff f9ac 	bl	17250 <_dtoa_r+0x2a0>
   17ef8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   17efa:	9c14      	ldr	r4, [sp, #80]	; 0x50
   17efc:	9303      	str	r3, [sp, #12]
   17efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17f00:	001d      	movs	r5, r3
   17f02:	f7ff fb73 	bl	175ec <_dtoa_r+0x63c>
   17f06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   17f08:	9c14      	ldr	r4, [sp, #80]	; 0x50
   17f0a:	9303      	str	r3, [sp, #12]
   17f0c:	f7ff fa7f 	bl	1740e <_dtoa_r+0x45e>
   17f10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   17f12:	9307      	str	r3, [sp, #28]
   17f14:	e5d6      	b.n	17ac4 <_dtoa_r+0xb14>
   17f16:	2b04      	cmp	r3, #4
   17f18:	d100      	bne.n	17f1c <_dtoa_r+0xf6c>
   17f1a:	e43f      	b.n	1779c <_dtoa_r+0x7ec>
   17f1c:	233c      	movs	r3, #60	; 0x3c
   17f1e:	1a18      	subs	r0, r3, r0
   17f20:	e4d7      	b.n	178d2 <_dtoa_r+0x922>
   17f22:	46c0      	nop			; (mov r8, r8)
   17f24:	0001b470 	.word	0x0001b470
   17f28:	40240000 	.word	0x40240000
   17f2c:	3fe00000 	.word	0x3fe00000
   17f30:	401c0000 	.word	0x401c0000
   17f34:	fcc00000 	.word	0xfcc00000

00017f38 <__sflush_r>:
   17f38:	b5f0      	push	{r4, r5, r6, r7, lr}
   17f3a:	46c6      	mov	lr, r8
   17f3c:	b500      	push	{lr}
   17f3e:	230c      	movs	r3, #12
   17f40:	5eca      	ldrsh	r2, [r1, r3]
   17f42:	4680      	mov	r8, r0
   17f44:	b293      	uxth	r3, r2
   17f46:	000c      	movs	r4, r1
   17f48:	0719      	lsls	r1, r3, #28
   17f4a:	d440      	bmi.n	17fce <__sflush_r+0x96>
   17f4c:	2380      	movs	r3, #128	; 0x80
   17f4e:	011b      	lsls	r3, r3, #4
   17f50:	4313      	orrs	r3, r2
   17f52:	6862      	ldr	r2, [r4, #4]
   17f54:	81a3      	strh	r3, [r4, #12]
   17f56:	2a00      	cmp	r2, #0
   17f58:	dc00      	bgt.n	17f5c <__sflush_r+0x24>
   17f5a:	e070      	b.n	1803e <__sflush_r+0x106>
   17f5c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   17f5e:	2e00      	cmp	r6, #0
   17f60:	d031      	beq.n	17fc6 <__sflush_r+0x8e>
   17f62:	4642      	mov	r2, r8
   17f64:	4641      	mov	r1, r8
   17f66:	6815      	ldr	r5, [r2, #0]
   17f68:	2200      	movs	r2, #0
   17f6a:	b29b      	uxth	r3, r3
   17f6c:	600a      	str	r2, [r1, #0]
   17f6e:	04da      	lsls	r2, r3, #19
   17f70:	d400      	bmi.n	17f74 <__sflush_r+0x3c>
   17f72:	e069      	b.n	18048 <__sflush_r+0x110>
   17f74:	6d22      	ldr	r2, [r4, #80]	; 0x50
   17f76:	075b      	lsls	r3, r3, #29
   17f78:	d506      	bpl.n	17f88 <__sflush_r+0x50>
   17f7a:	6863      	ldr	r3, [r4, #4]
   17f7c:	1ad2      	subs	r2, r2, r3
   17f7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   17f80:	2b00      	cmp	r3, #0
   17f82:	d001      	beq.n	17f88 <__sflush_r+0x50>
   17f84:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   17f86:	1ad2      	subs	r2, r2, r3
   17f88:	2300      	movs	r3, #0
   17f8a:	69e1      	ldr	r1, [r4, #28]
   17f8c:	4640      	mov	r0, r8
   17f8e:	47b0      	blx	r6
   17f90:	1c43      	adds	r3, r0, #1
   17f92:	d03d      	beq.n	18010 <__sflush_r+0xd8>
   17f94:	89a3      	ldrh	r3, [r4, #12]
   17f96:	4a3a      	ldr	r2, [pc, #232]	; (18080 <__sflush_r+0x148>)
   17f98:	4013      	ands	r3, r2
   17f9a:	2200      	movs	r2, #0
   17f9c:	6062      	str	r2, [r4, #4]
   17f9e:	6922      	ldr	r2, [r4, #16]
   17fa0:	b21b      	sxth	r3, r3
   17fa2:	81a3      	strh	r3, [r4, #12]
   17fa4:	6022      	str	r2, [r4, #0]
   17fa6:	04db      	lsls	r3, r3, #19
   17fa8:	d447      	bmi.n	1803a <__sflush_r+0x102>
   17faa:	4643      	mov	r3, r8
   17fac:	6b21      	ldr	r1, [r4, #48]	; 0x30
   17fae:	601d      	str	r5, [r3, #0]
   17fb0:	2900      	cmp	r1, #0
   17fb2:	d008      	beq.n	17fc6 <__sflush_r+0x8e>
   17fb4:	0023      	movs	r3, r4
   17fb6:	3340      	adds	r3, #64	; 0x40
   17fb8:	4299      	cmp	r1, r3
   17fba:	d002      	beq.n	17fc2 <__sflush_r+0x8a>
   17fbc:	4640      	mov	r0, r8
   17fbe:	f000 f967 	bl	18290 <_free_r>
   17fc2:	2300      	movs	r3, #0
   17fc4:	6323      	str	r3, [r4, #48]	; 0x30
   17fc6:	2000      	movs	r0, #0
   17fc8:	bc04      	pop	{r2}
   17fca:	4690      	mov	r8, r2
   17fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17fce:	6926      	ldr	r6, [r4, #16]
   17fd0:	2e00      	cmp	r6, #0
   17fd2:	d0f8      	beq.n	17fc6 <__sflush_r+0x8e>
   17fd4:	6822      	ldr	r2, [r4, #0]
   17fd6:	6026      	str	r6, [r4, #0]
   17fd8:	1b95      	subs	r5, r2, r6
   17fda:	2200      	movs	r2, #0
   17fdc:	079b      	lsls	r3, r3, #30
   17fde:	d100      	bne.n	17fe2 <__sflush_r+0xaa>
   17fe0:	6962      	ldr	r2, [r4, #20]
   17fe2:	60a2      	str	r2, [r4, #8]
   17fe4:	2d00      	cmp	r5, #0
   17fe6:	dc04      	bgt.n	17ff2 <__sflush_r+0xba>
   17fe8:	e7ed      	b.n	17fc6 <__sflush_r+0x8e>
   17fea:	1836      	adds	r6, r6, r0
   17fec:	1a2d      	subs	r5, r5, r0
   17fee:	2d00      	cmp	r5, #0
   17ff0:	dde9      	ble.n	17fc6 <__sflush_r+0x8e>
   17ff2:	002b      	movs	r3, r5
   17ff4:	0032      	movs	r2, r6
   17ff6:	69e1      	ldr	r1, [r4, #28]
   17ff8:	4640      	mov	r0, r8
   17ffa:	6a67      	ldr	r7, [r4, #36]	; 0x24
   17ffc:	47b8      	blx	r7
   17ffe:	2800      	cmp	r0, #0
   18000:	dcf3      	bgt.n	17fea <__sflush_r+0xb2>
   18002:	2240      	movs	r2, #64	; 0x40
   18004:	2001      	movs	r0, #1
   18006:	89a3      	ldrh	r3, [r4, #12]
   18008:	4240      	negs	r0, r0
   1800a:	4313      	orrs	r3, r2
   1800c:	81a3      	strh	r3, [r4, #12]
   1800e:	e7db      	b.n	17fc8 <__sflush_r+0x90>
   18010:	4643      	mov	r3, r8
   18012:	6819      	ldr	r1, [r3, #0]
   18014:	291d      	cmp	r1, #29
   18016:	d8f4      	bhi.n	18002 <__sflush_r+0xca>
   18018:	4b1a      	ldr	r3, [pc, #104]	; (18084 <__sflush_r+0x14c>)
   1801a:	2201      	movs	r2, #1
   1801c:	40cb      	lsrs	r3, r1
   1801e:	439a      	bics	r2, r3
   18020:	d1ef      	bne.n	18002 <__sflush_r+0xca>
   18022:	89a3      	ldrh	r3, [r4, #12]
   18024:	4e16      	ldr	r6, [pc, #88]	; (18080 <__sflush_r+0x148>)
   18026:	6062      	str	r2, [r4, #4]
   18028:	4033      	ands	r3, r6
   1802a:	6922      	ldr	r2, [r4, #16]
   1802c:	b21b      	sxth	r3, r3
   1802e:	81a3      	strh	r3, [r4, #12]
   18030:	6022      	str	r2, [r4, #0]
   18032:	04db      	lsls	r3, r3, #19
   18034:	d5b9      	bpl.n	17faa <__sflush_r+0x72>
   18036:	2900      	cmp	r1, #0
   18038:	d1b7      	bne.n	17faa <__sflush_r+0x72>
   1803a:	6520      	str	r0, [r4, #80]	; 0x50
   1803c:	e7b5      	b.n	17faa <__sflush_r+0x72>
   1803e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   18040:	2a00      	cmp	r2, #0
   18042:	dd00      	ble.n	18046 <__sflush_r+0x10e>
   18044:	e78a      	b.n	17f5c <__sflush_r+0x24>
   18046:	e7be      	b.n	17fc6 <__sflush_r+0x8e>
   18048:	2200      	movs	r2, #0
   1804a:	2301      	movs	r3, #1
   1804c:	69e1      	ldr	r1, [r4, #28]
   1804e:	4640      	mov	r0, r8
   18050:	47b0      	blx	r6
   18052:	0002      	movs	r2, r0
   18054:	1c43      	adds	r3, r0, #1
   18056:	d002      	beq.n	1805e <__sflush_r+0x126>
   18058:	89a3      	ldrh	r3, [r4, #12]
   1805a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1805c:	e78b      	b.n	17f76 <__sflush_r+0x3e>
   1805e:	4643      	mov	r3, r8
   18060:	681b      	ldr	r3, [r3, #0]
   18062:	2b00      	cmp	r3, #0
   18064:	d0f8      	beq.n	18058 <__sflush_r+0x120>
   18066:	2b1d      	cmp	r3, #29
   18068:	d001      	beq.n	1806e <__sflush_r+0x136>
   1806a:	2b16      	cmp	r3, #22
   1806c:	d103      	bne.n	18076 <__sflush_r+0x13e>
   1806e:	4643      	mov	r3, r8
   18070:	2000      	movs	r0, #0
   18072:	601d      	str	r5, [r3, #0]
   18074:	e7a8      	b.n	17fc8 <__sflush_r+0x90>
   18076:	2140      	movs	r1, #64	; 0x40
   18078:	89a3      	ldrh	r3, [r4, #12]
   1807a:	430b      	orrs	r3, r1
   1807c:	81a3      	strh	r3, [r4, #12]
   1807e:	e7a3      	b.n	17fc8 <__sflush_r+0x90>
   18080:	fffff7ff 	.word	0xfffff7ff
   18084:	20400001 	.word	0x20400001

00018088 <_fflush_r>:
   18088:	b570      	push	{r4, r5, r6, lr}
   1808a:	0005      	movs	r5, r0
   1808c:	000c      	movs	r4, r1
   1808e:	2800      	cmp	r0, #0
   18090:	d002      	beq.n	18098 <_fflush_r+0x10>
   18092:	6b83      	ldr	r3, [r0, #56]	; 0x38
   18094:	2b00      	cmp	r3, #0
   18096:	d016      	beq.n	180c6 <_fflush_r+0x3e>
   18098:	220c      	movs	r2, #12
   1809a:	5ea3      	ldrsh	r3, [r4, r2]
   1809c:	2600      	movs	r6, #0
   1809e:	2b00      	cmp	r3, #0
   180a0:	d00f      	beq.n	180c2 <_fflush_r+0x3a>
   180a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   180a4:	07d2      	lsls	r2, r2, #31
   180a6:	d401      	bmi.n	180ac <_fflush_r+0x24>
   180a8:	059b      	lsls	r3, r3, #22
   180aa:	d513      	bpl.n	180d4 <_fflush_r+0x4c>
   180ac:	0021      	movs	r1, r4
   180ae:	0028      	movs	r0, r5
   180b0:	f7ff ff42 	bl	17f38 <__sflush_r>
   180b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   180b6:	0006      	movs	r6, r0
   180b8:	07db      	lsls	r3, r3, #31
   180ba:	d402      	bmi.n	180c2 <_fflush_r+0x3a>
   180bc:	89a3      	ldrh	r3, [r4, #12]
   180be:	059b      	lsls	r3, r3, #22
   180c0:	d504      	bpl.n	180cc <_fflush_r+0x44>
   180c2:	0030      	movs	r0, r6
   180c4:	bd70      	pop	{r4, r5, r6, pc}
   180c6:	f000 f839 	bl	1813c <__sinit>
   180ca:	e7e5      	b.n	18098 <_fflush_r+0x10>
   180cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   180ce:	f000 fb79 	bl	187c4 <__retarget_lock_release_recursive>
   180d2:	e7f6      	b.n	180c2 <_fflush_r+0x3a>
   180d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   180d6:	f000 fb73 	bl	187c0 <__retarget_lock_acquire_recursive>
   180da:	e7e7      	b.n	180ac <_fflush_r+0x24>

000180dc <_cleanup_r>:
   180dc:	b510      	push	{r4, lr}
   180de:	4902      	ldr	r1, [pc, #8]	; (180e8 <_cleanup_r+0xc>)
   180e0:	f000 fb36 	bl	18750 <_fwalk_reent>
   180e4:	bd10      	pop	{r4, pc}
   180e6:	46c0      	nop			; (mov r8, r8)
   180e8:	000196b1 	.word	0x000196b1

000180ec <std.isra.0>:
   180ec:	2300      	movs	r3, #0
   180ee:	b510      	push	{r4, lr}
   180f0:	0004      	movs	r4, r0
   180f2:	6003      	str	r3, [r0, #0]
   180f4:	6043      	str	r3, [r0, #4]
   180f6:	6083      	str	r3, [r0, #8]
   180f8:	8181      	strh	r1, [r0, #12]
   180fa:	6643      	str	r3, [r0, #100]	; 0x64
   180fc:	81c2      	strh	r2, [r0, #14]
   180fe:	6103      	str	r3, [r0, #16]
   18100:	6143      	str	r3, [r0, #20]
   18102:	6183      	str	r3, [r0, #24]
   18104:	2208      	movs	r2, #8
   18106:	2100      	movs	r1, #0
   18108:	305c      	adds	r0, #92	; 0x5c
   1810a:	f7fd f871 	bl	151f0 <memset>
   1810e:	0020      	movs	r0, r4
   18110:	4b06      	ldr	r3, [pc, #24]	; (1812c <std.isra.0+0x40>)
   18112:	61e4      	str	r4, [r4, #28]
   18114:	6223      	str	r3, [r4, #32]
   18116:	4b06      	ldr	r3, [pc, #24]	; (18130 <std.isra.0+0x44>)
   18118:	3058      	adds	r0, #88	; 0x58
   1811a:	6263      	str	r3, [r4, #36]	; 0x24
   1811c:	4b05      	ldr	r3, [pc, #20]	; (18134 <std.isra.0+0x48>)
   1811e:	62a3      	str	r3, [r4, #40]	; 0x28
   18120:	4b05      	ldr	r3, [pc, #20]	; (18138 <std.isra.0+0x4c>)
   18122:	62e3      	str	r3, [r4, #44]	; 0x2c
   18124:	f000 fb48 	bl	187b8 <__retarget_lock_init_recursive>
   18128:	bd10      	pop	{r4, pc}
   1812a:	46c0      	nop			; (mov r8, r8)
   1812c:	000193e5 	.word	0x000193e5
   18130:	0001940d 	.word	0x0001940d
   18134:	00019449 	.word	0x00019449
   18138:	00019475 	.word	0x00019475

0001813c <__sinit>:
   1813c:	b570      	push	{r4, r5, r6, lr}
   1813e:	0004      	movs	r4, r0
   18140:	4d14      	ldr	r5, [pc, #80]	; (18194 <__sinit+0x58>)
   18142:	0028      	movs	r0, r5
   18144:	f000 fb3c 	bl	187c0 <__retarget_lock_acquire_recursive>
   18148:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1814a:	2b00      	cmp	r3, #0
   1814c:	d11d      	bne.n	1818a <__sinit+0x4e>
   1814e:	4a12      	ldr	r2, [pc, #72]	; (18198 <__sinit+0x5c>)
   18150:	2104      	movs	r1, #4
   18152:	63e2      	str	r2, [r4, #60]	; 0x3c
   18154:	22b8      	movs	r2, #184	; 0xb8
   18156:	0092      	lsls	r2, r2, #2
   18158:	50a3      	str	r3, [r4, r2]
   1815a:	23b9      	movs	r3, #185	; 0xb9
   1815c:	2203      	movs	r2, #3
   1815e:	009b      	lsls	r3, r3, #2
   18160:	50e2      	str	r2, [r4, r3]
   18162:	3308      	adds	r3, #8
   18164:	18e2      	adds	r2, r4, r3
   18166:	3b04      	subs	r3, #4
   18168:	50e2      	str	r2, [r4, r3]
   1816a:	6860      	ldr	r0, [r4, #4]
   1816c:	2200      	movs	r2, #0
   1816e:	f7ff ffbd 	bl	180ec <std.isra.0>
   18172:	2201      	movs	r2, #1
   18174:	2109      	movs	r1, #9
   18176:	68a0      	ldr	r0, [r4, #8]
   18178:	f7ff ffb8 	bl	180ec <std.isra.0>
   1817c:	2202      	movs	r2, #2
   1817e:	2112      	movs	r1, #18
   18180:	68e0      	ldr	r0, [r4, #12]
   18182:	f7ff ffb3 	bl	180ec <std.isra.0>
   18186:	2301      	movs	r3, #1
   18188:	63a3      	str	r3, [r4, #56]	; 0x38
   1818a:	0028      	movs	r0, r5
   1818c:	f000 fb1a 	bl	187c4 <__retarget_lock_release_recursive>
   18190:	bd70      	pop	{r4, r5, r6, pc}
   18192:	46c0      	nop			; (mov r8, r8)
   18194:	20001bf4 	.word	0x20001bf4
   18198:	000180dd 	.word	0x000180dd

0001819c <__sfp_lock_acquire>:
   1819c:	b510      	push	{r4, lr}
   1819e:	4802      	ldr	r0, [pc, #8]	; (181a8 <__sfp_lock_acquire+0xc>)
   181a0:	f000 fb0e 	bl	187c0 <__retarget_lock_acquire_recursive>
   181a4:	bd10      	pop	{r4, pc}
   181a6:	46c0      	nop			; (mov r8, r8)
   181a8:	20001c08 	.word	0x20001c08

000181ac <__sfp_lock_release>:
   181ac:	b510      	push	{r4, lr}
   181ae:	4802      	ldr	r0, [pc, #8]	; (181b8 <__sfp_lock_release+0xc>)
   181b0:	f000 fb08 	bl	187c4 <__retarget_lock_release_recursive>
   181b4:	bd10      	pop	{r4, pc}
   181b6:	46c0      	nop			; (mov r8, r8)
   181b8:	20001c08 	.word	0x20001c08

000181bc <__libc_fini_array>:
   181bc:	b570      	push	{r4, r5, r6, lr}
   181be:	4b09      	ldr	r3, [pc, #36]	; (181e4 <__libc_fini_array+0x28>)
   181c0:	4c09      	ldr	r4, [pc, #36]	; (181e8 <__libc_fini_array+0x2c>)
   181c2:	1ae4      	subs	r4, r4, r3
   181c4:	10a4      	asrs	r4, r4, #2
   181c6:	d009      	beq.n	181dc <__libc_fini_array+0x20>
   181c8:	4a08      	ldr	r2, [pc, #32]	; (181ec <__libc_fini_array+0x30>)
   181ca:	18a5      	adds	r5, r4, r2
   181cc:	00ad      	lsls	r5, r5, #2
   181ce:	18ed      	adds	r5, r5, r3
   181d0:	682b      	ldr	r3, [r5, #0]
   181d2:	3c01      	subs	r4, #1
   181d4:	4798      	blx	r3
   181d6:	3d04      	subs	r5, #4
   181d8:	2c00      	cmp	r4, #0
   181da:	d1f9      	bne.n	181d0 <__libc_fini_array+0x14>
   181dc:	f003 fa46 	bl	1b66c <_fini>
   181e0:	bd70      	pop	{r4, r5, r6, pc}
   181e2:	46c0      	nop			; (mov r8, r8)
   181e4:	0001b678 	.word	0x0001b678
   181e8:	0001b67c 	.word	0x0001b67c
   181ec:	3fffffff 	.word	0x3fffffff

000181f0 <_malloc_trim_r>:
   181f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   181f2:	000c      	movs	r4, r1
   181f4:	0006      	movs	r6, r0
   181f6:	f7fd f845 	bl	15284 <__malloc_lock>
   181fa:	4f20      	ldr	r7, [pc, #128]	; (1827c <_malloc_trim_r+0x8c>)
   181fc:	68bb      	ldr	r3, [r7, #8]
   181fe:	685d      	ldr	r5, [r3, #4]
   18200:	2303      	movs	r3, #3
   18202:	439d      	bics	r5, r3
   18204:	4b1e      	ldr	r3, [pc, #120]	; (18280 <_malloc_trim_r+0x90>)
   18206:	1b2c      	subs	r4, r5, r4
   18208:	469c      	mov	ip, r3
   1820a:	4464      	add	r4, ip
   1820c:	0b24      	lsrs	r4, r4, #12
   1820e:	4b1d      	ldr	r3, [pc, #116]	; (18284 <_malloc_trim_r+0x94>)
   18210:	3c01      	subs	r4, #1
   18212:	0324      	lsls	r4, r4, #12
   18214:	429c      	cmp	r4, r3
   18216:	dd07      	ble.n	18228 <_malloc_trim_r+0x38>
   18218:	2100      	movs	r1, #0
   1821a:	0030      	movs	r0, r6
   1821c:	f7fd f8d2 	bl	153c4 <_sbrk_r>
   18220:	68bb      	ldr	r3, [r7, #8]
   18222:	195b      	adds	r3, r3, r5
   18224:	4298      	cmp	r0, r3
   18226:	d004      	beq.n	18232 <_malloc_trim_r+0x42>
   18228:	0030      	movs	r0, r6
   1822a:	f7fd f833 	bl	15294 <__malloc_unlock>
   1822e:	2000      	movs	r0, #0
   18230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18232:	4261      	negs	r1, r4
   18234:	0030      	movs	r0, r6
   18236:	f7fd f8c5 	bl	153c4 <_sbrk_r>
   1823a:	1c43      	adds	r3, r0, #1
   1823c:	d00d      	beq.n	1825a <_malloc_trim_r+0x6a>
   1823e:	2201      	movs	r2, #1
   18240:	68bb      	ldr	r3, [r7, #8]
   18242:	1b2d      	subs	r5, r5, r4
   18244:	4315      	orrs	r5, r2
   18246:	605d      	str	r5, [r3, #4]
   18248:	4b0f      	ldr	r3, [pc, #60]	; (18288 <_malloc_trim_r+0x98>)
   1824a:	0030      	movs	r0, r6
   1824c:	681a      	ldr	r2, [r3, #0]
   1824e:	1b14      	subs	r4, r2, r4
   18250:	601c      	str	r4, [r3, #0]
   18252:	f7fd f81f 	bl	15294 <__malloc_unlock>
   18256:	2001      	movs	r0, #1
   18258:	e7ea      	b.n	18230 <_malloc_trim_r+0x40>
   1825a:	2100      	movs	r1, #0
   1825c:	0030      	movs	r0, r6
   1825e:	f7fd f8b1 	bl	153c4 <_sbrk_r>
   18262:	68ba      	ldr	r2, [r7, #8]
   18264:	1a83      	subs	r3, r0, r2
   18266:	2b0f      	cmp	r3, #15
   18268:	ddde      	ble.n	18228 <_malloc_trim_r+0x38>
   1826a:	4908      	ldr	r1, [pc, #32]	; (1828c <_malloc_trim_r+0x9c>)
   1826c:	6809      	ldr	r1, [r1, #0]
   1826e:	1a40      	subs	r0, r0, r1
   18270:	4905      	ldr	r1, [pc, #20]	; (18288 <_malloc_trim_r+0x98>)
   18272:	6008      	str	r0, [r1, #0]
   18274:	2101      	movs	r1, #1
   18276:	430b      	orrs	r3, r1
   18278:	6053      	str	r3, [r2, #4]
   1827a:	e7d5      	b.n	18228 <_malloc_trim_r+0x38>
   1827c:	20000498 	.word	0x20000498
   18280:	00000fef 	.word	0x00000fef
   18284:	00000fff 	.word	0x00000fff
   18288:	20000ee0 	.word	0x20000ee0
   1828c:	200008a0 	.word	0x200008a0

00018290 <_free_r>:
   18290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18292:	0004      	movs	r4, r0
   18294:	1e0d      	subs	r5, r1, #0
   18296:	d03c      	beq.n	18312 <_free_r+0x82>
   18298:	f7fc fff4 	bl	15284 <__malloc_lock>
   1829c:	0029      	movs	r1, r5
   1829e:	3908      	subs	r1, #8
   182a0:	6848      	ldr	r0, [r1, #4]
   182a2:	2301      	movs	r3, #1
   182a4:	0005      	movs	r5, r0
   182a6:	2603      	movs	r6, #3
   182a8:	439d      	bics	r5, r3
   182aa:	194a      	adds	r2, r1, r5
   182ac:	469c      	mov	ip, r3
   182ae:	4f61      	ldr	r7, [pc, #388]	; (18434 <_free_r+0x1a4>)
   182b0:	6853      	ldr	r3, [r2, #4]
   182b2:	43b3      	bics	r3, r6
   182b4:	68be      	ldr	r6, [r7, #8]
   182b6:	42b2      	cmp	r2, r6
   182b8:	d056      	beq.n	18368 <_free_r+0xd8>
   182ba:	4666      	mov	r6, ip
   182bc:	6053      	str	r3, [r2, #4]
   182be:	4206      	tst	r6, r0
   182c0:	d10a      	bne.n	182d8 <_free_r+0x48>
   182c2:	003e      	movs	r6, r7
   182c4:	6808      	ldr	r0, [r1, #0]
   182c6:	3608      	adds	r6, #8
   182c8:	1a09      	subs	r1, r1, r0
   182ca:	182d      	adds	r5, r5, r0
   182cc:	6888      	ldr	r0, [r1, #8]
   182ce:	42b0      	cmp	r0, r6
   182d0:	d065      	beq.n	1839e <_free_r+0x10e>
   182d2:	68ce      	ldr	r6, [r1, #12]
   182d4:	60c6      	str	r6, [r0, #12]
   182d6:	60b0      	str	r0, [r6, #8]
   182d8:	2001      	movs	r0, #1
   182da:	18d6      	adds	r6, r2, r3
   182dc:	6876      	ldr	r6, [r6, #4]
   182de:	4206      	tst	r6, r0
   182e0:	d033      	beq.n	1834a <_free_r+0xba>
   182e2:	4b55      	ldr	r3, [pc, #340]	; (18438 <_free_r+0x1a8>)
   182e4:	4328      	orrs	r0, r5
   182e6:	6048      	str	r0, [r1, #4]
   182e8:	514d      	str	r5, [r1, r5]
   182ea:	429d      	cmp	r5, r3
   182ec:	d812      	bhi.n	18314 <_free_r+0x84>
   182ee:	08ed      	lsrs	r5, r5, #3
   182f0:	3bff      	subs	r3, #255	; 0xff
   182f2:	10aa      	asrs	r2, r5, #2
   182f4:	3bff      	subs	r3, #255	; 0xff
   182f6:	4093      	lsls	r3, r2
   182f8:	687a      	ldr	r2, [r7, #4]
   182fa:	00ed      	lsls	r5, r5, #3
   182fc:	4313      	orrs	r3, r2
   182fe:	607b      	str	r3, [r7, #4]
   18300:	19ef      	adds	r7, r5, r7
   18302:	68bb      	ldr	r3, [r7, #8]
   18304:	60cf      	str	r7, [r1, #12]
   18306:	608b      	str	r3, [r1, #8]
   18308:	60b9      	str	r1, [r7, #8]
   1830a:	60d9      	str	r1, [r3, #12]
   1830c:	0020      	movs	r0, r4
   1830e:	f7fc ffc1 	bl	15294 <__malloc_unlock>
   18312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18314:	0a68      	lsrs	r0, r5, #9
   18316:	2804      	cmp	r0, #4
   18318:	d850      	bhi.n	183bc <_free_r+0x12c>
   1831a:	09a8      	lsrs	r0, r5, #6
   1831c:	0002      	movs	r2, r0
   1831e:	3039      	adds	r0, #57	; 0x39
   18320:	3238      	adds	r2, #56	; 0x38
   18322:	00c0      	lsls	r0, r0, #3
   18324:	1838      	adds	r0, r7, r0
   18326:	3808      	subs	r0, #8
   18328:	6883      	ldr	r3, [r0, #8]
   1832a:	2603      	movs	r6, #3
   1832c:	4298      	cmp	r0, r3
   1832e:	d04c      	beq.n	183ca <_free_r+0x13a>
   18330:	685a      	ldr	r2, [r3, #4]
   18332:	43b2      	bics	r2, r6
   18334:	4295      	cmp	r5, r2
   18336:	d230      	bcs.n	1839a <_free_r+0x10a>
   18338:	689b      	ldr	r3, [r3, #8]
   1833a:	4298      	cmp	r0, r3
   1833c:	d1f8      	bne.n	18330 <_free_r+0xa0>
   1833e:	68c3      	ldr	r3, [r0, #12]
   18340:	60cb      	str	r3, [r1, #12]
   18342:	6088      	str	r0, [r1, #8]
   18344:	6099      	str	r1, [r3, #8]
   18346:	60c1      	str	r1, [r0, #12]
   18348:	e7e0      	b.n	1830c <_free_r+0x7c>
   1834a:	18ed      	adds	r5, r5, r3
   1834c:	4e3b      	ldr	r6, [pc, #236]	; (1843c <_free_r+0x1ac>)
   1834e:	6893      	ldr	r3, [r2, #8]
   18350:	42b3      	cmp	r3, r6
   18352:	d042      	beq.n	183da <_free_r+0x14a>
   18354:	68d2      	ldr	r2, [r2, #12]
   18356:	4328      	orrs	r0, r5
   18358:	60da      	str	r2, [r3, #12]
   1835a:	6093      	str	r3, [r2, #8]
   1835c:	4b36      	ldr	r3, [pc, #216]	; (18438 <_free_r+0x1a8>)
   1835e:	6048      	str	r0, [r1, #4]
   18360:	514d      	str	r5, [r1, r5]
   18362:	429d      	cmp	r5, r3
   18364:	d8d6      	bhi.n	18314 <_free_r+0x84>
   18366:	e7c2      	b.n	182ee <_free_r+0x5e>
   18368:	4662      	mov	r2, ip
   1836a:	18eb      	adds	r3, r5, r3
   1836c:	4202      	tst	r2, r0
   1836e:	d106      	bne.n	1837e <_free_r+0xee>
   18370:	680a      	ldr	r2, [r1, #0]
   18372:	1a89      	subs	r1, r1, r2
   18374:	6888      	ldr	r0, [r1, #8]
   18376:	189b      	adds	r3, r3, r2
   18378:	68ca      	ldr	r2, [r1, #12]
   1837a:	60c2      	str	r2, [r0, #12]
   1837c:	6090      	str	r0, [r2, #8]
   1837e:	2201      	movs	r2, #1
   18380:	431a      	orrs	r2, r3
   18382:	604a      	str	r2, [r1, #4]
   18384:	4a2e      	ldr	r2, [pc, #184]	; (18440 <_free_r+0x1b0>)
   18386:	60b9      	str	r1, [r7, #8]
   18388:	6812      	ldr	r2, [r2, #0]
   1838a:	4293      	cmp	r3, r2
   1838c:	d3be      	bcc.n	1830c <_free_r+0x7c>
   1838e:	4b2d      	ldr	r3, [pc, #180]	; (18444 <_free_r+0x1b4>)
   18390:	0020      	movs	r0, r4
   18392:	6819      	ldr	r1, [r3, #0]
   18394:	f7ff ff2c 	bl	181f0 <_malloc_trim_r>
   18398:	e7b8      	b.n	1830c <_free_r+0x7c>
   1839a:	0018      	movs	r0, r3
   1839c:	e7cf      	b.n	1833e <_free_r+0xae>
   1839e:	4666      	mov	r6, ip
   183a0:	18d0      	adds	r0, r2, r3
   183a2:	6840      	ldr	r0, [r0, #4]
   183a4:	4230      	tst	r0, r6
   183a6:	d13f      	bne.n	18428 <_free_r+0x198>
   183a8:	6890      	ldr	r0, [r2, #8]
   183aa:	195d      	adds	r5, r3, r5
   183ac:	68d3      	ldr	r3, [r2, #12]
   183ae:	60c3      	str	r3, [r0, #12]
   183b0:	6098      	str	r0, [r3, #8]
   183b2:	4663      	mov	r3, ip
   183b4:	432b      	orrs	r3, r5
   183b6:	604b      	str	r3, [r1, #4]
   183b8:	514d      	str	r5, [r1, r5]
   183ba:	e7a7      	b.n	1830c <_free_r+0x7c>
   183bc:	2814      	cmp	r0, #20
   183be:	d814      	bhi.n	183ea <_free_r+0x15a>
   183c0:	0002      	movs	r2, r0
   183c2:	305c      	adds	r0, #92	; 0x5c
   183c4:	325b      	adds	r2, #91	; 0x5b
   183c6:	00c0      	lsls	r0, r0, #3
   183c8:	e7ac      	b.n	18324 <_free_r+0x94>
   183ca:	2301      	movs	r3, #1
   183cc:	1092      	asrs	r2, r2, #2
   183ce:	4093      	lsls	r3, r2
   183d0:	687a      	ldr	r2, [r7, #4]
   183d2:	4313      	orrs	r3, r2
   183d4:	607b      	str	r3, [r7, #4]
   183d6:	0003      	movs	r3, r0
   183d8:	e7b2      	b.n	18340 <_free_r+0xb0>
   183da:	4328      	orrs	r0, r5
   183dc:	60d9      	str	r1, [r3, #12]
   183de:	6099      	str	r1, [r3, #8]
   183e0:	60cb      	str	r3, [r1, #12]
   183e2:	608b      	str	r3, [r1, #8]
   183e4:	6048      	str	r0, [r1, #4]
   183e6:	514d      	str	r5, [r1, r5]
   183e8:	e790      	b.n	1830c <_free_r+0x7c>
   183ea:	2854      	cmp	r0, #84	; 0x54
   183ec:	d805      	bhi.n	183fa <_free_r+0x16a>
   183ee:	0b28      	lsrs	r0, r5, #12
   183f0:	0002      	movs	r2, r0
   183f2:	306f      	adds	r0, #111	; 0x6f
   183f4:	326e      	adds	r2, #110	; 0x6e
   183f6:	00c0      	lsls	r0, r0, #3
   183f8:	e794      	b.n	18324 <_free_r+0x94>
   183fa:	22aa      	movs	r2, #170	; 0xaa
   183fc:	0052      	lsls	r2, r2, #1
   183fe:	4290      	cmp	r0, r2
   18400:	d805      	bhi.n	1840e <_free_r+0x17e>
   18402:	0be8      	lsrs	r0, r5, #15
   18404:	0002      	movs	r2, r0
   18406:	3078      	adds	r0, #120	; 0x78
   18408:	3277      	adds	r2, #119	; 0x77
   1840a:	00c0      	lsls	r0, r0, #3
   1840c:	e78a      	b.n	18324 <_free_r+0x94>
   1840e:	4a0e      	ldr	r2, [pc, #56]	; (18448 <_free_r+0x1b8>)
   18410:	4290      	cmp	r0, r2
   18412:	d805      	bhi.n	18420 <_free_r+0x190>
   18414:	0ca8      	lsrs	r0, r5, #18
   18416:	0002      	movs	r2, r0
   18418:	307d      	adds	r0, #125	; 0x7d
   1841a:	327c      	adds	r2, #124	; 0x7c
   1841c:	00c0      	lsls	r0, r0, #3
   1841e:	e781      	b.n	18324 <_free_r+0x94>
   18420:	20fe      	movs	r0, #254	; 0xfe
   18422:	227e      	movs	r2, #126	; 0x7e
   18424:	0080      	lsls	r0, r0, #2
   18426:	e77d      	b.n	18324 <_free_r+0x94>
   18428:	4663      	mov	r3, ip
   1842a:	432b      	orrs	r3, r5
   1842c:	604b      	str	r3, [r1, #4]
   1842e:	6015      	str	r5, [r2, #0]
   18430:	e76c      	b.n	1830c <_free_r+0x7c>
   18432:	46c0      	nop			; (mov r8, r8)
   18434:	20000498 	.word	0x20000498
   18438:	000001ff 	.word	0x000001ff
   1843c:	200004a0 	.word	0x200004a0
   18440:	200008a4 	.word	0x200008a4
   18444:	20000f10 	.word	0x20000f10
   18448:	00000554 	.word	0x00000554

0001844c <__sfvwrite_r>:
   1844c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1844e:	464e      	mov	r6, r9
   18450:	46de      	mov	lr, fp
   18452:	4657      	mov	r7, sl
   18454:	4645      	mov	r5, r8
   18456:	b5e0      	push	{r5, r6, r7, lr}
   18458:	6893      	ldr	r3, [r2, #8]
   1845a:	b083      	sub	sp, #12
   1845c:	9000      	str	r0, [sp, #0]
   1845e:	000c      	movs	r4, r1
   18460:	0016      	movs	r6, r2
   18462:	2b00      	cmp	r3, #0
   18464:	d025      	beq.n	184b2 <__sfvwrite_r+0x66>
   18466:	898b      	ldrh	r3, [r1, #12]
   18468:	071a      	lsls	r2, r3, #28
   1846a:	d52a      	bpl.n	184c2 <__sfvwrite_r+0x76>
   1846c:	690a      	ldr	r2, [r1, #16]
   1846e:	2a00      	cmp	r2, #0
   18470:	d027      	beq.n	184c2 <__sfvwrite_r+0x76>
   18472:	6832      	ldr	r2, [r6, #0]
   18474:	4693      	mov	fp, r2
   18476:	079a      	lsls	r2, r3, #30
   18478:	d52f      	bpl.n	184da <__sfvwrite_r+0x8e>
   1847a:	4bb2      	ldr	r3, [pc, #712]	; (18744 <__sfvwrite_r+0x2f8>)
   1847c:	2700      	movs	r7, #0
   1847e:	2500      	movs	r5, #0
   18480:	4698      	mov	r8, r3
   18482:	46b1      	mov	r9, r6
   18484:	2d00      	cmp	r5, #0
   18486:	d100      	bne.n	1848a <__sfvwrite_r+0x3e>
   18488:	e072      	b.n	18570 <__sfvwrite_r+0x124>
   1848a:	002b      	movs	r3, r5
   1848c:	4545      	cmp	r5, r8
   1848e:	d900      	bls.n	18492 <__sfvwrite_r+0x46>
   18490:	4bac      	ldr	r3, [pc, #688]	; (18744 <__sfvwrite_r+0x2f8>)
   18492:	003a      	movs	r2, r7
   18494:	69e1      	ldr	r1, [r4, #28]
   18496:	9800      	ldr	r0, [sp, #0]
   18498:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1849a:	47b0      	blx	r6
   1849c:	2800      	cmp	r0, #0
   1849e:	dc00      	bgt.n	184a2 <__sfvwrite_r+0x56>
   184a0:	e073      	b.n	1858a <__sfvwrite_r+0x13e>
   184a2:	464b      	mov	r3, r9
   184a4:	689b      	ldr	r3, [r3, #8]
   184a6:	183f      	adds	r7, r7, r0
   184a8:	1a2d      	subs	r5, r5, r0
   184aa:	1a18      	subs	r0, r3, r0
   184ac:	464b      	mov	r3, r9
   184ae:	6098      	str	r0, [r3, #8]
   184b0:	d1e8      	bne.n	18484 <__sfvwrite_r+0x38>
   184b2:	2000      	movs	r0, #0
   184b4:	b003      	add	sp, #12
   184b6:	bc3c      	pop	{r2, r3, r4, r5}
   184b8:	4690      	mov	r8, r2
   184ba:	4699      	mov	r9, r3
   184bc:	46a2      	mov	sl, r4
   184be:	46ab      	mov	fp, r5
   184c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   184c2:	0021      	movs	r1, r4
   184c4:	9800      	ldr	r0, [sp, #0]
   184c6:	f7fe fc4b 	bl	16d60 <__swsetup_r>
   184ca:	2800      	cmp	r0, #0
   184cc:	d000      	beq.n	184d0 <__sfvwrite_r+0x84>
   184ce:	e130      	b.n	18732 <__sfvwrite_r+0x2e6>
   184d0:	6832      	ldr	r2, [r6, #0]
   184d2:	89a3      	ldrh	r3, [r4, #12]
   184d4:	4693      	mov	fp, r2
   184d6:	079a      	lsls	r2, r3, #30
   184d8:	d4cf      	bmi.n	1847a <__sfvwrite_r+0x2e>
   184da:	07da      	lsls	r2, r3, #31
   184dc:	d55d      	bpl.n	1859a <__sfvwrite_r+0x14e>
   184de:	2300      	movs	r3, #0
   184e0:	2000      	movs	r0, #0
   184e2:	469a      	mov	sl, r3
   184e4:	2700      	movs	r7, #0
   184e6:	001d      	movs	r5, r3
   184e8:	46b1      	mov	r9, r6
   184ea:	e029      	b.n	18540 <__sfvwrite_r+0xf4>
   184ec:	2800      	cmp	r0, #0
   184ee:	d033      	beq.n	18558 <__sfvwrite_r+0x10c>
   184f0:	46a8      	mov	r8, r5
   184f2:	42bd      	cmp	r5, r7
   184f4:	d900      	bls.n	184f8 <__sfvwrite_r+0xac>
   184f6:	46b8      	mov	r8, r7
   184f8:	6820      	ldr	r0, [r4, #0]
   184fa:	6922      	ldr	r2, [r4, #16]
   184fc:	4646      	mov	r6, r8
   184fe:	6963      	ldr	r3, [r4, #20]
   18500:	4290      	cmp	r0, r2
   18502:	d907      	bls.n	18514 <__sfvwrite_r+0xc8>
   18504:	68a2      	ldr	r2, [r4, #8]
   18506:	4694      	mov	ip, r2
   18508:	449c      	add	ip, r3
   1850a:	4662      	mov	r2, ip
   1850c:	9201      	str	r2, [sp, #4]
   1850e:	45e0      	cmp	r8, ip
   18510:	dd00      	ble.n	18514 <__sfvwrite_r+0xc8>
   18512:	e0e9      	b.n	186e8 <__sfvwrite_r+0x29c>
   18514:	4598      	cmp	r8, r3
   18516:	da00      	bge.n	1851a <__sfvwrite_r+0xce>
   18518:	e08f      	b.n	1863a <__sfvwrite_r+0x1ee>
   1851a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1851c:	4652      	mov	r2, sl
   1851e:	69e1      	ldr	r1, [r4, #28]
   18520:	9800      	ldr	r0, [sp, #0]
   18522:	47b0      	blx	r6
   18524:	1e06      	subs	r6, r0, #0
   18526:	dd30      	ble.n	1858a <__sfvwrite_r+0x13e>
   18528:	1bad      	subs	r5, r5, r6
   1852a:	2001      	movs	r0, #1
   1852c:	2d00      	cmp	r5, #0
   1852e:	d026      	beq.n	1857e <__sfvwrite_r+0x132>
   18530:	464b      	mov	r3, r9
   18532:	689b      	ldr	r3, [r3, #8]
   18534:	44b2      	add	sl, r6
   18536:	1bbf      	subs	r7, r7, r6
   18538:	1b9e      	subs	r6, r3, r6
   1853a:	464b      	mov	r3, r9
   1853c:	609e      	str	r6, [r3, #8]
   1853e:	d0b8      	beq.n	184b2 <__sfvwrite_r+0x66>
   18540:	2f00      	cmp	r7, #0
   18542:	d1d3      	bne.n	184ec <__sfvwrite_r+0xa0>
   18544:	465b      	mov	r3, fp
   18546:	681b      	ldr	r3, [r3, #0]
   18548:	469a      	mov	sl, r3
   1854a:	465b      	mov	r3, fp
   1854c:	685f      	ldr	r7, [r3, #4]
   1854e:	2308      	movs	r3, #8
   18550:	469c      	mov	ip, r3
   18552:	44e3      	add	fp, ip
   18554:	2f00      	cmp	r7, #0
   18556:	d0f5      	beq.n	18544 <__sfvwrite_r+0xf8>
   18558:	003a      	movs	r2, r7
   1855a:	210a      	movs	r1, #10
   1855c:	4650      	mov	r0, sl
   1855e:	f000 f9ab 	bl	188b8 <memchr>
   18562:	2800      	cmp	r0, #0
   18564:	d100      	bne.n	18568 <__sfvwrite_r+0x11c>
   18566:	e0e2      	b.n	1872e <__sfvwrite_r+0x2e2>
   18568:	4653      	mov	r3, sl
   1856a:	3001      	adds	r0, #1
   1856c:	1ac5      	subs	r5, r0, r3
   1856e:	e7bf      	b.n	184f0 <__sfvwrite_r+0xa4>
   18570:	465b      	mov	r3, fp
   18572:	681f      	ldr	r7, [r3, #0]
   18574:	685d      	ldr	r5, [r3, #4]
   18576:	2308      	movs	r3, #8
   18578:	469c      	mov	ip, r3
   1857a:	44e3      	add	fp, ip
   1857c:	e782      	b.n	18484 <__sfvwrite_r+0x38>
   1857e:	0021      	movs	r1, r4
   18580:	9800      	ldr	r0, [sp, #0]
   18582:	f7ff fd81 	bl	18088 <_fflush_r>
   18586:	2800      	cmp	r0, #0
   18588:	d0d2      	beq.n	18530 <__sfvwrite_r+0xe4>
   1858a:	220c      	movs	r2, #12
   1858c:	5ea3      	ldrsh	r3, [r4, r2]
   1858e:	2240      	movs	r2, #64	; 0x40
   18590:	2001      	movs	r0, #1
   18592:	4313      	orrs	r3, r2
   18594:	81a3      	strh	r3, [r4, #12]
   18596:	4240      	negs	r0, r0
   18598:	e78c      	b.n	184b4 <__sfvwrite_r+0x68>
   1859a:	2200      	movs	r2, #0
   1859c:	4691      	mov	r9, r2
   1859e:	464d      	mov	r5, r9
   185a0:	2d00      	cmp	r5, #0
   185a2:	d023      	beq.n	185ec <__sfvwrite_r+0x1a0>
   185a4:	68a2      	ldr	r2, [r4, #8]
   185a6:	4690      	mov	r8, r2
   185a8:	2280      	movs	r2, #128	; 0x80
   185aa:	0092      	lsls	r2, r2, #2
   185ac:	4213      	tst	r3, r2
   185ae:	d026      	beq.n	185fe <__sfvwrite_r+0x1b2>
   185b0:	46c2      	mov	sl, r8
   185b2:	4545      	cmp	r5, r8
   185b4:	d34d      	bcc.n	18652 <__sfvwrite_r+0x206>
   185b6:	2290      	movs	r2, #144	; 0x90
   185b8:	00d2      	lsls	r2, r2, #3
   185ba:	4213      	tst	r3, r2
   185bc:	d14e      	bne.n	1865c <__sfvwrite_r+0x210>
   185be:	002f      	movs	r7, r5
   185c0:	6820      	ldr	r0, [r4, #0]
   185c2:	4652      	mov	r2, sl
   185c4:	4649      	mov	r1, r9
   185c6:	f000 f9b7 	bl	18938 <memmove>
   185ca:	4642      	mov	r2, r8
   185cc:	68a3      	ldr	r3, [r4, #8]
   185ce:	1a98      	subs	r0, r3, r2
   185d0:	6823      	ldr	r3, [r4, #0]
   185d2:	60a0      	str	r0, [r4, #8]
   185d4:	4453      	add	r3, sl
   185d6:	6023      	str	r3, [r4, #0]
   185d8:	68b3      	ldr	r3, [r6, #8]
   185da:	44b9      	add	r9, r7
   185dc:	1bed      	subs	r5, r5, r7
   185de:	1bdf      	subs	r7, r3, r7
   185e0:	60b7      	str	r7, [r6, #8]
   185e2:	d100      	bne.n	185e6 <__sfvwrite_r+0x19a>
   185e4:	e765      	b.n	184b2 <__sfvwrite_r+0x66>
   185e6:	89a3      	ldrh	r3, [r4, #12]
   185e8:	2d00      	cmp	r5, #0
   185ea:	d1db      	bne.n	185a4 <__sfvwrite_r+0x158>
   185ec:	465a      	mov	r2, fp
   185ee:	6812      	ldr	r2, [r2, #0]
   185f0:	4691      	mov	r9, r2
   185f2:	465a      	mov	r2, fp
   185f4:	6855      	ldr	r5, [r2, #4]
   185f6:	2208      	movs	r2, #8
   185f8:	4694      	mov	ip, r2
   185fa:	44e3      	add	fp, ip
   185fc:	e7d0      	b.n	185a0 <__sfvwrite_r+0x154>
   185fe:	6820      	ldr	r0, [r4, #0]
   18600:	6923      	ldr	r3, [r4, #16]
   18602:	4298      	cmp	r0, r3
   18604:	d802      	bhi.n	1860c <__sfvwrite_r+0x1c0>
   18606:	6967      	ldr	r7, [r4, #20]
   18608:	42bd      	cmp	r5, r7
   1860a:	d259      	bcs.n	186c0 <__sfvwrite_r+0x274>
   1860c:	4647      	mov	r7, r8
   1860e:	42af      	cmp	r7, r5
   18610:	d900      	bls.n	18614 <__sfvwrite_r+0x1c8>
   18612:	002f      	movs	r7, r5
   18614:	003a      	movs	r2, r7
   18616:	4649      	mov	r1, r9
   18618:	f000 f98e 	bl	18938 <memmove>
   1861c:	68a3      	ldr	r3, [r4, #8]
   1861e:	6822      	ldr	r2, [r4, #0]
   18620:	1bdb      	subs	r3, r3, r7
   18622:	19d2      	adds	r2, r2, r7
   18624:	60a3      	str	r3, [r4, #8]
   18626:	6022      	str	r2, [r4, #0]
   18628:	2b00      	cmp	r3, #0
   1862a:	d1d5      	bne.n	185d8 <__sfvwrite_r+0x18c>
   1862c:	0021      	movs	r1, r4
   1862e:	9800      	ldr	r0, [sp, #0]
   18630:	f7ff fd2a 	bl	18088 <_fflush_r>
   18634:	2800      	cmp	r0, #0
   18636:	d0cf      	beq.n	185d8 <__sfvwrite_r+0x18c>
   18638:	e7a7      	b.n	1858a <__sfvwrite_r+0x13e>
   1863a:	4642      	mov	r2, r8
   1863c:	4651      	mov	r1, sl
   1863e:	f000 f97b 	bl	18938 <memmove>
   18642:	4642      	mov	r2, r8
   18644:	68a3      	ldr	r3, [r4, #8]
   18646:	1a9b      	subs	r3, r3, r2
   18648:	60a3      	str	r3, [r4, #8]
   1864a:	6823      	ldr	r3, [r4, #0]
   1864c:	4443      	add	r3, r8
   1864e:	6023      	str	r3, [r4, #0]
   18650:	e76a      	b.n	18528 <__sfvwrite_r+0xdc>
   18652:	46a8      	mov	r8, r5
   18654:	6820      	ldr	r0, [r4, #0]
   18656:	002f      	movs	r7, r5
   18658:	46aa      	mov	sl, r5
   1865a:	e7b2      	b.n	185c2 <__sfvwrite_r+0x176>
   1865c:	6921      	ldr	r1, [r4, #16]
   1865e:	6822      	ldr	r2, [r4, #0]
   18660:	1a52      	subs	r2, r2, r1
   18662:	4692      	mov	sl, r2
   18664:	6962      	ldr	r2, [r4, #20]
   18666:	0057      	lsls	r7, r2, #1
   18668:	18bf      	adds	r7, r7, r2
   1866a:	0ffa      	lsrs	r2, r7, #31
   1866c:	19d7      	adds	r7, r2, r7
   1866e:	4652      	mov	r2, sl
   18670:	1c50      	adds	r0, r2, #1
   18672:	107f      	asrs	r7, r7, #1
   18674:	1940      	adds	r0, r0, r5
   18676:	003a      	movs	r2, r7
   18678:	42b8      	cmp	r0, r7
   1867a:	d901      	bls.n	18680 <__sfvwrite_r+0x234>
   1867c:	0007      	movs	r7, r0
   1867e:	0002      	movs	r2, r0
   18680:	055b      	lsls	r3, r3, #21
   18682:	d542      	bpl.n	1870a <__sfvwrite_r+0x2be>
   18684:	0011      	movs	r1, r2
   18686:	9800      	ldr	r0, [sp, #0]
   18688:	f7fc fabc 	bl	14c04 <_malloc_r>
   1868c:	4680      	mov	r8, r0
   1868e:	1e03      	subs	r3, r0, #0
   18690:	d052      	beq.n	18738 <__sfvwrite_r+0x2ec>
   18692:	4652      	mov	r2, sl
   18694:	6921      	ldr	r1, [r4, #16]
   18696:	f7fc fd69 	bl	1516c <memcpy>
   1869a:	89a3      	ldrh	r3, [r4, #12]
   1869c:	4a2a      	ldr	r2, [pc, #168]	; (18748 <__sfvwrite_r+0x2fc>)
   1869e:	4013      	ands	r3, r2
   186a0:	2280      	movs	r2, #128	; 0x80
   186a2:	4313      	orrs	r3, r2
   186a4:	81a3      	strh	r3, [r4, #12]
   186a6:	4643      	mov	r3, r8
   186a8:	4640      	mov	r0, r8
   186aa:	6123      	str	r3, [r4, #16]
   186ac:	4653      	mov	r3, sl
   186ae:	4450      	add	r0, sl
   186b0:	6167      	str	r7, [r4, #20]
   186b2:	1aff      	subs	r7, r7, r3
   186b4:	60a7      	str	r7, [r4, #8]
   186b6:	6020      	str	r0, [r4, #0]
   186b8:	46a8      	mov	r8, r5
   186ba:	002f      	movs	r7, r5
   186bc:	46aa      	mov	sl, r5
   186be:	e780      	b.n	185c2 <__sfvwrite_r+0x176>
   186c0:	4b22      	ldr	r3, [pc, #136]	; (1874c <__sfvwrite_r+0x300>)
   186c2:	0028      	movs	r0, r5
   186c4:	429d      	cmp	r5, r3
   186c6:	d900      	bls.n	186ca <__sfvwrite_r+0x27e>
   186c8:	0018      	movs	r0, r3
   186ca:	0039      	movs	r1, r7
   186cc:	f7f9 fa26 	bl	11b1c <__divsi3>
   186d0:	003b      	movs	r3, r7
   186d2:	464a      	mov	r2, r9
   186d4:	4343      	muls	r3, r0
   186d6:	69e1      	ldr	r1, [r4, #28]
   186d8:	9800      	ldr	r0, [sp, #0]
   186da:	6a67      	ldr	r7, [r4, #36]	; 0x24
   186dc:	47b8      	blx	r7
   186de:	2800      	cmp	r0, #0
   186e0:	dc00      	bgt.n	186e4 <__sfvwrite_r+0x298>
   186e2:	e752      	b.n	1858a <__sfvwrite_r+0x13e>
   186e4:	0007      	movs	r7, r0
   186e6:	e777      	b.n	185d8 <__sfvwrite_r+0x18c>
   186e8:	4666      	mov	r6, ip
   186ea:	4651      	mov	r1, sl
   186ec:	f000 f924 	bl	18938 <memmove>
   186f0:	46b4      	mov	ip, r6
   186f2:	6823      	ldr	r3, [r4, #0]
   186f4:	0021      	movs	r1, r4
   186f6:	4463      	add	r3, ip
   186f8:	6023      	str	r3, [r4, #0]
   186fa:	9800      	ldr	r0, [sp, #0]
   186fc:	f7ff fcc4 	bl	18088 <_fflush_r>
   18700:	2800      	cmp	r0, #0
   18702:	d000      	beq.n	18706 <__sfvwrite_r+0x2ba>
   18704:	e741      	b.n	1858a <__sfvwrite_r+0x13e>
   18706:	9e01      	ldr	r6, [sp, #4]
   18708:	e70e      	b.n	18528 <__sfvwrite_r+0xdc>
   1870a:	9800      	ldr	r0, [sp, #0]
   1870c:	f000 fcac 	bl	19068 <_realloc_r>
   18710:	4680      	mov	r8, r0
   18712:	2800      	cmp	r0, #0
   18714:	d1c7      	bne.n	186a6 <__sfvwrite_r+0x25a>
   18716:	9d00      	ldr	r5, [sp, #0]
   18718:	6921      	ldr	r1, [r4, #16]
   1871a:	0028      	movs	r0, r5
   1871c:	f7ff fdb8 	bl	18290 <_free_r>
   18720:	2280      	movs	r2, #128	; 0x80
   18722:	89a3      	ldrh	r3, [r4, #12]
   18724:	4393      	bics	r3, r2
   18726:	3a74      	subs	r2, #116	; 0x74
   18728:	b21b      	sxth	r3, r3
   1872a:	602a      	str	r2, [r5, #0]
   1872c:	e72f      	b.n	1858e <__sfvwrite_r+0x142>
   1872e:	1c7d      	adds	r5, r7, #1
   18730:	e6de      	b.n	184f0 <__sfvwrite_r+0xa4>
   18732:	2001      	movs	r0, #1
   18734:	4240      	negs	r0, r0
   18736:	e6bd      	b.n	184b4 <__sfvwrite_r+0x68>
   18738:	9a00      	ldr	r2, [sp, #0]
   1873a:	330c      	adds	r3, #12
   1873c:	6013      	str	r3, [r2, #0]
   1873e:	220c      	movs	r2, #12
   18740:	5ea3      	ldrsh	r3, [r4, r2]
   18742:	e724      	b.n	1858e <__sfvwrite_r+0x142>
   18744:	7ffffc00 	.word	0x7ffffc00
   18748:	fffffb7f 	.word	0xfffffb7f
   1874c:	7fffffff 	.word	0x7fffffff

00018750 <_fwalk_reent>:
   18750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18752:	4647      	mov	r7, r8
   18754:	46ce      	mov	lr, r9
   18756:	b580      	push	{r7, lr}
   18758:	27b8      	movs	r7, #184	; 0xb8
   1875a:	4680      	mov	r8, r0
   1875c:	00bf      	lsls	r7, r7, #2
   1875e:	4447      	add	r7, r8
   18760:	4689      	mov	r9, r1
   18762:	2600      	movs	r6, #0
   18764:	2f00      	cmp	r7, #0
   18766:	d014      	beq.n	18792 <_fwalk_reent+0x42>
   18768:	687b      	ldr	r3, [r7, #4]
   1876a:	68bc      	ldr	r4, [r7, #8]
   1876c:	1e5d      	subs	r5, r3, #1
   1876e:	d40d      	bmi.n	1878c <_fwalk_reent+0x3c>
   18770:	89a3      	ldrh	r3, [r4, #12]
   18772:	2b01      	cmp	r3, #1
   18774:	d907      	bls.n	18786 <_fwalk_reent+0x36>
   18776:	220e      	movs	r2, #14
   18778:	5ea3      	ldrsh	r3, [r4, r2]
   1877a:	3301      	adds	r3, #1
   1877c:	d003      	beq.n	18786 <_fwalk_reent+0x36>
   1877e:	0021      	movs	r1, r4
   18780:	4640      	mov	r0, r8
   18782:	47c8      	blx	r9
   18784:	4306      	orrs	r6, r0
   18786:	3468      	adds	r4, #104	; 0x68
   18788:	3d01      	subs	r5, #1
   1878a:	d2f1      	bcs.n	18770 <_fwalk_reent+0x20>
   1878c:	683f      	ldr	r7, [r7, #0]
   1878e:	2f00      	cmp	r7, #0
   18790:	d1ea      	bne.n	18768 <_fwalk_reent+0x18>
   18792:	0030      	movs	r0, r6
   18794:	bc0c      	pop	{r2, r3}
   18796:	4690      	mov	r8, r2
   18798:	4699      	mov	r9, r3
   1879a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001879c <_localeconv_r>:
   1879c:	4b04      	ldr	r3, [pc, #16]	; (187b0 <_localeconv_r+0x14>)
   1879e:	681b      	ldr	r3, [r3, #0]
   187a0:	6b58      	ldr	r0, [r3, #52]	; 0x34
   187a2:	2800      	cmp	r0, #0
   187a4:	d001      	beq.n	187aa <_localeconv_r+0xe>
   187a6:	30f0      	adds	r0, #240	; 0xf0
   187a8:	4770      	bx	lr
   187aa:	4802      	ldr	r0, [pc, #8]	; (187b4 <_localeconv_r+0x18>)
   187ac:	e7fb      	b.n	187a6 <_localeconv_r+0xa>
   187ae:	46c0      	nop			; (mov r8, r8)
   187b0:	20000068 	.word	0x20000068
   187b4:	200008ac 	.word	0x200008ac

000187b8 <__retarget_lock_init_recursive>:
   187b8:	4770      	bx	lr
   187ba:	46c0      	nop			; (mov r8, r8)

000187bc <__retarget_lock_close_recursive>:
   187bc:	4770      	bx	lr
   187be:	46c0      	nop			; (mov r8, r8)

000187c0 <__retarget_lock_acquire_recursive>:
   187c0:	4770      	bx	lr
   187c2:	46c0      	nop			; (mov r8, r8)

000187c4 <__retarget_lock_release_recursive>:
   187c4:	4770      	bx	lr
   187c6:	46c0      	nop			; (mov r8, r8)

000187c8 <__swhatbuf_r>:
   187c8:	b570      	push	{r4, r5, r6, lr}
   187ca:	000c      	movs	r4, r1
   187cc:	001e      	movs	r6, r3
   187ce:	230e      	movs	r3, #14
   187d0:	5ec9      	ldrsh	r1, [r1, r3]
   187d2:	b090      	sub	sp, #64	; 0x40
   187d4:	0015      	movs	r5, r2
   187d6:	2900      	cmp	r1, #0
   187d8:	db15      	blt.n	18806 <__swhatbuf_r+0x3e>
   187da:	aa01      	add	r2, sp, #4
   187dc:	f001 f848 	bl	19870 <_fstat_r>
   187e0:	2800      	cmp	r0, #0
   187e2:	db10      	blt.n	18806 <__swhatbuf_r+0x3e>
   187e4:	22f0      	movs	r2, #240	; 0xf0
   187e6:	9b02      	ldr	r3, [sp, #8]
   187e8:	0212      	lsls	r2, r2, #8
   187ea:	4013      	ands	r3, r2
   187ec:	4a0d      	ldr	r2, [pc, #52]	; (18824 <__swhatbuf_r+0x5c>)
   187ee:	2080      	movs	r0, #128	; 0x80
   187f0:	4694      	mov	ip, r2
   187f2:	4463      	add	r3, ip
   187f4:	425a      	negs	r2, r3
   187f6:	4153      	adcs	r3, r2
   187f8:	6033      	str	r3, [r6, #0]
   187fa:	2380      	movs	r3, #128	; 0x80
   187fc:	00db      	lsls	r3, r3, #3
   187fe:	602b      	str	r3, [r5, #0]
   18800:	0100      	lsls	r0, r0, #4
   18802:	b010      	add	sp, #64	; 0x40
   18804:	bd70      	pop	{r4, r5, r6, pc}
   18806:	2300      	movs	r3, #0
   18808:	6033      	str	r3, [r6, #0]
   1880a:	89a3      	ldrh	r3, [r4, #12]
   1880c:	061b      	lsls	r3, r3, #24
   1880e:	d503      	bpl.n	18818 <__swhatbuf_r+0x50>
   18810:	2340      	movs	r3, #64	; 0x40
   18812:	2000      	movs	r0, #0
   18814:	602b      	str	r3, [r5, #0]
   18816:	e7f4      	b.n	18802 <__swhatbuf_r+0x3a>
   18818:	2380      	movs	r3, #128	; 0x80
   1881a:	00db      	lsls	r3, r3, #3
   1881c:	602b      	str	r3, [r5, #0]
   1881e:	2000      	movs	r0, #0
   18820:	e7ef      	b.n	18802 <__swhatbuf_r+0x3a>
   18822:	46c0      	nop			; (mov r8, r8)
   18824:	ffffe000 	.word	0xffffe000

00018828 <__smakebuf_r>:
   18828:	b570      	push	{r4, r5, r6, lr}
   1882a:	898b      	ldrh	r3, [r1, #12]
   1882c:	b082      	sub	sp, #8
   1882e:	0006      	movs	r6, r0
   18830:	000c      	movs	r4, r1
   18832:	079b      	lsls	r3, r3, #30
   18834:	d507      	bpl.n	18846 <__smakebuf_r+0x1e>
   18836:	0023      	movs	r3, r4
   18838:	3343      	adds	r3, #67	; 0x43
   1883a:	6023      	str	r3, [r4, #0]
   1883c:	6123      	str	r3, [r4, #16]
   1883e:	2301      	movs	r3, #1
   18840:	6163      	str	r3, [r4, #20]
   18842:	b002      	add	sp, #8
   18844:	bd70      	pop	{r4, r5, r6, pc}
   18846:	ab01      	add	r3, sp, #4
   18848:	466a      	mov	r2, sp
   1884a:	f7ff ffbd 	bl	187c8 <__swhatbuf_r>
   1884e:	9900      	ldr	r1, [sp, #0]
   18850:	0005      	movs	r5, r0
   18852:	0030      	movs	r0, r6
   18854:	f7fc f9d6 	bl	14c04 <_malloc_r>
   18858:	2800      	cmp	r0, #0
   1885a:	d01e      	beq.n	1889a <__smakebuf_r+0x72>
   1885c:	2280      	movs	r2, #128	; 0x80
   1885e:	4b15      	ldr	r3, [pc, #84]	; (188b4 <__smakebuf_r+0x8c>)
   18860:	63f3      	str	r3, [r6, #60]	; 0x3c
   18862:	89a3      	ldrh	r3, [r4, #12]
   18864:	6020      	str	r0, [r4, #0]
   18866:	4313      	orrs	r3, r2
   18868:	9a00      	ldr	r2, [sp, #0]
   1886a:	b21b      	sxth	r3, r3
   1886c:	6162      	str	r2, [r4, #20]
   1886e:	9a01      	ldr	r2, [sp, #4]
   18870:	81a3      	strh	r3, [r4, #12]
   18872:	6120      	str	r0, [r4, #16]
   18874:	2a00      	cmp	r2, #0
   18876:	d102      	bne.n	1887e <__smakebuf_r+0x56>
   18878:	432b      	orrs	r3, r5
   1887a:	81a3      	strh	r3, [r4, #12]
   1887c:	e7e1      	b.n	18842 <__smakebuf_r+0x1a>
   1887e:	230e      	movs	r3, #14
   18880:	5ee1      	ldrsh	r1, [r4, r3]
   18882:	0030      	movs	r0, r6
   18884:	f001 f808 	bl	19898 <_isatty_r>
   18888:	2800      	cmp	r0, #0
   1888a:	d010      	beq.n	188ae <__smakebuf_r+0x86>
   1888c:	2203      	movs	r2, #3
   1888e:	89a3      	ldrh	r3, [r4, #12]
   18890:	4393      	bics	r3, r2
   18892:	2201      	movs	r2, #1
   18894:	4313      	orrs	r3, r2
   18896:	b21b      	sxth	r3, r3
   18898:	e7ee      	b.n	18878 <__smakebuf_r+0x50>
   1889a:	220c      	movs	r2, #12
   1889c:	5ea3      	ldrsh	r3, [r4, r2]
   1889e:	059a      	lsls	r2, r3, #22
   188a0:	d4cf      	bmi.n	18842 <__smakebuf_r+0x1a>
   188a2:	2203      	movs	r2, #3
   188a4:	4393      	bics	r3, r2
   188a6:	2202      	movs	r2, #2
   188a8:	4313      	orrs	r3, r2
   188aa:	81a3      	strh	r3, [r4, #12]
   188ac:	e7c3      	b.n	18836 <__smakebuf_r+0xe>
   188ae:	220c      	movs	r2, #12
   188b0:	5ea3      	ldrsh	r3, [r4, r2]
   188b2:	e7e1      	b.n	18878 <__smakebuf_r+0x50>
   188b4:	000180dd 	.word	0x000180dd

000188b8 <memchr>:
   188b8:	b570      	push	{r4, r5, r6, lr}
   188ba:	b2cd      	uxtb	r5, r1
   188bc:	0783      	lsls	r3, r0, #30
   188be:	d034      	beq.n	1892a <memchr+0x72>
   188c0:	1e54      	subs	r4, r2, #1
   188c2:	2a00      	cmp	r2, #0
   188c4:	d01b      	beq.n	188fe <memchr+0x46>
   188c6:	7803      	ldrb	r3, [r0, #0]
   188c8:	42ab      	cmp	r3, r5
   188ca:	d019      	beq.n	18900 <memchr+0x48>
   188cc:	2203      	movs	r2, #3
   188ce:	e004      	b.n	188da <memchr+0x22>
   188d0:	3c01      	subs	r4, #1
   188d2:	d314      	bcc.n	188fe <memchr+0x46>
   188d4:	7803      	ldrb	r3, [r0, #0]
   188d6:	42ab      	cmp	r3, r5
   188d8:	d012      	beq.n	18900 <memchr+0x48>
   188da:	3001      	adds	r0, #1
   188dc:	4210      	tst	r0, r2
   188de:	d1f7      	bne.n	188d0 <memchr+0x18>
   188e0:	2c03      	cmp	r4, #3
   188e2:	d80e      	bhi.n	18902 <memchr+0x4a>
   188e4:	2c00      	cmp	r4, #0
   188e6:	d00a      	beq.n	188fe <memchr+0x46>
   188e8:	7803      	ldrb	r3, [r0, #0]
   188ea:	42ab      	cmp	r3, r5
   188ec:	d008      	beq.n	18900 <memchr+0x48>
   188ee:	1904      	adds	r4, r0, r4
   188f0:	e002      	b.n	188f8 <memchr+0x40>
   188f2:	7803      	ldrb	r3, [r0, #0]
   188f4:	42ab      	cmp	r3, r5
   188f6:	d003      	beq.n	18900 <memchr+0x48>
   188f8:	3001      	adds	r0, #1
   188fa:	4284      	cmp	r4, r0
   188fc:	d1f9      	bne.n	188f2 <memchr+0x3a>
   188fe:	2000      	movs	r0, #0
   18900:	bd70      	pop	{r4, r5, r6, pc}
   18902:	22ff      	movs	r2, #255	; 0xff
   18904:	060b      	lsls	r3, r1, #24
   18906:	0c1b      	lsrs	r3, r3, #16
   18908:	4011      	ands	r1, r2
   1890a:	4319      	orrs	r1, r3
   1890c:	040b      	lsls	r3, r1, #16
   1890e:	4e08      	ldr	r6, [pc, #32]	; (18930 <memchr+0x78>)
   18910:	4319      	orrs	r1, r3
   18912:	6803      	ldr	r3, [r0, #0]
   18914:	4a07      	ldr	r2, [pc, #28]	; (18934 <memchr+0x7c>)
   18916:	404b      	eors	r3, r1
   18918:	189a      	adds	r2, r3, r2
   1891a:	439a      	bics	r2, r3
   1891c:	4232      	tst	r2, r6
   1891e:	d1e3      	bne.n	188e8 <memchr+0x30>
   18920:	3c04      	subs	r4, #4
   18922:	3004      	adds	r0, #4
   18924:	2c03      	cmp	r4, #3
   18926:	d8f4      	bhi.n	18912 <memchr+0x5a>
   18928:	e7dc      	b.n	188e4 <memchr+0x2c>
   1892a:	0014      	movs	r4, r2
   1892c:	e7d8      	b.n	188e0 <memchr+0x28>
   1892e:	46c0      	nop			; (mov r8, r8)
   18930:	80808080 	.word	0x80808080
   18934:	fefefeff 	.word	0xfefefeff

00018938 <memmove>:
   18938:	b5f0      	push	{r4, r5, r6, r7, lr}
   1893a:	4288      	cmp	r0, r1
   1893c:	d90a      	bls.n	18954 <memmove+0x1c>
   1893e:	188b      	adds	r3, r1, r2
   18940:	4298      	cmp	r0, r3
   18942:	d207      	bcs.n	18954 <memmove+0x1c>
   18944:	1e53      	subs	r3, r2, #1
   18946:	2a00      	cmp	r2, #0
   18948:	d003      	beq.n	18952 <memmove+0x1a>
   1894a:	5cca      	ldrb	r2, [r1, r3]
   1894c:	54c2      	strb	r2, [r0, r3]
   1894e:	3b01      	subs	r3, #1
   18950:	d2fb      	bcs.n	1894a <memmove+0x12>
   18952:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18954:	0005      	movs	r5, r0
   18956:	2a0f      	cmp	r2, #15
   18958:	d808      	bhi.n	1896c <memmove+0x34>
   1895a:	2a00      	cmp	r2, #0
   1895c:	d0f9      	beq.n	18952 <memmove+0x1a>
   1895e:	2300      	movs	r3, #0
   18960:	5ccc      	ldrb	r4, [r1, r3]
   18962:	54ec      	strb	r4, [r5, r3]
   18964:	3301      	adds	r3, #1
   18966:	4293      	cmp	r3, r2
   18968:	d1fa      	bne.n	18960 <memmove+0x28>
   1896a:	e7f2      	b.n	18952 <memmove+0x1a>
   1896c:	000b      	movs	r3, r1
   1896e:	4303      	orrs	r3, r0
   18970:	079b      	lsls	r3, r3, #30
   18972:	d12d      	bne.n	189d0 <memmove+0x98>
   18974:	0015      	movs	r5, r2
   18976:	000c      	movs	r4, r1
   18978:	0003      	movs	r3, r0
   1897a:	3d10      	subs	r5, #16
   1897c:	092f      	lsrs	r7, r5, #4
   1897e:	3701      	adds	r7, #1
   18980:	013f      	lsls	r7, r7, #4
   18982:	19c7      	adds	r7, r0, r7
   18984:	6826      	ldr	r6, [r4, #0]
   18986:	601e      	str	r6, [r3, #0]
   18988:	6866      	ldr	r6, [r4, #4]
   1898a:	605e      	str	r6, [r3, #4]
   1898c:	68a6      	ldr	r6, [r4, #8]
   1898e:	609e      	str	r6, [r3, #8]
   18990:	68e6      	ldr	r6, [r4, #12]
   18992:	3410      	adds	r4, #16
   18994:	60de      	str	r6, [r3, #12]
   18996:	3310      	adds	r3, #16
   18998:	429f      	cmp	r7, r3
   1899a:	d1f3      	bne.n	18984 <memmove+0x4c>
   1899c:	240f      	movs	r4, #15
   1899e:	43a5      	bics	r5, r4
   189a0:	3510      	adds	r5, #16
   189a2:	1949      	adds	r1, r1, r5
   189a4:	4014      	ands	r4, r2
   189a6:	1945      	adds	r5, r0, r5
   189a8:	2c03      	cmp	r4, #3
   189aa:	d913      	bls.n	189d4 <memmove+0x9c>
   189ac:	2300      	movs	r3, #0
   189ae:	1f27      	subs	r7, r4, #4
   189b0:	08be      	lsrs	r6, r7, #2
   189b2:	3601      	adds	r6, #1
   189b4:	00b6      	lsls	r6, r6, #2
   189b6:	58cc      	ldr	r4, [r1, r3]
   189b8:	50ec      	str	r4, [r5, r3]
   189ba:	3304      	adds	r3, #4
   189bc:	42b3      	cmp	r3, r6
   189be:	d1fa      	bne.n	189b6 <memmove+0x7e>
   189c0:	2603      	movs	r6, #3
   189c2:	43b7      	bics	r7, r6
   189c4:	1d3c      	adds	r4, r7, #4
   189c6:	1909      	adds	r1, r1, r4
   189c8:	192d      	adds	r5, r5, r4
   189ca:	4032      	ands	r2, r6
   189cc:	d1c7      	bne.n	1895e <memmove+0x26>
   189ce:	e7c0      	b.n	18952 <memmove+0x1a>
   189d0:	0005      	movs	r5, r0
   189d2:	e7c4      	b.n	1895e <memmove+0x26>
   189d4:	0022      	movs	r2, r4
   189d6:	e7c0      	b.n	1895a <memmove+0x22>

000189d8 <_Balloc>:
   189d8:	b570      	push	{r4, r5, r6, lr}
   189da:	0004      	movs	r4, r0
   189dc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   189de:	000d      	movs	r5, r1
   189e0:	2800      	cmp	r0, #0
   189e2:	d00a      	beq.n	189fa <_Balloc+0x22>
   189e4:	00ab      	lsls	r3, r5, #2
   189e6:	18c3      	adds	r3, r0, r3
   189e8:	6818      	ldr	r0, [r3, #0]
   189ea:	2800      	cmp	r0, #0
   189ec:	d00f      	beq.n	18a0e <_Balloc+0x36>
   189ee:	6802      	ldr	r2, [r0, #0]
   189f0:	601a      	str	r2, [r3, #0]
   189f2:	2300      	movs	r3, #0
   189f4:	6103      	str	r3, [r0, #16]
   189f6:	60c3      	str	r3, [r0, #12]
   189f8:	bd70      	pop	{r4, r5, r6, pc}
   189fa:	2221      	movs	r2, #33	; 0x21
   189fc:	2104      	movs	r1, #4
   189fe:	0020      	movs	r0, r4
   18a00:	f000 fe18 	bl	19634 <_calloc_r>
   18a04:	64e0      	str	r0, [r4, #76]	; 0x4c
   18a06:	2800      	cmp	r0, #0
   18a08:	d1ec      	bne.n	189e4 <_Balloc+0xc>
   18a0a:	2000      	movs	r0, #0
   18a0c:	e7f4      	b.n	189f8 <_Balloc+0x20>
   18a0e:	2601      	movs	r6, #1
   18a10:	40ae      	lsls	r6, r5
   18a12:	1d72      	adds	r2, r6, #5
   18a14:	0092      	lsls	r2, r2, #2
   18a16:	2101      	movs	r1, #1
   18a18:	0020      	movs	r0, r4
   18a1a:	f000 fe0b 	bl	19634 <_calloc_r>
   18a1e:	2800      	cmp	r0, #0
   18a20:	d0f3      	beq.n	18a0a <_Balloc+0x32>
   18a22:	6045      	str	r5, [r0, #4]
   18a24:	6086      	str	r6, [r0, #8]
   18a26:	e7e4      	b.n	189f2 <_Balloc+0x1a>

00018a28 <_Bfree>:
   18a28:	2900      	cmp	r1, #0
   18a2a:	d006      	beq.n	18a3a <_Bfree+0x12>
   18a2c:	684b      	ldr	r3, [r1, #4]
   18a2e:	009a      	lsls	r2, r3, #2
   18a30:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   18a32:	189b      	adds	r3, r3, r2
   18a34:	681a      	ldr	r2, [r3, #0]
   18a36:	600a      	str	r2, [r1, #0]
   18a38:	6019      	str	r1, [r3, #0]
   18a3a:	4770      	bx	lr

00018a3c <__multadd>:
   18a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18a3e:	46ce      	mov	lr, r9
   18a40:	4647      	mov	r7, r8
   18a42:	4681      	mov	r9, r0
   18a44:	0008      	movs	r0, r1
   18a46:	b580      	push	{r7, lr}
   18a48:	000d      	movs	r5, r1
   18a4a:	690c      	ldr	r4, [r1, #16]
   18a4c:	001f      	movs	r7, r3
   18a4e:	2100      	movs	r1, #0
   18a50:	3014      	adds	r0, #20
   18a52:	6803      	ldr	r3, [r0, #0]
   18a54:	3101      	adds	r1, #1
   18a56:	041e      	lsls	r6, r3, #16
   18a58:	0c36      	lsrs	r6, r6, #16
   18a5a:	4356      	muls	r6, r2
   18a5c:	0c1b      	lsrs	r3, r3, #16
   18a5e:	4353      	muls	r3, r2
   18a60:	19f6      	adds	r6, r6, r7
   18a62:	0c37      	lsrs	r7, r6, #16
   18a64:	19db      	adds	r3, r3, r7
   18a66:	0436      	lsls	r6, r6, #16
   18a68:	0c1f      	lsrs	r7, r3, #16
   18a6a:	0c36      	lsrs	r6, r6, #16
   18a6c:	041b      	lsls	r3, r3, #16
   18a6e:	199b      	adds	r3, r3, r6
   18a70:	c008      	stmia	r0!, {r3}
   18a72:	428c      	cmp	r4, r1
   18a74:	dced      	bgt.n	18a52 <__multadd+0x16>
   18a76:	2f00      	cmp	r7, #0
   18a78:	d008      	beq.n	18a8c <__multadd+0x50>
   18a7a:	68ab      	ldr	r3, [r5, #8]
   18a7c:	429c      	cmp	r4, r3
   18a7e:	da0a      	bge.n	18a96 <__multadd+0x5a>
   18a80:	1d23      	adds	r3, r4, #4
   18a82:	009b      	lsls	r3, r3, #2
   18a84:	18eb      	adds	r3, r5, r3
   18a86:	3401      	adds	r4, #1
   18a88:	605f      	str	r7, [r3, #4]
   18a8a:	612c      	str	r4, [r5, #16]
   18a8c:	0028      	movs	r0, r5
   18a8e:	bc0c      	pop	{r2, r3}
   18a90:	4690      	mov	r8, r2
   18a92:	4699      	mov	r9, r3
   18a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18a96:	686b      	ldr	r3, [r5, #4]
   18a98:	4648      	mov	r0, r9
   18a9a:	1c59      	adds	r1, r3, #1
   18a9c:	f7ff ff9c 	bl	189d8 <_Balloc>
   18aa0:	0029      	movs	r1, r5
   18aa2:	692b      	ldr	r3, [r5, #16]
   18aa4:	4680      	mov	r8, r0
   18aa6:	1c9a      	adds	r2, r3, #2
   18aa8:	0092      	lsls	r2, r2, #2
   18aaa:	310c      	adds	r1, #12
   18aac:	300c      	adds	r0, #12
   18aae:	f7fc fb5d 	bl	1516c <memcpy>
   18ab2:	686b      	ldr	r3, [r5, #4]
   18ab4:	009a      	lsls	r2, r3, #2
   18ab6:	464b      	mov	r3, r9
   18ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   18aba:	189b      	adds	r3, r3, r2
   18abc:	681a      	ldr	r2, [r3, #0]
   18abe:	602a      	str	r2, [r5, #0]
   18ac0:	601d      	str	r5, [r3, #0]
   18ac2:	4645      	mov	r5, r8
   18ac4:	e7dc      	b.n	18a80 <__multadd+0x44>
   18ac6:	46c0      	nop			; (mov r8, r8)

00018ac8 <__hi0bits>:
   18ac8:	0003      	movs	r3, r0
   18aca:	0c02      	lsrs	r2, r0, #16
   18acc:	2000      	movs	r0, #0
   18ace:	2a00      	cmp	r2, #0
   18ad0:	d101      	bne.n	18ad6 <__hi0bits+0xe>
   18ad2:	041b      	lsls	r3, r3, #16
   18ad4:	3010      	adds	r0, #16
   18ad6:	0e1a      	lsrs	r2, r3, #24
   18ad8:	d101      	bne.n	18ade <__hi0bits+0x16>
   18ada:	3008      	adds	r0, #8
   18adc:	021b      	lsls	r3, r3, #8
   18ade:	0f1a      	lsrs	r2, r3, #28
   18ae0:	d101      	bne.n	18ae6 <__hi0bits+0x1e>
   18ae2:	3004      	adds	r0, #4
   18ae4:	011b      	lsls	r3, r3, #4
   18ae6:	0f9a      	lsrs	r2, r3, #30
   18ae8:	d101      	bne.n	18aee <__hi0bits+0x26>
   18aea:	3002      	adds	r0, #2
   18aec:	009b      	lsls	r3, r3, #2
   18aee:	2b00      	cmp	r3, #0
   18af0:	db03      	blt.n	18afa <__hi0bits+0x32>
   18af2:	3001      	adds	r0, #1
   18af4:	005b      	lsls	r3, r3, #1
   18af6:	d400      	bmi.n	18afa <__hi0bits+0x32>
   18af8:	2020      	movs	r0, #32
   18afa:	4770      	bx	lr

00018afc <__lo0bits>:
   18afc:	6803      	ldr	r3, [r0, #0]
   18afe:	075a      	lsls	r2, r3, #29
   18b00:	d009      	beq.n	18b16 <__lo0bits+0x1a>
   18b02:	2200      	movs	r2, #0
   18b04:	07d9      	lsls	r1, r3, #31
   18b06:	d404      	bmi.n	18b12 <__lo0bits+0x16>
   18b08:	079a      	lsls	r2, r3, #30
   18b0a:	d420      	bmi.n	18b4e <__lo0bits+0x52>
   18b0c:	2202      	movs	r2, #2
   18b0e:	089b      	lsrs	r3, r3, #2
   18b10:	6003      	str	r3, [r0, #0]
   18b12:	0010      	movs	r0, r2
   18b14:	4770      	bx	lr
   18b16:	0419      	lsls	r1, r3, #16
   18b18:	2200      	movs	r2, #0
   18b1a:	2900      	cmp	r1, #0
   18b1c:	d101      	bne.n	18b22 <__lo0bits+0x26>
   18b1e:	0c1b      	lsrs	r3, r3, #16
   18b20:	3210      	adds	r2, #16
   18b22:	21ff      	movs	r1, #255	; 0xff
   18b24:	4219      	tst	r1, r3
   18b26:	d101      	bne.n	18b2c <__lo0bits+0x30>
   18b28:	3208      	adds	r2, #8
   18b2a:	0a1b      	lsrs	r3, r3, #8
   18b2c:	0719      	lsls	r1, r3, #28
   18b2e:	d101      	bne.n	18b34 <__lo0bits+0x38>
   18b30:	3204      	adds	r2, #4
   18b32:	091b      	lsrs	r3, r3, #4
   18b34:	0799      	lsls	r1, r3, #30
   18b36:	d101      	bne.n	18b3c <__lo0bits+0x40>
   18b38:	3202      	adds	r2, #2
   18b3a:	089b      	lsrs	r3, r3, #2
   18b3c:	07d9      	lsls	r1, r3, #31
   18b3e:	d404      	bmi.n	18b4a <__lo0bits+0x4e>
   18b40:	085b      	lsrs	r3, r3, #1
   18b42:	d101      	bne.n	18b48 <__lo0bits+0x4c>
   18b44:	2220      	movs	r2, #32
   18b46:	e7e4      	b.n	18b12 <__lo0bits+0x16>
   18b48:	3201      	adds	r2, #1
   18b4a:	6003      	str	r3, [r0, #0]
   18b4c:	e7e1      	b.n	18b12 <__lo0bits+0x16>
   18b4e:	085b      	lsrs	r3, r3, #1
   18b50:	6003      	str	r3, [r0, #0]
   18b52:	2201      	movs	r2, #1
   18b54:	e7dd      	b.n	18b12 <__lo0bits+0x16>
   18b56:	46c0      	nop			; (mov r8, r8)

00018b58 <__i2b>:
   18b58:	b510      	push	{r4, lr}
   18b5a:	000c      	movs	r4, r1
   18b5c:	2101      	movs	r1, #1
   18b5e:	f7ff ff3b 	bl	189d8 <_Balloc>
   18b62:	2301      	movs	r3, #1
   18b64:	6144      	str	r4, [r0, #20]
   18b66:	6103      	str	r3, [r0, #16]
   18b68:	bd10      	pop	{r4, pc}
   18b6a:	46c0      	nop			; (mov r8, r8)

00018b6c <__multiply>:
   18b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   18b6e:	4657      	mov	r7, sl
   18b70:	464e      	mov	r6, r9
   18b72:	4645      	mov	r5, r8
   18b74:	46de      	mov	lr, fp
   18b76:	b5e0      	push	{r5, r6, r7, lr}
   18b78:	6914      	ldr	r4, [r2, #16]
   18b7a:	690e      	ldr	r6, [r1, #16]
   18b7c:	b085      	sub	sp, #20
   18b7e:	000f      	movs	r7, r1
   18b80:	0015      	movs	r5, r2
   18b82:	42a6      	cmp	r6, r4
   18b84:	da04      	bge.n	18b90 <__multiply+0x24>
   18b86:	0033      	movs	r3, r6
   18b88:	0017      	movs	r7, r2
   18b8a:	0026      	movs	r6, r4
   18b8c:	000d      	movs	r5, r1
   18b8e:	001c      	movs	r4, r3
   18b90:	1933      	adds	r3, r6, r4
   18b92:	4698      	mov	r8, r3
   18b94:	68bb      	ldr	r3, [r7, #8]
   18b96:	6879      	ldr	r1, [r7, #4]
   18b98:	4598      	cmp	r8, r3
   18b9a:	dd00      	ble.n	18b9e <__multiply+0x32>
   18b9c:	3101      	adds	r1, #1
   18b9e:	f7ff ff1b 	bl	189d8 <_Balloc>
   18ba2:	2214      	movs	r2, #20
   18ba4:	0003      	movs	r3, r0
   18ba6:	4694      	mov	ip, r2
   18ba8:	4463      	add	r3, ip
   18baa:	469b      	mov	fp, r3
   18bac:	4643      	mov	r3, r8
   18bae:	009b      	lsls	r3, r3, #2
   18bb0:	445b      	add	r3, fp
   18bb2:	0019      	movs	r1, r3
   18bb4:	9302      	str	r3, [sp, #8]
   18bb6:	9003      	str	r0, [sp, #12]
   18bb8:	465b      	mov	r3, fp
   18bba:	2200      	movs	r2, #0
   18bbc:	458b      	cmp	fp, r1
   18bbe:	d203      	bcs.n	18bc8 <__multiply+0x5c>
   18bc0:	9902      	ldr	r1, [sp, #8]
   18bc2:	c304      	stmia	r3!, {r2}
   18bc4:	4299      	cmp	r1, r3
   18bc6:	d8fc      	bhi.n	18bc2 <__multiply+0x56>
   18bc8:	2314      	movs	r3, #20
   18bca:	00a4      	lsls	r4, r4, #2
   18bcc:	469a      	mov	sl, r3
   18bce:	3714      	adds	r7, #20
   18bd0:	0023      	movs	r3, r4
   18bd2:	46bc      	mov	ip, r7
   18bd4:	44aa      	add	sl, r5
   18bd6:	00b6      	lsls	r6, r6, #2
   18bd8:	4453      	add	r3, sl
   18bda:	9700      	str	r7, [sp, #0]
   18bdc:	44b4      	add	ip, r6
   18bde:	9301      	str	r3, [sp, #4]
   18be0:	459a      	cmp	sl, r3
   18be2:	d24f      	bcs.n	18c84 <__multiply+0x118>
   18be4:	4653      	mov	r3, sl
   18be6:	681b      	ldr	r3, [r3, #0]
   18be8:	041e      	lsls	r6, r3, #16
   18bea:	0c36      	lsrs	r6, r6, #16
   18bec:	d020      	beq.n	18c30 <__multiply+0xc4>
   18bee:	465c      	mov	r4, fp
   18bf0:	2700      	movs	r7, #0
   18bf2:	9d00      	ldr	r5, [sp, #0]
   18bf4:	0021      	movs	r1, r4
   18bf6:	cc08      	ldmia	r4!, {r3}
   18bf8:	cd04      	ldmia	r5!, {r2}
   18bfa:	4699      	mov	r9, r3
   18bfc:	4648      	mov	r0, r9
   18bfe:	0413      	lsls	r3, r2, #16
   18c00:	0c1b      	lsrs	r3, r3, #16
   18c02:	4373      	muls	r3, r6
   18c04:	0400      	lsls	r0, r0, #16
   18c06:	0c00      	lsrs	r0, r0, #16
   18c08:	181b      	adds	r3, r3, r0
   18c0a:	19d8      	adds	r0, r3, r7
   18c0c:	0c13      	lsrs	r3, r2, #16
   18c0e:	464a      	mov	r2, r9
   18c10:	4373      	muls	r3, r6
   18c12:	0c12      	lsrs	r2, r2, #16
   18c14:	189b      	adds	r3, r3, r2
   18c16:	0c02      	lsrs	r2, r0, #16
   18c18:	189b      	adds	r3, r3, r2
   18c1a:	0402      	lsls	r2, r0, #16
   18c1c:	0c1f      	lsrs	r7, r3, #16
   18c1e:	0c12      	lsrs	r2, r2, #16
   18c20:	041b      	lsls	r3, r3, #16
   18c22:	4313      	orrs	r3, r2
   18c24:	600b      	str	r3, [r1, #0]
   18c26:	45ac      	cmp	ip, r5
   18c28:	d8e4      	bhi.n	18bf4 <__multiply+0x88>
   18c2a:	4653      	mov	r3, sl
   18c2c:	6027      	str	r7, [r4, #0]
   18c2e:	681b      	ldr	r3, [r3, #0]
   18c30:	0c1e      	lsrs	r6, r3, #16
   18c32:	d020      	beq.n	18c76 <__multiply+0x10a>
   18c34:	465b      	mov	r3, fp
   18c36:	2100      	movs	r1, #0
   18c38:	681b      	ldr	r3, [r3, #0]
   18c3a:	465c      	mov	r4, fp
   18c3c:	0018      	movs	r0, r3
   18c3e:	000f      	movs	r7, r1
   18c40:	4662      	mov	r2, ip
   18c42:	9d00      	ldr	r5, [sp, #0]
   18c44:	8829      	ldrh	r1, [r5, #0]
   18c46:	0c00      	lsrs	r0, r0, #16
   18c48:	4371      	muls	r1, r6
   18c4a:	1809      	adds	r1, r1, r0
   18c4c:	19c9      	adds	r1, r1, r7
   18c4e:	041b      	lsls	r3, r3, #16
   18c50:	0408      	lsls	r0, r1, #16
   18c52:	0c1b      	lsrs	r3, r3, #16
   18c54:	4303      	orrs	r3, r0
   18c56:	6023      	str	r3, [r4, #0]
   18c58:	cd08      	ldmia	r5!, {r3}
   18c5a:	6860      	ldr	r0, [r4, #4]
   18c5c:	0c1b      	lsrs	r3, r3, #16
   18c5e:	4373      	muls	r3, r6
   18c60:	0407      	lsls	r7, r0, #16
   18c62:	0c3f      	lsrs	r7, r7, #16
   18c64:	19db      	adds	r3, r3, r7
   18c66:	0c09      	lsrs	r1, r1, #16
   18c68:	185b      	adds	r3, r3, r1
   18c6a:	0c1f      	lsrs	r7, r3, #16
   18c6c:	3404      	adds	r4, #4
   18c6e:	42aa      	cmp	r2, r5
   18c70:	d8e8      	bhi.n	18c44 <__multiply+0xd8>
   18c72:	4694      	mov	ip, r2
   18c74:	6023      	str	r3, [r4, #0]
   18c76:	2304      	movs	r3, #4
   18c78:	4699      	mov	r9, r3
   18c7a:	9b01      	ldr	r3, [sp, #4]
   18c7c:	44ca      	add	sl, r9
   18c7e:	44cb      	add	fp, r9
   18c80:	4553      	cmp	r3, sl
   18c82:	d8af      	bhi.n	18be4 <__multiply+0x78>
   18c84:	4643      	mov	r3, r8
   18c86:	2b00      	cmp	r3, #0
   18c88:	dd0e      	ble.n	18ca8 <__multiply+0x13c>
   18c8a:	9b02      	ldr	r3, [sp, #8]
   18c8c:	3b04      	subs	r3, #4
   18c8e:	681a      	ldr	r2, [r3, #0]
   18c90:	2a00      	cmp	r2, #0
   18c92:	d109      	bne.n	18ca8 <__multiply+0x13c>
   18c94:	4642      	mov	r2, r8
   18c96:	e003      	b.n	18ca0 <__multiply+0x134>
   18c98:	3b04      	subs	r3, #4
   18c9a:	6819      	ldr	r1, [r3, #0]
   18c9c:	2900      	cmp	r1, #0
   18c9e:	d102      	bne.n	18ca6 <__multiply+0x13a>
   18ca0:	3a01      	subs	r2, #1
   18ca2:	2a00      	cmp	r2, #0
   18ca4:	d1f8      	bne.n	18c98 <__multiply+0x12c>
   18ca6:	4690      	mov	r8, r2
   18ca8:	9b03      	ldr	r3, [sp, #12]
   18caa:	4642      	mov	r2, r8
   18cac:	0018      	movs	r0, r3
   18cae:	611a      	str	r2, [r3, #16]
   18cb0:	b005      	add	sp, #20
   18cb2:	bc3c      	pop	{r2, r3, r4, r5}
   18cb4:	4690      	mov	r8, r2
   18cb6:	4699      	mov	r9, r3
   18cb8:	46a2      	mov	sl, r4
   18cba:	46ab      	mov	fp, r5
   18cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18cbe:	46c0      	nop			; (mov r8, r8)

00018cc0 <__pow5mult>:
   18cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18cc2:	4647      	mov	r7, r8
   18cc4:	46ce      	mov	lr, r9
   18cc6:	2303      	movs	r3, #3
   18cc8:	b580      	push	{r7, lr}
   18cca:	4680      	mov	r8, r0
   18ccc:	000f      	movs	r7, r1
   18cce:	0014      	movs	r4, r2
   18cd0:	4013      	ands	r3, r2
   18cd2:	d13a      	bne.n	18d4a <__pow5mult+0x8a>
   18cd4:	10a4      	asrs	r4, r4, #2
   18cd6:	003e      	movs	r6, r7
   18cd8:	2c00      	cmp	r4, #0
   18cda:	d025      	beq.n	18d28 <__pow5mult+0x68>
   18cdc:	4643      	mov	r3, r8
   18cde:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   18ce0:	2d00      	cmp	r5, #0
   18ce2:	d03b      	beq.n	18d5c <__pow5mult+0x9c>
   18ce4:	003e      	movs	r6, r7
   18ce6:	2300      	movs	r3, #0
   18ce8:	2701      	movs	r7, #1
   18cea:	4699      	mov	r9, r3
   18cec:	4227      	tst	r7, r4
   18cee:	d107      	bne.n	18d00 <__pow5mult+0x40>
   18cf0:	1064      	asrs	r4, r4, #1
   18cf2:	d019      	beq.n	18d28 <__pow5mult+0x68>
   18cf4:	6828      	ldr	r0, [r5, #0]
   18cf6:	2800      	cmp	r0, #0
   18cf8:	d01b      	beq.n	18d32 <__pow5mult+0x72>
   18cfa:	0005      	movs	r5, r0
   18cfc:	4227      	tst	r7, r4
   18cfe:	d0f7      	beq.n	18cf0 <__pow5mult+0x30>
   18d00:	002a      	movs	r2, r5
   18d02:	0031      	movs	r1, r6
   18d04:	4640      	mov	r0, r8
   18d06:	f7ff ff31 	bl	18b6c <__multiply>
   18d0a:	2e00      	cmp	r6, #0
   18d0c:	d01b      	beq.n	18d46 <__pow5mult+0x86>
   18d0e:	4642      	mov	r2, r8
   18d10:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   18d12:	6873      	ldr	r3, [r6, #4]
   18d14:	4694      	mov	ip, r2
   18d16:	009b      	lsls	r3, r3, #2
   18d18:	4463      	add	r3, ip
   18d1a:	681a      	ldr	r2, [r3, #0]
   18d1c:	1064      	asrs	r4, r4, #1
   18d1e:	6032      	str	r2, [r6, #0]
   18d20:	601e      	str	r6, [r3, #0]
   18d22:	0006      	movs	r6, r0
   18d24:	2c00      	cmp	r4, #0
   18d26:	d1e5      	bne.n	18cf4 <__pow5mult+0x34>
   18d28:	0030      	movs	r0, r6
   18d2a:	bc0c      	pop	{r2, r3}
   18d2c:	4690      	mov	r8, r2
   18d2e:	4699      	mov	r9, r3
   18d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18d32:	002a      	movs	r2, r5
   18d34:	0029      	movs	r1, r5
   18d36:	4640      	mov	r0, r8
   18d38:	f7ff ff18 	bl	18b6c <__multiply>
   18d3c:	464b      	mov	r3, r9
   18d3e:	6028      	str	r0, [r5, #0]
   18d40:	6003      	str	r3, [r0, #0]
   18d42:	0005      	movs	r5, r0
   18d44:	e7da      	b.n	18cfc <__pow5mult+0x3c>
   18d46:	0006      	movs	r6, r0
   18d48:	e7d2      	b.n	18cf0 <__pow5mult+0x30>
   18d4a:	4a0b      	ldr	r2, [pc, #44]	; (18d78 <__pow5mult+0xb8>)
   18d4c:	3b01      	subs	r3, #1
   18d4e:	009b      	lsls	r3, r3, #2
   18d50:	589a      	ldr	r2, [r3, r2]
   18d52:	2300      	movs	r3, #0
   18d54:	f7ff fe72 	bl	18a3c <__multadd>
   18d58:	0007      	movs	r7, r0
   18d5a:	e7bb      	b.n	18cd4 <__pow5mult+0x14>
   18d5c:	2101      	movs	r1, #1
   18d5e:	4640      	mov	r0, r8
   18d60:	f7ff fe3a 	bl	189d8 <_Balloc>
   18d64:	4b05      	ldr	r3, [pc, #20]	; (18d7c <__pow5mult+0xbc>)
   18d66:	0005      	movs	r5, r0
   18d68:	6143      	str	r3, [r0, #20]
   18d6a:	2301      	movs	r3, #1
   18d6c:	6103      	str	r3, [r0, #16]
   18d6e:	4643      	mov	r3, r8
   18d70:	6498      	str	r0, [r3, #72]	; 0x48
   18d72:	2300      	movs	r3, #0
   18d74:	6003      	str	r3, [r0, #0]
   18d76:	e7b5      	b.n	18ce4 <__pow5mult+0x24>
   18d78:	0001b538 	.word	0x0001b538
   18d7c:	00000271 	.word	0x00000271

00018d80 <__lshift>:
   18d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18d82:	464e      	mov	r6, r9
   18d84:	4645      	mov	r5, r8
   18d86:	46de      	mov	lr, fp
   18d88:	4657      	mov	r7, sl
   18d8a:	b5e0      	push	{r5, r6, r7, lr}
   18d8c:	000e      	movs	r6, r1
   18d8e:	6933      	ldr	r3, [r6, #16]
   18d90:	1154      	asrs	r4, r2, #5
   18d92:	4698      	mov	r8, r3
   18d94:	44a0      	add	r8, r4
   18d96:	4643      	mov	r3, r8
   18d98:	1c5d      	adds	r5, r3, #1
   18d9a:	68b3      	ldr	r3, [r6, #8]
   18d9c:	4683      	mov	fp, r0
   18d9e:	4691      	mov	r9, r2
   18da0:	6849      	ldr	r1, [r1, #4]
   18da2:	429d      	cmp	r5, r3
   18da4:	dd03      	ble.n	18dae <__lshift+0x2e>
   18da6:	3101      	adds	r1, #1
   18da8:	005b      	lsls	r3, r3, #1
   18daa:	429d      	cmp	r5, r3
   18dac:	dcfb      	bgt.n	18da6 <__lshift+0x26>
   18dae:	4658      	mov	r0, fp
   18db0:	f7ff fe12 	bl	189d8 <_Balloc>
   18db4:	0003      	movs	r3, r0
   18db6:	4684      	mov	ip, r0
   18db8:	3314      	adds	r3, #20
   18dba:	2c00      	cmp	r4, #0
   18dbc:	dd06      	ble.n	18dcc <__lshift+0x4c>
   18dbe:	2100      	movs	r1, #0
   18dc0:	00a4      	lsls	r4, r4, #2
   18dc2:	001a      	movs	r2, r3
   18dc4:	191b      	adds	r3, r3, r4
   18dc6:	c202      	stmia	r2!, {r1}
   18dc8:	4293      	cmp	r3, r2
   18dca:	d1fc      	bne.n	18dc6 <__lshift+0x46>
   18dcc:	6932      	ldr	r2, [r6, #16]
   18dce:	4648      	mov	r0, r9
   18dd0:	0097      	lsls	r7, r2, #2
   18dd2:	0031      	movs	r1, r6
   18dd4:	221f      	movs	r2, #31
   18dd6:	3114      	adds	r1, #20
   18dd8:	4010      	ands	r0, r2
   18dda:	19cf      	adds	r7, r1, r7
   18ddc:	4681      	mov	r9, r0
   18dde:	2800      	cmp	r0, #0
   18de0:	d025      	beq.n	18e2e <__lshift+0xae>
   18de2:	2220      	movs	r2, #32
   18de4:	1a12      	subs	r2, r2, r0
   18de6:	4692      	mov	sl, r2
   18de8:	2200      	movs	r2, #0
   18dea:	4648      	mov	r0, r9
   18dec:	680c      	ldr	r4, [r1, #0]
   18dee:	4084      	lsls	r4, r0
   18df0:	4650      	mov	r0, sl
   18df2:	4314      	orrs	r4, r2
   18df4:	601c      	str	r4, [r3, #0]
   18df6:	c904      	ldmia	r1!, {r2}
   18df8:	3304      	adds	r3, #4
   18dfa:	40c2      	lsrs	r2, r0
   18dfc:	428f      	cmp	r7, r1
   18dfe:	d8f4      	bhi.n	18dea <__lshift+0x6a>
   18e00:	601a      	str	r2, [r3, #0]
   18e02:	2a00      	cmp	r2, #0
   18e04:	d001      	beq.n	18e0a <__lshift+0x8a>
   18e06:	4645      	mov	r5, r8
   18e08:	3502      	adds	r5, #2
   18e0a:	4663      	mov	r3, ip
   18e0c:	3d01      	subs	r5, #1
   18e0e:	611d      	str	r5, [r3, #16]
   18e10:	6873      	ldr	r3, [r6, #4]
   18e12:	4660      	mov	r0, ip
   18e14:	009a      	lsls	r2, r3, #2
   18e16:	465b      	mov	r3, fp
   18e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   18e1a:	189b      	adds	r3, r3, r2
   18e1c:	681a      	ldr	r2, [r3, #0]
   18e1e:	6032      	str	r2, [r6, #0]
   18e20:	601e      	str	r6, [r3, #0]
   18e22:	bc3c      	pop	{r2, r3, r4, r5}
   18e24:	4690      	mov	r8, r2
   18e26:	4699      	mov	r9, r3
   18e28:	46a2      	mov	sl, r4
   18e2a:	46ab      	mov	fp, r5
   18e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18e2e:	c904      	ldmia	r1!, {r2}
   18e30:	c304      	stmia	r3!, {r2}
   18e32:	428f      	cmp	r7, r1
   18e34:	d9e9      	bls.n	18e0a <__lshift+0x8a>
   18e36:	c904      	ldmia	r1!, {r2}
   18e38:	c304      	stmia	r3!, {r2}
   18e3a:	428f      	cmp	r7, r1
   18e3c:	d8f7      	bhi.n	18e2e <__lshift+0xae>
   18e3e:	e7e4      	b.n	18e0a <__lshift+0x8a>

00018e40 <__mcmp>:
   18e40:	690a      	ldr	r2, [r1, #16]
   18e42:	6903      	ldr	r3, [r0, #16]
   18e44:	b530      	push	{r4, r5, lr}
   18e46:	0005      	movs	r5, r0
   18e48:	1a98      	subs	r0, r3, r2
   18e4a:	d111      	bne.n	18e70 <__mcmp+0x30>
   18e4c:	0092      	lsls	r2, r2, #2
   18e4e:	3514      	adds	r5, #20
   18e50:	3114      	adds	r1, #20
   18e52:	18ab      	adds	r3, r5, r2
   18e54:	1889      	adds	r1, r1, r2
   18e56:	e001      	b.n	18e5c <__mcmp+0x1c>
   18e58:	429d      	cmp	r5, r3
   18e5a:	d209      	bcs.n	18e70 <__mcmp+0x30>
   18e5c:	3b04      	subs	r3, #4
   18e5e:	3904      	subs	r1, #4
   18e60:	681c      	ldr	r4, [r3, #0]
   18e62:	680a      	ldr	r2, [r1, #0]
   18e64:	4294      	cmp	r4, r2
   18e66:	d0f7      	beq.n	18e58 <__mcmp+0x18>
   18e68:	4294      	cmp	r4, r2
   18e6a:	4180      	sbcs	r0, r0
   18e6c:	2201      	movs	r2, #1
   18e6e:	4310      	orrs	r0, r2
   18e70:	bd30      	pop	{r4, r5, pc}
   18e72:	46c0      	nop			; (mov r8, r8)

00018e74 <__mdiff>:
   18e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18e76:	4645      	mov	r5, r8
   18e78:	46de      	mov	lr, fp
   18e7a:	4657      	mov	r7, sl
   18e7c:	464e      	mov	r6, r9
   18e7e:	0014      	movs	r4, r2
   18e80:	690b      	ldr	r3, [r1, #16]
   18e82:	6912      	ldr	r2, [r2, #16]
   18e84:	b5e0      	push	{r5, r6, r7, lr}
   18e86:	4688      	mov	r8, r1
   18e88:	1a9d      	subs	r5, r3, r2
   18e8a:	d11a      	bne.n	18ec2 <__mdiff+0x4e>
   18e8c:	000f      	movs	r7, r1
   18e8e:	2114      	movs	r1, #20
   18e90:	468c      	mov	ip, r1
   18e92:	0092      	lsls	r2, r2, #2
   18e94:	3714      	adds	r7, #20
   18e96:	44a4      	add	ip, r4
   18e98:	18bb      	adds	r3, r7, r2
   18e9a:	4462      	add	r2, ip
   18e9c:	e002      	b.n	18ea4 <__mdiff+0x30>
   18e9e:	429f      	cmp	r7, r3
   18ea0:	d300      	bcc.n	18ea4 <__mdiff+0x30>
   18ea2:	e070      	b.n	18f86 <__mdiff+0x112>
   18ea4:	3b04      	subs	r3, #4
   18ea6:	3a04      	subs	r2, #4
   18ea8:	681e      	ldr	r6, [r3, #0]
   18eaa:	6811      	ldr	r1, [r2, #0]
   18eac:	428e      	cmp	r6, r1
   18eae:	d0f6      	beq.n	18e9e <__mdiff+0x2a>
   18eb0:	d300      	bcc.n	18eb4 <__mdiff+0x40>
   18eb2:	e071      	b.n	18f98 <__mdiff+0x124>
   18eb4:	4643      	mov	r3, r8
   18eb6:	003e      	movs	r6, r7
   18eb8:	46a0      	mov	r8, r4
   18eba:	4667      	mov	r7, ip
   18ebc:	001c      	movs	r4, r3
   18ebe:	2501      	movs	r5, #1
   18ec0:	e006      	b.n	18ed0 <__mdiff+0x5c>
   18ec2:	2d00      	cmp	r5, #0
   18ec4:	db6a      	blt.n	18f9c <__mdiff+0x128>
   18ec6:	4647      	mov	r7, r8
   18ec8:	0026      	movs	r6, r4
   18eca:	2500      	movs	r5, #0
   18ecc:	3714      	adds	r7, #20
   18ece:	3614      	adds	r6, #20
   18ed0:	4643      	mov	r3, r8
   18ed2:	6859      	ldr	r1, [r3, #4]
   18ed4:	f7ff fd80 	bl	189d8 <_Balloc>
   18ed8:	4643      	mov	r3, r8
   18eda:	4681      	mov	r9, r0
   18edc:	60c5      	str	r5, [r0, #12]
   18ede:	6918      	ldr	r0, [r3, #16]
   18ee0:	464d      	mov	r5, r9
   18ee2:	0083      	lsls	r3, r0, #2
   18ee4:	469c      	mov	ip, r3
   18ee6:	6923      	ldr	r3, [r4, #16]
   18ee8:	44bc      	add	ip, r7
   18eea:	009b      	lsls	r3, r3, #2
   18eec:	4698      	mov	r8, r3
   18eee:	2300      	movs	r3, #0
   18ef0:	44b0      	add	r8, r6
   18ef2:	3514      	adds	r5, #20
   18ef4:	469a      	mov	sl, r3
   18ef6:	e000      	b.n	18efa <__mdiff+0x86>
   18ef8:	0027      	movs	r7, r4
   18efa:	ce04      	ldmia	r6!, {r2}
   18efc:	003c      	movs	r4, r7
   18efe:	4693      	mov	fp, r2
   18f00:	4659      	mov	r1, fp
   18f02:	cc08      	ldmia	r4!, {r3}
   18f04:	0409      	lsls	r1, r1, #16
   18f06:	041a      	lsls	r2, r3, #16
   18f08:	0c12      	lsrs	r2, r2, #16
   18f0a:	4452      	add	r2, sl
   18f0c:	0c09      	lsrs	r1, r1, #16
   18f0e:	1a52      	subs	r2, r2, r1
   18f10:	0c19      	lsrs	r1, r3, #16
   18f12:	465b      	mov	r3, fp
   18f14:	0c1b      	lsrs	r3, r3, #16
   18f16:	1acb      	subs	r3, r1, r3
   18f18:	1411      	asrs	r1, r2, #16
   18f1a:	185b      	adds	r3, r3, r1
   18f1c:	0412      	lsls	r2, r2, #16
   18f1e:	1419      	asrs	r1, r3, #16
   18f20:	0c12      	lsrs	r2, r2, #16
   18f22:	041b      	lsls	r3, r3, #16
   18f24:	468a      	mov	sl, r1
   18f26:	4313      	orrs	r3, r2
   18f28:	1d29      	adds	r1, r5, #4
   18f2a:	602b      	str	r3, [r5, #0]
   18f2c:	000d      	movs	r5, r1
   18f2e:	45b0      	cmp	r8, r6
   18f30:	d8e2      	bhi.n	18ef8 <__mdiff+0x84>
   18f32:	45a4      	cmp	ip, r4
   18f34:	d916      	bls.n	18f64 <__mdiff+0xf0>
   18f36:	cc08      	ldmia	r4!, {r3}
   18f38:	041a      	lsls	r2, r3, #16
   18f3a:	0c12      	lsrs	r2, r2, #16
   18f3c:	4452      	add	r2, sl
   18f3e:	1416      	asrs	r6, r2, #16
   18f40:	0c1b      	lsrs	r3, r3, #16
   18f42:	199b      	adds	r3, r3, r6
   18f44:	0412      	lsls	r2, r2, #16
   18f46:	141e      	asrs	r6, r3, #16
   18f48:	0c12      	lsrs	r2, r2, #16
   18f4a:	041b      	lsls	r3, r3, #16
   18f4c:	4313      	orrs	r3, r2
   18f4e:	46b2      	mov	sl, r6
   18f50:	c508      	stmia	r5!, {r3}
   18f52:	45a4      	cmp	ip, r4
   18f54:	d8ef      	bhi.n	18f36 <__mdiff+0xc2>
   18f56:	4662      	mov	r2, ip
   18f58:	2403      	movs	r4, #3
   18f5a:	1bd2      	subs	r2, r2, r7
   18f5c:	3a05      	subs	r2, #5
   18f5e:	43a2      	bics	r2, r4
   18f60:	3204      	adds	r2, #4
   18f62:	1889      	adds	r1, r1, r2
   18f64:	3904      	subs	r1, #4
   18f66:	2b00      	cmp	r3, #0
   18f68:	d104      	bne.n	18f74 <__mdiff+0x100>
   18f6a:	3904      	subs	r1, #4
   18f6c:	680b      	ldr	r3, [r1, #0]
   18f6e:	3801      	subs	r0, #1
   18f70:	2b00      	cmp	r3, #0
   18f72:	d0fa      	beq.n	18f6a <__mdiff+0xf6>
   18f74:	464b      	mov	r3, r9
   18f76:	6118      	str	r0, [r3, #16]
   18f78:	4648      	mov	r0, r9
   18f7a:	bc3c      	pop	{r2, r3, r4, r5}
   18f7c:	4690      	mov	r8, r2
   18f7e:	4699      	mov	r9, r3
   18f80:	46a2      	mov	sl, r4
   18f82:	46ab      	mov	fp, r5
   18f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18f86:	2100      	movs	r1, #0
   18f88:	f7ff fd26 	bl	189d8 <_Balloc>
   18f8c:	2301      	movs	r3, #1
   18f8e:	6103      	str	r3, [r0, #16]
   18f90:	2300      	movs	r3, #0
   18f92:	4681      	mov	r9, r0
   18f94:	6143      	str	r3, [r0, #20]
   18f96:	e7ef      	b.n	18f78 <__mdiff+0x104>
   18f98:	4666      	mov	r6, ip
   18f9a:	e799      	b.n	18ed0 <__mdiff+0x5c>
   18f9c:	0027      	movs	r7, r4
   18f9e:	000e      	movs	r6, r1
   18fa0:	46a0      	mov	r8, r4
   18fa2:	3714      	adds	r7, #20
   18fa4:	3614      	adds	r6, #20
   18fa6:	000c      	movs	r4, r1
   18fa8:	2501      	movs	r5, #1
   18faa:	e791      	b.n	18ed0 <__mdiff+0x5c>

00018fac <__d2b>:
   18fac:	b5f0      	push	{r4, r5, r6, r7, lr}
   18fae:	2101      	movs	r1, #1
   18fb0:	001c      	movs	r4, r3
   18fb2:	b083      	sub	sp, #12
   18fb4:	9e08      	ldr	r6, [sp, #32]
   18fb6:	0015      	movs	r5, r2
   18fb8:	f7ff fd0e 	bl	189d8 <_Balloc>
   18fbc:	0323      	lsls	r3, r4, #12
   18fbe:	0064      	lsls	r4, r4, #1
   18fc0:	0007      	movs	r7, r0
   18fc2:	0b1b      	lsrs	r3, r3, #12
   18fc4:	0d64      	lsrs	r4, r4, #21
   18fc6:	d002      	beq.n	18fce <__d2b+0x22>
   18fc8:	2280      	movs	r2, #128	; 0x80
   18fca:	0352      	lsls	r2, r2, #13
   18fcc:	4313      	orrs	r3, r2
   18fce:	9301      	str	r3, [sp, #4]
   18fd0:	2d00      	cmp	r5, #0
   18fd2:	d019      	beq.n	19008 <__d2b+0x5c>
   18fd4:	4668      	mov	r0, sp
   18fd6:	9500      	str	r5, [sp, #0]
   18fd8:	f7ff fd90 	bl	18afc <__lo0bits>
   18fdc:	2800      	cmp	r0, #0
   18fde:	d130      	bne.n	19042 <__d2b+0x96>
   18fe0:	9b00      	ldr	r3, [sp, #0]
   18fe2:	617b      	str	r3, [r7, #20]
   18fe4:	9b01      	ldr	r3, [sp, #4]
   18fe6:	61bb      	str	r3, [r7, #24]
   18fe8:	1e5a      	subs	r2, r3, #1
   18fea:	4193      	sbcs	r3, r2
   18fec:	1c5d      	adds	r5, r3, #1
   18fee:	613d      	str	r5, [r7, #16]
   18ff0:	2c00      	cmp	r4, #0
   18ff2:	d014      	beq.n	1901e <__d2b+0x72>
   18ff4:	4b19      	ldr	r3, [pc, #100]	; (1905c <__d2b+0xb0>)
   18ff6:	469c      	mov	ip, r3
   18ff8:	2335      	movs	r3, #53	; 0x35
   18ffa:	4464      	add	r4, ip
   18ffc:	1824      	adds	r4, r4, r0
   18ffe:	1a18      	subs	r0, r3, r0
   19000:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19002:	6034      	str	r4, [r6, #0]
   19004:	6018      	str	r0, [r3, #0]
   19006:	e019      	b.n	1903c <__d2b+0x90>
   19008:	a801      	add	r0, sp, #4
   1900a:	f7ff fd77 	bl	18afc <__lo0bits>
   1900e:	9b01      	ldr	r3, [sp, #4]
   19010:	3020      	adds	r0, #32
   19012:	617b      	str	r3, [r7, #20]
   19014:	2301      	movs	r3, #1
   19016:	2501      	movs	r5, #1
   19018:	613b      	str	r3, [r7, #16]
   1901a:	2c00      	cmp	r4, #0
   1901c:	d1ea      	bne.n	18ff4 <__d2b+0x48>
   1901e:	4b10      	ldr	r3, [pc, #64]	; (19060 <__d2b+0xb4>)
   19020:	469c      	mov	ip, r3
   19022:	4b10      	ldr	r3, [pc, #64]	; (19064 <__d2b+0xb8>)
   19024:	4460      	add	r0, ip
   19026:	18eb      	adds	r3, r5, r3
   19028:	009b      	lsls	r3, r3, #2
   1902a:	18fb      	adds	r3, r7, r3
   1902c:	6030      	str	r0, [r6, #0]
   1902e:	6958      	ldr	r0, [r3, #20]
   19030:	f7ff fd4a 	bl	18ac8 <__hi0bits>
   19034:	016b      	lsls	r3, r5, #5
   19036:	1a18      	subs	r0, r3, r0
   19038:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1903a:	6018      	str	r0, [r3, #0]
   1903c:	0038      	movs	r0, r7
   1903e:	b003      	add	sp, #12
   19040:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19042:	9b01      	ldr	r3, [sp, #4]
   19044:	2220      	movs	r2, #32
   19046:	0019      	movs	r1, r3
   19048:	1a12      	subs	r2, r2, r0
   1904a:	4091      	lsls	r1, r2
   1904c:	000a      	movs	r2, r1
   1904e:	40c3      	lsrs	r3, r0
   19050:	9900      	ldr	r1, [sp, #0]
   19052:	9301      	str	r3, [sp, #4]
   19054:	430a      	orrs	r2, r1
   19056:	617a      	str	r2, [r7, #20]
   19058:	e7c5      	b.n	18fe6 <__d2b+0x3a>
   1905a:	46c0      	nop			; (mov r8, r8)
   1905c:	fffffbcd 	.word	0xfffffbcd
   19060:	fffffbce 	.word	0xfffffbce
   19064:	3fffffff 	.word	0x3fffffff

00019068 <_realloc_r>:
   19068:	b5f0      	push	{r4, r5, r6, r7, lr}
   1906a:	464e      	mov	r6, r9
   1906c:	4645      	mov	r5, r8
   1906e:	46de      	mov	lr, fp
   19070:	4657      	mov	r7, sl
   19072:	b5e0      	push	{r5, r6, r7, lr}
   19074:	b085      	sub	sp, #20
   19076:	9001      	str	r0, [sp, #4]
   19078:	000e      	movs	r6, r1
   1907a:	0015      	movs	r5, r2
   1907c:	2900      	cmp	r1, #0
   1907e:	d100      	bne.n	19082 <_realloc_r+0x1a>
   19080:	e09e      	b.n	191c0 <_realloc_r+0x158>
   19082:	0037      	movs	r7, r6
   19084:	9801      	ldr	r0, [sp, #4]
   19086:	3f08      	subs	r7, #8
   19088:	f7fc f8fc 	bl	15284 <__malloc_lock>
   1908c:	687a      	ldr	r2, [r7, #4]
   1908e:	2303      	movs	r3, #3
   19090:	0014      	movs	r4, r2
   19092:	439c      	bics	r4, r3
   19094:	002b      	movs	r3, r5
   19096:	330b      	adds	r3, #11
   19098:	46b9      	mov	r9, r7
   1909a:	2b16      	cmp	r3, #22
   1909c:	d847      	bhi.n	1912e <_realloc_r+0xc6>
   1909e:	2110      	movs	r1, #16
   190a0:	2310      	movs	r3, #16
   190a2:	4688      	mov	r8, r1
   190a4:	4545      	cmp	r5, r8
   190a6:	d846      	bhi.n	19136 <_realloc_r+0xce>
   190a8:	429c      	cmp	r4, r3
   190aa:	da49      	bge.n	19140 <_realloc_r+0xd8>
   190ac:	49cc      	ldr	r1, [pc, #816]	; (193e0 <_realloc_r+0x378>)
   190ae:	1938      	adds	r0, r7, r4
   190b0:	468b      	mov	fp, r1
   190b2:	6889      	ldr	r1, [r1, #8]
   190b4:	9002      	str	r0, [sp, #8]
   190b6:	4288      	cmp	r0, r1
   190b8:	d100      	bne.n	190bc <_realloc_r+0x54>
   190ba:	e0c2      	b.n	19242 <_realloc_r+0x1da>
   190bc:	2101      	movs	r1, #1
   190be:	468a      	mov	sl, r1
   190c0:	6840      	ldr	r0, [r0, #4]
   190c2:	0001      	movs	r1, r0
   190c4:	9003      	str	r0, [sp, #12]
   190c6:	4650      	mov	r0, sl
   190c8:	4381      	bics	r1, r0
   190ca:	468c      	mov	ip, r1
   190cc:	9902      	ldr	r1, [sp, #8]
   190ce:	468b      	mov	fp, r1
   190d0:	44dc      	add	ip, fp
   190d2:	4661      	mov	r1, ip
   190d4:	6849      	ldr	r1, [r1, #4]
   190d6:	4201      	tst	r1, r0
   190d8:	d04d      	beq.n	19176 <_realloc_r+0x10e>
   190da:	4210      	tst	r0, r2
   190dc:	d100      	bne.n	190e0 <_realloc_r+0x78>
   190de:	e0a2      	b.n	19226 <_realloc_r+0x1be>
   190e0:	0029      	movs	r1, r5
   190e2:	9801      	ldr	r0, [sp, #4]
   190e4:	f7fb fd8e 	bl	14c04 <_malloc_r>
   190e8:	1e05      	subs	r5, r0, #0
   190ea:	d039      	beq.n	19160 <_realloc_r+0xf8>
   190ec:	2301      	movs	r3, #1
   190ee:	0002      	movs	r2, r0
   190f0:	6879      	ldr	r1, [r7, #4]
   190f2:	3a08      	subs	r2, #8
   190f4:	4399      	bics	r1, r3
   190f6:	187f      	adds	r7, r7, r1
   190f8:	42ba      	cmp	r2, r7
   190fa:	d100      	bne.n	190fe <_realloc_r+0x96>
   190fc:	e12e      	b.n	1935c <_realloc_r+0x2f4>
   190fe:	1f22      	subs	r2, r4, #4
   19100:	2a24      	cmp	r2, #36	; 0x24
   19102:	d900      	bls.n	19106 <_realloc_r+0x9e>
   19104:	e114      	b.n	19330 <_realloc_r+0x2c8>
   19106:	2a13      	cmp	r2, #19
   19108:	d900      	bls.n	1910c <_realloc_r+0xa4>
   1910a:	e0e8      	b.n	192de <_realloc_r+0x276>
   1910c:	0003      	movs	r3, r0
   1910e:	0032      	movs	r2, r6
   19110:	6811      	ldr	r1, [r2, #0]
   19112:	6019      	str	r1, [r3, #0]
   19114:	6851      	ldr	r1, [r2, #4]
   19116:	6059      	str	r1, [r3, #4]
   19118:	6892      	ldr	r2, [r2, #8]
   1911a:	609a      	str	r2, [r3, #8]
   1911c:	9c01      	ldr	r4, [sp, #4]
   1911e:	0031      	movs	r1, r6
   19120:	0020      	movs	r0, r4
   19122:	f7ff f8b5 	bl	18290 <_free_r>
   19126:	0020      	movs	r0, r4
   19128:	f7fc f8b4 	bl	15294 <__malloc_unlock>
   1912c:	e01b      	b.n	19166 <_realloc_r+0xfe>
   1912e:	2107      	movs	r1, #7
   19130:	438b      	bics	r3, r1
   19132:	4698      	mov	r8, r3
   19134:	d5b6      	bpl.n	190a4 <_realloc_r+0x3c>
   19136:	230c      	movs	r3, #12
   19138:	9a01      	ldr	r2, [sp, #4]
   1913a:	2500      	movs	r5, #0
   1913c:	6013      	str	r3, [r2, #0]
   1913e:	e012      	b.n	19166 <_realloc_r+0xfe>
   19140:	0035      	movs	r5, r6
   19142:	4643      	mov	r3, r8
   19144:	1ae3      	subs	r3, r4, r3
   19146:	2b0f      	cmp	r3, #15
   19148:	d825      	bhi.n	19196 <_realloc_r+0x12e>
   1914a:	464b      	mov	r3, r9
   1914c:	2201      	movs	r2, #1
   1914e:	4649      	mov	r1, r9
   19150:	685b      	ldr	r3, [r3, #4]
   19152:	4013      	ands	r3, r2
   19154:	4323      	orrs	r3, r4
   19156:	604b      	str	r3, [r1, #4]
   19158:	444c      	add	r4, r9
   1915a:	6863      	ldr	r3, [r4, #4]
   1915c:	431a      	orrs	r2, r3
   1915e:	6062      	str	r2, [r4, #4]
   19160:	9801      	ldr	r0, [sp, #4]
   19162:	f7fc f897 	bl	15294 <__malloc_unlock>
   19166:	0028      	movs	r0, r5
   19168:	b005      	add	sp, #20
   1916a:	bc3c      	pop	{r2, r3, r4, r5}
   1916c:	4690      	mov	r8, r2
   1916e:	4699      	mov	r9, r3
   19170:	46a2      	mov	sl, r4
   19172:	46ab      	mov	fp, r5
   19174:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19176:	2103      	movs	r1, #3
   19178:	9803      	ldr	r0, [sp, #12]
   1917a:	468c      	mov	ip, r1
   1917c:	4388      	bics	r0, r1
   1917e:	1821      	adds	r1, r4, r0
   19180:	468b      	mov	fp, r1
   19182:	4299      	cmp	r1, r3
   19184:	db21      	blt.n	191ca <_realloc_r+0x162>
   19186:	9a02      	ldr	r2, [sp, #8]
   19188:	0035      	movs	r5, r6
   1918a:	68d3      	ldr	r3, [r2, #12]
   1918c:	6892      	ldr	r2, [r2, #8]
   1918e:	465c      	mov	r4, fp
   19190:	60d3      	str	r3, [r2, #12]
   19192:	609a      	str	r2, [r3, #8]
   19194:	e7d5      	b.n	19142 <_realloc_r+0xda>
   19196:	464a      	mov	r2, r9
   19198:	2001      	movs	r0, #1
   1919a:	4646      	mov	r6, r8
   1919c:	6852      	ldr	r2, [r2, #4]
   1919e:	4649      	mov	r1, r9
   191a0:	4002      	ands	r2, r0
   191a2:	4332      	orrs	r2, r6
   191a4:	464e      	mov	r6, r9
   191a6:	4441      	add	r1, r8
   191a8:	4303      	orrs	r3, r0
   191aa:	6072      	str	r2, [r6, #4]
   191ac:	444c      	add	r4, r9
   191ae:	604b      	str	r3, [r1, #4]
   191b0:	6863      	ldr	r3, [r4, #4]
   191b2:	3108      	adds	r1, #8
   191b4:	4318      	orrs	r0, r3
   191b6:	6060      	str	r0, [r4, #4]
   191b8:	9801      	ldr	r0, [sp, #4]
   191ba:	f7ff f869 	bl	18290 <_free_r>
   191be:	e7cf      	b.n	19160 <_realloc_r+0xf8>
   191c0:	0011      	movs	r1, r2
   191c2:	f7fb fd1f 	bl	14c04 <_malloc_r>
   191c6:	0005      	movs	r5, r0
   191c8:	e7cd      	b.n	19166 <_realloc_r+0xfe>
   191ca:	4651      	mov	r1, sl
   191cc:	4211      	tst	r1, r2
   191ce:	d000      	beq.n	191d2 <_realloc_r+0x16a>
   191d0:	e786      	b.n	190e0 <_realloc_r+0x78>
   191d2:	4661      	mov	r1, ip
   191d4:	683a      	ldr	r2, [r7, #0]
   191d6:	1aba      	subs	r2, r7, r2
   191d8:	4692      	mov	sl, r2
   191da:	6852      	ldr	r2, [r2, #4]
   191dc:	438a      	bics	r2, r1
   191de:	1880      	adds	r0, r0, r2
   191e0:	4683      	mov	fp, r0
   191e2:	44a3      	add	fp, r4
   191e4:	459b      	cmp	fp, r3
   191e6:	db26      	blt.n	19236 <_realloc_r+0x1ce>
   191e8:	9a02      	ldr	r2, [sp, #8]
   191ea:	68d3      	ldr	r3, [r2, #12]
   191ec:	6892      	ldr	r2, [r2, #8]
   191ee:	60d3      	str	r3, [r2, #12]
   191f0:	609a      	str	r2, [r3, #8]
   191f2:	4653      	mov	r3, sl
   191f4:	4652      	mov	r2, sl
   191f6:	4655      	mov	r5, sl
   191f8:	6892      	ldr	r2, [r2, #8]
   191fa:	68db      	ldr	r3, [r3, #12]
   191fc:	3508      	adds	r5, #8
   191fe:	60d3      	str	r3, [r2, #12]
   19200:	609a      	str	r2, [r3, #8]
   19202:	1f22      	subs	r2, r4, #4
   19204:	2a24      	cmp	r2, #36	; 0x24
   19206:	d900      	bls.n	1920a <_realloc_r+0x1a2>
   19208:	e096      	b.n	19338 <_realloc_r+0x2d0>
   1920a:	2a13      	cmp	r2, #19
   1920c:	d972      	bls.n	192f4 <_realloc_r+0x28c>
   1920e:	4653      	mov	r3, sl
   19210:	6831      	ldr	r1, [r6, #0]
   19212:	6099      	str	r1, [r3, #8]
   19214:	6871      	ldr	r1, [r6, #4]
   19216:	60d9      	str	r1, [r3, #12]
   19218:	2a1b      	cmp	r2, #27
   1921a:	d900      	bls.n	1921e <_realloc_r+0x1b6>
   1921c:	e0a4      	b.n	19368 <_realloc_r+0x300>
   1921e:	0032      	movs	r2, r6
   19220:	3310      	adds	r3, #16
   19222:	3208      	adds	r2, #8
   19224:	e068      	b.n	192f8 <_realloc_r+0x290>
   19226:	683a      	ldr	r2, [r7, #0]
   19228:	1aba      	subs	r2, r7, r2
   1922a:	4692      	mov	sl, r2
   1922c:	4651      	mov	r1, sl
   1922e:	2203      	movs	r2, #3
   19230:	6849      	ldr	r1, [r1, #4]
   19232:	4391      	bics	r1, r2
   19234:	000a      	movs	r2, r1
   19236:	4693      	mov	fp, r2
   19238:	44a3      	add	fp, r4
   1923a:	459b      	cmp	fp, r3
   1923c:	da00      	bge.n	19240 <_realloc_r+0x1d8>
   1923e:	e74f      	b.n	190e0 <_realloc_r+0x78>
   19240:	e7d7      	b.n	191f2 <_realloc_r+0x18a>
   19242:	2003      	movs	r0, #3
   19244:	9902      	ldr	r1, [sp, #8]
   19246:	4684      	mov	ip, r0
   19248:	6849      	ldr	r1, [r1, #4]
   1924a:	4381      	bics	r1, r0
   1924c:	4640      	mov	r0, r8
   1924e:	1909      	adds	r1, r1, r4
   19250:	3010      	adds	r0, #16
   19252:	9002      	str	r0, [sp, #8]
   19254:	4281      	cmp	r1, r0
   19256:	da58      	bge.n	1930a <_realloc_r+0x2a2>
   19258:	07d2      	lsls	r2, r2, #31
   1925a:	d500      	bpl.n	1925e <_realloc_r+0x1f6>
   1925c:	e740      	b.n	190e0 <_realloc_r+0x78>
   1925e:	4660      	mov	r0, ip
   19260:	683a      	ldr	r2, [r7, #0]
   19262:	1aba      	subs	r2, r7, r2
   19264:	4692      	mov	sl, r2
   19266:	6852      	ldr	r2, [r2, #4]
   19268:	4382      	bics	r2, r0
   1926a:	9802      	ldr	r0, [sp, #8]
   1926c:	1851      	adds	r1, r2, r1
   1926e:	9103      	str	r1, [sp, #12]
   19270:	4288      	cmp	r0, r1
   19272:	dce0      	bgt.n	19236 <_realloc_r+0x1ce>
   19274:	4653      	mov	r3, sl
   19276:	4652      	mov	r2, sl
   19278:	4655      	mov	r5, sl
   1927a:	6892      	ldr	r2, [r2, #8]
   1927c:	68db      	ldr	r3, [r3, #12]
   1927e:	3508      	adds	r5, #8
   19280:	60d3      	str	r3, [r2, #12]
   19282:	609a      	str	r2, [r3, #8]
   19284:	1f22      	subs	r2, r4, #4
   19286:	2a24      	cmp	r2, #36	; 0x24
   19288:	d900      	bls.n	1928c <_realloc_r+0x224>
   1928a:	e08e      	b.n	193aa <_realloc_r+0x342>
   1928c:	2a13      	cmp	r2, #19
   1928e:	d800      	bhi.n	19292 <_realloc_r+0x22a>
   19290:	e088      	b.n	193a4 <_realloc_r+0x33c>
   19292:	4653      	mov	r3, sl
   19294:	6831      	ldr	r1, [r6, #0]
   19296:	6099      	str	r1, [r3, #8]
   19298:	6871      	ldr	r1, [r6, #4]
   1929a:	60d9      	str	r1, [r3, #12]
   1929c:	2a1b      	cmp	r2, #27
   1929e:	d900      	bls.n	192a2 <_realloc_r+0x23a>
   192a0:	e088      	b.n	193b4 <_realloc_r+0x34c>
   192a2:	0032      	movs	r2, r6
   192a4:	3310      	adds	r3, #16
   192a6:	3208      	adds	r2, #8
   192a8:	6811      	ldr	r1, [r2, #0]
   192aa:	6019      	str	r1, [r3, #0]
   192ac:	6851      	ldr	r1, [r2, #4]
   192ae:	6059      	str	r1, [r3, #4]
   192b0:	6892      	ldr	r2, [r2, #8]
   192b2:	609a      	str	r2, [r3, #8]
   192b4:	4651      	mov	r1, sl
   192b6:	465b      	mov	r3, fp
   192b8:	4642      	mov	r2, r8
   192ba:	4441      	add	r1, r8
   192bc:	6099      	str	r1, [r3, #8]
   192be:	9b03      	ldr	r3, [sp, #12]
   192c0:	9801      	ldr	r0, [sp, #4]
   192c2:	1a9a      	subs	r2, r3, r2
   192c4:	2301      	movs	r3, #1
   192c6:	431a      	orrs	r2, r3
   192c8:	604a      	str	r2, [r1, #4]
   192ca:	4652      	mov	r2, sl
   192cc:	6852      	ldr	r2, [r2, #4]
   192ce:	4013      	ands	r3, r2
   192d0:	4642      	mov	r2, r8
   192d2:	4313      	orrs	r3, r2
   192d4:	4652      	mov	r2, sl
   192d6:	6053      	str	r3, [r2, #4]
   192d8:	f7fb ffdc 	bl	15294 <__malloc_unlock>
   192dc:	e743      	b.n	19166 <_realloc_r+0xfe>
   192de:	6833      	ldr	r3, [r6, #0]
   192e0:	6003      	str	r3, [r0, #0]
   192e2:	6873      	ldr	r3, [r6, #4]
   192e4:	6043      	str	r3, [r0, #4]
   192e6:	2a1b      	cmp	r2, #27
   192e8:	d82d      	bhi.n	19346 <_realloc_r+0x2de>
   192ea:	0003      	movs	r3, r0
   192ec:	0032      	movs	r2, r6
   192ee:	3308      	adds	r3, #8
   192f0:	3208      	adds	r2, #8
   192f2:	e70d      	b.n	19110 <_realloc_r+0xa8>
   192f4:	002b      	movs	r3, r5
   192f6:	0032      	movs	r2, r6
   192f8:	6811      	ldr	r1, [r2, #0]
   192fa:	465c      	mov	r4, fp
   192fc:	6019      	str	r1, [r3, #0]
   192fe:	6851      	ldr	r1, [r2, #4]
   19300:	46d1      	mov	r9, sl
   19302:	6059      	str	r1, [r3, #4]
   19304:	6892      	ldr	r2, [r2, #8]
   19306:	609a      	str	r2, [r3, #8]
   19308:	e71b      	b.n	19142 <_realloc_r+0xda>
   1930a:	4643      	mov	r3, r8
   1930c:	18fa      	adds	r2, r7, r3
   1930e:	465b      	mov	r3, fp
   19310:	609a      	str	r2, [r3, #8]
   19312:	4643      	mov	r3, r8
   19314:	1ac9      	subs	r1, r1, r3
   19316:	2301      	movs	r3, #1
   19318:	4319      	orrs	r1, r3
   1931a:	6051      	str	r1, [r2, #4]
   1931c:	687a      	ldr	r2, [r7, #4]
   1931e:	9801      	ldr	r0, [sp, #4]
   19320:	4013      	ands	r3, r2
   19322:	4642      	mov	r2, r8
   19324:	4313      	orrs	r3, r2
   19326:	607b      	str	r3, [r7, #4]
   19328:	f7fb ffb4 	bl	15294 <__malloc_unlock>
   1932c:	0035      	movs	r5, r6
   1932e:	e71a      	b.n	19166 <_realloc_r+0xfe>
   19330:	0031      	movs	r1, r6
   19332:	f7ff fb01 	bl	18938 <memmove>
   19336:	e6f1      	b.n	1911c <_realloc_r+0xb4>
   19338:	0031      	movs	r1, r6
   1933a:	0028      	movs	r0, r5
   1933c:	f7ff fafc 	bl	18938 <memmove>
   19340:	465c      	mov	r4, fp
   19342:	46d1      	mov	r9, sl
   19344:	e6fd      	b.n	19142 <_realloc_r+0xda>
   19346:	68b3      	ldr	r3, [r6, #8]
   19348:	6083      	str	r3, [r0, #8]
   1934a:	68f3      	ldr	r3, [r6, #12]
   1934c:	60c3      	str	r3, [r0, #12]
   1934e:	2a24      	cmp	r2, #36	; 0x24
   19350:	d015      	beq.n	1937e <_realloc_r+0x316>
   19352:	0003      	movs	r3, r0
   19354:	0032      	movs	r2, r6
   19356:	3310      	adds	r3, #16
   19358:	3210      	adds	r2, #16
   1935a:	e6d9      	b.n	19110 <_realloc_r+0xa8>
   1935c:	6853      	ldr	r3, [r2, #4]
   1935e:	2203      	movs	r2, #3
   19360:	4393      	bics	r3, r2
   19362:	18e4      	adds	r4, r4, r3
   19364:	0035      	movs	r5, r6
   19366:	e6ec      	b.n	19142 <_realloc_r+0xda>
   19368:	4653      	mov	r3, sl
   1936a:	68b1      	ldr	r1, [r6, #8]
   1936c:	6119      	str	r1, [r3, #16]
   1936e:	68f1      	ldr	r1, [r6, #12]
   19370:	6159      	str	r1, [r3, #20]
   19372:	2a24      	cmp	r2, #36	; 0x24
   19374:	d00c      	beq.n	19390 <_realloc_r+0x328>
   19376:	0032      	movs	r2, r6
   19378:	3318      	adds	r3, #24
   1937a:	3210      	adds	r2, #16
   1937c:	e7bc      	b.n	192f8 <_realloc_r+0x290>
   1937e:	6933      	ldr	r3, [r6, #16]
   19380:	0032      	movs	r2, r6
   19382:	6103      	str	r3, [r0, #16]
   19384:	0003      	movs	r3, r0
   19386:	6971      	ldr	r1, [r6, #20]
   19388:	3318      	adds	r3, #24
   1938a:	3218      	adds	r2, #24
   1938c:	6141      	str	r1, [r0, #20]
   1938e:	e6bf      	b.n	19110 <_realloc_r+0xa8>
   19390:	4653      	mov	r3, sl
   19392:	6932      	ldr	r2, [r6, #16]
   19394:	4651      	mov	r1, sl
   19396:	619a      	str	r2, [r3, #24]
   19398:	0032      	movs	r2, r6
   1939a:	6970      	ldr	r0, [r6, #20]
   1939c:	3320      	adds	r3, #32
   1939e:	3218      	adds	r2, #24
   193a0:	61c8      	str	r0, [r1, #28]
   193a2:	e7a9      	b.n	192f8 <_realloc_r+0x290>
   193a4:	002b      	movs	r3, r5
   193a6:	0032      	movs	r2, r6
   193a8:	e77e      	b.n	192a8 <_realloc_r+0x240>
   193aa:	0031      	movs	r1, r6
   193ac:	0028      	movs	r0, r5
   193ae:	f7ff fac3 	bl	18938 <memmove>
   193b2:	e77f      	b.n	192b4 <_realloc_r+0x24c>
   193b4:	4653      	mov	r3, sl
   193b6:	68b1      	ldr	r1, [r6, #8]
   193b8:	6119      	str	r1, [r3, #16]
   193ba:	68f1      	ldr	r1, [r6, #12]
   193bc:	6159      	str	r1, [r3, #20]
   193be:	2a24      	cmp	r2, #36	; 0x24
   193c0:	d003      	beq.n	193ca <_realloc_r+0x362>
   193c2:	0032      	movs	r2, r6
   193c4:	3318      	adds	r3, #24
   193c6:	3210      	adds	r2, #16
   193c8:	e76e      	b.n	192a8 <_realloc_r+0x240>
   193ca:	4653      	mov	r3, sl
   193cc:	6932      	ldr	r2, [r6, #16]
   193ce:	4651      	mov	r1, sl
   193d0:	619a      	str	r2, [r3, #24]
   193d2:	0032      	movs	r2, r6
   193d4:	6970      	ldr	r0, [r6, #20]
   193d6:	3320      	adds	r3, #32
   193d8:	3218      	adds	r2, #24
   193da:	61c8      	str	r0, [r1, #28]
   193dc:	e764      	b.n	192a8 <_realloc_r+0x240>
   193de:	46c0      	nop			; (mov r8, r8)
   193e0:	20000498 	.word	0x20000498

000193e4 <__sread>:
   193e4:	b570      	push	{r4, r5, r6, lr}
   193e6:	000c      	movs	r4, r1
   193e8:	250e      	movs	r5, #14
   193ea:	5f49      	ldrsh	r1, [r1, r5]
   193ec:	f000 faa0 	bl	19930 <_read_r>
   193f0:	2800      	cmp	r0, #0
   193f2:	db03      	blt.n	193fc <__sread+0x18>
   193f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   193f6:	181b      	adds	r3, r3, r0
   193f8:	6523      	str	r3, [r4, #80]	; 0x50
   193fa:	bd70      	pop	{r4, r5, r6, pc}
   193fc:	89a3      	ldrh	r3, [r4, #12]
   193fe:	4a02      	ldr	r2, [pc, #8]	; (19408 <__sread+0x24>)
   19400:	4013      	ands	r3, r2
   19402:	81a3      	strh	r3, [r4, #12]
   19404:	e7f9      	b.n	193fa <__sread+0x16>
   19406:	46c0      	nop			; (mov r8, r8)
   19408:	ffffefff 	.word	0xffffefff

0001940c <__swrite>:
   1940c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1940e:	0016      	movs	r6, r2
   19410:	001f      	movs	r7, r3
   19412:	220c      	movs	r2, #12
   19414:	5e8b      	ldrsh	r3, [r1, r2]
   19416:	0005      	movs	r5, r0
   19418:	000c      	movs	r4, r1
   1941a:	05da      	lsls	r2, r3, #23
   1941c:	d507      	bpl.n	1942e <__swrite+0x22>
   1941e:	230e      	movs	r3, #14
   19420:	5ec9      	ldrsh	r1, [r1, r3]
   19422:	2200      	movs	r2, #0
   19424:	2302      	movs	r3, #2
   19426:	f000 fa59 	bl	198dc <_lseek_r>
   1942a:	220c      	movs	r2, #12
   1942c:	5ea3      	ldrsh	r3, [r4, r2]
   1942e:	4a05      	ldr	r2, [pc, #20]	; (19444 <__swrite+0x38>)
   19430:	0028      	movs	r0, r5
   19432:	4013      	ands	r3, r2
   19434:	81a3      	strh	r3, [r4, #12]
   19436:	0032      	movs	r2, r6
   19438:	230e      	movs	r3, #14
   1943a:	5ee1      	ldrsh	r1, [r4, r3]
   1943c:	003b      	movs	r3, r7
   1943e:	f000 f86b 	bl	19518 <_write_r>
   19442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19444:	ffffefff 	.word	0xffffefff

00019448 <__sseek>:
   19448:	b570      	push	{r4, r5, r6, lr}
   1944a:	000c      	movs	r4, r1
   1944c:	250e      	movs	r5, #14
   1944e:	5f49      	ldrsh	r1, [r1, r5]
   19450:	f000 fa44 	bl	198dc <_lseek_r>
   19454:	1c43      	adds	r3, r0, #1
   19456:	d006      	beq.n	19466 <__sseek+0x1e>
   19458:	2380      	movs	r3, #128	; 0x80
   1945a:	89a2      	ldrh	r2, [r4, #12]
   1945c:	015b      	lsls	r3, r3, #5
   1945e:	4313      	orrs	r3, r2
   19460:	81a3      	strh	r3, [r4, #12]
   19462:	6520      	str	r0, [r4, #80]	; 0x50
   19464:	bd70      	pop	{r4, r5, r6, pc}
   19466:	89a3      	ldrh	r3, [r4, #12]
   19468:	4a01      	ldr	r2, [pc, #4]	; (19470 <__sseek+0x28>)
   1946a:	4013      	ands	r3, r2
   1946c:	81a3      	strh	r3, [r4, #12]
   1946e:	e7f9      	b.n	19464 <__sseek+0x1c>
   19470:	ffffefff 	.word	0xffffefff

00019474 <__sclose>:
   19474:	b510      	push	{r4, lr}
   19476:	230e      	movs	r3, #14
   19478:	5ec9      	ldrsh	r1, [r1, r3]
   1947a:	f000 f907 	bl	1968c <_close_r>
   1947e:	bd10      	pop	{r4, pc}

00019480 <__sprint_r.part.0>:
   19480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19482:	464e      	mov	r6, r9
   19484:	4645      	mov	r5, r8
   19486:	46de      	mov	lr, fp
   19488:	4657      	mov	r7, sl
   1948a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1948c:	b5e0      	push	{r5, r6, r7, lr}
   1948e:	4680      	mov	r8, r0
   19490:	000e      	movs	r6, r1
   19492:	4691      	mov	r9, r2
   19494:	049b      	lsls	r3, r3, #18
   19496:	d531      	bpl.n	194fc <__sprint_r.part.0+0x7c>
   19498:	6813      	ldr	r3, [r2, #0]
   1949a:	469a      	mov	sl, r3
   1949c:	6893      	ldr	r3, [r2, #8]
   1949e:	2b00      	cmp	r3, #0
   194a0:	d02a      	beq.n	194f8 <__sprint_r.part.0+0x78>
   194a2:	4652      	mov	r2, sl
   194a4:	6852      	ldr	r2, [r2, #4]
   194a6:	2500      	movs	r5, #0
   194a8:	4693      	mov	fp, r2
   194aa:	0897      	lsrs	r7, r2, #2
   194ac:	4652      	mov	r2, sl
   194ae:	6814      	ldr	r4, [r2, #0]
   194b0:	d104      	bne.n	194bc <__sprint_r.part.0+0x3c>
   194b2:	e016      	b.n	194e2 <__sprint_r.part.0+0x62>
   194b4:	3501      	adds	r5, #1
   194b6:	3404      	adds	r4, #4
   194b8:	42af      	cmp	r7, r5
   194ba:	d010      	beq.n	194de <__sprint_r.part.0+0x5e>
   194bc:	0032      	movs	r2, r6
   194be:	6821      	ldr	r1, [r4, #0]
   194c0:	4640      	mov	r0, r8
   194c2:	f000 f9a7 	bl	19814 <_fputwc_r>
   194c6:	1c43      	adds	r3, r0, #1
   194c8:	d1f4      	bne.n	194b4 <__sprint_r.part.0+0x34>
   194ca:	464a      	mov	r2, r9
   194cc:	2300      	movs	r3, #0
   194ce:	6093      	str	r3, [r2, #8]
   194d0:	6053      	str	r3, [r2, #4]
   194d2:	bc3c      	pop	{r2, r3, r4, r5}
   194d4:	4690      	mov	r8, r2
   194d6:	4699      	mov	r9, r3
   194d8:	46a2      	mov	sl, r4
   194da:	46ab      	mov	fp, r5
   194dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   194de:	464b      	mov	r3, r9
   194e0:	689b      	ldr	r3, [r3, #8]
   194e2:	465a      	mov	r2, fp
   194e4:	2103      	movs	r1, #3
   194e6:	438a      	bics	r2, r1
   194e8:	1a9b      	subs	r3, r3, r2
   194ea:	464a      	mov	r2, r9
   194ec:	6093      	str	r3, [r2, #8]
   194ee:	2208      	movs	r2, #8
   194f0:	4694      	mov	ip, r2
   194f2:	44e2      	add	sl, ip
   194f4:	2b00      	cmp	r3, #0
   194f6:	d1d4      	bne.n	194a2 <__sprint_r.part.0+0x22>
   194f8:	2000      	movs	r0, #0
   194fa:	e7e6      	b.n	194ca <__sprint_r.part.0+0x4a>
   194fc:	f7fe ffa6 	bl	1844c <__sfvwrite_r>
   19500:	e7e3      	b.n	194ca <__sprint_r.part.0+0x4a>
   19502:	46c0      	nop			; (mov r8, r8)

00019504 <__sprint_r>:
   19504:	6893      	ldr	r3, [r2, #8]
   19506:	b510      	push	{r4, lr}
   19508:	2b00      	cmp	r3, #0
   1950a:	d002      	beq.n	19512 <__sprint_r+0xe>
   1950c:	f7ff ffb8 	bl	19480 <__sprint_r.part.0>
   19510:	bd10      	pop	{r4, pc}
   19512:	6053      	str	r3, [r2, #4]
   19514:	2000      	movs	r0, #0
   19516:	e7fb      	b.n	19510 <__sprint_r+0xc>

00019518 <_write_r>:
   19518:	b570      	push	{r4, r5, r6, lr}
   1951a:	0005      	movs	r5, r0
   1951c:	0008      	movs	r0, r1
   1951e:	0011      	movs	r1, r2
   19520:	2200      	movs	r2, #0
   19522:	4c06      	ldr	r4, [pc, #24]	; (1953c <_write_r+0x24>)
   19524:	6022      	str	r2, [r4, #0]
   19526:	001a      	movs	r2, r3
   19528:	f7ea fa06 	bl	3938 <_write>
   1952c:	1c43      	adds	r3, r0, #1
   1952e:	d000      	beq.n	19532 <_write_r+0x1a>
   19530:	bd70      	pop	{r4, r5, r6, pc}
   19532:	6823      	ldr	r3, [r4, #0]
   19534:	2b00      	cmp	r3, #0
   19536:	d0fb      	beq.n	19530 <_write_r+0x18>
   19538:	602b      	str	r3, [r5, #0]
   1953a:	e7f9      	b.n	19530 <_write_r+0x18>
   1953c:	20001c0c 	.word	0x20001c0c

00019540 <__register_exitproc>:
   19540:	b5f0      	push	{r4, r5, r6, r7, lr}
   19542:	464e      	mov	r6, r9
   19544:	4645      	mov	r5, r8
   19546:	46de      	mov	lr, fp
   19548:	4657      	mov	r7, sl
   1954a:	b5e0      	push	{r5, r6, r7, lr}
   1954c:	4d36      	ldr	r5, [pc, #216]	; (19628 <__register_exitproc+0xe8>)
   1954e:	b083      	sub	sp, #12
   19550:	0006      	movs	r6, r0
   19552:	6828      	ldr	r0, [r5, #0]
   19554:	4698      	mov	r8, r3
   19556:	000f      	movs	r7, r1
   19558:	4691      	mov	r9, r2
   1955a:	f7ff f931 	bl	187c0 <__retarget_lock_acquire_recursive>
   1955e:	4b33      	ldr	r3, [pc, #204]	; (1962c <__register_exitproc+0xec>)
   19560:	681c      	ldr	r4, [r3, #0]
   19562:	23a4      	movs	r3, #164	; 0xa4
   19564:	005b      	lsls	r3, r3, #1
   19566:	58e0      	ldr	r0, [r4, r3]
   19568:	2800      	cmp	r0, #0
   1956a:	d052      	beq.n	19612 <__register_exitproc+0xd2>
   1956c:	6843      	ldr	r3, [r0, #4]
   1956e:	2b1f      	cmp	r3, #31
   19570:	dc13      	bgt.n	1959a <__register_exitproc+0x5a>
   19572:	1c5a      	adds	r2, r3, #1
   19574:	9201      	str	r2, [sp, #4]
   19576:	2e00      	cmp	r6, #0
   19578:	d128      	bne.n	195cc <__register_exitproc+0x8c>
   1957a:	9a01      	ldr	r2, [sp, #4]
   1957c:	3302      	adds	r3, #2
   1957e:	009b      	lsls	r3, r3, #2
   19580:	6042      	str	r2, [r0, #4]
   19582:	501f      	str	r7, [r3, r0]
   19584:	6828      	ldr	r0, [r5, #0]
   19586:	f7ff f91d 	bl	187c4 <__retarget_lock_release_recursive>
   1958a:	2000      	movs	r0, #0
   1958c:	b003      	add	sp, #12
   1958e:	bc3c      	pop	{r2, r3, r4, r5}
   19590:	4690      	mov	r8, r2
   19592:	4699      	mov	r9, r3
   19594:	46a2      	mov	sl, r4
   19596:	46ab      	mov	fp, r5
   19598:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1959a:	4b25      	ldr	r3, [pc, #148]	; (19630 <__register_exitproc+0xf0>)
   1959c:	2b00      	cmp	r3, #0
   1959e:	d03d      	beq.n	1961c <__register_exitproc+0xdc>
   195a0:	20c8      	movs	r0, #200	; 0xc8
   195a2:	0040      	lsls	r0, r0, #1
   195a4:	f7fb fb24 	bl	14bf0 <malloc>
   195a8:	2800      	cmp	r0, #0
   195aa:	d037      	beq.n	1961c <__register_exitproc+0xdc>
   195ac:	22a4      	movs	r2, #164	; 0xa4
   195ae:	2300      	movs	r3, #0
   195b0:	0052      	lsls	r2, r2, #1
   195b2:	58a1      	ldr	r1, [r4, r2]
   195b4:	6043      	str	r3, [r0, #4]
   195b6:	6001      	str	r1, [r0, #0]
   195b8:	50a0      	str	r0, [r4, r2]
   195ba:	3240      	adds	r2, #64	; 0x40
   195bc:	5083      	str	r3, [r0, r2]
   195be:	3204      	adds	r2, #4
   195c0:	5083      	str	r3, [r0, r2]
   195c2:	3301      	adds	r3, #1
   195c4:	9301      	str	r3, [sp, #4]
   195c6:	2300      	movs	r3, #0
   195c8:	2e00      	cmp	r6, #0
   195ca:	d0d6      	beq.n	1957a <__register_exitproc+0x3a>
   195cc:	009a      	lsls	r2, r3, #2
   195ce:	4692      	mov	sl, r2
   195d0:	4482      	add	sl, r0
   195d2:	464a      	mov	r2, r9
   195d4:	2188      	movs	r1, #136	; 0x88
   195d6:	4654      	mov	r4, sl
   195d8:	5062      	str	r2, [r4, r1]
   195da:	22c4      	movs	r2, #196	; 0xc4
   195dc:	0052      	lsls	r2, r2, #1
   195de:	4691      	mov	r9, r2
   195e0:	4481      	add	r9, r0
   195e2:	464a      	mov	r2, r9
   195e4:	3987      	subs	r1, #135	; 0x87
   195e6:	4099      	lsls	r1, r3
   195e8:	6812      	ldr	r2, [r2, #0]
   195ea:	468b      	mov	fp, r1
   195ec:	430a      	orrs	r2, r1
   195ee:	4694      	mov	ip, r2
   195f0:	464a      	mov	r2, r9
   195f2:	4661      	mov	r1, ip
   195f4:	6011      	str	r1, [r2, #0]
   195f6:	2284      	movs	r2, #132	; 0x84
   195f8:	4641      	mov	r1, r8
   195fa:	0052      	lsls	r2, r2, #1
   195fc:	50a1      	str	r1, [r4, r2]
   195fe:	2e02      	cmp	r6, #2
   19600:	d1bb      	bne.n	1957a <__register_exitproc+0x3a>
   19602:	0002      	movs	r2, r0
   19604:	465c      	mov	r4, fp
   19606:	328d      	adds	r2, #141	; 0x8d
   19608:	32ff      	adds	r2, #255	; 0xff
   1960a:	6811      	ldr	r1, [r2, #0]
   1960c:	430c      	orrs	r4, r1
   1960e:	6014      	str	r4, [r2, #0]
   19610:	e7b3      	b.n	1957a <__register_exitproc+0x3a>
   19612:	0020      	movs	r0, r4
   19614:	304d      	adds	r0, #77	; 0x4d
   19616:	30ff      	adds	r0, #255	; 0xff
   19618:	50e0      	str	r0, [r4, r3]
   1961a:	e7a7      	b.n	1956c <__register_exitproc+0x2c>
   1961c:	6828      	ldr	r0, [r5, #0]
   1961e:	f7ff f8d1 	bl	187c4 <__retarget_lock_release_recursive>
   19622:	2001      	movs	r0, #1
   19624:	4240      	negs	r0, r0
   19626:	e7b1      	b.n	1958c <__register_exitproc+0x4c>
   19628:	200008a8 	.word	0x200008a8
   1962c:	0001b268 	.word	0x0001b268
   19630:	00014bf1 	.word	0x00014bf1

00019634 <_calloc_r>:
   19634:	b510      	push	{r4, lr}
   19636:	4351      	muls	r1, r2
   19638:	f7fb fae4 	bl	14c04 <_malloc_r>
   1963c:	1e04      	subs	r4, r0, #0
   1963e:	d01c      	beq.n	1967a <_calloc_r+0x46>
   19640:	0003      	movs	r3, r0
   19642:	3b08      	subs	r3, #8
   19644:	685a      	ldr	r2, [r3, #4]
   19646:	2303      	movs	r3, #3
   19648:	439a      	bics	r2, r3
   1964a:	3a04      	subs	r2, #4
   1964c:	2a24      	cmp	r2, #36	; 0x24
   1964e:	d816      	bhi.n	1967e <_calloc_r+0x4a>
   19650:	0003      	movs	r3, r0
   19652:	2a13      	cmp	r2, #19
   19654:	d90d      	bls.n	19672 <_calloc_r+0x3e>
   19656:	2100      	movs	r1, #0
   19658:	3308      	adds	r3, #8
   1965a:	6001      	str	r1, [r0, #0]
   1965c:	6041      	str	r1, [r0, #4]
   1965e:	2a1b      	cmp	r2, #27
   19660:	d907      	bls.n	19672 <_calloc_r+0x3e>
   19662:	6081      	str	r1, [r0, #8]
   19664:	60c1      	str	r1, [r0, #12]
   19666:	2a24      	cmp	r2, #36	; 0x24
   19668:	d10d      	bne.n	19686 <_calloc_r+0x52>
   1966a:	0003      	movs	r3, r0
   1966c:	6101      	str	r1, [r0, #16]
   1966e:	3318      	adds	r3, #24
   19670:	6141      	str	r1, [r0, #20]
   19672:	2200      	movs	r2, #0
   19674:	601a      	str	r2, [r3, #0]
   19676:	605a      	str	r2, [r3, #4]
   19678:	609a      	str	r2, [r3, #8]
   1967a:	0020      	movs	r0, r4
   1967c:	bd10      	pop	{r4, pc}
   1967e:	2100      	movs	r1, #0
   19680:	f7fb fdb6 	bl	151f0 <memset>
   19684:	e7f9      	b.n	1967a <_calloc_r+0x46>
   19686:	0003      	movs	r3, r0
   19688:	3310      	adds	r3, #16
   1968a:	e7f2      	b.n	19672 <_calloc_r+0x3e>

0001968c <_close_r>:
   1968c:	2300      	movs	r3, #0
   1968e:	b570      	push	{r4, r5, r6, lr}
   19690:	4c06      	ldr	r4, [pc, #24]	; (196ac <_close_r+0x20>)
   19692:	0005      	movs	r5, r0
   19694:	0008      	movs	r0, r1
   19696:	6023      	str	r3, [r4, #0]
   19698:	f7ea f988 	bl	39ac <_close>
   1969c:	1c43      	adds	r3, r0, #1
   1969e:	d000      	beq.n	196a2 <_close_r+0x16>
   196a0:	bd70      	pop	{r4, r5, r6, pc}
   196a2:	6823      	ldr	r3, [r4, #0]
   196a4:	2b00      	cmp	r3, #0
   196a6:	d0fb      	beq.n	196a0 <_close_r+0x14>
   196a8:	602b      	str	r3, [r5, #0]
   196aa:	e7f9      	b.n	196a0 <_close_r+0x14>
   196ac:	20001c0c 	.word	0x20001c0c

000196b0 <_fclose_r>:
   196b0:	b570      	push	{r4, r5, r6, lr}
   196b2:	0005      	movs	r5, r0
   196b4:	1e0c      	subs	r4, r1, #0
   196b6:	d040      	beq.n	1973a <_fclose_r+0x8a>
   196b8:	2800      	cmp	r0, #0
   196ba:	d002      	beq.n	196c2 <_fclose_r+0x12>
   196bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   196be:	2b00      	cmp	r3, #0
   196c0:	d03e      	beq.n	19740 <_fclose_r+0x90>
   196c2:	2601      	movs	r6, #1
   196c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   196c6:	4233      	tst	r3, r6
   196c8:	d133      	bne.n	19732 <_fclose_r+0x82>
   196ca:	89a3      	ldrh	r3, [r4, #12]
   196cc:	059b      	lsls	r3, r3, #22
   196ce:	d543      	bpl.n	19758 <_fclose_r+0xa8>
   196d0:	0021      	movs	r1, r4
   196d2:	0028      	movs	r0, r5
   196d4:	f7fe fc30 	bl	17f38 <__sflush_r>
   196d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   196da:	0006      	movs	r6, r0
   196dc:	2b00      	cmp	r3, #0
   196de:	d004      	beq.n	196ea <_fclose_r+0x3a>
   196e0:	69e1      	ldr	r1, [r4, #28]
   196e2:	0028      	movs	r0, r5
   196e4:	4798      	blx	r3
   196e6:	2800      	cmp	r0, #0
   196e8:	db44      	blt.n	19774 <_fclose_r+0xc4>
   196ea:	89a3      	ldrh	r3, [r4, #12]
   196ec:	061b      	lsls	r3, r3, #24
   196ee:	d42a      	bmi.n	19746 <_fclose_r+0x96>
   196f0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   196f2:	2900      	cmp	r1, #0
   196f4:	d008      	beq.n	19708 <_fclose_r+0x58>
   196f6:	0023      	movs	r3, r4
   196f8:	3340      	adds	r3, #64	; 0x40
   196fa:	4299      	cmp	r1, r3
   196fc:	d002      	beq.n	19704 <_fclose_r+0x54>
   196fe:	0028      	movs	r0, r5
   19700:	f7fe fdc6 	bl	18290 <_free_r>
   19704:	2300      	movs	r3, #0
   19706:	6323      	str	r3, [r4, #48]	; 0x30
   19708:	6c61      	ldr	r1, [r4, #68]	; 0x44
   1970a:	2900      	cmp	r1, #0
   1970c:	d004      	beq.n	19718 <_fclose_r+0x68>
   1970e:	0028      	movs	r0, r5
   19710:	f7fe fdbe 	bl	18290 <_free_r>
   19714:	2300      	movs	r3, #0
   19716:	6463      	str	r3, [r4, #68]	; 0x44
   19718:	f7fe fd40 	bl	1819c <__sfp_lock_acquire>
   1971c:	2300      	movs	r3, #0
   1971e:	81a3      	strh	r3, [r4, #12]
   19720:	6e63      	ldr	r3, [r4, #100]	; 0x64
   19722:	07db      	lsls	r3, r3, #31
   19724:	d514      	bpl.n	19750 <_fclose_r+0xa0>
   19726:	6da0      	ldr	r0, [r4, #88]	; 0x58
   19728:	f7ff f848 	bl	187bc <__retarget_lock_close_recursive>
   1972c:	f7fe fd3e 	bl	181ac <__sfp_lock_release>
   19730:	e004      	b.n	1973c <_fclose_r+0x8c>
   19732:	220c      	movs	r2, #12
   19734:	5ea3      	ldrsh	r3, [r4, r2]
   19736:	2b00      	cmp	r3, #0
   19738:	d1ca      	bne.n	196d0 <_fclose_r+0x20>
   1973a:	2600      	movs	r6, #0
   1973c:	0030      	movs	r0, r6
   1973e:	bd70      	pop	{r4, r5, r6, pc}
   19740:	f7fe fcfc 	bl	1813c <__sinit>
   19744:	e7bd      	b.n	196c2 <_fclose_r+0x12>
   19746:	6921      	ldr	r1, [r4, #16]
   19748:	0028      	movs	r0, r5
   1974a:	f7fe fda1 	bl	18290 <_free_r>
   1974e:	e7cf      	b.n	196f0 <_fclose_r+0x40>
   19750:	6da0      	ldr	r0, [r4, #88]	; 0x58
   19752:	f7ff f837 	bl	187c4 <__retarget_lock_release_recursive>
   19756:	e7e6      	b.n	19726 <_fclose_r+0x76>
   19758:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1975a:	f7ff f831 	bl	187c0 <__retarget_lock_acquire_recursive>
   1975e:	220c      	movs	r2, #12
   19760:	5ea3      	ldrsh	r3, [r4, r2]
   19762:	2b00      	cmp	r3, #0
   19764:	d1b4      	bne.n	196d0 <_fclose_r+0x20>
   19766:	6e63      	ldr	r3, [r4, #100]	; 0x64
   19768:	401e      	ands	r6, r3
   1976a:	d1e6      	bne.n	1973a <_fclose_r+0x8a>
   1976c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1976e:	f7ff f829 	bl	187c4 <__retarget_lock_release_recursive>
   19772:	e7e3      	b.n	1973c <_fclose_r+0x8c>
   19774:	2601      	movs	r6, #1
   19776:	4276      	negs	r6, r6
   19778:	e7b7      	b.n	196ea <_fclose_r+0x3a>
   1977a:	46c0      	nop			; (mov r8, r8)

0001977c <__fputwc>:
   1977c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1977e:	46ce      	mov	lr, r9
   19780:	4647      	mov	r7, r8
   19782:	b580      	push	{r7, lr}
   19784:	b085      	sub	sp, #20
   19786:	4680      	mov	r8, r0
   19788:	4689      	mov	r9, r1
   1978a:	0014      	movs	r4, r2
   1978c:	f000 f896 	bl	198bc <__locale_mb_cur_max>
   19790:	2801      	cmp	r0, #1
   19792:	d031      	beq.n	197f8 <__fputwc+0x7c>
   19794:	0023      	movs	r3, r4
   19796:	af03      	add	r7, sp, #12
   19798:	335c      	adds	r3, #92	; 0x5c
   1979a:	464a      	mov	r2, r9
   1979c:	0039      	movs	r1, r7
   1979e:	4640      	mov	r0, r8
   197a0:	f000 f938 	bl	19a14 <_wcrtomb_r>
   197a4:	0006      	movs	r6, r0
   197a6:	1c43      	adds	r3, r0, #1
   197a8:	d021      	beq.n	197ee <__fputwc+0x72>
   197aa:	2800      	cmp	r0, #0
   197ac:	d030      	beq.n	19810 <__fputwc+0x94>
   197ae:	7839      	ldrb	r1, [r7, #0]
   197b0:	2500      	movs	r5, #0
   197b2:	e007      	b.n	197c4 <__fputwc+0x48>
   197b4:	6823      	ldr	r3, [r4, #0]
   197b6:	1c5a      	adds	r2, r3, #1
   197b8:	6022      	str	r2, [r4, #0]
   197ba:	7019      	strb	r1, [r3, #0]
   197bc:	3501      	adds	r5, #1
   197be:	42b5      	cmp	r5, r6
   197c0:	d226      	bcs.n	19810 <__fputwc+0x94>
   197c2:	5d79      	ldrb	r1, [r7, r5]
   197c4:	68a3      	ldr	r3, [r4, #8]
   197c6:	3b01      	subs	r3, #1
   197c8:	60a3      	str	r3, [r4, #8]
   197ca:	2b00      	cmp	r3, #0
   197cc:	daf2      	bge.n	197b4 <__fputwc+0x38>
   197ce:	69a2      	ldr	r2, [r4, #24]
   197d0:	4293      	cmp	r3, r2
   197d2:	db01      	blt.n	197d8 <__fputwc+0x5c>
   197d4:	290a      	cmp	r1, #10
   197d6:	d1ed      	bne.n	197b4 <__fputwc+0x38>
   197d8:	0022      	movs	r2, r4
   197da:	4640      	mov	r0, r8
   197dc:	f000 f8bc 	bl	19958 <__swbuf_r>
   197e0:	1c43      	adds	r3, r0, #1
   197e2:	d1eb      	bne.n	197bc <__fputwc+0x40>
   197e4:	b005      	add	sp, #20
   197e6:	bc0c      	pop	{r2, r3}
   197e8:	4690      	mov	r8, r2
   197ea:	4699      	mov	r9, r3
   197ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   197ee:	2240      	movs	r2, #64	; 0x40
   197f0:	89a3      	ldrh	r3, [r4, #12]
   197f2:	4313      	orrs	r3, r2
   197f4:	81a3      	strh	r3, [r4, #12]
   197f6:	e7f5      	b.n	197e4 <__fputwc+0x68>
   197f8:	464b      	mov	r3, r9
   197fa:	3b01      	subs	r3, #1
   197fc:	2bfe      	cmp	r3, #254	; 0xfe
   197fe:	d8c9      	bhi.n	19794 <__fputwc+0x18>
   19800:	466a      	mov	r2, sp
   19802:	464b      	mov	r3, r9
   19804:	71d3      	strb	r3, [r2, #7]
   19806:	79d1      	ldrb	r1, [r2, #7]
   19808:	af03      	add	r7, sp, #12
   1980a:	7039      	strb	r1, [r7, #0]
   1980c:	2601      	movs	r6, #1
   1980e:	e7cf      	b.n	197b0 <__fputwc+0x34>
   19810:	4648      	mov	r0, r9
   19812:	e7e7      	b.n	197e4 <__fputwc+0x68>

00019814 <_fputwc_r>:
   19814:	6e53      	ldr	r3, [r2, #100]	; 0x64
   19816:	b570      	push	{r4, r5, r6, lr}
   19818:	0005      	movs	r5, r0
   1981a:	000e      	movs	r6, r1
   1981c:	0014      	movs	r4, r2
   1981e:	07db      	lsls	r3, r3, #31
   19820:	d41e      	bmi.n	19860 <_fputwc_r+0x4c>
   19822:	230c      	movs	r3, #12
   19824:	5ed2      	ldrsh	r2, [r2, r3]
   19826:	b291      	uxth	r1, r2
   19828:	058b      	lsls	r3, r1, #22
   1982a:	d516      	bpl.n	1985a <_fputwc_r+0x46>
   1982c:	2380      	movs	r3, #128	; 0x80
   1982e:	019b      	lsls	r3, r3, #6
   19830:	4219      	tst	r1, r3
   19832:	d104      	bne.n	1983e <_fputwc_r+0x2a>
   19834:	431a      	orrs	r2, r3
   19836:	81a2      	strh	r2, [r4, #12]
   19838:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1983a:	4313      	orrs	r3, r2
   1983c:	6663      	str	r3, [r4, #100]	; 0x64
   1983e:	0028      	movs	r0, r5
   19840:	0022      	movs	r2, r4
   19842:	0031      	movs	r1, r6
   19844:	f7ff ff9a 	bl	1977c <__fputwc>
   19848:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1984a:	0005      	movs	r5, r0
   1984c:	07db      	lsls	r3, r3, #31
   1984e:	d402      	bmi.n	19856 <_fputwc_r+0x42>
   19850:	89a3      	ldrh	r3, [r4, #12]
   19852:	059b      	lsls	r3, r3, #22
   19854:	d508      	bpl.n	19868 <_fputwc_r+0x54>
   19856:	0028      	movs	r0, r5
   19858:	bd70      	pop	{r4, r5, r6, pc}
   1985a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1985c:	f7fe ffb0 	bl	187c0 <__retarget_lock_acquire_recursive>
   19860:	230c      	movs	r3, #12
   19862:	5ee2      	ldrsh	r2, [r4, r3]
   19864:	b291      	uxth	r1, r2
   19866:	e7e1      	b.n	1982c <_fputwc_r+0x18>
   19868:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1986a:	f7fe ffab 	bl	187c4 <__retarget_lock_release_recursive>
   1986e:	e7f2      	b.n	19856 <_fputwc_r+0x42>

00019870 <_fstat_r>:
   19870:	2300      	movs	r3, #0
   19872:	b570      	push	{r4, r5, r6, lr}
   19874:	4c07      	ldr	r4, [pc, #28]	; (19894 <_fstat_r+0x24>)
   19876:	0005      	movs	r5, r0
   19878:	0008      	movs	r0, r1
   1987a:	0011      	movs	r1, r2
   1987c:	6023      	str	r3, [r4, #0]
   1987e:	f7ea f898 	bl	39b2 <_fstat>
   19882:	1c43      	adds	r3, r0, #1
   19884:	d000      	beq.n	19888 <_fstat_r+0x18>
   19886:	bd70      	pop	{r4, r5, r6, pc}
   19888:	6823      	ldr	r3, [r4, #0]
   1988a:	2b00      	cmp	r3, #0
   1988c:	d0fb      	beq.n	19886 <_fstat_r+0x16>
   1988e:	602b      	str	r3, [r5, #0]
   19890:	e7f9      	b.n	19886 <_fstat_r+0x16>
   19892:	46c0      	nop			; (mov r8, r8)
   19894:	20001c0c 	.word	0x20001c0c

00019898 <_isatty_r>:
   19898:	2300      	movs	r3, #0
   1989a:	b570      	push	{r4, r5, r6, lr}
   1989c:	4c06      	ldr	r4, [pc, #24]	; (198b8 <_isatty_r+0x20>)
   1989e:	0005      	movs	r5, r0
   198a0:	0008      	movs	r0, r1
   198a2:	6023      	str	r3, [r4, #0]
   198a4:	f7ea f88a 	bl	39bc <_isatty>
   198a8:	1c43      	adds	r3, r0, #1
   198aa:	d000      	beq.n	198ae <_isatty_r+0x16>
   198ac:	bd70      	pop	{r4, r5, r6, pc}
   198ae:	6823      	ldr	r3, [r4, #0]
   198b0:	2b00      	cmp	r3, #0
   198b2:	d0fb      	beq.n	198ac <_isatty_r+0x14>
   198b4:	602b      	str	r3, [r5, #0]
   198b6:	e7f9      	b.n	198ac <_isatty_r+0x14>
   198b8:	20001c0c 	.word	0x20001c0c

000198bc <__locale_mb_cur_max>:
   198bc:	4b05      	ldr	r3, [pc, #20]	; (198d4 <__locale_mb_cur_max+0x18>)
   198be:	681b      	ldr	r3, [r3, #0]
   198c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   198c2:	2b00      	cmp	r3, #0
   198c4:	d003      	beq.n	198ce <__locale_mb_cur_max+0x12>
   198c6:	2294      	movs	r2, #148	; 0x94
   198c8:	0052      	lsls	r2, r2, #1
   198ca:	5c98      	ldrb	r0, [r3, r2]
   198cc:	4770      	bx	lr
   198ce:	4b02      	ldr	r3, [pc, #8]	; (198d8 <__locale_mb_cur_max+0x1c>)
   198d0:	e7f9      	b.n	198c6 <__locale_mb_cur_max+0xa>
   198d2:	46c0      	nop			; (mov r8, r8)
   198d4:	20000068 	.word	0x20000068
   198d8:	200008ac 	.word	0x200008ac

000198dc <_lseek_r>:
   198dc:	b570      	push	{r4, r5, r6, lr}
   198de:	0005      	movs	r5, r0
   198e0:	0008      	movs	r0, r1
   198e2:	0011      	movs	r1, r2
   198e4:	2200      	movs	r2, #0
   198e6:	4c06      	ldr	r4, [pc, #24]	; (19900 <_lseek_r+0x24>)
   198e8:	6022      	str	r2, [r4, #0]
   198ea:	001a      	movs	r2, r3
   198ec:	f7ea f868 	bl	39c0 <_lseek>
   198f0:	1c43      	adds	r3, r0, #1
   198f2:	d000      	beq.n	198f6 <_lseek_r+0x1a>
   198f4:	bd70      	pop	{r4, r5, r6, pc}
   198f6:	6823      	ldr	r3, [r4, #0]
   198f8:	2b00      	cmp	r3, #0
   198fa:	d0fb      	beq.n	198f4 <_lseek_r+0x18>
   198fc:	602b      	str	r3, [r5, #0]
   198fe:	e7f9      	b.n	198f4 <_lseek_r+0x18>
   19900:	20001c0c 	.word	0x20001c0c

00019904 <__ascii_mbtowc>:
   19904:	b082      	sub	sp, #8
   19906:	2900      	cmp	r1, #0
   19908:	d00a      	beq.n	19920 <__ascii_mbtowc+0x1c>
   1990a:	2a00      	cmp	r2, #0
   1990c:	d00b      	beq.n	19926 <__ascii_mbtowc+0x22>
   1990e:	2b00      	cmp	r3, #0
   19910:	d00b      	beq.n	1992a <__ascii_mbtowc+0x26>
   19912:	7813      	ldrb	r3, [r2, #0]
   19914:	600b      	str	r3, [r1, #0]
   19916:	7810      	ldrb	r0, [r2, #0]
   19918:	1e43      	subs	r3, r0, #1
   1991a:	4198      	sbcs	r0, r3
   1991c:	b002      	add	sp, #8
   1991e:	4770      	bx	lr
   19920:	a901      	add	r1, sp, #4
   19922:	2a00      	cmp	r2, #0
   19924:	d1f3      	bne.n	1990e <__ascii_mbtowc+0xa>
   19926:	2000      	movs	r0, #0
   19928:	e7f8      	b.n	1991c <__ascii_mbtowc+0x18>
   1992a:	2002      	movs	r0, #2
   1992c:	4240      	negs	r0, r0
   1992e:	e7f5      	b.n	1991c <__ascii_mbtowc+0x18>

00019930 <_read_r>:
   19930:	b570      	push	{r4, r5, r6, lr}
   19932:	0005      	movs	r5, r0
   19934:	0008      	movs	r0, r1
   19936:	0011      	movs	r1, r2
   19938:	2200      	movs	r2, #0
   1993a:	4c06      	ldr	r4, [pc, #24]	; (19954 <_read_r+0x24>)
   1993c:	6022      	str	r2, [r4, #0]
   1993e:	001a      	movs	r2, r3
   19940:	f7e9 ffd8 	bl	38f4 <_read>
   19944:	1c43      	adds	r3, r0, #1
   19946:	d000      	beq.n	1994a <_read_r+0x1a>
   19948:	bd70      	pop	{r4, r5, r6, pc}
   1994a:	6823      	ldr	r3, [r4, #0]
   1994c:	2b00      	cmp	r3, #0
   1994e:	d0fb      	beq.n	19948 <_read_r+0x18>
   19950:	602b      	str	r3, [r5, #0]
   19952:	e7f9      	b.n	19948 <_read_r+0x18>
   19954:	20001c0c 	.word	0x20001c0c

00019958 <__swbuf_r>:
   19958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1995a:	0006      	movs	r6, r0
   1995c:	000d      	movs	r5, r1
   1995e:	0014      	movs	r4, r2
   19960:	2800      	cmp	r0, #0
   19962:	d002      	beq.n	1996a <__swbuf_r+0x12>
   19964:	6b83      	ldr	r3, [r0, #56]	; 0x38
   19966:	2b00      	cmp	r3, #0
   19968:	d04e      	beq.n	19a08 <__swbuf_r+0xb0>
   1996a:	69a3      	ldr	r3, [r4, #24]
   1996c:	60a3      	str	r3, [r4, #8]
   1996e:	230c      	movs	r3, #12
   19970:	5ee0      	ldrsh	r0, [r4, r3]
   19972:	b281      	uxth	r1, r0
   19974:	070b      	lsls	r3, r1, #28
   19976:	d53c      	bpl.n	199f2 <__swbuf_r+0x9a>
   19978:	6923      	ldr	r3, [r4, #16]
   1997a:	2b00      	cmp	r3, #0
   1997c:	d039      	beq.n	199f2 <__swbuf_r+0x9a>
   1997e:	22ff      	movs	r2, #255	; 0xff
   19980:	b2ef      	uxtb	r7, r5
   19982:	4015      	ands	r5, r2
   19984:	2280      	movs	r2, #128	; 0x80
   19986:	0192      	lsls	r2, r2, #6
   19988:	4211      	tst	r1, r2
   1998a:	d015      	beq.n	199b8 <__swbuf_r+0x60>
   1998c:	6822      	ldr	r2, [r4, #0]
   1998e:	6961      	ldr	r1, [r4, #20]
   19990:	1ad3      	subs	r3, r2, r3
   19992:	428b      	cmp	r3, r1
   19994:	da1b      	bge.n	199ce <__swbuf_r+0x76>
   19996:	3301      	adds	r3, #1
   19998:	68a1      	ldr	r1, [r4, #8]
   1999a:	3901      	subs	r1, #1
   1999c:	60a1      	str	r1, [r4, #8]
   1999e:	1c51      	adds	r1, r2, #1
   199a0:	6021      	str	r1, [r4, #0]
   199a2:	7017      	strb	r7, [r2, #0]
   199a4:	6962      	ldr	r2, [r4, #20]
   199a6:	429a      	cmp	r2, r3
   199a8:	d01a      	beq.n	199e0 <__swbuf_r+0x88>
   199aa:	89a3      	ldrh	r3, [r4, #12]
   199ac:	07db      	lsls	r3, r3, #31
   199ae:	d501      	bpl.n	199b4 <__swbuf_r+0x5c>
   199b0:	2d0a      	cmp	r5, #10
   199b2:	d015      	beq.n	199e0 <__swbuf_r+0x88>
   199b4:	0028      	movs	r0, r5
   199b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   199b8:	4302      	orrs	r2, r0
   199ba:	6e61      	ldr	r1, [r4, #100]	; 0x64
   199bc:	81a2      	strh	r2, [r4, #12]
   199be:	4a14      	ldr	r2, [pc, #80]	; (19a10 <__swbuf_r+0xb8>)
   199c0:	400a      	ands	r2, r1
   199c2:	6662      	str	r2, [r4, #100]	; 0x64
   199c4:	6961      	ldr	r1, [r4, #20]
   199c6:	6822      	ldr	r2, [r4, #0]
   199c8:	1ad3      	subs	r3, r2, r3
   199ca:	428b      	cmp	r3, r1
   199cc:	dbe3      	blt.n	19996 <__swbuf_r+0x3e>
   199ce:	0021      	movs	r1, r4
   199d0:	0030      	movs	r0, r6
   199d2:	f7fe fb59 	bl	18088 <_fflush_r>
   199d6:	2800      	cmp	r0, #0
   199d8:	d108      	bne.n	199ec <__swbuf_r+0x94>
   199da:	6822      	ldr	r2, [r4, #0]
   199dc:	2301      	movs	r3, #1
   199de:	e7db      	b.n	19998 <__swbuf_r+0x40>
   199e0:	0021      	movs	r1, r4
   199e2:	0030      	movs	r0, r6
   199e4:	f7fe fb50 	bl	18088 <_fflush_r>
   199e8:	2800      	cmp	r0, #0
   199ea:	d0e3      	beq.n	199b4 <__swbuf_r+0x5c>
   199ec:	2501      	movs	r5, #1
   199ee:	426d      	negs	r5, r5
   199f0:	e7e0      	b.n	199b4 <__swbuf_r+0x5c>
   199f2:	0021      	movs	r1, r4
   199f4:	0030      	movs	r0, r6
   199f6:	f7fd f9b3 	bl	16d60 <__swsetup_r>
   199fa:	2800      	cmp	r0, #0
   199fc:	d1f6      	bne.n	199ec <__swbuf_r+0x94>
   199fe:	230c      	movs	r3, #12
   19a00:	5ee0      	ldrsh	r0, [r4, r3]
   19a02:	6923      	ldr	r3, [r4, #16]
   19a04:	b281      	uxth	r1, r0
   19a06:	e7ba      	b.n	1997e <__swbuf_r+0x26>
   19a08:	f7fe fb98 	bl	1813c <__sinit>
   19a0c:	e7ad      	b.n	1996a <__swbuf_r+0x12>
   19a0e:	46c0      	nop			; (mov r8, r8)
   19a10:	ffffdfff 	.word	0xffffdfff

00019a14 <_wcrtomb_r>:
   19a14:	b570      	push	{r4, r5, r6, lr}
   19a16:	001d      	movs	r5, r3
   19a18:	4b11      	ldr	r3, [pc, #68]	; (19a60 <_wcrtomb_r+0x4c>)
   19a1a:	b084      	sub	sp, #16
   19a1c:	681b      	ldr	r3, [r3, #0]
   19a1e:	0004      	movs	r4, r0
   19a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   19a22:	2900      	cmp	r1, #0
   19a24:	d00e      	beq.n	19a44 <_wcrtomb_r+0x30>
   19a26:	2b00      	cmp	r3, #0
   19a28:	d016      	beq.n	19a58 <_wcrtomb_r+0x44>
   19a2a:	20e0      	movs	r0, #224	; 0xe0
   19a2c:	581e      	ldr	r6, [r3, r0]
   19a2e:	002b      	movs	r3, r5
   19a30:	0020      	movs	r0, r4
   19a32:	47b0      	blx	r6
   19a34:	1c43      	adds	r3, r0, #1
   19a36:	d103      	bne.n	19a40 <_wcrtomb_r+0x2c>
   19a38:	2300      	movs	r3, #0
   19a3a:	602b      	str	r3, [r5, #0]
   19a3c:	338a      	adds	r3, #138	; 0x8a
   19a3e:	6023      	str	r3, [r4, #0]
   19a40:	b004      	add	sp, #16
   19a42:	bd70      	pop	{r4, r5, r6, pc}
   19a44:	2b00      	cmp	r3, #0
   19a46:	d009      	beq.n	19a5c <_wcrtomb_r+0x48>
   19a48:	22e0      	movs	r2, #224	; 0xe0
   19a4a:	a901      	add	r1, sp, #4
   19a4c:	589e      	ldr	r6, [r3, r2]
   19a4e:	0020      	movs	r0, r4
   19a50:	002b      	movs	r3, r5
   19a52:	2200      	movs	r2, #0
   19a54:	47b0      	blx	r6
   19a56:	e7ed      	b.n	19a34 <_wcrtomb_r+0x20>
   19a58:	4b02      	ldr	r3, [pc, #8]	; (19a64 <_wcrtomb_r+0x50>)
   19a5a:	e7e6      	b.n	19a2a <_wcrtomb_r+0x16>
   19a5c:	4b01      	ldr	r3, [pc, #4]	; (19a64 <_wcrtomb_r+0x50>)
   19a5e:	e7f3      	b.n	19a48 <_wcrtomb_r+0x34>
   19a60:	20000068 	.word	0x20000068
   19a64:	200008ac 	.word	0x200008ac

00019a68 <__ascii_wctomb>:
   19a68:	2900      	cmp	r1, #0
   19a6a:	d004      	beq.n	19a76 <__ascii_wctomb+0xe>
   19a6c:	2aff      	cmp	r2, #255	; 0xff
   19a6e:	d804      	bhi.n	19a7a <__ascii_wctomb+0x12>
   19a70:	2001      	movs	r0, #1
   19a72:	700a      	strb	r2, [r1, #0]
   19a74:	4770      	bx	lr
   19a76:	2000      	movs	r0, #0
   19a78:	e7fc      	b.n	19a74 <__ascii_wctomb+0xc>
   19a7a:	238a      	movs	r3, #138	; 0x8a
   19a7c:	6003      	str	r3, [r0, #0]
   19a7e:	2001      	movs	r0, #1
   19a80:	4240      	negs	r0, r0
   19a82:	e7f7      	b.n	19a74 <__ascii_wctomb+0xc>

00019a84 <__aeabi_dcmpun>:
   19a84:	b570      	push	{r4, r5, r6, lr}
   19a86:	4e0e      	ldr	r6, [pc, #56]	; (19ac0 <__aeabi_dcmpun+0x3c>)
   19a88:	030d      	lsls	r5, r1, #12
   19a8a:	031c      	lsls	r4, r3, #12
   19a8c:	0049      	lsls	r1, r1, #1
   19a8e:	005b      	lsls	r3, r3, #1
   19a90:	0b2d      	lsrs	r5, r5, #12
   19a92:	0d49      	lsrs	r1, r1, #21
   19a94:	0b24      	lsrs	r4, r4, #12
   19a96:	0d5b      	lsrs	r3, r3, #21
   19a98:	42b1      	cmp	r1, r6
   19a9a:	d004      	beq.n	19aa6 <__aeabi_dcmpun+0x22>
   19a9c:	4908      	ldr	r1, [pc, #32]	; (19ac0 <__aeabi_dcmpun+0x3c>)
   19a9e:	2000      	movs	r0, #0
   19aa0:	428b      	cmp	r3, r1
   19aa2:	d008      	beq.n	19ab6 <__aeabi_dcmpun+0x32>
   19aa4:	bd70      	pop	{r4, r5, r6, pc}
   19aa6:	4305      	orrs	r5, r0
   19aa8:	2001      	movs	r0, #1
   19aaa:	2d00      	cmp	r5, #0
   19aac:	d1fa      	bne.n	19aa4 <__aeabi_dcmpun+0x20>
   19aae:	4904      	ldr	r1, [pc, #16]	; (19ac0 <__aeabi_dcmpun+0x3c>)
   19ab0:	2000      	movs	r0, #0
   19ab2:	428b      	cmp	r3, r1
   19ab4:	d1f6      	bne.n	19aa4 <__aeabi_dcmpun+0x20>
   19ab6:	4314      	orrs	r4, r2
   19ab8:	0020      	movs	r0, r4
   19aba:	1e44      	subs	r4, r0, #1
   19abc:	41a0      	sbcs	r0, r4
   19abe:	e7f1      	b.n	19aa4 <__aeabi_dcmpun+0x20>
   19ac0:	000007ff 	.word	0x000007ff
   19ac4:	69570a0d 	.word	0x69570a0d
   19ac8:	4420646e 	.word	0x4420646e
   19acc:	63657269 	.word	0x63657269
   19ad0:	6e6f6974 	.word	0x6e6f6974
   19ad4:	67656428 	.word	0x67656428
   19ad8:	25203a29 	.word	0x25203a29
   19adc:	0a0d2064 	.word	0x0a0d2064
   19ae0:	00000000 	.word	0x00000000
   19ae4:	00000910 	.word	0x00000910
   19ae8:	00000b5a 	.word	0x00000b5a
   19aec:	00000b5a 	.word	0x00000b5a
   19af0:	00000b5a 	.word	0x00000b5a
   19af4:	00000b5a 	.word	0x00000b5a
   19af8:	00000b5a 	.word	0x00000b5a
   19afc:	00000b5a 	.word	0x00000b5a
   19b00:	00000b5a 	.word	0x00000b5a
   19b04:	00000b5a 	.word	0x00000b5a
   19b08:	00000b5a 	.word	0x00000b5a
   19b0c:	00000b5a 	.word	0x00000b5a
   19b10:	00000b5a 	.word	0x00000b5a
   19b14:	00000b5a 	.word	0x00000b5a
   19b18:	00000b5a 	.word	0x00000b5a
   19b1c:	00000b5a 	.word	0x00000b5a
   19b20:	00000b5a 	.word	0x00000b5a
   19b24:	000008f8 	.word	0x000008f8
   19b28:	00000b5a 	.word	0x00000b5a
   19b2c:	00000b5a 	.word	0x00000b5a
   19b30:	00000b5a 	.word	0x00000b5a
   19b34:	00000b5a 	.word	0x00000b5a
   19b38:	00000b5a 	.word	0x00000b5a
   19b3c:	00000b5a 	.word	0x00000b5a
   19b40:	00000b5a 	.word	0x00000b5a
   19b44:	00000b5a 	.word	0x00000b5a
   19b48:	00000b5a 	.word	0x00000b5a
   19b4c:	00000b5a 	.word	0x00000b5a
   19b50:	00000b5a 	.word	0x00000b5a
   19b54:	00000b5a 	.word	0x00000b5a
   19b58:	00000b5a 	.word	0x00000b5a
   19b5c:	00000b5a 	.word	0x00000b5a
   19b60:	00000b5a 	.word	0x00000b5a
   19b64:	00000908 	.word	0x00000908
   19b68:	00000b5a 	.word	0x00000b5a
   19b6c:	00000b5a 	.word	0x00000b5a
   19b70:	00000b5a 	.word	0x00000b5a
   19b74:	00000b5a 	.word	0x00000b5a
   19b78:	00000b5a 	.word	0x00000b5a
   19b7c:	00000b5a 	.word	0x00000b5a
   19b80:	00000b5a 	.word	0x00000b5a
   19b84:	00000b5a 	.word	0x00000b5a
   19b88:	00000b5a 	.word	0x00000b5a
   19b8c:	00000b5a 	.word	0x00000b5a
   19b90:	00000b5a 	.word	0x00000b5a
   19b94:	00000b5a 	.word	0x00000b5a
   19b98:	00000b5a 	.word	0x00000b5a
   19b9c:	00000b5a 	.word	0x00000b5a
   19ba0:	00000b5a 	.word	0x00000b5a
   19ba4:	00000900 	.word	0x00000900
   19ba8:	00000918 	.word	0x00000918
   19bac:	000008e0 	.word	0x000008e0
   19bb0:	000008f0 	.word	0x000008f0
   19bb4:	000008e8 	.word	0x000008e8
   19bb8:	0000ffff 	.word	0x0000ffff
   19bbc:	0000ffff 	.word	0x0000ffff
   19bc0:	00000004 	.word	0x00000004
   19bc4:	00000005 	.word	0x00000005
   19bc8:	00000006 	.word	0x00000006
   19bcc:	00000007 	.word	0x00000007
   19bd0:	00000020 	.word	0x00000020
   19bd4:	0000ffff 	.word	0x0000ffff
   19bd8:	00000022 	.word	0x00000022
   19bdc:	00000023 	.word	0x00000023
   19be0:	0000ffff 	.word	0x0000ffff
   19be4:	0000ffff 	.word	0x0000ffff
   19be8:	0000ffff 	.word	0x0000ffff
   19bec:	0000ffff 	.word	0x0000ffff
   19bf0:	00000008 	.word	0x00000008
   19bf4:	00000009 	.word	0x00000009
   19bf8:	0000000a 	.word	0x0000000a
   19bfc:	0000000b 	.word	0x0000000b
   19c00:	0000ffff 	.word	0x0000ffff
   19c04:	0000ffff 	.word	0x0000ffff
   19c08:	0000ffff 	.word	0x0000ffff
   19c0c:	0000ffff 	.word	0x0000ffff
   19c10:	42000000 	.word	0x42000000
   19c14:	42000400 	.word	0x42000400
   19c18:	42000800 	.word	0x42000800
   19c1c:	42000c00 	.word	0x42000c00
   19c20:	42001000 	.word	0x42001000
   19c24:	43000400 	.word	0x43000400
   19c28:	00002ada 	.word	0x00002ada
   19c2c:	00002ad6 	.word	0x00002ad6
   19c30:	00002ad6 	.word	0x00002ad6
   19c34:	00002b3c 	.word	0x00002b3c
   19c38:	00002b3c 	.word	0x00002b3c
   19c3c:	00002af0 	.word	0x00002af0
   19c40:	00002ae0 	.word	0x00002ae0
   19c44:	00002af6 	.word	0x00002af6
   19c48:	00002b2a 	.word	0x00002b2a
   19c4c:	00002ce0 	.word	0x00002ce0
   19c50:	00002cc0 	.word	0x00002cc0
   19c54:	00002cc0 	.word	0x00002cc0
   19c58:	00002d5a 	.word	0x00002d5a
   19c5c:	00002cd2 	.word	0x00002cd2
   19c60:	00002cee 	.word	0x00002cee
   19c64:	00002cc4 	.word	0x00002cc4
   19c68:	00002cfc 	.word	0x00002cfc
   19c6c:	00002d3e 	.word	0x00002d3e
   19c70:	00002d98 	.word	0x00002d98
   19c74:	00002dda 	.word	0x00002dda
   19c78:	00002dda 	.word	0x00002dda
   19c7c:	00002dda 	.word	0x00002dda
   19c80:	00002d8a 	.word	0x00002d8a
   19c84:	00002da6 	.word	0x00002da6
   19c88:	00002d7c 	.word	0x00002d7c
   19c8c:	00002db4 	.word	0x00002db4
   19c90:	00002dca 	.word	0x00002dca
   19c94:	00003582 	.word	0x00003582
   19c98:	00003678 	.word	0x00003678
   19c9c:	00003682 	.word	0x00003682
   19ca0:	0000368c 	.word	0x0000368c
   19ca4:	00003696 	.word	0x00003696
   19ca8:	000036c8 	.word	0x000036c8
   19cac:	000036d2 	.word	0x000036d2
   19cb0:	000036dc 	.word	0x000036dc
   19cb4:	000036e6 	.word	0x000036e6
   19cb8:	000036f0 	.word	0x000036f0
   19cbc:	42002000 	.word	0x42002000
   19cc0:	42002400 	.word	0x42002400
   19cc4:	42002800 	.word	0x42002800
   19cc8:	42002c00 	.word	0x42002c00
   19ccc:	43000800 	.word	0x43000800
   19cd0:	00000002 	.word	0x00000002
   19cd4:	00000100 	.word	0x00000100
   19cd8:	00000002 	.word	0x00000002
   19cdc:	00000200 	.word	0x00000200
   19ce0:	00000002 	.word	0x00000002
   19ce4:	00000400 	.word	0x00000400
   19ce8:	00000002 	.word	0x00000002
   19cec:	00000800 	.word	0x00000800
   19cf0:	00000003 	.word	0x00000003
   19cf4:	00000004 	.word	0x00000004
   19cf8:	75640a0d 	.word	0x75640a0d
   19cfc:	20796d6d 	.word	0x20796d6d
   19d00:	646e6168 	.word	0x646e6168
   19d04:	2872656c 	.word	0x2872656c
   19d08:	00000029 	.word	0x00000029

00019d0c <AdvChannels923>:
   19d0c:	3706ea00 3706ea00 ff100100 3709f740     ...7...7....@..7
   19d1c:	3709f740 ff100100                       @..7....

00019d24 <DefaultChannels923>:
   19d24:	50015001                                .P.P

00019d28 <DefaultDrParamsAS>:
   19d28:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   19d38:	0b33000e 01070ac6 3573001a 010709c2     ..3.......s5....
   19d48:	7df20031 010708be f2f20053 010707bc     1..}....S.......
   19d58:	f2f2003c 010807f1 f2f20064 000a00ce     <.......d.......

00019d68 <SubBandDutyCycle923>:
   19d68:	00000064                                d...

00019d6c <SubBandParams923>:
   19d6c:	35c36d80 37502800 00000000              .m.5.(P7....

00019d78 <DefaultChannels915AU>:
   19d78:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   19d88:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   19d98:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   19da8:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   19db8:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   19dc8:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   19dd8:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   19de8:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   19df8:	66016601 66016601 66016601 66016601     .f.f.f.f.f.f.f.f

00019e08 <DefaultDrParamsAU>:
   19e08:	00330008 01070cdf 0033000b 01070bce     ..3.......3.....
   19e18:	00330012 01070ac6 0073001c 010709c2     ..3.......s.....
   19e28:	00f2003d 010708be 00f20053 010707bc     =.......S.......
   19e38:	00f2003d 010908be 00000000 010a0000     =...............
   19e48:	00350007 01090c0c 00810005 01090b06     ..5.............
   19e58:	00f20007 01090a01 00f2000c 010909fe     ................
   19e68:	00f20016 010908fc 00f2002a 010907fc     ........*.......

00019e78 <AdvChannels433>:
   19e78:	19d1b9d8 19d1b9d8 ff0c0101 19d4c718     ................
   19e88:	19d4c718 ff0c0101 19d7d458 19d7d458     ........X...X...
   19e98:	ff0c0101                                ....

00019e9c <AdvChannels868>:
   19e9c:	33be27a0 33be27a0 ff100101 33c134e0     .'.3.'.3.....4.3
   19eac:	33c134e0 ff100101 33c44220 33c44220     .4.3.... B.3 B.3
   19ebc:	ff100101                                ....

00019ec0 <DefaultChannels433>:
   19ec0:	50015001 00005001                       .P.P.P..

00019ec8 <DefaultChannels868>:
   19ec8:	50015001 00005001                       .P.P.P..

00019ed0 <DefaultDrparamsEU>:
   19ed0:	00330008 01070cdf 0033000b 01070bd3     ..3.......3.....
   19ee0:	00330017 01070acc 0073001c 010709c2     ..3.......s.....
   19ef0:	00f2003d 010708be 00f20053 010707bc     =.......S.......
   19f00:	00f2003c 010807f1 00f20064 000a00ce     <.......d.......

00019f10 <SubBandDutyCycle868>:
   19f10:	006403e8 03e80064 0064000a              ..d.d.....d.

00019f1c <SubBandParams433>:
   19f1c:	19cf0e40 19ea8580 00000000              @...........

00019f28 <SubBandParams868>:
   19f28:	337055c0 338eda40 00000000 338eda41     .Up3@..3....A..3
   19f38:	33bca100 00000000 33bca101 33c5c8c0     ...3.......3...3
   19f48:	00000000 33c74f60 33cef080 00000000     ....`O.3...3....
   19f58:	33d1fdc0 33d5ce50 00000000 33d691a0     ...3P..3.......3
   19f68:	33db2580 00000000                       .%.3....

00019f70 <AdvChannels865>:
   19f70:	338fce64 338fce64 ff1e0100 3394fe84     d..3d..3.......3
   19f80:	3394fe84 ff1e0100 339de1e8 339de1e8     ...3.......3...3
   19f90:	ff1e0100                                ....

00019f94 <DefaultChannels865>:
   19f94:	50015001 00005001                       .P.P.P..

00019f9c <DefaultDrParamsIN>:
   19f9c:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   19fac:	0033000e 01070ac6 0073001a 010709c2     ..3.......s.....
   19fbc:	00f20031 010708be 00f20053 010707bc     1.......S.......
   19fcc:	00000000 010a0000 00f20008 000a00fe     ................

00019fdc <AdvChannels923JP>:
   19fdc:	3706ea00 3706ea00 ff100101 3709f740     ...7...7....@..7
   19fec:	3709f740 ff100101                       @..7....

00019ff4 <DefaultChannels923JP>:
   19ff4:	50015001                                .P.P

00019ff8 <DefaultDrParamsJP>:
   19ff8:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   1a008:	0b33000e 01070ac6 3573001a 010709c2     ..3.......s5....
   1a018:	7df20031 010708be f2f20053 010707bc     1..}....S.......
   1a028:	f2f2003c 010807f1 f2f20064 000a00ce     <.......d.......

0001a038 <SubBandDutyCycleJP923>:
   1a038:	000a0064                                d...

0001a03c <SubBandParamsJP923>:
   1a03c:	36d61600 36f7a7c0 00000000 36fab500     ...6...6.......6
   1a04c:	37502800 00000000                       .(P7....

0001a054 <AdvChannels920KR>:
   1a054:	36f62120 36f62120 ff0e0100 36f92e60      !.6 !.6....`..6
   1a064:	36f92e60 ff0e0100 36fc3ba0 36fc3ba0     `..6.....;.6.;.6
   1a074:	ff0e0100                                ....

0001a078 <DefaultChannels920KR>:
   1a078:	50015001 00005001                       .P.P.P..

0001a080 <DefaultDrParamsKR>:
   1a080:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   1a090:	0033000e 01070ac6 0073001a 010709c2     ..3.......s.....
   1a0a0:	00f20031 010708be 00f20053 010707bc     1.......S.......

0001a0b0 <DefaultChannels915>:
   1a0b0:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   1a0c0:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   1a0d0:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   1a0e0:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   1a0f0:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   1a100:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   1a110:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   1a120:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   1a130:	44014401 44014401 44014401 44014401     .D.D.D.D.D.D.D.D

0001a140 <DefaultDrParamsNA>:
   1a140:	000b0012 01070ac6 00350005 01070906     ..........5.....
   1a150:	007d0007 01070801 00f2000c 010707fe     ..}.............
   1a160:	00f20016 010908fc 00000000 010a0000     ................
   1a170:	00000000 010a0000 00000000 010a0000     ................
   1a180:	00350023 01090cd5 00810007 01090b06     #.5.............
   1a190:	00f20007 01090a01 00f2000c 010909fe     ................
   1a1a0:	00f20016 010908fc 00f2002a 010907fc     ........*.......
   1a1b0:	00006034 00006034 00006034 00006034     4`..4`..4`..4`..
   1a1c0:	0000609a 00006100 000060b2 0000609a     .`...a...`...`..

0001a1d0 <taskHandlers>:
   1a1d0:	00009e51 000108b9 0000fead 00009747     Q...........G...
   1a1e0:	0000abd9                                ....

0001a1e4 <tc_interrupt_vectors.13496>:
   1a1e4:	14131211 00000015 0000a994 0000a8cc     ................
   1a1f4:	0000a8d4 0000a8dc 0000a8e4 0000a8ec     ................
   1a204:	0000a8f4 0000a8fc 0000a870 0000a904     ........p.......
   1a214:	0000a90c 0000a914 0000a91c 0000a924     ............$...
   1a224:	0000a92c 0000a934 0000a93c 0000a944     ,...4...<...D...
   1a234:	0000a94c 0000a954 0000a95c 0000a964     L...T...\...d...
   1a244:	0000a994 0000a96c 0000a974 0000a97c     ....l...t...|...
   1a254:	0000a984 0000a994 0000a994 0000a994     ................
   1a264:	0000a98c 0000a9c6 0000a9ce 0000a9d6     ................
   1a274:	0000a9de 0000a9e6 0000a9f6 0000a9fe     ................
   1a284:	0000aa06 0000a9aa 0000aa0e 0000aa16     ................
   1a294:	0000aa1e 0000aa26 0000aa2e 0000aa36     ....&.......6...
   1a2a4:	0000aa3e 0000aa46 0000aa4e 0000aa56     >...F...N...V...
   1a2b4:	0000aa5e 0000aa66 0000aa6e 0000aa9e     ^...f...n.......
   1a2c4:	0000aa76 0000aa7e 0000aa86 0000aa8e     v...~...........
   1a2d4:	0000a9ee 0000aa9e 0000aa9e 0000aa96     ................
   1a2e4:	0000b010 0000b020 0000b028 0000b030     .... ...(...0...
   1a2f4:	0000b038 0000b040 0000b048 0000b050     8...@...H...P...
   1a304:	0000b058 0000b018 0000b070 0000b068     X.......p...h...
   1a314:	0000b070 0000b060                       p...`...

0001a31c <appTaskHandlers>:
   1a31c:	0000ab69 0000b1a9                       i.......

0001a324 <bandStrings>:
   1a324:	0001ae48 0001ae5c 0001a818 0001ae64     H...\.......d...
   1a334:	0001ae6c 0001ae74 0001ae7c 0001ae84     l...t...|.......
   1a344:	0001ae8c 0001ae98                       ........

0001a34c <demoMcastAppsKey>:
   1a34c:	16157e2b a6d2ae28 16157e2b a6d2ae28     +~..(...+~..(...

0001a35c <demoMcastNwksKey>:
   1a35c:	27268f3c b7e3bf39 992608bc 4d50d01a     <.&'9.....&...PM
   1a36c:	2e2e6425 00000000 202a2a2a 65636552     %d......*** Rece
   1a37c:	64657669 204c4420 61746144 2a2a2a20     ived DL Data ***
   1a38c:	00000d0a 6172460a 5220656d 69656365     .....Frame Recei
   1a39c:	20646576 70207461 2074726f 0d0a6425     ved at port %d..
   1a3ac:	00000000 6172460a 4c20656d 74676e65     .....Frame Lengt
   1a3bc:	202d2068 0d0a6425 00000000 6464410a     h - %d.......Add
   1a3cc:	73736572 30202d20 786c2578 00000d0a     ress - 0x%lx....
   1a3dc:	7961500a 64616f6c 0000203a 00007825     .Payload: ..%x..
   1a3ec:	2a2a0a0d 2a2a2a2a 2a2a2a2a 2a2a2a2a     ..**************
   1a3fc:	2a2a2a2a 2a2a2a2a 0d2a2a2a 00000000     ***********.....
   1a40c:	65636552 64657669 4b434120 726f6620     Received ACK for
   1a41c:	6e6f4320 6d726966 64206465 0d617461      Confirmed data.
   1a42c:	00000000 41520d0a 5f4f4944 445f4f4e     ......RADIO_NO_D
   1a43c:	20415441 00000d0a 41520d0a 5f4f4944     ATA ......RADIO_
   1a44c:	41544144 5a49535f 0d0a2045 00000000     DATA_SIZE ......
   1a45c:	41520d0a 5f4f4944 41564e49 5f44494c     ..RADIO_INVALID_
   1a46c:	20514552 00000d0a 41520d0a 5f4f4944     REQ ......RADIO_
   1a47c:	59535542 000d0a20 41520d0a 5f4f4944     BUSY .....RADIO_
   1a48c:	5f54554f 525f464f 45474e41 000d0a20     OUT_OF_RANGE ...
   1a49c:	41520d0a 5f4f4944 55534e55 524f5050     ..RADIO_UNSUPPOR
   1a4ac:	5f444554 52545441 000d0a20 41520d0a     TED_ATTR .....RA
   1a4bc:	5f4f4944 4e414843 5f4c454e 59535542     DIO_CHANNEL_BUSY
   1a4cc:	000d0a20 574e0d0a 4f4e5f4b 4f4a5f54      .....NWK_NOT_JO
   1a4dc:	44454e49 000d0a20 4e490d0a 494c4156     INED .....INVALI
   1a4ec:	41505f44 454d4152 20524554 00000d0a     D_PARAMETER ....
   1a4fc:	454b0d0a 4e5f5359 495f544f 4954494e     ..KEYS_NOT_INITI
   1a50c:	5a494c41 0a204445 0000000d 49530d0a     ALIZED .......SI
   1a51c:	544e454c 4d4d495f 41494445 594c4554     LENT_IMMEDIATELY
   1a52c:	5443415f 0a455649 0000000d 43460d0a     _ACTIVE.......FC
   1a53c:	5f52544e 4f525245 45525f52 4e494f4a     NTR_ERROR_REJOIN
   1a54c:	45454e5f 20444544 00000d0a 4e490d0a     _NEEDED ......IN
   1a55c:	494c4156 55425f44 52454646 4e454c5f     VALID_BUFFER_LEN
   1a56c:	20485447 00000d0a 414d0d0a 41505f43     GTH ......MAC_PA
   1a57c:	44455355 0d0a2020 00000000 4f4e0d0a     USED  ........NO
   1a58c:	4148435f 4c454e4e 4f465f53 20444e55     _CHANNELS_FOUND 
   1a59c:	00000d0a 55420d0a 0d0a5953 00000000     ......BUSY......
   1a5ac:	4f4e0d0a 4b43415f 000d0a20 4c410d0a     ..NO_ACK .....AL
   1a5bc:	44414552 4f4a2059 4e494e49 53492047     READY JOINING IS
   1a5cc:	204e4920 474f5250 53534552 000d0a20      IN PROGRESS ...
   1a5dc:	45520d0a 52554f53 555f4543 4156414e     ..RESOURCE_UNAVA
   1a5ec:	42414c49 0a20454c 0000000d 4e490d0a     ILABLE .......IN
   1a5fc:	494c4156 45525f44 53455551 0d0a2054     VALID_REQUEST ..
   1a60c:	00000000 43460d0a 5f52544e 4f525245     ......FCNTR_ERRO
   1a61c:	0d0a2052 00000000 494d0d0a 52455f43     R ........MIC_ER
   1a62c:	20524f52 00000d0a 4e490d0a 494c4156     ROR ......INVALI
   1a63c:	544d5f44 20455059 00000d0a 434d0d0a     D_MTYPE ......MC
   1a64c:	5f545341 5f524448 41564e49 2044494c     AST_HDR_INVALID 
   1a65c:	00000d0a 4e490d0a 494c4156 41505f44     ......INVALID_PA
   1a66c:	54454b43 000d0a20 4e4b4e55 204e574f     CKET ...UNKNOWN 
   1a67c:	4f525245 000d0a52 6e617254 73696d73     ERROR...Transmis
   1a68c:	6e6f6973 63755320 73736563 0000000d     sion Success....
   1a69c:	2078540a 656d6954 0a74756f 0000000d     .Tx Timeout.....
   1a6ac:	4e550d0a 574f4e4b 5245204e 0a524f52     ..UNKNOWN ERROR.
   1a6bc:	0000000d 2a2a0d0a 2a2a2a2a 2a2a2a2a     ......**********
   1a6cc:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1a6dc:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1a6ec:	2a2a2a2a 0a2a2a2a 0000000d 696f4a0a     *******......Joi
   1a6fc:	676e696e 63755320 73736563 0a6c7566     ning Successful.
   1a70c:	0000000d 7665440a 72646441 7830203a     .....DevAddr: 0x
   1a71c:	0a786c25 0000000d 6464410a 73736572     %lx......Address
   1a72c:	6e6f6320 63696c66 65622074 65657774      conflict betwee
   1a73c:	6544206e 65636976 64644120 73736572     n Device Address
   1a74c:	646e6120 6c754d20 61636974 67207473      and Multicast g
   1a75c:	70756f72 64646120 73736572 00000d0a     roup address....
   1a76c:	6f4e200a 65724620 68432065 656e6e61     . No Free Channe
   1a77c:	6f66206c 00646e75 494d200a 72452043     l found.. MIC Er
   1a78c:	00726f72 7254200a 6d736e61 69737369     ror.. Transmissi
   1a79c:	54206e6f 6f656d69 00007475 696f4a0a     on Timeout...Joi
   1a7ac:	676e696e 6e654420 0a646569 0000000d     ning Denied.....
   1a7bc:	2a2a0d0a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ..**************
   1a7cc:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1a7dc:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1a7ec:	2a2a2a2a 2a2a2a2a 000d0a2a 61526f4c     *********...LoRa
   1a7fc:	204e4157 74616557 20726568 74617453     WAN Weather Stat
   1a80c:	206e6f69 6f6d6544 0000000d 3139414e     ion Demo....NA91
   1a81c:	00000035 65520a0d 6e6f6967 62206c61     5.....Regional b
   1a82c:	20646e61 656c6573 64657463 20736920     and selected is 
   1a83c:	0a0d7325 00000000 6f727245 54532072     %s......Error ST
   1a84c:	20455441 65746e45 0d646572 00000000     ATE Entered.....
   1a85c:	2a0d0a0a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ...*************
   1a86c:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1a87c:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1a88c:	2a2a2a2a 2a2a2a2a 0d0a2a2a 00000000     **********......
   1a89c:	5f534c4d 5f4b4453 5f305f31 00335f50     MLS_SDK_1_0_P_3.
   1a8ac:	694d0d0a 636f7263 20706968 61526f4c     ..Microchip LoRa
   1a8bc:	204e4157 63617453 7325206b 00000a0d     WAN Stack %s....
   1a8cc:	6e490a0d 2d207469 63755320 73736563     ..Init - Success
   1a8dc:	0d6c7566 00000000 7473614c 6e6f6320     ful.....Last con
   1a8ec:	75676966 20646572 69676552 6c616e6f     figured Regional
   1a8fc:	6e616220 73252064 00000a0d 73657250      band %s....Pres
   1a90c:	6e612073 656b2079 6f742079 61686320     s any key to cha
   1a91c:	2065676e 646e6162 43200a0d 69746e6f     nge band.. Conti
   1a92c:	6e69756e 6e692067 20732520 00206e69     nuing in %s in .
   1a93c:	696f4a0a 6170206e 656d6172 73726574     .Join parameters
   1a94c:	696e6920 6c616974 74617a69 206e6f69      initialization 
   1a95c:	6c696166 0d0a6465 00000000 736e550a     failed.......Uns
   1a96c:	6f707075 64657472 76654420 20656369     upported Device 
   1a97c:	65707954 00000d0a 696f4a0a 6552206e     Type.....Join Re
   1a98c:	73657571 65532074 6620746e 2520726f     quest Sent for %
   1a99c:	000d0a73 2a2a2a0a 2a2a2a2a 2a2a2a2a     s....***********
   1a9ac:	2a2a2a2a 6c707041 74616369 206e6f69     ****Application 
   1a9bc:	666e6f43 72756769 6f697461 2a2a2a6e     Configuration***
   1a9cc:	2a2a2a2a 2a2a2a2a 2a2a2a2a 00000d0a     ************....
   1a9dc:	7665440a 65707954 00203a20 53414c43     .DevType : .CLAS
   1a9ec:	0a412053 0000000d 53414c43 0a432053     S A.....CLASS C.
   1a9fc:	0000000d 7463410a 74617669 546e6f69     .....ActivationT
   1aa0c:	20657079 0000203a 4141544f 00000d0a     ype : ..OTAA....
   1aa1c:	6172540a 696d736e 6f697373 7954206e     .Transmission Ty
   1aa2c:	2d206570 00000020 464e4f43 454d5249     pe - ...CONFIRME
   1aa3c:	000d0a44 6f50460a 2d207472 0a642520     D....FPort - %d.
   1aa4c:	0000000d 2a2a2a0a 2a2a2a2a 2a2a2a2a     .....***********
   1aa5c:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1aa6c:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1aa7c:	2a2a2a2a 2a2a2a2a 2a2a2a2a 00000d0a     ************....
   1aa8c:	00007830 78323025 00000000 726f6c0a     0x..%02x.....lor
   1aa9c:	6e617761 6375735f 73736563 00000d0a     awan_success....
   1aaac:	726f6c0a 6e617761 6174735f 3a206574     .lorawan_state :
   1aabc:	61747320 425f6b63 0a797375 0000000d      stack_Busy.....
   1aacc:	7665640a 5f656369 5f746f6e 6e696f6a     .device_not_join
   1aadc:	745f6465 656e5f6f 726f7774 000d0a6b     ed_to_network...
   1aaec:	766e690a 64696c61 7261705f 74656d61     .invalid_paramet
   1aafc:	0d0a7265 00000000 79656b0a 6f6e5f73     er.......keys_no
   1ab0c:	6e695f74 61697469 657a696c 000d0a64     t_initialized...
   1ab1c:	6c69730a 5f746e65 656d6d69 74616964     .silent_immediat
   1ab2c:	5f796c65 69746361 0d0a6576 00000000     ely_active......
   1ab3c:	6172660a 6f63656d 65746e75 72655f72     .framecounter_er
   1ab4c:	5f726f72 6f6a6572 6e5f6e69 65646565     ror_rejoin_neede
   1ab5c:	000d0a64 766e690a 64696c61 6675625f     d....invalid_buf
   1ab6c:	5f726566 676e656c 0d0a6874 00000000     fer_length......
   1ab7c:	43414d0a 7561705f 0a646573 0000000d     .MAC_paused.....
   1ab8c:	5f6f6e0a 65657266 6168635f 6c656e6e     .no_free_channel
   1ab9c:	6f665f73 0a646e75 0000000d 7165720a     s_found......req
   1abac:	74736575 766e695f 64696c61 00000d0a     uest_invalid....
   1abbc:	6572700a 6f6a5f76 725f6e69 65757165     .prev_join_reque
   1abcc:	695f7473 72705f6e 6572676f 0d0a7373     st_in_progress..
   1abdc:	00000000 7165720a 74736575 6961665f     .....request_fai
   1abec:	2064656c 0d0a6425 00000000 44500a0d     led %d........PD
   1abfc:	65525f53 726f7473 6f697461 6174536e     S_RestorationSta
   1ac0c:	3a737574 63755320 73736563 0000000d     tus: Success....
   1ac1c:	6e696f6a 74617453 203a7375 6e696f4a     joinStatus: Join
   1ac2c:	000d6465 6e696f4a 74617453 3a207375     ed..JoinStatus :
   1ac3c:	6e654420 0d646569 00000000 646e6142      Denied.....Band
   1ac4c:	7325203a 00000a0d 74736552 7461726f     : %s....Restorat
   1ac5c:	206e6f69 6c696166 000d6465 2078540a     ion failed...Tx 
   1ac6c:	61746144 6e655320 000d2074 7465520a     Data Sent ...Ret
   1ac7c:	4a207972 2d6e696f 696f4a20 6552206e     ry Join- Join Re
   1ac8c:	73657571 65532074 0d0a746e 00000000     quest Sent......
   1ac9c:	2a2a2a0a 2a2a2a2a 2a2a2a2a 2a2a2a2a     .***************
   1acac:	2a2a2a2a 696f4a2a 6150206e 656d6172     *****Join Parame
   1acbc:	73726574 2a2a2a2a 2a2a2a2a 2a2a2a2a     ters************
   1accc:	2a2a2a2a 2a2a2a2a 00000d0a 7070410a     ********.....App
   1acdc:	73736553 4b6e6f69 3a207965 00000020     SessionKey : ...
   1acec:	6b774e0a 73736553 4b6e6f69 3a207965     .NwkSessionKey :
   1acfc:	00000020 7665440a 20495545 0000203a      ....DevEUI : ..
   1ad0c:	7070410a 20495545 0000203a 7070410a     .AppEUI : ...App
   1ad1c:	2079654b 0000203a 2a2a2a0a 2a2a2a2a     Key : ...*******
   1ad2c:	2a2a2a2a 2a2a2a2a 746c754d 73616369     ********Multicas
   1ad3c:	61502074 656d6172 73726574 2a2a2a2a     t Parameters****
   1ad4c:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1ad5c:	00000d0a 61634d0a 70417473 73655370     .....McastAppSes
   1ad6c:	6e6f6973 2079654b 0000203a 61634d0a     sionKey : ...Mca
   1ad7c:	774e7473 7365536b 6e6f6973 2079654b     stNwkSessionKey 
   1ad8c:	0000203a 61634d0a 72477473 4170756f     : ...McastGroupA
   1ad9c:	20726464 7830203a 0a786c25 0000000d     ddr : 0x%lx.....
   1adac:	61634d0a 72477473 4170756f 53726464     .McastGroupAddrS
   1adbc:	75746174 203a2073 6c696146 0d0a6465     tatus : Failed..
   1adcc:	00000000 6c754d0a 61636974 74537473     .....MulticastSt
   1addc:	73757461 45203a20 6c62616e 0d0a6465     atus : Enabled..
   1adec:	00000000 6c754d0a 61636974 74537473     .....MulticastSt
   1adfc:	73757461 46203a20 656c6961 000d0a64     atus : Failed...
   1ae0c:	2a2a2a0a 2a2a2a2a 2a2a2a2a 2a2a2a2a     .***************
   1ae1c:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1ae2c:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1ae3c:	2a2a2a2a 2a2a2a2a 000d0a2a 74636146     *********...Fact
   1ae4c:	4479726f 75616665 6552746c 00746573     oryDefaultReset.
   1ae5c:	36385545 00000038 31395541 00000035     EU868...AU915...
   1ae6c:	32395341 00000033 394e504a 00003332     AS923...JPN923..
   1ae7c:	3239524b 00000030 38444e49 00003536     KR920...IND865..
   1ae8c:	61656c43 44502072 00000053 65736552     Clear PDS...Rese
   1ae9c:	6f422074 00647261 6c730a0d 5f706565     t Board...sleep_
   1aeac:	25206b6f 6d20646c 000a0d73 74696e49     ok %ld ms...Init
   1aebc:	696c6169 6974617a 6f206e6f 65532066     ialization of Se
   1aecc:	69727563 6d207974 6c75646f 73692065     curity module is
   1aedc:	69616620 0d64656c 00000000 7473614c      failed.....Last
   1aeec:	73657220 63207465 65737561 0000203a      reset cause: ..
   1aefc:	74737953 52206d65 74657365 71655220     System Reset Req
   1af0c:	74736575 0000000d 63746157 676f6468     uest....Watchdog
   1af1c:	73655220 000d7465 65747845 6c616e72      Reset..External
   1af2c:	73655220 000d7465 776f7242 754f206e      Reset..Brown Ou
   1af3c:	33332074 74654420 6f746365 65522072     t 33 Detector Re
   1af4c:	0d746573 00000000 776f7242 754f206e     set.....Brown Ou
   1af5c:	32312074 74654420 6f746365 65522072     t 12 Detector Re
   1af6c:	0d746573 00000000 65776f50 6e4f2d72     set.....Power-On
   1af7c:	73655220 000d7465 61720a0d 65532077      Reset....raw Se
   1af8c:	726f736e 74614420 7b203a61 00000020     nsor Data: { ...
   1af9c:	58257830 0000002c 00000d7d 6c532e2e     0x%X,...}.....Sl
   1afac:	69706565 2e2e676e c180000d                       eeping.....

0001afb7 <FskSyncWordBuff>:
   1afb7:	01c194c1                                         ...

0001afba <macEndDevCmdReplyLen>:
   1afba:	02010201 01010203 0c0a0802                       .........

0001afc3 <maxEIRPTable>:
   1afc3:	0d0c0a08 1412100e 1b1a1815 24211e1d     ..............!$
	...

0001afd4 <pds_mac_fid1_item_list>:
   1afd4:	200018ca 00010000 200018c8 06010100     ... ....... ....
   1afe4:	2000185c 0c040200 200018cb 15010300     \.. ....... ....
   1aff4:	200018cc 1b040400 2000191c 24040500     ... ....... ...$
   1b004:	200018f8 2d040600 2000190c 36100700     ... ...-... ...6
   1b014:	200018fc 4b100800 200018e6 60040900     ... ...K... ...`
   1b024:	200018b5 69010b00 20001864 6f010a00     ... ...id.. ...o
   1b034:	2000189c 75020c00 2000189e 7c020d00     ... ...u... ...|
   1b044:	200018a0 83020e00 200018a2 8a020f00     ... ....... ....
   1b054:	200018a4 91021000 200018a6 98021100     ... ....... ....
   1b064:	200018a8 9f011200 200018a9 a5011300     ... ....... ....
   1b074:	200018ae b1011500 200018ad ab011400     ... ....... ....
   1b084:	20001854 b7041600                       T.. ....

0001b08c <pds_mac_fid2_item_list>:
   1b08c:	2000183e 00050001 200018c2 0a010101     >.. ....... ....
   1b09c:	200017d4 10010201 200017d5 16040301     ... ....... ....
   1b0ac:	200017d9 1f100401 200017e9 34100501     ... ....... ...4
   1b0bc:	20001819 49100601 20001829 5e080701     ... ...I).. ...^
   1b0cc:	20001831 6b080801 200018aa 78020901     1.. ...k... ...x
   1b0dc:	20001858 7f040a01 20001850 88040b01     X.. ....P.. ....
   1b0ec:	200018b3 91010c01 200019b4 97010d01     ... ....... ....
   1b0fc:	200019b5 9d010e01                       ... ....

0001b104 <lorawanHandlers>:
   1b104:	0000fd61 0000fc75 0000fe35 000000fd     a...u...5.......

0001b114 <radioTaskHandlers>:
   1b114:	000114ad 000115ad 000112cd 00010b51     ............Q...
   1b124:	000118d5 0001249c 0001246c 0001247e     .....$..l$..~$..
   1b134:	000123c0 0001247e 00012462 0001247e     .#..~$..b$..~$..
   1b144:	000123c0 0001246c 0001246c 00012462     .#..l$..l$..b$..
   1b154:	000123c0 000123c8 000123c8 000123c8     .#...#...#...#..
   1b164:	00012484 0001246c 0001246c 00012440     .$..l$..l$..@$..
   1b174:	00012524 00012440 00012462 00012440     $%..@$..b$..@$..
   1b184:	00012524 0001246c 0001246c 00012462     $%..l$..l$..b$..
   1b194:	00012524 000123c8 000123c8 000123c8     $%...#...#...#..
   1b1a4:	0001252e 0001281c 0001276c 0001276c     .%...(..l'..l'..
   1b1b4:	0001276a 0001280e 0001280e 00012804     j'...(...(...(..
   1b1c4:	0001276a 0001280e 00012804 0001280e     j'...(...(...(..
   1b1d4:	0001276a 00012814 00012814 00012814     j'...(...(...(..
   1b1e4:	000128a4 000135ec 000135ce 00013588     .(...5...5...5..
   1b1f4:	000134a6 00013588 000135c0 00013588     .4...5...5...5..
   1b204:	000134a6 000135ce 000135ce 000135c0     .4...5...5...5..
   1b214:	000134a6 0001349e 0001349e 0001349e     .4...4...4...4..
   1b224:	00013804 00013c4c 00013b0c 00013b0c     .8..L<...;...;..
   1b234:	00013b08 00013c24 00013c24 00013c16     .;..$<..$<...<..
   1b244:	00013b08 00013c24 00013c16 00013c24     .;..$<...<..$<..
   1b254:	00013b08 00013c2c 00013c2c 00013c2c     .;..,<..,<..,<..
   1b264:	00013e30                                0>..

0001b268 <_global_impure_ptr>:
   1b268:	20000070 0000000a 00015c1e 00015cf2     p.. .....\...\..
   1b278:	00015cf2 00015c0a 00015cf2 00015cf2     .\...\...\...\..
   1b288:	00015cf2 00015cf2 00015cf2 00015cf2     .\...\...\...\..
   1b298:	00015cc4 000157d6 00015cf2 000157cc     .\...W...\...W..
   1b2a8:	000157e0 00015cf2 00015c14 000159a0     .W...\...\...Y..
   1b2b8:	000159a0 000159a0 000159a0 000159a0     .Y...Y...Y...Y..
   1b2c8:	000159a0 000159a0 000159a0 000159a0     .Y...Y...Y...Y..
   1b2d8:	00015cf2 00015cf2 00015cf2 00015cf2     .\...\...\...\..
   1b2e8:	00015cf2 00015cf2 00015cf2 00015cf2     .\...\...\...\..
   1b2f8:	00015cf2 00015cf2 00015cda 00015c2e     .\...\...\...\..
   1b308:	00015cf2 00015c2e 00015cf2 00015cf2     .\...\...\...\..
   1b318:	00015cf2 00015cf2 00015b94 00015cf2     .\...\...[...\..
   1b328:	00015cf2 00015b9e 00015cf2 00015cf2     .\...[...\...\..
   1b338:	00015cf2 00015cf2 00015cf2 00015bcc     .\...\...\...[..
   1b348:	00015cf2 00015cf2 00015bfa 00015cf2     .\...\...[...\..
   1b358:	00015cf2 00015cf2 00015cf2 00015cf2     .\...\...\...\..
   1b368:	00015cf2 00015cf2 00015cf2 00015cf2     .\...\...\...\..
   1b378:	00015cf2 000159e0 00015a16 00015c2e     .\...Y...Z...\..
   1b388:	00015c2e 00015c2e 00015abe 00015a16     .\...\...Z...Z..
   1b398:	00015cf2 00015cf2 00015ac8 00015cf2     .\...\...Z...\..
   1b3a8:	00015ada 00015cee 00015b08 00015b32     .Z...\...[..2[..
   1b3b8:	00015cf2 00015b3c 00015cf2 00015cea     .\..<[...\...\..
   1b3c8:	00015cf2 00015cf2 0001582e 00464e49     .\...\...X..INF.
   1b3d8:	00666e69 004e414e 006e616e 33323130     inf.NAN.nan.0123
   1b3e8:	37363534 42413938 46454443 00000000     456789ABCDEF....
   1b3f8:	33323130 37363534 62613938 66656463     0123456789abcdef
   1b408:	00000000 6c756e28 0000296c              ....(null)..

0001b414 <blanks.7238>:
   1b414:	20202020 20202020 20202020 20202020                     

0001b424 <zeroes.7239>:
   1b424:	30303030 30303030 30303030 30303030     0000000000000000
   1b434:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   1b444:	00000000                                ....

0001b448 <__mprec_bigtens>:
   1b448:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   1b458:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   1b468:	7f73bf3c 75154fdd                       <.s..O.u

0001b470 <__mprec_tens>:
   1b470:	00000000 3ff00000 00000000 40240000     .......?......$@
   1b480:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   1b490:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   1b4a0:	00000000 412e8480 00000000 416312d0     .......A......cA
   1b4b0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   1b4c0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   1b4d0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   1b4e0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   1b4f0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   1b500:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   1b510:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   1b520:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   1b530:	79d99db4 44ea7843                       ...yCx.D

0001b538 <p05.6055>:
   1b538:	00000005 00000019 0000007d 00000043     ........}...C...
   1b548:	49534f50 00000058 0000002e              POSIX.......

0001b554 <_ctype_>:
   1b554:	20202000 20202020 28282020 20282828     .         ((((( 
   1b564:	20202020 20202020 20202020 20202020                     
   1b574:	10108820 10101010 10101010 10101010      ...............
   1b584:	04040410 04040404 10040404 10101010     ................
   1b594:	41411010 41414141 01010101 01010101     ..AAAAAA........
   1b5a4:	01010101 01010101 01010101 10101010     ................
   1b5b4:	42421010 42424242 02020202 02020202     ..BBBBBB........
   1b5c4:	02020202 02020202 02020202 10101010     ................
   1b5d4:	00000020 00000000 00000000 00000000      ...............
	...

0001b658 <_init>:
   1b658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b65a:	46c0      	nop			; (mov r8, r8)
   1b65c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1b65e:	bc08      	pop	{r3}
   1b660:	469e      	mov	lr, r3
   1b662:	4770      	bx	lr

0001b664 <__init_array_start>:
   1b664:	00016e35 	.word	0x00016e35

0001b668 <__frame_dummy_init_array_entry>:
   1b668:	000000dd                                ....

0001b66c <_fini>:
   1b66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b66e:	46c0      	nop			; (mov r8, r8)
   1b670:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1b672:	bc08      	pop	{r3}
   1b674:	469e      	mov	lr, r3
   1b676:	4770      	bx	lr

0001b678 <__fini_array_start>:
   1b678:	000000b5 	.word	0x000000b5
